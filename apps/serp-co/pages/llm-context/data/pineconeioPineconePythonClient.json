[
  {
    "owner": "pinecone-io",
    "repo": "pinecone-python-client",
    "content": "TITLE: Creating and Querying a Pinecone Index with Custom Vectors\nDESCRIPTION: A complete example demonstrating how to instantiate the Pinecone client, create a serverless index, upsert vectors with metadata, and perform queries with filtering.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    ServerlessSpec,\n    CloudProvider,\n    AwsRegion,\n    VectorType\n)\n\n# 1. Instantiate the Pinecone client\npc = Pinecone(api_key='YOUR_API_KEY')\n\n# 2. Create an index\nindex_config = pc.create_index(\n    name=\"index-name\",\n    dimension=1536,\n    spec=ServerlessSpec(\n        cloud=CloudProvider.AWS,\n        region=AwsRegion.US_EAST_1\n    ),\n    vector_type=VectorType.DENSE\n)\n\n# 3. Instantiate an Index client\nidx = pc.Index(host=index_config.host)\n\n# 4. Upsert embeddings\nidx.upsert(\n    vectors=[\n        (\"id1\", [0.1, 0.2, 0.3, 0.4, ...], {\"metadata_key\": \"value1\"}),\n        (\"id2\", [0.2, 0.3, 0.4, 0.5, ...], {\"metadata_key\": \"value2\"}),\n    ],\n    namespace=\"example-namespace\"\n)\n\n# 5. Query your index using an embedding\nquery_embedding = [...] # list should have length == index dimension\nidx.query(\n    vector=query_embedding,\n    top_k=10,\n    include_metadata=True,\n    filter={\"metadata_key\": { \"$eq\": \"value1\" }}\n)\n```\n\n----------------------------------------\n\nTITLE: Using Pinecone with integrated inference\nDESCRIPTION: Python code demonstrating how to use Pinecone's integrated inference capabilities, including creating an index configured for a specific embedding model, upserting records, and performing semantic search with reranking.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/pdoc/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    CloudProvider,\n    AwsRegion,\n    EmbedModel,\n)\n\n# 1. Instantiate the Pinecone client\npc = Pinecone(api_key=\"<<PINECONE_API_KEY>>\")\n\n# 2. Create an index configured for use with a particular model\nindex_config = pc.create_index_for_model(\n    name=\"my-model-index\",\n    cloud=CloudProvider.AWS,\n    region=AwsRegion.US_EAST_1,\n    embed=IndexEmbed(\n        model=EmbedModel.Multilingual_E5_Large,\n        field_map={\"text\": \"my_text_field\"}\n    )\n)\n\n# 3. Instantiate an Index client\nidx = pc.Index(host=index_config.host)\n\n# 4. Upsert records\nidx.upsert_records(\n    namespace=\"my-namespace\",\n    records=[\n        {\n            \"_id\": \"test1\",\n            \"my_text_field\": \"Apple is a popular fruit known for its sweetness and crisp texture.\",\n        },\n        {\n            \"_id\": \"test2\",\n            \"my_text_field\": \"The tech company Apple is known for its innovative products like the iPhone.\",\n        },\n        {\n            \"_id\": \"test3\",\n            \"my_text_field\": \"Many people enjoy eating apples as a healthy snack.\",\n        },\n        {\n            \"_id\": \"test4\",\n            \"my_text_field\": \"Apple Inc. has revolutionized the tech industry with its sleek designs and user-friendly interfaces.\",\n        },\n        {\n            \"_id\": \"test5\",\n            \"my_text_field\": \"An apple a day keeps the doctor away, as the saying goes.\",\n        },\n        {\n            \"_id\": \"test6\",\n            \"my_text_field\": \"Apple Computer Company was founded on April 1, 1976, by Steve Jobs, Steve Wozniak, and Ronald Wayne as a partnership.\",\n        },\n    ],\n)\n\n# 5. Search for similar records\nfrom pinecone import SearchQuery, SearchRerank, RerankModel\n\nresponse = index.search_records(\n    namespace=\"my-namespace\",\n    query=SearchQuery(\n        inputs={\n            \"text\": \"Apple corporation\",\n        },\n        top_k=3\n    ),\n    rerank=SearchRerank(\n        model=RerankModel.Bge_Reranker_V2_M3,\n        rank_fields=[\"my_text_field\"],\n        top_n=3,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Pinecone with Integrated Inference for Text Data\nDESCRIPTION: Demonstrates how to create an index configured with a specific embedding model, upsert text records that will be automatically embedded, and perform semantic search with reranking.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    CloudProvider,\n    AwsRegion,\n    EmbedModel,\n)\n\n# 1. Instantiate the Pinecone client\npc = Pinecone(api_key=\"<<PINECONE_API_KEY>>\")\n\n# 2. Create an index configured for use with a particular model\nindex_config = pc.create_index_for_model(\n    name=\"my-model-index\",\n    cloud=CloudProvider.AWS,\n    region=AwsRegion.US_EAST_1,\n    embed=IndexEmbed(\n        model=EmbedModel.Multilingual_E5_Large,\n        field_map={\"text\": \"my_text_field\"}\n    )\n)\n\n# 3. Instantiate an Index client\nidx = pc.Index(host=index_config.host)\n\n# 4. Upsert records\nidx.upsert_records(\n    namespace=\"my-namespace\",\n    records=[\n        {\n            \"_id\": \"test1\",\n            \"my_text_field\": \"Apple is a popular fruit known for its sweetness and crisp texture.\",\n        },\n        {\n            \"_id\": \"test2\",\n            \"my_text_field\": \"The tech company Apple is known for its innovative products like the iPhone.\",\n        },\n        {\n            \"_id\": \"test3\",\n            \"my_text_field\": \"Many people enjoy eating apples as a healthy snack.\",\n        },\n        {\n            \"_id\": \"test4\",\n            \"my_text_field\": \"Apple Inc. has revolutionized the tech industry with its sleek designs and user-friendly interfaces.\",\n        },\n        {\n            \"_id\": \"test5\",\n            \"my_text_field\": \"An apple a day keeps the doctor away, as the saying goes.\",\n        },\n        {\n            \"_id\": \"test6\",\n            \"my_text_field\": \"Apple Computer Company was founded on April 1, 1976, by Steve Jobs, Steve Wozniak, and Ronald Wayne as a partnership.\",\n        },\n    ],\n)\n\n# 5. Search for similar records\nfrom pinecone import SearchQuery, SearchRerank, RerankModel\n\nresponse = index.search_records(\n    namespace=\"my-namespace\",\n    query=SearchQuery(\n        inputs={\n            \"text\": \"Apple corporation\",\n        },\n        top_k=3\n    ),\n    rerank=SearchRerank(\n        model=RerankModel.Bge_Reranker_V2_M3,\n        rank_fields=[\"my_text_field\"],\n        top_n=3,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Bringing your own vectors to Pinecone\nDESCRIPTION: Python code demonstrating how to initialize Pinecone, create an index, and perform vector operations like upserting and querying with custom embeddings in a serverless environment.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/pdoc/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    ServerlessSpec,\n    CloudProvider,\n    AwsRegion,\n    VectorType\n)\n\n# 1. Instantiate the Pinecone client\npc = Pinecone(api_key='YOUR_API_KEY')\n\n# 2. Create an index\nindex_config = pc.create_index(\n    name=\"index-name\",\n    dimension=1536,\n    spec=ServerlessSpec(\n        cloud=CloudProvider.AWS,\n        region=AwsRegion.US_EAST_1\n    ),\n    vector_type=VectorType.DENSE\n)\n\n# 3. Instantiate an Index client\nidx = pc.Index(host=index_config.host)\n\n# 4. Upsert embeddings\nidx.upsert(\n    vectors=[\n        (\"id1\", [0.1, 0.2, 0.3, 0.4, ...], {\"metadata_key\": \"value1\"}),\n        (\"id2\", [0.2, 0.3, 0.4, 0.5, ...], {\"metadata_key\": \"value2\"}),\n    ],\n    namespace=\"example-namespace\"\n)\n\n# 5. Query your index using an embedding\nquery_embedding = [...] # list should have length == index dimension\nidx.query(\n    vector=query_embedding,\n    top_k=10,\n    include_metadata=True,\n    filter={\"metadata_key\": { \"$eq\": \"value1\" }}\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Vectors to Pinecone Index\nDESCRIPTION: Example of adding or updating vectors in a Pinecone index. Creates vectors with IDs, embedding values, and metadata, then upserts them to a specific namespace in the index.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_data/index-usage-byov.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\nindex = pc.Index(host=os.environ.get('INDEX_HOST'))\n\nupsert_response = index.upsert(\n    vectors=[\n        (\"vec1\", [0.1, 0.2, 0.3, 0.4], {\"genre\": \"drama\"}),\n        (\"vec2\", [0.2, 0.3, 0.4, 0.5], {\"genre\": \"action\"}),\n    ],\n    namespace=\"example-namespace\"\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Pinecone Index with Metadata Filtering\nDESCRIPTION: Example of querying a Pinecone index with metadata filtering. Performs a vector similarity search with a query vector, specifying the number of results, including vector values and metadata, and filtering by genre using the $in operator.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_data/index-usage-byov.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\n# Find your index host by calling describe_index\n# through the Pinecone web console\nindex = pc.Index(host=os.environ.get('INDEX_HOST'))\n\nquery_response = index.query(\n    namespace=\"example-namespace\",\n    vector=[0.1, 0.2, 0.3, 0.4],\n    top_k=10,\n    include_values=True,\n    include_metadata=True,\n    filter={\n        \"genre\": {\"$in\": [\"comedy\", \"documentary\", \"drama\"]}\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Embeddings with Pinecone Inference API in Python\nDESCRIPTION: Demonstrates how to initialize Pinecone client and create embeddings for both documents and queries using the Inference API. Uses the Multilingual E5 Large model for generating embeddings with specific parameters for input type and truncation.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/inference-api.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone, EmbedModel\n\npc = Pinecone(api_key=\"YOUR_API_KEY\")\n\n# Embed documents\ntext = [\n    \"Turkey is a classic meat to eat at American Thanksgiving.\",\n    \"Many people enjoy the beautiful mosques in Turkey.\",\n]\ntext_embeddings = pc.inference.embed(\n    model=EmbedModel.Multilingual_E5_Large,\n    inputs=text,\n    parameters={\n        \"input_type\": \"passage\",\n        \"truncate\": \"END\"\n    },\n)\n\n# Upsert documents into Pinecone index\n\n# Embed a query\nquery = [\"How should I prepare my turkey?\"]\nquery_embeddings = pc.inference.embed(\n    model=model,\n    inputs=query,\n    parameters={\n        \"input_type\": \"query\",\n        \"truncate\": \"END\"\n    },\n)\n\n# Send query to Pinecone index to retrieve similar documents\n```\n\n----------------------------------------\n\nTITLE: Updating Vectors in Pinecone Index\nDESCRIPTION: Example of updating an existing vector in a Pinecone index. Updates both the vector values and metadata for a specific vector ID within a namespace.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_data/index-usage-byov.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\n# Find your index host by calling describe_index\n# through the Pinecone web console\nindex = pc.Index(host=os.environ.get('INDEX_HOST'))\n\nupdate_response = index.update(\n    id=\"vec1\",\n    values=[0.1, 0.2, 0.3, 0.4],\n    set_metadata={\"genre\": \"drama\"},\n    namespace=\"example-namespace\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Pinecone Client Initialization with Environment Variables\nDESCRIPTION: Demonstrates the simplest way to initialize the Pinecone client using environment variables. Relies on PINECONE_API_KEY being set in the environment.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/client-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone() # This reads the PINECONE_API_KEY env var\n```\n\n----------------------------------------\n\nTITLE: Creating Dense and Sparse Vector Indexes with Pinecone Python Client\nDESCRIPTION: This snippet demonstrates how to create serverless indexes for both dense and sparse embedding vectors using the Pinecone Python client. It shows the differences in configuration between dense and sparse vectors, including the specification of dimension and vector type.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/serverless-indexes.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    ServerlessSpec,\n    CloudProvider,\n    AwsRegion,\n    Metric,\n    VectorType\n)\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\npc.create_index(\n    name='index-for-dense-vectors',\n    dimension=1536,\n    metric=Metric.COSINE,\n    # vector_type=\"dense\" is the default value, so it can be omitted if you prefer\n    vector_type=VectorType.DENSE,\n    spec=ServerlessSpec(\n        cloud=CloudProvider.AWS,\n        region=AwsRegion.US_WEST_2\n    ),\n)\n\npc.create_index(\n    name='index-for-sparse-vectors',\n    metric=Metric.DOTPRODUCT,\n    vector_type=VectorType.SPARSE,\n    spec=ServerlessSpec(\n        cloud=CloudProvider.AWS,\n        region=AwsRegion.US_WEST_2\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Index Existence and Creation with Pinecone Python Client\nDESCRIPTION: Demonstrates how to check if an index exists and create it if not. Uses the Pinecone client to create a serverless index with specified dimensions and metrics in AWS.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone, ServerlessSpec, AwsRegion\n\npc = Pinecone()\n\nindex_name = \"my_index\"\nif not pc.has_index(name=index_name):\n    print(\"Index does not exist, creating...\")\n    pc.create_index(\n        name=index_name,\n        dimension=768,\n        metric=\"cosine\",\n        spec=ServerlessSpec(cloud=\"aws\", region=AwsRegion.US_WEST_2)\n    )\n```\n\n----------------------------------------\n\nTITLE: Upserting and Querying Sparse Vectors in Pinecone with Python\nDESCRIPTION: This code snippet shows how to upsert and query sparse vectors in a Pinecone index. It generates random sparse vectors, upserts them in batches, and then performs a query on the sparse index.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/upgrading.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport random\nfrom pinecone import Vector, SparseValues\n\ndef unique_random_integers(n, range_start, range_end):\n    if n > (range_end - range_start + 1):\n        raise ValueError(\"Range too small for the requested number of unique integers\")\n    return random.sample(range(range_start, range_end + 1), n)\n\n# Generate some random sparse vectors\nsparse_index.upsert(\n    vectors=[\n        Vector(\n            id=str(i),\n            sparse_values=SparseValues(\n                indices=unique_random_integers(10, 0, 10000),\n                values=[random.random() for j in range(10)]\n            )\n        ) for i in range(10000)\n    ],\n    batch_size=500,\n)\n\n# Querying sparse\nsparse_index.query(\n    top_k=10,\n    sparse_vector={\"indices\":[1,2,3,4,5], \"values\": [random.random()]*5}\n)\n```\n\n----------------------------------------\n\nTITLE: Describing Index Statistics with Pinecone Python Client\nDESCRIPTION: Example of getting statistics about a Pinecone index. Initializes a Pinecone client with an API key and retrieves statistics for an existing index using the describe_index_stats method.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_data/index-usage-byov.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\nindex = pc.Index(host=os.environ.get('INDEX_HOST'))\n\nindex_stats_response = index.describe_index_stats()\n```\n\n----------------------------------------\n\nTITLE: Deleting Vectors from Pinecone Index\nDESCRIPTION: Example of deleting vectors from a Pinecone index by ID. Connects to an existing index and removes specific vectors identified by their IDs from a specified namespace.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_data/index-usage-byov.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\n# Find your index host by calling describe_index\n# through the Pinecone web console\nindex = pc.Index(host=os.environ.get('INDEX_HOST'))\n\ndelete_response = index.delete(ids=[\"vec1\", \"vec2\"], namespace=\"example-namespace\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Pod Index with Metadata Configuration in Python\nDESCRIPTION: This example shows how to create a pod-based index with specific metadata configuration for high-cardinality metadata. It demonstrates setting up indexed fields and configuring replicas.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/pod-indexes.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone, PodSpec, PodType, PodIndexEnvironment\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\npc.create_index(\n    name=\"example-index-2\",\n    dimension=1536,\n    spec=PodSpec(\n        environment=PodIndexEnvironment.EU_WEST1_GCP,\n        pod_type=PodType.P1_X1,\n        metadata_config={\n            \"indexed\": [\"color\"]\n        },\n        replicas=2\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Serverless Index on Google Cloud Platform with Pinecone Python Client\nDESCRIPTION: This snippet illustrates how to create a serverless index on Google Cloud Platform (GCP) in the us-central1 region using the Pinecone Python client. It shows the configuration for GCP, including the cloud provider and region specification.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/serverless-indexes.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    ServerlessSpec,\n    CloudProvider,\n    GcpRegion,\n    Metric\n)\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\npc.create_index(\n    name='my-index',\n    dimension=1536,\n    metric=Metric.COSINE,\n    spec=ServerlessSpec(\n        cloud=CloudProvider.GCP,\n        region=GcpRegion.US_CENTRAL1\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Serverless Index on AWS with Pinecone Python Client\nDESCRIPTION: This snippet shows how to create a serverless index on Amazon Web Services (AWS) in the us-west-2 region using the Pinecone Python client. It demonstrates the configuration of cloud provider, region, and other index parameters.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/serverless-indexes.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    ServerlessSpec,\n    CloudProvider,\n    AwsRegion,\n    Metric,\n    VectorType\n)\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\npc.create_index(\n    name='my-index',\n    dimension=1536,\n    metric=Metric.COSINE,\n    spec=ServerlessSpec(\n        cloud=CloudProvider.AWS,\n        region=AwsRegion.US_WEST_2\n    ),\n    vector_type=VectorType.DENSE\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Serverless Index on Azure with Pinecone Python Client\nDESCRIPTION: This snippet demonstrates how to create a serverless index on Microsoft Azure using the Pinecone Python client. It shows the configuration for Azure, including the cloud provider and region specification for the EASTUS2 region.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/serverless-indexes.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    ServerlessSpec,\n    CloudProvider,\n    AzureRegion,\n    Metric\n)\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\npc.create_index(\n    name='my-index',\n    dimension=1536,\n    metric=Metric.COSINE,\n    spec=ServerlessSpec(\n        cloud=CloudProvider.AZURE,\n        region=AzureRegion.EASTUS2\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Vectors from Pinecone Index by ID\nDESCRIPTION: Example of retrieving specific vectors from a Pinecone index by their IDs. Connects to an existing index and fetches vectors with their values and metadata from a specified namespace.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_data/index-usage-byov.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\n# Find your index host by calling describe_index\n# through the Pinecone web console\nindex = pc.Index(host=os.environ.get('INDEX_HOST'))\n\nfetch_response = index.fetch(ids=[\"vec1\", \"vec2\"], namespace=\"example-namespace\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Pod Index with Custom Configuration in Python\nDESCRIPTION: This snippet demonstrates how to create a pod-based index in Pinecone using Python. It includes optional properties like tags and deletion protection, and uses enum objects for specifying index parameters.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/pod-indexes.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    PodSpec,\n    Metric,\n    DeletionProtection,\n    PodType,\n    PodIndexEnvironment\n)\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\nindex_config = pc.create_index(\n    name=\"example-index\",\n    dimension=1536,\n    metric=Metric.COSINE,\n    deletion_protection=DeletionProtection.ENABLED,\n    spec=PodSpec(\n        environment=PodIndexEnvironment.EU_WEST1_GCP,\n        pod_type=PodType.P1_X1\n    ),\n    tags={\n        \"environment\": \"production\",\n        \"app\": \"chat-support\"\n    }\n)\nprint(index_config)\n```\n\n----------------------------------------\n\nTITLE: Creating Index with Deletion Protection in Pinecone Python\nDESCRIPTION: This code snippet shows how to create an index with deletion protection enabled using the Pinecone Python client. It sets up the client, specifies index properties, and enables deletion protection.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-configs.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    ServerlessSpec,\n    CloudProvider,\n    GcpRegion,\n    Metric\n)\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\npc.create_index(\n    name='my-index',\n    dimension=1536,\n    metric=Metric.COSINE,\n    deletion_protection=DeletionProtection.ENABLED,\n    spec=ServerlessSpec(\n        cloud=CloudProvider.GCP,\n        region=GcpRegion.US_CENTRAL1\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Index with Tags in Pinecone Python\nDESCRIPTION: This snippet demonstrates how to create an index with tags using the Pinecone Python client. It includes setting up the client, specifying index properties, and adding tags for environment and owner.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-configs.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    ServerlessSpec,\n    CloudProvider,\n    GcpRegion,\n    Metric\n)\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\npc.create_index(\n    name='my-index',\n    dimension=1536,\n    metric=Metric.COSINE,\n    spec=ServerlessSpec(\n        cloud=CloudProvider.GCP,\n        region=GcpRegion.US_CENTRAL1\n    ),\n    tags={\n        \"environment\": \"testing\",\n        \"owner\": \"jsmith\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Sparse Index in Pinecone with Python\nDESCRIPTION: This snippet demonstrates how to create a sparse index in Pinecone using the Python client. It configures the index with specific metric, cloud provider, and region settings for a serverless specification.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/upgrading.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    ServerlessSpec,\n    CloudProvider,\n    AwsRegion,\n    Metric,\n    VectorType\n)\n\npc = Pinecone()\npc.create_index(\n    name='sparse-index',\n    metric=Metric.DOTPRODUCT,\n    spec=ServerlessSpec(\n        cloud=CloudProvider.AWS,\n        region=AwsRegion.US_WEST_2\n    ),\n    vector_type=VectorType.SPARSE\n)\n\n# Check the description to get the host url\ndesc = pc.describe_index(name='sparse-index')\n\n# Instantiate the index client\nsparse_index = pc.Index(host=desc.host)\n```\n\n----------------------------------------\n\nTITLE: Creating Asyncio Index with PineconeAsyncio in Python\nDESCRIPTION: This snippet demonstrates how to create an index asynchronously using PineconeAsyncio. It includes error handling for existing indexes and configures the index with specific cloud provider, region, and embedding model settings.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/upgrading.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom pinecone import (\n    PineconeAsyncio,\n    IndexEmbed,\n    CloudProvider,\n    AwsRegion,\n    EmbedModel\n)\n\nasync def main():\n    async with PineconeAsyncio() as pc:\n        if not await pc.has_index(index_name):\n            desc = await pc.create_index_for_model(\n                name=\"book-search\",\n                cloud=CloudProvider.AWS,\n                region=AwsRegion.US_EAST_1,\n                embed=IndexEmbed(\n                    model=EmbedModel.Multilingual_E5_Large,\n                    metric=\"cosine\",\n                    field_map={\n                        \"text\": \"description\",\n                    },\n                )\n            )\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Pinecone Index with Enum Configuration in Python\nDESCRIPTION: This code demonstrates creating a Pinecone index using enum configuration values. It utilizes enums for metric, cloud provider, region, and vector type to improve code readability and editor support.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/upgrading.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import (\n    Pinecone,\n    ServerlessSpec,\n    CloudProvider,\n    AwsRegion,\n    Metric,\n    VectorType\n)\n\npc = Pinecone()\npc.create_index(\n    name='my-index',\n    dimension=1536,\n    metric=Metric.COSINE,\n    spec=ServerlessSpec(\n        cloud=CloudProvider.AWS,\n        region=AwsRegion.US_WEST_2\n    ),\n    vector_type=VectorType.DENSE\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Vectors with Pagination Generator in Pinecone\nDESCRIPTION: Example of listing vector IDs matching a prefix using the list method. Uses a generator to handle pagination automatically, allowing iteration through all results that match the prefix criteria in batches.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_data/index-usage-byov.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='xxx')\nindex = pc.Index(host='hosturl')\n\n# To iterate over all result pages using a generator function\nnamespace = 'foo-namespace'\nfor ids in index.list(prefix='pref', limit=3, namespace=namespace):\n    print(ids) # ['pref1', 'pref2', 'pref3']\n\n    # Now you can pass this id array to other methods, such as fetch or delete.\n    vectors = index.fetch(ids=ids, namespace=namespace)\n```\n\n----------------------------------------\n\nTITLE: Manual Pagination for Listing Vectors in Pinecone\nDESCRIPTION: Example of listing vector IDs with manual control over pagination using list_paginated. Returns a paginated result object containing vector IDs, namespace information, pagination token, and usage statistics for the current page.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_data/index-usage-byov.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='xxx')\nindex = pc.Index(host='hosturl')\n\n# For manual control over pagination\nresults = index.list_paginated(\n    prefix='pref',\n    limit=3,\n    namespace='foo',\n    pagination_token='eyJza2lwX3Bhc3QiOiI5IiwicHJlZml4IjpudWxsfQ=='\n)\nprint(results.namespace) # 'foo'\nprint([v.id for v in results.vectors]) # ['pref1', 'pref2', 'pref3']\nprint(results.pagination.next) # 'eyJza2lwX3Bhc3QiOiI5IiwicHJlZml4IjpudWxsfQ=='\nprint(results.usage) # { 'read_units': 1 }\n```\n\n----------------------------------------\n\nTITLE: Pinecone Client Initialization with Basic Proxy Configuration\nDESCRIPTION: Demonstrates how to initialize the Pinecone client with basic proxy settings using the proxy_url parameter.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/client-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(\n    api_key='YOUR_API_KEY',\n    proxy_url='https://your-proxy.com'\n)\n\npc.list_indexes()\n```\n\n----------------------------------------\n\nTITLE: Describing Pinecone Index Configuration\nDESCRIPTION: Shows how to fetch detailed configuration information about a specific index, including host information and other critical settings.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\nindex_description = pc.describe_index(name=\"book-search\")\n```\n\n----------------------------------------\n\nTITLE: Listing All Pinecone Indexes\nDESCRIPTION: Shows how to list all indexes in a Pinecone project using the Pinecone client with API key authentication.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\nfor index in pc.list_indexes():\n    print(index)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection from a Pod Index in Python\nDESCRIPTION: Creates a new collection named 'example-collection' sourced from an existing pod index called 'example-index'. This allows for making a backup copy of an index that can be used for future operations.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/collections.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\npc.create_collection(\n    name=\"example-collection\",\n    source=\"example-index\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Pod-Based Index from a Collection in Python\nDESCRIPTION: This snippet illustrates how to create a pod-based index from an existing collection in Pinecone using Python. It specifies the source collection in the PodSpec.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/pod-indexes.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone, PodSpec, PodIndexEnvironment\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\npc.create_index(\n    name=index_name,\n    dimension=1536,\n    metric=metric,\n    spec=PodSpec(\n        environment=PodIndexEnvironment.US_WEST1_GCP,\n        source_collection=\"name-of-collection\"\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Listing All Collections in a Pinecone Project in Python\nDESCRIPTION: Retrieves a list of all collections available in the current Pinecone project. This allows for viewing all archived index copies that have been created.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/collections.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\nactive_collections = pc.list_collections()\n```\n\n----------------------------------------\n\nTITLE: Describing a Pinecone Collection in Python\nDESCRIPTION: Retrieves detailed information about a specific collection named 'example-collection'. This returns metadata about the collection such as its dimensions, vector count, and source index.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/collections.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\ncollection_description = pc.describe_collection(\"example-collection\")\n```\n\n----------------------------------------\n\nTITLE: Scaling a Pod-Based Index in Python\nDESCRIPTION: This example demonstrates how to scale a pod-based index horizontally with replicas or vertically with pod_type using the configure_index method in Python.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/pod-indexes.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone, PodType\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\npc.configure_index(\n    name=\"example-index\",\n    replicas=4,\n    pod_type=PodType.P1_X2\n)\n```\n\n----------------------------------------\n\nTITLE: Pinecone Client Initialization with Authenticated Proxy\nDESCRIPTION: Shows how to initialize the Pinecone client with an authenticated proxy using proxy_headers for basic authentication.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/client-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\nimport urllib3 import make_headers\n\npc = Pinecone(\n    api_key='YOUR_API_KEY',\n    proxy_url='https://your-proxy.com',\n    proxy_headers=make_headers(proxy_basic_auth='username:password')\n)\n\npc.list_indexes()\n```\n\n----------------------------------------\n\nTITLE: Configuring Deletion Protection for Existing Index in Pinecone Python\nDESCRIPTION: This snippet demonstrates how to enable or disable deletion protection for an existing index using the configure_index method in the Pinecone Python client. It also shows how to verify the configuration change.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-configs.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\n# To enable deletion protection\npc.configure_index(\"example-index\", deletion_protection='enabled')\n\n# Disable deletion protection\npc.configure_index(\"example-index\", deletion_protection='disabled')\n\n# Call describe index to verify the configuration change has been applied\ndesc = pc.describe_index(\"example-index\")\nprint(desc.deletion_protection)\n```\n\n----------------------------------------\n\nTITLE: Pinecone Client Initialization with Self-Signed Certificate Proxy\nDESCRIPTION: Demonstrates how to initialize the Pinecone client with a proxy using a self-signed certificate by specifying the certificate path.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/client-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\nimport urllib3 import make_headers\n\npc = Pinecone(\n    api_key=\"YOUR_API_KEY\",\n    proxy_url='https://your-proxy.com',\n    proxy_headers=make_headers(proxy_basic_auth='username:password'),\n    ssl_ca_certs='path/to/cert-bundle.pem'\n)\n\npc.list_indexes()\n```\n\n----------------------------------------\n\nTITLE: Verifying Connection to a Specific Pinecone Index\nDESCRIPTION: This code shows how to instantiate a Pinecone client with custom proxy and SSL settings, connect to a specific index, and verify the connection by fetching data. It demonstrates error handling for connection issues.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(\n    api_key=os.environ['PINECONE_API_KEY'],\n    proxy_url='https://your-proxy.com',\n    ssl_ca_certs='path/to/cert-bundle.pem'\n)\n\nidx = pc.Index(host=\"example-index-dojoi3u.svc.eu-west1-gcp.pinecone.io\")\nidx.fetch(ids=['testid'])\n# If you reach this point with no exceptions raised, you should be good.\n```\n\n----------------------------------------\n\nTITLE: Upserting Records with IndexAsyncio in Python\nDESCRIPTION: This code snippet shows how to upsert records asynchronously using IndexAsyncio. It connects to a specific Pinecone index and upserts multiple book records with their metadata.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/upgrading.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom pinecone import Pinecone\n\nasync def main():\n    host=\"book-search-dojoi3u.svc.aped-4627-b74a.pinecone.io\"\n    async with Pinecone().IndexAsyncio(host=host) as idx:\n        await idx.upsert_records(\n            namespace=\"\",\n            records=[\n                {\n                    \"id\": \"1\",\n                    \"title\": \"The Great Gatsby\",\n                    \"author\": \"F. Scott Fitzgerald\",\n                    \"description\": \"The story of the mysteriously wealthy Jay Gatsby and his love for the beautiful Daisy Buchanan.\",\n                    \"year\": 1925,\n                },\n                {\n                    \"id\": \"2\",\n                    \"title\": \"To Kill a Mockingbird\",\n                    \"author\": \"Harper Lee\",\n                    \"description\": \"A young girl comes of age in the segregated American South and witnesses her father's courageous defense of an innocent black man.\",\n                    \"year\": 1960,\n                },\n                {\n                    \"id\": \"3\",\n                    \"title\": \"1984\",\n                    \"author\": \"George Orwell\",\n                    \"description\": \"In a dystopian future, a totalitarian regime exercises absolute control through pervasive surveillance and propaganda.\",\n                    \"year\": 1949,\n                },\n            ]\n        )\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Tags with configure_index in Pinecone Python\nDESCRIPTION: This snippet demonstrates how to modify an existing tag on an index using the configure_index method in the Pinecone Python client. It changes the 'environment' tag from 'testing' to 'production'.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-configs.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npc.configure_index(\n    name='my-index',\n    tags={\"environment\": \"production\"}\n)\n\ndesc = pc.describe_index(\n    name=index_name,\n)\nprint(desc.tags)\n# {\n#   'environment': 'production',\n#   'owner': 'jsmith'\n# }\n```\n\n----------------------------------------\n\nTITLE: Listing Pinecone Index Names\nDESCRIPTION: Demonstrates how to list only the names of indexes using the names() convenience method.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\nfor name in pc.list_indexes().names():\n    print(\"index name is: \", name)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Pinecone Collection in Python\nDESCRIPTION: Removes a collection named 'example-collection' from the Pinecone project. This permanently deletes the archived copy of the index data.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/collections.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\npc.delete_collection(\"example-collection\")\n```\n\n----------------------------------------\n\nTITLE: Adding New Tags to Existing Index in Pinecone Python\nDESCRIPTION: This code example shows how to add a new tag to an existing index using the configure_index method in the Pinecone Python client. It adds a 'purpose' tag without affecting existing tags.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-configs.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npc.configure_index(\n    name='my-index',\n    tags={\"purpose\": \"for testing the new chatbot feature\"}\n)\n\ndesc = pc.describe_index(\n    name=index_name,\n)\nprint(desc.tags)\n# {\n#     'purpose': 'for testing the new chatbot feature',\n#     'environment': 'production',\n#     'owner': 'jsmith'\n# }\n```\n\n----------------------------------------\n\nTITLE: Pinecone Client Initialization with Custom Environment Variable\nDESCRIPTION: Shows how to initialize the Pinecone client using a custom environment variable instead of the default PINECONE_API_KEY.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/client-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key=os.environ.get('CUSTOM_VAR'))\n```\n\n----------------------------------------\n\nTITLE: Installing Pinecone SDK with pip\nDESCRIPTION: Commands to install the Pinecone Python SDK using pip, with options for additional dependencies like asyncio and grpc support.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install the latest version\npip3 install pinecone\n\n# Install the latest version, with optional dependencies\npip3 install \"pinecone[asyncio,grpc]\"\n```\n\n----------------------------------------\n\nTITLE: Removing Tags from Index in Pinecone Python\nDESCRIPTION: This snippet demonstrates how to remove tags from an index using the configure_index method in the Pinecone Python client. It removes all existing tags by setting their values to empty strings.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-configs.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npc.configure_index(\n    name='my-index',\n    tags={\n        \"purpose\": \"\",\n        \"environment\": \"\",\n        \"owner\": \"\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying API Key and Connection to api.pinecone.io\nDESCRIPTION: This snippet demonstrates how to instantiate a Pinecone client and verify the connection to api.pinecone.io by listing indexes. It uses an environment variable for the API key.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pinecone import Pinecone\n\npc = Pinecone(\n    api_key=os.environ['PINECONE_API_KEY']\n)\npc.list_indexes()\n```\n\n----------------------------------------\n\nTITLE: Viewing Index Tags with describe_index in Pinecone Python\nDESCRIPTION: This code snippet shows how to view the tags of an existing index using the describe_index method in the Pinecone Python client.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-configs.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\ndesc = pc.describe_index(name='my-index')\nprint(desc.tags)\n# {\n#   'environment': 'testing',\n#   'owner': 'jsmith'\n# }\n```\n\n----------------------------------------\n\nTITLE: Installing Pinecone SDK with pip\nDESCRIPTION: Commands for installing the Pinecone Python SDK using pip, including options for installing additional dependencies like asyncio and gRPC support.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/pdoc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install the latest version\npip3 install pinecone\n\n# Install the latest version, with optional dependencies\npip3 install \"pinecone[asyncio,grpc]\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Pinecone Index\nDESCRIPTION: Demonstrates how to delete an index that is not protected by deletion protection.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/db_control/shared-index-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\n\npc = Pinecone(api_key='<<PINECONE_API_KEY>>')\n\npc.delete_index(name=\"example-index\")\n```\n\n----------------------------------------\n\nTITLE: Installing Pinecone SDK with uv\nDESCRIPTION: Commands to install the Pinecone Python SDK using uv, a modern package manager that offers significant performance improvements over pip.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Install the latest version\nuv add pinecone\n\n# Install the latest version, optional dependencies\nuv add \"pinecone[asyncio,grpc]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Pinecone SDK with poetry\nDESCRIPTION: Commands to install the Pinecone Python SDK using poetry, a dependency management and packaging tool.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Install the latest version\npoetry add pinecone\n\n# Install the latest version, with optional dependencies\npoetry add pinecone --extras asyncio --extras grpc\n```\n\n----------------------------------------\n\nTITLE: Installing Pinecone SDK with poetry\nDESCRIPTION: Commands for installing the Pinecone Python SDK using poetry, including options for adding optional dependencies.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/pdoc/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Install the latest version\npoetry add pinecone\n\n# Install the latest version, with optional dependencies\npoetry add pinecone --extras asyncio --extras grpc\n```\n\n----------------------------------------\n\nTITLE: Installing Development Versions of Pinecone Python Client\nDESCRIPTION: Commands to install development or specific versions of the Pinecone Python client directly from GitHub. This allows testing unreleased features, investigating bugs, or exploring code changes using pip or poetry.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install git+https://git@github.com/pinecone-io/pinecone-python-client.git\npip3 install git+https://git@github.com/pinecone-io/pinecone-python-client.git@example-branch-name\npip3 install git+https://git@github.com/pinecone-io/pinecone-python-client.git@44fc7ed\n\npoetry add git+https://github.com/pinecone-io/pinecone-python-client.git@44fc7ed\n```\n\n----------------------------------------\n\nTITLE: Pinecone Client Initialization with Disabled SSL Verification\nDESCRIPTION: Shows how to initialize the Pinecone client with SSL verification disabled (not recommended for production).\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/client-configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone\nimport urllib3 import make_headers\n\npc = Pinecone(\n    api_key='YOUR_API_KEY',\n    proxy_url='https://your-proxy.com',\n    proxy_headers=make_headers(proxy_basic_auth='username:password'),\n    ssl_ca_certs='path/to/cert-bundle.pem',\n    ssl_verify=False\n)\n\npc.list_indexes()\n```\n\n----------------------------------------\n\nTITLE: Installing Pinecone Assistant Python plugin\nDESCRIPTION: Command to install the Pinecone Assistant Python plugin, which extends the SDK to support interaction with Pinecone Assistant.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade pinecone pinecone-plugin-assistant\n```\n\n----------------------------------------\n\nTITLE: Creating Pinecone Index with String Configuration in Python\nDESCRIPTION: This snippet shows how to create a Pinecone index using string configuration values. It sets up a serverless index with specific dimension, metric, cloud provider, and region settings.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/docs/upgrading.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import Pinecone, ServerlessIndex\n\npc = Pinecone()\npc.create_index(\n    name='my-index',\n    dimension=1536,\n    metric='cosine',\n    spec=ServerlessSpec(cloud='aws', region='us-west-2'),\n    vector_type='dense'\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Pinecone SDK with uv\nDESCRIPTION: Commands for installing the Pinecone Python SDK using uv, a modern package manager that runs faster than pip while supporting similar syntax.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/pdoc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Install the latest version\nuv install pinecone\n\n# Install the latest version, optional dependencies\nuv install \"pinecone[asyncio,grpc]\"\n```\n\n----------------------------------------\n\nTITLE: Testing Local Virtualenv Setup\nDESCRIPTION: A Python script that imports the custom module from the local Pinecone client installation to verify that the virtualenv is correctly set up and changes to the library are immediately reflected.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pinecone import hello_virtualenv\n\nhello_virtualenv.hello()\n```\n\n----------------------------------------\n\nTITLE: Creating Hello Module for Testing Virtualenv\nDESCRIPTION: A simple Python module that prints a message when called. This sample is used to demonstrate that changes made to the locally installed Pinecone client are immediately available to other Python applications using the same virtualenv.\nSOURCE: https://github.com/pinecone-io/pinecone-python-client/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef hello():\n    print(\"Hello, from your virtualenv!\")\n```"
  }
]