[
  {
    "owner": "microsoft",
    "repo": "azure-pipelines-tasks",
    "content": "TITLE: Applying Variable Substitution in JSON Configuration Files - YAML - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a task in Azure Pipelines to replace tokens with variable values in XML or JSON configuration files. The snippet includes optional inputs for folder paths, XML transformation rules, and file types to provide flexibility for various scenarios.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"# File transform\\n# Replace tokens with variable values in XML or JSON configuration files\\n- task: FileTransform@1\\n  inputs:\\n    #folderPath: '$(System.DefaultWorkingDirectory)/**/*.zip' \\n    #enableXmlTransform: # Optional\\n    #xmlTransformationRules: '-transform **\\*.Release.config -xml **\\*.config-transform **\\*.$(Release.EnvironmentName).config -xml **\\*.config' # Optional\\n    #fileType: # Optional. Options: xml, json\\n    #targetFiles: # Optional\"\n```\n\n----------------------------------------\n\nTITLE: Logging Error or Warning Issues in Azure Pipelines Tasks\nDESCRIPTION: Command used to log error or warning issues to the timeline record of the current task. Parameters include type (required), sourcepath, linenumber, columnnumber, and code.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.logissue type=error;sourcepath=consoleapp/main.cs;linenumber=1;columnnumber=1;code=100;]this is an error\n```\n\n----------------------------------------\n\nTITLE: Building Application Image for Azure Container App using YAML Pipeline\nDESCRIPTION: A minimal configuration example that builds a container image from source code and deploys it as an Azure Container App. This approach uses the default naming conventions and automatically configures required resources.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@1\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Build Definition with DotNet Toolset\nDESCRIPTION: A sample YAML build definition that demonstrates how to use the dotnet toolset, define variables, and specify build steps including PowerShell scripts, MSBuild tasks, and custom tasks. It shows how the language plugin automatically infers task types based on file extensions.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/yaml.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# a definition will be able to have multiple jobs\nmy build job:\n\n  toolset: dotnet\n \n  ## variables are merged and overlayed over variables defined in the web definition editor.\n  variables:\n    foo: bar\n    baz: foo\n\n  steps:\n    \n    # The dotnet toolset knows that cmdlines that first arg ends in ps1 means to inject a powershell task (defaults apply) \n    - src/ci/before.ps1 arg1 $(foo)\n    - \"src/ci/before with space.ps1\" arg1 $(foo)\n\n    # the dotnet language plugin also understands that \"proj\" maps to msbuild task\n    # you can pass other inputs to the msbuild task\n    # conditions supported\n    - task: msbuild \n      condition: $(foo) -eq \"bar\"\n      inputs: \n        path: src/mywebApp.csproj\n        additonalArguments: /m      \n\n    # if I need to specify other inputs for script tasks ...\n    # always control option is an option\n    - task: powershell\n      always: $(foo) -eq \"bar\"\n      inputs:\n        path: src/ci/try.ps1 $(baz) \"arg two\"\n        failOnStandardError: true\n\n    # arbitrary tasks from the server can be invoked and optionally locked to a major version\n    # based on the task.json metadata we know how to cast values from a string\n    - task: MyCustomTask@2.x\n      inputs:\n        input1: input1 value\n        input2: false\n\n    # if it falls through all the special base project handlers, \n    # ends up with exec command line task\n    - echo Hello World\n\n  finally:\n    # always run inferred from finally\n    - src/ci/cleanup.ps1\n```\n\n----------------------------------------\n\nTITLE: Deploying Container App with Image to Build provided\nDESCRIPTION: This snippet shows how to deploy a Container App, building the image with the specified image name. The task uses a service connection to Azure, builds an image with the specified name and pushes it to ACR.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\n```yml\nsteps:\n\n  - task: AzureContainerApps@1\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      imageToBuild: 'mytestacr.azurecr.io/app:latest'\n```\n```\n\n----------------------------------------\n\nTITLE: Uploading Summary Markdown in Azure Pipelines Tasks\nDESCRIPTION: Commands to upload and attach summary markdown to the current timeline record. This summary is added to the build/release summary but is not available for download with logs.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.uploadsummary]c:\\testsummary.md\n```\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.addattachment type=Distributedtask.Core.Summary;name=testsummaryname;]c:\\testsummary.md\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Template for Container Image Signing\nDESCRIPTION: A YAML pipeline configuration that demonstrates logging into a container registry, building and pushing an image, installing Notation, and signing the image using Azure Key Vault\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/NotationV0/docs/sign-images-pipeline.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n - main\npool: \n  vmImage: 'ubuntu-latest'\n\nsteps:\n# log in to registry\n- task: Docker@2\n  inputs:\n    containerRegistry: <your_docker_registry_service_connection>\n    command: 'login'\n# build and push artifact to registry\n- task: Docker@2\n  inputs:\n    repository: <your_repository_name>\n    command: 'buildAndPush'\n    Dockerfile: './Dockerfile'\n# install notation\n- task: Notation@0\n  inputs:\n    command: 'install'\n    version: '1.0.0'\n# automatically detect the artifact pushed by Docker task and sign the artifact.\n- task: Notation@0\n  inputs:\n    command: 'sign'\n    plugin: 'azureKeyVault'\n    akvPluginVersion: <azure_key_vault_plugin_version>\n    azurekvServiceConection: <your_akv_service_connection>\n    keyid: <your_key_id>\n    selfSigned: true\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code launch.json for Debugging Azure Pipeline Tasks\nDESCRIPTION: Example configuration for launch.json that enables debugging the ArchiveFiles task in VS Code. It specifies the program entry point, working directory, runtime arguments, and environment variables that simulate task inputs.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/debugging.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n        {\n            \"name\": \"Launch tar.gz\",\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"program\": \"C:\\\\git\\\\github\\\\vsts-tasks\\\\Tasks\\\\ArchiveFiles\\\\archivefiles.ts\",\n            \"stopOnEntry\": false,\n            \"args\": [],\n            \"cwd\": \"C:\\\\git\\\\github\\\\vsts-tasks\\\\_build\\\\Tasks\\\\ArchiveFiles\\\\\",\n            \"preLaunchTask\": null,\n            \"runtimeExecutable\": null,\n            \"runtimeArgs\": [\n                \"--nolazy\"\n            ],\n            \"env\": {\n                \"NODE_ENV\": \"development\",\n                \"INPUT_rootFolderOrFile\" : \"C:\\\\agents\\\\latest\\\\_work\\\\21\\\\s\",\n                \"INPUT_includeRootFolder\" : true,\n                \"INPUT_archiveType\": \"tar\",\n                \"INPUT_tarCompression\": \"gz\",\n                \"INPUT_archiveFile\": \"c:\\\\temp\\\\test.tar.gz\",\n                \"INPUT_replaceExistingArchive\": \"true\",\n                \"BUILD_SOURCESDIRECTORY\": \"C:\\\\agents\\\\latest\\\\_work\\\\21\\\\s\"\n            },\n            \"externalConsole\": false,\n            \"sourceMaps\": true,\n            \"outDir\": \"${workspaceRoot}\\\\_build\\\\Tasks\\\\ArchiveFiles\\\\\"\n        }\n```\n\n----------------------------------------\n\nTITLE: Minimal Configuration for Building Application Image in Azure Container Apps Task\nDESCRIPTION: This YAML snippet demonstrates the minimal configuration required to build an application image for a Container App using the Azure Container Apps task. It creates a new Container App with a default name and resource group, using an image built from the provided source path and pushed to the specified ACR instance.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@0\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n```\n\n----------------------------------------\n\nTITLE: Adding Attachments to Azure Pipelines Timeline Records\nDESCRIPTION: Command to upload and attach files to the current timeline record. These attachments are not available for download with logs but can be referenced by extensions using the type or name values.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.addattachment type=myattachmenttype;name=myattachmentname;]c:\\myattachment.txt\n```\n\n----------------------------------------\n\nTITLE: Custom Resource Group Configuration\nDESCRIPTION: Deploy a Container App in a specified resource group using Azure Container Registry\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@0\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      resourceGroup: 'my-test-rg'\n```\n\n----------------------------------------\n\nTITLE: Retrieving PFX Certificate from Task Variable in PowerShell\nDESCRIPTION: This PowerShell snippet shows how to retrieve a PFX certificate from a task variable that contains the certificate content in string format. It converts the string to a byte array and imports it into a certificate collection.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV2/README.md#2025-04-18_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Task parameters: $(PfxSecret)\nparam ($pfxSecretStringValue)\n$kvSecretBytes = [System.Convert]::FromBase64String($pfxSecretStringValue)\n$certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection\n$certCollection.Import($kvSecretBytes, $null, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)\n```\n\n----------------------------------------\n\nTITLE: Deploying Container App with env provided\nDESCRIPTION: This snippet shows how to deploy a Container App with a specific Container App environment. It will create a new container app environment. The task uses a service connection to Azure, builds an image from the specified source path, and pushes it to ACR.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n```yml\nsteps:\n\n  - task: AzureContainerApps@1\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      containerAppEnvironment: 'my-test-container-app-env'\n```\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration with Container App Details\nDESCRIPTION: Detailed YAML configuration specifying Container App properties including managed environment, ingress settings, and container image\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nproperties:\n  managedEnvironmentId: /subscriptions/SUBSCRIPTION_ID/resourceGroup/RESOURCE_GROUP/providers/Microsoft.App/managedEnvironments/CONTAINER_APP_ENVIRONMENT\n  configuration:\n    ingress:\n      external: true\n      allowInsecure: false\n      targetPort: 80\n  template:\n    containers:\n      - image: mcr.microsoft.com/azuredocs/containerapps-helloworld:latest\n        name: mysampleimagecontainer\n```\n\n----------------------------------------\n\nTITLE: Processing Deployment Output in PowerShell\nDESCRIPTION: PowerShell script to convert deployment output to JSON object, extract specific values, and set pipeline variables. Uses ConvertFrom-Json cmdlet to parse storage account name from deployment output.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceManagerTemplateDeploymentV3/README.md#2025-04-18_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$var=ConvertFrom-Json '$(storageAccountName)'\n$value=$var.storageAccountName.value\nWrite-Host \"##vso[task.setvariable variable=storageAccount;]$value\"\n```\n\n----------------------------------------\n\nTITLE: Running .NET Core Tests\nDESCRIPTION: Configures test execution with support for publishing test results\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/README.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DotNetCoreCLI@2\n  inputs:\n    command: 'test'\n    publishTestResults: true\n```\n\n----------------------------------------\n\nTITLE: Publishing .NET Core Web Projects\nDESCRIPTION: Configures publishing of web projects with options for zipping and path management\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/README.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DotNetCoreCLI@2\n  inputs:\n    command: 'publish'\n    publishWebProjects: true\n    zipAfterPublish: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure App Service Deployment Methods\nDESCRIPTION: This section lists supported deployment methods including Web Deploy (msdeploy.exe), Kudu REST APIs, Container Registry, Zip Deploy and RunFromPackage methods with their use cases and supported platforms.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV4/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Web Deploy (msdeploy.exe) - Default option for Windows targets\n* Kudu REST APIs - Cross-platform support for Web Apps\n* Container Registry - For Web App for Containers\n* Zip Deploy - Package-based deployment to wwwroot\n* RunFromPackage - Package mounting for read-only deployment\n```\n\n----------------------------------------\n\nTITLE: Minimal Configuration for Deploying Existing Image in Azure Container Apps Task\nDESCRIPTION: This YAML snippet shows the minimal configuration needed to deploy an existing image to a Container App using the Azure Container Apps task. It creates a new Container App with a default name and resource group, using a specified existing image without building a new one.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@0\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      imageToDeploy: mcr.microsoft.com/azuredocs/containerapps-helloworld:latest\n```\n\n----------------------------------------\n\nTITLE: Using Azure File Copy Task Output Variables in Azure Pipelines YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the AzureFileCopy task and access its output variables in a subsequent script task. It copies a file to Azure Blob storage and then echoes the storage container URI and SAS token.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV4/README.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- task: AzureFileCopy@4\n  inputs:\n    SourcePath: 'Readme.md'\n    azureSubscription: 'Azure'\n    Destination: 'AzureBlob'\n    storage: 'storageAccount'\n    ContainerName: 'containerName'\n    BlobPrefix: ''\n  name: AzureFileCopy\n  \n- script: | \n    echo $(AzureFileCopy.StorageContainerUri)\n    echo $(AzureFileCopy.StorageContainerSasToken)\n```\n\n----------------------------------------\n\nTITLE: Deploying Container App with ACR credentials\nDESCRIPTION: This snippet demonstrates how to deploy a Container App using ACR (Azure Container Registry) credentials. The task uses a service connection to Azure, builds an image from the specified source path, pushes it to ACR, and uses provided ACR username and password for authentication.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n```yml\nsteps:\n\n  - task: AzureContainerApps@1\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      acrUsername: $(ACR_USERNAME_SECRET)\n      acrPassword: $(ACR_PASSWORD_SECRET)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure File Copy Task with Output Variables in Azure Pipelines\nDESCRIPTION: Example showing how to configure the AzureFileCopy@5 task to copy files to Azure Blob storage and access the StorageContainerUri output variable. Demonstrates task configuration and output variable usage.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV6/README.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- task: AzureFileCopy@5\n  inputs:\n    SourcePath: 'Readme.md'\n    azureSubscription: 'Azure'\n    Destination: 'AzureBlob'\n    storage: 'storageAccount'\n    ContainerName: 'containerName'\n    BlobPrefix: ''\n  name: AzureFileCopy\n  \n- script: | \n    echo $(AzureFileCopy.StorageContainerUri)\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Expression Examples for Azure Pipelines Tasks\nDESCRIPTION: Shows examples of validation expressions that can be used to validate task inputs. The expression can use any of the supported functions to validate the input value.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/taskinputvalidation.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n      VALIDATION_EXPRESSION_HERE = \"expression_using_any_functions\"\n      -------------------------------------------------------------------------------------\n      VALIDATION_EXPRESSION_HERE = \"and(isWinUsername(value), isLowerCase(value))\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Symbols Using Personal Access Token (PAT)\nDESCRIPTION: YAML configuration for publishing symbols to Azure DevOps using a Personal Access Token with detailed logging and specific search pattern\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/PublishSymbolsV2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishSymbols@2\n  inputs:\n    DetailedLog: true\n    SearchPattern: '**/bin/**/*.pdb'\n    SymbolServerType: 'TeamServices'\n    SymbolExpirationInDays: '365'\n    IndexSources: false\n  name: PublishSymbols\n```\n\n----------------------------------------\n\nTITLE: Publishing Symbols Using Service Connection\nDESCRIPTION: YAML configuration for publishing symbols to Azure DevOps using a service connection with detailed logging and specific search pattern\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/PublishSymbolsV2/README.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishSymbols@2\n  inputs:\n    ConnectedServiceName: 'TestServiceConnection'\n    DetailedLog: true\n    SearchPattern: '**/bin/**/*.pdb'\n    SymbolServerType: 'TeamServices'\n    IndexSources: false\n    SymbolExpirationInDays: '365'\n  name: PublishSymbols\n```\n\n----------------------------------------\n\nTITLE: Node.js Tool Installer Implementation Example\nDESCRIPTION: Sample code demonstrating how to implement a Node.js tool installer task using the ToolInstaller API. Shows downloading, extracting, and setting up the path for a specific Node.js version.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/tools.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport tl = require('vsts-task-lib/task');\nimport tim = require('vsts-task-lib/toolinstaller');\n\nasync install() {\n    try {\n         \n        let version: string = tl.getInput('version', true);\n        let ti: tim.ToolInstaller = new ToolInstaller('node', version); \n\n        let arch = 'x64'; \n        var ext = tl.osType() == 'Windows_NT' ? 'zip' : 'tar.gz';\n        var nodeUrl=\"https://nodejs.org/dist/v$\" + version + \"/node-v\" + version + \"-\" + os + \"-\" + arch;\n\n        let temp: string = await inst.download(nodeUrl);\n\n        let extractRoot = await ti.extract(temp);\n\n        // tool installer knows node binary is in bin folder of extracted tool\n        ti.prependPath(path.join(extractRoot, 'bin'));\n    }\n    catch (err) {\n        tl.setResult(tl.TaskResult.Failed, tl.loc('NodeInstallerFailed', err.message));\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Using Azure File Copy Output Variables in YAML Pipeline\nDESCRIPTION: This YAML snippet demonstrates how to use the AzureFileCopy task and access its output variables in a subsequent script task. It copies a file to Azure Blob storage and then echoes the container URI and SAS token.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV5/README.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- task: AzureFileCopy@5\n  inputs:\n    SourcePath: 'Readme.md'\n    azureSubscription: 'Azure'\n    Destination: 'AzureBlob'\n    storage: 'storageAccount'\n    ContainerName: 'containerName'\n    BlobPrefix: ''\n  name: AzureFileCopy\n  \n- script: | \n    echo $(AzureFileCopy.StorageContainerUri)\n    echo $(AzureFileCopy.StorageContainerSasToken)\n```\n\n----------------------------------------\n\nTITLE: Deploying Container App with YAML config\nDESCRIPTION: This snippet shows how to deploy a Container App using a YAML configuration file. It assumes that a pre-existing image is used and properties from the YAML file override task arguments, except for the resource group. The YAML file specifies the managed environment, ingress settings, and container image.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n```yml\nsteps:\n\n  - task: AzureContainerApps@1\n    displayName: Build and deploy Container App\n    inputs:\n      yamlConfigPath: simple-image-container-app.yaml\n```\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Release Configuration\nDESCRIPTION: Demonstrates the configuration parameters for creating a GitHub release in Azure Pipelines, including service connection, repository, tag source, and release details\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/GitHubReleaseV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- task: GitHubRelease@1\n  inputs:\n    gitHubConnection: 'MyGitHubServiceConnection'\n    repositoryName: 'microsoft/vscode'\n    action: 'create'\n    target: '$(Build.SourceVersion)'\n    tagSource: 'userSpecified'\n    tag: 'v$(MajorVersion).$(MinorVersion).$(PatchVersion)'\n    releaseNotesSource: 'inline'\n    releaseNotes: 'New release notes'\n    assets: '$(Build.ArtifactStagingDirectory)/**'\n    isDraft: false\n    isPreRelease: false\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Azure-Pipelines-Task-Lib Dependencies in JSON Configuration\nDESCRIPTION: This snippet demonstrates how to use the make.json file to remove duplicate azure-pipelines-task-lib dependencies from node modules. This helps prevent singleton issues when a task uses different versions of the same package.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/validation-errors.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"rm\": [\n      {\n        \"items\": [\n          \"node_modules/azure-pipelines-tasks-java-common/node_modules/azure-pipelines-task-lib\",\n        ],\n        \"options\": \"-Rf\"\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: YAML configuration file structure\nDESCRIPTION: This snippet provides the structure for the YAML configuration file used in the previous example. The `properties` section defines the managed environment, ingress configuration, and container details including the image name and container name. Values for `SUBSCRIPTION_ID`, `RESOURCE_GROUP` and `CONTAINER_APP_ENVIRONMENT` needs to be updated to point to the existing Container App environment.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n```yml\nproperties:\n  managedEnvironmentId: /subscriptions/SUBSCRIPTION_ID/resourceGroup/RESOURCE_GROUP/providers/Microsoft.App/managedEnvironments/CONTAINER_APP_ENVIRONMENT\n  configuration:\n    ingress:\n      external: true\n      allowInsecure: false\n      targetPort: 80\n  template:\n    containers:\n      - image: mcr.microsoft.com/azuredocs/containerapps-helloworld:latest\n        name: mysampleimagecontainer\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET Core Task Command\nDESCRIPTION: Defines the core dotnet command to be executed, with support for various operations like build, test, publish, and NuGet management\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DotNetCoreCLI@2\n  inputs:\n    command: 'build'\n    projects: '**/*.csproj'\n    arguments: '--configuration Release'\n```\n\n----------------------------------------\n\nTITLE: Azure App Service Task Configuration\nDESCRIPTION: Lists multiple deployment methods supported by the Azure App Service Deployment task including Web Deploy, Kudu REST APIs, Container Registry, Zip Deploy and RunFromPackage. Each method is chosen based on the type of Azure App Service and agent environment.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV5/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Web Deploy (msdeploy.exe) is used for Windows agents targeting Web/Function Apps\n* Kudu REST APIs for cross-platform deployment\n* Container Registry for Web App for Containers\n* Zip Deploy for package-based deployments\n* RunFromPackage for read-only function deployments\n```\n\n----------------------------------------\n\nTITLE: Running Deployment Script on Azure App Service\nDESCRIPTION: This snippet provides a batch script used to install dependencies on an Azure App Service after application artifacts are deployed. It checks the existence of a requirements.txt file and a Python executable, and then installs Python packages using pip. Dependencies like setuptools are installed first, followed by other packages listed in the requirements.txt file. This can help in minimizing timeouts during deployment by ensuring packages are restored directly on the app service.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV5/README.md#2025-04-18_snippet_2\n\nLANGUAGE: Batchfile\nCODE:\n```\n@echo off\nif NOT exist requirements.txt (\n echo No Requirements.txt found.\n EXIT /b 0\n)\nif NOT exist \"$(PYTHON_EXT)/python.exe\" (\n echo Python extension not available >&2\n EXIT /b 1\n)\necho Installing dependencies\ncall \"$(PYTHON_EXT)/python.exe\" -m pip install -U setuptools\nif %errorlevel% NEQ 0 (\n echo Failed to install setuptools >&2\n EXIT /b 1\n)\ncall \"$(PYTHON_EXT)/python.exe\" -m pip install -r requirements.txt\nif %errorlevel% NEQ 0 (\n echo Failed to install dependencies>&2\n EXIT /b 1\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Container App Name Configuration\nDESCRIPTION: Deploy a Container App with a custom name using Azure Container Registry and source path\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@0\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      containerAppName: 'my-test-container-app'\n```\n\n----------------------------------------\n\nTITLE: Using When Expressions in Azure Pipelines Task Input Validation\nDESCRIPTION: Shows how to reference other input values in when expressions for conditional options and how to implement validation expressions. This enables creating dynamic validation rules based on different input combinations.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/taskinputvalidation.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n        WHEN_EXPRESSION_HERE = eq(inputs.input1, 'foo') // has access to other input values\n        -------------------------------------------------------------------------------------\n        VALIDATION_EXPRESSION_HERE = \"isEmpty(value)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Secret to Azure Key Vault using Azure CLI\nDESCRIPTION: This snippet demonstrates how to add a secret named 'SQLPassword' with the value 'Pa$$w0rd' to an Azure Key Vault named 'ContosoKeyVault' using Azure CLI.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz keyvault secret set --vault-name 'ContosoKeyVault' --name 'SQLPassword' --value 'Pa$$w0rd'\n```\n\n----------------------------------------\n\nTITLE: Deploying Container App with Dockerfile\nDESCRIPTION: This snippet demonstrates how to deploy a Container App using a Dockerfile. The task builds an image from the provided Dockerfile in the specified source path.  The task uses a service connection to Azure, builds an image from the specified Dockerfile, and pushes it to ACR.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\n```yml\nsteps:\n\n  - task: AzureContainerApps@1\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      dockerfilePath: 'test.Dockerfile'\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Certificate as Password-Protected PFX File in PowerShell\nDESCRIPTION: PowerShell script to export a certificate collection to a password-protected PFX file on disk. This provides a secure way to store certificates retrieved from Key Vault.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV1/README.md#2025-04-18_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# Get the file created\n$password = <password>\n$protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12, $password)\n$pfxPath = [Environment]::GetFolderPath(\"Desktop\") + \"\\MyCert.pfx\"\n[System.IO.File]::WriteAllBytes($pfxPath, $protectedCertificateBytes)\n```\n\n----------------------------------------\n\nTITLE: Example Container Image Name Format\nDESCRIPTION: Shows the format for specifying a fully qualified container image name including registry, repository and tag.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFunctionAppContainerV1/README.md#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmyregistry.azurecr.io/nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Specific Task\nDESCRIPTION: A bash command to run tests for a specific task with the specified test suite. This is useful when focusing on developing or fixing a particular task.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnode make.js test --task ShellScript --suite L0\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Options with Validation in Azure Pipelines Tasks\nDESCRIPTION: Demonstrates how to define conditional options for a picklist input based on the value of another input. The conditionalOptions property allows defining different sets of options and validation rules based on expressions.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/taskinputvalidation.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    inputs: [\n                {\n                    \"name\": \"input2\",\n                    \"type\": \"picklist\"\n                    \"properties\": {\n                        \"EditableOptions\": \"true\"\n                    },\n                    \"options\": {\n                        \"value1\": \"display value 1\",\n                        \"value2\": \"display value 2\",\n                    }\n                    \"conditionalOptions\": [ //new\n                        {\n                            \"when\": \"WHEN_EXPRESSION_HERE\",\n                            \"editable\": \"false\", // overrides EditableOptions from properties\n                            \"options\": { // implicit validation, value should be one of these\n                                \"foo1\": \"foo display value 1\",\n                                \"foo2\": \"foo display value 2\",\n                            }\n                        },\n                        {\n                            \"when\": \"WHEN_EXPRESSION_HERE\",\n                            \"editable\": \"true\",\n                            \"options\": {\n                                \"bar1\": \"bar display value 1\",\n                                \"bar2\": \"bar display value 2\",\n                            },\n                            \"validation\": {\n                                \"expression\": \"VALIDATION_EXPRESSION_HERE\",\n                                \"message\": \"SOME_KEY_FROM_TASKJSON\"\n                              }\n                        }\n            ]\n```\n\n----------------------------------------\n\nTITLE: Custom Image Name Configuration\nDESCRIPTION: Deploy a Container App with a custom image name and tag when pushing to ACR\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@0\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      imageToBuild: 'mytestacr.azurecr.io/app:latest'\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in Azure Pipelines Tasks\nDESCRIPTION: Commands for setting variables in the variable service of taskcontext. These variables can be used by subsequent tasks in the same phase and are exposed as environment variables. Secret variables can be masked from logs.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.setvariable variable=testvar]testvalue\n```\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.setvariable variable=testvar;issecret=true]testvalue\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Assembly Patterns in Azure Pipelines\nDESCRIPTION: This snippet demonstrates how to specify naming patterns for test assemblies in Visual Studio test tasks. It shows examples for including and excluding assemblies based on their filenames, using wildcard matching patterns. The provided examples demonstrate the use of minimatch patterns for selecting and excluding specific test assembly files.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/VsTestV3/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n**\\bin\\**\\*test.dll\n**\\bin\\**\\*tests.dll\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Principal Variables in Batch\nDESCRIPTION: Shows how to access service principal environment variables in Batch scripts.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureCLIV2/Readme.md#2025-04-18_snippet_1\n\nLANGUAGE: Batch\nCODE:\n```\n%servicePrincipalId%\n```\n\n----------------------------------------\n\nTITLE: Processing Deployment Output in Bash\nDESCRIPTION: Bash script for Linux agents to convert deployment outputs to valid JSON format without using PowerShell. Uses sed commands for string manipulation and jq for JSON parsing.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceManagerTemplateDeploymentV3/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvar=`echo \"$(storageAccountName)\" | \\\nsed -e 's/ //g' | \\\nsed -e 's/}/\"\\n}/g' | \\\nsed -e 's/{/{\\n\"/g' | \\\nsed -e 's/:/\":\"/g'  | \\\nsed -e 's/,/\",\\n\"/g' | \\\nsed -e 's/\"}/}/g' | \\\nsed -e 's/}\"/}/g'  | \\\nsed -e 's/\"{/{/g'  | \\\nsed -e 's/\\[/\\[\\n\"/g' | \\\nsed -e 's/]/\"\\n]/g' | \\\nsed -e 's/\"\\[/\\[/g' | \\\nsed -e 's/]\"/]/g'`\nsa_name=`echo $var | jq -r .storageAccountName.value`\necho $sa_name\n```\n\n----------------------------------------\n\nTITLE: Installing .NET Core SDK/Runtime Version\nDESCRIPTION: Task configuration for installing a specific .NET Core version, supporting both SDK and runtime installations across Windows and Linux environments\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreInstallerV0/README.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DotNetCoreInstaller@2\n  inputs:\n    packageType: 'sdk'\n    version: '1.0.4'\n```\n\n----------------------------------------\n\nTITLE: Runtime Stack Configuration\nDESCRIPTION: Deploy a Container App using a specific runtime stack (in this case .NET Core 7.0)\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@0\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      runtimeStack: 'dotnetcore:7.0'\n```\n\n----------------------------------------\n\nTITLE: General Settings JSON Configuration Example\nDESCRIPTION: Example JSON structure for configuring general settings like alwaysOn and webSocketsEnabled in Azure App Service\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureAppServiceSettingsV1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n   {\n    \"alwaysOn\": true, \n    \"webSocketsEnabled\": false\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: HttpRequestChain for Invoking Multiple Endpoints - JSON\nDESCRIPTION: This snippet outlines the setup for an HttpRequestChain, allowing invocation of multiple endpoints sequentially. It includes input definitions, execution options, and criteria to skip certain invocations based on expressions.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/servertaskauthoring.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"HttpRequestChain\": {\n        \"Execute\": {\n            \"RequestInputs\": [\n                {\n                    \"EndpointId\": \"optional\",\n                    \"Endpoint URL\": \"http://example.com/api/first\",\n                    \"Method\": \"GET\",\n                    \"Body\": \"{\\\"param\\\": \\\"value\\\"}\",\n                    \"Headers\": \"{\\\"Authorization\\\": \\\"Bearer token\\\"}\"\n                },\n                {\n                    \"EndpointId\": \"optional\",\n                    \"Endpoint URL\": \"http://example.com/api/second\",\n                    \"Method\": \"POST\",\n                    \"Body\": \"{\\\"data\\\": \\\"payload\\\"}\",\n                    \"Headers\": \"{\\\"Content-Type\\\": \\\"application/json\\\"}\"\n                }\n            ],\n            \"ExecutionOptions\": {\n                \"OutputVariables\": \"{\\\"variableName\\\": \\\"value\\\"}\",\n                \"SkipSectionExpression\": \"eq(root['status'], 'skip')\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Gradle Repository Structure\nDESCRIPTION: This example shows a typical repository structure for a Gradle project that uses a wrapper.  It contains the location of the wrapper (`gradle/wrapper`), the source files (`src/`), the build file (`build.gradle`), and the wrapper execution scripts (`gradlew` and `gradlew.bat`). The wrapper ensures consistent builds across different environments.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/GradleV3/README.md#2025-04-18_snippet_1\n\nLANGUAGE: ssh\nCODE:\n```\n\"`-- gradle/\\n    `-- wrapper/\\n        `-- gradle-wrapper.jar\\n        `-- gradle-wrapper.properties\\n|-- src/\\n|-- .gitignore\\n|-- build.gradle\\n|-- gradlew\\n|-- gradlew.bat\"\n```\n\n----------------------------------------\n\nTITLE: Testing Across Different Runtime Versions\nDESCRIPTION: Example demonstrating how to test on multiple versions of Node.js using matrix syntax. The language plugin automatically inserts the appropriate tool installer task, and the build service creates parallel jobs for each runtime version.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/yaml.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmy build job:\n  toolset: node\n    # node language plugin knows it's so it will insert a node installer task.  So it knows nodejs element is a matrix.\n    # We will have a set of 'Set xxx Runtime Version' tasks.  In this case 'Set Node Runtime Version' (think nvm)\n    # Same for other runtimes like jvm, python, etc...\n    # The server will create a job for each of this and add the 'Set Node Runtime Version' task first in the job with a value\n    # The 'Set xxx Runtime Tasks' will use the tool installers feature above. \n    #   \n    nodejs:\n      - 0.12.7\n      - 4.3.2\n\n  # if steps do not exist the nodejs toolset plugin will npm install, npm test\n  # you can specify\n  steps:\n    - task: npm\n      inputs: \n        action: install\n\n    - task: gulp\n\n    - task: gulp\n      inputs: \n        gulpfile: gulpfile.js\n        action: test\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration Example\nDESCRIPTION: An example JSON structure showing nested variables for use in transformations or substitutions. Describes a hierarchical arrangement of data settings common in application configurations. Illustrates how to reference nested JSON nodes for variable substitution.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/README.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Data\": {\n    \"DefaultConnection\": {\n      \"ConnectionString\": \"Server=(localdb)\\SQLEXPRESS;Database=MyDB;Trusted_Connection=True\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ant Property Definition Example\nDESCRIPTION: Example showing how to pass custom properties and system variables to Ant build command line, demonstrating both direct property definition and environment variable usage.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/ANTV1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-DmyProperty=myPropertyValue\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n-DcollectionId=$(system.collectionId)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n-DcollectionIdAsEnvVar=%SYSTEM_COLLECTIONID%\n```\n\n----------------------------------------\n\nTITLE: App Settings JSON Configuration Example\nDESCRIPTION: Example JSON structure for configuring app settings in Azure App Service with support for slot settings\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureAppServiceSettingsV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n   {\n    \"name\": \"key1\", \n    \"value\": \"valueabcd\",\n    \"slotSetting\": false \n   },\n   {\n    \"name\": \"key2\", \n    \"value\": \"valueefgh\",\n    \"slotSetting\": true \n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Configuration Settings\nDESCRIPTION: Examples of configuring web app configuration settings for Azure App Service using key-value pairs. Shows syntax for setting PHP version and Linux FX version.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureWebAppV1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-phpVersion 5.6 -linuxFxVersion: node|6.11\n```\n\n----------------------------------------\n\nTITLE: Example App Settings Configuration for Azure App Service\nDESCRIPTION: Shows how to configure application settings for an Azure App Service using key-value pairs. Settings are loaded at application startup.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFunctionAppContainerV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-Port 5000 -RequestTimeout 5000 \\n-WEBSITE_TIME_ZONE \"Eastern Standard Time\"\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies Installation Script for Azure App Service\nDESCRIPTION: Batch script that installs Python dependencies on Azure App Service after deployment. The script checks for requirements.txt, validates Python extension availability, and installs dependencies using pip.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV4/README.md#2025-04-18_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n@echo off\nif NOT exist requirements.txt (\n echo No Requirements.txt found.\n EXIT /b 0\n)\nif NOT exist \"$(PYTHON_EXT)/python.exe\" (\n echo Python extension not available >&2\n EXIT /b 1\n)\necho Installing dependencies\ncall \"$(PYTHON_EXT)/python.exe\" -m pip install -U setuptools\nif %errorlevel% NEQ 0 (\n echo Failed to install setuptools >&2\n EXIT /b 1\n)\ncall \"$(PYTHON_EXT)/python.exe\" -m pip install -r requirements.txt\nif %errorlevel% NEQ 0 (\n echo Failed to install dependencies>&2\n EXIT /b 1\n)\n```\n\n----------------------------------------\n\nTITLE: Demand Configuration for Tasks in Azure Pipelines\nDESCRIPTION: Examples of how task demands and satisfies properties are configured. Shows how a Chocolatey task demands the chocolatey capability, while the installer task satisfies that demand but requires powershell.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/tools.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ndemands: [\n    \"chocolatey\"\n]\n```\n\nLANGUAGE: json\nCODE:\n```\ndemands: [\n    \"powershell\"\n],\nsatisfies: [\n    \"chocolatey\"\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying Container App with resource group provided\nDESCRIPTION: This snippet shows how to deploy a Container App to a specific resource group. If the specified resource group does not exist, the task will create it. The task uses a service connection to Azure, builds an image from the specified source path, and pushes it to ACR.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n```yml\nsteps:\n\n  - task: AzureContainerApps@1\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      resourceGroup: 'my-test-rg'\n```\n```\n\n----------------------------------------\n\nTITLE: Test Results File Pattern Example in Azure Pipelines\nDESCRIPTION: Example pattern for matching JUnit test result XML files in Azure Pipelines. The pattern matches all XML files whose names start with 'TEST-' in any subdirectory.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/ANTV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n**/TEST-*.xml\n```\n\n----------------------------------------\n\nTITLE: Deployment Script for Python Dependency Installation\nDESCRIPTION: Bash/CMD script for installing Python dependencies during Azure Web App deployment, checking for requirements.txt and using Python extension to install packages\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV3/README.md#2025-04-18_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n@echo off\nif NOT exist requirements.txt (\n echo No Requirements.txt found.\n EXIT /b 0\n)\nif NOT exist \"$(PYTHON_EXT)/python.exe\" (\n echo Python extension not available >&2\n EXIT /b 1\n)\necho Installing dependencies\ncall \"$(PYTHON_EXT)/python.exe\" -m pip install -U setuptools\nif %errorlevel% NEQ 0 (\n echo Failed to install setuptools >&2\n EXIT /b 1\n)\ncall \"$(PYTHON_EXT)/python.exe\" -m pip install -r requirements.txt\nif %errorlevel% NEQ 0 (\n echo Failed to install dependencies>&2\n EXIT /b 1\n)\n```\n\n----------------------------------------\n\nTITLE: Installing SqlServer PowerShell Module\nDESCRIPTION: This PowerShell command installs the SqlServer module for all users, making the Invoke-Sqlcmd cmdlet available. This is required for deploying SQL Server scripts using the Azure SQL Database Deployment task. It ensures that the agent running the task has the necessary SQL Server cmdlets available.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/SqlAzureDacpacDeploymentV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Install-Module -Name SqlServer -Scope AllUsers\"\n```\n\n----------------------------------------\n\nTITLE: Storing PFX Certificate to Disk with Password Protection in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to store a PFX certificate on the hard disk with password protection. It exports the certificate collection to a protected byte array and writes it to a file.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV2/README.md#2025-04-18_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Get the file created\n$password = <password>\n$protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12, $password)\n$pfxPath = [Environment]::GetFolderPath(\"Desktop\") + \"\\MyCert.pfx\"\n[System.IO.File]::WriteAllBytes($pfxPath, $protectedCertificateBytes)\n```\n\n----------------------------------------\n\nTITLE: Deploying Container App with name provided\nDESCRIPTION: This snippet shows how to deploy a Container App and explicitly specify the container app name. The task uses a service connection to Azure, builds an image from the specified source path, and pushes it to ACR, using the given container app name.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n```yml\nsteps:\n\n  - task: AzureContainerApps@1\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      containerAppName: 'my-test-container-app'\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Timeline Records in Azure Pipelines\nDESCRIPTION: Commands for creating and updating detailed timeline records in Azure Pipelines. These commands enable creating root records, nested records, and updating existing records with various parameters.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.logdetail id=new guid;name=project1;type=build;order=1]create new timeline record\n```\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.logdetail id=new guid;parentid=exist timeline record guid;name=project1;type=build;order=1]create new nested timeline record\n```\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.logdetail id=existing timeline record guid;progress=15;state=InProgress;]update timeline record\n```\n\n----------------------------------------\n\nTITLE: Configuring Web App Configuration Settings\nDESCRIPTION: Configuration settings for web applications with key-value pairs, supporting syntax for specifying PHP and Node.js versions\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV4/README.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n-phpVersion 5.6 -linuxFxVersion: node|6.11\n```\n\n----------------------------------------\n\nTITLE: Asserting Exception Handling in PowerShell\nDESCRIPTION: The `Assert-Throws` function is designed to assert that a particular script block throws an exception. It can validate the caught exception message against a specified pattern to ensure proper exception handling in tests.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tests-Legacy/lib/TestHelpersModule/README.md#2025-04-18_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$ScriptBlock, $MessagePattern\n```\n\n----------------------------------------\n\nTITLE: YAML Snippet for FileTransform Task in Azure DevOps\nDESCRIPTION: Defines the YAML configuration for Azure DevOps pipelines using the FileTransform task. Describes task input parameters such as folderPath, xmlTransformationRules, and targetFiles. Supports variable substitutions, with optional configuration for XML transformation specific to Windows platforms.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/README.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: FileTransform@2\n  inputs:\n    #folderPath: '$(System.DefaultWorkingDirectory)/**/*.zip' \n    #enableXmlTransform: # Optional\n    #xmlTransformationRules: '-transform **\\*.Release.config -xml **\\*.config-transform **\\*.$(Release.EnvironmentName).config -xml **\\*.config' # Optional\n    #fileType: # Optional. Options: xml, json\n    #targetFiles: # Optional\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Resource Management SDK\nDESCRIPTION: NPM command to install the azure-arm-resource package for Node.js.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceManagerTemplateDeploymentV3/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install azure-arm-resource\n```\n\n----------------------------------------\n\nTITLE: Associating Artifacts in Azure Pipelines\nDESCRIPTION: These commands create artifact links for different artifact types, including container, filepath, version control, Git reference, and TFVC label. The artifact location must be a file container path, VC path, or UNC share path.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[artifact.associate artifacttype=container;artifactname=MyServerDrop]#/1/build\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[artifact.associate artifacttype=filepath;artifactname=MyFileShareDrop]\\\\MyShare\\MyDropLocation\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[artifact.associate artifacttype=versioncontrol;artifactname=MyTfvcPath]$/MyTeamProj/MyFolder\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[artifact.associate artifacttype=gitref;artifactname=MyTag]refs/tags/MyGitTag\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[artifact.associate artifacttype=tfvclabel;artifactname=MyTag]MyTfvcLabel\n```\n\n----------------------------------------\n\nTITLE: Deploying Existing Image to Azure Container App using YAML Pipeline\nDESCRIPTION: A minimal configuration example that deploys an existing container image to an Azure Container App without building a new image. This approach uses the default naming conventions for the Container App and resource group.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@1\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      imageToDeploy: mcr.microsoft.com/azuredocs/containerapps-helloworld:latest\n```\n\n----------------------------------------\n\nTITLE: Version Pattern Matching for .NET Core SDK/Runtime\nDESCRIPTION: Supports flexible version specification with patterns like Major.Minor.x and Major.x to fetch the latest available versions\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/UseDotNetV2/Task Design.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": [\n    \"2.2.104\",\n    \"2.2.x\",\n    \"2.x\"\n  ],\n  \"includePreviewVersions\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example Configuration Settings for Azure App Service\nDESCRIPTION: Demonstrates how to specify configuration settings for an Azure App Service, including PHP version and Linux framework version.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFunctionAppContainerV1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-phpVersion 5.6 -linuxFxVersion: node|6.11\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Deploy Options for Azure App Service Deployment\nDESCRIPTION: Examples of Web Deploy configuration options available for Azure App Service deployment, including renaming locked files, removing additional files, and excluding App_Data folder files.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV3/README.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **Rename locked files\\*:**  Rename file which are still in use by the web server by enabling msdeploy flag MSDEPLOY_RENAME_LOCKED_FILES=1 in Azure App Service application settings. The option if set enables msdeploy to rename locked files that are locked during app deployment\n\n* **Remove additional files at destination\\*:**  Deletes files on the Azure App Service that have no matching files in the App Service artifact package or folder getting deployed.\n\n* **Exclude files from the App_Data folder\\*:**  Prevent files in the App_Data folder (in the artifact package/folder getting deployed) from being deployed to the Azure App Service\n\n* **Additional Web Deploy arguments\\*:** Arguments that will be applied when deploying the Azure App Service. Example: -disableLink:AppPoolExtension -disableLink:ContentExtension.For more examples of Web Deploy operation settings, refer [Web Deploy Operation Settings](https://go.microsoft.com/fwlink/?linkid=838471)\n```\n\n----------------------------------------\n\nTITLE: Wide Pattern Matching with Exclusions\nDESCRIPTION: This snippet provides an example of using a broad inclusion pattern to match test DLLs and how to apply exclusions for unwanted files. It helps to control which test assemblies are executed by excluding folders or certain DLL patterns to refine test execution selection.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/VsTestV2/README.md#2025-04-18_snippet_1\n\nLANGUAGE: Batch/Shell\nCODE:\n```\n\"**\\\\*test*.dll\\n!**\\\\obj\\\\**\\n!**\\\\*.resources.dll\\n!**\\\\*TestAdapter.dll\\n!**\\\\*Microsoft.*TestPlatform*.dll\\n!**\\\\*testhost*.dll\\n!**\\\\testcentric.engine.metadata.dll\"\n```\n\n----------------------------------------\n\nTITLE: Wide Include Pattern with Exclusions in Azure Pipelines\nDESCRIPTION: This snippet illustrates the use of a wide include pattern with exclusions to filter test assemblies in Visual Studio tasks. It begins with a broad selection pattern to include all DLLs containing 'test' and applies subsequent exclusions to filter out unwanted assemblies such as those in intermediate build directories or specific framework DLLs.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/VsTestV3/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n**\\*test*.dll\n!**\\obj\\**\n!**\\*.resources.dll\n!**\\*TestAdapter.dll\n!**\\*Microsoft.*TestPlatform*.dll\n!**\\*testhost*.dll\n!**\\testcentric.engine.metadata.dll\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Principal Variables in PowerShell\nDESCRIPTION: Shows how to access service principal environment variables in PowerShell scripts.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureCLIV2/Readme.md#2025-04-18_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$env:servicePrincipalId\n```\n\n----------------------------------------\n\nTITLE: Adding Node16 execution handler in task.json\nDESCRIPTION: This snippet shows how to add a new Node16 execution handler in the `task.json` file. This is a crucial step for enabling the task to run on Node 16. The `target` and `argumentFormat` should be appropriately configured for the task.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/migrateNode16.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"execution\": {\n      \"Node10\": {\n        \"target\": \"bash.js\",\n        \"argumentFormat\": \"\"\n      },\n      \"Node16\": {\n        \"target\": \"bash.js\",\n        \"argumentFormat\": \"\"\n      }\n    }\n    \n```\n\n----------------------------------------\n\nTITLE: HttpRequest Configuration for Server Tasks - JSON\nDESCRIPTION: This snippet defines the structure for implementing an HttpRequest in server tasks. The configuration includes parameters for endpoint invocation, HTTP method, request body, headers, and completion handling.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/servertaskauthoring.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"HttpRequest\": {\n        \"Execute\": {\n            \"EndpointId\": \"optional\",\n            \"Endpoint URL\": \"http://example.com/api\",\n            \"Method\": \"POST\",\n            \"Body\": \"{\\\"key\\\": \\\"value\\\"}\",\n            \"Headers\": \"{\\\"Content-Type\\\": \\\"application/json\\\"}\",\n            \"WaitForCompletion\": true,\n            \"Expression\": \"eq(root['status'], 'successful')\"\n        },\n        \"Cancel\": {\n            \"EndpointId\": \"optional\",\n            \"Body\": \"{\\\"cancel\\\": true}\"\n        },\n        \"Events\": {\n            \"TaskStarted\": {\n                \"Timeout\": \"00:05:00\"\n            },\n            \"TaskCompleted\": {\n                \"Timeout\": \"00:07:00\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Gradle Wrapper\nDESCRIPTION: This snippet contains commands to create a Gradle wrapper in a project directory. The command ensures that the appropriate Gradle version is used for the build process without requiring a pre-installed Gradle on the build agent.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/GradleV2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngradle wrapper\n```\n\n----------------------------------------\n\nTITLE: Deploying Container App with name and resource group\nDESCRIPTION: This snippet shows how to deploy a Container App, explicitly providing both the container app name and resource group. If the specified resource group does not exist, the task creates it. The task uses a service connection to Azure, builds an image from the specified source path, and pushes it to ACR.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n```yml\nsteps:\n\n  - task: AzureContainerApps@1\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      containerAppName: 'my-test-container-app'\n      resourceGroup: 'my-test-rg'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Source Maps in tsconfig.json\nDESCRIPTION: Configuration for the tsconfig.json file to enable source maps generation, which is necessary for debugging TypeScript code in VS Code. It specifies ES6 as the target, commonjs as the module system, and enables sourceMap generation.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/debugging.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"target\": \"ES6\",\n        \"module\": \"commonjs\",\n        \"sourceMap\":true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Override Test Run Parameters Example\nDESCRIPTION: Demonstrates how to override test run parameters defined in runsettings file\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/VsTestV1/README.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nPlatform=$(platform);Port=8080\n```\n\n----------------------------------------\n\nTITLE: Generating Gradle Wrapper\nDESCRIPTION: This snippet shows the command to generate the Gradle wrapper files, which allows a build agent to download and configure the correct Gradle environment. This command is executed from the root project directory, where the build.gradle file resides. This avoids requiring specific Gradle installations on the build agent.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/GradleV3/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"jamal@fabrikam> gradle wrapper\"\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching for Test Assemblies\nDESCRIPTION: This snippet demonstrates how to specify test assembly names using minimatch patterns to include or exclude certain DLLs in test execution. It allows users to automatically select test DLLs based on naming conventions or custom patterns that include or exclude files as necessary.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/VsTestV2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Batch/Shell\nCODE:\n```\n\"**\\\\bin\\\\**\\\\*test.dll\\n**\\\\bin\\\\**\\\\*tests.dll\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Web App Settings for Azure Deployment\nDESCRIPTION: Example of how to specify configuration settings when deploying to an Azure Web App. These settings control the web app's behavior.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureWebAppContainerV1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-phpVersion 5.6 -linuxFxVersion: node|6.11\n```\n\n----------------------------------------\n\nTITLE: Setting Progress for Azure Pipelines Tasks\nDESCRIPTION: Command for setting progress percentage and current operation for the current task. The value parameter indicates the percentage of completion.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.setprogress value=75;]Upload Log\n```\n\n----------------------------------------\n\nTITLE: Using ACR Credentials for Authentication\nDESCRIPTION: Deploy a Container App using Azure Container Registry credentials and building from source path\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@0\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      acrUsername: $(ACR_USERNAME_SECRET)\n      acrPassword: $(ACR_PASSWORD_SECRET)\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum Agent Version\nDESCRIPTION: Set minimum agent version based on the Node.js handler being used, ensuring compatibility and automatic agent upgrades\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/migrateNode20.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"minimumAgentVersion\": \"3.232.1\"\n```\n\n----------------------------------------\n\nTITLE: Using Azure CLI to Add a Secret to Key Vault\nDESCRIPTION: Command to add a password named SQLPassword with value Pa$$w0rd to a Key Vault named ContosoKeyVault using Azure CLI.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz keyvault secret set --vault-name 'ContosoKeyVault' --name 'SQLPassword' --value 'Pa$$w0rd'\n```\n\n----------------------------------------\n\nTITLE: Deploying Container App with runtime stack\nDESCRIPTION: This snippet shows how to deploy a Container App and specify a runtime stack. This is useful when your application requires a specific runtime. The task uses a service connection to Azure, builds an image from the specified source path, and pushes it to ACR.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\n```yml\nsteps:\n\n  - task: AzureContainerApps@1\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      runtimeStack: 'dotnetcore:7.0'\n```\n```\n\n----------------------------------------\n\nTITLE: SqlPackage.exe Arguments Example\nDESCRIPTION: Illustrates the use of additional SqlPackage.exe arguments for customizing Azure SQL Database creation or updates. These arguments can override settings in the Publish profile XML file and allow specifying SQLCMD variables. This is useful for fine-grained control over the deployment process.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/SqlAzureDacpacDeploymentV1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"/p:IgnoreAnsiNulls=True /p:IgnoreComments=True\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Artifact in Azure Pipelines\nDESCRIPTION: This command uploads a local file into a file container folder and creates an artifact if the artifactname is provided. For use within a Stage, the containerfolder and artifactname must be the same.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[artifact.upload containerfolder=testresult;artifactname=uploadedresult;]c:\\testresult.trx\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Listing Virtual Networks with Azure Network Management SDK\nDESCRIPTION: This code snippet demonstrates how to authenticate with Azure using interactive login, create a Network Management client, and list virtual networks in a resource group. It requires the 'ms-rest-azure' and 'azure-arm-network' packages.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-network/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar msRestAzure = require('ms-rest-azure');\nvar NetworkManagementClient = require('azure-arm-network');\n\n// Interactive Login\n// It provides a url and code that needs to be copied and pasted in a browser and authenticated over there. If successful, \n// the user will get a DeviceTokenCredentials object.\nmsRestAzure.interactiveLogin(function(err, credentials) {\n var client = new NetworkManagementClient(credentials, 'your-subscription-id');\n client.virtualNetworks.list(resourceGroupName, function(err, result, request, response) {\n   if (err) console.log(err);\n   console.log(result);\n });\n});\n```\n\n----------------------------------------\n\nTITLE: Minimal YAML Configuration with Existing Image\nDESCRIPTION: Deploy a Container App using a pre-published image and YAML configuration file with minimal task parameters\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@0\n    displayName: Build and deploy Container App\n    inputs:\n      yamlConfigPath: simple-image-container-app.yaml\n```\n\n----------------------------------------\n\nTITLE: Building a Task in Debug Mode\nDESCRIPTION: A bash command to build a specific task in debug mode for remote debugging. This creates the necessary launch configurations for Visual Studio Code and prepares the task for debugging on the agent.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnode make.js build --task AzureCLIV2 --debug-agent-dir \"<path to the local agent run directory>\"\n```\n\n----------------------------------------\n\nTITLE: Prepending Directory to PATH in Azure Pipelines Task\nDESCRIPTION: This command instructs the agent to update the PATH environment variable by prepending the specified directory. The updated environment variable will be reflected in subsequent tasks.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[task.prependpath]c:\\my\\directory\\path\n```\n\n----------------------------------------\n\nTITLE: JSON Variable Replacement Example - JSON\nDESCRIPTION: This JSON snippet shows an example of how to structure configuration settings, specifically highlighting nested variable usage for dynamic value replacement during the variable substitution process in Azure DevOps pipelines.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"{\\n  \\\"Data\\\": {\\n    \\\"DefaultConnection\\\": {\\n      \\\"ConnectionString\\\": \\\"Server=(localdb)\\SQLEXPRESS;Database=MyDB;Trusted_Connection=True\\\"\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Emitting Logging Commands in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to emit a logging command using `Write-Host` to set a pipeline variable. It sets a variable named `testvar` to `testvalue` using the task.setvariable logging command.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nWrite-Host \\\"##vso[task.setvariable variable=testvar;]testvalue\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RunsOn Property for Server Tasks - JSON\nDESCRIPTION: This snippet illustrates the RunsOn property in task.json, which determines where the task should execute. The property accepts values such as 'Agent', 'DeploymentGroup', 'Server', and 'ServerGate', allowing flexibility in task execution environments.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/servertaskauthoring.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"RunsOn\": \"Server\" }\n```\n\n----------------------------------------\n\nTITLE: Deleting an Azure Resource Group\nDESCRIPTION: Example demonstrating how to delete an entire resource group with basic error handling and result logging.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclient.resourceGroup.deleteMethod(function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(result);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Gradle Wrapper\nDESCRIPTION: Demonstrates how to generate and configure a Gradle wrapper in a project directory. The Gradle wrapper ensures that every build uses the same Gradle version and configuration. Create the wrapper by running the 'gradle wrapper' command and upload it to the repository along with necessary binary artifacts like 'gradle-wrapper.jar'. Ensure to update 'gradle-wrapper.properties' when changing configurations.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/GradleV4/README.md#2025-04-18_snippet_0\n\nLANGUAGE: ssh\nCODE:\n```\n|-- gradle/\n    `-- wrapper/\n        `-- gradle-wrapper.jar\n        `-- gradle-wrapper.properties\n|-- src/\n|-- .gitignore\n|-- build.gradle\n|-- gradlew\n|-- gradlew.bat\n```\n\n----------------------------------------\n\nTITLE: Updating VMSS Upgrade Policy using Azure CLI\nDESCRIPTION: This command uses the Azure CLI to update the upgrade policy of a Virtual Machine Scale Set to 'Automatic'. It requires the resource group name and VMSS name as parameters.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureVmssDeploymentV0/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz vmss update --set upgradePolicy.mode=Automatic -g <resource group name> -n <vmss name>\n```\n\n----------------------------------------\n\nTITLE: Configuring App Settings in Azure App Service\nDESCRIPTION: App settings configuration with key-value pairs for web applications, supporting simple and quoted values with space-separated syntax\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV4/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-Port 5000 -RequestTimeout 5000\n-WEBSITE_TIME_ZONE \"Eastern Standard Time\"\n```\n\n----------------------------------------\n\nTITLE: Updating Build Number in Azure Pipelines\nDESCRIPTION: This command updates the build number for the current build. It requires a minimum agent version of 1.88.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[build.updatebuildnumber]my-new-build-number\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Listing VM Images with Azure Compute Management SDK\nDESCRIPTION: Example demonstrates interactive authentication with Azure and listing virtual machine images using the compute management client. The code shows how to create credentials through interactive login and use them to initialize the compute client for accessing VM images.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureVmssDeploymentV1/Tests/mock_node_modules/azure-arm-compute/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar msrestAzure = require('ms-rest-azure');\nvar computeManagementClient = require('azure-arm-compute');\n\n// Interactive Login\n// It provides a url and code that needs to be copied and pasted in a browser and authenticated over there. If successful, \n// the user will get a DeviceTokenCredentials object.\nmsRestAzure.interactiveLogin(function(err, credentials) {\n var client = new computeManagementClient(credentials, 'your-subscription-id');\n client.virtualMachineImages.list('westus', 'MicrosoftWindowsServer', 'WindowsServer', '2012-R2-Datacenter', function(err, result, request, response) {\n   if (err) console.log(err);\n   console.log(result);\n });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Filters in Azure AppConfiguration\nDESCRIPTION: Example JSON configuration for specifying key and label filters when creating an App Configuration snapshot. The filter shown matches keys starting with 'abc' and having the label '1.0.0'.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureAppConfigurationSnapshotV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\\\"key\\\":\\\"abc*\\\", \\\"label\\\":\\\"1.0.0\\\"}]\n```\n\n----------------------------------------\n\nTITLE: XML Transformation Rule Syntax in Shell\nDESCRIPTION: Specifies the syntax for applying XML transformations to configuration files using shell commands. Takes paths to transformation, source, and result files as parameters. Designed for use with .config files which may apply to different environments. Supports XML files, emphasizing their applicability in web service configurations.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-transform <path to the transform file> -xml <path to the source file> -result <path to the result file>\n```\n\n----------------------------------------\n\nTITLE: Example XML Transformation Rules in Shell\nDESCRIPTION: Examples show how to specify XML transformation rules using shell syntax. These are designed to run against all .Production.config files or stage-based configuration files. Demonstrates pattern matching in UNIX-like systems for config file names.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-transform **\\*.Production.config -xml **\\*.config\n```\n\nLANGUAGE: shell\nCODE:\n```\n-transform **\\*.$(Release.EnvironmentName).config -xml **\\*.config\n```\n\n----------------------------------------\n\nTITLE: Code Coverage Class Inclusion/Exclusion Filters\nDESCRIPTION: Configuration for including or excluding classes during code coverage analysis\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/MavenV2/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n+:com.*,+:org.*,-:my.app*.*\n```\n\n----------------------------------------\n\nTITLE: Accessing Service Principal Variables in Shell\nDESCRIPTION: Shows how to access service principal environment variables in Shell scripts.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureCLIV2/Readme.md#2025-04-18_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$servicePrincipalId\n```\n\n----------------------------------------\n\nTITLE: Completing Azure Pipelines Tasks with Result Status\nDESCRIPTION: Command to finish the timeline record for the current task, set the task result and current operation. The result parameter can be Succeeded, SucceededWithIssues, or Failed.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.complete result=Succeeded;]DONE\n```\n\n----------------------------------------\n\nTITLE: Common Utility Tasks and Publishing\nDESCRIPTION: Example showing how to use common utility tasks like copy and how to publish artifacts. The base language plugin has built-in knowledge of these common operations and can automatically map them to the appropriate tasks.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/yaml.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n\n  # base language plugin knows it's\n  - copy $(Build.SourcesDirectory) **/*.zip $(Build.ArtifactsDirectory) overwrite \n\npublish:\n  # publish to a server drop\n  - server $(Build.ArtifactsDirectory)/*.zip as AppZip\n```\n\n----------------------------------------\n\nTITLE: Invoke-Sqlcmd cmdlet Arguments Example\nDESCRIPTION: Provides an example of using additional Invoke-Sqlcmd cmdlet arguments when running SQL Script files or Inline SQL Scripts against an Azure SQL Database. These arguments enable customization of the script execution, such as setting connection timeouts and capturing SQL errors.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/SqlAzureDacpacDeploymentV1/README.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"-ConnectionTimeout 100 -OutputSqlError\"\n```\n\n----------------------------------------\n\nTITLE: Removing package versions from make.json\nDESCRIPTION: This snippet demonstrates how to remove specific package versions from the `make.json` file. This can be used to resolve dependency conflicts when upgrading to Node 16, ensuring that common dependencies have the same version as in the task.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/migrateNode16.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"rm\": [\n            {\n                \"items\": [\n                    \"node_modules/azure-pipelines-tasks-java-common/node_modules/azure-pipelines-task-lib\",\n                ],\n                \"options\": \"-Rf\"\n            }\n        ]\n    }\n    \n```\n\n----------------------------------------\n\nTITLE: Adding Node10 execution handler in task.json\nDESCRIPTION: This snippet showcases the initial Node10 execution configuration. This serves as a reference point before introducing the Node16 handler.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/migrateNode16.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"execution\": {\n      \"Node10\": {\n        \"target\": \"bash.js\",\n        \"argumentFormat\": \"\"\n      }\n    }\n    \n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Client on Linux\nDESCRIPTION: Command to install MySQL client on Linux agent systems using apt-get package manager\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureMysqlDeploymentV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get install mysql-client\n```\n\n----------------------------------------\n\nTITLE: Converting Base64 Certificate String to PFX in PowerShell\nDESCRIPTION: PowerShell script to convert a base64 encoded certificate string from Key Vault into a certificate collection. This allows manipulation of certificates retrieved as secrets.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Task parameters: $(PfxSecret)\nparam ($pfxSecretStringValue)\n$kvSecretBytes = [System.Convert]::FromBase64String($pfxSecretStringValue)\n$certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection\n$certCollection.Import($kvSecretBytes, $null, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Task Input Validation in Azure Pipelines Tasks\nDESCRIPTION: Demonstrates how to define validation for a task input using the validation property within an input definition. The validation includes an expression that uses the supported validation functions and a message key from the task.json file.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/taskinputvalidation.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    inputs: [\n                {\n                    \"name\": \"input1\",\n                    ...\n                    \"validation\": { //new\n                        \"expression\": \"VALIDATION_EXPRESSION_HERE\",\n                        \"message\": \"SOME_KEY_FROM_TASKJSON\"\n                    }\n                }\n        ]\n```\n\n----------------------------------------\n\nTITLE: Updating Release Name in Azure Pipelines\nDESCRIPTION: This command updates the release name for the current release. It requires a minimum agent version of 2.132 and is not supported in Azure DevOps Server (TFS) 2019 and below.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[release.updatereleasename]my-new-release-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Execution Environment in Azure Pipelines\nDESCRIPTION: This function sets up the Bash execution environment by determining the appropriate Bash executable and configuring its arguments based on input parameters.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/BashV3/README.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function run() {\n    try {\n        tl.setResourcePath(path.join(__dirname, 'task.json'));\n\n        // Get inputs\n        let input_failOnStderr = tl.getBoolInput('failOnStderr', false);\n        let input_workingDirectory = tl.getPathInput('workingDirectory', /*required*/ true, /*check*/ true);\n        let input_filePath = tl.getPathInput('filePath', /*required*/ true, /*check*/ true);\n        let input_arguments = tl.getInput('arguments', /*required*/ false);\n        let input_noProfile = tl.getBoolInput('noProfile', /*required*/ false);\n        let input_noRc = tl.getBoolInput('noRc', /*required*/ false);\n\n        // Generate the script contents\n        console.log(tl.loc('GeneratingScript'));\n        let bashPath: string = tl.which('bash', true);\n        let contents: string;\n        if (process.platform !== 'win32') {\n            contents = `#!/bin/bash\\n`;\n        }\n        contents += `. '${input_filePath.replace(\"'\", \"'\\''\")}' ${input_arguments}`;\n        console.log(tl.loc('GeneratedScript'));\n\n        // Write the script to disk\n        tl.assertAgent('2.115.0');\n        let tempDirectory = tl.getVariable('agent.tempDirectory');\n        tl.checkPath(tempDirectory, `${tempDirectory} (agent.tempDirectory)`);\n        let fileName = uuidV4() + '.sh';\n        let filePath = path.join(tempDirectory, fileName);\n        await fs.writeFile(\n            filePath,\n            contents,\n            { encoding: 'utf8' });\n\n        // Print one-time task variables\n        tl.setTaskVariable('bash.filepath', filePath);\n\n        // Create the tool runner\n        console.log(tl.loc('ScriptContents'));\n        console.log(contents);\n\n        let bash = tl.tool(bashPath);\n        if (input_noProfile) {\n            bash.arg('--noprofile');\n        }\n        if (input_noRc) {\n            bash.arg('--norc');\n        }\n        bash.arg(filePath);\n\n        let options = <tr.IExecOptions>{\n            cwd: input_workingDirectory,\n            failOnStdErr: input_failOnStderr,\n            errStream: process.stderr,\n            outStream: process.stdout,\n            ignoreReturnCode: true\n        };\n\n        // Listen for stderr.\n        let stderrFailure = false;\n        const aggregatedStderr: string[] = [];\n        if (input_failOnStderr) {\n            bash.on('stderr', (data: Buffer) => {\n                stderrFailure = true;\n                // Truncate to at most 10 error messages\n                if (aggregatedStderr.length < 10) {\n                    // Truncate to at most 1000 bytes\n                    if (data.length > 1000) {\n                        aggregatedStderr.push(data.toString('utf8', 0, 1000) + '...');\n                    }\n                    else {\n                        aggregatedStderr.push(data.toString('utf8'));\n                    }\n                }\n                else if (aggregatedStderr.length === 10) {\n                    aggregatedStderr.push('...');\n                }\n            });\n        }\n\n        // Run bash.\n        let exitCode: number = await bash.exec(options);\n\n        let result = tl.TaskResult.Succeeded;\n\n        // Fail on exit code.\n        if (exitCode !== 0) {\n            tl.error(tl.loc('BashFailed', exitCode));\n            result = tl.TaskResult.Failed;\n        }\n\n        // Fail on stderr.\n        if (stderrFailure) {\n            tl.error(tl.loc('StderrFound'));\n            for (let i = 0; i < aggregatedStderr.length; i++) {\n                tl.error(aggregatedStderr[i]);\n            }\n            result = tl.TaskResult.Failed;\n        }\n\n        tl.setResult(result, null, true);\n    }\n    catch (err) {\n        tl.setResult(tl.TaskResult.Failed, err.message || 'run() failed', true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating VMSS Upgrade Policy using Azure CLI\nDESCRIPTION: Azure CLI command to change the upgrade policy of a Virtual Machine Scale Set to Automatic mode. This command helps ensure VMSS instances are automatically updated when the scale set model changes.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureVmssDeploymentV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz vmss update --set upgradePolicy.mode=Automatic -g <resource group name> -n <vmss name>\n```\n\n----------------------------------------\n\nTITLE: Executing Bash Task in Azure Pipelines\nDESCRIPTION: This snippet executes the Bash task by calling the run() function and handling any errors that may occur during execution.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/BashV3/README.md#2025-04-18_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nrun();\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Account and Service Connection Matrix\nDESCRIPTION: Table showing valid combinations of storage account types and their corresponding Azure service connection types in TFS/Azure Pipelines.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Storage Account Type** | **Azure Service Connections in TFS/Azure Pipelines** |\n| --- | --- |\n| [Resource manager] | Azure Resource Manager EndPoint |\n| [Classic] | Azure EndPoint type with Certificate or credentials based authentication on work accounts |\n```\n\n----------------------------------------\n\nTITLE: Executing Advanced AppCmd Commands for IIS Deployment\nDESCRIPTION: This snippet demonstrates how to execute multiple AppCmd.exe commands to set properties for websites or application pools in IIS. Commands should be separated by line separators, allowing for the inclusion of various configurations in a single command input.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/IISWebAppDeployment/README.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nset config /section:applicationPools /[name='Fabrikam'].autoStart:false\n\tadd site /name:fabrikam /bindings:http/*:85: fabrikam.com.\n```\n\n----------------------------------------\n\nTITLE: Packing NuGet Packages\nDESCRIPTION: Configures NuGet package creation with advanced versioning and build properties\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/README.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- task: DotNetCoreCLI@2\n  inputs:\n    command: 'pack'\n    packagesToPack: '**/*.csproj'\n    versioningScheme: 'byBuildNumber'\n    verbosity: 'normal'\n```\n\n----------------------------------------\n\nTITLE: Azure VM Deployment Configuration Matrix\nDESCRIPTION: Table showing valid combinations of storage account types, service connections, and virtual machine types for Azure file copy operations.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Storage Account Type** | **Azure Service Connections in TFS/Azure Pipelines** | **Azure Virtual Machines** |\n| --- | --- | --- |\n| [Resource manager] | Azure Resource Manager Endpoint | [Resource manager] Azure Virtual machines |\n| [Classic] | Azure Endpoint type with Certificate or credentials based authentication on work accounts | [Classic] Azure Virtual machines |\n```\n\n----------------------------------------\n\nTITLE: Manual Image Digest Signing with Notation Task\nDESCRIPTION: An alternative method for signing a specific container image using its exact digest, bypassing automatic artifact detection\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/NotationV0/docs/sign-images-pipeline.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# sign the artifact\n- task: Notation@0\n  inputs:\n    artifactRefs: '<registry_host>/<repository>@<digest>'\n    command: 'sign'\n    plugin: 'azureKeyVault'\n    akvPluginVersion: <azure_key_vault_plugin_version>\n    azurekvServiceConection: <akv_service_connection>\n    keyid: <key_id>\n    selfSigned: true\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Active Directory Account Example\nDESCRIPTION: Example of an email address format used when creating an Azure Active Directory account for use with Azure Pipelines. This snippet demonstrates the expected format for the account username.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceManagerTemplateDeploymentV3/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntestuser@joehotmail.onmicrosoft.com\n```\n\n----------------------------------------\n\nTITLE: Checking in Task Assets to Source Control\nDESCRIPTION: Example showing how to reference tasks from source control, either from the same repository or external repositories. This allows for complete control over build tasks, ensuring repeatability and enabling testing of task changes.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/yaml.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# a definition will be able to have multiple jobs\nmy build job:\n\n  ## Tasks\n  tasks:\n     myTaskRepo:\n        type: git \n        location: http://somegitserver\n        ref: refs/heads/mybranch\n\n  ## specify language.\n  toolset: Xcode\n \n  ## variables are merged and overlayed over variables defined in the web definition editor.\n  variables:\n    foo: bar\n    baz: foo\n\n  steps:\n\n    # this would use the servers installed xcode task locked to 2.x and the rest of defaults\n    - task: XCode@2.x\n      inputs:\n        workspace: src/MyProject/My.xcworkspace    \n\n    # This would look for the task checked into source (starts with /) relative to the root of the repo\n    # other properties besides 'task' is mapped to an input \n    # SDK overwrides the highlevel property\n    - task: /tasks/xcode\n      inputs:\n        actions: build\n        SDK: $(SDK)\n        workspace: src/MyProject/My.xcworkspace\n\n    # This would look for the task checked into source (starts with /) relative to the root of the repo\n    # cloned from myTaskRepo\n    - task: /tasks/xcode @ myTaskRepo\n      inputs:\n        actions: build\n        workspace: src/MyProject/My.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Azure PowerShell Module Version Support Table\nDESCRIPTION: Markdown table showing supported Azure and AzureRM module versions across different Azure Pipelines/TFS releases.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV2/README.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  Azure Pipelines/TFS Release  |  Recommended Azure Version  |  Other Supported Versions |\n|:------------------:|:---------------------------:|:-------------------------:|\n|  Azure Pipelines              |  [v1.3.2] (https://github.com/Azure/azure-powershell/releases/tag/v1.3.2-April2016)  |  [v0.9.8] (https://github.com/Azure/azure-powershell/releases/tag/v0.9.8-September2015)  |\n|  TFS 2015 Update 3  | [v1.3.2] (https://github.com/Azure/azure-powershell/releases/tag/v1.3.2-April2016)  |  [v0.9.8] (https://github.com/Azure/azure-powershell/releases/tag/v0.9.8-September2015)  |\n|  TFS 2015 Update 2  | [v1.0.2] (https://github.com/Azure/azure-powershell/releases/tag/v1.0.2-December2015)  |  [v0.9.8] (https://github.com/Azure/azure-powershell/releases/tag/v0.9.8-September2015)  |\n|  TFS 2015 Update 1  | [v0.9.8] (https://github.com/Azure/azure-powershell/releases/tag/v0.9.8-September2015)  |  |\n|  TFS 2015 RTM       | [v0.9.8] (https://github.com/Azure/azure-powershell/releases/tag/v0.9.8-September2015)  |  |\n```\n\n----------------------------------------\n\nTITLE: Azure Pipeline YAML Task Configuration\nDESCRIPTION: Complete YAML configuration example for the Azure App Service Settings task including app settings, general settings, and connection strings\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureAppServiceSettingsV1/README.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: AzureAppServiceSettings@1\n  displayName: 'Azure App Service Settings: demo_webapp'\n  inputs:\n    azureSubscription: demo_subscription_id\n    appName: demo_webapp\n    appSettings: |\n     [ { \"name\": \"key1\", \"value\": \"valueabcd\", \"slotSetting\": false }, { \"name\": \"key2\", \"value\": \"valueefgh\", \"slotSetting\": true } ]\n    generalSettings: |\n     [ { \"alwaysOn\": true, \"webSocketsEnabled\": false } ]\n    connectionStrings: |\n     [ { \"name\": \"key1\", \"value\": \"valueabcd\", \"type\": \"MySql\", \"slotSetting\": false }, { \"name\": \"key2\", \"value\": \"valueefgh\", \"type\": \"Custom\", \"slotSetting\": true } ]\n```\n\n----------------------------------------\n\nTITLE: Removing Incompatible Agent-Base Dependencies in JSON Configuration\nDESCRIPTION: This code shows how to configure make.json to remove incompatible agent-base package versions (below 6.0.2) from node modules. This prevents task failures when running with Node.js 10+ with proxy configurations.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/validation-errors.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"rm\": [\n      {\n        \"items\": [\n          \"node_modules/https-proxy-agent/node_modules/agent-base\",\n          \"node_modules/azure-pipelines-tasks-azure-arm-rest/node_modules/agent-base\"\n        ],\n        \"options\": \"-Rf\"\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Metadata with Handlebars\nDESCRIPTION: This Handlebars template iterates through a dataset to create JSON objects. Each object contains properties like path, lastModified, itemType, and a metadata section including a download URL. The template also conditionally includes the `fileLength` property if it exists.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DownloadBuildArtifactsV0/vsts.redirect.handlebars.txt#2025-04-18_snippet_0\n\nLANGUAGE: Handlebars\nCODE:\n```\n\"[{{\n{{#value}}\n{\n  \\\"path\\\": \\\"{{{this.path}}}\\\",\n  \\\"lastModified\\\": \\\"{{{this.dateLastModified}}}\\\",\n  {{#if fileLength}}\n  \\\"fileLength\\\" : \\\"{{{this.fileLength}}}\\\",\n  {{/if}}\n  \\\"itemType\\\": \\\"{{{this.itemType}}}\\\",\n  \\\"metadata\\\":\n    {\n      \\\"downloadUrl\\\" : \\\"{{{this.contentLocation}}}&isShallow=true&preferRedirect=true&api-version=4.1-preview.4\\\"\n    }\n}{{#unless @last}},{{/unless}}\n{{/value}}\n}]\"\n```\n\n----------------------------------------\n\nTITLE: Web Deploy Configuration Options\nDESCRIPTION: Configuration options available when using Web Deploy method, including file handling and additional arguments\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV5/README.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **Rename locked files\\*:**  MSDEPLOY_RENAME_LOCKED_FILES=1\n* **Remove additional files at destination\\*:**  Deletes unmatched files\n* **Exclude files from the App_Data folder\\*:**  Prevents App_Data deployment\n* **Additional Web Deploy arguments\\*:** Custom msdeploy arguments\n```\n\n----------------------------------------\n\nTITLE: Container App Environment Configuration\nDESCRIPTION: Deploy a Container App with a custom Container App environment\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@0\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      containerAppEnvironment: 'my-test-container-app-env'\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Resource Group\nDESCRIPTION: Example demonstrating how to create or update a resource group with specific location and tags. The example includes error handling and response inspection.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar util = require('util');\nvar groupParameters = {\n  location: 'West US',\n  tags: {\n    tag1: 'val1',\n    tag2: 'val2'\n  }\n};\nclient.resourceGroup.createOrUpdate(groupParameters, function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n    /*err has reference to the actual request and response, so you can see what was sent and received on the wire.\n      The structure of err looks like this:\n      err: {\n        code: 'Error Code',\n        message: 'Error Message',\n        body: 'The response body if any',\n        request: reference to a stripped version of http request\n        response: reference to a stripped version of the response\n      }\n    */\n  } else {\n    console.log('result is: ' + util.inspect(result, {depth: null}));\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Certificate to Local Store in PowerShell\nDESCRIPTION: PowerShell script to import a certificate collection into the local machine certificate store. This example shows how to work with certificates after they've been retrieved from Key Vault.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV1/README.md#2025-04-18_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$CertStore = New-Object System.Security.Cryptography.X509Certificates.X509Store(\"My\",\"LocalMachine\")\n$CertStore.Open(\"ReadWrite\")\n$CertStore.AddRange($certCollection)\n$CertStore.Close()\n```\n\n----------------------------------------\n\nTITLE: Multi-Level Lookup Configuration for .NET Core\nDESCRIPTION: Configures multi-level lookup for shared framework probing on Windows agents, controlling framework discovery locations\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/UseDotNetV2/Task Design.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nDOTNET_MULTILEVEL_LOOKUP=1\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Task with Make.js\nDESCRIPTION: A bash command to build a specific task using the make.js script. This is more efficient than building all tasks when working on a specific component.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode make.js build --task ShellScript\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Azure Resource\nDESCRIPTION: Example showing how to create or update a generic Azure resource within a resource group.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceManagerTemplateDeploymentV3/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar resourceName = 'autorestsite102';\nvar params = { 'location': 'West US', 'properties' : { 'SiteMode': 'Limited', 'ComputeMode': 'Shared' }, 'Name': resourceName };\nvar resourceType = 'sites';\nvar parentResourcePath = '';\nvar resourceProviderNamespace = 'Microsoft.Web';\nvar apiVersion = '2014-04-01';\nclient.resources.createOrUpdate(, parentResourcePath,\n  resourceType, resourceName , apiVersion, params, function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(result);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Subscription Resources\nDESCRIPTION: Example showing how to list all resources in an Azure subscription.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceManagerTemplateDeploymentV3/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclient.resources.list(function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(result);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Switching Docker to Linux Containers on Windows\nDESCRIPTION: PowerShell command to switch Docker to use Linux containers on a Windows agent. This is necessary if the task needs to work with Linux-based images on a Windows environment.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n& `.\\DockerCli.exe` -SwitchDaemon\n```\n\n----------------------------------------\n\nTITLE: Tool Cache Structure Example in Azure Pipelines\nDESCRIPTION: Shows the directory structure for the tool cache where installed tools are stored. The cache is organized by tool name, version, optional platform, and binaries.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/tools.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{cacheRoot}\n    {Name}\n        {version}\n            [{platform}]\n                 {binaries}\n```\n\n----------------------------------------\n\nTITLE: Adding Build Tag in Azure Pipelines\nDESCRIPTION: This command adds a tag to the current build. It requires a minimum agent version of 1.95.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[build.addbuildtag]Tag_UnitTestPassed\n```\n\n----------------------------------------\n\nTITLE: Updating Task and Tool Libraries\nDESCRIPTION: Update azure-pipelines-task-lib to ^4.13.0 and azure-pipelines-tool-lib to ^2.0.7, ensuring consistent versions across dependencies\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/migrateNode20.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rm\": [\n        {\n            \"items\": [\n                \"node_modules/any-common-npm-package/node_modules/azure-pipelines-task-lib\",\n                \"node_modules/any-common-npm-package/node_modules/azure-pipelines-tool-lib\"\n            ],\n            \"options\": \"-Rf\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Mock Command Invocation in PowerShell\nDESCRIPTION: The `Assert-WasCalled` function checks whether a mocked command was invoked with the expected parameters. It can specify the number of expected invocations and supports complex matching logic through parameters and arguments evaluators.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tests-Legacy/lib/TestHelpersModule/README.md#2025-04-18_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Command, $Times, $Arguments\n```\n\n----------------------------------------\n\nTITLE: Uploading File as Additional Log in Azure Pipelines Task\nDESCRIPTION: This command uploads a user-specified file as additional log information to the current timeline record. The uploaded file will be available for download along with task logs.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[task.uploadfile]c:\\additionalfile.log\n```\n\n----------------------------------------\n\nTITLE: Example App Settings Configuration\nDESCRIPTION: Examples of configuring application settings for Azure App Service using key-value pairs. Shows syntax for setting port, timeout and timezone values.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureWebAppV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-Port 5000 -RequestTimeout 5000\n-WEBSITE_TIME_ZONE \"Eastern Standard Time\"\n```\n\n----------------------------------------\n\nTITLE: Output Variable Path Example Format\nDESCRIPTION: Shows the format for specifying output variables when installing multiple extensions. These variables store local installation paths of selected extensions that can be used in web.config configuration.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureAppServiceManageV0/README.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\noutputVariable1, outputVariable2\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Network Management SDK using npm\nDESCRIPTION: This command installs the Azure Network Management SDK package for Node.js using npm.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-network/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install azure-arm-network\n```\n\n----------------------------------------\n\nTITLE: Building All Tasks in Debug Mode\nDESCRIPTION: A bash command to build all tasks in debug mode for remote debugging. This is useful when needing to debug multiple tasks on the agent.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnode make.js build --debug-agent-dir \"<path to the local agent root directory>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment Group Registration Script\nDESCRIPTION: PowerShell script for registering a machine with an Azure Pipelines deployment group, enabling targeted database deployments across multiple machines\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/SqlDacpacDeploymentOnMachineGroupV0/README.md#2025-04-18_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Regenerate script with PAT\n# Copy and execute on target machine in admin PowerShell\n# Registers machine with deployment group\n```\n\n----------------------------------------\n\nTITLE: Updating @types/node dependency in package.json\nDESCRIPTION: This snippet shows how to update the `@types/node` dependency in the `package.json` file. This update is a required step for upgrading tasks to Node 16. If the task does not directly use Node.js built-in modules, this dependency can be removed.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/migrateNode16.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n      \"dependencies\": {\n        \"@types/node\": \"^16.11.39\"\n      }\n    \n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for the Project\nDESCRIPTION: A bash command to install all required dependencies for the project. This needs to be run once before building or testing.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring App Settings for Azure Web App Deployment\nDESCRIPTION: Example of how to specify application settings when deploying to an Azure Web App. App settings are key-value pairs loaded on startup.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureWebAppContainerV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-Port 5000 -RequestTimeout 5000 \n-WEBSITE_TIME_ZONE \"Eastern Standard Time\"\n```\n\n----------------------------------------\n\nTITLE: Azure AD Account Email Format\nDESCRIPTION: Example format for Azure Active Directory account email used in service connections\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureAppServiceManageV0/README.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntestuser@joehotmail.onmicrosoft.com\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Repository for Azure Pipelines Tasks\nDESCRIPTION: Command to clone the Azure Pipelines Tasks repository from GitHub. This is the initial step before adding subtrees.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/localpackages_buildconfig.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/microsoft/azure-pipelines-tasks  \n```\n\n----------------------------------------\n\nTITLE: Building Azure Pipelines Tasks with Local Packages Configuration\nDESCRIPTION: Commands for building Azure Pipelines tasks with local packages configuration. The first command builds all tasks, while the second builds only a specific task (MavenV4) with local packages configuration.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/localpackages_buildconfig.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode make.js build --includeLocalPackagesBuildConfig\nnode make.js build --includeLocalPackagesBuildConfig --task MavenV4\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPI Publisher Task in Azure Pipelines\nDESCRIPTION: Defines the parameters and requirements for publishing a Python package to PyPI using a generic service connection. Requires a valid setup.py file and PyPI credentials.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/PyPIPublisherV0/README.md#2025-04-18_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- task: PyPIPublisher@1\n  inputs:\n    pythonPackagePath: '$(System.DefaultWorkingDirectory)/package'\n    pyPIConnection: 'MyPyPIConnection'\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Azure Pipelines Image Baking Task\nDESCRIPTION: Provides overview and documentation for a machine image creation task in Azure Pipelines, explaining the purpose and context of image baking process\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/PackerBuildV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Bake immutable machine image Task\n```\n\n----------------------------------------\n\nTITLE: Building All Tasks Using NPM Script\nDESCRIPTION: A bash command to build and test all tasks in the repository. This process can take a while and outputs the results to the _build directory.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Test Results File Wildcard Example\nDESCRIPTION: Wildcard pattern for matching test result XML files in a Maven project build\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/MavenV2/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n**/TEST-*.xml\n```\n\n----------------------------------------\n\nTITLE: SqlPackage.exe Installation Paths\nDESCRIPTION: Typical installation locations for SqlPackage.exe across different Microsoft development tools and SQL Server versions\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/SqlDacpacDeploymentOnMachineGroupV0/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# SQL Server 2014 default path\nC:\\Program Files (x86)\\Microsoft SQL Server\\120\\DAC\\bin\n\n# Visual Studio 2015 path\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\SQLDB\\DAC\\120\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy\nDESCRIPTION: This PowerShell command sets the execution policy to Unrestricted for the current process. This allows the installation script to be executed without security restrictions, which is a prerequisite for installing the task.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/pinToTaskVersion/pinToTaskVersion.md#2025-04-18_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n\"Set-ExecutionPolicy Unrestricted -Scope Process -Force\"\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Bash Task in Azure Pipelines\nDESCRIPTION: This snippet imports necessary modules from the Azure Pipelines Task SDK and other required dependencies for implementing the Bash task.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/BashV3/README.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as tl from 'azure-pipelines-task-lib/task';\nimport * as tr from 'azure-pipelines-task-lib/toolrunner';\nimport * as utils from './utils';\n```\n\n----------------------------------------\n\nTITLE: Test Filter Criteria Configuration\nDESCRIPTION: Example of filtering tests using test case filter criteria to select specific tests based on priority or name\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/VsTestV1/README.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nPriority=1 | Name=MyTestMethod\n```\n\n----------------------------------------\n\nTITLE: Custom Dockerfile Configuration\nDESCRIPTION: Deploy a Container App using a custom Dockerfile for image creation\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV0/README.md#2025-04-18_snippet_10\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n\n  - task: AzureContainerApps@0\n    displayName: Build and deploy Container App\n    inputs:\n      connectedServiceNameARM: 'azure-subscription-service-connection'\n      appSourcePath: '$(System.DefaultWorkingDirectory)'\n      acrName: 'mytestacr'\n      dockerfilePath: 'test.Dockerfile'\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Array of Artifacts with Handlebars\nDESCRIPTION: This Handlebars template generates a JSON array of artifact objects. It iterates through the `artifacts` array and creates a JSON object for each artifact, including the path, item type, and a download URL constructed using context variables such as `endpoint.url`, `jobUrlInfix`, `multibranchPipelineUrlInfix`, and `version`.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/JenkinsDownloadArtifactsV1/jenkins.handlebars.txt#2025-04-18_snippet_0\n\nLANGUAGE: Handlebars\nCODE:\n```\n[\\n{{#artifacts}}\\n  {\\n    \"path\" : \"{{{this.relativePath}}}\",\\n    \"itemType\": \"file\",\\n    \"metadata\" : {\\n      \"downloadUrl\": \"{{{../endpoint.url}}}{{{../jobUrlInfix}}}/{{{../multibranchPipelineUrlInfix}}}/{{{../version}}}/artifact/{{{this.relativePath}}}\"\\n    }\\n  }{{#unless @last}},{{/unless}}\\n{{/artifacts}}\\n]\\n\n```\n\n----------------------------------------\n\nTITLE: ServiceBus Message Posting Configuration for Server Tasks - JSON\nDESCRIPTION: This snippet specifies how to configure a ServiceBus action in server tasks, detailing the parameters required for posting messages to Azure Service Bus queues, including connection details and message body.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/servertaskauthoring.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ServiceBus\": {\n        \"Execute\": {\n            \"EndpointId\": \"optional\",\n            \"ConnectionString\": \"<your-service-bus-connection-string>\",\n            \"ServiceBusQueueName\": \"yourQueueName\",\n            \"Namespace\": \"yourNamespace\",\n            \"MessageBody\": \"{\\\"message\\\": \\\"Hello World\\\"}\",\n            \"MessageProperties\": \"{\\\"property1\\\": \\\"value1\\\"}\"\n        },\n        \"Cancel\": {\n            \"EndpointId\": \"optional\",\n            \"Body\": \"{\\\"cancel\\\": true}\"\n        },\n        \"Events\": {\n            \"TaskStarted\": {\n                \"Timeout\": \"00:05:00\"\n            },\n            \"TaskCompleted\": {\n                \"Timeout\": \"00:07:00\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Wrapper Directory Structure\nDESCRIPTION: This snippet illustrates the expected directory structure after generating the Gradle wrapper. It shows where the wrapper files should reside within the project repository, which is crucial for proper functioning under continuous integration.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/GradleV2/README.md#2025-04-18_snippet_1\n\nLANGUAGE: ssh\nCODE:\n```\n|-- gradle/\n    `-- wrapper/\n        `-- gradle-wrapper.jar\n        `-- gradle-wrapper.properties\n|-- src/\n|-- .gitignore\n|-- build.gradle\n|-- gradlew\n|-- gradlew.bat\n```\n\n----------------------------------------\n\nTITLE: Unregistering Mocked Commands in PowerShell\nDESCRIPTION: The `Unregister-Mock` function removes a mock command registration. It utilizes the specified command name to clean up mocked environments.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tests-Legacy/lib/TestHelpersModule/README.md#2025-04-18_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Command\n```\n\n----------------------------------------\n\nTITLE: Registering Mocked Commands in PowerShell\nDESCRIPTION: The `Register-Mock` function allows for mocking commands in PowerShell. It supports various ways to register mocks using arguments arrays, parameters evaluators or arguments evaluators, enabling flexible testing setups.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tests-Legacy/lib/TestHelpersModule/README.md#2025-04-18_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Command, $Func, $Arguments\n```\n\n----------------------------------------\n\nTITLE: Asserting Object Equality in PowerShell\nDESCRIPTION: The `Assert-AreEqual` function recursively compares two objects and verifies if they are equal. It allows for null values and empty strings to be considered equal. This function takes the expected and actual objects as parameters and returns an assertion result based on a strict comparison methodology.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tests-Legacy/lib/TestHelpersModule/README.md#2025-04-18_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Expected, $Actual, $Message\n```\n\n----------------------------------------\n\nTITLE: Registering Mock Commands in PowerShell\nDESCRIPTION: The Register-Mock function allows you to mock commands in PowerShell scripts. It supports various ways to handle arguments, provide functions, and evaluate parameters using script blocks. This is useful for testing without making actual command calls.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tests/lib/TestHelpersModule/README.md#2025-04-18_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRegister-Mock Get-Foo\nRegister-Mock Get-Foo { 'Some return value' }\nRegister-Mock Get-Foo { 'Some return value' } -- -SomeParameter 'Some parameter value'\nRegister-Mock Get-Foo -Arguments @( '-SomeParameter', 'Some parameter value' )\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nRegister-Mock Get-Foo { 'Some return value' } -ParametersEvaluator { $SomeParameter -like '*SomeValue*' }\nRegister-Mock Get-Foo -ParametersEvaluator { $SomeParameter -like '*SomeValue*' }\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nRegister-Mock Get-Foo { 'return val' } -ArgumentsEvaluator { $args.count -eq 1 -and $args[0] -like '*SomeValue*' }\nRegister-Mock Get-Foo -ArgumentsEvaluator { $args.count -eq 1 -and $args[0] -like '*SomeValue*' }\n```\n\n----------------------------------------\n\nTITLE: Asserting Object Inequality in PowerShell\nDESCRIPTION: The `Assert-AreNotEqual` function performs a similar role to `Assert-AreEqual`, asserting that two objects are not equal. It utilizes strict comparison principles to prevent false positives.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tests-Legacy/lib/TestHelpersModule/README.md#2025-04-18_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$NotExpected, $Actual, $Message\n```\n\n----------------------------------------\n\nTITLE: Azure Resource Management Authentication and Client Creation\nDESCRIPTION: Example showing how to authenticate with Azure using interactive login and create a resource management client to list resources.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceManagerTemplateDeploymentV3/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar msRestAzure = require('ms-rest-azure');\nvar resourceManagement = require(\"azure-arm-resource\");\n\n// Interactive Login\nmsRestAzure.interactiveLogin(function(err, credentials) {\n var client = new resourceManagement.ResourceManagementClient(credentials, groupName, 'your-subscription-id');\n client.resources.list(function(err, result) {\n   if (err) console.log(err);\n   console.log(result);\n });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript DevDependency Version\nDESCRIPTION: Update TypeScript to version 5.1.6 in package.json devDependencies to ensure type compatibility and resolve potential type errors\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/migrateNode20.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n    \"typescript\": \"5.1.6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Generic Azure Resource\nDESCRIPTION: Example demonstrating how to get details of a specific Azure resource in a resource group.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceManagerTemplateDeploymentV3/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar resourceName = 'autorestsite102';\nvar resourceType = 'sites';\nvar parentResourcePath = '';\nvar resourceProviderNamespace = 'Microsoft.Web';\nvar apiVersion = '2014-04-01';\nclient.resources.get(resourceProviderNamespace, parentResourcePath,\n  resourceType, resourceName, apiVersion, function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(result);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Artifact Metadata with Handlebars\nDESCRIPTION: This Handlebars template generates a JSON array representing artifact metadata. It iterates through an 'artifacts' array and constructs a JSON object for each artifact, including its path, itemType, and a download URL.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/JenkinsDownloadArtifactsV2/jenkins.handlebars.txt#2025-04-18_snippet_0\n\nLANGUAGE: Handlebars\nCODE:\n```\n[\\n{{#artifacts}}\\n  {\\n    \"path\" : \"{{{this.relativePath}}}\",\\n    \"itemType\": \"file\",\\n    \"metadata\" : {\\n      \"downloadUrl\": \"{{{../endpoint.url}}}{{{../jobUrlInfix}}}/{{{../multibranchPipelineUrlInfix}}}/{{{../version}}}/artifact/{{{this.relativePath}}}\"\\n    }\\n  }{{#unless @last}},{{/unless}}\\n{{/artifacts}}\\n]\\n\n```\n\n----------------------------------------\n\nTITLE: ServiceBus Publishing Tasks in Azure Pipelines\nDESCRIPTION: Built-in server task for publishing messages to Azure ServiceBus, enabling message-based communication between pipeline components.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/servertaskauthoring.md#2025-04-18_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nPublishToAzureServiceBus: Tasks/PublishToAzureServiceBusV1/task.json\n```\n\n----------------------------------------\n\nTITLE: Updating Node Types Dependency\nDESCRIPTION: Update @types/node to version ^20.3.1 in package.json dependencies, with a note to remove if Node.js built-in modules are not directly used\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/migrateNode20.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n    \"@types/node\": \"^20.3.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Azure Pipelines Task Metadata JSON Structure\nDESCRIPTION: This JSON structure defines the format for representing metadata about files within an Azure Pipelines tasks project. It includes information like the file's path, last modification date, size, type, and a URL to download its content. The structure uses Handlebars-like syntax for templating purposes.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DownloadBuildArtifactsV0/vsts.handlebars.txt#2025-04-18_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n{{\"#value\"}}\n{\n  \"path\": \"{{{this.path}}}\",\n  \"lastModified\": \"{{{this.dateLastModified}}}\",\n  {{\"#if fileLength\"}}\n  \"fileLength\" : \"{{{this.fileLength}}}\",\n  {{\"/if\"}}\n  \"itemType\": \"{{{this.itemType}}}\",\n  \"metadata\":\n    {\n      \"downloadUrl\" : \"{{{this.contentLocation}}}&isShallow=true&api-version=4.1-preview.4\"\n    }\n}{{\"#unless @last\"}},{{\"/unless\"}}\n{{\"/value\"}}\n]\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Array for File Metadata - Handlebars\nDESCRIPTION: This snippet uses Handlebars templating to dynamically create a JSON array containing file metadata such as path, last modified date, file length, item type, content type, and download URL. The template leverages iteration and conditional logic to format the output correctly.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DownloadGitHubReleaseV0/githubrelease.handlebars.txt#2025-04-18_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n[\n{{#this}}\n  {\n    \"path\": \"{{this.name}}\",\n    \"lastModified\": \"{{this.updated_at}}\",\n    \"fileLength\" : \"{{this.size}}\",\n    \"itemType\": \"file\",\n    \"contentType\": \"application/octet-stream\",\n    \"metadata\": {\n        \"downloadUrl\" : \"{{this.url}}\"\n    }\n  }{{#unless @last}},{{/unless}}\n{{/this}}\n]\n```\n\n----------------------------------------\n\nTITLE: Asserting Non-Null or Non-Empty in PowerShell\nDESCRIPTION: The `Assert-IsNotNullOrEmpty` function checks if the provided object is neither null nor an empty string. It accepts the actual object and an optional message for reporting errors.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tests-Legacy/lib/TestHelpersModule/README.md#2025-04-18_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Actual, $Message\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Resource in Azure Resource Group\nDESCRIPTION: Example showing how to create or update a generic resource (in this case a website) within a resource group by specifying resource parameters, type, namespace, and API version.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar resourceName = 'autorestsite102';\nvar params = { 'location': 'West US', 'properties' : { 'SiteMode': 'Limited', 'ComputeMode': 'Shared' }, 'Name': resourceName };\nvar resourceType = 'sites';\nvar parentResourcePath = '';\nvar resourceProviderNamespace = 'Microsoft.Web';\nvar apiVersion = '2014-04-01';\nclient.resources.createOrUpdate(, parentResourcePath,\n  resourceType, resourceName , apiVersion, params, function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(result);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Generic Azure Resource\nDESCRIPTION: Example demonstrating how to delete a specific Azure resource in a resource group.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceManagerTemplateDeploymentV3/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar resourceName = 'autorestsite102';\nvar resourceType = 'sites';\nvar parentResourcePath = '';\nvar resourceProviderNamespace = 'Microsoft.Web';\nvar apiVersion = '2014-04-01';\nclient.resources.deleteMethod(resourceProviderNamespace, parentResourcePath,\n  resourceType, resourceName, apiVersion, function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(result);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Tasks in Azure Pipelines\nDESCRIPTION: Collection of built-in server tasks that perform HTTP requests including InvokeRestApi, AzureMonitor, AzureFunction, and QueryWorkItems tasks. These tasks are used for various API integrations and monitoring purposes.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/servertaskauthoring.md#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nInvokeRestApi: Tasks/InvokeRestApiV1/task.json\nAzureMonitor: Tasks/AzureMonitorV0/task.json\nAzureFunction: Tasks/AzureFunctionV1/task.json\nQueryWorkItems: Tasks/QueryWorkItemsV0/task.json\n```\n\n----------------------------------------\n\nTITLE: Switching Docker Daemon Mode on Windows\nDESCRIPTION: PowerShell command to switch the Docker daemon between Windows and Linux container modes, typically required when running on Windows agents to support Linux containers.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureContainerAppsV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n& `.\\DockerCli.exe` -SwitchDaemon\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Listing VM Images with Azure SDK\nDESCRIPTION: Example showing interactive authentication with Azure and listing available virtual machine images. Uses ms-rest-azure for authentication and azure-arm-compute client for VM operations.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureVmssDeploymentV0/Tests/mock_node_modules/azure-arm-compute/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar msrestAzure = require('ms-rest-azure');\nvar computeManagementClient = require('azure-arm-compute');\n\n// Interactive Login\n// It provides a url and code that needs to be copied and pasted in a browser and authenticated over there. If successful, \n// the user will get a DeviceTokenCredentials object.\nmsRestAzure.interactiveLogin(function(err, credentials) {\n var client = new computeManagementClient(credentials, 'your-subscription-id');\n client.virtualMachineImages.list('westus', 'MicrosoftWindowsServer', 'WindowsServer', '2012-R2-Datacenter', function(err, result, request, response) {\n   if (err) console.log(err);\n   console.log(result);\n });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Greater Than Condition in PowerShell\nDESCRIPTION: The `Assert-IsGreaterThan` function checks if one object is greater than another. It takes expected and actual parameters and optionally a message.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tests-Legacy/lib/TestHelpersModule/README.md#2025-04-18_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Expected, $Actual, $Message\n```\n\n----------------------------------------\n\nTITLE: Listing All Resources in Azure Subscription\nDESCRIPTION: Example showing how to list all resources within an Azure subscription with basic error handling and result logging.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclient.resources.list(function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(result);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Endpoint Fields in Azure Pipelines Tasks\nDESCRIPTION: Commands for setting endpoint fields with given values. These updates are retained in the endpoint for subsequent tasks that execute within the same job.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.setendpoint id=000-0000-0000;field=authParameter;key=AccessToken]testvalue\n```\n\nLANGUAGE: shell\nCODE:\n```\n##vso[task.setendpoint id=000-0000-0000;field=dataParameter;key=userVariable]testvalue\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Listing Azure Resources\nDESCRIPTION: Example showing how to use interactive login for Azure authentication and then listing all resources using the ResourceManagementClient.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar msRestAzure = require('ms-rest-azure');\nvar resourceManagement = require(\"azure-arm-resource\");\n\n// Interactive Login\nmsRestAzure.interactiveLogin(function(err, credentials) {\n var client = new resourceManagement.ResourceManagementClient(credentials, groupName, 'your-subscription-id');\n client.resources.list(function(err, result) {\n   if (err) console.log(err);\n   console.log(result);\n });\n});\n```\n\n----------------------------------------\n\nTITLE: Getting a Generic Resource from Azure Resource Group\nDESCRIPTION: Example demonstrating how to retrieve a specific resource (a website) from a resource group by specifying the resource name, type, namespace, and API version.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar resourceName = 'autorestsite102';\nvar resourceType = 'sites';\nvar parentResourcePath = '';\nvar resourceProviderNamespace = 'Microsoft.Web';\nvar apiVersion = '2014-04-01';\nclient.resources.get(resourceProviderNamespace, parentResourcePath,\n  resourceType, resourceName, apiVersion, function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(result);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Command Calls in PowerShell\nDESCRIPTION: The Assert-WasCalled function evaluates if a command was invoked the expected number of times in a PowerShell script. It offers options to use argument and parameter evaluators for more complex assertion logic, aiding in precise test validations.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tests/lib/TestHelpersModule/README.md#2025-04-18_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nAssert-WasCalled Get-Foo -Times 0\nAssert-WasCalled Get-Foo -- -SomeParameter 'Some parameter value'\nAssert-WasCalled Get-Foo -- -SomeSwitch: $true\nAssert-WasCalled Get-Foo -- -SomeSwitch\nAssert-WasCalled Get-Foo -Arguments @( '-SomeParameter', 'Some parameter value' )\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nAssert-WasCalled Get-Foo -ParametersEvaluator { $SomeParameter -like '*SomeValue*' }\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nAssert-WasCalled Get-Foo -ArgumentsEvaluator { $args.count -eq 1 -and $args[0] -like '*SomeValue*' }\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Resource Group\nDESCRIPTION: Example showing how to delete an Azure resource group.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceManagerTemplateDeploymentV3/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclient.resourceGroup.deleteMethod(function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(result);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Generic Resource in Azure Resource Group\nDESCRIPTION: Example showing how to delete a specific resource (a website) from a resource group by specifying the resource name, type, namespace, and API version.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar resourceName = 'autorestsite102';\nvar resourceType = 'sites';\nvar parentResourcePath = '';\nvar resourceProviderNamespace = 'Microsoft.Web';\nvar apiVersion = '2014-04-01';\nclient.resources.deleteMethod(resourceProviderNamespace, parentResourcePath,\n  resourceType, resourceName, apiVersion, function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(result);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Azure Policy Gates in Azure Pipelines\nDESCRIPTION: Built-in gates implementing multiple HTTP invocations for Azure Policy compliance checks and validations.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/servertaskauthoring.md#2025-04-18_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nAzurePolicy: Tasks/AzurePolicyV0/task.json\n```\n\n----------------------------------------\n\nTITLE: Installation Path Configuration for .NET Core SDK\nDESCRIPTION: Specifies a custom installation path for .NET Core SDK/Runtime, enabling isolated or shared version management\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/UseDotNetV2/Task Design.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninstallationPath: $(Agent.ToolsDirectory)\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for App Settings and Feature Management\nDESCRIPTION: Defines both application visual settings (colors, fonts, etc.) and feature management flags with different activation conditions. Includes time-window based feature activation and simple boolean toggles.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureAppConfigurationImportV10/Tests/sourceFiles/textFile.txt#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"app\": {\n        \"Settings\":{\n            \"BackgroundColor\":\"Yellow\",\n            \"FontSize\":\"45\",\n            \"Fruit\":\"Banana\",\n            \"Color\":\"Orange\",\n            \"FontColor\":\"Black\"\n        }\n    },\n    \"FeatureManagement\": {\n        \"FeatureT\": true, \n        \"FeatureU\": false, \n        \"FeatureV\": {\n            \"EnabledFor\": [\n                {\n                    \"Name\": \"TimeWindow\",\n                    \"Parameters\": {\n                    \"Start\": \"Wed, 01 May 2019 13:59:59 GMT\",\n                    \"End\": \"Mon, 01 July 2019 00:00:00 GMT\"\n                    }\n                }\n            ]\n        },\n        \"FeatureX\": {\n            \"EnabledFor\": [] \n        },\n        \"FeatureY\": {\n            \"EnabledFor\": [\n                {\n                \"Name\": \"AlwaysOn\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Null or Empty in PowerShell\nDESCRIPTION: The `Assert-IsNullOrEmpty` function verifies if the provided object is either null or an empty string. It accepts the actual object and an optional message.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tests-Legacy/lib/TestHelpersModule/README.md#2025-04-18_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Actual, $Message\n```\n\n----------------------------------------\n\nTITLE: Task Category Definition in JSON\nDESCRIPTION: An example of a task.json file snippet showing the category property that needs to be used when labeling PRs. This helps route the PR to the appropriate team responsible for the task.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"333b11bd-d341-40d9-afcf-b32d5ce6f23b\",\n    \"name\": \"NuGetCommand\",\n    \"friendlyName\": \"NuGet\",\n    \"description\": \"Restore, pack, or push NuGet packages, or run a NuGet command. Supports NuGet.org and authenticated feeds like Azure Artifacts and MyGet. Uses NuGet.exe and works with .NET Framework apps. For .NET Core and .NET Standard apps, use the .NET Core task.\",\n    \"helpMarkDown\": \"[More Information](https://go.microsoft.com/fwlink/?LinkID=613747)\",\n    \"category\": \"Package\",\n    \"author\": \"Microsoft Corporation\",\n    \"version\": {\n        \"Major\": 2,\n        \"Minor\": 0,\n        \"Patch\": 21\n    },\n```\n\n----------------------------------------\n\nTITLE: Test Assembly Configuration Example\nDESCRIPTION: Demonstrates how to specify test assemblies using wildcard patterns with include and exclude options\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/VsTestV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n**\\commontests\\*test*.dll; **\\frontendtests\\*test*.dll;-:**\\obj\\**\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$(Build.SourcesDirectory)\\Tests\\*tests*.dll;-:$(Build.SourcesDirectory)\\Tests\\Integrationtests.dll\n```\n\n----------------------------------------\n\nTITLE: Setting minimumAgentVersion in task.json\nDESCRIPTION: This snippet shows how to set the `minimumAgentVersion` in the `task.json` file. Setting it to `2.144.0` ensures that agents automatically upgrade to a version that supports Node 10 and Node 16 handlers. This triggers an automatic agent upgrade if the agent version is less than `2.144.0`.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/migrateNode16.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"minimumAgentVersion\": \"2.144.0\"\n    \n```\n\n----------------------------------------\n\nTITLE: Adding Deprecation Property to Task.json in Azure Pipelines\nDESCRIPTION: Sets the deprecated property to true in the task.json file to mark a task as deprecated. When this property is added to the latest version of a task, the system will consider the task deprecated and display it accordingly in the UI.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/deprecatedtasks.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n>\"deprecated\": true\n```\n\n----------------------------------------\n\nTITLE: Verifying Node and NPM Installation\nDESCRIPTION: A bash command to check Node.js and npm versions. The repository requires at least Node 4.2 and npm 5, although Node 10 is recommended for compatibility with the tooling.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ node -v && npm -v\nv4.2.0\n5.6.0\n```\n\n----------------------------------------\n\nTITLE: Adding Node20_1 Execution Handler\nDESCRIPTION: Add Node20_1 execution handler to task.json, maintaining compatibility with existing Node10 and Node16 handlers\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/migrateNode20.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"execution\": {\n    \"Node10\": {\n        \"target\": \"main.js\",\n        \"argumentFormat\": \"\"\n    },\n    \"Node16\": {\n        \"target\": \"main.js\",\n        \"argumentFormat\": \"\"\n    },\n    \"Node20_1\": {\n        \"target\": \"main.js\",\n        \"argumentFormat\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Listing VM Images with Azure Compute Management Client\nDESCRIPTION: This example demonstrates how to use interactive login for authentication with Azure and then list virtual machine images. It creates a compute management client and queries for Windows Server 2012 R2 Datacenter images in the West US region.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-compute/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar msrestAzure = require('ms-rest-azure');\nvar computeManagementClient = require('azure-arm-compute');\n\n// Interactive Login\n// It provides a url and code that needs to be copied and pasted in a browser and authenticated over there. If successful, \n// the user will get a DeviceTokenCredentials object.\nmsRestAzure.interactiveLogin(function(err, credentials) {\n var client = new computeManagementClient(credentials, 'your-subscription-id');\n client.virtualMachineImages.list('westus', 'MicrosoftWindowsServer', 'WindowsServer', '2012-R2-Datacenter', function(err, result, request, response) {\n   if (err) console.log(err);\n   console.log(result);\n });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Separately\nDESCRIPTION: A bash command to install npm version 5 globally. This is necessary if the current npm version is not compatible with the requirements.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[sudo] npm install npm@5 -g\nnpm -v\n5.6.0\n```\n\n----------------------------------------\n\nTITLE: Adding Git Subtree Dependencies for Azure Pipelines Tasks\nDESCRIPTION: Commands to add Git subtrees for dependencies. These commands add the azure-pipelines-task-lib and azure-pipelines-tasks-common-packages repositories as subtrees within the main repository.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/localpackages_buildconfig.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# add (one time)\ngit remote add -f azure-pipelines-task-lib https://github.com/microsoft/azure-pipelines-task-lib\ngit subtree add --prefix task-lib azure-pipelines-task-lib master --squash\n\ngit remote add -f azure-pipelines-tasks-common-packages https://github.com/microsoft/azure-pipelines-tasks-common-packages\ngit subtree add --prefix tasks-common azure-pipelines-tasks-common-packages main --squash\n```\n\n----------------------------------------\n\nTITLE: Running Legacy Tests for a Specific Task\nDESCRIPTION: A bash command to run legacy tests for a specific task. This allows targeted testing of older components.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnode make.js testLegacy --task Xcode\n```\n\n----------------------------------------\n\nTITLE: Version Tracking for Azure Pipelines Tasks\nDESCRIPTION: Lists version identifiers for specific pipeline task configurations, including default and specific versions\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/_generated/CargoAuthenticateV0.versionmap.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDefault|0.248.1\n```\n\nLANGUAGE: text\nCODE:\n```\nwif_242|0.248.2\n```\n\n----------------------------------------\n\nTITLE: Node JWS License\nDESCRIPTION: Details the licensing terms for the node-jws module, providing usage rights and limitations similar to those described in other licenses present in this file.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/ThirdPartyNotices.txt#2025-04-18_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\nCopyright (c) 2013 Brian J. Brennan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating Git Subtree Dependencies for Azure Pipelines Tasks\nDESCRIPTION: Commands to update the Git subtrees for dependencies. These commands pull the latest changes from the azure-pipelines-task-lib and azure-pipelines-tasks-common-packages repositories.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/localpackages_buildconfig.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# pull\ngit subtree pull --prefix task-lib azure-pipelines-task-lib master --squash\ngit subtree pull --prefix tasks-common azure-pipelines-tasks-common-packages main --squash\n```\n\n----------------------------------------\n\nTITLE: SSLeay License Header Comment Block\nDESCRIPTION: Original SSLeay implementation copyright and license header showing terms for cryptographic software written by Eric Young.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/ThirdPartyNotices.txt#2025-04-18_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n */\n```\n\n----------------------------------------\n\nTITLE: Installing Azure PowerShell on Automation Agent\nDESCRIPTION: Instructions for installing the required Azure PowerShell version on the automation agent using the Azure PowerShell Installer.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureRmWebAppDeploymentV3/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe task needs the Azure PowerShell version to be installed on the automation agent, and that can be done easily using the [Azure PowerShell Installer v1.3.0](https://github.com/Azure/azure-powershell/releases/tag/v1.3.0-March2016).\n```\n\n----------------------------------------\n\nTITLE: MIT License for Q\nDESCRIPTION: This code snippet represents the MIT License for the Q library. It details the permissions granted to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software. The license includes stipulations regarding copyright notices and liability, providing the software \"AS IS\" without warranty.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/ThirdPartyNotices.txt#2025-04-18_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n\"Copyright 20092014 Kristopher Michael Kowal. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \\\"Software\\\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BashV3 Old Source Behavior\nDESCRIPTION: Setting pipeline variable to restore previous script sourcing behavior in Azure Pipelines Bash task. This option is not recommended and should only be used with careful consideration.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/bashnote.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  AZP_BASHV3_OLD_SOURCE_BEHAVIOR: true\n```\n\n----------------------------------------\n\nTITLE: Original SSLeay License Header\nDESCRIPTION: Copyright notice and license terms for the original SSLeay implementation by Eric Young, including redistribution conditions and attribution requirements.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureAppServiceManageV0/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n */\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Active Directory User for MSDN Accounts\nDESCRIPTION: Steps to create a work account in Azure Active Directory for use with Azure Pipelines. This includes adding the account as a co-administrator and changing the initial password.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Create an user in the Azure Active Directory from the [portal](https://msdn.microsoft.com/en-us/library/azure/hh967632.aspx) (this is the old Azure portal). After adding the account, the following two things need to be done to use the organization in Azure Pipelines:\n  - Add the Active Directory account to the co-administrators in the subscription. Go to the Settings and then click on administrators and add the account as a co-admin like, [testuser@joehotmail.onmicrosoft.com](mailto:testuser@joehotmail.onmicrosoft.com)\n  - Login to the portal with this Active Directory account wiz. [testuser@joehotmail.onmicrosoft.com](mailto:testuser@joehotmail.onmicrosoft.com), and change the password. Initially a temporary password is created and that needs to be changed at the first login.\n2. Add that user and password in the service connections in the Azure Pipelines and deployments will work with that account.\n```\n\n----------------------------------------\n\nTITLE: Azure Container Registry Image Digest Example 1\nDESCRIPTION: This snippet showcases an example of an image digest from Azure Container Registry. The format consists of the registry name, the image name, and the SHA256 digest separated by '@'.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/ServiceFabricUpdateManifestsV2/Tests/data/TaggedDockerImageAssets/ImageDigestOutput.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"myacr.azurecr.io/image1@sha256:fe15a6d249761e301a577f908aa2e03849869f5731f818e20fef14af499f5fe7\"\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Information for node-uuid\nDESCRIPTION: This snippet includes the copyright notice and licensing information for the node-uuid library, specifying the terms of the MIT License under which the software can be used and the disclaimer provided by the authors regarding warranties.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/ThirdPartyNotices.txt#2025-04-18_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\n%% node-uuid NOTICES, INFORMATION, AND LICENSE BEGIN HERE\n=========================================\nThe MIT License (MIT)\n\nCopyright (c) 2010-2012 Robert Kieffer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the Software), to deal in\nthe Software without restriction, including without limitation the rights to use, copy,\nmodify, merge, publish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n=========================================\nEND OF node-uuid NOTICES, INFORMATION, AND LICENSE\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing azure-arm-compute Package with npm\nDESCRIPTION: Command to install the azure-arm-compute package using npm. This package is required to manage Microsoft Azure Compute Resources from Node.js applications.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-compute/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install azure-arm-compute\n```\n\n----------------------------------------\n\nTITLE: SSLeay License Declaration\nDESCRIPTION: Original SSLeay License copyright notice and terms by Eric Young, covering SSL implementation and cryptographic software usage conditions.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/JenkinsDownloadArtifactsV2/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n */\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Compute Management SDK for Node.js\nDESCRIPTION: Command to install the azure-arm-compute package using npm package manager.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureVmssDeploymentV1/Tests/mock_node_modules/azure-arm-compute/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install azure-arm-compute\n```\n\n----------------------------------------\n\nTITLE: Installing Azure ARM Resource Package with NPM\nDESCRIPTION: Command to install the azure-arm-resource package via npm which is required for managing Azure resources in Node.js applications.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install azure-arm-resource\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Header Block\nDESCRIPTION: Copyright notice and BSD-style license terms for the OpenSSL Project toolkit implementation.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/ThirdPartyNotices.txt#2025-04-18_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n */\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Bake Image Task\nDESCRIPTION: Provides documentation overview for an Azure Pipelines task related to machine image creation\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/PackerBuildV0/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Bake immutable machine image Task\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Compute Management SDK\nDESCRIPTION: Command to install the azure-arm-compute package via npm\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureVmssDeploymentV0/Tests/mock_node_modules/azure-arm-compute/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install azure-arm-compute\n```\n\n----------------------------------------\n\nTITLE: MIT License for node-uuid\nDESCRIPTION: This code snippet represents the MIT License under which the node-uuid library is distributed. It grants permission to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, subject to including the copyright notice and permission notice in all copies or substantial portions of the software. The software is provided \"AS IS\" without any warranty.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n\"The MIT License (MIT)\n\nCopyright (c) 2010-2012 Robert Kieffer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\"\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Header Comment\nDESCRIPTION: Copyright notice and BSD-style license terms for the OpenSSL Project toolkit implementation.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/JenkinsDownloadArtifactsV1/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n */\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Chef Knife Task\nDESCRIPTION: Simple markdown header identifying the Chef Knife task component\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/ChefKnifeV1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Chef Knife Task\n<br/>\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Full Text for ReportGenerator\nDESCRIPTION: Complete text of the Apache License Version 2.0 as applied to the ReportGenerator project, detailing terms of use, reproduction, and distribution\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/PublishCodeCoverageResultsV2/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: legal\nCODE:\n```\nCopyright 2019 Daniel Palme\n\nLicensed under the Apache License, Version 2.0\n```\n\n----------------------------------------\n\nTITLE: Copyright Notice for Unspecified Software Component\nDESCRIPTION: This snippet contains a copyright notice and permission statement for software use, modification, and distribution. It outlines specific conditions for distributing modified versions and binaries.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureVmssDeploymentV1/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*[\n * Copyright 1986 - 1993, 1998, 2004   Thomas Williams, Colin Kelley\n *\n * Permission to use, copy, and distribute this software and its\n * documentation for any purpose with or without fee is hereby granted,\n * provided that the above copyright notice appear in all copies and\n * that both that copyright notice and this permission notice appear\n * in supporting documentation.\n *\n * Permission to modify the software is granted, but not the right to\n * distribute the complete modified source code.  Modifications are to\n * be distributed as patches to the released version.  Permission to\n * distribute binaries produced by compiling modified sources is granted,\n * provided you\n *   1. distribute the corresponding source modifications from the\n *    released version in the form of a patch file along with the binaries,\n *   2. add special version identification to distinguish your version\n *    in addition to the base release version number,\n *   3. provide your name and address as the primary contact for the\n *    support of your modified version, and\n *   4. retain our contact information in regard to use of the base\n *    software.\n * Permission to distribute the released version of the source code along\n * with corresponding source modifications in the form of a patch file is\n * granted with same provisions 2 through 4 for binary distributions.\n *\n * This software is provided \"as is\" without express or implied warranty\n * to the extent permitted by applicable law.\n]*/\n```\n\n----------------------------------------\n\nTITLE: Uploading Build Log in Azure Pipelines\nDESCRIPTION: This command uploads a user-specified log file to the build's container \"logs\\tool\" folder.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/authoring/commands.md#2025-04-18_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n##vso[build.uploadlog]c:\\msbuild.log\n```\n\n----------------------------------------\n\nTITLE: SonarQube Configuration Properties\nDESCRIPTION: This snippet defines properties required for integration with SonarQube, including the project key, server URL, dashboard URL, the ID of the compute engine task, and the URL for the compute engine task.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/GradleV2/Tests/data/taskreport-valid/build/sonar/report-task.txt#2025-04-18_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n\"projectKey=test\nserverUrl=http://sonarqubeserver:9000\ndashboardUrl=http://sonarqubeserver:9000/dashboard/index/test\nceTaskId=asdfghjklqwertyuiopz\nceTaskUrl=http://sonarqubeserver:9000/api/ce/task?id=asdfghjklqwertyuiopz\"\n```\n\n----------------------------------------\n\nTITLE: Example Email Addresses in Documentation\nDESCRIPTION: Code snippets showing example email addresses that are referenced in the documentation regarding unsupported Microsoft accounts.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureCLIV1/Readme.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njoe@live.com\n```\n\nLANGUAGE: plaintext\nCODE:\n```\njoe@hotmail.com\n```\n\n----------------------------------------\n\nTITLE: Default Branch Version Tracking\nDESCRIPTION: Version identifier for the default branch of Azure Pipelines tasks\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/_generated/NuGetAuthenticateV1.versionmap.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDefault|1.247.4\n```\n\n----------------------------------------\n\nTITLE: Incomplete Python Function Definition\nDESCRIPTION: An incomplete or empty Python function definition containing only the 'def' keyword with no implementation or function name.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/ArchiveFilesV2/Tests/test_folder/a/def.txt#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef\n```\n\n----------------------------------------\n\nTITLE: License Grant\nDESCRIPTION: This code snippet defines the permission granted to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software. It also includes the conditions for usage, which include the copyright notice and permission notice in all copies or substantial portions of the software.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/ANTV1/ThirdPartyNotice.txt#2025-04-18_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Header Block\nDESCRIPTION: Standard copyright header and license notice for OpenSSL Project implementation, including conditions for redistribution and attribution requirements.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureAppServiceManageV0/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining service configurations\nDESCRIPTION: This snippet defines two service configurations: 'dev' and 'legacy'. These configurations likely represent different environments or versions of the service that the Azure Pipelines task interacts with. No specific language is used as it's a configuration.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/ServiceFabricUpdateManifestsV2/Tests/data/AmbiguousTaggedDockerImageAssets/BuiltDockerImages.txt#2025-04-18_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\n\"service:dev\\nservice:legacy\"\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Information for node-tar\nDESCRIPTION: This snippet provides the copyright information and the ISC License for the node-tar library, highlighting the permissions granted, the limitation of liability, and the disclaimer of warranties.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/ThirdPartyNotices.txt#2025-04-18_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\n%% node-tar NOTICES, INFORMATION, AND LICENSE BEGIN HERE\n=========================================\nThe ISC License\nCopyright (c) Isaac Z. Schlueter and Contributors\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\naction of contract, negligence or other tortious action, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n=========================================\nEND OF node-tar NOTICES, INFORMATION, AND LICENSE\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Azure Container Registry Image Digest Example 2\nDESCRIPTION: This snippet provides another example of an image digest from Azure Container Registry. Similar to the previous example, it follows the format of registry/image@sha256:digest.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/ServiceFabricUpdateManifestsV2/Tests/data/TaggedDockerImageAssets/ImageDigestOutput.txt#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"myacr.azurecr.io/image2@sha256:51e69f0fb28edfe11b50ed0bfe3a6621445dfef040de53b309bf47750648fb68\"\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 for oauth-sign\nDESCRIPTION: This snippet contains the full text of the Apache License 2.0, which applies to the oauth-sign component. It outlines terms and conditions for use, reproduction, and distribution of the software.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureVmssDeploymentV1/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nApache License\n\nVersion 2.0, January 2004\n\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of this License; and\n\nYou must cause any modified files to carry prominent notices stating that You changed the files; and\n\nYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Terms\nDESCRIPTION: The OpenSSL License terms defining redistribution requirements, copyright notices, and liability disclaimers for the OpenSSL Project toolkit.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV1/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\n *\n * 4. The names OpenSSL Toolkit and OpenSSL Project must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    openssl-core@openssl.org.\n *\n * 5. Products derived from this software may not be called OpenSSL\n *    nor may OpenSSL appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\n */\n```\n\n----------------------------------------\n\nTITLE: Node Tar License\nDESCRIPTION: Contains the ISC License for the node-tar module, allowing for its use, modification, and distribution within specified terms.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/ThirdPartyNotices.txt#2025-04-18_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\nThe ISC License\nCopyright (c) Isaac Z. Schlueter and Contributors\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\naCTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Node ECDSA Sig Formatter License\nDESCRIPTION: Contains the Apache License, Version 2.0, for the node-ecdsa-sig-formatter module, detailing how this software can be used and distributed.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/ThirdPartyNotices.txt#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\nCopyright 2015 D2L Corporation\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Q Library License Header Comment Block\nDESCRIPTION: Copyright and license header for Q library, including acknowledgments of multiple contributors and their respective licenses.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV4/ThirdPartyNotices.txt#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n */\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Text\nDESCRIPTION: This snippet contains the license text for OpenSSL, detailing the terms and conditions for redistribution and use in source and binary forms. It specifies copyright notices, advertising requirements, and limitations of liability.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/SqlAzureDacpacDeploymentV1/ThridPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\n *\n * 4. The names OpenSSL Toolkit and OpenSSL Project must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    openssl-core@openssl.org.\n *\n * 5. Products derived from this software may not be called OpenSSL\n *    nor may OpenSSL appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n```\n\n----------------------------------------\n\nTITLE: Original SSLeay License Text\nDESCRIPTION: This snippet provides the original SSLeay license text, which is also applicable to the OpenSSL toolkit. It outlines the conditions for commercial and non-commercial use, including attribution requirements and redistribution terms.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/SqlAzureDacpacDeploymentV1/ThridPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n * \n * This library is free for commercial and non-commercial use as long as\n * the following conditions are aheared to.  The following conditions\n * apply to all code found in this distribution, be it the RC4, RSA,\n * lhash, DES, etc., code; not just the SSL code.  The SSL documentation\n * included with this distribution is covered by the same copyright terms\n * except that the holder is Tim Hudson (tjh@cryptsoft.com).\n * \n * Copyright remains Eric Young's, and as such any Copyright notices in\n * the code are not to be removed.\n * If this package is used in a product, Eric Young should be given attribution\n * as the author of the parts of the library used.\n * This can be in the form of a textual message at program startup or\n * in documentation (online or textual) provided with the package.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *    This product includes cryptographic software written by\n *     Eric Young (eay@cryptsoft.com)\n *    The word 'cryptographic' can be left out if the rouines from the library\n *    being used are not cryptographic related :-).\n * 4. If you include any Windows specific code (or a derivative thereof) from \n *    the apps directory (application code) you must include an acknowledgement:\n *    This product includes software written by Tim Hudson (tjh@cryptsoft.com)\n * \n * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * \n * The licence and distribution terms for any publically available version or\n * derivative of this code cannot be changed.  i.e. this code cannot simply be\n * copied and put under another distribution licence\n * [including the GNU Public Licence.]\n```\n\n----------------------------------------\n\nTITLE: MPL Header Comment\nDESCRIPTION: Mozilla Public License header comment from public_suffix_list.dat file referenced in tough-cookie package license\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/JenkinsDownloadArtifactsV2/ThirdPartyNotices.txt#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n```\n\n----------------------------------------\n\nTITLE: WIF Branch Version Tracking\nDESCRIPTION: Version identifier for the WIF (Web Identity Federation) branch of Azure Pipelines tasks\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/_generated/NuGetAuthenticateV1.versionmap.txt#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nwif_242|1.247.5\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Task Version to TFS Collection\nDESCRIPTION: This PowerShell script installs a specific version of an Azure DevOps task to a TFS collection. The script requires the Collection URL and the task directory as parameters.  It allows administrators to control which task versions are used in their build and release pipelines.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/pinToTaskVersion/pinToTaskVersion.md#2025-04-18_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n\"$taskDir = _build\\Tasks\\BashV3 # Replace BashV3 with the name of the task you would like to install.\\n.\\docs\\pinToTaskVersion\\New-TaskInstallScript.ps1 -CollectionUrl http://myserver:8080/tfs/DefaultCollection -taskDir $taskDir\"\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Declaration\nDESCRIPTION: The OpenSSL License text defining terms for redistribution, modification, and usage of the OpenSSL software. Includes copyright notice, conditions, and disclaimer.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzurePowerShellV5/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\n *\n * 4. The names OpenSSL Toolkit and OpenSSL Project must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    openssl-core@openssl.org.\n *\n * 5. Products derived from this software may not be called OpenSSL\n *    nor may OpenSSL appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\n */\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License\nDESCRIPTION: This snippet contains the OpenSSL License text, detailing the terms and conditions for using, modifying, and redistributing the OpenSSL toolkit. Key aspects include the requirement to retain copyright notices, acknowledgment in advertising materials, restrictions on using the OpenSSL name without permission, and a disclaimer of warranties. The license also specifies that the product includes cryptographic software written by Eric Young and Tim Hudson.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV2/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\n *\n * 4. The names OpenSSL Toolkit and OpenSSL Project must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    openssl-core@openssl.org.\n *\n * 5. Products derived from this software may not be called OpenSSL\n *    nor may OpenSSL appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n *\n * This product includes cryptographic software written by Eric Young\n * (eay@cryptsoft.com).  This product includes software written by Tim\n * Hudson (tjh@cryptsoft.com).\n *\n */\"\n```\n\n----------------------------------------\n\nTITLE: MIT License for node-uuid\nDESCRIPTION: This snippet contains the MIT License text applicable to the node-uuid library.  It outlines the permissions granted to users, including the right to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, subject to the condition that the copyright notice and permission notice are included in all copies or substantial portions of the software. The license provides the software \"AS IS\", without warranty of any kind.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV2/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n\"The MIT License (MIT)\\n\\nCopyright (c) 2010-2012 Robert Kieffer\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\"\n```\n\n----------------------------------------\n\nTITLE: Original SSLeay License Declaration\nDESCRIPTION: The SSLeay License text written by Eric Young, defining terms for using the SSL implementation and related cryptographic software. Includes copyright notices and conditions for commercial and non-commercial use.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzurePowerShellV5/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n * \n * This library is free for commercial and non-commercial use as long as\n * the following conditions are aheared to.  The following conditions\n * apply to all code found in this distribution, be it the RC4, RSA,\n * lhash, DES, etc., code; not just the SSL code.  The SSL documentation\n * included with this distribution is covered by the same copyright terms\n * except that the holder is Tim Hudson (tjh@cryptsoft.com).\n */\n```\n\n----------------------------------------\n\nTITLE: Original SSLeay License\nDESCRIPTION: This snippet provides the text of the original SSLeay License. This license permits commercial and non-commercial use of the SSL implementation as long as certain conditions are met. These conditions involve retaining copyright notices, providing attribution to Eric Young if the package is used in a product, and including an acknowledgment if any Windows specific code is used. The license also disclaims all implied warranties.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV2/ThirdPartyNotices.txt#2025-04-18_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n\"/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n * \n * This library is free for commercial and non-commercial use as long as\n * the following conditions are aheared to.  The following conditions\n * apply to all code found in this distribution, be it the RC4, RSA,\n * lhash, DES, etc., code; not just the SSL code.  The SSL documentation\n * included with this distribution is covered by the same copyright terms\n * except that the holder is Tim Hudson (tjh@cryptsoft.com).\n * \n * Copyright remains Eric Young's, and as such any Copyright notices in\n * the code are not to be removed.\n * If this package is used in a product, Eric Young should be given attribution\n * as the author of the parts of the library used.\n * This can be in the form of a textual message at program startup or\n * in documentation (online or textual) provided with the package.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *    This product includes cryptographic software written by\n *     Eric Young (eay@cryptsoft.com)\n *    The word 'cryptographic' can be left out if the rouines from the library\n *    being used are not cryptographic related :-).\n * 4. If you include any Windows specific code (or a derivative thereof) from \n *    the apps directory (application code) you must include an acknowledgement:\n *    This product includes software written by Tim Hudson (tjh@cryptsoft.com)\n * \n * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * \n * The licence and distribution terms for any publically available version or\n * derivative of this code cannot be changed.  i.e. this code cannot simply be\n * copied and put under another distribution licence\n * [including the GNU Public Licence.]\"\n```\n\n----------------------------------------\n\nTITLE: MIT License for Q\nDESCRIPTION: This snippet contains the MIT License text applicable to the Q library. It describes the permissions and restrictions related to using, copying, modifying, merging, publishing, distributing, and sublicensing the software.  It also includes additional copyright and license information regarding third-party subcomponents used within q.js, originating from Kris Kowal, Tyler Close, and Mark Miller.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureKeyVaultV2/ThirdPartyNotices.txt#2025-04-18_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n\"Copyright 20092014 Kristopher Michael Kowal. All rights reserved.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \\\"Software\\\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\\n\\nThe file q.js is prefaced by the following additional third-party subcomponent information:\\n\\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\"\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Group\nDESCRIPTION: Example demonstrating how to create or update an Azure resource group with location and tags.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceManagerTemplateDeploymentV3/Tests/mock_node_modules/azure-arm-resource/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar util = require('util');\nvar groupParameters = {\n  location: 'West US',\n  tags: {\n    tag1: 'val1',\n    tag2: 'val2'\n  }\n};\nclient.resourceGroup.createOrUpdate(groupParameters, function (err, result, request, response) {\n  if (err) {\n    console.log(err);\n    /*err has reference to the actual request and response, so you can see what was sent and received on the wire.\n      The structure of err looks like this:\n      err: {\n        code: 'Error Code',\n        message: 'Error Message',\n        body: 'The response body if any',\n        request: reference to a stripped version of http request\n        response: reference to a stripped version of the response\n      }\n    */\n  } else {\n    console.log('result is: ' + util.inspect(result, {depth: null}));\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: SSLeay License Header Comment Block\nDESCRIPTION: Original SSLeay copyright and license header block written by Eric Young, detailing usage conditions and attributions.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV2/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n */\n```\n\n----------------------------------------\n\nTITLE: Node JWA License\nDESCRIPTION: Documents the licensing terms for the node-jwa module, which provides functionalities for JSON Web Algorithms. The license outlines the usage rights and obligations.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/ThirdPartyNotices.txt#2025-04-18_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\nCopyright (c) 2013 Brian J. Brennan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Node.js Licensing Information\nDESCRIPTION: Displays the licensing terms for Node.js and its contributors, emphasizing the permissible usages and limitations under which the software can be used and distributed.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\nCopyright Node.js contributors. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: MIT License (Kris Kowal, Tyler Close)\nDESCRIPTION: This snippet represents the MIT license applied to code by Kris Kowal and Tyler Close within the Q library. It allows for free use, modification, and distribution, provided the license terms are followed, including displaying the copyright notice. It specifies the URL where the license can be found and mentions related copyrights and contributors.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/ThirdPartyNotices.txt#2025-04-18_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n\"/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n */\"\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Information for node-jws\nDESCRIPTION: This snippet captures the copyright notice and licensing for the node-jws library, which similarly outlines the rights to use and distribute the software while limiting liability by providing an 'as is' disclaimer.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/ThirdPartyNotices.txt#2025-04-18_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\n%% node-jws NOTICES, INFORMATION, AND LICENSE BEGIN HERE\n=========================================\nCopyright (c) 2013 Brian J. Brennan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies\nor substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n=========================================\nEND OF node-jws NOTICES, INFORMATION, AND LICENSE\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Joyent Node License\nDESCRIPTION: Provides the licensing terms for parts of Node.js originating from the Joyent repository, indicating the same permissions and conditions as the Node.js license.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\nCopyright Joyent, Inc. and other Node contributors. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Q Library Copyright Header\nDESCRIPTION: Multi-component copyright notice for Q library, including attributions to multiple contributors and their respective licenses.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV2/ThirdPartyNotices.txt#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n */\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Information for node-ecdsa-sig-formatter\nDESCRIPTION: This snippet covers the copyright notice and license terms for the node-ecdsa-sig-formatter library, specifically outlining the permissions under the Apache License, Version 2.0, and stating that the software is distributed on an 'as is' basis.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\n%% node-ecdsa-sig-formatter NOTICES, INFORMATION, AND LICENSE BEGIN HERE\n=========================================\n Copyright 2015 D2L Corporation\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n=========================================\nEND OF node-ecdsa-sig-formatter NOTICES, INFORMATION, AND LICENSE\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Node UUID License\nDESCRIPTION: Describes the MIT License applicable to the node-uuid module, detailing how the software may be utilized and the liabilities involved.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/ThirdPartyNotices.txt#2025-04-18_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\nThe MIT License (MIT)\n\nCopyright (c) 2010-2012 Robert Kieffer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the Software), to deal in\nthe Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Q Library Copyright Header\nDESCRIPTION: Multi-component copyright notice for the Q library, including attributions to Kris Kowal, Tyler Close, and Mark Miller with their respective license terms.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureAppServiceManageV0/ThirdPartyNotices.txt#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n */\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Information for node-jwa\nDESCRIPTION: This snippet includes the copyright notice and license terms for the node-jwa library, highlighting the permissions under which the software can be used, modified, and distributed, along with a disclaimer of warranties.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/ThirdPartyNotices.txt#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\n%% node-jwa NOTICES, INFORMATION, AND LICENSE BEGIN HERE\n=========================================\nCopyright (c) 2013 Brian J. Brennan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies\nor substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n=========================================\nEND OF node-jwa NOTICES, INFORMATION, AND LICENSE\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Nopt License\nDESCRIPTION: Includes the ISC License for the nopt module, which clarifies the terms under which this software may be utilized and the limitations of liability.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/ThirdPartyNotices.txt#2025-04-18_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\nThe ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED AS IS AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: ToolInstaller API Interface for Azure Pipelines Tasks\nDESCRIPTION: Defines the API interface for tool installers, including methods for downloading packages, extracting archives, and setting environment variables.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/tools.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// returns location of downloaded package\ndownload(url: string): Promise string    \n\n// tar.gz, zip.  will support handful of well known as convenience.  can always control your own\n// will extract to the proper location in the agents tools folder\n// returns string of tool set\nextract(location: string: type: string): Promise string;\n\nprependPath(location: string): Promise void;\nsetToolVariable(name: string, location: string): Promise void;\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Header Comment Block\nDESCRIPTION: Standard copyright and license header for OpenSSL project implementation showing BSD-style open source license terms and conditions.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/ThirdPartyNotices.txt#2025-04-18_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n */\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License\nDESCRIPTION: This code snippet represents the OpenSSL License under which the OpenSSL toolkit is distributed. It outlines the conditions for redistribution and use, including retaining copyright notices, displaying acknowledgments, and restrictions on using the OpenSSL name. The license disclaims all implied warranties and limits liability.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n\"/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\n *\n * 4. The names OpenSSL Toolkit and OpenSSL Project must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    openssl-core@openssl.org.\n *\n * 5. Products derived from this software may not be called OpenSSL\n *    nor may OpenSSL appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n *\n * This product includes cryptographic software written by Eric Young\n * (eay@cryptsoft.com).  This product includes software written by Tim\n * Hudson (tjh@cryptsoft.com).\n */\"\n```\n\n----------------------------------------\n\nTITLE: SSLeay License Header Comment\nDESCRIPTION: Original SSLeay implementation copyright notice and license terms written by Eric Young.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/JenkinsDownloadArtifactsV1/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n */\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Header Comment Block\nDESCRIPTION: Standard copyright and license header block for OpenSSL, including copyright notice and BSD-style license terms.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV4/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n */\n```\n\n----------------------------------------\n\nTITLE: Public Suffix List Header Comment\nDESCRIPTION: Mozilla Public License header comment from the public_suffix_list.dat file indicating the license terms for that specific file.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureVmssDeploymentV1/ThirdPartyNotices.txt#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n```\n\n----------------------------------------\n\nTITLE: SSLeay License Header Comment Block\nDESCRIPTION: Original SSLeay copyright and license header block, including terms for using the cryptographic software written by Eric Young.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV4/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n */\n```\n\n----------------------------------------\n\nTITLE: Running Tests for All Built Tasks\nDESCRIPTION: Bash commands to run tests for all tasks that have been built (those in the _build directory). The npm test command is an alias for the node make.js test command.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n\n# which is alias for\nnode make.js test\n```\n\n----------------------------------------\n\nTITLE: Connection Strings JSON Configuration Example\nDESCRIPTION: Example JSON structure for configuring connection strings in Azure App Service with support for different types and slot settings\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureAppServiceSettingsV1/README.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n   {\n    \"name\": \"key1\", \n    \"value\": \"valueabcd\",\n    \"type\": \"MySql\", \n    \"slotSetting\": false \n   },\n   {\n    \"name\": \"key2\", \n    \"value\": \"valueefgh\",\n    \"type\": \"Custom\", \n    \"slotSetting\": true \n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Public Suffix List Header Comment\nDESCRIPTION: Source code header comment from public_suffix_list.dat file indicating Mozilla Public License v2.0\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureVmssDeploymentV0/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n```\n\n----------------------------------------\n\nTITLE: SSLeay License Terms\nDESCRIPTION: The original SSLeay License terms written by Eric Young, covering cryptographic software implementation and usage conditions.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV1/ThirdPartyNotices.txt#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n * \n * This library is free for commercial and non-commercial use as long as\n * the following conditions are aheared to.  The following conditions\n * apply to all code found in this distribution, be it the RC4, RSA,\n * lhash, DES, etc., code; not just the SSL code.  The SSL documentation\n * included with this distribution is covered by the same copyright terms\n * except that the holder is Tim Hudson (tjh@cryptsoft.com).\n * \n * Copyright remains Eric Young's, and as such any Copyright notices in\n * the code are not to be removed.\n * If this package is used in a product, Eric Young should be given attribution\n * as the author of the parts of the library used.\n * This can be in the form of a textual message at program startup or\n * in documentation (online or textual) provided with the package.\n */\n```\n\n----------------------------------------\n\nTITLE: Maven POM File Configuration\nDESCRIPTION: Configuration for Maven Project Object Model (POM) file, which defines project structure, dependencies, and build settings\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/MavenV2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Example Maven POM file structure -->\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.example</groupId>\n  <artifactId>my-project</artifactId>\n  <version>1.0.0</version>\n</project>\n```\n\n----------------------------------------\n\nTITLE: MIT License Text\nDESCRIPTION: This snippet represents the standard MIT license text, granting permissions for use, copy, modification, merging, publishing, distribution, sublicensing, and sale of the software. It includes a disclaimer of warranty and limitation of liability.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFunctionAppContainerV1/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"MIT License\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \\\"Software\\\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\"\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Header Comment Block\nDESCRIPTION: Standard copyright and license header block for OpenSSL project implementation files, including conditions and disclaimer.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureFileCopyV2/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n */\n```\n\n----------------------------------------\n\nTITLE: Original SSLeay License Block\nDESCRIPTION: Copyright notice and license terms for Eric Young's original SSL implementation including cryptographic software.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/ThirdPartyNotices.txt#2025-04-18_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n */\n\n```\n\n----------------------------------------\n\nTITLE: Running Legacy Tests for All Tasks\nDESCRIPTION: A bash command to run legacy tests which are located in the Tests-Legacy folder. These tests are for older components of the system.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/docs/contribute.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode make.js testLegacy\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Copyright Declaration\nDESCRIPTION: Copyright declaration and BSD-style license terms for the OpenSSL Project, including conditions for redistribution and attribution requirements.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/JenkinsDownloadArtifactsV2/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n */\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Information for Node.js\nDESCRIPTION: The snippet provides the full copyright notice and license for Node.js software, describing the terms under which the software can be used, copied, modified, and distributed. The software is provided 'as is' without warranties.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/ThirdPartyNotices.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\nCopyright Node.js contributors. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nauthors OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\"\"\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\nThis license applies to parts of Node.js originating from the\nhttps://github.com/joyent/node repository:\n\nCopyright Joyent, Inc. and other Node contributors. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nauthors OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: CC0 Waiver\nDESCRIPTION: This snippet indicates that copyright and related rights for sample code are waived via CC0. Sample code is defined as all source code displayed within the prose of the documentation, and links to the CC0 license are provided.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/ANTV1/ThirdPartyNotice.txt#2025-04-18_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code displayed within the prose of the\ndocumentation.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n```\n\n----------------------------------------\n\nTITLE: Original SSLeay License\nDESCRIPTION: This code snippet represents the Original SSLeay License, which is one of the licenses under which the OpenSSL toolkit is distributed. It permits commercial and non-commercial use as long as the conditions are adhered to, including retaining copyright notices, providing attribution to Eric Young, and including specific acknowledgments in advertising materials. The license disclaims warranties and limits liability.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/ThirdPartyNotices.txt#2025-04-18_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n\"/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n * \n * This library is free for commercial and non-commercial use as long as\n * the following conditions are aheared to.  The following conditions\n * apply to all code found in this distribution, be it the RC4, RSA,\n * lhash, DES, etc., code; not just the SSL code.  The SSL documentation\n * included with this distribution is covered by the same copyright terms\n * except that the holder is Tim Hudson (tjh@cryptsoft.com).\n * \n * Copyright remains Eric Young's, and as such any Copyright notices in\n * the code are not to be removed.\n * If this package is used in a product, Eric Young should be given attribution\n * as the author of the parts of the library used.\n * This can be in the form of a textual message at program startup or\n * in documentation (online or textual) provided with the package.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *    This product includes cryptographic software written by\n *     Eric Young (eay@cryptsoft.com)\n *    The word 'cryptographic' can be left out if the rouines from the library\n *    being used are not cryptographic related :-).\n * 4. If you include any Windows specific code (or a derivative thereof) from \n *    the apps directory (application code) you must include an acknowledgement:\n *    This product includes software written by Tim Hudson (tjh@cryptsoft.com)\n * \n * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * \n * The licence and distribution terms for any publically available version or\n * derivative of this code cannot be changed.  i.e. this code cannot simply be\n * copied and put under another distribution licence\n * [including the GNU Public Licence.]\"\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 (Mark Miller)\nDESCRIPTION: This snippet refers to the Apache License, Version 2.0, applicable to code by Mark Miller in the Q library.  It states that the code is licensed under Apache 2.0, providing a link to the license text.  It outlines conditions for using, copying, and distributing the software.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/AzureResourceGroupDeploymentV2/ThirdPartyNotices.txt#2025-04-18_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n\"/*\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\"\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Information for nopt\nDESCRIPTION: This snippet contains the copyright notice and license terms under the ISC License for the nopt library, detailing the permissions for use and distribution while including a disclaimer of warranties.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/ThirdPartyNotices.txt#2025-04-18_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\n%% nopt NOTICES, INFORMATION, AND LICENSE BEGIN HERE\n=========================================\nThe ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\naction of contract, negligence or other tortious action, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n=========================================\nEND OF nopt NOTICES, INFORMATION, AND LICENSE\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Information for normalize-path\nDESCRIPTION: This snippet provides the copyright and licensing details for the normalize-path library, framing permissions under the MIT License while disclaiming all warranties and limiting liability.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV1/ThirdPartyNotices.txt#2025-04-18_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\n%% normalize-path NOTICES, INFORMATION, AND LICENSE BEGIN HERE\n=========================================\nThe MIT License (MIT)\n\nCopyright (c) 2014-2015, Jon Schlinkert.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n=========================================\nEND OF normalize-path NOTICES, INFORMATION, AND LICENSE\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Normalize Path License\nDESCRIPTION: Documents the MIT License under which the normalize-path module is released, detailing permissible usages and the lack of warranties.\nSOURCE: https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/FileTransformV2/ThirdPartyNotices.txt#2025-04-18_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"\nThe MIT License (MIT)\n\nCopyright (c) 2014-2015, Jon Schlinkert.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\"\"\"\n```"
  }
]