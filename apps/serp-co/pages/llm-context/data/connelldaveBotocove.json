[
  {
    "owner": "connelldave",
    "repo": "botocove",
    "content": "TITLE: Using @cove Decorator for IAM Users\nDESCRIPTION: This code showcases the usage of the `@cove` decorator to inject sessions and retrieve IAM users across multiple accounts. It imports the necessary modules and then decorates the `get_iam_users` function using `@cove()`.  The decorator handles session creation and execution, gathering results, exceptions, and failures into a dictionary. The main function then prints the results, exceptions, and failed assume roles, and account information.\nSOURCE: https://github.com/connelldave/botocove/blob/master/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pprint import pprint\nimport boto3\nfrom botocove import cove\n\n@cove()\ndef get_iam_users(session):\n    iam = session.client(\"iam\", region_name=\"eu-west-1\")\n    all_users = iam.get_paginator(\"list_users\").paginate().build_full_result()\n    return all_users\n\ndef main():\n    # No session passed as the decorator injects it\n    all_results = get_iam_users()\n    # Now returns a Dict with keys Results, Exceptions and FailedAssumeRole\n\n    # A list of dictionaries for each account, with account details included.\n    # Each account's get_iam_users return is in a \"Result\" key.\n    pprint(all_results[\"Results\"])\n\n    # A list of dictionaries for each account that raised an exception\n    pprint(all_results[\"Exceptions\"])\n\n    # A list of dictionaries for each account that could not be assumed into\n    pprint(all_results[\"FailedAssumeRole\"])\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Customized Cove Decorator Example\nDESCRIPTION: This snippet demonstrates a more customized use of the `@cove` decorator. It sets several parameters: `target_ids` specifying the target AWS account IDs, `rolename` the IAM role to assume, `raise_exception` indicating to raise exceptions, and `regions` specifying the regions where the function should be executed. The function `do_things` is defined and is expected to return `True` in this case.\nSOURCE: https://github.com/connelldave/botocove/blob/master/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@cove(\n    target_ids=[\"123456789101\", \"234567891011\"], # also accepts OU ids!\n    rolename=\"AWSControlTowerExecution\",\n    raise_exception=True,\n    regions=[\"eu-west-1\", \"eu-west-2\", \"us-east-1\"],\n)\ndef do_things(session):\n    # Cove will return six results of True, 2 accounts * 3 regions\n    return True\n```\n\n----------------------------------------\n\nTITLE: Using CoveSession and Printing Info\nDESCRIPTION: This demonstrates how to use a `CoveSession` object, which enhances the standard boto3 session with additional account information. The decorated `do_nothing` function accepts a `CoveSession` as an argument, and it prints the `session_information` attribute, a dictionary containing account details and other related metadata.\nSOURCE: https://github.com/connelldave/botocove/blob/master/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@cove()\ndef do_nothing(session: CoveSession):\n    print(session.session_information) # Outputs a dict of known information\n    # This function runs no boto3-specific API, but does test that a role\n    # can be assumed\n```\n\n----------------------------------------\n\nTITLE: Importing boto3 and Defining get_iam_users\nDESCRIPTION: This code snippet imports the `boto3` library and defines a function `get_iam_users` that takes a boto3 session as input. The function uses the session to create an IAM client and retrieves all IAM users from a single AWS account using pagination. This is a standard boto3 function designed to be run on a single account.\nSOURCE: https://github.com/connelldave/botocove/blob/master/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\n\n\ndef get_iam_users(session):\n    iam = session.client(\"iam\", region_name=\"eu-west-1\")\n    all_users = iam.get_paginator(\"list_users\").paginate().build_full_result()\n    return all_users\n```\n\n----------------------------------------\n\nTITLE: Listing Available Regions\nDESCRIPTION: This code snippet provides a practical example of how to fetch all AWS regions dynamically using the `boto3` library. It retrieves a list of regions using the `ec2.describe_regions()` API and then extracts the 'RegionName' attribute from each region to create a list.\nSOURCE: https://github.com/connelldave/botocove/blob/master/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nregions = [\n    r['RegionName'] for r in boto3.client('ec2').describe_regions()['Regions']\n    ]\n```\n\n----------------------------------------\n\nTITLE: Calling get_iam_users with a Session\nDESCRIPTION: This snippet demonstrates how to initialize a boto3 session using `profile_name` and then call the `get_iam_users` function with the created session.  This approach requires manual execution in each account.  It assumes you have configured the 'my_dev_account' profile.\nSOURCE: https://github.com/connelldave/botocove/blob/master/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    session = boto3.session.Session(profile_name=\"my_dev_account\")\n    users = get_iam_users(session)\n    print(users) # A single account's IAM users\n```"
  }
]