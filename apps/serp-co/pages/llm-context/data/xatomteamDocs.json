[
  {
    "owner": "xatomteam",
    "repo": "docs",
    "content": "TITLE: Initializing WFComponent Instances in TypeScript\nDESCRIPTION: Shows how to import and instantiate the WFComponent class from the @xatom/core package using various selector types, including class selectors, IDs, attribute selectors, and nested selectors. TypeScript generics allow specifying the underlying HTML element type for stricter type support. Prerequisites: '@xatom/core' must be installed and imported. Expected inputs are valid CSS selectors or element references as arguments to WFComponent; output is a new WFComponent object bound to matched DOM elements.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WFComponent } from \"@xatom/core\";\n\n// Create a new WFComponent instance for the first element with the CSS class \".btn\"\nconst myComponent = new WFComponent(\".btn\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFComponent using different selectors\nconst buttonA = new WFComponent(\"#button\");\nconst buttonB = new WFComponent(\".button\");\nconst buttonC = new WFComponent(`[xa-type=\"button\"]`);\nconst buttonD = new WFComponent(`.buttons > button`);\n// Benefit from TypeScript type support\nconst container = new WFComponent<HTMLDivElement>(`.mydiv`);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using WFSlider in TypeScript\nDESCRIPTION: Demonstrates the basic initialization and usage of the `WFSlider` class within an xAtom project. It shows importing necessary modules, waiting for the page ready state, instantiating `WFSlider` and `WFComponent`, adding/removing slides, setting up event listeners for navigation and slide changes, and configuring slider properties. Requires `@xatom/slider` and `@xatom/core` packages.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WFSlider } from \"@xatom/slider\";\nimport { onReady, WFComponent } from \"@xatom/core\";\n\n// Wait until the webflow page has loaded\nonReady(() => {\n  // Initialize WFSlider\n  const slider = new WFSlider(\".slider\");\n  const myButton = new WFComponent(\".my-button\");\n  const cmsItem = new WFComponent(\".item\");\n\n  // Add a slide to the slider\n  slider.addSlide(cmsItem);\n\n  // Remove the first slide from the slider\n  slider.removeSlide(0);\n\n  // Handle button click to navigate to the next slide\n  myButton.on(\"click\", () => {\n    slider.goNext();\n  });\n  \n  // Listen for slide change events\n  slider.onSlideChange((activeIndex, prevIndex) => {\n    console.log(activeIndex, prevIndex);\n  });\n\n  // Configure the slider for infinite scrolling\n  slider.getConfig().config.infinite = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using WFCMSList in TypeScript\nDESCRIPTION: Example demonstrating the initialization of WFCMSList in a TypeScript xAtom project. It includes waiting for page readiness, setting configuration options such as number of items per page and removal of native pagination elements, cloning template items, updating cloned item text, creating custom components, adding items dynamically, and handling interactive buttons for pagination, filtering, and resetting filters. Dependencies include @xatom/cmslist for WFCMSList and @xatom/core for WFComponent and event handling.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WFCMSList } from \"@xatom/cmslist\";\nimport { onReady, WFComponent, createComponent } from \"@xatom/core\";\n\n// Wait until the webflow page has loaded\nonReady(() => {\n  // Initialize WFCMSList with configuration object\n  const cms = new WFCMSList(\".cms\", {\n    numberOfItemPerPage: 10,\n    removeNativePaginationElements: true,\n  });\n\n  // Clone an item as a template\n  const itemClone = cms.getInitialItemAsTemplate();\n\n  // Update the text content of the cloned item\n  itemClone.updateTextViaAttrVar({\n    title: \"Hello World\",\n  });\n\n  // Create a custom item using createComponent\n  const myItem = createComponent(\"div\");\n  myItem.setTextContent(\"Another Item\");\n\n  // Wait for all collection items to be fetched\n  cms.onAllCollectionItemsReady(() => {\n    // Add the cloned item and the custom item to the CMS list\n    cms.addItem(itemClone, 0); // Add to zeroth index\n    cms.addItem(myItem, 1); // Add to first index\n  });\n\n  // Initialize WFComponent for the next button\n  const nextBtn = new WFComponent(\".next-btn\");\n\n  // Event listener for the next button to navigate to the next page\n  nextBtn.on(\"click\", () => {\n    cms.goToNextPageIndex();\n  });\n\n  // Initialize WFComponent for the filter button\n  const filterBtn = new WFComponent(\".filter-btn\");\n\n  // Event listener for the filter button to apply a filter and render the list\n  filterBtn.on(\"click\", () => {\n    cms.setFilterSortConfig({\n      filter: (item, dataset) => {\n        return dataset.title.includes(\"Hello\");\n      },\n    });\n    cms.goToPageIndex(0);\n    cms.forceRenderList();\n  });\n\n  // Initialize WFComponent for the reset button\n  const resetBtn = new WFComponent(\".reset-btn\");\n\n  // Event listener for the reset button to clear the filter and render the list\n  resetBtn.on(\"click\", () => {\n    cms.setFilterSortConfig({});\n    cms.goToPageIndex(0);\n    cms.forceRenderList();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating Pages with xAtom Framework (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `navigate` function from the `@xatom/core` package for page navigation within a web application. It provides examples of navigating to a specific path, replacing the current page in the browser history, and reloading the current page. Requires the xAtom core library to be installed and imported.  The function accepts a string representing the path, or an object to configure the navigation type.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/utils/navigate.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { navigate } from \"@xatom/core\";\n\n// Navigate to a specific path\nnavigate(\"/dashboard\");\n\n// Navigate to a path and replace the current page in the browsing history\nnavigate({\n  to: \"/sign-in\",\n  type: \"replace\",\n});\n\n// Reload the current page\nnavigate({\n  type: \"reload\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using WFAuth in TypeScript\nDESCRIPTION: Shows how to initialize a WFAuth instance with custom types, set user information, configure tokens, manage roles, and check login status. This example demonstrates the complete lifecycle of authentication from setup to logout.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WFAuth } from \"@xatom/core\";\n\n// Initialize the WFAuth instance with user data, roles, and configuration\nconst userAuth = new WFAuth<\n  {\n    fullName: string;\n    email: string;\n  },\n  \"GUEST\" | \"USER\",\n  {\n    token: string;\n  }\n>();\n\n// Set the default role after initialization\nuserAuth.setRole(\"GUEST\");\n\n// Check if the user is logged in (should return false)\nconsole.log(userAuth.isLoggedIn()); // false\n\n// Set user information\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Configure the user's token\nuserAuth.setConfig({\n  token: \"XYZ\",\n});\n\n// Change the user's role\nuserAuth.setRole(\"USER\");\n\n// Check if the user is logged in (should return true)\nconsole.log(userAuth.isLoggedIn()); // true\n\n// Log the user out\nuserAuth.logout();\n\n// Check if the user is logged in after logout (should return false)\nconsole.log(userAuth.isLoggedIn()); // false\n```\n\n----------------------------------------\n\nTITLE: Configuring Filtering and Sorting for WFCMSList in TypeScript\nDESCRIPTION: Demonstrates setting up custom filtering and sorting logic for a `WFCMSList` using the `setFilterSortConfig` method. It shows defining `filter` and `sort` functions within a configuration object. These functions operate on item data, potentially accessed via HTML data attributes (like `data-category` or `data-date`), to control which items are displayed and in what order.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n/**\n * <div class=\"cms-item\" data-category=\"featured\" data-date=\"June, 08, 2023\">\n * ...\n * </div> \n */\n\n// Define filter and sort configurations\nlist.setFilterSortConfig({\n  // Define a filter function\n  filter: (item, datasets) => {\n    // Implement your filter logic\n    return datasets.category === \"featured\";\n  },\n  // Define a sort function\n  sort: (itemA, itemB) => {\n    // Implement your sort logic\n    return itemA.datasets.date.localeCompare(itemB.datasets.date);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing WFAuth and WFAuthMiddleware in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a WFAuth instance with user data and roles, set the role and user information, create a WFAuthMiddleware instance, and configure a route with role-based access control using the middleware. It illustrates the core setup required for secure route handling.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuthMiddleware.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { WFAuth, WFAuthMiddleware, WFRoute } from \"@xatom/core\";\n\nconst userAuth = new WFAuth<{\n  fullName: string;\n  email: string;\n}, \"GUEST\" | \"USER\", {\n  token: string;\n}>();\n\nuserAuth.setRole(\"USER\");\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\nconst userMiddleware = new WFAuthMiddleware(userAuth);\n\nnew WFRoute(\"/sign-up\")\n  .withMiddleware(userMiddleware, \"GUEST\", \"allow\", {\n    onError: () => {\n      window.location = \"/dashboard\";\n    },\n  })\n  .execute(() => {\n    // execute logic for /sign-up\n  });\n```\n\n----------------------------------------\n\nTITLE: Customizing List Item Rendering using rowRenderer - TypeScript\nDESCRIPTION: Shows how to use the rowRenderer method to attach custom logic to each rendered list item. Assumes a properly-initialized WFDynamicList instance with relevant selectors. Demonstrates fetching child elements (e.g., \".remove-btn\"), attaching event listeners, and updating content based on rowData. Requires that the data elements reference object items with a title property. Input: list data array; Output: customized UI with event handling and dynamic content. Relies on availability of child components and attribute setters in WFComponent.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFDynamicList.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(\".my-list\", {\n  rowSelector: \".my-list-item\", // CSS selector for list items\n  loaderSelector: \".my-list-loader\", // Optional CSS selector for loading state\n  emptySelector: \".my-list-empty-state\", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Access a child component within the list item\n  const removeBtn =\n    rowElement.getChildAsComponent(\".remove-btn\");\n\n  // Add a click event listener to the remove button\n  removeBtn.on(\"click\", () => {\n    console.log(\"removeBtn clicked\");\n  });\n\n  // Update the text of a heading element within the list item\n  rowElement.updateTextViaAttrVar({\n    title: rowData.title, // Assuming rowData contains a 'title' property\n  });\n\n  // Return the modified rowElement component\n  return rowElement;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData([\"Item 1\", \"Item 2\"]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information with getUser Method in TypeScript\nDESCRIPTION: Shows how to use the getUser method to retrieve previously set user information from a WFAuth instance. This is useful for accessing and displaying user details in the application.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFAuth instance\nconst userAuth = new WFAuth<\n  {\n    fullName: string;\n    email: string;\n  },\n  \"GUEST\" | \"USER\",\n  {\n    token: string;\n  }\n>();\n\n// Set user information using the `setUser` method.\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Retrieve user information using the `getUser` method.\nconst userInfo = userAuth.getUser();\nconsole.log(userInfo); // {fullName: \"John Doe\", email: \"john@doe.com\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing WFInvisibleForm and Submitting Data (TypeScript)\nDESCRIPTION: This snippet demonstrates initializing a WFInvisibleForm instance, setting form data, attaching success and error handlers, and submitting the form. Dependencies include the @xatom/core package, and optionally Webflow hosting if file uploads are used. The key parameters are the form name (string) passed to the constructor and the formData object with string values for each input field. Outputs include submission status events. All logic is synchronous except for event callbacks and submission, which are asynchronous.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WFInvisibleForm } from \"@xatom/core\";\n\n// Initialize a new instance of WFInvisibleForm with form name\nconst invisibleForm = new WFInvisibleForm(\"My Form Name\");\n\n// Define your form data as an object\nconst formData = {\n  fullname: \"John Doe\",\n  email: \"john@doe.com\",\n};\n\n// Set form data\ninvisibleForm.setFormData(formData);\n\n// Listen for successful form submissions\ninvisibleForm.onSuccess(() => {\n  console.log(\"Form submission is successful\");\n});\n\n// Listen for failed form submissions\ninvisibleForm.onError(() => {\n  console.log(\"Form submission has encountered an error\");\n});\n\n// Submit the form\ninvisibleForm.submitForm();\n```\n\n----------------------------------------\n\nTITLE: Logging Out User with logout Method in TypeScript\nDESCRIPTION: Shows how to use the logout method to clear all stored user information, effectively signing out the user. This method resets the WFAuth instance to its initial state.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFAuth instance\nconst userAuth = new WFAuth<\n  {\n    fullName: string;\n    email: string;\n  },\n  \"GUEST\" | \"USER\",\n  {\n    token: string;\n  }\n>();\n\n// Set user information using the `setUser` method.\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Set the user's role to \"USER\"\nuserAuth.setRole(\"USER\");\n\n// Check if the user is initially logged in (should be true)\nconst isLoggedIn = userAuth.isLoggedIn();\nconsole.log(isLoggedIn); // true\n\n// Log the user out\nuserAuth.logout();\n\n// Check if the user is now logged out (should be false)\nconst isNowLoggedIn = userAuth.isLoggedIn();\nconsole.log(isNowLoggedIn); // false\n```\n\n----------------------------------------\n\nTITLE: isLoggedIn Method Syntax in TypeScript\nDESCRIPTION: Defines the TypeScript syntax for the isLoggedIn method, which returns a boolean indicating whether the user is currently logged in. This method checks if user data is stored in the WFAuth instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nisLoggedIn(): boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Form Data using getFormData() in Typescript\nDESCRIPTION: This code snippet showcases how to retrieve form data as an object using the getFormData() method of the WFFormComponent. The method returns an object containing the current values of the form fields. The form must be initialized before retrieving the form data.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFFormComponent\nconst myForm = new WFFormComponent<{  fullname: string; // input name=\"fullname\"\n  email: string; // input name=\"email\"}>(\".my-form\");\n\n// Get form data\nconst formData = myForm.getFormData();\nconsole.log(formData); // { fullname: \"John Doe\", email: \"john@doe.com\" }\n```\n\n----------------------------------------\n\nTITLE: Initializing WFTabs in an xAtom TypeScript Project\nDESCRIPTION: This snippet demonstrates how to initialize the WFTabs class by selecting the tab container element and integrating it with other WFComponent instances for menu, panel, and button elements. It sets up event handling for tab changes and shows how to programmatically navigate to a specific tab index.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { WFTabs } from \"@xatom/tabs\";\nimport { onReady, WFComponent } from \"@xatom/core\";\n\n// Wait until the webflow page has loaded\nonReady(() => {\n  // Initialize WFTabs\n  const tabs = new WFTabs(\".tabs\");\n  const myButton = new WFComponent(\".my-button\");\n  // Initialize WFComponent for the menu item\n  const menuItem = new WFComponent(\".menu-item\");\n  // Initialize WFComponent for the panel item\n  const panelItem = new WFComponent(\".panel-item\");\n\n  // Add a new tab\n  tabs.addTab({\n    menuItem: menuItem,\n    panelItem: panelItem,\n    index: 0,\n  });\n\n  // Handle button click to navigate to the tab by index\n  myButton.on(\"click\", () => {\n    tabs.goToTabByIndex(2);\n  });\n\n  // Listen for tabs change events\n  tabs.onTabChange((index) => {\n    console.log(index);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Logic with WFRoute's `execute` (TypeScript)\nDESCRIPTION: Illustrates the use of the `execute` method to define callback functions that run when a route is matched. It shows how to access route parameters, including both standard and query parameters. The execute method receives a callback `fn`, which takes in an object called `params` containing parameter data\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/routing/WFRoute.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Example 1: Basic route without parameters\nnew WFRoute(\"/my-page\").execute(() => {\n  // Define your page logic here\n});\n\n// Example 2: Route with a parameter (e.g., /my-page/123)\nnew WFRoute(\"/my-page/:id\").execute((params: { id: string }) => {\n  console.log(params.id); // Access route variables (e.g., 123)\n});\n\n// Example 3: Route with a query parameter (e.g., /my-page?id=123)\nnew WFRoute(\"/my-page\").execute((params: { id: string }) => {\n  console.log(params.id); // Access query parameters (e.g., 123)\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching event listeners to WFComponent elements\nDESCRIPTION: Binds an event handler function to a specified event type (such as 'click', 'change', 'blur') for the element. Requires 'eventType' and 'fn' callback. Facilitates interactive behaviors like button clicks or input changes.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a button element\nconst button = new WFComponent(`.button`);\n\n// Define a click event handler\nconst onClick = () => {\n  console.log(\"Button clicked\");\n};\n\n// Attach the click event listener\nbutton.on(\"click\", onClick);\n\n// Create a new WFComponent for an input\nconst input = new WFComponent(`.my-input`);\n\n// Define a change event handler\nconst onChange = () => {\n  console.log(\"Input text changed\", input.getAttribute(\"value\"));\n};\n\n// Attach change event listener\ninput.on(\"change\", onChange);\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Methods Examples in AxiosClient\nDESCRIPTION: Examples of making different types of HTTP requests (GET, POST, PATCH, PUT, DELETE) using the AxiosClient class.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get(\"/user\", { id: 1 });\n\n// Example of making a POST request\nconst postUser = axiosClient.post(\"/create/user\", {\n  fullName: \"John doe\",\n  age: 21,\n});\n\n// Example of making a PATCH request\nconst patchUser = axiosClient.patch(\"/user\", { id: 1, age: 22 });\n\n// Example of making a PUT request\nconst putUser = axiosClient.put(\"/user\", {\n  id: 1,\n  bio: \"I ❤️ xAtom\",\n});\n\n// Example of making a DELETE request\nconst deleteUser = axiosClient.delete(\"/user\", { id: 1 });\n```\n\n----------------------------------------\n\nTITLE: Implementing showErrorState() to Display Error Element\nDESCRIPTION: This method displays an error message, shows the form, and hides the success indicator, to inform users of validation failure or issues. Use after an unsuccessful validation or server response indicating duplicate email, typically triggered within form submission handling.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize form instance\nconst myForm = new WFFormComponent<{\n  fullname: string;\n  email: string;\n}>(\".my-form\");\n\n// Handle form submission\nmyForm.onFormSubmit((data) => {\n  validateEmailOnServer(data.email)\n    .then((emailExists) => {\n      if (emailExists) {\n        myForm.showSuccessState();\n      } else {\n        console.log(\"Email was not found.\");\n        // Show error state if email does not exist\n        myForm.showErrorState();\n      }\n    })\n    .catch((error) => {\n      console.error(\"API call failed:\", error);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating WFComponents with createComponent in TypeScript\nDESCRIPTION: This example demonstrates importing the `createComponent` function from `@xatom/core` and using it to instantiate `WFComponent` objects for HTML `<button>` and `<input>` elements. It also shows how to configure the created components by setting attributes (like `type=\"file\"`) and adding CSS classes, and finally appending a component to an existing form element.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/utils/createComponent.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createComponent } from \"@xatom/core\";\n\n// Create a WFComponent from a <button> element\nconst button = createComponent<HTMLButtonElement>(\"button\");\n\n// Create a WFComponent from an <input> element and configure it as a file input\nconst fileInput = createComponent<HTMLInputElement>(\"input\");\nfileInput.setAttribute(\"type\", \"file\");\nfileInput.addCssClass(\"input-primary\");\n\n// Assuming you have a \"myForm\" variable representing a form, you can append the file input to it\nmyForm.getFormComponent().appendChild(fileInput);\n```\n\n----------------------------------------\n\nTITLE: Implementing enableForm() to Enable User Inputs\nDESCRIPTION: This method re-enables previously disabled input elements, allowing users to interact with and modify form data. It is typically called after a process completes or if the user needs to reattempt submission.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Instantiate form\nconst myForm = new WFFormComponent<{\n  fullname: string;\n  email: string;\n}>(\".my-form\");\n\n// Handle submission\nmyForm.onFormSubmit((data) => {\n  myForm.disableForm();\n  validateEmailOnServer(data.email)\n    .then((emailExists) => {\n      if (emailExists) {\n        myForm.showSuccessState();\n      } else {\n        myForm.showErrorState();\n      }\n    })\n    .catch((error) => {\n      console.error(\"API call failed:\", error);\n    })\n    .finally(() => {\n      myForm.enableForm();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Navbar Menu Drawer Using WFNav in TypeScript\nDESCRIPTION: Demonstrates usage of the WFNav class's open() method to programmatically open the Webflow navbar menu drawer when a page button is clicked. Requires initialization of WFNav and WFComponent to bind the click event that triggers nav.open().\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFNav\nconst nav = new WFNav(\".w-nav\");\n\n// Initialize WFComponent for the button on the page\nconst button = new WFComponent(\".button-on-page\");\n\n// On button click, open nav menu\nbutton.on(\"click\", () => {\n  nav.open();\n});\n```\n\n----------------------------------------\n\nTITLE: Example usage of onReady in xAtom TypeScript project\nDESCRIPTION: This snippet demonstrates how to import and utilize the onReady function from the @xatom/core package to execute code after all web page resources have loaded. It shows the placement of the callback within the onReady function to initialize project logic, highlighting its role as the entry point in a typical xAtom project.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/utils/onReady.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { onReady } from \"@xatom/core\";\n\nonReady(() => {\n  // Add your business logic here\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic List Loading State with changeLoadingStatus (TypeScript)\nDESCRIPTION: This snippet demonstrates use of the changeLoadingStatus method to control the loading status in WFDynamicList while performing asynchronous actions like data fetching in TypeScript. It also illustrates basic event handling on a button (WFComponent), and defines custom row rendering logic. Core dependencies are WFDynamicList and WFComponent, requiring corresponding DOM elements by CSS selector. The key parameter is a boolean indicating loading status. Expected input is a boolean true or false to show or hide the loading component. The implementation is suitable for paginated, lazy, or infinite scroll loading UIs; ensure selectors match elements on the page.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFDynamicList.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(\".my-list\", {\n  rowSelector: \".my-list-item\", // CSS selector for list items\n  loaderSelector: \".my-list-loader\", // Optional CSS selector for loading state\n  emptySelector: \".my-list-empty-state\", // Optional selector for empty state\n});\n\nconst loadMoreBtn = new WFComponent(\".load-more-btn\");\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Return the modified rowElement component\n  return rowElement;\n});\n\nloadMoreBtn.on(\"click\", () => {\n  // Enable the loading state\n  list.changeLoadingStatus(true);\n  // Perform additional actions here (e.g., fetching more data)\n\n  // Disable the loading state\n  list.changeLoadingStatus(false);\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData([\"Item 1\", \"Item 2\"]);\n```\n\n----------------------------------------\n\nTITLE: Removing All Children from WFComponent (TypeScript)\nDESCRIPTION: Removes all child nodes from the current component, effectively clearing its nested content for dynamic UI updates or cleanup operations.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a parent element\nconst parent = new WFComponent(`.parent`);\n\n// Remove all children elements from the parent\nparent.removeAllChildren();\n```\n\n----------------------------------------\n\nTITLE: Initializing WFFormComponent in Typescript\nDESCRIPTION: This code snippet demonstrates how to initialize a new instance of the WFFormComponent class with a query selector, set initial form data, retrieve form data, and intercept the form submission. The WFFormComponent allows to extend the functionality of Webflow forms, including custom validation, complex functions, and data submission to preferred APIs.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WFFormComponent } from \"@xatom/core\";\n\n// Initialize a new instance of WFFormComponent\nconst myForm = new WFFormComponent<{  fullname: string; // Input with name=\"fullname\"\n  email: string; // Input with name=\"email\"}>(\".my-form\");\n\n// Set form data\nmyForm.setFromData({\n  fullname: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Get form data\nconst formData = myForm.getFormData();\nconsole.log(formData); // { fullname: \"John Doe\", email: \"john@doe.com\" }\n\n// Intercept webflow form submission and prevent it\nmyForm.onFormSubmit((data) => {\n  console.log(data); // { fullname: \"John Doe\", email: \"john@doe.com\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning a WFComponent Instance (TypeScript)\nDESCRIPTION: Creates and returns a deep clone of the current component, enabling duplication of DOM elements for flexible UI manipulations without affecting the original instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for an element\nconst originalComponent = new WFComponent(`.my-element`);\n\n// Clone the component\nconst clonedComponent = originalComponent.getCloneAsComponent();\n```\n\n----------------------------------------\n\nTITLE: Customizing Empty State Rendering in Dynamic List with emptyRenderer (TypeScript)\nDESCRIPTION: This example shows how to use emptyRenderer to customize the display of the empty state in a WFDynamicList within TypeScript. The method receives a callback that can modify the empty state WFComponent, allowing dynamic changes such as custom text based on contextual variables (e.g., isSearchResult). Dependencies are WFDynamicList and WFComponent, along with a DOM that includes elements for rows, loader, and empty state. Expects a callback function to receive the emptyStateElement and modify its content or appearance. Outputs a uniquely styled UI when the list data source is empty. Ensure contextual variables referenced in the callback (like isSearchResult) are defined in scope.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFDynamicList.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(\".my-list\", {\n  rowSelector: \".my-list-item\", // CSS selector for list items\n  loaderSelector: \".my-list-loader\", // Optional CSS selector for loading state\n  emptySelector: \".my-list-empty-state\", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Return the modified rowElement component\n  return rowElement;\n});\n\n// Customize the rendering of empty state\nlist.emptyRenderer((emptyStateElement) => {\n  // Customize the empty state component as needed\n  const emptyText =\n    emptyStateElement.getChildAsComponent(\".empty-text\");\n  emptyText.setText(\n    isSearchResult ? \"No Item Found\" : \"Looks like list is empty\"\n  ); // Update empty state text\n\n  // Return the modified empty state component\n  return emptyStateElement;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData([\"Item 1\", \"Item 2\"]);\n```\n\n----------------------------------------\n\nTITLE: Setting Inner HTML of WFComponent (TypeScript)\nDESCRIPTION: Updates the inner HTML of a DOM element with a specified HTML string, allowing for dynamic content rendering or replacement within the element.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a div element\nconst div = new WFComponent(`.my-div`);\n\n// Update the inner HTML content of the div\ndiv.setHTML(\"<p>This is <strong>bold</strong> text.</p>\");\n\n// Get the updated HTML content\nconst updatedHTML = div.getHTML();\nconsole.log(updatedHTML); // Outputs: \"<p>This is <strong>bold</strong> text.</p>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing WFDynamicList with Custom Renderer - TypeScript\nDESCRIPTION: Illustrates initializing a new WFDynamicList instance with custom configuration selectors and a rowRenderer function. Requires @xatom/core as a dependency. The snippet shows how to specify container and child selectors, optionally set loading and empty states, and defines a custom renderer to control display for each list item. Uses TypeScript generics for strong typing, expects a valid container, item, loader, and empty state selectors. Input: array of string items; Output: updated UI reflecting provided data. Limitations: proper selectors and correct DOM structure must exist.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFDynamicList.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { WFDynamicList } from \"@xatom/core\";\n\n// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(\".my-list\", {\n  rowSelector: \".my-list-item\", // CSS selector for list items\n  loaderSelector: \".my-list-loader\", // Optional CSS selector for loading state\n  emptySelector: \".my-list-empty-state\", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Modify the rowElement component as needed\n  return rowElement;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData([\"Item 1\", \"Item 2\"]);\n```\n\n----------------------------------------\n\nTITLE: Appending Child WFComponent to Parent Element (TypeScript)\nDESCRIPTION: Appends a child component to the current element, establishing parent-child relationships within the DOM for dynamic UI composition.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a parent element\nconst parent = new WFComponent(`.parent`);\n\n// Create a new child WFComponent element and clone child\nconst child = new WFComponent(`.child`).getCloneAsComponent();\n\n// Append the child WFComponent element to the parent\nparent.appendChild(child);\n```\n\n----------------------------------------\n\nTITLE: Listening for Successful Form Submissions with WFInvisibleForm in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the onSuccess method of the WFInvisibleForm class to execute a callback function after a successful form submission. It requires the WFInvisibleForm and WFComponent classes, and initializes a form with user data, a submit button, and a success message component. The callback adds a CSS class to display the success message upon successful submission. Inputs include form data and output is a visible success component upon form success.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFInvisibleForm\nconst invisibleForm = new WFInvisibleForm<{\n  fullname: string;\n  email: string;\n}>(\"Newsletter Form\");\n\n// Initialize a submit button using its CSS selector\nconst submitBtn = new WFComponent(\".submit-btn\");\nconst successComponent = new WFComponent(\".success-message\");\n\n// Set the form data\ninvisibleForm.setFormData({\n  fullname: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Listen for a successful form submission\ninvisibleForm.onSuccess(() => {\n  // When the form submission is successful, show the success message component\n  successComponent.addCssClass(\"show\");\n});\n\n// Submit the form\ninvisibleForm.submitForm();\n```\n\n----------------------------------------\n\nTITLE: Setting inline styles on a WFComponent element\nDESCRIPTION: Updates the element's inline styles using an object containing CSS properties and variables. Requires a 'style' object with key-value pairs. This allows dynamic styling such as height adjustment or custom CSS variables.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for an accordion element\nconst accordion = new WFComponent(`.accordion`);\naccordion.setStyle({\n  height: \"300px\",\n  \"--my-variable\": \"10px\",\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Navbar Menu Drawer Using WFNav in TypeScript\nDESCRIPTION: Illustrates toggling the navbar menu drawer open or closed state programmatically when a button is clicked by calling WFNav's toggle() method. This enables dynamic UI behavior controlling the menu drawer visibility.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFNav\nconst nav = new WFNav(\".w-nav\");\n\n// Initialize WFComponent for the button on the page\nconst button = new WFComponent(\".button-on-page\");\n\n// On button click, toggle nav menu\nbutton.on(\"click\", () => {\n  nav.toggle();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing WFComponent with Selector Flexibility in TypeScript\nDESCRIPTION: Demonstrates the flexibility of the WFComponent constructor, accepting a CSS selector string, an HTMLElement, or an existing WFComponent instance as its argument. This enables dynamic and modular initialization strategies. Dependencies are the xAtom framework and valid HTML context; invalid selectors throw exceptions. Expected output is a correctly bound WFComponent instance regardless of parameter type.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example: Initialize WFComponent with a CSS selector\nconst myComponentBySelector = new WFComponent(\".btn\");\n\n// Example: Initialize WFComponent with an HTMLElement\nconst myDiv = document.getElementById(\"myDiv\");\nconst myComponentByElement = new WFComponent(myDiv);\n\n// Example: Initialize WFComponent with an existing WFComponent instance\nconst existingComponent = new WFComponent(\".existing\");\nconst myComponentByInstance = new WFComponent(existingComponent);\n```\n\n----------------------------------------\n\nTITLE: Toggling the presence of a CSS class on a WFComponent element\nDESCRIPTION: Toggles the specified CSS class on the element, adding it if absent or removing it if present. Requires 'className' as a string parameter. Useful for dynamic show/hide or open/close behaviors.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for an accordion element\nconst accordion = new WFComponent(`.accordion`);\nconsole.log(accordion.getCssClass()); // Outputs: [\"accordion\", \"opened\"]\n\n// Toggle the CSS class\naccordion.toggleCssClass(\"opened\");\nconsole.log(accordion.getCssClass()); // Outputs: [\"accordion\"]\n\naccordion.toggleCssClass(\"opened\");\nconsole.log(accordion.getCssClass()); // Outputs: [\"accordion\", \"opened\"]\n```\n\n----------------------------------------\n\nTITLE: Intercepting Form Submissions using onFormSubmit() in Typescript\nDESCRIPTION: This code snippet shows how to intercept webflow form submissions and prevent the default form submission using the onFormSubmit() method.  It takes a callback function as a parameter, which receives the form data and the submit event.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFFormComponent\nconst myForm = new WFFormComponent<{  fullname: string; // input name=\"fullname\"\n  email: string; // input name=\"email\"}>(\".my-form\");\n\n// Intercept webflow form submission and prevent it\nmyForm.onFormSubmit((data) => {\n  console.log(data); // { fullname: \"John Doe\", email: \"john@doe.com\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration with setConfig Method in TypeScript\nDESCRIPTION: Demonstrates how to use the setConfig method to set additional configuration like authentication tokens. This configuration can be customized based on application requirements.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFAuth instance\nconst userAuth = new WFAuth<\n  {\n    fullName: string;\n    email: string;\n  },\n  \"GUEST\" | \"USER\",\n  {\n    token: string;\n  }\n>();\n\n// Set user information using the `setUser` method.\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Set user config information using the `setConfig` method.\nuserAuth.setConfig({\n  token: \"xyz\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using onData in AxiosClient\nDESCRIPTION: Example showcasing how to use the onData method to listen for successful response data each time fetch is called. This method allows for multiple callbacks and only triggers when the request is successful.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get<DataType>(\"/user\");\n\n// Listen to the request's success response\ngetUser.onData((data: DataType) => {\n  console.log(data); // Output: request success response\n});\n\n// Fetch the GET request with data payload\ngetUser.fetch({ id: 1 });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nonData<DataType>(fn: (data: DataType) => void): void;\n```\n\n----------------------------------------\n\nTITLE: Querying Native HTMLElement via getElement Method (TypeScript)\nDESCRIPTION: Retrieves the underlying HTMLElement associated with a WFComponent instance by calling getElement(). This allows seamless interoperation with native browser APIs for advanced manipulation. Requires that the WFComponent instance is correctly initialized. Input is none; output is an HTMLElement typed object.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new WFComponent instance for a <div> element\nconst container = new WFComponent<HTMLDivElement>(`.mydiv`);\n// Retrieve the associated HTML element\nconst htmlElement = container.getElement();\n// Now, harness the full power of native HTML element APIs\nconsole.log(htmlElement);\n```\n\n----------------------------------------\n\nTITLE: Setting inner text of a WFComponent element\nDESCRIPTION: Updates the element's inner text content with the provided string. Requires 'text' parameter. Used for dynamic content updates within elements.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a paragraph\nconst paragraph = new WFComponent(`.my-paragraph`);\n// Update the inner text\nparagraph.setText(\"Hello, xAtom!\");\n// Retrieve the updated text\nconst updatedText = paragraph.getText();\nconsole.log(updatedText); // Outputs: \"Hello, xAtom!\"\n```\n\n----------------------------------------\n\nTITLE: Initializing WFNav and Toggling Navbar Menu in TypeScript\nDESCRIPTION: This snippet illustrates how to initialize the WFNav class to manage a Webflow navbar element after the page is loaded using the onReady event. It shows creation of WFNav for the navbar and WFComponent for a button, setting up a listener for nav state changes, and toggling the menu drawer on button clicks. This example requires @xatom/nav and @xatom/core packages.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WFNav } from \"@xatom/nav\";\nimport { onReady, WFComponent } from \"@xatom/core\";\n\n// Wait until the webflow page has loaded\nonReady(() => {\n  // Initialize WFNav\n  const nav = new WFNav(\".w-nav\");\n\n  // Initialize WFComponent for the button on the page\n  const button = new WFComponent(\".button-on-page\");\n\n  // Listen to the state of the nav menu\n  nav.onNavStateChange((isOpen) => {\n    console.log(\"Is navbar opened:\", isOpen);\n  });\n\n  // On button click, toggle nav menu\n  button.on(\"click\", () => {\n    nav.toggle();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Callback for WFCMSList Item Readiness in TypeScript\nDESCRIPTION: Demonstrates how to use the `onAllCollectionItemsReady` method of the `WFCMSList` class to execute a callback function once all collection items are fully loaded and ready. It involves initializing the list, defining the callback, and registering it. The method returns a function that can be called later to unregister the listener.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Define a callback function\nconst itemsReadyCallback = () => {\n  console.log(\"All collection items are ready.\");\n};\n\n// Register the callback function to listen for the event\nconst unregisterCallback = list.onAllCollectionItemsReady(itemsReadyCallback);\n```\n\n----------------------------------------\n\nTITLE: Getting the text content of a WFComponent element\nDESCRIPTION: Retrieves the text content of the element, typically used for reading user-visible text from headings, paragraphs, or other text-containing elements.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a heading\nconst heading = new WFComponent(`.my-heading`);\n// Get the text content of the heading\nconst textContent = heading.getText();\nconsole.log(textContent); // Outputs: \"Welcome to xAtom!\"\n```\n\n----------------------------------------\n\nTITLE: Adding Items to WFCMSList Programmatically in TypeScript\nDESCRIPTION: Shows how to add a new item to a WFCMSList instance at a specified index using the addItem method. The new item is represented as a WFComponent, and adding it allows dynamic modification of the collection list contents.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Create a new item using WFComponent\nconst newItem = new WFComponent(\".new-item\");\n\n// Add the new item to the collection list at index 0\nlist.addItem(newItem, 0);\n```\n\n----------------------------------------\n\nTITLE: Syntax for the createComponent Function in TypeScript\nDESCRIPTION: Defines the TypeScript function signature for `createComponent`. It is a generic function `<T>` that accepts a single parameter `type`, which must be a valid HTML tag name (keyof HTMLElementTagNameMap). The function returns a `WFComponent` instance, typed according to the provided generic type `T`, which should correspond to the HTML element type.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/utils/createComponent.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateComponent<T>(type: keyof HTMLElementTagNameMap): WFComponent<T>\n```\n\n----------------------------------------\n\nTITLE: Setting Items Per Page in WFCMSList using TypeScript\nDESCRIPTION: Demonstrates changing the number of items displayed per page in a `WFCMSList` using the `setNumberOfItemsPerPage` method. Initialize the list and call the method with the desired number of items.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Set the number of items per page to 10\nlist.setNumberOfItemsPerPage(10);\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTML Attribute Values with getAttribute in TypeScript\nDESCRIPTION: Shows how to get the value of an attribute from a WFComponent-managed element using getAttribute(key). The key parameter must reference an existing attribute on the element or return null/undefined if absent. Prerequisite: element initialized as WFComponent. Input is attribute name as string; output is the attribute value string.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new WFComponent instance for an link element\nconst link = new WFComponent(`.mylink`);\n// Get the value of the attribute\nconst hrefValue = input.getAttribute(\"href\");\nconsole.log(hrefValue);\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic List Data using setData Method - TypeScript\nDESCRIPTION: Demonstrates the standard pattern for updating the dynamic list data with setData. The snippet initializes a WFDynamicList, configures a renderer, and sets list contents by passing an array of items. Relies on previous correct initialization and selector configuration. Inputs: array of list items (strings, objects, etc). Output: replaced and re-rendered dynamic list contents in the UI. Requires WFDynamicList from @xatom/core.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFDynamicList.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(\".my-list\", {\n  rowSelector: \".my-list-item\", // CSS selector for list items\n  loaderSelector: \".my-list-loader\", // Optional CSS selector for loading state\n  emptySelector: \".my-list-empty-state\", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Return the modified rowElement component\n  return rowElement;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData([\"Item 1\", \"Item 2\"]);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Previous Slide with WFSlider Example (TypeScript)\nDESCRIPTION: Shows how to programmatically move the `WFSlider` to the previous slide using the `goPrevious` method. This example triggers the navigation when a button (`prevButton`) is clicked.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\nconst prevButton = new WFSlider(\".prev-button\");\n\n// On button click, go to the previous slide\nprevButton.on(\"click\", () => {\n    slider.goPrevious();\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for Failed Form Submissions with WFInvisibleForm in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the use of the onError method on the WFInvisibleForm class to respond to failed form submissions with a callback. Dependencies include WFInvisibleForm and WFComponent. The example defines form data, a submit button component, and an error message component, and adds a CSS class to the error message upon failure. It expects form data as input and reveals the error component if submission fails.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFInvisibleForm\nconst invisibleForm = new WFInvisibleForm<{\n  fullname: string;\n  email: string;\n}>(\"Newsletter Form\");\n\n// Initialize a submit button using its CSS selector\nconst submitBtn = new WFComponent(\".submit-btn\");\nconst errorComponent = new WFComponent(\".error-message\");\n\n// Set the form data\ninvisibleForm.setFormData({\n  fullname: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Listen for a failed form submission\ninvisibleForm.onError(() => {\n  // When the form submission fails, show the error message component\n  errorComponent.addCssClass(\"show\");\n});\n\n// Submit the form\ninvisibleForm.submitForm();\n```\n\n----------------------------------------\n\nTITLE: Implementing disableForm() to Disable User Inputs\nDESCRIPTION: This method disables all input elements within the form, preventing further user interaction. Useful during API calls or processing states to ensure data integrity. It is invoked typically before or during form submission handling.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create form instance\nconst myForm = new WFFormComponent<{\n  fullname: string;\n  email: string;\n}>(\".my-form\");\n\n// On form submission\nmyForm.onFormSubmit((data) => {\n  myForm.disableForm();\n  validateEmailOnServer(data.email)\n    .then((emailExists) => {\n      if (emailExists) {\n        myForm.showSuccessState();\n      } else {\n        myForm.showErrorState();\n      }\n    })\n    .catch((error) => {\n      console.error(\"API call failed:\", error);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Form Data with setFormData (TypeScript)\nDESCRIPTION: This snippet demonstrates setting form field data by passing a key-value object to setFormData. You must provide a valid object whose keys are string field names and values can be strings, Files, or File arrays. Make sure file uploads are allowed by Webflow hosting if submitting files.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFInvisibleForm\nconst invisibleForm = new WFInvisibleForm<{\n  fullname: string;\n  email: string;\n}>(\"Newsletter Form\");\n\n// Set the form data\ninvisibleForm.setFormData({\n  fullname: \"John Doe\",\n  email: \"john@doe.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slider Configuration Object in TypeScript\nDESCRIPTION: This code shows how to access the configuration settings of a WFSlider instance using `getConfig()`. The retrieved object contains Webflow-specific slider configurations. It includes slider initialization, configuration retrieval, and logging the configuration object.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\n\n// Get the configuration object\nconst config = slider.getConfig();\n\nconsole.log(config); // Output: Webflow slider configuration object\n```\n\n----------------------------------------\n\nTITLE: Submitting Webflow Form Programmatically in Typescript\nDESCRIPTION: This code demonstrates how to submit the Webflow form programmatically using the `submitWebflowForm()` method. It is typically used within the `onFormSubmit` method to control when the form is submitted after custom validation or other logic. Before using this, a form needs to be initialized and the `onFormSubmit` must be set up.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFFormComponent\nconst myForm = new WFFormComponent<{  fullname: string; // input name=\"fullname\"\n  email: string; // input name=\"email\"}>(\".my-form\");\n\n// Intercept webflow form submission and prevent it\nmyForm.onFormSubmit((data) => {\n  // Simulate API call to validate email\n  validateEmailOnServer(data.email)\n    .then((emailExists) => {\n      if (!emailExists) {\n        // If email does not exist on the server, submit the webflow form programmatically\n        myForm.submitWebflowForm();\n      } else {\n        // Handle case where email already exists (e.g., show error message)\n        console.log(\n          \"Email already exists. Please use a different email.\"\n        );\n      }\n    })\n    .catch((error) => {\n      // Handle API call error\n      console.error(\"API call failed:\", error);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting User Role with setRole Method in TypeScript\nDESCRIPTION: Demonstrates how to use the setRole method to assign a role to a user, enabling role-based access control. Roles can be defined as custom types for specific application needs.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFAuth instance\nconst userAuth = new WFAuth<\n  {\n    fullName: string;\n    email: string;\n  },\n  \"GUEST\" | \"USER\",\n  {\n    token: string;\n  }\n>();\n\n// Set user information using the `setUser` method.\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Set the user's role to \"USER\"\nuserAuth.setRole(\"USER\");\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Next Tab with Optional Looping in WFTabs\nDESCRIPTION: Illustrates how to move to the subsequent tab, with an optional parameter to enable infinite looping through tabs, useful for carousel-like behaviors.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Go to the next tab\ntabs.goToNextTab();\n```\n\n----------------------------------------\n\nTITLE: Detaching event listeners from WFComponent elements\nDESCRIPTION: Removes a previously attached event listener for a specific event type. Uses 'eventType' and 'fn' to identify the callback to detach. Useful for cleanup or unbinding events to prevent memory leaks.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a button\nconst button = new WFComponent(`.button`);\n\n// Define a click event handler\nconst onClick = () => {\n  console.log(\"Button clicked\");\n};\n\n// Attach the event listener\nbutton.on(\"click\", onClick);\n\n// Later, detach the event listener\nbutton.off(\"click\", onClick);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Role with getRole Method in TypeScript\nDESCRIPTION: Shows how to use the getRole method to retrieve the current role assigned to a user. This is useful for implementing conditional logic based on user permissions.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFAuth instance\nconst userAuth = new WFAuth<\n  {\n    fullName: string;\n    email: string;\n  },\n  \"GUEST\" | \"USER\",\n  {\n    token: string;\n  }\n>();\n\n// Set user information using the `setUser` method.\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Set the user's role to \"USER\"\nuserAuth.setRole(\"USER\");\n\n// Retrieve user role information using the `getRole` method.\nconst userRole = userAuth.getRole();\nconsole.log(userRole); // USER\n\n// Set the user's role to \"GUEST\"\nuserAuth.setRole(\"GUEST\");\n\n// Retrieve user role information using the `getRole` method.\nconst newUserRole = userAuth.getRole();\nconsole.log(newUserRole); // GUEST\n```\n\n----------------------------------------\n\nTITLE: Basic AxiosClient Implementation Example\nDESCRIPTION: Demonstrates how to configure and use AxiosClient to make API requests with event listeners for loading states, successful responses, and errors.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AxiosClient,\n  AxiosClientConfigurator,\n} from \"@xatom/axios\";\nimport { onReady } from \"@xatom/core\";\n\n// Configure the base URL for your API\nconst axiosConfigurator = new AxiosClientConfigurator(\n  \"https://your-api-base-url.com\"\n);\n\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\nonReady(() => {\n  // Define an API request to get users with pagination\n  const getUsers = axiosClient.get<MyUserType>(\"/users?page=2\");\n\n  // Listen to loading state changes\n  getUsers.onLoadingChange((status) => {\n    console.log(\"Is loading:\", status); // true or false\n  });\n\n  // Listen to successful response\n  getUsers.onData((data) => {\n    console.log(\"Response:\", data);\n  });\n\n  // Listen to errors\n  getUsers.onError((error) => {\n    console.error(\"Error:\", error);\n  });\n\n  // Initiate the API request\n  getUsers.fetch();\n});\n```\n\n----------------------------------------\n\nTITLE: Loading All Collection Items with WFCMSList in TypeScript\nDESCRIPTION: Illustrates how to manually load all items in a paginated CMS collection using the loadAllCollectionItems method. This approach is useful when autoLoadAllItems is disabled and manual control is required to fetch all collection data after an event or delay.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList with autoLoadAllItems set to false\nconst list = new WFCMSList(\".cms\", { autoLoadAllItems: false });\n\n// Load all items after a certain delay\nsetTimeout(() => {\n    list.loadAllCollectionItems();\n}, 5000);\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Previous Tab with Optional Looping in WFTabs\nDESCRIPTION: Demonstrates how to switch to the previous tab, with control over infinite looping behavior to enhance user navigation experience.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Go to the previous tab\ntabs.goToPreviousTab();\n```\n\n----------------------------------------\n\nTITLE: Submitting the Form with submitForm (TypeScript)\nDESCRIPTION: This code snippet integrates WFInvisibleForm with another xAtom component (WFComponent) representing a submit button. It sets up a click event listener to trigger submitForm, performing the submission logic. It also sets form data and supports extensibility via button selectors. The submitForm call is asynchronous and handles UI interaction events.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFInvisibleForm\nconst invisibleForm = new WFInvisibleForm<{\n  fullname: string;\n  email: string;\n}>(\"Newsletter Form\");\n\n// Initialize a submit button using its CSS selector\nconst submitBtn = new WFComponent(\".submit-btn\");\n\n// Set the form data\ninvisibleForm.setFormData({\n  fullname: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Listen for a click event on the submit button\nsubmitBtn.on(\"click\", () => {\n  // Submit the form when the button is clicked\n  invisibleForm.submitForm();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Form Data using setFromData() in Typescript\nDESCRIPTION: This code snippet demonstrates how to set form data and automatically populate input values using the setFromData() method of the WFFormComponent. The method accepts a form data object as input. The form must be initialized before setting the form data.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFFormComponent\nconst myForm = new WFFormComponent<{  fullname: string; // input name=\"fullname\"\n  email: string; // input name=\"email\"}>(\".my-form\");\n\n// Set form data\nmyForm.setFromData({\n  fullname: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Get form data\nconst formData = myForm.getFormData();\nconsole.log(formData); // { fullname: \"John Doe\", email: \"john@doe.com\" }\n```\n\n----------------------------------------\n\nTITLE: Navigating to Next Page in WFCMSList using TypeScript\nDESCRIPTION: Provides an example of using the `goToNextPageIndex` method to navigate to the next page in a paginated `WFCMSList`. Initialize the list and call the method to advance the page.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Go to the next page in the collection list\nlist.goToNextPageIndex();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration with getConfig Method in TypeScript\nDESCRIPTION: Shows how to use the getConfig method to retrieve previously set configuration from a WFAuth instance. This is useful for accessing authentication tokens and other configuration data.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFAuth instance\nconst userAuth = new WFAuth<\n  {\n    fullName: string;\n    email: string;\n  },\n  \"GUEST\" | \"USER\",\n  {\n    token: string;\n  }\n>();\n\n// Set user information using the `setUser` method.\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Set user config information using the `setConfig` method.\nuserAuth.setConfig({\n  token: \"xyz\",\n});\n\n// Retrieve user config information using the `getConfig` method.\nconst config = userAuth.getConfig();\nconsole.log(config); // {token:\"xyz\"}\n```\n\n----------------------------------------\n\nTITLE: Mapping Multiple Child Components by Selector with getManyChildAsComponents in TypeScript\nDESCRIPTION: Demonstrates retrieving several named child elements in a single call by passing an object that maps keys to CSS selectors into getManyChildAsComponents(selectorMap). Returns corresponding WFComponent-wrapped child elements grouped by key. Prerequisite: parent WFComponent instance and a mapping object of string:selector. Output is an object of WFComponent instances.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new WFComponent instance for a product card\nconst productCard = new WFComponent(`.product-card`);\n\n// Define an object with selectors for various child elements\nconst selectors = {\n  img: \".product-img\",\n  title: \".product-title\",\n  price: \".product-price\",\n};\n\n// Get the specified child elements within the product card\nconst { img, title, price } =\n  productCard.getManyChildAsComponents(selectors);\n\nconsole.log(img, title, price);\n```\n\n----------------------------------------\n\nTITLE: Initializing and using WFImage with basic and advanced configuration\nDESCRIPTION: Complete example demonstrating how to initialize WFImage, listen for load events, and configure image sources with both simple URLs and advanced responsive configurations.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WFImage } from \"@xatom/image\";\nimport { onReady } from \"@xatom/core\";\n\n// Wait until the webflow page has been loaded\nonReady(() => {\n  // Initialize WFImage\n  const img = new WFImage(\".img\");\n\n  // Listen for when the image has been loaded\n  img.onLoad(() => {\n    console.log(\"Image is loaded\");\n  });\n\n  // Set the image source\n  img.setImage(\"https://picsum.photos/id/237/200/300\");\n\n  // Initialize another WFImage\n  const anotherImg = new WFImage(\".other-img\");\n\n  // Listen for when the image has been loaded\n  anotherImg.onLoad(() => {\n    console.log(\"Image is loaded\");\n  });\n\n  // Advance image source configuration\n  anotherImg.setImage({\n    src: \"https://picsum.photos/id/237/800/800\",\n    loading: \"lazy\",\n    sizes: \"(max-width: 642px) 100vw, 642px\",\n    srcSet: [\n      {\n        size: \"500w\",\n        url: \"https://picsum.photos/id/237/500/500\",\n      },\n      {\n        size: \"642w\",\n        url: \"https://picsum.photos/id/237/800/800\",\n      },\n    ],\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Forcing Dynamic List Re-render with forceRender (TypeScript)\nDESCRIPTION: This usage shows how to invoke the forceRender method on a WFDynamicList to refresh its display after programmatic changes, such as calling setData, in a TypeScript environment. The example presupposes initialization of WFDynamicList with proper selectors and a row rendering callback. Dependencies include WFDynamicList and WFComponent, with matching DOM structure. The main input is a forceRender method call with no parameters. The expected effect is immediate UI synchronization. This method should be used when list changes are not automatically detected or rendered.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFDynamicList.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(\".my-list\", {\n  rowSelector: \".my-list-item\", // CSS selector for list items\n  loaderSelector: \".my-list-loader\", // Optional CSS selector for loading state\n  emptySelector: \".my-list-empty-state\", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Return the modified rowElement component\n  return rowElement;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData([\"Item 1\", \"Item 2\"]);\n\n// Trigger a force render to refresh the list\nlist.forceRender();\n```\n\n----------------------------------------\n\nTITLE: Getting the Index of the Currently Active Tab with getActiveTabIndex()\nDESCRIPTION: Provides the index of the tab that is currently active, useful for determining user position within tab navigation.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Get the index of the active tab\nconst activeTabIndex = tabs.getActiveTabIndex();\n\nconsole.log(activeTabIndex); // Output: Index of the active tab\n```\n\n----------------------------------------\n\nTITLE: Adding Slides to WFSlider Example (TypeScript)\nDESCRIPTION: Illustrates how to use the `addSlide` method to dynamically add slides (`WFComponent` instances) to an initialized `WFSlider`. It shows adding a slide to the end, inserting a slide at a specific index using the `config` object, and adding a slide with a custom CSS class.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\n\n// Initialize WFComponent for each slide\nconst item1 = new WFSlider(\".item1\");\nconst item2 = new WFSlider(\".item2\");\nconst item3 = new WFSlider(\".item3\");\n\n// Add the first slide to the slider\nslider.addSlide(item1);\n\n// Add the second slide to the slider at index 2\nslider.addSlide(item2, { index: 2 });\n\n// Add the third slide to the slider with a custom CSS class\nslider.addSlide(item3, { cssClass: \"custom-slide-class\" });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Menu Icon Buttons Array from Navbar Using WFNav in TypeScript\nDESCRIPTION: This snippet retrieves an array of WFComponent instances representing the menu icon buttons in the navbar using the getButtons() method. It also shows how to add a click event listener to the first button in the returned array.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFNav\nconst nav = new WFNav(\".w-nav\");\n\n// Get the array of menu icon buttons\nconst menuIcons = nav.getButtons();\n\n// Log the array of menu icon buttons\nconsole.log(menuIcons); // Output: [WFComponent]\n\n// Add an event listener to the first menu icon button\nmenuIcons[0].on(\"click\",()=>{\n  console.log(\"button is clicked\");\n})\n```\n\n----------------------------------------\n\nTITLE: Forcing Render of WFCMSList Collection in TypeScript\nDESCRIPTION: Demonstrates the forceRenderList method which forces the WFCMSList instance to immediately re-render the collection list UI. This can be used to update visual representation after data or configuration changes.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Force render the collection list\nlist.forceRenderList();\n```\n\n----------------------------------------\n\nTITLE: Registering Tab Change Callback via `onTabChange` (TypeScript)\nDESCRIPTION: This snippet illustrates the usage of the `onTabChange()` method to register a callback function that executes whenever the active tab changes. The callback receives the index of the newly selected tab. The method returns a function that can be used later to unregister the callback, preventing future invocations.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Register a callback function for tab change\nconst unregisterCallback = tabs.onTabChange((index) => {\n  console.log(\"Tab changed to index:\", index);\n});\n\n// Unregister the callback function\nunregisterCallback();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nonTabChange(cb: (index:number)=>void): () => void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic List Loader State Rendering with WFComponent (TypeScript)\nDESCRIPTION: This example configures a WFDynamicList with custom rendering logic for loading and row components using the loaderRenderer method in TypeScript. Dependencies include the WFDynamicList and WFComponent classes, as well as a web page with elements matching the provided CSS selectors. The loaderRenderer callback accesses and modifies a child loader component, setting its text and styles to personalize the loading UI. Expects CSS selectors for rows, loader, and empty state, and an array of strings for list data. Outputs a dynamic list with interactive, customizable loader and row components. Limitations include requiring the presence of specified CSS selectors in the DOM and available WFComponent APIs.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFDynamicList.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFDynamicList\nconst list = new WFDynamicList<string>(\".my-list\", {\n  rowSelector: \".my-list-item\", // CSS selector for list items\n  loaderSelector: \".my-list-loader\", // Optional CSS selector for loading state\n  emptySelector: \".my-list-empty-state\", // Optional selector for empty state\n});\n\n// Customize the rendering of list items\nlist.rowRenderer(({ rowData, rowElement }) => {\n  // Return the modified rowElement component\n  return rowElement;\n});\n\n// Customize the rendering of loader\nlist.loaderRenderer((loader) => {\n  // Customize the loader component as needed\n  const loadingText =\n    loader.getChildAsComponent(\".loading-text\");\n  loadingText.setText(\"Please wait...\"); // Update loading text\n  loader.setStyle({\n    backgroundColor: \"#fff\", // Change background color\n  });\n\n  // Return the modified loader component\n  return loader;\n});\n\n// Set the data to be displayed in the dynamic list\nlist.setData([\"Item 1\", \"Item 2\"]);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Next Slide with WFSlider Example (TypeScript)\nDESCRIPTION: Shows how to programmatically advance the `WFSlider` to the next slide using the `goNext` method. This example triggers the navigation when a button (`myButton`) is clicked.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\nconst myButton = new WFSlider(\".my-button\");\n\n// On button click, go to the next slide\nmyButton.on(\"click\", () => {\n    slider.goNext();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Webflow Navbar Configuration Object Using WFNav in TypeScript\nDESCRIPTION: Illustrates how to obtain the configuration object that controls navbar behavior via getConfig(), allowing developers to read or modify animation duration, easing, and other properties handled by Webflow.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFNav\nconst nav = new WFNav(\".w-nav\");\n\n// Get the navbar configuration\nconst config = nav.getConfig();\n/**\nconfig is a configuration object\n{\n    \"animation\": \"default\",\n    \"animOver\": false,\n    \"animDirect\": 1,\n    \"easing\": \"ease\",\n    \"easing2\": \"ease\",\n    \"duration\": 200\n}\n*/\n\n// Modify the configuration (example: changing the animation duration)\nconfig.duration = 1000; // Setting animation duration to 1 second\n```\n\n----------------------------------------\n\nTITLE: Handling Slide Change Events with WFSlider Example (TypeScript)\nDESCRIPTION: Demonstrates how to use the `onSlideChange` method to register a callback function that executes whenever the slider's active slide changes. The callback receives the new `activeIndex` and the `prevIndex`. The method returns a function to unregister the callback.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\n\n// Define the callback function\nconst slideChangeCallback = (activeIndex:number, prevIndex:number) => {\n  console.log(`Slide changed from ${prevIndex} to ${activeIndex}`);\n};\n\n// Register the callback function\nconst unregisterCallback = slider.onSlideChange(slideChangeCallback);\n\n// To unregister the callback function later\n// unregisterCallback();\n```\n\n----------------------------------------\n\nTITLE: Checking Navbar Menu Drawer Open State Using WFNav in TypeScript\nDESCRIPTION: Shows how to use the isOpen() method of WFNav to determine whether the menu drawer is currently open. The example toggles the drawer on button clicks and logs the open state (true or false).\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFNav\nconst nav = new WFNav(\".w-nav\");\n\n// Initialize WFComponent for the button on the page\nconst button = new WFComponent(\".button-on-page\");\n\n// On button click, toggle nav menu\nbutton.on(\"click\", () => {\n  nav.toggle();\n  console.log(\"Is menu opened:\", nav.isOpen()); // Output: true or false\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing retryRequestOnFailed for Error Handling\nDESCRIPTION: Example of configuring retry behavior for failed requests, particularly useful for handling token expiration scenarios.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the AxiosClientConfigurator with the base API URL\nconst axiosConfigurator = new AxiosClientConfigurator(\n  \"https://your-api-base-url.com\"\n);\n\n// Configure the retry behavior on failed requests\naxiosConfigurator.retryRequestOnFailed(\n  (err, config, retryFn) => {\n    // Check if the error is due to an expired token\n    if (err && err.message === \"TOKEN_EXPIRED\") {\n      // Get a new token using the refresh token\n      const newToken = getNewTokenWithRefreshToken();\n\n      // If a new token is obtained, update the Authorization header and retry the request\n      if (newToken) {\n        config.headers.Authorization = `Bearer ${newToken}`;\n        retryFn(config);\n      } else {\n        // If no new token is obtained, log out the user\n        logoutUser();\n      }\n    } else {\n      // Handle unknown errors\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Child Components with getChildAsComponents in TypeScript\nDESCRIPTION: Fetches all direct descendant elements matching the child selector string, returning them as an array of WFComponent instances. Method getChildAsComponents(selector) facilitates grappling with multiple similar items efficiently. Input is selector string; output is an array of WFComponent-typed instances.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new WFComponent instance for a product listing element\nconst productList = new WFComponent(`.product-listing`);\n// Create an array of WFComponent instances for all product cards inside the listing\nconst productCards =\n  productList.getChildAsComponents(`.product-card`);\nproductCards.forEach((productCard) => {\n  console.log(productCard);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Slider Navigation in TypeScript\nDESCRIPTION: This snippet illustrates how to toggle the navigation capability of the slider by invoking `setSlideNavigationState()` with a boolean argument. It highlights initializing the WFSlider, disabling, and then enabling navigation functionality. Dependencies include the method itself and the slider instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\n\n// Disable slider navigation\nslider.setSlideNavigationState(false);\n\n// Enable slider navigation\nslider.setSlideNavigationState(true);\n```\n\n----------------------------------------\n\nTITLE: WFRoute with Middleware (TypeScript)\nDESCRIPTION: Shows how to enhance route security using middleware with the WFRoute class.  It protects routes by chaining `withMiddleware` and specifies roles and permissions.  It handles unauthorized access by redirecting the user.  Dependencies: `@xatom/core` and a `userMiddleware` function imported from a module.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/routing/WFRoute.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WFRoute } from \"@xatom/core\";\nimport { userMiddleware } from \"../modules/auth/user\";\n\n// Define a WFRoute that allows only non-logged-in users to access the sign-up page\nnew WFRoute(\"/sign-up\")\n  .withMiddleware(userMiddleware, \"GUEST\", \"allow\", {\n    onError: () => {\n      // If the user's role is not guest, navigate to the dashboard\n      window.location = \"/dashboard\";\n    },\n  })\n  .execute(() => {\n    // Execute your logic for /sign-up\n  });\n\n// Create a WFRoute that permits only logged-in users to access all pages falling under the dashboard\nnew WFRoute(\"/dashboard/(.*)\")\n  .withMiddleware(userMiddleware, \"USER\", \"allow\")\n  .execute((params: { token: string }) => {\n    // Handle child routes\n\n    // Logic for the profile page\n    new WFRoute(\"/dashboard/profile\").execute(() => {\n      // Define logic for your profile page\n    });\n\n    // Logic for the message page\n    new WFRoute(\"/dashboard/messages\").execute(() => {\n      // Define logic for your message page\n    });\n  });\n\n// Set up a WFRoute that restricts access to a route to only logged-in users\nnew WFRoute(\"/my-protected-page\")\n  .withMiddleware(userMiddleware, \"USER\", \"allow\", {\n    onError: () => {\n      // If the user's role is not user (not logged in), navigate to the unauthorized page\n      window.location = \"/not-allowed\";\n    },\n  })\n  .execute(() => {\n    // Define logic for your protected page\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining `navigate` Function Syntax (TypeScript)\nDESCRIPTION: This snippet presents the syntax for the `navigate` function in TypeScript, illustrating the acceptable argument types. The function accepts either a string (the navigation path) or an object with either the `to` and `replace` properties, or the `reload` property. It takes one argument (arg) of type string or an object. The return type is void.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/utils/navigate.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnavigate(arg: string | { to: string; type: \"replace\" } | { type: \"reload\" }): void\n```\n\n----------------------------------------\n\nTITLE: Getting Total Page Count from WFCMSList in TypeScript\nDESCRIPTION: Illustrates how to retrieve the total number of pages available in a paginated `WFCMSList` instance. After initializing the list, the `getTotalPagesCount` method is called, which returns the total count as a number.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Get the total number of pages\nconst totalPages = list.getTotalPagesCount();\n\nconsole.log(\"Total pages:\", totalPages);\n```\n\n----------------------------------------\n\nTITLE: Using setImage method with a simple URL and an advanced configuration\nDESCRIPTION: Examples of using the setImage method with both a simple URL string and a complex configuration object for responsive images.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFImage instance with the specified selector\nconst img = new WFImage(\".img\");\n\n// Set the image URL\nimg.setImage(\"https://picsum.photos/id/237/200/300\");\n\n// Or set the image source along with source set\nimg.setImage({\n  src: \"https://picsum.photos/id/237/800/800\",\n  sizes: \"(max-width: 642px) 100vw, 642px\",\n  srcSet: [\n    {\n      size: \"500w\",\n      url: \"https://picsum.photos/id/237/500/500\",\n    },\n    {\n      size: \"642w\",\n      url: \"https://picsum.photos/id/237/800/800\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Removing a Slide from WFSlider Example (TypeScript)\nDESCRIPTION: Demonstrates using the `removeSlide` method to remove a slide from the `WFSlider` at a specified index. The example first adds a slide at index 1 and then removes it.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\n\n// Initialize WFComponent for each slide\nconst item1 = new WFSlider(\".item1\");\n\n// Add the first slide to the slider at index 1\nslider.addSlide(item1, { index: 1 });\n\n// Remove the slide at index 1 from the slider\nslider.removeSlide(1);\n```\n\n----------------------------------------\n\nTITLE: Customizing Item Rendering in WFCMSList using TypeScript\nDESCRIPTION: Illustrates using the `itemRenderer` method to apply custom modifications to each item before it's displayed in the `WFCMSList`. The provided callback function receives the item, its index, and all items, allowing for dynamic content updates (e.g., adding sequential numbers). The function must return the modified item.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Define a custom item renderer function\nlist.itemRenderer(({ item, index, allItems }) => {\n  // Customize the rendering of each item\n  const numberText = item.getChildAsComponent(\".number-index\");\n  numberText.setTextContent(`#${index + 1}`);\n  return item;\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Specific Page in WFCMSList using TypeScript\nDESCRIPTION: Demonstrates using the `goToPageIndex` method to programmatically navigate the `WFCMSList` to a specific page. After initializing the list, call `goToPageIndex` with the desired zero-based page index (e.g., 2 for the third page).\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Go to the 3rd page in the collection list\nlist.goToPageIndex(2);\n```\n\n----------------------------------------\n\nTITLE: Getting the Active Slide with WFSlider Example (TypeScript)\nDESCRIPTION: Illustrates retrieving the currently active slide component using the `getActiveSlide` method. The example then uses the returned `WFComponent` instance to update its background style.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\nconst prevButton = new WFSlider(\".prev-button\");\n\n// On button click\nprevButton.on(\"click\", () => {\n  //Getting current slide\n  const activeSlide = slider.getActiveSlide();\n  //Updating style\n  activeSlide.setStyle({\n    background: \"#ccc\"\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Child Elements as WFComponent Instances with getChildAsComponent in TypeScript\nDESCRIPTION: Returns the first child element matching a CSS selector, wrapped as a new WFComponent instance by calling getChildAsComponent(selector) from a parent WFComponent. Selector must target a valid child. Input is a selector string; output is a WFComponent instance for the matched child.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new WFComponent instance for a card component\nconst card = new WFComponent(`.my-card`);\n// Create a new WFComponent instance for a link inside the card\nconst cardLink = card.getChildAsComponent(`.my-link`);\n```\n\n----------------------------------------\n\nTITLE: Creating an xAtom project with pnpm\nDESCRIPTION: This command utilizes pnpm to create an xAtom project named 'my-site'. It leverages the command `create xatom-app` to scaffold a preconfigured project structure. It requires pnpm to be installed.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/Installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create xatom-app my-site\n```\n\n----------------------------------------\n\nTITLE: Programmatically Navigating to a Specific Tab by Index in WFTabs\nDESCRIPTION: Shows how to switch to a particular tab using its index, enabling custom navigation flows within the tab component system.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Go to the tab at index 3\ntabs.goToTabByIndex(3);\n```\n\n----------------------------------------\n\nTITLE: Listening to Loading State Changes in WFCMSList Using TypeScript\nDESCRIPTION: Example illustrating the onLoadingChange method to register a callback that responds to loading status changes of the collection list. The method returns an unregister function to remove the listener when no longer needed.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Define a callback function\nconst loadingCallback = (status: boolean) => {\n  console.log(\"Loading status:\", status);\n};\n\n// Register the callback function to listen for loading status changes\nconst unregisterCallback = list.onLoadingChange(loadingCallback);\n```\n\n----------------------------------------\n\nTITLE: Using the fetch Method to Initiate Requests\nDESCRIPTION: Example of using the fetch method to initiate an API request with data payload.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get(\"/user\");\n\n// Fetch the GET request with data payload\ngetUser.fetch({ id: 1 });\n```\n\n----------------------------------------\n\nTITLE: Running the development server with yarn\nDESCRIPTION: This command initiates the local development server using yarn. This provides real-time preview of changes to the xAtom project, running on localhost and providing a development experience without constant Webflow publishes. Assumes you are in your project directory.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/Installation.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Getting the Form Component in Typescript\nDESCRIPTION: This snippet shows how to get the HTML form element as a `WFComponent<HTMLFormElement>` using the `getFormComponent()` method. The form component can be manipulated directly using WFComponent methods.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFFormComponent\nconst myForm = new WFFormComponent<{  fullname: string; // input name=\"fullname\"\n  email: string; // input name=\"email\"}>(\".my-form\");\n\n// Get the form component\nconst formComponent = myForm.getFormComponent();\n```\n\n----------------------------------------\n\nTITLE: Implementing showSuccessState() to Display Success Element\nDESCRIPTION: This method hides the form and displays a success indicator to inform users of successful submission. It requires an instance of WFFormComponent and is invoked after validating the form data, typically after an API call confirms success.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize a new instance of WFFormComponent\nconst myForm = new WFFormComponent<{\n  fullname: string; // input name=\"fullname\"\n  email: string; // input name=\"email\"\n}>(\".my-form\");\n\n// Intercept webflow form submission and prevent default\nmyForm.onFormSubmit((data) => {\n  // Simulate API validation\n  validateEmailOnServer(data.email)\n    .then((emailExists) => {\n      if (emailExists) {\n        // Show success state if email exists\n        myForm.showSuccessState();\n      } else {\n        console.log(\"Email was not found.\");\n      }\n    })\n    .catch((error) => {\n      console.error(\"API call failed:\", error);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Items from WFCMSList by Index in TypeScript\nDESCRIPTION: Demonstrates the usage of the removeItem method to remove an item from a WFCMSList instance by specifying its index. This enables dynamic removal of elements from the collection list.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Remove the item at index 0 from the collection list\nlist.removeItem(0);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slider Navigation Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to obtain the navigation component from a WFSlider instance and modify its style properties. It shows initialization of the slider, retrieval of the navigation component through `getSlideNav()`, and subsequent style adjustments. Dependencies include the WFSlider class and WFComponent type.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\n\n// Get the navigation component\nconst navComponent = slider.getSlideNav();\n\n// Modify the navigation component\nnavComponent.setStyle({\n  backgroundColor: \"#000\",\n  color: \"#fff\",\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Page Index from WFCMSList in TypeScript\nDESCRIPTION: Shows how to get the zero-based index of the currently displayed page within a `WFCMSList` instance. Initialize the list and call `getCurrentPageIndex` to retrieve the index as a number.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Get the index of the current page\nconst currentPageIndex = list.getCurrentPageIndex();\n\nconsole.log(\"Current page index:\", currentPageIndex);\n```\n\n----------------------------------------\n\nTITLE: Getting the Success Component in Typescript\nDESCRIPTION: This snippet shows how to retrieve the success element as a `WFComponent<HTMLDivElement>` using the `getSuccessComponent()` method. The success component can be used to display success messages after form submission. Before getting the success component, the form needs to be initialized.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFFormComponent\nconst myForm = new WFFormComponent<{  fullname: string; // input name=\"fullname\"\n  email: string; // input name=\"email\"}>(\".my-form\");\n\n// Get the sucess component\nconst successComponent = myForm.getSuccessComponent();\nsuccessComponent.updateTextViaAttrVar({\n  message: \"Form was successfully submitted\",\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Submit Button Element with getSubmitButton()\nDESCRIPTION: This method retrieves the form's submit button component or element, allowing further DOM manipulations such as disabling, styling, or adding event listeners. It is useful for dynamic UI updates based on form state.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Instantiate form\nconst myForm = new WFFormComponent<{\n  fullname: string;\n  email: string;\n}>(\".my-form\");\n\n// Disable submit button upon form submission\nmyForm.onFormSubmit((data) => {\n  myForm.getSubmitButton().setAttribute(\"disabled\", \"disabled\");\n  // Proceed with validation or submission logic\n  validateEmailOnServer(data.email)\n    .then((emailExists) => {\n      if (emailExists) {\n        myForm.showSuccessState();\n      } else {\n        myForm.showErrorState();\n      }\n    })\n    .catch((error) => {\n      console.error(\"API call failed:\", error);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: setRole Method Syntax in TypeScript\nDESCRIPTION: Defines the TypeScript syntax for the setRole method, which accepts a role of type R and returns void. This method assigns a role to the user in the WFAuth instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetRole(role: R): void\n```\n\n----------------------------------------\n\nTITLE: Navigating to Specific Slide Index with WFSlider Example (TypeScript)\nDESCRIPTION: Demonstrates navigating the `WFSlider` to a specific slide using its index with the `goToIndex` method. It iterates over navigation buttons and adds click listeners to navigate to the corresponding slide index.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\nconst navButtons = document.querySelectorAll(\".nav-button\");\n\n// On nav button click, go to the corresponding slide\nnavButtons.forEach((button, index) => {\n    button.addEventListener(\"click\", () => {\n        slider.goToIndex(index);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing showForm() for UI Reset after Delay\nDESCRIPTION: This method restores the form's visibility after hiding success or error indicators, allowing users to reattempt submission or edit inputs. It is typically called in the final block after processing API responses, with a delay for UX purpose.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Instantiate form\nconst myForm = new WFFormComponent<{\n  fullname: string;\n  email: string;\n}>(\".my-form\");\n\n// Handle submission and UI reset\nmyForm.onFormSubmit((data) => {\n  validateEmailOnServer(data.email)\n    .then((emailExists) => {\n      if (emailExists) {\n        myForm.showSuccessState();\n      } else {\n        myForm.showErrorState();\n      }\n    })\n    .catch((error) => {\n      console.error(\"API call failed:\", error);\n    })\n    .finally(() => {\n      setTimeout(() => {\n        // Show form again after 3 seconds\n        myForm.showForm();\n      }, 3000);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Text Content Using Attributes in WFComponent (TypeScript)\nDESCRIPTION: This method updates text content of DOM elements based on provided key-value pairs, by matching attribute 'xa-var'. It facilitates dynamic content updates in web components by mapping data to specific element attributes.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Example Product Card HTML structure:\n * <div class=\"product-card\">\n *   <div class=\"img-container\"><img src=\"...\" /></div>\n *   <h4 xa-var=\"title\">Example title<h4>\n *   <p xa-var=\"description\">Example description<p>\n *   <p xa-var=\"price\">$0<p>\n *   <button ...>Add to cart</button>\n * </div>\n */\n\n// Create a new WFComponent instance for a div element\nconst productCard = new WFComponent(`.product-card`);\n\n// Update text content with key-value pairs\nproductCard.updateTextViaAttrVar({\n  title: \"Iced Americano\",\n  description: \"Bold and bitter coffee drink!\",\n  price: \"$5.00\",\n});\n\n/**\n * After text update, the Product Card will look like this:\n * <div class=\"product-card\">\n *   <div class=\"img-container\"><img src=\"...\" /></div>\n *   <h4 xa-var=\"title\">Iced Americano<h4>\n *   <p xa-var=\"description\">Bold and bitter coffee drink!<p>\n *   <p xa-var=\"price\">$5.00<p>\n *   <button ...>Add to cart</button>\n * </div>\n */\n```\n\n----------------------------------------\n\nTITLE: Getting Item Count from WFCMSList in TypeScript\nDESCRIPTION: Utilizes the getItemCount method to return the total number of items currently present in the WFCMSList collection. This method provides a simple integer count of the managed items.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Get the total number of items in the collection list\nconst itemCount = list.getItemCount();\n\nconsole.log(itemCount); // 20\n```\n\n----------------------------------------\n\nTITLE: Removing HTML Attributes with removeAttribute in TypeScript\nDESCRIPTION: Demonstrates how to remove an attribute from a managed DOM node through removeAttribute(key) on a WFComponent instance. Only a string key is accepted; no return value. Prerequisite: valid initialized element reference from WFComponent.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new WFComponent instance for an input element\nconst input = new WFComponent(`.myinput`);\n// Remove the attribute\ninput.removeAttribute(\"disabled\");\n```\n\n----------------------------------------\n\nTITLE: Updating Submit Button Text Dynamically with updateSubmitButtonText()\nDESCRIPTION: This method updates the text displayed on the form's submit button, such as changing it to \"Please Wait...\" during asynchronous operations to improve UX. It accepts a string parameter specifying the new button text and can be called before or after API interactions.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create form instance\nconst myForm = new WFFormComponent<{\n  fullname: string;\n  email: string;\n}>(\".my-form\");\n\n// Change submit button text during processing\nmyForm.onFormSubmit((data) => {\n  myForm.updateSubmitButtonText(\"Please Wait...\");\n  validateEmailOnServer(data.email)\n    .then((emailExists) => {\n      if (emailExists) {\n        myForm.showSuccessState();\n      } else {\n        myForm.showErrorState();\n      }\n    })\n    .catch((error) => {\n      console.error(\"API call failed:\", error);\n    })\n    .finally(() => {\n      // Revert button text to original\n      myForm.updateSubmitButtonText(\"Submit\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a New Tab Using WFTabs addTab() Method\nDESCRIPTION: This example illustrates how to add a new tab to an existing WFTabs instance by providing menu and panel WFComponent objects. The method accepts optional parameters for specifying CSS classes and position, enabling dynamic tab management.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Initialize WFComponent for the menu item\nconst menuItem = new WFComponent(\".menu-item\");\n\n// Initialize WFComponent for the panel item\nconst panelItem = new WFComponent(\".panel-item\");\n\n// Add a new tab\ntabs.addTab({\n    menuItem: menuItem,\n    panelItem: panelItem,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring beforeRequest Method in AxiosClientConfigurator\nDESCRIPTION: Shows how to use the beforeRequest method to modify request configuration, such as adding authorization headers before a request is sent.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the AxiosClientConfigurator with the base API URL\nconst axiosConfigurator = new AxiosClientConfigurator(\n  \"https://your-api-base-url.com\"\n);\n\n// Configure a function to be executed before each request\naxiosConfigurator.beforeRequest((config, nextFn) => {\n  // Modify the request configuration, for example, add an Authorization header\n  config.headers.Authorization = \"Bearer MY_TOKEN\";\n\n  // Call nextFn to continue with the modified configuration\n  nextFn(config);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Initial Item Template from WFCMSList in TypeScript\nDESCRIPTION: Illustrates how to obtain a template of the initial item within a `WFCMSList`. This is useful for understanding the structure or cloning items. Initialize the list and call `getInitialItemAsTemplate`.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Get the initial item template\nconst itemTemplate = list.getInitialItemAsTemplate();\n```\n\n----------------------------------------\n\nTITLE: Accessing Menu Container Using WFNav in TypeScript\nDESCRIPTION: Demonstrates how to obtain the menu container component of the navbar using getMenu(), manipulate its styling via setStyle, and log the WFComponent instance returned.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFNav\nconst nav = new WFNav(\".w-nav\");\n\n// Get the menu container\nconst menuContainer = nav.getMenu();\n\n// Log the menu container\nconsole.log(menuContainer); // Output: WFComponent\n\n// Set style for the menu container\nmenuContainer.setStyle({\n  backgroundColor:\"#444\",\n})\n```\n\n----------------------------------------\n\nTITLE: Getting a Slide by Index with WFSlider Example (TypeScript)\nDESCRIPTION: Shows how to retrieve a specific slide component from the `WFSlider` using its index via the `getSlideByIndex` method. The example gets the slide at index 2 and logs it.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\n\n// Get the slide at index 2\nconst slideAtIndex2 = slider.getSlideByIndex(2);\n\n// Log the slide component\nconsole.log(slideAtIndex2);\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Attributes with setAttribute in TypeScript\nDESCRIPTION: Applies standard or custom attributes to WFComponent-managed elements using setAttribute(key, value). Both attribute name and value must be strings. Prerequisite: element must exist and be selected via WFComponent. Sets the specified attribute(s) on the underlying DOM node, producing no output but updating the DOM accordingly.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new WFComponent instance for an input element\nconst input = new WFComponent(`.myinput`);\n// Set a native HTML attribute as an example\ninput.setAttribute(\"disabled\", \"disabled\");\n// Define a custom attribute with a key and value\ninput.setAttribute(\"xa-type\", \"my-btn\");\n```\n\n----------------------------------------\n\nTITLE: Syntax for itemRenderer Method in TypeScript\nDESCRIPTION: Shows the TypeScript syntax for the `itemRenderer` method. It accepts a callback function `cb` as its argument. This callback receives an object with properties `item` (WFComponent), `index` (number), and `allItems` (array of WFComponent). The callback must return the processed `WFComponent`. The `itemRenderer` method itself returns `void`.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nitemRenderer(cb: (data: { item: WFComponent; index: number; allItems: WFComponent[]; }) => WFComponent): void;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webflow .wNav Object Using WFNav in TypeScript\nDESCRIPTION: Demonstrates how to access the native Webflow jQuery object representing the navbar (wNav) using getWebflowObject(), enabling deeper integration or inspection of individual Webflow navbar properties or methods.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFNav\nconst nav = new WFNav(\".w-nav\");\n\n// Get the Webflow object for the navbar\nconst wNavConfig = nav.getWebflowObject();\n\nconsole.log(wNavConfig); // Output: wNav object\n```\n\n----------------------------------------\n\nTITLE: Closing Navbar Menu Drawer Using WFNav in TypeScript\nDESCRIPTION: Shows how to close the navbar menu drawer by invoking the close() method of WFNav upon a button click event. Requires prior instantiation of WFNav and WFComponent to handle the user interaction.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFNav\nconst nav = new WFNav(\".w-nav\");\n\n// Initialize WFComponent for the button on the page\nconst button = new WFComponent(\".button-on-page\");\n\n// On button click, close nav menu\nbutton.on(\"click\", () => {\n  nav.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Inner HTML Content from WFComponent (TypeScript)\nDESCRIPTION: This method retrieves the current inner HTML of the specified DOM component, enabling dynamic content inspection or manipulation before further processing.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a section element\nconst section = new WFComponent(`.my-section`);\n\n// Get the HTML content of the section\nconst sectionHTML = section.getHTML();\nconsole.log(sectionHTML); // Outputs: \"<div class=\\\"content\\\">...</div>\"\n```\n\n----------------------------------------\n\nTITLE: Using onLoadError method to handle image loading failures\nDESCRIPTION: Example demonstrating how to register a callback function for image load error events using the onLoadError method.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFImage instance with the specified selector\nconst img = new WFImage(\".img\");\n\nimg.onLoadError(() => {\n  console.log(\"Image failed to load\");\n  // Retry logic can be implemented here\n});\n\n// Set the image source\nimg.setImage(\"https://picsum.photos/id/237/200/300\");\n```\n\n----------------------------------------\n\nTITLE: WFSlider getAllSlides Method Syntax (TypeScript)\nDESCRIPTION: Defines the signature of the `getAllSlides` method. It takes no arguments and returns an array (`WFComponent[]`) containing all the slide components currently in the slider.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ngetAllSlides(): WFComponent[];\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Items from WFCMSList in TypeScript\nDESCRIPTION: Example usage of getAllItems method to obtain an array of all WFComponent items currently in the collection list. Useful for iterating, manipulating, or reading the entire set of items handled by the WFCMSList instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Get all items from the collection list\nconst allItems = list.getAllItems();\n\nconsole.log(allItems); // Array of WFComponent<HTMLDivElement>\n```\n\n----------------------------------------\n\nTITLE: WFSlider getActiveSlideIndex Method Syntax (TypeScript)\nDESCRIPTION: Defines the signature of the `getActiveSlideIndex` method. It takes no arguments and returns a number representing the zero-based index of the currently active slide.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ngetActiveSlideIndex(): number;\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Currently Active Panel Component with getActivePanel()\nDESCRIPTION: Returns the panel element that is currently active, allowing for direct inspection or manipulation.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Get the active panel component\nconst activePanel = tabs.getActivePanel();\n\nconsole.log(activePanel); // Output: Currently active panel component\n```\n\n----------------------------------------\n\nTITLE: Creating an xAtom project with yarn\nDESCRIPTION: This command uses yarn to create a new xAtom project named 'my-site'. It utilizes the `create xatom-app` command to scaffold the project structure. It requires yarn to be installed and configured in the environment.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/Installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create xatom-app my-site\n```\n\n----------------------------------------\n\nTITLE: Accessing Overlay Container of Navbar Using WFNav in TypeScript\nDESCRIPTION: This example retrieves the overlay container component of the navbar menu using getOverlay(), allowing further manipulations such as applying a backdrop blur style to enhance visual effect.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFNav\nconst nav = new WFNav(\".w-nav\");\n\n// Get the overlay container\nconst overlayContainer = nav.getOverlay();\n\n// Log the overlay container\nconsole.log(overlayContainer); // Output: WFComponent\n\n// Apply styles to the overlay container\noverlayContainer.setStyle({\n  backdropFilter: \"blur(20px)\"\n});\n```\n\n----------------------------------------\n\nTITLE: Getting the Error Component in Typescript\nDESCRIPTION: This snippet demonstrates how to retrieve the error element as a `WFComponent<HTMLDivElement>` using the `getErrorComponent()` method. The error component is used to display error messages to the user. Before getting the error component, the form needs to be initialized.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFFormComponent\nconst myForm = new WFFormComponent<{  fullname: string; // input name=\"fullname\"\n  email: string; // input name=\"email\"}>(\".my-form\");\n\n// Get the error component\nconst errorComponent = myForm.getErrorComponent();\nif (invalidEmail)\n  errorComponent.updateTextViaAttrVar({\n    message: \"Please enter a valid email\",\n  });\n\nif (serverError)\n  errorComponent.updateTextViaAttrVar({\n    message: serverErrorMessage,\n  });\n```\n\n----------------------------------------\n\nTITLE: Checking Form Loading Status with isLoading (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use isLoading to detect if a form submission is in progress, allowing prevention of duplicate submissions or UI state updates. It integrates with a UI button, checking isLoading before allowing another submission. Outputs a boolean.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFInvisibleForm\nconst invisibleForm = new WFInvisibleForm<{\n  fullname: string;\n  email: string;\n}>(\"Newsletter Form\");\n\n// Initialize a submit button using its CSS selector\nconst submitBtn = new WFComponent(\".submit-btn\");\n\n// Set the form data\ninvisibleForm.setFormData({\n  fullname: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Listen for a click event on the submit button\nsubmitBtn.on(\"click\", () => {\n  // Check if the form is currently loading (submitting)\n  const isLoading = invisibleForm.isLoading();\n  if (isLoading) {\n    // Prevent form submission if the form is already submitting\n    return;\n  }\n\n  // Submit the form when the button is clicked\n  invisibleForm.submitForm();\n});\n```\n\n----------------------------------------\n\nTITLE: WFAuth Class Syntax in TypeScript\nDESCRIPTION: Defines the TypeScript syntax for initializing the WFAuth class with generic types for user data, roles, and configuration. This structure allows for type safety and customization.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nWFAuth<U = WFUserDefaultType, R = WFUserDefaultRole, C = WFAuthConfig>(config?:C);\n```\n\n----------------------------------------\n\nTITLE: Using getFilterSortConfig in TypeScript\nDESCRIPTION: Demonstrates initializing a `WFCMSList` instance targeting elements with the class `.cms` and then calling `getFilterSortConfig()` to retrieve the active filter and sort configurations. The retrieved configuration object is then logged to the console.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Get the current filter and sort configurations\nconst config = list.getFilterSortConfig();\n\nconsole.log(config);\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSS Classes from a WFComponent-Managed Element with getCssClass in TypeScript\nDESCRIPTION: Returns an array of all CSS classes applied to an element managed by WFComponent via the getCssClass() method. Output is a string array; prerequisites: must provide a valid WFComponent referencing an actual DOM node. No input parameters are needed.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new WFComponent instance for a button\nconst button = new WFComponent(`.btn`);\nconst cssClasses = button.getCssClass();\nconsole.log(cssClasses); // Outputs: [\"btn\", \"btn-primary\", \"small\"]\n```\n\n----------------------------------------\n\nTITLE: Checking Login Status with isLoggedIn Method in TypeScript\nDESCRIPTION: Demonstrates how to use the isLoggedIn method to check whether a user is currently authenticated. This method returns a boolean indicating the user's login status.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFAuth instance\nconst userAuth = new WFAuth<\n  {\n    fullName: string;\n    email: string;\n  },\n  \"GUEST\" | \"USER\",\n  {\n    token: string;\n  }\n>();\n\n// Check if the user is initially logged in (should be false)\nconst isLoggedIn = userAuth.isLoggedIn();\nconsole.log(isLoggedIn); // false\n\n// Set user information using the `setUser` method.\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Set the user's role to \"USER\"\nuserAuth.setRole(\"USER\");\n\n// Check if the user is now logged in (should be true)\nconst isNowLoggedIn = userAuth.isLoggedIn();\nconsole.log(isNowLoggedIn); // true\n```\n\n----------------------------------------\n\nTITLE: WFInvisibleForm Constructor Syntax (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript constructor for creating a WFInvisibleForm instance, requiring a string formTitle. The returned instance can then be configured or submitted. The only parameter is formTitle (string), which is the name assigned to the form. Outputs depend on instance usage.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew WFInvisibleForm(formTitle:string);\n```\n\n----------------------------------------\n\nTITLE: Getting Previous Slide Index with WFSlider Example (TypeScript)\nDESCRIPTION: Shows how to retrieve the index of the previously active slide using the `getPreviousSlideIndex` method. The example logs the index before and after navigating to the previous slide.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\n\n// Log the previous slide index\nconsole.log(\"Previous slide index:\", slider.getPreviousSlideIndex()); // Example output: 0 (assuming initial state)\n\nslider.goPrevious();\n\nconsole.log(\"Previous slide index:\", slider.getPreviousSlideIndex()); // Example output depends on slider configuration (e.g., 3 if wrapping)\n```\n\n----------------------------------------\n\nTITLE: Installing @xatom/slider Package via pnpm\nDESCRIPTION: Installs the `@xatom/slider` package using the pnpm package manager. Run this command in your project's terminal.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @xatom/slider\n```\n\n----------------------------------------\n\nTITLE: Syntax for getInitialItemAsTemplate Method in TypeScript\nDESCRIPTION: Displays the TypeScript syntax for the `getInitialItemAsTemplate` method. It takes no arguments and returns a `WFComponent<HTMLDivElement>`, which represents the template structure of the first item in the collection list.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ngetInitialItemAsTemplate(): WFComponent<HTMLDivElement>;\n```\n\n----------------------------------------\n\nTITLE: submitForm Method Syntax (TypeScript)\nDESCRIPTION: This method signature represents the TypeScript declaration for submitForm, which initiates form submission and returns void. Typically used in event handlers or after validation.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsubmitForm(): void\n```\n\n----------------------------------------\n\nTITLE: setUser Method Syntax in TypeScript\nDESCRIPTION: Defines the TypeScript syntax for the setUser method, which accepts a user object of type U and returns void. This method is used to set user information in the WFAuth instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetUser(user: U): void\n```\n\n----------------------------------------\n\nTITLE: WFSlider getActiveSlide Method Syntax (TypeScript)\nDESCRIPTION: Defines the signature of the `getActiveSlide` method. It takes no arguments and returns the `WFComponent` instance representing the currently active slide in the slider.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ngetActiveSlide(): WFComponent;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link Components from Navbar Menu Using WFNav in TypeScript\nDESCRIPTION: Shows how to get all the link components contained within the navbar menu by calling getLinks(), returning an array of WFComponent instances representing each link element.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFNav\nconst nav = new WFNav(\".w-nav\");\n\n// Get all the links\nconst links = nav.getLinks();\n\n// Log the links\nconsole.log(links); // Output: [WFComponent]\n```\n\n----------------------------------------\n\nTITLE: WFSlider removeSlide Method Syntax (TypeScript)\nDESCRIPTION: Defines the signature of the `removeSlide` method. It takes a single argument, `index`, which is the zero-based numerical index of the slide to be removed. The method returns `void`.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nremoveSlide(index: number): void;\n```\n\n----------------------------------------\n\nTITLE: Using onLoad method to handle successful image loading\nDESCRIPTION: Example showing how to register a callback function for image load events using the onLoad method.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFImage instance with the specified selector\nconst img = new WFImage(\".img\");\n\nimg.onLoad(() => {\n  console.log(\"Image loaded successfully\");\n});\n\n// Set the image source\nimg.setImage(\"https://picsum.photos/id/237/200/300\");\n```\n\n----------------------------------------\n\nTITLE: Replacing an existing CSS class with a new one in WFComponent\nDESCRIPTION: Replaces an old CSS class with a new class on the element managed by WFComponent. Requires both 'oldClassName' and 'newClassName' as string parameters. It updates the class list, replacing the specified old class with the new class.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a button\nconst button = new WFComponent(`.btn`);\nconsole.log(button.getCssClass()); // Outputs: [\"btn\", \"btn-primary\", \"small\"]\n\n// Replace the CSS class\nbutton.replaceCssClass(\"btn-primary\", \"btn-secondary\");\nconsole.log(button.getCssClass()); // Outputs: [\"btn\", \"btn-secondary\", \"small\"]\n```\n\n----------------------------------------\n\nTITLE: Setting WFInvisibleForm Name (TypeScript)\nDESCRIPTION: This example demonstrates using setFormName to designate a custom name for your invisible Webflow form. It uses a WFInvisibleForm instance with an explicit TypeScript interface for form data, and expects a string formTitle parameter. This is displayable in Webflow form submission emails and is a void-returning method.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFInvisibleForm\nconst invisibleForm = new WFInvisibleForm<{\n  fullname: string;\n  email: string;\n}>();\n\n// Set the form name\ninvisibleForm.setFormName(\"Newsletter Form\");\n```\n\n----------------------------------------\n\nTITLE: setData Method Syntax Reference - TypeScript\nDESCRIPTION: Provides the function signature for setData, clarifying that the method expects an array of type T, enabling dynamic update of the list's data source. Use this to refresh or change the displayed data at runtime. No output is shown, as this is a signature reference for API usage.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFDynamicList.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetData(data:T[]):void\n```\n\n----------------------------------------\n\nTITLE: Removing a CSS class from a WFComponent element\nDESCRIPTION: Removes a specified CSS class from the element's class list. Takes 'className' as input. This operation is useful for cleaning up class lists after certain state changes.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a dialog element\nconst dialog = new WFComponent(`.dialog`);\nconsole.log(dialog.getCssClass()); // Outputs: [\"dialog\", \"opened\"]\n\n// Remove the CSS class\ndialog.removeCssClass(\"opened\");\nconsole.log(dialog.getCssClass()); // Outputs: [\"dialog\"]\n```\n\n----------------------------------------\n\nTITLE: setFormData Method Syntax (TypeScript)\nDESCRIPTION: This is the signature for setFormData, specifying it accepts a formData object mapping string keys to string, File, or File[] values, and returns void. Reference this for correct typing and usage.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetFormData(formData: { [key: string]: string | File | File[] }): void\n```\n\n----------------------------------------\n\nTITLE: Basic Routing with WFRoute (TypeScript)\nDESCRIPTION: Demonstrates how to create basic routes using the WFRoute class, including routes with URL parameters, route groups, and variable routes.  It shows how to define logic to be executed when a route is accessed, including accessing route parameters. Dependencies: `@xatom/core` and a `settingPage` function imported from a module.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/routing/WFRoute.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WFRoute } from \"@xatom/core\";\nimport { settingPage } from \"../modules/setting\";\n\n// Define a simple route for sign-up page\nnew WFRoute(\"/sign-up\").execute(() => {\n  // Execute your logic for /sign-up\n});\n\n// Create routes with URL parameters, such as the invite page with a token parameter\n// URL: /invite?token=XYZ\nnew WFRoute(\"/invite\").execute((params: { token: string }) => {\n  // Execute your logic for /invite\n  console.log(params.token); // XYZ\n});\n\n// Group your routes using (.*) expressions to manage all routes under /dashboard\nnew WFRoute(\"/dashboard/(.*)\").execute(() => {\n  // Handle child routes\n\n  // Create a route for the profile page\n  new WFRoute(\"/dashboard/profile\").execute(() => {\n    // Define logic for your profile page\n  });\n\n  // Execute logic from an imported function for the /dashboard/settings route\n  new WFRoute(\"/dashboard/settings\").execute(settingPage);\n});\n\n// Utilize variable routes to apply a single business logic to all blog posts\n// Example URL: /blogs/how-get-started\nnew WFRoute(\"/blogs/:post\").execute(\n  (params: { post: string }) => {\n    // Execute logic for your post page\n    console.log(params.post); // how-get-started\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing xAtom Configuration JSON for Webflow Project Setup\nDESCRIPTION: This JSON snippet represents the core configuration file for initializing an xAtom project that integrates with a Webflow staging subdomain. The configuration includes a webflowSubdomain for targeting the staging environment, a local development port for serving the app, paths for the source TypeScript file and production distribution folder, a list of JavaScript files to inject into pages during development, and a custom script attribute to manage script execution conflicts between local and published versions. This file is essential for starting and managing real-time development workflows with xAtom and Webflow. Dependencies include a valid Webflow staging setup and adherence to the specified folder structure.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/Configuration.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"webflowSubdomain\": \"YOUR_WEBFLOW_SUBDOMAIN\",\n  \"port\": 3020,\n  \"source\": \"./src/app.ts\",\n  \"dist\": \"./dist\",\n  \"scriptList\": [\"app.js\"],\n  \"scriptAttribute\": \"xa-script\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using disallowedTo Method in WFAuthMiddleware for Role Exclusion\nDESCRIPTION: This code illustrates how to use the disallowedTo method to verify if the current user role does not match a specified role. It involves setting up WFAuth with user data, assigning a role, and calling disallowedTo with various roles to determine restriction status. The method returns true if the role is disallowed for the current user.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuthMiddleware.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst userAuth = new WFAuth<{\n  fullName: string;\n  email: string;\n}, \"GUEST\" | \"USER\" | \"ADMIN\", {\n  token: string;\n}>();\n\nuserAuth.setRole(\"USER\");\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\nconst userMiddleware = new WFAuthMiddleware(userAuth);\n\nconst isDisallowToGuest = userMiddleware.disallowedTo(\"GUEST\");\nconsole.log(isDisallowToGuest); // true\n\nconst isDisallowToUser = userMiddleware.disallowedTo(\"USER\");\nconsole.log(isDisallowToUser); // false\n\nconst isDisallowToAdmin = userMiddleware.disallowedTo(\"ADMIN\");\nconsole.log(isDisallowToAdmin); // true\n```\n\n----------------------------------------\n\nTITLE: Retrieving WFInvisibleForm Name (TypeScript)\nDESCRIPTION: This example shows how to use getFormName to obtain the form's current name as a string. It demonstrates typical usage in context after setting the name, including logging the value. No parameters are required.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFInvisibleForm\nconst invisibleForm = new WFInvisibleForm<{\n  fullname: string;\n  email: string;\n}>();\n\n// Set the form name\ninvisibleForm.setFormName(\"Newsletter Form\");\n\n// Get the form name\nconst formName = invisibleForm.getFormName();\nconsole.log(formName); // Newsletter Form\n```\n\n----------------------------------------\n\nTITLE: WFSlider getPreviousSlideIndex Method Syntax (TypeScript)\nDESCRIPTION: Defines the signature of the `getPreviousSlideIndex` method. It takes no arguments and returns a number representing the zero-based index of the slide that was active before the current one.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ngetPreviousSlideIndex(): number;\n```\n\n----------------------------------------\n\nTITLE: Using getSrcSet method to retrieve responsive image URLs\nDESCRIPTION: Example showing how to get the srcset attribute value using the getSrcSet method.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFImage instance with the specified selector\nconst img = new WFImage(\".img\");\nconsole.log(img.getSrcSet()); // Output: https://picsum.photos/id/237/500/500 500w, https://picsum.photos/id/237/800/800 642w\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Methods Syntax\nDESCRIPTION: The syntax definitions for the different HTTP request methods (GET, POST, PATCH, PUT, DELETE) in AxiosClient.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nget(path: string, requestData: Object): AxiosClientControl;\npost(path: string, requestData: Object): AxiosClientControl;\npatch(path: string, requestData: Object): AxiosClientControl;\nput(path: string, requestData: Object): AxiosClientControl;\ndelete(path: string, requestData: Object): AxiosClientControl;\n```\n\n----------------------------------------\n\nTITLE: Using getSizes method to retrieve image media conditions\nDESCRIPTION: Example demonstrating how to get the sizes attribute value using the getSizes method.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFImage instance with the specified selector\nconst img = new WFImage(\".img\");\nconsole.log(img.getSizes()); // Output: (max-width: 642px) 100vw, 642px\n```\n\n----------------------------------------\n\nTITLE: WFSlider addSlide Method Syntax (TypeScript)\nDESCRIPTION: Defines the signature of the `addSlide` method. It accepts a `WFComponent` instance (`el`) to be added as a slide, and an optional `config` object which can specify the `index` for insertion and a `cssClass` to append. The method returns `void`.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\naddSlide(el: WFComponent, config?: { index?: number; cssClass?: string }): void;\n```\n\n----------------------------------------\n\nTITLE: Getting Active Slide Index with WFSlider Example (TypeScript)\nDESCRIPTION: Demonstrates retrieving the index of the currently active slide using the `getActiveSlideIndex` method. The example logs the index before and after navigating to the next slide to show the change. *Note: The example code uses `activeSlideIndex.getActiveSlideIndex()` which seems incorrect; it should likely be `slider.getActiveSlideIndex()`.*\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\n\n// Log the active slide index\nconsole.log(\"Active slide index:\", slider.getActiveSlideIndex()); // Example output: 1\n\nslider.goNextSlide(); // Assuming goNextSlide() exists, likely meant goNext()\n\nconsole.log(\"Active slide index:\", slider.getActiveSlideIndex()); // Example output: 2\n```\n\n----------------------------------------\n\nTITLE: Creating an xAtom project with npm\nDESCRIPTION: This command uses npm to create a new xAtom project named 'my-site'. It leverages the `create-xatom-app` package to scaffold the project with a predefined structure and necessary dependencies. It assumes Node.js and npm are installed and configured in the environment.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/Installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-xatom-app my-site\n```\n\n----------------------------------------\n\nTITLE: setConfig Method Syntax in TypeScript\nDESCRIPTION: Defines the TypeScript syntax for the setConfig method, which accepts a config object of type C and returns void. This method sets the configuration in the WFAuth instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsetConfig(config: C): void\n```\n\n----------------------------------------\n\nTITLE: Using getImageConfig method to retrieve image configuration\nDESCRIPTION: Example demonstrating how to retrieve the current image configuration using the getImageConfig method.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFImage instance with the specified selector\nconst img = new WFImage(\".img\");\n\n// Set the image URL\nimg.setImage(\"https://picsum.photos/id/237/200/300\");\n\nconsole.log(img.getImageConfig()); // Output: https://picsum.photos/id/237/200/300\n```\n\n----------------------------------------\n\nTITLE: Defining Basic List Structure for WFDynamicList in Webflow - Bash\nDESCRIPTION: Demonstrates the required DOM structure in a Bash-like tree format for correct operation of the WFDynamicList in Webflow. No code execution is expected; this illustrates hierarchical relationships: a root list container (my-list), child item elements (my-list-item), a loader component (my-list-loader), and an empty state element (my-list-empty-state). Ensuring this structural prerequisite is met is crucial for seamless integration with the TypeScript-based WFDynamicList.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFDynamicList.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndiv (my-list)\n├── div (my-list-item)\n├── div (my-list-loader)\n└── div (my-list-empty-state)\n```\n\n----------------------------------------\n\nTITLE: WFSlider onSlideChange Method Syntax (TypeScript)\nDESCRIPTION: Defines the signature of the `onSlideChange` method. It accepts a callback function `cb` as an argument, which takes `activeIndex` and `prevIndex` (both numbers) as parameters. The method returns a function (`() => void`) that, when called, unregisters the provided callback.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nonSlideChange(cb: (activeIndex: number, prevIndex: number) => void): () => void;\n```\n\n----------------------------------------\n\nTITLE: getSrcSet method syntax\nDESCRIPTION: The function signature of the getSrcSet method showing its return type.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ngetSrcSet(): string;\n```\n\n----------------------------------------\n\nTITLE: WFImage constructor syntax\nDESCRIPTION: The syntax for initializing a new WFImage instance with a selector parameter.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew WFImage(selector);\n```\n\n----------------------------------------\n\nTITLE: isLoading Method Syntax (TypeScript)\nDESCRIPTION: This signature outlines the isLoading method, which returns a boolean reflecting the form's loading or pending status. Used for polling or gating submit actions.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nisLoading(): boolean\n```\n\n----------------------------------------\n\nTITLE: Listening for Loading Status Changes with onLoadingChange (TypeScript)\nDESCRIPTION: This example shows how to use onLoadingChange to bind a callback for real-time updates to form loading status. It demonstrates integration with UI elements like loading spinners using another xAtom WFComponent. The provided callback receives a boolean parameter. This method is vital for managing asynchronous state and preventing redundant submissions.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFInvisibleForm\nconst invisibleForm = new WFInvisibleForm<{\n  fullname: string;\n  email: string;\n}>(\"Newsletter Form\");\n\n// Initialize a submit button using its CSS selector\nconst submitBtn = new WFComponent(\".submit-btn\");\nconst loadingSpinner = new WFComponent(\".loading-spinner\");\n\n// Set the form data\ninvisibleForm.setFormData({\n  fullname: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Listen for changes in the loading status\ninvisibleForm.onLoadingChange((status) => {\n  if (status) {\n    // If the form is loading (submitting), show the loading spinner\n    loadingSpinner.addCssClass(\"show\");\n  } else {\n    // If the form is not loading, hide the loading spinner\n    loadingSpinner.removeCssClass(\"show\");\n  }\n});\n\n// Listen for a click event on the submit button\nsubmitBtn.on(\"click\", () => {\n  // Check if the form is currently loading (submitting)\n  const isLoading = invisibleForm.isLoading();\n  if (isLoading) {\n    // Prevent form submission if the form is already submitting\n    return;\n  }\n\n  // Submit the form when the button is clicked\n  invisibleForm.submitForm();\n});\n```\n\n----------------------------------------\n\nTITLE: WFSlider Initialization Syntax in TypeScript\nDESCRIPTION: Specifies the constructor syntax for creating a new instance of the `WFSlider` class. It requires a single argument, `selector`, which is a CSS selector string targeting the Webflow slider element.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew WFSlider(selector);\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Currently Active Menu Item with getActiveMenuItem()\nDESCRIPTION: Returns the menu item component that is currently active, useful for updating UI state or styling.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Get the active menu item component\nconst activeMenuItem = tabs.getActiveMenuItem();\n\nconsole.log(activeMenuItem); // Output: Currently active menu item component\n```\n\n----------------------------------------\n\nTITLE: Monitoring Request Loading State\nDESCRIPTION: Example of using the onLoadingChange method to listen to changes in the loading status of a request.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get(\"/user\");\n\n// Listen to request loading status changes\ngetUser.onLoadingChange((status) => {\n  console.log(status); // Output: true (request in progress) or false (request done)\n});\n\n// Fetch the GET request with data payload\ngetUser.fetch({ id: 1 });\n```\n\n----------------------------------------\n\nTITLE: Removing WFComponent Element from DOM (TypeScript)\nDESCRIPTION: Removes the element associated with the component from the DOM, effectively deleting it from the document structure.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for an element\nconst element = new WFComponent(`.my-element`);\n\n// Remove the element from the DOM\nelement.remove();\n```\n\n----------------------------------------\n\nTITLE: Using allowTo Method in WFAuthMiddleware for Role Verification\nDESCRIPTION: This snippet shows how to utilize the allowTo method to check if the current user role matches a specific role. It demonstrates creating the WFAuth and WFAuthMiddleware instances, setting user roles and information, and calling allowTo with different roles to determine access permissions. The method returns a boolean indicating whether the user has the specified role.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuthMiddleware.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst userAuth = new WFAuth<{\n  fullName: string;\n  email: string;\n}, \"GUEST\" | \"USER\" | \"ADMIN\", {\n  token: string;\n}>();\n\nuserAuth.setRole(\"USER\");\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\nconst userMiddleware = new WFAuthMiddleware(userAuth);\n\nconst isAllowToGuest = userMiddleware.allowTo(\"GUEST\");\nconsole.log(isAllowToGuest); // false\n\nconst isAllowToUser = userMiddleware.allowTo(\"USER\");\nconsole.log(isAllowToUser); // true\n\nconst isAllowToAdmin = userMiddleware.allowTo(\"ADMIN\");\nconsole.log(isAllowToAdmin); // false\n```\n\n----------------------------------------\n\nTITLE: Syntax for WFDynamicList Instantiation - TypeScript\nDESCRIPTION: Provides the basic instantiation syntax for creating a new WFDynamicList. The snippet highlights the required parameters: a selector (CSS string, HTMLElement, or WFComponent) and a configuration object specifying at least the rowSelector property. Intended for developers already importing the class. No output is shown, as this is a signature reference for correct object creation.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFDynamicList.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew WFDynamicList(selector, configuration);\n```\n\n----------------------------------------\n\nTITLE: Implementing resetForm() to Clear Form Inputs\nDESCRIPTION: This method resets all form fields to their initial, empty state, clearing user input data. It is used after successful submission or when a manual reset is required within form handling logic.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFFormComponent.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Instantiate form\nconst myForm = new WFFormComponent<{\n  fullname: string;\n  email: string;\n}>(\".my-form\");\n\n// Handle submission\nmyForm.onFormSubmit((data) => {\n  myForm.disableForm();\n  validateEmailOnServer(data.email)\n    .then((emailExists) => {\n      if (emailExists) {\n        myForm.showSuccessState();\n      } else {\n        myForm.showErrorState();\n      }\n    })\n    .catch((error) => {\n      console.error(\"API call failed:\", error);\n    })\n    .finally(() => {\n      myForm.resetForm();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a CSS class to a WFComponent element\nDESCRIPTION: Adds a specified CSS class to the element associated with WFComponent instance. Dependencies include the WFComponent class. Key parameters include 'className' as the name of the CSS class to add. Input is the class name string, output is the updated list of CSS classes.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a button\nconst button = new WFComponent(`.btn`);\n// Append the CSS class\nbutton.addCssClass(\"btn-primary\");\nconst cssClasses = button.getCssClass();\nconsole.log(cssClasses); // Outputs: [\"btn\", \"btn-primary\"]\n```\n\n----------------------------------------\n\nTITLE: Installing @xatom/axios Package with npm\nDESCRIPTION: Command to install the @xatom/axios package using npm package manager.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xatom/axios\n```\n\n----------------------------------------\n\nTITLE: getFormData Method Syntax (TypeScript)\nDESCRIPTION: This method signature indicates that getFormData returns a dictionary object of field names to string, File, or File[] values. Use it for type safety or API documentation.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetFormData(): { [key: string]: string | File | File[] }\n```\n\n----------------------------------------\n\nTITLE: Navigating to Previous Page in WFCMSList using TypeScript\nDESCRIPTION: Shows how to use the `goToPreviousPageIndex` method to navigate to the previous page in a `WFCMSList`. Initialize the list and invoke the method to go back one page.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFCMSList\nconst list = new WFCMSList(\".cms\");\n\n// Go to the previous page in the collection list\nlist.goToPreviousPageIndex();\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware with WFRoute's `withMiddleware` (TypeScript)\nDESCRIPTION: Demonstrates the usage of the `withMiddleware` method for adding middleware to WFRoute instances.  It secures routes by specifying user roles, permissions (allow/disallow), and handling errors via the `onError` configuration.  It requires a WFAuthMiddleware instance, a role string, a permission string, and a configuration object containing an `onError` callback function.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/routing/WFRoute.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Define a WFRoute that allows only non-logged-in users to access the sign-up page\nnew WFRoute(\"/sign-up\")\n  .withMiddleware(userMiddleware, \"GUEST\", \"allow\", {\n    onError: () => {\n      // If the user's role is not guest, navigate to the dashboard\n      window.location = \"/dashboard\";\n    },\n  })\n  .execute(() => {\n    // Execute your logic for /sign-up\n  });\n```\n\n----------------------------------------\n\nTITLE: Accessing the Tab Menu Container Element with getMenuContainer()\nDESCRIPTION: Returns the container element holding all tab menu items, enabling customization or styling of the tab list.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Get the menu container element\nconst menuContainer = tabs.getMenuContainer();\n\nconsole.log(menuContainer); // Output: Container element holding tab menu items\n```\n\n----------------------------------------\n\nTITLE: getSrc method syntax\nDESCRIPTION: The function signature of the getSrc method showing its return type.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetSrc(): string;\n```\n\n----------------------------------------\n\nTITLE: Accessing Content Container via `getContentContainer` (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `getContentContainer()` method of a `WFTabs` instance to retrieve the HTML element that serves as the container for all tab content panels. It shows the initialization of `WFTabs` and the subsequent call to the method, along with its TypeScript syntax.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Get the content container element\nconst contentContainer = tabs.getContentContainer();\n\nconsole.log(contentContainer); // Output: Container element holding tab content panels\n```\n\nLANGUAGE: typescript\nCODE:\n```\ngetContentContainer(): WFComponent<HTMLElement>;\n```\n\n----------------------------------------\n\nTITLE: Syntax for onAllCollectionItemsReady Method in TypeScript\nDESCRIPTION: Shows the TypeScript syntax definition for the `onAllCollectionItemsReady` method. It accepts a single parameter `cb`, which is a callback function with no arguments and no return value (`() => void`). The method itself returns a function that, when called, unregisters the provided callback.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nonAllCollectionItemsReady(cb: () => void): () => void;\n```\n\n----------------------------------------\n\nTITLE: Getting the text content of a WFComponent element (alternative method)\nDESCRIPTION: Returns the text content property of the element, similar to getText(), used for reading the text displayed within an element for inspection.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a span\nconst span = new WFComponent(`.my-span`);\n// Get the text content\nconst spanTextContent = span.getTextContent();\nconsole.log(spanTextContent); // Outputs: \"Click me!\"\n```\n\n----------------------------------------\n\nTITLE: Getting All Slides with WFSlider Example (TypeScript)\nDESCRIPTION: Demonstrates retrieving an array of all slide components within the `WFSlider` using the `getAllSlides` method. The resulting array of `WFComponent` instances is then logged to the console.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize WFSlider\nconst slider = new WFSlider(\".slider\");\n\n// Get all slides\nconst allSlides = slider.getAllSlides();\n\n// Log all slide components\nconsole.log(allSlides);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Form Data with getFormData (TypeScript)\nDESCRIPTION: This example retrieves current form data set in a WFInvisibleForm instance by calling getFormData. It returns an object representing the fields and their values. Typical usage includes logging, debugging, or pre-submit checks.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a new instance of WFInvisibleForm\nconst invisibleForm = new WFInvisibleForm<{\n  fullname: string;\n  email: string;\n}>(\"Newsletter Form\");\n\n// Set the form data\ninvisibleForm.setFormData({\n  fullname: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\n// Get form data\nconst formData = invisibleForm.getFormData();\nconsole.log(formData); // { fullname: \"John Doe\", email: \"john@doe.com\" }\n```\n\n----------------------------------------\n\nTITLE: Installing @xatom/slider Package via Yarn\nDESCRIPTION: Installs the `@xatom/slider` package using the Yarn package manager. Run this command in your project's terminal.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @xatom/slider\n```\n\n----------------------------------------\n\nTITLE: onLoadingChange Method Syntax (TypeScript)\nDESCRIPTION: This is the complete onLoadingChange method signature, accepting a callback that receives the boolean status. Used for event-driven loading UI.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nonLoadingChange(fn: (status: boolean) => void): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving inline styles from a WFComponent element\nDESCRIPTION: Returns the style object associated with the element, reflecting all inline style properties. Useful for reading current style states for further manipulation or inspection.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for an accordion element\nconst accordion = new WFComponent(`.accordion`);\naccordion.setStyle({\n  height: \"300px\",\n  \"--my-variable\": \"10px\",\n});\n\n// Retrieve the style object\nconst accordionStyle = accordion.getStyle();\nconsole.log(accordionStyle); // Outputs style properties including height and CSS variables\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Tabs' Menu Items and Panels with getAllTab()\nDESCRIPTION: Returns an object containing arrays of all menu and panel components, allowing for batch manipulation or analysis of tab elements.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Get all tabs\nconst allTabs = tabs.getAllTab();\n\nconsole.log(allTabs.menuItems); // Array of menu items\nconsole.log(allTabs.panelItems); // Array of panel items\n```\n\n----------------------------------------\n\nTITLE: Deploying without SSH\nDESCRIPTION: This command deploys the Docusaurus website without using SSH.  It requires setting the `GIT_USER` environment variable with your GitHub username to authorize the push to the `gh-pages` branch.\nSOURCE: https://github.com/xatomteam/docs/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: getUser Method Syntax in TypeScript\nDESCRIPTION: Defines the TypeScript syntax for the getUser method, which returns the user object of type U. This method retrieves the user information stored in the WFAuth instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetUser(): U\n```\n\n----------------------------------------\n\nTITLE: Checking for HTML Attribute Existence with hasAttribute in TypeScript\nDESCRIPTION: Examines if a specified attribute is present by invoking hasAttribute(key) on a WFComponent instance. Returns a boolean indicating the presence of the attribute. Requires initialization by CSS selector or element reference. Input is attribute key string; output is boolean.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new WFComponent instance for an input element\nconst input = new WFComponent(`.myinput`);\n// Check if the attribute is present\nconst isDisabled = input.hasAttribute(\"disabled\");\nconsole.log(isDisabled);\n```\n\n----------------------------------------\n\nTITLE: Removing a Tab by Index with removeTab() Method in WFTabs\nDESCRIPTION: Demonstrates how to remove a specific tab at a given index from the tab collection, facilitating dynamic UI updates and cleanup of tab elements in a Webflow project.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFTabs.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Initialize WFTabs\nconst tabs = new WFTabs(\".tabs\");\n\n// Remove the tab at index 2\ntabs.removeTab(2);\n```\n\n----------------------------------------\n\nTITLE: beforeRequest Method Syntax\nDESCRIPTION: The syntax definition for the beforeRequest method in AxiosClientConfigurator, showing parameter types and return value.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeRequest(fn: (config: axiosConfig, nxtFn: (config: axiosConfig) => void) => void): AxiosClientConfigurator;\n```\n\n----------------------------------------\n\nTITLE: WFSlider goNext Method Syntax (TypeScript)\nDESCRIPTION: Defines the signature of the `goNext` method. It takes no arguments and returns `void`. Calling this method advances the slider to the next slide.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ngoNext(): void;\n```\n\n----------------------------------------\n\nTITLE: Using getSrc method to retrieve the image source\nDESCRIPTION: Example showing how to get the current image source URL using the getSrc method.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFImage instance with the specified selector\nconst img = new WFImage(\".img\");\nconsole.log(img.getSrc()); // Output: https://picsum.photos/id/237/200/300\n```\n\n----------------------------------------\n\nTITLE: Syntax for setFilterSortConfig Method in TypeScript\nDESCRIPTION: Presents the TypeScript syntax for the `setFilterSortConfig` method. It accepts a configuration object `config` which can contain optional `filter` and `sort` properties. The `filter` function takes a `WFComponent` and its datasets, returning a boolean. The `sort` function takes two objects (each containing an item and its datasets) and returns a number for comparison. The method returns `void`.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nsetFilterSortConfig(config: {\n  filter?: (item: WFComponent<HTMLElement>, datasets: { [key: string]: string; }) => boolean;\n  sort?: (itemA: { item: WFComponent<HTMLElement>; datasets: { [key: string]: string; }; }, itemB: { item: WFComponent<HTMLElement>; datasets: { [key: string]: string; }; }) => number;\n}): void;\n```\n\n----------------------------------------\n\nTITLE: WFSlider goPrevious Method Syntax (TypeScript)\nDESCRIPTION: Defines the signature of the `goPrevious` method. It takes no arguments and returns `void`. Calling this method moves the slider to the previous slide.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngoPrevious(): void;\n```\n\n----------------------------------------\n\nTITLE: Using onDataOnce in AxiosClient\nDESCRIPTION: Example illustrating how to use the onDataOnce method to listen for successful response data once when fetch is called for the first time. This method is useful for one-time data processing and only triggers on successful requests.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get<DataType>(\"/user\");\n\n// Listen to the request's success response\ngetUser.onDataOnce((data: DataType) => {\n  console.log(data); // Output: request success response\n});\n\n// Fetch the GET request with data payload\ngetUser.fetch({ id: 1 });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nonDataOnce<DataType>(fn: (data: DataType) => void): void;\n```\n\n----------------------------------------\n\nTITLE: Retrieving WFAuth Instance via getAuth Method in WFAuthMiddleware\nDESCRIPTION: This example shows how to access the underlying WFAuth instance from a WFAuthMiddleware object using the getAuth method. It involves creating WFAuth and WFAuthMiddleware instances, configuring user data, and then retrieving and logging the WFAuth object, which grants access to authentication details and methods.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuthMiddleware.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst userAuth = new WFAuth<{\n  fullName: string;\n  email: string;\n}, \"GUEST\" | \"USER\" | \"ADMIN\", {\n  token: string;\n}>();\n\nuserAuth.setRole(\"USER\");\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n\nconst userMiddleware = new WFAuthMiddleware(userAuth);\n\nconst userMiddlewareAuth = userMiddleware.getAuth();\nconsole.log(userMiddlewareAuth); // WFAuth instance\n```\n\n----------------------------------------\n\nTITLE: Running the development server with npm\nDESCRIPTION: This command starts the local development server using npm. It allows for real-time previews of changes made to the project without requiring Webflow publishing. Assumes you are in your project directory.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/Installation.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Syntax for setNumberOfItemsPerPage Method in TypeScript\nDESCRIPTION: Presents the TypeScript syntax for `setNumberOfItemsPerPage`. It takes a required `numberOfItemsPerPage` (number) argument and an optional `pageIndex` (number) argument. If `pageIndex` is provided, the list navigates to that page after updating the items per page count. Returns `void`.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nsetNumberOfItemsPerPage(numberOfItemsPerPage: number, pageIndex?: number): void;\n```\n\n----------------------------------------\n\nTITLE: Using onLoadingChangeOnce in AxiosClient\nDESCRIPTION: Example demonstrating how to use the onLoadingChangeOnce method to listen for loading status changes once in an AxiosClient GET request. This is useful when you only need to observe the loading change for a single request execution.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize AxiosClient with the configured AxiosClientConfigurator\nconst axiosClient = new AxiosClient(axiosConfigurator);\n\n// Example of making a GET request\nconst getUser = axiosClient.get(\"/user\");\n\n// Listen to request loading status changes\ngetUser.onLoadingChangeOnce((status) => {\n  console.log(status); // Output: true (request in progress) or false (request done)\n});\n\n// Fetch the GET request with data payload\ngetUser.fetch({ id: 1 });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nonLoadingChangeOnce(fn: (status: boolean) => void): void;\n```\n\n----------------------------------------\n\nTITLE: getFilterSortConfig Method Signature in TypeScript\nDESCRIPTION: Provides the TypeScript type signature for the `getFilterSortConfig` method. It returns an object potentially containing a `filter` function (which takes an item and its datasets, returning a boolean) and a `sort` function (which takes two items with their datasets and returns a number for comparison).\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ngetFilterSortConfig(): {\n  filter?: (item: WFComponent<HTMLElement>, datasets: { [key: string]: string; }) => boolean;\n  sort?: (itemA: { item: WFComponent<HTMLElement>; datasets: { [key: string]: string; }; }, itemB: { item: WFComponent<HTMLElement>; datasets: { [key: string]: string; }; }) => number;\n};\n```\n\n----------------------------------------\n\nTITLE: setImage method syntax\nDESCRIPTION: The function signature of the setImage method for the WFImage class showing parameter types.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsetImage(config: string | imgConfig): void;\n```\n\n----------------------------------------\n\nTITLE: getRole Method Syntax in TypeScript\nDESCRIPTION: Defines the TypeScript syntax for the getRole method, which returns the role of type R. This method retrieves the user role stored in the WFAuth instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetRole(): R\n```\n\n----------------------------------------\n\nTITLE: getConfig Method Syntax in TypeScript\nDESCRIPTION: Defines the TypeScript syntax for the getConfig method, which returns the config object of type C. This method retrieves the configuration stored in the WFAuth instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ngetConfig(): C\n```\n\n----------------------------------------\n\nTITLE: fetch Method Syntax\nDESCRIPTION: The syntax definition for the fetch method in AxiosClient, showing parameter types and return value.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfetch(data: Object?, headers: AxiosHeaders?): Promise<Response>;\n```\n\n----------------------------------------\n\nTITLE: getImageConfig method syntax\nDESCRIPTION: The function signature of the getImageConfig method showing its return type.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetImageConfig(): string | imgConfig;\n```\n\n----------------------------------------\n\nTITLE: onLoad method syntax\nDESCRIPTION: The function signature of the onLoad method showing parameter types.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nonLoad(cb: (event: Event) => void): void;\n```\n\n----------------------------------------\n\nTITLE: Installing @xatom/axios Package with pnpm\nDESCRIPTION: Command to install the @xatom/axios package using pnpm package manager.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @xatom/axios\n```\n\n----------------------------------------\n\nTITLE: Using getLoading method to retrieve loading behavior\nDESCRIPTION: Example demonstrating how to get the loading attribute value using the getLoading method.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFImage instance with the specified selector\nconst img = new WFImage(\".img\");\nconsole.log(img.getLoading()); // Output: lazy\n```\n\n----------------------------------------\n\nTITLE: Installing @xatom/slider Package via npm\nDESCRIPTION: Installs the `@xatom/slider` package using the Node Package Manager (npm). Run this command in your project's terminal.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xatom/slider\n```\n\n----------------------------------------\n\nTITLE: Setting User Information with setUser Method in TypeScript\nDESCRIPTION: Demonstrates how to use the setUser method to set user information such as full name and email within a WFAuth instance. This information is essential for user identification in the application.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize a WFAuth instance\nconst userAuth = new WFAuth<\n  {\n    fullName: string;\n    email: string;\n  },\n  \"GUEST\" | \"USER\",\n  {\n    token: string;\n  }\n>();\n\n// Set user information using the `setUser` method.\nuserAuth.setUser({\n  fullName: \"John Doe\",\n  email: \"john@doe.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: setFormName Method Syntax (TypeScript)\nDESCRIPTION: This is the method signature for setFormName. It accepts a single string argument and returns void. Use this for reference or type checking when implementing custom form workflows.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetFormName(formTitle: string): void\n```\n\n----------------------------------------\n\nTITLE: Updating the text content of a WFComponent element\nDESCRIPTION: Sets the text content property of the element to the provided string. Requires the 'text' parameter. Enables dynamic modification of element contents programmatically.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFComponent.mdx#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a new WFComponent instance for a div\nconst div = new WFComponent(`.my-div`);\n// Update the text content\ndiv.setTextContent(\"This is some dynamic content.\");\n// Get the updated text content\nconst updatedTextContent = div.getTextContent();\nconsole.log(updatedTextContent); // Outputs: \"This is some dynamic content.\"\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Documentation\nDESCRIPTION: Imports the `Tabs` and `TabItem` components from the `@theme` library. These components are used within the MDX file to structure content, such as displaying installation commands in separate tabs.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Syntax for getTotalPagesCount Method in TypeScript\nDESCRIPTION: Displays the TypeScript syntax definition for the `getTotalPagesCount` method. It takes no arguments and returns a `number` representing the total number of pages in the collection list.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ngetTotalPagesCount(): number;\n```\n\n----------------------------------------\n\nTITLE: Building the app for production with yarn\nDESCRIPTION: This command builds the xAtom application for production using yarn. It optimizes code for deployment, automatically bundling and optimizing.  Assumes you are in your project directory.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/Installation.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Running the development server with pnpm\nDESCRIPTION: This command initiates the local development server using pnpm. Assumes you are in your project directory.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/Installation.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing @xatom/axios Package with yarn\nDESCRIPTION: Command to install the @xatom/axios package using yarn package manager.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @xatom/axios\n```\n\n----------------------------------------\n\nTITLE: Installing @xatom/nav Package Using Different Package Managers in Bash\nDESCRIPTION: These snippets demonstrate installing the @xatom/nav package required to use the WFNav class using various popular JavaScript package managers: npm, yarn, and pnpm. Each command should be run in a terminal to add the package to your project dependencies before using WFNav functionalities.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFNav.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xatom/nav\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @xatom/nav\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @xatom/nav\n```\n\n----------------------------------------\n\nTITLE: Installing the @xatom/image package with pnpm\nDESCRIPTION: Command to install the @xatom/image package using pnpm package manager.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @xatom/image\n```\n\n----------------------------------------\n\nTITLE: Initializing MDX Components for Documentation\nDESCRIPTION: Imports Tabs and TabItem components from Docusaurus theme for creating tabbed documentation sections.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Deploying with SSH\nDESCRIPTION: This command deploys the Docusaurus website using SSH. It's a convenient method for pushing changes to the `gh-pages` branch when using GitHub Pages for hosting.\nSOURCE: https://github.com/xatomteam/docs/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: onLoadingChange Method Syntax\nDESCRIPTION: The syntax definition for the onLoadingChange method in AxiosClient, showing parameter types and return value.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nonLoadingChange(fn: (status: boolean) => void): void;\n```\n\n----------------------------------------\n\nTITLE: Building the app for production with npm\nDESCRIPTION: This command builds the xAtom application for production using npm. It automatically bundles and optimizes the code, preparing it for deployment.  Assumes you are in your project directory.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/Installation.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing the @xatom/image package with yarn\nDESCRIPTION: Command to install the @xatom/image package using yarn package manager.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @xatom/image\n```\n\n----------------------------------------\n\nTITLE: Installing the @xatom/image package with npm\nDESCRIPTION: Command to install the @xatom/image package using npm package manager.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xatom/image\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: This command starts a local development server for the Docusaurus website. It allows for live updates and testing of changes without requiring a full rebuild of the site.\nSOURCE: https://github.com/xatomteam/docs/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Building the Website for Production\nDESCRIPTION: This command generates static content for the Docusaurus website into the `build` directory. This output can then be deployed to any static content hosting service.\nSOURCE: https://github.com/xatomteam/docs/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Building the app for production with pnpm\nDESCRIPTION: This command builds the xAtom application for production using pnpm. Assumes you are in your project directory.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/Installation.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing xAtom CMS List Package Using Bash\nDESCRIPTION: Commands to install the @xatom/cmslist package using different package managers: npm, yarn, and pnpm. This is a prerequisite step before initializing the WFCMSList class in an xAtom project.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xatom/cmslist\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @xatom/cmslist\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @xatom/cmslist\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the Docusaurus website using Yarn. It is the first step to setting up the project and ensuring all required packages are available.\nSOURCE: https://github.com/xatomteam/docs/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Represents the directory structure of a generated xAtom project. It showcases the key directories and files, including the source code directory, the distribution directory, configuration files, and package management files.  This does not represent executable code but rather the expected file structure.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/Installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmy-site\n├── node_modules\n├── dist\n├── src\n│   ├── modules\n│   │   └── index.ts\n│   ├── routes\n│   │   └── index.ts\n│   ├── app.ts\n├── package.json\n├── README.md\n├── tsconfig.json\n└── xatom.json\n```\n\n----------------------------------------\n\nTITLE: retryRequestOnFailed Method Syntax\nDESCRIPTION: The syntax definition for the retryRequestOnFailed method in AxiosClientConfigurator, showing parameter types and return value.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/services/RESTAPIClient.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nretryRequestOnFailed(fn: (error: Error, config: axiosConfig, retryFn: (config: axiosConfig) => void) => void): AxiosClientConfigurator;\n```\n\n----------------------------------------\n\nTITLE: rowRenderer Method Syntax Reference - TypeScript\nDESCRIPTION: Presents the method signature for rowRenderer, clarifying the typed callback expected for customizing item rendering. This type definition assists in understanding parameter properties like rowData, rowElement, data array, and index for callback function authoring. To use: create a function matching this signature and pass to rowRenderer(). Output: none, as this is a signature reference.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFDynamicList.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nrowRenderer(\n  fn: (\n    params: {\n      rowData: any;\n      rowElement: WFComponent;\n      data: any[];\n      index: number\n       }\n    ) => WFComponent\n  ): void\n```\n\n----------------------------------------\n\nTITLE: Slide Change Callback Parameters Definition\nDESCRIPTION: This snippet describes the parameters for a slide change callback function in TypeScript. It defines a callback `cb` that takes the `activeIndex` and `prevIndex`, both numbers, and executes on slide change. This pattern is used to handle slide transition events.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\ncb: (activeIndex: number, prevIndex: number) => void\n```\n\n----------------------------------------\n\nTITLE: Syntax for getCurrentPageIndex Method in TypeScript\nDESCRIPTION: Presents the TypeScript syntax definition for the `getCurrentPageIndex` method. This method requires no arguments and returns a `number` indicating the zero-based index of the current page.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ngetCurrentPageIndex(): number;\n```\n\n----------------------------------------\n\nTITLE: onLoadError method syntax\nDESCRIPTION: The function signature of the onLoadError method showing parameter types.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nonLoadError(cb: (event: Event) => void): void;\n```\n\n----------------------------------------\n\nTITLE: getFormName Method Syntax (TypeScript)\nDESCRIPTION: This is the getFormName method signature, which returns the currently set formTitle as a string. Useful for documentation and developer reference.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFInvisibleForm.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetFormName(): string\n```\n\n----------------------------------------\n\nTITLE: getSizes method syntax\nDESCRIPTION: The function signature of the getSizes method showing its return type.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ngetSizes(): string;\n```\n\n----------------------------------------\n\nTITLE: WFSlider getSlideByIndex Method Syntax (TypeScript)\nDESCRIPTION: Defines the signature of the `getSlideByIndex` method. It takes a single argument, `index` (the zero-based numerical index of the desired slide), and returns the corresponding `WFComponent` instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ngetSlideByIndex(index: number): WFComponent;\n```\n\n----------------------------------------\n\nTITLE: logout Method Syntax in TypeScript\nDESCRIPTION: Defines the TypeScript syntax for the logout method, which returns void. This method clears all stored user information, user configuration, and user role from the WFAuth instance.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/auth/WFAuth.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nlogout(): void\n```\n\n----------------------------------------\n\nTITLE: WFSlider goToIndex Method Syntax (TypeScript)\nDESCRIPTION: Defines the signature of the `goToIndex` method. It requires a single argument, `index`, which is the zero-based numerical index of the slide to navigate to. The method returns `void`.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFSlider.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngoToIndex(index: number): void;\n```\n\n----------------------------------------\n\nTITLE: Syntax for goToPageIndex Method in TypeScript\nDESCRIPTION: Shows the TypeScript syntax definition for the `goToPageIndex` method. It accepts one argument, `index` (a `number`), representing the zero-based index of the page to navigate to. The method returns `void`.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFCMSList.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ngoToPageIndex(index: number): void;\n```\n\n----------------------------------------\n\nTITLE: getLoading method syntax\nDESCRIPTION: The function signature of the getLoading method showing its return type with possible values.\nSOURCE: https://github.com/xatomteam/docs/blob/main/guide/reference/components/WFImage.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ngetLoading(): \"lazy\" | \"eager\";\n```"
  }
]