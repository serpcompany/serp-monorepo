[
  {
    "owner": "apache",
    "repo": "maven-site",
    "content": "TITLE: Merging Configuration Items in Maven POMs\nDESCRIPTION: Demonstrates how to merge configuration items between parent and child POMs using the combine.children attribute. Shows the parent configuration, child configuration, and resulting merged output.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <items>\n      <item>one</item>\n      <item>two</item>\n  </items>\n</configuration>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <items combine.children=\"append\">\n    <item>three</item>\n  </items>\n</configuration>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <items>\n    <item>one</item>\n    <item>two</item>\n    <item>three</item>\n  </items>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Basic Maven Settings.xml Structure\nDESCRIPTION: Shows the basic structure of a Maven settings.xml file with all possible top-level elements. This provides the foundation for Maven configuration.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/settings.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <localRepository/>\n  <interactiveMode/>\n  <offline/>\n  <pluginGroups/>\n  <servers/>\n  <mirrors/>\n  <proxies/>\n  <profiles/>\n  <activeProfiles/>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Project XSD Schema in pom.xml\nDESCRIPTION: This snippet demonstrates how to properly configure the XML namespace and schema location in a Maven pom.xml file. This configuration enables IDE validation and autocompletion against the Maven 4.0.0 XSD schema.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/general.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n  <!-- ... -->\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Settings XSD Schema in settings.xml\nDESCRIPTION: This snippet shows how to properly configure the XML namespace and schema location in a Maven settings.xml file. This configuration enables IDE validation and autocompletion against the Maven Settings 1.0.0 XSD schema.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/general.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n\n  <!-- ... -->\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Installing Maven Package Locally\nDESCRIPTION: Command to build and install a Maven package to the local repository for use by other projects.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/run.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn install\n```\n\n----------------------------------------\n\nTITLE: Excluding Transitive Dependencies in Maven POM\nDESCRIPTION: Configuration to exclude unwanted transitive dependencies in a Maven project. This demonstrates how to selectively exclude specific artifacts that would otherwise be included via transitive dependency resolution.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <!--...-->\n  <dependency>\n    <groupId><!-- group id --></groupId>\n    <artifactId><!-- artifact id --></artifactId>\n    <version><!-- version --></version>\n    <scope><!-- scope --></scope>\n    <exclusions>\n      <exclusion>\n        <groupId><!-- groupId-of-the-artifact --></groupId>\n        <artifactId><!-- artifactId-of-the-artifact --></artifactId>\n      </exclusion>\n    </exclusions>\n  </dependency>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Output Directories with Properties in Maven\nDESCRIPTION: This snippet shows how to specify different output directories in a POM using properties, allowing runtime customization via command line parameters without editing the POM file each time.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <!--...-->\n  <build>\n    <directory>${directory}</directory>\n    <outputDirectory>${directory}/classes</outputDirectory>\n    <testOutputDirectory>${directory}/test-classes</testOutputDirectory>\n  </build>\n  <properties>\n    <directory>target</directory>     <!-- will serve as the default -->\n  </properties>\n  <!--...-->\n</project>\n```\n\n----------------------------------------\n\nTITLE: Defining Maven Extensions in XML Configuration\nDESCRIPTION: This XML configuration in .mvn/extensions.xml allows defining Maven extensions using standard Maven coordinates. It eliminates the need to modify the Maven installation or use command-line parameters.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/configure.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions xmlns=\"http://maven.apache.org/EXTENSIONS/1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/EXTENSIONS/1.1.0 https://maven.apache.org/xsd/core-extensions-1.0.0.xsd\">\n  <extension>\n    <groupId/>\n    <artifactId/>\n    <version/>\n  </extension>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Accessing Maven Project Version in Java\nDESCRIPTION: Demonstrates how to access the current Maven project version from within a Java class using parameter expression annotation. This technique allows a Java class to retrieve the version specified in the pom.xml file.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_52\n\nLANGUAGE: java\nCODE:\n```\n/**\n * @parameter expression=\"${project.version}\"\n */\nprivate String version;\n```\n\n----------------------------------------\n\nTITLE: Maven Mirror Configuration\nDESCRIPTION: Demonstrates how to configure repository mirrors to redirect Maven to alternative download locations.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/settings.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  ...\n  <mirrors>\n    <mirror>\n      <id>planetmirror.com</id>\n      <name>PlanetMirror Australia</name>\n      <url>http://downloads.planetmirror.com/pub/maven2</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n  </mirrors>\n  ...\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Basic Maven Command Syntax\nDESCRIPTION: The fundamental syntax structure for running Maven commands, showing options, goals, and phases format.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/run.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn [options] [<goal(s)>] [<phase(s)>]\n```\n\n----------------------------------------\n\nTITLE: Running Maven Build with Version Override via Command Line\nDESCRIPTION: Command to build a Maven project with a CI-friendly version by specifying the revision parameter on the command line.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-maven-ci-friendly.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Drevision=1.0.0-SNAPSHOT clean package\n```\n\n----------------------------------------\n\nTITLE: Maven Proxy Configuration\nDESCRIPTION: Shows how to configure proxy settings for Maven to access repositories through corporate firewalls.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/settings.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  ...\n  <proxies>\n    <proxy>\n      <id>myproxy</id>\n      <active>true</active>\n      <protocol>http</protocol>\n      <host>proxy.somewhere.com</host>\n      <port>8080</port>\n      <username>proxyuser</username>\n      <password>somepassword</password>\n      <nonProxyHosts>*.google.com|ibiblio.org</nonProxyHosts>\n    </proxy>\n  </proxies>\n  ...\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Repository in Maven POM\nDESCRIPTION: This snippet demonstrates how to specify a custom remote repository in Maven by adding the <repositories> element to the project's POM file. The configuration includes the repository ID, name, and URL.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<repositories>\n  <repository>\n    <id>my-repo2</id>\n    <name>your custom repo</name>\n    <url>http://jarsm2.dyndns.dk</url>\n  </repository>\n</repositories>\n```\n\n----------------------------------------\n\nTITLE: Alternative Module Structure for Multi-Module Maven Projects\nDESCRIPTION: This snippet shows an alternative way to organize multi-module projects in Maven, with separate parent POMs at different directory levels for more natural grouping.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<modules>\n  <module>B</module>\n</modules>\n```\n\n----------------------------------------\n\nTITLE: Maven 4 Optional Profile Handling\nDESCRIPTION: Shows Maven 4's new optional profile handling using the '?' modifier, which allows builds to continue even when specified profiles don't exist, displaying informational messages instead of errors.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/whatsnewinmaven4.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> mvn compile -P?nonexistent\n[INFO] The requested optional profiles [nonexistent] could not be activated or deactivated because they do not exist.\n[...]\n[INFO] BUILD SUCCESS\n[INFO] ----------------------------------------------------------------------------------------------------------------\n[INFO] Total time:  0.746 s\n[INFO] Finished at: 2024-12-14T13:24:15+01:00\n[INFO] ----------------------------------------------------------------------------------------------------------------\n[INFO] The requested optional profiles [nonexistent] could not be activated or deactivated because they do not exist.\n```\n\n----------------------------------------\n\nTITLE: Defining a Maven Dependency with Classifier\nDESCRIPTION: This XML snippet shows how to declare a dependency with a classifier, which is used when the groupId, artifactId, and version are not enough to uniquely identify an artifact. This example references a native library for Linux on 64-bit X86 architecture.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/dependencies.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.netty</groupId>\n  <artifactId>netty-transport-native-epoll</artifactId>\n  <version>4.1.192</version>\n  <classifier>linux-x86_64</classifier>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Site Plugin Output Encoding\nDESCRIPTION: This XML snippet demonstrates how to configure the Maven Site Plugin to use UTF-8 as the output encoding. This is useful when dealing with special characters in site generation.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/general.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<project>\n  <!-- ... -->\n  <plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-site-plugin</artifactId>\n    <version>3.6</version>\n    <configuration>\n      <outputEncoding>UTF-8</outputEncoding>\n    </configuration>\n  </plugin>\n  <!-- ... -->\n</project>\n```\n\n----------------------------------------\n\nTITLE: Maven Build Plugin Coordinate Mapping\nDESCRIPTION: Demonstrates how Maven maps plugin POM elements to artifact coordinates. Shows the relationship between XML paths and resulting coordinate values for groupId, artifactId, version, classifier, and extension.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/artifacts.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nproject/build/plugins/plugin/groupId    -> group ID\nproject/build/plugins/plugin/artifactId -> artifact ID\nproject/build/plugins/plugin/version    -> version string\n```\n\n----------------------------------------\n\nTITLE: Excluding Plugins from Maven Validation\nDESCRIPTION: Command demonstrating how to exclude specific plugins from Maven's validation process using the maven.plugin.validation.excludes property with a comma-separated list of plugin identifiers.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/plugins/validation/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Dmaven.plugin.validation.excludes=plugin1-goupId:plugin1-artifactId:plugin1-version,plugin2-goupId:plugin2-artifactId:plugin2-version\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies Between Modules with CI-Friendly Versioning\nDESCRIPTION: Example showing how to define dependencies between modules in a multi-module build that uses CI-friendly versioning. ${project.version} must be used for dependencies, not ${revision}.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-maven-ci-friendly.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache.maven.ci</groupId>\n    <artifactId>ci-parent</artifactId>\n    <version>${revision}</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-child</artifactId>\n  ...\n  <dependencies>\n    <dependency>\n      <groupId>org.apache.maven.ci</groupId>\n      <artifactId>child2</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n  </dependencies>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Running Maven Verify Phase\nDESCRIPTION: Basic example of invoking a Maven lifecycle phase to build and verify a project.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/run.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn verify\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in Maven POM\nDESCRIPTION: Shows how to define custom properties in a Maven POM file. Properties can be used throughout the POM file and referenced using the ${property} syntax.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_53\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n  <myproperty>propertyvalue</myproperty>\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Mirrors in settings.xml\nDESCRIPTION: Example of how to configure multiple Maven mirrors in settings.xml. These mirrors can be used as alternatives to the central Maven repository for downloading dependencies.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n\n  <mirrors>\n    <mirror>\n      <id>dotsrc.org</id>\n      <url>http://mirrors.dotsrc.org/maven2</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n    <mirror>\n      <id>ggi-project.org</id>\n      <url>http://ftp.ggi-project.org/pub/packages/maven2</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n    <mirror>\n      <id>sunsite.dk</id>\n      <url>http://mirrors.sunsite.dk/maven2</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n    <mirror>\n      <id>planetmirror.com</id>\n      <url>http://public.planetmirror.com/pub/maven2</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n    <mirror>\n      <id>lsu.edu</id>\n      <url>http://ibiblio.lsu.edu/main/pub/packages/maven2</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n    <mirror>\n      <id>ibiblio.net</id>\n      <url>http://www.ibiblio.net/pub/packages/maven2</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n  </mirrors>\n\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven BuildNumber Plugin for Build Date\nDESCRIPTION: This XML configuration shows how to use the Maven BuildNumber Plugin to generate a build date. It sets up the format for the date, specifies the execution phase, and defines the goal to create the build number.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_51\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.codehaus.mojo</groupId>\n  <artifactId>maven-buildnumber-plugin</artifactId>\n  <version>0.9.4</version>\n  <configuration>\n    <format>{0,date,yyyy-MM-dd HH:mm:ss}</format>\n    <items>\n      <item>timestamp</item>\n    </items>\n    <doCheck>false</doCheck>\n    <doUpdate>false</doUpdate>\n  </configuration>\n  <executions>\n    <execution>\n      <phase>validate</phase>\n      <goals>\n        <goal>create</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Activation in Maven Settings.xml\nDESCRIPTION: Demonstrates how to configure profile activation settings based on JDK version, operating system, properties, and file existence. Shows the structure of activation element with various triggers.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/settings.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <!-- ... -->\n  <profiles>\n    <profile>\n      <id>test</id>\n      <activation>\n        <activeByDefault>false</activeByDefault>\n        <jdk>21</jdk>\n        <os>\n          <name>Windows 10</name>\n          <family>Windows</family>\n          <arch>amd64</arch>\n          <version>10.0.19045.5247</version>\n        </os>\n        <property>\n          <name>mavenVersion</name>\n          <value>3.9.9</value>\n        </property>\n        <file>\n          <exists>${project.basedir}/file2.properties</exists>\n          <missing>${project.basedir}/file1.properties</missing>\n        </file>\n      </activation>\n      <!-- ... -->\n    </profile>\n  </profiles>\n  <!-- ... -->\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Using CI-Friendly Version Placeholder in Maven POM\nDESCRIPTION: Example of using the ${revision} placeholder for versioning in a Maven POM file. This demonstrates the basic structure needed to implement CI-friendly versioning.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-maven-ci-friendly.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}</version>\n  ...\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Assembly Plugin for Deployment\nDESCRIPTION: Configuration for the Maven Assembly Plugin to execute during the install phase. This snippet demonstrates how to configure the assembly plugin to create a package during the install phase of the build lifecycle.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-assembly-plugin</artifactId>\n  <executions>\n    <execution>\n      <phase>install</phase>\n      <goals>\n        <goal>assembly</goal>\n      </goals>\n      <configuration>\n        <!-- put your config here -->\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Timeouts in Maven Settings\nDESCRIPTION: XML configuration for setting connection and request timeouts for Maven server connections. Timeouts are specified in milliseconds.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-resolver-transport.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n  <servers>\n    <server>\n      <id>my-server</id>\n      <configuration>\n        <connectTimeout>10000</connectTimeout> <!-- milliseconds -->\n        <requestTimeout>1800000</requestTimeout> <!-- milliseconds -->\n      </configuration>\n    </server>\n  </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Generating Sources with Maven Antrun Plugin\nDESCRIPTION: This snippet demonstrates how to configure the Maven Antrun plugin to generate source code during the generate-sources phase of the build lifecycle. It includes delegating to an external Ant build file.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-antrun-plugin</artifactId>\n  <dependencies>\n    <!-- add dependencies needed in your ant script -->\n  </dependencies>\n  <executions>\n    <execution>\n      <id>generate-sources</id>\n      <phase>generate-sources</phase>\n      <configuration>\n        <tasks>\n          <!-- this will delegate to an ant build.xml, you could embed here your ant tasks -->\n          <path id=\"classpath\">\n            <path refid=\"maven.compile.classpath\"/>\n            <path refid=\"maven.plugin.classpath\"/>\n          </path>\n          <ant antfile=\"${project.basedir}/build.xml\" dir=\"${project.basedir}\" inheritRefs=\"true\">\n            <target name=\"generate-sources\"/>\n          </ant>\n        </tasks>\n      </configuration>\n      <goals>\n        <goal>run</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Plugin with Multiple Execution Configurations\nDESCRIPTION: Configuration for the Maven Assembly Plugin with multiple execution blocks. This allows creating different types of assemblies (like binary and source distributions) during a single build.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n  <!--...-->\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-assembly-plugin</artifactId>\n      <executions>\n        <execution>\n          <id>1</id>\n          <phase>install</phase>\n          <goals>\n            <goal>assembly</goal>\n          </goals>\n          <configuration>\n            <descriptor>src/main/descriptors/bin.xml</descriptor>\n            <finalName>${project.build.finalName}-bin</finalName>\n          </configuration>\n        </execution>\n\n        <execution>\n          <id>2</id>\n          <phase>install</phase>\n          <goals>\n            <goal>assembly</goal>\n          </goals>\n          <configuration>\n            <descriptor>src/main/descriptors/src.xml</descriptor>\n            <finalName>${project.build.finalName}-src</finalName>\n          </configuration>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n  <!--...-->\n\n</build>\n```\n\n----------------------------------------\n\nTITLE: Configuring Transitive Dependency Excludes in Maven POM\nDESCRIPTION: Example showing how to exclude all transitive dependencies from maven-embedder using wildcard excludes in Maven POM. This feature allows clipping a dependency's transitive dependencies when they have incorrect scopes or conflict with other project dependencies.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.2.1/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  ...\n  <dependencies>\n    <dependency>\n      <groupId>org.apache.maven</groupId>\n      <artifactId>maven-embedder</artifactId>\n      <version>3.1.0</version>\n      <exclusions>\n        <exclusion>\n          <groupId>*</groupId>\n          <artifactId>*</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    ...\n  </dependencies>\n  ...\n</project>\n```\n\n----------------------------------------\n\nTITLE: Defining CI-Friendly Version in Properties Section\nDESCRIPTION: Enhanced POM example showing how to define the revision placeholder in the properties section for easier management of the version.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-maven-ci-friendly.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}</version>\n  ...\n  <properties>\n    <revision>1.0.0-SNAPSHOT</revision>\n  </properties>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Executing Maven Daemon Command in Bash\nDESCRIPTION: Demonstrates how to use the Maven Daemon (mvnd) command instead of the standard Maven (mvn) command for running Maven builds. This example shows a clean verify operation.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/mvnd.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvnd clean verify\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Site Plugin for UTF-8 Output Encoding\nDESCRIPTION: This snippet shows how to configure the Maven Site plugin to use UTF-8 as the output encoding, which is useful when handling special characters in site generation.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-site-plugin</artifactId>\n  <configuration>\n    <outputEncoding>UTF-8</outputEncoding>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Maven 4 Dependents Build Outside Scope\nDESCRIPTION: Command to build dependents outside current scope using Maven 4 with -amd flag.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-multiple-subprojects-4.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd subproject-a && mvn compile -amd\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Maven Artifact Naming Conventions in Markdown\nDESCRIPTION: This snippet illustrates the recommended format for Maven artifact naming using examples. It shows how to structure group IDs and artifact IDs using lowercase letters, digits, and hyphens.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/maven-conventions.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n        maven : maven-core\n        maven : wagon-api\n```\n\n----------------------------------------\n\nTITLE: Running Maven Checkstyle Check\nDESCRIPTION: Example of invoking the Checkstyle plugin goal to verify code style compliance.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/run.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmvn checkstyle:check\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven CLI Options in maven.config\nDESCRIPTION: Example of Maven 3.9.0+ configuration in .mvn/maven.config file, showing how to set persistent command-line options for Maven on a per-project basis. Each option must be on a separate line.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/configure.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-T3\n-U \n--fail-at-end\n```\n\n----------------------------------------\n\nTITLE: Maven Deploy Command for Remote Repository Artifact Installation\nDESCRIPTION: Maven command to deploy an artifact to a remote repository. This command uses the deploy:deploy-file goal to upload a specific file to a configured remote repository.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmvn deploy:deploy-file\n    -DgroupId=<groupId>\n    -DartifactId=<artifactId>\n    -Dversion=<version>\n    -Dpackaging=<packaging>\n    -Dfile=<path-to-file>\n    -DrepositoryId=<id-to-map-on-server>\n    -Durl=<url-of-remote-repo>\n```\n\n----------------------------------------\n\nTITLE: Running Ant Tasks in Different Maven Phases\nDESCRIPTION: This configuration shows how to run an Ant task twice in different phases of the Maven lifecycle. It uses multiple execution elements with unique IDs to bind the maven-antrun-plugin to both the 'generate-sources' and 'package' phases.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <artifactId>maven-antrun-plugin</artifactId>\n  <executions>\n    <execution>\n      <id>one</id>\n      <phase>generate-sources</phase>\n      <configuration>\n        <tasks>\n          <echo message=\"generate-sources!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"/>\n        </tasks>\n      </configuration>\n      <goals>\n        <goal>run</goal>\n      </goals>\n    </execution>\n\n    <execution>\n      <id>two</id>\n      <phase>package</phase>\n      <configuration>\n        <tasks>\n          <echo message=\"package!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"/>\n        </tasks>\n      </configuration>\n      <goals>\n        <goal>run</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Properties in Maven POM\nDESCRIPTION: Example of how test properties can be configured in Maven pom.xml or settings.xml files, which might be causing test execution issues. Shows two different syntax approaches for defining properties.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<!-- ... -->\n<properties>\n  <property>\n    <name>test</name>\n    <value>some-value</value>\n  </property>\n</properties>\n  <!-- ... -->\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- ... -->\n<properties>\n  <test>some-value</test>\n</properties>\n  <!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Multi-Module Parent POM with CI-Friendly Versioning\nDESCRIPTION: Example of a parent POM in a multi-module build that uses CI-friendly versioning. The revision property is defined centrally for all modules.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-maven-ci-friendly.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}</version>\n  ...\n  <properties>\n    <revision>1.0.0-SNAPSHOT</revision>\n  </properties>\n  <modules>\n    <module>child1</module>\n    ..\n  </modules>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Resources in Maven POM\nDESCRIPTION: This XML configuration shows how to set up test resources in a Maven POM file. It defines two testResource sections, specifying directories and file patterns to include in the test classpath.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_47\n\nLANGUAGE: xml\nCODE:\n```\n<testResources>\n  <testResource>\n    <targetPath>org/apache/struts/resources</targetPath>\n    <directory>conf/java</directory>\n    <includes>\n      <include>**/*.xml</include>\n      <include>**/*.dtd</include>\n    </includes>\n  </testResource>\n  <testResource>\n    <directory>src/test</directory>\n    <includes>\n      <include>**/*.xml</include>\n    </includes>\n  </testResource>\n</testResources>\n```\n\n----------------------------------------\n\nTITLE: Accessing Project Sources in Maven Mojo\nDESCRIPTION: Java code demonstrating how to access project source directories from within a Maven Mojo class.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class MyMojo\n  extends AbstractMojo {\n  /**\n   * @parameter expression=\"${project.compileSourceRoots}\"\n   * @required\n   */\n  private List sourceRoots;\n\n  public void execute()\n    throws MojoExecutionException {\n    // ...\n    for (Iterator i = sourceRoots.iterator(); i.hasNext(); ) {\n      String sourceRoot = (String) i.next();\n\n      // Do what you want with these directories\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Maven 4 Resume Build with Dependencies\nDESCRIPTION: Commands to resume build from specific subproject including dependencies in Maven 4.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-multiple-subprojects-4.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile -rf :subproject-c-2 -am\n```\n\n----------------------------------------\n\nTITLE: Configuring HashMap Parameter in Maven Plugin (XML)\nDESCRIPTION: This XML snippet demonstrates how to configure a HashMap parameter in a Maven plugin. It shows the structure for defining key-value pairs within the 'myMap' element in the pom.xml file.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_42\n\nLANGUAGE: XML\nCODE:\n```\n<myMap>\n  <yourkey>yourvalue</yourkey>\n  <!-- ... -->\n</myMap>\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files in Maven Archetype (XML)\nDESCRIPTION: This XML configuration shows how to specify source files to be included in a Maven archetype. It demonstrates adding specific XML and properties files from the src/main/resources directory as sources.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_43\n\nLANGUAGE: XML\nCODE:\n```\n<sources>\n  <source>src/main/resources/sampleXml.xml</source>\n  <source>src/main/resources/sampleProperties.properties</source>\n</sources>\n```\n\n----------------------------------------\n\nTITLE: Maven 4 Phase Ordering Example\nDESCRIPTION: Demonstrates the new phase ordering capability in Maven 4 using square brackets with integer values to specify execution order within phases.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/whatsnewinmaven4.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbefore:integration-test[100]\nbefore:integration-test[200]\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Profiles in Maven Settings.xml\nDESCRIPTION: Shows how to explicitly activate specific profiles using the activeProfiles element in settings.xml, which will make the specified profiles active regardless of their activation conditions.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/settings.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  ...\n  <activeProfiles>\n    <activeProfile>env-test</activeProfile>\n  </activeProfiles>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: XML Structure Paths for V Level Metadata\nDESCRIPTION: XML path specifications for Version level metadata used for snapshot version resolution\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/metadata.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nmetadata/groupId\nmetadata/artifactId\nmetadata/versioning/snapshot/*\nmetadata/versioning/snapshotVersions/*\n```\n\n----------------------------------------\n\nTITLE: Verifying Maven Package Without Installation\nDESCRIPTION: The most common Maven build command that builds and verifies a project without installing it in the local repository.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/run.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmvn verify\n```\n\n----------------------------------------\n\nTITLE: Installing Files in Local Maven Repository\nDESCRIPTION: Maven commands for installing files in local repository with either generated or custom POM files.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn install:install-file\n      -DgroupId=<group-id>\n      -DartifactId=<artifact-id>\n      -Dversion=<version>\n      -Dfile=<path-to-file>\n      -Dpackaging=<packaging> (i.e. jar)\n      -DgeneratePom=true\n```\n\nLANGUAGE: shell\nCODE:\n```\nmvn install:install-file\n      -DgroupId=<group-id>\n      -DartifactId=<artifact-id>\n      -Dversion=<version>\n      -Dfile=<path-to-file>\n      -Dpackaging=<packaging> (i.e. jar)\n      -DpomFile=<path-to-pom>\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin with Default Command Line Configuration\nDESCRIPTION: XML configuration for the exec-maven-plugin with a default-cli execution ID. This defines the configuration that will be used when the plugin is invoked directly from the command line without specifying an execution ID.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.3.1/release-notes.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<project...>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>exec-maven-plugin</artifactId>\n        <version>1.3.2</version>\n        <executions>\n          <execution>\n            <id>default-cli</id>\n            <configuration>\n              <mainClass>com.soebes.test.First</mainClass>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Arguments in .mvn/maven.config\nDESCRIPTION: In Maven 3.9.9, each line in the .mvn/maven.config file is interpreted as a single argument. Multiple arguments must be placed on separate lines.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.9.9/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.mvn/maven.config\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Snapshot Plugin Repository\nDESCRIPTION: This XML configuration demonstrates how to set up a plugin repository for Maven snapshots. It defines a pluginRepository with the ID 'maven-snapshots' and the corresponding URL.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_49\n\nLANGUAGE: xml\nCODE:\n```\n<pluginRepositories>\n  <pluginRepository>\n    <id>maven-snapshots</id>\n    <url>http://snapshots.maven.codehaus.org/</url>\n  </pluginRepository>\n</pluginRepositories>\n```\n\n----------------------------------------\n\nTITLE: Configuring tools.jar Dependency on MacOSX\nDESCRIPTION: Maven dependency configuration for including the tools.jar on MacOSX, where it's packaged differently than on other platforms. This configuration specifies the system path to the classes.jar file.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>sun.jdk</groupId>\n  <artifactId>tools</artifactId>\n  <version>1.5.0</version>\n  <systemPath>/System/Library/Frameworks/JavaVM.framework/Versions/ 1.5/Classes/classes.jar</systemPath>\n  <scope>system</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Transforming Snapshot Version During Deployment in Maven\nDESCRIPTION: This snippet demonstrates how Maven transforms a snapshot version during deployment. It shows the conversion from a typical snapshot version string to a timestamped version format used in remote repositories.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/remote.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.0-SNAPSHOT -> Maven (on the fly) -> 1.0-${YYYYMMDD.HHMMSS}-${counter}\n```\n\n----------------------------------------\n\nTITLE: Maven 3 Multi-Module Project Build Command\nDESCRIPTION: Command to build an aggregator and its children in Maven 3, targeting specific subprojects.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-multiple-subprojects-4.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile -pl subproject-c, subproject-c-1, subproject-c-2\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Only Plugin Parameters in Maven Mojo\nDESCRIPTION: Java code snippet demonstrating how to declare a read-only parameter in a Maven plugin. This parameter gets its value from the project's build directory and cannot be directly configured in the plugin configuration.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n/**\n * @parameter default-value=\"${project.build.directory}\"\n * @required\n * @readonly\n */\nprivate File buildDir;\n```\n\n----------------------------------------\n\nTITLE: Publishing Maven Documentation\nDESCRIPTION: Commands to stage and publish Maven documentation site using Maven SCM publisher plugin.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/developers/release/maven-core-release.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Preporting site site:stage\nmvn scm-publish:publish-scm\n```\n\n----------------------------------------\n\nTITLE: Basic Maven Artifact Path Template\nDESCRIPTION: Template showing how Maven constructs artifact paths without classifier\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/layout.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n${groupId as directory}/${artifactId}/${baseVersion}/${artifactId}-${version}.${extension}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Project XSD Schema\nDESCRIPTION: XML configuration showing how to specify the Maven XSD schema in a project POM file. This enables IDE support for XML validation and auto-completion features.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <!-- ... -->\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Snapshot Repository\nDESCRIPTION: This XML snippet shows how to configure a Maven repository for snapshot dependencies. It defines a repository with the ID 'maven-snapshots' pointing to the Maven snapshot repository URL.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_48\n\nLANGUAGE: xml\nCODE:\n```\n<repositories>\n  <repository>\n    <id>maven-snapshots</id>\n    <url>http://snapshots.maven.codehaus.org/</url>\n  </repository>\n</repositories>\n```\n\n----------------------------------------\n\nTITLE: Maven 4 Dependencies Build Outside Scope\nDESCRIPTION: Command to build dependencies outside current scope using Maven 4 with -am flag.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-multiple-subprojects-4.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd subproject-c/subproject-c-2 && mvn compile -am\n```\n\n----------------------------------------\n\nTITLE: Specifying Modules at Multiple Levels in Maven Multi-Module Projects\nDESCRIPTION: This snippet demonstrates how to specify modules in a multi-module project structure where modules exist at levels deeper than the immediate child directories, by using module paths.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<modules>\n  <module>A/B</module>\n  <!-- ... -->\n</modules>\n```\n\n----------------------------------------\n\nTITLE: Creating Command Line Parameters in Maven Mojo\nDESCRIPTION: Java code snippet showing how to define a parameter field in a Maven plugin Mojo that can be set via command line. This enables using -D parameters with Maven commands to configure the plugin.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n/**\n * @parameter expression=\"${expression.name}\"\n */\nprivate String exp;\n```\n\n----------------------------------------\n\nTITLE: Changing Default Remote Repository in Maven\nDESCRIPTION: This snippet shows how to override the default central repository in Maven by defining a repository with the ID 'central' and specifying your custom repository URL.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<repositories>\n  <repository>\n    <id>central</id>\n    <name>any name</name>\n    <url>http://your.remote.repo.url.org</url>\n    <!--...-->\n  </repository>\n</repositories>\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Properties in Maven Settings.xml\nDESCRIPTION: Shows how to define custom properties within a Maven profile that can be accessed throughout the build process. Demonstrates property definition using the properties element.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/settings.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  ...\n  <profiles>\n    <profile>\n      ...\n      <properties>\n        <user.install>${user.home}/our-project</user.install>\n      </properties>\n      ...\n    </profile>\n  </profiles>\n  ...\n</settings>\n```\n\n----------------------------------------\n\nTITLE: XML Configuration Example - Maven extensions.xml\nDESCRIPTION: Example showing the new support for configuration in extensions.xml and <extension> elements in Maven 4.1.0 model\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/4.0.0-alpha-8/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extension>\n  <!-- Configuration support in Maven 4.1.0 model -->\n</extension>\n```\n\n----------------------------------------\n\nTITLE: Defining a Maven Dependency with Explicit Classifier\nDESCRIPTION: This XML snippet shows how to explicitly specify a classifier for a test JAR dependency. This approach directly sets the tests classifier and uses the default jar type and extension.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/dependencies.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.project</groupId>\n  <artifactId>reusable-test-support</artifactId>\n  <version>1.0</version>\n  <classifier>tests</classifier>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Format of Encrypted Values in Maven 4\nDESCRIPTION: Shows the format of encrypted values in Maven 4, where the encrypted value is enclosed in curly braces with metadata including the dispatcher name, dispatcher-specific attributes, and version.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-encryption-4.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{[name=<dispatcher name>,<dispatcher-specific attributes>,version=4.0]<the encrypted value>}\n```\n\n----------------------------------------\n\nTITLE: Resolving Snapshot Version During Artifact Consumption in Maven\nDESCRIPTION: This snippet illustrates how Maven resolves a snapshot version when consuming artifacts. It shows the process of transforming a snapshot version to its corresponding timestamped version using remote repository metadata.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/remote.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1.0-SNAPSHOT -> Remote V Level Repository Metadata -> 1.0-YYYYMMDD.HHMMS-X\n```\n\n----------------------------------------\n\nTITLE: Accessing Maven Built-in Help\nDESCRIPTION: Command to display Maven's built-in help documentation showing all available options.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/run.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn -h\n```\n\n----------------------------------------\n\nTITLE: Defining Parent and Dependency without Version in Maven 4.1.0 POM\nDESCRIPTION: This XML snippet demonstrates how to define a parent and dependency in a Maven 4.1.0 POM file without specifying versions, utilizing the new automatic versioning feature.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/whatsnewinmaven4.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<project xmlns=\"http://maven.apache.org/POM/4.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.1.0 http://maven.apache.org/xsd/maven-4.1.0.xsd\">\n  <modelVersion>4.1.0</modelVersion>\n\n  <parent>\n    <groupId>my.parents.groupId</groupId>\n    <artifactId>my.parents.artifactId</artifactId>\n  </parent>\n\n  <artifactId>myOwnSubprojectArtifactId</artifactId>\n\n  <dependencies>\n    <dependency>\n      <groupId>the.dependent.subproject.groupId</groupId>\n      <artifactId>the.dependent.subproject.artifactId</artifactId>\n    </dependency>\n  </dependencies>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Defining a Dependency with Explicit Classifier in Maven POM\nDESCRIPTION: Shows how to specify a dependency with an explicit classifier in a Maven POM file. This approach directly sets the classifier attribute to 'tests' rather than relying on a type handler to derive it.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/artifacts.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.project</groupId>\n  <artifactId>reusable-test-support</artifactId>\n  <version>1.0</version>\n  <classifier>tests</classifier>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating a Pull Request for Adding Company Information (Markdown)\nDESCRIPTION: Instructions for creating a pull request to add a company to the support and training list. It specifies the file to modify and provides guidelines for acceptable entries.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/support-and-training.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Create a pull request](https://github.com/apache/maven-site)\n\nThe page to modify is: `content/markdown/support-and-training.md`\n\nThere aren't any hard and fast rules about what is acceptable, but please keep your entry to a few lines, a link and a\nsmall logo.\n\nRemember to add you company to both sections if you provide support and training.\n\n**Please note entries are listed in alphabetical order of the company names.**\n```\n\n----------------------------------------\n\nTITLE: XML Structure Paths for A Level Metadata\nDESCRIPTION: XML path specifications for Artifact level metadata used for version discovery\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/metadata.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nmetadata/groupId\nmetadata/artifactId\nmetadata/versioning/latest\nmetadata/versioning/release\nmetadata/versioning/versions/*\nmetadata/versioning/lastUpdated\n```\n\n----------------------------------------\n\nTITLE: Maven Documentation Links in Markdown\nDESCRIPTION: A collection of markdown-formatted links to various Maven guide pages, including topics like reproducible builds, assemblies, configuration, plugins, and more. Each link follows the format {{{path}title}}.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/apt/guides/mini/index.txt#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n * {{{$prefix/guide-reproducible-builds.html}Configuring for Reproducible Builds}}\n\n * {{{$prefix/guide-assemblies.html}Creating Assemblies}}\n\n * {{{$prefix/guide-archive-configuration.html}Configuring Archive Plugins}}\n\n * {{{$prefix/guide-configuring-maven.html}Configuring Maven}}\n\n * {{{$prefix/guide-generating-sources.html}Generating Sources}}\n\n * {{{$prefix/guide-manifest.html}Working with Manifests}}\n\n * {{{$prefix/guide-maven-classloading.html}Maven Classloading}}\n\n * {{{$prefix/guide-multiple-modules.html}Using Multiple Modules in a Build}}\n\n * {{{$prefix/guide-releasing.html}Using the Release Plugin}}\n\n * {{{$prefix/guide-using-ant.html}Using Ant with Maven}}\n\n * {{{$prefix/guide-using-modello.html}Using Modello}}\n\n * {{{$prefix/guide-using-extensions.html}Using Extensions}}\n\n * {{{$prefix/guide-building-for-different-environments.html}Building For Different Environments}}\n\n * {{{$prefix/guide-using-toolchains.html}Using Toolchains}}\n\n * {{{/examples/injecting-properties-via-settings.html}Injecting POM Properties via settings.xml}}\n```\n\n----------------------------------------\n\nTITLE: Maven Artifact ID Examples\nDESCRIPTION: Examples of proper artifactId naming using lowercase letters, digits, and hyphens.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-naming-conventions.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncommons-math\nmaven-clean-plugin\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Dependencies in Maven Mojo\nDESCRIPTION: Java code showing how to access plugin dependencies from within a Maven Mojo class.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class MyMojo\n    extends AbstractMojo\n{\n    /**\n     * @parameter expression=\"${plugin.artifacts}\"\n     * @required\n     */\n    private List pluginArtifacts;\n\n    public void execute()\n        throws MojoExecutionException\n    {\n        ...\n        for ( Iterator i = pluginArtifacts.iterator(); i.hasNext(); )\n        {\n            Artifact pluginArtifact = (Artifact) i.next();\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSR-330 Maven Plugin Mojo\nDESCRIPTION: This Java code demonstrates how to implement a Maven plugin Mojo using JSR-330 annotations. It uses constructor injection for dependency management and extends AbstractMojo for plugin functionality.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/maven-jsr330.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage org.apache.maven.plugins;\n\nimport javax.inject.Inject;\n\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugins.annotations.LifecyclePhase;\nimport org.apache.maven.plugins.annotations.Mojo;\n\n@Mojo( name = \"hello\", defaultPhase = LifecyclePhase.VALIDATE, requiresProject = false )\npublic class Jsr330Mojo\n    extends AbstractMojo\n{\n\n    private Jsr330Component component;\n\n    @Inject\n    public Jsr330Mojo( Jsr330Component component )\n    {\n        this.component = component;    \n    }\n\n    public void execute()\n        throws MojoExecutionException\n    {    \n        //\n        // Say hello to the world, my little constructor injected component!\n        //\n        component.hello();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Eclipse Plugin for Source Downloads\nDESCRIPTION: This snippet shows how to configure the Maven Eclipse plugin to download source files automatically. It sets the downloadSources configuration option to true.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_45\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n  <pluginManagement>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-eclipse-plugin</artifactId>\n        <version>2.0</version>\n        <configuration>\n          <downloadSources>true</downloadSources>\n        </configuration>\n      </plugin>\n    </plugins>\n  </pluginManagement>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Generating SHA1 Checksums for Maven Repository\nDESCRIPTION: Bash script to generate SHA1 checksums for JAR, XML and POM files in a Maven repository to prevent verification warnings.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/bash\n\ngensum(){\n   shaname=$1.sha1\n\n   sum=`sha1sum $1 ]( cut -f1 -d\" \"`\n   echo $sum > $shaname\n}\n\nprocessFile(){\n   while read oneline\n   do\n      gensum $oneline\n\n\n   done < \"$1\"\n}\n\ntmpFile=$TMP/shagen.list\n\necho \"Generating sha1 sums for XML files\"\nfind . -name \"*.xml\" > \"$tmpFile\"\n\nprocessFile \"$tmpFile\"\n\necho \"Generating sha1 sums for POM files\"\nfind . -name \"*.pom\" > \"$tmpFile\"\n\nprocessFile \"$tmpFile\"\n\necho \"Generating sha1 sums for JAR files\"\nfind . -name \"*.jar\" > \"$tmpFile\"\n\nprocessFile \"$tmpFile\"\n\nrm \"$tmpFile\"\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Maven Project (XML)\nDESCRIPTION: This XML snippet shows how to add a description to a Maven project in the pom.xml file. The description will be displayed on the welcome page of the generated site when executing 'mvn site'.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_44\n\nLANGUAGE: XML\nCODE:\n```\n<project>\n  <!--...-->\n  <description>put your description here</description>\n  <!--...-->\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Options in Maven 3.3.1\nDESCRIPTION: Example of JVM configuration options in the new .mvn/jvm.config file. This allows project-specific JVM settings without relying on environment variables or global configurations.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.3.1/release-notes.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-Xmx2048m -Xms1024m -XX:MaxPermSize=512m -Djava.awt.headless=true\n```\n\n----------------------------------------\n\nTITLE: Defining a Maven Dependency with Type\nDESCRIPTION: This XML snippet demonstrates specifying a dependency with the test-jar type, which maps to a jar extension with tests classifier. This approach is used to reference test classes from another project.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/dependencies.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.example</groupId>\n  <artifactId>reusable-test-support</artifactId>\n  <version>2.3</version>\n  <type>test-jar</type>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: XML Header for Documentation Page\nDESCRIPTION: HTML head element containing the title of the document 'Mojo API Specification' and author metadata for John Casey.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/developers/mojo-api-specification.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<head>\n   <title>Mojo API Specification</title>\n   <meta name=\"author\" content=\"John Casey\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Surefire Plugin to Prevent Double Test Execution\nDESCRIPTION: This snippet demonstrates how to properly configure the maven-surefire-plugin to prevent tests from running twice. It places the configuration element outside of the executions section and sets a system property for Cobertura.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-surefire-plugin</artifactId>\n  <version>2.0</version>\n  <configuration>\n    <systemProperties>\n      <property>\n        <name>net.sourceforge.cobertura.datafile</name>\n        <value>C:\\cobertura.ser</value>\n      </property>\n    </systemProperties>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Issue Type Labels in Markdown\nDESCRIPTION: Standard label types used for categorizing GitHub Issues and Pull Requests.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/developers/conventions/github.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `bug`\n- `dependencies`\n- `documentation`\n- `enhancement`\n- `maintenance`\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Settings XSD Schema\nDESCRIPTION: XML configuration showing how to specify the Maven Settings XSD schema in a settings.xml file. This enables IDE support for XML validation and auto-completion features.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <!-- ... -->\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Compiler Source and Target in Maven POM\nDESCRIPTION: This XML snippet demonstrates how to set the Java compiler source and target versions in a Maven POM file using properties. It sets both the source and target to Java 7.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/general.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<project>\n  <!-- ... -->\n  <properties>\n    <maven.compiler.source>1.7</maven.compiler.source>\n    <maven.compiler.target>1.7</maven.compiler.target>\n  </properties>\n  <!-- ... -->\n</project>\n```\n\n----------------------------------------\n\nTITLE: Preventing Goal Inheritance in Child Projects\nDESCRIPTION: Configuration for the Maven install plugin that prevents child projects from inheriting the installation goal from the parent project by setting the inherited property to false.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <artifactId>maven-install-plugin</artifactId>\n  <configuration>\n    <inherited>false</inherited>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Setting Artifact File in Maven Packaging Plugins\nDESCRIPTION: Shows how packaging plugins must set the artifact file to properly work in a Maven reactor. This is a critical call that packaging plugins need to implement to ensure the generated artifact is properly tracked.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/apt/guides/plugin/notes.txt#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nproject.getArtifact().setFile(fileYouGenerated)\n```\n\n----------------------------------------\n\nTITLE: Child Module POM in Multi-Module Build with CI-Friendly Versioning\nDESCRIPTION: Example of a child module POM that references the parent with a CI-friendly version. The child inherits the version from the parent.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-maven-ci-friendly.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache.maven.ci</groupId>\n    <artifactId>ci-parent</artifactId>\n    <version>${revision}</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-child</artifactId>\n  ...\n</project>\n```\n\n----------------------------------------\n\nTITLE: Using Wagon Component in Java for HTTP Downloads\nDESCRIPTION: Java code example showing how to inject and use the Maven Wagon component for HTTP interactions, which can be used for downloading remote files.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_40\n\nLANGUAGE: java\nCODE:\n```\n/* @component roleHint=\"http\" */\nWagon wagon;\n```\n\n----------------------------------------\n\nTITLE: Basic Maven Group ID Examples\nDESCRIPTION: Examples of proper groupId naming following Java package name convention, starting with reversed domain names.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-naming-conventions.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\norg.apache.maven\norg.apache.commons\ncom.google.guava\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Maven Checkstyle Plugin\nDESCRIPTION: This XML configuration shows how to add log4j as a dependency to the maven-checkstyle-plugin to resolve a commons-logging classloader issue. The dependency is added to the plugin configuration in the build section, not in the reporting section.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  ...\n  <build>\n    ...\n    <plugins>\n      ...\n      <plugin>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <dependencies>\n          <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.12</version>\n          </dependency>\n        </dependencies>\n      </plugin>\n    </plugins>\n  </build>\n  ...\n  <reporting>\n    ...\n    <plugins>\n      <!-- your checkstyle report is registered here, according to Maven documentation -->\n    </plugins>\n  </reporting>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Specifying WAR Dependency in Maven\nDESCRIPTION: Maven dependency configuration for including a WAR file as a dependency. The type element must be set to 'war' when depending on a WAR artifact.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId><!-- groupId of the war --></groupId>\n  <artifactId><!-- artifactId of the war --></artifactId>\n  <version><!-- version of the war --></version>\n  <type>war</type>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Building Reproducible Maven Distribution on Windows\nDESCRIPTION: Command to build a bit-by-bit identical Maven distribution from source on Windows using JDK 8. This ensures reproducibility of the official release.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.6.3/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nmvn -DbuildNumber=cecedd343002696d0abb50b32b541b8a6ba2883f package\n```\n\n----------------------------------------\n\nTITLE: XML Comment Block for Apache License\nDESCRIPTION: XML comment block containing the Apache License 2.0 header, typically used at the beginning of XML files in Apache projects to indicate licensing terms.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.6.3/release-notes.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<!-- \nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/modules/index.html#Markdown\n-->\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Maven Dependency with Default Values\nDESCRIPTION: This XML snippet shows a dependency declaration with only the required groupId, artifactId, and version elements. It relies on default values for scope (compile), type (jar), classifier (empty), and optionality (false).\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/dependencies.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>nu.xom</groupId>\n  <artifactId>xom</artifactId>\n  <version>1.3.9</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Release Notes Header Comment Block\nDESCRIPTION: Apache License 2.0 header comment block with additional note about Markdown syntax documentation.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/4.0.0-beta-4/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/modules/index.html#Markdown\n-->\n```\n\n----------------------------------------\n\nTITLE: Displaying Maven Warning for Prerequisites Usage in Non-Plugin Projects\nDESCRIPTION: This snippet shows the warning message displayed when using <prerequisites> in a non-maven-plugin project. It recommends using the maven-enforcer-plugin instead for version enforcement.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.5.0/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[INFO] Scanning for projects...\n[WARNING] The project org.apache.maven:maven:pom:3.5.0 uses prerequisites which is only intended for maven-plugin projects but not for non maven-plugin projects. For such purposes you should use the maven-enforcer-plugin. See https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html\n```\n\n----------------------------------------\n\nTITLE: Running Maven Archetype Generator\nDESCRIPTION: Example of invoking a specific Maven plugin goal to generate a project from an archetype template.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/run.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmvn archetype:generate\n```\n\n----------------------------------------\n\nTITLE: Running Full Maven Build with Deployment\nDESCRIPTION: Command for a complete build cycle that cleans, builds, packages, deploys artifacts, and publishes the documentation site.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/run.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean deploy site-deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Headers in Maven Settings\nDESCRIPTION: XML configuration for adding custom HTTP headers to Maven server settings. This configuration works for both native and Wagon transports.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-resolver-transport.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n  <servers>\n    <server>\n      <id>my-server</id>\n      <configuration>\n        <httpHeaders>\n          <property>\n            <name>Foo</name>\n            <value>Bar</value>\n          </property>\n        </httpHeaders>\n      </configuration>\n    </server>\n  </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Maven Security Model Usage - XML Configuration\nDESCRIPTION: Example showing the security-related configuration in Maven's conf/settings.xml, specifically highlighting the blocked parameter and external:http:* mirror selector for blocking insecure HTTP repositories.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/security.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<blocked>\\n<external:http:*>\\n\n```\n\n----------------------------------------\n\nTITLE: Including tools.jar Dependency with Profile Activation\nDESCRIPTION: Maven profile configuration that conditionally includes the tools.jar as a dependency only when using Sun's JDK. This profile is automatically activated based on the java.vendor property.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<!-- ... -->\n<profiles>\n  <profile>\n    <id>default-tools.jar</id>\n    <activation>\n      <property>\n        <name>java.vendor</name>\n        <value>Sun Microsystems Inc.</value>\n      </property>\n    </activation>\n    <dependencies>\n      <dependency>\n        <groupId>com.sun</groupId>\n        <artifactId>tools</artifactId>\n        <version>1.4.2</version>\n        <scope>system</scope>\n        <systemPath>${java.home}/../lib/tools.jar</systemPath>\n      </dependency>\n    </dependencies>\n  </profile>\n</profiles>\n  <!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Compiler Plugin for Java 1.3 Compatibility\nDESCRIPTION: This snippet demonstrates how to configure the Maven Compiler plugin to compile Java 1.3 source code when using JDK 1.4.x or 1.5.x, by specifying compiler version and other settings.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <!--...-->\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <verbose>true</verbose>\n          <fork>true</fork>\n          <executable><!-- path-to-javac --></executable>\n          <compilerVersion>1.3</compilerVersion>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n  <!--...-->\n</project>\n```\n\n----------------------------------------\n\nTITLE: Adding Main Class to JAR Manifest in Maven\nDESCRIPTION: Configuration for the Maven JAR Plugin to specify a main class in the generated JAR's manifest. This allows the JAR to be executable using the 'java -jar' command.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-jar-plugin</artifactId>\n  <configuration>\n    <archive>\n      <manifest>\n   <mainClass>com.mycompany.app.App</mainClass>\n      </manifest>\n    </archive>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Goal Invocation from Command Line\nDESCRIPTION: Example showing how to invoke a Maven plugin goal directly from the command line. In this case, the exec:java goal is being called without additional parameters.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.3.1/release-notes.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java\n```\n\n----------------------------------------\n\nTITLE: Listing Maven POM Metadata Elements\nDESCRIPTION: This snippet outlines the key elements of project metadata captured in a Maven POM (Project Object Model). It includes project identity, location, source information, developer details, build requirements, distribution format, and distribution source.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/project-faq.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n- what your project is,\n- where the project lives,\n- where you can find the sources for project,\n- who the developers are on the project and how you can get hold of them,\n- what you need to build the project,\n- the way your project will be built,\n- what form your project will be distributed in, and\n- where it will be distributed from.\n```\n\n----------------------------------------\n\nTITLE: Defining a Maven Dependency with POM Type\nDESCRIPTION: This XML snippet demonstrates specifying a dependency with the pom type, which changes the extension from the default jar to pom. This is commonly used for importing BOM (Bill of Materials) dependencies.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/dependencies.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.google.guava</groupId>\n  <artifactId>guava</artifactId>\n  <version>31.0.0</version>\n  <type>pom</type>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining a Maven Dependency with POM Type\nDESCRIPTION: This XML snippet demonstrates specifying a dependency with the pom type, which changes the extension from the default jar to pom. This is commonly used for importing BOM (Bill of Materials) dependencies.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/dependencies.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.google.guava</groupId>\n  <artifactId>guava</artifactId>\n  <version>31.0.0</version>\n  <type>pom</type>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Plugin Groups Configuration\nDESCRIPTION: Demonstrates how to configure plugin groups in settings.xml to enable shortened plugin references on the command line.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/settings.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  ...\n  <pluginGroups>\n    <pluginGroup>org.eclipse.jetty</pluginGroup>\n  </pluginGroups>\n  ...\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Maven License Header in Markdown\nDESCRIPTION: Apache License 2.0 header comment block with additional note about Markdown syntax help reference.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/4.0.0-alpha-13/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/modules/index.html#Markdown\n-->\n```\n\n----------------------------------------\n\nTITLE: Using Maven with No Transfer Progress Option\nDESCRIPTION: Examples of how to use Maven's new option to suppress the transfer progress when downloading or uploading in interactive mode, available in Maven 3.6.1.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.6.1/release-notes.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn --no-transfer-progress ....\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn -ntp ... ....\n```\n\n----------------------------------------\n\nTITLE: Proposed Maven Plugin Configuration for Project Structure\nDESCRIPTION: This XML snippet demonstrates a proposed Maven plugin configuration to encapsulate the project structure tweaks. It suggests using a hypothetical 'project-structure' plugin with a 'one-tree' method for non-standard layouts.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/apt/guides/suggestions/non-standard-directories.txt#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<build>\n   <plugins>\n     <plugin>\n       <groupId>com.maven.plugins</groupId>\n       <artifactId>project-structure</artifactId>\n       <version>1.0</version>\n       <configuration>\n         <method>one-tree</method>\n       </configuration>\n     </plugin>\n   </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Maven Version Examples - Pre-releases and Build Metadata\nDESCRIPTION: Examples of version naming for pre-releases and versions with build metadata.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-naming-conventions.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n// Pre-releases\n1.0.0-beta\n1.0.0-M1\n1.0.0-rc2\n\n// Build metadata\n1.2.3+dfc0c87\n2.3.4+15433\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Build Source Encoding in Maven POM\nDESCRIPTION: This XML snippet shows how to set the project.build.sourceEncoding property in a Maven POM file to prevent encoding warnings during the build process. It specifies UTF-8 as the source encoding.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/general.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<project>\n  <!-- ... -->\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n  <!-- ... -->\n</project>\n```\n\n----------------------------------------\n\nTITLE: Moving Release Archives to Distribution Directory\nDESCRIPTION: SVN command to move Maven release archives from development to release distribution directory.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/developers/release/maven-core-release.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsvn mv https://dist.apache.org/repos/dist/dev/maven/maven-3/$VERSION https://dist.apache.org/repos/dist/release/maven/maven-3 -m \"Publish Maven $VERSION Distribution Archives\"\n```\n\n----------------------------------------\n\nTITLE: Listing Essential Project Metadata for Maven Central Repository\nDESCRIPTION: This snippet enumerates the crucial metadata elements required when submitting a project to the Central Maven repository. It includes project identifiers, licensing information, description, and dependency details.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/project-faq.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n- Project name\n- Project URL\n- License\n- Description of the project\n- Group and Artifact ID\n- Packaging\n- Version\n- Dependencies\n```\n\n----------------------------------------\n\nTITLE: Maven GAV Coordinates Example\nDESCRIPTION: Example of Maven GAV (GroupId:ArtifactId:Version) coordinates with classifier and extension\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/layout.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\norg.apache.maven:apache-maven:3.8.4:bin:tar.gz\n```\n\n----------------------------------------\n\nTITLE: Maven License Header XML Comment\nDESCRIPTION: XML comment block containing the Apache License 2.0 header and documentation syntax reference for Maven documentation files.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.9.0/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/modules/index.html#Markdown\n-->\n```\n\n----------------------------------------\n\nTITLE: Eclipse .classpath Entry with Source Path\nDESCRIPTION: This XML snippet demonstrates how a .classpath file entry should look when source path attributes are correctly included. It shows a classpathentry for a Maven repository jar with its corresponding source jar.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n<classpathentry kind=\"var\"\n  path=\"M2_REPO/javax/servlet/servlet-api/ 2.4/servlet-api-2.4.jar\"\n  sourcepath=\"M2_REPO/javax/servlet/servlet- api/2.4/servlet-api-2.4-sources.jar\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Module Progress in Maven Build Output\nDESCRIPTION: Shows how Maven 3.5.3 displays progress information during the build process, indicating the current module being built and the total number of modules.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.5.3/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[INFO] Building parent 5.0.1-SNAPSHOT                                     [1/9]\n```\n\n----------------------------------------\n\nTITLE: Detecting Stale Resources in a Maven Mojo\nDESCRIPTION: This Java code demonstrates how to determine stale resources in a Maven Mojo to avoid reprocessing them. It uses StaleSourceScanner with SuffixMapping to identify which source files need to be reprocessed based on their timestamps.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Imports needed\n\nimport org.codehaus.plexus.compiler.util.scan.InclusionScanException;\nimport org.codehaus.plexus.compiler.util.scan.StaleSourceScanner;\nimport org.codehaus.plexus.compiler.util.scan.mapping.SuffixMapping;\n\n// At some point of your code\nStaleSourceScanner scanner = new StaleSourceScanner(0, Collections.singleton(\"**/*.xml\"), Collections.EMPTY_SET);\nscanner.addSourceMapping( new SuffixMapping(\".xml\", \".html\") );\nSet<File> staleFiles = (Set<File>) scanner.getIncludedSources(this.sourceDirectory, this.targetDirectory);\n```\n\n----------------------------------------\n\nTITLE: Defining a Maven Dependency with test-jar Type\nDESCRIPTION: This XML snippet demonstrates an alternative way to reference test classes using the test-jar type instead of an explicit classifier. This approach implicitly sets the tests classifier and jar extension based on the type mapping.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/dependencies.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.project</groupId>\n  <artifactId>reusable-test-support</artifactId>\n  <version>1.0</version>\n  <type>test-jar</type>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Declaring Exported Packages and Artifacts in Maven Extension XML\nDESCRIPTION: This XML snippet demonstrates how to use the META-INF/maven/extension.xml descriptor to declare API packages and artifacts exported by a classloader in Maven Core, Session, and Build Extensions.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/reference/maven-classloading.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<extension>\n <!-- \n   | list of exported classname prefixes.\n   -->\n <exportedPackages>\n   <exportedPackage>org.something.myextension</exportedPackage>\n </exportedPackages>\n     \n <!-- \n   | exported artifacts in groupId:artifactId format \n   -->\n <exportedArtifacts>\n   <exportedArtifact>org.company:myextension</exportedArtifact>\n </exportedArtifacts>\n</extension>\n```\n\n----------------------------------------\n\nTITLE: Maven Version Examples - Release Versions\nDESCRIPTION: Examples of semantic versioning format for release versions following major.minor.patch pattern.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-naming-conventions.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n1.0.0\n2.3.2\n3.5.42\n```\n\n----------------------------------------\n\nTITLE: Creating a Maven Site XML Configuration\nDESCRIPTION: This example shows how to create a site.xml file for Maven site generation. It configures banner images, links, and the navigation menu structure for integrating static HTML content into the generated site.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<project name=\"Maven War Plugin\">\n  <bannerLeft>\n    <name>Maven War Plugin</name>\n    <src>http://maven.apache.org/images/apache-maven-project.png</src>\n    <href>http://maven.apache.org/</href>\n  </bannerLeft>\n  <bannerRight>\n    <src>http://maven.apache.org/images/maven-small.gif</src>\n  </bannerRight>\n  <body>\n    <links>\n      <item name=\"Maven 2\" xhref=\"http://maven.apache.org/maven2/\"/>\n    </links>\n\n    <menu name=\"Overview\">\n      <item name=\"Introduction\" xhref=\"introduction.html\"/>\n      <item name=\"How to Use\" xhref=\"howto.html\"/>\n    </menu>\n    ${reports}\n  </body>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Maven Warning Message for Prerequisites Usage\nDESCRIPTION: Example warning message displayed when prerequisites tag is used in non-maven-plugin projects. This warning suggests using maven-enforcer-plugin instead.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.5.0-beta-1/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[INFO] Scanning for projects...\n[WARNING] The project org.apache.maven:maven:pom:3.5.0-SNAPSHOT uses prerequisites which is only intended for maven-plugin projects but not for non maven-plugin projects. For such purposes you should use the maven-enforcer-plugin. See https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Directory for Maven Eclipse Plugin\nDESCRIPTION: This example shows how to configure the maven-eclipse-plugin to use a custom output directory in the generated Eclipse .classpath file. The configuration specifies 'target-eclipse' as the output directory.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n  <!-- ... -->\n  <pluginManagement>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-eclipse-plugin</artifactId>\n        <configuration>\n          <outputDirectory>target-eclipse</outputDirectory>\n        </configuration>\n      </plugin>\n    </plugins>\n  </pluginManagement>\n  <!-- ... -->\n</build>\n```\n\n----------------------------------------\n\nTITLE: Maven Logging System Property Examples\nDESCRIPTION: Example commands showing how to override logging properties using Maven system properties via MAVEN_OPTS.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/maven-logging.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nMAVEN_OPTS=-Dorg.slf4j.simpleLogger.showThreadName=true mvn <goals>\nMAVEN_OPTS=-Dorg.slf4j.simpleLogger.showLogName=true mvn <goals>\n```\n\n----------------------------------------\n\nTITLE: Using flatten-maven-plugin for Install/Deploy with CI-Friendly Versioning\nDESCRIPTION: Configuration example for using the flatten-maven-plugin, which is required for installing or deploying artifacts with CI-friendly versioning to ensure Maven consumers can use the artifacts.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-maven-ci-friendly.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}</version>\n  ...\n  <properties>\n    <revision>1.0.0-SNAPSHOT</revision>\n  </properties>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>flatten-maven-plugin</artifactId>\n        <version>1.1.0</version>\n        <configuration>\n          <updatePomFile>true</updatePomFile>\n          <flattenMode>resolveCiFriendliesOnly</flattenMode>\n        </configuration>\n        <executions>\n          <execution>\n            <id>flatten</id>\n            <phase>process-resources</phase>\n            <goals>\n              <goal>flatten</goal>\n            </goals>\n          </execution>\n          <execution>\n            <id>flatten.clean</id>\n            <phase>clean</phase>\n            <goals>\n              <goal>clean</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n  <modules>\n    <module>child1</module>\n    ..\n  </modules>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Using flatten-maven-plugin for Install/Deploy with CI-Friendly Versioning\nDESCRIPTION: Configuration example for using the flatten-maven-plugin, which is required for installing or deploying artifacts with CI-friendly versioning to ensure Maven consumers can use the artifacts.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-maven-ci-friendly.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}</version>\n  ...\n  <properties>\n    <revision>1.0.0-SNAPSHOT</revision>\n  </properties>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>flatten-maven-plugin</artifactId>\n        <version>1.1.0</version>\n        <configuration>\n          <updatePomFile>true</updatePomFile>\n          <flattenMode>resolveCiFriendliesOnly</flattenMode>\n        </configuration>\n        <executions>\n          <execution>\n            <id>flatten</id>\n            <phase>process-resources</phase>\n            <goals>\n              <goal>flatten</goal>\n            </goals>\n          </execution>\n          <execution>\n            <id>flatten.clean</id>\n            <phase>clean</phase>\n            <goals>\n              <goal>clean</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n  <modules>\n    <module>child1</module>\n    ..\n  </modules>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Defining Maven2 Repository Directory Structure\nDESCRIPTION: Directory tree representation showing the standard Maven2 repository layout, including metadata files, checksums, artifacts and their variations. Shows the hierarchical organization using groupId, artifactId, version, classifier and extension.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repository/layout.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRepository root\n|-- archetype-catalog.xml\n`-- ${groupId as directory}/\n    |-- maven-metadata.xml\n    |--                   .${checksums}\n    `-- ${artifactId}/\n        |-- maven-metadata.xml\n        |--                   .${checksums}\n        `-- ${version}/\n            |-- ${artifactId}-${version}.pom\n            |--                             .asc\n            |--                             .${checksums}\n            |-- ${artifactId}-${version}.${extension}\n            |--                                     .asc\n            |--                                     .${checksums}\n            |-- ${artifactId}-${version}-${classifier}.${extension}\n            |--                                                    .asc\n            `--                                                    .${checksums}\n```\n\n----------------------------------------\n\nTITLE: Changing the Default JAR Output Directory\nDESCRIPTION: Maven JAR plugin configuration that changes the default output directory for the generated JAR file. By default, Maven places the JAR in the target directory.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-jar-plugin</artifactId>\n  <configuration>\n    <outputDirectory>${project.build.directory}/<!-- directory --></outputDirectory>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Maven Error Stack Trace for Reporting Issue\nDESCRIPTION: This code snippet shows the error stack trace that users might encounter when using Maven reporting with an invalid reportSet configuration that's missing a report element. This is a known issue in Maven 3.6.1.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.6.1/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[INFO] Scanning for projects...\n[ERROR] Internal error: java.lang.NullPointerException -> [Help 1]\norg.apache.maven.InternalErrorException: Internal error: java.lang.NullPointerException\n    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:120)\n...\nCaused by: java.lang.NullPointerException\n    at org.apache.maven.model.plugin.DefaultReportingConverter.convert (DefaultReportingConverter.java:243)\n...\n```\n\n----------------------------------------\n\nTITLE: Maven Artifact Path Resolution Example\nDESCRIPTION: Example showing the resolved filesystem path for a Maven artifact with classifier\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/layout.md#2025-04-08_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\norg/apache/maven/apache-maven/3.8.4/apache-maven-3.8.4-bin.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Items for Static Pages in Maven Site\nDESCRIPTION: This XML snippet demonstrates how to link static pages in the Maven site by adding items to the menu section. Each item has a name and an xhref attribute pointing to the HTML file.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<menu name=\"Overview\">\n  <item name=\"Introduction\" xhref=\"introduction.html\"/>\n  <item name=\"How to Use\" xhref=\"howto.html\"/>\n  <item name=\"<put-name-here>\" xhref=\"<filename-of-the-static-page>\"/>\n</menu>\n```\n\n----------------------------------------\n\nTITLE: Maven Profile Error Handling - Legacy Behavior\nDESCRIPTION: Demonstrates how Maven handles nonexistent profile activation in builds prior to Maven 4, showing the error message when attempting to use a profile that doesn't exist.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/whatsnewinmaven4.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> mvn compile -Pnonexistent\n[ERROR] The requested profiles [nonexistent] could not be activated or deactivated because they do not exist.\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Project Info Reports Plugin\nDESCRIPTION: Shows how to properly configure the maven-project-info-reports-plugin to generate an index.html page for project website.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-project-info-reports-plugin</artifactId>\n  <reportSets>\n     <reportSet>\n        <reports>\n           <report>index</report>\n           <report>dependencies</report>\n           <report>cim</report>\n           <report>scm-list</report>\n           <report>issue-tracking</report>\n        </reports>\n     </reportSet>\n  </reportSets>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Displaying Maven Reactor Build Summary with Multiple Versions\nDESCRIPTION: Example output showing the reactor build summary format for modules with different version numbers. Each line includes the full artifact name with version and build status.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.6.0/release-notes.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO]\n[INFO] Apache Maven ACR Plugin 3.0.1-SNAPSHOT ............. SUCCESS [  0.221 s]\n[INFO] Apache Maven AntRun Plugin 3.0.0-SNAPSHOT .......... SUCCESS [  0.004 s]\n[INFO] Apache Maven Changelog Plugin 2.4-SNAPSHOT ......... SUCCESS [  0.005 s]\n[INFO] Apache Maven Changes Plugin 3.0.0-SNAPSHOT ......... SUCCESS [  0.487 s]\n[INFO] Apache Maven Clean Plugin 3.0.1-SNAPSHOT ........... SUCCESS [  0.003 s]\n[INFO] Apache Maven Compiler Plugin 3.7.1-SNAPSHOT ........ SUCCESS [  0.026 s]\n[INFO] Apache Maven Deploy Plugin 3.0.0-SNAPSHOT .......... SUCCESS [  0.005 s]\n[INFO] Apache Maven Documentation Checker Plugin 1.2-SNAPSHOT SUCCESS [  0.058 s]\n[INFO] Apache Maven EAR Plugin 3.0.0-SNAPSHOT ............. SUCCESS [  0.003 s]\n[INFO] Apache Maven EJB Plugin 3.0.1-SNAPSHOT ............. SUCCESS [  0.004 s]\n```\n\n----------------------------------------\n\nTITLE: Setting JVM Options for Maven in jvm.config\nDESCRIPTION: Example configuration for .mvn/jvm.config file that sets JVM memory and other options for Maven on a per-project basis. This eliminates the need for MAVEN_OPTS environment variable.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/configure.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-Xmx2048m -Xms1024m -XX:MaxPermSize=512m -Djava.awt.headless=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Plugin Plugin for Annotation Processing (XML)\nDESCRIPTION: This XML configuration was previously required to run the descriptor generator on compiled classes and avoid errors when creating plugins using annotation processing. With Maven 3.2.2 and maven-plugin-plugin 3.2+, this configuration is no longer necessary.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.2.2/release-notes.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<pluginManagement>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-plugin-plugin</artifactId>\n      <version>${mavenPluginPluginVersion}</version>\n      <configuration>\n        <skipErrorNoDescriptorsFound>true</skipErrorNoDescriptorsFound>\n      </configuration>\n      <executions>\n        <execution>\n          <id>mojo-descriptor</id>\n          <phase>process-classes</phase>\n          <goals>\n            <goal>descriptor</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</pluginManagement>\n```\n\n----------------------------------------\n\nTITLE: Maven Plugin Version Reference Table in Markdown\nDESCRIPTION: A markdown table listing Maven plugins categorized by type (Core plugins, Packaging types/tools, Reporting plugins) with their final Maven 2.x compatible versions, release dates, and descriptions.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/maven-2.x-eol.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                       Plugin (current docs)                        | Type\\* |                                  Version                                  | Release Date |                                                     Description                                                      |\n|--------------------------------------------------------------------|--------|---------------------------------------------------------------------------|--------------|----------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Configuring Parent POM for Single Source Tree in Maven\nDESCRIPTION: This XML snippet shows the configuration of the parent POM (acme/pom.xml) for a non-standard single source tree Maven project. It defines modules, sets the source directory to the current directory, and configures resource locations.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/apt/guides/suggestions/non-standard-directories.txt#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<project>\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>com.acme</groupId>\n   <artifactId>app</artifactId>\n   <packaging>pom</packaging>\n   <version>1.0-SNAPSHOT</version>\n   <name>Acme Application</name>\n   <modules>\n     <module>util</module>\n     <module>gui</module>\n   </modules>\n   <build>\n     <sourceDirectory>.</sourceDirectory>\n     <resources>\n       <resource>\n         <directory>resources</directory>\n       </resource>\n     </resources>\n   </build>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Maven Directory Structure for Logging Configuration\nDESCRIPTION: Shows the standard Maven distribution directory layout highlighting the location of logging-related files including simplelogger.properties and SLF4J JARs.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/maven-logging.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napache-maven-3.x.y\n├── LICENSE.txt\n├── NOTICE.txt\n├── README.txt\n├── bin\n│   └── ...\n├── boot\n│   └── ...\n├── conf\n│   ├── logging\n│   │   └── simplelogger.properties\n│   └── settings.xml\n└── lib\n    ├── ...\n    ├── slf4j-api-x.y.z.jar\n    ├── slf4j-simple-x.y.z.jar or maven-slf4j-provider-3.x.y.jar\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: License Header Comment in Markdown\nDESCRIPTION: Apache License 2.0 header comment block with additional note about Markdown syntax help.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/4.0.0-alpha-5/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/modules/index.html#Markdown\n-->\n```\n\n----------------------------------------\n\nTITLE: Displaying Maven 3.9.3 Release Notes Header in Markdown\nDESCRIPTION: This snippet shows the main header for the Maven 3.9.3 release notes using Markdown syntax. It includes the title and a brief introduction about the release announcement.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.9.3/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release Notes &#x2013; Maven 3.9.3\n\nThe Apache Maven team would like to announce the release of Maven 3.9.3.\n\nMaven 3.9.3 is [available for download][0].\n\nMaven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting, and documentation from a central place.\n```\n\n----------------------------------------\n\nTITLE: Using CI-Friendly Variables in Maven 4 POM\nDESCRIPTION: This XML snippet shows how to use CI-friendly variables like ${revision} for version in a Maven 4 POM file, which now has full built-in support without requiring additional plugins.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/whatsnewinmaven4.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<groupId>my.groupId</groupId>\n<artifactId>my.artifactId</artifactId>\n<version>${revision}</version>\n```\n\n----------------------------------------\n\nTITLE: Updated Maven Build Output Without Memory Information\nDESCRIPTION: Demonstrates the new Maven 3.5.3 build output format, which no longer includes memory-related information due to the removal of System.gc() call.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.5.3/release-notes.md#2025-04-08_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 6.111 s\n[INFO] Finished at: 2018-02-25T15:34:10+01:00\n[INFO] ------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Maven 4 Multi-Module Project Build Command\nDESCRIPTION: Command to build an aggregator and its children in Maven 4, simplified syntax.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-multiple-subprojects-4.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile -pl subproject-c\n```\n\n----------------------------------------\n\nTITLE: Maven Configuration File Format Change\nDESCRIPTION: Starting with Maven 3.9.1, the .mvn/maven.config file format has been modified so that each line is interpreted as a single argument. Multiple arguments must be placed on separate lines as per MNG-7684.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.9.1/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.mvn/maven.config\n```\n\n----------------------------------------\n\nTITLE: Listing Maven 3.9.3 Notable New Features in Markdown\nDESCRIPTION: This snippet outlines the notable new features in Maven 3.9.3 using Markdown syntax. It includes updates to ASF Maven plugins, changes to plugin validation, and updates to the Resolver component.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.9.3/release-notes.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Notable New Features\n\n* Huge effort of updating ASF Maven plugins is ongoing, and Maven received a ton of lifecycle bound plugin version updates since Maven 3.9.2 (that was\n  released with same plugin versions as Maven 3.9.1 and 3.9.0).\n* Plugin validation did shake up Maven users community, hence, on users request, they are \"toned down\". Validation messages are always collected (as\n  before), but default display mode is again \"inline\" as it was in Maven 3.9.1. Moreover, by default only \"project local\" messages are displayed to\n  user: issues that user can fix by editing the project POM. Plugin non-configuration issues, that can be fixed by corresponding plugin developer only\n  (and requires a release and updating in current project POM) are NOT displayed anymore by default. To enjoy them, one needs explicitly to enable\n  \"verbose\" mode for plugin validation. Furthermore, the precision of warnings and some badly worded messages are fixed.\n* Updated Resolver brings transport and locking related fixes and improvements.\n  Most notably [MNG-7819](https://issues.apache.org/jira/browse/MNG-7819) got fixed that was affecting Maven 3.9.2, but the fix have important implication:\n  due file locking naming scheme changes, Maven 3.9.3 with file locking will not be able to share local repository with another Maven version that\n  predates 3.9.3 (Hence, versions 3.9.0, 3.9.1 or 3.9.2), only with another 3.9.3 or newer version.\n  See [Resolver configuration](https://maven.apache.org/resolver/configuration.html) and [named locks](https://maven.apache.org/resolver/maven-resolver-named-locks/)\n  pages for more.\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Head with Title for Maven Tools Page\nDESCRIPTION: This HTML snippet defines the head section of the webpage, setting the title for the Maven Tools documentation.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/tools/index.md#2025-04-08_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n   <title>Maven Tools</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Maven Prerequisites Warning Output Example\nDESCRIPTION: Example console output showing the warning message displayed when prerequisites tag is used in non-maven-plugin projects. This warns users to use maven-enforcer-plugin instead.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.5.0-alpha-1/release-notes.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[INFO] Scanning for projects...\n[WARNING] The project org.apache.maven:maven:pom:3.5.0-SNAPSHOT uses prerequisites which is only intended for maven-plugin projects but not for non maven-plugin projects. For such purposes you should use the maven-enforcer-plugin. See https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Plexus Compiler API\nDESCRIPTION: This XML snippet shows the dependency configuration needed to use the Plexus Compiler API in a Maven plugin. This dependency is required for using the StaleSourceScanner functionality in custom Maven plugins.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>org.codehaus.plexus</groupId>\n    <artifactId>plexus-compiler-api</artifactId>\n    <version>1.5.1</version>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Displaying Module Details in Maven Build Output\nDESCRIPTION: Demonstrates how Maven 3.5.3 shows detailed information about each module being built, including groupId, artifactId, and packaging type.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.5.3/release-notes.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[INFO] ------------------< com.soebes.examples.j2ee:parent >-------------------\n[INFO] Building parent 5.0.1-SNAPSHOT                                     [1/9]\n[INFO] --------------------------------[ pom ]---------------------------------\n[INFO]\n```\n\n----------------------------------------\n\nTITLE: Apache License Header Comment\nDESCRIPTION: Standard Apache 2.0 License header comment block used at the beginning of the file to specify licensing terms.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/about.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n-->\n```\n\n----------------------------------------\n\nTITLE: Displaying Maven Reactor Build Summary with Single Version\nDESCRIPTION: Example output showing the improved reactor build summary format for modules sharing the same version number. The summary includes build status and execution time for each module.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.6.0/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for parent 5.0.4-SNAPSHOT:\n[INFO]\n[INFO] parent ............................................. SUCCESS [  1.559 s]\n[INFO] domain ............................................. SUCCESS [  1.238 s]\n[INFO] service-client ..................................... SUCCESS [  0.108 s]\n[INFO] webgui ............................................. SUCCESS [  0.652 s]\n[INFO] service ............................................ SUCCESS [  0.379 s]\n[INFO] app ................................................ SUCCESS [  0.304 s]\n[INFO] appasm ............................................. SUCCESS [  0.265 s]\n[INFO] shade .............................................. SUCCESS [  0.440 s]\n[INFO] assembly ........................................... SUCCESS [  1.531 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  6.824 s\n[INFO] Finished at: 2018-11-01T12:20:16+01:00\n[INFO] ------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Maven 4 Specific Goal with Dependencies\nDESCRIPTION: Command to run specific goal on subproject with dependencies in Maven 4.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-multiple-subprojects-4.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile && mvn jetty:run -f subproject-c/subproject-c-2\n```\n\n----------------------------------------\n\nTITLE: Displaying Maven 3.9.3 Known Issues in Markdown\nDESCRIPTION: This snippet shows the known issues section for Maven 3.9.3 using Markdown syntax. It mentions a specific issue related to plugin validation.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.9.3/release-notes.md#2025-04-08_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## Known Issues\n\n* [MNG-7826](https://issues.apache.org/jira/browse/MNG-7826) Discovered late in release process, plugin validation will now miss some plugins (like jacoco is for example, that have transitive dependencies, that should flag plugin).\n```\n\n----------------------------------------\n\nTITLE: XML License Header in Maven Documentation\nDESCRIPTION: Standard Apache Software Foundation (ASF) license header for Maven documentation files, which specifies terms under the Apache License 2.0 and includes a note about Markdown syntax help.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/4.0.0-rc-2/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/modules/index.html#Markdown\n-->\n```\n\n----------------------------------------\n\nTITLE: XML Structure Path for G Level Metadata\nDESCRIPTION: XML path specification for Group level metadata used for Maven plugin prefix mapping\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/metadata.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nmetadata/plugins/plugin[]\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Version Properties for Flexible Versioning\nDESCRIPTION: Example showing how to combine multiple CI-friendly version properties (revision, sha1, changelist) to create a flexible versioning scheme.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-maven-ci-friendly.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}${sha1}${changelist}</version>\n  ...\n  <properties>\n    <revision>1.3.1</revision>\n    <changelist>-SNAPSHOT</changelist>\n    <sha1/>\n  </properties>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Version Properties for Flexible Versioning\nDESCRIPTION: Example showing how to combine multiple CI-friendly version properties (revision, sha1, changelist) to create a flexible versioning scheme.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-maven-ci-friendly.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}${sha1}${changelist}</version>\n  ...\n  <properties>\n    <revision>1.3.1</revision>\n    <changelist>-SNAPSHOT</changelist>\n    <sha1/>\n  </properties>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Maven Server Authentication Configuration\nDESCRIPTION: Shows how to configure server authentication details including username, password, and SSH private key settings for repository access.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/settings.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  ...\n  <servers>\n    <server>\n      <id>server001</id>\n      <username>my_login</username>\n      <password>my_password</password>\n      <privateKey>${user.home}/.ssh/id_dsa</privateKey>\n      <passphrase>some_passphrase</passphrase>\n      <filePermissions>664</filePermissions>\n      <directoryPermissions>775</directoryPermissions>\n      <configuration></configuration>\n    </server>\n  </servers>\n  ...\n</settings>\n```\n\n----------------------------------------\n\nTITLE: HTML Image Map for Maven Repository Visualization\nDESCRIPTION: An HTML-based image map that provides a visual representation of Maven's repository ecosystem with clickable areas linking to different repository-related documentation pages.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n<img src=\"../repository/maven-repositories.png\" border=\"0\" usemap=\"#map\" />\n\n<map name=\"map\">\n<area shape=\"rect\" coords=\"596,326,666,363\" alt=\"JBoss\"                         href=\"http://repository.jboss.org/maven2/\" />\n<area shape=\"rect\" coords=\"0,184,460,421\"   alt=\"central (default)\"             href=\"../repository/index.html\" />\n<area shape=\"rect\" coords=\"187,593,277,629\" alt=\"Maven\"                         href=\"/what-is-maven.html\" />\n<area shape=\"rect\" coords=\"280,628,403,649\" alt=\"local repository\"              href=\"/guides/mini/guide-configuring-maven.html\" />\n<area shape=\"rect\" coords=\"364,498,570,534\" alt=\"Repository Manager\"            href=\"/repository-management.html\" />\n<area shape=\"rect\" coords=\"303,545,451,584\" alt=\"settings.xml &lt;mirrorOf&gt;\" href=\"/guides/mini/guide-mirror-settings.html\" />\n<area shape=\"rect\" coords=\"407,589,628,653\" alt=\"pom.xml &lt;repository&gt;\"    href=\"/guides/mini/guide-multiple-repositories.html\" />\n</map>\n\n</p>\n```\n\n----------------------------------------\n\nTITLE: Apache License Header Comment Block\nDESCRIPTION: Standard Apache License 2.0 header comment block used in Maven documentation files, including reference to additional documentation syntax help.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.5.0-alpha-1/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- \nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/references/apt-format.html\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repositories and Plugin Repositories\nDESCRIPTION: Demonstrates configuration of custom Maven repositories and plugin repositories within profiles, including release/snapshot policies, update frequency, and checksum validation settings.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/settings.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  ...\n  <profiles>\n    <profile>\n      ...\n      <repositories>\n        <repository>\n          <id>codehausSnapshots</id>\n          <name>Codehaus Snapshots</name>\n          <releases>\n            <enabled>false</enabled>\n            <updatePolicy>always</updatePolicy>\n            <checksumPolicy>warn</checksumPolicy>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n            <updatePolicy>never</updatePolicy>\n            <checksumPolicy>fail</checksumPolicy>\n          </snapshots>\n          <url>http://snapshots.maven.codehaus.org/maven2</url>\n          <layout>default</layout>\n        </repository>\n      </repositories>\n      <pluginRepositories>\n        <pluginRepository>\n          <id>myPluginRepo</id>\n          <name>My Plugins repo</name>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>false</enabled>\n          </snapshots>\n          <url>https://maven-central-eu....com/maven2/</url>\n        </pluginRepository>\n      </pluginRepositories>\n      ...\n    </profile>\n  </profiles>\n  ...\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Maven License Header Comment\nDESCRIPTION: Apache License 2.0 header comment block for Maven documentation file. Includes license terms and reference to APT format documentation.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.5.2/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!-- \nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/references/apt-format.html\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Parent POM Reference with Relative Path\nDESCRIPTION: This snippet demonstrates how to specify a relative path to a parent POM in a multi-module Maven project, making it easier to use local modifications without installing the parent.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<parent>\n  <!--...-->\n  <artifactId>A</artifactId>\n  <relativePath>../../pom.xml</relativePath>\n</parent>\n```\n\n----------------------------------------\n\nTITLE: Apache License Header Comment in Markdown\nDESCRIPTION: Standard Apache License 2.0 header comment block with additional note about Markdown syntax help.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/4.0.0-alpha-10/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/modules/index.html#Markdown\n-->\n```\n\n----------------------------------------\n\nTITLE: Maven Code Quality Tools List in Markdown\nDESCRIPTION: Markdown formatted list of code quality management platforms and tools commonly used with Maven, including continuous integration servers and code analysis platforms.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/code-quality-management.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Code Quality Management\n\n- [Hudson](https://hudson-ci.org)\n- [Jenkins](https://jenkins-ci.org)\n- [SonarQube](http://www.sonarqube.org/)\n- [Squale](http://www.squale.org/)\n- [XRadar](http://xradar.sourceforge.net)\n```\n\n----------------------------------------\n\nTITLE: Maven 3 Specific Goal with Dependencies\nDESCRIPTION: Command to run specific goal on subproject with dependencies in Maven 3.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-multiple-subprojects-4.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn install && mvn jetty:run -f subproject-c/subproject-c-2\n```\n\n----------------------------------------\n\nTITLE: Maven License Header in XML Comment\nDESCRIPTION: Apache License 2.0 header comment included at the top of the Maven release notes document, providing licensing information and terms of use for the content.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.6.2/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- \nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/references/apt-format.html\n-->\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Maven Dependency with Scope\nDESCRIPTION: This XML snippet demonstrates how to declare a dependency on Google Guava in the test scope. It specifies the groupId, artifactId, version, and scope elements that uniquely identify the artifact and determine where it will be available in the project.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/dependencies.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.google.guava</groupId>\n  <artifactId>guava</artifactId>\n  <version>33.4.0-jre</version>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring SVN Auto-Properties for Maven Site\nDESCRIPTION: Defines Subversion auto-properties for various file types, setting end-of-line style and keyword substitution. Handles special cases for binary files like images and documents with appropriate MIME types.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/resources/developers/svn-eol-style.txt#2025-04-08_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n[miscellany]\nenable-auto-props = yes\n\n[auto-props]\nINSTALL = svn:eol-style=native;svn:keywords=Author Date Id Revision\nKEYS = svn:eol-style=native;svn:keywords=Author Date Id Revision\nMakefile = svn:eol-style=native;svn:keywords=Author Date Id Revision\nREADME = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.aart = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.ac = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.aj = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.am = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.apt = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.bat = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.bsh = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.c = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.cat = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.cgi = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.classpath = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.cmd = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.cpp = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.css = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.cs = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.cwiki = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.data = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.dcl = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.doc = svn:mime-type=application/msword\n*.dsp = svn:eol-style=CRLF\n*.dsw = svn:eol-style=CRLF\n*.dtd = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.egrm = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.ent = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.ft = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.fml = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.fn = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.fv = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.grm = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.g = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.groovy = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.h = svn:eol-style=native;svn:keywords=Author Date Id Revision\n.htaccess = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.html = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.ico = svn:mime-type=image/x-icon\n*.ihtml = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.in = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.java = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.jpg = svn:mime-type=image/jpeg\n*.jsp = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.js = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.junit = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.m4 = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.mdo = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.mod = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.pdf = svn:mime-type=application/pdf\n*.pen = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.pl = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.png = svn:mime-type=image/png\n*.pod = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.pom = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.project = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.properties = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.py = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.rb = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.rdf = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.resx = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.rnc = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.rng = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.rnx = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.rss = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.sh = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.svg = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.tld = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.txt = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.types = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.vm = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xcat = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xconf = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xdoc = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xegrm = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xgrm = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xlex = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xmap = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xml = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xsd = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xsl = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xslt = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xsp = svn:eol-style=native;svn:keywords=Author Date Id Revision\n*.xul = svn:eol-style=native;svn:keywords=Author Date Id Revision\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom web.xml Location in Maven WAR Plugin\nDESCRIPTION: This snippet demonstrates how to configure the Maven WAR plugin to use a web.xml file from a custom location, useful when using non-standard directory layouts for web applications.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n  <!--...-->\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-war-plugin</artifactId>\n      <configuration>\n        <webXml><!-- path-to-your-webxml --></webXml>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Maven Repository Checkout Commands\nDESCRIPTION: Bash commands for initializing and syncing the Maven source code repository using Google's repo tool\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/scm.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrepo init -u https://github.com/apache/maven-sources.git\nrepo sync\nrepo start master --all\n```\n\n----------------------------------------\n\nTITLE: XML Settings Example - Maven settings.xml\nDESCRIPTION: Demonstrates proxy port interpolation support in Maven settings.xml configuration\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/4.0.0-alpha-8/release-notes.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n  <!-- Proxy port interpolation support -->\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Maven Distribution Directory Structure\nDESCRIPTION: Shows the expected directory structure for Maven release files including binaries and source files with their corresponding signature and checksum files.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/developers/release/maven-core-release.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://dist.apache.org/repos/dist/dev/maven/maven-3/\n  `-- $VERSION/\n      |-- binaries/\n      |   |-- apache-maven-$VERSION-bin.tar.gz\n      |   |-- apache-maven-$VERSION-bin.tar.gz.asc\n      |   |-- apache-maven-$VERSION-bin.tar.gz.sha512\n      |   |-- apache-maven-$VERSION-bin.zip\n      |   |-- apache-maven-$VERSION-bin.zip.asc\n      |   `-- apache-maven-$VERSION-bin.zip.sha512\n      `-- source/ (notice: singular...)\n          |-- apache-maven-$VERSION-src.tar.gz\n          |-- apache-maven-$VERSION-src.tar.gz.asc\n          |-- apache-maven-$VERSION-src.tar.gz.sha512\n          |-- apache-maven-$VERSION-src.zip\n          |-- apache-maven-$VERSION-src.zip.asc\n          `-- apache-maven-$VERSION-src.zip.sha512\n```\n\n----------------------------------------\n\nTITLE: Invoking Specific Plugin Execution Configuration from Command Line\nDESCRIPTION: Example showing how to invoke a specific execution configuration for a Maven plugin from the command line. The syntax uses the '@' symbol followed by the execution ID to select a specific configuration.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.3.1/release-notes.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn exec:java@second-cli\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Maven Tools\nDESCRIPTION: This Markdown snippet creates a table listing Maven tools, their descriptions, and links. It includes information about the Maven Daemon project.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/tools/index.md#2025-04-08_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name         | Description                                                                                       | Link        |\n|:-------------|:--------------------------------------------------------------------------------------------------|:------------|\n| Maven Daemon | This project aims at providing faster Maven builds using techniques known from Gradle and Takari. | [Github][1] |\n\n[1]: https://github.com/apache/maven-mvnd\n```\n\n----------------------------------------\n\nTITLE: Maven Group ID Subgroup Examples\nDESCRIPTION: Demonstration of groupId subgroup structure for organizing related projects within a parent group.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/mini/guide-naming-conventions.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n// Parent project group\norg.apache.maven\n\n// Subgroups\norg.apache.maven.plugins\norg.apache.maven.reporting\n```\n\n----------------------------------------\n\nTITLE: Markdown Blockquote - Framework Development Philosophy\nDESCRIPTION: A quoted passage from Ralph Johnson and Don Roberts discussing the importance of concrete examples in framework development and abstraction\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/background/history-of-maven.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> People develop abstractions by generalizing from concrete examples. Every attempt to determine the correct abstraction\\non paper without actually developing a running system is doomed to failure. No one is that smart. A framework is a\\nreusable design, so you develop it by looking at the things it is supposed to be a design of. The more examples\\nyou look at, the more general your framework will be.\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Head for Maven Resources Page\nDESCRIPTION: This HTML snippet defines the head section of the webpage, including the title and author metadata for a page about external resources on Maven.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/articles.md#2025-04-08_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n   <title>External Resources on Maven</title>\n   <meta name=\"author\" content=\"Brett Porter\" />\n   <meta name=\"author\" content=\"Vincent Massol\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Maven Skin Components\nDESCRIPTION: A markdown formatted table listing Maven skin components with their repository locations, GitHub mirrors, and issue tracking links\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/scm.md#2025-04-08_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Content                                                 | Repository                                                                                                                 |                         Mirror                          |                               Issues                                |\n|:--------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------|:-------------------------------------------------------:|:-------------------------------------------------------------------:|\n| [Apache Maven Default Skin](/skins/maven-default-skin/) | [`https://gitbox.apache.org/repos/asf/maven-default-skin.git`](https://gitbox.apache.org/repos/asf/maven-default-skin.git) | [GitHub](https://github.com/apache/maven-default-skin/) |    [JIRA MSKINS](https://issues.apache.org/jira/projects/MSKINS)    |\n```\n\n----------------------------------------\n\nTITLE: Displaying Plugin Validation Warnings in Maven\nDESCRIPTION: Example of a warning message displayed when Maven detects plugin validation issues during build execution.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/plugins/validation/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[WARNING] Plugin validation issues were detected in x plugin(s)\n```\n\n----------------------------------------\n\nTITLE: Listing Maven 3.9.3 Potentially Breaking Core Changes in Markdown\nDESCRIPTION: This snippet details the potentially breaking core changes in Maven 3.9.3 when migrating from 3.8.x versions. It covers changes in transport, dependency injection, configuration file handling, and system properties.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.9.3/release-notes.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Potentially Breaking Core Changes (if migrating from 3.8.x)\n\n* The Maven Resolver transport has changed from Wagon to \"native HTTP\", see [Resolver Transport guide](/guides/mini/guide-resolver-transport.html).\n* Maven 2.x was auto-injecting an ancient version of `plexus-utils` dependency into the plugin classpath, and Maven 3.x continued doing this to preserve backward compatibility. Starting with Maven 3.9, it does not happen anymore. This change may lead to plugin breakage. The fix for affected plugin maintainers is to explicitly declare a dependency on `plexus-utils`. The workaround for affected plugin users is to add this dependency to plugin dependencies until issue is fixed by the affected plugin maintainer. See [MNG-6965](https://issues.apache.org/jira/browse/MNG-6965).\n* Mojos are prevented to bootstrap new instance of `RepositorySystem` (for example by using deprecated `ServiceLocator`), they should reuse `RepositorySystem` instance provided by Maven instead. See [MNG-7471](https://issues.apache.org/jira/browse/MNG-7471).\n* Each line in `.mvn/maven.config` is now interpreted as a single argument. That is, if the file contains multiple arguments, these must now be placed on separate lines, see [MNG-7684](https://issues.apache.org/jira/browse/MNG-7684).\n* System and user properties handling cleanup, see [MNG-7556](https://issues.apache.org/jira/browse/MNG-7556). As a consequence, this may introduce breakage in environments where the user properties were used to set system properties or other way around, for example see [MNG-7887](https://issues.apache.org/jira/projects/MNG/issues/MNG-7887).\n* Plugins and extensions used by your build are checked against Maven supported APIs and conventions: this \"plugin validation\" may report WARNINGs at the end of your build. See [plugin validation documentation](../../guides/plugins/validation/) to better understand what to do when your build suffers from such warnings.\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven POM for JSR-330 Plugin\nDESCRIPTION: This XML snippet shows how to set up a Maven POM file for a plugin using JSR-330. It includes dependencies for javax.inject, maven-plugin-api, and maven-plugin-annotations. It also configures the sisu-maven-plugin to create the JSR-330 component index.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/maven-jsr330.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-jsr330-plugin</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <packaging>maven-plugin</packaging>\n\n  <name>maven-jsr330-plugin Maven Plugin</name>\n  <description>As sample Maven Plugin that uses JSR-330 components</description>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <mavenVersion>3.0.4</mavenVersion>\n    <mavenPluginPluginVersion>3.2</mavenPluginPluginVersion>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>javax.inject</groupId>\n      <artifactId>javax.inject</artifactId>\n      <version>1</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.maven</groupId>\n      <artifactId>maven-plugin-api</artifactId>\n      <version>${mavenVersion}</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.maven.plugin-tools</groupId>\n      <artifactId>maven-plugin-annotations</artifactId>\n      <version>${mavenPluginPluginVersion}</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-plugin-plugin</artifactId>\n        <version>${mavenPluginPluginVersion}</version>\n        <configuration>\n          <skipErrorNoDescriptorsFound>true</skipErrorNoDescriptorsFound>\n        </configuration>\n        <executions>\n          <execution>\n            <id>mojo-descriptor</id>\n            <goals>\n              <goal>descriptor</goal>\n            </goals>\n          </execution>\n          <execution>\n            <id>help-goal</id>\n            <goals>\n              <goal>helpmojo</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.eclipse.sisu</groupId>\n        <artifactId>sisu-maven-plugin</artifactId>\n        <version>0.3.5</version>\n        <executions>\n          <execution>\n            <id>generate-index</id>\n            <goals>\n              <goal>main-index</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n----------------------------------------\n\nTITLE: HTML Head Section for Maven Central Repository Documentation\nDESCRIPTION: The HTML head section of the Maven Central Repository documentation page, containing the page title and author metadata.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repository/index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n   <title>Maven Central Repository</title>\n   <meta name=\"author\" content=\"Brett Porter\" />\n   <meta name=\"author\" content=\"Hervé Boutemy\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Command Line Executions for a Maven Plugin\nDESCRIPTION: XML configuration showing how to define multiple execution configurations for a Maven plugin that can be invoked from the command line. This example defines two different configurations with distinct mainClass values.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.3.1/release-notes.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<project...>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>exec-maven-plugin</artifactId>\n        <version>1.3.2</version>\n        <executions>\n          <execution>\n            <id>default-cli</id>\n            <configuration>\n              <mainClass>com.soebes.test.First</mainClass>\n            </configuration>\n          </execution>\n          <execution>\n            <id>second-cli</id>\n            <configuration>\n              <mainClass>com.soebes.test.Second</mainClass>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Priority Label Examples in Markdown\nDESCRIPTION: Example priority labels used for GitHub Issues equivalent to Jira Priority levels.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/developers/conventions/github.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `priority:trivial`\n- `priority:minor`\n- `priority:major`\n- `priority:critical`\n- `priority:blocker`\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message for Blocked HTTP Repository in Maven\nDESCRIPTION: This snippet shows an example error message that Maven 3.8.1 displays when it encounters a blocked HTTP repository. It includes details about the dependency that failed to resolve and the blocked repository.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.8.1/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[ERROR] Failed to execute goal on project test: Could not resolve dependencies for project xxx: Failed to collect dependencies at my.test:dependency:version -> my.test.transitive:transitive:version: Failed to read artifact descriptor for my.test.transitive:transitive:jar:version: Could not transfer artifact my.test.transitive:transitive:pom:version from/to maven-default-http-blocker (http://0.0.0.0/): Blocked mirror for repositories: [blocked-repository-id (http://blocked.repository.org, default, releases+snapshots)]\n```\n\n----------------------------------------\n\nTITLE: Creating Image Gallery for Maven Action Cards using HTML\nDESCRIPTION: This HTML snippet creates a responsive grid layout for displaying Maven action card images. It uses Bootstrap classes for styling and alignment. Each image is wrapped in an anchor tag for potential enlargement functionality.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/resource/branding/actioncards.md#2025-04-08_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ul class=\"thumbnails\">\n<li class=\"span12\"></li> <!--  hack to align grid -->\n\n<li class=\"span3\">\n<a href=\"/images/branding/i_am_a_proud_maven_user_1.png\"><img src=\"/images/branding/i_am_a_proud_maven_user_1.png\" class=\"thumbnail\" alt=\"\" /></a>\n</li>\n<li class=\"span3\">\n<a href=\"/images/branding/im_a_grateful_maven_user_1.png\"><img src=\"/images/branding/im_a_grateful_maven_user_1.png\" class=\"thumbnail\" alt=\"\" /></a>\n</li>\n<li class=\"span3\">\n<a href=\"/images/branding/im_a_happy_maven_user_1.png\"><img src=\"/images/branding/im_a_happy_maven_user_1.png\" class=\"thumbnail\" alt=\"\" /></a>\n</li>\n\n<li class=\"span3\">\n<a href=\"/images/branding/i_sumbitted_my_first_maven_pull_request_1.png\"><img src=\"/images/branding/i_sumbitted_my_first_maven_pull_request_1.png\" class=\"thumbnail\" alt=\"\" /></a>\n</li>\n<li class=\"span3\">\n<a href=\"/images/branding/my_first_maven_pr_was_merged_1.png\"><img src=\"/images/branding/my_first_maven_pr_was_merged_1.png\" class=\"thumbnail\" alt=\"\" /></a>\n</li>\n<li class=\"span3\">\n<a href=\"/images/branding/i_am_a_maven_contributor_1.png\"><img src=\"/images/branding/i_am_a_maven_contributor_1.png\" class=\"thumbnail\" alt=\"\" /></a>\n</li>\n\n<li class=\"span3\">\n<a href=\"/images/branding/i_am_a_maven_content_contributor_1.png\"><img src=\"/images/branding/i_am_a_maven_content_contributor_1.png\" class=\"thumbnail\" alt=\"\" /></a>\n</li>\n<li class=\"span3\">\n<a href=\"/images/branding/i_maintain_maven_plugins_1.png\"><img src=\"/images/branding/i_maintain_maven_plugins_1.png\" class=\"thumbnail\" alt=\"\" /></a>\n</li>\n<li class=\"span3\">\n<a href=\"/images/branding/i_am_a_maven_committer_1.png\"><img src=\"/images/branding/i_am_a_maven_committer_1.png\" class=\"thumbnail\" alt=\"\" /></a>\n</li>\n\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Displaying Reactor Summary with Versions in Maven Build Output\nDESCRIPTION: Shows how Maven 3.5.3 includes version information in the reactor summary at the end of the build process.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.5.3/release-notes.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO]\n[INFO] parent 5.0.1-SNAPSHOT .............................. SUCCESS [  0.238 s]\n[INFO] domain ............................................. SUCCESS [  0.014 s]\n[INFO] service-client ..................................... SUCCESS [  0.008 s]\n[INFO] webgui ............................................. SUCCESS [  0.010 s]\n[INFO] service ............................................ SUCCESS [  0.007 s]\n[INFO] app ................................................ SUCCESS [  0.005 s]\n[INFO] appasm ............................................. SUCCESS [  0.005 s]\n[INFO] shade .............................................. SUCCESS [  0.006 s]\n[INFO] assembly 5.0.1-SNAPSHOT ............................ SUCCESS [  0.005 s]\n[INFO] ------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Image Map Definition for Maven Central Repository Diagram\nDESCRIPTION: HTML image map defining clickable regions on the Maven Central Repository diagram, linking to various related resources and documentation.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repository/index.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<map name=\"map\">\n<area shape=\"rect\" coords=\"0,0,189,128\"     alt=\"standalone public artifact repositories\" href=\"/guides/introduction/introduction-to-repositories.html\" />\n<area shape=\"rect\" coords=\"264,76,354,111\"  alt=\"Apache\"   href=\"https://repository.apache.org/content/groups/public/\" />\n<area shape=\"rect\" coords=\"378,76,468,111\"  alt=\"OSSRH\"    href=\"https://central.sonatype.org/pages/ossrh-guide.html\" />\n<area shape=\"rect\" coords=\"490,75,520,111\"  alt=\"Producers\" href=\"https://central.sonatype.org/pages/producers.html\" />\n<area shape=\"rect\" coords=\"329,274,426,312\" alt=\"central index\" href=\"./central-index.html\" />\n<area shape=\"rect\" coords=\"39,274,205,314\"  alt=\"archetype\" href=\"/archetype/archetype-models/archetype-catalog/archetype-catalog.html\" />\n<area shape=\"rect\" coords=\"65,348,205,383\"  alt=\"repo\"     href=\"https://repo.maven.apache.org/maven2/\" />\n<area shape=\"rect\" coords=\"292,356,365,391\" alt=\"ibiblio\"  href=\"http://mirrors.ibiblio.org/pub/mirrors/maven2/\" />\n<area shape=\"rect\" coords=\"373,356,447,391\" alt=\"Google\"   href=\"https://storage-download.googleapis.com/maven-central/index.html\" />\n<area shape=\"rect\" coords=\"100,126,424,239\" alt=\"Central Upload\"                href=\"./guide-central-repository-upload.html\" />\n</map>\n```\n\n----------------------------------------\n\nTITLE: HTML Head Section\nDESCRIPTION: HTML head section containing metadata and title for the source repository page\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/scm.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n<meta name=\"author\" content=\"Benjamin Bentmann\" />\n<title>Source Repository</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Compiler Plugin to Exclude Classes (XML)\nDESCRIPTION: This snippet shows how to configure the maven-compiler-plugin to exclude specific Java files from compilation using the 'excludes' parameter. It demonstrates excluding files matching the pattern '**/NotNeeded*.java'.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_41\n\nLANGUAGE: XML\nCODE:\n```\n<project>\n  <!-- ... -->\n  <build>\n    <!-- ... -->\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <excludes>\n            <exclude>**/NotNeeded*.java</exclude>\n          </excludes>\n        </configuration>\n      </plugin>\n    </plugins>\n    <!-- ... -->\n  </build>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Apache License Comment Block in HTML\nDESCRIPTION: Standard Apache License 2.0 comment block used to specify the licensing terms for the privacy policy document.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/privacy-policy.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n-->\n```\n\n----------------------------------------\n\nTITLE: Maven Plugin POM Packaging Configuration\nDESCRIPTION: XML snippet showing how to configure a Maven project as a plugin in the POM file. The packaging element must be set to 'maven-plugin' to identify the project as a Maven plugin.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/developers/mojo-api-specification.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<packaging>maven-plugin</packaging>\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Inheritance in Maven POM\nDESCRIPTION: Example of Maven 3.6.1's new URL inheritance control features, allowing customization of how URLs in project, scm, and distributionManagement are inherited by child modules.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.6.1/release-notes.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<project child.project.url.inherit.append.path=\"false\">\n  <url>...</url>\n\n  <scm child.scm.connection.inherit.append.path=\"false\"\n       child.scm.developerConnection.inherit.append.path=\"false\"\n       child.scm.url.inherit.append.path=\"false\">\n    <connection>...</connection>\n    <developerConnection>...</developerConnection>\n    <url>...</url>\n  </scm>\n\n  <distributionManagement>\n    <site child.site.url.inherit.append.path=\"false\">\n      <url>...</url>\n    </site>\n  </distributionManagement>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Compiler Plugin for Specific JDK Version\nDESCRIPTION: This XML snippet shows how to configure the Maven Compiler Plugin to use a specific version of the JDK. It sets verbose output, enables forking, specifies the path to javac, and sets the compiler version.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/faq-unoffical.md#2025-04-08_snippet_50\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-compiler-plugin</artifactId>\n  <configuration>\n    <verbose>true</verbose>\n    <fork>true</fork>\n    <executable><!-- path-to-javac --></executable>\n    <compilerVersion>1.3</compilerVersion>\n  </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Compiler Plugin for Java Version\nDESCRIPTION: This XML snippet shows how to explicitly configure the Maven Compiler Plugin to use specific Java source and target versions. It sets both to Java 7 and specifies the plugin version.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/general.md#2025-04-08_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<project>\n  <!-- ... -->\n  <build>\n    <!-- ... -->\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.3</version>\n        <configuration>\n          <source>1.7</source>\n          <target>1.7</target>\n        </configuration>\n      </plugin>\n    </plugins>\n    <!-- ... -->\n  </build>\n  <!-- ... -->\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Arguments in .mvn/maven.config\nDESCRIPTION: Each line in the .mvn/maven.config file is now interpreted as a single argument. Multiple arguments must be placed on separate lines.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.9.6/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.mvn/maven.config\n```\n\n----------------------------------------\n\nTITLE: Apache License Header Comment in Markdown\nDESCRIPTION: Standard Apache License 2.0 header comment included at the beginning of the documentation file to specify licensing terms.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/developers/conventions/jira.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n-->\n```\n\n----------------------------------------\n\nTITLE: Maven Configuration File Example\nDESCRIPTION: Example showing how arguments must be placed on separate lines in .mvn/maven.config file according to MNG-7684 change.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.9.5/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.mvn/maven.config\n--argument1\n--argument2\n--argument3\n```\n\n----------------------------------------\n\nTITLE: Maven Artifact Path Template with Classifier\nDESCRIPTION: Template showing how Maven constructs artifact paths when a classifier is present\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/layout.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n${groupId as directory}/${artifactId}/${baseVersion}/${artifactId}-${version}-${classifier}.${extension}\n```\n\n----------------------------------------\n\nTITLE: Running Maven Site Locally\nDESCRIPTION: This command runs the Maven site locally, allowing developers to view the website on localhost:8080. It uses the Maven Site plugin to serve the content.\nSOURCE: https://github.com/apache/maven-site/blob/master/README.md#2025-04-08_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ mvn site:run\n```\n\n----------------------------------------\n\nTITLE: Setting Maven Plugin Validation Verbosity Level\nDESCRIPTION: Example command showing how to set the verbosity level for Maven plugin validation using the maven.plugin.validation property with one of the available options (NONE, INLINE, BRIEF, SUMMARY, or VERBOSE).\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/guides/plugins/validation/index.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn -Dmaven.plugin.validation=verbose ...\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Maven Shared Components\nDESCRIPTION: A markdown formatted table listing Maven shared components with their repository locations, GitHub mirrors, and issue tracking links\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/scm.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Content                                                                       | Repository                                                                                                                                       |                               Mirror                               |                                  Issues                                  |\n|:------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------:|:------------------------------------------------------------------------:|\n| [Apache Maven Archiver](/shared/maven-archiver/)                              | [`https://gitbox.apache.org/repos/asf/maven-archiver.git`](https://gitbox.apache.org/repos/asf/maven-archiver.git)                               |        [GitHub](https://github.com/apache/maven-archiver/)         |     [JIRA MSHARED](https://issues.apache.org/jira/projects/MSHARED)      |\n```\n\n----------------------------------------\n\nTITLE: Defining Core Extensions in Maven 3.3.1\nDESCRIPTION: Example of the new .mvn/extensions.xml file format for specifying Maven core extensions. This allows easier integration of extensions without modifying the Maven installation.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.3.1/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions xmlns=\"http://maven.apache.org/EXTENSIONS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/EXTENSIONS/1.0.0 http://maven.apache.org/xsd/core-extensions-1.0.0.xsd\">\n  <extension>\n    <groupId/>\n    <artifactId/>\n    <version/>\n  </extension>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Version Range Support in Parent Elements (XML)\nDESCRIPTION: This XML snippet shows how to use version ranges in parent elements, a new feature in Maven 3.2.2. It allows for more flexible version specification in project inheritance.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.2.2/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>[3.0,4.0)</version>\n  </parent>\n  <groupId>org.apache.maven.its.mng2199</groupId>\n  <artifactId>valid</artifactId>\n  <version>1</version>\n  <packaging>pom</packaging>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Alpha Release Warning Alert\nDESCRIPTION: HTML alert div containing warning messages about the alpha release status and importance of reviewing known issues before use.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.5.0-alpha-1/release-notes.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"alert alert-error\" role=\"alert\">\n<p><b>NOTE:</b></p>\n<p>This is an <i>ALPHA</i> release. There is the potential that features may be added/removed between this release and the first GA release in the 3.5.x release line.</p>\n<p><i>Please consult the Known Issues section below before use</i></p> \n</div>\n```\n\n----------------------------------------\n\nTITLE: Maven Config File Format Change\nDESCRIPTION: Example illustrating the new format requirement for .mvn/maven.config file where each argument must be on a separate line, as referenced in MNG-7684.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.9.7/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.mvn/maven.config\n```\n\n----------------------------------------\n\nTITLE: Maven Build Extension Coordinate Mapping\nDESCRIPTION: Shows how Maven maps extension POM elements to artifact coordinates. Details the XML paths and resulting coordinate values for build extensions including groupId, artifactId, version, classifier, and extension.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/repositories/artifacts.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\nproject/build/extensions/extension/groupId    -> group ID\nproject/build/extensions/extension/artifactId -> artifact ID\nproject/build/extensions/extension/version    -> version string\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Macro\nDESCRIPTION: Macro command to generate a table of contents from level 2 headings in the document.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/about.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--MACRO{toc|fromDepth=2}-->\n```\n\n----------------------------------------\n\nTITLE: Apache License Header Comment in Markdown\nDESCRIPTION: XML-style comment block containing the Apache License 2.0 header and documentation syntax reference note for the markdown file.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/4.0.0-alpha-9/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/modules/index.html#Markdown\n-->\n```\n\n----------------------------------------\n\nTITLE: License Header Comment Block - Maven Release Notes\nDESCRIPTION: Apache License 2.0 header comment block for the Maven release notes document\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/docs/3.3.9/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\nNOTE: For help with the syntax of this file, see:\nhttp://maven.apache.org/doxia/references/apt-format.html\n-->\n```\n\n----------------------------------------\n\nTITLE: Maven Page Header Configuration\nDESCRIPTION: HTML head configuration for Maven documentation page specifying title and author metadata.\nSOURCE: https://github.com/apache/maven-site/blob/master/content/markdown/whatsnewinmaven4.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<head>\n   <title>What's new in Maven 4?</title>\n   <meta name=\"author\" content=\"Matthias Bünger\" />\n</head>\n```"
  }
]