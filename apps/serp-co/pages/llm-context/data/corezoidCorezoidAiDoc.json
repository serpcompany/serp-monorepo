[
  {
    "owner": "corezoid",
    "repo": "corezoid-ai-doc",
    "content": "TITLE: Process JSON Schema Structure\nDESCRIPTION: Demonstrates the basic structure of a Corezoid process JSON file, including required fields like 'obj_type', 'obj_id', 'parent_id', 'title', 'status', 'params', and 'scheme'. It emphasizes that a process is an object containing a list of nodes.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"obj_type\": 1,\n  \"obj_id\": \"123456\",\n  \"parent_id\": \"0\",\n  \"title\": \"Process Title\",\n  \"status\": \"active\",\n  \"params\": [\n    {\n      \"name\": \"param1\",\n      \"type\": \"string\",\n      \"flags\": [\"input\"]\n    }\n  ],\n  \"scheme\": {\n    \"nodes\": [\n      {\n        \"id\": \"67f4c3f482ba966c7fc7e5d6\",\n        \"obj_type\": 1,\n        \"condition\": {\n          \"logics\": [],\n          \"semaphors\": []\n        },\n        \"title\": \"Start\",\n        \"x\": 100,\n        \"y\": 100,\n        \"uuid\": \"123e4567-e89b-12d3-a456-426614174000\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Process JSON Structure\nDESCRIPTION: An example of a JSON structure representing a process in Corezoid. `obj_type` defines the object as a process (1). `obj_id` is the unique process identifier. `parent_id` is the ID of the folder containing this process. The `title` is the process title with version, and the object will contain other specific process properties.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"obj_type\": 1,\n  \"obj_id\": \"process_id\",\n  \"parent_id\": \"folder_id\", // ID of the parent folder\n  \"title\": \"Process Title v1.0\"\n  // other process properties...\n}\n```\n\n----------------------------------------\n\nTITLE: Set Parameters Node Configuration\nDESCRIPTION: Presents the configuration for a Set Parameters node, highlighting the requirement for an 'err_node_id' parameter and the need to stringify object values in the 'extra' object.  Object values must be stringified using JSON.stringify equivalent and assigned the `object` type in `extra_type`.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"param1\": \"value1\",\n    \"object_param\": \"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\"\n  },\n  \"extra_type\": {\n    \"param1\": \"string\",\n    \"object_param\": \"object\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Queue Node Configuration in Corezoid (JSON)\nDESCRIPTION: This JSON snippet provides an example of a basic Queue Node configuration in Corezoid. It defines the node's ID, object type, logic for queueing the task (using 'api_queue' type), data parameters, and the path to the next node after successful queueing. Note that capacity and alert thresholds use defaults, and the 'data' and 'data_type' are empty, meaning the entire task data is queued.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/queue-node.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"queue_node_example\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_queue\",\n        \"data\": {},\n        \"data_type\": {}\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_in_flow\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Queue Task for Processing\",\n  \"description\": \"Adds the current task to this queue node for later retrieval.\",\n  \"x\": 392,\n  \"y\": 212,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Set Parameter Node Configuration Example in Corezoid\nDESCRIPTION: This JSON provides a complete configuration example of a Set Parameters node in Corezoid. It demonstrates setting parameter `b` to the value of existing parameter `a`, defining the data type of `b` as string, and specifying an error handling node ID.  It also shows how the Set Parameter logic is embedded in a larger node configuration.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-node.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"set_param_example\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"set_param\",\n        \"extra\": {\n          \"b\": \"{{a}}\"\n        },\n        \"extra_type\": {\n          \"b\": \"string\"\n        },\n        \"err_node_id\": \"error_node_id\"\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_in_flow\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Set Parameter B from A\",\n  \"description\": \"Sets the task parameter 'b' to the value of parameter 'a'.\",\n  \"x\": 716,\n  \"y\": 444,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Valid Task Data - JSON\nDESCRIPTION: This JSON snippet demonstrates a valid task data structure for Corezoid, including a unique reference ID, customer information, and a nested object with a null value. It shows how to avoid using null values at the top level of the data object by using empty strings instead.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/task-creation.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ref\": \"1618234567_89012\",\n  \"data\": {\n    \"customer_id\": \"123456\",\n    \"email\": \"user@example.com\",\n    \"amount\": 150.75,\n    \"top_level_field\": \"\", // Empty string instead of null\n    \"nested_object\": {\n      \"can_be_null\": null // Null is acceptable at deeper levels\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Wrapper in Corezoid\nDESCRIPTION: This code snippet demonstrates how to wrap your javascript code within a function that accepts and returns the data object in Corezoid. This is required for all code nodes.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n   \n     // Your code here\n     \n   \n```\n\n----------------------------------------\n\nTITLE: Complete Corezoid Process Example in JSON\nDESCRIPTION: This JSON represents a comprehensive Corezoid process, illustrating various node types such as start, set parameters, code execution, condition check, API call, call process (RPC), database call, sum operation, reply to process, and error nodes.  Each node is configured with parameters, logic, and error handling.  The process defines a flow of execution through these interconnected nodes.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"obj_type\": 1,\n  \"obj_id\": \"123456789\",\n  \"parent_id\": \"0\",\n  \"title\": \"Example Process\",\n  \"description\": \"A comprehensive example process with various node types\",\n  \"status\": \"active\",\n  \"params\": [\n    {\n      \"name\": \"input_param\",\n      \"type\": \"string\",\n      \"description\": \"Input parameter\",\n      \"flags\": [\"input\", \"required\"]\n    },\n    {\n      \"name\": \"output_param\",\n      \"type\": \"object\",\n      \"description\": \"Output parameter\",\n      \"flags\": [\"output\"]\n    }\n  ],\n  \"scheme\": {\n    \"nodes\": [\n      {\n        \"id\": \"123e4567e89b12d3a456426614174000\",\n        \"obj_type\": 1,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"go\",\n              \"to_node_id\": \"123e4567e89b12d3a456426614174001\"\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Start\",\n        \"x\": 100,\n        \"y\": 100,\n        \"uuid\": \"123e4567-e89b-12d3-a456-426614174000\"\n      },\n      {\n        \"id\": \"123e4567e89b12d3a456426614174001\",\n        \"obj_type\": 0,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"set_param\",\n              \"extra\": {\n                \"param1\": \"value1\",\n                \"param2\": \"2\",\n                \"object_param\": \"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\"\n              },\n              \"extra_type\": {\n                \"param1\": \"string\",\n                \"param2\": \"string\",\n                \"object_param\": \"string\"\n              },\n              \"err_node_id\": \"123e4567e89b12d3a456426614174009\"\n            },\n            {\n              \"type\": \"go\",\n              \"to_node_id\": \"123e4567e89b12d3a456426614174002\"\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Set Parameters\",\n        \"x\": 250,\n        \"y\": 100,\n        \"uuid\": \"123e4567-e89b-12d3-a456-426614174001\"\n      },\n      {\n        \"id\": \"123e4567e89b12d3a456426614174002\",\n        \"obj_type\": 0,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"api_code\",\n              \"lang\": \"js\",\n              \"src\": \"function myFunction(data) {\\n  // Process data\\n  data.processed = true;\\n  return data;\\n}\",\n              \"err_node_id\": \"123e4567e89b12d3a456426614174009\"\n            },\n            {\n              \"type\": \"go\",\n              \"to_node_id\": \"123e4567e89b12d3a456426614174003\"\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Code Execution\",\n        \"x\": 400,\n        \"y\": 100,\n        \"uuid\": \"123e4567-e89b-12d3-a456-426614174002\"\n      },\n      {\n        \"id\": \"123e4567e89b12d3a456426614174003\",\n        \"obj_type\": 3,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"go_if_const\",\n              \"to_node_id\": \"123e4567e89b12d3a456426614174004\",\n              \"conditions\": [\n                {\n                  \"fun\": \"eq\",\n                  \"const\": \"true\",\n                  \"param\": \"processed\",\n                  \"cast\": \"boolean\"\n                }\n              ]\n            },\n            {\n              \"type\": \"go\",\n              \"to_node_id\": \"123e4567e89b12d3a456426614174009\"\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Condition Check\",\n        \"x\": 550,\n        \"y\": 100,\n        \"uuid\": \"123e4567-e89b-12d3-a456-426614174003\"\n      },\n      {\n        \"id\": \"123e4567e89b12d3a456426614174004\",\n        \"obj_type\": 0,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"api\",\n              \"method\": \"POST\",\n              \"url\": \"https://api.example.com/endpoint\",\n              \"extra\": {\n                \"param1\": \"value1\",\n                \"param2\": 2\n              },\n              \"extra_type\": {\n                \"param1\": \"string\",\n                \"param2\": \"number\"\n              },\n              \"extra_headers\": {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer {{token}}\"\n              },\n              \"max_threads\": 5,\n              \"err_node_id\": \"123e4567e89b12d3a456426614174009\"\n            },\n            {\n              \"type\": \"go\",\n              \"to_node_id\": \"123e4567e89b12d3a456426614174005\"\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"API Call\",\n        \"x\": 700,\n        \"y\": 100,\n        \"uuid\": \"123e4567-e89b-12d3-a456-426614174004\"\n      },\n      {\n        \"id\": \"123e4567e89b12d3a456426614174005\",\n        \"obj_type\": 0,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"api_rpc\",\n              \"conv_id\": \"987654321\",\n              \"extra\": {\n                \"param1\": \"value1\",\n                \"param2\": 2\n              },\n              \"extra_type\": {\n                \"param1\": \"string\",\n                \"param2\": \"number\"\n              },\n              \"err_node_id\": \"123e4567e89b12d3a456426614174009\"\n            },\n            {\n              \"type\": \"go\",\n              \"to_node_id\": \"123e4567e89b12d3a456426614174006\"\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Call Process\",\n        \"x\": 850,\n        \"y\": 100,\n        \"uuid\": \"123e4567-e89b-12d3-a456-426614174005\"\n      },\n      {\n        \"id\": \"123e4567e89b12d3a456426614174006\",\n        \"obj_type\": 0,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"db_call\",\n              \"instance_id\": \"db_instance_1\",\n              \"query\": \"SELECT * FROM table WHERE id = {{id}}\",\n              \"extra\": {\n                \"id\": \"123\"\n              },\n              \"extra_type\": {\n                \"id\": \"string\"\n              },\n              \"err_node_id\": \"123e4567e89b12d3a456426614174009\"\n            },\n            {\n              \"type\": \"go\",\n              \"to_node_id\": \"123e4567e89b12d3a456426614174007\"\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Database Call\",\n        \"x\": 1000,\n        \"y\": 100,\n        \"uuid\": \"123e4567-e89b-12d3-a456-426614174006\"\n      },\n      {\n        \"id\": \"123e4567e89b12d3a456426614174007\",\n        \"obj_type\": 0,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"api_sum\",\n              \"extra\": {\n                \"result_param\": \"total\",\n                \"operand1\": \"{{value1}}\",\n                \"operand2\": \"{{value2}}\",\n                \"operation\": \"+\"\n              },\n              \"err_node_id\": \"123e4567e89b12d3a456426614174009\"\n            },\n            {\n              \"type\": \"go\",\n              \"to_node_id\": \"123e4567e89b12d3a456426614174008\"\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Sum Operation\",\n        \"x\": 1150,\n        \"y\": 100,\n        \"uuid\": \"123e4567-e89b-12d3-a456-426614174007\"\n      },\n      {\n        \"id\": \"123e4567e89b12d3a456426614174008\",\n        \"obj_type\": 0,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"api_rpc_reply\",\n              \"res_data\": {\n                \"output_param\": {\n                  \"result\": \"success\",\n                  \"data\": {\n                    \"total\": \"{{total}}\"\n                  }\n                }\n              },\n              \"res_data_type\": {\n                \"output_param\": \"object\"\n              },\n              \"throw_exception\": false\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Reply to Process\",\n        \"x\": 1300,\n        \"y\": 100,\n        \"uuid\": \"123e4567-e89b-12d3-a456-426614174008\",\n        \"options\": {\n          \"save_task\": true\n        }\n      },\n      {\n        \"id\": \"123e4567e89b12d3a456426614174009\",\n        \"obj_type\": 2,\n        \"condition\": {\n          \"logics\": [],\n          \"semaphors\": []\n        },\n        \"title\": \"Error\",\n        \"x\": 700,\n        \"y\": 250,\n        \"uuid\": \"123e4567-e89b-12d3-a456-426614174009\",\n        \"options\": {\n          \"error_status\": true,\n          \"save_task\": true\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct JSON Escaping in JSON\nDESCRIPTION: This snippet demonstrates the correct way to escape quotes and special characters within a JSON string in a Corezoid process JSON file.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n// CORRECT\n\"extra\": \"{\\\"key\\\":\\\"value with \\\\\\\"quotes\\\\\\\" inside\\\"}\" \n```\n\n----------------------------------------\n\nTITLE: Creating Process JSON in Corezoid (JavaScript)\nDESCRIPTION: This JavaScript code defines a function to create the complete process JSON structure for Corezoid.  It takes process information and a list of nodes as input and constructs a JSON object with the required structure, including process metadata, parameters, and the node scheme.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create the complete process JSON\nfunction createProcessJson(processInfo, nodes) {\n  return {\n    obj_type: 1, // 1 = Process\n    obj_id: processInfo.id,\n    parent_id: processInfo.folderId || 0,\n    title: processInfo.title,\n    description: processInfo.description || \"\",\n    status: \"active\",\n    params: processInfo.params || [],\n    ref_mask: false,\n    conv_type: \"process\",\n    scheme: {\n      nodes: nodes,\n      web_settings: [[], []]\n    },\n    uuid: generateUuid()\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Routing Configuration - JSON\nDESCRIPTION: This snippet configures an API node to route to a specified error node when an error occurs.  It defines the node type as 'api', the method as 'GET', the URL for the API call, and the ID of the error node to which the task should be routed in case of an error. The 'err_node_id' parameter is crucial for implementing this basic error handling pattern.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api\",\n  \"method\": \"GET\",\n  \"url\": \"https://api.example.com\",\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration (JSON)\nDESCRIPTION: This JSON snippet configures a time semaphore for a Corezoid Code Node. It sets a timeout of 60 seconds. If the code execution exceeds this time, the task is routed to the node with the ID 'timeout_node_id'.  This allows for external timeout handling and prevents long-running code from blocking the process.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"time\",\n      \"value\": 60,\n      \"dimension\": \"sec\",\n      \"to_node_id\": \"timeout_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Call Node Configuration Example (GET Request) - JSON\nDESCRIPTION: This JSON configuration defines an API Call node that performs a GET request to retrieve Bitcoin ticker information from blockchain.info. It includes settings for the HTTP method, URL, error handling (err_node_id), response parsing, and custom headers.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/api-call-node.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"api_call_get_node\", // Unique node ID\n  \"obj_type\": 0, // Object type for Logic node\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api\", // Specifies this is an API Call logic block\n        \"err_node_id\": \"error_condition_node\", // ID of the node to go to on error\n        \"format\": \"\", // Request format type (empty string means \"default\")\n        \"method\": \"GET\", // HTTP method\n        \"url\": \"https://blockchain.info/ticker\", // Target API endpoint\n        \"extra\": {}, // No extra query parameters for this GET request\n        \"extra_type\": {}, // Corresponding types for extra parameters (empty)\n        \"max_threads\": 5, // Maximum concurrent requests allowed for this node\n        \"debug_info\": false, // Do not include extra debug info in the task\n        \"customize_response\": false, // Use default response mapping (header and body)\n        \"response\": {\n          // Default response mapping (used when customize_response is false)\n          \"header\": \"{{header}}\",\n          \"body\": \"{{body}}\"\n        },\n        \"response_type\": {\n          // Default response types (used when customize_response is false)\n          \"header\": \"object\",\n          \"body\": \"object\"\n        },\n        \"extra_headers\": {\n          // Custom request headers\n          \"Content-type\": \"test\" // Example header (Note: Content-Type for GET is unusual but possible)\n        },\n        \"send_sys\": true, // Include Corezoid system parameters in the request\n        \"cert_pem\": \"\", // No client certificate used for signing\n        \"content_type\": \"application/json\", // Expected response content type for parsing\n        \"rfc_format\": true, // Use RFC standard response format\n        \"is_migrate\": true // Internal flag\n      },\n      {\n        \"type\": \"go\", // Logic block for successful execution path\n        \"to_node_id\": \"success_reply_node\" // ID of the next node on success\n      }\n    ],\n    \"semaphors\": [] // Optional semaphores for implementing timeouts or rate limiting\n  },\n  \"title\": \"Get Blockchain Ticker\", // Descriptive title\n  \"description\": \"Fetch current Bitcoin ticker info\", // Optional description\n  \"x\": 664, // X coordinate on canvas\n  \"y\": 200, // Y coordinate on canvas\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\", // UI settings (expanded form, default icon)\n  \"options\": null // No specific options set\n}\n```\n\n----------------------------------------\n\nTITLE: API Call Node Error Handling - JSON\nDESCRIPTION: This snippet configures an API node with error handling.  It defines the node type as 'api', the method as 'GET', the URL for the API call, empty 'extra' and 'extra_type' properties and the ID of the error node to which the task should be routed in case of an error. The 'err_node_id' parameter is crucial for implementing this basic error handling pattern.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api\",\n  \"method\": \"GET\",\n  \"url\": \"https://api.example.com\",\n  \"extra\": {},\n  \"extra_type\": {},\n  \"err_node_id\": \"api_error_node\"\n}\n```\n\n----------------------------------------\n\nTITLE: Corezoid Process Definition\nDESCRIPTION: This JSON defines a Corezoid process with several input parameters (a, b, c, d, e) of varying types (string, number, boolean, object). Each parameter has flags, a description, and optional regex validation.  The process consists of a Start and Final node with a simple flow.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-with-parameters.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"obj_type\": 1,\n  \"obj_id\": 1643031,\n  \"parent_id\": 0,\n  \"title\": \"New Process\",\n  \"description\": \"\",\n  \"status\": \"active\",\n  \"params\": [\n    {\n      \"name\": \"a\",\n      \"type\": \"string\",\n      \"descr\": \"aa\",\n      \"flags\": [\"required\", \"input\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    },\n    {\n      \"name\": \"b\",\n      \"type\": \"number\",\n      \"descr\": \"bb\",\n      \"flags\": [\"input\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    },\n    {\n      \"name\": \"c\",\n      \"type\": \"boolean\",\n      \"descr\": \"cc\",\n      \"flags\": [\"auto-clear\", \"input\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    },\n    {\n      \"name\": \"d\",\n      \"type\": \"string\",\n      \"descr\": \"dd\",\n      \"flags\": [\"input\"],\n      \"regex\": \"/s\",\n      \"regex_error_text\": \"error\"\n    },\n    {\n      \"name\": \"e\",\n      \"type\": \"object\",\n      \"descr\": \"ee\",\n      \"flags\": [\"input\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    }\n  ],\n  \"ref_mask\": false,\n  \"conv_type\": \"process\",\n  \"scheme\": {\n    \"nodes\": [\n      {\n        \"id\": \"67f40e0682ba966c7fb151b9\",\n        \"obj_type\": 2,\n        \"condition\": {\n          \"logics\": [],\n          \"semaphors\": []\n        },\n        \"title\": \"Final\",\n        \"description\": \"\",\n        \"x\": 748,\n        \"y\": 400,\n        \"extra\": \"{\\\"modeForm\\\":\\\"collapse\\\",\\\"icon\\\":\\\"success\\\"}\",\n        \"options\": \"{\\\"save_task\\\":true}\"\n      },\n      {\n        \"id\": \"67f40e0682ba966c7fb151b7\",\n        \"obj_type\": 1,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"go\",\n              \"to_node_id\": \"67f40e0682ba966c7fb151b9\"\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Start\",\n        \"description\": \"\",\n        \"x\": 748,\n        \"y\": 100,\n        \"extra\": \"{\\\"modeForm\\\":\\\"collapse\\\",\\\"icon\\\":\\\"\\\"}\",\n        \"options\": null\n      }\n    ],\n    \"web_settings\": [[], []]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Node Count Semaphore\nDESCRIPTION: This JSON snippet illustrates the use of a count semaphore in a Start node to implement rate limiting for incoming tasks. If the number of concurrent tasks reaches the `value` threshold, new tasks are routed to the `esc_node_id` (escalation node) to prevent system overload.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/start-node.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"count\",\n    \"value\": 1000,\n    \"esc_node_id\": \"rate_limit_node_id\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Database Call Node Configuration Example (JSON)\nDESCRIPTION: Demonstrates a basic Database Call Node configuration with error handling and successful path connections. Includes specifying the database connection instance, SQL query, and target nodes.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/database-call-node.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"db_call_example\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"db_call\",\n        \"err_node_id\": \"error_node_id\",\n        \"instance_id\": 227,\n        \"query\": \"SELECT * FROM \\\"public\\\".\\\"alex\\\" LIMIT 100\"\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"success_node_id\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Fetch Alex Records\",\n  \"description\": \"Retrieves the first 100 records from the 'alex' table in the 'public' schema.\",\n  \"x\": 660,\n  \"y\": 200,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Call Process Node (JavaScript)\nDESCRIPTION: This function creates a Call Process node that calls another process and waits for a response. It uses `api_rpc` type and includes parameters for timeout handling. Ensure to include `extra` and `extra_type` objects and a time semaphore for timeout handling.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create a Call Process node\nfunction createCallProcessNode(targetProcessId, parameters) {\n  return {\n    id: generateNodeId(),\n    obj_type: 0,\n    condition: {\n      logics: [\n        {\n          type: \"api_rpc\", // IMPORTANT: Use \"api_rpc\", not \"call_process\"\n          conv_id: targetProcessId,\n          extra: parameters.extra || {},\n          extra_type: parameters.extra_type || {},\n          err_node_id: generateNodeId(), // Will create error node later\n          group: \"all\"\n        },\n        {\n          type: \"go\",\n          to_node_id: null // Will be set later\n        }\n      ],\n      semaphors: [\n        // Time semaphore for implementing timeouts\n        {\n          type: \"time\",\n          value: 60,\n          dimension: \"sec\",\n          to_node_id: \"process_timeout_node_id\" // Will be set later\n        }\n      ]\n    },\n    title: parameters.title || \"Call Process\",\n    description: parameters.description || \"Calls another process and waits for response\",\n    x: 500,\n    y: 500,\n    extra: '{\"modeForm\":\"expand\",\"icon\":\"\"}'\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration JSON\nDESCRIPTION: Demonstrates the configuration of a count semaphore for the Get from Queue node. This semaphore enforces concurrency control, routing tasks to an escalation node if the number of concurrent retrievals reaches the specified threshold. The configuration includes the semaphore type, threshold value, and the ID of the escalation node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/get-from-queue-node.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"count\",\n      \"value\": 50,\n      \"esc_node_id\": \"retrieval_limit_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Process JSON JavaScript\nDESCRIPTION: This JavaScript function `validateProcessJson` validates a Corezoid process JSON object. It checks for required fields, validates node IDs, connectivity, and references.  It utilizes helper functions like `validateNode`, `validateNodeConnectivity`, `isValidNodeId`, `validateExtraAndExtraType`, `hasOutgoingConnections` and `hasIncomingConnections` for more detailed checks.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to validate process JSON\nfunction validateProcessJson(processJson) {\n  const errors = [];\n\n  // Validate required fields\n  if (!processJson.obj_type || processJson.obj_type !== 1) {\n    errors.push(\"Process obj_type must be 1\");\n  }\n\n  if (!processJson.obj_id) {\n    errors.push(\"Process obj_id is required\");\n  }\n\n  // Validate nodes\n  if (\n    !processJson.scheme ||\n    !processJson.scheme.nodes ||\n    !Array.isArray(processJson.scheme.nodes)\n  ) {\n    errors.push(\"Process must have a scheme with nodes array\");\n    return errors;\n  }\n\n  // Check for Start node\n  const startNodes = processJson.scheme.nodes.filter(node => node.obj_type === 1);\n  if (startNodes.length !== 1) {\n    errors.push(`Process must have exactly one Start node (found ${startNodes.length})`);\n  }\n\n  // Validate each node\n  for (const node of processJson.scheme.nodes) {\n    const nodeErrors = validateNode(node);\n    errors.push(...nodeErrors);\n  }\n\n  // Validate node connectivity\n  const connectivityErrors = validateNodeConnectivity(processJson.scheme.nodes);\n  errors.push(...connectivityErrors);\n\n  return errors;\n}\n\n// Function to validate a node\nfunction validateNode(node) {\n  const errors = [];\n\n  // Validate required fields\n  if (!node.id || !isValidNodeId(node.id)) {\n    errors.push(\n      `Node ${node.title || \"untitled\"} has invalid id (must be 24-character hex string)`\n    );\n  }\n\n  // Validate node references\n  if (node.condition && node.condition.logics) {\n    for (const logic of node.condition.logics) {\n      if (logic.to_node_id && !isValidNodeId(logic.to_node_id)) {\n        errors.push(`Node ${node.title || \"untitled\"} has invalid to_node_id reference`);\n      }\n\n      if (logic.err_node_id && !isValidNodeId(logic.err_node_id)) {\n        errors.push(`Node ${node.title || \"untitled\"} has invalid err_node_id reference`);\n      }\n\n      // Validate extra/extra_type parity for nodes that require it\n      if ([\"set_param\", \"api\", \"api_rpc\"].includes(logic.type)) {\n        if (!validateExtraAndExtraType(logic.extra, logic.extra_type)) {\n          errors.push(`Node ${node.title || \"untitled\"} has mismatched extra and extra_type`);\n        }\n      }\n\n      // Validate Call Process node uses correct type\n      if (logic.conv_id && logic.type !== \"api_rpc\") {\n        errors.push(\n          `Node ${node.title || \"untitled\"} is a Call Process node but uses incorrect type (should be api_rpc)`\n        );\n      }\n    }\n  }\n\n  // Validate semaphors\n  if (node.condition && node.condition.semaphors) {\n    for (const semaphor of node.condition.semaphors) {\n      if (\n        semaphor.type === \"time\" &&\n        (!semaphor.to_node_id || !isValidNodeId(semaphor.to_node_id))\n      ) {\n        errors.push(`Node ${node.title || \"untitled\"} has time semaphore with invalid to_node_id`);\n      }\n      if (\n        semaphor.type === \"count\" &&\n        (!semaphor.esc_node_id || !isValidNodeId(semaphor.esc_node_id))\n      ) {\n        errors.push(\n          `Node ${node.title || \"untitled\"} has count semaphore with invalid esc_node_id`\n        );\n      }\n    }\n  }\n\n  return errors;\n}\n\n// Function to validate extra/extra_type parity\nfunction validateExtraAndExtraType(extra, extra_type) {\n  if (!extra || !extra_type) {\n    return false;\n  }\n\n  // Check that all keys in extra exist in extra_type\n  for (const key in extra) {\n    if (!extra_type.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  // Check that all keys in extra_type exist in extra\n  for (const key in extra_type) {\n    if (!extra.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Function to validate node ID format\nfunction isValidNodeId(id) {\n  // Node ID must be a 24-character hexadecimal string\n  return /^[0-9a-f]{24}$/.test(id);\n}\n\n// Function to validate node connectivity\nfunction validateNodeConnectivity(nodes) {\n  const errors = [];\n  const nodeIds = nodes.map(node => node.id);\n\n  // Check for disconnected nodes\n  for (const node of nodes) {\n    // Skip Start and End nodes\n    if (node.obj_type === 1 || node.obj_type === 2) {\n      continue;\n    }\n\n    // Check if node has outgoing connections\n    if (!hasOutgoingConnections(node, nodeIds)) {\n      errors.push(`Node ${node.title || node.id} has no outgoing connections`);\n    }\n\n    // Check if node has incoming connections\n    if (!hasIncomingConnections(node, nodes)) {\n      errors.push(`Node ${node.title || node.id} has no incoming connections`);\n    }\n  }\n\n  return errors;\n}\n\n// Function to check if a node has outgoing connections\nfunction hasOutgoingConnections(node, validNodeIds) {\n  if (!node.condition || !node.condition.logics) {\n    return false;\n  }\n\n  // Check for \"go\" or \"go_if_const\" logics with valid to_node_id\n  return node.condition.logics.some(\n    logic =>\n      (logic.type === \"go\" || logic.type === \"go_if_const\") &&\n      logic.to_node_id &&\n      validNodeIds.includes(logic.to_node_id)\n  );\n}\n\n// Function to check if a node has incoming connections\nfunction hasIncomingConnections(node, allNodes) {\n  // Check if any node has a connection to this node\n  return allNodes.some(otherNode => {\n    if (!otherNode.condition || !otherNode.condition.logics) {\n      return false;\n    }\n\n    return otherNode.condition.logics.some(\n      logic => (logic.type === \"go\" || logic.type === \"go_if_const\") && logic.to_node_id === node.id\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Default Code Node Configuration in JSON\nDESCRIPTION: This is the default JSON configuration for a Code node in Corezoid.  It includes a placeholder for the JavaScript code (`src`), along with a default error handling node (`err_node_id`). The `condition` section defines the `api_code` logic block using Javascript as the language.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"code_node_id\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_code\",\n        \"lang\": \"js\",\n        \"src\": \"\",\n        \"err_node_id\": \"error_node_id\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Code\",\n  \"description\": \"\",\n  \"modeForm\": \"expand\",\n  \"active\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration (JSON)\nDESCRIPTION: Configures a count semaphore for concurrency control of database connections. If the number of concurrent database calls reaches the threshold, new tasks are routed to an escalation node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/database-call-node.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"count\",\n      \"value\": 20,\n      \"esc_node_id\": \"db_connection_limit_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Arrays in Corezoid\nDESCRIPTION: This snippet demonstrates how to work with arrays in a Corezoid Code node. It initializes an array if it doesn't exist, adds a new item to the array, and calculates the total price of all items in the array.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n   \n  // Initialize array if it doesn't exist\n  data.items = data.items || [];\n\n  // Add a new item\n  data.items.push({\n    id: data.items.length + 1,\n    name: \"New Item\",\n    timestamp: new Date().getTime()\n  });\n\n  // Calculate total\n  data.total = data.items.reduce(function(sum, item) {\n    return sum + (item.price || 0);\n  }, 0);\n\n  \n```\n\n----------------------------------------\n\nTITLE: API Call with Reply Pattern - Text\nDESCRIPTION: This describes the recommended pattern for using API Call nodes in Corezoid.  It highlights the importance of including a Reply to Process node after an API Call node to ensure proper data flow and response handling.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/api-call-node.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nStart Node → API Call Node → Reply to Process Node → End Node\n```\n\n----------------------------------------\n\nTITLE: Access Node Information in Set Parameters Node\nDESCRIPTION: Shows how to access node information (task count and amount) in a Set Parameters node. Dependencies: The specified node ID must exist and have `amount` as a parameter. Input: The node ID. Output: `waiting_tasks` set to the task count, `total_amount` set to amount parameter of the node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"waiting_tasks\": \"{{node[561a272782ba961374d44178].count}}\",\n    \"total_amount\": \"{{node[561a272782ba961374d44178].amount}}\"\n  },\n  \"extra_type\": {\n    \"waiting_tasks\": \"number\",\n    \"total_amount\": \"number\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specific Error Code Handling Configuration - JSON\nDESCRIPTION: This snippet configures a 'go_if_const' node to handle a specific HTTP status code (404). It checks if the '__conveyor_api_return_code__' parameter is equal to \"404\". If it is, the task is routed to the 'not_found_error_node'. This allows for specific error handling logic to be implemented based on the API's return code.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"go_if_const\",\n  \"conditions\": [\n    {\n      \"param\": \"__conveyor_api_return_code__\",\n      \"const\": \"404\",\n      \"fun\": \"eq\",\n      \"cast\": \"string\"\n    }\n  ],\n  \"to_node_id\": \"not_found_error_node\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Process Parameters in Corezoid\nDESCRIPTION: This example demonstrates how to define input and output parameters for a Corezoid process using JSON. It includes parameter names, types, descriptions, flags, and regular expression validation rules.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/algorithm-to-process-guide.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"params\": [\n    {\n      \"name\": \"customer_id\",\n      \"type\": \"string\",\n      \"descr\": \"Unique customer identifier\",\n      \"flags\": [\"required\", \"input\"],\n      \"regex\": \"^[A-Z0-9]{8,12}$\",\n      \"regex_error_text\": \"Customer ID must be 8-12 uppercase alphanumeric characters\"\n    },\n    {\n      \"name\": \"transaction_result\",\n      \"type\": \"object\",\n      \"descr\": \"Transaction processing result\",\n      \"flags\": [\"output\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Set Parameters Node with Constants\nDESCRIPTION: Demonstrates setting constant values in a Set Parameters node.  This includes strings, numbers, booleans, objects, and arrays.  No dependencies required. Input: None. Output: Setting the specified constants.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"status\": \"processed\",\n    \"priority\": 1,\n    \"is_active\": true,\n    \"config\": { \"timeout\": 30, \"retries\": 3 },\n    \"tags\": [\"important\", \"customer\"]\n  },\n  \"extra_type\": {\n    \"status\": \"string\",\n    \"priority\": \"number\",\n    \"is_active\": \"boolean\",\n    \"config\": \"object\",\n    \"tags\": \"array\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Call a Process Node Error Handling - JSON\nDESCRIPTION: This snippet configures a 'Call a Process' node with error handling.  It defines the node type as 'api_rpc', the ID of the process to call, additional parameters in 'extra' and their types in 'extra_type', and the ID of the error node to which the task should be routed if the called process returns an error.  The 'err_node_id' allows for proper handling of errors returned by the called process.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc\",\n  \"conv_id\": \"{{process_id}}\",\n  \"extra\": {\n    \"param1\": \"value1\"\n  },\n  \"extra_type\": {\n    \"param1\": \"string\"\n  },\n  \"err_node_id\": \"process_call_error_node\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Input Parameters JSON\nDESCRIPTION: This JSON configuration defines an input parameter for a Corezoid process. It specifies the parameter's name, type, description, and flags, including marking it as 'required'. It also includes a regex validation pattern and an error message to ensure the input data conforms to the specified format.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"customer_id\",\n  \"type\": \"string\",\n  \"descr\": \"Customer identifier\",\n  \"flags\": [\"required\", \"input\"],\n  \"regex\": \"^[A-Z0-9]{8,12}$\",\n  \"regex_error_text\": \"Customer ID must be 8-12 uppercase alphanumeric characters\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Functions with Dynamic Values (Corezoid)\nDESCRIPTION: This snippet demonstrates the usage of Corezoid's built-in functions within a 'set_param' node. It shows how to perform mathematical calculations, hash passwords using SHA256, map a function over an array, and filter an array of users based on their age. The `extra_type` field specifies the expected data types of the calculated values.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"calculated_value\": \"$.math({{base_value}}*1.2)\",\n    \"hashed_password\": \"$.sha256_hex({{password}})\",\n    \"doubled_numbers\": \"$.map(fun(x) -> x * 2 end, {{numbers}})\",\n    \"filtered_users\": \"$.filter(fun(user) -> user.age >= 18 end, {{users}})\"\n  },\n  \"extra_type\": {\n    \"calculated_value\": \"number\",\n    \"hashed_password\": \"string\",\n    \"doubled_numbers\": \"array\",\n    \"filtered_users\": \"array\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Corezoid Process Usage Example\nDESCRIPTION: This JSON demonstrates how to call the defined Corezoid process with valid input parameters corresponding to the defined types and flags. It provides a sample request body with values for string, number, boolean, and object parameters, showcasing a valid usage scenario.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-with-parameters.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"a\": \"string value\",\n  \"b\": 123,\n  \"c\": true,\n  \"d\": \"string with s\",\n  \"e\": {\n    \"property1\": \"value1\",\n    \"property2\": \"value2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling API Call Errors in Corezoid\nDESCRIPTION: This example demonstrates how to handle API call errors in Corezoid using Condition nodes. It checks the `__conveyor_api_return_type_error__` parameter for a \"hardware\" error type and routes the process to a retry node if the condition is met.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/algorithm-to-process-guide.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conditions\": [\n    {\n      \"cast\": \"string\",\n      \"const\": \"hardware\",\n      \"fun\": \"eq\",\n      \"param\": \"__conveyor_api_return_type_error__\"\n    }\n  ],\n  \"to_node_id\": \"retry_node_id\",\n  \"type\": \"go_if_const\"\n}\n```\n\n----------------------------------------\n\nTITLE: Numeric Comparison with Conditions in Corezoid\nDESCRIPTION: This example demonstrates using Condition nodes for numeric comparisons in Corezoid. It checks if the `amount` is greater than 1000 and routes the process to the `high_amount_path` node if the condition is true.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/algorithm-to-process-guide.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conditions\": [\n    {\n      \"cast\": \"number\",\n      \"const\": \"1000\",\n      \"fun\": \"gt\",\n      \"param\": \"amount\"\n    }\n  ],\n  \"to_node_id\": \"high_amount_path\",\n  \"type\": \"go_if_const\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sum Function Usage in Corezoid\nDESCRIPTION: This code shows how to use the Sum function to retrieve the sum of a specific parameter across tasks in a Corezoid node. The examples demonstrate accessing the sum by Node ID, accessing by a Node ID specified by a parameter, and accessing within a specific process context.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-node.md#_snippet_1\n\nLANGUAGE: Corezoid Expression\nCODE:\n```\n// Node ID = 561a272782ba961374d44178\n{{node[561a272782ba961374d44178].SumID}}\n\n// Returns amount by SumID parameter from node {{node_id}}\n{{node[{{node_id}}].SumID}}\n\n// Returns amount by SumID parameter from {{node_id}} from {{conv_id}} process\n{{conv[{{conv_id}}].node[{{node_id}}].SumID}}\n```\n\n----------------------------------------\n\nTITLE: Append Element to Array in Set Parameters Node\nDESCRIPTION: Shows how to append an element to an array in a Set Parameters node using `JSON.stringify` and `concat`.  Dependencies: Requires the array `test_results.tests` to exist.  Input: New element to append.  Output: Modified `test_results.tests` array with the new element appended.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n// To append an element to an array:\n\"test_results.tests\": \"{{JSON.stringify(test_results.tests.concat([{\\\"name\\\":\\\"Test\\\",\\\"status\\\":\\\"passed\\\"}]))}}\"\n```\n\n----------------------------------------\n\nTITLE: Retry Count Increment Configuration - JSON\nDESCRIPTION: This snippet configures a 'set_param' node to increment a retry counter. It uses the 'extra' property to define the parameter to be updated ('retry_count') and the '{{$.math(retry_count+1)}}' expression to increment its value. The 'extra_type' property specifies the data type of the parameter as 'number'. This is essential for implementing a retry mechanism with a maximum retry limit.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"retry_count\": \"{{$.math(retry_count+1)}}\"\n  },\n  \"extra_type\": {\n    \"retry_count\": \"number\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Call Node Escalation Pattern with Delay in Corezoid\nDESCRIPTION: This JSON snippet shows the configuration of a Delay node used in an API call escalation pattern. It creates a retry loop by routing back to the original API call node after a 30-second delay, implemented using the 'delay' logic type.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/delay-node.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logics\": [\n    {\n      \"type\": \"delay\",\n      \"value\": 30,\n      \"dimension\": \"sec\",\n      \"to_node_id\": \"api_call_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Request-Response Pattern\nDESCRIPTION: Shows a process pattern that calls external services and handles responses, including error handling. It is useful for integration with external systems and APIs.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-development-guide.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nStart Node → API Call Node → Condition Node (Check Response) → Process Response → End Node\n                                │\n                                └─── [error] ──→ Error Handling → End Node\n```\n\n----------------------------------------\n\nTITLE: Creating Reply to Process Nodes in Corezoid\nDESCRIPTION: This JavaScript code provides functions to create Reply to Process nodes within Corezoid.  It includes methods for generating both success and error responses, incorporating necessary data structures and handling of output parameters. The functions utilize dynamic node ID generation and parameter insertion into response data.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create a Reply to Process node for success response\nfunction createSuccessReplyNode(outputParams) {\n  const replyNode = {\n    id: generateNodeId(),\n    obj_type: 0,\n    condition: {\n      logics: [\n        {\n          type: \"api_rpc_reply\",\n          mode: \"key_value\",\n          res_data: {\n            result: \"success\",\n            data: {}\n          },\n          res_data_type: {\n            result: \"string\",\n            data: \"object\"\n          },\n          throw_exception: false\n        },\n        {\n          type: \"go\",\n          to_node_id: null // Will be set to End node\n        }\n      ],\n      semaphors: []\n    },\n    title: \"Reply with Success\",\n    description: \"Send success response with output parameters\",\n    x: 500,\n    y: 600,\n    extra: '{\"modeForm\":\"expand\",\"icon\":\"\"}'\n  };\n\n  // Add output parameters to the response\n  for (const param of outputParams) {\n    replyNode.condition.logics[0].res_data.data[param.name] = `{{${param.name}}}`;\n  }\n\n  return replyNode;\n}\n\n// Function to create an error Reply to Process node\nfunction createErrorReplyNode() {\n  return {\n    id: generateNodeId(),\n    obj_type: 0,\n    condition: {\n      logics: [\n        {\n          type: \"api_rpc_reply\",\n          mode: \"key_value\",\n          res_data: {\n            result: \"error\",\n            error_code: \"{{error_code}}\",\n            error_message: \"{{error_message}}\"\n          },\n          res_data_type: {\n            result: \"string\",\n            error_code: \"string\",\n            error_message: \"string\"\n          },\n          throw_exception: true\n        },\n        {\n          type: \"go\",\n          to_node_id: null // Will be set to Error End node\n        }\n      ],\n      semaphors: []\n    },\n    title: \"Reply with Error\",\n    description: \"Send error response with error details\",\n    x: 800,\n    y: 600,\n    extra: '{\"modeForm\":\"expand\",\"icon\":\"\"}'\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Try/Catch (JavaScript)\nDESCRIPTION: This snippet shows how to implement error handling within a Corezoid Code Node using a try/catch block in JavaScript. Any exceptions thrown during code execution are caught, and the error message is assigned to the `data.error` parameter. This allows for graceful handling of runtime errors and prevents process failures.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  // Your code here\n} catch (e) {\n  data.error = e.toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Set Parameters Node Configuration JSON\nDESCRIPTION: This JSON code shows an example of configuring a 'Set Parameters' node in Corezoid.  It defines the parameters to be set, along with their default values and types.  The `err_node_id` property specifies the node to which the process should transition in case of an error during parameter setting.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"page_size\": \"{{page_size || '10'}}\",\n    \"sort_order\": \"{{sort_order || 'asc'}}\"\n  },\n  \"extra_type\": {\n    \"page_size\": \"string\",\n    \"sort_order\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Execution Node in Corezoid (JSON)\nDESCRIPTION: This JSON snippet shows the structure required to create a Code Execution node in Corezoid using the `api_code` type.  It includes the language, source code, and error node ID.  The `lang` parameter specifies the programming language of the code, and `src` contains the actual code to be executed.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_code\",\n  \"lang\": \"js\",\n  \"src\": \"function myFunction(data) {\\n  // Your code here\\n  return data;\\n}\",\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Condition Expression Example\nDESCRIPTION: This JSON snippet demonstrates a condition expression that checks if the parameter 'a' is equal to the number '1'. It uses the 'eq' function and casts the parameter to a number for comparison.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/condition-node.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"conditions\": [\n    {\n      \"param\": \"a\",\n      \"const\": \"1\",\n      \"fun\": \"eq\",\n      \"cast\": \"number\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Data Parameter in Code Node (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set a parameter within the `data` object, which represents the task body, in a Corezoid Code Node using JavaScript. The code sets a parameter named \"a\" with the value 1. This allows for dynamic manipulation of the task data within the code execution environment.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndata.a = 1;\n```\n\n----------------------------------------\n\nTITLE: Example JSON Configuration for Set Parameters Node\nDESCRIPTION: This JSON configuration shows how to use built-in functions within a Set Parameters node in Corezoid. It includes examples of setting parameters with random numbers, current dates, calculated values, hashed passwords, doubled numbers, and filtered users.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_37\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"mode\": \"key_value\",\n  \"extra\": {\n    \"random_number\": \"$.random(1, 100)\",\n    \"current_date\": \"$.date(%y-%m-%d)\",\n    \"calculated_value\": \"$.math({{base_value}}*1.2)\",\n    \"hashed_password\": \"$.sha256_hex({{password}})\",\n    \"doubled_numbers\": \"$.map(fun(x) -> x * 2 end, {{numbers}})\",\n    \"filtered_users\": \"$.filter(fun(user) -> user.age >= 18 end, {{users}})\"\n  },\n  \"extra_type\": {\n    \"random_number\": \"number\",\n    \"current_date\": \"string\",\n    \"calculated_value\": \"number\",\n    \"hashed_password\": \"string\",\n    \"doubled_numbers\": \"array\",\n    \"filtered_users\": \"array\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Date Formatting with $.date()\nDESCRIPTION: Formats the current date and time according to the specified format string in Corezoid. The format string can include any characters; only the format specifiers are replaced. Format specifiers are used to represent the year, month, day, hour, minute, and second.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_5\n\nLANGUAGE: N/A\nCODE:\n```\n$.date(format)\n```\n\n----------------------------------------\n\nTITLE: Data Processing & Token Generation with JavaScript\nDESCRIPTION: This snippet demonstrates data processing within a Corezoid code node using the moment.js and CryptoJS libraries. It formats the current date, calculates an expiry date, generates a SHA256 token, and handles potential errors. The script requires the 'libs/moment.js' and 'libs/sha256.js' libraries to be available.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    // Require necessary libraries\n    var moment = require(\"libs/moment.js\");\n    var CryptoJS = require(\"libs/sha256.js\");\n\n    // Process dates\n    var now = moment();\n    data.current_date = now.format(\"YYYY-MM-DD\");\n\n    // Calculate expiration date (30 days from now)\n    data.expiry_date = now.add(30, 'days').format(\"YYYY-MM-DD\");\n\n    // Generate a secure token\n    var tokenInput = data.user_id + \"|\" + data.current_date + \"|\" + data.secret;\n    data.token = CryptoJS.SHA256(tokenInput).toString();\n\n    // Log processing steps\n    data._ = data._ || [];\n    data._.push(\"Generated token for user: \" + data.user_id);\n\n     catch (e) {\n    // Handle errors\n    data.error = e.toString();\n    data.error_time = new Date().toISOString();\n    return data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Headers and Content Types (JSON)\nDESCRIPTION: This JSON snippet shows how to configure headers, including content types and authorization tokens for an API call node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"extra_headers\": {\n  \"Content-Type\": \"application/json\",\n  \"Authorization\": \"Bearer {{token}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Count Semaphores for Queue Operations in Corezoid\nDESCRIPTION: This JSON snippet demonstrates the configuration of a count semaphore for concurrency control in Corezoid queue operations. If the number of concurrent operations reaches 500, new tasks are routed to the 'queue_limit_node_id', helping to prevent queue overload.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/queue-node.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"count\",\n      \"value\": 500,\n      \"esc_node_id\": \"queue_limit_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Output Parameters JSON\nDESCRIPTION: This JSON configuration defines an output parameter for a Corezoid process. It specifies the parameter's name, type, description, and marks it with the 'output' flag.  This defines the contract for what data will be returned.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"transaction_result\",\n  \"type\": \"object\",\n  \"descr\": \"Transaction processing result\",\n  \"flags\": [\"output\"],\n  \"regex\": \"\",\n  \"regex_error_text\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Code Node Configuration with Dedicated Error Node - JSON\nDESCRIPTION: This JSON configuration represents a Corezoid code node with a dedicated error node. The `err_node_id` parameter within the `condition.logics` array specifies the ID of the error node. This links the code node to its dedicated error handler. The code node calculates the sum of `data.a` and `data.b` and stores it in `data.result`.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"code_node_id\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_code\",\n        \"code\": \"data.result = data.a + data.b;\",\n        \"err_node_id\": \"code_error_node_id\",\n        \"extra\": {},\n        \"extra_type\": {}\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_id\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Calculate Sum\",\n  \"x\": 200,\n  \"y\": 300\n}\n```\n\n----------------------------------------\n\nTITLE: Error Type Differentiation Configuration - JSON\nDESCRIPTION: This snippet configures a 'go_if_const' node to differentiate between hardware and software errors based on the '__conveyor_api_return_type_error__' parameter. It checks if the parameter value is equal to \"hardware\". If true, it routes the task to the 'retry_node_id', allowing for retry logic to be implemented for transient hardware errors.  The 'conditions' array specifies the parameter to check, the constant to compare against, the function to use for comparison ('eq' for equals), and the data type ('string').\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"go_if_const\",\n  \"conditions\": [\n    {\n      \"param\": \"__conveyor_api_return_type_error__\",\n      \"const\": \"hardware\",\n      \"fun\": \"eq\",\n      \"cast\": \"string\"\n    }\n  ],\n  \"to_node_id\": \"retry_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Code Node\nDESCRIPTION: This JavaScript code snippet shows how to determine where an error occurred in the process flow by accessing the `prev_node_name` and `prev_node_id` metadata fields. It stores the error origin and node ID in the task's data.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-metadata.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(data) {\n  data.error_origin = data.__root.prev_node_name;\n  data.error_node_id = data.__root.prev_node_id;\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Output Parameters with Reply to Process Node - JSON\nDESCRIPTION: This JSON snippet demonstrates how to use the defined output parameters in a Reply to Process node.  The `res_data` field contains the actual data being returned, with keys matching the names of the output parameters. `res_data_type` specifies the data types of the values in `res_data`, ensuring consistency.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-output-parameters.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc_reply\",\n  \"mode\": \"key_value\",\n  \"res_data\": {\n    \"result\": \"success\",\n    \"data\": {\n      \"a\": \"{{a}}\",\n      \"b\": {{b}},\n      \"c\": {{c}},\n      \"d\": {{d}},\n      \"e\": {{e}}\n    }\n  },\n  \"res_data_type\": {\n    \"result\": \"string\",\n    \"data\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Corezoid API Request Example\nDESCRIPTION: This JSON example demonstrates how to create a task in Corezoid via an API request. It includes essential parameters such as action, company_id, conv_id (process_id), data (user-defined parameters), obj (object type), ref (unique reference), and type (create).\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ops\": [{\n    \"action\": \"user\",\n    \"company_id\": \"[workspace_id]\",\n    \"conv_id\": [process_id],\n    \"data\": {\n      \"key1\": \"value1\",\n      \"key2\": \"value2\"\n    },\n    \"obj\": \"task\",\n    \"ref\": \"[unique_reference]\",\n    \"type\": \"create\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Corezoid Process Definition with Output Parameters - JSON\nDESCRIPTION: This JSON snippet demonstrates a complete Corezoid process definition including various output parameters. The `params` array defines parameters of different types (`string`, `number`, `boolean`, `array`, `object`). The `flags` array includes 'output' to mark these as output parameters. The `scheme` section is placeholder for actual process node configuration.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-output-parameters.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"obj_type\": 1,\n  \"obj_id\": 1643034,\n  \"parent_id\": 0,\n  \"title\": \"Process with Output Parameters\",\n  \"description\": \"\",\n  \"status\": \"active\",\n  \"params\": [\n    {\n      \"name\": \"a\",\n      \"type\": \"string\",\n      \"descr\": \"String output parameter\",\n      \"flags\": [\"output\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    },\n    {\n      \"name\": \"b\",\n      \"type\": \"number\",\n      \"descr\": \"Numeric output parameter\",\n      \"flags\": [\"output\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    },\n    {\n      \"name\": \"c\",\n      \"type\": \"boolean\",\n      \"descr\": \"Boolean output parameter\",\n      \"flags\": [\"output\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    },\n    {\n      \"name\": \"d\",\n      \"type\": \"array\",\n      \"descr\": \"Array output parameter\",\n      \"flags\": [\"output\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    },\n    {\n      \"name\": \"e\",\n      \"type\": \"object\",\n      \"descr\": \"Object output parameter\",\n      \"flags\": [\"output\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    }\n  ],\n  \"scheme\": {\n    \"nodes\": [\n      // Process nodes here\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Random Number Generation with $.random()\nDESCRIPTION: Generates a random floating-point number between 0 and 1, or a random integer between specified minimum and maximum values in Corezoid. This is useful for implementing scenarios with varied outputs.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_2\n\nLANGUAGE: N/A\nCODE:\n```\n$.random()\n```\n\n----------------------------------------\n\nTITLE: Semaphores Implementation Example (JSON)\nDESCRIPTION: This JSON snippet shows how to implement semaphores for timeout handling and rate limiting in an API Call node. It uses a time semaphore for timeout and a count semaphore for rate limiting.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"semaphors\": [\n  {\n    \"type\": \"time\",\n    \"value\": 30,\n    \"dimension\": \"sec\",\n    \"to_node_id\": \"timeout_node_id\"\n  },\n  {\n    \"type\": \"count\",\n    \"value\": 100,\n    \"esc_node_id\": \"rate_limit_node_id\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Modify Task Node Configuration Example (JSON)\nDESCRIPTION: This JSON configuration demonstrates how to use the 'api_copy' type with 'modify' mode to update a task in another process. It updates the 'a' parameter to '2' and waits for completion using `is_sync: true`. Error handling is configured with `err_node_id`.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/modify-task-node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"modify_task_example\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_copy\",\n        \"mode\": \"modify\",\n        \"data\": {\n          \"a\": \"2\"\n        },\n        \"data_type\": {\n          \"a\": \"string\"\n        },\n        \"group\": \"\",\n        \"ref\": \"{{reference}}\",\n        \"send_parent_data\": false,\n        \"is_sync\": true,\n        \"err_node_id\": \"error_condition_node\",\n        \"conv_id\": 1023391,\n        \"obj_to_id\": null,\n        \"user_id\": 56171\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_in_flow\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Update Parameter 'a' in Target Task\",\n  \"description\": \"Modifies the task identified by {{reference}} in Process 1023391, setting parameter 'a' to '2'. Waits for completion.\",\n  \"x\": 580,\n  \"y\": 200,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Math Operation Example (JSON)\nDESCRIPTION: This JSON snippet shows how to use the `$.math` built-in function for performing mathematical operations within a Set Parameters node. The example calculates a value by multiplying `base_value` by 1.2.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"calculated_value\": \"$.math({{base_value}}*1.2)\"\n```\n\n----------------------------------------\n\nTITLE: Validating Input Parameters with Conditions in Corezoid\nDESCRIPTION: This snippet shows how to use Condition nodes in Corezoid to validate input parameters. It uses the `go_if_const` type to check if the `customer_id` is empty and routes to an error node if the condition is met.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/algorithm-to-process-guide.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conditions\": [\n    {\n      \"cast\": \"string\",\n      \"const\": \"\",\n      \"fun\": \"eq\",\n      \"param\": \"customer_id\"\n    }\n  ],\n  \"to_node_id\": \"error_node_id\",\n  \"type\": \"go_if_const\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Success Reply Node in Corezoid\nDESCRIPTION: This example demonstrates how to configure a success Reply node in Corezoid using the `api_rpc_reply` type. It sets the response data with a `result` field indicating success and a `data` field containing the transaction result.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/algorithm-to-process-guide.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc_reply\",\n  \"mode\": \"key_value\",\n  \"res_data\": {\n    \"result\": \"success\",\n    \"data\": {\n      \"transaction_result\": \"{{transaction_result}}\"\n    }\n  },\n  \"res_data_type\": {\n    \"result\": \"string\",\n    \"data\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Database Call Node Configuration (JSON)\nDESCRIPTION: Illustrates the default configuration generated for a Database Call node in Corezoid, including placeholders for the instance ID, query, and error handling node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/database-call-node.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"db_call_node_id\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"db_call\",\n        \"instance_id\": null,\n        \"query\": \"\",\n        \"err_node_id\": \"error_node_id\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Database Call\",\n  \"description\": \"\",\n  \"modeForm\": \"expand\",\n  \"active\": true\n}\n```\n\n----------------------------------------\n\nTITLE: AES Encryption/Decryption with CryptoJS in Corezoid\nDESCRIPTION: This snippet demonstrates AES encryption and decryption using CryptoJS within a Corezoid Code node.  It requires the aes.js library. It encrypts plaintext using a secret key and then decrypts the ciphertext, storing both results in the data object.  The output is encoded as UTF-8.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  var CryptoJS = require(\"libs/aes.js\");\n\n  // Encrypt\n  var encrypted = CryptoJS.AES.encrypt(data.plaintext, data.secret_key).toString();\n  data.encrypted = encrypted;\n\n  // Decrypt\n  var decrypted = CryptoJS.AES.decrypt(encrypted, data.secret_key).toString(CryptoJS.enc.Utf8);\n  data.decrypted = decrypted;\n\n  \n```\n\n----------------------------------------\n\nTITLE: Call Process Configuration in Process-1 - JSON\nDESCRIPTION: This JSON configuration snippet is used in `Process-1` to call `Process-2` using `api_rpc`.  The configuration includes the `conv_id` of `Process-2`, error handling node ID (`err_node_id`), and a parameter `p1` to be passed to `Process-2`.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/call-process-node.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc\",\n  \"conv_id\": 1646021, // ID of Process-2\n  \"err_node_id\": \"67f89a46513aa034c8894522\",\n  \"extra\": {\n    \"p1\": \"{{p1}}\" // Pass parameters to Process-2\n  },\n  \"extra_type\": {\n    \"p1\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Node Example\nDESCRIPTION: Demonstrates an error handling node for a Call Process node, illustrating how to use 'go_if_const' logic to check for expected error conditions and route unexpected errors to separate handlers. It makes use of the `error_message` parameter to identify specific errors and routes to different `to_node_id` values based on these conditions.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"error_node_id\",\n  \"obj_type\": 3,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"go_if_const\",\n        \"to_node_id\": \"expected_error_handler_node_id\",\n        \"conditions\": [\n          {\n            \"fun\": \"eq\",\n            \"const\": \"Expected error message\",\n            \"param\": \"error_message\",\n            \"cast\": \"string\"\n          }\n        ]\n      },\n      {\n        \"type\": \"set_param\",\n        \"extra\": {\n          \"error_details\": \"Unexpected error: {{error_message}}\"\n        },\n        \"extra_type\": {\n          \"error_details\": \"string\"\n        },\n        \"err_node_id\": \"critical_error_node_id\"\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"unexpected_error_handler_node_id\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Counter in Corezoid\nDESCRIPTION: This snippet shows how to implement a retry counter using Set Parameters nodes in Corezoid. It increments the `retry_count` parameter by 1 with each retry attempt.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/algorithm-to-process-guide.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"retry_count\": \"$.math({{retry_count}} + 1)\"\n  },\n  \"extra_type\": {\n    \"retry_count\": \"number\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration (JSON)\nDESCRIPTION: This JSON configuration shows how to implement a timeout using a time semaphore in a Modify Task node. If the task modification doesn't complete within 30 seconds, the task is routed to the 'modification_timeout_node_id'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/modify-task-node.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"time\",\n    \"value\": 30,\n    \"dimension\": \"sec\",\n    \"to_node_id\": \"modification_timeout_node_id\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Logging Messages in Code Node (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to log messages within a Corezoid Code Node by pushing them to an artificial array key named `_` in the `data` object. It first checks if the array exists; if not, it initializes it. Then, it pushes the log message to the array, allowing developers to track execution flow and debug issues within the code node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndata._ = data._ || [];\ndata._.push(\"Log message\");\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration\nDESCRIPTION: Configuration for a time semaphore to implement a timeout for API calls. If the API doesn't respond within the specified time, the task is routed to the defined timeout node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/api-call-node.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"semaphors\": [\n      {\n        \"type\": \"time\",\n        \"value\": 30,\n        \"dimension\": \"sec\",\n        \"to_node_id\": \"timeout_node_id\"\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mathematical Operation using $.math()\nDESCRIPTION: Performs mathematical calculations on numeric values within a Corezoid Set Parameters node. The expression can include numbers, operators (+, -, *, /), and parameter references. The result is returned as a string representation of the number.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_0\n\nLANGUAGE: N/A\nCODE:\n```\n$.math(expression)\n```\n\n----------------------------------------\n\nTITLE: Environment Settings Configuration\nDESCRIPTION: Configuration settings for the API Call node, affecting the default behavior of system parameter inclusion and maximum concurrent threads.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/api-call-node.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"api_call\": {\n        \"send_sys\": true,\n        \"default_max_thread\": 5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculate Result with JavaScript\nDESCRIPTION: This JavaScript code snippet performs a calculation based on the input parameters (num1, num2, operation). It parses the numbers, uses a switch statement to perform the appropriate operation (+, -, *, /), and handles potential errors, such as division by zero or an invalid operation. The result is then assigned to the data.result property, and any errors are assigned to data.error. The function returns the modified data object.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  const num1 = parseFloat(data.num1);\n  const num2 = parseFloat(data.num2);\n  let result;\n  \n  switch(data.operation) {\n    case '+':\n      result = num1 + num2;\n      break;\n    case '-':\n      result = num1 - num2;\n      break;\n    case '*':\n      result = num1 * num2;\n      break;\n    case '/':\n      if (num2 === 0) {\n        throw new Error('Division by zero');\n      }\n      result = num1 / num2;\n      break;\n    default:\n      throw new Error('Invalid operation');\n  }\n  \n  data.result = result;\n  return data;\n} catch (e) {\n  data.error = e.message;\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Code Node Implementation\nDESCRIPTION: This JavaScript code snippet demonstrates how to access task metadata in a Code node, calculate the time in process, and add the information to the task's data.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-metadata.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(data) {\n  // Task metadata is available in the __root object\n  const taskId = data.__root.task_id;\n  const prevNodeId = data.__root.prev_node_id;\n  const createTime = parseInt(data.__root.create_time);\n\n  // Calculate time in process\n  const currentTime = Math.floor(Date.now() / 1000);\n  const timeInProcess = currentTime - createTime;\n\n  // Add to task data\n  data.task_info = {\n    id: taskId,\n    previous_node: prevNodeId,\n    time_in_process: timeInProcess\n  };\n\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Data Transformation with Set Parameters in Corezoid\nDESCRIPTION: This snippet shows how to use Set Parameters nodes in Corezoid for data transformation. It concatenates `first_name` and `last_name` into `full_name` and calculates `transaction_amount` using a mathematical expression.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/algorithm-to-process-guide.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"full_name\": \"{{first_name}} {{last_name}}\",\n    \"transaction_amount\": \"$.math({{base_amount}} * (1 + {{tax_rate}}))\"\n  },\n  \"extra_type\": {\n    \"full_name\": \"string\",\n    \"transaction_amount\": \"number\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Customization Example (JSON)\nDESCRIPTION: This JSON snippet shows how to customize the response of an API Call node by mapping response fields to task parameters. It maps the status code, response body, user ID, and account balance from the API response.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"customize_response\": true,\n\"response\": {\n  \"status_code\": \"{{header.status_code}}\",\n  \"response_data\": \"{{body}}\",\n  \"user_id\": \"{{body.user.id}}\",\n  \"account_balance\": \"{{body.account.balance}}\"\n},\n\"response_type\": {\n  \"status_code\": \"number\",\n  \"response_data\": \"object\",\n  \"user_id\": \"string\",\n  \"account_balance\": \"number\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Process Parameters JavaScript\nDESCRIPTION: This JavaScript function creates process parameter definitions for Corezoid processes. It iterates through input and output parameters, defining their name, type, description, and flags. For input parameters, it also configures regex validation patterns and error messages, while output parameters are marked with the 'output' flag. The function returns an array of parameter definitions.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create process parameter definitions\nfunction createParameters(inputs, outputs) {\n  const params = [];\n\n  // Add input parameters\n  for (const input of inputs) {\n    params.push({\n      name: input.name,\n      type: input.type,\n      descr: input.description,\n      flags: input.required ? [\"input\", \"required\"] : [\"input\"],\n      regex: input.validationPattern || \"\",\n      regex_error_text: input.validationError || \"\"\n    });\n  }\n\n  // Add output parameters\n  for (const output of outputs) {\n    params.push({\n      name: output.name,\n      type: output.type,\n      descr: output.description,\n      flags: [\"output\"],\n      regex: \"\",\n      regex_error_text: \"\"\n    });\n  }\n\n  return params;\n}\n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration for Concurrency Control in Corezoid\nDESCRIPTION: This JSON snippet shows how to use a count semaphore for concurrency control in a Delay node. If the number of concurrent delayed tasks reaches the specified 'value', new tasks are routed to the escalation node defined by 'esc_node_id'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/delay-node.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"count\",\n  \"value\": 1000,\n  \"esc_node_id\": \"delay_limit_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Call Process Node Configuration JSON\nDESCRIPTION: This JSON snippet illustrates the configuration for a Call Process node in Corezoid, emphasizing the use of 'api_rpc' type, 'extra' and 'extra_type' parameters for defining data, and the required 'err_node_id' for error handling.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/uuid-validation-requirements.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc\",\n  \"conv_id\": \"{{process_id_to_call}}\",\n  \"wait_for_reply\": true,\n  \"extra\": {\n    \"param1\": \"value1\",\n    \"param2\": \"value2\"\n  },\n  \"extra_type\": {\n    \"param1\": \"string\",\n    \"param2\": \"number\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Delay Node Configuration in Corezoid\nDESCRIPTION: This JSON snippet represents the default configuration of a Delay node in Corezoid. It includes a delay of 30 seconds and an empty semaphors array. The 'to_node_id' is initially null, indicating that it will be connected during process design.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/delay-node.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"delay_node_id\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"delay\",\n        \"value\": 30,\n        \"dimension\": \"sec\",\n        \"to_node_id\": null\n      }\n    ],\n    \"semaphors\": [] // Optional semaphores for implementing additional timeouts or concurrency control\n  },\n  \"title\": \"Delay\",\n  \"description\": \"\",\n  \"modeForm\": \"expand\",\n  \"active\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration in Corezoid\nDESCRIPTION: This JSON snippet configures a count semaphore for a Corezoid Set Parameters node. It limits the number of concurrent operations to 100; if this limit is reached, new tasks are routed to the node with the ID `param_limit_node_id`. This is useful for concurrency control.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-node.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"count\",\n  \"value\": 100,\n  \"esc_node_id\": \"param_limit_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Copy Task Node in Corezoid (JSON)\nDESCRIPTION: This JSON snippet demonstrates the structure for creating a Copy Task node in Corezoid, utilizing the `api_copy` type. It consists of data to be copied, their data types, the target process ID (`conv_id`), and the error node ID for error handling. Ensuring matching data and data_type definitions is essential.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_copy\",\n  \"data\": {\n    \"param1\": \"value1\",\n    \"param2\": 2\n  },\n  \"data_type\": {\n    \"param1\": \"string\",\n    \"param2\": \"number\"\n  },\n  \"conv_id\": \"target_process_id\",\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Coordinates - Process with Condition Branching\nDESCRIPTION: This code snippet provides example X,Y coordinates for nodes in a Corezoid process with condition branching. Note the X-offset of +100px for the Start and End nodes to achieve visual alignment with the other nodes.  The conditional branching demonstrates positioning of True and False paths.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/node-positioning-best-practices.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nStart Node:         X=600, Y=100    # X=600 (not 500) to align with the nodes below\nCondition Node:     X=500, Y=300\nTrue Path Node:     X=500, Y=500\nFalse Path Node:    X=800, Y=500\nJoin Node:          X=500, Y=700\nEnd Node:           X=600, Y=850    # X=600 (not 500) to align with the nodes above\n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration\nDESCRIPTION: Configuration for a count semaphore to implement rate limiting for API calls. If the number of concurrent calls reaches the threshold, new tasks are routed to the defined escalation node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/api-call-node.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"semaphors\": [\n      {\n        \"type\": \"count\",\n        \"value\": 100,\n        \"esc_node_id\": \"rate_limit_node_id\"\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Early Returns for Validation in Corezoid\nDESCRIPTION: This snippet demonstrates how to use early returns for input validation in a Corezoid Code node. If the input is invalid, an error message is set, and the function returns early, preventing further processing.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n   \n     if (!data.input) {\n       data.error = \"Missing input\";\n       \n     // Process valid input\n     return data;\n   }\n   \n```\n\n----------------------------------------\n\nTITLE: Basic Condition Node Configuration\nDESCRIPTION: This is a simple example of a Condition Node that checks if the input parameter 'a' is equal to the number '1'. It routes the task to 'error_node_id' if true, and to 'success_node_id' otherwise. Includes a default path to prevent tasks from getting stuck.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/condition-node.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"check_param_a\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"go_if_const\",\n        \"to_node_id\": \"error_node_id\",\n        \"conditions\": [\n          {\n            \"param\": \"a\",\n            \"const\": \"1\",\n            \"fun\": \"eq\",\n            \"cast\": \"number\"\n          }\n        ]\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"success_node_id\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Check if a equals 1\",\n  \"description\": \"Routes to error node if input parameter 'a' is 1, otherwise proceeds to success node.\",\n  \"x\": 392,\n  \"y\": 204,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Call Node (JavaScript)\nDESCRIPTION: This function creates an API Call node with customizable response mapping and semaphore implementation. It allows specifying API method, URL, parameters, headers, and response field mappings. Semaphores are used for timeout handling and rate limiting.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create an API Call node with customized response\nfunction createApiCallNode(apiConfig) {\n  return {\n    id: generateNodeId(),\n    obj_type: 0,\n    condition: {\n      logics: [\n        {\n          type: \"api\",\n          method: apiConfig.method,\n          url: apiConfig.url,\n          extra: apiConfig.parameters || {},\n          extra_type: createParameterTypes(apiConfig.parameters),\n          extra_headers: apiConfig.headers || {\n            \"Content-Type\": \"application/json\"\n          },\n          err_node_id: generateNodeId(), // Will create error node later\n          max_threads: 5,\n          // Customize Response functionality\n          customize_response: true,\n          response: {\n            // Map response fields to task parameters\n            status_code: \"{{header.status_code}}\",\n            response_data: \"{{body}}\",\n            // Map specific fields from response body\n            user_id: \"{{body.user.id}}\",\n            account_balance: \"{{body.account.balance}}\"\n          },\n          response_type: {\n            status_code: \"number\",\n            response_data: \"object\",\n            user_id: \"string\",\n            account_balance: \"number\"\n          }\n        },\n        {\n          type: \"go\",\n          to_node_id: null // Will be set later\n        }\n      ],\n      semaphors: [\n        // Time semaphore for timeout handling\n        {\n          type: \"time\",\n          value: 30,\n          dimension: \"sec\",\n          to_node_id: \"timeout_node_id\" // Will be set later\n        },\n        // Count semaphore for rate limiting\n        {\n          type: \"count\",\n          value: 100,\n          esc_node_id: \"rate_limit_node_id\" // Will be set later\n        }\n      ]\n    },\n    title: apiConfig.title || \"API Call\",\n    description: apiConfig.description || \"\",\n    x: 500,\n    y: 400,\n    extra: '{\"modeForm\":\"expand\",\"icon\":\"\"}'\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Default Condition Node Configuration JSON\nDESCRIPTION: This JSON snippet represents the default configuration of a Condition node in Corezoid. It includes the node ID, object type, condition logic (with a default path and an optional condition path), a title, an empty description, the mode form, and the active status. The condition logic contains 'go_if_const' and 'go' types, with the 'go_if_const' type intended for defining specific conditions.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/condition-node.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"condition_node_id\",\n  \"obj_type\": 3,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"go_if_const\",\n        \"to_node_id\": null,\n        \"conditions\": []\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": null\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Condition\",\n  \"description\": \"\",\n  \"modeForm\": \"expand\",\n  \"active\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration\nDESCRIPTION: This JSON snippet configures a count semaphore for a Waiting for Callback node in Corezoid. It limits the number of concurrent waiting tasks and routes new tasks to an escalation node if the threshold is reached. The `value` specifies the maximum number of concurrent tasks, and `esc_node_id` specifies the node to which tasks are routed upon reaching the limit.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/waiting-for-callback-node.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"count\",\n      \"value\": 200,\n      \"esc_node_id\": \"callback_limit_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Error-Checking Condition Node Configuration JSON\nDESCRIPTION: This JSON snippet shows the configuration of a Condition node used for error-checking in an API Call escalation pattern. It defines the logic for routing based on the '__conveyor_api_return_type_error__' parameter. If the error type is 'hardware', it routes to the 'delay_node_id'; if it's 'software', it routes to the 'error_node_id'; and if no condition matches, it defaults to the 'error_node_id'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/condition-node.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"logics\": [\n    {\n      \"type\": \"go_if_const\",\n      \"to_node_id\": \"delay_node_id\",\n      \"conditions\": [\n        {\n          \"fun\": \"eq\",\n          \"const\": \"hardware\",\n          \"param\": \"__conveyor_api_return_type_error__\",\n          \"cast\": \"string\"\n        }\n      ]\n    },\n    {\n      \"type\": \"go_if_const\",\n      \"to_node_id\": \"error_node_id\",\n      \"conditions\": [\n        {\n          \"fun\": \"eq\",\n          \"const\": \"software\",\n          \"param\": \"__conveyor_api_return_type_error__\",\n          \"cast\": \"string\"\n        }\n      ]\n    },\n    {\n      \"type\": \"go\",\n      \"to_node_id\": \"error_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Process JSON Schema Validation\nDESCRIPTION: This snippet demonstrates how to validate the schema of a Corezoid process JSON using the `npm run validate:schema` command.  This ensures that all required fields are present, node IDs are correctly formatted, and node connections reference valid node IDs. Requires npm to be installed.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-development-guide.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run validate:schema\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code for Code Execution Node\nDESCRIPTION: This JavaScript code is an example of what can be placed inside the src parameter of a Code Execution node.  It takes a data object as input, processes it, and returns the modified object.  It must be a valid JavaScript function.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myFunction(data) {\n  // Process data\n  data.processed = true;\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Error Handling Configuration - JSON\nDESCRIPTION: This snippet configures an 'api_rpc_reply' node to respond with a specific error when validation fails. It sets the 'result' to \"error\", defines an 'error_code' of \"MISSING_FIELD\", and provides a human-readable 'error_message'. The 'res_data_type' specifies the data types for each field in the response. Setting 'throw_exception' to 'true' indicates that an exception should be thrown, halting further processing.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc_reply\",\n  \"mode\": \"key_value\",\n  \"res_data\": {\n    \"result\": \"error\",\n    \"error_code\": \"MISSING_FIELD\",\n    \"error_message\": \"Required field 'customer_id' is missing\"\n  },\n  \"res_data_type\": {\n    \"result\": \"string\",\n    \"error_code\": \"string\",\n    \"error_message\": \"string\"\n  },\n  \"throw_exception\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Error Handling Nodes in Corezoid\nDESCRIPTION: This JavaScript code defines functions to create error handling nodes within a Corezoid process. It includes functions for generating condition nodes to check error types, retry nodes to introduce delays before retries, and set parameter nodes for retry counting. The error condition node determines if an error is hardware or software related, directing the flow accordingly.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create an error handling condition node\nfunction createErrorConditionNode(originNodeId) {\n  return {\n    id: generateNodeId(),\n    obj_type: 3,\n    condition: {\n      logics: [\n        {\n          type: \"go_if_const\",\n          conditions: [\n            {\n              param: \"__conveyor_api_return_type_error__\",\n              const: \"hardware\",\n              fun: \"eq\",\n              cast: \"string\"\n            }\n          ],\n          to_node_id: null // Will point to retry node\n        },\n        {\n          type: \"go_if_const\",\n          conditions: [\n            {\n              param: \"__conveyor_api_return_code__\",\n              const: \"429\",\n              fun: \"eq\",\n              cast: \"string\"\n            }\n          ],\n          to_node_id: null // Will point to rate limit handling node\n        },\n        {\n          type: \"go\",\n          to_node_id: null // Will point to error end node\n        }\n      ],\n      semaphors: []\n    },\n    title: \"Check Error Type\",\n    description: \"Determine if error is hardware or software\",\n    x: 700,\n    y: 400,\n    extra: '{\"modeForm\":\"expand\",\"icon\":\"\"}'\n  };\n}\n\n// Function to create a retry delay node\nfunction createRetryNode(targetNodeId) {\n  return {\n    id: generateNodeId(),\n    obj_type: 0,\n    condition: {\n      logics: [\n        {\n          type: \"delay\",\n          value: 30,\n          dimension: \"sec\",\n          to_node_id: targetNodeId\n        }\n      ],\n      semaphors: []\n    },\n    title: \"Retry After 30s\",\n    description: \"Wait 30 seconds before retrying\",\n    x: 900,\n    y: 400,\n    extra: '{\"modeForm\":\"expand\",\"icon\":\"\"}'\n  };\n}\n\n// Function to create a Set Parameters node for retry counting\nfunction createRetryCounterNode() {\n  return {\n    id: generateNodeId(),\n    obj_type: 0,\n    condition: {\n      logics: [\n        {\n          type: \"set_param\",\n          extra: {\n            retry_count: \"$.math({{retry_count || 0}}+1)\"\n          },\n          extra_type: {\n            retry_count: \"number\"\n          },\n          err_node_id: \"error_node_id\" // Will be set later\n        },\n        {\n          type: \"go\",\n          to_node_id: null // Will be set to Retry Delay node\n        }\n      ],\n      semaphors: []\n    },\n    title: \"Increment Retry Count\",\n    description: \"Tracks retry attempts to prevent infinite loops\",\n    x: 800,\n    y: 350,\n    extra: '{\"modeForm\":\"expand\",\"icon\":\"\"}'\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Node Positioning Script Execution\nDESCRIPTION: This snippet shows how to run the node positioning script using `npm run reposition-nodes` and providing the path to the process JSON file. The script automatically analyzes the process flow and adjusts node positions to minimize edge crossings. Requires npm to be installed.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-development-guide.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run reposition-nodes -- path/to/process.json\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Array in Code Node (JavaScript - Simpler)\nDESCRIPTION: This JavaScript code adds a new test result to the `test_results.tests` array within the `data` object. The new test result includes the name as \"Test\" and the status as \"passed\". This snippet illustrates how to achieve dynamic array manipulation within a Code Node which cannot be accomplished by the Set Parameters node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndata.test_results.tests.push({\n  name: \"Test\",\n  status: \"passed\"\n});\n```\n\n----------------------------------------\n\nTITLE: Update Array Element in Set Parameters Node\nDESCRIPTION: Demonstrates how to update a specific element in an array using `JSON.stringify` and `map`. Dependencies: Requires the array `my_array` and the index `target_index` to exist. Input: The target index to update and the new value. Output: `my_array` array with element at `target_index` updated.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n// To update a specific element in an array:\n\"my_array\": \"{{JSON.stringify(my_array.map((item, idx) => idx === {{target_index}} ? {...item, updated: true} : item))}}\"\n```\n\n----------------------------------------\n\nTITLE: Basic Set Parameter Reference in JSON\nDESCRIPTION: Demonstrates basic parameter reference within a Set Parameters node.  Parameter 'b' is assigned the value of parameter 'a'. Dependencies: The parameter `a` must exist. Input: Value of `a`. Output: `b` set to the value of `a`.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"b\": \"{{a}}\"\n  },\n  \"extra_type\": {\n    \"b\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Semaphores for Queue Operations in Corezoid\nDESCRIPTION: This JSON snippet demonstrates how to configure a time semaphore for a Corezoid queue operation. It specifies a timeout of 30 seconds; if the queue operation doesn't complete within this time, the task is routed to the 'queue_timeout_node_id'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/queue-node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"time\",\n      \"value\": 30,\n      \"dimension\": \"sec\",\n      \"to_node_id\": \"queue_timeout_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reply to Process Configuration in Process-2 - JSON\nDESCRIPTION: This JSON configuration snippet is used in `Process-2` to reply to the process that called it (`Process-1`) using `api_rpc_reply`.  It includes the `mode`, result data (`res_data`), the data type of the result (`res_data_type`), and `throw_exception` flag.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/call-process-node.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc_reply\",\n  \"mode\": \"key_value\",\n  \"res_data\": {\n    \"p1_Echo\": \"{{p1}}\" // Return data back to Process-1\n  },\n  \"res_data_type\": {\n    \"p1_Echo\": \"string\"\n  },\n  \"throw_exception\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Retry Pattern\nDESCRIPTION: Illustrates a process with retry logic for handling transient failures, including a maximum retry count. It is suitable for operations with potential transient failures like network calls to external APIs.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-development-guide.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nStart Node → Operation Node ──→ Success Node → End Node\n                │\n                └─── [error] ──→ Condition Node ─┬─── [retry count < max] ──→ Delay Node ──┐\n                                               │                           │\n                                               │                           ↓\n                                               │                      Increment Retry Count\n                                               │                           │\n                                               │                           └───────────────┘\n                                               │\n                                               └─── [retry count >= max] ──→ Failure Node → End Node\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Array in Code Node (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add an item to an array within the `data` object in a Corezoid Code Node using JavaScript. The code pushes a new object containing name, status, and result to the `test_results.tests` array.  This is useful for dynamically building arrays based on data processed within the code node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add an item to an array\ndata.test_results.tests.push({\n  name: data.current_test.name,\n  status: \"passed\",\n  result: data.result\n});\n```\n\n----------------------------------------\n\nTITLE: Mathematical Operations Examples\nDESCRIPTION: Examples of using the $.math() function to perform mathematical operations with literal values and parameter references within Corezoid. Shows addition, multiplication, division, and nested functions. The examples demonstrates how to perform calculations and integrate parameter values dynamically.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_1\n\nLANGUAGE: N/A\nCODE:\n```\n$.math(100+50)                    // Returns: 150\n$.math({{value}}*2)               // Multiplies the 'value' parameter by 2\n$.math({{price}}*{{quantity}})    // Multiplies 'price' by 'quantity'\n$.math({{value}}/100)             // Divides 'value' by 100\n$.math($.math({{value}}+1)-1)     // Nested math functions\n```\n\n----------------------------------------\n\nTITLE: Creating Set Parameters Node with Built-in Functions (JavaScript)\nDESCRIPTION: This function creates a Set Parameters node configured to use various built-in functions for data transformation. It demonstrates the use of math operations, date functions, random number generation, cryptographic functions, and array functions. The function returns a node object ready to be used in a Corezoid process.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create a Set Parameters node with built-in functions\nfunction createSetParamsWithBuiltInFunctions(functionExamples) {\n  const node = {\n    id: generateNodeId(),\n    obj_type: 0,\n    condition: {\n      logics: [\n        {\n          type: \"set_param\",\n          extra: {\n            // Math operations\n            calculated_value: \"$.math({{base_value}}*1.2)\",\n\n            // Date functions\n            current_date: \"$.date(%y-%m-%d)\",\n            future_date: \"$.date(%y-%m-%d+30-%h:%i:%s)\",\n            timestamp: \"$.unixtime(%y-%m-%d %h:%i:%s)\",\n\n            // Random number generation\n            random_number: \"$.random(1, 100)\",\n\n            // Cryptographic functions\n            hashed_password: \"$.sha256_hex({{password}})\",\n            encoded_data: \"$.base64_encode({{data}})\",\n\n            // Array functions\n            doubled_numbers: \"$.map(fun(x) -> x * 2 end, {{numbers}})\",\n            filtered_numbers: \"$.filter(fun(x) -> x > 10 end, {{numbers}})\"\n          },\n          extra_type: {\n            calculated_value: \"number\",\n            current_date: \"string\",\n            future_date: \"string\",\n            timestamp: \"number\",\n            random_number: \"number\",\n            hashed_password: \"string\",\n            encoded_data: \"string\",\n            doubled_numbers: \"array\",\n            filtered_numbers: \"array\"\n          },\n          err_node_id: \"error_node_id\"\n        },\n        {\n          type: \"go\",\n          to_node_id: null // Will be set later\n        }\n      ],\n      semaphors: []\n    },\n    title: \"Process Data with Built-in Functions\",\n    description: \"Uses built-in functions for data transformation\",\n    x: 500,\n    y: 300,\n    extra: '{\"modeForm\":\"expand\",\"icon\":\"\"}'\n  };\n\n  return node;\n}\n```\n\n----------------------------------------\n\nTITLE: Task JSON Schema Example\nDESCRIPTION: This JSON example illustrates the typical structure of a Corezoid Task, including system-generated metadata (task_id, ref, status, timestamps, node IDs) and user-defined data payload (customer_id, amount, currency, items, shipping_address).  It shows how key-value pairs can represent business data, with support for nested objects and arrays.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"task_id\": \"TASK_67890\",\n  \"ref\": \"REF_98765\",\n  \"status\": \"processed\",\n  \"user_id\": \"USER_54321\",\n  \"create_time\": 1617123456,\n  \"change_time\": 1617123789,\n  \"node_id\": \"NODE_33333\",\n  \"node_prev_id\": \"NODEPREV_44444\",\n  \"data\": {\n    \"customer_id\": \"C12345\",\n    \"amount\": 100.5,\n    \"currency\": \"USD\",\n    \"items\": [\n      { \"id\": \"PROD1\", \"quantity\": 2 },\n      { \"id\": \"PROD2\", \"quantity\": 1 }\n    ],\n    \"shipping_address\": {\n      \"street\": \"123 Main St\",\n      \"city\": \"Anytown\",\n      \"zip\": \"12345\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Date Functions Examples (JSON)\nDESCRIPTION: This JSON snippet demonstrates the use of `$.date` and `$.unixtime` for date and time manipulation. It shows how to get the current date, calculate a future date, and retrieve a timestamp.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"current_date\": \"$.date(%y-%m-%d)\",\n\"future_date\": \"$.date(%y-%m-%d+30-%h:%i:%s)\",\n\"timestamp\": \"$.unixtime(%y-%m-%d %h:%i:%s)\"\n```\n\n----------------------------------------\n\nTITLE: Dedicated Error Node Configuration - JSON\nDESCRIPTION: This JSON configuration defines the dedicated error node associated with the code node. It's a simple END node (`obj_type`: 2) triggered when an error occurs within the linked code node. This node allows for specific error handling logic tailored to the code node's operation.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"code_error_node_id\",\n  \"obj_type\": 2,\n  \"condition\": {\n    \"logics\": [],\n    \"semaphors\": []\n  },\n  \"title\": \"Calculate Sum Error\",\n  \"x\": 450,\n  \"y\": 300\n}\n```\n\n----------------------------------------\n\nTITLE: Database Call Node Error Handling - JSON\nDESCRIPTION: This snippet configures a Database call node with error handling.  It defines the node type as 'db', the connection URL to the database, the SQL query to execute, and the ID of the error node to which the task should be routed in case of an error. The 'err_node_id' parameter ensures that database errors are properly handled by routing tasks to the designated error node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"db\",\n  \"db_url\": \"postgres://user:password@host:port/database\",\n  \"sql\": \"SELECT * FROM users WHERE id = {{user_id}}\",\n  \"err_node_id\": \"db_error_node\"\n}\n```\n\n----------------------------------------\n\nTITLE: Set Parameters Node Implementation\nDESCRIPTION: This JSON configuration defines a Set Parameters node that sets the current node name, previous node name, task creation time, and processing path using task metadata.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-metadata.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"mode\": \"key_value\",\n  \"extra\": {\n    \"current_node\": \"{{root.node_name}}\",\n    \"previous_node\": \"{{root.prev_node_name}}\",\n    \"task_created_at\": \"{{root.create_time}}\",\n    \"processing_path\": \"{{processing_path}},{{root.node_id}}\"\n  },\n  \"extra_type\": {\n    \"current_node\": \"string\",\n    \"previous_node\": \"string\",\n    \"task_created_at\": \"string\",\n    \"processing_path\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration (JSON)\nDESCRIPTION: This JSON configuration demonstrates concurrency control using a count semaphore in a Modify Task node. If the number of concurrent modifications reaches 50, new tasks are routed to the 'modification_limit_node_id'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/modify-task-node.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"count\",\n    \"value\": 50,\n    \"esc_node_id\": \"modification_limit_node_id\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Access Process Task Reference in Set Parameters Node\nDESCRIPTION: Shows how to access task data from another process using `{{conv[PROCESS_ID].ref[TASK_REF_ID]}}`. Dependencies: The specified process ID and task reference ID must exist. Input: The process ID and task reference ID. Output: The task data from the referenced task in the specified process.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n// Access a specific task in another process\n{{conv[1023399].ref[12345]}}\n\n// Access a specific parameter in a task from another process\n{{conv[1023399].ref[12345].amount_owed}}\n\n// Using dynamic process and task references\n{{conv[{{my_process_id}}].ref[{{my_task_ref}}].amount_owed}}\n\n// Using special process references\n{{conv[@user-states].ref[{{my_task_ref}}]}}\n```\n\n----------------------------------------\n\nTITLE: Default Git Call Node Configuration - JSON\nDESCRIPTION: Shows the default configuration created when a Git Call node is added in Corezoid. Includes the essential properties like repository URL, commit, language, API version, and error handling. This configuration serves as a starting point for customizing the node's behavior.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/git-call-node.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"git_call_node_id\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_git\",\n        \"repo\": \"\",\n        \"commit\": \"main\",\n        \"lang\": \"js\",\n        \"version\": 2,\n        \"err_node_id\": \"error_node_id\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Git Call\",\n  \"description\": \"\",\n  \"modeForm\": \"expand\",\n  \"active\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Corezoid Process Definition\nDESCRIPTION: This JSON defines a Corezoid process for a simple calculator. It includes the process's metadata (obj_type, obj_id, title, description), input/output parameters (params), and the process scheme, which defines the nodes and their connections. The process takes two numbers and an operation as input, performs the calculation, and returns the result or an error message.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_35\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"obj_type\": 1,\n  \"obj_id\": 1646022,\n  \"parent_id\": 612594,\n  \"title\": \"Calculator v2.0\",\n  \"description\": \"Simple calculator process\",\n  \"status\": \"active\",\n  \"params\": [\n    {\n      \"name\": \"num1\",\n      \"type\": \"number\",\n      \"descr\": \"First number\",\n      \"flags\": [\"required\", \"input\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    },\n    {\n      \"name\": \"num2\",\n      \"type\": \"number\",\n      \"descr\": \"Second number\",\n      \"flags\": [\"required\", \"input\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    },\n    {\n      \"name\": \"operation\",\n      \"type\": \"string\",\n      \"descr\": \"Operation to perform (+, -, *, /)\",\n      \"flags\": [\"required\", \"input\"],\n      \"regex\": \"^[\\\\+\\\\-\\\\*\\\\/]$\",\n      \"regex_error_text\": \"Operation must be +, -, *, or /\"\n    },\n    {\n      \"name\": \"result\",\n      \"type\": \"number\",\n      \"descr\": \"Calculation result\",\n      \"flags\": [\"output\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    }\n  ],\n  \"ref_mask\": false,\n  \"conv_type\": \"process\",\n  \"scheme\": {\n    \"nodes\": [\n      {\n        \"id\": \"61d55218513aa04bc969791a\",\n        \"obj_type\": 1,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"go\",\n              \"to_node_id\": \"61d55237513aa04bc9697cb1\"\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Start\",\n        \"description\": \"Process entry point\",\n        \"x\": 600,\n        \"y\": 100,\n        \"uuid\": \"90505848-b55a-4813-a5cf-45b05b95ef14\",\n        \"extra\": \"{\\\"modeForm\\\":\\\"collapse\\\",\\\"icon\\\":\\\"\\\"}\",\n        \"options\": null\n      },\n      {\n        \"id\": \"61d55237513aa04bc9697cb1\",\n        \"obj_type\": 0,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"api_code\",\n              \"lang\": \"js\",\n              \"src\": \"try {\\n  const num1 = parseFloat(data.num1);\\n  const num2 = parseFloat(data.num2);\\n  let result;\\n  \\n  switch(data.operation) {\\n    case '+':\\n      result = num1 + num2;\\n      break;\\n    case '-':\\n      result = num1 - num2;\\n      break;\\n    case '*':\\n      result = num1 * num2;\\n      break;\\n    case '/':\\n      if (num2 === 0) {\\n        throw new Error('Division by zero');\\n      }\\n      result = num1 / num2;\\n      break;\\n    default:\\n      throw new Error('Invalid operation');\\n  }\\n  \\n  data.result = result;\\n  return data;\\n} catch (e) {\\n  data.error = e.message;\\n  return data;\\n}\",\n              \"err_node_id\": \"61d552e8513aa04bc9699371\"\n            },\n            {\n              \"type\": \"go\",\n              \"to_node_id\": \"61d55218513aa04bc969791b\"\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Calculate Result\",\n        \"description\": \"Performs the calculation based on input parameters\",\n        \"x\": 500,\n        \"y\": 300,\n        \"uuid\": \"dd79bab9-e72a-44cc-bd7c-f0c90570959f\",\n        \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n        \"options\": null\n      },\n      {\n        \"id\": \"61d55218513aa04bc969791b\",\n        \"obj_type\": 0,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"api_rpc_reply\",\n              \"mode\": \"key_value\",\n              \"res_data\": {\n                \"result\": \"success\",\n                \"data\": {\n                  \"result\": \"{{result}}\"\n                }\n              },\n              \"res_data_type\": {\n                \"result\": \"string\",\n                \"data\": \"object\"\n              },\n              \"throw_exception\": false\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Reply with Result\",\n        \"description\": \"Send result back to caller\",\n        \"x\": 500,\n        \"y\": 500,\n        \"uuid\": \"90505848-b55a-4813-a5cf-45b05b95ef15\",\n        \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n        \"options\": null\n      },\n      {\n        \"id\": \"61d552cb513aa04bc9698e3d\",\n        \"obj_type\": 2,\n        \"condition\": {\n          \"logics\": [],\n          \"semaphors\": []\n        },\n        \"title\": \"Success\",\n        \"description\": \"Process completed successfully\",\n        \"x\": 600,\n        \"y\": 700,\n        \"uuid\": \"ae05e9cb-d1a1-494a-8a16-cfc9cd1efbcd\",\n        \"extra\": \"{\\\"modeForm\\\":\\\"collapse\\\",\\\"icon\\\":\\\"success\\\"}\",\n        \"options\": \"{\\\"save_task\\\":true}\"\n      },\n      {\n        \"id\": \"61d552e8513aa04bc9699371\",\n        \"obj_type\": 0,\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"api_rpc_reply\",\n              \"mode\": \"key_value\",\n              \"res_data\": {\n                \"result\": \"error\",\n                \"error_message\": \"{{error}}\"\n              },\n              \"res_data_type\": {\n                \"result\": \"string\",\n                \"error_message\": \"string\"\n              },\n              \"throw_exception\": true\n            }\n          ],\n          \"semaphors\": []\n        },\n        \"title\": \"Reply with Error\",\n        \"description\": \"Send error message back to caller\",\n        \"x\": 800,\n        \"y\": 500,\n        \"uuid\": \"a9c19d66-1c3f-4197-9b3d-1d98425550f0\",\n        \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n        \"options\": null\n      },\n      {\n        \"id\": \"61d552cb513aa04bc9698e3e\",\n        \"obj_type\": 2,\n        \"condition\": {\n          \"logics\": [],\n          \"semaphors\": []\n        },\n        \"title\": \"Error\",\n        \"description\": \"Process completed with error\",\n        \"x\": 900,\n        \"y\": 700,\n        \"uuid\": \"ae05e9cb-d1a1-494a-8a16-cfc9cd1efbce\",\n        \"extra\": \"{\\\"modeForm\\\":\\\"collapse\\\",\\\"icon\\\":\\\"error\\\"}\",\n        \"options\": \"{\\\"save_task\\\":true,\\\"error_status\\\":true}\"\n      }\n    ],\n    \"web_settings\": [[], []]\n  },\n  \"uuid\": \"62f4026c-bdf9-4303-b7f7-924190f30dcd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Task with Array Data - JSON\nDESCRIPTION: Presents a Corezoid task that includes an array within the data structure. The 'items' field is an array of objects, each containing 'id', 'status', and 'value'. This demonstrates handling collections of data within a task.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-examples.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"task_id\": \"TASK_13579\",\n  \"ref\": \"REF_24680\",\n  \"status\": \"processed\",\n  \"user_id\": \"USER_97531\",\n  \"create_time\": 1617283700,\n  \"change_time\": 1617283800,\n  \"node_id\": \"NODE_44444\",\n  \"node_prev_id\": \"NODEPREV_55555\",\n  \"data\": {\n    \"batch_id\": \"BATCH_12345\",\n    \"items\": [\n      {\n        \"id\": \"ITEM_11111\",\n        \"status\": \"active\",\n        \"value\": 100\n      },\n      {\n        \"id\": \"ITEM_22222\",\n        \"status\": \"inactive\",\n        \"value\": 200\n      },\n      {\n        \"id\": \"ITEM_33333\",\n        \"status\": \"active\",\n        \"value\": 300\n      }\n    ],\n    \"total_items\": 3,\n    \"total_value\": 600\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Task Size in Corezoid using Erlang\nDESCRIPTION: This code snippet demonstrates how to validate the size of a task in Corezoid using Erlang. It retrieves the maximum allowed task size and then uses a function to validate the task data against this limit. This helps prevent performance issues caused by oversized tasks.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/best-practices.md#_snippet_0\n\nLANGUAGE: Erlang\nCODE:\n```\nMaxTaskSize = api_logics_helper:get_max_task_size(ConvId),\ntask_validation:validate_tasksize(TaskData, MaxTaskSize),\n```\n\n----------------------------------------\n\nTITLE: List Concatenation with $.map() in Erlang\nDESCRIPTION: Demonstrates list concatenation using ++ within $.map(). This example appends a new key-value pair to each list in the input array.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_27\n\nLANGUAGE: Erlang\nCODE:\n```\n$.map(fun(Item) -> Item ++ [{<<\"key\">>, 1}] end, {{lists}})\n```\n\n----------------------------------------\n\nTITLE: Valid Node ID Example\nDESCRIPTION: This snippet demonstrates a valid 24-character hexadecimal node ID required in Corezoid process JSON files for identifying and referencing nodes.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/uuid-validation-requirements.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n67f4c3f482ba966c7fc7e5d6\n```\n\n----------------------------------------\n\nTITLE: Call Process Node Configuration Example (api_rpc)\nDESCRIPTION: Demonstrates a basic Call Process node configuration using `api_rpc` with required fields and error handling. The `api_rpc` type specifies the node's function as a remote procedure call.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/call-process-node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"call_process_node\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_rpc\",\n        \"conv_id\": 9876543,\n        \"err_node_id\": \"error_node\",\n        \"extra\": {\n          \"param1\": \"value1\",\n          \"param2\": 2\n        },\n        \"extra_type\": {\n          \"param1\": \"string\",\n          \"param2\": \"number\"\n        },\n        \"group\": \"all\",\n        \"user_id\": 56171\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_id\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Call Process\",\n  \"description\": \"Invoke another process\",\n  \"x\": 944,\n  \"y\": 200,\n\n  \"extra\": \"{\\\"modeForm\\\":\\\"collapse\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration in Corezoid\nDESCRIPTION: This JSON snippet configures a time semaphore in a Corezoid Set Parameters node. It specifies a timeout of 10 seconds, after which the task is routed to the node with the ID `param_timeout_node_id`.  The `dimension` parameter specifies the unit of the `value`.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-node.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"time\",\n  \"value\": 10,\n  \"dimension\": \"sec\",\n  \"to_node_id\": \"param_timeout_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Missing Error Node Reference in JSON\nDESCRIPTION: This snippet illustrates a scenario where an `err_node_id` reference is missing in a Corezoid JSON process for a node that can potentially fail (like an API code node). Such nodes must include an `err_node_id`.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// INCORRECT\n{\n  \"type\": \"api_code\",\n  \"lang\": \"js\",\n  \"src\": \"// JavaScript code\"\n}\n```\n\n----------------------------------------\n\nTITLE: Function Nesting in Corezoid\nDESCRIPTION: Demonstrates how to nest built-in functions for more complex operations within Corezoid. Examples include combining $.math with other functions and nesting $.filter and $.map.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_36\n\nLANGUAGE: Erlang\nCODE:\n```\n$.math($.math({{value}}+1)-1)\n$.unixtime($.date({{format}}))\n$.sha1_hex($.base64_encode({{username}}))\n$.map(fun(x) -> $.math(x * 2) end, {{numbers}})\n$.filter(fun(x) -> x > $.random(100) end, {{numbers}})\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic Operations with $.map() in Erlang\nDESCRIPTION: Demonstrates basic arithmetic operations performed on each element of an array using $.map(). Examples include multiplying each element by 2, adding 10 to each element, integer division, and calculating the remainder of division by 3. These operations are applied within the Erlang function passed to $.map().\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_19\n\nLANGUAGE: Erlang\nCODE:\n```\n$.map(fun(x) -> x * 2 end, {{numbers}})\n$.map(fun(item) -> item + 10 end, {{values}})\n$.map(fun(Item) -> Item div 3 end, {{numbers}})\n$.map(fun(Item) -> Item rem 3 end, {{numbers}})\n```\n\n----------------------------------------\n\nTITLE: Code Node Configuration Example in JSON\nDESCRIPTION: Demonstrates a Code Node configuration in Corezoid, including the JavaScript source code, connection to an error handling node (`err_node_id`), and the success path connection (`to_node_id`). The JavaScript code sets a parameter 'a' to 1 in the task data.  Error handling is crucial, ensuring the task is routed to the appropriate node if the code execution fails. The `condition` section contains both the code logic and the successful execution path.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"code_node_example\", // Unique node ID (example uses \"62a9825e513aa00bd6544e63\")\n  \"obj_type\": 0, // Object type for Logic node\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_code\", // Specifies this is a Code logic block\n        \"lang\": \"js\", // Language used (JavaScript)\n        \"src\": \"data.a = 1;\\\\n\", // The actual JavaScript code to execute. This example sets a parameter 'a' to 1 in the task data.\n        \"err_node_id\": \"error_condition_node\" // ID of the node to go to on code execution error (example uses \"62a9825e513aa00bd6544e67\")\n      },\n      {\n        \"type\": \"go\", // Logic block for successful execution path\n        \"to_node_id\": \"next_node_in_flow\" // ID of the next node on success (example uses \"62a9827a82ba966e74498b81\")\n      }\n    ],\n    \"semaphors\": [] // Optional semaphores for implementing timeouts or concurrency control\n  },\n  \"title\": \"Set Parameter A\", // Descriptive title (example node had an empty title)\n  \"description\": \"Sets the task parameter 'a' to the value 1.\", // Optional description (example node had empty description)\n  \"x\": 720, // X coordinate on canvas\n  \"y\": 256, // Y coordinate on canvas\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\", // UI settings (expanded form, default icon)\n  \"options\": null // No specific options set\n}\n```\n\n----------------------------------------\n\nTITLE: Start Node Time Semaphore\nDESCRIPTION: This example demonstrates how to use a time semaphore in a Start node to delay task processing for a specified period. The `value` parameter defines the duration, and the `dimension` parameter specifies the unit of time (seconds, minutes, hours, or days).  Tasks are routed to the `to_node_id` after the time period elapses.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/start-node.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"time\",\n    \"value\": 60,\n    \"dimension\": \"sec\",\n    \"to_node_id\": \"delayed_processing_node_id\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Type Check Filtering with $.filter() in Erlang\nDESCRIPTION: Illustrates filtering based on type checks (is_number, is_binary) within $.filter(). Examples include keeping only numeric values and keeping only strings longer than 5 bytes.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_30\n\nLANGUAGE: Erlang\nCODE:\n```\n$.filter(fun(x) -> is_number(x) end, {{mixed_values}})\n$.filter(fun(x) -> is_binary(x) andalso byte_size(x) > 5 end, {{strings}})\n```\n\n----------------------------------------\n\nTITLE: $.map() for Logical Operations in Corezoid\nDESCRIPTION: This snippet demonstrates how to use the $.map() function in a Corezoid Set Parameter node to perform logical operations (xor, andalso, orelse) on an array of boolean values. It uses an array named 'oldtest' as input, applies the specified logical operation with the boolean value 'true' to each element, and stores the result as a string.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_41\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"xor\": \"$.map(fun(Item) -> Item xor true end, {{oldtest}})\",\n    \"andalso\": \"$.map(fun(Item) -> Item andalso true end, {{oldtest}})\",\n    \"orelse\": \"$.map(fun(Item) -> Item orelse true end, {{oldtest}})\"\n  },\n  \"extra_type\": {\n    \"xor\": \"string\",\n    \"andalso\": \"string\",\n    \"orelse\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Node IDs using openssl\nDESCRIPTION: This command-line snippet shows how to generate a valid 24-character hexadecimal node ID using openssl on Linux/macOS. It leverages the 'rand' function to produce random hexadecimal output.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/uuid-validation-requirements.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -hex 12\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration for Delay in Corezoid\nDESCRIPTION: This JSON snippet demonstrates how to configure a Delay node using a time semaphore. The 'type' is set to 'time', and the 'value' and 'dimension' specify the delay duration. The 'to_node_id' indicates the next node to route to after the delay.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/delay-node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"time\",\n  \"value\": 30,\n  \"dimension\": \"sec\",\n  \"to_node_id\": \"next_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration in JSON\nDESCRIPTION: Configures a count semaphore to limit concurrent Copy Task operations. If the number of copies reaches the threshold, new tasks are routed to an escalation node. This can prevent system overload.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/copy-task-node.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"count\",\n      \"value\": 50,\n      \"esc_node_id\": \"copy_limit_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Process Workflows\nDESCRIPTION: This snippet shows how to track which process a task originated from by storing the `conv_id` in the `origin_process` task data field.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-metadata.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"origin_process\": \"{{root.conv_id}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements with $.filter() in Erlang\nDESCRIPTION: Filters an array based on a predicate function. Returns a new array containing only the elements for which the function returns true. The function must return a boolean value. The array parameter must be an actual array, or the result will be empty.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_28\n\nLANGUAGE: Erlang\nCODE:\n```\n$.filter(fun(item) -> condition end, {{array}})\n```\n\n----------------------------------------\n\nTITLE: $.map() for Comparison Operations in Corezoid\nDESCRIPTION: This snippet shows how to use the $.map() function in a Corezoid Set Parameter node to perform comparison operations (==, <, >, >=, <=, /=, =:=, =/=) on an array of numbers. It takes an array named 'newtest' as input, applies the specified comparison operation with the value 2 to each element, and stores the resulting boolean values as a string.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_40\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"==\": \"$.map(fun(Item) -> Item == 2 end, {{newtest}})\",\n    \"<\": \"$.map(fun(Item) -> Item < 2 end, {{newtest}})\",\n    \">\": \"$.map(fun(Item) -> Item > 2 end, {{newtest}})\",\n    \">=\": \"$.map(fun(Item) -> Item >= 2 end, {{newtest}})\",\n    \"<=\": \"$.map(fun(Item) -> Item =< 2 end, {{newtest}})\",\n    \"/=\": \"$.map(fun(Item) -> Item /= 2 end, {{newtest}})\",\n    \"=:=\": \"$.map(fun(Item) -> Item =:= 2 end, {{newtest}})\",\n    \"=/=\": \"$.map(fun(Item) -> Item =/= 2 end, {{newtest}})\"\n  },\n  \"extra_type\": {\n    \"==\": \"string\",\n    \"<\": \"string\",\n    \">\": \"string\",\n    \">=\": \"string\",\n    \"<=\": \"string\",\n    \"/=\": \"string\",\n    \"=:=\": \"string\",\n    \"=/=\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration in Corezoid End Node (JSON)\nDESCRIPTION: This snippet demonstrates how to configure a time semaphore within a Corezoid End Node. This allows for delaying task completion for a specified duration.  The 'dimension' parameter specifies the units of time (seconds, minutes, hours, days).\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/end-node.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"semaphors\": [\n  {\n    \"type\": \"time\",\n    \"value\": 60,\n    \"dimension\": \"sec\",\n    \"to_node_id\": \"final_completion_node_id\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Array Functions Examples (JSON)\nDESCRIPTION: This JSON snippet illustrates how to use `$.map` and `$.filter` to perform operations on arrays. `$.map` doubles each number in the `numbers` array, while `$.filter` selects only numbers greater than 10.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"doubled_numbers\": \"$.map(fun(x) -> x * 2 end, {{numbers}})\",\n\"filtered_numbers\": \"$.filter(fun(x) -> x > 10 end, {{numbers}})\"\n```\n\n----------------------------------------\n\nTITLE: Binary Operations with $.map() in Erlang\nDESCRIPTION: Illustrates using binary operations (binary:replace) to modify strings within $.map().  This example replaces all occurrences of \"old\" with \"new\" in each string within the input array. It leverages the `binary` module for string manipulation.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_21\n\nLANGUAGE: Erlang\nCODE:\n```\n$.map(fun(str) ->\n  binary:replace(str, <<\"old\">>, <<\"new\">>, [global])\nend, {{strings}})\n```\n\n----------------------------------------\n\nTITLE: Copy Task Node Configuration in JSON\nDESCRIPTION: Demonstrates a complete Copy Task Node configuration including data mapping and error handling. This example uses parameter mapping to send specific data to the copied task and routes failures to a dedicated error handling node. Includes logic for both copy success and failure.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/copy-task-node.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"copy_task_node_example\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_copy\",\n        \"mode\": \"create\",\n        \"data\": {\n          \"fieldA\": \"{{a}}\"\n        },\n        \"data_type\": {\n          \"fieldA\": \"string\"\n        },\n        \"group\": \"all\",\n        \"ref\": \"\",\n        \"send_parent_data\": false,\n        \"err_node_id\": \"error_condition_node\",\n        \"conv_id\": 1023393,\n        \"obj_to_id\": null,\n        \"user_id\": 56171\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_in_flow\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Copy Task to Destination\",\n  \"description\": \"Copies the task, mapping parameter 'a' to 'fieldA', to Process 1023393.\",\n  \"x\": 576,\n  \"y\": 200,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration in Corezoid End Node (JSON)\nDESCRIPTION: This snippet shows how to configure a count semaphore in a Corezoid End Node.  This allows for controlling task completion rates, routing excess tasks to an alternative completion node to prevent system overload. The 'esc_node_id' parameter specifies the alternative node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/end-node.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"semaphors\": [\n  {\n    \"type\": \"count\",\n    \"value\": 500,\n    \"esc_node_id\": \"alternative_completion_node_id\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Database Call Node Structure (db_call)\nDESCRIPTION: Defines the JSON structure for a Database Call node, specifying the 'type', 'instance_id', 'query', 'extra', 'extra_type', and 'err_node_id' parameters. The 'instance_id' identifies the database instance. The 'query' is the SQL query to execute. 'extra' contains parameters to bind to the query, and 'extra_type' specifies their types.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"db_call\",\n  \"instance_id\": \"database_instance_id\",\n  \"query\": \"SELECT * FROM table WHERE condition = {{parameter}}\",\n  \"extra\": {\n    \"param1\": \"value1\"\n  },\n  \"extra_type\": {\n    \"param1\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checks and Conversions with $.map() in Erlang\nDESCRIPTION: Shows how to use type checks (is_binary) and type conversions (binary_to_integer) within the function passed to $.map(). This example converts binary strings to integers if the element is a binary string; otherwise, it leaves the element unchanged. Demonstrates conditional logic within the mapping function.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_20\n\nLANGUAGE: Erlang\nCODE:\n```\n$.map(fun(x) ->\n  case is_binary(x) of\n    true -> erlang:binary_to_integer(x);\n    false -> x\n  end\nend, {{mixed_values}})\n```\n\n----------------------------------------\n\nTITLE: Basic Comparison Filtering with $.filter() in Erlang\nDESCRIPTION: Demonstrates filtering based on basic comparison operations within $.filter(). Examples include returning elements greater than 10, filtering active users based on the 'active' property, and removing empty strings.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_29\n\nLANGUAGE: Erlang\nCODE:\n```\n$.filter(fun(x) -> x > 10 end, {{numbers}})\n$.filter(fun(item) -> item.active =:= true end, {{users}})\n$.filter(fun(str) -> str =/= \"\" end, {{strings}})\n```\n\n----------------------------------------\n\nTITLE: Reply to Process Node with Sample Data - JSON\nDESCRIPTION: This JSON snippet provides an example of a Reply to Process node with sample data matching the output parameters defined in the previous example. It illustrates how the `res_data` field contains values of the correct types corresponding to the defined parameters (string, number, boolean, array, object).\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-output-parameters.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc_reply\",\n  \"mode\": \"key_value\",\n  \"res_data\": {\n    \"result\": \"success\",\n    \"data\": {\n      \"a\": \"string value\",\n      \"b\": 123,\n      \"c\": true,\n      \"d\": [1, 2, 3],\n      \"e\": { \"key\": \"value\" }\n    }\n  },\n  \"res_data_type\": {\n    \"result\": \"string\",\n    \"data\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Conversion Filtering with $.filter() in Erlang\nDESCRIPTION: Shows how to use JSON conversion (eutils:from_json) within $.filter() to filter JSON strings based on a property value. This example filters JSON strings by a property named 'status' with a value of 'active'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_34\n\nLANGUAGE: Erlang\nCODE:\n```\n$.filter(fun(json_str) ->\n  Obj = eutils:from_json(json_str),\n  eutils:get_value(<<\"status\">>, Obj) =:= <<\"active\">>\nend, {{json_strings}})\n```\n\n----------------------------------------\n\nTITLE: Unix Timestamp Conversion with $.unixtime()\nDESCRIPTION: Converts a formatted date string to a Unix timestamp (seconds since January 1, 1970) within Corezoid. The format string uses the same format specifiers as the $.date() function.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_7\n\nLANGUAGE: N/A\nCODE:\n```\n$.unixtime(format)\n```\n\n----------------------------------------\n\nTITLE: SHA-384 and SHA-384 Hex Hashing\nDESCRIPTION: Calculates the SHA-384 hash of a string, returning either the raw binary result or the hexadecimal representation within Corezoid.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_16\n\nLANGUAGE: N/A\nCODE:\n```\n$.sha384(string) and $.sha384_hex(string)\n```\n\n----------------------------------------\n\nTITLE: Date Manipulation with Moment.js in Corezoid\nDESCRIPTION: This snippet demonstrates date manipulation using the moment.js library within a Corezoid Code node.  It imports the moment.js library. It parses and formats a date, adds time to a date, and calculates the duration between two dates, storing the results in the data object.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  var moment = require(\"libs/moment.js\");\n\n  // Parse and format a date\n  var date = moment(data.timestamp);\n  data.formatted_date = date.format(\"YYYY-MM-DD HH:mm:ss\");\n\n  // Add time\n  data.next_week = moment().add(7, 'days').format(\"YYYY-MM-DD\");\n\n  // Calculate duration\n  var start = moment(data.start_date);\n  var end = moment(data.end_date);\n  data.duration_days = end.diff(start, 'days');\n\n  \n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration (JSON)\nDESCRIPTION: This JSON snippet configures a count semaphore for a Corezoid Code Node to control concurrency. If the number of concurrent executions reaches 50, new tasks are routed to the node with the ID 'concurrency_limit_node_id'. This can be used to prevent resource exhaustion when executing complex code.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"count\",\n      \"value\": 50,\n      \"esc_node_id\": \"concurrency_limit_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Git Call Node Structure (git_call)\nDESCRIPTION: Defines the JSON structure for a Git Call node, specifying the 'type', 'repo', 'path', 'commit', 'lang', and 'err_node_id' parameters. The 'repo' specifies the Git repository URL. The 'path' is the path to the script. The 'commit' is the commit or branch. The 'lang' is the programming language of the script.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"git_call\",\n  \"repo\": \"https://github.com/example/repo.git\",\n  \"path\": \"scripts/example.js\",\n  \"commit\": \"main\",\n  \"lang\": \"js\",\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Task Creation Request - JSON\nDESCRIPTION: Illustrates a Corezoid task creation request in JSON format. It includes the 'ops' array containing an object with action (user), company_id, conv_id, data, obj (task), ref, and type (create), providing the necessary information to create a new task.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-examples.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ops\": [\n    {\n      \"action\": \"user\",\n      \"company_id\": \"12345\",\n      \"conv_id\": 67890,\n      \"data\": {\n        \"customer_id\": \"CUS_12345\",\n        \"amount\": 100.5,\n        \"currency\": \"USD\",\n        \"description\": \"Monthly subscription\"\n      },\n      \"obj\": \"task\",\n      \"ref\": \"REF_98765\",\n      \"type\": \"create\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Random Number Generation with Max Value\nDESCRIPTION: Generates a random integer between 1 and the specified maximum value (inclusive). This is useful for generating random numbers within a limited range.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_3\n\nLANGUAGE: N/A\nCODE:\n```\n$.random(max)\n```\n\n----------------------------------------\n\nTITLE: Connecting Nodes in Corezoid (JavaScript)\nDESCRIPTION: This JavaScript code defines a function to connect nodes within a Corezoid process. It identifies start, success end, and error end nodes, connects the main flow nodes sequentially based on their y-coordinate position and sets the `to_node_id` in the appropriate logic within each node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to connect all nodes\nfunction connectNodes(nodes) {\n  // Start by finding the Start, End, and other key nodes\n  const startNode = nodes.find(node => node.obj_type === 1);\n  const successEndNode = nodes.find(node => node.obj_type === 2 && node.extra.includes(\"success\"));\n  const errorEndNode = nodes.find(node => node.obj_type === 2 && node.extra.includes(\"error\"));\n\n  // Connect main flow\n  const mainFlowNodes = nodes.filter(node => node.x === 500 && node.obj_type !== 2);\n  mainFlowNodes.sort((a, b) => a.y - b.y);\n\n  for (let i = 0; i < mainFlowNodes.length - 1; i++) {\n    const currentNode = mainFlowNodes[i];\n    const nextNode = mainFlowNodes[i + 1];\n\n    // Find the \"go\" logic in current node and set to_node_id\n    const goLogic = currentNode.condition.logics.find(logic => logic.type === \"go\");\n    if (goLogic) {\n      goLogic.to_node_id = nextNode.id;\n    }\n  }\n\n  // Connect the last node in main flow to success end node\n  const lastMainNode = mainFlowNodes[mainFlowNodes.length - 1];\n  const lastNodeGoLogic = lastMainNode.condition.logics.find(logic => logic.type === \"go\");\n  if (lastNodeGoLogic) {\n    lastNodeGoLogic.to_node_id = successEndNode.id;\n  }\n\n  // Connect error paths\n  // (Code to connect error nodes would go here)\n}\n```\n\n----------------------------------------\n\nTITLE: Process JSON Structure Example\nDESCRIPTION: This JSON snippet demonstrates the basic structure for a Corezoid process. It includes key fields such as `obj_type`, `obj_id`, `parent_id`, `title`, and `description`, as well as the `scheme` object which contains the `nodes` and `web_settings`. This serves as a template for creating process definitions in JSON format.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"obj_type\": 1,\n  \"obj_id\": \"process_id\",\n  \"parent_id\": \"folder_id\",\n  \"title\": \"Process Title v1.0\",\n  \"description\": \"Process Description\",\n  \"status\": \"active\",\n  \"params\": [],\n  \"ref_mask\": false,\n  \"conv_type\": \"process\",\n  \"scheme\": {\n    \"nodes\": [],\n    \"web_settings\": [[], []]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Parameters Node with Task Parameter\nDESCRIPTION: Illustrates referencing an existing task parameter to set a new parameter. The value of `existing_parameter` will be assigned to `new_parameter`. Dependency: `existing_parameter` must exist in the task data. Input: Value of `existing_parameter`. Output: `new_parameter` set to the input value.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"new_parameter\": \"{{existing_parameter}}\"\n  },\n  \"extra_type\": {\n    \"new_parameter\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Folder and Process JSON Objects JavaScript\nDESCRIPTION: These functions create JSON objects representing folders and processes for Corezoid. `createFolderJson` creates a folder object with specified id, parentId, title, and description.  `createProcessJson` creates a process object, including its folder ID, title, description, status, parameters, and scheme.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create folder JSON\nfunction createFolderJson(folderInfo) {\n  return {\n    obj_type: 0, // 0 = Folder\n    obj_id: folderInfo.id,\n    parent_id: folderInfo.parentId || 0, // 0 means root level, otherwise parent folder's ID\n    title: folderInfo.title,\n    description: folderInfo.description || \"\"\n  };\n}\n\n// Function to create process JSON with proper parent_id\nfunction createProcessJson(processInfo, nodes) {\n  return {\n    obj_type: 1, // 1 = Process\n    obj_id: processInfo.id,\n    parent_id: processInfo.folderId, // ID of the parent folder containing this process\n    title: processInfo.title,\n    description: processInfo.description || \"\",\n    status: \"active\",\n    params: processInfo.params || [],\n    ref_mask: false,\n    conv_type: \"process\",\n    scheme: {\n      nodes: nodes,\n      web_settings: [[], []]\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Git Call Node Configuration Example - JSON\nDESCRIPTION: Demonstrates a comprehensive Git Call Node configuration with repository URL, commit, language, error handling, success node, and timeout semaphore.  Includes a timeout to prevent indefinitely stuck tasks. The 'type' for the Git call is 'api_git'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/git-call-node.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"git_call_example\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_git\",\n        \"version\": 2,\n        \"lang\": \"js\",\n        \"repo\": \"https://github.com/fresco117/test.git\",\n        \"commit\": \"main\",\n        \"err_node_id\": \"error_condition_node\"\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"success_node_id\"\n      }\n    ],\n    \"semaphors\": [\n      {\n        \"type\": \"time\",\n        \"value\": 600,\n        \"dimension\": \"min\",\n        \"to_node_id\": \"timeout_error_node\"\n      }\n    ]\n  },\n  \"title\": \"Execute Script from Git\",\n  \"description\": \"Pulls and executes the main branch script from the fresco117/test repository.\",\n  \"x\": 452,\n  \"y\": 176,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: API Call with Count Semaphore (Rate Limit)\nDESCRIPTION: Demonstrates implementing a rate limit for API calls using a count semaphore. If the count threshold is reached, the task is routed to an escalation node, preventing API overload.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/call-process-node.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"api_call_with_rate_limit\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api\",\n        \"url\": \"https://api.example.com/data\",\n        \"method\": \"POST\",\n        \"content_type\": \"application/json\",\n        \"err_node_id\": \"error_node_id\"\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_id\"\n      }\n    ],\n    \"semaphors\": [\n      {\n        \"type\": \"count\",\n        \"value\": 100,\n        \"esc_node_id\": \"rate_limit_node_id\"\n      }\n    ]\n  },\n  \"title\": \"API Call with Rate Limit\",\n  \"description\": \"Calls external API with a rate limit of 100 concurrent requests\",\n  \"x\": 576,\n  \"y\": 200,\n\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing User Requirements JavaScript\nDESCRIPTION: This JavaScript function analyzes user requirements to identify key components of a Corezoid process, including inputs, outputs, integrations with external systems, and decision points. It extracts information and creates a high-level flow description of the process, which is crucial for designing the process structure.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This function analyzes user requirements to identify key components\nfunction analyzeRequirements(requirements) {\n  // Extract key information from requirements\n  const inputs = identifyInputParameters(requirements);\n  const outputs = identifyOutputParameters(requirements);\n  const integrations = identifyExternalSystems(requirements);\n  const decisionPoints = identifyDecisionPoints(requirements);\n\n  return {\n    inputs,\n    outputs,\n    integrations,\n    decisionPoints,\n    flowDescription: createFlowDescription(inputs, outputs, integrations, decisionPoints)\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Task Path with Set Parameters\nDESCRIPTION: This snippet shows how to log the sequence of nodes visited by a task using the `prev_node_name` field and store it in the `path_history` task data field.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-metadata.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path_history\": \"{{path_history}},{{root.prev_node_name}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Set Parameters Node Structure (set_param)\nDESCRIPTION: Defines the JSON structure for a Set Parameters node, specifying the 'type', 'extra', 'extra_type', and 'err_node_id' parameters. The 'extra' parameters and their 'extra_type' define the parameters to be set or updated in the task.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"param1\": \"value1\",\n    \"param2\": \"2\",\n    \"object_param\": \"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\"\n  },\n  \"extra_type\": {\n    \"param1\": \"string\",\n    \"param2\": \"string\",\n    \"object_param\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Start and End Nodes JavaScript\nDESCRIPTION: These JavaScript functions create Start and End nodes for a Corezoid process. The `createStartNode` function configures a start node with a descriptive title, sets its `obj_type` to 1, and positions it at the top of the process. The `createEndNodes` function creates both Success and Error end nodes, positioning them at the bottom of their respective paths and configuring `save_task` to maintain task history.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create a Start node\nfunction createStartNode() {\n  return {\n    id: generateNodeId(), // Generate 24-character hex string\n    obj_type: 1, // 1 = Start node\n    condition: {\n      logics: [\n        {\n          type: \"go\",\n          to_node_id: null // Will be set later\n        }\n      ],\n      semaphors: []\n    },\n    title: \"Start\",\n    description: \"Process entry point\",\n    x: 600, // Note: +100px X offset for circular nodes\n    y: 100,\n    uuid: generateUuid(),\n    extra: '{\"modeForm\":\"collapse\",\"icon\":\"\"}',\n    options: '{\"direct_url\":true,\"type_auth\":\"no_auth\"}'\n  };\n}\n\n// Function to create End nodes\nfunction createEndNodes() {\n  const successNode = {\n    id: generateNodeId(),\n    obj_type: 2, // 2 = End node\n    condition: {\n      logics: [],\n      semaphors: []\n    },\n    title: \"Success\",\n    description: \"Process completed successfully\",\n    x: 600, // Note: +100px X offset for circular nodes\n    y: 800,\n    uuid: generateUuid(),\n    extra: '{\"modeForm\":\"collapse\",\"icon\":\"success\"}',\n    options: '{\"save_task\":true}'\n  };\n\n  const errorNode = {\n    id: generateNodeId(),\n    obj_type: 2,\n    condition: {\n      logics: [],\n      semaphors: []\n    },\n    title: \"Error\",\n    description: \"Process completed with error\",\n    x: 900, // Note: +100px X offset and positioned to the right\n    y: 800,\n    uuid: generateUuid(),\n    extra: '{\"modeForm\":\"collapse\",\"icon\":\"error\"}',\n    options: '{\"save_task\":true,\"error_status\":true}'\n  };\n\n  return [successNode, errorNode];\n}\n```\n\n----------------------------------------\n\nTITLE: SHA-512 and SHA-512 Hex Hashing\nDESCRIPTION: Calculates the SHA-512 hash of a string, returning either the raw binary result or the hexadecimal representation within Corezoid.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_17\n\nLANGUAGE: N/A\nCODE:\n```\n$.sha512(string) and $.sha512_hex(string)\n```\n\n----------------------------------------\n\nTITLE: Example ZIP Archive Structure\nDESCRIPTION: This example showcases the folder and file structure required for a valid Corezoid ZIP archive.  It shows the nested directory structure with folder JSON and process JSON files named according to specific conventions.  The folder name includes the ID and title, while process names include ID, title, and version.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nfolder_{folder_id}_{timestamp}.zip/\n└── {folder_id}_{folder_title}.folder/\n    ├── {folder_id}_{folder_title}.folder.json\n    ├── {process_id}_{process_title}_v{version}.conv.json\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Sum Node Configuration Example JSON\nDESCRIPTION: This JSON snippet demonstrates the configuration of a Sum Node in Corezoid. It shows how to configure the node to sum values from an incoming task parameter called 'count' using the SumID 'sum'. The 'type' field identifies the node as an 'api_sum' node, and the 'extra' array contains the sum operation configuration. The 'go' logic block specifies the next node to proceed to after the sum operation.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/sum-node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"67f9415d82ba966c7fbc3166\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_sum\",\n        \"extra\": [\n          {\n            \"id\": \"1744388449151\",\n            \"name\": \"sum\",\n            \"value\": \"{{count}}\"\n          }\n        ]\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"67f9415882ba966c7fbc2dd3\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"\",\n  \"description\": \"\",\n  \"x\": 624,\n  \"y\": 212,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Start Node Outgoing Path\nDESCRIPTION: This JSON snippet shows how to specify the next node in the process flow using the `to_node_id` parameter within the `condition.logics` section of the Start node configuration.  This determines where tasks are routed after entering the process.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/start-node.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"to_node_id\": \"next_node_id\"}\n```\n\n----------------------------------------\n\nTITLE: Random Number Generation Example (JSON)\nDESCRIPTION: This JSON snippet uses the `$.random` function to generate a random number between 1 and 100. This can be used for various purposes, such as assigning random values or creating unique identifiers.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"random_number\": \"$.random(1, 100)\"\n```\n\n----------------------------------------\n\nTITLE: SHA-256 and SHA-256 Hex Hashing\nDESCRIPTION: Calculates the SHA-256 hash of a string, returning either the raw binary result or the hexadecimal representation within Corezoid.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_15\n\nLANGUAGE: N/A\nCODE:\n```\n$.sha256(string) and $.sha256_hex(string)\n```\n\n----------------------------------------\n\nTITLE: Create ZIP Archive Structure JavaScript\nDESCRIPTION: This function creates the structure for a ZIP archive containing Corezoid folders and processes. It takes the folder ID, folder title, and an array of process objects as input. It generates a ZIP archive structure following the specified naming conventions, including folder and process JSON files.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create ZIP archive structure\nfunction createZipStructure(folderId, folderTitle, processes) {\n  const timestamp = Date.now();\n  const folderDirName = `${folderId}_${folderTitle.replace(/\\s/g, \"_\")}.folder`;\n  const zipFileName = `folder_${folderId}_${timestamp}.zip`;\n\n  const zipStructure = {\n    name: zipFileName,\n    entries: [\n      {\n        name: folderDirName,\n        entries: [\n          {\n            name: `${folderDirName}.json`,\n            content: JSON.stringify(\n              createFolderJson({\n                id: folderId,\n                title: folderTitle\n              })\n            )\n          }\n        ]\n      }\n    ]\n  };\n\n  // Add process files\n  for (const process of processes) {\n    const processFileName = `${process.obj_id}_${process.title.replace(/\\s/g, \"_\")}_v${process.version}.conv.json`;\n\n    zipStructure.entries[0].entries.push({\n      name: processFileName,\n      content: JSON.stringify(process)\n    });\n  }\n\n  return zipStructure;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Node Configuration JSON\nDESCRIPTION: This snippet demonstrates a sample node configuration in JSON format, showcasing its structure and key parameters. It includes fields like id, obj_type, condition, title, description, x, y, extra, and options.  It is a template for defining Corezoid nodes.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/node-documentation-template.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"node_id\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"node_specific_type\",\n        // Node-specific parameters here\n        \"err_node_id\": \"error_node_id\"\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_id\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Node Title\",\n  \"description\": \"Node Description\",\n  \"x\": 500,\n  \"y\": 300,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding with $.base64_encode()\nDESCRIPTION: Encodes a string using Base64 encoding within Corezoid.  This example shows encoding a string literal and encoding a parameter value.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_8\n\nLANGUAGE: N/A\nCODE:\n```\n$.base64_encode(string)\n```\n\n----------------------------------------\n\nTITLE: Data Initialization for Examples in Corezoid\nDESCRIPTION: This snippet provides example data used in other snippets, defining various arrays with different data types. These arrays ('oldtest', 'oldtest1', 'newtest', 'b') are used as input for the $.map() and $.filter() examples to showcase their functionality.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_43\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"oldtest\": \"[true, false]\",\n    \"oldtest1\": \"[{\\\"test\\\":1},{\\\"test1\\\":2}]\",\n    \"newtest\": \"[1, 2,3]\",\n    \"b\": \"[{\\\"test\\\":\\\"3FF\\\"},{\\\"test\\\":30},{\\\"test\\\":[{\\\"a\\\":1}]},{\\\"test\\\":30.3},{\\\"test\\\":true}]\"\n  },\n  \"extra_type\": {\n    \"oldtest\": \"string\",\n    \"oldtest1\": \"array\",\n    \"newtest\": \"array\",\n    \"b\": \"array\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Example: Call Process Node (Full)\nDESCRIPTION: Demonstrates a Call Process Node configuration extracted from a real process, calling another process without specific parameters and including error handling.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/call-process-node.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"call_process_example\", // Unique node ID (example uses \"61d5499782ba963bce68a24c\")\n  \"obj_type\": 0, // Object type for Logic node\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_rpc\", // Specifies this is a Call Process (RPC) logic block\n        \"err_node_id\": \"error_condition_node\", // ID for error handling (example uses \"61d5499782ba963bce68a253\")\n        \"extra\": {}, // Parameters to pass (empty in this example)\n        \"extra_type\": {}, // Data types for parameters (empty as 'extra' is empty)\n        \"group\": \"all\", // Wait for the called process to respond\n        \"conv_id\": 1023395, // ID of the target Process to call\n        \"obj_to_id\": null, // Not typically used for standard calls\n        \"user_id\": 56171, // Internal user ID\n        \"convTitle\": \"Reply to process\" // Optional title reference (may not always be present or used)\n      },\n      {\n        \"type\": \"go\", // Logic block for the successful path after the called process replies\n        \"to_node_id\": \"next_node_in_flow\" // ID of the next node (example uses \"61d54971513aa04bc96877f4\")\n      }\n    ],\n    \"semaphors\": [] // No semaphores used in this node\n  },\n  \"title\": \"Call Reply Process\", // Descriptive title (example node had empty title)\n  \"description\": \"Calls Process 1023395 and waits for its reply.\", // Optional description\n  \"x\": 576, // X coordinate on canvas\n  \"y\": 200, // Y coordinate on canvas\n\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\", // UI settings\n  \"options\": null // No specific options set\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Pattern\nDESCRIPTION: Represents a process that validates inputs before further processing, with separate paths for valid and invalid inputs. Best for processes with complex input validation requirements.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-development-guide.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n                    ┌─── [invalid input] ──→ Error Response → End Node\n                    │\nStart Node → Validation Node ─┤\n                    │\n                    └─── [valid input] ──→ Process Logic → End Node\n```\n\n----------------------------------------\n\nTITLE: Defining Output Parameters in Corezoid - JSON\nDESCRIPTION: This JSON snippet demonstrates how to define output parameters within a Corezoid process configuration.  The `params` array includes objects with `name`, `type`, `descr`, and `flags`. The `flags` array must include `output` to designate the parameter as an output parameter.  `regex` and `regex_error_text` are optional for string type parameters.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-output-parameters.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"params\": [\n    {\n      \"name\": \"result\",\n      \"type\": \"string\",\n      \"descr\": \"Operation result status\",\n      \"flags\": [\"output\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    },\n    {\n      \"name\": \"data\",\n      \"type\": \"object\",\n      \"descr\": \"Response payload\",\n      \"flags\": [\"output\"],\n      \"regex\": \"\",\n      \"regex_error_text\": \"\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Start Node No Authentication\nDESCRIPTION: This example demonstrates how to configure a Start node with no authentication. All requests are accepted, providing open access to the process.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/start-node.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"options\": \"{\\\"direct_url\\\":true,\\\"type_auth\\\":\\\"no_auth\\\"}\"}\n```\n\n----------------------------------------\n\nTITLE: Corezoid Process Validation Schema\nDESCRIPTION: This JSON schema defines the structure for validating Corezoid process structures. It includes definitions for the process itself, its parameters, nodes, and various logic types. The schema specifies required properties, data types, and valid values for each element, ensuring consistency and integrity of process definitions.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Corezoid Process Schema\",\n  \"description\": \"JSON Schema for validating Corezoid process structures\",\n  \"type\": \"object\",\n  \"required\": [\n    \"obj_type\",\n    \"obj_id\",\n    \"parent_id\",\n    \"title\",\n    \"status\",\n    \"params\",\n    \"scheme\"\n  ],\n  \"properties\": {\n    \"obj_type\": {\n      \"type\": \"integer\",\n      \"description\": \"Object type identifier\"\n    },\n    \"obj_id\": {\n      \"type\": [\n        \"integer\",\n        \"string\"\n      ],\n      \"description\": \"Unique identifier for the process\"\n    },\n    \"parent_id\": {\n      \"type\": [\n        \"integer\",\n        \"string\"\n      ],\n      \"description\": \"Parent process identifier\"\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"description\": \"Process title\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"Process description\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"active\",\n        \"inactive\",\n        \"paused\"\n      ],\n      \"description\": \"Process status\"\n    },\n    \"uuid\": {\n      \"type\": \"string\",\n      \"description\": \"Universally unique identifier for the process\"\n    },\n    \"params\": {\n      \"type\": \"array\",\n      \"description\": \"Process parameters\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"Parameter name\"\n          },\n          \"key\": {\n            \"type\": \"string\",\n            \"description\": \"Parameter key (alternative to name)\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"string\",\n              \"number\",\n              \"boolean\",\n              \"array\",\n              \"object\"\n            ],\n            \"description\": \"Parameter data type\"\n          },\n          \"descr\": {\n            \"type\": \"string\",\n            \"description\": \"Parameter description\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"Parameter description (alternative)\"\n          },\n          \"flags\": {\n            \"type\": \"array\",\n            \"description\": \"Parameter flags\",\n            \"items\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"input\",\n                \"output\",\n                \"required\"\n              ]\n            }\n          },\n          \"regex\": {\n            \"type\": \"string\",\n            \"description\": \"Validation regex pattern\"\n          },\n          \"regex_error_text\": {\n            \"type\": \"string\",\n            \"description\": \"Error message for regex validation failure\"\n          }\n        }\n      }\n    },\n    \"ref_mask\": {\n      \"type\": \"boolean\",\n      \"description\": \"Reference mask flag\"\n    },\n    \"conv_type\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"process\",\n        \"state\"\n      ],\n      \"description\": \"Process type\"\n    },\n    \"scheme\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"nodes\"\n      ],\n      \"properties\": {\n        \"nodes\": {\n          \"type\": \"array\",\n          \"description\": \"Array of nodes in the process\",\n          \"items\": {\n            \"$ref\": \"#/definitions/node\"\n          },\n          \"minItems\": 1\n        },\n        \"web_settings\": {\n          \"type\": \"array\",\n          \"description\": \"Web interface settings for the process\",\n          \"items\": {\n            \"type\": \"array\"\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"node\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"id\",\n        \"obj_type\",\n        \"condition\",\n        \"title\",\n        \"x\",\n        \"y\"\n      ],\n      \"properties\": {\n        \"id\": {\n          \"type\": \"string\",\n          \"description\": \"Unique identifier for the node\"\n        },\n        \"obj_type\": {\n          \"type\": \"integer\",\n          \"enum\": [\n            0,\n            1,\n            2,\n            3\n          ],\n          \"description\": \"Node type: 0 = Normal, 1 = Start, 2 = End, 3 = Escalation\"\n        },\n        \"condition\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"logics\",\n            \"semaphors\"\n          ],\n          \"properties\": {\n            \"logics\": {\n              \"type\": \"array\",\n              \"description\": \"Logic rules for the node\",\n              \"items\": {\n                \"oneOf\": [\n                  {\n                    \"$ref\": \"#/definitions/logic_go\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_go_if_const\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api_code\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api_copy\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api_rpc\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api_rpc_reply\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api_get_task\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_db_call\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api_queue\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_set_param\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api_sum\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api_callback\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_git_call\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api_reply\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api_form\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/logic_api_sender\"\n                  }\n                ]\n              }\n            },\n            \"semaphors\": {\n              \"type\": \"array\",\n              \"description\": \"Semaphore rules for the node\",\n              \"items\": {\n                \"oneOf\": [\n                  {\n                    \"$ref\": \"#/definitions/semaphors_time\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/semaphors_count\"\n                  }\n                ]\n              }\n            }\n          }\n        },\n        \"title\": {\n          \"type\": \"string\",\n          \"description\": \"Node title\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"Node description\"\n        },\n        \"x\": {\n          \"type\": \"integer\",\n          \"description\": \"X coordinate for visual positioning\"\n        },\n        \"y\": {\n          \"type\": \"integer\",\n          \"description\": \"Y coordinate for visual positioning\"\n        },\n        \"uuid\": {\n          \"type\": \"string\",\n          \"description\": \"Universally unique identifier for the node\"\n        },\n        \"options\": {\n          \"type\": [\n            \"object\",\n            \"string\"\n          ],\n          \"description\": \"Additional node options, can be a JSON string or object\",\n          \"properties\": {\n            \"save_task\": {\n              \"type\": \"boolean\",\n              \"description\": \"Whether to save the task in this node\"\n            },\n            \"error_status\": {\n              \"type\": \"boolean\",\n              \"description\": \"Whether this node represents an error state\"\n            }\n          }\n        },\n        \"max_threads\": {\n          \"type\": \"integer\",\n          \"description\": \"Maximum number of threads for the node\",\n          \"default\": 1\n        },\n        \"extra\": {\n          \"type\": [\n            \"string\",\n            \"object\"\n          ],\n          \"description\": \"Extra node configuration, often stored as a JSON string\"\n        }\n      }\n    },\n    \"logic_go\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"go\"\n          ],\n          \"description\": \"Simple routing logic\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        }\n      }\n    },\n    \"logic_go_if_const\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"conditions\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"go_if_const\"\n          ],\n          \"description\": \"Conditional routing logic\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"conditions\": {\n          \"type\": \"array\",\n          \"description\": \"Conditions for routing\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"fun\", \"const\", \"param\", \"cast\"],\n            \"properties\": {\n              \"fun\": {\n                \"type\": \"string\",\n                \"enum\": [\"eq\", \"not_eq\", \"less\", \"more\", \"regexp\", \"less_or_eq\", \"more_or_eq\"],\n                \"description\": \"Comparison function\"\n              },\n              \"const\": {\n                \"type\": \"string\",\n                \"description\": \"Value to compare against\"\n              },\n              \"param\": {\n                \"type\": \"string\",\n                \"description\": \"Parameter name to evaluate\"\n              },\n              \"cast\": {\n                \"type\": \"string\",\n                \"enum\": [\"string\", \"number\", \"boolean\"],\n                \"description\": \"Data type for comparison\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"logic_api\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"extra\",\n        \"extra_type\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api\"\n          ],\n          \"description\": \"API call logic\"\n        },\n        \"extra\": {\n          \"type\": \"string\",\n          \"description\": \"API call details in JSON format\"\n        },\n        \"extra_type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"json\",\n            \"plain\"\n          ],\n          \"description\": \"Data type for the API call\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        }\n      }\n    },\n    \"logic_api_code\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"code\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api_code\"\n          ],\n          \"description\": \"API call with custom code logic\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"code\": {\n          \"type\": \"string\",\n          \"description\": \"Custom code for the API call\"\n        }\n      }\n    },\n    \"logic_api_copy\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"api_node_id\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api_copy\"\n          ],\n          \"description\": \"Copy API parameters from another node\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"api_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Node ID from which to copy the API parameters\"\n        }\n      }\n    },\n    \"logic_api_rpc\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"method\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api_rpc\"\n          ],\n          \"description\": \"Remote procedure call API\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"method\": {\n          \"type\": \"string\",\n          \"description\": \"RPC method name\"\n        }\n      }\n    },\n    \"logic_api_rpc_reply\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"method\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api_rpc_reply\"\n          ],\n          \"description\": \"API reply for a remote procedure call\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"method\": {\n          \"type\": \"string\",\n          \"description\": \"RPC method name\"\n        }\n      }\n    },\n    \"logic_api_get_task\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"task_id\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api_get_task\"\n          ],\n          \"description\": \"Get data of a task via API\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"task_id\": {\n          \"type\": \"string\",\n          \"description\": \"Task ID\"\n        }\n      }\n    },\n    \"logic_db_call\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"db_call_id\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"db_call\"\n          ],\n          \"description\": \"Database call logic\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"db_call_id\": {\n          \"type\": \"string\",\n          \"description\": \"Database call ID\"\n        }\n      }\n    },\n    \"logic_api_queue\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"queue_name\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api_queue\"\n          ],\n          \"description\": \"API queue logic\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"queue_name\": {\n          \"type\": \"string\",\n          \"description\": \"Queue name\"\n        }\n      }\n    },\n    \"logic_set_param\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"param_name\",\n        \"param_value\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"set_param\"\n          ],\n          \"description\": \"Set the parameter of a task via API\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"param_name\": {\n          \"type\": \"string\",\n          \"description\": \"Name of parameter to be set\"\n        },\n        \"param_value\": {\n          \"type\": \"string\",\n          \"description\": \"The value of the parameter to set\"\n        }\n      }\n    },\n    \"logic_api_sum\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"param1\",\n        \"param2\",\n        \"target_param\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api_sum\"\n          ],\n          \"description\": \"Summation of parameters\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"param1\": {\n          \"type\": \"string\",\n          \"description\": \"First parameter name\"\n        },\n        \"param2\": {\n          \"type\": \"string\",\n          \"description\": \"Second parameter name\"\n        },\n        \"target_param\": {\n          \"type\": \"string\",\n          \"description\": \"Target parameter to save the result\"\n        }\n      }\n    },\n    \"logic_api_callback\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"callback_url\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api_callback\"\n          ],\n          \"description\": \"Initiate a callback through the API\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"callback_url\": {\n          \"type\": \"string\",\n          \"description\": \"URL for the callback\"\n        }\n      }\n    },\n    \"logic_git_call\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"git_call_id\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"git_call\"\n          ],\n          \"description\": \"Make a git call\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"git_call_id\": {\n          \"type\": \"string\",\n          \"description\": \"Git call ID\"\n        }\n      }\n    },\n    \"logic_api_reply\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api_reply\"\n          ],\n          \"description\": \"Send a reply through the API\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        }\n      }\n    },\n    \"logic_api_form\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"form_id\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api_form\"\n          ],\n          \"description\": \"Present an API Form to the user\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"form_id\": {\n          \"type\": \"string\",\n          \"description\": \"ID of the form to present\"\n        }\n      }\n    },\n    \"logic_api_sender\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"to_node_id\",\n        \"sender_id\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"api_sender\"\n          ],\n          \"description\": \"Trigger the sending of an email or SMS message\"\n        },\n        \"to_node_id\": {\n          \"type\": \"string\",\n          \"description\": \"Target node ID\"\n        },\n        \"sender_id\": {\n          \"type\": \"string\",\n          \"description\": \"Sender ID\"\n        }\n      }\n    },\n    \"semaphors_time\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"time\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"time\"\n          ],\n          \"description\": \"Time-based semaphore\"\n        },\n        \"time\": {\n          \"type\": \"integer\",\n          \"description\": \"Time duration in seconds\"\n        }\n      }\n    },\n    \"semaphors_count\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"type\",\n        \"count\"\n      ],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"count\"\n          ],\n          \"description\": \"Count-based semaphore\"\n        },\n        \"count\": {\n          \"type\": \"integer\",\n          \"description\": \"Task count\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Error Node Reference in JSON\nDESCRIPTION: This snippet shows the correct way to include an `err_node_id` in a Corezoid process JSON file for a node (api_code) that can fail.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n// CORRECT\n{\n  \"type\": \"api_code\",\n  \"lang\": \"js\",\n  \"src\": \"// JavaScript code\",\n  \"err_node_id\": \"abcdef0123456789abcdef15\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Initialization Node JavaScript\nDESCRIPTION: This JavaScript function creates a parameter initialization node in a Corezoid process. The function identifies optional input parameters and creates a 'Set Parameters' node to initialize them with default values. It configures the node with appropriate logic and adds the optional parameters with their default values and types to the node's configuration.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create parameter initialization node\nfunction createParameterInitNode(inputs) {\n  const optionalInputs = inputs.filter(input => !input.required);\n\n  // Skip if no optional parameters to initialize\n  if (optionalInputs.length === 0) {\n    return null;\n  }\n\n  // Create a Set Parameters node for initializing optional parameters\n  const initNode = {\n    id: generateNodeId(),\n    obj_type: 0,\n    condition: {\n      logics: [\n        {\n          type: \"set_param\",\n          extra: {},\n          extra_type: {},\n          err_node_id: generateNodeId() // Will create error node later\n        },\n        {\n          type: \"go\",\n          to_node_id: null // Will be set later\n        }\n      ],\n      semaphors: []\n    },\n    title: \"Initialize Optional Parameters\",\n    description: \"Set default values for optional parameters\",\n    x: 500,\n    y: 200,\n    extra: '{\"modeForm\":\"expand\",\"icon\":\"\"}'\n  };\n\n  // Add optional parameters with default values\n  for (const input of optionalInputs) {\n    initNode.condition.logics[0].extra[input.name] = input.defaultValue || \"\";\n    initNode.condition.logics[0].extra_type[input.name] = input.type || \"string\";\n  }\n\n  return initNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Array in Set Parameters (JSON - Limited)\nDESCRIPTION: This JSON snippet shows an attempt to add an item to an array in a Set Parameters node using dynamic indices.  However, this approach has limitations with dynamic indices and is generally less flexible than using a Code node for array manipulation. It is included for comparison.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"test_results.tests[{{test_results.tests.length}}]\": \"{\\\"name\\\":\\\"Test\\\",\\\"status\\\":\\\"passed\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Corezoid End Node Configuration Example (JSON)\nDESCRIPTION: This JSON snippet represents a complete configuration example for a Corezoid End Node. It includes the node ID, object type, condition settings, title, description, coordinates, extra settings (success icon), and save task option.  Customizing the 'title' and 'description' is important for clarity.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/end-node.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"final_node_example\",\n  \"obj_type\": 2,\n  \"condition\": {\n    \"logics\": [],\n    \"semaphors\": []\n  },\n  \"title\": \"Final\",\n  \"description\": \"\",\n  \"x\": 492,\n  \"y\": 400,\n  \"extra\": \"{\\\"modeForm\\\":\\\"collapse\\\",\\\"icon\\\":\\\"success\\\"}\",\n  \"options\": \"{\\\"save_task\\\":true}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This command installs the project's dependencies using npm, the Node Package Manager. This is a necessary step to set up the local development environment before building or formatting the documentation.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Dynamic Array Operations in Corezoid\nDESCRIPTION: This snippet shows how to perform dynamic array operations, like adding results to an array based on a dynamic index, inside a corezoid code node. This is used when `Set Parameters` node is not enough. It initialises test results object, then pushes new tests into the `tests` array. The counters are also being incremented based on test result.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n   \n  // Initialize test results if they don't exist\n  data.test_results = data.test_results || {\n    total: 0,\n    passed: 0,\n    failed: 0,\n    tests: []\n  };\n\n  // Add a test result to the array\n  // This operation can't be done with Set Parameters nodes due to dynamic index limitations\n  data.test_results.tests.push({\n    name: data.current_test.name,\n    status: data.current_test.passed ? 'passed' : 'failed',\n    result: data.result\n  });\n\n  // Update counters\n  data.test_results.total += 1;\n  data.test_results.passed += data.current_test.passed ? 1 : 0;\n  data.test_results.failed += data.current_test.passed ? 0 : 1;\n\n  \n```\n\n----------------------------------------\n\nTITLE: Implementation Condition Node Example\nDESCRIPTION: A complete example of a Condition Node that checks the 'status' parameter for 'success' and the '__conveyor_api_return_type_error__' parameter for 'hardware'.  It routes to different nodes based on these conditions, including a default path.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/condition-node.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"condition_node\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"go_if_const\",\n        \"conditions\": [\n          {\n            \"param\": \"status\",\n            \"const\": \"success\",\n            \"fun\": \"eq\",\n            \"cast\": \"string\"\n          }\n        ],\n        \"to_node_id\": \"success_node\"\n      },\n      {\n        \"type\": \"go_if_const\",\n        \"conditions\": [\n          {\n            \"param\": \"__conveyor_api_return_type_error__\",\n            \"const\": \"hardware\",\n            \"fun\": \"eq\",\n            \"cast\": \"string\"\n          }\n        ],\n        \"to_node_id\": \"retry_node\"\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"default_node\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Check Status\",\n  \"description\": \"Route task based on status and error type\",\n  \"x\": 944,\n  \"y\": 200,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: MD5 Hashing Examples\nDESCRIPTION: Examples of using the $.md5_hex() function to generate the MD5 hash (hexadecimal representation) of a string in Corezoid. The input string can be a literal value or a parameter value.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_12\n\nLANGUAGE: N/A\nCODE:\n```\n$.md5_hex(password123)           // Returns the MD5 hash in hexadecimal\n$.md5_hex({{password}})          // Hashes the 'password' parameter\n```\n\n----------------------------------------\n\nTITLE: Cloning the Corezoid AI Documentation Repository\nDESCRIPTION: This bash script clones the Corezoid AI documentation repository from GitHub and navigates into the newly created directory. It's a necessary first step for setting up the development environment.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/corezoid/corezoid-ai-doc.git\ncd corezoid-ai-doc\n```\n\n----------------------------------------\n\nTITLE: Task with Nested Data - JSON\nDESCRIPTION: Shows a Corezoid task with a nested data structure, including customer details, order information, and payment details. The 'data' object contains nested objects (customer, order, payment) and arrays (order.items), demonstrating complex data organization within a task.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-examples.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"task_id\": \"TASK_24680\",\n  \"ref\": \"REF_13579\",\n  \"status\": \"processing\",\n  \"user_id\": \"USER_86420\",\n  \"create_time\": 1617283500,\n  \"change_time\": 1617283600,\n  \"node_id\": \"NODE_22222\",\n  \"node_prev_id\": \"NODEPREV_33333\",\n  \"data\": {\n    \"customer\": {\n      \"id\": \"CUS_12345\",\n      \"name\": \"John Doe\",\n      \"email\": \"john.doe@example.com\",\n      \"address\": {\n        \"street\": \"123 Main St\",\n        \"city\": \"Anytown\",\n        \"state\": \"CA\",\n        \"zip\": \"12345\"\n      }\n    },\n    \"order\": {\n      \"id\": \"ORD_67890\",\n      \"items\": [\n        {\n          \"product_id\": \"PROD_11111\",\n          \"name\": \"Product 1\",\n          \"quantity\": 2,\n          \"price\": 29.99\n        },\n        {\n          \"product_id\": \"PROD_22222\",\n          \"name\": \"Product 2\",\n          \"quantity\": 1,\n          \"price\": 49.99\n        }\n      ],\n      \"total\": 109.97,\n      \"tax\": 8.8,\n      \"shipping\": 5.0,\n      \"grand_total\": 123.77\n    },\n    \"payment\": {\n      \"method\": \"credit_card\",\n      \"status\": \"approved\",\n      \"transaction_id\": \"TXN_54321\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Markdown Files with Prettier\nDESCRIPTION: These npm scripts use Prettier to format Markdown files within the repository, ensuring consistent styling. `npm run format` and `npm run format:all` format the files, while `npm run format:check` checks for formatting issues without modifying the files.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format        # Format all markdown files in the repository\nnpm run format:check  # Check if markdown files are properly formatted without making changes\nnpm run format:all    # Format all markdown files (alias for format)\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm\nDESCRIPTION: This bash command installs all the necessary dependencies for the Corezoid AI documentation project, as defined in the `package.json` file. This includes tools for documentation formatting, validation, and building.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Aging Analysis with Code Node\nDESCRIPTION: This JavaScript code snippet calculates the age of a task and sets its priority based on its age. It accesses the `create_time` metadata field and calculates the age in seconds.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-metadata.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(data) {\n  const currentTime = Math.floor(Date.now() / 1000);\n  data.age_in_seconds = currentTime - parseInt(data.__root.create_time);\n  data.priority = data.age_in_seconds > 3600 ? \"high\" : \"normal\";\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Markdown Files with npm\nDESCRIPTION: This command formats the markdown files in the project using npm.  It ensures consistent formatting across all documentation files, following the project's style guide. This utilizes Prettier.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: MD5 Hashing with CryptoJS in Corezoid\nDESCRIPTION: This snippet shows how to create an MD5 hash using the CryptoJS library within a Corezoid Code node. It imports the md5.js library, generates an MD5 hash of the data.password value, and saves the hash to the data.password_hash field.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  var CryptoJS = require(\"libs/md5.js\");\n\n  // Create an MD5 hash\n  var hash = CryptoJS.MD5(data.password).toString();\n\n  data.password_hash = hash;\n  \n```\n\n----------------------------------------\n\nTITLE: Timezone Conversion with Moment Timezone in Corezoid\nDESCRIPTION: This snippet demonstrates timezone conversion using the moment-timezone.js library within a Corezoid Code node. It imports moment-timezone.js. It converts a timestamp to a specific timezone and gets the current time in a different timezone, storing the results in the data object.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  var moment = require(\"libs/moment-timezone.js\");\n\n  // Convert timestamp to specific timezone\n  var date = moment(data.timestamp).tz(\"Europe/Kiev\");\n  data.local_time = date.format(\"YYYY-MM-DD HH:mm:ss\");\n\n  // Get current time in different timezone\n  data.ny_time = moment().tz(\"America/New_York\").format(\"HH:mm:ss\");\n\n  \n```\n\n----------------------------------------\n\nTITLE: Building Documentation with npm\nDESCRIPTION: This command builds the documentation using npm.  It compiles the markdown files and other assets into a deployable documentation website or package. It is a crucial step before deploying the documentation.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:docs\n```\n\n----------------------------------------\n\nTITLE: Start Node Basic Authentication\nDESCRIPTION: This JSON snippet shows how to configure a Start node with Basic Authentication, requiring credentials for API access. The `login` and `secret` parameters store the username and password, respectively, for authentication.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/start-node.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"options\": \"{\\\"direct_url\\\":true,\\\"type_auth\\\":\\\"basic\\\",\\\"login\\\":\\\"username\\\",\\\"secret\\\":\\\"password\\\"}\"}\n```\n\n----------------------------------------\n\nTITLE: Running Schema Validation via npm\nDESCRIPTION: This snippet shows how to run schema validation on a Corezoid process JSON file using an npm script. This helps ensure that the JSON conforms to the expected schema.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm run validate:schema\n```\n\n----------------------------------------\n\nTITLE: $.map() for Bitwise Operations in Corezoid\nDESCRIPTION: This snippet demonstrates how to use the $.map() function in a Corezoid Set Parameter node to perform bitwise operations (band, bxor, bsl, bsr) on an array of numbers.  It takes an array named 'newtest' as input, applies the specified bitwise operation with the value 2 to each element, and stores the result as a string.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_39\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"band\": \"$.map(fun(Item) -> Item band 2 end, {{newtest}})\",\n    \"bxor\": \"$.map(fun(Item) -> Item bxor 2 end, {{newtest}})\",\n    \"bsl\": \"$.map(fun(Item) -> Item bsl 2 end, {{newtest}})\",\n    \"bsr\": \"$.map(fun(Item) -> Item bsr 2 end, {{newtest}})\"\n  },\n  \"extra_type\": {\n    \"band\": \"string\",\n    \"bxor\": \"string\",\n    \"bsl\": \"string\",\n    \"bsr\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: End Node Error Status Configuration in Corezoid (JSON)\nDESCRIPTION: This snippet shows the JSON configuration for setting an End Node status to 'error' in Corezoid. The 'extra' field determines the visual representation, indicating a failure or error in the task's processing. This setting is crucial for identifying and addressing issues within the workflow.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/end-node.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"extra\": \"{\\\"modeForm\\\":\\\"collapse\\\",\\\"icon\\\":\\\"error\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Condition Structure in JSON\nDESCRIPTION: This snippet shows an incorrect structure for the `condition` property in a Corezoid JSON process.  The `condition` property must include both `logics` and `semaphors` arrays.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// INCORRECT\n\"condition\": {\n  \"logics\": [\n    // logic definitions\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Callback Node Configuration Example\nDESCRIPTION: This JSON snippet shows a configuration example for a Waiting for Callback node in Corezoid. It includes the node's ID, type, condition (specifying the `api_callback` logic and a timeout semaphore), title, description, and coordinates on the canvas. It demonstrates how to pause execution until an external callback is received or a timeout occurs.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/waiting-for-callback-node.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"wait_callback_example\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_callback\",\n        \"is_sync\": true,\n        \"obj_id_path\": \"data.test\"\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_after_callback\"\n      }\n    ],\n    \"semaphors\": [\n      {\n        \"type\": \"time\",\n        \"value\": 86400,\n        \"dimension\": \"day\",\n        \"to_node_id\": \"timeout_error_node\"\n      }\n    ]\n  },\n  \"title\": \"Wait for External Trigger\",\n  \"description\": \"Pauses the process until an external callback is received or a 1-day timeout occurs.\",\n  \"x\": 576,\n  \"y\": 188,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Property Check Filtering with $.filter() in Erlang\nDESCRIPTION: Shows filtering objects based on the type of their properties using proplists functions within $.filter(). Filters objects with an integer or float 'test' property.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_31\n\nLANGUAGE: Erlang\nCODE:\n```\n$.filter(fun(Item) ->\n  Test = proplists:get_value(<<\"test\">>, Item),\n  is_integer(Test)\nend, {{objects}})\n$.filter(fun(Item) ->\n  Test = proplists:get_value(<<\"test\">>, Item),\n  is_float(Test)\nend, {{objects}})\n```\n\n----------------------------------------\n\nTITLE: Conditional Branching Pattern\nDESCRIPTION: Demonstrates a process flow that takes different paths based on conditions.  Useful for workflows with distinct paths based on data values or states.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-development-guide.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n                    ┌─── [condition A] ──→ Path A ──→┐\n                    │                               │\nStart Node → Condition Node ─┼─── [condition B] ──→ Path B ──→┼─→ End Node\n                    │                               │\n                    └─── [default] ──→ Path C ──→┘\n```\n\n----------------------------------------\n\nTITLE: Process JSON Definition Example\nDESCRIPTION: This JSON snippet provides an example of a process definition file within a Corezoid ZIP package. It includes metadata such as object type, ID, parent ID, title, description, status, and the process scheme (nodes and web settings). This file defines the complete process logic and configuration.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/folders/zip-format.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"obj_type\": 1,\n  \"obj_id\": 1646041,\n  \"parent_id\": 612594,\n  \"title\": \"Calculator Main Process v2.0\",\n  \"description\": \"Entry point for calculator operations - routes to specific operation processes\",\n  \"status\": \"active\",\n  \"params\": [...],\n  \"ref_mask\": true,\n  \"conv_type\": \"process\",\n  \"scheme\": {\n    \"nodes\": [...],\n    \"web_settings\": [[],[]]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Task with Error Status - JSON\nDESCRIPTION: Shows a Corezoid task with an 'error' status and associated error details in the 'data' object. The 'error' object contains 'code', 'message', and 'details' fields, demonstrating how to represent error information within a task.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-examples.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"task_id\": \"TASK_97531\",\n  \"ref\": \"REF_86420\",\n  \"status\": \"error\",\n  \"user_id\": \"USER_13579\",\n  \"create_time\": 1617283900,\n  \"change_time\": 1617284000,\n  \"node_id\": \"NODE_66666\",\n  \"node_prev_id\": \"NODEPREV_77777\",\n  \"data\": {\n    \"customer_id\": \"12345\",\n    \"amount\": 100.5,\n    \"currency\": \"USD\",\n    \"description\": \"Monthly subscription\",\n    \"error\": {\n      \"code\": \"PAYMENT_FAILED\",\n      \"message\": \"Payment authorization failed\",\n      \"details\": \"Insufficient funds\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore for Timeout Handling (JSON)\nDESCRIPTION: This JSON snippet shows how to add a time semaphore for timeout handling in a Call Process node. This ensures that the process does not wait indefinitely for a response from the called process.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n\"semaphors\": [\n  {\n    \"type\": \"time\",\n    \"value\": 60,\n    \"dimension\": \"sec\",\n    \"to_node_id\": \"process_timeout_node_id\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Stringifying Objects in Set Parameters (JSON)\nDESCRIPTION: Demonstrates how to correctly stringify object values in a Set Parameters node's extra field. It shows proper escaping of quotes inside the JSON string, using single quotes around the entire string, and setting the correct data type in extra_type.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-node.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"set_object_param_example\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"set_param\",\n        \"extra\": {\n          \"simple_param\": \"simple_value\",\n          \"object_param\": \"{\\\"key\\\":\\\"value\\\",\\\"nested\\\":{\\\"key2\\\":\\\"value2\\\"}}\",\n          \"array_param\": \"[1,2,3,4]\",\n          \"dynamic_object\": \"{\\\"id\\\":{{user_id}},\\\"name\\\":\\\"{{user_name}}\\\"}\"\n        },\n        \"extra_type\": {\n          \"simple_param\": \"string\",\n          \"object_param\": \"object\",\n          \"array_param\": \"array\",\n          \"dynamic_object\": \"object\"\n        },\n        \"err_node_id\": \"error_node_id\"\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_id\"\n      }\n    ]\n  },\n  \"title\": \"Set Object Parameters\",\n  \"description\": \"Sets parameters with properly stringified object values\"\n}\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Examples\nDESCRIPTION: Examples of using the $.date() function to format the current date and time in Corezoid. Shows how to format the date, date and time, and add days to the current date using format specifiers.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_6\n\nLANGUAGE: N/A\nCODE:\n```\n$.date(%y-%m-%d)                 // Returns: \"2025-04-07\" (current date)\n$.date(%y-%m-%d %h:%i:%s)        // Returns: \"2025-04-07 18:15:30\" (current date and time)\n$.date(%y-%m-%d+1-%h:%i:%s)      // Adds 1 day to the current date\n```\n\n----------------------------------------\n\nTITLE: Running Node Repositioning via npm\nDESCRIPTION: This snippet shows how to run an npm script to automatically reposition nodes in a Corezoid process according to best practices.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpm run reposition-nodes\n```\n\n----------------------------------------\n\nTITLE: Get from Queue Node Configuration Example JSON\nDESCRIPTION: Provides a complete configuration example for a Get from Queue node in Corezoid. It retrieves tasks from a specified Queue node in another process, ordered by ascending creation time. The configuration includes parameters for process ID, queue node ID, error handling, and retrieval order.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/get-from-queue-node.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"get_queue_example\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_get_task\",\n        \"err_node_id\": \"error_condition_node\",\n        \"order_by\": \"ASC\",\n        \"conv_id\": 1023406,\n        \"obj_to_id\": null,\n        \"user_id\": 56171,\n        \"node_id\": \"queue_node_id_in_target\"\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_in_flow\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Get Task from Processing Queue\",\n  \"description\": \"Retrieves the oldest task (ASC order) from the queue node 'queue_node_id_in_target' in Process 1023406.\",\n  \"x\": 392,\n  \"y\": 200,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Default Escalation Pattern - Text\nDESCRIPTION: This represents the error escalation pattern that can be automatically generated for API Call nodes in Corezoid. It outlines the roles of the Condition Node, Delay Node, and Error End Node in handling hardware and software errors.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/api-call-node.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n                           ┌─── [hardware error] ──→ Delay Node ──→ Back to API Call\n                           │\nAPI Call Node ──→ Condition Node ─┤\n                           │\n                           └─── [software error] ──→ Error End Node\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Filtering with $.filter() in Erlang\nDESCRIPTION: Demonstrates advanced filtering using pattern matching within $.filter(). This example keeps only records (lists) that have a type field with the value 'user'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_35\n\nLANGUAGE: Erlang\nCODE:\n```\n$.filter(fun(Item) ->\n  case Item of\n    [{<<\"type\">>, <<\"user\">>} | _] -> true;\n    _ -> false\n  end\nend, {{records}})\n```\n\n----------------------------------------\n\nTITLE: Creating Process Structure JavaScript\nDESCRIPTION: This JavaScript function creates the basic structure of a Corezoid process, including nodes and connections. It initializes a process structure object, adds a start node, and handles parameter initialization for optional parameters by adding a parameter initialization node and connecting it to the start node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to create process structure\nfunction createProcessStructure(requirements) {\n  const processStructure = {\n    nodes: [],\n    connections: []\n  };\n\n  // Add Start node\n  const startNode = createStartNode();\n  processStructure.nodes.push(startNode);\n\n  // Add parameter initialization for optional parameters\n  const paramInitNode = createParameterInitNode(requirements.inputs);\n  if (paramInitNode) {\n    processStructure.nodes.push(paramInitNode);\n    processStructure.connections.push(createConnection(startNode.id, paramInitNode.id));\n  }\n\n  // Add main process logic nodes\n  // Add End nodes\n\n  return processStructure;\n}\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration in JSON\nDESCRIPTION: Configures a time semaphore for a Copy Task node. If the copy operation exceeds the specified time, the task is routed to a timeout node. The `dimension` parameter supports 'sec', 'min', 'hour', and 'day'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/copy-task-node.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"time\",\n      \"value\": 30,\n      \"dimension\": \"sec\",\n      \"to_node_id\": \"copy_timeout_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Call Process with Time Semaphore (Timeout)\nDESCRIPTION: Shows how to implement a timeout for a Call Process node using a time semaphore. If the called process doesn't respond within a specified time, the task is routed to a timeout error node, preventing hangs.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/call-process-node.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"call_process_with_timeout\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_rpc\",\n        \"conv_id\": 1023395,\n        \"err_node_id\": \"error_condition_node\",\n        \"extra\": {},\n        \"extra_type\": {},\n        \"group\": \"all\",\n        \"user_id\": 56171\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_in_flow\"\n      }\n    ],\n    \"semaphors\": [\n      {\n        \"type\": \"time\",\n        \"value\": 10,\n        \"dimension\": \"min\",\n        \"to_node_id\": \"timeout_error_node\"\n      }\n    ]\n  },\n  \"title\": \"Call Process with Timeout\",\n  \"description\": \"Calls Process 1023395 with a 10-minute timeout\",\n  \"x\": 576,\n  \"y\": 200,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Example Coordinates - Linear Process with Error Handling\nDESCRIPTION: This code snippet provides example X,Y coordinates for nodes in a simple linear Corezoid process with error handling. Note the X-offset of +100px for the Start and End nodes to achieve visual alignment with other nodes. This offset compensates for the circular shape and center-based pivot point of these node types.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/node-positioning-best-practices.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nStart Node:         X=600, Y=100    # X=600 (not 500) to align with the nodes below\nValidation Node:    X=500, Y=300\nError Node:         X=800, Y=300\nProcessing Node:    X=500, Y=500\nReply Node:         X=500, Y=700\nEnd Node:           X=600, Y=850    # X=600 (not 500) to align with the nodes above\n```\n\n----------------------------------------\n\nTITLE: Error Reply Node JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates the structure for an error reply node in Corezoid.  Similar to the success reply node, it uses `api_rpc_reply` with `key_value` mode, but the `res_data` contains `result` set to `error` along with `error_code` and `error_message` fields. The `throw_exception` flag is set to `true` to trigger exception handling.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc_reply\",\n  \"mode\": \"key_value\",\n  \"res_data\": {\n    \"result\": \"error\",\n    \"error_code\": \"{{error_code}}\",\n    \"error_message\": \"{{error_message}}\"\n  },\n  \"res_data_type\": {\n    \"result\": \"string\",\n    \"error_code\": \"string\",\n    \"error_message\": \"string\"\n  },\n  \"throw_exception\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format - JSON\nDESCRIPTION: This snippet defines the standard JSON format for error responses. It includes fields for 'result' (set to \"error\"), 'error_code', 'error_message' (a human-readable message), and optional 'error_details' providing more specific information about the error, such as the 'field' with the error, the 'invalid_value', and the 'expected' format.  This standardized format ensures consistency in error reporting across the Corezoid processes.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": \"error\",\n  \"error_code\": \"ERROR_CODE\",\n  \"error_message\": \"Human-readable error message\",\n  \"error_details\": {\n    \"field\": \"field_with_error\",\n    \"value\": \"invalid_value\",\n    \"expected\": \"expected_format\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Real Process Delay Node Configuration with Time Semaphore in Corezoid\nDESCRIPTION: This JSON snippet represents a Delay node configuration extracted from a real Corezoid process. It uses a 'time' semaphore within the 'condition.semaphors' array to achieve a 30-second delay. The 'to_node_id' specifies the node to proceed to after the delay.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/delay-node.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"67f940d582ba966c7fbc03fc\", // Unique node ID\n  \"obj_type\": 0, // Object type for Logic node\n  \"condition\": {\n    \"logics\": [], // No specific 'delay' logic type used here\n    \"semaphors\": [\n      // Delay implemented using a time semaphore\n      {\n        \"type\": \"time\", // Specifies a time-based semaphore\n        \"value\": 30, // Delay duration\n        \"dimension\": \"sec\", // Time unit (seconds)\n        \"to_node_id\": \"67f940cf513aa034c8bc79d9\" // Node to proceed to after delay (Final node in this example)\n      }\n    ]\n  },\n  \"title\": \"\", // Title was empty in the example, should be descriptive (e.g., \"Wait 30 Seconds\")\n  \"description\": \"\", // Optional description\n  \"x\": 624, // X coordinate on canvas\n  \"y\": 200, // Y coordinate on canvas\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\", // UI settings\n  \"options\": null // No specific options set\n}\n```\n\n----------------------------------------\n\nTITLE: SLA Tracking with Condition Node\nDESCRIPTION: This snippet monitors if tasks are being processed within a defined timeframe. It checks if the difference between `change_time` and `create_time` is greater than 300 seconds.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-metadata.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n$.math({{root.change_time}}-{{root.create_time}}) > 300\n```\n\n----------------------------------------\n\nTITLE: Validation Error Handling with Reply Node in Corezoid\nDESCRIPTION: This example shows how to create a dedicated error path for different validation failures, including descriptive error messages in the Reply node. It configures an error Reply node with specific error codes and messages.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/algorithm-to-process-guide.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc_reply\",\n  \"mode\": \"key_value\",\n  \"res_data\": {\n    \"result\": \"error\",\n    \"error_code\": \"INVALID_CUSTOMER_ID\",\n    \"error_message\": \"Customer ID format is invalid\"\n  },\n  \"res_data_type\": {\n    \"result\": \"string\",\n    \"error_code\": \"string\",\n    \"error_message\": \"string\"\n  },\n  \"throw_exception\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Task with Empty Data - JSON\nDESCRIPTION: Illustrates a Corezoid task with an empty data object. This demonstrates that the data object can be empty, potentially used for tasks that primarily rely on metadata or are initialized without any specific data values.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-examples.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"task_id\": \"TASK_12345\",\n  \"ref\": \"REF_54321\",\n  \"status\": \"new\",\n  \"user_id\": \"USER_98765\",\n  \"create_time\": 1617283400,\n  \"change_time\": 1617283400,\n  \"node_id\": \"NODE_11111\",\n  \"node_prev_id\": \"\",\n  \"data\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Call Node Structure (api_rpc)\nDESCRIPTION: Defines the JSON structure for an RPC Call node in Corezoid, specifying the 'type', 'conv_id', 'extra' parameters, 'extra_type' definition, and 'err_node_id'. The 'conv_id' specifies the process ID to call. 'extra' contains parameters to pass to the called process. 'extra_type' defines the data types of the parameters. 'err_node_id' identifies the node to route to in case of an error.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc\",\n  \"conv_id\": \"process_id_to_call\",\n  \"extra\": {\n    \"param1\": \"value1\",\n    \"param2\": 2\n  },\n  \"extra_type\": {\n    \"param1\": \"string\",\n    \"param2\": \"number\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Corezoid ZIP Archive Structure\nDESCRIPTION: This structure represents a typical ZIP archive used for deploying Corezoid processes.  The top-level folder has a name following the pattern `folder_{parent_id}_{timestamp}`. Inside, there's a folder named after the parent process, containing JSON files that represent the process definition and sub-processes.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_37\n\nLANGUAGE: Text\nCODE:\n```\nfolder_612594_1744388449151.zip/\n└── 612594_Calculator_v2.0.folder/\n    ├── 612594_Calculator_v2.0.folder.json\n    ├── 1646022_Calculator_Main_Process_v2.0.conv.json\n    ├── 1646023_Addition_Process_v2.0.conv.json\n    ├── 1646024_Subtraction_Process_v2.0.conv.json\n    ├── 1646025_Multiplication_Process_v2.0.conv.json\n    └── 1646026_Division_Process_v2.0.conv.json\n```\n\n----------------------------------------\n\nTITLE: Node JSON Structure in Corezoid\nDESCRIPTION: This JSON snippet represents a typical node structure within Corezoid. It includes essential properties such as the node's ID, object type, condition for routing, title, description, coordinates (x, y), options, and extra data. This provides a basic template for defining nodes in Corezoid process configurations.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"node_id\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"next_node_id\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Node Title\",\n  \"description\": \"Node Description\",\n  \"x\": 500,\n  \"y\": 300,\n  \"options\": {},\n  \"extra\": \"{}\"\n}\n```\n\n----------------------------------------\n\nTITLE: End Node Success Status Configuration in Corezoid (JSON)\nDESCRIPTION: This snippet shows the JSON configuration for setting an End Node status to 'success' in Corezoid. The 'extra' field determines the visual representation, indicating successful completion of the task. This is essential for reporting and analytics.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/end-node.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"extra\": \"{\\\"modeForm\\\":\\\"collapse\\\",\\\"icon\\\":\\\"success\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Access Node Sum Value in Set Parameters Node\nDESCRIPTION: Demonstrates how to access the sum value of a parameter across all tasks in a node using `{{node[NODE_ID].SumID}}`. Dependencies: The specified node ID and `SumID` parameter must exist. Input: The node ID. Output: The sum value for the node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n// Node ID = 561a272782ba961374d44178\n{{node[561a272782ba961374d44178].SumID}}\n\n// Returns amount by SumID parameter from node {{node_id}}\n{{node[{{node_id}}].SumID}}\n\n// Returns amount by SumID parameter from {{node_id}} from {{conv_id}} process\n{{conv[{{conv_id}}].node[{{node_id}}].SumID}}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Data Type Mismatch in JSON\nDESCRIPTION: This snippet shows an example of a data type mismatch between the values in `extra` and their corresponding types specified in `extra_type` within a Corezoid JSON process. The data types must align.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n// INCORRECT\n\"extra\": {\n  \"param1\": \"[1, 2, 3]\"\n},\n\"extra_type\": {\n  \"param1\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Processing Algorithm Pseudocode\nDESCRIPTION: This pseudocode outlines a basic payment processing algorithm, including input validation, customer data retrieval, balance checking, transaction creation, balance updating, and notification sending. It also includes error handling.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/algorithm-to-process-guide.md#_snippet_10\n\nLANGUAGE: Pseudocode\nCODE:\n```\nfunction processPayment(customerId, amount, currency):\n    // Validate inputs\n    if customerId is empty or invalid format:\n        return error(\"Invalid customer ID\")\n    if amount <= 0:\n        return error(\"Invalid amount\")\n    if currency not in supported currencies:\n        return error(\"Unsupported currency\")\n\n    // Get customer data\n    customer = getCustomerById(customerId)\n    if customer is null:\n        return error(\"Customer not found\")\n\n    // Check balance\n    if customer.balance < amount:\n        return error(\"Insufficient funds\")\n\n    // Process payment\n    try:\n        transaction = createTransaction(customerId, amount, currency)\n        updateBalance(customerId, customer.balance - amount)\n        sendNotification(customerId, \"Payment processed\", amount, currency)\n        return success(transaction)\n    catch (error):\n        logError(error)\n        return error(\"Payment processing failed\")\n```\n\n----------------------------------------\n\nTITLE: State Diagram Configuration Example (JSON)\nDESCRIPTION: This JSON snippet demonstrates a Set State Node configuration within a Corezoid state diagram. It represents the \"Active\" state and defines the logic for transitioning out of this state based on the value of parameter 'a'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-state-node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"61d55218513aa04bc969791a\",\n  \"obj_type\": 3,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"go_if_const\",\n        \"to_node_id\": \"64d3b1f2513aa04e113022a6\",\n        \"conditions\": [\n          {\n            \"param\": \"a\",\n            \"const\": \"1\",\n            \"fun\": \"eq\",\n            \"cast\": \"number\"\n          }\n        ]\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"61d55237513aa04bc9697cb1\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Active\",\n  \"description\": \"\",\n  \"x\": 600,\n  \"y\": 204,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Max Retry Checking Configuration (JSON)\nDESCRIPTION: This JSON snippet defines the configuration for checking the maximum number of retries.  The `go_if_const` type is used with a condition that compares the `retry_count` parameter to a constant value of `5` using the `more_or_eq` function. If the retry count is greater than or equal to 5, it directs the flow to the `max_retries_exceeded_node_id`.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"go_if_const\",\n  \"conditions\": [\n    {\n      \"param\": \"retry_count\",\n      \"const\": \"5\",\n      \"fun\": \"more_or_eq\",\n      \"cast\": \"number\"\n    }\n  ],\n  \"to_node_id\": \"max_retries_exceeded_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect JSON Escaping in JSON\nDESCRIPTION: This snippet illustrates incorrect JSON escaping within a Corezoid process JSON file. Proper escaping of quotes and special characters is essential for valid JSON.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n// INCORRECT\n\"extra\": \"{\\\"key\\\":\\\"value with \\\"quotes\\\" inside\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Start Node Configuration Example\nDESCRIPTION: This provides a complete example of a Start Node configuration in JSON format, demonstrating the minimal setup for a process entry point.  It specifies the node's ID, type, outgoing path, title, description, coordinates, UI settings, and options.  This example serves as a starting point for configuring a Start Node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/start-node.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"start_node_example\",\n  \"obj_type\": 1,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"first_node_in_process\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Start\",\n  \"description\": \"\",\n  \"x\": 492,\n  \"y\": 100,\n  \"extra\": \"{\\\"modeForm\\\":\\\"collapse\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Reply to Process Node Configuration Example (JSON)\nDESCRIPTION: This JSON snippet provides a configuration example for a Reply to Process Node in Corezoid. It demonstrates how to define the data to be returned to the calling process (`res_data`), the data type (`res_data_type`), and error handling (`throw_exception`).\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/reply-to-process-node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"reply_node_example\",\n  \"obj_type\": 0,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"api_rpc_reply\",\n        \"res_data\": {\n          \"res\": \"{{res}}\"\n        },\n        \"res_data_type\": {\n          \"res\": \"string\"\n        },\n        \"mode\": \"key_value\",\n        \"throw_exception\": false\n      },\n      {\n        \"type\": \"go\",\n        \"to_node_id\": \"final_node_id\"\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Return Result\",\n  \"description\": \"Sends the calculated 'res' value back to the calling process.\",\n  \"x\": 576,\n  \"y\": 212,\n  \"extra\": \"{\\\"modeForm\\\":\\\"expand\\\",\\\"icon\\\":\\\"\\\"}\",\n  \"options\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Success Reply Node JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates the structure for a success reply node in Corezoid. It specifies the `type` as `api_rpc_reply` with `mode` set to `key_value`. The `res_data` field includes the result as `success` and defines the data structure with specific parameters and their corresponding template placeholders.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc_reply\",\n  \"mode\": \"key_value\",\n  \"res_data\": {\n    \"result\": \"success\",\n    \"data\": {\n      \"transaction_result\": \"{{transaction_result}}\",\n      \"transaction_id\": \"{{transaction_id}}\"\n    }\n  },\n  \"res_data_type\": {\n    \"result\": \"string\",\n    \"data\": \"object\"\n  },\n  \"throw_exception\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Extra and ExtraType Match in JSON\nDESCRIPTION: This snippet demonstrates the correct matching of parameters between `extra` and `extra_type` in a Corezoid process JSON file.  Each key in `extra` should exist in `extra_type`.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n// CORRECT\n\"extra\": {\n  \"param1\": \"value1\",\n  \"param2\": \"value2\"\n},\n\"extra_type\": {\n  \"param1\": \"string\",\n  \"param2\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Node ID Reference in JSON\nDESCRIPTION: This snippet shows the correct format for a node ID reference in a Corezoid process JSON file. The `to_node_id` should be a 24-character hexadecimal string.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// CORRECT\n\"to_node_id\": \"abcdef0123456789abcdef02\"\n```\n\n----------------------------------------\n\nTITLE: Node Positioning and Documentation Building\nDESCRIPTION: These npm scripts are used for optimizing node layout in process diagrams and building the documentation for AI assistance from the Markdown sources. The `reposition-nodes` script rearranges nodes, and `build:docs` generates the documentation.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run reposition-nodes # Reposition nodes in process diagrams for optimal layout\nnpm run build:docs       # Build documentation for AI assistance from markdown sources\n```\n\n----------------------------------------\n\nTITLE: Sender Node Structure (api_sender)\nDESCRIPTION: Defines the JSON structure for a Sender node, specifying the 'type', 'extra', 'extra_type', and 'err_node_id' parameters. This node is deprecated. The 'extra' parameters and their 'extra_type' define the data to be sent in the message.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_sender\",\n  \"extra\": {\n    \"param1\": \"value1\"\n  },\n  \"extra_type\": {\n    \"param1\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Task Node Structure (api_get_task)\nDESCRIPTION: Defines the JSON structure for a Get Task node, specifying the 'type', 'conv_id', 'node_id', 'extra', 'extra_type', and 'err_node_id' parameters. The 'conv_id' and 'node_id' specify the source process and node to retrieve the task from. The 'extra' parameters and their 'extra_type' are used to filter tasks.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_get_task\",\n  \"conv_id\": \"source_process_id\",\n  \"node_id\": \"source_node_id\",\n  \"extra\": {\n    \"param1\": \"value1\"\n  },\n  \"extra_type\": {\n    \"param1\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch with Git\nDESCRIPTION: This command creates a new branch named `feature/your-feature-name` from the `develop` branch using Git.  It is a crucial step in the pull request workflow, allowing contributors to isolate their changes.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Functions in Corezoid\nDESCRIPTION: This snippet showcases how to use built-in functions in Corezoid to minimize node count. It uses `$.random`, `$.date`, and `$.md5_hex` functions to generate a random ID, get the current date, and calculate the MD5 hash of an input string.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/algorithm-to-process-guide.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"random_id\": \"$.random(100000, 999999)\",\n    \"current_date\": \"$.date('YYYY-MM-DD')\",\n    \"hash_value\": \"$.md5_hex('{{input_string}}')\"\n  },\n  \"extra_type\": {\n    \"random_id\": \"number\",\n    \"current_date\": \"string\",\n    \"hash_value\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Extra and ExtraType Mismatch in JSON\nDESCRIPTION: This snippet illustrates a mismatch between the `extra` and `extra_type` properties in a Corezoid JSON process. Each parameter in `extra` must have a corresponding entry in `extra_type`.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n// INCORRECT\n\"extra\": {\n  \"param1\": \"value1\",\n  \"param2\": \"value2\"\n},\n\"extra_type\": {\n  \"param1\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: $.filter() with Type Checking in Corezoid\nDESCRIPTION: This snippet demonstrates using the $.filter() function in a Corezoid Set Parameter node to filter an array based on type checking. It filters an array named 'b' to extract elements where the 'test' field is an integer or a float using `is_integer` and `is_float` Erlang functions.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_42\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"is_integer\": \"$.filter(fun(Item) -> Test = proplists:get_value(<<\\\"test\\\">>, Item), is_integer(Test) end, {{b}})\",\n    \"is_float\": \"$.filter(fun(Item) -> Test = proplists:get_value(<<\\\"test\\\">>, Item), is_float(Test) end, {{b}})\"\n  },\n  \"extra_type\": {\n    \"is_integer\": \"array\",\n    \"is_float\": \"array\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Call Process Node Configuration\nDESCRIPTION: Illustrates the structure of a Call Process node, emphasizing the use of 'api_rpc' for the 'type' field, 'extra' and 'extra_type' for parameters, and the inclusion of 'err_node_id' for error handling. It highlights the difference between using `type: api_rpc` vs `type: call_process`\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc\",\n  \"conv_id\": \"process_id_to_call\",\n  \"wait_for_reply\": true,\n  \"extra\": {\n    \"param1\": \"value1\",\n    \"param2\": 2\n  },\n  \"extra_type\": {\n    \"param1\": \"string\",\n    \"param2\": \"number\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Comparison Operations with $.map() in Erlang\nDESCRIPTION: Demonstrates comparison operations within $.map(), including equality checks, less than checks, greater than checks, and other comparison operators. The result of each comparison (true or false) is returned in the new array.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_25\n\nLANGUAGE: Erlang\nCODE:\n```\n$.map(fun(Item) -> Item == 2 end, {{numbers}})\n$.map(fun(Item) -> Item < 2 end, {{numbers}})\n$.map(fun(Item) -> Item > 2 end, {{numbers}})\n$.map(fun(Item) -> Item >= 2 end, {{numbers}})\n$.map(fun(Item) -> Item =< 2 end, {{numbers}})\n$.map(fun(Item) -> Item /= 2 end, {{numbers}})\n$.map(fun(Item) -> Item =:= 2 end, {{numbers}})\n$.map(fun(Item) -> Item =/= 2 end, {{numbers}})\n```\n\n----------------------------------------\n\nTITLE: Code Node Error Handling - Javascript\nDESCRIPTION: This JavaScript snippet demonstrates error handling within a Code node using a try/catch block.  It attempts to execute code logic within the 'try' block. If an exception occurs, the 'catch' block captures the error message and assigns it to the 'data.error' property before returning the 'data' object. This allows the error message to be propagated and handled further down the process.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/error-handling.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  // Code logic here\n} catch (e) {\n  data.error = e.message;\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Exponential Backoff Implementation (JavaScript)\nDESCRIPTION: This JavaScript code represents the exponential backoff logic used in a Set Parameters node before a retry. It calculates the retry delay by taking the minimum of `30 * Math.pow(2, {{retry_count || 0}})` and `3600`, effectively increasing the delay with each retry up to a maximum of 3600 seconds.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// In Set Parameters node before retry\n\"retry_delay\": \"$.math(Math.min(30 * Math.pow(2, {{retry_count || 0}}), 3600))\"\n```\n\n----------------------------------------\n\nTITLE: Count Function Usage in Corezoid\nDESCRIPTION: This code demonstrates how to use the Count function in Corezoid Set Parameters nodes to retrieve the number of tasks within a specified node. It illustrates retrieving the count based on node ID, a parameter referencing a node ID, and a node within a specific process.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-node.md#_snippet_0\n\nLANGUAGE: Corezoid Expression\nCODE:\n```\n// Node ID = 561a272782ba961374d44178\n{{node[561a272782ba961374d44178].count}}\n\n// Returns amount of tasks in the node specified by the parameter {{node_id}}\n{{node[{{node_id}}].count}}\n\n// Returns amount of tasks in the node specified by the parameter {{node_id}} from {{conv_id}} process\n{{conv[{{conv_id}}].node[{{node_id}}].count}}\n```\n\n----------------------------------------\n\nTITLE: Example Folder JSON Structure\nDESCRIPTION: An example of a JSON structure representing a folder in Corezoid. `obj_type` defines the object as a folder (0). `obj_id` represents the unique folder identifier. `parent_id` indicates the parent folder, with 0 signifying the root level. `title` specifies the folder title and `description` provides additional information.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"obj_type\": 0,\n  \"obj_id\": \"folder_id\",\n  \"parent_id\": \"parent_folder_id\", // 0 for root level folders\n  \"title\": \"Folder Title\",\n  \"description\": \"Folder Description\"\n}\n```\n\n----------------------------------------\n\nTITLE: MD5 Hashing with $.md5_hex()\nDESCRIPTION: Calculates the MD5 hash of a string and returns the hexadecimal representation within Corezoid. The example demonstrates hashing a literal string and a parameter value.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_11\n\nLANGUAGE: N/A\nCODE:\n```\n$.md5_hex(string)\n```\n\n----------------------------------------\n\nTITLE: Call Process Node with api_rpc Configuration - JSON\nDESCRIPTION: This JSON snippet shows the configuration for calling a process in Corezoid using the `api_rpc` type. It includes the `conv_id` of the target process, an error node ID (`err_node_id`), and parameter mapping for passing data (`extra` and `extra_type`). The `group` parameter is also included.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/call-process-node.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc\",\n  \"conv_id\": 1646021, // ID of the process to call, regardless of folder location\n  \"err_node_id\": \"error_node_id\",\n  \"extra\": {\n    \"p1\": \"{{p1}}\" // Pass parameters to the called process\n  },\n  \"extra_type\": {\n    \"p1\": \"string\"\n  },\n  \"group\": \"all\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using $.map() for Arithmetic in Set Parameters Node (JSON)\nDESCRIPTION: Example JSON configuration demonstrating the use of $.map() for arithmetic operations within a Set Parameters node.  It shows how to use $.map() with 'div', 'rem' and addition operators.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_38\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"test\": \"$.map(fun(Item) -> Item div 3 end, {{newtest}})\",\n    \"test1\": \"$.map(fun(Item) -> Item rem 3 end, {{newtest}})\",\n    \"test2\": \"$.map(fun(Item) -> Item +1 end, {{newtest}})\"\n  },\n  \"extra_type\": {\n    \"test\": \"string\",\n    \"test1\": \"string\",\n    \"test2\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an API Call Node in Corezoid\nDESCRIPTION: This snippet illustrates how to configure an API Call node in Corezoid. It shows how to specify the HTTP method, URL, request parameters (`extra`), parameter types (`extra_type`), and headers.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/algorithm-to-process-guide.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api\",\n  \"method\": \"POST\",\n  \"url\": \"https://api.example.com/validate\",\n  \"extra\": {\n    \"customer_id\": \"{{customer_id}}\",\n    \"amount\": \"{{amount}}\"\n  },\n  \"extra_type\": {\n    \"customer_id\": \"string\",\n    \"amount\": \"number\"\n  },\n  \"extra_headers\": {\n    \"content-type\": \"application/json; charset=utf-8\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Condition Structure in JSON\nDESCRIPTION: This snippet shows the correct structure for the `condition` property within a node in a Corezoid process JSON file. It demonstrates the inclusion of both `logics` and `semaphors` arrays.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// CORRECT\n\"condition\": {\n  \"logics\": [\n    // logic definitions\n  ],\n  \"semaphors\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration\nDESCRIPTION: This JSON snippet configures a time semaphore for a Waiting for Callback node in Corezoid. It defines a timeout period after which the task is routed to a specified node, preventing indefinite suspension. The `value` specifies the timeout duration, `dimension` the unit of time, and `to_node_id` the node to which the task is routed upon timeout.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/waiting-for-callback-node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"time\",\n      \"value\": 3600,\n      \"dimension\": \"sec\",\n      \"to_node_id\": \"callback_timeout_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SHA-1 and SHA-1 Hex Hashing\nDESCRIPTION: Calculates the SHA-1 hash of a string, returning either the raw binary result or the hexadecimal representation within Corezoid.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_13\n\nLANGUAGE: N/A\nCODE:\n```\n$.sha1(string) and $.sha1_hex(string)\n```\n\n----------------------------------------\n\nTITLE: Date Conversion with Date Utils in Corezoid\nDESCRIPTION: This snippet showcases date conversion using the dateutils.js library within a Corezoid Code node. It requires the dateutils.js library to be imported. It converts a date from one format to another and calculates a date with an offset.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  require(\"libs/dateutils.js\");\n\n  // Convert date from one format to another\n  var formattedDate = fn_convertDate(data.date, \"yyyy-MM-dd\", \"dd/MM/yyyy\");\n  data.formatted_date = formattedDate;\n\n  // Get date with offset (e.g., tomorrow)\n  var tomorrow = fn_getDate(1, \"yyyy-MM-dd\");\n  data.tomorrow = tomorrow;\n\n  \n```\n\n----------------------------------------\n\nTITLE: Bitwise Operations with $.map() in Erlang\nDESCRIPTION: Illustrates bitwise operations within $.map(), including bitwise AND, XOR, left shift, right shift, and OR. Each operation is performed on each element of the input array with the value 2.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_24\n\nLANGUAGE: Erlang\nCODE:\n```\n$.map(fun(Item) -> Item band 2 end, {{numbers}})\n$.map(fun(Item) -> Item bxor 2 end, {{numbers}})\n$.map(fun(Item) -> Item bsl 2 end, {{numbers}})\n$.map(fun(Item) -> Item bsr 2 end, {{numbers}})\n$.map(fun(Item) -> Item bor 2 end, {{numbers}})\n```\n\n----------------------------------------\n\nTITLE: Logical Operations with $.map() in Erlang\nDESCRIPTION: Illustrates the use of logical operations (XOR, AND, OR, and NOT) within $.map().  These operations are applied to boolean values within the input array.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_26\n\nLANGUAGE: Erlang\nCODE:\n```\n$.map(fun(Item) -> Item xor true end, {{booleans}})\n$.map(fun(Item) -> Item andalso true end, {{booleans}})\n$.map(fun(Item) -> Item orelse true end, {{booleans}})\n$.map(fun(Item) -> Item and true end, {{booleans}})\n$.map(fun(Item) -> Item or true end, {{booleans}})\n$.map(fun(Item) -> not Item end, {{booleans}})\n```\n\n----------------------------------------\n\nTITLE: Access Node Task Count in Set Parameters Node\nDESCRIPTION: Illustrates how to access the task count of a specific node using `{{node[NODE_ID].count}}`. Dependencies: The specified node ID must exist. Input: The node ID. Output: The task count for the node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n// Node ID = 561a272782ba961374d44178\n{{node[561a272782ba961374d44178].count}}\n\n// Returns amount of tasks in the node specified by the parameter {{node_id}}\n{{node[{{node_id}}].count}}\n\n// Returns amount of tasks in the node specified by the parameter {{node_id}} from {{conv_id}} process\n{{conv[{{conv_id}}].node[{{node_id}}].count}}\n```\n\n----------------------------------------\n\nTITLE: SHA-1 Hashing with CryptoJS in Corezoid\nDESCRIPTION: This snippet demonstrates how to generate a SHA-1 hash using the CryptoJS library within a Corezoid Code node. It imports the sha1.js library, creates a SHA-1 hash of a string, and stores the result in the data object.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  var CryptoJS = require(\"libs/sha1.js\");\n\n  // Create a SHA-1 hash\n  var hash = CryptoJS.SHA1(\"message to hash\").toString();\n\n  data.hash_result = hash;\n  \n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration JSON\nDESCRIPTION: Illustrates the configuration of a time semaphore for the Get from Queue node. This semaphore implements a timeout, routing the task to a specified node if retrieval exceeds the defined time. The configuration includes the semaphore type, timeout value, dimension, and the ID of the timeout node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/get-from-queue-node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"time\",\n      \"value\": 30,\n      \"dimension\": \"sec\",\n      \"to_node_id\": \"retrieval_timeout_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Node ID Reference in JSON\nDESCRIPTION: This snippet shows an incorrect node ID reference. References to node IDs, such as `to_node_id`, must be 24 characters long and consist of hexadecimal digits.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// INCORRECT\n\"to_node_id\": \"validate_input\"\n```\n\n----------------------------------------\n\nTITLE: Appending to Arrays with Code Node (JavaScript)\nDESCRIPTION: This JavaScript code snippet provides an example of how to append an object to an array using a Code Node in Corezoid. It initializes the array if it doesn't exist and then pushes a new object with a key-value pair to the array.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-node.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Example in a Code Node to append an object to an array\nif (!data.my_array) {\n  data.my_array = []; // Initialize if it doesn't exist\n}\ndata.my_array.push({ new_key: \"new_value\" });\n```\n\n----------------------------------------\n\nTITLE: Defining Correct Process Structure in JSON\nDESCRIPTION: This snippet demonstrates the correct root-level structure for a Corezoid process defined in a JSON file. It showcases the required properties like `obj_type`, `obj_id`, `parent_id`, `title`, `status`, `params`, and `scheme`.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"obj_type\": 1,\n  \"obj_id\": 2000001,\n  \"parent_id\": 0,\n  \"title\": \"Process Title\",\n  \"status\": \"active\",\n  \"params\": [],\n  \"scheme\": {\n    // Process scheme with nodes\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration in Corezoid\nDESCRIPTION: This JSON snippet demonstrates a time semaphore configuration in Corezoid.  It defines parameters such as type, value, dimension, and to_node_id. This semaphore type is used to implement timeouts and scheduled execution, routing tasks to a specified node after a defined time period.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n       \"type\": \"time\",\n       \"value\": 30,\n       \"dimension\": \"sec\",\n       \"to_node_id\": \"timeout_node_id\"\n     }\n```\n\n----------------------------------------\n\nTITLE: Set Parameters Node Configuration JSON\nDESCRIPTION: This JSON snippet demonstrates the structure for a Set Parameters node in Corezoid, highlighting the 'extra' and 'extra_type' parameters for setting values, and the mandatory 'err_node_id' for specifying an error handling node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/uuid-validation-requirements.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"param1\": \"value1\"\n  },\n  \"extra_type\": {\n    \"param1\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: List Operations with $.map() in Erlang\nDESCRIPTION: Shows list operations using hd (head) within $.map(). This example retrieves the first element of each list in the input array. If an element is not a list, it wraps the element in a new list.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_23\n\nLANGUAGE: Erlang\nCODE:\n```\n$.map(fun(list) ->\n  case is_list(list) of\n    true -> [hd(list)];\n    false -> [list]\n  end\nend, {{nested_lists}})\n```\n\n----------------------------------------\n\nTITLE: Valid Node ID Example\nDESCRIPTION: Shows an example of a valid node ID, which must be a 24-character hexadecimal string.  The string must contain only hexadecimal digits (0-9, a-f).\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n67f4c3f482ba966c7fc7e5d6\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding Examples\nDESCRIPTION: Examples of using the $.base64_encode() function to encode a string. The string can be a literal or a parameter value.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_9\n\nLANGUAGE: N/A\nCODE:\n```\n$.base64_encode(hello)           // Returns: \"aGVsbG8=\"\n$.base64_encode({{username}})    // Encodes the 'username' parameter\n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration in Corezoid\nDESCRIPTION: This JSON snippet illustrates a count semaphore configuration in Corezoid. It includes the type, value, and esc_node_id parameters. This semaphore type implements resource limits and concurrency control, routing tasks to an escalation node when a count threshold is reached.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n       \"type\": \"count\",\n       \"value\": 100,\n       \"esc_node_id\": \"rate_limit_node_id\"\n     }\n```\n\n----------------------------------------\n\nTITLE: Accessing Task Data in State Diagrams\nDESCRIPTION: This section provides examples of how to access task data from state diagrams using the specified syntax. It covers accessing the entire task object and specific parameters using static IDs, variables, and State Diagram aliases.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-state-node.md#_snippet_1\n\nLANGUAGE: corezoid\nCODE:\n```\n{{conv[1023399].ref[12345]}}\n```\n\nLANGUAGE: corezoid\nCODE:\n```\n{{conv[1023399].ref[12345].amount_owed}}\n```\n\nLANGUAGE: corezoid\nCODE:\n```\n{{conv[{{my_process_id}}].ref[{{my_task_ref}}].amount_owed}}\n```\n\nLANGUAGE: corezoid\nCODE:\n```\n{{conv[@user-states].ref[{{my_task_ref}}]}}\n```\n\n----------------------------------------\n\nTITLE: End Node Save Task Option Configuration in Corezoid (JSON)\nDESCRIPTION: This snippet shows the JSON configuration for enabling the 'Save Task' option in a Corezoid End Node. When enabled, task data is preserved for reporting and analysis. Disabling this option prevents task data from being retained.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/end-node.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"options\": \"{\\\"save_task\\\":true}\"\n```\n\n----------------------------------------\n\nTITLE: Object Stringification Examples (Corezoid)\nDESCRIPTION: This example demonstrates how to properly stringify JSON objects for use within a Corezoid 'set_param' node. It includes examples of static objects with escaped quotes, dynamic objects incorporating variables, and combinations of static and dynamic values. It is crucial to ensure all quotes within the stringified JSON are properly escaped.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    // Static object with escaped quotes\n    \"config\": \"{\\\"timeout\\\":30,\\\"retries\\\":3,\\\"url\\\":\\\"https://api.example.com\\\"}\",\n    \n    // Dynamic object with escaped quotes (same rules as static objects)\n    \"user_data\": \"{\\\"id\\\":{{user_id}},\\\"name\\\":\\\"{{user_name}}\\\",\\\"active\\\":true}\",\n    \n    // Combination of static and dynamic values\n    \"request_body\": \"{\\\"request_id\\\":\\\"{{request_id}}\\\",\\\"payload\\\":{\\\"items\\\":[{{items}}]}}\"\n  },\n  \"extra_type\": {\n    \"config\": \"object\",\n    \"user_data\": \"object\",\n    \"request_body\": \"object\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Schema\nDESCRIPTION: These npm scripts validate JSON files against a predefined schema, ensuring they conform to the expected structure and constraints. The scripts can be used with default schema and examples paths or customized paths using environment variables.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run validate                                    # Validate JSON schema (alias for validate:schema)\nnpm run validate:schema                             # Validate JSON examples against schema using default paths\nSCHEMA_PATH=path/to/schema.json npm run validate    # Validate using custom schema path\nEXAMPLES_PATH=path/to/examples npm run validate     # Validate using custom examples path\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Functions Examples (JSON)\nDESCRIPTION: This JSON snippet demonstrates the use of `$.sha256_hex` for hashing a password and `$.base64_encode` for encoding data using Base64. These functions enhance security and data transmission.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/playbook/create-corezoid-process.devin.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"hashed_password\": \"$.sha256_hex({{password}})\",\n\"encoded_data\": \"$.base64_encode({{data}})\"\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration (JSON)\nDESCRIPTION: Configures a time semaphore to implement a timeout for database queries. If the query does not complete within the specified time, the task is routed to a timeout node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/database-call-node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"time\",\n      \"value\": 120,\n      \"dimension\": \"sec\",\n      \"to_node_id\": \"query_timeout_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Corezoid\nDESCRIPTION: This code snippet demonstrates how to implement error handling using try/catch blocks inside a corezoid code node. If an error occurs, the error message will be stored in the data.error field.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n   \n     try {\n       // Your code here\n        catch (e) {\n       data.error = e.toString();\n       return data;\n     }\n   }\n   \n```\n\n----------------------------------------\n\nTITLE: Count Semaphore Configuration\nDESCRIPTION: This JSON configuration implements a count semaphore for concurrency control of condition evaluations. If the number of concurrent evaluations reaches 100, new tasks are routed to the 'condition_limit_node_id'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/condition-node.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"count\",\n      \"value\": 100,\n      \"esc_node_id\": \"condition_limit_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Start Node Identification\nDESCRIPTION: This JSON snippet demonstrates how to identify a node as a Start node within the Corezoid system using the `obj_type` field. Setting `obj_type` to `1` indicates that this node is the starting point for tasks entering the process.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/start-node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"obj_type\": 1}\n```\n\n----------------------------------------\n\nTITLE: Folder JSON Metadata Example\nDESCRIPTION: This JSON snippet shows the expected structure and content for a folder's metadata file within a Corezoid ZIP package. It includes properties like object type, ID, parent ID, title, and description, which are essential for defining the folder's attributes within the Corezoid platform.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/folders/zip-format.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"obj_type\": 0,\n  \"obj_id\": 612594,\n  \"parent_id\": 0,\n  \"title\": \"Calculator v2.0\",\n  \"description\": \"A refactored calculator with separate processes for each operation\"\n}\n```\n\n----------------------------------------\n\nTITLE: Start Node Default Configuration\nDESCRIPTION: This JSON block presents the default configuration automatically generated when creating a Start node in Corezoid. It includes a single outgoing path, an empty semaphores array, direct URL enabled by default, and no authentication. This configuration defines the basic structure of a Start node and the available options for customization.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/start-node.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"start_node_id\",\n  \"obj_type\": 1,\n  \"condition\": {\n    \"logics\": [\n      {\n        \"type\": \"go\",\n        \"to_node_id\": null\n      }\n    ],\n    \"semaphors\": []\n  },\n  \"title\": \"Start\",\n  \"description\": \"\",\n  \"x\": 100,\n  \"y\": 200,\n  \"extra\": \"{\\\"modeForm\\\":\\\"collapse\\\",\\\"icon\\\":\\\"start\\\"}\",\n  \"options\": \"{\\\"direct_url\\\":true,\\\"type_auth\\\":\\\"no_auth\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Monitoring in Set Parameters\nDESCRIPTION: This snippet calculates the time spent in the previous node by subtracting the `previous_change_time` from the current `change_time` using the `$.math` function.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-metadata.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"time_in_previous_node\": \"$.math({{root.change_time}}-{{previous_change_time}})\"\n}\n```\n\n----------------------------------------\n\nTITLE: Time Semaphore Configuration\nDESCRIPTION: This JSON configuration implements a time semaphore for condition evaluation. If the evaluation doesn't complete within 10 seconds, the task is routed to the 'condition_timeout_node_id'.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/condition-node.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"semaphors\": [\n    {\n      \"type\": \"time\",\n      \"value\": 10,\n      \"dimension\": \"sec\",\n      \"to_node_id\": \"condition_timeout_node_id\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Random Number Generation with Min and Max Values\nDESCRIPTION: Generates a random integer between the specified minimum and maximum values (inclusive) within Corezoid. Demonstrates how to use literals and parameter references for the min and max values. This allows dynamic ranges for random number generation.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_4\n\nLANGUAGE: N/A\nCODE:\n```\n$.random(min, max)\n```\n\n----------------------------------------\n\nTITLE: Set Parameters Node with System Variables\nDESCRIPTION: Illustrates how to use system variables, specifically `{{__now}}`, in a Set Parameters node. Input: None. Output: The `timestamp` parameter set to the current timestamp.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"timestamp\": \"{{__now}}\",\n    \"processed_flag\": true\n  },\n  \"extra_type\": {\n    \"timestamp\": \"string\",\n    \"processed_flag\": \"boolean\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: SHA-224 and SHA-224 Hex Hashing\nDESCRIPTION: Calculates the SHA-224 hash of a string, returning either the raw binary result or the hexadecimal representation within Corezoid.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_14\n\nLANGUAGE: N/A\nCODE:\n```\n$.sha224(string) and $.sha224_hex(string)\n```\n\n----------------------------------------\n\nTITLE: Basic Task Structure - JSON\nDESCRIPTION: Demonstrates a basic Corezoid task structure including task_id, ref, status, user_id, create_time, change_time, node_id, node_prev_id and a data object containing customer_id, amount, currency, and description. This is a simple example showing the main fields of a typical task.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-examples.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"task_id\": \"TASK_67890\",\n  \"ref\": \"REF_98765\",\n  \"status\": \"processed\",\n  \"user_id\": \"USER_54321\",\n  \"create_time\": 1617283200,\n  \"change_time\": 1617283300,\n  \"node_id\": \"NODE_33333\",\n  \"node_prev_id\": \"NODEPREV_44444\",\n  \"data\": {\n    \"customer_id\": \"12345\",\n    \"amount\": 100.5,\n    \"currency\": \"USD\",\n    \"description\": \"Monthly subscription\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Indentation in JSON\nDESCRIPTION: This snippet demonstrates inconsistent indentation in a JSON object, which reduces readability. Consistent indentation is essential for valid JSON format.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n// INCORRECT\n{\n\"property1\": \"value1\",\n    \"property2\": \"value2\"\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Snippet\nDESCRIPTION: This is a simple Javascript snippet used in the Corezoid's Code node configuration. The task data has a parameter 'a' set to a numeric value of 1.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ndata.a = 1;\\n\n```\n\n----------------------------------------\n\nTITLE: Running JSON Formatting via npm\nDESCRIPTION: This snippet shows how to format a JSON file using an npm script. Formatting ensures consistency and readability.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Correct Indentation in JSON\nDESCRIPTION: This snippet illustrates correct and consistent indentation within a JSON object, improving readability and maintainability of a Corezoid process JSON file.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n// CORRECT\n{\n  \"property1\": \"value1\",\n  \"property2\": \"value2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Node ID Format in JSON\nDESCRIPTION: This snippet shows the correct format for a node ID in a Corezoid process JSON file. The ID should be a 24-character hexadecimal string.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// CORRECT\n\"id\": \"abcdef0123456789abcdef01\"\n```\n\n----------------------------------------\n\nTITLE: Task Size Limit Error\nDESCRIPTION: Example error message indicating a task exceeded the maximum size limit, which can be handled by optimizing the task data.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{task_size_limit, DataSize, MAX_TASK_SIZE, TrimmedData}\n```\n\n----------------------------------------\n\nTITLE: MD5 Hashing with $.md5()\nDESCRIPTION: Calculates the MD5 hash of a string and returns the raw binary result within Corezoid.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_10\n\nLANGUAGE: N/A\nCODE:\n```\n$.md5(string)\n```\n\n----------------------------------------\n\nTITLE: Folder Hierarchy Example\nDESCRIPTION: This code snippet demonstrates a typical folder hierarchy in Corezoid, showing the relationship between a root folder, its processes, and a child folder with its processes. It highlights the use of `parent_id` to establish the hierarchical structure and the difference between folder objects (`obj_type: 0`) and process objects (`obj_type: 1`).\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/folders/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRoot Folder (parent_id: 0)\n├── Process A\n├── Process B\n└── Child Folder (parent_id: Root Folder ID)\n    ├── Process C\n    └── Process D\n```\n\n----------------------------------------\n\nTITLE: No Redundant Parameter Validation in JSON\nDESCRIPTION: This snippet illustrates the correct approach of not performing redundant parameter validation for `required` parameters in a Corezoid process JSON file. Because Corezoid's API handles the validation, there's no need for explicit checks within the process flow.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n// CORRECT - No redundant validation\n{\n  \"params\": [\n    {\n      \"name\": \"input_param\",\n      \"type\": \"string\",\n      \"flags\": [\"required\", \"input\"]\n    }\n  ],\n  \"scheme\": {\n    \"nodes\": [\n      // Process the input directly without checking if it exists\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Data Transformation in Corezoid\nDESCRIPTION: This snippet demonstrates basic data transformation operations within a Corezoid Code node. It adds a new field (greeting) and transforms an existing field (amount) by calculating the amount with tax.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/code-node-libraries.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n   \n  // Add a new field\n  data.greeting = \"Hello, \" + (data.name || \"World\");\n\n  // Transform existing data\n  if (data.amount) {\n    data.amount_with_tax = data.amount * 1.2;\n  }\n\n  \n```\n\n----------------------------------------\n\nTITLE: Mapping Array Elements with $.map() in Erlang\nDESCRIPTION: Applies a given Erlang function to each element of the input array and returns a new array containing the results of each function application. The function must be a valid Erlang function expression. The array parameter must be an actual array, or the result will be empty.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_18\n\nLANGUAGE: Erlang\nCODE:\n```\n$.map(fun(item) -> expression end, {{array}})\n```\n\n----------------------------------------\n\nTITLE: Redundant Parameter Validation in JSON\nDESCRIPTION: This snippet demonstrates redundant parameter validation where a parameter is marked as `required` but is also explicitly checked for existence within the process flow. Corezoid handles required parameter validation, making explicit checks unnecessary.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n// INCORRECT - Redundant validation\n{\n  \"params\": [\n    {\n      \"name\": \"input_param\",\n      \"type\": \"string\",\n      \"flags\": [\"required\", \"input\"]\n    }\n  ],\n  \"scheme\": {\n    \"nodes\": [\n      // Node that checks if input_param exists\n      {\n        \"title\": \"Validate Input\",\n        \"condition\": {\n          \"logics\": [\n            {\n              \"type\": \"go_if_const\",\n              \"conditions\": [\n                {\n                  \"fun\": \"eq\",\n                  \"const\": \"\",\n                  \"param\": \"input_param\",\n                  \"cast\": \"string\"\n                }\n              ]\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Reply Node Structure (api_rpc_reply)\nDESCRIPTION: Defines the JSON structure for an RPC Reply node, specifying the 'type', 'res_data', 'res_data_type', and 'throw_exception' parameters. The 'res_data' holds the data to be returned. The 'res_data_type' defines the data types of the returned data. 'throw_exception' is a boolean flag indicating whether to throw an exception.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_rpc_reply\",\n  \"res_data\": {\n    \"param1\": \"value1\",\n    \"param2\": 2\n  },\n  \"res_data_type\": {\n    \"param1\": \"string\",\n    \"param2\": \"number\"\n  },\n  \"throw_exception\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Task Flow Tracking Example\nDESCRIPTION: This JSON configuration defines a Set Parameters node that tracks a task's path through a process using the `prev_node_id` and `node_id` metadata fields.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-metadata.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"mode\": \"key_value\",\n  \"extra\": {\n    \"node_path\": \"{{node_path}}→{{root.prev_node_id}}→{{root.node_id}}\"\n  },\n  \"extra_type\": {\n    \"node_path\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sum Node Structure (api_sum)\nDESCRIPTION: Defines the JSON structure for a Sum node, specifying the 'type', 'extra', and 'err_node_id' parameters. The 'extra' parameters define the operands and operation for the numeric calculation. 'result_param' is the parameter where the result is stored.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_sum\",\n  \"extra\": {\n    \"result_param\": \"total\",\n    \"operand1\": \"{{value1}}\",\n    \"operand2\": \"{{value2}}\",\n    \"operation\": \"+\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: User Attribution with Condition Node\nDESCRIPTION: This snippet demonstrates how to implement user-specific logic by checking the `user_id` metadata field.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-metadata.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nroot.user_id == \"512\"\n```\n\n----------------------------------------\n\nTITLE: Callback Node Structure (api_callback)\nDESCRIPTION: Defines the JSON structure for a Callback node, specifying the 'type', 'is_sync', and 'obj_id_path' parameters. The 'is_sync' parameter indicates whether the callback is synchronous. The 'obj_id_path' specifies the path to the callback ID.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_callback\",\n  \"is_sync\": true,\n  \"obj_id_path\": \"callback_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Start Node Default Title\nDESCRIPTION: This example illustrates the default title assigned to a Start node in Corezoid.  The title is automatically set to \"Start\", but users can override it with a more descriptive name to indicate the process's purpose.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/start-node.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"title\": \"Start\"}\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic Based on Origin\nDESCRIPTION: This snippet demonstrates conditional logic based on the previous node ID. It checks if the task came from a specific node.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-metadata.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nroot.prev_node_id == \"67f40e0682ba966c7fb151b6\"\n```\n\n----------------------------------------\n\nTITLE: Folder and Process JSON structure\nDESCRIPTION: This JSON snippet demonstrates the structure for representing folders and processes in Corezoid.  `obj_type: 0` indicates a folder, and `obj_type: 1` indicates a process.  The `parent_id` field defines the folder hierarchy.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/call-process-node.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"obj_type\": 0, // 0 indicates a folder\n    \"obj_id\": 612585, // Unique identifier for the folder\n    \"parent_id\": 0, // 0 for root folders, another folder's obj_id for child folders\n    \"title\": \"parent\", // Folder name\n    \"description\": \"\" // Optional description\n\n  },\n  {\n    \"obj_type\": 1, // 1 indicates a process\n    \"obj_id\": 1646020, // Unique identifier for the process\n    \"parent_id\": 612585, // The obj_id of the parent folder\n    \"title\": \"process-1\", // Process name\n    \"description\": \"\",\n    \"status\": \"active\",\n    \"params\": [],\n    \"ref_mask\": true,\n    \"conv_type\": \"process\",\n    \"scheme\": {\n      // Process scheme with nodes\n    }\n\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sequential Process Pattern\nDESCRIPTION: Illustrates a linear process flow with tasks executed in sequence from start to end. Best suited for simple workflows with minimal decision points.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-development-guide.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nStart Node → Process Node 1 → Process Node 2 → ... → Process Node N → End Node\n```\n\n----------------------------------------\n\nTITLE: Set Parameters Node with Dynamic Keys\nDESCRIPTION: Demonstrates the use of dynamic keys in a Set Parameters node. The key is determined by the value of the `dynamic_key` parameter.  Dependency: The `dynamic_key` parameter must exist. Input: Value of the parameter `dynamic_key`. Output: Setting a parameter with the dynamic key and the specified value.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-dynamic-values.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"set_param\",\n  \"extra\": {\n    \"{{dynamic_key}}\": \"value\",\n    \"{{user.preferred_field}}\": \"important_value\"\n  },\n  \"extra_type\": {\n    \"{{dynamic_key}}\": \"string\",\n    \"{{user.preferred_field}}\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Schema with npm\nDESCRIPTION: This command validates the JSON schema (if applicable) using npm.  It ensures that the JSON files used in the documentation adhere to a predefined structure and format.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run validate:schema\n```\n\n----------------------------------------\n\nTITLE: Reply Node Structure (api_reply)\nDESCRIPTION: Defines the JSON structure for a Reply node, specifying the 'type', 'extra', 'extra_type', and 'err_node_id' parameters. The 'extra' parameters and their 'extra_type' define the data to be sent as a response.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_reply\",\n  \"extra\": {\n    \"param1\": \"value1\",\n    \"param2\": 2\n  },\n  \"extra_type\": {\n    \"param1\": \"string\",\n    \"param2\": \"number\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Data Type Match in JSON\nDESCRIPTION: This snippet demonstrates the correct alignment of data types between the values in the `extra` property and their corresponding type definitions in `extra_type` within a Corezoid process JSON file.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n// CORRECT\n\"extra\": {\n  \"param1\": \"[1, 2, 3]\"\n},\n\"extra_type\": {\n  \"param1\": \"array\"\n}\n```\n\n----------------------------------------\n\nTITLE: Proplists Functions with $.map() in Erlang\nDESCRIPTION: Demonstrates extracting values from proplists (property lists) using the proplists module within $.map().  This example extracts the value associated with the key \"key\" from each proplist, returning a default value if the key is not found.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_22\n\nLANGUAGE: Erlang\nCODE:\n```\n$.map(fun(obj) ->\n  proplists:get_value(<<\"key\">>, obj, <<\"default\">>)\nend, {{objects}})\n```\n\n----------------------------------------\n\nTITLE: Proplists Functions Filtering with $.filter() in Erlang\nDESCRIPTION: Illustrates using proplists functions (proplists:is_defined) within $.filter(). This example keeps only objects that have a specific key defined.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_33\n\nLANGUAGE: Erlang\nCODE:\n```\n$.filter(fun(obj) ->\n  proplists:is_defined(<<\"required_key\">>, obj)\nend, {{objects}})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Node ID Format in JSON\nDESCRIPTION: This snippet illustrates an example of an incorrectly formatted node ID in a Corezoid JSON process. Node IDs must be exactly 24 characters long and consist of hexadecimal digits. This example shows a string that is not the correct length.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/common-validation-errors.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// INCORRECT\n\"id\": \"start_node\"\n```\n\n----------------------------------------\n\nTITLE: Binary Operations Filtering with $.filter() in Erlang\nDESCRIPTION: Demonstrates using binary operations (binary:match) within $.filter() to filter strings. This example keeps only strings that contain the substring \"search\".\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/nodes/set-parameters-built-in-functions.md#_snippet_32\n\nLANGUAGE: Erlang\nCODE:\n```\n$.filter(fun(str) ->\n  case binary:match(str, <<\"search\">>) of\n    nomatch -> false;\n    _ -> true\n  end\nend, {{texts}})\n```\n\n----------------------------------------\n\nTITLE: Queue Node Structure (api_queue)\nDESCRIPTION: Defines the JSON structure for a Queue node, specifying the 'type', 'extra', and 'extra_type' parameters. The 'extra' parameters and their 'extra_type' define the data to be added to the queue.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_queue\",\n  \"extra\": {\n    \"param1\": \"value1\"\n  },\n  \"extra_type\": {\n    \"param1\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Task with Null Values - JSON\nDESCRIPTION: Demonstrates a Corezoid task containing null values in a nested data structure.  It shows how null values are used in fields like apartment and billing_address under order_details, and push under preferences.notifications, indicating the absence of data or an uninitialized state.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/tasks/task-examples.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"task_id\": \"TASK_86420\",\n  \"ref\": \"REF_97531\",\n  \"status\": \"processed\",\n  \"user_id\": \"USER_24680\",\n  \"create_time\": 1617284100,\n  \"change_time\": 1617284200,\n  \"node_id\": \"NODE_88888\",\n  \"node_prev_id\": \"NODEPREV_99999\",\n  \"data\": {\n    \"customer_id\": \"12345\",\n    \"email\": \"customer@example.com\",\n    \"phone\": \"\",\n    \"order_details\": {\n      \"shipping_address\": {\n        \"street\": \"123 Main St\",\n        \"city\": \"Anytown\",\n        \"state\": \"CA\",\n        \"zip\": \"12345\",\n        \"apartment\": null\n      },\n      \"billing_address\": null\n    },\n    \"preferences\": {\n      \"notifications\": {\n        \"email\": true,\n        \"sms\": false,\n        \"push\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Node Structure (api_form)\nDESCRIPTION: Defines the JSON structure for a Form node, specifying the 'type', 'extra', 'extra_type', and 'err_node_id' parameters. This node is deprecated. The 'extra' parameters and their 'extra_type' define the data associated with the form.\nSOURCE: https://github.com/corezoid/corezoid-ai-doc/blob/main/src/process/process-json-validation.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api_form\",\n  \"extra\": {\n    \"param1\": \"value1\"\n  },\n  \"extra_type\": {\n    \"param1\": \"string\"\n  },\n  \"err_node_id\": \"error_node_id\"\n}\n```"
  }
]