[
  {
    "owner": "allaboutapps",
    "repo": "go-starter",
    "content": "TITLE: Migrating the Database\nDESCRIPTION: This command migrates the database schema to the latest version.  It applies any pending database migrations to ensure the database is up-to-date with the application's requirements.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\napp db migrate\n```\n\n----------------------------------------\n\nTITLE: Setting the Go Module Name (Bash)\nDESCRIPTION: This snippet uses a make target to replace the default module name with your project's module name. It updates the `go.mod` file and other relevant files. The `force-module-name` command can be used to re-apply the module name change, especially after merging upstream changes.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevelopment@94242c61cf2b:/app$ # inside your container...\n\n# Set a new go project module name.\nmake set-module-name\n# allaboutapps.dev/<GIT_PROJECT>/<GIT_REPO> (internal only)\n# github.com/<USER>/<PROJECT>\n# e.g. github.com/majodev/my-service\n```\n\n----------------------------------------\n\nTITLE: Rebuilding the Project\nDESCRIPTION: This command rebuilds the project after changes to files, including generating code, formatting, building, and linting. It automates the process of updating the executable after making modifications to the source code.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Running Server with Probe, Migrate and Seed\nDESCRIPTION: This command combines multiple commands to start the server with readiness probe, database migration, and seeding. It simplifies the startup process by executing all necessary steps in a single command. The `-pms` option is a shorthand for `--probe --migrate --seed`.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\napp server --probe --migrate --seed\n```\n\nLANGUAGE: bash\nCODE:\n```\napp server -pms\n```\n\n----------------------------------------\n\nTITLE: Inserting TestResource in Go\nDESCRIPTION: This function inserts a single record into the 'test_resource' table using an executor. It handles timestamp updates and uses a cache to optimize query execution. The function utilizes `boil.Columns` to determine which columns to insert and constructs the SQL query using `fmt.Sprintf`.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Insert a single record using an executor.\n// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.\nfunc (o *TestResource) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {\n\tif o == nil {\n\t\treturn errors.New(\"models: no test_resource provided for insertion\")\n\t}\n\n\tvar err error\n\tif !boil.TimestampsAreSkipped(ctx) {\n\t\tcurrTime := time.Now().In(boil.GetLocation())\n\n\t\tif o.CreatedAt.IsZero() {\n\t\t\to.CreatedAt = currTime\n\t\t}\n\t\tif o.UpdatedAt.IsZero() {\n\t\t\to.UpdatedAt = currTime\n\t\t}\n\t}\n\n\tnzDefaults := queries.NonZeroDefaultSet(testResourceColumnsWithDefault, o)\n\n\tkey := makeCacheKey(columns, nzDefaults)\n\ttestResourceInsertCacheMut.RLock()\n\tcache, cached := testResourceInsertCache[key]\n\ttestResourceInsertCacheMut.RUnlock()\n\n\tif !cached {\n\t\twl, returnColumns := columns.InsertColumnSet(\n\t\t\ttestResourceAllColumns,\n\t\t\ttestResourceColumnsWithDefault,\n\t\t\ttestResourceColumnsWithoutDefault,\n\t\t\tnzDefaults,\n\t\t)\n\n\t\tcache.valueMapping, err = queries.BindMapping(testResourceType, testResourceMapping, wl)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcache.retMapping, err = queries.BindMapping(testResourceType, testResourceMapping, returnColumns)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif len(wl) != 0 {\n\t\t\tcache.query = fmt.Sprintf(\"INSERT INTO \\\"test_resource\\\" (\\\"%s\\\") %%sVALUES (%s)%%s\", strings.Join(wl, \"\\\",\\\"\"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))\n\t\t} else {\n\t\t\tcache.query = \"INSERT INTO \\\"test_resource\\\" %sDEFAULT VALUES%s\"\n\t\t}\n\n\t\tvar queryOutput, queryReturning string\n\n\t\tif len(cache.retMapping) != 0 {\n\t\t\tqueryReturning = fmt.Sprintf(\" RETURNING \\\"%s\\\"\", strings.Join(returnColumns, \"\\\",\\\"\"))\n\t\t}\n\n\t\tcache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)\n\t}\n\n\tvalue := reflect.Indirect(reflect.ValueOf(o))\n\tvals := queries.ValuesFromMapping(value, cache.valueMapping)\n\n\tif boil.IsDebug(ctx) {\n\t\twriter := boil.DebugWriterFrom(ctx)\n\t\tfmt.Fprintln(writer, cache.query)\n\t\tfmt.Fprintln(writer, vals)\n\t}\n\n\tif len(cache.retMapping) != 0 {\n\t\terr = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)\n\t} else {\n\t\t_, err = exec.ExecContext(ctx, cache.query, vals...)\n\t}\n\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"models: unable to insert into test_resource\")\n\t}\n\n\tif !cached {\n\t\ttestResourceInsertCacheMut.Lock()\n\t\ttestResourceInsertCache[key] = cache\n\t\ttestResourceInsertCacheMut.Unlock()\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting TestResource in Go\nDESCRIPTION: This function attempts to insert a 'TestResource' record into the database, and if a conflict occurs (based on specified conflict columns), it updates the existing record.  It uses a cache to store prepared queries. It constructs a PostgreSQL-specific upsert query, binds values, and executes it. It handles potential errors and includes debugging output.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n\t\t\treturn errors.New(\"models: unable to upsert test_resource, could not build update column list\")\n\t\t}\n\n\t\tconflict := conflictColumns\n\t\tif len(conflict) == 0 {\n\t\t\tconflict = make([]string, len(testResourcePrimaryKeyColumns))\n\t\t\tcopy(conflict, testResourcePrimaryKeyColumns)\n\t\t}\n\t\tcache.query = buildUpsertQueryPostgres(dialect, \"\\\"test_resource\\\"\", updateOnConflict, ret, update, conflict, insert)\n\n\t\tcache.valueMapping, err = queries.BindMapping(testResourceType, testResourceMapping, insert)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif len(ret) != 0 {\n\t\t\tcache.retMapping, err = queries.BindMapping(testResourceType, testResourceMapping, ret)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\tvalue := reflect.Indirect(reflect.ValueOf(o))\n\tvals := queries.ValuesFromMapping(value, cache.valueMapping)\n\tvar returns []interface{}\n\tif len(cache.retMapping) != 0 {\n\t\treturns = queries.PtrsFromMapping(value, cache.retMapping)\n\t}\n\n\tif boil.IsDebug(ctx) {\n\t\twriter := boil.DebugWriterFrom(ctx)\n\t\tfmt.Fprintln(writer, cache.query)\n\t\tfmt.Fprintln(writer, vals)\n\t}\n\tif len(cache.retMapping) != 0 {\n\t\terr = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)\n\t\tif err == sql.ErrNoRows {\n\t\t\terr = nil // Postgres doesn't return anything when there's no update\n\t\t}\n\t} else {\n\t\t_, err = exec.ExecContext(ctx, cache.query, vals...)\n\t}\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"models: unable to upsert test_resource\")\n\t}\n\n\tif !cached {\n\t\ttestResourceUpsertCacheMut.Lock()\n\t\ttestResourceUpsertCache[key] = cache\n\t\ttestResourceUpsertCacheMut.Unlock()\n\t}\n\n\treturn nil\n```\n\n----------------------------------------\n\nTITLE: Upserting TestResource in Go\nDESCRIPTION: This function attempts to insert a record into the 'test_resource' table, and if a conflict occurs, either updates the existing record or ignores the insert, depending on the `updateOnConflict` parameter. It uses boil.Columns to manage the insert and update column sets.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Upsert attempts an insert using an executor, and does an update or ignore on conflict.\n// See boil.Columns documentation for how to properly use updateColumns and insertColumns.\nfunc (o *TestResource) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {\n\tif o == nil {\n\t\treturn errors.New(\"models: no test_resource provided for upsert\")\n\t}\n\tif !boil.TimestampsAreSkipped(ctx) {\n\t\tcurrTime := time.Now().In(boil.GetLocation())\n\n\t\tif o.CreatedAt.IsZero() {\n\t\t\to.CreatedAt = currTime\n\t\t}\n\t\to.UpdatedAt = currTime\n\t}\n\n\tnzDefaults := queries.NonZeroDefaultSet(testResourceColumnsWithDefault, o)\n\n\t// Build cache key in-line uglily - mysql vs psql problems\n\tbuf := strmangle.GetBuffer()\n\tif updateOnConflict {\n\t\tbuf.WriteByte('t')\n\t} else {\n\t\tbuf.WriteByte('f')\n\t}\n\tbuf.WriteByte('.')\n\tfor _, c := range conflictColumns {\n\t\tbuf.WriteString(c)\n\t}\n\tbuf.WriteByte('.')\n\tbuf.WriteString(strconv.Itoa(updateColumns.Kind))\n\tfor _, c := range updateColumns.Cols {\n\t\tbuf.WriteString(c)\n\t}\n\tbuf.WriteByte('.')\n\tbuf.WriteString(strconv.Itoa(insertColumns.Kind))\n\tfor _, c := range insertColumns.Cols {\n\t\tbuf.WriteString(c)\n\t}\n\tbuf.WriteByte('.')\n\tfor _, c := range nzDefaults {\n\t\tbuf.WriteString(c)\n\t}\n\tkey := buf.String()\n\tstrmangle.PutBuffer(buf)\n\n\ttestResourceUpsertCacheMut.RLock()\n\tcache, cached := testResourceUpsertCache[key]\n\ttestResourceUpsertCacheMut.RUnlock()\n\n\tvar err error\n\n\tif !cached {\n\t\tinsert, ret := insertColumns.InsertColumnSet(\n\t\t\ttestResourceAllColumns,\n\t\t\ttestResourceColumnsWithDefault,\n\t\t\ttestResourceColumnsWithoutDefault,\n\t\t\tnzDefaults,\n\t\t)\n\t\tupdate := updateColumns.UpdateColumnSet(\n\t\t\ttestResourceAllColumns,\n\t\t\ttestResourcePrimaryKeyColumns,\n\t\t)\n\n\t\tif updateOnConflict && len(update) == 0 {\n\n```\n\n----------------------------------------\n\nTITLE: Updating All TestResources in Slice in Go\nDESCRIPTION: This function updates all rows in a slice of 'TestResource' with the specified column values, using an executor. It dynamically constructs the SQL query and handles errors appropriately, including those arising from missing column arguments. Primary key values are appended for the where clause.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// UpdateAll updates all rows with the specified column values, using an executor.\nfunc (o TestResourceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {\n\tln := int64(len(o))\n\tif ln == 0 {\n\t\treturn 0, nil\n\t}\n\n\tif len(cols) == 0 {\n\t\treturn 0, errors.New(\"models: update all requires at least one column argument\")\n\t}\n\n\tcolNames := make([]string, len(cols))\n\targs := make([]interface{}, len(cols))\n\n\ti := 0\n\tfor name, value := range cols {\n\t\tcolNames[i] = name\n\t\targs[i] = value\n\t\ti++\n\t}\n\n\t// Append all of the primary key values for each column\n\tfor _, obj := range o {\n\t\tpkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testResourcePrimaryKeyMapping)\n\t\targs = append(args, pkeyArgs...)\n\t}\n\n\tsql := fmt.Sprintf(\"UPDATE \\\"test_resource\\\" SET %s WHERE %s\",\n\t\tstrmangle.SetParamNames(\"\\\"\", \"\\\"\", 1, colNames),\n\t\tstrmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, testResourcePrimaryKeyColumns, len(o)))\n\n\tif boil.IsDebug(ctx) {\n\t\twriter := boil.DebugWriterFrom(ctx)\n\t\tfmt.Fprintln(writer, sql)\n\t\tfmt.Fprintln(writer, args...)\n\t}\n\tresult, err := exec.ExecContext(ctx, sql, args...)\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: unable to update all in testResource slice\")\n\t}\n\n\trowsAff, err := result.RowsAffected()\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: unable to retrieve rows affected all in update all testResource\")\n\t}\n\treturn rowsAff, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the TestResource struct in Go\nDESCRIPTION: Defines the `TestResource` struct, mapping database columns to Go struct fields. It includes fields for various data types like string, decimal, integer, boolean, and time, along with nullable versions of these types. The struct also includes fields for relationships.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype TestResource struct {\n\tID                    string            `boil:\"id\" json:\"id\" toml:\"id\" yaml:\"id\"`\n\tNumericField          types.Decimal     `boil:\"numeric_field\" json:\"numeric_field\" toml:\"numeric_field\" yaml:\"numeric_field\"`\n\tNumericNullField      types.NullDecimal `boil:\"numeric_null_field\" json:\"numeric_null_field,omitempty\" toml:\"numeric_null_field\" yaml:\"numeric_null_field,omitempty\"`\n\tIntegerField          int               `boil:\"integer_field\" json:\"integer_field\" toml:\"integer_field\" yaml:\"integer_field\"`\n\tIntegerNullField      null.Int          `boil:\"integer_null_field\" json:\"integer_null_field,omitempty\" toml:\"integer_null_field\" yaml:\"integer_null_field,omitempty\"`\n\tBoolField             bool              `boil:\"bool_field\" json:\"bool_field\" toml:\"bool_field\" yaml:\"bool_field\"`\n\tBoolNullField         null.Bool         `boil:\"bool_null_field\" json:\"bool_null_field,omitempty\" toml:\"bool_null_field\" yaml:\"bool_null_field,omitempty\"`\n\tDecimalField          types.Decimal     `boil:\"decimal_field\" json:\"decimal_field\" toml:\"decimal_field\" yaml:\"decimal_field\"`\n\tDecimalNullField      types.NullDecimal `boil:\"decimal_null_field\" json:\"decimal_null_field,omitempty\" toml:\"decimal_null_field\" yaml:\"decimal_null_field,omitempty\"`\n\tTextField             string            `boil:\"text_field\" json:\"text_field\" toml:\"text_field\" yaml:\"text_field\"`\n\tTextNullField         null.String       `boil:\"text_null_field\" json:\"text_null_field,omitempty\" toml:\"text_null_field\" yaml:\"text_null_field,omitempty\"`\n\tTimtestamptzNullField null.Time         `boil:\"timtestamptz_null_field\" json:\"timtestamptz_null_field,omitempty\" toml:\"timtestamptz_null_field\" yaml:\"timtestamptz_null_field,omitempty\"`\n\tCreatedAt             time.Time         `boil:\"created_at\" json:\"created_at\" toml:\"created_at\" yaml:\"created_at\"`\n\tUpdatedAt             time.Time         `boil:\"updated_at\" json:\"updated_at\" toml:\"updated_at\" yaml:\"updated_at\"`\n\n\tR *testResourceR `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n\tL testResourceL  `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TestResource in Go\nDESCRIPTION: This function updates an existing record in the 'test_resource' table using an executor. It handles timestamp updates and uses a cache to optimize query execution. The function utilizes `boil.Columns` to determine which columns to update and constructs the SQL query.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// Update uses an executor to update the TestResource.\n// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.\n// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.\nfunc (o *TestResource) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {\n\tif !boil.TimestampsAreSkipped(ctx) {\n\t\tcurrTime := time.Now().In(boil.GetLocation())\n\n\t\to.UpdatedAt = currTime\n\t}\n\n\tvar err error\n\tkey := makeCacheKey(columns, nil)\n\ttestResourceUpdateCacheMut.RLock()\n\tcache, cached := testResourceUpdateCache[key]\n\ttestResourceUpdateCacheMut.RUnlock()\n\n\tif !cached {\n\t\twl := columns.UpdateColumnSet(\n\t\t\ttestResourceAllColumns,\n\t\t\ttestResourcePrimaryKeyColumns,\n\t\t)\n\n\t\tif !columns.IsWhitelist() {\n\t\t\twl = strmangle.SetComplement(wl, []string{\"created_at\"})\n\t\t}\n\t\tif len(wl) == 0 {\n\t\t\treturn 0, errors.New(\"models: unable to update test_resource, could not build whitelist\")\n\t\t}\n\n\t\tcache.query = fmt.Sprintf(\"UPDATE \\\"test_resource\\\" SET %s WHERE %s\",\n\t\t\tstrmangle.SetParamNames(\"\\\"\", \"\\\"\", 1, wl),\n\t\t\tstrmangle.WhereClause(\"\\\"\", \"\\\"\", len(wl)+1, testResourcePrimaryKeyColumns),\n\t\t)\n\t\tcache.valueMapping, err = queries.BindMapping(testResourceType, testResourceMapping, append(wl, testResourcePrimaryKeyColumns...))\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t}\n\n\tvalues := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)\n\n\tif boil.IsDebug(ctx) {\n\t\twriter := boil.DebugWriterFrom(ctx)\n\t\tfmt.Fprintln(writer, cache.query)\n\t\tfmt.Fprintln(writer, values)\n\t}\n\tvar result sql.Result\n\tresult, err = exec.ExecContext(ctx, cache.query, values...)\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: unable to update test_resource row\")\n\t}\n\n\trowsAff, err := result.RowsAffected()\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: failed to get rows affected by update for test_resource\")\n\t}\n\n\tif !cached {\n\t\ttestResourceUpdateCacheMut.Lock()\n\t\ttestResourceUpdateCache[key] = cache\n\t\ttestResourceUpdateCacheMut.Unlock()\n\t}\n\n\treturn rowsAff, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All TestResources in Go\nDESCRIPTION: This function retrieves all records from the 'test_resource' table using an executor and query modifiers. It constructs a query with the table name and returns a `testResourceQuery` object for further operations.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// TestResources retrieves all the records using an executor.\nfunc TestResources(mods ...qm.QueryMod) testResourceQuery {\n\tmods = append(mods, qm.From(\"\\\"test_resource\\\"\"))\n\treturn testResourceQuery{NewQuery(mods...)}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting TestResource Slice in Go\nDESCRIPTION: This function deletes all 'TestResource' records present in a provided slice. It constructs a DELETE SQL query with a WHERE clause that matches the primary keys of all objects in the slice. It executes the query and returns the number of rows affected. It includes error handling and debugging output.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// DeleteAll deletes all rows in the slice, using an executor.\nfunc (o TestResourceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n\tif len(o) == 0 {\n\t\treturn 0, nil\n\t}\n\n\tvar args []interface{}\n\tfor _, obj := range o {\n\t\tpkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testResourcePrimaryKeyMapping)\n\t\targs = append(args, pkeyArgs...)\n\t}\n\n\tsql := \"DELETE FROM \\\"test_resource\\\" WHERE \" +\n\t\tstrmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testResourcePrimaryKeyColumns, len(o))\n\n\tif boil.IsDebug(ctx) {\n\t\twriter := boil.DebugWriterFrom(ctx)\n\t\tfmt.Fprintln(writer, sql)\n\t\tfmt.Fprintln(writer, args)\n\t}\n\tresult, err := exec.ExecContext(ctx, sql, args...)\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: unable to delete all from testResource slice\")\n\t}\n\n\trowsAff, err := result.RowsAffected()\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: failed to get rows affected by deleteall for test_resource\")\n\t}\n\n\treturn rowsAff, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting TestResource by ID in Go\nDESCRIPTION: This function deletes a single 'TestResource' record from the database based on its primary key ('id'). It constructs a DELETE SQL query, executes it using the provided executor, and returns the number of rows affected. It includes error handling and debugging output.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// Delete deletes a single TestResource record with an executor.\n// Delete will match against the primary key column to find the record to delete.\nfunc (o *TestResource) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n\tif o == nil {\n\t\treturn 0, errors.New(\"models: no TestResource provided for delete\")\n\t}\n\n\targs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), testResourcePrimaryKeyMapping)\n\tsql := \"DELETE FROM \\\"test_resource\\\" WHERE \\\"id\\\"=$1\"\n\n\tif boil.IsDebug(ctx) {\n\t\twriter := boil.DebugWriterFrom(ctx)\n\t\tfmt.Fprintln(writer, sql)\n\t\tfmt.Fprintln(writer, args...)\n\t}\n\tresult, err := exec.ExecContext(ctx, sql, args...)\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: unable to delete from test_resource\")\n\t}\n\n\trowsAff, err := result.RowsAffected()\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: failed to get rows affected by delete for test_resource\")\n\t}\n\n\treturn rowsAff, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Available Make Targets\nDESCRIPTION: This command displays all available make targets defined in the Makefile. It helps developers understand the different build and development tasks that can be performed using the make utility.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake help\n```\n\n----------------------------------------\n\nTITLE: Finding TestResource by ID in Go\nDESCRIPTION: This function retrieves a single record from the 'test_resource' table by its ID. It constructs a SQL query with a placeholder for the ID and uses the `queries.Raw` function from the boil library.  It uses `q.Bind` to populate the `testResourceObj` and handles `sql.ErrNoRows` appropriately.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// FindTestResource retrieves a single record by ID with an executor.\n// If selectCols is empty Find will return all columns.\nfunc FindTestResource(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TestResource, error) {\n\ttestResourceObj := &TestResource{}\n\n\tsel := \"*\"\n\tif len(selectCols) > 0 {\n\t\tsel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), \",\")\n\t}\n\tquery := fmt.Sprintf(\n\t\t\"select %s from \\\"test_resource\\\" where \\\"id\\\"=$1\", sel,\n\t)\n\n\tq := queries.Raw(query, iD)\n\n\terr := q.Bind(ctx, exec, testResourceObj)\n\tif err != nil {\n\t\tif errors.Cause(err) == sql.ErrNoRows {\n\t\t\treturn nil, sql.ErrNoRows\n\t\t}\n\t\treturn nil, errors.Wrap(err, \"models: unable to select from test_resource\")\n\t}\n\n\treturn testResourceObj, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Go Script with Build Tag\nDESCRIPTION: Demonstrates how to execute a Go script located in the `/scripts` directory that utilizes the `//go:build scripts` build tag.  The `-tags scripts` flag is required to include these files during compilation and execution. Without the tag, the files are excluded due to build constraints. gsdev is a wrapper tool that also runs these scripts.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# Works\ngo run -tags scripts scripts/main.go\n# go-starter development scripts\n# Utility commands while developing go-starter based projects.\n\n# Works (same as above)\ngsdev\n# go-starter development scripts\n# Utility commands while developing go-starter based projects.\n\n# Misses build tag \"scripts\"\ngo run scripts/main.go\n# package command-line-arguments\n# \timports allaboutapps.dev/aw/go-starter/scripts/cmd: build constraints exclude all Go files in /app/scripts/cmd\n```\n\n----------------------------------------\n\nTITLE: Reloading TestResource Slice in Go\nDESCRIPTION: This function reloads all 'TestResource' records in a slice by fetching their latest values from the database. It constructs a SELECT query based on the primary keys of the objects in the slice, executes it, and overwrites the original slice with the updated records.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// ReloadAll refetches every row with matching primary key column values\n// and overwrites the original object slice with the newly updated slice.\nfunc (o *TestResourceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {\n\tif o == nil || len(*o) == 0 {\n\t\treturn nil\n\t}\n\n\tslice := TestResourceSlice{}\n\tvar args []interface{}\n\tfor _, obj := range *o {\n\t\tpkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testResourcePrimaryKeyMapping)\n\t\targs = append(args, pkeyArgs...)\n\t}\n\n\tsql := \"SELECT \\\"test_resource\\\".* FROM \\\"test_resource\\\" WHERE \" +\n\t\tstrmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testResourcePrimaryKeyColumns, len(*o))\n\n\tq := queries.Raw(sql, args...)\n\n\terr := q.Bind(ctx, exec, &slice)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"models: unable to reload all in TestResourceSlice\")\n\t}\n\n\t*o = slice\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining column names for TestResource in Go\nDESCRIPTION: Defines a struct `TestResourceColumns` containing string constants representing the column names of the `TestResource` table. This is used to avoid hardcoding column names in queries and other database operations.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar TestResourceColumns = struct {\n\tID                    string\n\tNumericField          string\n\tNumericNullField      string\n\tIntegerField          string\n\tIntegerNullField      string\n\tBoolField             string\n\tBoolNullField         string\n\tDecimalField          string\n\tDecimalNullField      string\n\tTextField             string\n\tTextNullField         string\n\tTimtestamptzNullField string\n\tCreatedAt             string\n\tUpdatedAt             string\n}{\n\tID:                    \"id\",\n\tNumericField:          \"numeric_field\",\n\tNumericNullField:      \"numeric_null_field\",\n\tIntegerField:          \"integer_field\",\n\tIntegerNullField:      \"integer_null_field\",\n\tBoolField:             \"bool_field\",\n\tBoolNullField:         \"bool_null_field\",\n\tDecimalField:          \"decimal_field\",\n\tDecimalNullField:      \"decimal_null_field\",\n\tTextField:             \"text_field\",\n\tTextNullField:         \"text_null_field\",\n\tTimtestamptzNullField: \"timtestamptz_null_field\",\n\tCreatedAt:             \"created_at\",\n\tUpdatedAt:             \"updated_at\",\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a single TestResource record in Go\nDESCRIPTION: Defines the `One` method on the `testResourceQuery` type, used to retrieve a single `TestResource` record from the database based on the query.  It sets a limit of 1 on the query and binds the result to a `TestResource` struct.  It returns an error if no rows are found.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// One returns a single testResource record from the query.\nfunc (q testResourceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TestResource, error) {\n\to := &TestResource{}\n\n\tqueries.SetLimit(q.Query, 1)\n\n\terr := q.Bind(ctx, exec, o)\n\tif err != nil {\n\t\tif errors.Cause(err) == sql.ErrNoRows {\n\t\t\treturn nil, sql.ErrNoRows\n\t\t}\n\t\treturn nil, errors.Wrap(err, \"models: failed to execute a one query for test_resource\")\n\t}\n\n\treturn o, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Merging go-starter Updates (Bash)\nDESCRIPTION: This command merges the go-starter template repository into your project to receive updates. This step is only necessary for projects generated from a template. It uses `git merge` with specific flags to allow merging unrelated histories, followed by a commit.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake git-merge-go-starter\n# Attempting to execute 'git merge --no-commit --no-ff go-starter/master' into your current HEAD.\n# Are you sure? [y/N]y\n# git merge --no-commit --no-ff --allow-unrelated-histories go-starter/master\n\ngit commit -m \"Initial merge of unrelated go-starter template history\"\n```\n\n----------------------------------------\n\nTITLE: Checking TestResource Existence in Go\nDESCRIPTION: This function checks if a 'TestResource' record exists in the database based on its ID. It executes a SELECT EXISTS query and returns a boolean indicating whether the record exists. It includes error handling and debugging output.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// TestResourceExists checks if the TestResource row exists.\nfunc TestResourceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {\n\tvar exists bool\n\tsql := \"select exists(select 1 from \\\"test_resource\\\" where \\\"id\\\"=$1 limit 1)\"\n\n\tif boil.IsDebug(ctx) {\n\t\twriter := boil.DebugWriterFrom(ctx)\n\t\tfmt.Fprintln(writer, sql)\n\t\tfmt.Fprintln(writer, iD)\n\t}\n\trow := exec.QueryRowContext(ctx, sql, iD)\n\n\terr := row.Scan(&exists)\n\tif err != nil {\n\t\treturn false, errors.Wrap(err, \"models: unable to check if test_resource exists\")\n\t}\n\n\treturn exists, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gsdev in Docker Container Shell\nDESCRIPTION: This command installs the gsdev CLI tool directly into the /usr/bin directory of the Docker container, creating a shell script that executes the go run command with specific tags and arguments.  This is an alternative approach to symlinking gsdev, addressing issues with WSL2 and file permissions.  Requires root privileges to execute within the container.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nprintf '#!/bin/bash\\nset -Eeo pipefail\\ncd /app && go run -tags scripts ./scripts/main.go \"$@\"' > /usr/bin/gsdev && chmod 755 /usr/bin/gsdev\n```\n\n----------------------------------------\n\nTITLE: Deleting All TestResources in Go\nDESCRIPTION: This function deletes all rows from the 'test_resource' table based on a provided query. It sets the query for deletion, executes it, and returns the number of rows affected. It includes error handling.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n// DeleteAll deletes all matching rows.\nfunc (q testResourceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n\tif q.Query == nil {\n\t\treturn 0, errors.New(\"models: no testResourceQuery provided for delete all\")\n\t}\n\n\tqueries.SetDelete(q.Query)\n\n\tresult, err := q.Query.ExecContext(ctx, exec)\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: unable to delete all from test_resource\")\n\t}\n\n\trowsAff, err := result.RowsAffected()\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: failed to get rows affected by deleteall for test_resource\")\n\t}\n\n\treturn rowsAff, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Checking TestResource Existence in Go\nDESCRIPTION: This snippet checks if a row exists in the 'test_resource' table. It uses the boil library to construct and execute a query that counts the number of rows, limiting the result to 1.  It returns a boolean indicating existence and any error encountered.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Exists checks if the row exists in the table.\nfunc (q testResourceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {\n\tvar count int64\n\n\tqueries.SetSelect(q.Query, nil)\n\tqueries.SetCount(q.Query)\n\tqueries.SetLimit(q.Query, 1)\n\n\terr := q.Query.QueryRowContext(ctx, exec).Scan(&count)\n\tif err != nil {\n\t\treturn false, errors.Wrap(err, \"models: failed to check if test_resource exists\")\n\t}\n\n\treturn count > 0, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generate SchemaCrawler Diagram (PNG)\nDESCRIPTION: This command uses Docker to run SchemaCrawler and generate a PNG diagram of the database schema. It mounts the current directory and the configuration file into the container and specifies the database connection details, schemas, output format, and output file.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/docs/schemacrawler/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network=go-starter_default -v $(pwd):/home/schcrwlr/share -v $(pwd)/schemacrawler.config.properties:/opt/schemacrawler/config/schemacrawler.config.properties --entrypoint=/opt/schemacrawler/bin/schemacrawler.sh schemacrawler/schemacrawler --server=postgresql --host=postgres --port=5432 --database=spec --schemas=public --user=dbuser --password=dbpass --info-level=standard --command=schema --portable-names --title \"allaboutapps.dev/aw/go-starter\" --output-format=png --output-file=/home/schcrwlr/share/schema.png\n```\n\n----------------------------------------\n\nTITLE: Updating All TestResources in Go\nDESCRIPTION: This function updates all rows in the 'test_resource' table with the specified column values using the executor from the query. It constructs the SQL query dynamically and handles errors during execution.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// UpdateAll updates all rows with the specified column values.\nfunc (q testResourceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {\n\tqueries.SetUpdate(q.Query, cols)\n\n\tresult, err := q.Query.ExecContext(ctx, exec)\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: unable to update all for test_resource\")\n\t}\n\n\trowsAff, err := result.RowsAffected()\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: unable to retrieve rows affected for test_resource\")\n\t}\n\n\treturn rowsAff, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Make Targets Inside the Container (Bash)\nDESCRIPTION: This snippet shows how to use make targets inside the service's docker container for tasks such as initializing the project, building it, gathering info, and running tests.  The `make help` command lists all available make targets.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevelopment@94242c61cf2b:/app$ # inside your container...\n\n# Shortcut for make init, make build, make info and make test\nmake all\n\n# Print all available make targets\nmake help\n```\n\n----------------------------------------\n\nTITLE: Getting Last Sent Email in Go\nDESCRIPTION: This code snippet shows how to retrieve the last sent email (or all sent emails) from a mock transport during testing. It utilizes test helpers to access the mailer service and extract email data for verification purposes. It takes a testing object and the mailer service instance as input.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmail := test.GetLastSentMail(t, s.Mailer)\nsentMails := test.GetSentMails(t, s.Mailer)\n```\n\n----------------------------------------\n\nTITLE: Retrieving all TestResource records in Go\nDESCRIPTION: Defines the `All` method on the `testResourceQuery` type, used to retrieve all `TestResource` records from the database based on the query.  It binds the results to a slice of `TestResource` pointers. Returns an error if the query fails.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// All returns all TestResource records from the query.\nfunc (q testResourceQuery) All(ctx context.Context, exec boil.ContextExecutor) (TestResourceSlice, error) {\n\tvar o []*TestResource\n\n\terr := q.Bind(ctx, exec, &o)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"models: failed to assign all query results to TestResource slice\")\n\t}\n\n\treturn o, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WHERE clause helpers for TestResource fields in Go\nDESCRIPTION: Defines a struct `TestResourceWhere` containing `whereHelper` instances for each field in the `TestResource` struct. These helpers are used to generate WHERE clauses for queries, providing type-safe and convenient methods for filtering data.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar TestResourceWhere = struct {\n\tID                    whereHelperstring\n\tNumericField          whereHelpertypes_Decimal\n\tNumericNullField      whereHelpertypes_NullDecimal\n\tIntegerField          whereHelperint\n\tIntegerNullField      whereHelpernull_Int\n\tBoolField             whereHelperbool\n\tBoolNullField         whereHelpernull_Bool\n\tDecimalField          whereHelpertypes_Decimal\n\tDecimalNullField      whereHelpertypes_NullDecimal\n\tTextField             whereHelperstring\n\tTextNullField         whereHelpernull_String\n\tTimtestamptzNullField whereHelpernull_Time\n\tCreatedAt             whereHelpertime_Time\n\tUpdatedAt             whereHelpertime_Time\n}{\n\tID:                    whereHelperstring{field: \"\\\"test_resource\\\".\\\"id\\\"\"},\n\tNumericField:          whereHelpertypes_Decimal{field: \"\\\"test_resource\\\".\\\"numeric_field\\\"\"},\n\tNumericNullField:      whereHelpertypes_NullDecimal{field: \"\\\"test_resource\\\".\\\"numeric_null_field\\\"\"},\n\tIntegerField:          whereHelperint{field: \"\\\"test_resource\\\".\\\"integer_field\\\"\"},\n\tIntegerNullField:      whereHelpernull_Int{field: \"\\\"test_resource\\\".\\\"integer_null_field\\\"\"},\n\tBoolField:             whereHelperbool{field: \"\\\"test_resource\\\".\\\"bool_field\\\"\"},\n\tBoolNullField:         whereHelpernull_Bool{field: \"\\\"test_resource\\\".\\\"bool_null_field\\\"\"},\n\tDecimalField:          whereHelpertypes_Decimal{field: \"\\\"test_resource\\\".\\\"decimal_field\\\"\"},\n\tDecimalNullField:      whereHelpertypes_NullDecimal{field: \"\\\"test_resource\\\".\\\"decimal_null_field\\\"\"},\n\tTextField:             whereHelperstring{field: \"\\\"test_resource\\\".\\\"text_field\\\"\"},\n\tTextNullField:         whereHelpernull_String{field: \"\\\"test_resource\\\".\\\"text_null_field\\\"\"},\n\tTimtestamptzNullField: whereHelpernull_Time{field: \"\\\"test_resource\\\".\\\"timtestamptz_null_field\\\"\"},\n\tCreatedAt:             whereHelpertime_Time{field: \"\\\"test_resource\\\".\\\"created_at\\\"\"},\n\tUpdatedAt:             whereHelpertime_Time{field: \"\\\"test_resource\\\".\\\"updated_at\\\"\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Counting TestResource Rows in Go\nDESCRIPTION: This code snippet counts the number of rows in the 'test_resource' table. It uses the boil library to execute the query and returns the count along with any potential error. The `errors.Wrap` function is used to add context to the error message.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"models: failed to count test_resource rows\")\n\t}\n\n\treturn count, nil\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Environment (Bash)\nDESCRIPTION: This script clones a git repository, navigates into it, and starts the Docker Compose development environment using the provided helper script. It's a convenient way to quickly set up the project for development.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone your new repository, cd into it, then easily start the docker-compose dev environment through our helper\n./docker-helper.sh --up\n```\n\n----------------------------------------\n\nTITLE: Counting all TestResource records in Go\nDESCRIPTION: Defines the `Count` method on the `testResourceQuery` type, used to count all `TestResource` records in the database based on the query. It sets the select clause to nil and sets the count. Returns the count as an int64.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Count returns the count of all TestResource records in the query.\nfunc (q testResourceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n\tvar count int64\n\n\tqueries.SetSelect(q.Query, nil)\n\tqueries.SetCount(q.Query)\n\n\terr := q.Query.QueryRowContext(ctx, exec).Scan(&count)\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing Usage - Go\nDESCRIPTION: This code demonstrates how to save a snapshot using the `Snapshoter.Save` method. The snapshot can be configured to force an update, use a different replacer function or to set a different file location and suffix for the snapshot. Updating can be done programmatically or via environment variable.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/internal/test/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nSnapshoter.Save(t TestingT, data ...interface{})\n```\n\n----------------------------------------\n\nTITLE: Testing HTTPError in Go\nDESCRIPTION: This code snippet demonstrates how to assert `httperrors.HTTPError` using a test helper. It verifies the HTTP status code and the returned error against expected values, simplifying error validation in tests. It takes a testing object, HTTP response, and expected error as input.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nres := test.PerformRequest(t, s, \"POST\", \"/api/v1/auth/forgot-password/complete\", payload, nil)\nresponse := test.RequireHTTPError(t, res, httperrors.ErrNotFoundTokenNotFound)\n```\n\n----------------------------------------\n\nTITLE: Reloading TestResource in Go\nDESCRIPTION: This function refreshes the data of a 'TestResource' object by fetching the latest values from the database using its primary key. It utilizes the `FindTestResource` function to retrieve the updated record.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n// Reload refetches the object from the database\n// using the primary keys with an executor.\nfunc (o *TestResource) Reload(ctx context.Context, exec boil.ContextExecutor) error {\n\tret, err := FindTestResource(ctx, exec, o.ID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t*o = *ret\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Makefile Target Order Change for Swagger Linting\nDESCRIPTION: The `make swagger` pipeline has been modified to run `make swagger-lint-ref-siblings` after `make swagger-concat`. This ensures that the Swagger file is always linted against the current version, preventing errors during merge conflict resolution.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: i18n Service Configuration\nDESCRIPTION: Environment variables are added to configure the i18n service: `SERVER_I18N_DEFAULT_LANGUAGE` sets the default language, and `SERVER_I18N_BUNDLE_DIR_ABS` specifies the directory for i18n message files, enabling automatic configuration of available languages based on the files present in the directory.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Moving License and README files (Bash)\nDESCRIPTION: This command optionally moves the original `README.md` and `LICENSE` files to avoid conflicts or confusion with project specific documentation or licensing.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndevelopment@94242c61cf2b:/app$ # inside your container...\n\n# Optionally you may want to move our LICENSE and README.md away.\nmv README.md README-go-starter.md\nmv LICENSE LICENSE-go-starter\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependencies and Installing Tools\nDESCRIPTION: This command installs or caches project dependencies and installs necessary tools into the bin directory.  It ensures the development environment has all the required components for building and running the project.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake init\n```\n\n----------------------------------------\n\nTITLE: Generating README.md from Module Name\nDESCRIPTION: This command retrieves the module name and uses it to create a new README.md file for the project.  It's a simple way to initialize the README with basic project information.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake get-module-name > README.md\n```\n\n----------------------------------------\n\nTITLE: Probing Readiness\nDESCRIPTION: This command checks if all requirements for the application to run are met, such as database availability and write access to a specified path. The -v flag enables verbose output.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\napp probe readiness -v\n```\n\n----------------------------------------\n\nTITLE: Snapshot Updating - Go\nDESCRIPTION: This example shows how to update snapshots. You can update a single snapshot using the `Update(true)` method, or all snapshots by setting the `TEST_UPDATE_GOLDEN` environment variable to `true`. This uses the `make test` command.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/internal/test/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nUpdate(true)\n```\n\nLANGUAGE: Go\nCODE:\n```\nTEST_UPDATE_GOLDEN=true make test\n```\n\n----------------------------------------\n\nTITLE: Error Handling Update: errors.Is usage in Go\nDESCRIPTION: This snippet demonstrates the correct way to compare errors in Go using `errors.Is` instead of direct comparison with `==` or `!=`. This is important for error wrapping and ensures proper error handling.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif errors.Is(err, sql.ErrNoRows) {\n```\n\n----------------------------------------\n\nTITLE: Seeding the Database\nDESCRIPTION: This command seeds the database with initial data, typically from fixtures defined in `/internal/data/fixtures.go`. It populates the database with sample or default data for testing and development purposes.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\napp db seed\n```\n\n----------------------------------------\n\nTITLE: Executing All Tests\nDESCRIPTION: This command executes all tests defined for the project. It ensures that the code changes do not introduce any regressions and that the project meets its functional requirements.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Go Module Tidy Command\nDESCRIPTION: The command `go mod tidy -go=1.17` is used to prune module graphs and clean up the go.mod file after upgrading to Go 1.17. This command ensures that the dependencies are up-to-date and compatible with the Go version.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\ngo mod tidy -go=1.17\n```\n\n----------------------------------------\n\nTITLE: Git Merge Go Starter Command with Target\nDESCRIPTION: The commands demonstrate how to merge updates from the upstream go-starter project, allowing specification of a target tag, branch, or commit. This enables phased updates and targeted integration of specific changes.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_10\n\nLANGUAGE: Makefile\nCODE:\n```\nmake git-merge-go-starter\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nGIT_GO_STARTER_TARGET=go-starter-2021-10-19 make git-merge-go-starter\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nGIT_GO_STARTER_TARGET=go-starter/mr/housekeeping make git-merge-go-starter\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nGIT_GO_STARTER_TARGET=e85bedb94c3562602bc23d2bfd09fca3b13d1e02 make git-merge-go-starter\n```\n\n----------------------------------------\n\nTITLE: Running All Development Tasks\nDESCRIPTION: This command executes a series of make targets: init, build, info, and test.  It's a convenient shortcut for performing all essential development tasks in one go.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Helper Function for Username Formatting in Go\nDESCRIPTION: Introduces a helper function `util.ToUsernameFormat` to lowercase and trim whitespace from usernames in authentication handlers. This prevents user duplication due to casing differences or trailing whitespace issues, improving the consistency of user accounts.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Error Handling Update: errors.As usage in Go\nDESCRIPTION: This snippet demonstrates the correct way to check the error type using `errors.As` instead of type assertion. `errors.As` handles error wrapping and allows checking if the error chain contains a specific error type.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar gErr *googleapi.Error\nok := errors.As(err, &gErr)\n```\n\n----------------------------------------\n\nTITLE: Make Target for Updating Golden Files\nDESCRIPTION: A new make target, `make test-update-golden`, has been added to easily refresh all golden files and snapshot tests. This target simplifies the process of updating and managing golden files during testing.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_9\n\nLANGUAGE: Makefile\nCODE:\n```\nmake test-update-golden\n```\n\n----------------------------------------\n\nTITLE: Destroying Docker Environment\nDESCRIPTION: This command destroys the Docker environment associated with the project, removing all docker related traces and volumes. It's used for cleaning up the development environment.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./docker-helper --destroy\n```\n\n----------------------------------------\n\nTITLE: Printing Build Information in Go\nDESCRIPTION: This snippet shows how to print the build date and commit information in a Go application. It demonstrates the usage of the app -v flag to display build-related details.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\napp -v\nallaboutapps.dev/aw/go-starter @ 19c4cdd0da151df432cd5ab33c35c8987b594cac (2021-03-11T15:42:27+00:00)\n```\n\n----------------------------------------\n\nTITLE: Error Handling Update: errors.Is negation in Go\nDESCRIPTION: This snippet demonstrates the correct way to negate error comparison in Go using `!errors.Is` instead of `!=`. This aligns with best practices for handling wrapped errors using errors.Is.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif !errors.Is(err, sql.ErrConnDone) {\n```\n\n----------------------------------------\n\nTITLE: Starting the Local Server\nDESCRIPTION: This command starts the locally-built server. It runs the application and makes it accessible at the specified address (http://127.0.0.1:8080 in this case).\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\napp server\n```\n\n----------------------------------------\n\nTITLE: Generating WHERE clause helper for null.Bool in Go\nDESCRIPTION: Defines a helper struct `whereHelpernull_Bool` and associated methods for generating WHERE clauses for `null.Bool` fields.  This includes methods for equality, inequality, null checks, and comparison operators, utilizing the `qmhelper` package for query modification.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/scripts/internal/scaffold/testdata/test_resource.txt#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype whereHelpernull_Bool struct{ field string }\n\nfunc (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {\n\treturn qmhelper.WhereNullEQ(w.field, false, x)\n}\nfunc (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {\n\treturn qmhelper.WhereNullEQ(w.field, true, x)\n}\nfunc (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }\nfunc (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }\nfunc (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {\n\treturn qmhelper.Where(w.field, qmhelper.LT, x)\n}\nfunc (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {\n\treturn qmhelper.Where(w.field, qmhelper.LTE, x)\n}\nfunc (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {\n\treturn qmhelper.Where(w.field, qmhelper.GT, x)\n}\nfunc (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {\n\treturn qmhelper.Where(w.field, qmhelper.GTE, x)\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Project Executable\nDESCRIPTION: This command builds the project executable.  It compiles the source code and links it to create the final executable file that can be run.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/README-go-starter.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Find Docker Network\nDESCRIPTION: This command lists the available Docker networks to identify the network used by the go-starter project. This network name is required to allow the SchemaCrawler Docker container to connect to the database container.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/docs/schemacrawler/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network ls\n```\n\n----------------------------------------\n\nTITLE: Finding and Replacing JWT Dependency Go\nDESCRIPTION: This command replaces the deprecated github.com/dgrijalva/jwt-go dependency with github.com/golang-jwt/jwt in Go files.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nfind -type f -name \"*.go\" -exec sed -i \"s/dgrijalva\\/jwt-go/golang-jwt\\/jwt/g\" {} \\;\n```\n\n----------------------------------------\n\nTITLE: Change Directory\nDESCRIPTION: This command changes the current directory to `/docs/schemacrawler`, which is assumed to contain the necessary configuration files for SchemaCrawler.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/docs/schemacrawler/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/schemacrawler\n```\n\n----------------------------------------\n\nTITLE: Print Working Directory\nDESCRIPTION: This command prints the current working directory to confirm the directory change was successful. It's used for verification purposes.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/docs/schemacrawler/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npwd\n```\n\n----------------------------------------\n\nTITLE: Generate SchemaCrawler Diagram (PDF)\nDESCRIPTION: This command uses Docker to run SchemaCrawler and generate a PDF diagram of the database schema. It mounts the current directory and the configuration file into the container and specifies the database connection details, schemas, output format, and output file. The only difference compared to the PNG generation is the `--output-format` argument.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/docs/schemacrawler/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network=go-starter_default -v $(pwd):/home/schcrwlr/share -v $(pwd)/schemacrawler.config.properties:/opt/schemacrawler/config/schemacrawler.config.properties --entrypoint=/opt/schemacrawler/bin/schemacrawler.sh schemacrawler/schemacrawler --server=postgresql --host=postgres --port=5432 --database=spec --schemas=public --user=dbuser --password=dbpass --info-level=standard --command=schema --portable-names --title \"allaboutapps.dev/aw/go-starter\" --output-format=pdf --output-file=/home/schcrwlr/share/schema.pdf\n```\n\n----------------------------------------\n\nTITLE: Adding Build Tag to Go Scripts\nDESCRIPTION: Enforces that all `/scripts/**/*.go` files set the `// +build scripts` build tag. This ensures that these files are not directly depended upon from the actual `app` source code within `/internal`. It isolates the development scripts from the application's core logic.\nSOURCE: https://github.com/allaboutapps/go-starter/blob/master/CHANGELOG-go-starter.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// +build scripts\n```"
  }
]