[
  {
    "owner": "mapbox",
    "repo": "mapbox-maps-ios.git",
    "content": "TITLE: Handling Tap Gestures on Map Layers in SwiftUI\nDESCRIPTION: Demonstrates how to add tap gesture handlers to specific map layers using the onLayerTapGesture method. The example uses a custom map style with a 'house-prices' layer and processes the tapped feature data.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Map Content Gestures User Guide.md#2025-04-18_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Map()\n        .mapStyle(.customStyle)\n        .onLayerTapGesture(\"house-prices\") { queriedFeature, context in\n            displayDetails(queriedFeature, coordinate: context.coordinate)\n            return true // Do not propagate the event to the layers and annotations below\n        }\n}\n\nextension MapStyle {\n    // The custom style that defines the \"house-prices\" layer.\n    static let customStyle = MapStyle(uri: StyleURI(rawValue: \"https://example.com/mapbox-custom-style.json\")!)\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Map Events with Observable Pattern in Swift\nDESCRIPTION: Shows how to subscribe to map events using the new observable pattern in Mapbox Maps iOS SDK. The example demonstrates subscribing to camera changes and style loaded events using the observe and observeNext methods.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nmapboxMap.onCameraChanged.observe { [weak self] event in\n  self?.camera = event.cameraState\n}.store(in: &cancelables)\n\nmapboxMap.onStyleLoaded.observeNext { [weak self] _ in\n  self?.configureStyle()\n}.store(in: &cancelables)\n```\n\n----------------------------------------\n\nTITLE: Using Slot Layers for Custom Positioning\nDESCRIPTION: Shows how to use pre-defined and custom slots to control layer positioning in the map view hierarchy.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nMap {\n    /// The green polygon is displayd in the middle of Standard Style layers.\n    FillLayer(id: \"green\", source: \"green-source\")\n        .fillColor(.green)\n        .slot(.middle)\n\n    /// By default, this layer id displayed on top of other layers.\n    FillLayer(id: \"purple\", source: \"purple-source\")\n        .fillColor(.purple)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Position with 2D Puck in SwiftUI Mapbox Map\nDESCRIPTION: This snippet shows how to display the user's position on a Mapbox map using a 2D puck in SwiftUI. It includes options for showing the accuracy ring and using the heading for bearing.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nMap {\n    Puck2D(bearing: .heading)\n        .showsAccuracyRing(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Viewport for SwiftUI Mapbox Map\nDESCRIPTION: This snippet demonstrates how to set the initial viewport for a Mapbox Map in SwiftUI, centering on a specific location with zoom, bearing, and pitch settings.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet london = CLLocationCoordinate2D(latitude: 51.5073219, longitude: -0.1276474)\n// Sets camera centered to London\nMap(initialViewport: .camera(center: london, zoom: 12, bearing: 0, pitch: 0)\n```\n\n----------------------------------------\n\nTITLE: Implementing Declarative Map Styling in UIKit\nDESCRIPTION: Demonstrates how to use setMapStyleContent method to define map style primitives in a UIKit application. The example shows creating a vector source and line layer with customized properties.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// UIKit\nlet mapView = MapView()\nmapView.mapboxMap.setMapStyleContent {\n    VectorSource(id: \"traffic-source\")\n        .tiles([\"...\"])\n\n    LineLayer(id: \"traffic-layer\", source: \"traffic-source\")\n        .lineColor(.red)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Style Primitives in UIKit with setMapStyleContent\nDESCRIPTION: Demonstrates how to use style primitives in UIKit applications using the new setMapStyleContent method.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@_spi(Experimental) MapboxMaps\nmapView.mapboxMap.setMapStyleContent {\n    LineLayer(id: \"traffic\")\n        .lineColor(.red)\n        .lineWidth(2)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mapbox Map in SwiftUI ContentView\nDESCRIPTION: This code demonstrates how to initialize a Mapbox Map in a SwiftUI ContentView, including setting the access token and using the Map struct.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n    init() {\n        MapboxOptions.accessToken = \"pk...\"\n    }\n    var body: some View {\n        Map()\n          .ignoresSafeArea()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Viewport State in SwiftUI Mapbox Map\nDESCRIPTION: This code shows how to manage viewport state using SwiftUI's @State and binding, allowing for dynamic viewport changes.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n    // Initializes viewport state as styleDefault,\n    // which will use the default camera for the current style.\n    @State var viewport: Viewport = .styleDefault\n\n    var body: some View {\n        VStack {\n            // Passes the viewport binding to the map.\n            Map(viewport: $viewport)\n            Button(\"Overview route\") {\n                // Sets the viewport to overview (fit) the route, or any other geometry.\n                viewport = .overview(geometry: LineString(...))\n            }\n            Button(\"Locate the user\") {\n                // Sets viewport to follow the user location.\n                viewport = .followPuck(zoom: 16, pitch: 60)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Declarative Map Styling in SwiftUI\nDESCRIPTION: Shows how to define map style primitives directly inside a SwiftUI Map component. The example demonstrates creating a vector source and line layer with customized properties.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// SwiftUI\nMap {\n    VectorSource(id: \"traffic\")\n        .tiles([\"...\"])\n\n    LineLayer(id: \"traffic-layer\", source: \"traffic\")\n        .lineColor(.red)\n}\n```\n\n----------------------------------------\n\nTITLE: View Annotations in Mapbox Maps iOS v11\nDESCRIPTION: Demonstrates the new View Annotations API for creating, updating, and removing annotations. This example creates a custom view annotation and sets its properties.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Create annotation\nlet view = CustomView(text: \"üè†\")\nlet annotation = ViewAnnotation(coordinate: coordinate, view: view)\nannotation.allowOverlap = true\nmapView.viewAnnotations.add(annotation)\n\n// Update annotation\nannotation.visible = false\n\n// Remove annotation\nannotation.remove()\n```\n\n----------------------------------------\n\nTITLE: Custom Slot Layer Ordering\nDESCRIPTION: Demonstrates how to create and use custom slot layers to control the ordering of map elements.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nMap {\n    SlotLayer(id: \"my-custom-slot\")\n\n    FillLayer(id: \"green\", source: \"green-source\")\n        .fillColor(.green)\n\n    FillLayer(id: \"purple\", source: \"purple-source\")\n        .fillColor(.purple)\n        .slot(\"my-custom-slot\")\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Viewport Changes in SwiftUI Mapbox Map\nDESCRIPTION: This snippet demonstrates how to animate viewport changes using the withViewportAnimation function in SwiftUI.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n    @State var viewport: Viewport = .styleDefault\n\n\n    var body: some View {\n        VStack {\n            Map(viewport: $viewport)\n            Button(\"Animate viewport\") {\n                // Changes viewport with default animation\n                withViewportAnimation {\n                    viewport = .followPuck\n                }\n            }\n            Button(\"Animate viewport (ease-in)\") {\n                // Changes viewport with ease-in animation\n                withViewportAnimation(.easeIn(duration: 1)) {\n                    viewport = .followPuck\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Interpolation Expression with Mapbox Maps iOS SDK\nDESCRIPTION: Demonstrates how to create the equivalent of the JSON interpolation expression using the Swift Expression DSL. This provides a type-safe way to define expressions in code.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/STYLE_README.md#2025-04-18_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nExp(.interpolate) {\n    Exp(.linear)\n    Exp(.zoom)\n    0\n    UIColor.red\n    14\n    UIColor.blue\n}\n```\n\n----------------------------------------\n\nTITLE: Using Map Events with Combine in Swift\nDESCRIPTION: Demonstrates how to use Mapbox Maps events with Combine framework for reactive programming. The example shows debouncing camera change events and processing the camera state.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport Combine\nmapboxMap.onCameraChanged\n  .debounce(for: .milliseconds(500), scheduler: DispatchQueue.main)\n  .map(\\.cameraState)\n  .sink { [weak self] cameraState in\n    self?.camera = cameraState\n  }.store(in: &cancellables)\n```\n\n----------------------------------------\n\nTITLE: Displaying User Position with Custom 3D Model in SwiftUI Mapbox Map\nDESCRIPTION: This example demonstrates how to display the user's position using a custom 3D model (a duck in this case) in a SwiftUI Mapbox map. It shows how to load a 3D model from a URL and set its orientation.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nMap {\n    let duck = Model(\n        uri: URL(string: \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Duck/glTF-Embedded/Duck.gltf\")!,\n        orientation: [0, 0, -90])\n    Puck3D(model: duck, bearing: .heading)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Map Layer Positioning in SwiftUI\nDESCRIPTION: Demonstrates basic map setup with multiple layers including annotations, polygons and GeoJSON sources. Shows how layers are positioned relative to each other in a z-index stack.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet coordinate = CLLocationCoordinate2D(latitude: 60.167488, longitude: 24.942747)\n\nvar body: some View {\n    Map(initialViewport: .camera(center: .init(latitude: 27.2, longitude: -26.9), zoom: 1.53, bearing: 0, pitch: 0)) {\n        MapViewAnnotation(coordinate: coordinate) {\n            Circle()\n                .fill(.purple)\n                .frame(width: 40, height: 40)\n        }\n\n        if showYellowPolygon {\n            PolygonAnnotation(polygon: Polygon(center: coordinate, radius: 8 * 100, vertices: 60))\n                .fillColor(StyleColor(.yellow))\n        }\n\n\n        GeoJSONSource(id: \"source\")\n            .data(.geometry(.polygon(Polygon(center: coordinate, radius: 4 * 100, vertices: 60))))\n\n        /// The green polygon is displayed on top of the yellow polygon.\n        FillLayer(id: \"green\", source: \"source\")\n            .fillColor(.green)\n            .fillOpacity(0.7)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GeoJSON Data in a Source using Mapbox Maps iOS SDK\nDESCRIPTION: Demonstrates two ways to set the data property of a GeoJSON source: using a URL pointing to a GeoJSON file, or using a Turf feature collection object. The SDK uses Turf-swift to model GeoJSON data.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/STYLE_README.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Setting the `data` property with a url pointing to a geojson document\nmyGeoJSONSource.data = .url(URL(string: \"<path-to-geojson-file>\"))\n\n// Setting a Turf feature to the `data` property\nmyGeoJSONSource.data = .featureCollection(someTurfFeatureCollection)\n```\n\n----------------------------------------\n\nTITLE: Creating CustomRasterSourceOptions with Client Callback\nDESCRIPTION: Updated API for CustomRasterSource that now accepts a CustomRasterSourceClient protocol. This example shows how to migrate from the previous tileStatusChangedFunction approach to the new clientCallback pattern.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nCustomRasterSourceOptions(tileStatusChangedFunction: { tileID, status in }) // Before\nCustomRasterSourceOptions(clientCallback: CustomRasterSourceClient.fromCustomRasterSourceTileStatusChangedCallback { tileID, status in }) // Now\n```\n\n----------------------------------------\n\nTITLE: Adding View Annotations to SwiftUI Mapbox Map\nDESCRIPTION: This code demonstrates how to add various types of view annotations to a Mapbox Map in SwiftUI, including single and multiple data-driven annotations.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n    struct Item: Identifiable {...}\n    @state var items = [Item]()\n\n    var body: some View {\n        Map {\n            // Displays a single view annotation at specified coordinate.\n            MapViewAnnotation(coordinate: CLLocationCoordinate(...))\n                Text(\"üöÄ\")\n                    .frame(width: 20, height: 20)\n                    .background(Circle().fill(.red))\n            }\n\n            // Displays multiple data-driven view annotations.\n            ForEvery(items) { item in\n                MapViewAnnotation(coordinate: item.coordinate) {\n                    ItemContentView(item)\n                }\n            }\n\n            // Displays annotation on the layer feature.\n            // The annotation will be dynamically positioned along the route line\n            // that is displayed by \"route\" layer.\n            MapViewAnnotation(layerId: \"route\") {\n                ETAView(text: \"55 min\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Gestures on Layer Annotations in SwiftUI\nDESCRIPTION: Shows how to implement tap and long press gestures on different layer annotations (Polygon and Circle). Demonstrates how gestures are handled based on the stacking order of annotations in the map.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Map Content Gestures User Guide.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Map {\n        let center = CLLocationCoordinate2D(latitude: 60.17195694011002, longitude: 24.945389069265598)\n        let polygon = Polygon(center: center, radius: 1000, vertices: 5)\n        PolygonAnnotation(polygon: polygon)\n            .fillColor(StyleColor(.systemGreen))\n            .fillOpacity(0.5)\n            .onTapGesture {\n                print(\"polygon is tapped\")\n            }\n            .onLongPressGesture {\n                print(\"polygon is long-pressed\")\n            }\n\n        CircleAnnotation(centerCoordinate: center)\n            .circleRadius(30)\n            .circleColor(StyleColor(.systemBlue))\n            .onTapGesture {\n                print(\"circle is tapped\")\n            }\n\n        // The red circle annotation doesn't handle gestures\n        CircleAnnotation(centerCoordinate: CLLocationCoordinate2D(latitude: 60.18195694011002, longitude: 24.955389069265598))\n            .circleRadius(30)\n            .circleColor(StyleColor(.systemRed))\n    }\n    .onMapTapGesture { context in\n        print(\"map is tapped\")\n    }\n    .onMapLongPressGesture { context in\n        print(\"map is long-pressed\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mapbox Maps Options in Swift\nDESCRIPTION: Demonstrates how to configure external resources used by the Mapbox Maps API through MapboxMapsOptions. Shows setting custom data paths, asset paths, and tile store usage mode.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nimport MapboxMaps\n\nMapboxMapsOptions.dataPath = customDataPathURL\nMapboxMapsOptions.assetPath = customAssetPathURL\nMapboxMapsOptions.tileStoreUsageMode = .readOnly\nMapboxMapsOptions.tileStore = tileStore\n```\n\n----------------------------------------\n\nTITLE: SwiftUI Integration with Mapbox Maps iOS\nDESCRIPTION: Demonstrates how to use Mapbox Maps in a SwiftUI view. This example creates a simple Map view that ignores the safe area.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport MapboxMaps\n\nstruct ContentView: View {\n    var body: some View {\n        Map()\n          .ignoresSafeArea()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: visionOS Support Adaptations\nDESCRIPTION: API changes to support visionOS, including modifications to metal view callbacks and making certain parameters optional to accommodate different rendering environments in Apple's spatial computing platform.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n// visionOS support\nFunc MapViewMetricsReporter.afterMetalViewDrawCallback(metalView:) has been renamed to Func afterMetalViewDrawCallback()\nFunc MapViewMetricsReporter.beforeMetalViewDrawCallback(metalView:) has been renamed to Func beforeMetalViewDrawCallback()\nConstructor MapOptions.init(constrainMode:viewportMode:orientation:crossSourceCollisions:size:pixelRatio:glyphsRasterizationOptions:) has parameter 5 type change from CoreGraphics.CGFloat to CoreGraphics.CGFloat?\nConstructor TilesetDescriptorOptions.init(styleURI:zoomRange:pixelRatio:tilesets:stylePackOptions:extraOptions:) has parameter 2 type change from Swift.Float to Swift.Float?\n```\n\n----------------------------------------\n\nTITLE: Handling Gestures with GestureManager in UIKit\nDESCRIPTION: Shows how to use the GestureManager API in UIKit to handle map and layer gestures. Uses the Combine framework to observe tap events and store cancelables to properly manage event handlers.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Map Content Gestures User Guide.md#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nmapView.gestures.onMapTap.observe { context in\n    print(\"Tapped at \\(context.coordinate)\")\n}.store(in: &cancelables)\n\nmapView.gestures.onLayerTapGesture(\"house-prices\") { queriedFeature, context in\n    displayDetails(queriedFeature, coordinate: context.coordinate)\n}.store(in: &cancelables)\n```\n\n----------------------------------------\n\nTITLE: Configuring POI Labels in Mapbox Standard Style\nDESCRIPTION: Shows how to configure style properties like hiding Point of Interest (POI) labels using the setStyleImportConfigProperty method.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nmapView.mapboxMap.setStyleImportConfigProperty(for: \"basemap\", config: \"showPointOfInterestLabels\", value: false)\n```\n\n----------------------------------------\n\nTITLE: Declarative Map Styling in SwiftUI Mapbox Map\nDESCRIPTION: This code demonstrates the use of MapStyleContent and MapContent within a declarative Map description, including annotations and layers.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nMap(initialViewport: .camera(center: .init(latitude: 27.2, longitude: -26.9), zoom: 1.53, bearing: 0, pitch: 0)) {\n    MapViewAnnotation(coordinate: .apple) {\n        Circle()\n            .fill(.purple)\n            .frame(width: 40, height: 40)\n    }\n\n     PolygonAnnotation(polygon: Polygon(center: .apple, radius: 8 * 100, vertices: 60))\n        .fillColor(StyleColor(.yellow))\n\n\n    GeoJSONSource(id: \"source\")\n        .data(.geometry(.polygon(Polygon(center: .apple, radius: 4 * 100, vertices: 60))))\n\n    FillLayer(id: \"fill-id\", source: \"source\")\n        .fillColor(.green)\n        .fillOpacity(0.7)\n}\n```\n\n----------------------------------------\n\nTITLE: Generic ForEvery Implementation Changes in Swift\nDESCRIPTION: Changes to the ForEvery struct's generic signature, constructors, and parameter types to support generic MapContent. This modification improves type safety and flexibility when working with collections in the Mapbox Maps SDK.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// Make generic ForEach\nConstructor ForEvery.init(_:content:) has generic signature change from <Data, ID where Data : Swift.RandomAccessCollection, ID == Data.Element.ID, Data.Element : Swift.Identifiable> to <Content, Data, ID where Content == MapboxMaps.MapContent, Data : Swift.RandomAccessCollection, ID == Data.Element.ID, Data.Element : Swift.Identifiable>\nConstructor ForEvery.init(_:id:content:) has generic signature change from <Data, ID where Data : Swift.RandomAccessCollection, ID : Swift.Hashable> to <Content, Data, ID where Content == MapboxMaps.MapContent, Data : Swift.RandomAccessCollection, ID : Swift.Hashable>\nStruct ForEvery has generic signature change from <Data, ID where Data : Swift.RandomAccessCollection, ID : Swift.Hashable> to <Content, Data, ID where Data : Swift.RandomAccessCollection, ID : Swift.Hashable>\nFunc MapContentBuilder.buildLimitedAvailability(_:) has been removed\nConstructor ForEvery.init(_:content:) has parameter 1 type change from (Data.Element) -> MapboxMaps.MapContent to (Data.Element) -> Content\nConstructor ForEvery.init(_:content:) has return type change from MapboxMaps.ForEvery<Data, ID> to MapboxMaps.ForEvery<Content, Data, ID>\nConstructor ForEvery.init(_:id:content:) has parameter 2 type change from (Data.Element) -> MapboxMaps.MapContent to (Data.Element) -> Content\nConstructor ForEvery.init(_:id:content:) has return type change from MapboxMaps.ForEvery<Data, ID> to MapboxMaps.ForEvery<Content, Data, ID>\n```\n\n----------------------------------------\n\nTITLE: Observing Puck Updates Using Signal in Mapbox Maps iOS v11\nDESCRIPTION: Example showing how to observe puck rendering updates in v11 using Signal endpoints instead of delegate methods used in v10. This demonstrates the new reactive approach to location updates.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// v10\nmapView.location.addPuckLocationConsumer(self)\n\n// v11\nmapView.location.onPuckRender.observe { renderingData in\n    // Adjust puck-connected elements (route line, annotations) here.\n}.store(in: &cancelables)\n```\n\n----------------------------------------\n\nTITLE: Observing CameraAnimator Events\nDESCRIPTION: Shows how to observe start and stop events of CameraAnimator using new CameraAnimationsManager APIs.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Observe start event of any CameraAnimator owned by AnimationOwner.cameraAnimationsManager\nmapView.camera\n  .onCameraAnimatorStarted\n  .owned(by: .cameraAnimationsManager)\n  .observe { cameraAnimator in\n    // Handle camera animation started here.\n  }\n  .store(in: &cancelables)\n// Observe finished events of any CameraAnimator\nmapView.camera\n  .onCameraAnimatorFinished\n  .observe { animator in\n    // Handle camera animation stopped here.\n  }\n  .store(in: &cancelables)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Location Provider in Mapbox Maps iOS v11\nDESCRIPTION: Example of creating a custom location provider by implementing the LocationProvider protocol in Mapbox Maps SDK v11. This simplified implementation allows providing custom location data to drive the location puck on the map.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nclass CustomLocationProvider: LocationProvider {\n    private let observers: NSHashTable<AnyObject> = .weakObjects()\n    var location: Location? {\n        didSet {\n            guard let location else { return }\n            for observer in observers.allObjects {\n                (observer as? LocationObserver)?.onLocationUpdateReceived(for: [location])\n            }\n        }\n    }\n\n    public func getLastObservedLocation() -> Location? {\n        location\n    }\n\n    public func addLocationObserver(for observer: LocationObserver) {\n        observers.add(observer)\n    }\n\n    public func removeLocationObserver(for observer: LocationObserver) {\n        observers.remove(observer)\n    }\n}\n\n// Override the location provider with the custom one.\nlet locationProvider = CustomLocationProvider()\nmapView.location.override(locationProvider: locationProvider)\n```\n\n----------------------------------------\n\nTITLE: Query Method Updates in MapboxMap\nDESCRIPTION: Changes to the queryRenderedFeatures method signature including parameter type changes and removal of default arguments. Updates include new RenderedQueryGeometryConvertible type and FeaturesetQueryTarget options.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_40\n\nLANGUAGE: Swift\nCODE:\n```\nFunc MapboxMap.queryRenderedFeatures(with: some MapboxMaps.RenderedQueryGeometryConvertible, targets: [MapboxMaps.FeaturesetQueryTarget], completion:)\n```\n\n----------------------------------------\n\nTITLE: Dynamic View Annotations in Mapbox Maps iOS v11\nDESCRIPTION: Shows how to create and use dynamic view annotations that can be attached to map features. This example creates an ETA view annotation attached to a route line.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet view = ETAView(text: \"55 min\")\nlet annotation = ViewAnnotation(layerId: \"route\", view: view)\nannotation.variableAnchors = .all // Allow anchor to be displayed in all directions.\nannotation.onAnchorChanged = { config in\n    // Update anchor position.\n    etaView.anchor = config.anchor\n}\nmapView.viewAnnotations.add(annotation)\n\n// When annotation content is changed, call `setNeedsUpdateSize()` for proper positioning.\nview.text = \"1h 05min\"\nannotation.setNeedsUpdateSize()\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Access Token in Swift\nDESCRIPTION: Shows how to set the Mapbox access token programmatically before initializing a MapView. This is the recommended approach for setting the access token when not using property lists or token files.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nimport MapboxMaps\n\nMapboxOptions.accessToken = accessToken\n```\n\n----------------------------------------\n\nTITLE: Configuring Atmosphere Style Primitive\nDESCRIPTION: Demonstrates how to create and configure an atmosphere primitive with various properties including range, blend, intensity and colors using the declarative syntax.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n/// Create an atmosphere primitive and set properties for range, start intensity, and color\nAtmosphere()\n    .range(start: 0, end: 12)\n    .horizonBlend(0.1)\n    .starIntensity(0.2)\n    .color(StyleColor(red: 240, green: 196, blue: 152, alpha: 1)!)\n    .highColor(StyleColor(red: 221, green: 209, blue: 197, alpha: 1)!)\n    .spaceColor(StyleColor(red: 153, green: 180, blue: 197, alpha: 1)!)\n```\n\n----------------------------------------\n\nTITLE: Map Content Gesture System in Mapbox Maps iOS v11\nDESCRIPTION: Illustrates the new Map Content Gesture System for handling tap and long press gestures on annotations, layers, and the map. This example sets up handlers for polygon annotations, layers, and the map.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet annotationManager = mapView.annotations.makePolygonAnnotationManager()\nvar annotation = PolygonAnnotation(...)\nannotation.tapHandler = { context in\n  print(\"tapped point annotation at \\(context.coordinate)\")\n  return true // the polygon handled the tap, do not propagate\n}\nannotationManager.annotations = [annotation]\n\nmapView.gestures.onLayerTap(\"my-layer\") { queriedFeature, context in\n    print(\"tapped feature \\(queriedFeature) of my-layer at \\(context.coordinate)\")\n    return true // layer handled the tap, do not propagate\n}.store(in: &cancelables)\n\nmapView.gestures.onMapTap.observe { context in\n    // this handler is called when neither annotation nor layer handled the tap.\n    print(\"map tapped at \\(context.coordinate)\")\n}.store(in: &cancelables)\n```\n\n----------------------------------------\n\nTITLE: Updating Standard and Satellite Style Configuration in Swift\nDESCRIPTION: The standard and standardSatellite functions in MapStyle have been updated with new parameters for more customization options, including color settings for various map elements.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_52\n\nLANGUAGE: Swift\nCODE:\n```\nFunc MapStyle.standard(theme:lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:show3dObjects:) has been renamed to Func standard(theme:lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:showPedestrianRoads:show3dObjects:colorMotorways:colorPlaceLabelHighlight:colorPlaceLabelSelect:colorRoads:colorTrunks:themeData:)\nFunc MapStyle.standardSatellite(lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:showRoadsAndTransit:showPedestrianRoads:) has been renamed to Func standardSatellite(lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:showRoadsAndTransit:showPedestrianRoads:colorMotorways:colorPlaceLabelHighlight:colorPlaceLabelSelect:colorRoads:colorTrunks:)\n```\n\n----------------------------------------\n\nTITLE: Creating Circle Annotations with Global Properties in SwiftUI\nDESCRIPTION: Enhanced circle annotation approach that applies common properties globally to the annotation group, reducing memory overhead for large datasets. Only properties that vary between annotations (like color) are set individually, while shared properties are set once on the group.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nCircleAnnotationGroup(circles, id: \\.id) { circle in\n    CircleAnnotation(centerCoordinate: circle.coordinate)\n      .circleColor(circle.color)\n}\n.circleRadius(10)\n.circleStrokeWidth(1)\n.circleStrokeColor(.black)\n```\n\n----------------------------------------\n\nTITLE: Combine Usage with Mapbox Maps iOS Events\nDESCRIPTION: Shows how to use the Combine framework with Mapbox Maps events. This example debounces camera change events and maps them to camera state.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nmapboxMap.onCameraChanged\n    .debounce(for: .milliseconds(500), scheduler: DispatchQueue.main)\n    .map(\\.cameraState)\n    .sink { [weak self] cameraState in\n        self?.handleCameraChange(cameraState)\n    }.store(in: &cancellables)\n```\n\n----------------------------------------\n\nTITLE: Setting Map Projection in Swift\nDESCRIPTION: API for setting the map projection, including globe projection, using Style.setProjection(_:) and Style.projection. This was moved from experimental status in version 10.5.0-beta.1.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_22\n\nLANGUAGE: Swift\nCODE:\n```\nStyle.setProjection(_:)\nStyle.projection\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Style Components\nDESCRIPTION: Shows how to create custom style components by implementing the MapStyleContent protocol. The example creates a CarModel component that combines source, model, and layer primitives to display a 3D car model on the map.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n/// A custom style component\nstruct CarModel: MapStyleContent {\n    var body: some MapStyleContent {\n        GeoJSONSource(id: \"models-geojson\")\n            .data(.featureCollection(carFeatureCollection))\n\n        Model(\n            id: \"car\",\n            uri: Bundle.main.url(forResource: \"sportcar\", withExtension: \"glb\")!\n        )\n\n        ModelLayer(id: \"models\", source: \"models-geojson\")\n            .modelId(Exp(.get) { \"model\" })\n            .modelType(.common3d)\n            .modelScale([40, 40, 40])\n            .modelTranslation([0, 0, 0])\n            .modelRotation([0, 0, 90])\n            .modelOpacity(0.7)\n    }\n}\n\n/// Usage:\nMap {\n    CarModel()\n}\n```\n\n----------------------------------------\n\nTITLE: Access Token and Map Options Management in Mapbox Maps iOS v11\nDESCRIPTION: Demonstrates how to set the access token and configure map options in Mapbox Maps SDK v11. This example shows setting the access token and various map options programmatically.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nimport MapboxMaps\n\nMapboxOptions.accessToken = accessToken\n\nMapboxMapsOptions.dataPath = customDataPathURL\nMapboxMapsOptions.assetPath = customAssetPathURL\nMapboxMapsOptions.tileStoreUsageMode = .readOnly\nMapboxMapsOptions.tileStore = tileStore\n```\n\n----------------------------------------\n\nTITLE: Accessing MapboxMap API Change\nDESCRIPTION: Shows the change in event handling API from BaseMapView.on() to mapView.mapboxMap methods returning Cancelable\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_34\n\nLANGUAGE: Swift\nCODE:\n```\n// Old way\nBaseMapView.on()\n\n// New way\nmapView.mapboxMap.onNext(...) -> Cancelable\nmapView.mapboxMap.onEvery(...) -> Cancelable\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Heading Provider for Puck in SwiftUI for visionOS\nDESCRIPTION: This example demonstrates how to create a custom heading provider for the puck in visionOS applications, using a custom LocationModel and overriding the default location and heading providers.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Work with visionOS.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct PuckDemo: View {\n    class LocationModel: ObservableObject {\n        var locationProvider = AppleLocationProvider()\n\n        // A custom heading data\n        @Published var heading: Heading = .init(direction: 15, accuracy: 1)\n    }\n\n    @StateObject var model = LocationModel()\n\n    var body: some View {\n        MapReader { proxy in\n            Map(initialViewport: .followPuck(zoom: 16, pitch: 0)) {\n                Puck2D(bearing: .heading)\n            }\n            .onAppear {\n                proxy.location?.override(\n                    locationProvider: model.locationProvider.onLocationUpdate,\n                    headingProvider: model.$heading.eraseToSignal())\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Location and Heading Providers in Mapbox Maps iOS v11\nDESCRIPTION: Code snippet showing how to override both location and heading providers in Mapbox Maps SDK v11. This allows supplying custom heading (compass) data alongside location data.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nlet headingProvider = CustomHeadingProvider()\nmapView.location.override(locationProvider: locationProvider, headingProvider: headingProvider)\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Changes in Mapbox Maps iOS SDK\nDESCRIPTION: Documents the parameter type changes from MapboxMaps.Expression to MapboxMaps.Exp across multiple layer classes. This change affects various styling and configuration functions across different layer types.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_33\n\nLANGUAGE: Swift\nCODE:\n```\n// HeatmapLayer parameter type changes\nFunc HeatmapLayer.heatmapIntensity(_:) has parameter 0 type change from MapboxMaps.Expression to MapboxMaps.Exp\nFunc HeatmapLayer.heatmapOpacity(_:) has parameter 0 type change from MapboxMaps.Expression to MapboxMaps.Exp\n\n// HillshadeLayer parameter type changes\nFunc HillshadeLayer.filter(_:) has parameter 0 type change from MapboxMaps.Expression to MapboxMaps.Exp\nFunc HillshadeLayer.hillshadeAccentColor(_:) has parameter 0 type change from MapboxMaps.Expression to MapboxMaps.Exp\n\n// LineLayer parameter type changes\nFunc LineLayer.lineBlur(_:) has parameter 0 type change from MapboxMaps.Expression to MapboxMaps.Exp\nFunc LineLayer.lineBorderColor(_:) has parameter 0 type change from MapboxMaps.Expression to MapboxMaps.Exp\n\n// LocationIndicatorLayer parameter type changes\nFunc LocationIndicatorLayer.accuracyRadius(_:) has parameter 0 type change from MapboxMaps.Expression to MapboxMaps.Exp\n\n// ModelLayer parameter type changes\nFunc ModelLayer.modelAmbientOcclusionIntensity(_:) has parameter 0 type change from MapboxMaps.Expression to MapboxMaps.Exp\n\n// Puck2D and Puck3D parameter type changes\nFunc Puck2D.scale(_:) has parameter 0 type change from MapboxMaps.Expression to MapboxMaps.Exp\nFunc Puck3D.modelCastShadows(_:) has parameter 0 type change from MapboxMaps.Expression to MapboxMaps.Exp\n\n// RasterLayer parameter type changes\nFunc RasterLayer.rasterArrayBand(_:) has parameter 0 type change from MapboxMaps.Expression to MapboxMaps.Exp\n```\n\n----------------------------------------\n\nTITLE: Configuring Location Provider in Mapbox Maps iOS v10 vs v11\nDESCRIPTION: Comparison of how to configure location provider options between v10 and v11 of Mapbox Maps SDK. In v11, customization is done directly via the provider implementation rather than through the LocationManager.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// v10\nmapView.location.options.distanceFilter = 100\n\n// v11\nlet locationProvider = AppleLocationProvider()\nlocationProvider.options.distanceFilter = 100\nmapView.location.override(provider: locationProvider)\n```\n\n----------------------------------------\n\nTITLE: Standard Style Function Parameter Type Changes in Swift\nDESCRIPTION: Changes to parameter types in MapStyle.standard and MapStyle.standardSatellite methods. The font parameter type has been updated from String to StandardFont.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_42\n\nLANGUAGE: Swift\nCODE:\n```\nFunc MapStyle.standard(theme:lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:show3dObjects:) has parameter 2 type change from Swift.String? to MapboxMaps.StandardFont?\nFunc MapStyle.standardSatellite(lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:showRoadsAndTransit:showPedestrianRoads:) has parameter 1 type change from Swift.String? to MapboxMaps.StandardFont?\n```\n\n----------------------------------------\n\nTITLE: Creating Circle Annotations with Per-Annotation Properties in SwiftUI\nDESCRIPTION: Example of how to create circle annotations in SwiftUI with individual property configuration for each annotation. Each circle annotation has its own coordinate and color, while duplicating other styling properties across all annotations.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nCircleAnnotationGroup(circles, id: \\.id) { circle in\n    CircleAnnotation(centerCoordinate: circle.coordinate)\n      .circleColor(circle.color)\n      .circleRadius(10)\n      .circleStrokeWidth(1)\n      .circleStrokeColor(.black)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Raster DEM Source with ID in Swift\nDESCRIPTION: Shows how to create a RasterDemSource with a required ID and add it to the map. This reflects the API change requiring the id property to be specified for sources when creating them.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nlet terrainSource = RasterDemSource(id: \"terrain-source\")\nmapView.mapboxMap.addSource(terrainSource)\n```\n\n----------------------------------------\n\nTITLE: FormatOptions Expression Support\nDESCRIPTION: Updates to FormatOptions to support expressions by changing property types to use MapboxMaps.Value wrapper.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_20\n\nLANGUAGE: Swift\nCODE:\n```\n// Support expression for FormatOptions\nAccessor FormatOptions.fontScale.Get() has return type change from Swift.Double? to MapboxMaps.Value<Swift.Double>?\nAccessor FormatOptions.textColor.Get() has return type change from MapboxMaps.StyleColor? to MapboxMaps.Value<MapboxMaps.StyleColor>?\n```\n\n----------------------------------------\n\nTITLE: Partial GeoJSON Update with Mapbox Maps in Swift\nDESCRIPTION: Demonstrates the new Style APIs for partial GeoJSON updates, including adding, updating, and removing GeoJSON source features with specific data IDs.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nMapboxMap.addGeoJSONSourceFeatures(forSourceId:features:dataId:)\nMapboxMap.updateGeoJSONSourceFeatures(forSourceId:features:dataId:)\nMapboxMap.removeGeoJSONSourceFeatures(forSourceId:featureIds:dataId:)\n```\n\n----------------------------------------\n\nTITLE: Gesture Handler Type Changes in Swift\nDESCRIPTION: Documentation of type changes for gesture handlers across different annotation types (Point, Polyline, Circle, Polygon). Changes involve updating from MapContentGestureContext to InteractionContext in handler signatures.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_39\n\nLANGUAGE: Swift\nCODE:\n```\n// Example type change\nVar PointAnnotation.dragBeginHandler: ((inout MapboxMaps.PointAnnotation, MapboxMaps.InteractionContext) -> Swift.Bool)?\n```\n\n----------------------------------------\n\nTITLE: Imperative Circle Annotation Creation with Global Defaults\nDESCRIPTION: Example showing how to create circle annotations imperatively with a mix of global and individual properties. Sets a global blue color on the annotation manager while applying random colors to every second annotation.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet circleAnnotationManager = mapView.annotations.makeCircleAnnotationManager()\nvar annotations = [CircleAnnotation]()\nfor i in 0...2000 {\n  var annotation = CircleAnnotation(centerCoordinate: .random)\n  if i % 2 == 0 { annotation.circleColor = StyleColor(.random) }\n  annotations.append(annotation)\n}\ncircleAnnotationManager.circleColor = .blue\n```\n\n----------------------------------------\n\nTITLE: Style API Migration Example - v10 to v11\nDESCRIPTION: Demonstrates the migration from deprecated Style API access pattern to direct Style API access through MapboxMap and Snapshotter instances.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nmapView.mapboxMap.style.updateGeoJSONSource(withId: \"route\", geoJSON: route)\n...\nlet projection = snapshot.style.projection\n```\n\nLANGUAGE: swift\nCODE:\n```\nmapView.mapboxMap.updateGeoJSONSource(withId: \"route\", geoJSON: route)\n...\nlet projection = snapshot.projection\n```\n\n----------------------------------------\n\nTITLE: Layer Slot Type Changes in Mapbox Maps\nDESCRIPTION: Type changes for slot properties across various layer types from String? to MapboxMaps.Slot? for improved type safety. This affects all layer types including Background, Circle, Fill, Line, Symbol, and other specialized layers.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// Typed Slot API\nAccessor BackgroundLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor BackgroundLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor CircleLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor CircleLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor CustomLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor CustomLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor FillExtrusionLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor FillExtrusionLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor FillLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor FillLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor HeatmapLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor HeatmapLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor HillshadeLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor HillshadeLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor Layer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor Layer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor LineLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor LineLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor LocationIndicatorLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor LocationIndicatorLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor ModelLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor ModelLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor RasterLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor RasterLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor SkyLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor SkyLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nAccessor SymbolLayer.slot.Get() has return type change from Swift.String? to MapboxMaps.Slot?\nAccessor SymbolLayer.slot.Set() has parameter 0 type change from Swift.String? to MapboxMaps.Slot?\nConstructor CustomLayer.init(id:renderer:slot:minZoom:maxZoom:visibility:) has parameter 2 type change from Swift.String? to MapboxMaps.Slot?\nVar BackgroundLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar CircleLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar CustomLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar FillExtrusionLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar FillLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar HeatmapLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar HillshadeLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar Layer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar LineLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar LocationIndicatorLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar ModelLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar RasterLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar SkyLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\nVar SymbolLayer.slot has declared type change from Swift.String? to MapboxMaps.Slot?\n```\n\n----------------------------------------\n\nTITLE: Handling Tap Gestures on View Annotations in SwiftUI\nDESCRIPTION: Demonstrates how to add a tap gesture to a MapViewAnnotation in SwiftUI. The view annotation handles the gesture before the Map view, printing a message when tapped.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Map Content Gestures User Guide.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    Map {\n        MapViewAnnotation(coordinate: coordinate) {\n            Text(\"üçî\")\n                .padding()\n                .background(Circle().fill(.green))\n                .onTapGesture {\n                    print(\"burger is tapped\") // <- View annotation handle the gesture before the Map view.\n                }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Layer Annotations in SwiftUI with Mapbox Maps iOS SDK\nDESCRIPTION: This snippet demonstrates how to use different types of layer annotations in a SwiftUI Map view. It includes examples of PolygonAnnotation, PointAnnotation, and PointAnnotationGroup with clustering options.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n    struct Item {...}\n    @state var items = [Item]()\n\n    var body: some View {\n        Map {\n            /// Displays a polygon annotation\n            let polygon = Polygon(...)\n            PolygonAnnotation(polygon: polygon)\n                .fillColor(StyleColor(.systemBlue))\n                .fillOpacity(0.5)\n                .fillOutlineColor(StyleColor(.black))\n                .onTapGesture {\n                    print(\"Polygon is tapped\")\n                }\n\n            /// Displays a single point annotation\n            PointAnnotation(...)\n\n            /// Displays data-driven group of point annotations.\n            PointAnnotationGroup(items, id: \\.id) { item in\n                PointAnnotation(coordinate: item.coordinate)\n                    .image(named: \"dest-pin\")\n                    .iconAnchor(.bottom)\n            }\n            .clusterOptions(ClusterOptions(...))\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Updated Source Retrieval Function in Swift\nDESCRIPTION: Modified function signature for source retrieval to include explicit type parameter.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_28\n\nLANGUAGE: Swift\nCODE:\n```\npublic func source<T>(withId id: String, type: T.Type) throws -> T where T: Source\n```\n\n----------------------------------------\n\nTITLE: Creating PolylineAnnotationGroup with Static Annotations in SwiftUI\nDESCRIPTION: Example demonstrating how to create a PolylineAnnotationGroup in SwiftUI with a static list of annotations. This approach allows multiple polyline annotations to be displayed on the same layer with different styling options.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nMap {\n    PolylineAnnotationGroup {\n        PolylineAnnotation(lineCoordinates: route.coordinates)\n            .lineColor(\"blue\")\n        if let alternativeRoute {\n            PolylineAnnotation(lineCoordinates: alternativeRoute.coordinates)\n                .lineColor(\"green\")\n        }\n    }\n    .lineCap(.round)\n    .slot(\"middle\")\n}\n```\n\n----------------------------------------\n\nTITLE: Camera State Access Migration - v10 to v11\nDESCRIPTION: Demonstrates the updated way to access camera state through mapboxMap instead of directly through mapView.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\nlet center = mapView.cameraState.center\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet center = mapView.mapboxMap.cameraState.center\n```\n\n----------------------------------------\n\nTITLE: Type Changes in Layer Filter Properties\nDESCRIPTION: Changes to filter property types across different layer classes, changing from MapboxMaps.Expression? to MapboxMaps.Exp?\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_29\n\nLANGUAGE: Swift\nCODE:\n```\n// ModelLayer.filter: MapboxMaps.Expression? -> MapboxMaps.Exp?\n// RasterLayer.filter: MapboxMaps.Expression? -> MapboxMaps.Exp?\n// RasterParticleLayer.filter: MapboxMaps.Expression? -> MapboxMaps.Exp?\n// SymbolLayer.filter: MapboxMaps.Expression? -> MapboxMaps.Exp?\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Annotations with Eye Tracking Feedback in SwiftUI for visionOS\nDESCRIPTION: This snippet demonstrates how to create map annotations in visionOS, comparing point annotations without eye tracking feedback to view annotations that support visual feedback for eye tracking.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Work with visionOS.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nMap {\n    // With point annotations you can handle gestures, but you won't receive visual eye-tracking feedback.\n    PointAnnotation(coordinate: coordinate1)\n        .onTapGesture {\n            print(\"point annotation tapped\")\n        }\n\n    // With view annotations, you can handle gestures and receive visual feedback.\n    MapViewAnnotation(coordinate: coordinate2) {\n        Circle()\n            .fill(.blue)\n            .hoverEffect()\n            .onTapGesture {\n                print(\"view annotation tapped\")\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming MapStyle.standardExperimental Function in Swift\nDESCRIPTION: The standardExperimental function in MapStyle has been renamed with a slightly different parameter order. The placeLabelSelectColor and placeLabelHighlightColor parameters have been swapped.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_48\n\nLANGUAGE: Swift\nCODE:\n```\nFunc MapStyle.standardExperimental(theme:lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:show3dObjects:buildingHighlightColor:buildingSelectColor:placeLabelSelectColor:placeLabelHighlightColor:)\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Preset in Mapbox Standard Style\nDESCRIPTION: Demonstrates how to change the light preset of the Mapbox Standard style from the default 'day' to another preset like 'dusk'. The light preset affects colors and shadows on the map.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nmapView.mapboxMap.setStyleImportConfigProperty(for: \"basemap\", config: \"lightPreset\", value: \"dusk\")\n```\n\n----------------------------------------\n\nTITLE: Updating PointAnnotation and Puck3D Property Setters in SwiftUI\nDESCRIPTION: Demonstrates the changes in syntax for setting properties on PointAnnotation and Puck3D objects in SwiftUI, moving from fixed-length arrays to named properties or platform types for better readability.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Before\nPointAnnotation()\n    .iconOffset([10, 20]) // x, y\n    .iconTextFitPadding([1, 2, 3, 4]) // top, right, bottom, left\nPuck3D()\n    .modelScale([1, 2, 3]) // x, y, z\n\n// After\nPointAnnotation()\n    .iconOffset(x: 10, y: 20)\n    .iconTextFitPadding(UIEdgeInsets(top: 1, left: 4, bottom: 3, right: 2))\nPuck3D()\n    .modelScale(x: 1, y: 2, z: 3)\n```\n\n----------------------------------------\n\nTITLE: Layer Style Property Type Changes\nDESCRIPTION: Changes in various layer style property parameter types from MapboxMaps.Expression to MapboxMaps.Exp\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_31\n\nLANGUAGE: Swift\nCODE:\n```\n// Example type changes:\nFillLayer.fillColor(_:) // Parameter type: Expression -> Exp\nCircleLayer.circleRadius(_:) // Parameter type: Expression -> Exp\nBackgroundLayer.backgroundColor(_:) // Parameter type: Expression -> Exp\n```\n\n----------------------------------------\n\nTITLE: Managing Feature States with Interactions in SwiftUI\nDESCRIPTION: This Swift code example demonstrates how to build a SwiftUI view that handles interactions with POIs and buildings using the experimental Interactions API. It shows how to select features on tap/long press and how to apply visual states to selected features using the FeatureState API.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/API Catalogs/Featuresets and Interactions.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n/// SwiftUI\nstruct InteractionsExample: View {\n    @State var selectedPoi: StandardPoiFeature?\n    @State var selectedBuilding: StandardBuildingsFeature?\n\n    var body: some View {\n        Map {\n            // Select the POI when tapped.\n            TapInteraction(.standardPoi) { poi, context in\n                selectedPoi = poi\n                return true\n            }\n\n            // Select the building when tapped.\n            LongPressInteraction(.standardBuildings) { building, context in\n                selectedBuilding = building\n                return true\n            }\n\n            if let selectedPoi {\n                // Sets the `hide` state to true `when` the poi is selected\n                FeatureState(selectedPoi, StandardPoiFeature.State(hide: true))\n\n                // Displays a view annotation on top\n                MapViewAnnotation(coordinate: selectedPoi.coordinate) {\n                    CustomMarker(name: selectedPoi.name)\n                }\n            }\n\n            if let selectedBuilding {\n                // Sets the `select` state to `true` when building is selected.\n                // This will paint the building into a vibrant color.\n                FeatureState(selectedBuilding, .init(select: true))\n            }\n        }\n        // Currently the featuresets are only available in experimental version of Standard Style for preview.\n        // Don't use it in production.\n        .mapStyle(.standardExperimental)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Layer to Imported Style in Mapbox Maps iOS\nDESCRIPTION: Shows how to add a new layer to an imported style using the 'slot' property. This example adds a line layer to the 'middle' slot of the imported style.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvar layer = LineLayer(id: \"line-layer\", source: \"line-source\")\nlayer.slot = .middle\nmapView.mapboxMap.addLayer(layer)\n```\n\n----------------------------------------\n\nTITLE: Type Changes for RasterResampling Enum in Swift\nDESCRIPTION: Type changes for RasterResampling enum elements from function types to direct enum types in the Mapbox Maps iOS SDK.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\nEnumElement RasterResampling.linear has declared type change from (MapboxMaps.RasterResampling.Type) -> MapboxMaps.RasterResampling to MapboxMaps.RasterResampling\nEnumElement RasterResampling.nearest has declared type change from (MapboxMaps.RasterResampling.Type) -> MapboxMaps.RasterResampling to MapboxMaps.RasterResampling\n```\n\n----------------------------------------\n\nTITLE: Handling Gestures on Clustered Annotations\nDESCRIPTION: Shows how to handle tap gestures on annotation clusters, with an example of expanding a cluster by setting the corresponding zoom level when tapped. Uses PointAnnotationGroup with clustering options.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Map Content Gestures User Guide.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet clusterOptions = ClusterOptions(circleRadius: .constant(10), circleColor: .constant(StyleColor(.blue)))\n\nvar body: some View {\n    Map {\n        PointAnnotationGroup(places) { places in\n            PointAnnotation(coordinate: place.coordinate)\n                .image(named: \"intermediate-pin\")\n                .onTapGesture { places.removeAll(where: { $0.id == place.id }) }\n        }\n        .clusterOptions(clusterOptions)\n        .onClusterTapGesture { context in\n            withViewportAnimation(.easeIn(duration: 1)) {\n                viewport = .camera(center: context.coordinate, zoom: context.expansionZoom)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Standard Style in Swift\nDESCRIPTION: Shows how to set the Mapbox Standard style as the default map style using StyleURI. The Standard style is the new default style in v11.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet mapView = MapView()\nmapView.mapboxMap.styleURI = .standard\n```\n\n----------------------------------------\n\nTITLE: Light Property Type Changes\nDESCRIPTION: Changes in light source property parameter types from MapboxMaps.Expression to MapboxMaps.Exp\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_32\n\nLANGUAGE: Swift\nCODE:\n```\n// Example type changes:\nAmbientLight.color(_:) // Parameter type: Expression -> Exp\nDirectionalLight.intensity(_:) // Parameter type: Expression -> Exp\nFlatLight.position(_:) // Parameter type: Expression -> Exp\n```\n\n----------------------------------------\n\nTITLE: Using Combine Publishers for Location Updates in Mapbox Maps iOS v11\nDESCRIPTION: Example showing how to use Combine publishers to drive location and heading updates in Mapbox Maps SDK v11. This demonstrates integration with SwiftUI's reactive patterns.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nclass Example {\n    @Published\n    private var locations = [Location(coordinate: .init(latitude: 0, longitude: 0))]\n    @Published\n    private var heading = Heading(direction: 0, accuracy: 0)\n\n    func setup() {\n        mapView.location.override(\n            locationProvider: $location.eraseToSignal(),\n            headingProvider: $heading.eraseToSignal())\n    }\n\n    func update() {\n        locations = /* new locations update */\n        heading = /* new heading */\n    }\n```\n\n----------------------------------------\n\nTITLE: Clearing Map Data in Swift\nDESCRIPTION: New static and instance methods for clearing temporary map data in MapboxMap and Snapshotter classes.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_31\n\nLANGUAGE: Swift\nCODE:\n```\nMapboxMap.clearData(for:completion:)\nMapboxMap.clearData(completion:)\nSnapshotter.clearData(completion:)\n```\n\n----------------------------------------\n\nTITLE: Optimized Performance Implementation\nDESCRIPTION: Shows an optimized approach using custom components and reference types to minimize unnecessary re-evaluations of large datasets.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyView: View {\n    /// A simple reference wrapper around FeatureCollection.\n    private class RouteData {\n        let features: FeatureCollection\n        init(features: FeatureCollection) { self.features = features }\n    }\n\n    /// A custom route component that renders the line layer and creates the data source for it.\n    private struct RouteComponent: MapContent {\n        /// The `body` is called only when component's properties are changed.\n        /// In this case the `route` is a reference type, which guarantees the fast equality check.\n        let route: RouteData\n\n        var body: some MapContent {\n            LineLayer(id: \"route\", source: \"route-source\")\n            GeoJSONSource(id: \"route-source\")\n                .data(.featureCollection(route.features))\n        }\n    }\n\n    @State private var routeData: RouteData?\n    @State private var counter = 0\n\n    var body: some View {\n        Map {\n            if let routeData {\n                RouteComponent(route: routeData)\n            }\n        }\n        .onAppear {\n            routeData = RouteData(features: loadHeavyGeojson())\n        }\n\n        Button(\"Trigger update \\(counter)\") {\n            /// Update of the counter state won't trigger the RouteComponent.body evaluation because\n            /// routeData points to the same data.\n            counter += 1\n        }\n\n        Button(\"Update the route\") {\n            /// This will correctly update the rendered route, only once.\n            routeData = RouteData(features: loadANewVersionOfRoute())\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing Map Labels in Swift\nDESCRIPTION: Method for localizing map labels into a specific locale, with support for specifying layer IDs to localize.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_33\n\nLANGUAGE: Swift\nCODE:\n```\nmapView.mapboxMap.style.localizeLabels(into: Locale)\n```\n\n----------------------------------------\n\nTITLE: MapboxMap Function Renamed and Type Changes in Swift\nDESCRIPTION: Several MapboxMap feature state management functions have been renamed and their parameter types have been changed to work with the new generic type system.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_45\n\nLANGUAGE: Swift\nCODE:\n```\nFunc MapboxMap.getFeatureState(feature:callback:) has been renamed to Func getFeatureState(_:callback:)\nFunc MapboxMap.removeFeatureState(feature:stateKey:callback:) has been renamed to Func removeFeatureState(_:stateKey:callback:)\nFunc MapboxMap.setFeatureState(feature:state:callback:) has been renamed to Func setFeatureState(_:state:callback:)\nFunc MapboxMap.getFeatureState(feature:callback:) has parameter 0 type change from MapboxMaps.InteractiveFeature to F\nFunc MapboxMap.getFeatureState(feature:callback:) has parameter 1 type change from (Swift.Result<[Swift.String : Any], Swift.Error>) -> Swift.Void to (Swift.Result<F.State, Swift.Error>) -> Swift.Void\nFunc MapboxMap.getFeatureState(featureset:featureId:callback:) has parameter 0 type change from MapboxCoreMaps.FeaturesetDescriptor to MapboxMaps.FeaturesetDescriptor<T>\nFunc MapboxMap.getFeatureState(featureset:featureId:callback:) has parameter 2 type change from (Swift.Result<[Swift.String : Any], Swift.Error>) -> Swift.Void to (Swift.Result<T.State, Swift.Error>) -> Swift.Void\n```\n\n----------------------------------------\n\nTITLE: Using Style Primitives as MapContent in SwiftUI\nDESCRIPTION: Shows how to use style primitives as MapContent in SwiftUI, utilizing the new Declarative Styling API.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@_spi(Experimental) MapboxMaps\nMap {\n    LineLayer(id: \"traffic\")\n        .lineColor(.red)\n        .lineWidth(2)\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Map Styling in SwiftUI\nDESCRIPTION: Shows how to conditionally add or remove map style primitives in SwiftUI based on state variables. The example toggles between terrain visualization with globe projection and standard mercator projection.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@State var useTerrain = true\n\nvar body: some View {\n    Map {\n        if useTerrain {\n            StyleProjection(name: .globe)\n            RasterDemSource(id: \"mapbox-dem\")\n                .url(\"mapbox://mapbox.mapbox-terrain-dem-v1\")\n                .maxzoom(14.0)\n            Terrain(sourceId: \"mapbox-dem\")\n                .exaggeration(5)\n        } else {\n            StyleProjection(name: .mercator)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Experimental Annotations to Annotation Z-Offset Properties in Swift\nDESCRIPTION: The symbolZOffset, fillZOffset, and lineZOffset properties and functions for PointAnnotation, PolygonAnnotation, and PolylineAnnotation have been marked with @_documentation and @_spi attributes.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_54\n\nLANGUAGE: Swift\nCODE:\n```\nFunc PointAnnotation.symbolZOffset(_:) is now with @_documentation\nFunc PointAnnotation.symbolZOffset(_:) is now with @_spi\nFunc PolygonAnnotation.fillZOffset(_:) is now with @_documentation\nFunc PolygonAnnotation.fillZOffset(_:) is now with @_spi\nFunc PolylineAnnotation.lineZOffset(_:) is now with @_documentation\nFunc PolylineAnnotation.lineZOffset(_:) is now with @_spi\nVar PointAnnotation.symbolZOffset is now with @_documentation\nVar PointAnnotation.symbolZOffset is now with @_spi\nVar PolygonAnnotation.fillZOffset is now with @_documentation\nVar PolygonAnnotation.fillZOffset is now with @_spi\nVar PolylineAnnotation.lineZOffset is now with @_documentation\nVar PolylineAnnotation.lineZOffset is now with @_spi\n```\n\n----------------------------------------\n\nTITLE: Layer Position with Streets Style\nDESCRIPTION: Shows how to position layers relative to built-in style layers using SlotLayer and position modifiers.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nMap {\n    /// The \"roads\" layer id comes from the Streets Style.\n    SlotLayer(id: \"below-roads\")\n        .position(.below(\"roads\"))\n\n    FillLayer(id: \"square\", source: \"square-data\")\n        .fillColor(.systemPink)\n        .slot(Slot(rawValue: \"below-roads\")\n}\n.mapStyle(.streets)\n```\n\n----------------------------------------\n\nTITLE: Using GeoJSON String with GeoJSONSource in Mapbox Maps iOS v11\nDESCRIPTION: Example showing how to configure a GeoJSONSource with a GeoJSON string in Mapbox Maps SDK v11. This is a new capability in addition to existing options like URL and Feature objects.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nlet poiGeoJSON = \"\"\"\n{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    { \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [ -151.5129, 63.1016 ] } }\n  ]\n}\n\"\"\"\nvar poiSource = GeoJSONSource(id: \"poi\")\npoiSource.data = .string(poiGeoJSON)\nmapView.mapboxMap.addSource(poiSource)\n```\n\n----------------------------------------\n\nTITLE: Cluster Event Handling in Point Annotations\nDESCRIPTION: Addition of onClusterTap and onClusterLongPress handlers to the PointAnnotationManager to allow for custom interaction with clustered points. This enables more interactive and responsive map experiences with clustered data.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\n// Add onClusterTap/onClusterLongPress\nFunc AnnotationOrchestrator.makePointAnnotationManager(id:layerPosition:clusterOptions:) has been renamed to Func makePointAnnotationManager(id:layerPosition:clusterOptions:onClusterTap:onClusterLongPress:)\n```\n\n----------------------------------------\n\nTITLE: Conditional Map Styling in UIKit\nDESCRIPTION: Demonstrates how to conditionally update map style primitives in UIKit by calling setMapStyleContent method. The example toggles between terrain visualization with globe projection and standard mercator projection.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar useTerrain = true\n\n// To change your style content you should set new map primitives using\n// ``StyleManager/setMapStyleContent(content:)`` like below.\n// This will fully change the displayed style content,\n// so be sure to include all the content you want.\nfunc updateStyle(useTerrain: Bool) {\n    mapView.mapboxMap.setMapStyleContent {\n        if useTerrain {\n            StyleProjection(name: .globe)\n            RasterDemSource(id: \"mapbox-dem\")\n                .url(\"mapbox://mapbox.mapbox-terrain-dem-v1\")\n                .maxzoom(14.0)\n            Terrain(sourceId: \"mapbox-dem\")\n                .exaggeration(5)\n        } else {\n            StyleProjection(name: .mercator)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Mapbox Maps SDK in Swift\nDESCRIPTION: Import statement required to use Mapbox Maps SDK in Swift source files.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/release/README-dynamic.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport MapboxMaps\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Events API in Mapbox Maps iOS v11\nDESCRIPTION: Illustrates the new type-safe events API for observing camera changes and style loading. This example uses the Combine framework for event handling.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nvar cancelables = Set<AnyCancelable>()\n\n// Observe every camera change\nmapView.mapboxMap.onCameraChanged.observe { [weak self] event in\n    self?.handleCameraChange(event.cameraState)\n}.store(in: &cancelables)\n\n// Observe only the next style loading event\nmapView.mapboxMap.onStyleLoaded.observeNext { [weak self] _ in\n  self?.setupStyle()\n}.store(in: &cancelables)\n```\n\n----------------------------------------\n\nTITLE: GeoJSON Source Feature Management in Swift\nDESCRIPTION: Methods for granular management of GeoJSON features including adding, updating and removing individual features. This API provides up to 4x performance improvement for large feature sets.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\ntry mapView.mapboxMap.addGeoJSONSourceFeatures(forSourceId: sourceId, features: features)\ntry mapView.mapboxMap.updateGeoJSONSourceFeatures(forSourceId: sourceId, features: features)\ntry mapView.mapboxMap.removeGeoJSONSourceFeatures(forSourceId: sourceId, featureIds: featureIds)\n```\n\n----------------------------------------\n\nTITLE: Interactive Features Context Type Changes in Swift MapboxMaps SDK\nDESCRIPTION: The MapContentGestureContext type has been replaced with InteractionContext throughout the API, affecting annotation handlers and gesture managers.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_38\n\nLANGUAGE: swift\nCODE:\n```\n// Interactive features\nAccessor CircleAnnotation.dragBeginHandler.Get() has return type change from ((inout MapboxMaps.CircleAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((inout MapboxMaps.CircleAnnotation, MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor CircleAnnotation.dragBeginHandler.Set() has parameter 0 type change from ((inout MapboxMaps.CircleAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((inout MapboxMaps.CircleAnnotation, MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor CircleAnnotation.dragChangeHandler.Get() has return type change from ((inout MapboxMaps.CircleAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.CircleAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor CircleAnnotation.dragChangeHandler.Set() has parameter 0 type change from ((inout MapboxMaps.CircleAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.CircleAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor CircleAnnotation.dragEndHandler.Get() has return type change from ((inout MapboxMaps.CircleAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.CircleAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor CircleAnnotation.dragEndHandler.Set() has parameter 0 type change from ((inout MapboxMaps.CircleAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.CircleAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor CircleAnnotation.longPressHandler.Get() has return type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor CircleAnnotation.longPressHandler.Set() has parameter 0 type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor CircleAnnotation.tapHandler.Get() has return type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor CircleAnnotation.tapHandler.Set() has parameter 0 type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor GestureManager.onMapLongPress.Get() has return type change from MapboxMaps.Signal<MapboxMaps.MapContentGestureContext> to MapboxMaps.Signal<MapboxMaps.InteractionContext>\nAccessor GestureManager.onMapTap.Get() has return type change from MapboxMaps.Signal<MapboxMaps.MapContentGestureContext> to MapboxMaps.Signal<MapboxMaps.InteractionContext>\nAccessor PointAnnotation.dragBeginHandler.Get() has return type change from ((inout MapboxMaps.PointAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((inout MapboxMaps.PointAnnotation, MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PointAnnotation.dragBeginHandler.Set() has parameter 0 type change from ((inout MapboxMaps.PointAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((inout MapboxMaps.PointAnnotation, MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PointAnnotation.dragChangeHandler.Get() has return type change from ((inout MapboxMaps.PointAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.PointAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor PointAnnotation.dragChangeHandler.Set() has parameter 0 type change from ((inout MapboxMaps.PointAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.PointAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor PointAnnotation.dragEndHandler.Get() has return type change from ((inout MapboxMaps.PointAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.PointAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor PointAnnotation.dragEndHandler.Set() has parameter 0 type change from ((inout MapboxMaps.PointAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.PointAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor PointAnnotation.longPressHandler.Get() has return type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PointAnnotation.longPressHandler.Set() has parameter 0 type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PointAnnotation.tapHandler.Get() has return type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PointAnnotation.tapHandler.Set() has parameter 0 type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PolygonAnnotation.dragBeginHandler.Get() has return type change from ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PolygonAnnotation.dragBeginHandler.Set() has parameter 0 type change from ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PolygonAnnotation.dragChangeHandler.Get() has return type change from ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor PolygonAnnotation.dragChangeHandler.Set() has parameter 0 type change from ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor PolygonAnnotation.dragEndHandler.Get() has return type change from ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor PolygonAnnotation.dragEndHandler.Set() has parameter 0 type change from ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.PolygonAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor PolygonAnnotation.longPressHandler.Get() has return type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PolygonAnnotation.longPressHandler.Set() has parameter 0 type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PolygonAnnotation.tapHandler.Get() has return type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PolygonAnnotation.tapHandler.Set() has parameter 0 type change from ((MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PolylineAnnotation.dragBeginHandler.Get() has return type change from ((inout MapboxMaps.PolylineAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((inout MapboxMaps.PolylineAnnotation, MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PolylineAnnotation.dragBeginHandler.Set() has parameter 0 type change from ((inout MapboxMaps.PolylineAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Bool)? to ((inout MapboxMaps.PolylineAnnotation, MapboxMaps.InteractionContext) -> Swift.Bool)?\nAccessor PolylineAnnotation.dragChangeHandler.Get() has return type change from ((inout MapboxMaps.PolylineAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.PolylineAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\nAccessor PolylineAnnotation.dragChangeHandler.Set() has parameter 0 type change from ((inout MapboxMaps.PolylineAnnotation, MapboxMaps.MapContentGestureContext) -> Swift.Void)? to ((inout MapboxMaps.PolylineAnnotation, MapboxMaps.InteractionContext) -> Swift.Void)?\n```\n\n----------------------------------------\n\nTITLE: Configuring View Annotations in SwiftUI Mapbox Map\nDESCRIPTION: This snippet shows how to configure view annotations using modifier functions in SwiftUI Mapbox Map.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nMapViewAnnotation(coordinate: CLLocationCoordinate(...))\n    Text(\"üöÄ\")\n        .frame(width: 20, height: 20)\n        .background(Circle().fill(.red))\n}\n.allowOverlap(true) // will overlap with outer annotations\n.variableAnchors([\n    ViewAnnotationAnchorConfig(anchor: .bottom) // Anchor will be at the bottom\n])\n```\n\n----------------------------------------\n\nTITLE: Applying Light Presets Based on Color Scheme in SwiftUI Mapbox Map\nDESCRIPTION: This code demonstrates how to set light presets for the map style based on the app's color scheme using SwiftUI's environment.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n    @Environment(\\.colorScheme) var colorScheme\n    var body: some View {\n        Map()\n            .mapStyle(.standard(lightPreset: colorScheme == .light ? .day : .dusk))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Mapbox Maps SDK in Swift\nDESCRIPTION: This code snippet shows how to import the Mapbox Maps module in a Swift source file, which is required to use the Mapbox Maps SDK functionality in your iOS application.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/release/README-static.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport MapboxMaps\n```\n\n----------------------------------------\n\nTITLE: Adding a Source to Mapbox Maps iOS SDK\nDESCRIPTION: Adds a previously created GeoJSON source to the map using the MapViewController's style object. The style object is used for all run-time styling operations.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/STYLE_README.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nself.mapViewController.addSource(myGeoJSONSource)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Mapbox Maps in SwiftUI\nDESCRIPTION: This snippet shows how to import the necessary modules to use Mapbox Maps in a SwiftUI application.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport MapboxMaps\n```\n\n----------------------------------------\n\nTITLE: ClusterOptions Constructor Parameter Type Change\nDESCRIPTION: Change in the clusterProperties parameter type in ClusterOptions initializer from [String: Expression]? to [String: Exp]?\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_30\n\nLANGUAGE: Swift\nCODE:\n```\nClusterOptions.init(circleRadius:circleColor:textColor:textSize:textField:clusterRadius:clusterMaxZoom:clusterMinPoints:clusterProperties:)\n```\n\n----------------------------------------\n\nTITLE: Importing Styles in Mapbox Maps iOS\nDESCRIPTION: Demonstrates how to import a style into another style using the Style JSON format. This example imports style A into style B and sets configuration properties like font and light preset.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"imports\": [\n    {\n        \"id\": \"A\",\n        \"url\": \"STYLE_URL_FOR_A\",\n        \"config\": {\n            \"font\": \"Montserrat\",\n            \"lightPreset\": \"dusk\",\n            \"showPointOfInterestLabels\": true,\n            \"showTransitLabels\": false,\n            \"showPlaceLabels\": true,\n            \"showRoadLabels\": false\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Composing Complex Expressions in Mapbox Maps iOS SDK\nDESCRIPTION: Demonstrates how expressions can be composed in a modular way, combining interpolation with arithmetic operations like subtract and sum. This allows for creating complex styling rules.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/STYLE_README.md#2025-04-18_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nExp(.interpolate) {\n    Exp(.linear)\n    Exp(.zoom)\n    Exp(.subtract) {\n        10\n        3\n    }\n    UIColor.red\n    Exp(.sum) {\n        7\n        7\n    }\n    UIColor.blue\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Mapbox Maps iOS Repository\nDESCRIPTION: This command clones the Mapbox Maps iOS git repository and changes into the project directory. It's the first step in setting up the development environment.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/DEVELOPING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:mapbox/mapbox-maps-ios.git && cd mapbox-maps-ios\n```\n\n----------------------------------------\n\nTITLE: Adding a Layer to Mapbox Maps iOS SDK\nDESCRIPTION: Adds a previously created background layer to the map using the MapViewController's style object, similar to adding a source.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/STYLE_README.md#2025-04-18_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nself.mapViewController.addLayer(myBackgroundLayer)\n```\n\n----------------------------------------\n\nTITLE: Setting Map Style in SwiftUI Mapbox Map\nDESCRIPTION: This snippet shows how to set a specific map style using the mapStyle modifier on the Map struct.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nMap()\n  .mapStyle(.streets) // Sets Mapbox Streets Style.\n```\n\n----------------------------------------\n\nTITLE: FeaturesetDescriptor Structure and Conformance Changes in Swift\nDESCRIPTION: Changes to the FeaturesetDescriptor, which has been converted from an extension to a struct and has various conformance removals. Also includes changes to documentation and SPI marking.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_44\n\nLANGUAGE: Swift\nCODE:\n```\nExtension FeaturesetDescriptor has been changed to a Struct\nExtension FeaturesetDescriptor has ObjC name change from MBMFeaturesetDescriptor to\nExtension FeaturesetDescriptor is now with @_documentation\nExtension FeaturesetDescriptor is now with @_spi\nExtension FeaturesetDescriptor has removed conformance to CVarArg\nExtension FeaturesetDescriptor has removed conformance to CustomDebugStringConvertible\nExtension FeaturesetDescriptor has removed conformance to CustomStringConvertible\nExtension FeaturesetDescriptor has removed conformance to Hashable\nExtension FeaturesetDescriptor has removed conformance to NSObjectProtocol\nExtension FeaturesetDescriptor is no longer open for subclassing\n```\n\n----------------------------------------\n\nTITLE: Adding Layers in Mapbox Maps iOS v10 vs v11\nDESCRIPTION: Comparison of how to add layers between v10 and v11 of Mapbox Maps SDK. In v11, most layers require the source parameter in the initializer, making style manipulation more error-resistant.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// v10\nvar lineLayer = LineLayer(id: \"route-line\")\nlineLayer.source = \"route-data\"\nmapView.mapboxMap.style.addLayer(lineLayer)\n\n// v11\nlet lineLayer = LineLayer(id: \"route-line\", source: \"route-data\")\nmapView.mapboxMap.addLayer(lineLayer)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Camera Transition Functions in Swift\nDESCRIPTION: List of deprecated camera transition convenience functions that were removed from the API\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_38\n\nLANGUAGE: Swift\nCODE:\n```\npublic func transitionCoordinateBounds(newCoordinateBounds: CoordinateBounds, animated: Bool = false)\npublic func transitionCoordinateBounds(to newCoordinateBounds: CoordinateBounds, edgePadding: UIEdgeInsets, animated: Bool = false, completion: ((UIViewAnimatingPosition) -> Void)? = nil)\npublic func transitionVisibleCoordinates(newCoordinates: [CLLocationCoordinate2D], edgePadding: UIEdgeInsets, animated: Bool = false)\npublic func transitionVisibleCoordinates(to newCoordinates: [CLLocationCoordinate2D], edgePadding: UIEdgeInsets, bearing: CLLocationDirection, duration: TimeInterval, animated: Bool = false, completion: ((UIViewAnimatingPosition) -> Void)? = nil)\npublic func resetPosition()\npublic func resetNorth(_ animated: Bool = false)\n```\n\n----------------------------------------\n\nTITLE: Creating a Background Layer in Mapbox Maps iOS SDK\nDESCRIPTION: Creates a background layer with a red background color. Layers are represented as Swift structs that mirror the layer types defined in the Mapbox Style Specification.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/STYLE_README.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar myBackgroundLayer = BackgroundLayer(id: \"my-background-layer\")\nmyBackgroundLayer.paint?.backgroundColor = .constant(StyleColor(.red))\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Map Style in MapboxMap\nDESCRIPTION: Example showing how to load a custom MapStyle in MapboxMap with a completion handler. This uses the experimental StyleManager.load method to apply styling with a light preset and road label visibility options.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nmapboxMap.load(mapStyle: .standard(lightPreset: .dawn, showRoadLabels: false)) { _ in\n  print(\"Style is loaded\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updated MapContent Generic Implementation\nDESCRIPTION: Further changes to the MapContent's generic implementation to make it more flexible with different body types. This change improves the composability of map content in SwiftUI implementations.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\n// Make MapContent gereic over the Body and adjust MapContentBuilder to use opaque types\nConstructor ForEvery.init(_:content:) has generic signature change from <Content, Data, ID where Content == MapboxMaps.MapContent, Data : Swift.RandomAccessCollection, ID == Data.Element.ID, Data.Element : Swift.Identifiable> to <Content, Data, ID where Content : MapboxMaps.MapContent, Data : Swift.RandomAccessCollection, ID == Data.Element.ID, Data.Element : Swift.Identifiable>\n```\n\n----------------------------------------\n\nTITLE: Setting Feature State for GeoJSON Sources in Swift\nDESCRIPTION: Methods for managing feature state in GeoJSON sources, including setting, getting, and removing feature state.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_32\n\nLANGUAGE: Swift\nCODE:\n```\nsetFeatureState(sourceId:sourceLayerId:featureId:state:)\ngetFeatureState(sourceId:sourceLayerId:featureId:callback:)\nremoveFeatureState(sourceId:sourceLayerId:featureId:stateKey:)\n```\n\n----------------------------------------\n\nTITLE: Adding Sources in Mapbox Maps iOS v10 vs v11\nDESCRIPTION: Comparison of how to add sources between v10 and v11 of Mapbox Maps SDK. In v11, sources require an ID property upon creation rather than as a separate parameter.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// v10:\nlet terrainSource = RasterDemSource()\nmapView.mapboxMap.style.addSource(terrainSource, id: \"terrain-source\")\n\n// v11:\nlet terrainSource = RasterDemSource(id: \"terrain-source\")\nmapView.mapboxMap.addSource(terrainSource)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Layer with Slot Position\nDESCRIPTION: Demonstrates how to add a custom line layer to the map using the new slot system, which determines the layer's position in the Standard style layer stack.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar layer = LineLayer(id: \"line-layer\", source: \"line-source\")\nlayer.slot = .middle\nmapView.mapboxMap.addLayer(layer)\n```\n\n----------------------------------------\n\nTITLE: TransitionOptions Structure Type Change\nDESCRIPTION: Change of TransitionOptions from an Extension to a Struct with removal of several protocol conformances. This represents a fundamental change in how transition options are handled and implemented in the SDK.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\n// Change TransitionOptions from Extension to Struct\nExtension TransitionOptions has been changed to a Struct\nExtension TransitionOptions has ObjC name change from MBMTransitionOptions to\nExtension TransitionOptions has removed conformance to CVarArg\nExtension TransitionOptions has removed conformance to CustomDebugStringConvertible\nExtension TransitionOptions has removed conformance to CustomStringConvertible\nExtension TransitionOptions has removed conformance to Hashable\nExtension TransitionOptions has removed conformance to NSObjectProtocol\nExtension TransitionOptions is no longer open for subclassing\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Map Implementation in SwiftUI Mapbox Map\nDESCRIPTION: This snippet illustrates how to use MapReader to access the underlying map implementation when certain APIs are not yet exposed in SwiftUI. It allows for direct configuration of the map object.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n    MapReader { proxy in\n        Map()\n            .onAppear {\n                configureUnderlyingMap(proxy.map)\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Interactions in SwiftUI with Mapbox Maps\nDESCRIPTION: This Swift code demonstrates how to add various tap interactions to a SwiftUI Map component. It shows how to handle taps on specific layers, on standard POIs from the Standard Style, and on areas with no features. The code uses the experimental SPI from MapboxMaps.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/API Catalogs/Featuresets and Interactions.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@_spi(Experimental) import MapboxMaps\n\nMap {\n    SymbolLayer(id: \"demo-layer\", source: \"demo-source\")\n\n    TapInteraction(.layer(\"demo-layer\")) { feature, context in\n        // Handle tap on the feature\n        return true // Stops propagation to features below or the map.\n    }\n\n    TapInteraction(.standardPoi) { feature, context in\n        // Handle tap on \"poi\" featureset coming from the Standard Style.\n        // This featureset will work only when Standard Style is loaded.\n        return true // Stops propagation to features below or the map.\n    }\n\n    TapInteraction { context in\n        // Handle taps, that didn't hit any features.\n        return true\n    }\n}\n// Currently the featuresets are only available in experimental version of Standard Style for preview.\n// Don't use it in production.\n.mapStyle(.standardExperimental)\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Interactions in UIKit with Mapbox Maps\nDESCRIPTION: This Swift code demonstrates how to add various tap interactions to a UIKit MapView. It shows how to handle taps on specific layers, on standard POIs from the Standard Style, and on areas with no features. The code uses the experimental SPI from MapboxMaps.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/API Catalogs/Featuresets and Interactions.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@_spi(Experimental) import MapboxMaps\n\nlet mapView = MapView()\nmapView.mapboxMap.setMapStyleContent {\n    SymbolLayer(id: \"demo-layer\", source: \"demo-source\")\n}\n// Currently the featuresets are only available in experimental version of Standard Style for preview.\n// Don't use it in production.\nmapView.mapboxMap.mapStyle = .standardExperimental\n\nmapView.mapboxMap.addInteraction(TapInteraction(.layer(\"demo-layer\")) { feature, context in\n    // Handle tap on the feature\n    return true // Stops propagation to features below or the map.\n})\n\nmapView.mapboxMap.addInteraction(TapInteraction(.standardPoi) { feature, context in\n    // Handle tap on \"poi\" featureset coming from the Standard Style.\n    // This featureset will work only when Standard Style is loaded.\n    return true // Stops propagation to features below or the map.\n})\n\nmapView.mapboxMap.addInteraction(TapInteraction { context in\n    // Handle taps, that didn't hit any features.\n    return true\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Mapbox Style in SwiftUI Map\nDESCRIPTION: This snippet shows how to use a custom Mapbox style created with Mapbox Studio in a SwiftUI Map.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/SwiftUI User Guide.md#2025-04-18_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nMap()\n    .mapStyle(.myCustomStyle)\n\nextension MapStyle {\n  static let myCustomStyle = MapStyle(uri: StyleURI(rawValue: \"mapbox://...\")!)\n}\n```\n\n----------------------------------------\n\nTITLE: CustomLayer API Changes with SPI Annotations\nDESCRIPTION: Changes to the CustomLayer API include marking various methods and properties with @_spi annotation. This indicates these are now part of a System Programming Interface that may not be stable for general public use.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n// Experimental CustomLayer\nConstructor CustomLayer.init(from:) is now with @_spi\nConstructor CustomLayer.init(id:renderer:slot:minZoom:maxZoom:visibility:) is now with @_spi\nFunc CustomLayer.encode(to:) is now with @_spi\nStruct CustomLayer is now with @_spi\nVar CustomLayer.id is now with @_spi\nVar CustomLayer.maxZoom is now with @_spi\nVar CustomLayer.minZoom is now with @_spi\nVar CustomLayer.renderer is now with @_spi\nVar CustomLayer.slot is now with @_spi\nVar CustomLayer.type is now with @_spi\nVar CustomLayer.visibility is now with @_spi\n```\n\n----------------------------------------\n\nTITLE: Setting ColorTheme in MapView\nDESCRIPTION: Demonstrates how to set a color theme for map style using either a base64-encoded image or UIImage. The color theme modifies global colors using a LUT for color grading.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet mapView = MapView()\nmapView.mapboxMap.setMapStyleContent {\n   ColorTheme(base64: \"base64EncodedImage\") // or use an uiimage shortcut ColorTheme(uiimage: lutImage)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puck2D without Heading in SwiftUI for visionOS\nDESCRIPTION: This code snippet shows how to disable the puck heading in visionOS applications, as compass data is not available on the platform.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Work with visionOS.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nMap {\n    Puck2D() // By default, puck doesn't use heading and doesn't draw direction pointer.\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Offline Region Status in Swift\nDESCRIPTION: Method to get the status of an offline region using OfflineRegion.getStatus(completion:). This was added in version 10.5.0-beta.1 and 10.4.2.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_23\n\nLANGUAGE: Swift\nCODE:\n```\nOfflineRegion.getStatus(completion:)\n```\n\n----------------------------------------\n\nTITLE: Controlling Gesture Propagation in Layer Annotations\nDESCRIPTION: Demonstrates how to control gesture propagation by returning a boolean value from the handler. When the circle annotation returns false, the tap gesture will pass through to the polygon annotation below it.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Map Content Gestures User Guide.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@State var circleTapHandled = false\n\nvar body: some View {\n    Map {\n        PolygonAnnotation(...)\n            .onTapGesture {\n                print(\"polygon is tapped\")\n            }\n        CircleAnnotation(...)\n            .onTapGesture { context in\n                if !circleTapHandled {\n                    circleTapHandled = true\n                    print(\"circle is tapped\")\n                }\n                return circleTapHandled\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MapRecorder API Changes\nDESCRIPTION: Renaming and parameter changes for MapRecorder replay and start functions. Changes include updating parameter types and removing default arguments.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\nFunc MapRecorder.replay(content:playbackCount:playbackSpeedMultiplier:avoidPlaybackPauses:completion:) has been renamed to Func replay(recordedSequence:options:completion:)\nFunc MapRecorder.start() has been renamed to Func start(options:)\n```\n\n----------------------------------------\n\nTITLE: Setting Light Source on Style in Swift\nDESCRIPTION: Example of how to set a light source on the map style using the Style.setLight(_:) method. This was added in version 10.5.0-beta.1.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_20\n\nLANGUAGE: Swift\nCODE:\n```\nStyle.setLight(_:)\n```\n\n----------------------------------------\n\nTITLE: Initializing OfflineRegionManager in Mapbox v11\nDESCRIPTION: Updated implementation of OfflineRegionManager in v11 showing simplified initialization without resourceOptions and consolidated error handling through errorOccurred method.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\nlet offlineRegionManager = OfflineRegionManager()\nlet observer = OfflineRegionObserver()\nofflineRegionManager.setOfflineRegionObserverFor(observer)\n\nclass OfflineRegionObserver: MapboxCoreMaps.OfflineRegionObserver {\n\n    func errorOccurred(forError error: OfflineRegionError) {\n        if case error.type == .tileCountLimitExceeded {\n            // handle tile count limit exceed\n        }\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Group Slot\nDESCRIPTION: Demonstrates the new slot() method syntax for annotation groups, showing both old string-based and new enum-based approaches.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nCircleAnnotationGroup {}\n  // old\n  .slot(\"middle\")\n  // new\n  .slot(.middle)\n```\n\n----------------------------------------\n\nTITLE: Layer Protocol Update - Adding Slot Property\nDESCRIPTION: Addition of a new slot property requirement to the Layer protocol.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\n// Add slot property to Layer protocol\nVar Layer.slot has been added as a protocol requirement\n```\n\n----------------------------------------\n\nTITLE: Enabling Puck Bearing Updates in Mapbox v11\nDESCRIPTION: Example of how to enable puck bearing updates which are disabled by default in v11 to reduce CPU usage.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_36\n\nLANGUAGE: swift\nCODE:\n```\n    mapView.location.options.puckBearingEnabled = true\n```\n\n----------------------------------------\n\nTITLE: Using TileCover Method in Mapbox Maps iOS v11\nDESCRIPTION: Example of using the new experimental tileCover method in Mapbox Maps SDK v11 to get tile IDs covering the map within specified parameters.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nlet tileCoverOptions = TileCoverOptions(tileSize: 512, minZoom: 4, maxZoom: 8, roundZoom: true)\nlet tileIds = mapView.mapboxMap.tileCover(for: tileCoverOptions)\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing in Mapbox Maps iOS v11\nDESCRIPTION: Example showing how to enable signpost recording in Mapbox Maps SDK v11 for performance analysis. Signposts help detect bottlenecks in your code.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nTracing.status = .enabled\n```\n\n----------------------------------------\n\nTITLE: Converting Enums to Structs for Type Definitions in Swift\nDESCRIPTION: Code comment explaining that SourceType and LayerType are now implemented as Structs with static variables instead of Enums. This architectural change affects how layer and source types are defined and accessed throughout the SDK.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// `SourceType` and `LayerType` are now Structs with static variables instead of Enums\n```\n\n----------------------------------------\n\nTITLE: Accessing Camera State in Mapbox Maps iOS v10 vs v11\nDESCRIPTION: Comparison of how to access camera state between v10 and v11 of Mapbox Maps SDK. In v11, cameraState is accessed through mapboxMap rather than directly on mapView.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// v10:\nmapView.cameraState.center\n\n// v11:\nmapView.mapboxMap.cameraState.center\n```\n\n----------------------------------------\n\nTITLE: Explicitly Drawing Metal View in Swift\nDESCRIPTION: Enable explicit drawing behavior for metal view by calling draw() instead of setNeedsDisplay when view's content needs to be redrawn. This change was made in version 10.4.0-rc.1.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_24\n\nLANGUAGE: Swift\nCODE:\n```\nmetalView.draw()\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Tracing Components in Mapbox Maps iOS v11\nDESCRIPTION: Example showing how to configure specific tracing components in Mapbox Maps SDK v11. This allows limiting signpost generation to specific components like platform or core.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nTracing.status = .platform\n```\n\n----------------------------------------\n\nTITLE: Adopting MapboxCommon.Cancelable Protocol in Swift\nDESCRIPTION: Code comment documenting the adoption of the MapboxCommon.Cancelable protocol in place of the SDK's own Cancelable protocol. This change affects camera animations and various asynchronous map operations.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// Adopt MapboxCommon.Cancelable protocol\n```\n\n----------------------------------------\n\nTITLE: MapboxMap Properties Migration - v10 to v11\nDESCRIPTION: Shows the renaming of various MapboxMap properties for improved clarity and consistency.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\nmapboxMap.uri = .standard\nmapboxMap.JSON = \"Your style JSON\"\nmapboxMap.transition = TransitionOptions(\n            duration: 3,\n            delay: 2,\n            enablePlacementTransitions: true)\nmapboxMap.isLoaded = true\nlet defaultCamera = mapboxMap.defaultCamera\n```\n\nLANGUAGE: swift\nCODE:\n```\nmapboxMap.styleURI = .standard\nmapboxMap.styleJSON = \"Your style JSON\"\nmapboxMap.styleTransition = TransitionOptions(\n            duration: 3,\n            delay: 2,\n            enablePlacementTransitions: true)\nmapboxMap.isStyleLoaded = true\nlet defaultCamera = mapboxMap.styleDefaultCamera\n```\n\n----------------------------------------\n\nTITLE: Creating a GeoJSON Source in Mapbox Maps iOS SDK\nDESCRIPTION: Creates a GeoJSON source with a maximum zoom level of 14.0. GeoJSON sources are represented as Swift structs that mirror the properties defined in the Mapbox Style Specification.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/STYLE_README.md#2025-04-18_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nvar myGeoJSONSource = GeoJSONSource()\nmyGeoJSONSource.maxZoom = 14.0\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for MapboxMaps iOS SDK\nDESCRIPTION: The main documentation structure for MapboxMaps iOS SDK, organized into sections covering essentials, styling, annotations, advanced features, and dependencies. It uses DocC documentation format with linked article references.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Documentation.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ``MapboxMaps``\n\nInteractive, thoroughly customizable maps for iOS powered by vector tiles and Metal.\n\n## Overview\n\nThe Mapbox Maps SDK for iOS is a public library for displaying interactive, thoroughly customizable maps in native iOS. It takes map styles that conform to the [Mapbox Style Specification](https://docs.mapbox.com/mapbox-gl-js/style-spec/), applies them to vector tiles that conform to the [Mapbox Vector Tile Specification](https://github.com/mapbox/vector-tile-spec), and renders them using Metal.\n\n\n## Topics\n\n### Articles\n- <doc:Migrate-to-v11>\n- <doc:SwiftUI-User-Guide>\n- <doc:Declarative-Map-Styling>\n- <doc:Map-Content-Gestures-User-Guide>\n- <doc:Work-with-visionOS>\n\n### Essentials\n- <doc:Map-View>\n- <doc:Snapshotter-APIs>\n- <doc:SwiftUI>\n- <doc:Events>\n- <doc:Featuresets-and-Interactions>\n\n### Styling\n- <doc:Style>\n- <doc:Layers>\n- <doc:Sources>\n- <doc:Layer-Property-Values>\n- <doc:Expressions>\n\n\n### Annotations\n- <doc:Layer-Annotations>\n- <doc:View-Annotations>\n\n### Advanced\n- <doc:Performance>\n- <doc:TileStore-APIs>\n- <doc:MapboxMap-APIs>\n\n### Other\n- <doc:Location-APIs>\n- <doc:Camera-and-coordinates>\n- <doc:Ornaments>\n- <doc:Gestures>\n- <doc:Settings-and-Constants>\n\n\n### Dependencies\n- <doc:CoreMaps>\n- <doc:TurfAPI>\n\n### Internal\n- <doc:CoreMapsInternal>\n```\n\n----------------------------------------\n\nTITLE: HTTP Interceptor Implementation - v10 to v11\nDESCRIPTION: Shows the updated implementation of HTTP interceptors with new continuation-based approach.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_31\n\nLANGUAGE: swift\nCODE:\n```\nclass Interceptor: HttpServiceInterceptorInterface {\n    func onRequest(for request: HttpRequest) -> HttpRequest {\n        return request\n    }\n\n    func onResponse(for response: HttpResponse) -> HttpResponse {\n        return response\n    }\n\n    func onDownload(forDownload download: DownloadOptions) -> DownloadOptions {\n        return download\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nclass Interceptor: HttpServiceInterceptorInterface {\n    func onRequest(for request: HttpRequest, continuation: @escaping HttpServiceInterceptorRequestContinuation) {\n        continuation(HttpRequestOrResponse.fromHttpRequest(request))\n    }\n\n    func onResponse(for response: HttpResponse, continuation: @escaping HttpServiceInterceptorResponseContinuation) {\n        continuation(response)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing StyleManager Access in Swift\nDESCRIPTION: Code comment indicating the removal of public access to the internal StyleManager through the Style class. This change restricts direct access to the underlying style management implementation.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Remove public access to the internal StyleManager\n```\n\n----------------------------------------\n\nTITLE: MapView Initializer Update in Swift\nDESCRIPTION: New MapView initializer signature with ResourceOptions, GlyphsRasterizationOptions and StyleURI parameters.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_37\n\nLANGUAGE: Swift\nCODE:\n```\npublic init(frame: CGRect, resourceOptions: ResourceOptions, glyphsRasterizationOptions: GlyphsRasterizationOptions = GlyphsRasterizationOptions.default, styleURI: StyleURI? = .streets)\n```\n\n----------------------------------------\n\nTITLE: Point Annotation Properties Migration - v10 to v11\nDESCRIPTION: Shows the transition from manager-level to annotation-level control of iconTextFit and iconTextFitPadding properties.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\npointAnnotationManager.iconTextFit = .width\npointAnnotationManager.iconTextFitPadding = [1, 2.3, 4, 5]\n```\n\nLANGUAGE: swift\nCODE:\n```\npointAnnotation.iconTextFit = .width\npointAnnotation.iconTextFitPadding = [1, 2.3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Removing MemoryBudget API in Swift\nDESCRIPTION: Code comment indicating the removal of the setMemoryBudget method from the MapboxMap class. This API was likely used to configure memory usage limits for the map.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Rename MemoryBudget API\n```\n\n----------------------------------------\n\nTITLE: Standard Style Properties Updates in Swift MapboxMaps SDK\nDESCRIPTION: The MapStyle.standard method has been renamed and parameter types have changed. It now includes theme support and a new parameter for showing 3D objects.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\n// Support for new Standard properties\nFunc MapStyle.standard(lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:) has been renamed to Func standard(theme:lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:show3dObjects:)\nFunc MapStyle.standard(lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:) has parameter 0 type change from MapboxMaps.StandardLightPreset? to MapboxMaps.StandardTheme?\nFunc MapStyle.standard(lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:) has parameter 1 type change from Swift.String? to MapboxMaps.StandardLightPreset?\nFunc MapStyle.standard(lightPreset:font:showPointOfInterestLabels:showTransitLabels:showPlaceLabels:showRoadLabels:) has parameter 2 type change from Swift.Bool? to Swift.String?\n```\n\n----------------------------------------\n\nTITLE: Camera API Property Access Change\nDESCRIPTION: Demonstrates the change in camera API property access from BaseMapView to MapboxMap\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_35\n\nLANGUAGE: Swift\nCODE:\n```\n// Old way - on BaseMapView\ncamera(for:)\n\n// New way - on MapboxMap\nmapboxMap.camera(for:)\nmapboxMap.camera(for:camera:rect:)\n```\n\n----------------------------------------\n\nTITLE: Observing CameraAnimator Events on a Specific Instance\nDESCRIPTION: Demonstrates how to observe events directly on an instance of CameraAnimator when using low-level camera APIs to create a custom animator.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// Declare an animator that changes the map's bearing\nlet bearingAnimator = mapView.camera.makeAnimator(duration: 4, curve: .easeInOut) { (transition) in\n  transition.bearing.toValue = -45\n}\nbearingAnimator.onStarted.observe {\n  // Bearing animator has started.\n}.store(in: &cancelables)\n```\n\n----------------------------------------\n\nTITLE: Sendable Conformance Additions\nDESCRIPTION: Addition of @Sendable attribute to certain gl-native objects for improved concurrency support.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_41\n\nLANGUAGE: Swift\nCODE:\n```\n@Sendable\nExtension CoordinateBounds\n\n@Sendable\nExtension GlyphsRasterizationOptions\n```\n\n----------------------------------------\n\nTITLE: Offline Manager Implementation - v10 to v11\nDESCRIPTION: Demonstrates the simplified offline manager initialization and updated tileset descriptor creation process.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_33\n\nLANGUAGE: swift\nCODE:\n```\nlet offlineManager = OfflineManager(resourceOptions: aResourceOptions)\nlet tilesetDescriptorOptions = TilesetDescriptorOptionsForTilesets(\n    tilesets: [\"mapbox://mapbox.mapbox-streets-v8\"],\n    zoomRange: 0...5)\n\nlet tilesetDescriptor = offlineManager.createTilesetDescriptorForTilesetDescriptorOptions(tilesetDescriptorOptions)\n\nofflineManager.removeStylePack(for: .streets)\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet offlineManager = OfflineManager()\nlet tileSetDescriptorOptions = TilesetDescriptorOptions(\n    styleURI: .outdoors,\n    zoomRange: 0...16,\n    tilesets: [\"mapbox://mapbox.mapbox-streets-v8\"])\n\nlet tilesetDescriptor = offlineManager.createTilesetDescriptor(for: tileSetDescriptorOptions)\n\nofflineManager.removeStylePack(for: .streets) { result in\n    // handle style pack removal result\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Layer Update Function in Swift\nDESCRIPTION: Modified function signature for layer updates to include explicit type parameter.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_27\n\nLANGUAGE: Swift\nCODE:\n```\npublic func updateLayer<T>(withId id: String, type: T.Type, update: (inout T) throws -> Void) throws where T: Layer\n```\n\n----------------------------------------\n\nTITLE: Updated Layer Function Signature in Swift\nDESCRIPTION: Modified function signature for layer retrieval to include explicit type parameter.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_26\n\nLANGUAGE: Swift\nCODE:\n```\npublic func layer<T>(withId id: String, type: T.Type) throws -> T where T: Layer\n```\n\n----------------------------------------\n\nTITLE: Adding Experimental Annotations to Weather Effects in Swift\nDESCRIPTION: The removeRain, removeSnow, setRain, and setSnow functions in StyleManager have been marked with the @_documentation attribute, indicating they are experimental features.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_53\n\nLANGUAGE: Swift\nCODE:\n```\nFunc StyleManager.removeRain() is now with @_documentation\nFunc StyleManager.removeSnow() is now with @_documentation\nFunc StyleManager.setRain(_:) is now with @_documentation\nFunc StyleManager.setSnow(_:) is now with @_documentation\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Configuration - v10 to v11\nDESCRIPTION: Shows the transition to using HttpRequestFlags for request configuration instead of individual parameters.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\nlet httpRequest = HttpRequest(method: HttpMethod.get, url: \"\", headers: [:], keepCompression: false, timeout: 0,\n                              networkRestriction: NetworkRestriction.none, sdkInformation: sdkInformation, body: nil)\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet httpRequest = HttpRequest(method: HttpMethod.get, url: \"\", headers: [:], timeout: 0, networkRestriction: NetworkRestriction.none,\n                              sdkInformation: sdkInformation, body: nil, flags: HttpRequestFlags.none)\n```\n\n----------------------------------------\n\nTITLE: Updated Generic Layer Function in Swift\nDESCRIPTION: Modified function signature for generic layer retrieval without experimental SPI.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_29\n\nLANGUAGE: Swift\nCODE:\n```\npublic func layer(withId id: String) throws -> Layer\n```\n\n----------------------------------------\n\nTITLE: Listing Expression-related Types in Mapbox Maps iOS SDK\nDESCRIPTION: A markdown list of expression-related types and interfaces available in the Mapbox Maps iOS SDK. This includes the core expression types (Exp, Expression), various formatting options for different data types, and builder utilities.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/API Catalogs/Expressions.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#  Expressions\n\n## Topics\n\n### Expressions\n\n- ``Exp``\n- ``Expression``\n- ``FormatOptions``\n- ``NumberFormatOptions``\n- ``CollatorOptions``\n- ``ImageOptions``\n- ``ExpressionArgumentConvertible``\n- ``ExpressionArgumentBuilder``\n```\n\n----------------------------------------\n\nTITLE: StyleGlyphURL Documentation Update in Swift\nDESCRIPTION: The styleGlyphURL property of MapboxMap class has been updated with documentation annotations.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_47\n\nLANGUAGE: Swift\nCODE:\n```\nVar MapboxMap.styleGlyphURL is now with @_documentation\n```\n\n----------------------------------------\n\nTITLE: Experimental MapboxMaps Import\nDESCRIPTION: Shows how to import MapboxMaps with Experimental SPI access for using experimental features and types.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@_spi(Experimental) import MapboxMaps\n```\n\n----------------------------------------\n\nTITLE: Camera Animation API Enhancements with TimingCurve\nDESCRIPTION: Addition of TimingCurve parameter to the fly(to:) method to provide more control over animation easing. This change enables developers to customize how camera animations accelerate and decelerate.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// Add TimingCurve to fly(to:)\nFunc CameraAnimationsManager.fly(to:duration:completion:) has been renamed to Func fly(to:duration:curve:completion:)\nFunc CameraAnimationsManager.fly(to:duration:completion:) has parameter 2 type change from MapboxMaps.AnimationCompletion? to MapboxMaps.TimingCurve\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of an Interpolation Expression in Mapbox Style Specification\nDESCRIPTION: Shows how an interpolation expression is represented in the raw JSON format according to the Mapbox Style Specification. This expression interpolates color based on zoom level.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/STYLE_README.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"interpolate\",\n  [\"linear\"],\n  [\"zoom\"],\n  0,\n  \"hsl(0, 79%, 53%)\",\n  14,\n  \"hsl(233, 80%, 47%)\"\n]\n```\n\n----------------------------------------\n\nTITLE: Removed Features and Components in Swift\nDESCRIPTION: Documentation of classes, functions, and variables that have been removed from the SDK, including InteractiveFeature and experimental query functionality.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_46\n\nLANGUAGE: Swift\nCODE:\n```\nVar SWIFT_TYPEDEFS has been removed\nClass MapView has removed conformance to Sendable\nClass InteractiveFeature has been removed\nConstructor FeatureState.init(_:state:) has been removed\nFunc MapboxMap.queryRenderedFeatures(with:targets:completion:) has been removed\nFunc MapboxMap.querySourceFeatures(for:completion:) has been removed\nStruct FeaturesetQueryTarget has been removed\nVar QueriedRenderedFeature.queryTargets has been removed\n```\n\n----------------------------------------\n\nTITLE: Framework Import Changes - v10 to v11\nDESCRIPTION: Demonstrates the need to explicitly import UIKit when using UI components, as MapboxMaps no longer re-exports UIKit.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\nimport MapboxMaps\n\nclass ViewController: UIViewController { }\n```\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport MapboxMaps\n\nclass ViewController: UIViewController { }\n```\n\n----------------------------------------\n\nTITLE: Adding ID Field to Source Classes in Swift\nDESCRIPTION: Code comment indicating the addition of an ID field to Source classes, which affects the initialization of various source types including GeoJSONSource, ImageSource, RasterDemSource, RasterSource, and VectorSource.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Add id field to Source\n```\n\n----------------------------------------\n\nTITLE: Dynamic Expressions Based on System Appearance in Mapbox Maps iOS SDK\nDESCRIPTION: Shows how to create an interpolation expression that adapts to the user's interface style (dark mode). This demonstrates the flexibility of using Swift for creating dynamic styling rules.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/STYLE_README.md#2025-04-18_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nvar isDarkModeEnabled = traitCollection.userInterfaceStyle == .dark\n\nExp(.interpolate) {\n    Exp(.linear)\n    Exp(.zoom)\n    0\n    isDarkModeEnabled ? UIColor.black : UIColor.red\n    14\n    isDarkModeEnabled ? UIColor.grey : UIColor.blue\n}\n\n```\n\n----------------------------------------\n\nTITLE: Removal of Experimental Model Front Cutoff Features\nDESCRIPTION: The experimental model-front-model feature has been removed, affecting several ModelLayer methods and properties related to modelFrontCutoff.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_37\n\nLANGUAGE: swift\nCODE:\n```\n// Removing experimental model-front-model\nFunc ModelLayer.modelFrontCutoff(_:) has been removed\nFunc ModelLayer.modelFrontCutoff(start:range:end:) has been removed\nVar ModelLayer.modelFrontCutoff has been removed\n```\n\n----------------------------------------\n\nTITLE: MapView Initialization Change\nDESCRIPTION: Shows the updated MapView initialization with new MapInitOptions parameter\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_36\n\nLANGUAGE: Swift\nCODE:\n```\npublic init(frame: CGRect, mapInitOptions: MapInitOptions = MapInitOptions(), styleURI: StyleURI? = .streets)\n```\n\n----------------------------------------\n\nTITLE: Filter Property Type Changes in Swift MapboxMaps SDK\nDESCRIPTION: Various layer types have their filter property types changed from MapboxMaps.Expression? to MapboxMaps.Exp?. This affects LineLayer, ModelLayer, RasterLayer, RasterParticleLayer, RenderedQueryOptions, and SymbolLayer classes.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\nVar LineLayer.filter has declared type change from MapboxMaps.Expression? to MapboxMaps.Exp?\nVar ModelLayer.filter has declared type change from MapboxMaps.Expression? to MapboxMaps.Exp?\nVar RasterLayer.filter has declared type change from MapboxMaps.Expression? to MapboxMaps.Exp?\nVar RasterParticleLayer.filter has declared type change from MapboxMaps.Expression? to MapboxMaps.Exp?\nVar RenderedQueryOptions.filter has declared type change from MapboxMaps.Expression? to MapboxMaps.Exp?\nVar SymbolLayer.filter has declared type change from MapboxMaps.Expression? to MapboxMaps.Exp?\n```\n\n----------------------------------------\n\nTITLE: Transforming CoordinateBounds in Swift\nDESCRIPTION: Convenience properties and methods to transform CoordinateBounds were added in version 10.5.0-beta.1.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_21\n\nLANGUAGE: Swift\nCODE:\n```\nCoordinateBounds.transform()\n```\n\n----------------------------------------\n\nTITLE: Removal of RawRepresentable Conformance in Turf 3.0\nDESCRIPTION: The Array and Dictionary Swift types have had their RawRepresentable conformance removed in Turf 3.0 update.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_36\n\nLANGUAGE: swift\nCODE:\n```\n// Turf 3.0\nExtension Array has removed conformance to RawRepresentable\nExtension Dictionary has removed conformance to RawRepresentable\n```\n\n----------------------------------------\n\nTITLE: Updated Generic Source Function in Swift\nDESCRIPTION: Modified function signature for generic source retrieval without experimental SPI.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_30\n\nLANGUAGE: Swift\nCODE:\n```\npublic func source(withId id: String) throws -> Source\n```\n\n----------------------------------------\n\nTITLE: Terrain Camera Handling Update\nDESCRIPTION: Removal of drag-related functions from MapboxMap for improved terrain camera handling.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_19\n\nLANGUAGE: Swift\nCODE:\n```\n// Improve terrain camera handling\nFunc MapboxMap.dragEnd() has been removed\nFunc MapboxMap.dragStart(for:) has been removed\n```\n\n----------------------------------------\n\nTITLE: Network Components Documentation Structure in Markdown\nDESCRIPTION: Documentation structure defining network-related types and interfaces available in the Mapbox Maps iOS SDK. Includes HTTP request/response handling, service factories, interceptors, and various network-related enums and types.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/API Catalogs/Network.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#  Network customisations\n\n## Topics\n\n\n### Network\n\n- ``HttpRequest``\n- ``HttpRequestError``\n- ``HttpRequestFlags``\n- ``HttpRequestOrResponse``\n- ``HttpResponse``\n- ``HttpResponseData``\n- ``HttpServiceFactory``\n- ``HttpServiceInterceptorInterface``\n- ``HttpServiceInterceptorRequestContinuation``\n- ``HttpServiceInterceptorResponseContinuation``\n- ``HttpMethod``\n- ``RequestErrorType``\n- ``NetworkRestriction``\n<!-- Next API doesn't have a public function to use. Looks like a missing wrapper for ``UploadStatus`` -->\n- ``HttpRequestErrorType``\n- ``HttpRequestFlags``\n- ``HttpRequestOrResponse``\n- ``HttpResponse``\n- ``HttpRequestOrResponseType``\n```\n\n----------------------------------------\n\nTITLE: Static Modifications for CirclePitchAlignment Enum in Swift\nDESCRIPTION: Addition of static modifiers to CirclePitchAlignment enum elements in the Mapbox Maps iOS SDK.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nEnumElement CirclePitchAlignment.map is now static\nEnumElement CirclePitchAlignment.viewport is now static\n```\n\n----------------------------------------\n\nTITLE: Converting Location Class to Struct in Swift\nDESCRIPTION: The Location class has been changed to a struct, affecting its conformance to various protocols and its usage in the SDK.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nClass Location has been changed to a Struct\n```\n\n----------------------------------------\n\nTITLE: Featureset Types Generic Signature Changes in Swift\nDESCRIPTION: Updates to constructors and functions related to featuresets to include generic type constraints, specifically requiring conformance to FeaturesetFeatureType protocol.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_43\n\nLANGUAGE: Swift\nCODE:\n```\nConstructor FeatureState.init(_:id:state:) has generic signature change from  to <T where T : MapboxMaps.FeaturesetFeatureType>\nConstructor FeaturesetQueryTarget.init(featureset:filter:id:) has generic signature change from  to <T where T : MapboxMaps.FeaturesetFeatureType>\nConstructor LongPressInteraction.init(_:filter:action:) has generic signature change from  to <T where T : MapboxMaps.FeaturesetFeatureType>\nConstructor TapInteraction.init(_:filter:action:) has generic signature change from  to <T where T : MapboxMaps.FeaturesetFeatureType>\nExtension FeaturesetDescriptor has generic signature change from  to <FeatureType where FeatureType : MapboxMaps.FeaturesetFeatureType>\nFunc FeatureState.==(_:_:) has generic signature change from  to <T where T : MapboxMaps.FeaturesetFeatureType>\nFunc FeaturesetDescriptor.featureset(_:importId:) has generic signature change from  to <FeatureType where FeatureType == MapboxMaps.FeaturesetFeature>\nFunc FeaturesetDescriptor.layer(_:) has generic signature change from  to <FeatureType where FeatureType == MapboxMaps.FeaturesetFeature>\nFunc MapboxMap.getFeatureState(feature:callback:) has generic signature change from  to <F where F : MapboxMaps.FeaturesetFeatureType>\nFunc MapboxMap.getFeatureState(featureset:featureId:callback:) has generic signature change from  to <T where T : MapboxMaps.FeaturesetFeatureType>\nFunc MapboxMap.removeFeatureState(feature:stateKey:callback:) has generic signature change from  to <F where F : MapboxMaps.FeaturesetFeatureType>\nFunc MapboxMap.removeFeatureState(featureset:featureId:stateKey:callback:) has generic signature change from  to <T where T : MapboxMaps.FeaturesetFeatureType>\nFunc MapboxMap.setFeatureState(feature:state:callback:) has generic signature change from  to <T where T : MapboxMaps.FeaturesetFeatureType>\nFunc MapboxMap.setFeatureState(featureset:featureId:state:callback:) has generic signature change from  to <T where T : MapboxMaps.FeaturesetFeatureType>\nStruct FeatureState has generic signature change from  to <T where T : MapboxMaps.FeaturesetFeatureType>\nTypeAlias FeatureState.Body has generic signature change from  to <T where T : MapboxMaps.FeaturesetFeatureType>\n```\n\n----------------------------------------\n\nTITLE: Defining Layer Types in Swift for Mapbox Maps iOS\nDESCRIPTION: This code snippet lists various layer types and related structures available in the Mapbox Maps iOS SDK. It includes standard layers, specialized layers, and supporting structures for custom rendering and positioning.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/API Catalogs/Layers.md#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n- ``Layer``\n- ``LayerType``\n- ``LayerInfo``\n- ``BackgroundLayer``\n- ``CircleLayer``\n- ``FillExtrusionLayer``\n- ``FillLayer``\n- ``HeatmapLayer``\n- ``HillshadeLayer``\n- ``LineLayer``\n- ``LocationIndicatorLayer``\n- ``RasterLayer``\n- ``RasterParticleLayer``\n- ``SkyLayer``\n- ``SymbolLayer``\n- ``ModelLayer``\n- ``CustomLayer``\n- ``CustomLayerRenderConfiguration``\n- ``CustomLayerRenderParameters``\n- ``CustomLayerHost``\n- ``ElevationData``\n- ``Slot``\n- ``SlotLayer``\n- ``LayerAtPosition``\n- ``ClipLayer``\n- ``ClipLayerTypes``\n```\n\n----------------------------------------\n\nTITLE: Static Modifications for Anchor Enum in Swift\nDESCRIPTION: Addition of static modifiers to Anchor enum elements in the Mapbox Maps iOS SDK.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nEnumElement Anchor.map is now static\nEnumElement Anchor.viewport is now static\n```\n\n----------------------------------------\n\nTITLE: Updating Dictionary Expression Argument Types in Swift\nDESCRIPTION: The generic signature for Dictionary.expressionArguments.Get() has been changed to allow for more flexible key types, now accepting any Hashable type instead of just Double.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_50\n\nLANGUAGE: Swift\nCODE:\n```\nAccessor Dictionary.expressionArguments.Get() has generic signature change from <Key, Value where Key == Swift.Double, Value : MapboxMaps.ExpressionArgumentConvertible> to <Key, Value where Key : Swift.Hashable>\n```\n\n----------------------------------------\n\nTITLE: Updating LocationProvider Protocol in Swift\nDESCRIPTION: The LocationProvider protocol's generic signature has been changed to include a Self constraint of AnyObject.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nProtocol LocationProvider has generic signature change from  to <Self : AnyObject>\n```\n\n----------------------------------------\n\nTITLE: Constructor Return Type Changes in MapboxMaps iOS\nDESCRIPTION: List of constructor return type changes from optional (?) to non-optional types. This change affects various styling-related types like CirclePitchScale, IconAnchor, TextAnchor, etc.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nCirclePitchScale.init(rawValue:) // MapboxMaps.CirclePitchScale? -> MapboxMaps.CirclePitchScale\nIconAnchor.init(rawValue:) // MapboxMaps.IconAnchor? -> MapboxMaps.IconAnchor\nTextAnchor.init(rawValue:) // MapboxMaps.TextAnchor? -> MapboxMaps.TextAnchor\n```\n\n----------------------------------------\n\nTITLE: Defining Settings and Constants Structure for Mapbox Maps iOS\nDESCRIPTION: This code snippet outlines the structure of settings and constants documentation for the Mapbox Maps iOS SDK. It includes sections for general settings, common settings, and constants.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/API Catalogs/Settings and Constants.md#2025-04-18_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n# Settings and Constants\n\n\n## Topics\n\n### Settings\n\n- ``MapboxCommon/MapboxCommonSettings``\n- ``MapboxCommon/MapboxOptions``\n- ``MapboxMapsOptions``\n\n### Common Settings\n\n- ``MapboxCommon/SettingsService``\n- ``MapboxCommon/SettingsServiceFactory``\n- ``MapboxCommon/SettingsServiceError``\n- ``MapboxCommon/SettingsServiceStorageType``\n- ``MapboxCommon/SdkInformation``\n\n### Constants\n\n- ``MapConstants``\n```\n\n----------------------------------------\n\nTITLE: Updating Event Handling in MapboxMap and Snapshotter\nDESCRIPTION: The event handling methods in MapboxMap and Snapshotter have been updated to use the new MapEventType and remove the MapEvent wrapper.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nFunc MapboxMap.onEvery(event:handler:) has parameter 0 type change from MapboxCoreMaps.MapEvents.Event<Payload> to MapboxMaps.MapEventType<Payload>\n```\n\nLANGUAGE: Swift\nCODE:\n```\nFunc MapboxMap.onNext(event:handler:) has parameter 0 type change from MapboxCoreMaps.MapEvents.Event<Payload> to MapboxMaps.MapEventType<Payload>\n```\n\nLANGUAGE: Swift\nCODE:\n```\nFunc Snapshotter.onEvery(event:handler:) has parameter 0 type change from MapboxCoreMaps.MapEvents.Event<Payload> to MapboxMaps.MapEventType<Payload>\n```\n\nLANGUAGE: Swift\nCODE:\n```\nFunc Snapshotter.onNext(event:handler:) has parameter 0 type change from MapboxCoreMaps.MapEvents.Event<Payload> to MapboxMaps.MapEventType<Payload>\n```\n\n----------------------------------------\n\nTITLE: Running the Main Packaging Script in Bash\nDESCRIPTION: Command to execute the main packaging script which handles downloading dependencies, building XCFrameworks, and creating the final package.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/release/packager/PACKAGE.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./package-mapbox-maps.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure for MapboxMaps iOS SDK\nDESCRIPTION: This markdown snippet defines the structure of the MapboxMaps documentation. It includes a metadata tag and links to the main MapboxMaps module, MapboxCommon, and Turf modules.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Overview.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# MapboxMaps Documentation\n\n@Metadata {\n    @TechnologyRoot\n}\n\n## Topics\n\n- ``/MapboxMaps``\n- ``/MapboxCommon``\n- ``/Turf``\n```\n\n----------------------------------------\n\nTITLE: Renaming PuckBearingSource to PuckBearing in Swift\nDESCRIPTION: Code comment indicating the renaming of PuckBearingSource enum to PuckBearing in the Mapbox Maps iOS SDK. This change affects the LocationOptions API and all references to puck bearing functionality.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Add renamed flag for PuckBearingSource\n```\n\n----------------------------------------\n\nTITLE: Executing the XCFramework Creation Script in Bash\nDESCRIPTION: Command syntax for the create-xcframework.sh script which creates an XCFramework for a specific project, requiring the project path, scheme name, and product name as parameters.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/release/packager/PACKAGE.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./create-xcframework.sh <PROJECT_PATH> <SCHEME> <PRODUCT_NAME>\n```\n\n----------------------------------------\n\nTITLE: Comparing API Dumps with Swift API Digester\nDESCRIPTION: Basic command demonstrating how to use swift-api-digester in diagnose-sdk mode to compare two API JSON dumps. This command identifies differences between old and new API versions.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nswift-api-digester --diagnose-sdk -input-paths old-api.json -input-paths new-api.json\n```\n\n----------------------------------------\n\nTITLE: Suboptimal Performance Example\nDESCRIPTION: Demonstrates a potentially inefficient implementation when handling large feature collections in map updates.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Declarative Map Styling.md#2025-04-18_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyView: View {\n    @State var features: FeatureCollection?\n    @State var counter = 0\n\n    var body: some View {\n        Map {\n            if let features {\n                LineLayer(id: \"route\", source: \"route-source\")\n                GeoJSONSource(id: \"route-source\")\n                    /// WARNING: This code may be not optimal for large feature collection.\n                    .data(.featureCollection(features))\n            }\n        }\n        .onAppear {\n            features = loadHeavyGeojson()\n        }\n        Button(\"Trigger update \\(counter)\") {\n            /// Counter updates here will trigger the `body` re-evaluation. This in turn\n            /// triggers the Map update that need to check if the `features` are changed.\n            /// This may be a costly operation.\n            counter += 1\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping SDK API with Swift API Digester\nDESCRIPTION: Example bash command for using swift-api-digester to dump the API of MapboxMaps SDK to a JSON file. The command includes necessary framework paths, target specifications, and other options required for proper API extraction.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcrun --sdk iphoneos \"$API_DIGESTER_PATH\"\\\n    --dump-sdk \\\n    --module=MapboxMaps\\\n    -I \"$PRODUCT_ARTIFACTS_DIR\"/MapboxMaps.xcframework/ios-arm64/MapboxMaps.framework/\\\n    -I \"$PRODUCT_ARTIFACTS_DIR\"/MapboxCommon.xcframework/ios-arm64_armv7/MapboxCommon.framework/\\\n    -I \"$PRODUCT_ARTIFACTS_DIR\"/MapboxCoreMaps.xcframework/ios-arm64/MapboxCoreMaps.framework/\\\n    -I \"$PRODUCT_ARTIFACTS_DIR\"/Turf.xcframework/ios-arm64/Turf.framework/\\\n    -target arm64-apple-ios11.0\\\n    --iframework \"$PRODUCT_ARTIFACTS_DIR\"/MapboxCommon.xcframework/ios-arm64_armv7/ \\\n    --iframework \"$PRODUCT_ARTIFACTS_DIR\"/MapboxCoreMaps.xcframework/ios-arm64/ \\\n    --abort-on-module-fail\\\n    --avoid-tool-args --avoid-location\\\n    --output-dir \"$SCRIPT_DIR\" \\\n    -v\n```\n\n----------------------------------------\n\nTITLE: Turf-Swift License\nDESCRIPTION: License terms for the turf-swift library used in Mapbox Maps iOS SDK. ISC license granting permission to use, copy, modify and distribute the software.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright ¬© 2014‚Äì2024, Mapbox\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Configuring Mapbox Access Token in XCConfig File\nDESCRIPTION: This snippet shows the content of a developer.xcconfig file used to set the Mapbox access token. This file should be placed in the root of the repo when running tests via MapboxTestHost.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/DEVELOPING.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nMAPBOX_ACCESS_TOKEN = pk.myaccesstoken\n```\n\n----------------------------------------\n\nTITLE: Filesystem Library License\nDESCRIPTION: MIT license terms for the filesystem library version 1.5.10 by Steffen Sch√ºmann.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2018, Steffen Sch√ºmann <s.schuemann@pobox.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Mapbox Maps iOS Development\nDESCRIPTION: This snippet shows the commands to install necessary tools and set up pre-commit hooks for the Mapbox Maps iOS project. It installs xcodegen, swiftlint, and pre-commit, then sets up the pre-commit hooks.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/DEVELOPING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install xcodegen swiftlint\npip install pre-commit\n\npre-commit install # Installs the pre-commit hooks\n```\n\n----------------------------------------\n\nTITLE: Mapbox Maps iOS SDK Version History\nDESCRIPTION: Detailed changelog documenting version updates, bug fixes, API changes, and dependency updates across multiple releases of the Mapbox Maps iOS SDK\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CHANGELOG.md#2025-04-18_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n## 10.2.0 - December 15, 2021\n\n* Update to MapboxCoreMaps 10.2.0 and MapboxCommon 21.0.1. ([#952](https://github.com/mapbox/mapbox-maps-ios/pull/952))\n* Fix the crash when MapView had zero width or height. ([#903](https://github.com/mapbox/mapbox-maps-ios/pull/903))\n\n## 10.2.0-rc.1 - December 2, 2021\n\n* Removed experimental designation from persistent layer APIs. ([#849](https://github.com/mapbox/mapbox-maps-ios/pull/849))\n* Fixed an issue that prevented direct download artifacts from exposing experimental APIs. ([#854](https://github.com/mapbox/mapbox-maps-ios/pull/854))\n* Updates `Style.localizeLabels(into:forLayerIds:)` to only localize the primary localization and not the fall-through localizations. ([#856](https://github.com/mapbox/mapbox-maps-ios/pull/856))\n* Removes swiftlint config from direct download artifacts. ([#859](https://github.com/mapbox/mapbox-maps-ios/pull/859))\n* Removed `AnnotationView` wrapper views from `ViewAnnotationManager` API. ([#846](https://github.com/mapbox/mapbox-maps-ios/pull/846))\n* Reduce geometry wrapping using GeometryConvertible. ([#861](https://github.com/mapbox/mapbox-maps-ios/pull/861))\n* Fixed an issue that could prevent the location puck from appearing. ([#862](https://github.com/mapbox/mapbox-maps-ios/pull/862))\n* Added support for exponentials to `StyleColor`. ([#873](https://github.com/mapbox/mapbox-maps-ios/pull/873))\n* Fixes initialization of attribution dialog. ([#865](https://github.com/mapbox/mapbox-maps-ios/pull/865))\n* Improved panning behavior on pitched maps. ([#888](https://github.com/mapbox/mapbox-maps-ios/pull/888))\n* Added pinch gesture tradeoff configuration option. ([#890](https://github.com/mapbox/mapbox-maps-ios/pull/890))\n* Update to MapboxCoreMaps 10.2.0-rc.1 and MapboxCommon 21.0.0-rc.2. ([#891](https://github.com/mapbox/mapbox-maps-ios/pull/891))\n```\n\n----------------------------------------\n\nTITLE: KDBush License\nDESCRIPTION: ISC license terms for the kdbush.hpp library version 0.1.3 by Vladimir Agafonkin.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2016, Vladimir Agafonkin\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Mapbox iOS Annotations\nDESCRIPTION: A markdown document that outlines the structure and organization of annotation-related classes in the Mapbox Maps iOS SDK. It catalogs base annotation classes, type-specific annotation classes, managers, and supporting functionality.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/API Catalogs/Layer Annotations.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Layer Annotations\n\n## Topics\n\n### Annotations\n\n- ``AnnotationOrchestrator``\n- ``AnnotationInteractionDelegate``\n- ``Annotation``\n- ``AnnotationManager``\n- ``CircleAnnotation``\n- ``CircleAnnotationManager``\n- ``PointAnnotation``\n- ``PointAnnotationManager``\n- ``PolygonAnnotation``\n- ``PolygonAnnotationManager``\n- ``PolylineAnnotation``\n- ``PolylineAnnotationManager``\n- ``ClusterOptions``\n```\n\n----------------------------------------\n\nTITLE: Initializing OfflineRegionManager in Mapbox v10\nDESCRIPTION: Legacy implementation of OfflineRegionManager initialization and observer setup in v10, showing required resourceOptions parameter and error handling through responseError and tileCountLimitExceeded methods.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/Articles/Migrate to v11.md#2025-04-18_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\nlet offlineRegionManager = OfflineRegionManager(resourceOptions: aResourceOptions)\nlet observer = OfflineRegionObserver()\nofflineRegionManager.setOfflineRegionObserverFor(observer)\n\nclass OfflineRegionObserver: MapboxCoreMaps.OfflineRegionObserver {\n\n    func responseError(forError error: ResponseError) {\n        // handle error\n    }\n\n    func tileCountLimitExceeded() {\n        // handle tile count limit exceeded\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cheap-Ruler-CPP License\nDESCRIPTION: ISC license terms for the cheap-ruler-cpp-internal library version 2.5.4 by Mapbox.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nISC License\n\nCopyright (c) 2017, Mapbox\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for TileStore and StylePack APIs\nDESCRIPTION: A structured markdown document listing the documentation topics for TileStore APIs and Style pack components in Mapbox Maps iOS. It provides a comprehensive list of classes, structs, and enums with their full namespaces for reference.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/Documentation.docc/API Catalogs/TileStore APIs.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# TileStore APIs\n\n\n\n## Topics\n\n\n### TileStore\n\n- ``MapboxCommon/TileStore``\n- ``MapboxCommon/TileStoreOptions``\n- ``TileCacheBudget``\n- ``TileCacheBudgetInMegabytes``\n- ``TileCacheBudgetInTiles``\n- ``TileCoverOptions-struct``\n- ``TileOptions``\n- ``MapboxCommon/TileRegion``\n- ``TileRegionError-enum``\n- ``MapboxCommon/TileRegionLoadOptions``\n- ``MapboxCommon/TileRegionLoadProgress``\n<!--- Should we hide it? There are no fields available -->\n- ``MapboxCommon/TilesetDescriptor``\n- ``TilesetDescriptorOptions``\n- ``CanonicalTileID``\n- ``TileStoreObserver``\n- ``MapboxCommon/TileRegionLoadProgressCallback``\n- ``TileStoreUsageMode``\n- ``TileRegionError-enum``\n<!--should next item be public?-->\n- ``MapboxCommon/TileDataDomain``\n- ``TileCacheBudgetType``\n- ``MapboxCommon/TileRegionEstimateOptions``\n- ``MapboxCommon/TileRegionEstimateProgress``\n- ``MapboxCommon/TileRegionEstimateResult``\n- ``MapboxCommon/TileRegionEstimateProgressCallback``\n- ``MapboxCommon/CacheClearingError``\n- ``MapboxCommon/CacheClearingErrorType``\n- ``ClearCacheError``\n\n### Style pack\n\n- ``StyleObjectInfo``\n- ``StylePack``\n- ``StylePackError-enum``\n- ``StylePackLoadOptions``\n- ``StylePackLoadProgress``\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Caution Notice in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to display a caution notice about the developmental status of the Mapbox Maps SwiftUI module.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/Sources/MapboxMaps/SwiftUI/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n‚ö†Ô∏è Caution: This module is cunrrently in development and its API is not stable yet. We strongly recommend that it not be used in production.\n```\n\n----------------------------------------\n\nTITLE: Unique Resource License Text\nDESCRIPTION: BSL-1.0 license text for the unique_resource library by Shintarou Okada\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License for fmt Library\nDESCRIPTION: This snippet shows the full text of the MIT license for the fmt library, version 7.1.3. It includes copyright information, permissions, conditions, and a disclaimer. An optional exception clause is also provided for embedded portions of the software in compiled object form.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2012 - present, Victor Zverovich\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n--- Optional exception to the license ---\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into a machine-executable object form of such\nsource code, you may redistribute such embedded portions in such object form\nwithout including the above copyright and permission notices.\n```\n\n----------------------------------------\n\nTITLE: Displaying License Text for glad Library in plaintext\nDESCRIPTION: This snippet shows the full license text for the glad library, including the MIT License for the glad source code, Apache License for Khronos Specifications, and a custom license for EGL Specification and headers.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nThe glad source code:\n\n    The MIT License (MIT)\n\n    Copyright (c) 2013-2022 David Herberth\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of\n    this software and associated documentation files (the \"Software\"), to deal in\n    the Software without restriction, including without limitation the rights to\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n    the Software, and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nThe Khronos Specifications:\n\n    Copyright (c) 2013-2020 The Khronos Group Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\")\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\nThe EGL Specification and various headers:\n\n    Copyright (c) 2007-2016 The Khronos Group Inc.\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and/or associated documentation files (the\n    \"Materials\"), to deal in the Materials without restriction, including\n    without limitation the rights to use, copy, modify, merge, publish,\n    distribute, sublicense, and/or sell copies of the Materials, and to\n    permit persons to whom the Materials are furnished to do so, subject to\n    the following conditions:\n\n    The above copyright notice and this permission notice shall be included\n    in all copies or substantial portions of the Materials.\n\n    THE MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n    MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.\n```\n\n----------------------------------------\n\nTITLE: Protozero License Text\nDESCRIPTION: BSD-2-Clause license text for the protozero library used by Mapbox\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nprotozero copyright (c) Mapbox.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in\n      the documentation and/or other materials provided with the\n      distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES LOSS OF USE, DATA, OR\nPROFITS OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: BSD-3-Clause License for mapbox-base-internal\nDESCRIPTION: The BSD 3-Clause license text for the mapbox-base-internal component. This license allows for redistribution and use of the software with certain conditions regarding copyright notices and attribution.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) MapBox\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n- Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n- Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n- Neither the name \"MapBox\" nor the names of its contributors may be\n  used to endorse or promote products derived from this software without\n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\nLOSS OF USE, DATA, OR PROFITS OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Adding Experimental Attributes to Annotation Managers in Swift\nDESCRIPTION: Several properties in PointAnnotationManager and PolylineAnnotationManager have been marked with @_documentation and @_spi attributes, indicating they are experimental or internal features.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_49\n\nLANGUAGE: Swift\nCODE:\n```\nVar PointAnnotationManager.symbolElevationReference is now with @_documentation\nVar PointAnnotationManager.symbolElevationReference is now with @_spi\nVar PointAnnotationManager.symbolZOffset is now with @_documentation\nVar PointAnnotationManager.symbolZOffset is now with @_spi\nVar PolylineAnnotationManager.lineTrimColor is now with @_documentation\nVar PolylineAnnotationManager.lineTrimColor is now with @_spi\nVar PolylineAnnotationManager.lineTrimFadeRange is now with @_documentation\nVar PolylineAnnotationManager.lineTrimFadeRange is now with @_spi\nVar PolylineAnnotationManager.lineZOffset is now with @_documentation\nVar PolylineAnnotationManager.lineZOffset is now with @_spi\n```\n\n----------------------------------------\n\nTITLE: RapidJSON License Information\nDESCRIPTION: License information for RapidJSON 1.1.0, a fast JSON parser/generator for C++ licensed under MIT by THL A29 Limited and Milo Yip. Includes details about sub-components licensed under BSD and JSON licenses.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nTencent is pleased to support the open source community by making RapidJSON available. \n \nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip.  All rights reserved.\n\nIf you have downloaded a copy of the RapidJSON binary from Tencent, please note that the RapidJSON binary is licensed under the MIT License.\nIf you have downloaded a copy of the RapidJSON source code from Tencent, please note that RapidJSON source code is licensed under the MIT License, except for the third-party components listed below which are subject to different license terms.  Your integration of RapidJSON into your own projects may require compliance with the MIT License, as well as the other licenses applicable to the third-party components included within RapidJSON. To avoid the problematic JSON license in your own projects, it's sufficient to exclude the bin/jsonchecker/ directory, as it's the only code under the JSON license.\nA copy of the MIT License is included in this file.\n\nOther dependencies and licenses:\n\nOpen Source Software Licensed Under the BSD License:\n--------------------------------------------------------------------\n\nThe msinttypes r29 \nCopyright (c) 2006-2013 Alexander Chemeris \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. \n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n* Neither the name of  copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES LOSS OF USE, DATA, OR PROFITS OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nOpen Source Software Licensed Under the JSON License:\n--------------------------------------------------------------------\n\njson.org \nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\nJSON_checker\nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\n\t\nTerms of the JSON License:\n---------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nTerms of the MIT License:\n--------------------------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: glm License Information\nDESCRIPTION: License information for glm 1.0.0, a C++ mathematics library for graphics programming licensed under MIT by g-truc. Details permissions for use, modification, and distribution along with warranty disclaimers.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n================================================================================\nThe MIT License\n--------------------------------------------------------------------------------\nCopyright (c) 2005 - G-Truc Creation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Vector Tile Internal License Text\nDESCRIPTION: ISC license text for the vector-tile-internal library by Mapbox\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2016, Mapbox\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Adding Experimental Annotations to Types and Constructors in Swift\nDESCRIPTION: Various types, constructors, and properties related to ClipLayerTypes, FillExtrusionAlignment, ModelScaleMode, and SymbolElevationReference have been marked with @_documentation and @_spi attributes.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_51\n\nLANGUAGE: Swift\nCODE:\n```\nConstructor ClipLayerTypes.init(rawValue:) is now with @_documentation\nConstructor ClipLayerTypes.init(rawValue:) is now with @_spi\nStruct ClipLayerTypes is now with @_documentation\nStruct ClipLayerTypes is now with @_spi\nTypeAlias ClipLayerTypes.RawValue is now with @_spi\nVar ClipLayerTypes.model is now with @_documentation\nVar ClipLayerTypes.model is now with @_spi\n```\n\n----------------------------------------\n\nTITLE: Wagyu License Text\nDESCRIPTION: BSL-1.0 license text for the Wagyu library by Angus Johnson and Mapbox\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nParts of the code in the Wagyu Library are derived from the version of the \nClipper Library by Angus Johnson listed below.\n\nAuthor    :  Angus Johnson\nVersion   :  6.4.0\nDate      :  2 July 2015\nWebsite   :  http://www.angusj.com\n\nCopyright for portions of the derived code in the Wagyu library are held \nby Angus Johnson, 2010-2015. Copyright for the \"include/mapbox/geometry/wagyu/almost_equal.hpp\" \nfile is held by Google Inc and its license is listed at the top of that file.\nAll other copyright for the Wagyu Library are held by Mapbox, 2016. This code \nis published in accordance with, and retains the same license as the Clipper \nLibrary by Angus Johnson.\n\nCopyright (c) 2010-2015, Angus Johnson\nCopyright (c) 2016-2020, Mapbox\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: ICU License\nDESCRIPTION: Unicode License V3 terms for the ICU library version 75.1, granting permissions to use, copy, modify and distribute the software.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUNICODE LICENSE V3\n\nCOPYRIGHT AND PERMISSION NOTICE\n\nCopyright ¬© 2016-2024 Unicode, Inc.\n\nNOTICE TO USER: Carefully read the following legal agreement. BY\nDOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING DATA FILES, AND/OR\nSOFTWARE, YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE\nTERMS AND CONDITIONS OF THIS AGREEMENT. IF YOU DO NOT AGREE, DO NOT\nDOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE THE DATA FILES OR SOFTWARE.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of data files and any associated documentation (the \"Data Files\") or\nsoftware and any associated documentation (the \"Software\") to deal in the\nData Files or Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, and/or sell\ncopies of the Data Files or Software, and to permit persons to whom the\nData Files or Software are furnished to do so, provided that either (a)\nthis copyright and permission notice appear with all copies of the Data\nFiles or Software, or (b) this copyright and permission notice appear in\nassociated Documentation.\n\nTHE DATA FILES AND SOFTWARE ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY\nKIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\nTHIRD PARTY RIGHTS.\n\nIN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS NOTICE\nBE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES,\nOR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\nARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THE DATA\nFILES OR SOFTWARE.\n\nExcept as contained in this notice, the name of a copyright holder shall\nnot be used in advertising or otherwise to promote the sale, use or other\ndealings in these Data Files or Software without prior written\nauthorization of the copyright holder.\n\nSPDX-License-Identifier: Unicode-3.0\n```\n\n----------------------------------------\n\nTITLE: Layer Visibility Expression Support Comment\nDESCRIPTION: Comment indicating changes to the layer visibility property implementation, where all layer types have had their visibility property changed from optional to non-optional Value<Visibility>.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Layer visibility expression support\n```\n\n----------------------------------------\n\nTITLE: Supercluster-HPP License\nDESCRIPTION: ISC license terms for the supercluster-hpp-internal library version 0.5.0 by Mapbox.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2016, Mapbox\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Style Enum to Struct Conversion Comment\nDESCRIPTION: Comment describing the conversion of style enums to structs, which involves removing CaseIterable conformance and the associated allCases property from various style-related types.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Convert style enums into structs\n```\n\n----------------------------------------\n\nTITLE: Enum Element Type Changes in MapboxMaps iOS\nDESCRIPTION: Changes to enum element declared types, simplifying from function types to direct enum types. Affects various enum cases like map, viewport, center, etc.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nAnchor.map // (MapboxMaps.Anchor.Type) -> MapboxMaps.Anchor -> MapboxMaps.Anchor\nIconAnchor.center // (MapboxMaps.IconAnchor.Type) -> MapboxMaps.IconAnchor -> MapboxMaps.IconAnchor\nLineJoin.round // (MapboxMaps.LineJoin.Type) -> MapboxMaps.LineJoin -> MapboxMaps.LineJoin\n```\n\n----------------------------------------\n\nTITLE: Type Changes for LineTranslateAnchor Enum in Swift\nDESCRIPTION: Type changes for LineTranslateAnchor enum elements from function types to direct enum types in the Mapbox Maps iOS SDK.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/breakage_allowlist.txt#2025-04-18_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nEnumElement LineTranslateAnchor.map has declared type change from (MapboxMaps.LineTranslateAnchor.Type) -> MapboxMaps.LineTranslateAnchor to MapboxMaps.LineTranslateAnchor\nEnumElement LineTranslateAnchor.viewport has declared type change from (MapboxMaps.LineTranslateAnchor.Type) -> MapboxMaps.LineTranslateAnchor to MapboxMaps.LineTranslateAnchor\n```\n\n----------------------------------------\n\nTITLE: Accessing Swift API Digester Path in Bash\nDESCRIPTION: A bash command to create a shortcut variable for accessing the swift-api-digester tool path using xcrun. This simplifies subsequent commands by storing the path in a variable.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/scripts/api-compatibility-check/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAPI_DIGESTER_PATH=\"xcrun -f swift-api-digester\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Commit Message Format\nDESCRIPTION: Guidelines for formatting commit messages with relevant labels to indicate affected components of the SDK\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[sdk], [gestures], [telemetry], [animation], [location], ...\n```\n\n----------------------------------------\n\nTITLE: geometry-hpp-internal License Information\nDESCRIPTION: License information for geometry-hpp-internal 1.1.0, a C++ geometry types library licensed under ISC by Mapbox. Includes full license text with usage permissions and disclaimer of warranties.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2016, Mapbox\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MapboxCoreMaps License\nDESCRIPTION: License terms for MapboxCoreMaps SDK version 11.13.0-SNAPSHOT, outlining usage rights and restrictions under Mapbox Terms of Service.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMapbox Core Maps version 11.0\nMapbox Core Maps SDK\n\nCopyright (c) 2025 Mapbox\n\nAll rights reserved.\n\nMapbox Core Maps version 10.0 (\"Mapbox Core Maps SDK\") or higher must\nbe used according to the Mapbox Terms of Service. This license allows\ndevelopers with a current active Mapbox account to use and modify the\nMapbox Core Maps. Developers may modify the Mapbox Core Maps SDK code\nso long as the modifications do not change or interfere with marked\nportions of the code related to billing, accounting, and anonymized\ndata collection. The Mapbox Core Maps SDK sends anonymized location\nand usage data, which Mapbox uses for fixing bugs and errors,\naccounting, and generating aggregated anonymized statistics. This\nlicense terminates automatically if a user no longer has an active\nMapbox account.\n\nFor the full license terms, please see the Mapbox Terms of Service at\nhttps://www.mapbox.com/legal/tos/\n```\n\n----------------------------------------\n\nTITLE: Shelf-Pack-CPP License\nDESCRIPTION: ISC license terms for the shelf-pack-cpp library version 2.1.1 by Mapbox.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nISC License\n\nCopyright (c) 2017, Mapbox\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: VTZero License Text\nDESCRIPTION: BSD-2-Clause license text for the vtzero library by Mapbox\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nBSD 2-Clause License\n\nCopyright (c) 2017, Mapbox\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES LOSS OF USE, DATA, OR PROFITS OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: CC0 License for vtcomposite\nDESCRIPTION: The Creative Commons Zero (CC0) 1.0 Universal license text for the vtcomposite component from Mapbox. This license essentially places the work in the public domain, waiving all copyright and related rights.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nCC0 1.0 Universal\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator and\nsubsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for the\npurpose of contributing to a commons of creative, cultural and scientific\nworks (\"Commons\") that the public can reliably and without fear of later\nclaims of infringement build upon, modify, incorporate in other works, reuse\nand redistribute as freely as possible in any form whatsoever and for any\npurposes, including without limitation commercial purposes. These owners may\ncontribute to the Commons to promote the ideal of a free culture and the\nfurther production of creative, cultural and scientific works, or to gain\nreputation or greater distribution for their Work in part through the use and\nefforts of others.\n\nFor these and/or other purposes and motivations, and without any expectation\nof additional consideration or compensation, the person associating CC0 with a\nWork (the \"Affirmer\"), to the extent that he or she is an owner of Copyright\nand Related Rights in the Work, voluntarily elects to apply CC0 to the Work\nand publicly distribute the Work under its terms, with knowledge of his or her\nCopyright and Related Rights in the Work and the meaning and intended legal\neffect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not limited\nto, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display, communicate,\n  and translate a Work\n\n  ii. moral rights retained by the original author(s) and/or performer(s)\n\n  iii. publicity and privacy rights pertaining to a person's image or likeness\n  depicted in a Work\n\n  iv. rights protecting against unfair competition in regards to a Work,\n  subject to the limitations in paragraph 4(a), below\n\n  v. rights protecting the extraction, dissemination, use and reuse of data in\n  a Work\n\n  vi. database rights (such as those arising under Directive 96/9/EC of the\n  European Parliament and of the Council of 11 March 1996 on the legal\n  protection of databases, and under any national implementation thereof,\n  including any amended or successor version of such directive) and\n\n  vii. other similar, equivalent or corresponding rights throughout the world\n  based on applicable law or treaty, and any national implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention of,\napplicable law, Affirmer hereby overtly, fully, permanently, irrevocably and\nunconditionally waives, abandons, and surrenders all of Affirmer's Copyright\nand Related Rights and associated claims and causes of action, whether now\nknown or unknown (including existing as well as future claims and causes of\naction), in the Work (i) in all territories worldwide, (ii) for the maximum\nduration provided by applicable law or treaty (including future time\nextensions), (iii) in any current or future medium and for any number of\ncopies, and (iv) for any purpose whatsoever, including without limitation\ncommercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes\nthe Waiver for the benefit of each member of the public at large and to the\ndetriment of Affirmer's heirs and successors, fully intending that such Waiver\nshall not be subject to revocation, rescission, cancellation, termination, or\nany other legal or equitable action to disrupt the quiet enjoyment of the Work\nby the public as contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be\njudged legally invalid or ineffective under applicable law, then the Waiver\nshall be preserved to the maximum extent permitted taking into account\nAffirmer's express Statement of Purpose. In addition, to the extent the Waiver\nis so judged Affirmer hereby grants to each affected person a royalty-free,\nnon transferable, non sublicensable, non exclusive, irrevocable and\nunconditional license to exercise Affirmer's Copyright and Related Rights in\nthe Work (i) in all territories worldwide, (ii) for the maximum duration\nprovided by applicable law or treaty (including future time extensions), (iii)\nin any current or future medium and for any number of copies, and (iv) for any\npurpose whatsoever, including without limitation commercial, advertising or\npromotional purposes (the \"License\"). The License shall be deemed effective as\nof the date CC0 was applied by Affirmer to the Work. Should any part of the\nLicense for any reason be judged legally invalid or ineffective under\napplicable law, such partial invalidity or ineffectiveness shall not\ninvalidate the remainder of the License, and in such case Affirmer hereby\naffirms that he or she will not (i) exercise any of his or her remaining\nCopyright and Related Rights in the Work or (ii) assert any associated claims\nand causes of action with respect to the Work, in either case contrary to\nAffirmer's express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n  a. No trademark or patent rights held by Affirmer are waived, abandoned,\n  surrendered, licensed or otherwise affected by this document.\n\n  b. Affirmer offers the Work as-is and makes no representations or warranties\n  of any kind concerning the Work, express, implied, statutory or otherwise,\n  including without limitation warranties of title, merchantability, fitness\n  for a particular purpose, non infringement, or the absence of latent or\n  other defects, accuracy, or the present or absence of errors, whether or not\n  discoverable, all to the greatest extent permissible under applicable law.\n\n  c. Affirmer disclaims responsibility for clearing rights of other persons\n  that may apply to the Work or any use thereof, including without limitation\n  any person's Copyright and Related Rights in the Work. Further, Affirmer\n  disclaims responsibility for obtaining any necessary consents, permissions\n  or other rights required for any use of the Work.\n\n  d. Affirmer understands and acknowledges that Creative Commons is not a\n  party to this document and has no duty or obligation with respect to this\n  CC0 or use of the Work.\n\nFor more information, please see\n<http://creativecommons.org/publicdomain/zero/1.0/>\n```\n\n----------------------------------------\n\nTITLE: BSL-1.0 License for expected-lite\nDESCRIPTION: The Boost Software License (BSL-1.0) for the expected-lite component by Martin Moene. This permissive license allows use, reproduction, and distribution with minimal restrictions.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Full Text\nDESCRIPTION: Complete text of the Apache License Version 2.0, including definitions, terms and conditions for use, reproduction, and distribution of software. Covers copyright and patent licenses, redistribution requirements, warranty disclaimers, and liability limitations.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works within the Source form or\n          documentation, if provided along with the Derivative Works or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n```\n\n----------------------------------------\n\nTITLE: Displaying License Text for mapbox-common Library in plaintext\nDESCRIPTION: This snippet shows the license text for the mapbox-common library, which is subject to the Mapbox Terms of Service.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nMapbox Common SDK\n\nCopyright (c) 2021 - Mapbox, Inc.\n\nYou may use this code with your Mapbox account and under the\nMapbox Terms of Service (https://www.mapbox.com/tos/).\n\nAll other rights reserved.\n\n===========================================================================\n```\n\n----------------------------------------\n\nTITLE: Displaying License Text for msgpack Library in plaintext\nDESCRIPTION: This snippet shows the full Boost Software License text for the msgpack library, version 6.1.0, created by FURUHASHI Sadayuki.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: geojson-cpp-internal License Information\nDESCRIPTION: License information for geojson-cpp-internal 0.5.1, a GeoJSON implementation for C++ licensed under ISC by Mapbox. Provides full license text detailing usage and liability terms.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2016, Mapbox\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Full Text for Draco Library\nDESCRIPTION: The complete Apache License 2.0 legal text that governs the Draco library (version 1.5.3) developed by Google. This license defines terms for use, reproduction, and distribution of the software, including copyright and patent grants, redistribution requirements, and liability limitations.\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works within the Source form or\n          documentation, if provided along with the Derivative Works or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n```\n\n----------------------------------------\n\nTITLE: Microprofile License Text\nDESCRIPTION: Unlicense text for the microprofile library by zeux\nSOURCE: https://github.com/mapbox/mapbox-maps-ios.git/blob/main/LICENSE.md#2025-04-18_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n```"
  }
]