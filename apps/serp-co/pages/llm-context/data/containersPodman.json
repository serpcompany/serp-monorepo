[
  {
    "owner": "containers",
    "repo": "podman",
    "content": "TITLE: Running Podman Hello World Container\nDESCRIPTION: A simple example showing how to run the Podman hello world container from quay.io. This demonstrates the container pulling process and the successful execution of a basic container.\nSOURCE: https://github.com/containers/podman/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run quay.io/podman/hello\nTrying to pull quay.io/podman/hello:latest...\nGetting image source signatures\nCopying blob a6b3126f3807 done\nCopying config 25c667d086 done\nWriting manifest to image destination\nStoring signatures\n!... Hello Podman World ...!\n\n         .--\"--.           \n       / -     - \\         \n      / (O)   (O) \\        \n   ~~~| -=(,Y,)=- |         \n    .---. /`  \\   |~~       \n ~/  o  o \\~~~~.----. ~~   \n  | =(X)= |~  / (O (O) \\    \n   ~~~~~~~  ~| =(Y_)=-  |   \n  ~~~~    ~~~|   U      |~~ \n\nProject:   https://github.com/containers/podman\nWebsite:   https://podman.io\nDocuments: https://docs.podman.io\nTwitter:   @Podman_io\n```\n\n----------------------------------------\n\nTITLE: Running a Container on a Custom Network with Port Mapping\nDESCRIPTION: Runs a containerized web server on a custom network with port mapping. The container is connected to the 'podman1' network with port 80 mapped to the host's port 8081.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run -dt --name webserver --network podman1 -p 8081:80 quay.io/libpod/banner\n269fd0d6b2c8ed60f2ca41d7beceec2471d72fb9a33aa8ca45b81dc9a0abbb12\n```\n\n----------------------------------------\n\nTITLE: Displaying Running Container Processes with Podman top - Shell\nDESCRIPTION: This command queries the process table for a running container using Podman, listing process information such as UID, PID, CPU usage, and executing commands. It requires the container to run and Podman to be present. The output mirrors 'ps' output but scoped to the container's processes, which aids in debugging or process monitoring.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npodman top <container_id>\n  UID   PID  PPID  C STIME TTY          TIME CMD\n    0 31873 31863  0 09:21 ?        00:00:00 nginx: master process nginx -g daemon off;\n  101 31889 31873  0 09:21 ?        00:00:00 nginx: worker process\n```\n\n----------------------------------------\n\nTITLE: Creating a Podman Network with No Default Route\nDESCRIPTION: Create a network with a static subnet and route, but disable the default route using the no_default_route option. This prevents containers from using this network for internet access.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-create.1.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ podman network create --subnet 192.168.33.0/24 --route 10.1.0.0/24,192.168.33.10 --opt no_default_route=1 newnet\n```\n\n----------------------------------------\n\nTITLE: Assigning subuids/subgids to Users with usermod - shell\nDESCRIPTION: Shows how to grant subuids and subgids to a user using the usermod command, followed by verification using grep. Requires root privileges and administrative configuration of /etc/subuid and /etc/subgid. Key parameters are the UID/GID ranges and the target username. Upon success, the mapping for the specified user will be reflected in the system mapping files.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# usermod --add-subuids 100000-165535 --add-subgids 100000-165535 johndoe\\ngrep johndoe /etc/subuid /etc/subgid\\n/etc/subuid:johndoe:100000:65536\\n/etc/subgid:johndoe:100000:65536\n```\n\n----------------------------------------\n\nTITLE: Listing Containers with Custom Format in Podman\nDESCRIPTION: Demonstrates using the --format flag with podman ps to customize the output. This example shows how to display only specific information (ID, Image, Labels, and Mounts) for all containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-ps.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ podman ps -a --format \"{{.ID}}  {{.Image}}  {{.Labels}}  {{.Mounts}}\"\n02f65160e14ca  redis:alpine  tier=backend  proc,tmpfs,devpts,shm,mqueue,sysfs,cgroup,/var/run/,/var/run/\n69ed779d8ef9f  redis:alpine  batch=no,type=small  proc,tmpfs,devpts,shm,mqueue,sysfs,cgroup,/var/run/,/var/run/\n```\n\n----------------------------------------\n\nTITLE: Restoring a Container by Name - Podman CLI - Shell\nDESCRIPTION: Restores a single container, identified by its name ('mywebserver'), from its saved checkpoint using the Podman CLI. No additional options are supplied; the operation uses defaults. Requires Podman installed and a valid checkpoint for the container. Command expects the container name as an argument, with CLI output reflecting success or failure.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-restore.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# podman container restore mywebserver\n```\n\n----------------------------------------\n\nTITLE: Querying Image History with Podman (JSON Output) - Shell and JSON\nDESCRIPTION: This shell command uses the '--format json' option to output the image history as a JSON array, which is suitable for consumption by other tools or programs. Required dependencies are only Podman, and the image parameter specifies the target image. The output includes detailed fields for each image layer as an array of objects; this facilitates integration with automation solutions or further JSON-based processing.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-history.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ podman history --format json debian\n[\n    {\n\t\"id\": \"b676ca55e4f2c0ce53d0636438c5372d3efeb5ae99b676fa5a5d1581bad46060\",\n\t\"created\": \"2017-07-24T16:52:55.195062314Z\",\n\t\"createdBy\": \"/bin/sh -c #(nop)  CMD [\\\"bash\\\"]\",\n\t\"size\": 0,\n\t\"comment\": \"\"\n    },\n    {\n\t\"id\": \"b676ca55e4f2c0ce53d0636438c5372d3efeb5ae99b676fa5a5d1581bad46060\",\n\t\"created\": \"2017-07-24T16:52:54.898893387Z\",\n\t\"createdBy\": \"/bin/sh -c #(nop) ADD file:ebba725fb97cea45d0b1b35ccc8144e766fcfc9a78530465c23b0c4674b14042 in / \",\n\t\"size\": 45142935,\n\t\"comment\": \"\"\n    }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n\t\"id\": \"b676ca55e4f2c0ce53d0636438c5372d3efeb5ae99b676fa5a5d1581bad46060\",\n\t\"created\": \"2017-07-24T16:52:55.195062314Z\",\n\t\"createdBy\": \"/bin/sh -c #(nop)  CMD [\\\"bash\\\"]\",\n\t\"size\": 0,\n\t\"comment\": \"\"\n    },\n    {\n\t\"id\": \"b676ca55e4f2c0ce53d0636438c5372d3efeb5ae99b676fa5a5d1581bad46060\",\n\t\"created\": \"2017-07-24T16:52:54.898893387Z\",\n\t\"createdBy\": \"/bin/sh -c #(nop) ADD file:ebba725fb97cea45d0b1b35ccc8144e766fcfc9a78530465c23b0c4674b14042 in / \",\n\t\"size\": 45142935,\n\t\"comment\": \"\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Running a Basic HTTPD Container with Podman - Shell\nDESCRIPTION: This command runs a detached nginx container named 'basic_httpd' with port 8080 on the host forwarded to port 80 inside the container using Podman. It requires Podman to be installed and at least slirp4netns v0.3.0 for port forwarding. The input parameters include the container name, port mapping, and image source (docker.io/nginx). The output is the container ID and an active HTTP service on localhost:8080.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman run --name basic_httpd -dt -p 8080:80/tcp docker.io/nginx\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Container Image Build Configuration with Podman Quadlet\nDESCRIPTION: Configuration for building container images locally using Quadlet. Consists of a Build unit file that defines the image tag and working directory, and a Container unit that references the built image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_51\n\nLANGUAGE: INI\nCODE:\n```\n[Build]\n# Tag the image to be built\nImageTag=localhost/imagename\n\n# Set the working directory to the path of the unit file,\n# expecting to find a Containerfile/Dockerfile\n# + other files needed to build the image\nSetWorkingDirectory=unit\n```\n\n----------------------------------------\n\nTITLE: Setting Device Option in Podman\nDESCRIPTION: Example of using the --device option to add a host device to a container or pod with specific permissions. Shows the format of host-device:container-device:permissions where rwm represents read, write, and mknod permissions.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/device.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--device=/dev/sdc:/dev/xvdc:rwm\n```\n\n----------------------------------------\n\nTITLE: Pruning Stopped Containers Using Podman - Shell Command Example\nDESCRIPTION: This shell snippet demonstrates using the podman container prune command to remove all stopped containers. It shows the interactive prompt given to the user and the resulting container hashes that are deleted upon confirmation. No code dependencies are required aside from podman being installed. Input is optional depending on whether confirmation is necessary. The output consists of container IDs for each removed container. Users should be cautious as this operation removes containers irreversibly unless otherwise specified.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-prune.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman container prune\nWARNING! This will remove all stopped containers.\nAre you sure you want to continue? [y/N] y\n878392adf2e6c5c9bb1fc19b69d37d2e98c8abf9d539c0bce4b15b46bbcce471\n37664467fbe3618bf9479c34393ac29c02696675addf1750f9e346581636cde7\ned0c6468b8e1cb641b4621d1fe30cb477e1fefc5c0bceb66feaf2f7cb50e5962\n6ac6c8f0067b7a4682e6b8e18902665b57d1a0e07e885d9abcd382232a543ccd\nfff1c5b6c3631746055ec40598ce8ecaa4b82aef122f9e3a85b03b55c0d06c23\n602d343cd47e7cb3dfc808282a9900a3e4555747787ec6723bb68cedab8384d5\n```\n\n----------------------------------------\n\nTITLE: Creating a Podman Network with Custom Gateway\nDESCRIPTION: Create a network named 'newnet' that uses a 192.168.33.0/24 subnet and defines a custom gateway at 192.168.33.3.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-create.1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ podman network create --subnet 192.168.33.0/24 --gateway 192.168.33.3 newnet\nnewnet\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Volume Mounting and File Ownership in Rootless Podman\nDESCRIPTION: This bash snippet demonstrates how file ownership works when mounting a volume from the host into a container using rootless Podman. It shows that files created as root in the container are owned by the host user outside the container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhost$ whoami\njohn\n\n# a folder which is empty\nhost$ ls /home/john/folder\nhost$ podman run -it -v /home/john/folder:/container/volume mycontainer /bin/bash\n\n# Now I'm in the container\nroot@container# whoami\nroot\nroot@container# touch /container/volume/test\nroot@container# ls -l /container/volume\ntotal 0\n-rw-r--r-- 1 root root 0 May 20 21:47 test\nroot@container# exit\n\n# I check again\nhost$ ls -l /home/john/folder\ntotal 0\n-rw-r--r-- 1 john john 0 May 20 21:47 test\n```\n\n----------------------------------------\n\nTITLE: Creating Test User and Benchmarking Podman - Bash\nDESCRIPTION: This Bash snippet demonstrates how to create a dedicated test user, enter an interactive shell for that user, pull an Alpine image using Podman, and benchmark container startup via '/usr/bin/time -v'. Creates a safe environment for performance testing by avoiding data loss in the personal account. Requires sudo privileges and Podman installed with proper image sources.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd testuser\\nsudo machinectl shell testuser@\\npodman pull docker.io/library/alpine\\n/usr/bin/time -v podman --storage-driver=vfs run --rm docker.io/library/alpine /bin/true\\nexit\n```\n\n----------------------------------------\n\nTITLE: Checkpointing and Migrating a Container with Podman and SCP - Shell\nDESCRIPTION: These commands first checkpoint a running container with Podman, saving the state to a named tar archive, and then transfer it to a different system using scp. On the destination system, the archive is restored. Requires sudo/root, CRIU, scp, and network access between hosts. Key parameters: container ID, archive path, and destination system details.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo podman container checkpoint <container_id> -e /tmp/checkpoint.tar.gz\nscp /tmp/checkpoint.tar.gz <destination_system>:/tmp\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo podman container restore -i /tmp/checkpoint.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Checking for a Non-Existing Image with podman image exists in Shell\nDESCRIPTION: This example shows using `podman image exists` to check for an image named 'webbackend' which is *not* present in local storage. The `echo $?` command displays the exit code 1, confirming the image was not found in the local Podman storage.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-exists.1.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ podman image exists webbackend\n$ echo $?\n1\n```\n\n----------------------------------------\n\nTITLE: Querying Image Layer Hierarchy with Podman CLI - Shell\nDESCRIPTION: Demonstrates the use of the 'podman image tree' command to display the tree structure of all layers in a specified container image and their metadata. No dependencies besides Podman CLI are required. The command expects an image reference (by tag or ID) and produces a formatted, indented tree with IDs, sizes, and optional tags; output is printed directly to the console.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-tree.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman image tree docker.io/library/wordpress\nImage ID: 6e880d17852f\nTags:    [docker.io/library/wordpress:latest]\nSize:    429.9MB\nImage Layers\n├──  ID: 3c816b4ead84 Size: 58.47MB\n├──  ID: e39dad2af72e Size: 3.584kB\n├──  ID: b2d6a702383c Size: 213.6MB\n├──  ID: 94609408badd Size: 3.584kB\n├──  ID: f4dddbf86725 Size: 43.04MB\n├──  ID: 8f695df43a4c Size: 11.78kB\n├──  ID: c29d67bf8461 Size: 9.728kB\n├──  ID: 23f4315918f8 Size:  7.68kB\n├──  ID: d082f93a18b3 Size: 13.51MB\n├──  ID: 7ea8bedcac69 Size: 4.096kB\n├──  ID: dc3bbf7b3dc0 Size: 57.53MB\n├──  ID: fdbbc6404531 Size: 11.78kB\n├──  ID: 8d24785437c6 Size: 4.608kB\n├──  ID: 80715f9e8880 Size: 4.608kB Top Layer of: [docker.io/library/php:7.2-apache]\n├──  ID: c93cbcd6437e Size: 3.573MB\n├──  ID: dece674f3cd1 Size: 4.608kB\n├──  ID: 834f4497afda Size: 7.168kB\n├──  ID: bfe2ce1263f8 Size: 40.06MB\n└──  ID: 748e99b214cf Size: 11.78kB Top Layer of: [docker.io/library/wordpress:latest]\n\n```\n\n----------------------------------------\n\nTITLE: Basic Gorilla Mux Server Example in Go\nDESCRIPTION: Complete example of a minimal Gorilla Mux server implementation showing basic route handling and server initialization.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_29\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n    \"log\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc YourHandler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Gorilla!\\n\"))\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    // Routes consist of a path and a handler function.\n    r.HandleFunc(\"/\", YourHandler)\n\n    // Bind to a port and pass our router in\n    log.Fatal(http.ListenAndServe(\":8000\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: ValidateStruct Example in GoValidator\nDESCRIPTION: Example demonstrating how to use struct validation in GoValidator. Shows defining a struct with validation tags, creating a custom validator, and validating a struct instance.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype Post struct {\n\tTitle    string `valid:\"alphanum,required\"`\n\tMessage  string `valid:\"duck,ascii\"`\n\tMessage2 string `valid:\"animal(dog)\"`\n\tAuthorIP string `valid:\"ipv4\"`\n\tDate     string `valid:\"-\"`\n}\npost := &Post{\n\tTitle:   \"My Example Post\",\n\tMessage: \"duck\",\n\tMessage2: \"dog\",\n\tAuthorIP: \"123.234.54.3\",\n}\n\n// Add your own struct validation tags\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n\n// Add your own struct validation tags with parameter\ngovalidator.ParamTagMap[\"animal\"] = govalidator.ParamValidator(func(str string, params ...string) bool {\n    species := params[0]\n    return str == species\n})\ngovalidator.ParamTagRegexMap[\"animal\"] = regexp.MustCompile(\"^animal\\\\((\\\\w+)\\\\)$\")\n\nresult, err := govalidator.ValidateStruct(post)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Running Podman Container for Network Metadata - Shell\nDESCRIPTION: This command inspects the container named 'basic_httpd' and uses grep to filter lines related to 'IPAddress' and 'SecondaryIPAddresses' in the output. It requires that the inspected container exists and Podman is installed. The primary purpose is to retrieve network metadata, such as assigned IP addresses (typically empty in rootless mode).\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npodman inspect basic_httpd | grep IPAddress\\\":\n            \"SecondaryIPAddresses\": null,\n            \"IPAddress\": \"\",\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Gorilla Mux Router in Go\nDESCRIPTION: This snippet demonstrates how to create a new Gorilla Mux router and register basic route handlers. It shows the fundamental usage of the package for mapping URL paths to handler functions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/\", HomeHandler)\n    r.HandleFunc(\"/products\", ProductsHandler)\n    r.HandleFunc(\"/articles\", ArticlesHandler)\n    http.Handle(\"/\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Podman Service Connections via CLI - Shell\nDESCRIPTION: This snippet demonstrates how to list all system connections configured for the Podman service via the command-line interface. It shows the command to display current connections along with their properties (name, URI, identity, default status, and read/write settings). The expected output is a formatted table. This command is part of the Podman CLI and requires Podman to be installed. There are no configurable parameters for this command, and it must be executed in a shell environment with permissions to access Podman configuration files.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-connection.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```\n$ podman system connection list\nName URI                                           Identity\\t      Default  ReadWrite\ndevl ssh://root@example.com/run/podman/podman.sock ~/.ssh/id_rsa  true     true\n```\n```\n\n----------------------------------------\n\nTITLE: Building Podman Binaries\nDESCRIPTION: Instructions on how to build Podman binaries using the Makefile. Built binaries are placed in the bin/ directory.\nSOURCE: https://github.com/containers/podman/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ make binaries\n```\n\n----------------------------------------\n\nTITLE: Enabling Netavark DHCP Proxy\nDESCRIPTION: Configures DHCP proxy service for netavark backend using systemd or manual startup.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo systemctl enable --now netavark-dhcp-proxy.socket\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ /usr/libexec/podman/netavark dhcp-proxy --activity-timeout 0\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Network via CLI - Podman - Shell\nDESCRIPTION: This shell command and documentation describe how to use the \\\"podman network create\\\" CLI to provision network configurations for containers. Users can specify drivers, subnets, DNS settings, and additional options to customize the network. It requires the Podman tool to be installed and can be run from the terminal, with outputs including the newly created network's name. Options such as --driver, --subnet, and --opt allow for granular control of network properties, while certain combinations of options are required for advanced networking scenarios.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-create.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% podman-network-create 1\n\n## NAME\npodman\\-network-create - Create a Podman network\n\n## SYNOPSIS\n**podman network create**  [*options*] [*name*]\n\n## DESCRIPTION\nCreate a network configuration for use with Podman. By default, Podman creates a bridge connection.\nA *Macvlan* connection can be created with the *-d macvlan* option. A parent device for macvlan or\nipvlan can be designated with the *-o parent=`<device>`* or *--network-interface=`<device>`* option.\n\nIf no options are provided, Podman assigns a free subnet and name for the network.\n\nUpon completion of creating the network, Podman displays the name of the newly added network.\n\n## OPTIONS\n#### **--disable-dns**\n\nDisables the DNS plugin for this network which if enabled, can perform container to container name\nresolution. It is only supported with the `bridge` driver, for other drivers it is always disabled.\n\n#### **--dns**=*ip*\n\nSet network-scoped DNS resolver/nameserver for containers in this network. If not set, the host servers from `/etc/resolv.conf` is used.  It can be overwritten on the container level with the `podman run/create --dns` option. This option can be specified multiple times to set more than one IP.\n\n#### **--driver**, **-d**=*driver*\n\nDriver to manage the network. Currently `bridge`, `macvlan` and `ipvlan` are supported. Defaults to `bridge`.\nAs rootless the `macvlan` and `ipvlan` driver have no access to the host network interfaces because rootless networking requires a separate network namespace.\n\nThe netavark backend allows the use of so called *netavark plugins*, see the\n[plugin-API.md](https://github.com/containers/netavark/blob/main/plugin-API.md)\ndocumentation in netavark. The binary must be placed in a specified directory\nso podman can discover it, this list is set in `netavark_plugin_dirs` in\n**[containers.conf(5)](https://github.com/containers/common/blob/main/docs/containers.conf.5.md)**\nunder the `[network]` section.\n\nThe name of the plugin can then be used as driver to create a network for your plugin.\nThe list of all supported drivers and plugins can be seen with `podman info --format {{.Plugins.Network}}`.\n\nNote that the `macvlan` and `ipvlan` drivers do not support port forwarding. Support for port forwarding\nwith a plugin depends on the implementation of the plugin.\n\n#### **--gateway**=*ip*\n\nDefine a gateway for the subnet. To provide a gateway address, a\n*subnet* option is required. Can be specified multiple times.\nThe argument order of the **--subnet**, **--gateway** and **--ip-range** options must match.\n\n#### **--ignore**\n\nIgnore the create request if a network with the same name already exists instead of failing.\nNote, trying to create a network with an existing name and different parameters does not change the configuration of the existing one.\n\n#### **--interface-name**=*name*\n\nThis option maps the *network_interface* option in the network config, see **podman network inspect**.\nDepending on the driver, this can have different effects; for `bridge`, it uses the bridge interface name.\nFor `macvlan` and `ipvlan`, it is the parent device on the host. It is the same as `--opt parent=...`.\n\n#### **--internal**\n\nRestrict external access of this network when using a `bridge` network. Note when using the CNI backend\nDNS will be automatically disabled, see **--disable-dns**.\n\nWhen using the `macvlan` or `ipvlan` driver with this option no default route will be added to the container.\nBecause it bypasses the host network stack no additional restrictions can be set by podman and if a\nprivileged container is run it can set a default route themselves. If this is a concern then the\ncontainer connections should be blocked on your actual network gateway.\n\nUsing the `bridge` driver with this option has the following effects:\n - Global IP forwarding sysctls will not be changed in the host network namespace.\n - IP forwarding is disabled on the bridge interface instead of setting up a firewall.\n - No default route will be added to the container.\n\nIn all cases, aardvark-dns will only resolve container names with this option enabled.\nOther queries will be answered with `NXDOMAIN`.\n\n#### **--ip-range**=*range*\n\nAllocate container IP from a range. The range must be a either a complete subnet in CIDR notation or be in\nthe `<startIP>-<endIP>` syntax which allows for a more flexible range compared to the CIDR subnet.\nThe *ip-range* option must be used with a *subnet* option. Can be specified multiple times.\nThe argument order of the **--subnet**, **--gateway** and **--ip-range** options must match.\n\n#### **--ipam-driver**=*driver*\n\nSet the ipam driver (IP Address Management Driver) for the network. When unset podman chooses an\nipam driver automatically based on the network driver.\n\nValid values are:\n\n - `dhcp`: IP addresses are assigned from a dhcp server on the network. When using the netavark backend\n  the `netavark-dhcp-proxy.socket` must be enabled in order to start the dhcp-proxy when a container is\n  started, for CNI use the `cni-dhcp.socket` unit instead.\n - `host-local`: IP addresses are assigned locally.\n - `none`: No ip addresses are assigned to the interfaces.\n\nView the driver in the **podman network inspect** output under the `ipam_options` field.\n\n#### **--ipv6**\n\nEnable IPv6 (Dual Stack) networking. If no subnets are given, it allocates an ipv4 and an ipv6 subnet.\n\n#### **--label**=*label*\n\nSet metadata for a network (e.g., --label mykey=value).\n\n#### **--opt**, **-o**=*option*\n\nSet driver specific options.\n\nAll drivers accept the `mtu`, `metric`, `no_default_route` and options.\n\n- `mtu`: Sets the Maximum Transmission Unit (MTU) and takes an integer value.\n- `metric` Sets the Route Metric for the default route created in every container joined to this network. Accepts a positive integer value. Can only be used with the Netavark network backend.\n- `no_default_route`: If set to 1, Podman will not automatically add a default route to subnets. Routes can still be added\nmanually by creating a custom route using `--route`.\n\nAdditionally the `bridge` driver supports the following options:\n\n- `vlan`: This option assign VLAN tag and enables vlan\\_filtering. Defaults to none.\n- `isolate`: This option isolates networks by blocking traffic between those that have this option enabled.\n- `com.docker.network.bridge.name`: This option assigns the given name to the created Linux Bridge\n- `com.docker.network.driver.mtu`: Sets the Maximum Transmission Unit (MTU) and takes an integer value.\n- `vrf`: This option assigns a VRF to the bridge interface. It accepts the name of the VRF and defaults to none. Can only be used with the Netavark network backend.\n- `mode`: This option sets the specified bridge mode on the interface. Defaults to `managed`. Supported values:\n  - `managed`: Podman creates and deletes the bridge and changes sysctls of it. It adds firewall rules to masquerade outgoing traffic, as well as setup port forwarding for incoming traffic using DNAT.\n  - `unmanaged`: Podman uses an existing bridge. It must exist by the time you want to start a container which uses the network. There will be no NAT or port forwarding, even if such options were passed while creating the container.\n\nThe `macvlan` and `ipvlan` driver support the following options:\n\n- `parent`: The host device which is used for the macvlan interface. Defaults to the default route interface.\n- `mode`: This option sets the specified ip/macvlan mode on the interface.\n  - Supported values for `macvlan` are `bridge`, `private`, `vepa`, `passthru`. Defaults to `bridge`.\n  - Supported values for `ipvlan` are `l2`, `l3`, `l3s`. Defaults to `l2`.\n\nAdditionally the `macvlan` driver supports the `bclim` option:\n\n- `bclim`: Set the threshold for broadcast queueing. Must be a 32 bit integer. Setting this value to `-1` disables broadcast queueing altogether.\n\n#### **--route**=*route*\n\nA static route in the format `<destination in CIDR notation>,<gateway>,<route metric (optional)>`. This route will be added to every container in this network. Only available with the netavark backend. It can be specified multiple times if more than one static route is desired.\n\n#### **--subnet**=*subnet*\n\nThe subnet in CIDR notation. Can be specified multiple times to allocate more than one subnet for this network.\nThe argument order of the **--subnet**, **--gateway** and **--ip-range** options must match.\nThis is useful to set a static ipv4 and ipv6 subnet.\n```\n\n----------------------------------------\n\nTITLE: Viewing Container Logs with Podman - Shell\nDESCRIPTION: The command 'podman logs <container_id>' retrieves and displays stdout/stderr output from the specified container by its ID. It requires Podman and an existing container. The command is followed by example log outcomes showing HTTP requests served by nginx in the container. This helps monitor service activity and debug issues.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npodman logs <container_id>\n10.88.0.1 - - [07/Feb/2018:15:22:11 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.55.1\" \"-\"\n10.88.0.1 - - [07/Feb/2018:15:22:30 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.55.1\" \"-\"\n10.88.0.1 - - [07/Feb/2018:15:22:30 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.55.1\" \"-\"\n10.88.0.1 - - [07/Feb/2018:15:22:31 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.55.1\" \"-\"\n10.88.0.1 - - [07/Feb/2018:15:22:31 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.55.1\" \"-\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Podman Network with Custom Subnet\nDESCRIPTION: Create a network named 'newnet' that uses the subnet 192.5.0.0/16 for IP address allocation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-create.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman network create --subnet 192.5.0.0/16 newnet\nnewnet\n```\n\n----------------------------------------\n\nTITLE: Running Rootless Container with Port Mapping\nDESCRIPTION: Demonstrates running a rootless container with port mapping and inter-container communication.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run -dt --name webserver -p 8080:80 quay.io/libpod/banner\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ip address show eth0\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run -it quay.io/libpod/banner curl http://192.168.99.109:8080\n```\n\n----------------------------------------\n\nTITLE: Creating a Podman Volume - Shell\nDESCRIPTION: This shell snippet demonstrates the basic usage of the 'podman volume create' command to create an empty volume in Podman. No parameters are specified, so a random name is generated. Requires the Podman CLI to be installed and accessible. Input: none; Output: new volume with a unique name created.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman volume create\n```\n\n----------------------------------------\n\nTITLE: Complete Container Workflow with Podman Go Bindings\nDESCRIPTION: Comprehensive example that pulls an image, creates a container named 'foobar' from it, and starts the container using Podman Go bindings. Uses the specgen package to define container specifications.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/bindings/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/containers/podman/v5/pkg/bindings\"\n\t\"github.com/containers/podman/v5/pkg/bindings/containers\"\n\t\"github.com/containers/podman/v5/pkg/bindings/images\"\n\t\"github.com/containers/podman/v5/pkg/specgen\"\n)\n\nfunc main() {\n\tconn, err := bindings.NewConnection(context.Background(), \"unix:///run/podman/podman.sock\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\t_, err = images.Pull(conn, \"quay.io/libpod/alpine_nginx\", nil)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\ts := specgen.NewSpecGenerator(\"quay.io/libpod/alpine_nginx\", false)\n\ts.Name = \"foobar\"\n\tcreateResponse, err := containers.CreateWithSpec(conn, s, nil)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\tfmt.Println(\"Container created.\")\n\tif err := containers.Start(conn, createResponse.ID, nil); err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\tfmt.Println(\"Container started.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom DNS Servers in Podman Containers\nDESCRIPTION: Demonstrates how to set custom DNS server IP addresses for containers using the --dns flag. The flag can override default DNS configuration when host DNS (127.0.0.1) is invalid for containers. Setting the value to 'none' prevents Podman from creating /etc/resolv.conf in the container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/dns.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--dns=ipaddr\n```\n\n----------------------------------------\n\nTITLE: Copying File Between Containers via podman cp - Shell\nDESCRIPTION: Demonstrates copying a file from one container to a directory on another container by invoking podman cp. Both source and target must be valid container identifiers. Key parameters are the source container ID and file path, target container ID, and target directory path. The input is a file in one container; the output is the file added to the directory in the second container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-cp.1.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npodman cp containerID1:/myfile.txt containerID2:/tmp\n```\n\n----------------------------------------\n\nTITLE: Checking an Existing Podman Manifest (Shell)\nDESCRIPTION: Demonstrates using `podman manifest exists` to check for a manifest list named `list1` that exists in local storage. The subsequent `echo $?` command confirms the existence by showing an exit code of `0`.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-manifest-exists.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman manifest exists list1\n$ echo $?\n0\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Pod YAML with Bind-Mounted Host Directory - Podman - YAML\nDESCRIPTION: This YAML manifest, generated by 'podman kube generate', defines a Pod mounting a host directory into the container using a hostPath volume with type 'Directory'. Required dependencies are the existence of the source directory on the host and correct Podman configuration. The container specification includes command, image, and a volumeMount mapping the host dir to the internal path. Limitation: when used on SELinux-enabled systems and rootless containers, extra security steps may be needed. Input is a Podman container with a bind-mounted host directory; output is a Kubernetes Pod YAML.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-generate.1.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: \"2021-03-18T16:26:08Z\"\n  labels:\n    app: my-container-with-bind-mounted-data\n  name: my-container-with-bind-mounted-data\nspec:\n  containers:\n  - command:\n    - /bin/sh\n    image: docker.io/library/alpine:latest\n    name: test-bind-mount\n    volumeMounts:\n    - mountPath: /volume\n      name: home-user-my-data-host\n  restartPolicy: Never\n  volumes:\n  - hostPath:\n      path: /home/user/my-data\n      type: Directory\n    name: home-user-my-data-host\n\n```\n\n----------------------------------------\n\nTITLE: Copying Directory from One Container to Another Using podman cp - Shell\nDESCRIPTION: Uses podman cp to copy an entire directory from one container into a new directory location in another container. Both containers must be accessible, and directories specified must exist or be creatable per the rules. Input: source container ID, source directory, destination container ID, and destination path. Output: source directory and contents appear in destination container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-cp.1.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npodman cp containerA:/myapp containerB:/newapp\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Pod and Service YAML for a Pod - Podman - YAML\nDESCRIPTION: This YAML example shows both a Pod and its corresponding NodePort Service, generated by 'podman kube generate -s' for a Podman pod. The Pod spec includes container command, image, and working directory; the Service spec exposes the pod through a node port for external access. Prerequisite: Podman pod with exposed ports. Key parameters are the Service type (NodePort), port mapping, and selector labels matching the pod. Limitation: Port numbers are randomly assigned by Podman unless specified.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-generate.1.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: 2018-12-18T15:16:06Z\n  labels:\n    app: demoweb\n  name: demoweb-libpod\nspec:\n  containers:\n  - command:\n    - python3\n    - /root/code/graph.py\n    image: quay.io/baude/demoweb:latest\n    name: practicalarchimedes\n    tty: true\n    workingDir: /root/code\n---\napiVersion: v1\nkind: Service\nmetadata:\n  creationTimestamp: 2018-12-18T15:16:06Z\n  labels:\n    app: demoweb\n  name: demoweb-libpod\nspec:\n  ports:\n  - name: \"8050\"\n    nodePort: 31269\n    port: 8050\n    targetPort: 0\n  selector:\n    app: demoweb\n  type: NodePort\nstatus:\n  loadBalancer: {}\n\n```\n\n----------------------------------------\n\nTITLE: Managing systemd Unit Files for Podman Pods with systemctl - Bash\nDESCRIPTION: This sequence demonstrates starting and stopping Podman pod-related systemd services using systemctl (with --user or sudo as needed), as well as checking pod and container statuses with podman commands. Inputs include unit file names and pod/container identifiers. Outputs show current states, and the snippet illustrates interactions between systemd and Podman-managed resources.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-generate-systemd.1.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ systemctl --user start pod-systemd-pod.service\n$ podman pod ps\nPOD ID         NAME          STATUS    CREATED          # OF CONTAINERS   INFRA ID\n0815c7b8e7f5   systemd-pod   Running   29 minutes ago   2                 6c5d116f4bbe\n$ sudo podman ps # 0 Number of pods on root.\nCONTAINER ID  IMAGE  COMMAND  CREATED  STATUS  PORTS  NAMES\n$ systemctl stop pod-systemd-pod.service\n$ podman pod ps\nPOD ID         NAME          STATUS   CREATED          # OF CONTAINERS   INFRA ID\n272d2813c798   systemd-pod   Exited   29 minutes ago   2                 6c5d116f4bbe\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Changes from Parent Layer using Podman CLI\nDESCRIPTION: This command demonstrates using `podman image diff` with a single image argument (`redis:old`) to compare its filesystem against its parent layer. The output lists files and directories prefixed with 'C' for changed and 'A' for added.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-diff.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman image diff redis:old\nC /usr\nC /usr/local\nC /usr/local/bin\nA /usr/local/bin/docker-entrypoint.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Logrus Logger Instance in Go\nDESCRIPTION: Shows how to create a custom instance of the Logrus logger, which is useful for more advanced logging scenarios or when multiple loggers are needed.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  \"github.com/sirupsen/logrus\"\n)\n\nvar log = logrus.New()\n\nfunc main() {\n  log.Out = os.Stdout\n\n  log.WithFields(logrus.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n}\n```\n\n----------------------------------------\n\nTITLE: Appending to Previous Container Checkpoints with Podman - Bash\nDESCRIPTION: This command keeps the memory state from a previous checkpoint and adds a new dump for the latest container to 'checkpoint.tar.gz', using '--with-previous' and '-l' options. Requires a valid previous pre-checkpoint and is used for layered checkpointing. Output is a combined checkpoint archive for later restoration or migration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-checkpoint.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# podman container checkpoint --with-previous -e checkpoint.tar.gz -l\n```\n\n----------------------------------------\n\nTITLE: Configuring Podman Remote Connection with Specific SSH Key\nDESCRIPTION: This command configures the `podman-remote` client by adding a new system connection named `myuser`. It specifies the path to the ECDSA private key (`--identity ~/.ssh/podman`) to be used for authentication and the SSH connection URI (`ssh://user@host/run/user/1000/podman/podman.sock`) pointing to the remote Podman service socket. Ensure the username, hostname, user ID (1000), and socket path match the remote setup.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_38\n\nLANGUAGE: console\nCODE:\n```\n$ podman-remote system connection add myuser --identity ~/.ssh/podman ssh://user@host/run/user/1000/podman/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Exposing Container Ports in Podman\nDESCRIPTION: Shows how to expose container ports using the --expose flag in Podman. Supports tcp, udp, and sctp protocols, with tcp as default. Can expose individual ports or port ranges.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/expose.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--expose=3300-3310\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Podman Containers\nDESCRIPTION: This snippet demonstrates the usage of the --env or -e option in Podman commands (create, exec, run) to set environment variables for containers. It explains how to specify variables with or without values, and how to use wildcard matching for multiple variables.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/env.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--env**, **-e**=*env*\n\nSet environment variables.\n\nThis option allows arbitrary environment variables that are available for the process to be launched inside of the container. If an environment variable is specified without a value, Podman checks the host environment for a value and set the variable only if it is set on the host. As a special case, if an environment variable ending in __*__ is specified without a value, Podman searches the host environment for variables starting with the prefix and adds those variables to the container.\n```\n\n----------------------------------------\n\nTITLE: Inspecting OCI Artifacts using Podman - Shell\nDESCRIPTION: This shell command demonstrates how to use 'podman artifact inspect' to retrieve details about a local OCI artifact by referencing its fully qualified name. This requires Podman to be installed and assumes the artifact exists in the local OCI store. The key parameter is the artifact name (e.g., quay.io/myartifact/myml:latest). Running the command outputs the artifact's inspection data to the terminal.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-artifact-inspect.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman artifact inspect quay.io/myartifact/myml:latest\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Pod YAML with Persistent Named Volume - Podman - YAML\nDESCRIPTION: This YAML, produced by 'podman kube generate', shows a Pod with a named persistent volume mounted into the container using a persistentVolumeClaim. The named volume must already exist in Podman and proper permissions set for rootless/SELinux environments. The container runs an Alpine image, and mounts the persistent volume under '/volume' in the pod. Input: Podman container with named volume; Output: Kubernetes Pod YAML for multi-platform use.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-generate.1.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: \"2021-03-18T16:26:08Z\"\n  labels:\n    app: my-container-using-priceless-data\n  name: my-container-using-priceless-data\nspec:\n  containers:\n  - command:\n    - /bin/sh\n    image: docker.io/library/alpine:latest\n    name: test-bind-mount\n    volumeMounts:\n    - mountPath: /volume\n      name: priceless-data-pvc\n  restartPolicy: Never\n  volumes:\n  - name: priceless-data-pvc\n    persistentVolumeClaim:\n      claimName: priceless-data\n\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Arch Manifests Using Podman CLI - Shell\nDESCRIPTION: This snippet demonstrates how to build a multi-architecture image manifest list (`shazam`) in parallel across four different architectures using the Podman CLI. The `platarch` variable specifies the target platforms, and the `podman build` command uses `--jobs`, `--platform`, and `--manifest` flags to create the manifest. The main dependency is Podman CLI installed on the host, and the Containerfile must support RUN instructions with architecture emulation if building for non-native targets. Inputs include the list of platforms; output is the creation of the manifest list. Limitations: the `--jobs` flag is optional, and `--tag` should not be used with multi-arch builds.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-manifest.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ platarch=linux/amd64,linux/ppc64le,linux/arm64,linux/s390x\n$ podman build --jobs=4 --platform=$platarch --manifest shazam .\n```\n\n----------------------------------------\n\nTITLE: Committing an Image with Commit Message - Podman CLI Bash\nDESCRIPTION: This code snippet illustrates committing a container to an image using podman commit with the -q (quiet) option and a commit message. The command produces only the new image ID as output. Dependencies: podman installed, target container (reverent_golick) existing. Limitations: message option is not supported if format is 'oci'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-commit.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman commit -q --message \"committing container to image\"\nreverent_golick image-committed\ne3ce4d93051ceea088d1c242624d659be32cf1667ef62f1d16d6b60193e2c7a8\n```\n\n----------------------------------------\n\nTITLE: Running a Container Image with Podman\nDESCRIPTION: Shows how to run the busybox container image interactively using the podman run command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/Introduction.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman run -it docker.io/library/busybox\n```\n\n----------------------------------------\n\nTITLE: Loading an Image Archive from a URL Quietly (Bash)\nDESCRIPTION: This command loads a container image from a tar archive located at a specified URL (`https://server.com/archive.tar`) using the `--input` (`-i`) option. The `-q` option (short for `--quiet`) suppresses the progress output.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-load.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman load -q -i https://server.com/archive.tar\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Container Unit File with Podman Quadlet\nDESCRIPTION: A minimal example of a container unit file that runs a CentOS container with volume and network attachments. Includes systemd unit configuration, container settings, and service restart behavior.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_49\n\nLANGUAGE: INI\nCODE:\n```\n[Unit]\nDescription=A minimal container\n\n[Container]\n# Use the centos image\nImage=quay.io/centos/centos:latest\n\n# Use volume and network defined below\nVolume=test.volume:/data\nNetwork=test.network\n\n# In the container we just run sleep\nExec=sleep 60\n\n[Service]\n# Restart service when sleep finishes\nRestart=always\n# Extend Timeout to allow time to pull the image\nTimeoutStartSec=900\n# ExecStartPre flag and other systemd commands can go here, see systemd.unit(5) man page.\nExecStartPre=/usr/share/mincontainer/setup.sh\n\n[Install]\n# Start by default on boot\nWantedBy=multi-user.target default.target\n```\n\n----------------------------------------\n\nTITLE: Running a Container with Containerd Shim - PowerShell\nDESCRIPTION: Runs a Windows-based nanoserver container using ctr.exe, specifying the runhcs shim as the runtime and executing a simple command. Requires mcr.microsoft.com/windows/nanoserver:2004 image and ctr.exe available. The command outputs 'Hello World!' in the running container context, validating shim integration.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-23_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\\\> ctr.exe run --runtime io.containerd.runhcs.v1 --rm mcr.microsoft.com/windows/nanoserver:2004 windows-test cmd /c \"echo Hello World!\"\n\n```\n\n----------------------------------------\n\nTITLE: Basic Struct/Map Merging with Mergo in Go\nDESCRIPTION: This Go code snippet demonstrates the basic usage of the `mergo.Merge` function. It attempts to merge the fields from the `src` struct or map into the `dst` struct or map (passed by address). By default, it only sets values in `dst` where the corresponding field has a zero value. The code includes basic error handling, checking if the merge operation returned an error.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/dario.cat/mergo/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Named Volume with Podman\nDESCRIPTION: This example shows how to inspect a named volume called 'myvol' using the podman volume inspect command. The output displays detailed information about the volume including its name, driver, mountpoint, creation time, labels, scope, and other properties.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-inspect.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume inspect myvol\n[\n     {\n          \"Name\": \"myvol\",\n          \"Driver\": \"local\",\n          \"Mountpoint\": \"/home/myusername/.local/share/containers/storage/volumes/myvol/_data\",\n          \"CreatedAt\": \"2023-03-13T16:26:48.423069028-04:00\",\n          \"Labels\": {},\n          \"Scope\": \"local\",\n          \"Options\": {},\n          \"MountCount\": 0,\n          \"NeedsCopyUp\": true,\n          \"NeedsChown\": true\n     }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Secret from File using Shell\nDESCRIPTION: Creates a Podman secret named `my_secret` using the content from the local file `./secret.txt`. It first writes 'mysecret' (without a newline) into the file using `echo -n`. This is the default method using the `file` driver.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-secret-create.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho -n mysecret > ./secret.txt\n$ podman secret create my_secret ./secret.txt\n```\n\n----------------------------------------\n\nTITLE: Untarring Content into a Container via podman mount - Bash\nDESCRIPTION: Shows how to extract a tarball directly into a mounted container filesystem using podman mount, tar, and podman umount. This method requires podman and tar utilities, and handles switching into the container root for seamless extraction. Parameters include the container ID, the tarball to extract, and the mount point. Input must be an existing tar archive (content.tgz), and the result is that its contents are extracted into the container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-cp.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmnt=$(podman mount CONTAINERID)\ntar xf content.tgz -C ${mnt}\npodman umount CONTAINERID\n```\n\n----------------------------------------\n\nTITLE: Defining --publish-all Option for Podman Container Commands\nDESCRIPTION: This snippet defines the --publish-all (-P) option for Podman create and run commands. It specifies that when set to true, all exposed ports are published to random ports on the host interfaces. The option uses the host's ephemeral port range for binding.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/publish-all.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####> This option file is used in:\n####>   podman create, run\n####> If file is edited, make sure the changes\n####> are applicable to all of those.\n#### **--publish-all**, **-P**\n\nPublish all exposed ports to random ports on the host interfaces. The default is **false**.\n\nWhen set to **true**, publish all exposed ports to the host interfaces.\nIf the operator uses **-P** (or **-p**) then Podman makes the\nexposed port accessible on the host and the ports are available to any\nclient that can reach the host.\n\nWhen using this option, Podman binds any exposed port to a random port on the host\nwithin an ephemeral port range defined by */proc/sys/net/ipv4/ip_local_port_range*.\nTo find the mapping between the host ports and the exposed ports, use **podman port**.\n```\n\n----------------------------------------\n\nTITLE: Mounting Volume in Container with Podman - Shell\nDESCRIPTION: This shell snippet runs a Fedora container with Podman, mounting the 's3fs-fuse-volume' at /s3, setting SELinux ('z') context, and running interactively. The container grants access to the mounted S3 FUSE volume for in-container applications. Requires SELinux enabled on host when using ':z'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ podman run -v s3fs-fuse-volume:/s3:z --rm -it fedora:latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Primary 'manifest' Command for Podman CLI in Go\nDESCRIPTION: This Go code snippet defines the primary 'manifest' command for Podman CLI. It sets up the command structure, usage, and initializes it within the Podman command registry.\nSOURCE: https://github.com/containers/podman/blob/main/cmd/podman/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage manifest\n\nimport (\n    \"github.com/containers/podman/cmd/podman/registry\"\n    \"github.com/containers/podman/cmd/podman/validate\"\n    \"github.com/containers/podman/pkg/domain/entities\"\n    \"github.com/spf13/cobra\"\n)\n\nvar (\n    // podman _manifests_\n    manifestCmd = &cobra.Command{\n        Use:               \"manifest\",\n        Short:             \"Manage manifests\",\n        Args:              cobra.ExactArgs(1),\n        Long:              \"Manage manifests\",\n        Example:           \"podman manifest IMAGE\",\n        TraverseChildren:  true,\n        RunE:              validate.SubCommandExists, // Report error if there is no sub command given\n    }\n)\nfunc init() {\n    // Subscribe command to podman\n    registry.Commands = append(registry.Commands, registry.CliCommand{\n        Command: manifestCmd,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting a Container to a Named Network - Podman - Shell\nDESCRIPTION: This command connects a running or stopped container (named 'web') to a network (named 'test') using Podman. It requires Podman to be installed and assumes both the network and container exist. The command enables the container to communicate with other entities on the specified network. No special parameters are required—only the network and container identifiers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-connect.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman network connect test web\n```\n\n----------------------------------------\n\nTITLE: Copying Directory from Container to Host with podman cp - Shell\nDESCRIPTION: Demonstrates using podman cp to transfer an entire directory from a container to a matching directory on the host. Parameters specify the source container, source directory, and host destination directory. Inputs include container ID and directory path; the result is a mirrored directory structure created and filled on the host.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-cp.1.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npodman cp containerID:/myapp/ /myapp/\n```\n\n----------------------------------------\n\nTITLE: Implementing 'inspect' Sub-command for Podman Manifest CLI in Go\nDESCRIPTION: This Go code snippet defines the 'inspect' sub-command for the Podman manifest CLI. It sets up the command structure, usage, and initializes it within the manifest command.\nSOURCE: https://github.com/containers/podman/blob/main/cmd/podman/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage manifest\n\nimport (\n    \"github.com/containers/podman/cmd/podman/registry\"\n    \"github.com/containers/podman/pkg/domain/entities\"\n    \"github.com/spf13/cobra\"\n)\n\nvar (\n    // podman manifests _inspect_\n    inspectCmd = &cobra.Command{\n        Use:     \"inspect IMAGE\",\n        Short:   \"Display manifest from image\",\n        Long:    \"Displays the low-level information on a manifest identified by image name or ID\",\n        RunE:    inspect,\n        Annotations: map[string]string{\n            // Add this annotation if this command cannot be run rootless\n            // registry.ParentNSRequired: \"\",\n        },\n        Example: \"podman manifest inspect DEADBEEF\",\n    }\n)\n\nfunc init() {\n    // Subscribe inspect sub command to manifest command\n    registry.Commands = append(registry.Commands, registry.CliCommand{\n        Command: inspectCmd,\n        // The parent command to proceed this command on the CLI\n        Parent:  manifestCmd,\n    })\n\n    // This is where you would configure the cobra flags using inspectCmd.Flags()\n}\n\n// Business logic: cmd is inspectCmd, args is the positional arguments from os.Args\nfunc inspect(cmd *cobra.Command, args []string) error {\n    // Business logic using registry.ImageEngine()\n    // Do not pull from libpod directly use the domain objects and types\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Starting System-Level Podman Socket Service - Systemd - Shell\nDESCRIPTION: These commands control the system-wide, rootful Podman API service via systemd. 'sudo systemctl start podman.socket' starts the socket immediately, while 'sudo systemctl enable podman.socket' ensures the service socket activates at boot. These commands must be run with elevated privileges and are applicable when Podman is managed as a system service.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-service.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl start podman.socket\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl enable podman.socket\n```\n\n----------------------------------------\n\nTITLE: Creating a Network in Rootless Podman\nDESCRIPTION: Creates a default bridge network for rootless Podman containers. As of Podman 4.0, rootless users can use netavark networking, but must first create a network since there's no default configuration provided.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman network create\n```\n\n----------------------------------------\n\nTITLE: Creating a Connection to Podman Service in Go\nDESCRIPTION: Establishes a connection to the Podman service socket. This connection is required for all subsequent interactions with the Podman API.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/bindings/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/containers/podman/v5/pkg/bindings\"\n)\n\nfunc main() {\n\tconn, err := bindings.NewConnection(context.Background(), \"unix:///run/podman/podman.sock\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CGroups in Podman Containers\nDESCRIPTION: The --cgroups option controls how Podman handles CGroups for containers. It supports four values: enabled (default), disabled (no CGroups created), no-conmon (disables CGroup for conmon process only), and split (creates separate CGroups for conmon and container payload).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cgroups.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--cgroups**=*how*\n```\n\n----------------------------------------\n\nTITLE: Checking a Non-Existing Podman Manifest (Shell)\nDESCRIPTION: Shows how to use `podman manifest exists` to check for a manifest list named `mylist` that does not exist in local storage. The `echo $?` command verifies its absence by returning an exit code of `1`.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-manifest-exists.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman manifest exists mylist\n$ echo $?\n1\n```\n\n----------------------------------------\n\nTITLE: Installing Packages into a Container without Native DNF - Bash\nDESCRIPTION: Illustrates using podman mount and dnf to install packages into a container that lacks native package management tools. After mounting the container's filesystem, dnf uses --installroot to direct installation, followed by cleanup using chroot on the mounted root. Relevant for containers missing dnf; requires podman, dnf, and chroot utilities. Inputs include the container ID and the package to install (e.g., httpd); outputs are updated container filesystem state.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-cp.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmnt=$(podman mount CONTAINERID)\ndnf install --installroot=${mnt} httpd\nchroot ${mnt} rm -rf /var/log/dnf /var/cache/dnf\npodman umount CONTAINERID\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus Formatter, Output, and Level - Go\nDESCRIPTION: This Go example shows advanced Logrus configuration: the logger is set to the JSONFormatter, output is redirected to stdout, and the log level is raised to WarnLevel. Several log entries use WithFields to structure log data, and a logger Entry is reused for multiple log statements with default fields. Dependencies are Go and Logrus. Key parameters include formatter, output, and log level; input is log statements and output is structured logs in JSON or text as configured.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n  \"os\"\\n  log \"github.com/sirupsen/logrus\"\\n)\\n\\nfunc init() {\\n  // Log as JSON instead of the default ASCII formatter.\\n  log.SetFormatter(&log.JSONFormatter{})\\n\\n  // Output to stdout instead of the default stderr\\n  // Can be any io.Writer, see below for File example\\n  log.SetOutput(os.Stdout)\\n\\n  // Only log the warning severity or above.\\n  log.SetLevel(log.WarnLevel)\\n}\\n\\nfunc main() {\\n  log.WithFields(log.Fields{\\n    \"animal\": \"walrus\",\\n    \"size\":   10,\\n  }).Info(\"A group of walrus emerges from the ocean\")\\n\\n  log.WithFields(log.Fields{\\n    \"omg\":    true,\\n    \"number\": 122,\\n  }).Warn(\"The group's number increased tremendously!\")\\n\\n  log.WithFields(log.Fields{\\n    \"omg\":    true,\\n    \"number\": 100,\\n  }).Fatal(\"The ice breaks!\")\\n\\n  // A common pattern is to re-use fields between logging statements by re-using\\n  // the logrus.Entry returned from WithFields()\\n  contextLogger := log.WithFields(log.Fields{\\n    \"common\": \"this is a common field\",\\n    \"other\": \"I also should be logged always\",\\n  })\\n\\n  contextLogger.Info(\"I'll be logged with common and other field\")\\n  contextLogger.Info(\"Me too\")\\n}\n```\n\n----------------------------------------\n\nTITLE: Running All Local Integration Tests for Podman\nDESCRIPTION: Command to run the entire suite of local integration tests for Podman using the Ginkgo testing framework.\nSOURCE: https://github.com/containers/podman/blob/main/test/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmake localintegration\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuse-OverlayFS for Podman Storage - INI\nDESCRIPTION: This INI configuration enables Podman's overlay storage using 'fuse-overlayfs' as the mount program. The 'mount_program' parameter specifies the path to the fuse-overlayfs binary. Required when native overlayfs is not available or when operating in certain rootless setups.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[storage]\\ndriver = \"overlay\"\\n[storage.options.overlay]\\nmount_program = \"/usr/bin/fuse-overlayfs\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Arguments to Podman Build Command in Quadlet\nDESCRIPTION: Allows passing additional arguments directly to the 'podman build' command. This can be used to access Podman features not directly supported by the generator. Arguments can be space-separated and escaped to include whitespace.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\nPodmanArgs=\n```\n\n----------------------------------------\n\nTITLE: Specifying Platform for Podman Container Operations\nDESCRIPTION: This option allows users to specify the platform (OS/ARCH) when selecting an image for Podman operations. It overrides the current architecture and operating system, and affects subsequent lookups of the same image in local storage.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/platform.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#### **--platform**=*OS/ARCH*\n```\n\n----------------------------------------\n\nTITLE: Listing All Podman Containers (All States) - Shell\nDESCRIPTION: This command lists all containers (running, stopped, created) using Podman's 'ps -a'. It is typically used to check the statuses after stopping or removing containers. No prerequisites other than Podman required. Output is a detailed table of container metadata.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npodman ps -a\n```\n\n----------------------------------------\n\nTITLE: Configuring UID/GID Ranges with shadow-utils - shell\nDESCRIPTION: Demonstrates how to inspect and configure the necessary UID and GID ranges in /etc/subuid and /etc/subgid using shell commands. Requires root/admin privileges and the presence of the shadow-utils or newuid package. The key parameters include usernames and range specifications. Outputs the currently assigned UID/GID ranges for users. Overlapping ranges or improper permissions can cause namespace issues.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# cat /etc/subuid\\njohndoe:100000:65536\\ntest:165536:65536\n```\n\n----------------------------------------\n\nTITLE: Loading Podman Bash Completion - Bash - Shell\nDESCRIPTION: This snippet demonstrates how to immediately enable Podman command completion in the current Bash session by sourcing the output from the podman completion bash command directly. It requires that bash-completion is installed on the system. The podman binary must be installed and available in the PATH. The user runs this command in a Bash terminal; the output of the podman completion bash process is evaluated by source so that command completions take effect for the session. Effective only for the current session unless added to shell initialization scripts.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-completion.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource <(podman completion bash)\n```\n\n----------------------------------------\n\nTITLE: Pulling an Image with Podman Go Bindings\nDESCRIPTION: Demonstrates how to pull an image from a registry using Podman Go bindings. The example pulls 'quay.io/libpod/alpine_nginx' to the local image store.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/bindings/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/containers/podman/v5/pkg/bindings\"\n\t\"github.com/containers/podman/v5/pkg/bindings/images\"\n)\n\nfunc main() {\n\tconn, err := bindings.NewConnection(context.Background(), \"unix:///run/podman/podman.sock\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\t_, err = images.Pull(conn, \"quay.io/libpod/alpine_nginx\", nil)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Default Podman Machine OS to Specific Version\nDESCRIPTION: This command applies the OCI image tagged `5.4` from `quay.io/podman/machine-os` to the default Podman machine (`podman-machine-default`), effectively updating its OS to the version corresponding to Podman 5.4. It assumes the default machine uses an rpm-ostree based OS like Fedora CoreOS.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-os-apply.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman machine os apply quay.io/podman/machine-os:5.4\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Secret with Go Template Formatting - Podman CLI - Bash\nDESCRIPTION: This snippet shows how to use the --format option with podman secret inspect to output only the Name and Labels fields of a secret. It leverages Go templates for custom output formatting. Requires Podman with the specified secret present. The command accepts a Go template string and the name of the secret, outputting the evaluated template with values from the secret.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-secret-inspect.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman secret inspect --format \"{{.Spec.Name}} {{.Spec.Labels}}\" mysecret\n```\n\n----------------------------------------\n\nTITLE: Retrieving Podman Info Output in YAML Format - Shell\nDESCRIPTION: This snippet demonstrates how to run the podman info command from a shell to retrieve comprehensive system, storage, plugin, registry, and version information about the Podman environment. The default output is shown in a YAML-like, human-readable format. No external dependencies are required other than a functioning Podman installation; the command can be run in any shell that supports command execution. Input parameters are optional, and the output is intended for quick inspection or debugging, though large objects may truncate some internal values.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-info.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman info\nhost:\n  arch: amd64\n  buildahVersion: 1.23.0\n  cgroupControllers: []\n  cgroupManager: systemd\n  cgroupVersion: v2\n  conmon:\n    package: conmon-2.0.29-2.fc34.x86_64\n    path: /usr/bin/conmon\n    version: 'conmon version 2.0.29, commit: '\n cpu_utilization:\n   idle_percent: 96.84\n   system_percent: 0.71\n   user_percent: 2.45\n  cpus: 8\n  distribution:\n    distribution: fedora\n    variant: workstation\n    version: \"34\"\n  eventLogger: journald\n  hostname: localhost.localdomain\n  idMappings:\n    gidmap:\n    - container_id: 0\n      host_id: 3267\n      size: 1\n    - container_id: 1\n      host_id: 100000\n      size: 65536\n    uidmap:\n    - container_id: 0\n      host_id: 3267\n      size: 1\n    - container_id: 1\n      host_id: 100000\n      size: 65536\n  kernel: 5.13.13-200.fc34.x86_64\n  linkmode: dynamic\n  logDriver: journald\n  memFree: 1833385984\n  memTotal: 16401895424\n  networkBackend: cni\n  networkBackendInfo:\n    backend: cni\n    dns:\n      package: podman-plugins-3.4.4-1.fc34.x86_64\n      path: /usr/libexec/cni/dnsname\n      version: |-\n        CNI dnsname plugin\n        version: 1.3.1\n        commit: unknown\n    package: |-\n      containernetworking-plugins-1.0.1-1.fc34.x86_64\n      podman-plugins-3.4.4-1.fc34.x86_64\n    path: /usr/libexec/cni\n  ociRuntime:\n    name: crun\n    package: crun-1.0-1.fc34.x86_64\n    path: /usr/bin/crun\n    version: |-\n      crun version 1.0\n      commit: 139dc6971e2f1d931af520188763e984d6cdfbf8\n      spec: 1.0.0\n      +SYSTEMD +SELINUX +APPARMOR +CAP +SECCOMP +EBPF +CRIU +YAJL\n  os: linux\n  pasta:\n    executable: /usr/bin/passt\n    package: passt-0^20221116.gace074c-1.fc34.x86_64\n    version: |\n      passt 0^20221116.gace074c-1.fc34.x86_64\n      Copyright Red Hat\n      GNU Affero GPL version 3 or later <https://www.gnu.org/licenses/agpl-3.0.html>\n      This is free software: you are free to change and redistribute it.\n      There is NO WARRANTY, to the extent permitted by law.\n  remoteSocket:\n    path: /run/user/3267/podman/podman.sock\n  security:\n    apparmorEnabled: false\n    capabilities: CAP_CHOWN,CAP_DAC_OVERRIDE,CAP_FOWNER,CAP_FSETID,CAP_KILL,CAP_NET_BIND_SERVICE,CAP_SETFCAP,CAP_SETGID,CAP_SETPCAP,CAP_SETUID\n    rootless: true\n    seccompEnabled: true\n    seccompProfilePath: /usr/share/containers/seccomp.json\n    selinuxEnabled: true\n  serviceIsRemote: false\n  slirp4netns:\n    executable: /bin/slirp4netns\n    package: slirp4netns-1.1.12-2.fc34.x86_64\n    version: |-\n      slirp4netns version 1.1.12\n      commit: 7a104a101aa3278a2152351a082a6df71f57c9a3\n      libslirp: 4.4.0\n      SLIRP_CONFIG_VERSION_MAX: 3\n      libseccomp: 2.5.0\n  swapFree: 15687475200\n  swapTotal: 16886259712\n  uptime: 47h 15m 9.91s (Approximately 1.96 days)\nplugins:\n  log:\n  - k8s-file\n  - none\n  - journald\n  network:\n  - bridge\n  - macvlan\n  volume:\n  - local\nregistries:\n  search:\n  - registry.fedoraproject.org\n  - registry.access.redhat.com\n  - docker.io\n  - quay.io\nstore:\n  configFile: /home/dwalsh/.config/containers/storage.conf\n  containerStore:\n    number: 9\n    paused: 0\n    running: 1\n    stopped: 8\n  graphDriverName: overlay\n  graphOptions: {}\n  graphRoot: /home/dwalsh/.local/share/containers/storage\n  graphRootAllocated: 510389125120\n  graphRootUsed: 129170714624\n  graphStatus:\n    Backing Filesystem: extfs\n    Native Overlay Diff: \"true\"\n    Supports d_type: \"true\"\n    Using metacopy: \"false\"\n  imageCopyTmpDir: /home/dwalsh/.local/share/containers/storage/tmp\n  imageStore:\n    number: 5\n  runRoot: /run/user/3267/containers\n  transientStore: false\n  volumePath: /home/dwalsh/.local/share/containers/storage/volumes\nversion:\n  APIVersion: 4.0.0\n  Built: 1631648722\n  BuiltTime: Tue Sep 14 15:45:22 2021\n  GitCommit: 23677f92dd83e96d2bc8f0acb611865fb8b1a56d\n  GoVersion: go1.16.6\n  OsArch: linux/amd64\n  Version: 4.0.0\n```\n\n----------------------------------------\n\nTITLE: Showing Basic Podman Disk Usage (Shell)\nDESCRIPTION: Demonstrates the default usage of the `podman system df` command. It displays a summary table showing the total count, active count, size, and reclaimable space for Images, Containers, and Local Volumes.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-df.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman system df\nTYPE            TOTAL   ACTIVE   SIZE    RECLAIMABLE\nImages          6       2        281MB   168MB (59%)\nContainers      3       1        0B      0B (0%)\nLocal Volumes   1       1        22B     0B (0%)\n```\n\n----------------------------------------\n\nTITLE: Using the xz Go API for Compression and Decompression\nDESCRIPTION: This Go program demonstrates the basic usage of the 'github.com/ulikunitz/xz' package. It compresses a predefined string into a buffer using `xz.NewWriter` and then decompresses it back using `xz.NewReader`, writing the output to standard output. It depends on standard Go libraries (`bytes`, `io`, `log`, `os`) and the `github.com/ulikunitz/xz` package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/ulikunitz/xz/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\npackage main\n\nimport (\n    \"bytes\"\n    \"io\"\n    \"log\"\n    \"os\"\n\n    \"github.com/ulikunitz/xz\"\n)\n\nfunc main() {\n    const text = \"The quick brown fox jumps over the lazy dog.\\n\"\n    var buf bytes.Buffer\n    // compress text\n    w, err := xz.NewWriter(&buf)\n    if err != nil {\n        log.Fatalf(\"xz.NewWriter error %s\", err)\n    }\n    if _, err := io.WriteString(w, text); err != nil {\n        log.Fatalf(\"WriteString error %s\", err)\n    }\n    if err := w.Close(); err != nil {\n        log.Fatalf(\"w.Close error %s\", err)\n    }\n    // decompress buffer and write output to stdout\n    r, err := xz.NewReader(&buf)\n    if err != nil {\n        log.Fatalf(\"NewReader error %s\", err)\n    }\n    if _, err = io.Copy(os.Stdout, r); err != nil {\n        log.Fatalf(\"io.Copy error %s\", err)\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running System Tests for Podman\nDESCRIPTION: Command to run the system tests for Podman using the Bash Automated Testing System (bats) framework.\nSOURCE: https://github.com/containers/podman/blob/main/test/README.md#2025-04-23_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nmake localsystem\n```\n\n----------------------------------------\n\nTITLE: Defining BDD Test Specs with Ginkgo and Gomega in Go\nDESCRIPTION: This Go code defines a set of behavior-driven tests for a library system using Ginkgo's DSL and Gomega assertions. It demonstrates nested setup hooks (`BeforeEach`, `When`, `Context`), assertions for both synchronous and asynchronous operations, usage of spec timeouts, and manipulation of test context. Dependencies include Ginkgo (github.com/onsi/ginkgo/v2), Gomega (github.com/onsi/gomega), and domain-specific types like `libraries.Library`, `books.Book`, and `users.User`. The main inputs are mocked library, book, and user objects, and the outputs are assertions on system behavior such as successful checkouts, failed operations, and user notifications. The code serves as an exemplary pattern of Ginkgo suite organization and idiomatic Go test writing.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/ginkgo/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    . \"github.com/onsi/ginkgo/v2\"\n    . \"github.com/onsi/gomega\"\n    ...\n)\n\nvar _ = Describe(\"Checking books out of the library\", Label(\"library\"), func() {\n    var library *libraries.Library\n    var book *books.Book\n    var valjean *users.User\n    BeforeEach(func() {\n        library = libraries.NewClient()\n        book = &books.Book{\n            Title: \"Les Miserables\",\n            Author: \"Victor Hugo\",\n        }\n        valjean = users.NewUser(\"Jean Valjean\")\n    })\n\n    When(\"the library has the book in question\", func() {\n        BeforeEach(func(ctx SpecContext) {\n            Expect(library.Store(ctx, book)).To(Succeed())\n        })\n\n        Context(\"and the book is available\", func() {\n            It(\"lends it to the reader\", func(ctx SpecContext) {\n                Expect(valjean.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Books()).To(ContainElement(book))\n                Expect(library.UserWithBook(ctx, book)).To(Equal(valjean))\n            }, SpecTimeout(time.Second * 5))\n        })\n\n        Context(\"but the book has already been checked out\", func() {\n            var javert *users.User\n            BeforeEach(func(ctx SpecContext) {\n                javert = users.NewUser(\"Javert\")\n                Expect(javert.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n            })\n\n            It(\"tells the user\", func(ctx SpecContext) {\n                err := valjean.Checkout(ctx, library, \"Les Miserables\")\n                Expect(err).To(MatchError(\"Les Miserables is currently checked out\"))\n            }, SpecTimeout(time.Second * 5))\n\n            It(\"lets the user place a hold and get notified later\", func(ctx SpecContext) {\n                Expect(valjean.Hold(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Holds(ctx)).To(ContainElement(book))\n\n                By(\"when Javert returns the book\")\n                Expect(javert.Return(ctx, library, book)).To(Succeed())\n\n                By(\"it eventually informs Valjean\")\n                notification := \"Les Miserables is ready for pick up\"\n                Eventually(ctx, valjean.Notifications).Should(ContainElement(notification))\n\n                Expect(valjean.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Books(ctx)).To(ContainElement(book))\n                Expect(valjean.Holds(ctx)).To(BeEmpty())\n            }, SpecTimeout(time.Second * 10))\n        })  \n    })\n\n    When(\"the library does not have the book in question\", func() {\n        It(\"tells the reader the book is unavailable\", func(ctx SpecContext) {\n            err := valjean.Checkout(ctx, library, \"Les Miserables\")\n            Expect(err).To(MatchError(\"Les Miserables is not in the library catalog\"))\n        }, SpecTimeout(time.Second * 5))\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Force Removing All Unused Podman Images (Shell)\nDESCRIPTION: This command removes all unused images, including dangling ones and those not associated with any running or stopped container, from local storage. The `-a` flag specifies removing all unused images (not just dangling), and the `-f` flag forces the removal without an interactive confirmation prompt. The output consists of the IDs of all removed images.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-prune.1.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo podman image prune -a -f\nf3e20dc537fb04cb51672a5cb6fdf2292e61d411315549391a0d1f64e4e3097e\n324a7a3b2e0135f4226ffdd473e4099fd9e477a74230cdc35de69e84c0f9d907\n6125002719feb1ddf3030acab1df6156da7ce0e78e571e9b6e9c250424d6220c\n91e732da5657264c6f4641b8d0c4001c218ae6c1adb9dcef33ad00cafd37d8b6\ne4e5109420323221f170627c138817770fb64832da7d8fe2babd863148287fca\n77a57fa8285e9656dbb7b23d9efa837a106957409ddd702f995605af27a45ebe\n```\n\n----------------------------------------\n\nTITLE: Force Removing Unused Podman Images by Label (Shell)\nDESCRIPTION: This command forcefully removes all unused images (`-a` flag) that have the label `version=1.0`. The `--filter label=version=1.0` option targets images with the specified label key and value. The `-f` flag bypasses the confirmation prompt. The output lists the IDs of the removed images matching the label criteria.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-prune.1.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo podman image prune -a -f --filter label=version=1.0\ne813d2135f17fadeffeea8159a34cfdd4c30b98d8111364b913a91fd930643e9\n5e6572320437022e2746467ddf5b3561bf06e099e8e6361df27e0b2a7ed0b17b\n58fda2abf5042b35dfe04e5f8ee458a3cc26375bf309efb42c078b551a2055c7\n6d2bd30fe924d3414b64bd3920760617e6ced872364bc3bc6959a623252da002\n33d1c829be64a1e1d379caf4feec1f05a892c3ef7aa82c0be53d3c08a96c59c5\nf9f0a8a58c9e02a2b3250b88cc5c95b1e10245ca2c4161d19376580aaa90f55c\n1ef14d5ede80db78978b25ad677fd3e897a578c3af614e1fda608d40c8809707\n45e1482040e441a521953a6da2eca9bafc769e15667a07c23720d6e0cafc3ab2\n```\n\n----------------------------------------\n\nTITLE: Podman Service URL Format (Plaintext)\nDESCRIPTION: Defines the generic format for specifying the URL to access the remote Podman service via the `--url` option or `CONTAINER_HOST` environment variable. It includes components like schema (ssh, tcp, unix), user, password, host, port, and path.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n<schema>://[<user[:<password>]@]<host>[:<port>][<path>]\n```\n\n----------------------------------------\n\nTITLE: Adding a Bridge and Moving Interface with Netlink in Go\nDESCRIPTION: This Go snippet demonstrates how to use the netlink library to add a new bridge interface and set an existing interface (eth1) as its member. The example shows usage of constructors, default attribute settings, and the sequence of API calls needed to create software bridge interfaces and perform network configuration programmatically. Running this code requires the netlink Go package and appropriate system privileges (root access). Parameters include the bridge name (set in LinkAttrs.Name) and the slave interface name ('eth1'). Outputs/errors are reported with formatted text, and successful execution alters system networking state.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/vishvananda/netlink/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/vishvananda/netlink\"\n)\n\nfunc main() {\n    la := netlink.NewLinkAttrs()\n    la.Name = \"foo\"\n    mybridge := &netlink.Bridge{LinkAttrs: la}\n    err := netlink.LinkAdd(mybridge)\n    if err != nil  {\n        fmt.Printf(\"could not add %s: %v\\n\", la.Name, err)\n    }\n    eth1, _ := netlink.LinkByName(\"eth1\")\n    netlink.LinkSetMaster(eth1, mybridge)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Volume Content from a Tarball File in Podman\nDESCRIPTION: Demonstrates how to import content from a tarball file into a named Podman volume. The volume 'myvol' must already exist before running this command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-import.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume import myvol test.tar\n```\n\n----------------------------------------\n\nTITLE: Force Removing Podman Image and Associated Containers (Shell)\nDESCRIPTION: Demonstrates how to remove a local image using the `--force` (or `-f`) option. This forces the removal by first deleting any containers that are currently using the specified image (`imageID`).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-rmi.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman rmi --force imageID\n```\n\n----------------------------------------\n\nTITLE: Using the --annotation option in Podman container commands\nDESCRIPTION: The --annotation option allows adding key-value annotations to containers or pods. This option can be used multiple times to add different annotations.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/annotation.container.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n--annotation=key=value\n```\n\n----------------------------------------\n\nTITLE: Configuring IPC Namespace Mode in Podman Containers\nDESCRIPTION: The --ipc option sets the IPC namespace mode for a container. It offers various modes including reusing another container's IPC, using the host's IPC, creating a private namespace, or joining an existing namespace. Each mode has different implications for shared memory access and security.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/ipc.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--ipc**=*ipc*\n\nSet the IPC namespace mode for a container. The default is to create\na private IPC namespace.\n\n- \"\": Use Podman's default, defined in containers.conf.\n- **container:**_id_: reuses another container's shared memory, semaphores, and message queues\n- **host**: use the host's shared memory, semaphores, and message queues inside the container. Note: the host mode gives the container full access to local shared memory and is therefore considered insecure.\n- **none**:  private IPC namespace, with /dev/shm not mounted.\n- **ns:**_path_: path to an IPC namespace to join.\n- **private**: private IPC namespace.\n- **shareable**: private IPC namespace with a possibility to share it with other containers.\n```\n\n----------------------------------------\n\nTITLE: Defining Systemd Socket Listening Path for Podman API - Systemd Unit File - Shell\nDESCRIPTION: This configuration entry is included in a systemd socket unit file to specify the listening path for the Podman API Unix socket. The '%t' specifier is expanded by systemd to the value of the XDG_RUNTIME_DIR environment variable, customizing the socket location for the invoking user. No arguments are required beyond including this line in the appropriate .socket file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-service.1.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nListenStream=%t/podman/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Starting Podman System Service in Debug Mode\nDESCRIPTION: Shows how to start the Podman system service with debug logging enabled for detailed request tracing and execution path analysis.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/bindings/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npodman --log-level=debug system service -t 0\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Rootful Network Configuration\nDESCRIPTION: Exports the in-memory default network configuration for rootful Podman to a JSON file for customization. This allows modification of settings like DNS that aren't configurable through other means.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman network inspect podman | jq .[] > /etc/containers/networks/podman.json\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Podman unknown flag error with exit code 125\nDESCRIPTION: Example showing Podman's error handling when an unknown command-line flag is provided, resulting in exit code 125, indicating an error with Podman itself.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run --foo busybox; echo $?\nError: unknown flag: --foo\n125\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-Compatible API Access via Environment Variable - Shell\nDESCRIPTION: These commands set the DOCKER_HOST environment variable to point to the Podman Unix domain socket, enabling Docker API clients (such as docker-compose) to communicate with Podman's API service. This workflow allows tools expecting a Docker API endpoint to operate with the Podman socket by utilizing the Docker v1.40-compatible endpoint provided by Podman. The first line sets the required environment variable; the second line invokes docker-compose as an example client.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-service.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Backend with Podman - Bash\nDESCRIPTION: Demonstrates how to check the current network backend used by Podman via the CLI. This single-line command fetches and formats information about which network backend is active, which is useful when verifying migration between CNI and Netavark. Requires Podman to be installed and available in the system path.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman info --format {{.Host.NetworkBackend}}\n```\n\n----------------------------------------\n\nTITLE: Generating systemd Unit Files for Podman Pods and Containers - Bash\nDESCRIPTION: This Bash sequence demonstrates the creation of a Podman pod and two Alpine containers inside that pod, followed by the generation of systemd unit files using the Podman CLI. It showcases the relationship between pods, containers, and their respective systemd units, emphasizing that only the pod unit should be managed with systemctl. Dependencies include Podman v1.8.0 or later and a runtime compatible with systemd. Inputs are standard pod and container create commands, outputs include autogenerated .service files for the pod and its containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-generate-systemd.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ podman pod create --name systemd-pod\n$ podman create --pod systemd-pod alpine top\n$ podman create --pod systemd-pod alpine top\n$ podman generate systemd --files --name systemd-pod\n/home/user/pod-systemd-pod.service\n/home/user/container-amazing_chandrasekhar.service\n/home/user/container-jolly_shtern.service\n$ cat pod-systemd-pod.service\n# pod-systemd-pod.service\n# autogenerated by Podman 1.8.0\n# Wed Mar 09 09:52:37 CEST 2020\n\n[Unit]\nDescription=Podman pod-systemd-pod.service\nDocumentation=man:podman-generate-systemd(1)\nRequires=container-amazing_chandrasekhar.service container-jolly_shtern.service\nBefore=container-amazing_chandrasekhar.service container-jolly_shtern.service\nWants=network-online.target\nAfter=network-online.target\nRequiresMountsFor=/var/run/container/storage\n\n[Service]\nRestart=on-failure\nExecStart=/usr/bin/podman start 77a818221650-infra\nExecStop=/usr/bin/podman stop \\\n        -t 10 77a818221650-infra\nKillMode=none\nType=forking\nPIDFile=/run/user/1000/overlay-containers/ccfd5c71a088768774ca7bd05888d55cc287698dde06f475c8b02f696a25adcd/userdata/conmon.pid\n\n[Install]\nWantedBy=default.target\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Connectivity to Podman Container with curl - Shell\nDESCRIPTION: This shell command checks the functionality of the containerized HTTP server by sending an HTTP request to localhost:8080. It verifies that traffic from the host can reach the container's exposed HTTP endpoint. Dependencies include curl and a running container with the proper port mapping. Returns the HTML content of the index page or an error if connection fails.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Starting User Systemd Socket for Podman API - Systemd - Shell\nDESCRIPTION: This command initiates the user-level systemd socket for running the Podman API as a rootless service. The 'systemctl --user' subcommand ensures the activation only applies for the current user session, enabling socket-based activation of Podman's API service. No arguments beyond the standard systemd socket unit are required, and this command is intended to be run on Linux distributions with systemd support.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-service.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl --user start podman.socket\n```\n\n----------------------------------------\n\nTITLE: Copying a File from Host to Podman Machine - Bash Command Line\nDESCRIPTION: This snippet demonstrates how to use the 'podman machine cp' command to copy a single file from the host system to a running Podman virtual machine. The command requires Podman to be installed and a virtual machine (e.g., named 'podman-machine-default') to be running. Users must specify the source file path on the host and the destination path within the VM. The output confirms if the copy operation is successful.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-cp.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman machine cp ~/configuration.txt podman-machine-default:~/configuration.txt\n...\n```\n\n----------------------------------------\n\nTITLE: Merging Structs with Pointer Fields using Mergo WithoutDereference in Go\nDESCRIPTION: This complete Go program demonstrates merging two structs (`src` into `dest`) containing pointer fields (`A *string`). It utilizes `mergo.Merge` with both `mergo.WithOverride` to enable overwriting and `mergo.WithoutDereference` to ensure that the pointer variable `dest.A` itself is reassigned to point to the same memory location as `src.A`, rather than attempting to merge the underlying string values. This is necessary when the intention is to replace the pointer reference entirely.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/dario.cat/mergo/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"dario.cat/mergo\"\n)\n\ntype Foo struct {\n\tA *string\n\tB int64\n}\n\nfunc main() {\n\tfirst := \"first\"\n\tsecond := \"second\"\n\tsrc := Foo{\n\t\tA: &first,\n\t\tB: 2,\n\t}\n\n\tdest := Foo{\n\t\tA: &second,\n\t\tB: 1,\n\t}\n\n\tmergo.Merge(&dest, src, mergo.WithOverride, mergo.WithoutDereference)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Podman Info Output in JSON Format - Shell and JSON\nDESCRIPTION: This snippet executes podman info with the --format json flag, instructing Podman to return detailed system, plugin, registry, and version information as a structured JSON object. This machine-readable output is suitable for scripting, automation, or API consumption. The only dependency is Podman itself with support for JSON formatting; the command can be executed from any standard shell, and the JSON can be programmatically parsed to extract required fields. Input parameters are optional and the output will reflect real system state at execution.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-info.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman info --format json\n{\n  \"host\": {\n    \"arch\": \"amd64\",\n    \"buildahVersion\": \"1.23.0\",\n    \"cgroupManager\": \"systemd\",\n    \"cgroupVersion\": \"v2\",\n    \"cgroupControllers\": [],\n    \"conmon\": {\n      \"package\": \"conmon-2.0.29-2.fc34.x86_64\",\n      \"path\": \"/usr/bin/conmon\",\n      \"version\": \"conmon version 2.0.29, commit: \"\n    },\n    \"cpus\": 8,\n    \"distribution\": {\n      \"distribution\": \"fedora\",\n      \"version\": \"34\"\n    },\n    \"eventLogger\": \"journald\",\n    \"hostname\": \"localhost.localdomain\",\n    \"idMappings\": {\n      \"gidmap\": [\n\t{\n\t  \"container_id\": 0,\n\t  \"host_id\": 3267,\n\t  \"size\": 1\n\t},\n\t{\n\t  \"container_id\": 1,\n\t  \"host_id\": 100000,\n\t  \"size\": 65536\n\t}\n      ],\n      \"uidmap\": [\n\t{\n\t  \"container_id\": 0,\n\t  \"host_id\": 3267,\n\t  \"size\": 1\n\t},\n\t{\n\t  \"container_id\": 1,\n\t  \"host_id\": 100000,\n\t  \"size\": 65536\n\t}\n      ]\n    },\n    \"kernel\": \"5.13.13-200.fc34.x86_64\",\n    \"logDriver\": \"journald\",\n    \"memFree\": 1785753600,\n    \"memTotal\": 16401895424,\n    \"networkBackend\": \"cni\",\n    \"networkBackendInfo\": {\n      \"backend\": \"cni\",\n      \"package\": \"containernetworking-plugins-1.0.1-1.fc34.x86_64\\npodman-plugins-3.4.4-1.fc34.x86_64\",\n      \"path\": \"/usr/libexec/cni\",\n      \"dns\": {\n        \"version\": \"CNI dnsname plugin\\nversion: 1.3.1\\ncommit: unknown\",\n        \"package\": \"podman-plugins-3.4.4-1.fc34.x86_64\",\n        \"path\": \"/usr/libexec/cni/dnsname\"\n      }\n    },\n    \"ociRuntime\": {\n      \"name\": \"crun\",\n      \"package\": \"crun-1.0-1.fc34.x86_64\",\n      \"path\": \"/usr/bin/crun\",\n      \"version\": \"crun version 1.0\\ncommit: 139dc6971e2f1d931af520188763e984d6cdfbf8\\nspec: 1.0.0\\n+SYSTEMD +SELINUX +APPARMOR +CAP +SECCOMP +EBPF +CRIU +YAJL\"\n    },\n    \"os\": \"linux\",\n    \"remoteSocket\": {\n      \"path\": \"/run/user/3267/podman/podman.sock\"\n    },\n    \"serviceIsRemote\": false,\n    \"security\": {\n      \"apparmorEnabled\": false,\n      \"capabilities\": \"CAP_CHOWN,CAP_DAC_OVERRIDE,CAP_FOWNER,CAP_FSETID,CAP_KILL,CAP_NET_BIND_SERVICE,CAP_SETFCAP,CAP_SETGID,CAP_SETPCAP,CAP_SETUID\",\n      \"rootless\": true,\n      \"seccompEnabled\": true,\n      \"seccompProfilePath\": \"/usr/share/containers/seccomp.json\",\n      \"selinuxEnabled\": true\n    },\n    \"slirp4netns\": {\n      \"executable\": \"/bin/slirp4netns\",\n      \"package\": \"slirp4netns-1.1.12-2.fc34.x86_64\",\n      \"version\": \"slirp4netns version 1.1.12\\ncommit: 7a104a101aa3278a2152351a082a6df71f57c9a3\\nlibslirp: 4.4.0\\nSLIRP_CONFIG_VERSION_MAX: 3\\nlibseccomp: 2.5.0\"\n    },\n    \"pasta\": {\n      \"executable\": \"/usr/bin/passt\",\n      \"package\": \"passt-0^20221116.gace074c-1.fc34.x86_64\",\n      \"version\": \"passt 0^20221116.gace074c-1.fc34.x86_64\\nCopyright Red Hat\\nGNU Affero GPL version 3 or later \\u003chttps://www.gnu.org/licenses/agpl-3.0.html\\u003e\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\"\n    },\n    \"swapFree\": 15687475200,\n    \"swapTotal\": 16886259712,\n    \"uptime\": \"47h 17m 29.75s (Approximately 1.96 days)\",\n    \"linkmode\": \"dynamic\"\n  },\n  \"store\": {\n    \"configFile\": \"/home/dwalsh/.config/containers/storage.conf\",\n    \"containerStore\": {\n      \"number\": 9,\n      \"paused\": 0,\n      \"running\": 1,\n      \"stopped\": 8\n    },\n    \"graphDriverName\": \"overlay\",\n    \"graphOptions\": {\n\n    },\n    \"graphRoot\": \"/home/dwalsh/.local/share/containers/storage\",\n    \"graphStatus\": {\n      \"Backing Filesystem\": \"extfs\",\n      \"Native Overlay Diff\": \"true\",\n      \"Supports d_type\": \"true\",\n      \"Using metacopy\": \"false\"\n    },\n    \"imageCopyTmpDir\": \"/home/dwalsh/.local/share/containers/storage/tmp\",\n    \"imageStore\": {\n      \"number\": 5\n    },\n    \"runRoot\": \"/run/user/3267/containers\",\n    \"volumePath\": \"/home/dwalsh/.local/share/containers/storage/volumes\",\n    \"transientStore\": false\n  },\n  \"registries\": {\n    \"search\": [\n  \"registry.fedoraproject.org\",\n  \"registry.access.redhat.com\",\n  \"docker.io\",\n  \"quay.io\"\n]\n  },\n  \"plugins\": {\n    \"volume\": [\n      \"local\"\n    ],\n    \"network\": [\n      \"bridge\",\n      \"macvlan\"\n    ],\n    \"log\": [\n      \"k8s-file\",\n      \"none\",\n      \"journald\"\n    ]\n  },\n  \"version\": {\n    \"APIVersion\": \"4.0.0\",\n    \"Version\": \"4.0.0\",\n    \"GoVersion\": \"go1.16.6\",\n    \"GitCommit\": \"23677f92dd83e96d2bc8f0acb611865fb8b1a56d\",\n    \"BuiltTime\": \"Tue Sep 14 15:45:22 2021\",\n    \"Built\": 1631648722,\n    \"OsArch\": \"linux/amd64\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": {\n    \"arch\": \"amd64\",\n    \"buildahVersion\": \"1.23.0\",\n    \"cgroupManager\": \"systemd\",\n    \"cgroupVersion\": \"v2\",\n    \"cgroupControllers\": [],\n    \"conmon\": {\n      \"package\": \"conmon-2.0.29-2.fc34.x86_64\",\n      \"path\": \"/usr/bin/conmon\",\n      \"version\": \"conmon version 2.0.29, commit: \"\n    },\n    \"cpus\": 8,\n    \"distribution\": {\n      \"distribution\": \"fedora\",\n      \"version\": \"34\"\n    },\n    \"eventLogger\": \"journald\",\n    \"hostname\": \"localhost.localdomain\",\n    \"idMappings\": {\n      \"gidmap\": [\n\t{\n\t  \"container_id\": 0,\n\t  \"host_id\": 3267,\n\t  \"size\": 1\n\t},\n\t{\n\t  \"container_id\": 1,\n\t  \"host_id\": 100000,\n\t  \"size\": 65536\n\t}\n      ],\n      \"uidmap\": [\n\t{\n\t  \"container_id\": 0,\n\t  \"host_id\": 3267,\n\t  \"size\": 1\n\t},\n\t{\n\t  \"container_id\": 1,\n\t  \"host_id\": 100000,\n\t  \"size\": 65536\n\t}\n      ]\n    },\n    \"kernel\": \"5.13.13-200.fc34.x86_64\",\n    \"logDriver\": \"journald\",\n    \"memFree\": 1785753600,\n    \"memTotal\": 16401895424,\n    \"networkBackend\": \"cni\",\n    \"networkBackendInfo\": {\n      \"backend\": \"cni\",\n      \"package\": \"containernetworking-plugins-1.0.1-1.fc34.x86_64\\npodman-plugins-3.4.4-1.fc34.x86_64\",\n      \"path\": \"/usr/libexec/cni\",\n      \"dns\": {\n        \"version\": \"CNI dnsname plugin\\nversion: 1.3.1\\ncommit: unknown\",\n        \"package\": \"podman-plugins-3.4.4-1.fc34.x86_64\",\n        \"path\": \"/usr/libexec/cni/dnsname\"\n      }\n    },\n    \"ociRuntime\": {\n      \"name\": \"crun\",\n      \"package\": \"crun-1.0-1.fc34.x86_64\",\n      \"path\": \"/usr/bin/crun\",\n      \"version\": \"crun version 1.0\\ncommit: 139dc6971e2f1d931af520188763e984d6cdfbf8\\nspec: 1.0.0\\n+SYSTEMD +SELINUX +APPARMOR +CAP +SECCOMP +EBPF +CRIU +YAJL\"\n    },\n    \"os\": \"linux\",\n    \"remoteSocket\": {\n      \"path\": \"/run/user/3267/podman/podman.sock\"\n    },\n    \"serviceIsRemote\": false,\n    \"security\": {\n      \"apparmorEnabled\": false,\n      \"capabilities\": \"CAP_CHOWN,CAP_DAC_OVERRIDE,CAP_FOWNER,CAP_FSETID,CAP_KILL,CAP_NET_BIND_SERVICE,CAP_SETFCAP,CAP_SETGID,CAP_SETPCAP,CAP_SETUID\",\n      \"rootless\": true,\n      \"seccompEnabled\": true,\n      \"seccompProfilePath\": \"/usr/share/containers/seccomp.json\",\n      \"selinuxEnabled\": true\n    },\n    \"slirp4netns\": {\n      \"executable\": \"/bin/slirp4netns\",\n      \"package\": \"slirp4netns-1.1.12-2.fc34.x86_64\",\n      \"version\": \"slirp4netns version 1.1.12\\ncommit: 7a104a101aa3278a2152351a082a6df71f57c9a3\\nlibslirp: 4.4.0\\nSLIRP_CONFIG_VERSION_MAX: 3\\nlibseccomp: 2.5.0\"\n    },\n    \"pasta\": {\n      \"executable\": \"/usr/bin/passt\",\n      \"package\": \"passt-0^20221116.gace074c-1.fc34.x86_64\",\n      \"version\": \"passt 0^20221116.gace074c-1.fc34.x86_64\\nCopyright Red Hat\\nGNU Affero GPL version 3 or later \\u003chttps://www.gnu.org/licenses/agpl-3.0.html\\u003e\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\"\n    },\n    \"swapFree\": 15687475200,\n    \"swapTotal\": 16886259712,\n    \"uptime\": \"47h 17m 29.75s (Approximately 1.96 days)\",\n    \"linkmode\": \"dynamic\"\n  },\n  \"store\": {\n    \"configFile\": \"/home/dwalsh/.config/containers/storage.conf\",\n    \"containerStore\": {\n      \"number\": 9,\n      \"paused\": 0,\n      \"running\": 1,\n      \"stopped\": 8\n    },\n    \"graphDriverName\": \"overlay\",\n    \"graphOptions\": {\n\n    },\n    \"graphRoot\": \"/home/dwalsh/.local/share/containers/storage\",\n    \"graphStatus\": {\n      \"Backing Filesystem\": \"extfs\",\n      \"Native Overlay Diff\": \"true\",\n      \"Supports d_type\": \"true\",\n      \"Using metacopy\": \"false\"\n    },\n    \"imageCopyTmpDir\": \"/home/dwalsh/.local/share/containers/storage/tmp\",\n    \"imageStore\": {\n      \"number\": 5\n    },\n    \"runRoot\": \"/run/user/3267/containers\",\n    \"volumePath\": \"/home/dwalsh/.local/share/containers/storage/volumes\",\n    \"transientStore\": false\n  },\n  \"registries\": {\n    \"search\": [\n  \"registry.fedoraproject.org\",\n  \"registry.access.redhat.com\",\n  \"docker.io\",\n  \"quay.io\"\n]\n  },\n  \"plugins\": {\n    \"volume\": [\n      \"local\"\n    ],\n    \"network\": [\n      \"bridge\",\n      \"macvlan\"\n    ],\n    \"log\": [\n      \"k8s-file\",\n      \"none\",\n      \"journald\"\n    ]\n  },\n  \"version\": {\n    \"APIVersion\": \"4.0.0\",\n    \"Version\": \"4.0.0\",\n    \"GoVersion\": \"go1.16.6\",\n    \"GitCommit\": \"23677f92dd83e96d2bc8f0acb611865fb8b1a56d\",\n    \"BuiltTime\": \"Tue Sep 14 15:45:22 2021\",\n    \"Built\": 1631648722,\n    \"OsArch\": \"linux/amd64\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pruning Unused Volumes with --volumes in Bash\nDESCRIPTION: Illustrates adding the `--volumes` flag to the `podman system prune` command. By default, volumes are preserved; this flag instructs the command to also remove volumes that are not currently associated with any container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-prune.1.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npodman system prune --volumes\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Variables in Gorilla Mux Handlers in Go\nDESCRIPTION: This snippet demonstrates how to retrieve URL variables within a handler function using the mux.Vars() function. It shows how to access the 'category' variable from the request.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc ArticlesCategoryHandler(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    w.WriteHeader(http.StatusOK)\n    fmt.Fprintf(w, \"Category: %v\\n\", vars[\"category\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing YAML Serialization and Deserialization in Go\nDESCRIPTION: This example demonstrates how to use the YAML package to unmarshal YAML data into a Go struct with custom tags, marshal it back to YAML, and perform the same operations with a dynamic map. It shows struct tag usage for field renaming and flow style control.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/gopkg.in/yaml.v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Mounted Images in JSON Format with Podman - Bash/Shell & JSON\nDESCRIPTION: Illustrates how to obtain a JSON-formatted list of all mounted images using podman image mount with the --format json flag. The command outputs structured details for each mounted image, including IDs, names, repositories, and mountpoints. This is useful for scripting and programmatic consumption of mount information. Requires Podman and outputs valid JSON.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-mount.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npodman image mount --format json\n[\n {\n  \"id\": \"00ff39a8bf19f810a7e641f7eb3ddc47635913a19c4996debd91fafb6b379069\",\n  \"Names\": [\n   \"sha256:58de585a231aca14a511347bc85b912a6f000159b49bc2b0582032911e5d3a6c\"\n  ],\n  \"Repositories\": [\n   \"registry.fedoraproject.org/fedora:latest\"\n  ],\n  \"mountpoint\": \"/var/lib/containers/storage/overlay/0ccfac04663bbe8813b5f24502ee0b7371ce5bf3c5adeb12e4258d191c2cf7bc/merged\"\n },\n {\n  \"id\": \"bcc2dc9a261774ad25a15e07bb515f9b77424266abf2a1252ec7bcfed1dd0ac2\",\n  \"Names\": [\n   \"sha256:d5f260b2e51b3ee9d05de1c31d261efc9af28e7d2d47cedf054c496d71424d63\"\n  ],\n  \"Repositories\": [\n   \"registry.access.redhat.com/ubi8-init:latest\"\n  ],\n  \"mountpoint\": \"/var/lib/containers/storage/overlay/d66b58e3391ea8ce4c81316c72e22b332618f2a28b461a32ed673e8998cdaeb8/merged\"\n }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n  \"id\": \"00ff39a8bf19f810a7e641f7eb3ddc47635913a19c4996debd91fafb6b379069\",\n  \"Names\": [\n   \"sha256:58de585a231aca14a511347bc85b912a6f000159b49bc2b0582032911e5d3a6c\"\n  ],\n  \"Repositories\": [\n   \"registry.fedoraproject.org/fedora:latest\"\n  ],\n  \"mountpoint\": \"/var/lib/containers/storage/overlay/0ccfac04663bbe8813b5f24502ee0b7371ce5bf3c5adeb12e4258d191c2cf7bc/merged\"\n },\n {\n  \"id\": \"bcc2dc9a261774ad25a15e07bb515f9b77424266abf2a1252ec7bcfed1dd0ac2\",\n  \"Names\": [\n   \"sha256:d5f260b2e51b3ee9d05de1c31d261efc9af28e7d2d47cedf054c496d71424d63\"\n  ],\n  \"Repositories\": [\n   \"registry.access.redhat.com/ubi8-init:latest\"\n  ],\n  \"mountpoint\": \"/var/lib/containers/storage/overlay/d66b58e3391ea8ce4c81316c72e22b332618f2a28b461a32ed673e8998cdaeb8/merged\"\n }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Afero for Testing in Go\nDESCRIPTION: This snippet demonstrates how to use Afero's MemMapFs for testing, creating a blank slate memory backend for each test to ensure order independence.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc TestExist(t *testing.T) {\n\tappFS := afero.NewMemMapFs()\n\t// create test files and directories\n\tappFS.MkdirAll(\"src/a\", 0755)\n\tafero.WriteFile(appFS, \"src/a/b\", []byte(\"file b\"), 0644)\n\tafero.WriteFile(appFS, \"src/c\", []byte(\"file c\"), 0644)\n\tname := \"src/c\"\n\t_, err := appFS.Stat(name)\n\tif os.IsNotExist(err) {\n\t\tt.Errorf(\"file \\\"%s\\\" does not exist.\\n\", name)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Rootless Network Namespace with podman unshare\nDESCRIPTION: This example demonstrates using the `--rootless-netns` flag with `podman unshare` to join the specific network namespace used for rootless container networking (netavark). It then runs `ip addr` within this namespace to show the network interfaces and IP addresses, useful for troubleshooting network connectivity to rootless containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-unshare.1.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ podman unshare --rootless-netns ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: tap0: <BROADCAST,UP,LOWER_UP> mtu 65520 qdisc fq_codel state UNKNOWN group default qlen 1000\n    link/ether aa:8c:0b:73:98:f6 brd ff:ff:ff:ff:ff:ff\n    inet 10.0.2.100/24 brd 10.0.2.255 scope global tap0\n       valid_lft forever preferred_lft forever\n    inet6 fd00::a88c:bff:fe73:98f6/64 scope global dynamic mngtmpaddr\n       valid_lft 86389sec preferred_lft 14389sec\n    inet6 fe80::a88c:bff:fe73:98f6/64 scope link \n       valid_lft forever preferred_lft forever\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Signature Verification Policy in Podman\nDESCRIPTION: JSON configuration file that defines signature verification policies for container images, specifying which registries require signed images and where to find verification keys.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default\": [{ \"type\": \"insecureAcceptAnything\" }],\n  \"transports\": {\n    \"docker\": {\n      \"localhost:5000\": [\n        {\n          \"type\": \"signedBy\",\n          \"keyType\": \"GPGKeys\",\n          \"keyPath\": \"/tmp/key.gpg\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Prune Operation without Confirmation in Bash\nDESCRIPTION: Shows how to use the `--force` or `-f` flag with `podman system prune`. This option bypasses the confirmation prompt, allowing the prune operation to proceed immediately without user interaction.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-prune.1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npodman system prune --force\n```\n\n----------------------------------------\n\nTITLE: Quiet Installation of Podman on Windows\nDESCRIPTION: This command performs a quiet, non-interactive installation of Podman on Windows. It requires administrator privileges and allows specifying the machine provider (WSL or Hyper-V).\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\ncontrib\\win-installer\\podman-5.1.0-dev-setup.exe /install `\n                      /log podman-setup.log /quiet `\n                      MachineProvider=wsl\n```\n\n----------------------------------------\n\nTITLE: Examining Podman API Socket Configuration in Systemd\nDESCRIPTION: The systemd socket unit configuration for Podman's API service, defining a Unix socket that clients can connect to for accessing the Podman API.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_1\n\nLANGUAGE: systemd unit\nCODE:\n```\n[Unit]\nDescription=Podman API Socket\nDocumentation=man:podman-system-service(1)\n\n[Socket]\nListenStream=%t/podman/podman.sock\nSocketMode=0660\n\n[Install]\nWantedBy=sockets.target\n```\n\n----------------------------------------\n\nTITLE: Streaming Tar Archive into Container via podman cp and STDIN - Shell\nDESCRIPTION: Streams a tar archive via STDIN into a container's file using podman cp with - as the source. Useful for direct transfer of compressed data into a container, this requires a valid tar file locally and an accessible container. Inputs: the archive file (myfiles.tar.gz) piped into podman cp with destination path in the container; output: archive placed at desired container path.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-cp.1.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npodman cp - containerID:/myfiles.tar.gz < myfiles.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Defining Security Options for Podman Builds in Markdown\nDESCRIPTION: This snippet outlines various security options that can be used with the --security-opt flag in Podman build and farm build commands. It includes options for AppArmor confinement, SELinux labels, privilege management, and seccomp filtering.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/security-opt.image.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--security-opt**=*option*\n\nSecurity Options\n\n- `apparmor=unconfined` : Turn off apparmor confinement for the container\n- `apparmor=alternate-profile` : Set the apparmor confinement profile for the\ncontainer\n\n- `label=user:USER`     : Set the label user for the container processes\n- `label=role:ROLE`     : Set the label role for the container processes\n- `label=type:TYPE`     : Set the label process type for the container processes\n- `label=level:LEVEL`   : Set the label level for the container processes\n- `label=filetype:TYPE` : Set the label file type for the container files\n- `label=disable`       : Turn off label separation for the container\n- `no-new-privileges`   : Disable container processes from gaining additional privileges\n\n- `seccomp=unconfined` : Turn off seccomp confinement for the container\n- `seccomp=profile.json` :  JSON file to be used as the seccomp filter for the container.\n```\n\n----------------------------------------\n\nTITLE: Setting Custom DNS Options in Podman Container Commands\nDESCRIPTION: The --dns-option flag allows specifying custom DNS options when creating or running Podman containers. This option cannot be used when the --network flag is set to 'none' or 'container:id'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/dns-option.container.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--dns-option=*option*\n```\n\n----------------------------------------\n\nTITLE: Running Nginx Container with Podman on Windows\nDESCRIPTION: This command runs an Nginx container using Podman, mapping port 8080 on the host to port 80 in the container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/qemu-remote-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\npodman run -d --rm -p 8080:80 nginx\n```\n\n----------------------------------------\n\nTITLE: Migrating Containers Using podman system migrate Command - Podman - CLI\nDESCRIPTION: This example demonstrates direct usage of the 'podman system migrate' command. The CLI snippet provides the invocation format required to start the migration process for containers in Podman. The only dependency is Podman installed and available in the system's $PATH, and it may need appropriate permissions to manage containers. Users provide optional arguments as needed, and the output is container migration as documented.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-migrate.1.md#2025-04-23_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\npodman system migrate [options]\n```\n\n----------------------------------------\n\nTITLE: Running an HTTPD Container with Port Forwarding (PowerShell)\nDESCRIPTION: Launches an Apache HTTPD server container in detached mode (`-d`), automatically removes it on exit (`--rm`), maps host port 8080 to container port 80 (`-p 8080:80`), and names the container `httpd`. This command is executed from PowerShell.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User> podman run --rm -d -p 8080:80 --name httpd docker.io/library/httpd\n```\n\n----------------------------------------\n\nTITLE: Starting and Using the Podman Socket with SystemD\nDESCRIPTION: Commands to start the Podman socket using systemd and verify its existence, followed by setting up docker-compose to use the Podman socket through the DOCKER_HOST environment variable.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ systemctl --user start podman.socket\n$ ls $XDG_RUNTIME_DIR/podman/podman.sock\n/run/user/1000/podman/podman.sock\n$\n```\n\n----------------------------------------\n\nTITLE: Generating a Systemd Unit File with the --new Flag (Shell/Systemd)\nDESCRIPTION: This example demonstrates generating a systemd unit file using the `--new` flag for a container identified by its ID (`bb310a0780ae`). The `--new` flag modifies the unit file to create the container (`podman run`) on service start (`ExecStart`) and remove it (`podman rm`) after stopping (`ExecStopPost`). The `--files` option saves the output to a file named `container-busy_moser.service` instead of printing to stdout, and `--name` uses the container name in the description. This approach creates portable unit files not tied to pre-existing containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-generate-systemd.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo podman generate systemd --new --files --name bb310a0780ae\n```\n\nLANGUAGE: systemd\nCODE:\n```\n# container-busy_moser.service\n# autogenerated by Podman 1.8.3\n# Fri Apr  3 09:40:47 EDT 2020\n\n[Unit]\nDescription=Podman container-busy_moser.service\nDocumentation=man:podman-generate-systemd(1)\nWants=network-online.target\nAfter=network-online.target\nRequiresMountsFor=/var/run/container/storage\n\n[Service]\nEnvironment=PODMAN_SYSTEMD_UNIT=%n\nRestart=on-failure\nExecStartPre=/bin/rm -f %t/%n-pid %t/%n-cid\nExecStart=/usr/local/bin/podman run \\\n        --conmon-pidfile %t/%n-pid \\\n\t--cidfile %t/%n-cid \\\n\t--cgroups=no-conmon \\\n\t-d \\\n\t-dit alpine\nExecStop=/usr/local/bin/podman stop \\\n        --ignore \\\n        --cidfile %t/%n-cid -t 10\nExecStopPost=/usr/local/bin/podman rm \\\n        --ignore \\\n        -f \\\n\t--cidfile %t/%n-cid\nPIDFile=%t/%n-pid\nKillMode=none\nType=forking\n\n[Install]\nWantedBy=default.target\n```\n\n----------------------------------------\n\nTITLE: Checking for an Existing Podman Network using Shell\nDESCRIPTION: This example demonstrates using the `podman network exists` command to verify the presence of a network named 'net1'. The subsequent `echo $?` command checks the exit status, which is `0`, indicating the network exists. This requires `podman` to be installed and configured, and a network named 'net1' must exist.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-exists.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman network exists net1\n$ echo $?\n0\n```\n\n----------------------------------------\n\nTITLE: Exporting a Named Podman Volume to a Tar File (Shell)\nDESCRIPTION: This shell command demonstrates how to export the contents of a Podman volume named 'myvol' into a tar archive file named 'myvol.tar' located in the current directory using the `podman volume export` command with the `--output` flag. It requires Podman to be installed and the volume 'myvol' to exist.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-export.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman volume export myvol --output myvol.tar\n\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Container with Podman Go Bindings\nDESCRIPTION: Uses Podman Go bindings to inspect a container named 'foobar' and print its ID. Demonstrates using InspectOptions with the WithSize option to include size information.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/bindings/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/containers/podman/v5/pkg/bindings\"\n\t\"github.com/containers/podman/v5/pkg/bindings/containers\"\n)\n\nfunc main() {\n\tconn, err := bindings.NewConnection(context.Background(), \"unix:///run/podman/podman.sock\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\tinspectData, err := containers.Inspect(conn, \"foobar\", new(containers.InspectOptions).WithSize(true))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\t// Print the container ID\n\tfmt.Println(inspectData.ID)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for an Existing Image with podman image exists in Shell\nDESCRIPTION: This example demonstrates using `podman image exists` to check for an image named 'webclient' which is present in local storage. The subsequent `echo $?` command shows the exit code is 0, indicating the image was successfully found.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-exists.1.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ podman image exists webclient\n$ echo $?\n0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key-Value Pairs in BoltDB using Go\nDESCRIPTION: This snippet demonstrates how to retrieve a value for a given key using the Bucket.Get() function within a database view transaction.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\tv := b.Get([]byte(\"answer\"))\n\tfmt.Printf(\"The answer is: %s\\n\", v)\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Using --entrypoint Option in Podman\nDESCRIPTION: The --entrypoint option allows overriding the default ENTRYPOINT from a container image. It can accept either a simple command string or a JSON array format for commands with arguments. This option changes the default behavior of the container by specifying what executable to run when the container starts.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/entrypoint.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--entrypoint**=*\"command\"* | *'[\"command\", \"arg1\", ...]'*\n```\n\n----------------------------------------\n\nTITLE: Unpausing a Pod by Name Using Podman - CLI\nDESCRIPTION: Demonstrates how to unpause a paused pod using the pod's name with the Podman CLI. Requires that Podman is installed and the target pod exists and is paused. The first argument is the pod's name (e.g., 'mywebserverpod'). The command outputs success or error status, unpausing all processes in all containers within the named pod.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod-unpause.1.md#2025-04-23_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\npodman pod unpause mywebserverpod\n```\n\n----------------------------------------\n\nTITLE: Committing Image with Default Tag - Podman CLI Bash\nDESCRIPTION: This snippet demonstrates committing a container to an image using podman commit without specifying an explicit image name or tag, resulting in the image being labeled with default values. Output: the image ID. Dependencies: podman, existing container (containerID).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-commit.1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ podman commit containerID\ne3ce4d93051ceea088d1c242624d659be32cf1667ef62f1d16d6b60193e2c7a8\n```\n\n----------------------------------------\n\nTITLE: Mounting S3 Bucket with s3fs - Shell\nDESCRIPTION: This shell command mounts an S3 bucket at the given prefix to /mnt using s3fs, specifying FUSE options 'use_xattr' and a specific endpoint for the S3 API. Requires s3fs-fuse, appropriate AWS credentials, and FUSE support on the host. Output: bucket contents visible at /mnt.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ s3fs -o use_xattr,endpoint=aq-central-1 bucket:/prefix /mnt\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux Labels for Podman Containers/Pods\nDESCRIPTION: These options set various SELinux labels for processes and files within Podman containers or pods. Labels can be set for user, role, type, level, and file type. Label separation can also be disabled.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/security-opt.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt label=user:USER\n```\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt label=role:ROLE\n```\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt label=type:TYPE\n```\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt label=level:LEVEL\n```\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt label=filetype:TYPE\n```\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt label=disable\n```\n\n----------------------------------------\n\nTITLE: Listing Podman Farms using CLI\nDESCRIPTION: This example demonstrates the usage of the `podman farm list` command in a shell environment. It shows the command being executed and the resulting tabular output, listing the Name, Connections, Default status, and ReadWrite status for each configured farm.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-farm-list.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman farm list\nName        Connections  Default     ReadWrite\nfarm1       [f38 f37]    false       true\nfarm2       [f37]        true        true\n```\n\n----------------------------------------\n\nTITLE: Checking for an Existing Pod with Podman CLI\nDESCRIPTION: This example demonstrates checking for a pod named 'web' that exists in local storage using `podman pod exists`. The command is followed by `echo $?` to display the exit status, which is `0`, confirming the pod's presence.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod-exists.1.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo podman pod exists web; echo $?\n0\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Logrus Logger Instance - Go\nDESCRIPTION: This Go example demonstrates creation of an independent Logrus logger instance with custom output settings. Instead of using the package-level logger, the code creates a new logger object, optionally directs output to a file, and logs a message with attached fields. Dependencies are Logrus and standard library packages, and the output location can be any io.Writer. Inputs are calls to WithFields; output is structured logs directed as configured.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n  \"os\"\\n  \"github.com/sirupsen/logrus\"\\n)\\n\\n// Create a new instance of the logger. You can have any number of instances.\\nvar log = logrus.New()\\n\\nfunc main() {\\n  // The API for setting attributes is a little different than the package level\\n  // exported logger. See Godoc.\\n  log.Out = os.Stdout\\n\\n  // You could set this to any `io.Writer` such as a file\\n  // file, err := os.OpenFile(\"logrus.log\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)\\n  // if err == nil {\\n  //  log.Out = file\\n  // } else {\\n  //  log.Info(\"Failed to log to file, using default stderr\")\\n  // }\\n\\n  log.WithFields(logrus.Fields{\\n    \"animal\": \"walrus\",\\n    \"size\":   10,\\n  }).Info(\"A group of walrus emerges from the ocean\")\\n}\n```\n\n----------------------------------------\n\nTITLE: Writing New Host Entries to known_hosts File in Go\nDESCRIPTION: This Go snippet illustrates a custom ssh.HostKeyCallback function that mimics OpenSSH's StrictHostKeyChecking=no or ask, by allowing unknown hosts but adding them to the known_hosts file automatically using github.com/skeema/knownhosts. The callback checks if the host is known, distinguishes changed keys as a possible attack, and writes new entries to known_hosts when needed. It uses the NewDB constructor for improved host recognition, and writes with knownhosts.WriteKnownHost. Inputs include ssh host string, known_hosts path, and connection parameters; outputs are modifications to the known_hosts file and alterations in ClientConfig. Requires golang.org/x/crypto/ssh, github.com/skeema/knownhosts, os, net, fmt, and log packages. Ensure file permissions allow writes, and note that accepting unknown hosts may be insecure.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/skeema/knownhosts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nsshHost := \"yourserver.com:22\"\nkhPath := \"/home/myuser/.ssh/known_hosts\"\nkh, err := knownhosts.NewDB(khPath)\nif err != nil {\n\tlog.Fatal(\"Failed to read known_hosts: \", err)\n}\n\n// Create a custom permissive hostkey callback which still errors on hosts\n// with changed keys, but allows unknown hosts and adds them to known_hosts\ncb := ssh.HostKeyCallback(func(hostname string, remote net.Addr, key ssh.PublicKey) error {\n\tinnerCallback := kh.HostKeyCallback()\n\terr := innerCallback(hostname, remote, key)\n\tif knownhosts.IsHostKeyChanged(err) {\n\t\treturn fmt.Errorf(\"REMOTE HOST IDENTIFICATION HAS CHANGED for host %s! This may indicate a MitM attack.\", hostname)\n\t} else if knownhosts.IsHostUnknown(err) {\n\t\tf, ferr := os.OpenFile(khPath, os.O_APPEND|os.O_WRONLY, 0600)\n\t\tif ferr == nil {\n\t\t\tdefer f.Close()\n\t\t\tferr = knownhosts.WriteKnownHost(f, hostname, remote, key)\n\t\t}\n\t\tif ferr == nil {\n\t\t\tlog.Printf(\"Added host %s to known_hosts\\n\", hostname)\n\t\t} else {\n\t\t\tlog.Printf(\"Failed to add host %s to known_hosts: %v\\n\", hostname, ferr)\n\t\t}\n\t\treturn nil // permit previously-unknown hosts (warning: may be insecure)\n\t}\n\treturn err\n})\n\nconfig := &ssh.ClientConfig{\n\tUser:              \"myuser\",\n\tAuth:              []ssh.AuthMethod{ /* ... */ },\n\tHostKeyCallback:   cb,\n\tHostKeyAlgorithms: kh.HostKeyAlgorithms(sshHost),\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing Container While Committing Image - Podman CLI Bash\nDESCRIPTION: This example shows how to pause a running container during podman commit by using the --pause=true flag with -q (quiet). It ensures the container's state does not change during commit. Dependencies: podman, existing container. The command outputs only the new image ID.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-commit.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ podman commit -q --pause=true containerID image-committed\ne3ce4d93051ceea088d1c242624d659be32cf1667ef62f1d16d6b60193e2c7a8\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Marshal/Unmarshal in Go\nDESCRIPTION: Shows how to marshal and unmarshal YAML data using struct tags and the yaml package. Demonstrates basic Person struct serialization.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"` // Affects YAML field names too.\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\t// Marshal a Person struct to YAML.\n\tp := Person{\"John\", 30}\n\ty, err := yaml.Marshal(p)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\n\t// Unmarshal the YAML back into a Person struct.\n\tvar p2 Person\n\terr = yaml.Unmarshal(y, &p2)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(p2)\n\t/* Output:\n\t{John 30}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Using Imagebuilder Go Library for Custom Container Image Builds (Go)\nDESCRIPTION: This Go snippet demonstrates how to open a Dockerfile, configure a ClientExecutor from the Imagebuilder library, and run a build operation programmatically. It manages standard output for logging, allows automatic image pulling, and sets important parameters like build context, output tag, and authentication functions. It exhibits correct resource cleanup workflows and works with optional build arguments. Dependencies include the Imagebuilder Go library and typical Go runtime support for file and I/O operations. Input is a Dockerfile on disk with user-supplied build ARGs; output is a finalized OCI-compatible image tagged locally. Limitations include requiring Go and the Imagebuilder library, and appropriate permissions to access Docker or Podman storage.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/openshift/imagebuilder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nf, err := os.Open(\"path/to/Dockerfile\")\nif err != nil {\n\treturn err\n}\ndefer f.Close()\n\ne := builder.NewClientExecutor(o.Client)\ne.Out, e.ErrOut = os.Stdout, os.Stderr\ne.AllowPull = true\ne.Directory = \"context/directory\"\ne.Tag = \"name/of-image:and-tag\"\ne.AuthFn = nil // ... pass a function to retrieve authorization info\ne.LogFn = func(format string, args ...interface{}) {\n\tfmt.Fprintf(e.ErrOut, \"--> %s\\n\", fmt.Sprintf(format, args...))\n}\n\nbuildErr := e.Build(f, map[string]string{\"arg1\":\"value1\"})\nif err := e.Cleanup(); err != nil {\n\tfmt.Fprintf(e.ErrOut, \"error: Unable to clean up build: %v\\n\", err)\n}\n\nreturn buildErr\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Podman Secrets using Shell\nDESCRIPTION: This shell command demonstrates how to remove two specific secrets, named `mysecret1` and `mysecret2`, using the `podman secret rm` command. It requires Podman to be installed and the specified secrets to exist (unless the `--ignore` flag is used). The command lists the names of the secrets to be removed as arguments.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-secret-rm.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman secret rm mysecret1 mysecret2\n```\n\n----------------------------------------\n\nTITLE: Including Common Options in Podman Documentation\nDESCRIPTION: Demonstrates how to include common option files in Podman man pages using the @@option mechanism, which is processed by the markdown-preprocess tool during documentation build.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@@option foo           ! includes options/foo.md\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Bucket in BoltDB using Go\nDESCRIPTION: This code shows how to retrieve an existing bucket using the Tx.Bucket() function within a database update transaction. It also demonstrates error handling if the bucket doesn't exist.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ndb.Update(func(tx *bolt.Tx) error {\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\tif b == nil {\n\t\treturn errors.New(\"bucket does not exist\")\n\t}\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting a Container Filesystem to STDOUT and Redirecting Output - Podman CLI - Shell\nDESCRIPTION: Illustrates the use of podman export to write the container's filesystem archive to STDOUT, which is then redirected to a local file using standard shell redirection. This approach can be useful for scripting or piping the tarball to other processes. Dependencies include an installed Podman CLI and a valid container ID. The main parameter is the container ID, with the resulting tar archive written to the specified output location.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-export.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman export 883504668ec465463bc0fe7e63d53154ac3b696ea8d7b233748918664ea90e57 > redis-container.tar\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting a systemd-Managed Standalone Container with Podman and systemctl - Bash\nDESCRIPTION: This snippet shows using Podman to create an Alpine container, then starting it through its generated systemd unit file with systemctl. The process demonstrates how systemctl start results in a fresh container instance rather than acting on an existing one. Inputs are container name and image; outputs reflect container and service states. Podman and systemd integration is required.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-generate-systemd.1.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Enable the service.\n\n$ sudo podman ps -a\nCONTAINER ID  IMAGE                            COMMAND  CREATED        STATUS     PORTS  NAMES\nbb310a0780ae  docker.io/library/alpine:latest  /bin/sh  2 minutes ago  Created           busy_moser\n$ sudo systemctl start container-busy_moser.service\n$ sudo podman ps -a\nCONTAINER ID  IMAGE                            COMMAND  CREATED        STATUS        PORTS      NAMES\n772df2f8cf3b  docker.io/library/alpine:latest  /bin/sh  1 second ago   Up 1 second              distracted_albattani\nbb310a0780ae  docker.io/library/alpine:latest  /bin/sh  3 minutes ago  Created                  busy_moser\n```\n\n----------------------------------------\n\nTITLE: Assembling and Pushing Multi-Arch Manifest from Separate Images - Shell\nDESCRIPTION: This snippet shows how to combine separately built, architecture-specific images into a single manifest list using Podman CLI and then push the manifest. It defines a repository, creates a manifest, adds each architecture-specific image via a loop, and pushes the manifest list with `--all` to ensure all arches are included. Main dependency is Podman CLI with images already available at the specified registry. Input is a series of image tags; output is a pushed multi-arch manifest. Limitation: argument order to `add` is significant, and the `--all` flag is mandatory for a complete push.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-manifest.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ REPO=example.com/example/shazam\n$ podman manifest create $REPO:latest\n$ for IMGTAG in amd64 s390x ppc64le arm64; do \\\n          podman manifest add $REPO:latest docker://$REPO:IMGTAG; \\\n      done\n$ podman manifest push --all $REPO:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Pasta Network with Custom Interface and Options in Podman\nDESCRIPTION: Example of using the --network option with pasta to set a custom interface name and network configuration, similar to slirp4netns defaults but with Podman overrides.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/network.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npasta:-I,tap0,--ipv4-only,-a,10.0.2.0,-n,24,-g,10.0.2.2,--dns-forward,10.0.2.3,--no-ndp,--no-dhcpv6,--no-dhcp\n```\n\n----------------------------------------\n\nTITLE: Mounting S3 Bucket with mount(8) and s3fs - Shell\nDESCRIPTION: This command mounts an S3 bucket at /mnt using the standard mount utility for FUSE filesystems, with technical options to match s3fs usage ('use_xattr', endpoint). Prereqs: s3fs-fuse installed, mount(8) available. Equivalent to previous s3fs-only command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ mount -t fuse.s3fs -o use_xattr,endpoint=aq-central-1 bucket:/prefix /mnt\n```\n\n----------------------------------------\n\nTITLE: Performing Quick Consistency Check with Podman CLI - Shell\nDESCRIPTION: This shell command demonstrates how to quickly perform a consistency check and repair on Podman-managed images and containers, using the --quick, --repair, and --force flags. It requires Podman to be installed and available via the PATH. The --quick flag skips time-consuming checks, --repair attempts to fix detected issues unless they're in use, and --force aggressively removes orphaned or dependent containers. Inputs are command-line flags; output is the system console, reporting results. Some errors may go undetected due to the quick check limitation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-check.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman system check --quick --repair --force\n```\n\n----------------------------------------\n\nTITLE: Range Scan in BoltDB using Go\nDESCRIPTION: This code demonstrates how to perform a range scan, useful for querying a specific date range when using sortable time encoding like RFC3339.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\t// Assume our events bucket exists and has RFC3339 encoded time keys.\n\tc := tx.Bucket([]byte(\"Events\")).Cursor()\n\n\t// Our time range spans the 90's decade.\n\tmin := []byte(\"1990-01-01T00:00:00Z\")\n\tmax := []byte(\"2000-01-01T00:00:00Z\")\n\n\t// Iterate over the 90's.\n\tfor k, v := c.Seek(min); k != nil && bytes.Compare(k, max) <= 0; k, v = c.Next() {\n\t\tfmt.Printf(\"%s: %s\\n\", k, v)\n\t}\n\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NOTIFY_SOCKET Handling in Podman Containers\nDESCRIPTION: Specifies how Podman should handle the NOTIFY_SOCKET when creating or running containers with systemd integration. Options include 'container', 'conmon', 'healthy', and 'ignore', each with different behaviors for proxying the socket and sending READY notifications.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sdnotify.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--sdnotify**=**container** | *conmon* | *healthy* | *ignore*\n```\n\n----------------------------------------\n\nTITLE: Running a Rootful Container with Port Mapping\nDESCRIPTION: Runs a containerized web server as root with port mapping. The container's port 80 is mapped to the host's port 8080, making the web server accessible from outside the host.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n(rootful) $ sudo podman run -dt --name webserver -p 8080:80 quay.io/libpod/banner\n00f3440c7576aae2d5b193c40513c29c7964e96bf797cf0cc352c2b68ccbe66a\n```\n\n----------------------------------------\n\nTITLE: Mounting and Copying Files from Container with Podman - Bash\nDESCRIPTION: Demonstrates how to mount a container's filesystem using podman mount, then copy directories from the container to the host and unmount afterward using podman umount. Requires podman installed and active containers. Key parameters: CONTAINERID identifies the target container, source path (e.g., /etc/foobar) is mounted under the container's root, and the destination on the host is specified. Input is a running or stopped container ID; output is the copied data on the host filesystem.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-cp.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmnt=$(podman mount CONTAINERID)\ncp -R ${mnt}/etc/foobar /tmp\npodman umount CONTAINERID\n```\n\n----------------------------------------\n\nTITLE: Creating an Image with Custom Entrypoint and Label - Podman CLI Bash\nDESCRIPTION: This snippet demonstrates how to use podman commit to create a new image from a container, customizing the CMD, ENTRYPOINT, and applying a LABEL via multiple --change options. The command prints process output and finally the new image ID. Dependencies: podman must be installed and the referenced container (reverent_golick) should exist. Key parameters include --change for image instructions; output includes manifest and image ID.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-commit.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman commit --change CMD=/bin/bash --change ENTRYPOINT=/bin/sh --change \"LABEL blue=image\" reverent_golick image-committed\nGetting image source signatures\nCopying blob sha256:b41deda5a2feb1f03a5c1bb38c598cbc12c9ccd675f438edc6acd815f7585b86\n 25.80 MB / 25.80 MB [======================================================] 0s\nCopying config sha256:c16a6d30f3782288ec4e7521c754acc29d37155629cb39149756f486dae2d4cd\n 448 B / 448 B [============================================================] 0s\nWriting manifest to image destination\nStoring signatures\ne3ce4d93051ceea088d1c242624d659be32cf1667ef62f1d16d6b60193e2c7a8\n```\n\n----------------------------------------\n\nTITLE: Creating an IPv6 Podman Network\nDESCRIPTION: Create an IPv6 network named 'newnetv6' with a subnet of 2001:db8::/64 with the IPv6 flag enabled.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-create.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ podman network create --subnet 2001:db8::/64 --ipv6 newnetv6\nnewnetv6\n```\n\n----------------------------------------\n\nTITLE: Enabling systemd User Session Lingering with loginctl - Bash\nDESCRIPTION: This command uses loginctl to enable lingering for a specific user, ensuring their systemd user instance stays active after logout. This is relevant for containers/services that need to remain running beyond user sessions. The username is a key parameter. Requires system-level privileges.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-generate-systemd.1.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ loginctl enable-linger <username>\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-compatible Authentication File in Podman\nDESCRIPTION: This option specifies an alternative path for storing authentication credentials in Docker-compatible format when using Podman login or logout commands. Instead of updating Podman's default credentials file, this directs the commands to use the specified file at the given path.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/compat-auth-file.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--compat-auth-file**=*path*\n```\n\n----------------------------------------\n\nTITLE: Force Removing a Volume in Use with Podman\nDESCRIPTION: Example command showing how to forcibly remove a volume even if it's being used by containers, using the --force flag. This will also remove all containers using the volume.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-rm.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume rm --force myvol\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Failure Actions in Podman\nDESCRIPTION: This configuration option specifies the action to take when a container transitions to an unhealthy state. Available actions include none (default), kill, restart, and stop. Each action has specific behavior and considerations, especially when used with systemd.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-on-failure.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--health-on-failure**=*action*\n\nAction to take once the container transitions to an unhealthy state.  The default is **none**.\n\n- **none**: Take no action.\n- **kill**: Kill the container.\n- **restart**: Restart the container.  Do not combine the `restart` action with the `--restart` flag.  When running inside of a systemd unit, consider using the `kill` or `stop` action instead to make use of systemd's restart policy.\n- **stop**: Stop the container.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of podman-machine-reset (Shell)\nDESCRIPTION: Demonstrates the interactive execution of the 'podman machine reset' command. It shows the warning message listing the machines that will be deleted ('dev', 'podman-machine-default' in this example) and prompts the user for confirmation ([y/N]) before proceeding with the reset operation. This command removes all Podman machines, configurations, and associated data.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-reset.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine reset\nWarning: this command will delete all existing podman machines\nand all of the configuration and data directories for Podman machines\n\nThe following machine(s) will be deleted:\n\ndev\npodman-machine-default\n\nAre you sure you want to continue? [y/N] y\n$\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Command in Podman\nDESCRIPTION: Sets a healthcheck command for a Podman container. The command can be a simple string or a JSON array of command and arguments. It is executed inside the container to determine its health status. A value of 'none' disables existing healthchecks.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-cmd.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--health-cmd=\"command\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--health-cmd='[\"command\", \"arg1\", ...]'\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic File System Watcher in Go\nDESCRIPTION: Demonstrates creating and using a basic file system watcher that monitors a directory for changes. The example shows how to create a watcher, set up event handling in a goroutine, and add a path to watch. It includes error handling and proper cleanup with defer.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fsnotify/fsnotify/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/fsnotify/fsnotify\"\n)\n\nfunc main() {\n    // Create new watcher.\n    watcher, err := fsnotify.NewWatcher()\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer watcher.Close()\n\n    // Start listening for events.\n    go func() {\n        for {\n            select {\n            case event, ok := <-watcher.Events:\n                if !ok {\n                    return\n                }\n                log.Println(\"event:\", event)\n                if event.Has(fsnotify.Write) {\n                    log.Println(\"modified file:\", event.Name)\n                }\n            case err, ok := <-watcher.Errors:\n                if !ok {\n                    return\n                }\n                log.Println(\"error:\", err)\n            }\n        }\n    }()\n\n    // Add a path.\n    err = watcher.Add(\"/tmp\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Block main goroutine forever.\n    <-make(chan struct{})\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting a Container to a Network with a Static IP - Podman - Shell\nDESCRIPTION: This command connects a container ('web') to a network ('test') while assigning it a specific static IPv4 address ('10.89.1.13') using the '--ip' option. It requires that static IP assignment is supported and there's no IP address conflict within the network. Podman must be installed and the specified network and container must exist. The static IP ensures predictable addressing within the network.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-connect.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npodman network connect --ip 10.89.1.13 test web\n```\n\n----------------------------------------\n\nTITLE: Referencing a Locally Built Image in a Container Unit with Podman Quadlet\nDESCRIPTION: Example showing how to reference a locally built image (defined in a separate build unit file) in a container configuration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_52\n\nLANGUAGE: INI\nCODE:\n```\n[Container]\nImage=test.build\n```\n\n----------------------------------------\n\nTITLE: Creating a Podman Network with IP Range\nDESCRIPTION: Create a network that uses a 192.168.55.0/24 subnet and restricts the IP address range to 192.168.55.129 - 192.168.55.254 using CIDR notation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-create.1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ podman network create --subnet 192.168.55.0/24 --ip-range 192.168.55.128/25\npodman5\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Permission Denied on Volume Mount in Podman Console\nDESCRIPTION: This command attempts to run a Fedora container and touch a file inside a volume mounted from the host's home directory (`~/mycontent`). It demonstrates a common scenario where the container process lacks permissions to write to the mounted volume, often due to SELinux restrictions or user namespace mapping issues.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ podman run -v ~/mycontent:/content fedora touch /content/file\ntouch: cannot touch '/content/file': Permission denied\n```\n\n----------------------------------------\n\nTITLE: Creating a tmpfs Podman Volume with UID/GID - Shell\nDESCRIPTION: This shell snippet creates a Podman volume ('testvol') with tmpfs as the backing device, setting UID and GID options (uid=1000, gid=1000), suitable for user-specific mounts. Requires Podman and root access for custom mount options. Facilitates usage in containers with reconciled ownership.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# podman volume create --opt device=tmpfs --opt type=tmpfs --opt o=uid=1000,gid=1000 testvol\n```\n\n----------------------------------------\n\nTITLE: Applying a Kubernetes YAML File to a Specific Namespace - Bash\nDESCRIPTION: In this snippet, the podman kube apply command is used with the --ns flag to deploy to the 'test1' namespace, specifying a kubeconfig file and the name of the resource. Dependencies include Podman and an accessible Kubernetes cluster. The command confirms deployment and checks the pod status in the designated namespace with kubectl.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-apply.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman kube apply --kubeconfig /tmp/kubeconfig --ns test1 vol-test-3\nDeploying to cluster...\nSuccessfully deployed workloads to cluster!\n$ kubectl get pods --namespace test1\nNAME             READY   STATUS    RESTARTS   AGE\nvol-test-3-pod   1/1     Running   0          9m\n```\n\n----------------------------------------\n\nTITLE: Compressing Byte Slices Using Zstandard EncodeAll in Go\nDESCRIPTION: This example shows how to compress a byte slice using the EncodeAll method from a zstd encoder in Go. The zstd encoder instance is created once and reused for multiple compressions, optimizing allocation usage. The code demonstrates creating a destination buffer with enough capacity to avoid additional allocations and uses EncodeAll to compress src into dst. Dependencies include 'github.com/klauspost/compress/zstd'. The Compress function takes a byte slice as input and returns a compressed byte slice; there are no explicit error returns, so the caller must ensure the encoder is correctly initialized.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a writer that caches compressors.\n// For this operation type we supply a nil Reader.\nvar encoder, _ = zstd.NewWriter(nil)\n\n// Compress a buffer. \n// If you have a destination buffer, the allocation in the call can also be eliminated.\nfunc Compress(src []byte) []byte {\n    return encoder.EncodeAll(src, make([]byte, 0, len(src)))\n} \n```\n\n----------------------------------------\n\nTITLE: Pulling Alpine Image from Docker Hub using Podman\nDESCRIPTION: Command to download the latest Alpine Linux image from Docker Hub to the local system using Podman for subsequent signing experiments.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman pull docker://docker.io/alpine:latest\n```\n\n----------------------------------------\n\nTITLE: Executing a Read-Only Transaction in bbolt\nDESCRIPTION: Example of using the DB.View() function to perform a read-only transaction. This allows read operations on the database without the ability to make modifications.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nerr := db.View(func(tx *bolt.Tx) error {\n\t...\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Container Image with Podman\nDESCRIPTION: Shows how to inspect the details of a container image using the podman inspect command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/Introduction.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npodman inspect quay.io/USERNAME/hello\n```\n\n----------------------------------------\n\nTITLE: Testing Restored Container Accessibility via curl - Shell\nDESCRIPTION: This curl command is used to verify HTTP service availability of the container after it has been restored or migrated, by sending a request to the specified IP address and port. Assumes that the container's service is accessible and port-forwarded. Output is the HTTP response from the restored container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://<IP_address>:8080\n```\n\n----------------------------------------\n\nTITLE: Creating a Pod Configuration with Podman Quadlet\nDESCRIPTION: Example of a Pod unit file that defines a named pod to contain multiple containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_55\n\nLANGUAGE: INI\nCODE:\n```\n[Pod]\nPodName=test\n```\n\n----------------------------------------\n\nTITLE: Setting Cgroup Parameters in Podman Containers (Bash)\nDESCRIPTION: This command example shows how to set a memory limit using the --cgroup-conf option with Podman when running on cgroup v2. The example sets the memory.high limit to 1GB (1073741824 bytes).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cgroup-conf.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--cgroup-conf=memory.high=1073741824\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing Volume Content Between Volumes in Podman\nDESCRIPTION: Demonstrates how to transfer content from one Podman volume to another by piping the export output directly into an import command. This creates a copy of volume contents.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-import.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume export oldmyvol | podman volume import myvol -\n```\n\n----------------------------------------\n\nTITLE: Loading an Image Archive via Stdin Pipe (Bash)\nDESCRIPTION: This example shows how to load a container image by piping (`|`) the output of the `cat` command (which reads the `fedora.tar` file) to the standard input of the `podman load` command. Similar to the redirection example, the output illustrates the image loading steps, including copying data, writing the manifest, and storing signatures.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-load.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cat fedora.tar | podman load\nGetting image source signatures\nCopying blob sha256:5bef08742407efd622d243692b79ba0055383bbce12900324f75e56f589aedb0\n 0 B / 4.03 MB [---------------------------------------------------------------]\nCopying config sha256:7328f6f8b41890597575cbaadc884e7386ae0acc53b747401ebce5cf0d624560\n 0 B / 1.48 KB [---------------------------------------------------------------]\nWriting manifest to image destination\nStoring signatures\nLoaded image:  registry.fedoraproject.org/fedora:latest\n```\n\n----------------------------------------\n\nTITLE: Accessing Container Web Servers from External Host\nDESCRIPTION: Demonstrates how to access the containerized web servers from an external client. The curl commands connect to the host's IP address on the mapped ports 8080 and 8081.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n(outside_host): $ curl 192.168.99.109:8080\n   ___           __\n  / _ \\___  ___/ /_ _  ___ ____\n / ___/ _ \\/ _  /  ' \\/ _ `/ _ \\\n/_/   \\___/\\_,_/_/_/_/\\_,_/_//_/\n\n(outside_host): $ curl 192.168.99.109:8081\n   ___           __\n  / _ \\___  ___/ /_ _  ___ ____\n / ___/ _ \\/ _  /  ' \\/ _ `/ _ \\\n/_/   \\___/\\_,_/_/_/_/\\_,_/_//_/\n```\n\n----------------------------------------\n\nTITLE: Resolving Secret Mount Failures in Podman Builds\nDESCRIPTION: Addresses the \"operation not permitted\" error when using --mount=type=secret in Podman builds on hosts with nosuid filesystems. The solution involves using the crun runtime instead of runc.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nSTEP 3/13: RUN --mount=type=secret,id=MY_USER,target=/etc/dnf/vars/MY_USER     --mount=type=secret,id=MY_USER,target=/etc/dnf/vars/MY_USER     ...: time=\"2023-06-13T18:04:59+02:00\" level=error msg=\"runc create failed: unable to start container process: error during container init: error mounting \\\"/var/tmp/buildah2251989386/mnt/buildah-bind-target-11\\\" to rootfs at \\\"/etc/dnf/vars/MY_USER\\\": mount /var/tmp/buildah2251989386/mnt/buildah-bind-target-11:/etc/dnf/vars/MY_USER (via /proc/self/fd/7), flags: 0x1021: operation not permitted\"\n: exit status 1\nERRO[0002] did not get container create message from subprocess: EOF\n```\n\n----------------------------------------\n\nTITLE: Starting a Podman Kubernetes Workload via Systemd Template (Shell)\nDESCRIPTION: This snippet demonstrates how to start a Kubernetes workload defined in a YAML file (`~/workload.yaml`) using the generic `podman-kube@.service` systemd template. It first escapes the YAML file path for systemd compatibility and then uses `systemctl --user start` to activate the service. Finally, it checks if the service is active.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-generate-systemd.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ escaped=$(systemd-escape ~/workload.yaml)\n$ systemctl --user start podman-kube@$escaped.service\n$ systemctl --user is-active podman-kube@$escaped.service\nactive\n```\n\n----------------------------------------\n\nTITLE: Tagging Alpine Image for Local Registry in Podman\nDESCRIPTION: Command to create a new tag for the Alpine image that points to the local registry running on localhost:5000, preparing it for signed pushing.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman tag alpine localhost:5000/alpine\n```\n\n----------------------------------------\n\nTITLE: Checkpointing a Running Container with Podman - Bash\nDESCRIPTION: This snippet demonstrates how to create a checkpoint for a running container named 'mywebserver' using the Podman CLI. This operation saves the container's state for restoration or migration and requires Podman and a running container. The command expects the container name or ID and generates checkpoint data locally. Outputs are not shown by default, but errors or warnings are displayed in the terminal.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-checkpoint.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# podman container checkpoint mywebserver\n```\n\n----------------------------------------\n\nTITLE: Creating a Macvlan Podman Network\nDESCRIPTION: Create a Macvlan-based network that uses the host interface eth0 with root privileges. Macvlan networks allow containers to appear on the physical network with their own MAC addresses.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-create.1.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo podman network create -d macvlan -o parent=eth0 --subnet 192.5.0.0/16 newnet\nnewnet\n```\n\n----------------------------------------\n\nTITLE: Enabling Podman Socket Service on Linux Server\nDESCRIPTION: Command to enable and start the Podman socket service for a rootless user on the Linux server. This SystemD service is required for the remote client to connect.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/mac_win_client.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ systemctl --user enable --now podman.socket\n```\n\n----------------------------------------\n\nTITLE: Configuring Slirp4netns Network with Custom Options in Podman\nDESCRIPTION: Example of using the --network option with slirp4netns to set custom network configuration, including IPv4-only setup, custom IP range, gateway, DNS, MTU, and disabled services.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/network.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npasta:--ipv4-only,-a,10.0.2.0,-n,24,-g,10.0.2.2,--dns-forward,10.0.2.3,-m,1500,--no-ndp,--no-dhcpv6,--no-dhcp\n```\n\n----------------------------------------\n\nTITLE: Accessing Host Files in Rootless Container\nDESCRIPTION: Demonstrate how to run a Podman container with proper UID and GID mapping to allow access to host files in rootless containers.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_51\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir dir1\n$ echo hello > dir1/file.txt\n$ chmod 700 dir1/file.txt\n$ podman run --rm \\\n  -v ./dir1:/dir1:Z \\\n  --user $uid:$gid \\\n  --userns keep-id:uid=$uid,gid=$gid \\\n  docker.io/library/alpine cat /dir1/file.txt\nhello\n```\n\n----------------------------------------\n\nTITLE: Python Script Monitoring Firewalld D-Bus for Podman Network Reload\nDESCRIPTION: This Python 3 script uses the `dbus` and `GLib` libraries to monitor system D-Bus signals related to firewalld. It sets up listeners for the `Reloaded` signal from the firewalld interface and the `NameOwnerChanged` signal for the firewalld service name (indicating startup). Upon receiving either signal, it triggers `podman network reload --all` via `subprocess.run`, handling potential errors and timeouts. This script is intended to be run as a service (e.g., via the corresponding systemd unit).\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nimport dbus\nfrom gi.repository import GLib\nfrom dbus.mainloop.glib import DBusGMainLoop\nimport subprocess\nimport sys\n\n# I'm a bit confused on the return values in the code\n# Not sure if they are needed.\n\ndef reload_podman_network():\n    try:\n        subprocess.run([\"podman\",\"network\",\"reload\",\"--all\"],timeout=90)\n        # I'm not sure about this part\n        sys.stdout.write(\"podman network reload done\\n\")\n        sys.stdout.flush()\n    except subprocess.TimeoutExpired as t:\n        sys.stderr.write(f\"Podman reload failed due to Timeout {t}\")\n    except subprocess.CalledProcessError as e:\n        sys.stderr.write(f\"Podman reload failed due to {e}\")\n    except Exception as e:\n        sys.stderr.write(f\"Podman reload failed with an Unhandled Exception {e}\")\n\n    return False\n\ndef signal_handler(*args, **kwargs):\n    if kwargs.get('member') == \"Reloaded\":\n        reload_podman_network()\n    elif kwargs.get('member') == \"NameOwnerChanged\":\n        reload_podman_network()\n    else:\n        return None\n    return None\n\ndef signal_listener():\n    try:\n        DBusGMainLoop(set_as_default=True)# Define the loop.\n        loop = GLib.MainLoop()\n        system_bus = dbus.SystemBus()\n        # Listens to systemctl restart firewalld with a filter added, will cause podman network to be reloaded twice\n        system_bus.add_signal_receiver(signal_handler,dbus_interface='org.freedesktop.DBus',arg0='org.fedoraproject.FirewallD1',member_keyword='member')\n        # Listens to firewall-cmd --reload\n        system_bus.add_signal_receiver(signal_handler,dbus_interface='org.fedoraproject.FirewallD1',signal_name='Reloaded',member_keyword='member')\n        loop.run()\n    except KeyboardInterrupt:\n        loop.quit()\n        sys.exit(0)\n    except Exception as e:\n        loop.quit()\n        sys.stderr.write(f\"Error occurred {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    signal_listener()\n```\n\n----------------------------------------\n\nTITLE: Exposing Encryption and Decryption Functions in OCIcrypt Library (Go)\nDESCRIPTION: Core interface functions for runtime/build tools to encrypt and decrypt container image layers. These functions accept configuration parameters, layer data streams, and descriptor information, and return appropriate readers and metadata for further processing.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/ocicrypt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage \"github.com/containers/ocicrypt\"\nfunc EncryptLayer(ec *config.EncryptConfig, encOrPlainLayerReader io.Reader, desc ocispec.Descriptor) (io.Reader, EncryptLayerFinalizer, error)\nfunc DecryptLayer(dc *config.DecryptConfig, encLayerReader io.Reader, desc ocispec.Descriptor, unwrapOnly bool) (io.Reader, digest.Digest, error)\n```\n\n----------------------------------------\n\nTITLE: Copying a Specified Image to Local Storage using Podman\nDESCRIPTION: This command demonstrates copying the 'alpine' image (implicitly from a default registry like docker.io) to the local Podman storage. The output confirms the image has been loaded.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-scp.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman image scp alpine\nLoaded image: docker.io/library/alpine:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Hosts File in Podman Containers\nDESCRIPTION: Defines the options for specifying the base /etc/hosts file when creating containers or pods. Supports absolute path to a host file, 'none' for empty file, or 'image' to use container image's hosts file. Default behavior follows containers.conf configuration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/hosts-file.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--hosts-file=/path/to/hosts\n```\n\nLANGUAGE: bash\nCODE:\n```\n--hosts-file=none\n```\n\nLANGUAGE: bash\nCODE:\n```\n--hosts-file=image\n```\n\n----------------------------------------\n\nTITLE: Querying Podman Network Subnets and Gateways with Go Templates - Bash\nDESCRIPTION: This snippet shows how to use the --format option with podman network inspect to extract and display only the subnet and gateway properties from the network configuration. The command leverages a Go template to iterate over the network's subnets and output their subnet and gateway values. No additional tools are necessary beyond Podman, and the expected output is a custom-formatted string suitable for human inspection.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-inspect.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman network inspect podman --format \"{{range .Subnets}}Subnet: {{.Subnet}} Gateway: {{.Gateway}}{{end}}\"\nSubnet: 10.88.0.0/16 Gateway: 10.88.0.1\n\n```\n\n----------------------------------------\n\nTITLE: Multiple Network IP Configuration in Podman\nDESCRIPTION: Shows how to configure multiple static IP addresses by setting multiple networks using the --network option with ip mode specification.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/ip.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--network=network-name\n```\n\nLANGUAGE: bash\nCODE:\n```\n--network=container:id\n```\n\n----------------------------------------\n\nTITLE: Running Container with Macvlan Network\nDESCRIPTION: Deploys a container on the macvlan network and displays its network configuration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo podman run -dt --name webserver --network webnetwork quay.io/libpod/banner\n$ sudo podman exec webserver ip address show eth0\n```\n\n----------------------------------------\n\nTITLE: Enabling systemd User Services with systemctl --user - Bash\nDESCRIPTION: This Bash snippet shows how to enable a user-level systemd service (unit file placed under $HOME/.config/systemd/user) with the systemctl --user command. The output is implicit, and the only input required is the service file. It's recommended for non-root container management with Podman-generated service files.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-generate-systemd.1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ systemctl --user enable <.service>\n```\n\n----------------------------------------\n\nTITLE: Validating Structs with Custom Tags and Parameters in Go\nDESCRIPTION: This Go example demonstrates struct validation using `govalidator`. It defines a `Post` struct with various built-in (`alphanum`, `required`, `ascii`, `ipv4`) and custom (`duck`, `animal(dog)`) validation tags. It shows how to register both simple custom tags via `TagMap` and parameterized custom tags using `ParamTagMap` and `ParamTagRegexMap`, then calls `ValidateStruct` to perform the validation.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype Post struct {\n\tTitle    string `valid:\"alphanum,required\"`\n\tMessage  string `valid:\"duck,ascii\"`\n\tMessage2 string `valid:\"animal(dog)\"`\n\tAuthorIP string `valid:\"ipv4\"`\n\tDate     string `valid:\"-\"`\n}\npost := &Post{\n\tTitle:   \"My Example Post\",\n\tMessage: \"duck\",\n\tMessage2: \"dog\",\n\tAuthorIP: \"123.234.54.3\",\n}\n\n// Add your own struct validation tags\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n\n// Add your own struct validation tags with parameter\ngovalidator.ParamTagMap[\"animal\"] = govalidator.ParamValidator(func(str string, params ...string) bool {\n    species := params[0]\n    return str == species\n})\ngovalidator.ParamTagRegexMap[\"animal\"] = regexp.MustCompile(\"^animal\\\\((\\\\w+)\\\\)$\")\n\nresult, err := govalidator.ValidateStruct(post)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Native OverlayFS for Podman Storage - INI\nDESCRIPTION: This INI-style snippet provides the minimal 'storage.conf' configuration required to use the native overlay storage driver. Place in '/etc/containers/storage.conf' or ~/.config/containers/storage.conf as appropriate. Only valid on compatible Linux systems with overlayfs support.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[storage]\\ndriver = \"overlay\"\n```\n\n----------------------------------------\n\nTITLE: Mapping User Namespaces with --userns=keep-id in Podman Console\nDESCRIPTION: This command addresses permission issues arising from user namespace mismatches, especially with container images that run as a specific non-root user (e.g., Jupyter). The `--userns=keep-id` option maps the host user's UID/GID into the container, ensuring the container process has the correct permissions on the mounted volume (`$PWD:/home/jovyan/work`).\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ podman run -v \"$PWD\":/home/jovyan/work --userns=keep-id jupyter/scipy-notebook\n```\n\n----------------------------------------\n\nTITLE: Mounting a Volume as Root in Podman\nDESCRIPTION: Example showing how to mount a volume named 'foo' when using Podman as root. The command returns the mount path where the volume's filesystem is accessible.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-mount.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# podman volume mount foo\n/home/dwalsh/.local/share/containers/storage/volumes/foo/_data\n```\n\n----------------------------------------\n\nTITLE: Restoring a Checkpointed Podman Container - Shell\nDESCRIPTION: This command restores a previously checkpointed container to the state it was in at the time of checkpoint, after which the container resumes operation. It requires root privileges and CRIU support. The container_id must refer to an existing checkpoint. Success means the container resumes as if uninterrupted.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo podman container restore <container_id>\n```\n\n----------------------------------------\n\nTITLE: Querying Image History with Podman - Shell\nDESCRIPTION: This shell command displays the history of a specified image using the 'podman history' command, producing a table of image layer IDs, creation dates, commands, sizes, and comments. No dependencies are required other than having Podman installed and access to the specified image. The main parameter is the image name (e.g., 'debian'), and output is presented via standard output, tabulated for human reading; content may be truncated unless other flags are used.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-history.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman history debian\nID              CREATED       CREATED BY                                      SIZE       COMMENT\nb676ca55e4f2c   9 weeks ago   /bin/sh -c #(nop) CMD [\"bash\"]                  0 B\n<missing>       9 weeks ago   /bin/sh -c #(nop) ADD file:ebba725fb97cea4...   45.14 MB\n```\n\n----------------------------------------\n\nTITLE: Compressing data with pgzip in Go\nDESCRIPTION: Example of using pgzip to compress data with custom concurrency settings. This demonstrates creating a writer, setting concurrency, writing data, and closing the writer.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/pgzip/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar b bytes.Buffer\nw := gzip.NewWriter(&b)\nw.SetConcurrency(100000, 10)\nw.Write([]byte(\"hello, world\\n\"))\nw.Close()\n```\n\n----------------------------------------\n\nTITLE: Copying an Image Between Two Remote Podman Connections\nDESCRIPTION: This command transfers the 'alpine' image directly from one remote Podman connection ('Fedora') to another ('RHEL'). The image does not pass through the local machine's storage.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-scp.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman image scp Fedora::alpine RHEL::\nLoaded image: docker.io/library/alpine:latest\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling Viper Configuration to Struct in Go\nDESCRIPTION: Shows how to unmarshal Viper configuration into a Go struct using the Unmarshal method. It includes an example struct definition and error handling.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_29\n\nLANGUAGE: go\nCODE:\n```\ntype config struct {\n\tPort int\n\tName string\n\tPathMap string `mapstructure:\"path_map\"`\n}\n\nvar C config\n\nerr := viper.Unmarshal(&C)\nif err != nil {\n\tt.Fatalf(\"unable to decode into struct, %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into a Container Registry with Podman\nDESCRIPTION: Demonstrates how to log into a container registry (quay.io) using the podman login command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/Introduction.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman login quay.io\n```\n\n----------------------------------------\n\nTITLE: Setting Container Health Check Retries in Podman\nDESCRIPTION: The --health-retries option specifies how many times a health check can fail before a container is marked as unhealthy. It defaults to 3 retries and can override the health check configuration defined in the container image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-retries.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--health-retries=<retries>\n```\n\n----------------------------------------\n\nTITLE: Importing Untagged Image from Stdin (Shell)\nDESCRIPTION: Imports an image from standard input (piped from 'cat ctr.tar') without assigning a tag (indicated by '-'). The command shows the default verbose output including progress bars for copying blobs and config. The resulting image is untagged but has an ID. Requires a 'ctr.tar' file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-import.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cat ctr.tar | podman import -\nGetting image source signatures\nCopying blob sha256:b41deda5a2feb1f03a5c1bb38c598cbc12c9ccd675f438edc6acd815f7585b86\n 25.80 MB / 25.80 MB [======================================================] 0s\nCopying config sha256:d61387b4d5edf65edee5353e2340783703074ffeaaac529cde97a8357eea7645\n 378 B / 378 B [============================================================] 0s\nWriting manifest to image destination\nStoring signatures\ndb65d991f3bbf7f31ed1064db9a6ced7652e3f8166c4736aa9133dadd3c7acb3\n```\n\n----------------------------------------\n\nTITLE: Listing Running Containers with Podman\nDESCRIPTION: Uses the podman ps command to list currently running containers. The output displays container IDs, images, commands, creation time, status, port mappings, and container names.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-ps.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman ps\nCONTAINER ID  IMAGE                            COMMAND    CREATED        STATUS        PORTS                                                   NAMES\n4089df24d4f3  docker.io/library/centos:latest  /bin/bash  2 minutes ago  Up 2 minutes  0.0.0.0:80->8080/tcp, 0.0.0.0:2000-2006->2000-2006/tcp  manyports\n92f58933c28c  docker.io/library/centos:latest  /bin/bash  3 minutes ago  Up 3 minutes  192.168.99.100:1000-1006->1000-1006/tcp                 zen_sanderson\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Different Tags from a Podman Image\nDESCRIPTION: This command illustrates removing multiple, potentially different, tags ('myhttpd' and 'myregistryhost:5000/fedora/httpd:v2') associated with the image originally named 'httpd'. It removes the specified names while leaving other potential names for the image intact.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-untag.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman untag httpd myhttpd myregistryhost:5000/fedora/httpd:v2\n```\n\n----------------------------------------\n\nTITLE: Enabling Unprivileged Pings on Host System via Console\nDESCRIPTION: This command modifies a kernel parameter (`net.ipv4.ping_group_range`) using `sysctl` to allow users within a specified group range (0 to 2000000 in this example) to create ping sockets. This is a common solution to enable ping functionality within rootless Podman containers.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n# sysctl -w \"net.ipv4.ping_group_range=0 2000000\"\n```\n\n----------------------------------------\n\nTITLE: Using Docker CLI with Podman API Forwarding (PowerShell)\nDESCRIPTION: Demonstrates using the native Docker CLI (`docker.exe`) to run a container, which interacts with the Podman backend via the API forwarding mechanism. This example runs `echo \"Hello Podman!\"` in a Fedora container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User> .\\docker.exe run -it fedora echo \"Hello Podman!\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Lingering Mode for Rootless Containers in Podman\nDESCRIPTION: This command enables lingering mode through loginctl to prevent user processes from being killed once the user session is completed. It allows rootless containers to continue running after the user logs out.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n# loginctl enable-linger $UID\n```\n\n----------------------------------------\n\nTITLE: Running a Local Container Registry with Podman\nDESCRIPTION: Command to start a local container registry using the official registry image, making it available on port 5000 for testing image signing.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman run -d -p 5000:5000 docker.io/registry\n```\n\n----------------------------------------\n\nTITLE: Creating Macvlan Network in Podman\nDESCRIPTION: Creates a macvlan network using eth0 as the parent interface for container connectivity.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo podman network create -d macvlan -o parent=eth0 webnetwork\n```\n\n----------------------------------------\n\nTITLE: Connecting to Local Libvirt and Retrieving Domain Information\nDESCRIPTION: Example Go code demonstrating how to connect to libvirt on the local machine using Unix sockets, retrieve the libvirt version, list all domains, and display their ID, name, and UUID.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/digitalocean/go-libvirt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/digitalocean/go-libvirt\"\n)\n\nfunc main() {\n\t// This dials libvirt on the local machine, but you can substitute the first\n\t// two parameters with \"tcp\", \"<ip address>:<port>\" to connect to libvirt on\n\t// a remote machine.\n\tc, err := net.DialTimeout(\"unix\", \"/var/run/libvirt/libvirt-sock\", 2*time.Second)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to dial libvirt: %v\", err)\n\t}\n\n\tl := libvirt.New(c)\n\tif err := l.Connect(); err != nil {\n\t\tlog.Fatalf(\"failed to connect: %v\", err)\n\t}\n\n\tv, err := l.Version()\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to retrieve libvirt version: %v\", err)\n\t}\n\tfmt.Println(\"Version:\", v)\n\n\tdomains, err := l.Domains()\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to retrieve domains: %v\", err)\n\t}\n\n\tfmt.Println(\"ID\\tName\\t\\tUUID\")\n\tfmt.Printf(\"--------------------------------------------------------\\n\")\n\tfor _, d := range domains {\n\t\tfmt.Printf(\"%d\\t%s\\t%x\\n\", d.ID, d.Name, d.UUID)\n\t}\n\n\tif err := l.Disconnect(); err != nil {\n\t\tlog.Fatalf(\"failed to disconnect: %v\", err)\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring XFS Quotas for Podman Volumes - Shell\nDESCRIPTION: This shell snippet shows an example /etc/fstab entry for mounting an XFS filesystem with project quota support intended for Podman volumes. The 'pquota' mount option enables project quotas, which Podman can leverage for volume size/inode enforcement. Requires system root access and knowledge of partitioning.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n/dev/podman/podman-var /var xfs defaults,x-systemd.device-timeout=0,pquota 1 2\n```\n\n----------------------------------------\n\nTITLE: Assigning IP Address to Loopback with Netlink in Go\nDESCRIPTION: This Go snippet illustrates assigning an additional IP address to the loopback interface using the netlink package. It shows how to locate a link (\"lo\") and parse and assign a new IP address to it via the library's API. The user must have root privileges and the netlink Go package installed. Inputs involve the target interface name and the IP address string (\"169.254.169.254/32\"). No output is expected on success; execution silently updates system network configuration.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/vishvananda/netlink/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/vishvananda/netlink\"\n)\n\nfunc main() {\n    lo, _ := netlink.LinkByName(\"lo\")\n    addr, _ := netlink.ParseAddr(\"169.254.169.254/32\")\n    netlink.AddrAdd(lo, addr)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Socket-Activated Apache HTTP Server Containerfile\nDESCRIPTION: A Containerfile for building an Apache HTTP server container image that is configured to support socket activation on port 8080.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_10\n\nLANGUAGE: docker/containerfile\nCODE:\n```\nFROM docker.io/library/fedora\nRUN dnf -y update && dnf install -y httpd && dnf clean all\nRUN sed -i \"s/Listen 80/Listen 127.0.0.1:8080/g\" /etc/httpd/conf/httpd.conf\nCMD [\"/usr/sbin/httpd\", \"-DFOREGROUND\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Option in Podman Build Commands\nDESCRIPTION: Specifies the syntax for the --secret option used in podman build and farm build commands. This option allows passing secret information securely for use in Containerfiles without storing it in the final image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/secret.image.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--secret=id=id[,src=envOrFile][,env=ENV][,type=file | env]\n```\n\n----------------------------------------\n\nTITLE: Performing Thorough Consistency Check with Podman CLI - Shell\nDESCRIPTION: This shell command runs a comprehensive consistency check on Podman image and container storage using the --repair, --max, and --force flags. The --repair option attempts to resolve damaged images, --max defines the age threshold (e.g., 1h) for removing unused layers, and --force ensures dependent containers are also removed if needed. Prerequisites include Podman installation and proper permissions. This command is suited for thorough storage integrity assessments, with inputs as flags and outputs printed to the console. Runs may affect in-use or stale resources depending on the options specified.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-check.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npodman system check --repair --max=1h --force\n```\n\n----------------------------------------\n\nTITLE: Checking for an External Non-Existent Container (Shell)\nDESCRIPTION: This snippet illustrates how to use the `--external` flag with `podman container exists` to check for containers potentially created by other tools like Buildah or CRI-O. It checks for a container named 'ubi8-working-container', and the exit code `1` indicates it was not found, even when considering external containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-exists.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman container exists --external ubi8-working-container\n$ echo $?\n1\n```\n\n----------------------------------------\n\nTITLE: Setting Execution Domain for Podman Containers using Linux Personality\nDESCRIPTION: This option allows setting the execution domain for Podman containers using the Linux personality(2) system call. It is applicable to both 'podman create' and 'podman run' commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/personality.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#### **--personality**=*persona*\n```\n\n----------------------------------------\n\nTITLE: Migrating Containers with podman system migrate - CLI - Markdown\nDESCRIPTION: This Markdown snippet outlines the documentation for the 'podman system migrate' command. It describes the purpose, usage, key options, and detailed notes regarding user namespaces and runtime changes. No special dependencies are required for this file itself, but the documentation assumes usage of the Podman CLI and underlying Linux tools for user management. Expected input is as manpage-format documentation, and output is for human readers or manpage-generating tools.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-migrate.1.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n% podman-system-migrate 1\n\n## NAME\npodman\\-system\\-migrate - Migrate existing containers to a new podman version\n\n## SYNOPSIS\n**podman system migrate** [*options*]\n\n## DESCRIPTION\n**podman system migrate** migrates containers to the latest podman version.\n\n**podman system migrate** takes care of migrating existing containers to the latest version of podman if any change is necessary.\n\n\"Rootless Podman uses a pause process to keep the unprivileged\nnamespaces alive. This prevents any change to the `/etc/subuid` and\n`/etc/subgid` files from being propagated to the rootless containers\nwhile the pause process is running.\n\nFor these changes to be propagated, it is necessary to first stop all\nrunning containers associated with the user and to also stop the pause\nprocess and delete its pid file.  Instead of doing it manually, `podman\nsystem migrate` can be used to stop both the running containers and the\npause process. The `/etc/subuid` and `/etc/subgid` files can then be\nedited or changed with usermod to recreate the user namespace with the\nnewly configured mappings.\n\n## OPTIONS\n\n#### **--new-runtime**=*runtime*\n\nSet a new OCI runtime for all containers.\nThis can be used after a system upgrade which changes the default OCI runtime to move all containers to the new runtime.\nThere are no guarantees that the containers continue to work under the new runtime, as some runtimes support differing options and configurations.\n\n## SEE ALSO\n**[podman(1)](podman.1.md)**, **[podman-system(1)](podman-system.1.md)**, **usermod(8)**\n\n## HISTORY\nApril 2019, Originally compiled by Giuseppe Scrivano (gscrivan at redhat dot com)\n```\n\n----------------------------------------\n\nTITLE: Loading an Image Archive via Stdin Redirection (Bash)\nDESCRIPTION: This example demonstrates loading a container image from a local tar file (`fedora.tar`) by redirecting the file's content to the standard input of the `podman load` command using Bash redirection (`<`). The subsequent lines show sample output indicating the progress of copying blobs, configuration, writing the manifest, and storing signatures, finally confirming the loaded image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-load.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman load < fedora.tar\nGetting image source signatures\nCopying blob sha256:5bef08742407efd622d243692b79ba0055383bbce12900324f75e56f589aedb0\n 0 B / 4.03 MB [---------------------------------------------------------------]\nCopying config sha256:7328f6f8b41890597575cbaadc884e7386ae0acc53b747401ebce5cf0d624560\n 0 B / 1.48 KB [---------------------------------------------------------------]\nWriting manifest to image destination\nStoring signatures\nLoaded image:  registry.fedoraproject.org/fedora:latest\n```\n\n----------------------------------------\n\nTITLE: Filtering Podman Events by Status - Bash\nDESCRIPTION: This snippet demonstrates filtering the Podman events stream using the '-f event=create' option to display only 'create' events. It showcases event filtering capability, allowing inspection of specific event types. Requires a running Podman service and appropriate user access. Input is filtered dynamically for event type 'create', and output is a chronological log of those event occurrences across containers and volumes. Ensures more focused monitoring for automation or troubleshooting.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-events.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman events -f event=create\n2019-03-02 10:36:01.375685062 -0600 CST container create 20dc581f6fbf (image=docker.io/library/alpine:latest, name=sharp_morse)\n2019-03-02 10:36:08.561188337 -0600 CST container create 58e7e002344c (image=registry.k8s.io/pause:3.1, name=3e701f270d54-infra)\n2019-03-02 10:36:13.146899437 -0600 CST volume create cad6dc50e087 (image=, name=cad6dc50e0879568e7d656bd004bd343d6035e7fc4024e1711506fe2fd459e6f)\n2019-03-02 10:36:29.978806894 -0600 CST container create d81e30f1310f (image=docker.io/library/busybox:latest, name=musing_newton)\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Secret from Environment Variable using Shell\nDESCRIPTION: Creates a Podman secret named `my_secret` using the value of the specified environment variable (`MYSECRET`). The `--env=true` flag indicates that the final argument is the name of the environment variable containing the secret data, rather than a file path or `-`.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-secret-create.1.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ podman secret create --env=true my_secret MYSECRET\n```\n\n----------------------------------------\n\nTITLE: Pulling Signed Image with Signature Verification in Podman\nDESCRIPTION: Command to pull a signed container image with TLS verification disabled, demonstrating successful signature verification against the configured GPG key.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman pull --tls-verify=false localhost:5000/alpine\n…\nStoring signatures\ne7d92cdc71feacf90708cb59182d0df1b911f8ae022d29e8e95d75ca6a99776a\n```\n\n----------------------------------------\n\nTITLE: Using Attach Option in Podman Container Commands\nDESCRIPTION: The --attach (-a) option allows attaching to container's STDIN, STDOUT, or STDERR streams. Used in foreground mode, it enables direct interaction with container processes and supports TTY emulation. Can be configured independently for each standard stream.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/attach.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--attach, -a=stdin | stdout | stderr\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Flags with pflag\nDESCRIPTION: This snippet shows how to parse the command line into defined flags using pflag's Parse() function.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nflag.Parse()\n```\n\n----------------------------------------\n\nTITLE: Rootless storage.conf Default Paths - shell\nDESCRIPTION: Specifies default graphroot and runroot paths for rootless Podman as code documentation. Indicates where configuration and runtime state are stored in user directories. Not an executable snippet, but essential for administrators understanding storage configuration under rootless operation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngraphroot=\"${XDG_DATA_HOME}/containers/storage\"\\nrunroot=\"${XDG_RUNTIME_DIR}/containers\"\n```\n\n----------------------------------------\n\nTITLE: Installing Ginkgo Testing Framework for Podman Tests\nDESCRIPTION: Command to build and install Ginkgo testing framework in ./test/tools/build/ginkgo for Podman integration tests.\nSOURCE: https://github.com/containers/podman/blob/main/test/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmake .install.ginkgo\n```\n\n----------------------------------------\n\nTITLE: Loading Podman Completion for Fish Shell - Fish - Shell\nDESCRIPTION: This snippet pipes the output of podman completion fish directly into the Fish shell using source, enabling command completions for the current session. The user must have Podman in the PATH and execute the command from their Fish prompt. The completion is temporary and applies only to the current shell session.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-completion.1.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npodman completion fish | source\n```\n\n----------------------------------------\n\nTITLE: Generating and Printing a Systemd Unit File for an Nginx Container (Shell/Systemd)\nDESCRIPTION: This example first creates an Nginx container named 'nginx'. Then, it uses `podman generate systemd` to create a corresponding systemd unit file. The command specifies an 'always' restart policy (`--restart-policy=always`) and a 1-second stop timeout (`-t 1`). The generated unit file content is printed to standard output, showing the typical structure including Unit, Service, and Install sections.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-generate-systemd.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman create --name nginx nginx:latest\n$ podman generate systemd --restart-policy=always -t 1 nginx\n```\n\nLANGUAGE: systemd\nCODE:\n```\n# container-de1e3223b1b888bc02d0962dd6cb5855eb00734061013ffdd3479d225abacdc6.service\n# autogenerated by Podman 1.8.0\n# Wed Mar 09 09:46:45 CEST 2020\n\n[Unit]\nDescription=Podman container-de1e3223b1b888bc02d0962dd6cb5855eb00734061013ffdd3479d225abacdc6.service\nDocumentation=man:podman-generate-systemd(1)\nWants=network-online.target\nAfter=network-online.target\nRequiresMountsFor=/var/run/container/storage\n\n[Service]\nRestart=always\nExecStart=/usr/bin/podman start de1e3223b1b888bc02d0962dd6cb5855eb00734061013ffdd3479d225abacdc6\nExecStop=/usr/bin/podman stop \\\n        -t 1 de1e3223b1b888bc02d0962dd6cb5855eb00734061013ffdd3479d225abacdc6\nKillMode=none\nType=forking\nPIDFile=/run/user/1000/overlay-containers/de1e3223b1b888bc02d0962dd6cb5855eb00734061013ffdd3479d225abacdc6/userdata/conmon.pid\n\n[Install]\nWantedBy=default.target\n```\n\n----------------------------------------\n\nTITLE: Removing Pods/Containers using podman kube down with a File\nDESCRIPTION: This example demonstrates executing the `podman kube down` command, specifying a local YAML file (`demo.yml`) as input. The command reads the file to identify and remove the corresponding pods and containers previously created. The output displays the IDs of the stopped and removed pods.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-down.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman kube down demo.yml\nPods stopped:\n52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6\nPods removed:\n52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6\n```\n\n----------------------------------------\n\nTITLE: Initializing the First Podman Machine (PowerShell)\nDESCRIPTION: Initializes the default Podman machine using the `podman machine init` command in PowerShell. This command sets up the necessary WSL distribution (Fedora) and configures it to run Podman. If WSL is not installed, it may prompt for automatic installation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User> podman machine init\n```\n\n----------------------------------------\n\nTITLE: Connecting a Container to a Network with Multiple Aliases - Podman - Shell\nDESCRIPTION: This command demonstrates connecting a container ('web') to a network ('test') with two network-scoped aliases ('web1' and 'web2') using the '--alias' option. DNS aliasing requires the network to have DNS enabled. The command depends on Podman and suitable network configuration; passing multiple '--alias' flags assigns additional names for the container. Aliases facilitate name resolution within the network.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-connect.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npodman network connect --alias web1 --alias web2 test web\n```\n\n----------------------------------------\n\nTITLE: Initializing Sprig FuncMap with Go html/template\nDESCRIPTION: This Go snippet demonstrates how to import the Sprig v3 library and integrate its function map (`FuncMap`) into a Go `html/template` instance. It emphasizes that the `Funcs` method must be called on the template object *before* parsing any template files (`ParseGlob`).\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/sprig/v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/Masterminds/sprig/v3\"\n  \"html/template\"\n)\n\n// This example illustrates that the FuncMap *must* be set before the\n// templates themselves are loaded.\ntpl := template.Must(\n  template.New(\"base\").Funcs(sprig.FuncMap()).ParseGlob(\"*.html\")\n)\n\n```\n\n----------------------------------------\n\nTITLE: Running Command in Specific Podman VM via SSH\nDESCRIPTION: Illustrates how to execute a specific command (`rpm -q podman`) directly within a named Podman virtual machine (`myvm`) via SSH, without starting an interactive session. The command and its arguments follow the machine name.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-ssh.1.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine ssh myvm rpm -q podman\n```\n\n----------------------------------------\n\nTITLE: Configuring jWalterWeatherman Log Thresholds in Go\nDESCRIPTION: This snippet demonstrates how to change the log thresholds for jWalterWeatherman. It shows setting different levels for logging and stdout output, which is useful for implementing verbose mode in applications.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/jwalterweatherman/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    jww \"github.com/spf13/jwalterweatherman\"\n)\n\nif Verbose {\n    jww.SetLogThreshold(jww.LevelTrace)\n    jww.SetStdoutThreshold(jww.LevelInfo)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for a Non-Existent Pod with Podman CLI\nDESCRIPTION: This example shows checking for a pod named 'backend' which does not exist in local storage. The `podman pod exists` command is executed, and `echo $?` reveals the exit status `1`, indicating the pod was not found.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod-exists.1.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo podman pod exists backend; echo $?\n1\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Alias for Podman (Shell)\nDESCRIPTION: Example shell alias command to map the 'docker' command to 'podman'. This allows users familiar with Docker commands to use Podman with minimal changes to their workflow.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nalias docker=podman\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Interval in Podman\nDESCRIPTION: This option allows setting the interval for container health checks in Podman. It can be used with 'podman create', 'run', and 'update' commands. The interval can be set to a time value or 'disable' to prevent automatic timer setup. The default interval is 30 seconds.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-interval.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--health-interval=interval\n```\n\n----------------------------------------\n\nTITLE: Creating a Labeled Podman Volume - Shell\nDESCRIPTION: This shell snippet creates a new Podman volume with a specific label (foo=bar) and a custom name ('myvol'). Requires Podman CLI. The '--label' option attaches metadata to the volume.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman volume create --label foo=bar myvol\n```\n\n----------------------------------------\n\nTITLE: Configuring cgroup namespaces for Podman build commands\nDESCRIPTION: This configuration option sets how cgroup namespaces are handled during RUN instructions in Podman build and farm build commands. It can be set to an empty string, \"private\" for a new namespace, or \"host\" to reuse the existing namespace.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cgroupns.image.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#### **--cgroupns**=*how*\n```\n\n----------------------------------------\n\nTITLE: Configuring Seccomp Filters for Podman Containers/Pods\nDESCRIPTION: These options control seccomp confinement for Podman containers or pods. You can either turn off seccomp confinement or specify a JSON file to be used as a seccomp filter.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/security-opt.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt seccomp=unconfined\n```\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt seccomp=profile.json\n```\n\n----------------------------------------\n\nTITLE: Listing GPG Keys in Podman for Image Signing\nDESCRIPTION: Command to display GPG keys available for signing container images, showing key ID and expiration details for the specified email address.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> gpg --list-keys sgrunert@suse.com\npub   rsa2048 2018-11-26 [SC] [expires: 2020-11-25]\n      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nuid           [ultimate] Sascha Grunert <sgrunert@suse.com>\nsub   rsa2048 2018-11-26 [E] [expires: 2020-11-25]\n```\n\n----------------------------------------\n\nTITLE: Removing All Podman Images and Forcing Container Removal (Shell)\nDESCRIPTION: Shows how to remove all images present in the local storage using the `--all` (`-a`) option combined with the `--force` (`-f`) option. The force flag ensures that any containers using these images are removed first.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-rmi.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ podman rmi -a -f\n```\n\n----------------------------------------\n\nTITLE: Configuring an S3 Filesystem Volume with Podman Quadlet\nDESCRIPTION: Advanced volume configuration that uses s3fs-fuse to mount an S3 bucket as a filesystem volume. Includes service configuration for cache directory and pre-execution setup.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_57\n\nLANGUAGE: INI\nCODE:\n```\n[Service]\nCacheDirectory=s3fs\nExecStartPre=/usr/local/bin/aws s3api put-object --bucket ${S3_BUCKET} --key ${PATH}/\n\n[Volume]\nDevice=${S3_BUCKET}:/${PATH}\nType=fuse.s3fs\nVolumeName=s3fs-volume\nOptions=iam_role,endpoint=${AWS_REGION},use_xattr,listobjectsv2,del_cache,use_cache=${CACHE_DIRECTORY}\n# `iam_role` assumes inside EC2, if not, Use `profile=` instead\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Podman Machine OS to Specific Version\nDESCRIPTION: This command applies the OCI image tagged `5.3` from `quay.io/podman/machine-os` to the Podman machine specifically named `mymachine`, updating its OS to the version corresponding to Podman 5.3. This requires the machine `mymachine` to exist and use an rpm-ostree based OS.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-os-apply.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman machine os apply quay.io/podman/machine-os:5.3 mymachine\n```\n\n----------------------------------------\n\nTITLE: Using Interactive Mode in Podman Container Commands\nDESCRIPTION: The --interactive (-i) flag controls stdin availability for container processes. When true, it enables stdin access for the container process, while false closes stdin immediately. The flag works across multiple Podman commands including create, exec, run, and start. Note that Podman reads stdin as soon as available, regardless of container process readiness.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/interactive.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--interactive\n-i\n```\n\n----------------------------------------\n\nTITLE: Pushing and Signing Container Image with Podman\nDESCRIPTION: Command to push an image to a local registry while simultaneously signing it with a GPG key, using environment variables to specify the GPG home directory location.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo -E GNUPGHOME=$HOME/.gnupg \\\n    podman push \\\n    --tls-verify=false \\\n    --sign-by sgrunert@suse.com \\\n    localhost:5000/alpine\n…\nStoring signatures\n```\n\n----------------------------------------\n\nTITLE: Running Podman with Custom Group Mapping - shell\nDESCRIPTION: Illustrates usage of podman run with custom group addition and group ID mapping, volume binding, and working directory specification within the container. Requires proper subuid/subgid setup and Podman installed for rootless use. Key parameters include --group-add, --gidmap, --volume, and --workdir. This allows running containers with specific group permissions and directory structures.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ podman run \\\\\\n  --rm \\\\\\n  --group-add keep-groups \\\\\\n  --gidmap=\"+g102000:@2000\" \\\\\\n  --volume \"$PWD:/data:ro\" \\\\\\n  --workdir /data \\\\\\n  alpine ls -lisa\n```\n\n----------------------------------------\n\nTITLE: Applying Podman Containers and Volumes to Kubernetes - Bash\nDESCRIPTION: This snippet demonstrates how to use the podman kube apply command with a specified kubeconfig file and resource names to deploy a Podman volume and container to the default namespace in a Kubernetes cluster. No dependencies are required apart from Podman and a valid kubeconfig file. The command triggers a deployment, and the output includes confirmation and pod status retrieval using kubectl.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-apply.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman kube apply --kubeconfig /tmp/kubeconfig myvol vol-test-1\nDeploying to cluster...\nSuccessfully deployed workloads to cluster!\n$ kubectl get pods\nNAME             READY   STATUS    RESTARTS   AGE\nvol-test-1-pod   1/1     Running   0          9m\n```\n\n----------------------------------------\n\nTITLE: Connecting to QEMU VM via SSH on Windows\nDESCRIPTION: This command establishes an SSH connection to the QEMU virtual machine using the specified identity file and port.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/qemu-remote-tutorial.md#2025-04-23_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nssh -i C:\\qemu-remote\\remote -p 57561 core@127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Default Container Working Directory (Path)\nDESCRIPTION: Represents the default working directory (`/`, the root directory) used within a Podman container. This default applies if neither the `--workdir` option is provided during command execution (`create`, `exec`, `run`) nor a `WORKDIR` instruction is set in the container image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/workdir.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/\n```\n\n----------------------------------------\n\nTITLE: Adding and Dropping DNS Servers in Podman Network | Shell CLI\nDESCRIPTION: This snippet illustrates combining the --dns-drop and --dns-add options with the podman network update command to simultaneously remove and add DNS servers for a specific network. This operation requires Podman (with netavark backend) and accepts the network name, DNS servers to drop, and DNS servers to add as parameters. The command modifies the targeted network's DNS resolver configuration to both discard and register the specified addresses, with changes effective as soon as the command completes.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-update.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman network update network1 --dns-drop 8.8.8.8 --dns-add 3.3.3.3\n```\n\n----------------------------------------\n\nTITLE: Configuring File Descriptor Preservation in Podman Exec and Run Commands\nDESCRIPTION: This option allows passing additional file descriptors to a process when using podman exec or run. It specifies the number of extra file descriptors to pass, in addition to the standard 0, 1, and 2. This feature is not available with remote Podman clients, including Mac and Windows (except WSL2).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/preserve-fds.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--preserve-fds=N\n```\n\n----------------------------------------\n\nTITLE: Inspecting Container Images Using Podman - Bash/Shell\nDESCRIPTION: Demonstrates usage of the 'podman image inspect' command to retrieve and display configuration details of a specific container image (e.g., Fedora). The first command shows how to output complete image information in JSON format, while the second uses the '--format' flag with a Go template to extract only the image ID. Prerequisite: Podman CLI must be installed. Input: image name or ID; Output: JSON or formatted text; Constraints: some fields depend on image metadata.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-inspect.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman image inspect fedora\n[\n    {\n        \"Id\": \"37e5619f4a8ca9dbc4d6c0ae7890625674a10dbcfb76201399e2aaddb40da17d\",\n        \"Digest\": \"sha256:1b0d4ddd99b1a8c8a80e885aafe6034c95f266da44ead992aab388e6aa91611a\",\n        \"RepoTags\": [\n            \"registry.fedoraproject.org/fedora:latest\"\n        ],\n        \"RepoDigests\": [\n            \"registry.fedoraproject.org/fedora@sha256:1b0d4ddd99b1a8c8a80e885aafe6034c95f266da44ead992aab388e6aa91611a\",\n            \"registry.fedoraproject.org/fedora@sha256:b5290db40008aae9272ad3a6bd8070ef7ecd547c3bef014b894c327960acc582\"\n        ],\n        \"Parent\": \"\",\n        \"Comment\": \"Created by Image Factory\",\n        \"Created\": \"2021-08-09T05:48:47Z\",\n        \"Config\": {\n            \"Env\": [\n                \"DISTTAG=f34container\",\n                \"FGC=f34\",\n                \"container=oci\"\n            ],\n            \"Cmd\": [\n                \"/bin/bash\"\n            ],\n            \"Labels\": {\n                \"license\": \"MIT\",\n                \"name\": \"fedora\",\n                \"vendor\": \"Fedora Project\",\n                \"version\": \"34\"\n            }\n        },\n        \"Version\": \"1.10.1\",\n        \"Author\": \"\",\n        \"Architecture\": \"amd64\",\n        \"Os\": \"linux\",\n        \"Size\": 183852302,\n        \"VirtualSize\": 183852302,\n        \"GraphDriver\": {\n            \"Name\": \"overlay\",\n            \"Data\": {\n                \"UpperDir\": \"/home/dwalsh/.local/share/containers/storage/overlay/0203e243f1ca4b6bb49371ecd21363212467ec6d7d3fa9f324cd4e78cc6b5fa2/diff\",\n                \"WorkDir\": \"/home/dwalsh/.local/share/containers/storage/overlay/0203e243f1ca4b6bb49371ecd21363212467ec6d7d3fa9f324cd4e78cc6b5fa2/work\"\n            }\n        },\n        \"RootFS\": {\n            \"Type\": \"layers\",\n            \"Layers\": [\n                \"sha256:0203e243f1ca4b6bb49371ecd21363212467ec6d7d3fa9f324cd4e78cc6b5fa2\"\n            ]\n        },\n        \"Labels\": {\n            \"license\": \"MIT\",\n            \"name\": \"fedora\",\n            \"vendor\": \"Fedora Project\",\n            \"version\": \"34\"\n        },\n        \"Annotations\": {},\n        \"ManifestType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n        \"User\": \"\",\n        \"History\": [\n            {\n                \"created\": \"2021-08-09T05:48:47Z\",\n                \"comment\": \"Created by Image Factory\"\n            }\n        ],\n        \"NamesHistory\": [\n            \"registry.fedoraproject.org/fedora:latest\"\n        ]\n    }\n]\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ podman image inspect --format '{{ .Id }}' fedora\n37e5619f4a8ca9dbc4d6c0ae7890625674a10dbcfb76201399e2aaddb40da17d\n\n```\n\n----------------------------------------\n\nTITLE: Setting Podman Container Health Check Startup Timeout\nDESCRIPTION: Specifies the maximum duration allowed for a container's startup health check command to complete before being marked as failed. The timeout value can be expressed using time units like minutes and seconds. If not specified, defaults to 30 seconds.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-startup-timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--health-startup-timeout=2m3s\n```\n\n----------------------------------------\n\nTITLE: Running Podman Container with Read-Only Rootfs\nDESCRIPTION: This command demonstrates how to run a Podman container with a read-only rootfs after preparing it. It allows multiple containers to use the same read-only rootfs simultaneously.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n$ podman run --read-only --rootfs /path/to/rootfs ....\n```\n\n----------------------------------------\n\nTITLE: Forcibly Removing a Podman Network and Containers - shell\nDESCRIPTION: This snippet shows how to delete a Podman network and forcibly remove all containers attached to that network using the '-f' (force) flag in the Podman CLI. When the force option is used, any containers using the specified network are stopped and then removed. Prerequisites are an installed Podman CLI and a named network with associated containers. Inputs are the flag and network name. The output is a network deletion confirmation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-rm.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# podman network rm -f fred\\nDeleted: fred\n```\n\n----------------------------------------\n\nTITLE: Copying File from Host to Container with podman cp - Shell\nDESCRIPTION: Displays how to copy a local file to a specific path in a container using podman cp. This requires podman and an existing container running or stopped. Parameters are the source file path on the host, container ID, and destination path in the container. Input is a host file; the output is the file placed at the designated path inside the container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-cp.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npodman cp /myapp/app.conf containerID:/myapp/app.conf\n```\n\n----------------------------------------\n\nTITLE: Podman Memory Limit Option Syntax\nDESCRIPTION: Defines the syntax for setting memory limits in Podman containers using the --memory or -m flag. Supports units in bytes (b), kibibytes (k), mebibytes (m), or gibibytes (g). Memory limits can exceed physical RAM if host supports swap memory. A limit of 0 means no memory restriction.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/memory.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--memory, -m=number[unit]\n```\n\n----------------------------------------\n\nTITLE: Configuring OS Option in Podman Build\nDESCRIPTION: The --os option allows specifying the operating system for the image being built and the base image to be pulled. This setting overrides the default behavior of using the host's operating system and affects how images are looked up in local storage.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/os.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--os=string\n```\n\n----------------------------------------\n\nTITLE: Showing Podman Events Within a Time Range - Bash\nDESCRIPTION: This snippet demonstrates retrieving Podman events from the past five minutes using the '--since 5m' option (along with 'sudo' for broader system access). It highlights time-based filtering, which accepts both RFC3339Nano timestamps and Go duration syntax. Output consists of all events from the specified window, giving a concise, recent view of system activity. Podman runtime and necessary privileges are required; input is the duration value.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-events.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo podman events --since 5m\n2019-03-02 10:44:29.598835409 -0600 CST container create b629d10d3831 (image=registry.k8s.io/pause:3.1, name=1df5ebca7b44-infra)\n2019-03-02 10:44:29.601746633 -0600 CST pod create 1df5ebca7b44 (image=, name=confident_hawking)\n2019-03-02 10:44:42.371100253 -0600 CST container create 170a0f457d00 (image=registry.k8s.io/pause:3.1, name=ca731231718e-infra)\n2019-03-02 10:44:42.374637304 -0600 CST pod create ca731231718e (image=, name=webapp)\n```\n\n----------------------------------------\n\nTITLE: Running Podman API Service Directly with Inactivity Timeout - CLI - Shell\nDESCRIPTION: This command launches the Podman API service directly from the command line, bypassing systemd socket activation. The '--time 5' argument specifies a 5-second inactivity timeout, after which the daemon process will terminate if idle. This method is intended for testing, development, or scenarios where systemd integration is not available or desired. The default socket is used unless an alternative endpoint is provided.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-service.1.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npodman system service --time 5\n```\n\n----------------------------------------\n\nTITLE: Setting Container Capabilities in Podman Container Unit\nDESCRIPTION: Example showing how to add multiple system capabilities to a container using the AddCapability option in a .container unit file. The capabilities are specified as a space-separated list.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nAddCapability=CAP_DAC_OVERRIDE CAP_IPC_OWNER\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Tracer Using OpenTracing in Go\nDESCRIPTION: Demonstrates setting a global tracer at the start of a Go application using an implementation-specific tracer instance. Requires importing the primary OpenTracing Go package and a tracing back-end. The main() function installs the global tracer, enabling tracing throughout the application. Inputs: tracing implementation and configuration. Outputs: global tracer set for use. Ensure the tracing implementation provides a New(...) constructor.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n    import \"github.com/opentracing/opentracing-go\"\n    import \".../some_tracing_impl\"\n\n    func main() {\n        opentracing.SetGlobalTracer(\n            // tracing impl specific:\n            some_tracing_impl.New(...),\n        )\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Logrus Usage in Go\nDESCRIPTION: Shows a simple example of using Logrus as a drop-in replacement for the standard library logger, demonstrating field-based logging.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n  }).Info(\"A walrus appears\")\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Compressed Image Archive Quietly (Bash)\nDESCRIPTION: This command loads a container image from a compressed tar archive file (`fedora.tar.gz`) specified using the `--input` (`-i`) option. The `--quiet` (`-q`) option is used to suppress the progress output during the loading process.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-load.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman load --quiet -i fedora.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Environment Variables in Go\nDESCRIPTION: Shows how to use shellwords.ParseWithEnvs() to extract both environment variables and command arguments from a string.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-shellwords/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nenvs, args, err := shellwords.ParseWithEnvs(\"FOO=foo BAR=baz ./foo --bar=baz\")\n// envs should be [\"FOO=foo\", \"BAR=baz\"]\n// args should be [\"./foo\", \"--bar=baz\"]\n```\n\n----------------------------------------\n\nTITLE: Executing Podman Pod Subcommands in Shell\nDESCRIPTION: This snippet shows the basic syntax for invoking `podman pod` commands. The user needs to replace `*subcommand*` with a specific subcommand (e.g., `create`, `ps`, `start`, `stop`) to manage Podman pods. It requires Podman to be installed on the system.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman pod *subcommand*\n```\n\n----------------------------------------\n\nTITLE: Listing Running Containers with Podman - Shell\nDESCRIPTION: This snippet lists all currently running containers using Podman's 'ps' command. It is used after creating or starting containers to confirm their active status. No special dependencies other than Podman are needed. The output is a table listing container IDs, images, and status.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npodman ps\n```\n\n----------------------------------------\n\nTITLE: Creating a Dual-Stack Podman Network\nDESCRIPTION: Create a network with both IPv4 and IPv6 subnets and gateways defined. This enables containers to have both IPv4 and IPv6 connectivity.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-create.1.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ podman network create --subnet 192.168.55.0/24 --gateway 192.168.55.3 --subnet fd52:2a5a:747e:3acd::/64 --gateway fd52:2a5a:747e:3acd::10\npodman4\n```\n\n----------------------------------------\n\nTITLE: Setting User Namespace Mode in Podman\nDESCRIPTION: Demonstrates the usage of the --userns option to set the user namespace mode for Podman containers. It includes examples of different modes and their effects on user mapping between host and container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/userns.container.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--userns=mode\n```\n\n----------------------------------------\n\nTITLE: Setting MAC Address for Podman Container/Pod\nDESCRIPTION: Command option for specifying a MAC address for a container or pod network interface. Only usable with single network connections and not with container network namespace sharing. The MAC address must be unique within the Ethernet network.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mac-address.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--mac-address=address\n```\n\n----------------------------------------\n\nTITLE: Listing All Containers with Podman\nDESCRIPTION: Uses the podman ps -a command to list all containers, including stopped and created ones. The -a flag shows containers regardless of their status.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-ps.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman ps -a\nCONTAINER ID   IMAGE         COMMAND         CREATED       STATUS                    PORTS     NAMES\n02f65160e14ca  redis:alpine  \"redis-server\"  19 hours ago  Exited (-1) 19 hours ago  6379/tcp  k8s_podsandbox1-redis_podsandbox1_redhat.test.crio_redhat-test-crio_0\n69ed779d8ef9f  redis:alpine  \"redis-server\"  25 hours ago  Created                   6379/tcp  k8s_container1_podsandbox1_redhat.test.crio_redhat-test-crio_1\n```\n\n----------------------------------------\n\nTITLE: Configuring GID Mapping for Podman Pods\nDESCRIPTION: This option allows setting a GID map for the user namespace in Podman pods. It is used with the 'pod clone' and 'pod create' commands. The format is pod_gid:host_gid:amount. This option enables user namespaces for all containers in the pod and conflicts with --userns and --subgidname flags.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/gidmap.pod.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--gidmap=pod_gid:host_gid:amount\n```\n\n----------------------------------------\n\nTITLE: Building a URL for a Route with Host, Path, and Query Variables in Go\nDESCRIPTION: Demonstrates building a complete URL for a complex named route ('article') using `r.Get().URL()`. It provides values for host ('subdomain'), path ('category', 'id'), and query ('filter') variables defined in the route.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n```go\n// url.String() will be \"http://news.example.com/articles/technology/42?filter=gorilla\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\",\n                                 \"filter\", \"gorilla\")\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful HTTP Server Shutdown with Gorilla Mux in Go\nDESCRIPTION: Presents a complete Go program demonstrating how to achieve graceful shutdown for an `http.Server` using `gorilla/mux`. It involves running the server in a goroutine, listening for interrupt signals (SIGINT), and using `server.Shutdown()` with a context timeout to allow existing connections to finish.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n```go\npackage main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"os/signal\"\n    \"time\"\n\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    var wait time.Duration\n    flag.DurationVar(&wait, \"graceful-timeout\", time.Second * 15, \"the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m\")\n    flag.Parse()\n\n    r := mux.NewRouter()\n    // Add your routes as needed\n\n    srv := &http.Server{\n        Addr:         \"0.0.0.0:8080\",\n        // Good practice to set timeouts to avoid Slowloris attacks.\n        WriteTimeout: time.Second * 15,\n        ReadTimeout:  time.Second * 15,\n        IdleTimeout:  time.Second * 60,\n        Handler: r, // Pass our instance of gorilla/mux in.\n    }\n\n    // Run our server in a goroutine so that it doesn't block.\n    go func() {\n        if err := srv.ListenAndServe(); err != nil {\n            log.Println(err)\n        }\n    }()\n\n    c := make(chan os.Signal, 1)\n    // We'll accept graceful shutdowns when quit via SIGINT (Ctrl+C)\n    // SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught.\n    signal.Notify(c, os.Interrupt)\n\n    // Block until we receive our signal.\n    <-c\n\n    // Create a deadline to wait for.\n    ctx, cancel := context.WithTimeout(context.Background(), wait)\n    defer cancel()\n    // Doesn't block if no connections, but will otherwise wait\n    // until the timeout deadline.\n    srv.Shutdown(ctx)\n    // Optionally, you could run srv.Shutdown in a goroutine and block on\n    // <-ctx.Done() if your application should wait for other services\n    // to finalize based on context cancellation.\n    log.Println(\"shutting down\")\n    os.Exit(0)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Kernel Parameters with --sysctl in Podman\nDESCRIPTION: This snippet describes the usage of the --sysctl option in Podman commands. It allows configuration of namespaced kernel parameters at runtime for containers or pods. The option accepts key-value pairs in the format 'name=value'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sysctl.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--sysctl**=*name=value*\n```\n\n----------------------------------------\n\nTITLE: Configuring Podman Build Options\nDESCRIPTION: This snippet demonstrates the configuration options for Podman build units. It includes settings for specifying the Containerfile, build arguments, image tags, and various other build-related options.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\n[Build]\nAnnotation=annotation=value\nArch=aarch64\nAuthFile=/etc/registry/auth.json\nContainersConfModule=/etc/nvd.conf\nDNS=192.168.55.1\nDNSOption=ndots:1\nDNSSearch=example.com\nEnvironment=foo=bar\nFile=/path/to/Containerfile\nForceRM=false\nGlobalArgs=--log-level=debug\nGroupAdd=keep-groups\nImageTag=localhost/imagename\nLabel=label\nNetwork=host\nPodmanArgs=--pull never\nPull=never\nRetry=5\nRetryDelay=10s\nSecret=secret\nSetWorkingDirectory=unit\nTarget=my-app\nTLSVerify=false\nVariant=arm/v7\nVolume=/source:/dest\n```\n\n----------------------------------------\n\nTITLE: Querying Default Rootless Network Driver in Podman - Bash\nDESCRIPTION: This Bash snippet shows how to determine the default network backend (e.g., 'pasta') used by rootless Podman setups. It leverages the '--format' flag with 'podman info' to print the RootlessNetworkCmd field. This helps diagnose or tune network performance in rootless containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ podman info -f '{{.Host.RootlessNetworkCmd}}'\\npasta\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Client Usage in Go\nDESCRIPTION: Demonstrates how to create a Docker client and list images using go-dockerclient. The example shows connecting to Docker using environment variables and iterating through image details.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/fsouza/go-dockerclient/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tdocker \"github.com/fsouza/go-dockerclient\"\n)\n\nfunc main() {\n\tclient, err := docker.NewClientFromEnv()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\timgs, err := client.ListImages(docker.ListImagesOptions{All: false})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, img := range imgs {\n\t\tfmt.Println(\"ID: \", img.ID)\n\t\tfmt.Println(\"RepoTags: \", img.RepoTags)\n\t\tfmt.Println(\"Created: \", img.Created)\n\t\tfmt.Println(\"Size: \", img.Size)\n\t\tfmt.Println(\"VirtualSize: \", img.VirtualSize)\n\t\tfmt.Println(\"ParentId: \", img.ParentID)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Pruning All Unused Volumes in Podman\nDESCRIPTION: Basic example of pruning all unused volumes in Podman. This command removes volumes that are not currently used by any containers after prompting for confirmation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-prune.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume prune\n```\n\n----------------------------------------\n\nTITLE: Inspecting Secret Name and Secret Data - Displaying Raw Secret - Podman CLI - Bash\nDESCRIPTION: This example uses the --showsecret flag to display the actual secret data together with its name, using Go template formatting. The command outputs both the Spec.Name and SecretData of the secret 'mysecret' to the screen. Requires Podman, access to the named secret, and caution in environments where secret data display could compromise sensitive information. Outputs Name and secret value as plain text based on the template.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-secret-inspect.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman secret inspect --showsecret --format \"{{.Spec.Name}} {{.SecretData}}\" mysecret\n```\n\n----------------------------------------\n\nTITLE: Testing Remote Connection with Podman Info\nDESCRIPTION: Command to test the Podman remote connection by retrieving system information from the Linux server. This verifies that the client can successfully communicate with the server.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/mac_win_client.md#2025-04-23_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\Users\\baude> podman info\n```\n\n----------------------------------------\n\nTITLE: Using --cache-from with --cache-to in Podman Build\nDESCRIPTION: Example showing how to populate and consult a remote cache repository during a Podman build. This command builds an image with layers, stores cache in a remote registry, and also uses that registry as a cache source.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cache-from.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# populate a cache and also consult it\nbuildah build -t test --layers --cache-to registry/myrepo/cache --cache-from registry/myrepo/cache .\n```\n\n----------------------------------------\n\nTITLE: Starting the Podman Service with Systemd (Rootless)\nDESCRIPTION: Command to start the Podman system service for a non-privileged (rootless) user using systemd.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/bindings/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ systemctl start --user podman.socket\n```\n\n----------------------------------------\n\nTITLE: Calling C Functions from Go using Purego\nDESCRIPTION: This example demonstrates how to use Purego to call C functions from Go without Cgo on macOS and Linux. It loads the system library, registers the 'puts' function, and calls it.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/ebitengine/purego/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n\n\t\"github.com/ebitengine/purego\"\n)\n\nfunc getSystemLibrary() string {\n\tswitch runtime.GOOS {\n\tcase \"darwin\":\n\t\treturn \"/usr/lib/libSystem.B.dylib\"\n\tcase \"linux\":\n\t\treturn \"libc.so.6\"\n\tdefault:\n\t\tpanic(fmt.Errorf(\"GOOS=%s is not supported\", runtime.GOOS))\n\t}\n}\n\nfunc main() {\n\tlibc, err := purego.Dlopen(getSystemLibrary(), purego.RTLD_NOW|purego.RTLD_GLOBAL)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar puts func(string)\n\tpurego.RegisterLibFunc(&puts, libc, \"puts\")\n\tputs(\"Calling C from Go without Cgo!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Podman Container (INI)\nDESCRIPTION: Demonstrates how to set environment variables for a Podman container using Quadlet configuration. Variables can be set directly or loaded from a file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nEnvironment=KEY1=VALUE1 KEY2=VALUE2\nEnvironmentFile=/path/to/env/file\n```\n\n----------------------------------------\n\nTITLE: Configuring User Namespace with --subuidname in Podman\nDESCRIPTION: The --subuidname option allows running a container in a new user namespace using a specified map from the /etc/subuid file. It is applicable to podman create, pod clone, pod create, and run commands. This option conflicts with --userns and --uidmap flags.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/subuidname.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--subuidname**=*name*\n```\n\n----------------------------------------\n\nTITLE: RamFS Mount with Size Limit\nDESCRIPTION: Mount a ramfs filesystem with 512MB size limit\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mount.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntype=ramfs,tmpfs-size=512M,destination=/path/in/container\n```\n\n----------------------------------------\n\nTITLE: Mounting Multiple Images with Podman - Bash/Shell\nDESCRIPTION: Demonstrates how to mount the root filesystems of multiple container images using the podman image mount command. Requires Podman to be installed; for rootless environments, the user must first execute podman unshare. Accepts one or more image names as input, and outputs mountpoints for each image. The code shows mounting 'fedora' and 'ubi8-init' images and outputs the resulting paths.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-mount.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman image mount fedora ubi8-init\n/var/lib/containers/storage/overlay/f3ac502d97b5681989dff84dfedc8354239bcecbdc2692f9a639f4e080a02364/merged\n/var/lib/containers/storage/overlay/0ff7d7ca68bed1ace424f9df154d2dd7b5a125c19d887f17653cbcd5b6e30ba1/merged\n```\n\n----------------------------------------\n\nTITLE: Setting User and Group in Podman Commands\nDESCRIPTION: This option allows specifying the username/UID and optionally the groupname/GID for Podman commands. It affects the user context in which the container command runs. The syntax supports both symbolic and numeric values for user and group.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/user.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--user, -u=user[:group]\n```\n\n----------------------------------------\n\nTITLE: Extracting a Specific Blob by Title from OCI Artifact - Podman CLI - Shell\nDESCRIPTION: Illustrates selectively extracting a single blob by its OCI title annotation from an artifact with multiple blobs using the '--title' option. The command requires Podman and an artifact in a compatible format. The target must be a directory, and only the blob matching the provided title (e.g., README.md) will be extracted and saved with that name. Listing verifies the extraction.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-artifact-extract.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman artifact extract --title README.md quay.io/artifact/foobar2:test /tmp/mydir\n$ ls /tmp/mydir\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Adding Named SSH Connection to Podman Service in Shell\nDESCRIPTION: Demonstrates adding a system connection named 'QA' that points to a remote Podman service at 'podman.example.com'. This command assumes default SSH settings (port 22, current user) as no specific user, port, or identity file is provided.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-connection-add.1.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ podman system connection add QA podman.example.com\n```\n\n----------------------------------------\n\nTITLE: Creating a Templated Podman Quadlet Service - systemd unit file - ini\nDESCRIPTION: This complete systemd unit file snippet illustrates how to define a template Quadlet file (e.g., sleep@.container) that can be instantiated with various parameters. The [Unit] section provides a description, [Container] defines the image and uses Exec with %i for per-instance values, [Service] defines a restart policy, and [Install] specifies boot targets and DefaultInstance. Template units allow multiple instances (e.g., sleep@100.service) with optional instance-specific drop-ins, facilitating reusable and customized containerized workloads with Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\\nDescription=A templated sleepy container\\n\\n[Container]\\nImage=quay.io/fedora/fedora\\nExec=sleep %i\\n\\n[Service]\\n# Restart service when sleep finishes\\nRestart=always\\n\\n[Install]\\nWantedBy=multi-user.target\\nDefaultInstance=100\n```\n\n----------------------------------------\n\nTITLE: Running CNI Network Tests in Go\nDESCRIPTION: Command for running tests on the CNI network implementation module with verbose output, vendor mode, and coverage reporting. Running tests as root allows testing setup/teardown operations that require CNI plugins.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/common/libnetwork/cni/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v -mod=vendor -cover ./libpod/network/cni/\n```\n\n----------------------------------------\n\nTITLE: Installing and Enabling Generated systemd Unit Files with Podman and systemctl - Bash\nDESCRIPTION: This Bash code shows the steps to copy Podman-generated systemd unit files to the appropriate systemd directories for both root and user scopes and to enable auto-start at boot or user login using systemctl. Dependencies include sudo/system privileges for /etc/systemd/system and Podman-created unit files. Copy and enable commands are required, while the code demonstrates output indicating successful activation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-generate-systemd.1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Generated systemd files.\n$ podman pod create --name systemd-pod\n$ podman create --pod systemd-pod alpine top\n$ podman generate systemd --files --name systemd-pod\n\n# Copy all the generated files.\n\n$ sudo cp pod-systemd-pod.service container-great_payne.service /etc/systemd/system\n$ systemctl enable pod-systemd-pod.service\nCreated symlink /etc/systemd/system/multi-user.target.wants/pod-systemd-pod.service → /etc/systemd/system/pod-systemd-pod.service.\nCreated symlink /etc/systemd/system/default.target.wants/pod-systemd-pod.service → /etc/systemd/system/pod-systemd-pod.service.\n$ systemctl is-enabled pod-systemd-pod.service\nenabled\n```\n\n----------------------------------------\n\nTITLE: Defining SBOM PURL Output Option for Podman Farm Build\nDESCRIPTION: This snippet defines the --sbom-purl-output option for the Podman farm build command. It specifies that when generating SBOMs, the command will scan for PURL information and save the found PURLs to a specified file in the local filesystem.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sbom-purl-output.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--sbom-purl-output**=*file*\n```\n\n----------------------------------------\n\nTITLE: Defining Ulimit Option for Podman Build and Farm Build in Markdown\nDESCRIPTION: This snippet defines the --ulimit option for Podman build and farm build commands. It specifies the syntax for setting resource limits and lists various resource types that can be controlled, along with their corresponding ulimit flags.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/ulimit.image.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--ulimit**=*type=soft-limit[:hard-limit]*\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Podman Images Before a Specific Timestamp (Shell)\nDESCRIPTION: This command removes all unused images (`-a` flag) that were created before the specified timestamp. The `--filter until=` option takes a date-formatted timestamp (RFC3339Nano format). It prompts for confirmation before deleting the matched images and outputs their IDs upon completion.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-prune.1.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo podman image prune -a --filter until=2019-11-14T06:15:42.937792374Z\n\nWARNING! This will remove all dangling images.\nAre you sure you want to continue? [y/N] y\ne813d2135f17fadeffeea8159a34cfdd4c30b98d8111364b913a91fd930643e9\n5e6572320437022e2746467ddf5b3561bf06e099e8e6361df27e0b2a7ed0b17b\n58fda2abf5042b35dfe04e5f8ee458a3cc26375bf309efb42c078b551a2055c7\n6d2bd30fe924d3414b64bd3920760617e6ced872364bc3bc6959a623252da002\n33d1c829be64a1e1d379caf4feec1f05a892c3ef7aa82c0be53d3c08a96c59c5\nf9f0a8a58c9e02a2b3250b88cc5c95b1e10245ca2c4161d19376580aaa90f55c\n1ef14d5ede80db78978b25ad677fd3e897a578c3af614e1fda608d40c8809707\n45e1482040e441a521953a6da2eca9bafc769e15667a07c23720d6e0cafc3ab2\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Alias for Podman\nDESCRIPTION: Simple alias command that allows users to use the 'docker' command to invoke Podman, facilitating migration from Docker to Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nalias docker=podman\n```\n\n----------------------------------------\n\nTITLE: Adding Various Route Matchers in Gorilla Mux\nDESCRIPTION: This set of examples demonstrates different ways to add matchers to routes in Gorilla Mux, including path prefixes, HTTP methods, URL schemes, headers, query values, and custom matcher functions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nr.PathPrefix(\"/products/\")\n\nr.Methods(\"GET\", \"POST\")\n\nr.Schemes(\"https\")\n\nr.Headers(\"X-Requested-With\", \"XMLHttpRequest\")\n\nr.Queries(\"key\", \"value\")\n\nr.MatcherFunc(func(r *http.Request, rm *RouteMatch) bool {\n    return r.ProtoMajor == 0\n})\n```\n\n----------------------------------------\n\nTITLE: Signing and Verifying PKCS7 Messages in Go\nDESCRIPTION: This Go snippet defines a function SignAndDetach that signs data using a PKCS7 detached signature with the smallstep/pkcs7 library, and verifies the signature upon completion. It requires inputs: raw content bytes, an x509 certificate, and an RSA private key; it returns the signed PKCS7 bytes. Dependencies include the smallstep/pkcs7 package, crypto/x509, crypto/rsa, encoding/pem, and standard libraries. A PEM-encoded signature is printed to stdout, the signature’s integrity is validated by parsing the output and reattaching the detached content, and errors are handled at each step. The function expects well-formed certificates and valid RSA private keys as input and will return detailed errors on failure.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/smallstep/pkcs7/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"os\"\n\n    \"github.com/smallstep/pkcs7\"\n)\n\nfunc SignAndDetach(content []byte, cert *x509.Certificate, privkey *rsa.PrivateKey) (signed []byte, err error) {\n\ttoBeSigned, err := NewSignedData(content)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Cannot initialize signed data: %w\", err)\n\t}\n\tif err = toBeSigned.AddSigner(cert, privkey, SignerInfoConfig{}); err != nil {\n\t\treturn fmt.Errorf(\"Cannot add signer: %w\", err)\n\t}\n\n\t// Detach signature, omit if you want an embedded signature\n\ttoBeSigned.Detach()\n\n\tsigned, err = toBeSigned.Finish()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Cannot finish signing data: %w\", err)\n\t}\n\n\t// Verify the signature\n\tpem.Encode(os.Stdout, &pem.Block{Type: \"PKCS7\", Bytes: signed})\n\tp7, err := pkcs7.Parse(signed)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Cannot parse our signed data: %w\", err)\n\t}\n\n\t// since the signature was detached, reattach the content here\n\tp7.Content = content\n\n\tif bytes.Compare(content, p7.Content) != 0 {\n\t\treturn fmt.Errorf(\"Our content was not in the parsed data:\\n\\tExpected: %s\\n\\tActual: %s\", content, p7.Content)\n\t}\n\tif err = p7.Verify(); err != nil {\n\t\treturn fmt.Errorf(\"Cannot verify our signed data: %w\", err)\n\t}\n\n\treturn signed, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Saving Key-Value Pairs in BoltDB using Go\nDESCRIPTION: This code shows how to save a key-value pair to a bucket using the Bucket.Put() function within a database update transaction.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ndb.Update(func(tx *bolt.Tx) error {\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\terr := b.Put([]byte(\"answer\"), []byte(\"42\"))\n\treturn err\n})\n```\n\n----------------------------------------\n\nTITLE: Removing All Tags from a Podman Image by ID\nDESCRIPTION: This command demonstrates how to remove all associated names (tags) from a locally stored Podman image identified by its ID (0e3bbc2). If no specific tag is provided, 'podman untag' removes all names linked to the image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-untag.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman untag 0e3bbc2\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus Hooks for Multi-destination Logging in Go\nDESCRIPTION: Demonstrates how to implement logging hooks in Logrus that send errors to an exception tracking service and connect to syslog. The code shows initialization of Airbrake and syslog hooks with appropriate error handling.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n  \"gopkg.in/gemnasium/logrus-airbrake-hook.v2\" // the package is named \"airbrake\"\n  logrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n  \"log/syslog\"\n)\n\nfunc init() {\n\n  // Use the Airbrake hook to report errors that have Error severity or above to\n  // an exception tracker. You can create custom hooks, see the Hooks section.\n  log.AddHook(airbrake.NewHook(123, \"xyz\", \"production\"))\n\n  hook, err := logrus_syslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n  if err != nil {\n    log.Error(\"Unable to connect to local syslog daemon\")\n  } else {\n    log.AddHook(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DNS Search Domains in Podman Containers\nDESCRIPTION: This snippet demonstrates how to use the --dns-search option in Podman to set custom DNS search domains for containers. It also shows how to remove the search domain using a dot.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/dns-search.container.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--dns-search=domain\n```\n\nLANGUAGE: bash\nCODE:\n```\n--dns-search=.\n```\n\n----------------------------------------\n\nTITLE: Unmounting a Single Volume in Podman\nDESCRIPTION: Example showing how to unmount a volume with a given ID in Podman. This command decrements the mount counter for the specified volume.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-unmount.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman volume unmount volumeID\n```\n\n----------------------------------------\n\nTITLE: Defining --userns-gid-map-group Option for Podman Build Commands\nDESCRIPTION: This snippet defines the --userns-gid-map-group option for Podman build and farm build commands. It specifies a group name to be used for finding GID mappings in the /etc/subgid file, which are then used to set ownership at the filesystem level on the working container's contents.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/userns-gid-map-group.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--userns-gid-map-group**=*group*\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Podman passing through command exit code\nDESCRIPTION: Example showing how Podman passes through the exit code from the command executed within the container, in this case returning 3 from a shell script.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman.1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run busybox /bin/sh -c 'exit 3'; echo $?\n3\n```\n\n----------------------------------------\n\nTITLE: Enabling Podman Socket and Lingering for Systemd User Sessions - Systemd - Shell\nDESCRIPTION: This command sequence activates the user-level podman.socket at boot and enables 'lingering', ensuring user services continue running or are available even after the user logs out. The 'systemctl --user enable' command makes the podman.socket available on login, while 'loginctl enable-linger <USER>' allows user-level services to persist. Replace <USER> with the specific username.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-service.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl --user enable podman.socket\nloginctl enable-linger <USER>\n```\n\n----------------------------------------\n\nTITLE: Building container image with DNF cache overlay\nDESCRIPTION: Builds the container image using Podman, utilizing the prepared DNF metadata cache as an overlay mount to speed up the process.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ podman build -v $HOME/dnf_cache_f36:/var/cache/dnf:O -t cowsay $HOME/ctr\n```\n\n----------------------------------------\n\nTITLE: Comparing Two Images in JSON Format using Podman CLI\nDESCRIPTION: This example uses `podman image diff` to compare the filesystems of two images (`redis:old` and `redis:alpine`). The `--format json` option specifies the output format. The result is a JSON object containing arrays of changed and added file paths.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-diff.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman image diff --format json redis:old redis:alpine\n{\n  \"changed\": [\n    \"/usr\",\n    \"/usr/local\",\n    \"/usr/local/bin\"\n  ],\n  \"added\": [\n    \"/usr/local/bin/docker-entrypoint.sh\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TTY Option for Podman Container Commands in Markdown\nDESCRIPTION: This snippet defines the --tty (-t) option for Podman container commands. It explains that the option allocates a pseudo-TTY when set to true, which is useful for interactive shells. It also notes limitations regarding output redirection and pipe handling.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/tty.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--tty**, **-t**\n\nAllocate a pseudo-TTY. The default is **false**.\n\nWhen set to **true**, Podman allocates a pseudo-tty and attach to the standard\ninput of the container. This can be used, for example, to run a throwaway\ninteractive shell.\n\n**NOTE**: The --tty flag prevents redirection of standard output.  It combines STDOUT and STDERR, it can insert control characters, and it can hang pipes. This option is only used when run interactively in a terminal. When feeding input to Podman, use -i only, not -it.\n```\n\n----------------------------------------\n\nTITLE: Launching gvproxy for QEMU VM Communication\nDESCRIPTION: Command to start the gvproxy process that handles communication between the Windows host and QEMU VM. It sets up port forwarding for SSH and forwards the Podman socket for remote access.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/qemu-remote-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngvproxy.exe -listen-qemu unix://C:/qemu-remote/vlan_remote.sock -pid-file C:\\qemu-remote\\proxy.pid -ssh-port 57561 -forward-sock C:\\qemu-remote\\podman.sock -forward-dest /run/user/501/podman/podman.sock -forward-user core -forward-identity C:\\qemu-remote\\remote\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Deployment with Podman Quadlet\nDESCRIPTION: Example of a Kube unit file that deploys a Kubernetes YAML configuration. The unit specifies systemd dependencies and uses the Quadlet Kube directive to point to a deployment file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_50\n\nLANGUAGE: INI\nCODE:\n```\n[Unit]\nDescription=A kubernetes yaml based service\nBefore=local-fs.target\n\n[Kube]\nYaml=/opt/k8s/deployment.yml\n\n[Install]\n# Start by default on boot\nWantedBy=multi-user.target default.target\n```\n\n----------------------------------------\n\nTITLE: Switching on the Original Error Type Using errors.Cause in Go\nDESCRIPTION: This snippet demonstrates how to use errors.Cause to unwrap a wrapped error and perform type-specific handling using a switch. Dependency: github.com/pkg/errors. Key parameter: 'err' is the wrapped error. The output is determined by the unwrapped error type, allowing application-specific error handling logic.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Flag Option in Podman\nDESCRIPTION: This snippet defines the --runtime-flag option for Podman. It allows users to add global flags for the container runtime. The option requires a flag parameter and supports various container runtime flags.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/runtime-flag.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--runtime-flag**=*flag*\n```\n\n----------------------------------------\n\nTITLE: Copying an Image from Root to User Storage on the Same Host\nDESCRIPTION: This command, run with `sudo`, copies the 'alpine' image from the root user's Podman storage (`root@localhost::alpine`) to another user's storage (`username@localhost::`) on the same machine. This demonstrates transferring images between rootful and rootless Podman environments locally without needing SSH.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-scp.1.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo podman image scp root@localhost::alpine username@localhost::\nCopying blob e2eb06d8af82 done\nCopying config 696d33ca15 done\nWriting manifest to image destination\nStoring signatures\nGetting image source signatures\nCopying blob 5eb901baf107 skipped: already exists\nCopying config 696d33ca15 done\nWriting manifest to image destination\nStoring signatures\nLoaded image: docker.io/library/alpine:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Startup Interval in Podman\nDESCRIPTION: This option allows setting the interval for startup health checks in Podman containers. It can be used with 'create', 'run', and 'update' commands. The interval can be specified as a time duration or set to 'disable' to prevent automatic timer setup.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-startup-interval.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--health-startup-interval**=*interval*\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Detach Keys in Podman\nDESCRIPTION: This code snippet shows how to modify the containers.conf file to change the default detach keys for all Podman containers. It addresses the issue of detach key conflicts with shell history navigation.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n$ cat >> ~/.config/containers/containers.conf << _eof\n[engine]\ndetach_keys=\"ctrl-q,ctrl-q\"\n_eof\n```\n\n----------------------------------------\n\nTITLE: Querying Child Layers and Images with Podman CLI --whatrequires Flag - Shell\nDESCRIPTION: Illustrates advanced usage of 'podman image tree' with the '--whatrequires' flag, returning not only the specified image's tree but also its child images and their layers. This command is useful for dependency analysis and expects an image ID and an optional flag; the hierarchical output shows parent-child relations using ASCII indentation. Like the previous snippet, only Podman CLI is required, and output is printed to the console.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-tree.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman image tree ae96a4ad4f3f --whatrequires\nImage ID: ae96a4ad4f3f\nTags:    [docker.io/library/ruby:latest]\nSize:    894.2MB\nImage Layers\n└──  ID: 9c92106221c7 Size:  2.56kB Top Layer of: [docker.io/library/ruby:latest]\n ├──  ID: 1b90f2b80ba0 Size: 3.584kB\n │   ├──  ID: 42b7d43ae61c Size: 169.5MB\n │   ├──  ID: 26dc8ba99ec3 Size: 2.048kB\n │   ├──  ID: b4f822db8d95 Size: 3.957MB\n │   ├──  ID: 044e9616ef8a Size: 164.7MB\n │   ├──  ID: bf94b940200d Size: 11.75MB\n │   ├──  ID: 4938e71bfb3b Size: 8.532MB\n │   └──  ID: f513034bf553 Size: 1.141MB\n ├──  ID: 1e55901c3ea9 Size: 3.584kB\n ├──  ID: b62835a63f51 Size: 169.5MB\n ├──  ID: 9f4e8857f3fd Size: 2.048kB\n ├──  ID: c3b392020e8f Size: 3.957MB\n ├──  ID: 880163026a0a Size: 164.8MB\n ├──  ID: 8c78b2b14643 Size: 11.75MB\n ├──  ID: 830370cfa182 Size: 8.532MB\n └──  ID: 567fd7b7bd38 Size: 1.141MB Top Layer of: [docker.io/circleci/ruby:latest]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Delay for Podman Container Operations\nDESCRIPTION: Defines the --retry-delay option which sets the duration of delay between retry attempts when pulling or pushing images. The default behavior is an exponential backoff starting at two seconds, but setting this option uses a fixed delay without exponential increase.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/retry-delay.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--retry-delay**=*duration*\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Fields in Logrus - Go\nDESCRIPTION: This Go snippet illustrates the use of log.WithFields() to attach custom structured data to log messages, favoring discoverability over unstructured messages. Log fields can include contextual values like event, topic, and key. Dependency is Logrus. Inputs are arbitrary field-value pairs; output is a log with those fields attached, aiding log search and analytics.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nlog.WithFields(log.Fields{\\n  \"event\": event,\\n  \"topic\": topic,\\n  \"key\": key,\\n}).Fatal(\"Failed to send event\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SBOM Output Path for Podman Farm Build\nDESCRIPTION: This option specifies the path where generated Software Bill of Materials (SBOM) should be stored in the output image during the 'podman farm build' process. No default path is provided, so users must explicitly set this option if they want to store the SBOM in the image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sbom-image-output.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--sbom-image-output**=*path*\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Route with Gorilla Mux in Go\nDESCRIPTION: Demonstrates how to define a route with a specific path pattern (`/articles/{category}/{id:[0-9]+}`) and assign it a name ('article') using the `Name()` method on a `mux.Router` instance in Go. This allows the route's URL to be built later.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n```go\nr := mux.NewRouter()\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n  Name(\"article\")\n```\n```\n\n----------------------------------------\n\nTITLE: Setting up basic CNI network configuration for Podman\nDESCRIPTION: This command creates the necessary directory and downloads a basic CNI network configuration for Podman. It places the configuration file in the standard CNI configuration directory where Podman will recognize it.\nSOURCE: https://github.com/containers/podman/blob/main/cni/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /etc/cni/net.d\ncurl -qsSL https://raw.githubusercontent.com/containers/podman/main/cni/87-podman-bridge.conflist | sudo tee /etc/cni/net.d/87-podman-bridge.conflist\n```\n\n----------------------------------------\n\nTITLE: Stopping a Podman Virtual Machine - Shell\nDESCRIPTION: This shell command demonstrates how to stop a virtual machine named 'myvm' managed by Podman using the CLI. No additional dependencies are required beyond Podman itself. The primary parameter is the VM name ('myvm'). When executed, this halts the specified VM cleanly; omitting the name would default to stopping 'podman-machine-default'. This is intended for environments where Podman requires a Linux VM, especially on MacOS and Windows.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-stop.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine stop myvm\n```\n\n----------------------------------------\n\nTITLE: Using the cert-dir Option in Podman Commands\nDESCRIPTION: The --cert-dir option specifies a path containing certificates (*.crt, *.cert, *.key) to connect to container registries. The default path is /etc/containers/certs.d. This option is not available with the remote Podman client on Mac, Windows (excluding WSL2) machines.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cert-dir.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--cert-dir=*path*\n```\n\n----------------------------------------\n\nTITLE: Enabling Nested SELinux Modifications in Podman Containers\nDESCRIPTION: This option allows SELinux modifications within the container, permitting containers to modify SELinux labels on files and processes as long as SELinux policy allows.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/security-opt.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt label=nested\n```\n\n----------------------------------------\n\nTITLE: Setting Device Write IOPS Limit in Podman\nDESCRIPTION: Demonstrates how to set a write rate limit in IO operations per second for a specific device in Podman containers. The example shows limiting write operations to 1000 IOPS for /dev/sda device. This feature has limitations for non-root users and is not supported on cgroups V1 rootless systems.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/device-write-iops.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--device-write-iops=/dev/sda:1000\n```\n\n----------------------------------------\n\nTITLE: Using --noheading Option in Podman Commands\nDESCRIPTION: The --noheading (or -n) flag removes table headers from command output listings. This option is available across multiple Podman commands including artifact ls, image trust, images, machine list, network ls, pod ps, secret ls, and volume ls.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/noheading.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--noheading, -n\n```\n\n----------------------------------------\n\nTITLE: Extracting a Specific Blob by Digest from OCI Artifact - Podman CLI - Shell\nDESCRIPTION: Demonstrates usage of the '--digest' option to extract a single blob by digest from an OCI artifact with multiple blobs into a target directory. Podman and a valid artifact containing blobs with digests are required. The extracted file will be saved as README.md if the annotation is present, or as the digest if not. The 'ls' command confirms the file was extracted.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-artifact-extract.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ podman artifact extract --digest sha256:c0594e012b17fd9e6548355ceb571a79613f7bb988d7d883f112513601ac6e9a quay.io/artifact/foobar2:test /tmp/mydir\n$ ls /tmp/mydir\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Creating a tmpfs Mount in Podman Container\nDESCRIPTION: This command demonstrates how to create a tmpfs mount at /tmp within a Podman container. It specifies mount options including read-write access, size, and permissions mode.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/tmpfs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman <<subcommand>> -d --tmpfs /tmp:rw,size=787448k,mode=1777 my_image\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Tags to a Podman Image Simultaneously (Shell)\nDESCRIPTION: This command illustrates assigning multiple tags to a single source image (`mymariadb`) in one operation. The image `mymariadb` will now also be known by `mycontainerregistry.io/namespace/mariadb:10`, `mycontainerregistry.io/namespace/mariadb:10.11`, and `mycontainerregistry.io/namespace/mariadb:10.11.12`.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-tag.1.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ podman tag mymariadb mycontainerregistry.io/namespace/mariadb:10 mycontainerregistry.io/namespace/mariadb:10.11 mycontainerregistry.io/namespace/mariadb:10.11.12\n```\n\n----------------------------------------\n\nTITLE: Applying Environment Variables from io.Reader with gotenv in Go\nDESCRIPTION: This Go snippet shows how to use gotenv.Apply to load environment variables from any io.Reader, such as a string reader. After applying, variables are accessible via os.Getenv(). This approach is flexible for dynamic or remote environment data. The example expects the strings package for NewReader and os for Getenv.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/subosito/gotenv/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngotenv.Apply(strings.NewReader(\"APP_ID=1234567\"))\n\nlog.Println(os.Getenv(\"APP_ID\"))\n// Output: \"1234567\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Global jWalterWeatherman Instance in Go\nDESCRIPTION: This snippet shows how to create a non-global instance of jWalterWeatherman called a Notebook. It demonstrates setting up a custom Notepad with specific log levels and output destinations.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/jwalterweatherman/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nnotepad = jww.NewNotepad(jww.LevelInfo, jww.LevelTrace, os.Stdout, ioutil.Discard, \"\", log.Ldate|log.Ltime)\nnotepad.WARN.Println(\"Some warning\"\")\n```\n\n----------------------------------------\n\nTITLE: Inspecting All Volumes with Podman\nDESCRIPTION: This example demonstrates how to inspect all volumes using the --all flag with the podman volume inspect command. The output shows the same information as individual inspection but for all available volumes in the system.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-inspect.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume inspect --all\n[\n     {\n          \"Name\": \"myvol\",\n          \"Driver\": \"local\",\n          \"Mountpoint\": \"/home/myusername/.local/share/containers/storage/volumes/myvol/_data\",\n          \"CreatedAt\": \"2023-03-13T16:26:48.423069028-04:00\",\n          \"Labels\": {},\n          \"Scope\": \"local\",\n          \"Options\": {},\n          \"MountCount\": 0,\n          \"NeedsCopyUp\": true,\n          \"NeedsChown\": true\n     }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using jWalterWeatherman in Go\nDESCRIPTION: This snippet demonstrates how to import and use jWalterWeatherman for logging at different levels. It shows examples of logging errors, warnings, and information.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/jwalterweatherman/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    jww \"github.com/spf13/jwalterweatherman\"\n)\n\n...\n\nif err != nil {\n    // This is a pretty serious error and the user should know about\n    // it. It will be printed to the terminal as well as logged under the\n    // default thresholds.\n\n    jww.ERROR.Println(err)\n}\n\nif err2 != nil {\n    // This error isn't going to materially change the behavior of the\n    // application, but it's something that may not be what the user\n    // expects. Under the default thresholds, Warn will be logged, but\n    // not printed to the terminal. \n\n    jww.WARN.Println(err2)\n}\n\n// Information that's relevant to what's happening, but not very\n// important for the user. Under the default thresholds this will be\n// discarded.\n\njww.INFO.Printf(\"information %q\", response)\n```\n\n----------------------------------------\n\nTITLE: Unset All Environment Variables in Podman Containers\nDESCRIPTION: The --unsetenv-all option removes all default environment variables when creating or running a container. This includes variables from Podman, the image, and containers.conf.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/unsetenv-all.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--unsetenv-all**\n\nUnset all default environment variables for the container. Default environment\nvariables include variables provided natively by Podman, environment variables\nconfigured by the image, and environment variables from containers.conf.\n```\n\n----------------------------------------\n\nTITLE: Pre-Dumping Container Memory to Archive with Podman - Bash\nDESCRIPTION: This snippet shows how to pre-dump only the memory information of the latest running container ('-l') to an archive file 'pre-checkpoint.tar.gz' for incremental checkpointing. It requires Podman, CRIU support, and kernel support for the required features. This is used as a preparatory step for faster or layered checkpoints.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-checkpoint.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# podman container checkpoint -P -e pre-checkpoint.tar.gz -l\n```\n\n----------------------------------------\n\nTITLE: Unmounting Multiple Volumes in Podman\nDESCRIPTION: Example showing how to unmount multiple volumes in a single command by specifying multiple volume IDs. Each volume's mount counter will be decremented separately.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-unmount.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman volume unmount volumeID1 volumeID2 volumeID3\n```\n\n----------------------------------------\n\nTITLE: Configuring an Insecure Registry for Podman\nDESCRIPTION: This configuration snippet shows how to globally allow Podman to communicate with a specific registry over HTTP without TLS verification. It involves creating a file in `/etc/containers/registries.conf.d/` and defining the registry's location with `insecure = true`. This method bypasses default security measures and should be used with caution.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[[registry]]\nlocation = \"FULLY.QUALIFIED.NAME.OF.REGISTRY\"\ninsecure = true\n```\n\n----------------------------------------\n\nTITLE: Switch to Root User in Podman Machine\nDESCRIPTION: Escalates privileges from the default 'core' user to the 'root' user within the Podman machine's shell. This is necessary for modifying system-level directories like the certificate trust store when Podman is running in rootless mode.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[core@localhost ~]$ sudo su -\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling Data with 'json-iterator/go'\nDESCRIPTION: This snippet shows how to unmarshal JSON input using the 'json-iterator/go' library. It imports 'github.com/json-iterator/go', sets up a standard-library-compatible configuration ('jsoniter.ConfigCompatibleWithStandardLibrary'), and then calls the 'Unmarshal' method on this configured instance, passing the input byte slice and a pointer to the destination data structure.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Defining Seccomp Policy Option for Podman in Markdown\nDESCRIPTION: This snippet defines the --seccomp-policy option for Podman create and run commands. It allows specifying whether to use the image's seccomp profile or follow the default policy.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/seccomp-policy.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--seccomp-policy**=*policy*\n```\n\n----------------------------------------\n\nTITLE: Watching and Re-reading Config Files with Viper\nDESCRIPTION: Shows how to set up Viper to watch for changes in the configuration file and automatically re-read it, including a callback function for change events.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nviper.OnConfigChange(func(e fsnotify.Event) {\n\tfmt.Println(\"Config file changed:\", e.Name)\n})\nviper.WatchConfig()\n```\n\n----------------------------------------\n\nTITLE: Stopping the Podman Machine (Context: Mode Change) (PowerShell)\nDESCRIPTION: Stops the Podman machine using `podman machine stop` in PowerShell, executed before switching the machine back to rootless mode.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\npodman machine stop\n```\n\n----------------------------------------\n\nTITLE: Cleaning a Single Container with Podman CLI - Shell\nDESCRIPTION: Demonstrates the use of the 'podman container cleanup' command to remove mountpoints and network configurations from a single exited container named 'mywebserver'. This command requires Podman to be installed and run from a shell or terminal. The input is the container name or ID, and the output is the cleaning action performed on the specified container. Does not remove the container itself unless used with additional flags.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-cleanup.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman container cleanup mywebserver\n```\n\n----------------------------------------\n\nTITLE: Setting Cgroup Namespace Mode in Podman\nDESCRIPTION: Command option that specifies how the cgroup namespace should be configured for a container. Supports host mode, container joining, private namespace, or specific namespace path. Default varies based on host cgroup version - host for v1, private for v2.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cgroupns.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--cgroupns=mode\n```\n\n----------------------------------------\n\nTITLE: Querying Podman Storage Driver Configuration - Bash\nDESCRIPTION: This set of Bash snippets shows how to extract the current storage driver and whether native overlayfs is active using 'podman info' with Go-style formatting. Useful for validating the selected storage backend and tuning Podman’s performance. Requires Podman 3.1+ and sufficient privileges to query configuration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ podman info -f {{.Store.GraphDriverName}}\\noverlay\\n$ podman info -f '{{index .Store.GraphStatus \"Native Overlay Diff\"}}'\\ntrue\n```\n\n----------------------------------------\n\nTITLE: Installing 'json-iterator/go' Library using Go Get\nDESCRIPTION: This command demonstrates how to install the 'json-iterator/go' library using the Go toolchain. Executing 'go get' fetches the package from its repository and installs it into the Go workspace, making it available for import in Go projects.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/json-iterator/go\n```\n\n----------------------------------------\n\nTITLE: Setting device read IOPS limit in Podman\nDESCRIPTION: Example of using the --device-read-iops option to limit read operations from a device to 1000 IOPS. This option allows controlling the IO performance for specific devices attached to containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/device-read-iops.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--device-read-iops=/dev/sda:1000\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus with go-colorable for Windows Color Support in Go\nDESCRIPTION: This snippet demonstrates how to set up the logrus logging package with go-colorable to enable colored output on Windows. It configures the logger to force colors and use a colorable stdout writer.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/mattn/go-colorable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogrus.SetFormatter(&logrus.TextFormatter{ForceColors: true})\nlogrus.SetOutput(colorable.NewColorableStdout())\n\nlogrus.Info(\"succeeded\")\nlogrus.Warn(\"not correct\")\nlogrus.Error(\"something error\")\nlogrus.Fatal(\"panic\")\n```\n\n----------------------------------------\n\nTITLE: Installing Persistent Podman Bash Completion - Bash - Shell\nDESCRIPTION: This snippet shows how to install Podman's Bash completion script system-wide by directing the output of the podman completion command to Bash's completion directory. It requires superuser privileges and the presence of bash-completion tooling. Once run, all new Bash sessions will be able to use Podman command completions automatically. The -f flag specifies the output file location for the generated completion script.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-completion.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman completion -f /etc/bash_completion.d/podman bash\n```\n\n----------------------------------------\n\nTITLE: Enabling Podman Quadlet Unit on Boot - systemd unit file - ini\nDESCRIPTION: This snippet demonstrates how to enable a Quadlet-generated systemd unit at boot by adding a [Install] section with WantedBy=default.target. This ensures the systemd service will be started during system initialization. Applicable to any Quadlet file; only the Alias, WantedBy, RequiredBy, and UpheldBy keys are currently supported in Install sections, which may be present in the main unit or a drop-in.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[Install]\\nWantedBy=default.target\n```\n\n----------------------------------------\n\nTITLE: Basic Bind Mount Example\nDESCRIPTION: Basic bind mount that maps a host path to a container path\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mount.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntype=bind,source=/path/on/host,destination=/path/in/container\n```\n\n----------------------------------------\n\nTITLE: Assigning Project IDs for XFS Quota Management - Shell\nDESCRIPTION: This shell session demonstrates how to configure unique XFS project IDs for Podman storage and volume directories, which is essential for enforcing project quotas per volume/container. The workflow includes updating the /etc/projects and /etc/projid files and applying the configuration with xfs_quota. Requires root access and the xfs_quota tool.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\necho 100000:/var/lib/containers/storage/overlay >> /etc/projects\necho 200000:/var/lib/containers/storage/volumes >> /etc/projects\necho storage:100000 >> /etc/projid\necho volumes:200000 >> /etc/projid\nxfs_quota -x -c 'project -s storage volumes' /<xfs mount point>\n```\n\n----------------------------------------\n\nTITLE: Creating a Podman Network with Static Route\nDESCRIPTION: Create a network with a 192.168.33.0/24 subnet and a static route to the 10.1.0.0/24 network via 192.168.33.10.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-create.1.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ podman network create --subnet 192.168.33.0/24 --route 10.1.0.0/24,192.168.33.10 newnet\n```\n\n----------------------------------------\n\nTITLE: Using ns.Do() to Execute Code in a Specific Network Namespace in Go\nDESCRIPTION: This snippet demonstrates the recommended `ns.Do()` method for executing code that depends on a specific network namespace (`targetNs`). The provided function runs within the `targetNs` namespace. `ns.Do()` internally uses `runtime.LockOSThread()` to ensure the goroutine remains on the same OS thread, preventing unexpected namespace changes during the function's execution. The example shows adding a dummy network interface using the `netlink` library within the target namespace. Note the documented limitations: this protection doesn't extend to goroutines spawned within the function, and any external libraries called must also be namespace-aware.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containernetworking/plugins/pkg/ns/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr = targetNs.Do(func(hostNs ns.NetNS) error {\n\tlinkAttrs := netlink.NewLinkAttrs()\n\tlinkAttrs.Name = \"dummy0\"\n\tdummy := &netlink.Dummy{\n\t\tLinkAttrs: linkAttrs,\n\t}\n\treturn netlink.LinkAdd(dummy)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Port Forwarding from Container to Host with Pasta in Podman\nDESCRIPTION: Example of using the --network option with pasta to enable forwarding of a specific TCP port (5201) from container to host, using the loopback interface for improved performance.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/network.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npasta:-T,5201\n```\n\n----------------------------------------\n\nTITLE: Validating Maps Using a Template Map in Go\nDESCRIPTION: This Go snippet illustrates how to validate a `map[string]interface{}` using `govalidator.ValidateMap`. It defines a `mapTemplate` containing keys and corresponding validation rule strings (similar to struct tags) and an `inputMap` with data. The `ValidateMap` function checks if the `inputMap` conforms to the rules specified in `mapTemplate`, including nested maps.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n```go\nvar mapTemplate = map[string]interface{}{\n\t\"name\":\"required,alpha\",\n\t\"family\":\"required,alpha\",\n\t\"email\":\"required,email\",\n\t\"cell-phone\":\"numeric\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"required,alphanum\",\n\t\t\"line2\":\"alphanum\",\n\t\t\"postal-code\":\"numeric\",\n\t},\n}\n\nvar inputMap = map[string]interface{}{\n\t\"name\":\"Bob\",\n\t\"family\":\"Smith\",\n\t\"email\":\"foo@bar.baz\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"\",\n\t\t\"line2\":\"\",\n\t\t\"postal-code\":\"\",\n\t},\n}\n\nresult, err := govalidator.ValidateMap(inputMap, mapTemplate)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n```\n\n----------------------------------------\n\nTITLE: Copying an Image from Local Storage to a Remote Podman Connection\nDESCRIPTION: This command copies the locally stored 'alpine' image to a pre-configured remote Podman connection named 'Fedora', saving it to the specified path `/home/charliedoern/Documents/alpine` on the remote host. The output shows the progress of blob and config copying.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-scp.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman image scp alpine Fedora::/home/charliedoern/Documents/alpine\nGetting image source signatures\nCopying blob 72e830a4dff5 done\nCopying config 85f9dc67c7 done\nWriting manifest to image destination\nStoring signatures\nLoaded image: docker.io/library/alpine:latest\n```\n\n----------------------------------------\n\nTITLE: Copying Directory Contents from Container to Host Using podman cp - Shell\nDESCRIPTION: Copies only the contents (not the directory itself) of a directory from a container to the host using the /. path trick with podman cp. Requires a valid directory in the container, and the target must be a local directory. Inputs: container ID and container directory path with trailing /. Output: all contained files and subdirectories copied to host directory.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-cp.1.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npodman cp containerID:/home/myuser/. /home/myuser/\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom DNS Search Domains for Podman Build\nDESCRIPTION: This configuration option allows setting custom DNS search domains for Podman build processes. It can be used in both 'podman build' and 'farm build' commands to specify the domains to be searched when resolving hostnames during the build process.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/dns-search.image.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--dns-search**=*domain*\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Hostname in Podman Commands\nDESCRIPTION: The --no-hostname flag prevents Podman from creating or modifying the /etc/hostname file in containers. When enabled, the container will retain the original hostname configuration from the image if present, rather than having Podman set a container-specific hostname.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/no-hostname.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--no-hostname\n```\n\n----------------------------------------\n\nTITLE: Creating a tmpfs Podman Volume with Size and Mount Options - Shell\nDESCRIPTION: This shell snippet shows how to create a named Podman volume ('myvol') using tmpfs as the device, specifying custom type and multiple mount options, including size limit (2M), nodev, and noexec. Requires Podman with root privileges for some mount options. Outputs a new tmpfs-backed volume with applied filesystem restrictions.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# podman volume create --opt device=tmpfs --opt type=tmpfs --opt o=size=2M,nodev,noexec myvol\n```\n\n----------------------------------------\n\nTITLE: Specifying Valid User Namespace Modes in Podman\nDESCRIPTION: This snippet outlines the valid mode values for the --userns option in Podman, including 'auto' with its sub-options, 'host', 'keep-id', and 'nomap'. It provides details on how each mode affects user namespace creation and mapping.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/userns.pod.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nValid _mode_ values are:\n\n  - *auto[:*_OPTIONS,..._*]*: automatically create a namespace. It is possible to specify these options to `auto`:\n\n    - *gidmapping=*_CONTAINER\\_GID:HOST\\_GID:SIZE_ to force a GID mapping to be present in the user namespace.\n\n    - *size=*_SIZE_: to specify an explicit size for the automatic user namespace. e.g. `--userns=auto:size=8192`. If `size` is not specified, `auto` estimates the size for the user namespace.\n\n    - *uidmapping=*_CONTAINER\\_UID:HOST\\_UID:SIZE_ to force a UID mapping to be present in the user namespace.\n\n  - *host*: run in the user namespace of the caller. The processes running in the container have the same privileges on the host as any other process launched by the calling user (default).\n\n  - *keep-id*: creates a user namespace where the current rootless user's UID:GID are mapped to the same values in the container. This option is not allowed for containers created by the root user.\n\n  - *nomap*: creates a user namespace where the current rootless user's UID:GID are not mapped into the container. This option is not allowed for containers created by the root user.\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifest Option for Podman Build\nDESCRIPTION: Specifies the '--manifest' option for Podman build commands. This option allows adding an image to a manifest list, creating the list if it doesn't exist. It's particularly useful for building multi-architecture images.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--manifest**=*manifest*\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Check Handler in Go\nDESCRIPTION: Implementation of a basic health check endpoint that returns a JSON response indicating the service status.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_26\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\npackage main\n\nfunc HealthCheckHandler(w http.ResponseWriter, r *http.Request) {\n    // A very simple health check.\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.WriteHeader(http.StatusOK)\n\n    // In the future we could report back on the status of our DB, or our cache\n    // (e.g. Redis) by performing a simple PING, and include them in the response.\n    io.WriteString(w, `{\"alive\": true}`)\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/health\", HealthCheckHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Policy for Podman Build\nDESCRIPTION: Defines the --pull option for Podman build and farm build commands. It specifies the image pull policy with four possible values: always, missing, never, and newer. Each policy determines how Podman handles image pulling during the build process.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/pull.image.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--pull**=*policy*\n\nPull image policy. The default is **missing**.\n\n- **always**: Always pull the image and throw an error if the pull fails.\n- **missing**: Only pull the image when it does not exist in the local containers storage.  Throw an error if no image is found and the pull fails.\n- **never**: Never pull the image but use the one from the local containers storage.  Throw an error when no image is found.\n- **newer**: Pull if the image on the registry is newer than the one in the local containers storage.  An image is considered to be newer when the digests are different.  Comparing the time stamps is prone to errors.  Pull errors are suppressed if a local image was found.\n```\n\n----------------------------------------\n\nTITLE: Using Random Function with Error Handling in Go\nDESCRIPTION: Shows how to use the Random function from GoUtils which generates random strings. This example demonstrates proper error handling when using functions that may return errors due to invalid parameters.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/goutils/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/Masterminds/goutils\"\n)\n\nfunc main() {\n\n    // EXAMPLE 2: A goutils function which returns an error\n    rand1, err1 := goutils.Random (-1, 0, 0, true, true)  \n\n    if err1 != nil {\n\t\t\tfmt.Println(err1) // Prints out error message because -1 was entered as the first parameter in goutils.Random(...)\n\t\t} else {\n\t\t\tfmt.Println(rand1)\n\t\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Force Removing Dangling Podman Images Older Than a Duration (Shell)\nDESCRIPTION: This command removes dangling images created more than 10 hours ago from the local storage. The `--filter until=10h` option specifies the time cutoff using a Go duration string relative to the current time. The `-f` flag suppresses the confirmation prompt. The output lists the IDs of the pruned dangling images.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-prune.1.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo podman image prune -f --filter until=10h\nf3e20dc537fb04cb51672a5cb6fdf2292e61d411315549391a0d1f64e4e3097e\n324a7a3b2e0135f4226ffdd473e4099fd9e477a74230cdc35de69e84c0f9d907\n```\n\n----------------------------------------\n\nTITLE: Reading Encrypted Remote Configuration with Viper\nDESCRIPTION: Demonstrates how to read encrypted configuration from a remote key/value store using Viper with GPG encryption.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nviper.AddSecureRemoteProvider(\"etcd\",\"http://127.0.0.1:4001\",\"/config/hugo.json\",\"/etc/secrets/mykeyring.gpg\")\nviper.SetConfigType(\"json\") // because there is no file extension in a stream of bytes,  supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Podman Ignore Flag Option Definition\nDESCRIPTION: Defines the --ignore (-i) flag option for Podman commands that allows ignoring errors when specified containers or pods are not found in the container store. This is particularly useful in systemd service scenarios where containers might have been manually removed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/ignore.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--ignore, -i\n```\n\n----------------------------------------\n\nTITLE: Proper Pattern for Using Batch Transactions in bbolt\nDESCRIPTION: Example showing the correct pattern for using Batch transactions, ensuring side effects only occur after successful completion. This handles the possibility of the batch function being called multiple times.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar id uint64\nerr := db.Batch(func(tx *bolt.Tx) error {\n\t// Find last key in bucket, decode as bigendian uint64, increment\n\t// by one, encode back to []byte, and add new key.\n\t...\n\tid = newValue\n\treturn nil\n})\nif err != nil {\n\treturn ...\n}\nfmt.Println(\"Allocated ID %d\", id)\n```\n\n----------------------------------------\n\nTITLE: Installing Podman on macOS using Homebrew\nDESCRIPTION: Command to install Podman on macOS using the Homebrew package manager. This installs the remote client that can connect to a Linux backend.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/mac_win_client.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install podman\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression Level in Podman Commands\nDESCRIPTION: Sets the compression level for Podman operations. Supports zstd compression (range 1-20, default 3) and gzip compression (range 1-9, default 5). This option is applicable to both 'podman manifest push' and 'push' commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/compression-level.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--compression-level=level\n```\n\n----------------------------------------\n\nTITLE: Connecting to Podman Machine via WSL in PowerShell - PowerShell\nDESCRIPTION: Shows how to access the Linux shell of a specific Podman machine instance using WSL from a PowerShell prompt. This connects directly as root inside the identified machine ('podman-machine-default'). Requires WSL installed, the specified Podman machine initialized, and administrative permissions if not using an already-running instance.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_29\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User> wsl -d podman-machine-default\n```\n\n----------------------------------------\n\nTITLE: Verifying subuid and subgid Ranges for User - Bash\nDESCRIPTION: Provides grep commands to verify the subuid and subgid mappings assigned to the 'containers' user in /etc/subuid and /etc/subgid. Helps users check correct range assignments for Podman user namespace management. Dependencies include grep and required permissions to read mapping files. Inputs are the grep commands; outputs are the lines in the relevant files for 'containers', showing starting ID and length.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\n$ grep ^containers: /etc/subuid\ncontainers:720896:65536\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ grep ^containers: /etc/subgid\ncontainers:720896:65536\n```\n\n----------------------------------------\n\nTITLE: Listing Processes with psgo Sample Tool\nDESCRIPTION: Using the psgo sample tool to display information about all running processes in the current mount namespace, similar to 'ps -ef' output. The example shows the default output format which includes user, PID, PPID, CPU usage, elapsed time, TTY, time, and command.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/psgo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./bin/psgo | head -n5\nUSER         PID     PPID    %CPU     ELAPSED              TTY      TIME        COMMAND\nroot         1       0       0.064    6h3m27.677997443s    ?        13.98s      systemd\nroot         2       0       0.000    6h3m27.678380128s    ?        20ms        [kthreadd]\nroot         4       2       0.000    6h3m27.678701852s    ?        0s          [kworker/0:0H]\nroot         6       2       0.000    6h3m27.678999508s    ?        0s          [mm_percpu_wq]\n```\n\n----------------------------------------\n\nTITLE: Dumping Container Memory with Specified Compression - Podman - Bash\nDESCRIPTION: This snippet demonstrates how to checkpoint the latest container to an archive while specifying the compression algorithm (either 'none' or 'gzip') using '--compress'. The output file is either an uncompressed tar or a gzipped tar.gz archive, depending on the option. Useful for controlling archive size and speed during migration or backup.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-checkpoint.1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# podman container checkpoint -l --compress=none --export=dump.tar\n```\n\nLANGUAGE: bash\nCODE:\n```\n# podman container checkpoint -l --compress=gzip --export=dump.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Stopping the Podman Machine (PowerShell)\nDESCRIPTION: Stops the currently running Podman machine using the `podman machine stop` command in PowerShell. This is required before changing settings like the rootful/rootless mode.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\npodman machine stop\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Podman Version Information (Shell)\nDESCRIPTION: Executes the `podman version` command without any options to display the default version information for the Podman client. The output includes details like Version, API Version, Go Version, Git Commit, Build Time, and OS/Architecture. This requires Podman to be installed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-version.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman version\nVersion:      2.0.0\nAPI Version:  1\nGo Version:   go1.14.2\nGit Commit:   4520664f63c3a7f9a80227715359e20069d95542\nBuilt:        Tue May 19 10:48:59 2020\nOS/Arch:      linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Overriding Standard Library Logger with Logrus in Go\nDESCRIPTION: This snippet demonstrates how to replace the standard library's log package with Logrus. It configures Logrus with JSON formatting and sets it as the output for the standard logger.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nlogger := logrus.New()\nlogger.Formatter = &logrus.JSONFormatter{}\n\n// Use logrus for standard log output\n// Note that `log` here references stdlib's log\n// Not logrus imported under the name `log`.\nlog.SetOutput(logger.Writer())\n```\n\n----------------------------------------\n\nTITLE: Manual Subnet Range Configuration\nDESCRIPTION: Manual configuration commands to add UID/GID ranges directly to the /etc/subuid and /etc/subgid files. These entries allow the specified user to use UIDs/GIDs in the range 10000-75535 for container processes.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman.1.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho USERNAME:10000:65536 >> /etc/subuid\necho USERNAME:10000:65536 >> /etc/subgid\n```\n\n----------------------------------------\n\nTITLE: Restarting the Latest Created Podman Pod\nDESCRIPTION: Illustrates using the '--latest' or '-l' flag to restart the most recently created Podman pod without needing to specify its name or ID. The command outputs the ID of the restarted pod. Note: This option may not be available with remote Podman clients.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod-restart.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npodman pod restart --latest\n3557fbea6ad61569de0506fe037479bd9896603c31d3069a6677f23833916fab\n```\n\n----------------------------------------\n\nTITLE: Using LoggingHandler and CompressHandler in Go\nDESCRIPTION: This example demonstrates how to use handlers.LoggingHandler for logging requests to the admin dashboard and handlers.CompressHandler to gzip compress all responses. It sets up a simple HTTP server with two routes.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/handlers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"net/http\"\n    \"github.com/gorilla/handlers\"\n)\n\nfunc main() {\n    r := http.NewServeMux()\n\n    // Only log requests to our admin dashboard to stdout\n    r.Handle(\"/admin\", handlers.LoggingHandler(os.Stdout, http.HandlerFunc(ShowAdminDashboard)))\n    r.HandleFunc(\"/\", ShowIndex)\n\n    // Wrap our server with our gzip handler to gzip compress all responses.\n    http.ListenAndServe(\":8000\", handlers.CompressHandler(r))\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Non-Privileged User for Rootless Podman - Bash\nDESCRIPTION: Switches from root to the rootless 'user' inside the Podman-managed WSL shell to execute Podman commands as a regular user, which is needed for certain security models. Demonstrates switching users and querying Podman's runtime root directory. Assumes user 'user' exists and Podman is installed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n[root@WINPC /]# su user\n[user@WINPC /]$ podman info --format '{{.Store.RunRoot}}'\n/run/user/1000/containers\n```\n\n----------------------------------------\n\nTITLE: Upgrading Linux OS in Podman Machine via SSH - Bash\nDESCRIPTION: Demonstrates upgrading the Linux environment inside a Podman-managed VM through SSH. Uses the 'podman machine ssh' command to remotely run 'sudo dnf upgrade -y', which updates all system packages within the Linux guest. No specific prerequisites are listed except for requiring Podman, a running Podman machine, and SSH access.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npodman machine ssh sudo dnf upgrade -y\n```\n\n----------------------------------------\n\nTITLE: Checking for an Existing Podman Volume (Shell)\nDESCRIPTION: This example demonstrates using the `podman volume exists` command to check for a volume named `myvol` which is presumed to exist. The subsequent `echo $?` command prints the exit status of the previous command. An exit code of `0` indicates that the volume `myvol` was found.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-exists.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman volume exists myvol\n$ echo $?\n0\n$\n```\n\n----------------------------------------\n\nTITLE: Using --detach-keys Option in Podman Commands\nDESCRIPTION: The --detach-keys option allows specifying a custom key sequence for detaching from a running container. It accepts a single character or ctrl combinations, with ctrl-p,ctrl-q as the default sequence. This can also be configured globally in the containers.conf file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/detach-keys.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--detach-keys=sequence\n```\n\n----------------------------------------\n\nTITLE: Parsing and Serializing YAML with yaml.v3 in Go\nDESCRIPTION: This Go snippet demonstrates how to parse (unmarshal) YAML data into Go structs and maps, as well as serialize (marshal) Go structs and maps back into YAML using the yaml.v3 package. Dependencies include the standard fmt and log packages, and external gopkg.in/yaml.v3. The sample covers struct field tags for YAML mapping, error handling for parsing/serialization, and illustrates how YAML data can be mapped either into strongly-typed structs or flexible maps. Input is a multiline YAML string; outputs are pretty-printed Go values and YAML text to the console. Fields in structs must be exported for unmarshalling, and type assertions are needed when accessing map contents. No multi-document YAML handling is shown.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/gopkg.in/yaml.v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\\n\\nimport (\\n        \\\"fmt\\\"\\n        \\\"log\\\"\\n\\n        \\\"gopkg.in/yaml.v3\\\"\\n)\\n\\nvar data = `\\na: Easy!\\nb:\\n  c: 2\\n  d: [3, 4]\\n`\\n\\n// Note: struct fields must be public in order for unmarshal to\\n// correctly populate the data.\\ntype T struct {\\n        A string\\n        B struct {\\n                RenamedC int   `yaml:\\\"c\\\"`\\n                D        []int `yaml:\\\",flow\\\"`\\n        }\\n}\\n\\nfunc main() {\\n        t := T{}\\n    \\n        err := yaml.Unmarshal([]byte(data), &t)\\n        if err != nil {\\n                log.Fatalf(\\\"error: %v\\\", err)\\n        }\\n        fmt.Printf(\\\"--- t:\\n%v\\n\\n\\\", t)\\n    \\n        d, err := yaml.Marshal(&t)\\n        if err != nil {\\n                log.Fatalf(\\\"error: %v\\\", err)\\n        }\\n        fmt.Printf(\\\"--- t dump:\\n%s\\n\\n\\\", string(d))\\n    \\n        m := make(map[interface{}]interface{})\\n    \\n        err = yaml.Unmarshal([]byte(data), &m)\\n        if err != nil {\\n                log.Fatalf(\\\"error: %v\\\", err)\\n        }\\n        fmt.Printf(\\\"--- m:\\n%v\\n\\n\\\", m)\\n    \\n        d, err = yaml.Marshal(&m)\\n        if err != nil {\\n                log.Fatalf(\\\"error: %v\\\", err)\\n        }\\n        fmt.Printf(\\\"--- m dump:\\n%s\\n\\n\\\", string(d))\\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Podman System Connections - Bash\nDESCRIPTION: This bash snippet invokes the 'podman system connection list' command to show all configured connections for Podman services. It displays a table containing each connection\\'s name, URI, associated SSH identity, default status, and read/write capability. This command requires a functioning Podman installation, appropriate configuration of remotes, and optional SSH credentials for remote targets. Inputs are optional flags for formatting or quiet output; results include a table or filtered listing depending on flag usage. The snippet serves as a reference for users administering Podman system connections.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-connection-list.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman system connection list\nName URI                                                      Identity    Default  ReadWrite\ndeva ssh://root@example.com:/run/podman/podman.sock           ~/.ssh/id_rsa true     true\ndevb ssh://user@example.com:/run/user/1000/podman/podman.sock ~/.ssh/id_rsa false    true\n```\n\n----------------------------------------\n\nTITLE: Defining --since option for Podman logs in Markdown\nDESCRIPTION: Specifies the --since option for Podman logs and pod logs commands. It allows filtering logs based on a timestamp, supporting various formats including Unix timestamps, date formatted timestamps, and Go duration strings.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/since.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--since**=*TIMESTAMP*\n\nShow logs since TIMESTAMP. The --since option can be Unix timestamps, date formatted timestamps, or Go duration\nstrings (e.g. 10m, 1h30m) computed relative to the client machine's time. Supported formats for date formatted\ntime stamps include RFC3339Nano, RFC3339, 2006-01-02T15:04:05, 2006-01-02T15:04:05.999999999, 2006-01-02Z07:00,\nand 2006-01-02.\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Properties in Go\nDESCRIPTION: This snippet demonstrates various ways to initialize and use the properties library, including loading from files, maps, strings, URLs, and command-line flags. It also shows how to retrieve values and decode properties into structs.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/magiconair/properties/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"flag\"\n\t\"github.com/magiconair/properties\"\n)\n\nfunc main() {\n\t// init from a file\n\tp := properties.MustLoadFile(\"${HOME}/config.properties\", properties.UTF8)\n\n\t// or multiple files\n\tp = properties.MustLoadFiles([]string{\n\t\t\t\"${HOME}/config.properties\",\n\t\t\t\"${HOME}/config-${USER}.properties\",\n\t\t}, properties.UTF8, true)\n\n\t// or from a map\n\tp = properties.LoadMap(map[string]string{\"key\": \"value\", \"abc\": \"def\"})\n\n\t// or from a string\n\tp = properties.MustLoadString(\"key=value\\nabc=def\")\n\n\t// or from a URL\n\tp = properties.MustLoadURL(\"http://host/path\")\n\n\t// or from multiple URLs\n\tp = properties.MustLoadURL([]string{\n\t\t\t\"http://host/config\",\n\t\t\t\"http://host/config-${USER}\",\n\t\t}, true)\n\n\t// or from flags\n\tp.MustFlag(flag.CommandLine)\n\n\t// get values through getters\n\thost := p.MustGetString(\"host\")\n\tport := p.GetInt(\"port\", 8080)\n\n\t// or through Decode\n\ttype Config struct {\n\t\tHost    string        `properties:\"host\"`\n\t\tPort    int           `properties:\"port,default=9000\"`\n\t\tAccept  []string      `properties:\"accept,default=image/png;image;gif\"`\n\t\tTimeout time.Duration `properties:\"timeout,default=5s\"`\n\t}\n\tvar cfg Config\n\tif err := p.Decode(&cfg); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example Podman Service URL (TCP Connection - Hostname)\nDESCRIPTION: An example URL string specifying an unencrypted TCP connection to a Podman service listening on localhost at port 34451.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\ntcp://localhost:34451\n```\n\n----------------------------------------\n\nTITLE: Using jq to Format Registry List with Newlines\nDESCRIPTION: Demonstrates how to use jq to format the registry list with one entry per line.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-info.1.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ podman info -f json | jq -r '.registries[\"search\"] | .[]'\nregistry.fedoraproject.org\nregistry.access.redhat.com\ndocker.io\nquay.io\n```\n\n----------------------------------------\n\nTITLE: Creating an Image-backed Volume with Podman - Shell\nDESCRIPTION: This shell snippet creates a Podman volume ('fedoraVol') using the 'image' driver and specifying a Fedora image as the backing store. The '--driver image' flag, together with '--opt image=fedora:latest', is required. Podman must support the 'image' volume driver, and the image must be available locally or in a compatible registry.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# podman volume create --driver image --opt image=fedora:latest fedoraVol\n```\n\n----------------------------------------\n\nTITLE: Creating a Podmansh Container with Home Directory Access\nDESCRIPTION: Script to create a container configuration that allows users to become root within their user namespace and have persistent access to their home directory through volume mounting.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podmansh.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# useradd -s /usr/bin/podmansh confinedu\n# grep confinedu /etc/passwd\nconfinedu:x:4009:4009::/home/confinedu:/usr/bin/podmansh\n# USERID=$(id -u confinedu)\n# mkdir -p /etc/containers/systemd/users/${USERID}\n# cat > /etc/containers/systemd/users/${USERID}/podmansh.container << _EOF\n[Unit]\nDescription=The podmansh container\nAfter=local-fs.target\n\n[Container]\nImage=registry.fedoraproject.org/fedora\nContainerName=podmansh\nRemapUsers=keep-id\nRunInit=yes\n\nVolume=%h/data:%h:Z\nExec=sleep infinity\n\n[Service]\nExecStartPre=/usr/bin/mkdir -p %h/data\n\n[Install]\nRequiredBy=default.target\n_EOF\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Time Transformer with Mergo\nDESCRIPTION: This Go example demonstrates how to use a custom transformer with `mergo.Merge` to handle specific types, like `time.Time`. It defines a `timeTransformer` that implements the `mergo.Transformer` interface to correctly merge `time.Time` values based on their `IsZero()` method, allowing non-zero times to be merged into zero times. The transformer is passed to `mergo.Merge` using `mergo.WithTransformers`.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/imdario/mergo/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/imdario/mergo\"\n        \"reflect\"\n        \"time\"\n)\n\ntype timeTransformer struct {\n}\n\nfunc (t timeTransformer) Transformer(typ reflect.Type) func(dst, src reflect.Value) error {\n\tif typ == reflect.TypeOf(time.Time{}) {\n\t\treturn func(dst, src reflect.Value) error {\n\t\t\tif dst.CanSet() {\n\t\t\t\tisZero := dst.MethodByName(\"IsZero\")\n\t\t\t\tresult := isZero.Call([]reflect.Value{})\n\t\t\t\tif result[0].Bool() {\n\t\t\t\t\tdst.Set(src)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Snapshot struct {\n\tTime time.Time\n\t// ...\n}\n\nfunc main() {\n\tsrc := Snapshot{time.Now()}\n\tdest := Snapshot{}\n\tmergo.Merge(&dest, src, mergo.WithTransformers(timeTransformer{}))\n\tfmt.Println(dest)\n\t// Will print\n\t// { 2018-01-12 01:15:00 +0000 UTC m=+0.000000001 }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered Pruning by Creation Time - Podman - Shell\nDESCRIPTION: This example shows how to prune Podman networks that were not created in the last two hours. It uses the '--filter' option with the 'until' key set to '2h', effectively removing only those networks created before two hours ago. The command preserves newer networks and allows for precise removal based on age.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-prune.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npodman network prune --filter until=2h\n```\n\n----------------------------------------\n\nTITLE: Integrating 'manifest' Command in Podman Main File in Go\nDESCRIPTION: This Go code snippet shows how to integrate the new 'manifest' command into the main Podman file by importing the package.\nSOURCE: https://github.com/containers/podman/blob/main/cmd/podman/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport\t_ \"github.com/containers/podman/cmd/podman/manifest\"\n```\n\n----------------------------------------\n\nTITLE: Checking Port Mapping in Podman\nDESCRIPTION: This snippet shows the command to check the actual port mapping for a container using the podman port command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/publish.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman port $CONTAINER $CONTAINERPORT\n```\n\n----------------------------------------\n\nTITLE: User Namespace Mapping Table for Rootless Podman\nDESCRIPTION: A table showing how different --userns key values map host users to container users in rootless Podman operations. It covers modes like auto, host, keep-id, and nomap.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/userns.container.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nKey                     | Host User | Container User\n------------------------|-----------|---------------------\nauto                    | $UID      | nil (Host User UID is not mapped into container.)\nhost                    | $UID      | 0 (Default User account mapped to root user in container.)\nkeep-id                 | $UID      | $UID (Map user account to same UID within container.)\nkeep-id:uid=200,gid=210 | $UID      | 200:210 (Map user account to specified UID, GID value within container.)\nnomap                   | $UID      | nil (Host User UID is not mapped into container.)\n```\n\n----------------------------------------\n\nTITLE: Applying a Kubernetes YAML File with Podman - Bash\nDESCRIPTION: This example shows how to deploy resources defined in a Kubernetes YAML file to a cluster using podman kube apply with the --file option. It requires the path to a kubeconfig file and the YAML manifest to be provided. After applying, it confirms success and allows verification of pod states via kubectl.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-apply.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman kube apply --kubeconfig /tmp/kubeconfig -f vol.yaml\nDeploying to cluster...\nSuccessfully deployed workloads to cluster!\n$ kubectl get pods\nNAME             READY   STATUS    RESTARTS   AGE\nvol-test-2-pod   1/1     Running   0          9m\n```\n\n----------------------------------------\n\nTITLE: Detecting Terminal Type in Go using go-isatty\nDESCRIPTION: This snippet demonstrates how to use the go-isatty library to detect if the standard output is associated with a terminal, and if so, what type of terminal it is. It checks for regular terminals and Cygwin/MSYS2 terminals.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/mattn/go-isatty/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/mattn/go-isatty\"\n\t\"os\"\n)\n\nfunc main() {\n\tif isatty.IsTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Terminal\")\n\t} else if isatty.IsCygwinTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Cygwin/MSYS2 Terminal\")\n\t} else {\n\t\tfmt.Println(\"Is Not Terminal\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Backtick Expansion in Go\nDESCRIPTION: Demonstrates how to use a shellwords.Parser with ParseBacktick set to true to execute and expand backtick commands.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-shellwords/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\np := shellwords.NewParser()\np.ParseBacktick = true\nargs, err := p.Parse(\"./foo `echo $SHELL`\")\n// args should be [\"./foo\", \"/bin/bash\"]\n```\n\n----------------------------------------\n\nTITLE: Starting a Podman Virtual Machine - Shell\nDESCRIPTION: Demonstrates how to start a specific Podman virtual machine named 'myvm' from the command line. Requires Podman to be installed and configured. The 'machine start' subcommand attempts to boot the VM if no other Podman-managed VM is running. It takes an optional VM name parameter; if omitted, 'podman-machine-default' is used. Successful execution results in the specified Linux-based virtual machine being started and ready to host containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-start.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine start myvm\n```\n\n----------------------------------------\n\nTITLE: Programmatically Checking Label Filters in Ginkgo Go Tests\nDESCRIPTION: Illustrates the use of `GinkgoLabelFilter()` and `Label().MatchesLabelFilter()` introduced in v2.8.0. This allows test code, such as a `BeforeSuite` block, to conditionally execute logic based on whether specific labels (e.g., \"slow\", \"fast\") match the label filter applied during the test run (e.g., via the `--label-filter` CLI flag).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nBeforeSuite(func() {\n\tif Label(\"slow\").MatchesLabelFilter(GinkgoLabelFilter()) {\n\t\t// do slow setup\n\t}\n\n\tif Label(\"fast\").MatchesLabelFilter(GinkgoLabelFilter()) {\n\t\t// do fast setup\n\t}\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression Format in Podman\nDESCRIPTION: Specifies compression format options for Podman manifest push and push operations. Supports gzip (default), zstd, and zstd:chunked formats. Note that zstd:chunked is incompatible with image encryption.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/compression-format.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**--compression-format**=**gzip** | *zstd* | *zstd:chunked*\n```\n\n----------------------------------------\n\nTITLE: Importing Tarball with JSON Array ENTRYPOINT and LABEL (Shell)\nDESCRIPTION: Demonstrates importing a tarball 'test-image.tar' as 'image-imported', specifying the ENTRYPOINT using JSON array syntax within quotes and setting a LABEL using the '--change' flag. The output indicates that an existing blob was skipped.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-import.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman import --change 'ENTRYPOINT [\"/bin/sh\",\"-c\",\"test-image\"]'  --change LABEL=blue=image test-image.tar image-imported\nGetting image source signatures\nCopying blob e3b0c44298fc skipped: already exists\nCopying config 1105523502 done\nWriting manifest to image destination\nStoring signatures\n110552350206337183ceadc0bdd646dc356e06514c548b69a8917b4182414b\n```\n\n----------------------------------------\n\nTITLE: Migrating Lock Numbers with Podman System Renumber - Shell\nDESCRIPTION: This snippet demonstrates the use of the podman system renumber command from the shell to migrate lock numbers after changing the num_locks value in containers.conf. There are no external programming dependencies beyond having Podman installed and properly configured. This command should be run after modifying lock configuration to reallocate container and pod locks and ensure operational harmony. It takes no arguments and produces no output on success, but must be run without other Podman processes active to avoid conflicts.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-renumber.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% podman-system-renumber 1\n```\n\n----------------------------------------\n\nTITLE: Masking Paths in Podman Containers/Pods\nDESCRIPTION: This option allows masking specific paths inside the container or pod, making them inaccessible. Multiple paths can be specified, separated by colons.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/security-opt.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt mask=/path/1:/path/2\n```\n\n----------------------------------------\n\nTITLE: Using Logrus as io.Writer in Go\nDESCRIPTION: This snippet shows how to transform Logrus into an io.Writer, which can be used with standard library components that accept an io.Writer. The example integrates Logrus with the standard http server error log.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nw := logger.Writer()\ndefer w.Close()\n\nsrv := http.Server{\n    // create a stdlib log.Logger that writes to\n    // logrus.Logger.\n    ErrorLog: log.New(w, \"\", 0),\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Volumes in Podman\nDESCRIPTION: Example command showing how to remove multiple specific volumes by providing their names to the podman volume rm command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-rm.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume rm myvol1 myvol2\n```\n\n----------------------------------------\n\nTITLE: Verifying a Digest Match - go-digest - Go\nDESCRIPTION: Verifies that a previously generated digest matches the digest of provided content. If the digests do not match, an error is returned, indicating that the content has changed. The key dependencies are the go-digest package and the errors package. It requires the original digest and the input content and returns an error if verification fails.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nif id != digest.FromBytes([]byte(\"my content\")) {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Linux Capabilities in Podman Build Commands\nDESCRIPTION: The --cap-add option allows adding specific Linux capabilities when executing RUN instructions during container builds. This extends beyond the default capabilities granted to the build process.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cap-add.image.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--cap-add=CAP_xxx\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables in Podman Build Commands\nDESCRIPTION: This snippet demonstrates the usage of the --env option to add or modify environment variables during Podman image builds. It supports multiple formats including specifying a value, using the current environment value, or removing a variable.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/env.image.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--env=env[=value]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Logging Middleware in Go\nDESCRIPTION: Shows a simple Go middleware function (`loggingMiddleware`) that logs the request URI using `log.Println()` and then passes the request to the next handler in the chain by calling `next.ServeHTTP()`. It demonstrates the basic structure of a middleware closure.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc loggingMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Do stuff here\n        log.Println(r.RequestURI)\n        // Call the next handler, which can be another middleware in the chain, or the final handler.\n        next.ServeHTTP(w, r)\n    })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Downloading Required gvisor-tap-vsock Binaries\nDESCRIPTION: Command to download gvproxy.exe and win-sshproxy.exe, which are required components for running Podman on Windows, using the winmake.ps1 script.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_16\n\nLANGUAGE: pwsh\nCODE:\n```\n.\\winmake.ps1 win-gvproxy\n```\n\n----------------------------------------\n\nTITLE: Defining pflag Flags with Shorthands in Go\nDESCRIPTION: Demonstrates defining flags with single-letter shorthands using `pflag`'s `P`-suffixed functions (`IntP`, `BoolVarP`, `VarP`). These functions take an additional argument for the shorthand character (e.g., \"f\", \"b\", \"v\"). This allows users to specify flags using a single dash and the shorthand letter (e.g., `-f 1234`, `-b`).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Caller Reporting in Logrus - Go\nDESCRIPTION: This snippet sets Logrus to include method (caller) information in each log entry for better traceability. It calls log.SetReportCaller(true) to turn on this feature, adding a 'method' field to log outputs. The only dependency is the Logrus package. This increases the runtime overhead of logging, and should be used with awareness of performance implications.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlog.SetReportCaller(true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Entry for Podman Containers\nDESCRIPTION: This configuration option allows customization of the entry written to the /etc/group file within a Podman container when the --user flag is used. It supports dynamic variable substitution for group name, GID, and user list.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/group-entry.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--group-entry**=*ENTRY*\n```\n\n----------------------------------------\n\nTITLE: Removing Local Images for Verification Testing in Podman\nDESCRIPTION: Command to remove both the original and tagged Alpine images from the local system to prepare for testing the signature verification process.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman rmi docker.io/alpine localhost:5000/alpine\n```\n\n----------------------------------------\n\nTITLE: Restoring from Checkpoint Image with New Names - Podman CLI - Shell\nDESCRIPTION: Restores containers from a checkpoint image, assigning different names to each instance. The workflow includes launching a container, creating a checkpoint image, inspecting it, and restoring it twice with different --name parameters. This allows multiple instances to be created from a single checkpoint, testing the --name flag and demonstrating limitations regarding IP address reuse. Dependencies include a 'webserver' image, Podman, and the checkpoint image generated previously.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-restore.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# podman run --name foobar-1 -d webserver\n# podman container checkpoint --create-image foobar-checkpoint foobar-1\n# podman inspect foobar-checkpoint\n# podman container restore --name foobar-2 foobar-checkpoint\n# podman container restore --name foobar-3 foobar-checkpoint\n```\n\n----------------------------------------\n\nTITLE: Copying an Image from Root Storage to Implicit Local User Storage\nDESCRIPTION: This command, executed with `sudo`, copies the 'alpine' image from the root user's Podman storage (`root@localhost::alpine`) to the storage of the user currently invoking the `sudo` command (implicitly the local destination).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-scp.1.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo podman image scp root@localhost::alpine\nCopying blob e2eb06d8af82 done\nCopying config 696d33ca15 done\nWriting manifest to image destination\nStoring signatures\nGetting image source signatures\nCopying blob 5eb901baf107\nCopying config 696d33ca15 done\nWriting manifest to image destination\nStoring signatures\nLoaded image: docker.io/library/alpine:latest\n```\n\n----------------------------------------\n\nTITLE: Pruning All Unused Podman Resources with --all in Bash\nDESCRIPTION: Demonstrates using the `--all` or `-a` flag with `podman system prune`. This option recursively removes all unused pods, containers, images (including dangling and unreferenced ones), networks, and volume data. It performs a maximum of 50 iterations.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-prune.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman system prune --all\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket Unit for Echo Service\nDESCRIPTION: A systemd socket unit file that defines various socket types (TCP, UDP, Unix, and VSOCK) for the echo service container to use with socket activation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_7\n\nLANGUAGE: systemd unit\nCODE:\n```\n[Unit]\nDescription=Example echo socket\n\n[Socket]\nListenStream=127.0.0.1:3000\nListenDatagram=127.0.0.1:3000\nListenStream=[::1]:3000\nListenDatagram=[::1]:3000\nListenStream=%h/echo_stream_sock\n\n# VMADDR_CID_ANY (-1U) = 2^32 -1 = 4294967295\n# See \"man vsock\"\nListenStream=vsock:4294967295:3000\n\n[Install]\nWantedBy=sockets.target\n```\n\n----------------------------------------\n\nTITLE: Configuring Subordinate User IDs for Podman Containers\nDESCRIPTION: Example of how to specify the subordinate user ID range for the 'containers' user in /etc/subuid and /etc/subgid files. This is required for using --userns=auto in rootful mode.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/userns.container.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncontainers:2147483647:2147483648\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic File System Watcher in Go using fsnotify\nDESCRIPTION: This snippet demonstrates how to create a basic file system watcher using the fsnotify library in Go. It sets up a watcher, listens for events in a goroutine, and adds a path to watch. The watcher logs events and errors, and specifically identifies file modifications.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/fsnotify/fsnotify/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/fsnotify/fsnotify\"\n)\n\nfunc main() {\n    // Create new watcher.\n    watcher, err := fsnotify.NewWatcher()\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer watcher.Close()\n\n    // Start listening for events.\n    go func() {\n        for {\n            select {\n            case event, ok := <-watcher.Events:\n                if !ok {\n                    return\n                }\n                log.Println(\"event:\", event)\n                if event.Has(fsnotify.Write) {\n                    log.Println(\"modified file:\", event.Name)\n                }\n            case err, ok := <-watcher.Errors:\n                if !ok {\n                    return\n                }\n                log.Println(\"error:\", err)\n            }\n        }\n    }()\n\n    // Add a path.\n    err = watcher.Add(\"/tmp\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Block main goroutine forever.\n    <-make(chan struct{})\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Image History with Podman (Custom Go Template Output) - Shell\nDESCRIPTION: This shell command uses the '--format' flag to present specific fields from the image history using a Go template. The sample command outputs only the ID and creation time for each layer, providing a concise view. Prerequisites include Podman, and the parameter after '--format' must be a valid Go template string; the output is tailored by the placeholders and can be integrated into scripts.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-history.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman history --format \"{{.ID}} {{.Created}}\" debian\nb676ca55e4f2c   9 weeks ago\n<missing>       9 weeks ago\n```\n\n----------------------------------------\n\nTITLE: Building and Running Socket-Activated HTTP Server\nDESCRIPTION: Commands to build the socket-activated HTTP server container image and run it using systemd-socket-activate to bind to port 8080.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ podman build -t socket-activate-httpd ctr\n$ systemd-socket-activate -l 8080 podman run --rm --network=none localhost/socket-activate-httpd\n```\n\n----------------------------------------\n\nTITLE: Example: Renaming a Podman System Connection (Shell)\nDESCRIPTION: This command demonstrates renaming an existing Podman system connection. It uses `podman system connection rename` followed by the current connection name (`laptop`) and the desired new name (`devel`). This command requires Podman to be installed and an existing connection named 'laptop' to be present.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-connection-rename.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman system connection rename laptop devel\n```\n\n----------------------------------------\n\nTITLE: Removing Pods/Containers using podman kube down with Stdin\nDESCRIPTION: This example shows how to use standard input (`-`) with `podman kube down`. The contents of `demo.yml` are piped (`|`) to the command, which then processes the YAML from stdin to remove the defined pods and containers. The output confirms the successful stopping and removal of the pods.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-down.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cat demo.yml | podman kube play -\nPods stopped:\n52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6\nPods removed:\n52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Deployment YAML with Replicas - Podman - YAML\nDESCRIPTION: This YAML manifest is produced by 'podman kube generate' with the '--type deployment' and '--replicas' flags, transforming a Podman container into a Kubernetes Deployment with multiple replicas for scalability. Prerequisites include a Podman container configured as the base and appropriate Podman version (as seen in comment). The specification includes full deployment metadata, selector labels for matching, annotations, and a template for the pod with container image and command. Input is a reference to a Podman container, output is Kubernetes Deployment YAML, to be used with 'kubectl'. Limited to deployments based on a single container; additional configuration may be needed for complex workloads.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-generate.1.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  creationTimestamp: \"2023-03-27T20:45:08Z\"\n  labels:\n    app: dep-ctr-pod\n  name: dep-ctr-pod-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: dep-ctr-pod\n  template:\n    metadata:\n      annotations:\n        io.podman.annotations.ulimit: nofile=524288:524288,nproc=127332:127332\n      creationTimestamp: \"2023-03-27T20:45:08Z\"\n      labels:\n        app: dep-ctr-pod\n      name: dep-ctr-pod\n    spec:\n      containers:\n      - command:\n        - top\n        image: docker.io/library/alpine:latest\n        name: dep-ctr\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Exit Code 126 (Command Invocation Error)\nDESCRIPTION: Example shell command showing a Podman exit code of 126. This occurs when the command specified to run inside the container exists but cannot be invoked, often due to permissions issues (e.g., trying to execute a directory `/etc`).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ podman run busybox /etc; echo $?\nError: container_linux.go:346: starting container process caused \"exec: \\\"/etc\\\": permission denied\": OCI runtime error\n126\n```\n\n----------------------------------------\n\nTITLE: Creating GPG-Encrypted Podman Secret with Pass Driver using Shell\nDESCRIPTION: Creates a Podman secret named `my_secret` using the `pass` driver, which expects the input file (`./secret.txt.gpg`) to be GPG-encrypted. This allows storing secrets securely using GPG encryption.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-secret-create.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ podman secret create --driver=pass my_secret ./secret.txt.gpg\n```\n\n----------------------------------------\n\nTITLE: Mixing and Reusing Color Styles - fatih/color - Go\nDESCRIPTION: Demonstrates creating new color objects and combining foreground, background, and style attributes (e.g., bold, underline) in fatih/color. Explains how to format output with reusable color instances, including chaining Add for more complex specifications. Requires only the fatih/color import and works with any io.Writer.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Create a new color object\nc := color.New(color.FgCyan).Add(color.Underline)\nc.Println(\"Prints cyan text with an underline.\")\n\n// Or just add them to New()\nd := color.New(color.FgCyan, color.Bold)\nd.Printf(\"This prints bold cyan %s\\n\", \"too!.\")\n\n// Mix up foreground and background colors, create new mixes!\nred := color.New(color.FgRed)\n\nboldRed := red.Add(color.Bold)\nboldRed.Println(\"This will print text in bold red.\")\n\nwhiteBackground := red.Add(color.BgWhite)\nwhiteBackground.Println(\"Red text with white background.\")\n\n```\n\n----------------------------------------\n\nTITLE: Decoding Form Values into Structs using gorilla/schema in Go\nDESCRIPTION: This Go code snippet demonstrates the process of decoding HTTP POST form values into a typed struct using the gorilla/schema package. It creates a reusable Decoder, defines a Person struct, parses incoming POST data, decodes the form into the struct, and provides error handling. Dependencies include the gorilla/schema package and the standard net/http package. r.PostForm provides form data, which is passed to decoder.Decode, populating the destination struct. Returned errors should be checked to handle malformed input or decoding issues.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/schema/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Set a Decoder instance as a package global, because it caches\n// meta-data about structs, and an instance can be shared safely.\nvar decoder = schema.NewDecoder()\n\ntype Person struct {\n    Name  string\n    Phone string\n}\n\nfunc MyHandler(w http.ResponseWriter, r *http.Request) {\n    err := r.ParseForm()\n    if err != nil {\n        // Handle error\n    }\n\n    var person Person\n\n    // r.PostForm is a map of our POST form values\n    err = decoder.Decode(&person, r.PostForm)\n    if err != nil {\n        // Handle error\n    }\n\n    // Do something with person.Name or person.Phone\n}\n```\n\n----------------------------------------\n\nTITLE: Running Container Engine Performance Comparison Scripts\nDESCRIPTION: Instructions for executing the performance comparison scripts. The scripts require sudo privileges and include a warning about system pruning.\nSOURCE: https://github.com/containers/podman/blob/main/hack/perf/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo sh $script.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Available Podman Versions from Quay.io - Bash\nDESCRIPTION: This Bash snippet searches for and displays all available Podman versions tagged for the stable container image on quay.io. It pipes the results from 'podman search' to 'awk' to filter version-like tags (beginning with 'v'), sorts them, and formats them into columns for easier viewing. Dependencies include the podman CLI, awk, sort, and column; key parameters are the registry repo path and the limit flag to list up to 400 tags. The output is a human-readable columnar list of Podman version tags available.\nSOURCE: https://github.com/containers/podman/blob/main/test/upgrade/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/podman search --list-tags --limit=400 quay.io/podman/stable | awk '$2 ~ /^v/ { print $2}' | sort | column -c 75\n```\n\n----------------------------------------\n\nTITLE: Setting Container Architecture in Podman Commands\nDESCRIPTION: Example of using the --arch flag to specify a custom architecture when working with container images. The flag overrides the default host architecture and affects operations like pull, create, and run. Once set, local storage lookups for the image will match this architecture regardless of host architecture.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/arch.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--arch=arm\n```\n\n----------------------------------------\n\nTITLE: Configuring GID Mapping for Podman Containers\nDESCRIPTION: The --gidmap option allows running a container in a new user namespace with a specified GID mapping. It maps host GIDs to container GIDs similarly to how --uidmap maps UIDs. This option conflicts with --userns and --subgidname, and cannot be used with the --pod option.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/gidmap.container.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--gidmap=[flags]container_uid:from_uid[:amount]\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for Container Device Access\nDESCRIPTION: Command to modify SELinux settings to allow containers to use device labels. This is necessary in rootless mode where devices are bind mounted and may have permission issues due to SELinux restrictions.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/device.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo setsebool -P  container_use_devices=true\n```\n\n----------------------------------------\n\nTITLE: Generating ULID in Go\nDESCRIPTION: Example of generating a ULID using a timestamp and entropy source. This snippet demonstrates the creation of a ULID with a specific time and a monotonic random number generator.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/oklog/ulid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleULID() {\n\tt := time.Unix(1000000, 0)\n\tentropy := ulid.Monotonic(rand.New(rand.NewSource(t.UnixNano())), 0)\n\tfmt.Println(ulid.MustNew(ulid.Timestamp(t), entropy))\n\t// Output: 0000XSNJG0MQJHBF4QX1EFD6Y3\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Individual Flags with Viper in Go\nDESCRIPTION: Shows how to bind an individual command-line flag from a Cobra command to Viper for configuration management.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nserverCmd.Flags().Int(\"port\", 1138, \"Port to run Application server on\")\nviper.BindPFlag(\"port\", serverCmd.Flags().Lookup(\"port\"))\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Podman Farm via Command Line\nDESCRIPTION: This command-line example demonstrates how to use `podman farm remove` to delete a specific Podman farm identified by its name (`farm1` in this case). It requires the Podman runtime to be installed and configured. The command takes the farm name as an argument.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-farm-remove.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman farm remove farm1\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Podman Network\nDESCRIPTION: Create a network with no custom options. Podman automatically assigns a default name to the network.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-create.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman network create\npodman2\n```\n\n----------------------------------------\n\nTITLE: Using build argument file format in Podman\nDESCRIPTION: The build argument file follows a simple format with arg=value pairs on separate lines. Comment lines beginning with # and blank lines are ignored. This format allows specifying multiple build arguments in a single file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/build-arg-file.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\narg=value\n```\n\n----------------------------------------\n\nTITLE: Removing Dangling Podman Images Interactively (Shell)\nDESCRIPTION: This command removes all dangling images (those not tagged or associated with any container) from the local Podman storage. It prompts the user for confirmation before proceeding. The output lists the unique IDs of the images that were successfully removed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-prune.1.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo podman image prune\n\nWARNING! This will remove all dangling images.\nAre you sure you want to continue? [y/N] y\nf3e20dc537fb04cb51672a5cb6fdf2292e61d411315549391a0d1f64e4e3097e\n324a7a3b2e0135f4226ffdd473e4099fd9e477a74230cdc35de69e84c0f9d907\n```\n\n----------------------------------------\n\nTITLE: Mounting Home Directory with SELinux Disabled using Podman - Shell\nDESCRIPTION: Demonstrates how to use Podman to start a container with the user's home directory mounted inside, disabling SELinux separation to prevent relabeling and permission issues. The '--security-opt label=disable' flag is used along with the volume mount '-v $HOME:/home/user'. It also runs a simple 'touch' command within Fedora-based container context. Requires Podman installed and appropriate permissions; '$HOME' environmental variable must resolve correctly.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/volume.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman <<fullsubcommand>> --security-opt label=disable -v $HOME:/home/user fedora touch /home/user/file\n```\n\n----------------------------------------\n\nTITLE: Creating a Podmansh Container with Nested Container Capabilities\nDESCRIPTION: Script to create a container configuration that allows users to run nested containers with SELinux separation and access to their home directory data. This includes specific SELinux security options for container isolation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podmansh.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# useradd -s /usr/bin/podmansh fullu\n# grep fullu /etc/passwd\nfullu:x:4010:4010::/home/fullu:/usr/bin/podmansh\n# USERID=$(id -u fullu)\n# mkdir -p /etc/containers/systemd/users/${USERID}\n# cat > /etc/containers/systemd/users/${USERID}/podmansh.container << _EOF\n[Unit]\nDescription=The podmansh container\nAfter=local-fs.target\n\n[Container]\nImage=registry.fedoraproject.org/fedora\nContainerName=podmansh\nRemapUsers=keep-id\nRunInit=yes\nPodmanArgs=--security-opt=unmask=/sys/fs/selinux \\\n\t--security-opt=label=nested \\\n\t--security-opt=label=user:container_user_u \\\n\t--security-opt=label=type:container_user_t \\\n\t--security-opt=label=role:container_user_r \\\n\t--security-opt=label=level:s0-s0:c0.c1023\n\nVolume=%h/data:%h:Z\nWorkingDir=%h\nVolume=/sys/fs/selinux:/sys/fs/selinux\nExec=sleep infinity\n\n[Service]\nExecStartPre=/usr/bin/mkdir -p %h/data\n\n[Install]\nRequiredBy=default.target\n_EOF\n```\n\n----------------------------------------\n\nTITLE: Creating Systemd Hook to Reload Podman Network on Firewalld Restart\nDESCRIPTION: This systemd unit file defines a service designed to run after `firewalld.service` starts. It executes `podman network reload --all` once to ensure Podman's network rules are applied when firewalld is started or restarted (`systemctl restart firewalld`). The `PartOf=firewalld.service` directive links its lifecycle to firewalld, and `RemainAfterExit=yes` keeps the unit considered active after the command finishes.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=podman network reload\nWants=firewalld.service\nAfter=firewalld.service\nPartOf=firewalld.service\n\n[Service]\nType=simple\nRemainAfterExit=yes\nExecStart=/usr/bin/podman network reload --all\n\n[Install]\nWantedBy=default.target\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of podman system prune in Bash\nDESCRIPTION: Shows the basic syntax for the `podman system prune` command. This command is used to remove all unused containers (both dangling and unreferenced), build containers, pods, and networks from local storage. Options can be added to modify its behavior.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-prune.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman system prune [*options*]\n```\n\n----------------------------------------\n\nTITLE: Example Commands with Standard User Permissions\nDESCRIPTION: Shows various ways to execute Podman commands as a standard user, including basic command execution, using short options, and piping content from another command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/MANPAGE_SYNTAX.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n### Example comment\n$ podman command\n$ podman command -o\n$ cat $HOME/Dockerfile | podman command --option\n```\n\n----------------------------------------\n\nTITLE: Using --disable-content-trust Option in Podman Commands\nDESCRIPTION: The --disable-content-trust option is a Docker-specific feature for disabling image verification to a container registry. In Podman, this option is included for compatibility but has no effect (NOOP). It can be used with podman build, create, pull, push, and run commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/disable-content-trust.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n####> This option file is used in:\n####>   podman build, create, pull, push, run\n####> If file is edited, make sure the changes\n####> are applicable to all of those.\n#### **--disable-content-trust**\n```\n\n----------------------------------------\n\nTITLE: Filtering Podman Client Version using --format (Shell)\nDESCRIPTION: Demonstrates using the `--format` option with a Go template (`'{{.Client.Version}}'`) to extract and display only the version number of the local Podman client. This allows for precise control over the output format and requires Podman to be installed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-version.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman version --format '{{.Client.Version}}'\n2.0.0\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Handler with Gorilla Mux in Go\nDESCRIPTION: Example of using CORSMethodMiddleware with a custom OPTIONS handler to set CORS headers. Shows how to properly configure routes with method matchers and handle CORS preflight requests.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_24\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n\n    // IMPORTANT: you must specify an OPTIONS method matcher for the middleware to set CORS headers\n    r.HandleFunc(\"/foo\", fooHandler).Methods(http.MethodGet, http.MethodPut, http.MethodPatch, http.MethodOptions)\n    r.Use(mux.CORSMethodMiddleware(r))\n    \n    http.ListenAndServe(\":8080\", r)\n}\n\nfunc fooHandler(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n    if r.Method == http.MethodOptions {\n        return\n    }\n\n    w.Write([]byte(\"foo\"))\n}\n```\n\n----------------------------------------\n\nTITLE: System-wide Podman Service Setup Commands\nDESCRIPTION: Commands for setting up Podman service with systemd socket activation at system level, running as root. Includes steps for enabling and starting the service.\nSOURCE: https://github.com/containers/podman/blob/main/contrib/systemd/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload\nsystemctl enable podman.socket\nsystemctl start podman.socket\nsystemctl status podman.socket podman.service\n```\n\n----------------------------------------\n\nTITLE: Limiting Device Read Bandwidth in Podman\nDESCRIPTION: This option allows limiting the read rate from a device in bytes per second. It's used in multiple Podman commands like container clone, create, pod clone, pod create, run, and update. The example shows how to limit the read rate from /dev/sda to 1 megabyte per second.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/device-read-bps.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**--device-read-bps**=*path:rate*\n```\n\nLANGUAGE: markdown\nCODE:\n```\n**--device-read-bps=/dev/sda:1mb**\n```\n\n----------------------------------------\n\nTITLE: Advanced Logrus Configuration in Go\nDESCRIPTION: Demonstrates more advanced Logrus configuration, including setting the formatter, output, log level, and using structured logging with fields.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  log.SetFormatter(&log.JSONFormatter{})\n  log.SetOutput(os.Stdout)\n  log.SetLevel(log.WarnLevel)\n}\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 122,\n  }).Warn(\"The group's number increased tremendously!\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 100,\n  }).Fatal(\"The ice breaks!\")\n\n  contextLogger := log.WithFields(log.Fields{\n    \"common\": \"this is a common field\",\n    \"other\": \"I also should be logged always\",\n  })\n\n  contextLogger.Info(\"I'll be logged with common and other field\")\n  contextLogger.Info(\"Me too\")\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Podman Windows Installer\nDESCRIPTION: This command builds the Podman Windows installer bundle using the winmake.ps1 script. It generates an executable installer that includes the MSI package and WSL kernel installer.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_22\n\nLANGUAGE: powershell\nCODE:\n```\n.\\winmake.ps1 installer\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket in BoltDB using Go\nDESCRIPTION: This snippet demonstrates how to create a bucket in BoltDB using the Tx.CreateBucket() function within a database update transaction.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ndb.Update(func(tx *bolt.Tx) error {\n\tb, err := tx.CreateBucket([]byte(\"MyBucket\"))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"create bucket: %s\", err)\n\t}\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function for API Server in Go\nDESCRIPTION: Main function that initializes business logic implementers, creates a config for the REST API, and sets up an http.Handler. It demonstrates how to use the generated code to build a server.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-swagger/go-swagger/generator/templates/contrib/stratoscale/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// Initiate business logic implementers.\n\t// This is the main function, so here the implementers' dependencies can be\n\t// injected, such as database, parameters from environment variables, or different\n\t// clients for different APIs.\n\tp := internal.Pet{}\n\ts := internal.Store{}\n\n\t// Initiate the http handler, with the objects that are implementing the business logic.\n\th, err := restapi.Handler(restapi.Config{\n\t\tPetAPI:   &p,\n\t\tStoreAPI: &s,\n\t\tLogger:   log.Printf,\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Run the standard http server\n\tlog.Fatal(http.ListenAndServe(\":8080\", h))\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Processes Within a Container Using psgo\nDESCRIPTION: Example workflow for using psgo to inspect processes running inside a Docker container. The process involves starting a container, extracting its PID with docker inspect, then using psgo with the -join option to view processes inside the container's namespace.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/psgo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -d alpine sleep 100\n473c9a05d4223b88ef7f5a9ac11e3d21e9914e012338425cc1cef853fc6c32a2\n\n$ docker inspect --format '{{.State.Pid}}' 473c9\n5572\n\n$ sudo ./bin/psgo -pids 5572 -join\nUSER   PID   PPID   %CPU    ELAPSED         TTY   TIME   COMMAND\nroot   1     0      0.000   17.249905587s   ?     0s     sleep\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Podman Volume - Shell\nDESCRIPTION: This shell command creates a new named volume ('myvol') in Podman. No extra options are provided. Prerequisite: Podman CLI installed. The 'myvol' volume will be available for use by containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman volume create myvol\n```\n\n----------------------------------------\n\nTITLE: Querying Default Log Driver in Podman (Bash)\nDESCRIPTION: This command uses podman info to display the default log driver for the system. It formats the output to show only the Host.LogDriver field.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/log-driver.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman info --format '{{ .Host.LogDriver }}'\njournald\n```\n\n----------------------------------------\n\nTITLE: Reloading Volume Plugins with Podman\nDESCRIPTION: Example showing how to reload volume plugins using the 'podman volume reload' command. The output shows volumes that were added (vol6) and removed (t3) during the reload process.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-reload.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume reload\nAdded:\nvol6\nRemoved:\nt3\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair for Remote Connection\nDESCRIPTION: Command to generate an SSH key pair that will be used for passwordless authentication between the client and the Linux server.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/mac_win_client.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh-keygen\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple .env Files in Order with gotenv in Go\nDESCRIPTION: This snippet demonstrates loading multiple .env files in a specific order using gotenv.Load. You can specify an array of filenames, and the first value set for a variable persists. This approach is useful for managing different configurations (e.g., production vs. credentials) in Go.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/subosito/gotenv/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngotenv.Load(\".env.production\", \"credentials\")\n```\n\n----------------------------------------\n\nTITLE: Bind Mount with UID/GID Mapping\nDESCRIPTION: Bind mount with shared relabeling and UID/GID mapping to container owner\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mount.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntype=bind,src=/path/on/host,dst=/path/in/container,relabel=shared,U=true\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Progress Bars with mpb in Go\nDESCRIPTION: This Go code demonstrates synchronized rendering of multiple terminal progress bars using mpb. It leverages a WaitGroup for concurrent completion tracking and configures each bar with decorators for naming, percentage display, and ETA estimation with EWMA. Required dependencies include mpb and decor; the code expects multiple bars, each updating in separate goroutines simulating work. Inputs are the number of bars and total iterations, while outputs are visually synchronized progress bars in the terminal. Proper use of EWMA increment and WaitGroup ensures synchronized completion.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/vbauerster/mpb/v8/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    var wg sync.WaitGroup\\n    // passed wg will be accounted at p.Wait() call\\n    p := mpb.New(mpb.WithWaitGroup(&wg))\\n    total, numBars := 100, 3\\n    wg.Add(numBars)\\n\\n    for i := 0; i < numBars; i++ {\\n        name := fmt.Sprintf(\\\"Bar#%d:\\\", i)\\n        bar := p.AddBar(int64(total),\\n            mpb.PrependDecorators(\\n                // simple name decorator\\n                decor.Name(name),\\n                // decor.DSyncWidth bit enables column width synchronization\\n                decor.Percentage(decor.WCSyncSpace),\\n            ),\\n            mpb.AppendDecorators(\\n                // replace ETA decorator with \\\"done\\\" message, OnComplete event\\n                decor.OnComplete(\\n                    // ETA decorator with ewma age of 30\\n                    decor.EwmaETA(decor.ET_STYLE_GO, 30, decor.WCSyncWidth), \\\"done\\\",\\n                ),\\n            ),\\n        )\\n        // simulating some work\\n        go func() {\\n            defer wg.Done()\\n            rng := rand.New(rand.NewSource(time.Now().UnixNano()))\\n            max := 100 * time.Millisecond\\n            for i := 0; i < total; i++ {\\n                // start variable is solely for EWMA calculation\\n                // EWMA's unit of measure is an iteration's duration\\n                start := time.Now()\\n                time.Sleep(time.Duration(rng.Intn(10)+1) * max / 10)\\n                // we need to call EwmaIncrement to fulfill ewma decorator's contract\\n                bar.EwmaIncrement(time.Since(start))\\n            }\\n        }()\\n    }\\n    // wait for passed wg and for all bars to complete and flush\\n    p.Wait()\n```\n\n----------------------------------------\n\nTITLE: Using jq to Extract Registry Information\nDESCRIPTION: Shows how to use jq to extract and format registry information from JSON output.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-info.1.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ podman info -f json | jq '.registries[\"search\"]'\n[\n  \"registry.fedoraproject.org\",\n  \"registry.access.redhat.com\",\n  \"docker.io\",\n  \"quay.io\"\n]\n```\n\n----------------------------------------\n\nTITLE: Starting the Podman Service Manually with Debug Logging\nDESCRIPTION: Command to manually start the Podman system service with debug logging enabled, useful for troubleshooting.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/bindings/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman --log-level=debug system service -t0\n```\n\n----------------------------------------\n\nTITLE: Removing Manifest Entries with Podman CLI - bash\nDESCRIPTION: This snippet demonstrates use of the 'podman manifest remove' CLI command to delete a specified digest from a manifest list or image index. It requires Podman to be installed and the user to have access to the targeted manifest list or image index. The command takes two arguments: the manifest list or image index reference (name or ID) and the digest to remove, returning the list image's ID and the digest removed on success. The command must be run in a shell environment with appropriate permissions to manage container images.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-manifest-remove.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman manifest remove mylist:v1.11 sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221\npodman manifest remove e604eabaaee4858232761b4fef84e2316ed8f93e15eceafce845966ee3400036 sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a Container from a Network Using Podman CLI - Shell\nDESCRIPTION: Demonstrates the use of the Podman CLI to disconnect the 'web' container from the 'test' network. This command requires Podman to be installed and appropriate permissions to manage containers. Parameters include the network name ('test') and the container name ('web'). The command does not output any result on success but will throw errors if the specified entities do not exist or are invalid.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-disconnect.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman network disconnect test web\n```\n\n----------------------------------------\n\nTITLE: TmpFS Mount with Size Limit\nDESCRIPTION: Mount a tmpfs filesystem with 512MB size limit\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mount.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntype=tmpfs,tmpfs-size=512M,destination=/path/in/container\n```\n\n----------------------------------------\n\nTITLE: Deleting a Podman Network Using CLI - shell\nDESCRIPTION: This snippet demonstrates the standard command to delete a specified Podman-managed network by name using the Podman CLI. No additional options are provided, so only the named network is removed, and an acknowledgment message is returned. No dependencies are required beyond Podman installation, and the input is the network name. Output is a confirmation of deletion. No containers using the network will be forcibly stopped or removed in this scenario.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-rm.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# podman network rm podman9\\nDeleted: podman9\n```\n\n----------------------------------------\n\nTITLE: Removing a Podman Machine via PowerShell - PowerShell\nDESCRIPTION: Completely removes a Podman machine and its associated files from the filesystem. PowerShell snippet displays the confirmation prompt and the files to be deleted. Requires administrative privileges and user confirmation to proceed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_35\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User> podman machine rm\n\nThe following files will be deleted:\n\nC:\\Users\\User\\.ssh\\podman-machine-default\nC:\\Users\\User\\.ssh\\podman-machine-default.pub\nC:\\Users\\User\\.local\\share\\containers\\podman\\machine\\wsl\\podman-machine-default_fedora-35-x86_64.tar\nC:\\Users\\User\\.config\\containers\\podman\\machine\\wsl\\podman-machine-default.json\nC:\\Users\\User\\.local\\share\\containers\\podman\\machine\\wsl\\wsldist\\podman-machine-default\n\n\nAre you sure you want to continue? [y/N] y\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone in Podman Container\nDESCRIPTION: This snippet demonstrates the usage of the --tz flag to set the timezone in a Podman container. It supports area-based timezones, GMT time, and 'local' to match the host machine's timezone. Valid timezones can be found in /usr/share/zoneinfo/.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/tz.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--tz=*timezone*\n```\n\n----------------------------------------\n\nTITLE: Setting Container Umask in Podman CLI\nDESCRIPTION: This option allows setting the umask inside a Podman container. It defaults to 0022 and uses the local containers.conf for defaults in remote connections.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/umask.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--umask**=*umask*\n```\n\n----------------------------------------\n\nTITLE: Inspect Output Structure for Container Images - JSON\nDESCRIPTION: Showcases a representative JSON object returned by 'podman image inspect', including key fields such as Id, Digest, RepoTags, configuration, and metadata. This is used to illustrate the structure and typical data available for container images. Dependencies: output from 'podman image inspect'. Input: none (example only); Output: complex JSON structure; Limitation: actual fields depend on image metadata.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-inspect.1.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Id\": \"37e5619f4a8ca9dbc4d6c0ae7890625674a10dbcfb76201399e2aaddb40da17d\",\n    \"Digest\": \"sha256:1b0d4ddd99b1a8c8a80e885aafe6034c95f266da44ead992aab388e6aa91611a\",\n    \"RepoTags\": [\n        \"registry.fedoraproject.org/fedora:latest\"\n    ],\n    \"RepoDigests\": [\n        \"registry.fedoraproject.org/fedora@sha256:1b0d4ddd99b1a8c8a80e885aafe6034c95f266da44ead992aab388e6aa91611a\",\n        \"registry.fedoraproject.org/fedora@sha256:b5290db40008aae9272ad3a6bd8070ef7ecd547c3bef014b894c327960acc582\"\n    ],\n    \"Parent\": \"\",\n    \"Comment\": \"Created by Image Factory\",\n    \"Created\": \"2021-08-09T05:48:47Z\",\n    \"Config\": {\n        \"Env\": [\n            \"DISTTAG=f34container\",\n            \"FGC=f34\",\n            \"container=oci\"\n        ],\n        \"Cmd\": [\n            \"/bin/bash\"\n        ],\n        \"Labels\": {\n            \"license\": \"MIT\",\n            \"name\": \"fedora\",\n            \"vendor\": \"Fedora Project\",\n            \"version\": \"34\"\n        }\n    },\n    \"Version\": \"1.10.1\",\n    \"Author\": \"\",\n    \"Architecture\": \"amd64\",\n    \"Os\": \"linux\",\n    \"Size\": 183852302,\n    \"VirtualSize\": 183852302,\n    \"GraphDriver\": {\n        \"Name\": \"overlay\",\n        \"Data\": {\n            \"UpperDir\": \"/home/dwalsh/.local/share/containers/storage/overlay/0203e243f1ca4b6bb49371ecd21363212467ec6d7d3fa9f324cd4e78cc6b5fa2/diff\",\n            \"WorkDir\": \"/home/dwalsh/.local/share/containers/storage/overlay/0203e243f1ca4b6bb49371ecd21363212467ec6d7d3fa9f324cd4e78cc6b5fa2/work\"\n        }\n    },\n    \"RootFS\": {\n        \"Type\": \"layers\",\n        \"Layers\": [\n            \"sha256:0203e243f1ca4b6bb49371ecd21363212467ec6d7d3fa9f324cd4e78cc6b5fa2\"\n        ]\n    },\n    \"Labels\": {\n        \"license\": \"MIT\",\n        \"name\": \"fedora\",\n        \"vendor\": \"Fedora Project\",\n        \"version\": \"34\"\n    },\n    \"Annotations\": {},\n    \"ManifestType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n    \"User\": \"\",\n    \"History\": [\n        {\n            \"created\": \"2021-08-09T05:48:47Z\",\n            \"comment\": \"Created by Image Factory\"\n        }\n    ],\n    \"NamesHistory\": [\n        \"registry.fedoraproject.org/fedora:latest\"\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Mergo Merge Usage in Go\nDESCRIPTION: This snippet demonstrates the basic usage of the `mergo.Merge` function. It merges the `src` struct into the `dst` struct, filling in zero-value fields in `dst` with values from `src`. An error check is included.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/imdario/mergo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: List of Built-in Parameterized Validators in GoValidator\nDESCRIPTION: This snippet lists the standard validation tags available in `govalidator` that accept parameters. It shows the mapping between the tag name format (e.g., \"range(min|max)\", \"length(min|max)\") and the corresponding internal validation function. These tags allow for more flexible validation based on specific criteria like length or range.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n```go\n\"range(min|max)\": Range,\n\"length(min|max)\": ByteLength,\n\"runelength(min|max)\": RuneLength,\n\"stringlength(min|max)\": StringLength,\n\"matches(pattern)\": StringMatches,\n\"in(string1|string2|...|stringN)\": IsIn,\n\"rsapub(keylength)\" : IsRsaPub,\n\"minstringlength(int): MinStringLength,\n\"maxstringlength(int): MaxStringLength,\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pidfile Location with Podman Inspect (Bash)\nDESCRIPTION: This command uses podman inspect to retrieve the location of the pidfile for a specific container. It formats the output to display only the PidFile value. The $CID variable represents the container ID.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/pidfile.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman inspect --format '{{ .PidFile }}' $CID\n/run/containers/storage/${storage-driver}-containers/$CID/userdata/pidfile\n```\n\n----------------------------------------\n\nTITLE: Displaying Container Namespaces with Podman\nDESCRIPTION: Uses the podman ps --ns -a command to list all containers along with their namespace information. This shows PID, CGROUP, IPC, MNT, NET, PIDNS, USER, and UTS namespace details for each container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-ps.1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ podman ps --ns -a\nCONTAINER ID    NAMES                                                                   PID     CGROUP       IPC          MNT          NET          PIDNS        USER         UTS\n3557d882a82e3   k8s_container2_podsandbox1_redhat.test.crio_redhat-test-crio_1          29910   4026531835   4026532585   4026532593   4026532508   4026532595   4026531837   4026532594\n09564cdae0bec   k8s_container1_podsandbox1_redhat.test.crio_redhat-test-crio_1          29851   4026531835   4026532585   4026532590   4026532508   4026532592   4026531837   4026532591\na31ebbee9cee7   k8s_podsandbox1-redis_podsandbox1_redhat.test.crio_redhat-test-crio_0   29717   4026531835   4026532585   4026532587   4026532508   4026532589   4026531837   4026532588\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Period Parameter in Podman\nDESCRIPTION: The --cpu-period option sets the CPU time period for the Completely Fair Scheduler (CFS) in microseconds. The default value is 100000 microseconds. This setting determines how long a container must wait after using its CPU quota before it can run again. Note that this feature has limitations for non-root users and is not supported on cgroups V1 rootless systems.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cpu-period.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--cpu-period=limit\n```\n\n----------------------------------------\n\nTITLE: Setting PID Limits in Podman Containers\nDESCRIPTION: Controls the maximum number of processes that can run inside a container. Default limit is 2048 on systems with pids cgroup controller support. Set to -1 for unlimited processes.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/pids-limit.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--pids-limit=limit\n```\n\n----------------------------------------\n\nTITLE: Creating a Podman Pod with Port Mappings\nDESCRIPTION: This command creates a Podman pod with specific port mappings. It's used to illustrate the correct way to expose ports for containers running within a pod.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ podman pod create --name srcview -p 127.0.0.1:3434:3434 -p 127.0.0.1:7080:7080 -p 127.0.0.1:3370:3370\n```\n\n----------------------------------------\n\nTITLE: Using the --timestamp Option in Podman CLI\nDESCRIPTION: This command-line option sets the image creation timestamp to a specific value (seconds since epoch) for `podman build` and `farm build`. This allows for deterministic builds by ensuring the image hash remains the same if the source content hasn't changed, overriding the default behavior of using the current time. It affects the image manifest timestamp and the timestamp of files committed to the layers of the image. It has no effect if the Containerfile only contains a `FROM` instruction.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/timestamp.md#2025-04-23_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n--timestamp=seconds\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Modes in Podman\nDESCRIPTION: Detailed specification of network mode options for Podman containers, including none, host, private, named networks, slirp4netns, and pasta networking configurations. Includes advanced configuration options for user-mode networking stacks.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/network.image.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####> This option file is used in:\\n####>   podman build, farm build\\n####> If file is edited, make sure the changes\\n####> are applicable to all of those.\\n#### **--network**=*mode*, **--net**\\n\\nSets the configuration for network namespaces when handling `RUN` instructions.\\n\\nValid _mode_ values are:\\n\\n- **none**: no networking.\\n- **host**: use the Podman host network stack. Note: the host mode gives the\\ncontainer full access to local system services such as D-bus and is therefore\\nconsidered insecure.\\n- **ns:**_path_: path to a network namespace to join.\\n- **private**: create a new namespace for the container (default)\\n- **\\<network name|ID\\>**: Join the network with the given name or ID\\n- **slirp4netns[:OPTIONS,...]**: use **slirp4netns**(1) to create a user network stack\\n- **pasta[:OPTIONS,...]**: use **pasta**(1) to create a user-mode networking stack\n```\n\n----------------------------------------\n\nTITLE: Encoding Structs into Form Values using gorilla/schema in Go\nDESCRIPTION: This Go snippet shows how to serialize a struct into form values using gorilla/schema's Encoder, suitable for making HTTP requests with form payloads. It creates a reusable Encoder, prepares a Person struct instance, encodes its fields into a url.Values map, handles errors, and uses the result with an http.Client. Dependencies include the gorilla/schema package, net/url, and net/http, and key parameters are the struct to encode and the form to populate. Encoder.Encode populates the form map for subsequent use in HTTP POSTs.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/schema/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar encoder = schema.NewEncoder()\n\nfunc MyHttpRequest() {\n    person := Person{\"Jane Doe\", \"555-5555\"}\n    form := url.Values{}\n\n    err := encoder.Encode(person, form)\n\n    if err != nil {\n        // Handle error\n    }\n\n    // Use form values, for example, with an http client\n    client := new(http.Client)\n    res, err := client.PostForm(\"http://my-api.test\", form)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Copying a File from Podman Machine to Host - Bash Command Line\nDESCRIPTION: This example illustrates using 'podman machine cp' to copy a file from the running Podman virtual machine back to the host. The source follows the syntax <machine-name>:<path-within-vm>, and the destination is a local path on the host. Prerequisites include an active Podman VM and proper permissions to access both source and destination paths.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-cp.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman machine cp podman-machine-default:~/logs/log.txt ~/logs/podman-machine-default.txt\n...\n```\n\n----------------------------------------\n\nTITLE: Formatting Podman Disk Usage Output (Shell)\nDESCRIPTION: Demonstrates using the `--format` option with `podman system df` to customize the output using a Go template. This specific example formats the output to show only the resource type and the total count for each type, separated by a tab character.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-df.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman system df --format \"{{.Type}}\\t{{.Total}}\"\nImages          1\nContainers      5\nLocal Volumes   1\n```\n\n----------------------------------------\n\nTITLE: Enabling container_manage_cgroup SELinux Boolean for Systemd in Containers\nDESCRIPTION: This command enables the container_manage_cgroup SELinux boolean, allowing containers to write to the cgroup file system on SELinux-enabled systems. This is necessary for systemd to function properly in confined containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/systemd.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsetsebool -P container_manage_cgroup true\n```\n\n----------------------------------------\n\nTITLE: Importing Tarball with CMD, ENTRYPOINT, and LABEL Changes (Shell)\nDESCRIPTION: Imports a local tarball 'ctr.tar' into a new Podman image named 'image-imported'. It uses the '--change' option multiple times to set the CMD, ENTRYPOINT, and a LABEL instruction for the resulting image. Output shows the import process including blob and config copying.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-import.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman import --change CMD=/bin/bash --change ENTRYPOINT=/bin/sh --change LABEL=blue=image ctr.tar image-imported\nGetting image source signatures\nCopying blob sha256:b41deda5a2feb1f03a5c1bb38c598cbc12c9ccd675f438edc6acd815f7585b86\n 25.80 MB / 25.80 MB [======================================================] 0s\nCopying config sha256:c16a6d30f3782288ec4e7521c754acc29d37155629cb39149756f486dae2d4cd\n 448 B / 448 B [============================================================] 0s\nWriting manifest to image destination\nStoring signatures\ndb65d991f3bbf7f31ed1064db9a6ced7652e3f8166c4736aa9133dadd3c7acb3\n```\n\n----------------------------------------\n\nTITLE: Building Podman macOS Installer Package\nDESCRIPTION: Commands for building the Podman installer package for macOS with different architecture options and optional code signing and notarization. The resulting package will be written to out/podman-macos-installer-*.pkg and installs components to /opt/podman.\nSOURCE: https://github.com/containers/podman/blob/main/contrib/pkginstaller/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ make ARCH=<amd64 | aarch64 | universal> NO_CODESIGN=1 pkginstaller\n\n# or to create signed pkg\n$ make ARCH=<amd64 | aarch64 | universal> CODESIGN_IDENTITY=<ID> PRODUCTSIGN_IDENTITY=<ID> pkginstaller\n\n# or to prepare a signed and notarized pkg for release\n$ make ARCH=<amd64 | aarch64 | universal> CODESIGN_IDENTITY=<ID> PRODUCTSIGN_IDENTITY=<ID> NOTARIZE_USERNAME=<appleID> NOTARIZE_PASSWORD=<appleID-password> NOTARIZE_TEAM=<team-id> notarize\n```\n\n----------------------------------------\n\nTITLE: Listing Specific Processes with psgo Using PIDs Flag\nDESCRIPTION: Demonstrating how to use the --pids flag with psgo to restrict output to specific processes. The command accepts a comma-separated list of process IDs and returns information for only those processes.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/psgo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./bin/psgo --pids 1,$(pgrep bash | tr \"\\n\" \",\")\nUSER   PID     PPID    %CPU    ELAPSED                TTY     TIME   COMMAND\nroot   1       0       0.009   128h52m44.193475932s   ?       40s    systemd\nroot   20830   20827   0.000   105h2m44.19579679s     pts/5   0s     bash\nroot   25843   25840   0.000   102h56m4.196072027s    pts/6   0s     bash\n```\n\n----------------------------------------\n\nTITLE: Starting Local HTTP Server for Documentation Preview\nDESCRIPTION: Command to start a Python HTTP server to preview the generated HTML documentation files locally on port 8000.\nSOURCE: https://github.com/containers/podman/blob/main/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server 8000 --directory build/html\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values with Struct Tags in gorilla/schema (Go)\nDESCRIPTION: This Go snippet demonstrates usage of the 'default' tag option in the schema struct tag with gorilla/schema to specify fallback values for fields during encoding/decoding. Defaults are applied for supported field types (primitives and slices) if the field is zero-valued, empty, or nil. The example shows string, int, bool, float64, and slice fields, with values provided via the tag after 'default:'. Limitations regarding Go zero values and pointer usage for distinguishing unset fields are described in the surrounding documentation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/schema/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Person struct {\n    Phone string `schema:\"phone,default:+123456\"`          // custom name\n    Age int     `schema:\"age,default:21\"`\n\tAdmin bool    `schema:\"admin,default:false\"`\n\tBalance float64 `schema:\"balance,default:10.0\"`\n    Friends []string `schema:friends,default:john|bob`\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Root to Shared Mount with mount Command - Bash\nDESCRIPTION: This command changes the propagation property of the root ('/') mount to shared, which can be a prerequisite for directories mounted elsewhere to also become shared. It is expected to be run by administrators aware of system implications. Usage of this command affects the system globally, and may be required for downstream mount propagation for container use-cases.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/volume.image.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmount --make-shared /\n```\n\n----------------------------------------\n\nTITLE: Configuring and Reading Config Files with Viper\nDESCRIPTION: Demonstrates how to set up Viper to search for and read a configuration file. It shows setting the config name, type, and search paths, as well as error handling.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nviper.SetConfigName(\"config\") // name of config file (without extension)\nviper.SetConfigType(\"yaml\") // REQUIRED if the config file does not have the extension in the name\nviper.AddConfigPath(\"/etc/appname/\")   // path to look for the config file in\nviper.AddConfigPath(\"$HOME/.appname\")  // call multiple times to add many search paths\nviper.AddConfigPath(\".\")               // optionally look for config in the working directory\nerr := viper.ReadInConfig() // Find and read the config file\nif err != nil { // Handle errors reading the config file\n\tpanic(fmt.Errorf(\"fatal error config file: %w\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Container Filesystem to a Tarball - Podman CLI - Shell\nDESCRIPTION: Demonstrates the use of the podman export command with the -o flag to export a container's filesystem directly into a specified tar file. No additional prerequisites are required apart from having Podman installed and access to a running or stopped container. The key parameter is -o/--output for defining the destination tarball, and the container ID specifies the source. The command outputs a tar archive containing the container filesystem.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-export.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman export -o redis-container.tar 883504668ec465463bc0fe7e63d53154ac3b696ea8d7b233748918664ea90e57\n```\n\n----------------------------------------\n\nTITLE: Displaying User Namespace Mappings with podman unshare\nDESCRIPTION: This shell command uses `podman unshare` to execute `cat` on `/proc/self/uid_map` and `/proc/self/gid_map` within the user namespace. This displays the UID and GID mappings configured for the rootless container environment, showing how host UIDs/GIDs map to container UIDs/GIDs.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-unshare.1.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ podman unshare cat /proc/self/uid_map /proc/self/gid_map\n         0       1000          1\n         1      10000      65536\n         0       1000          1\n         1      10000      65536\n```\n\n----------------------------------------\n\nTITLE: Restarting All Podman Pods\nDESCRIPTION: Demonstrates the use of the '--all' or '-a' flag to restart all existing Podman pods managed by the current user. The command outputs the IDs of all successfully restarted pods, each on a separate line.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod-restart.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npodman pod restart --all\n19456b4cd557eaf9629825113a552681a6013f8c8cad258e36ab825ef536e818\n3557fbea6ad61569de0506fe037479bd9896603c31d3069a6677f23833916fab\n490eb241aaf704d4dd2629904410fe4aa31965d9310a735f8755267f4ded1de5\n70c358daecf71ef9be8f62404f926080ca0133277ef7ce4f6aa2d5af6bb2d3e9\ncc8f0bea67b1a1a11aec1ecd38102a1be4b145577f21fc843c7c83b77fc28907\n```\n\n----------------------------------------\n\nTITLE: Pausing a Pod by Name - Podman CLI - Shell\nDESCRIPTION: Demonstrates how to pause all processes in the containers of a specific pod using its name with the podman pod pause command. Requires Podman to be installed and properly configured. The pod name (here 'mywebserverpod') is specified as a positional argument. When executed, all running processes inside every container in the named pod will be paused until they are explicitly unpaused.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod-pause.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman pod pause mywebserverpod\n```\n\n----------------------------------------\n\nTITLE: Creating a Checkpoint Image for a Container - Podman CLI - Bash\nDESCRIPTION: This example shows how to create a checkpoint image named 'mywebserver-checkpoint-1' from the container 'mywebserver' using Podman. It requires Podman, a running container, and access to the local image store. The resulting image includes the container state and can be exported or restored on another system if needed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-checkpoint.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# podman container checkpoint --create-image mywebserver-checkpoint-1 mywebserver\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Secret with Podman CLI - Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the podman secret inspect command to display detailed information about a secret named 'mysecret'. No additional options are provided, so all information (except secret data) is shown in a default JSON array format. The command requires Podman to be installed and properly configured. The main parameter is the secret name; the output is a JSON description of the secret, excluding secret content by default.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-secret-inspect.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman secret inspect mysecret\n```\n\n----------------------------------------\n\nTITLE: Listing Containers with Size Information\nDESCRIPTION: Uses the podman ps -a -s command to list all containers including their size. This operation takes longer as Podman needs to calculate sizes from the file system.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-ps.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman ps -a -s\nCONTAINER ID   IMAGE         COMMAND         CREATED       STATUS                    PORTS     NAMES                                                                  SIZE\n02f65160e14ca  redis:alpine  \"redis-server\"  20 hours ago  Exited (-1) 20 hours ago  6379/tcp  k8s_podsandbox1-redis_podsandbox1_redhat.test.crio_redhat-test-crio_0  27.49 MB\n69ed779d8ef9f  redis:alpine  \"redis-server\"  25 hours ago  Created                   6379/tcp  k8s_container1_podsandbox1_redhat.test.crio_redhat-test-crio_1         27.49 MB\n```\n\n----------------------------------------\n\nTITLE: Glob Mount with Read-only Option\nDESCRIPTION: Mount multiple files matching a glob pattern as read-only\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mount.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntype=glob,src=/usr/lib/libfoo*,destination=/usr/lib,ro=true\n```\n\n----------------------------------------\n\nTITLE: Tailing a File and Printing Lines using nxadm/tail in Go\nDESCRIPTION: This Go snippet demonstrates initializing a file tailer for `/var/log/nginx.log` using `tail.TailFile` from the `nxadm/tail` library. The configuration `tail.Config{Follow: true, ReOpen: true}` ensures the tailer follows the file for new lines and reopens it if it gets truncated or moved (common with log rotation). It then enters a loop, reading lines from the `t.Lines` channel and printing the `Text` field of each `tail.Line` struct to standard output using `fmt.Println`. Basic error handling is included using `panic`.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/nxadm/tail/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n```Go\n// Create a tail\nt, err := tail.TailFile(\n\t\"/var/log/nginx.log\", tail.Config{Follow: true, ReOpen: true})\nif err != nil {\n    panic(err)\n}\n\n// Print the text of each received line\nfor line := range t.Lines {\n    fmt.Println(line.Text)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Podman Machine Info as JSON (Shell/JSON)\nDESCRIPTION: Shows how to use the `--format json` option with `podman machine info` to retrieve host and version details in JSON format. This output format is suitable for programmatic parsing. Requires Podman installation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-info.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine info --format json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Host\": {\n    \"Arch\": \"amd64\",\n    \"CurrentMachine\": \"\",\n    \"DefaultMachine\": \"\",\n    \"EventsDir\": \"/run/user/3267/podman\",\n    \"MachineConfigDir\": \"/home/myusername/.config/containers/podman/machine/qemu\",\n    \"MachineImageDir\": \"/home/myusername/.local/share/containers/podman/machine/qemu\",\n    \"MachineState\": \"\",\n    \"NumberOfMachines\": 0,\n    \"OS\": \"linux\",\n    \"VMType\": \"qemu\"\n  },\n  \"Version\": {\n    \"APIVersion\": \"4.4.0\",\n    \"Version\": \"4.4.0\",\n    \"GoVersion\": \"go1.20\",\n    \"GitCommit\": \"aa196c0d5c9abd5800edf9e27587c60343a26c2b-dirty\",\n    \"BuiltTime\": \"Wed Feb 22 15:30:48 2023\",\n    \"Built\": 1677097848,\n    \"OsArch\": \"linux/amd64\",\n    \"Os\": \"linux\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Podman Folders After Uninstallation\nDESCRIPTION: This script removes additional folders that may remain after uninstalling Podman. It targets specific directories in the user's profile and program data.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_31\n\nLANGUAGE: powershell\nCODE:\n```\n$extraFolders = @(\n    \"$ENV:PROGRAMDATA\\containers\\\"\n    \"$ENV:LOCALAPPDATA\\containers\\\"\n    \"$env:USERPROFILE.config\\containers\\\"\n    \"$env:USERPROFILE.local\\share\\containers\\\"\n    )\n$extraFolders | ForEach-Object {Remove-Item -Recurse -Force $PSItem}\n```\n\n----------------------------------------\n\nTITLE: Volume Configuration Table for Podman\nDESCRIPTION: Mapping table showing Volume section options and their corresponding podman volume create commands\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n| **[Volume] options**                | **podman volume create equivalent**       |\n|-------------------------------------|-------------------------------------------|\n|ContainersConfModule=/etc/nvd\\.conf | --module=/etc/nvd\\.conf                   |\n|Copy=true                           | --opt copy                                |\n|Device=tmpfs                        | --opt device=tmpfs                        |\n|Driver=image                        | --driver=image                            |\n|GlobalArgs=--log-level=debug        | --log-level=debug                         |\n|Group=192                           | --opt group=192                           |\n|Image=quay.io/centos/centos\\:latest | --opt image=quay.io/centos/centos\\:latest |\n|Label=\"foo=bar\"                     | --label \"foo=bar\"                         |\n|Options=XYZ                         | --opt \"o=XYZ\"                             |\n|PodmanArgs=--driver=image           | --driver=image                            |\n|Type=type                           | Filesystem type of Device                 |\n|User=123                            | --opt uid=123                             |\n|VolumeName=foo                      | podman volume create foo                  |\n```\n\n----------------------------------------\n\nTITLE: Mounting Secret with Custom Path and UID in Podman\nDESCRIPTION: This snippet demonstrates how to mount a secret at a custom location (/my/location/mysecret) with a specific UID (1) when creating or running a Podman container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/secret.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--secret mysecret,target=/my/location/mysecret,uid=1\n```\n\n----------------------------------------\n\nTITLE: Using --env-file Option in Podman Commands\nDESCRIPTION: The --env-file option allows reading environment variables from a specified file. This file should be line-delimited, with each line containing an environment variable. This option is available in podman create, exec, and run commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/env-file.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####> This option file is used in:\n####>   podman create, exec, run\n####> If file is edited, make sure the changes\n####> are applicable to all of those.\n#### **--env-file**=*file*\n\nRead in a line-delimited file of environment variables.\n```\n\n----------------------------------------\n\nTITLE: Customizing /etc/passwd Entry in Podman Containers\nDESCRIPTION: The --passwd-entry option allows customization of the entry written to /etc/passwd within the container when --passwd is used. It supports variables that are automatically replaced with their runtime values.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/passwd-entry.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--passwd-entry=ENTRY\n```\n\n----------------------------------------\n\nTITLE: Setting ulimit in Podman Container Run Command\nDESCRIPTION: This snippet demonstrates how to use the --ulimit option when running a Podman container. It sets the nofile (maximum number of open files) limit to 1024 for both soft and hard limits, and then checks the limit inside the container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/ulimit.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run --ulimit nofile=1024:1024 --rm ubi9 ulimit -n\n```\n\n----------------------------------------\n\nTITLE: Tagging a Container Image for Sharing with Podman\nDESCRIPTION: Shows how to tag a local container image for pushing to a remote registry using the podman tag command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/Introduction.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npodman tag localhost/hello quay.io/USERNAME/hello\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Prompt with Validation in Go\nDESCRIPTION: This snippet demonstrates how to create a basic prompt using Promptui. It includes input validation to ensure the user enters a valid number.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/manifoldco/promptui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"strconv\"\n\n\t\"github.com/manifoldco/promptui\"\n)\n\nfunc main() {\n\tvalidate := func(input string) error {\n\t\t_, err := strconv.ParseFloat(input, 64)\n\t\tif err != nil {\n\t\t\treturn errors.New(\"Invalid number\")\n\t\t}\n\t\treturn nil\n\t}\n\n\tprompt := promptui.Prompt{\n\t\tLabel:    \"Number\",\n\t\tValidate: validate,\n\t}\n\n\tresult, err := prompt.Run()\n\n\tif err != nil {\n\t\tfmt.Printf(\"Prompt failed %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"You choose %q\\n\", result)\n}\n```\n\n----------------------------------------\n\nTITLE: Using --cpuset-mems Option in Podman\nDESCRIPTION: Example showing how to restrict a container to use memory from specific NUMA nodes. This option allows limiting container memory usage to specified memory nodes (0-3, 0,1), which is particularly useful on NUMA systems. Note that this option has limitations for non-root users and is not supported on cgroups V1 rootless systems.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cpuset-mems.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--cpuset-mems**=*nodes*\n```\n\n----------------------------------------\n\nTITLE: Updating DNS Servers in Podman Network | Shell CLI\nDESCRIPTION: This snippet demonstrates how to use the podman network update command to add new DNS server addresses to an existing container network. The command requires specifying the target network and the --dns-add option followed by a comma-separated list of resolvers. The only dependency is a working Podman installation configured with the netavark network backend. The main parameters are the network name and desired DNS servers to add. The expected output is an updated network configuration with the new DNS entries applied.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-update.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman network update network1 --dns-add 8.8.8.8,1.1.1.1\n```\n\n----------------------------------------\n\nTITLE: Describing Podman Build Option: Squash Layers\nDESCRIPTION: The --squash option is used in Podman build and farm build commands. When applied, it combines all new layers of the image into a single new layer, while preserving any pre-existing layers. This can help reduce the overall size and complexity of the resulting image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/squash.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--squash**\n\nSquash all of the image's new layers into a single new layer; any preexisting layers are not squashed.\n```\n\n----------------------------------------\n\nTITLE: Specifying Image for Podman Pull in Quadlet\nDESCRIPTION: Defines the image to be pulled. It's recommended to use a fully qualified image name for performance and robustness. The format supports using ':tag' or digests to specify image versions.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_46\n\nLANGUAGE: ini\nCODE:\n```\nImage=\n```\n\n----------------------------------------\n\nTITLE: Verifying Podman Uninstallation on Windows\nDESCRIPTION: This script checks various locations to ensure that Podman has been successfully uninstalled from the system, including program files, registry entries, and user directories.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_32\n\nLANGUAGE: powershell\nCODE:\n```\nSelect-String -Path \"podman-setup-uninstall_000_Setup.log\" -Pattern \"Removal success or error status: 0\"\n$foldersToCheck = @(\n    \"$ENV:PROGRAMFILES\\RedHat\\Podman\\podman.exe\"\n    \"HKLM:\\SOFTWARE\\Red Hat\\Podman\"\n    \"$ENV:PROGRAMDATA\\containers\\\"\n    \"$env:USERPROFILE.config\\containers\\\"\n    \"$env:USERPROFILE.local\\share\\containers\\\"\n    \"$ENV:LOCALAPPDATA\\containers\\\"\n    \"$ENV:PROGRAMDATA\\containers\\containers.conf.d\\99-podman-machine-provider.conf\"\n)\n$foldersToCheck | ForEach-Object {Test-Path -Path $PSItem}\n```\n\n----------------------------------------\n\nTITLE: Setting Static IP and MAC Address for Bridge Network in Podman\nDESCRIPTION: Example of using the --network option to set a static IPv4 address and MAC address for a container on the default bridge network.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/network.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--network bridge:ip=10.88.0.10,mac=44:33:22:11:00:99\n```\n\n----------------------------------------\n\nTITLE: Stopping a Podman Container - Shell\nDESCRIPTION: This command stops a running container identified by its container ID using Podman. It is a standard part of the container lifecycle and is necessary before removal. Returns no output on success; the specified container transitions to a stopped state.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npodman stop <container_id>\n```\n\n----------------------------------------\n\nTITLE: Executing QMP Status Query Command in Go\nDESCRIPTION: Demonstrates how to execute a QMP command to query VM status and parse the JSON response into a structured type.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/digitalocean/go-qemu/qmp/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype StatusResult struct {\n\tID     string `json:\"id\"`\n\tReturn struct {\n\t\tRunning    bool   `json:\"running\"`\n\t\tSinglestep bool   `json:\"singlestep\"`\n\t\tStatus     string `json:\"status\"`\n\t} `json:\"return\"`\n}\n\nmonitor.Connect()\ndefer monitor.Disconnect()\n\ncmd := []byte(`{ \"execute\": \"query-status\" }`)\nraw, _ := monitor.Run(cmd)\n\nvar result StatusResult\njson.Unmarshal(raw, &result)\n\nfmt.Println(result.Return.Status)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example for Logrus - Go\nDESCRIPTION: This Go program demonstrates the simplest method to use the package-level exported logger provided by Logrus. It imports the Logrus package as 'log', uses WithFields to attach arbitrary fields to a log entry, and emits an info-level log. Dependencies are Go and Logrus. No special configuration is required and the output is structured logs with fields attached.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n  log \"github.com/sirupsen/logrus\"\\n)\\n\\nfunc main() {\\n  log.WithFields(log.Fields{\\n    \"animal\": \"walrus\",\\n  }).Info(\"A walrus appears\")\\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Tracing Context to HTTP Headers with OpenTracing Go\nDESCRIPTION: Shows how to inject a tracing span context into HTTP headers of an outgoing request using the Inject method. Requires context, OpenTracing, and the net/http package. Inputs: context.Context and outbound HTTP request; outputs: request with tracing headers for downstream propagation. Proper error handling and span existence checks are included. Limitations: assumes span is present in the context.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n    func makeSomeRequest(ctx context.Context) ... {\n        if span := opentracing.SpanFromContext(ctx); span != nil {\n            httpClient := &http.Client{}\n            httpReq, _ := http.NewRequest(\"GET\", \"http://myservice/\", nil)\n\n            // Transmit the span's TraceContext as HTTP headers on our\n            // outbound request.\n            opentracing.GlobalTracer().Inject(\n                span.Context(),\n                opentracing.HTTPHeaders,\n                opentracing.HTTPHeadersCarrier(httpReq.Header))\n\n            resp, err := httpClient.Do(httpReq)\n            ...\n        }\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Executing podman system reset (Shell)\nDESCRIPTION: Shows an example execution of the `podman system reset` command in a shell environment. The command prompts the user for confirmation before proceeding to remove all Podman containers, pods, images, networks, build cache, machines, volumes, and the configured `graphRoot` and `runRoot` directories. The user responds with 'y' to confirm.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-reset.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman system reset\nWARNING! This will remove:\n        - all containers\n        - all pods\n        - all images\n        - all networks\n        - all build cache\n        - all machines\n        - all volumes\n        - the graphRoot directory: /var/lib/containers/storage\n        - the runRoot directory: /run/containers/storage\nAre you sure you want to continue? [y/N] y\n```\n\n----------------------------------------\n\nTITLE: Running a Simple Container Command (PowerShell)\nDESCRIPTION: Demonstrates running a basic container command using `podman run`. This example executes the `date` command inside a minimal UBI 8 container (`ubi8-micro`) directly from the PowerShell prompt.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User> podman run ubi8-micro date\n```\n\n----------------------------------------\n\nTITLE: Unpausing a Pod by ID Using Podman - CLI\nDESCRIPTION: Shows how to resume a paused pod using its unique pod ID with the Podman CLI. Assumes Podman is installed and the given ID (e.g., '860a4b23') refers to an existing and paused pod. The command restores the pod's containers to a running state, reporting any errors or confirmations to standard output.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod-unpause.1.md#2025-04-23_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\npodman pod unpause 860a4b23\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Podman Connection (Shell)\nDESCRIPTION: This shell command demonstrates setting a pre-configured Podman system connection named 'production' as the default connection. Subsequent Podman commands that interact with the service will target this 'production' destination unless otherwise specified. Requires Podman and an existing connection named 'production'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-connection-default.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman system connection default production\n```\n\n----------------------------------------\n\nTITLE: User-level Podman Service Setup Commands\nDESCRIPTION: Commands for setting up Podman service with systemd socket activation at user level (rootless mode). Includes directory creation and service management commands.\nSOURCE: https://github.com/containers/podman/blob/main/contrib/systemd/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.config/systemd/user\nsystemctl --user enable podman.socket\nsystemctl --user start podman.socket\nsystemctl --user status podman.socket podman.service\n```\n\n----------------------------------------\n\nTITLE: Cleaning External Remnants with --external in Bash\nDESCRIPTION: Shows how to use the `--external` flag with `podman system prune`. This option attempts to clean up leftover container or layer data that is no longer referenced in storage metadata, often resulting from unclean shutdowns or restarts in transient storage mode. It is incompatible with `--all` and `--filter` and changes the default pruning behavior.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-prune.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npodman system prune --external\n```\n\n----------------------------------------\n\nTITLE: Configuring Podman Volume Options\nDESCRIPTION: This snippet shows the available configuration options for Podman volumes. It includes settings for copying content, specifying devices, drivers, and various other volume-related options.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\nCopy=true\nDevice=/path/to/device\nDriver=image\nGlobalArgs=arg1 arg2\nGroup=groupname\nImage=image:tag\nLabel=key1=value1\nLabel=key2=value2\nOptions=mount_option1,mount_option2\nPodmanArgs=arg1 arg2\nType=filesystem\nUser=username\nVolumeName=custom-volume-name\n```\n\n----------------------------------------\n\nTITLE: Switching to Rootless User with EnterNS in WSL - Bash\nDESCRIPTION: Uses the 'enterns' wrapper inside a WSL Podman machine shell to switch from the root user to a named rootless user ('user'). This is necessary for running Podman in rootless mode, which isolates containers within the user namespace. Requires WSL, an initialized Podman machine, and the specified user to exist.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nwsl -d podman-machine-default enterns su user\n[user@WINPC /]$ id\nuid=1000(user) gid=1000(user) groups=1000(user),10(wheel)\n```\n\n----------------------------------------\n\nTITLE: Configuring Decryption Key for Podman Image Pull in Quadlet\nDESCRIPTION: Specifies the key and optional passphrase for decryption of images. This follows the format '[key[:passphrase]]' and is equivalent to the '--decryption-key' option in Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\nDecryptionKey=\n```\n\n----------------------------------------\n\nTITLE: SSHing into Default Podman VM (Interactive Session)\nDESCRIPTION: Demonstrates how to establish an interactive SSH session with the default Podman virtual machine (`podman-machine-default`) using the `podman machine ssh` command without any arguments.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-ssh.1.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine ssh\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Podman Images by Short IDs (Shell)\nDESCRIPTION: Illustrates removing several local images simultaneously by providing a space-separated list of their shortened IDs as arguments to the `podman rmi` command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-rmi.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman rmi c4dfb1609ee2 93fd78260bd1 c0ed59d05ff7\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Swappiness in Podman Containers\nDESCRIPTION: The --memory-swappiness option allows tuning of a container's memory swappiness behavior. It accepts an integer value between 0 and 100. This option is only supported on cgroups V1 rootful systems.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/memory-swappiness.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--memory-swappiness=number\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JSON Formatter for Logrus in Go\nDESCRIPTION: This snippet demonstrates how to implement a custom formatter by implementing the Formatter interface. The example creates a custom JSON formatter that serializes the entry data.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype MyJSONFormatter struct {\n}\n\nlog.SetFormatter(new(MyJSONFormatter))\n\nfunc (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {\n  // Note this doesn't include Time, Level and Message which are available on\n  // the Entry. Consult `godoc` on information about those fields or read the\n  // source of the official loggers.\n  serialized, err := json.Marshal(entry.Data)\n    if err != nil {\n      return nil, fmt.Errorf(\"Failed to marshal fields to JSON, %w\", err)\n    }\n  return append(serialized, '\\n'), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Podman Events in JSON Lines - Bash/JSON\nDESCRIPTION: This example shows using '--format json' to output Podman events as JSON Lines. Each event is a single JSON object on a line, suitable for machine parsing and integration with tools or logging systems. Inputs are none; output is one line per event, each with fields like ID, Image, Name, Status, Time, and Type. Requires Podman 2.x+ with event-format support, and consumers must be able to process JSON objects.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-events.1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ podman events --format json\n{\"ID\":\"683b0909d556a9c02fa8cd2b61c3531a965db42158627622d1a67b391964d519\",\"Image\":\"localhost/myshdemo:latest\",\"Name\":\"agitated_diffie\",\"Status\":\"cleanup\",\"Time\":\"2019-04-27T22:47:00.849932843-04:00\",\"Type\":\"container\"}\n{\"ID\":\"a0f8ab051bfd43f9c5141a8a2502139707e4b38d98ac0872e57c5315381e88ad\",\"Image\":\"docker.io/library/alpine:latest\",\"Name\":\"friendly_tereshkova\",\"Status\":\"unmount\",\"Time\":\"2019-04-28T13:43:38.063017276-04:00\",\"Type\":\"container\"}\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Caller Tracing Overhead - Go\nDESCRIPTION: This command runs Go benchmarks that measure the overhead incurred by enabling caller tracing in Logrus with SetReportCaller(true). It requires a valid Go environment and testable logrus package source. Output is benchmark results showing performance impact.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ngo test -bench=.*CallerTracing\n```\n\n----------------------------------------\n\nTITLE: Building the Podman Windows Client\nDESCRIPTION: Command to build the Podman client (podman.exe) for Windows using the winmake.ps1 script provided in the repository.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_14\n\nLANGUAGE: pwsh\nCODE:\n```\n.\\winmake.ps1 podman-remote\n```\n\n----------------------------------------\n\nTITLE: Using --annotation Option in Podman Commands\nDESCRIPTION: The --annotation option allows setting annotations on entries for specified images or artifacts in Podman. It accepts key-value pairs in the format 'annotation=value'. This option is used across multiple Podman commands including artifact add, manifest add, and manifest annotate.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/annotation.manifest.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--annotation=*annotation=value*\n```\n\n----------------------------------------\n\nTITLE: Configuring Sigstore Signing for Podman Push Commands\nDESCRIPTION: This snippet defines the --sign-by-sigstore option for Podman push commands. It allows adding a sigstore signature based on parameters specified in a separate file. The option is applicable to artifact push, manifest push, and push commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sign-by-sigstore.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#### **--sign-by-sigstore**=*param-file*\n```\n\n----------------------------------------\n\nTITLE: Testing Route Variables in Go\nDESCRIPTION: Table-driven tests for routes with variables, showing how to test multiple route patterns and handle different scenarios.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_28\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\nfunc TestMetricsHandler(t *testing.T) {\n    tt := []struct{\n        routeVariable string\n        shouldPass bool\n    }{\n        {\"goroutines\", true},\n        {\"heap\", true},\n        {\"counters\", true},\n        {\"queries\", true},\n        {\"adhadaeqm3k\", false},\n    }\n\n    for _, tc := range tt {\n        path := fmt.Sprintf(\"/metrics/%s\", tc.routeVariable)\n        req, err := http.NewRequest(\"GET\", path, nil)\n        if err != nil {\n            t.Fatal(err)\n        }\n\n        rr := httptest.NewRecorder()\n\t\n\trouter := mux.NewRouter()\n        router.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n        router.ServeHTTP(rr, req)\n\n        if rr.Code == http.StatusOK && !tc.shouldPass {\n            t.Errorf(\"handler should have failed on routeVariable %s: got %v want %v\",\n                tc.routeVariable, rr.Code, http.StatusOK)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Stats Measurements\nDESCRIPTION: Example of recording a measurement with OpenCensus stats.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opencensus.io/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstats.Record(ctx, videoSize.M(102478))\n```\n\n----------------------------------------\n\nTITLE: ValidateMap Example in GoValidator\nDESCRIPTION: Example showing how to validate maps using the ValidateMap function. This approach allows validating data structures without defining structs, useful for dynamic or configuration-based validation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nvar mapTemplate = map[string]interface{}{\n\t\"name\":\"required,alpha\",\n\t\"family\":\"required,alpha\",\n\t\"email\":\"required,email\",\n\t\"cell-phone\":\"numeric\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"required,alphanum\",\n\t\t\"line2\":\"alphanum\",\n\t\t\"postal-code\":\"numeric\",\n\t},\n}\n\nvar inputMap = map[string]interface{}{\n\t\"name\":\"Bob\",\n\t\"family\":\"Smith\",\n\t\"email\":\"foo@bar.baz\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"\",\n\t\t\"line2\":\"\",\n\t\t\"postal-code\":\"\",\n\t},\n}\n\nresult, err := govalidator.ValidateMap(inputMap, mapTemplate)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote Connection on Windows\nDESCRIPTION: Command to add a remote connection configuration to Podman on Windows. This specifies the SSH identity file and the URL of the Podman socket on the remote Linux server.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/mac_win_client.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\Users\\baude> podman system connection add baude --identity c:\\Users\\baude\\.ssh\\id_rsa ssh://192.168.122.1/run/user/1000/podman/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Checking for a Non-Existent Podman Network using Shell\nDESCRIPTION: This example shows checking for a network named 'webbackend' that does not exist using `podman network exists`. The exit status, checked with `echo $?`, is `1`, confirming the network was not found. This requires `podman` to be installed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-exists.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman network exists webbackend\n$ echo $?\n1\n```\n\n----------------------------------------\n\nTITLE: Customizing Log Tag in Podman\nDESCRIPTION: Sets a custom log tag for the container using the 'tag' option with --log-opt. This example uses the image name as the tag and is currently supported only by the journald log driver.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/log-opt.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--log-opt tag=\"{{.ImageName}}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Cgroup Management for Containers via SELinux Boolean in Console\nDESCRIPTION: This command uses `setsebool` to persistently enable the `container_manage_cgroup` SELinux boolean. This grants container processes permission to write to the cgroup filesystem, which is necessary for running systemd as PID 1 inside a container on SELinux-enabled systems, particularly with older versions of Podman (pre-2.0).\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n# setsebool -P container_manage_cgroup true\n```\n\n----------------------------------------\n\nTITLE: TmpFS Mount with No Swap\nDESCRIPTION: Mount a tmpfs filesystem with swap disabled\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mount.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntype=tmpfs,destination=/path/in/container,noswap\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd-Specific Tmpfs Mount Sizes in Podman\nDESCRIPTION: This option allows setting the size of systemd-specific tmpfs mounts in Podman containers. It accepts a size value with optional units and has specific behavior for different size inputs, including a default and a special case for size 0.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/shm-size-systemd.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--shm-size-systemd**=*number[unit]*\n\nSize of systemd-specific tmpfs mounts such as /run, /run/lock, /var/log/journal and /tmp.\nA _unit_ can be **b** (bytes), **k** (kibibytes), **m** (mebibytes), or **g** (gibibytes).\nIf the unit is omitted, the system uses bytes. If the size is omitted, the default is **64m**.\nWhen _size_ is **0**, the usage is limited to 50% of the host's available memory.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Variable Names from a Named Route in Gorilla Mux (Go)\nDESCRIPTION: Shows how to define a route with multiple variables (host, path, queries) and use the `GetVarNames()` method on the retrieved route to get a list of all required variable names needed for URL building.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n```go\nr := mux.NewRouter()\nr.Host(\"{domain}\").\n    Path(\"/{group}/{item_id}\").\n    Queries(\"some_data1\", \"{some_data1}\").\n    Queries(\"some_data2\", \"{some_data2}\").\n    Name(\"article\")\n\n// Will print [domain group item_id some_data1 some_data2] <nil>\nfmt.Println(r.Get(\"article\").GetVarNames())\n\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Printing a Tree Structure with GoTree\nDESCRIPTION: This example demonstrates how to create a simple tree structure representing music albums and songs, then print it to the console. It shows the basic API for creating nodes and adding child nodes.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/disiqueira/gotree/v3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/disiqueira/gotree\"\n)\n\nfunc main() {\n\tartist := gotree.New(\"Pantera\")\n\talbum := artist.Add(\"Far Beyond Driven\")\n\talbum.Add(\"5 minutes Alone\")\n\n\tfmt.Println(artist.Print())\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Mount Properties to Shared with mount Command - Bash\nDESCRIPTION: This code demonstrates converting a directory mount point to a shared mount using mount utilities. It first bind-mounts the source directory over itself, and then applies private and shared propagation settings. Requires root privileges and the mount command; operates in-place on the /foo directory. Inputs are the mount point (e.g., /foo); outputs are changed mount properties.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/volume.image.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmount --bind /foo /foo\nmount --make-private --make-shared /foo\n```\n\n----------------------------------------\n\nTITLE: Listing Podman Remote Connections\nDESCRIPTION: Command to list all configured remote connections in Podman, showing their names, identity files, and URIs. The default connection is marked with an asterisk.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/mac_win_client.md#2025-04-23_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\Users\\baude> podman system connection list\n```\n\n----------------------------------------\n\nTITLE: Verifying Podman Socket with Remote Info Command\nDESCRIPTION: Command to verify that the Podman socket is properly configured and listening by retrieving information from the remote server.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/mac_win_client.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ podman --remote info\n```\n\n----------------------------------------\n\nTITLE: SELinux Configuration for Custom Storage\nDESCRIPTION: Commands to properly configure SELinux for custom container storage locations\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n# semanage fcontext -a -e /var/lib/containers /srv/containers\n# restorecon -R -v /srv/containers\n```\n\n----------------------------------------\n\nTITLE: Reading, Iterating, and Printing SSH Config in Go\nDESCRIPTION: This snippet illustrates how to open an existing SSH configuration file (e.g., `$HOME/.ssh/config`), decode it using `ssh_config.Decode`, and then iterate through its hosts and nodes. It prints the host patterns and the string representation of each node (which could be comments, key-value pairs, or include directives). Finally, it demonstrates printing the entire parsed configuration structure back out using `cfg.String()`, preserving comments and structure. Requires `os`, `path/filepath`, `fmt`, and the `ssh_config` library.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nf, _ := os.Open(filepath.Join(os.Getenv(\"HOME\"), \".ssh\", \"config\"))\ncfg, _ := ssh_config.Decode(f)\nfor _, host := range cfg.Hosts {\n    fmt.Println(\"patterns:\", host.Patterns)\n    for _, node := range host.Nodes {\n        // Manipulate the nodes as you see fit, or use a type switch to\n        // distinguish between Empty, KV, and Include nodes.\n        fmt.Println(node.String())\n    }\n}\n\n// Print the config to stdout:\nfmt.Println(cfg.String())\n```\n\n----------------------------------------\n\nTITLE: Configuring a Volume with Podman Quadlet\nDESCRIPTION: Example of a volume unit file that defines ownership and labels for a persistent storage volume to be used with containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_53\n\nLANGUAGE: INI\nCODE:\n```\n[Volume]\nUser=root\nGroup=root\nLabel=org.test.Key=value\n```\n\n----------------------------------------\n\nTITLE: Setting cgroup-parent in Podman YAML Configuration\nDESCRIPTION: Defines the --cgroup-parent option for Podman containers and pods. This option specifies the path to cgroups under which the cgroup for the container or pod is created. The path can be absolute or relative to the init process's cgroups path.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cgroup-parent.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#### **--cgroup-parent**=*path*\n```\n\n----------------------------------------\n\nTITLE: Specifying Rootfs Option in Podman Commands\nDESCRIPTION: The --rootfs option allows running a container using an exploded container filesystem without image management. It supports overlay mounts and idmap functionality for user namespace mapping.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/rootfs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--rootfs\n```\n\n----------------------------------------\n\nTITLE: Manually Managing Transactions in bbolt\nDESCRIPTION: Example of manually starting and managing transactions with proper error handling. This shows how to use DB.Begin() directly with proper transaction lifecycle management including rollback and commit.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Start a writable transaction.\ntx, err := db.Begin(true)\nif err != nil {\n    return err\n}\ndefer tx.Rollback()\n\n// Use the transaction...\n_, err := tx.CreateBucket([]byte(\"MyBucket\"))\nif err != nil {\n    return err\n}\n\n// Commit the transaction and check for error.\nif err := tx.Commit(); err != nil {\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Checkpoint and Pre-checkpoint Files - Podman CLI - Shell\nDESCRIPTION: Restores a container by importing both a pre-checkpoint and main checkpoint from two files using the podman container restore command. This operation is essential for incremental checkpoint/restore workflows, where checkpointing occurs in stages. Flags used are --import-previous for the pre-checkpoint and --import for the main checkpoint file. Requires Podman and exported tar.gz checkpoint files produced previously by Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-restore.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# podman container restore --import-previous pre-checkpoint.tar.gz --import checkpoint.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Implementing ReadOnlyFs in Afero\nDESCRIPTION: Creates a read-only wrapper around any Afero filesystem. This example demonstrates creating a read-only view of OsFs and attempting to create a file, which results in a permission error.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewReadOnlyFs(afero.NewOsFs())\n_, err := fs.Create(\"/file.txt\")\n// err = syscall.EPERM\n```\n\n----------------------------------------\n\nTITLE: Basic Podman Image Command Syntax (Shell)\nDESCRIPTION: Illustrates the basic structure for using `podman image` commands. Replace `subcommand` with one of the specific actions listed in the documentation (e.g., `build`, `pull`, `rm`, `inspect`). This command requires Podman to be installed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n**podman image** *subcommand*\n```\n\n----------------------------------------\n\nTITLE: Copying a Directory from Podman Machine to Host - Bash Command Line\nDESCRIPTION: This example demonstrates recursively copying a directory from the running Podman virtual machine to the host using 'podman machine cp'. It employs the <machine-name>:<directory-path> syntax for the source and places the copy into the specified host directory. Proper user permissions and sufficient disk space are required.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-cp.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ podman machine cp podman-machine-default:~/.config ~/podman-machine-default.config\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Output for Podman Stats\nDESCRIPTION: The --no-reset option prevents the terminal/screen from being cleared between statistics reporting intervals when using podman pod stats or podman stats commands. This is useful for preserving historical output or when redirecting statistics to logs.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/no-reset.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####> This option file is used in:\\n####>   podman pod stats, stats\\n####> If file is edited, make sure the changes\\n####>   are applicable to all of those.\\n#### **--no-reset**\\n\\nDo not clear the terminal/screen in between reporting intervals\n```\n\n----------------------------------------\n\nTITLE: SSHing into Specific Podman VM (Interactive Session)\nDESCRIPTION: Shows how to establish an interactive SSH session with a specifically named Podman virtual machine (`myvm`) by providing the machine name as an argument to the `podman machine ssh` command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-ssh.1.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine ssh myvm\n```\n\n----------------------------------------\n\nTITLE: Health Check Start Period Parameter Usage\nDESCRIPTION: The --health-start-period parameter defines the initialization period for container health checks. It accepts time format values (e.g. '2m3s') with a default of '0s'. During this period, failed health checks won't mark the container as unhealthy, allowing for bootstrap time.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-start-period.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--health-start-period=period\n```\n\n----------------------------------------\n\nTITLE: Configuring SBOM Generation Presets for Podman Farm Build\nDESCRIPTION: This configuration defines presets for generating SBOMs using different scanning tools (Syft and Trivy) and output formats (CycloneDX and SPDX). Each preset specifies the scanner image, scanner commands, and merge strategy.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sbom.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n####> This option file is used in:\n####>   podman farm build\n####> If file is edited, make sure the changes\n####> are applicable to all of those.\n#### **--sbom**=*preset*\n\nGenerate SBOMs (Software Bills Of Materials) for the output image by scanning\nthe working container and build contexts using the named combination of scanner\nimage, scanner commands, and merge strategy.  Must be specified with one or\nmore of **--sbom-image-output**, **--sbom-image-purl-output**, **--sbom-output**,\nand **--sbom-purl-output**.  Recognized presets, and the set of options which\nthey equate to:\n\n - \"syft\", \"syft-cyclonedx\":\n     --sbom-scanner-image=ghcr.io/anchore/syft\n     --sbom-scanner-command=\"/syft scan -q dir:{ROOTFS} --output cyclonedx-json={OUTPUT}\"\n     --sbom-scanner-command=\"/syft scan -q dir:{CONTEXT} --output cyclonedx-json={OUTPUT}\"\n     --sbom-merge-strategy=merge-cyclonedx-by-component-name-and-version\n - \"syft-spdx\":\n     --sbom-scanner-image=ghcr.io/anchore/syft\n     --sbom-scanner-command=\"/syft scan -q dir:{ROOTFS} --output spdx-json={OUTPUT}\"\n     --sbom-scanner-command=\"/syft scan -q dir:{CONTEXT} --output spdx-json={OUTPUT}\"\n     --sbom-merge-strategy=merge-spdx-by-package-name-and-versioninfo\n - \"trivy\", \"trivy-cyclonedx\":\n     --sbom-scanner-image=ghcr.io/aquasecurity/trivy\n     --sbom-scanner-command=\"trivy filesystem -q {ROOTFS} --format cyclonedx --output {OUTPUT}\"\n     --sbom-scanner-command=\"trivy filesystem -q {CONTEXT} --format cyclonedx --output {OUTPUT}\"\n     --sbom-merge-strategy=merge-cyclonedx-by-component-name-and-version\n - \"trivy-spdx\":\n     --sbom-scanner-image=ghcr.io/aquasecurity/trivy\n     --sbom-scanner-command=\"trivy filesystem -q {ROOTFS} --format spdx-json --output {OUTPUT}\"\n     --sbom-scanner-command=\"trivy filesystem -q {CONTEXT} --format spdx-json --output {OUTPUT}\"\n     --sbom-merge-strategy=merge-spdx-by-package-name-and-versioninfo\n```\n\n----------------------------------------\n\nTITLE: Building Partial URLs (Host or Path) with Gorilla Mux in Go\nDESCRIPTION: Demonstrates using `URLHost()` and `URLPath()` methods on a named route to generate only the host or path portion of the URL, respectively, by providing the necessary variable substitutions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n```go\n// \"http://news.example.com/\"\nhost, err := r.Get(\"article\").URLHost(\"subdomain\", \"news\")\n\n// \"/articles/technology/42\"\npath, err := r.Get(\"article\").URLPath(\"category\", \"technology\", \"id\", \"42\")\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Log Count in Podman\nDESCRIPTION: Configures the maximum number of health check log entries to retain for a container. A value of 0 allows infinite log entries, while the default is 5 attempts. This setting affects how many historical health check results are stored.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-max-log-count.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--health-max-log-count=*number of stored logs*\n```\n\n----------------------------------------\n\nTITLE: Calculating Moving Averages Using EWMA Library in Go\nDESCRIPTION: This code demonstrates how to create and use SimpleEWMA and VariableEWMA instances from the github.com/VividCortex/ewma library in a Go program. It shows the initialization of two different moving average calculators, the additive process for dataset samples, and obtaining their current values. Dependencies include the ewma Go module, and example parameters such as sample size and decay factor are specified. Input is an array of float64 values and outputs are the computed EWMA results for both algorithm variants; the code assumes correct array sizing, library availability, and expects users to call 'go get' for required dependencies.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/VividCortex/ewma/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"github.com/VividCortex/ewma\"\n\nfunc main() {\n\tsamples := [100]float64{\n\t\t4599, 5711, 4746, 4621, 5037, 4218, 4925, 4281, 5207, 5203, 5594, 5149,\n\t}\n\n\te := ewma.NewMovingAverage()  //=> Returns a SimpleEWMA if called without params\n\ta := ewma.NewMovingAverage(5) //=> returns a VariableEWMA with a decay of 2 / (5 + 1)\n\n\tfor _, f := range samples {\n\t\te.Add(f)\n\t\ta.Add(f)\n\t}\n\n\te.Value() //=> 13.577404704631077\n\ta.Value() //=> 1.5806140565521463e-12\n}\n```\n\n----------------------------------------\n\nTITLE: Building Standalone Podman MSI Package\nDESCRIPTION: These commands build the standalone Podman MSI package. It uses the WiX project file and sets a custom version number for the package.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_26\n\nLANGUAGE: powershell\nCODE:\n```\nPush-Location .\\contrib\\win-installer\\\ndotnet build podman.wixproj /property:DefineConstants=\"VERSION=9.9.9\" -o .\nPop-Location\n```\n\n----------------------------------------\n\nTITLE: Parsing Basic Values with TOML Go - TOML\nDESCRIPTION: Demonstrates a basic TOML configuration file with different value types such as integers, arrays, floats, and timestamps. Intended as sample input data for Go struct decoding. No external dependencies are required for the file content itself; to decode, the Go BurntSushi TOML library must be used. Parameters include key-value pairs representing a person's age, list of cats, pi value, perfection numbers, and date of birth. Input is the raw TOML file, output is data ready to decode into Go structs.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nAge = 25\\nCats = [ \"Cauchy\", \"Plato\" ]\\nPi = 3.14\\nPerfection = [ 6, 28, 496, 8128 ]\\nDOB = 1987-07-05T05:45:00Z\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Build Hooks Directory Path\nDESCRIPTION: Specifies the path containing JSON hook configuration files for Podman and Buildah build containers. Supports both 1.0.0 and 0.1.0 hook schemas (0.1.0 is deprecated). Multiple paths can be specified with later paths having higher precedence. Default paths for root users are /usr/share/containers/oci/hooks.d and /etc/containers/oci/hooks.d, though explicit configuration is recommended.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/hooks-dir.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--hooks-dir=path\n```\n\n----------------------------------------\n\nTITLE: Setting Buildah Layers Environment Variable\nDESCRIPTION: Shows how to set the BUILDAH_LAYERS environment variable to override the default caching behavior for intermediate images during container builds.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/layers.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BUILDAH_LAYERS=true\n```\n\n----------------------------------------\n\nTITLE: Checking Secret Existence with Podman CLI - Shell\nDESCRIPTION: These shell command examples demonstrate how to check for the existence of a named secret using the Podman command-line interface. They illustrate the expected exit codes for both found and not-found cases, and are intended for use in Unix shell scripts or interactive shells. Dependencies include Podman installed and configured on the system; the key parameter is the name of the secret to check, and the outcome is reflected in the shell's exit code ('$?').\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-secret-exists.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman secret exists mysecret\n$ echo $?\n0\n$\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ podman secret exists mypassword\n$ echo $?\n1\n$\n```\n\n----------------------------------------\n\nTITLE: Converting Objects to Strings in Go\nDESCRIPTION: Example of the ToString function which converts various objects to string representation. Here it's used to convert a User struct to a string.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tFirstName string\n\tLastName string\n}\n\nstr := govalidator.ToString(&User{\"John\", \"Juan\"})\nprintln(str)\n```\n\n----------------------------------------\n\nTITLE: Restoring from Exported Checkpoint and Remapping Ports - Podman CLI - Shell\nDESCRIPTION: Demonstrates the process of running a webserver container, checkpointing it, and then restoring it with remapped ports. The steps include starting the container with a port mapping, checkpointing with an export, and restoring with a new port mapping using the --import flag. Key parameters are port assignments and the checkpoint archive file. This sequence requires Podman, an image named 'webserver', and file system permissions for read/write of the checkpoint.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-restore.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman run --rm -p 2345:80 -d webserver\n# podman container checkpoint -l --export=dump.tar\n# podman container restore -p 5432:8080 --import=dump.tar\n```\n\n----------------------------------------\n\nTITLE: Installing Persistent Podman Zsh Completion - Zsh - Shell\nDESCRIPTION: This snippet writes the Podman Zsh completion script to one of the fpath directories, making Podman completions available in all Zsh sessions. It leverages the podman completion command with the -f option, which specifies the output path, typically in the Zsh function path. Prior initialization of shell completion in Zsh is required, as well as write access to the destination directory.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-completion.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npodman completion -f \"${fpath[1]}/_podman\" zsh\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Podman Farm - Shell\nDESCRIPTION: Illustrates marking a specified farm ('farm2') as the current default using the '--default' flag with the 'podman farm update' command. The only dependency is the Podman CLI; the flag takes no additional parameters beyond the farm name, and sets it as the default for future operations.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-farm-update.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman farm update --default farm2\n```\n\n----------------------------------------\n\nTITLE: Removing Podman Image by Short ID (Shell)\nDESCRIPTION: Removes a specific local image identified by its short ID (`c0ed59d05ff7`). This command also removes any dangling parent images associated with the specified image unless the `--no-prune` option is used.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-rmi.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman rmi c0ed59d05ff7\n```\n\n----------------------------------------\n\nTITLE: Force Pruning All Volumes in Podman\nDESCRIPTION: Example of pruning all volumes without confirmation using the force flag. This command will remove all volumes, including those used by containers, potentially affecting running containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-prune.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume prune --force\n```\n\n----------------------------------------\n\nTITLE: Searching for Container Images with Podman\nDESCRIPTION: Demonstrates how to search for publicly available container images on DockerHub using the podman search command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/Introduction.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman search docker.io/busybox\n```\n\n----------------------------------------\n\nTITLE: Mounting Secret with Custom Target and Mode in Podman\nDESCRIPTION: This example shows how to mount a secret at /run/secrets/customtarget with a specific mode (0777) when creating or running a Podman container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/secret.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--secret mysecret,target=customtarget,mode=0777\n```\n\n----------------------------------------\n\nTITLE: Creating a Podman Farm with Initial Connections via CLI\nDESCRIPTION: This command creates a new Podman farm named 'farm1' and immediately associates existing Podman system connections named 'f37' and 'f38' with it. These connections must have been previously defined using `podman system connection add`. The command takes the farm name followed by the names of the connections to include.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-farm-create.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman farm create farm1 f37 f38\n```\n\n----------------------------------------\n\nTITLE: Formatting Log Output with JSONFormatter - Go\nDESCRIPTION: This snippet demonstrates how Logrus outputs log entries in JSON format, suitable for consumption by log analysis tools like Logstash or Splunk. No additional dependencies are required beyond Logrus. The example showcases the log output structure with various fields such as 'animal', 'level', 'msg', 'size', 'time', 'number', and 'omg', illustrating both info and warning levels. Inputs are implicitly log statements within the application; outputs are JSON-formatted strings as shown.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\"animal\":\"walrus\",\"level\":\"info\",\"msg\":\"A group of walrus emerges from the\\nocean\",\"size\":10,\"time\":\"2014-03-10 19:57:38.562264131 -0400 EDT\"}\\n\\n{\"level\":\"warning\",\"msg\":\"The group's number increased tremendously!\",\\n\"number\":122,\"omg\":true,\"time\":\"2014-03-10 19:57:38.562471297 -0400 EDT\"}\\n\\n{\"animal\":\"walrus\",\"level\":\"info\",\"msg\":\"A giant walrus appears!\",\\n\"size\":10,\"time\":\"2014-03-10 19:57:38.562500591 -0400 EDT\"}\\n\\n{\"animal\":\"walrus\",\"level\":\"info\",\"msg\":\"Tremendously sized cow enters the ocean.\",\\n\"size\":9,\"time\":\"2014-03-10 19:57:38.562527896 -0400 EDT\"}\\n\\n{\"level\":\"fatal\",\"msg\":\"The ice breaks!\",\"number\":100,\"omg\":true,\\n\"time\":\"2014-03-10 19:57:38.562543128 -0400 EDT\"}\n```\n\n----------------------------------------\n\nTITLE: Installing the gxz Command-Line Tool using Go\nDESCRIPTION: This shell command uses the Go toolchain (`go get`) to download and install the `gxz` command-line utility from its source repository. This utility is part of the `github.com/ulikunitz/xz` package and allows for xz compression and decompression from the command line. Requires Go environment to be set up.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/ulikunitz/xz/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/ulikunitz/xz/cmd/gxz\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Keys in BoltDB using Go\nDESCRIPTION: This code demonstrates how to use a Cursor to iterate over keys in byte-sorted order within a bucket. It shows how to move through the keys sequentially.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\t// Assume bucket exists and has keys\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\n\tc := b.Cursor()\n\n\tfor k, v := c.First(); k != nil; k, v = c.Next() {\n\t\tfmt.Printf(\"key=%s, value=%s\\n\", k, v)\n\t}\n\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Type Merging using Transformers with Mergo in Go (time.Time Example)\nDESCRIPTION: This comprehensive Go program demonstrates the usage of Mergo's transformer feature to customize merging behavior for specific types, specifically `time.Time`. It defines a `timeTransformer` that implements the `mergo.Transformer` interface. The transformer checks if a field is of type `time.Time` and, if the destination's `IsZero()` method returns true, it sets the destination value to the source value. The example merges a `Snapshot` struct containing a `time.Time` field using `mergo.Merge` with the `mergo.WithTransformers` option, ensuring the non-zero source time correctly populates the zero-value destination time.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/dario.cat/mergo/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n    \"reflect\"\n    \"time\"\n)\n\ntype timeTransformer struct {\n}\n\nfunc (t timeTransformer) Transformer(typ reflect.Type) func(dst, src reflect.Value) error {\n\tif typ == reflect.TypeOf(time.Time{}) {\n\t\treturn func(dst, src reflect.Value) error {\n\t\t\tif dst.CanSet() {\n\t\t\t\tisZero := dst.MethodByName(\"IsZero\")\n\t\t\t\tresult := isZero.Call([]reflect.Value{})\n\t\t\t\tif result[0].Bool() {\n\t\t\t\t\tdst.Set(src)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Snapshot struct {\n\tTime time.Time\n\t// ...\n}\n\nfunc main() {\n\tsrc := Snapshot{time.Now()}\n\tdest := Snapshot{}\n\tmergo.Merge(&dest, src, mergo.WithTransformers(timeTransformer{}))\n\tfmt.Println(dest)\n\t// Will print\n\t// { 2018-01-12 01:15:00 +0000 UTC m=+0.000000001 }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Decryption Key Option in Podman Commands\nDESCRIPTION: The --decryption-key option accepts a key and optional passphrase for decrypting container images. The key path can reference either encryption keys or certificates, and decryption is attempted with all provided keys. A passphrase must only be included if the key is passphrase-protected.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/decryption-key.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--decryption-key=key[:passphrase]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rootless UID Mapping in Podman\nDESCRIPTION: This command demonstrates how to use --uidmap in a rootless Podman environment to map a specific host GID to a container GID, while allowing Podman to automatically map the rest of the subordinate GIDs.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/uidmap.container.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman run --group-add=keep-groups --gidmap=\"+g100000:@2000\" ...\n```\n\n----------------------------------------\n\nTITLE: Defining Group Assignment Option in Podman Commands\nDESCRIPTION: This snippet defines the --group-add option for Podman container commands. It allows assigning additional groups to the primary user in the container process, with a special 'keep-groups' flag to retain supplementary group access.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/group-add.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--group-add**=*group* | *keep-groups*\n```\n\n----------------------------------------\n\nTITLE: Checking UID Mapping in Podman Namespace\nDESCRIPTION: This command displays the UID mapping in the Podman namespace. It's used to diagnose issues related to user namespace mappings in rootless containers.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ podman unshare cat /proc/self/uid_map\n```\n\n----------------------------------------\n\nTITLE: Initializing Logr Logger in Go Main Function\nDESCRIPTION: Demonstrates how to create a root logger using a chosen logging implementation in the main function of a Go application.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // ... other setup code ...\n\n    // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n    // which takes some initial parameters and returns a logr.Logger.\n    logger := logimpl.New(param1, param2)\n\n    // ... other setup code ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Logrus Syslog Hook Levels (Go)\nDESCRIPTION: This example demonstrates how to send logs of different levels to local output versus Syslog. It defines a `customHook` struct that embeds the standard `logrus_syslog.SyslogHook`. It overrides the `Levels()` method to return only the desired levels for Syslog (e.g., `log.WarnLevel`). In `main`, the global log level is set to `DebugLevel`, but the custom hook ensures only logs with severity `WarnLevel` or higher are sent to the remote Syslog server (`tcp`, `localhost:5140`, `syslog.LOG_WARNING`, `myTag`).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/hooks/syslog/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log/syslog\"\n\n\tlog \"github.com/sirupsen/logrus\"\n\tlogrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n)\n\ntype customHook struct {\n\t*logrus_syslog.SyslogHook\n}\n\nfunc (h *customHook) Levels() []log.Level {\n\treturn []log.Level{log.WarnLevel}\n}\n\nfunc main() {\n\tlog.SetLevel(log.DebugLevel)\n\n\thook, err := logrus_syslog.NewSyslogHook(\"tcp\", \"localhost:5140\", syslog.LOG_WARNING, \"myTag\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tlog.AddHook(&customHook{hook})\n\n\t//...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Struct Field Mapping with schema Tags in gorilla/schema (Go)\nDESCRIPTION: This Go code snippet illustrates how to customize struct field parsing using the `schema` struct tag with gorilla/schema. Custom field names, required fields, and ignored fields are set via the struct tag syntax. The tag can specify a custom name (e.g., 'name'), additional options such as 'required', or disable mapping with '-'. These tags influence how Decode/Encode methods interpret incoming form data and populate struct fields. There are no external dependencies besides gorilla/schema.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/schema/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Person struct {\n    Name  string `schema:\"name,required\"`  // custom name, must be supplied\n    Phone string `schema:\"phone\"`          // custom name\n    Admin bool   `schema:\"-\"`              // this field is never set\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Signal Proxying for Podman Containers\nDESCRIPTION: This configuration enables signal proxying from the host to the container process. It applies to the 'attach', 'run', and 'start' commands in Podman. The option proxies most signals except SIGCHLD, SIGURG, SIGSTOP, and SIGKILL.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sig-proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n####> This option file is used in:\n####>   podman attach, run, start\n####> If file is edited, make sure the changes\n####> are applicable to all of those.\n#### **--sig-proxy**\n\nProxy received signals to the container process. SIGCHLD, SIGURG, SIGSTOP, and SIGKILL are not proxied.\n```\n\n----------------------------------------\n\nTITLE: Mounting a Volume in Rootless Mode using Podman\nDESCRIPTION: Example demonstrating how to mount a volume in rootless mode by first entering the user namespace with 'podman unshare' and then mounting the volume.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-mount.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman unshare\n# podman volume mount foo\n/home/dwalsh/.local/share/containers/storage/volumes/foo/_data\n```\n\n----------------------------------------\n\nTITLE: Connecting to Libvirt via TLS over TCP\nDESCRIPTION: Example Go code showing how to establish a TLS connection to a remote libvirt server over TCP. This demonstrates setting up TLS certificates, creating a secure connection, and listing both running and stopped VMs.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/digitalocean/go-libvirt/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"crypto/tls\"\n        \"crypto/x509\"\n\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n\n        \"github.com/digitalocean/go-libvirt\"\n)\n\nfunc main() {\n        // This dials libvirt on the local machine\n        // It connects to libvirt via TLS over TCP\n        // To connect to a remote machine, you need to have the ca/cert/key of it.\n        keyFileXML, err := ioutil.ReadFile(\"/etc/pki/libvirt/private/clientkey.pem\")\n        if err != nil {\n                log.Fatalf(\"%v\", err)\n        }\n\n        certFileXML, err := ioutil.ReadFile(\"/etc/pki/libvirt/clientcert.pem\")\n        if err != nil {\n                log.Fatalf(\"%v\", err)\n        }\n\n        caFileXML, err := ioutil.ReadFile(\"/etc/pki/CA/cacert.pem\")\n        if err != nil {\n                log.Fatalf(\"%v\", err)\n        }\n        cert, err := tls.X509KeyPair([]byte(certFileXML), []byte(keyFileXML))\n        if err != nil {\n                log.Fatalf(\"%v\", err)\n        }\n\n        roots := x509.NewCertPool()\n        roots.AppendCertsFromPEM([]byte(caFileXML))\n\n        config := &tls.Config{\n                Certificates: []tls.Certificate{cert},\n                RootCAs:      roots,\n        }\n\n        // Use host name or IP which is valid in certificate\n        addr := \"10.10.10.10\"\n        port := \"16514\"\n        c, err := tls.Dial(\"tcp\", addr + \":\" + port, config)\n        if err != nil {\n                log.Fatalf(\"failed to dial libvirt: %v\", err)\n        }\n\n        // Drop a byte before libvirt.New(c)\n        // More details at https://github.com/digitalocean/go-libvirt/issues/89\n        // Remove this line if the issue does not exist any more\n        c.Read(make([]byte, 1))\n\n        l := libvirt.New(c)\n        if err := l.Connect(); err != nil {\n                log.Fatalf(\"failed to connect: %v\", err)\n        }\n\n        v, err := l.Version()\n        if err != nil {\n                log.Fatalf(\"failed to retrieve libvirt version: %v\", err)\n        }\n        fmt.Println(\"Version:\", v)\n\n        // Return both running and stopped VMs\n        flags := libvirt.ConnectListDomainsActive | libvirt.ConnectListDomainsInactive\n        domains, _, err := l.ConnectListAllDomains(1, flags)\n        if err != nil {\n                log.Fatalf(\"failed to retrieve domains: %v\", err)\n        }\n\n        fmt.Println(\"ID\\tName\\t\\tUUID\")\n        fmt.Println(\"--------------------------------------------------------\")\n        for _, d := range domains {\n                fmt.Printf(\"%d\\t%s\\t%x\\n\", d.ID, d.Name, d.UUID)\n        }\n\n\n```\n\n----------------------------------------\n\nTITLE: Building a Lighttpd Container Image with Buildah in Bash\nDESCRIPTION: This script demonstrates using Buildah to create a container image with Lighttpd web server. It creates a container from a base image (defaulting to Fedora), updates packages, installs lighttpd, adds annotations, configures the command and port, and finally commits the changes to create a new image.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nset -x\n\nctr1=$(buildah from \"${1:-fedora}\")\n\n## Get all updates and install our minimal httpd server\nbuildah run \"$ctr1\" -- dnf update -y\nbuildah run \"$ctr1\" -- dnf install -y lighttpd\n\n## Include some buildtime annotations\nbuildah config --annotation \"com.example.build.host=$(uname -n)\" \"$ctr1\"\n\n## Run our server and expose the port\nbuildah config --cmd \"/usr/sbin/lighttpd -D -f /etc/lighttpd/lighttpd.conf\" \"$ctr1\"\nbuildah config --port 80 \"$ctr1\"\n\n## Commit this container to an image name\nbuildah commit \"$ctr1\" \"${2:-$USER/lighttpd}\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Podman Service Logs via Journalctl\nDESCRIPTION: Command to view detailed Podman service logs using journalctl, showing service startup, volume operations, and container pulls.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/bindings/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ journalctl --user --no-pager -u podman.service\nJul 22 13:50:53 nagato.nanadai.me systemd[1048]: Starting Podman API Service...\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time=\"2020-07-22T13:50:54-04:00\" level=error msg=\"Error refreshing volume 38480630a8bdaa3e1a0ebd34c94038591b0d7ad994b37be5b4f2072bb6ef0879: error acquiring lock 0 for volume 38480630a8bdaa3e1a0ebd34c94038591b0d7ad994b37be5b4f2072bb6ef0879: file exists\"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time=\"2020-07-22T13:50:54-04:00\" level=error msg=\"Error refreshing volume 47d410af4d762a0cc456a89e58f759937146fa3be32b5e95a698a1d4069f4024: error acquiring lock 0 for volume 47d410af4d762a0cc456a89e58f759937146fa3be32b5e95a698a1d4069f4024: file exists\"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time=\"2020-07-22T13:50:54-04:00\" level=error msg=\"Error refreshing volume 86e73f082e344dad38c8792fb86b2017c4f133f2a8db87f239d1d28a78cf0868: error acquiring lock 0 for volume 86e73f082e344dad38c8792fb86b2017c4f133f2a8db87f239d1d28a78cf0868: file exists\"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time=\"2020-07-22T13:50:54-04:00\" level=error msg=\"Error refreshing volume 9a16ea764be490a5563e384d9074ab0495e4d9119be380c664037d6cf1215631: error acquiring lock 0 for volume 9a16ea764be490a5563e384d9074ab0495e4d9119be380c664037d6cf1215631: file exists\"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time=\"2020-07-22T13:50:54-04:00\" level=error msg=\"Error refreshing volume bfd6b2a97217f8655add13e0ad3f6b8e1c79bc1519b7a1e15361a107ccf57fc0: error acquiring lock 0 for volume bfd6b2a97217f8655add13e0ad3f6b8e1c79bc1519b7a1e15361a107ccf57fc0: file exists\"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time=\"2020-07-22T13:50:54-04:00\" level=error msg=\"Error refreshing volume f9b9f630982452ebcbed24bd229b142fbeecd5d4c85791fca440b21d56fef563: error acquiring lock 0 for volume f9b9f630982452ebcbed24bd229b142fbeecd5d4c85791fca440b21d56fef563: file exists\"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: Trying to pull registry.fedoraproject.org/fedora:latest...\nJul 22 13:50:55 nagato.nanadai.me podman[1527]: Getting image source signatures\nJul 22 13:50:55 nagato.nanadai.me podman[1527]: Copying blob sha256:dd9f43919ba05f05d4f783c31e83e5e776c4f5d29dd72b9ec5056b9576c10053\nJul 22 13:50:55 nagato.nanadai.me podman[1527]: Copying config sha256:00ff39a8bf19f810a7e641f7eb3ddc47635913a19c4996debd91fafb6b379069\nJul 22 13:50:55 nagato.nanadai.me podman[1527]: Writing manifest to image destination\nJul 22 13:50:55 nagato.nanadai.me podman[1527]: Storing signatures\nJul 22 13:50:55 nagato.nanadai.me systemd[1048]: podman.service: unit configures an IP firewall, but not running as root.\nJul 22 13:50:55 nagato.nanadai.me systemd[1048]: (This warning is only shown for the first unit using IP firewalling.)\nJul 22 13:51:15 nagato.nanadai.me systemd[1048]: podman.service: Succeeded.\nJul 22 13:51:15 nagato.nanadai.me systemd[1048]: Finished Podman API Service.\nJul 22 13:51:15 nagato.nanadai.me systemd[1048]: podman.service: Consumed 1.339s CPU time.\n```\n\n----------------------------------------\n\nTITLE: Custom Type Validation in GoValidator\nDESCRIPTION: Example demonstrating how to create and use custom type validators with GoValidator. Shows validation against custom types and context-aware validation that can access other fields in the struct.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\ntype CustomByteArray [6]byte // custom types are supported and can be validated\n\ntype StructWithCustomByteArray struct {\n  ID              CustomByteArray `valid:\"customByteArrayValidator,customMinLengthValidator\"` // multiple custom validators are possible as well and will be evaluated in sequence\n  Email           string          `valid:\"email\"`\n  CustomMinLength int             `valid:\"-\"`\n}\n\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // you can type switch on the context interface being validated\n  case StructWithCustomByteArray:\n    // you can check and validate against some other field in the context,\n    // return early or not validate against the context at all – your choice\n  case SomeOtherType:\n    // ...\n  default:\n    // expecting some other type? Throw/panic here or continue\n  }\n\n  switch v := i.(type) { // type switch on the struct field being validated\n  case CustomByteArray:\n    for _, e := range v { // this validator checks that the byte array is not empty, i.e. not all zeroes\n      if e != 0 {\n        return true\n      }\n    }\n  }\n  return false\n})\ngovalidator.CustomTypeTagMap.Set(\"customMinLengthValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // this validates a field against the value in another field, i.e. dependent validation\n  case StructWithCustomByteArray:\n    return len(v.ID) >= v.CustomMinLength\n  }\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Podman from macOS\nDESCRIPTION: Command to completely remove Podman and its components from a macOS system by deleting the installation directory.\nSOURCE: https://github.com/containers/podman/blob/main/contrib/pkginstaller/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo rm -rf /opt/podman\n```\n\n----------------------------------------\n\nTITLE: Using --build-arg with Podman Build Commands\nDESCRIPTION: The --build-arg option specifies a build argument and its value to be interpolated in Containerfile instructions. Unlike environment variables, these arguments are not added to the environment variable list in the resulting image's configuration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/build-arg.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--build-arg=arg=value\n```\n\n----------------------------------------\n\nTITLE: Using Layer Labels in Podman Build\nDESCRIPTION: The --layer-label option allows adding metadata labels to intermediate container images during build. Labels can be specified with or without values, and multiple labels can be added. When no value is provided after the equals sign, the label is set to empty.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/layer-label.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--layer-label=label[=value]\n```\n\n----------------------------------------\n\nTITLE: Managing Systemd Echo Service and Socket\nDESCRIPTION: Commands to reload the systemd configuration, enable the echo socket for automatic startup after reboots, pull the container image, and start the socket unit.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ systemctl --user daemon-reload\n$ systemctl --user cat echo.service\n$ systemctl --user enable echo.socket\n$ podman pull ghcr.io/eriksjolund/socket-activate-echo\n$ systemctl --user start echo.socket\n```\n\n----------------------------------------\n\nTITLE: Setting Hostname for Podman Pod Containers\nDESCRIPTION: This option allows setting a custom hostname for all containers within a Podman pod. The specified hostname is added to the /etc/hosts file of each container using the container's primary IP address. It's applicable to 'podman pod clone' and 'podman pod create' commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/hostname.pod.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--hostname**=*name*\n\nSet the pod's hostname inside all containers.\n\nThe given hostname is also added to the `/etc/hosts` file using the container's\nprimary IP address (also see the **--add-host** option).\n```\n\n----------------------------------------\n\nTITLE: Using --cache-to and --cache-from in Buildah Build Command\nDESCRIPTION: This example demonstrates how to use the --cache-to and --cache-from options in a Buildah build command to populate and consult a remote cache repository. The --layers option is required for --cache-to to take effect.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cache-to.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# populate a cache and also consult it\nbuildah build -t test --layers --cache-to registry/myrepo/cache --cache-from registry/myrepo/cache .\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Line Ending Behavior\nDESCRIPTION: Git command to prevent automatic conversion of Unix line endings (LF) to Windows line endings (CRLF), which is necessary for maintaining proper file format in the Podman repository.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_9\n\nLANGUAGE: pwsh\nCODE:\n```\ngit config --global core.autocrlf false\n```\n\n----------------------------------------\n\nTITLE: Podman Container ID File Option Format\nDESCRIPTION: Specifies the format for the --cidfile option in Podman commands. This option writes the container ID to a specified file, which is automatically removed when the container is removed, except when using podman --remote run with detached containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cidfile.write.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--cidfile=file\n```\n\n----------------------------------------\n\nTITLE: Running Podman with User Namespace Mapping\nDESCRIPTION: Demonstrate how to run a Podman container with proper UID and GID mapping to avoid file ownership issues in rootless containers.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_50\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir dir1\n$ chmod 777 dir1\n$ podman run --rm\n  -v ./dir1:/dir1:Z \\\n  --user $uid:$gid \\\n  --userns keep-id:uid=$uid,gid=$gid \\\n     docker.io/library/ubuntu bash -c \"touch /dir1/a; chmod 600 /dir1/a\"\n$ id -u\ntester\n$ id -g\ntester\n$ ls -l dir1/a\n-rw-------. 1 tester tester 0 Jan 19 20:31 dir1/a\n```\n\n----------------------------------------\n\nTITLE: Running Podman Command as Another User via su (Login Shell)\nDESCRIPTION: This command uses `su - user1 -c 'command'` (or `su -l user1 -c 'command'`) to execute `podman images` as `user1`. The hyphen (`-`) attempts to simulate a login, setting up more of the target user's environment. However, even with this, it might fail to establish the necessary systemd user session components required by rootless Podman, leading to errors like 'Error: creating tmpdir: mkdir /run/user/1000: permission denied'.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_46\n\nLANGUAGE: console\nCODE:\n```\n# su - user1 -c 'podman images'\nError: creating tmpdir: mkdir /run/user/1000: permission denied\n```\n\n----------------------------------------\n\nTITLE: Inspecting Podman Networks via CLI - Bash\nDESCRIPTION: This snippet demonstrates how to use the podman network inspect command to retrieve the configuration of the default podman network. It returns a JSON array with details such as the network's name, id, driver, interface, creation timestamp, subnets, and options. No special dependencies beyond Podman itself are required; the command is run from a shell and outputs the full JSON configuration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-inspect.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman network inspect podman\n[\n    {\n        \"name\": \"podman\",\n        \"id\": \"2f259bab93aaaaa2542ba43ef33eb990d0999ee1b9924b557b7be53c0b7a1bb9\",\n        \"driver\": \"bridge\",\n        \"network_interface\": \"podman0\",\n        \"created\": \"2021-06-03T12:04:33.088567413+02:00\",\n        \"subnets\": [\n            {\n                \"subnet\": \"10.88.0.0/16\",\n                \"gateway\": \"10.88.0.1\"\n            }\n        ],\n        \"ipv6_enabled\": false,\n        \"internal\": false,\n        \"dns_enabled\": false,\n        \"ipam_options\": {\n            \"driver\": \"host-local\"\n        }\n    }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Testing Echo Server with Socat\nDESCRIPTION: Commands to test the echo server using socat with various protocols (TCP, UDP, Unix socket, and VSOCK) demonstrating socket activation in action.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ echo hello | socat -t 30 - tcp4:127.0.0.1:3000\nhello\n$ echo hello | socat -t 30 - tcp6:[::1]:3000\nhello\n$ echo hello | socat -t 30 - udp4:127.0.0.1:3000\nhello\n$ echo hello | socat -t 30 - udp6:[::1]:3000\nhello\n$ echo hello | socat -t 30 - unix:$HOME/echo_stream_sock\nhello\n$ echo hello | socat -t 30 - VSOCK-CONNECT:1:3000\nhello\n```\n\n----------------------------------------\n\nTITLE: Checkpointing a Podman Container State to Disk - Shell\nDESCRIPTION: The given command performs a checkpoint of a running container, saving its state and the state of all processes to disk. It requires CRIU 3.11+ installed and must be run as root (hence, 'sudo'). Relevant for applications needing process persistence, migration, or restore. Outputs a checkpoint archive used for further operations.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo podman container checkpoint <container_id>\n```\n\n----------------------------------------\n\nTITLE: Removing All Volumes in Podman\nDESCRIPTION: Example command demonstrating how to remove all volumes at once using the --all flag with podman volume rm.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-rm.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume rm --all\n```\n\n----------------------------------------\n\nTITLE: Specifying Preserve File Descriptor Option in Podman\nDESCRIPTION: This snippet shows the syntax for using the --preserve-fd option in Podman exec and run commands. It allows passing additional file descriptors to the process. The option can be specified multiple times and takes a comma-separated list of file descriptors.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/preserve-fd.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n**--preserve-fd**=*FD1[,FD2,...]*\n```\n\n----------------------------------------\n\nTITLE: Sorting Container Lists with Podman\nDESCRIPTION: Demonstrates using the --sort flag to sort the container list by container names. This example also includes size information with the --size flag, sorting all containers alphabetically by name.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-ps.1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ podman ps -a --size --sort names\nCONTAINER ID   IMAGE         COMMAND         CREATED       STATUS                    PORTS     NAMES\n69ed779d8ef9f  redis:alpine  \"redis-server\"  25 hours ago  Created                   6379/tcp  k8s_container1_podsandbox1_redhat.test.crio_redhat-test-crio_1\n02f65160e14ca  redis:alpine  \"redis-server\"  19 hours ago  Exited (-1) 19 hours ago  6379/tcp  k8s_podsandbox1-redis_podsandbox1_redhat.test.crio_redhat-test-crio_0\n```\n\n----------------------------------------\n\nTITLE: Setting Up Container Socket Activation in SystemD\nDESCRIPTION: Commands to enable lingering for a user and create necessary directories for socket activation configuration files.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ loginctl enable-linger $USER\n$ mkdir -p ~/.config/systemd/user\n$ mkdir -p ~/.config/containers/systemd\n```\n\n----------------------------------------\n\nTITLE: storage.conf Field Documentation and Override - shell\nDESCRIPTION: Documents (within a code block) selectable and default fields for container storage configuration in rootless mode. Highlights which options in /etc/containers/storage.conf are ignored and gives rootless defaults. Not executable code but referenced for informative purposes in system configuration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngraphroot=\"\"\\n container storage graph dir (default: \"/var/lib/containers/storage\")\\n Default directory to store all writable content created by container storage programs.\\n\\nrunroot=\"\"\\n container storage run dir (default: \"/run/containers/storage\")\\n Default directory to store all temporary writable content created by container storage programs.\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose with Podman Socket\nDESCRIPTION: Commands demonstrating how to configure docker-compose to use Podman's API socket by setting the DOCKER_HOST environment variable.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock\n$ docker-compose up\n```\n\n----------------------------------------\n\nTITLE: Conditional Field Logging in OpenTracing for Go Using log.Noop\nDESCRIPTION: Demonstrates how to conditionally capture and log a field (such as customer ID) based on environment variables, utilizing log.Noop to avoid logging in production. Requires os package, log module, and definition of an Order struct. Inputs: order pointer; outputs: a log field with customer information or a no-operation field for production environments.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-23_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n    func Customer(order *Order) log.Field {\n        if os.Getenv(\"ENVIRONMENT\") == \"dev\" {\n            return log.String(\"customer\", order.Customer.ID)\n        }\n        return log.Noop()\n    }\n```\n\n----------------------------------------\n\nTITLE: Extracting Multiple Blobs from OCI Artifact to Directory - Podman CLI - Shell\nDESCRIPTION: Shows how to extract all blobs from an OCI artifact with multiple blobs into an existing local directory using the 'podman artifact extract' command. Podman is a prerequisite and the local directory must exist. The command saves each blob using its OCI title annotation or digest if missing. A listing command is included to verify the extracted files (e.g., CONTRIBUTING.md and README.md).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-artifact-extract.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman artifact extract quay.io/artifact/foobar2:test /tmp/mydir\n$ ls /tmp/mydir\nCONTRIBUTING.md  README.md\n```\n\n----------------------------------------\n\nTITLE: Testing Logrus Output with Test Hooks in Go\nDESCRIPTION: This snippet shows how to test logging behavior using Logrus's built-in test hooks. It creates a null logger that records messages without output and demonstrates how to assert log entries in tests.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nimport(\n  \"github.com/sirupsen/logrus\"\n  \"github.com/sirupsen/logrus/hooks/test\"\n  \"github.com/stretchr/testify/assert\"\n  \"testing\"\n)\n\nfunc TestSomething(t*testing.T){\n  logger, hook := test.NewNullLogger()\n  logger.Error(\"Helloerror\")\n\n  assert.Equal(t, 1, len(hook.Entries))\n  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)\n  assert.Equal(t, \"Helloerror\", hook.LastEntry().Message)\n\n  hook.Reset()\n  assert.Nil(t, hook.LastEntry())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Persistent Podman Fish Completion - Fish - Shell\nDESCRIPTION: This snippet generates the Podman Fish shell completion script and saves it to the user's Fish completion directory. The -f option is used to write to ~/.config/fish/completions/podman.fish, ensuring the completion is loaded in all future Fish sessions automatically. The directory must exist and the user must have the appropriate file permissions.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-completion.1.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npodman completion -f ~/.config/fish/completions/podman.fish fish\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rootless User Setup Error\nDESCRIPTION: Shows the error when attempting to run a container with an unmapped user ID in rootless mode\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ podman run --rm -ti --user 1000000 alpine echo hi\nError: container create failed: container_linux.go:344: starting container process caused \"setup user: invalid argument\"\n```\n\n----------------------------------------\n\nTITLE: Wrapping Errors with Additional Context Using pkg/errors in Go\nDESCRIPTION: This snippet shows how to use errors.Wrap from github.com/pkg/errors to add contextual information to an error when it occurs, such as after a failed file read operation. Dependency: github.com/pkg/errors. Key parameters: 'err' is the original error, second argument provides context. Expects an error from an I/O operation; returns a wrapped error with extra context. Limitations: requires importing the errors package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Podman with Automatic User Namespace Allocation - Bash\nDESCRIPTION: Demonstrates the execution of Podman containers with the --userns=auto and --userns=keep-id options to illustrate how reusing these flags affects container startup and leads to potential errors. Useful for diagnosing namespace mapping exhaustion due to existing containers. Requires Podman installed and basic knowledge of container execution. Inputs are command-line arguments for Podman; output is either successful container start or error message upon exhaustion of available user IDs.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run --rm -d --userns=auto alpine sleep 3600\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run --rm -d --userns=auto alpine sleep 3600\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run --rm -d --userns=keep-id alpine sleep 3600\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run --rm -d --userns=auto alpine sleep 3600\n```\n\n----------------------------------------\n\nTITLE: Creating Systemd Hook to Reload Podman Network on Firewalld Reload (busctl)\nDESCRIPTION: This systemd unit file defines a service that monitors D-Bus signals from firewalld using `busctl monitor`. It specifically listens for `Reloaded` or `PropertiesChanged` signals on the `org.fedoraproject.FirewallD1` interface. Upon receiving either signal, it executes `podman network reload --all` within a bash subshell to re-apply Podman's network firewall rules, ensuring container connectivity is restored after a `firewall-cmd --reload`.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=firewalld reload hook - run a hook script on firewalld reload\nWants=dbus.service\nAfter=dbus.service\n\n[Service]\nType=simple\nExecStart=/bin/bash -c '/bin/busctl monitor --system --match \"interface=org.fedoraproject.FirewallD1,member=Reloaded\" --match \"interface=org.fedoraproject.FirewallD1,member=PropertiesChanged\" | while read -r line ; do podman network reload --all ; done'\n\n[Install]\nWantedBy=default.target\n```\n\n----------------------------------------\n\nTITLE: Implementing System Call Dispatch in Assembly for Go\nDESCRIPTION: Hand-written assembly code implementing system call dispatch with three entry points: Syscall, Syscall6, and RawSyscall. This must be implemented for each GOOS/GOARCH pair when porting Go to a new architecture/OS.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/golang.org/x/sys/unix/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Pushing a Container Image to a Registry with Podman\nDESCRIPTION: Demonstrates how to push a tagged container image to a remote registry using the podman push command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/Introduction.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npodman push quay.io/USERNAME/hello\n```\n\n----------------------------------------\n\nTITLE: Creating a Locked-Down Podmansh Container Quadlet\nDESCRIPTION: Script to create a fully restricted container configuration using Podman Quadlet. This configuration provides no access to the host OS, drops all capabilities, and prevents privilege escalation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podmansh.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# USERID=$(id -u lockedu)\n# mkdir -p /etc/containers/systemd/users/${USERID}\n# cat > /etc/containers/systemd/users/${USERID}/podmansh.container << _EOF\n[Unit]\nDescription=The podmansh container\nAfter=local-fs.target\n\n[Container]\nImage=registry.fedoraproject.org/fedora\nContainerName=podmansh\nRemapUsers=keep-id\nRunInit=yes\nDropCapability=all\nNoNewPrivileges=true\n\nExec=sleep infinity\n\n[Install]\nRequiredBy=default.target\n_EOF\n```\n\n----------------------------------------\n\nTITLE: Listing Built Podman Binaries\nDESCRIPTION: PowerShell command to verify successful build by listing the contents of the Windows binary output directory.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_15\n\nLANGUAGE: pwsh\nCODE:\n```\nGet-ChildItem .\\bin\\windows\\\n```\n\n----------------------------------------\n\nTITLE: Download CA Certificate using Curl\nDESCRIPTION: Uses the `curl` command to download a certificate file from a specified URL and save it locally within the current directory (`/etc/pki/ca-trust/source/anchors`). The `-k` flag allows insecure connections (bypassing certificate validation for the download server), and `-o` specifies the output filename. Replace `MY-SERVER.COM/SOME-CERTIFICATE.pem` with the actual URL and desired filename.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n[root@localhost anchors]# curl -k -o some-certificate.pem https://MY-SERVER.COM/SOME-CERTIFICATE.pem\n```\n\n----------------------------------------\n\nTITLE: Podman Latest Container/Pod Reference Flag\nDESCRIPTION: The --latest (-l) flag is a shared option across multiple Podman commands that enables users to reference the most recently created container or pod instead of providing explicit container/pod names or IDs. This option is not available when using remote Podman clients, including Mac and Windows systems (except WSL2).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/latest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**--latest**, **-l**\n```\n\n----------------------------------------\n\nTITLE: Mounting with Podman Build --volume Option - Bash\nDESCRIPTION: This Bash command demonstrates invoking podman build with the --security-opt label=disable flag and the -v option to mount the user's home directory into /home/user in the build container. This setup is useful when relabeling is not safe or not possible in SELinux environments. It requires Podman installed with proper permission to build images and assumes $HOME is defined. Input is the directory context for build; output is a new container image built with the mounted volume, and SELinux label separation disabled.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/volume.image.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman build --security-opt label=disable -v $HOME:/home/user .\n```\n\n----------------------------------------\n\nTITLE: Copying a Directory from Host to Podman Machine - Bash Command Line\nDESCRIPTION: This command showcases the recursive copying of an entire directory from the host to a running Podman virtual machine using 'podman machine cp'. The operation will transfer all files and subdirectories. The tool assumes both host and VM paths are valid; pre-existing destination content may be overwritten.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-cp.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman machine cp ~/.config podman-machine-default:~/.config\n...\n```\n\n----------------------------------------\n\nTITLE: Using Denco as URL Router in Go\nDESCRIPTION: Shows how to use Denco as a URL router, building routes and performing lookups with different path patterns and parameters.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/go-openapi/runtime/middleware/denco\"\n)\n\ntype route struct {\n\tname string\n}\n\nfunc main() {\n\trouter := denco.New()\n\trouter.Build([]denco.Record{\n\t\t{\"/\", &route{\"root\"}},\n\t\t{\"/user/:id\", &route{\"user\"}},\n\t\t{\"/user/:name/:id\", &route{\"username\"}},\n\t\t{\"/static/*filepath\", &route{\"static\"}},\n\t})\n\n\tdata, params, found := router.Lookup(\"/\")\n\t// print `&main.route{name:\"root\"}, denco.Params(nil), true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/user/hoge\")\n\t// print `&main.route{name:\"user\"}, denco.Params{denco.Param{Name:\"id\", Value:\"hoge\"}}, true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/user/hoge/7\")\n\t// print `&main.route{name:\"username\"}, denco.Params{denco.Param{Name:\"name\", Value:\"hoge\"}, denco.Param{Name:\"id\", Value:\"7\"}}, true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/static/path/to/file\")\n\t// print `&main.route{name:\"static\"}, denco.Params{denco.Param{Name:\"filepath\", Value:\"path/to/file\"}}, true`.\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Comparing Versions in Go\nDESCRIPTION: Demonstrates how to create Version objects from string representations and compare them using the LessThan method.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\nv2, err := version.NewVersion(\"1.5+metadata\")\n\n// Comparison example. There is also GreaterThan, Equal, and just\n// a simple Compare that returns an int allowing easy >=, <=, etc.\nif v1.LessThan(v2) {\n    fmt.Printf(\"%s is less than %s\", v1, v2)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing gotenv and Reading Environment Variables in Go\nDESCRIPTION: This Go code demonstrates how to use gotenv.Load() to automatically load environment variables from a .env file at program startup. The snippet shows initialization in the init() function and then prints the loaded environment variables using os.Getenv(). The main dependencies are the gotenv package, log, and os, and it expects a .env file present in the working directory.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/subosito/gotenv/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/subosito/gotenv\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc init() {\n\tgotenv.Load()\n}\n\nfunc main() {\n\tlog.Println(os.Getenv(\"APP_ID\"))     // \"1234567\"\n\tlog.Println(os.Getenv(\"APP_SECRET\")) // \"abcdef\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Visual Studio Build Tools with C/C++ Support\nDESCRIPTION: Command to run the Visual Studio Build Tools installer with parameters to include C/C++ tools, which are required for building components of the Podman installer.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_5\n\nLANGUAGE: pwsh\nCODE:\n```\n& \"$env:TEMP\\vs_BuildTools.exe\" --passive --wait `\n                      --add Microsoft.VisualStudio.Workload.VCTools `\n                      --includeRecommended `\n                      --remove Microsoft.VisualStudio.Component.VC.CMake.Project\n```\n\n----------------------------------------\n\nTITLE: Formatting Registry List with Newlines\nDESCRIPTION: Demonstrates how to format the registry list with one entry per line using Go template range function.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-info.1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ podman info -f '{{range index .Registries \"search\"}}{{.}}\\n{{end}}'\nregistry.fedoraproject.org\nregistry.access.redhat.com\ndocker.io\nquay.io\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Chroot Directories in Podman Containers\nDESCRIPTION: Specifies one or more directories inside a container to be treated as chroot environments. Podman-managed files like /etc/resolv.conf, /etc/hosts, and /etc/hostname that are mounted into the root directory will also be mounted into these chroot locations. Multiple directories can be specified using comma separation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/chrootdirs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--chrootdirs=/path/to/chroot\n```\n\n----------------------------------------\n\nTITLE: Configuring User Namespace with Subgid Map in Podman\nDESCRIPTION: This option allows running a container in a new user namespace using a specified map from the /etc/subgid file. It's applicable for rootless containers and requires proper user permissions. The option conflicts with --userns and --gidmap flags.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/subgidname.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--subgidname=name\n```\n\n----------------------------------------\n\nTITLE: Preparing Rootfs for Read-Only Podman Containers\nDESCRIPTION: This command prepares a rootfs for use with read-only Podman containers by creating necessary file descriptors. It addresses issues with running containers on read-only filesystems.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ podman run --rm --rootfs /path/to/rootfs true\n```\n\n----------------------------------------\n\nTITLE: Setting Registry Authentication File Path Environment Variable in Bash\nDESCRIPTION: Demonstrates how to override the default authentication file path by setting the REGISTRY_AUTH_FILE environment variable in a bash shell.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/authfile.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport REGISTRY_AUTH_FILE=_path_\n```\n\n----------------------------------------\n\nTITLE: Adding Named SSH Connection with Identity File and Specific Port in Shell\nDESCRIPTION: Shows how to add a system connection named 'production' using an explicit SSH identity file located at '~/.ssh/dev_rsa'. It connects as the 'root' user to 'server.example.com' on the non-standard port 2222, explicitly using the SSH protocol URI scheme.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-connection-add.1.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ podman system connection add --identity ~/.ssh/dev_rsa production ssh://root@server.example.com:2222\n```\n\n----------------------------------------\n\nTITLE: Filtering Podman Pod Events by Type and Status - Bash\nDESCRIPTION: This example uses dual '--filter' flags to show only Podman 'pod' resource events with the status 'create'. It illustrates multi-filter usage for narrowing event output to a specific resource type and event status. Podman and appropriate permissions are required; inputs are the filter values. Output is a time-stamped log of 'create' events for pods, useful for automation, auditing, or debugging pod creation activities.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-events.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman events --filter event=create --filter type=pod\n2019-03-02 10:44:29.601746633 -0600 CST pod create 1df5ebca7b44 (image=, name=confident_hawking)\n2019-03-02 10:44:42.374637304 -0600 CST pod create ca731231718e (image=, name=webapp)\n2019-03-02 10:44:47.486759133 -0600 CST pod create 71e807fc3a8e (image=, name=reverent_swanson)\n```\n\n----------------------------------------\n\nTITLE: Configuring VFS Storage for Podman - INI\nDESCRIPTION: This INI configuration switches Podman to use VFS as its storage driver. VFS is slower, but useful in environments where overlayfs or fuse-overlayfs is unavailable. Only the 'driver' line is needed in the relevant 'storage.conf'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[storage]\\ndriver = \"vfs\"\n```\n\n----------------------------------------\n\nTITLE: Listing Podman Machines (PowerShell)\nDESCRIPTION: Uses the `podman machine ls` command in PowerShell to list all configured Podman machine instances, showing their names, VM type (WSL), creation time, status, and resource allocation (CPUs, Memory, Disk Size).\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_26\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User> podman machine ls\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Registry Signature Store in Podman\nDESCRIPTION: YAML configuration for Podman's registries that specifies signature storage locations, defining a web server for signature reading and a local file path for signature writing.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndefault-docker:\n  sigstore: http://localhost:8000 # Added by us\n  sigstore-staging: file:///var/lib/containers/sigstore\n```\n\n----------------------------------------\n\nTITLE: Configuring Stop Signal for Podman Containers\nDESCRIPTION: This option allows specifying a custom signal to stop a container when using Podman create or run commands. If not specified, the default signal is SIGTERM.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/stop-signal.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--stop-signal**=*signal*\n\nSignal to stop a container. Default is **SIGTERM**.\n```\n\n----------------------------------------\n\nTITLE: Volume Mounting with Windows Path (PowerShell)\nDESCRIPTION: Demonstrates mounting a Windows directory (`c:\\Users\\User\\myfolder`) into a container at `/myfolder` using the `-v` flag with `podman run`. The example lists the contents of the mounted directory within the container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_23\n\nLANGUAGE: powershell\nCODE:\n```\npodman run --rm -v c:\\Users\\User\\myfolder:/myfolder ubi8-micro ls /myfolder\n```\n\n----------------------------------------\n\nTITLE: Setting Default Podman Connection on Windows\nDESCRIPTION: This optional command sets the 'qemuremote' connection as the default for Podman operations.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/qemu-remote-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\npodman system connection default qemuremote\n```\n\n----------------------------------------\n\nTITLE: Configuring Unprivileged Port Access with sysctl in Linux\nDESCRIPTION: This command modifies the kernel parameter to allow rootless Podman containers to bind to ports 443 and higher, addressing the limitation of binding to ports below 1024 without CAP_NET_BIND_SERVICE capability.\nSOURCE: https://github.com/containers/podman/blob/main/rootless.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsysctl net.ipv4.ip_unprivileged_port_start=443\n```\n\n----------------------------------------\n\nTITLE: Renaming a Podman Container by Name using Shell\nDESCRIPTION: This command renames an existing Podman container identified by its current name (`oldContainer`) to a new name (`aNewName`). The old name becomes available for use again. Podman needs to be installed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-rename.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman rename oldContainer aNewName\n```\n\n----------------------------------------\n\nTITLE: Registering OpenCensus View\nDESCRIPTION: Example of registering a view with distribution aggregation for collecting video size metrics.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opencensus.io/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := view.Register(&view.View{\n\tName:        \"example.com/video_size_distribution\",\n\tDescription: \"distribution of processed video size over time\",\n\tMeasure:     videoSize,\n\tAggregation: view.Distribution(1<<32, 2<<32, 3<<32),\n}); err != nil {\n\tlog.Fatalf(\"Failed to register view: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh Shell Completion Initialization - Zsh - Shell\nDESCRIPTION: This Zsh snippet ensures that shell completion is enabled by injecting the necessary autoload commands into the user's ~/.zshrc file. It appends the compinit invocation, allowing the shell to support completion features globally for all Zsh sessions. Users must reload their shell or source their profile script after updating their configuration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-completion.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho \"autoload -U compinit; compinit\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Python SDK on Fedora\nDESCRIPTION: Command to install the Python Docker SDK dependency on Fedora 32/33 systems using the dnf package manager.\nSOURCE: https://github.com/containers/podman/blob/main/test/python/docker/compat/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# dnf install python3-docker\n```\n\n----------------------------------------\n\nTITLE: Checking for a Non-Existent Podman Volume (Shell)\nDESCRIPTION: This example shows how to use `podman volume exists` to check for a volume named `mysql` that does not exist. The `echo $?` command displays the exit status. An exit code of `1` confirms that the specified volume `mysql` was not found.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-exists.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman volume exists mysql\n$ echo $?\n1\n$\n```\n\n----------------------------------------\n\nTITLE: Illustrating Container Command Exit Code Passthrough\nDESCRIPTION: Example shell command demonstrating that Podman passes through the exit code of the command executed within the container. Here, the shell inside the container exits with code 3 (`exit 3`), and Podman itself exits with the same code.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ podman run busybox /bin/sh -c 'exit 3'; echo $?\n3\n```\n\n----------------------------------------\n\nTITLE: Setting PID Namespace Mode in Podman Container\nDESCRIPTION: The --pid flag configures the PID namespace mode for Podman containers. It supports four modes: container (join another container's namespace), host (use host's namespace), ns (join specific namespace), and private (create new namespace). The private mode is the default and most secure option.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/pid.container.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--pid=container:<id>    # Join another container's PID namespace\n--pid=host            # Use the host's PID namespace\n--pid=ns:<path>        # Join a specific PID namespace\n--pid=private         # Create a new namespace (default)\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Build Dependencies on macOS\nDESCRIPTION: This command installs the necessary build dependencies for Podman using the brew package manager on macOS. It installs Go programming language and go-md2man for documentation generation.\nSOURCE: https://github.com/containers/podman/blob/main/build_osx.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install go go-md2man\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Empty Podman Farm via CLI\nDESCRIPTION: This command demonstrates how to create a new, initially empty Podman farm named 'farm2'. It uses the `podman farm create` command followed by the desired farm name. Connections can be added later using the `podman farm update` command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-farm-create.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman farm create farm2\n```\n\n----------------------------------------\n\nTITLE: Creating a Helper User for Podman User Namespace Reservations - Bash\nDESCRIPTION: Demonstrates the creation of a 'containers' user account specifically for reserving subuid and subgid ranges on a Podman host. Includes important command flags for security and non-login status. Dependencies include useradd and root shell access. Input is the useradd command; output is creation of a system user with no home directory or login shell.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd --comment \"Helper user to reserve subuids and subgids for Podman\" \\\n             --no-create-home \\\n             --shell /usr/sbin/nologin \\\n             containers\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Span in OpenTracing for Go\nDESCRIPTION: Illustrates starting a new root span without any parent reference. This is essential for operations beginning a new trace. Requires OpenTracing Go API. Inputs: operation name as string; outputs: span instance which should be finished via defer to record the end of the operation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n    func xyz() {\n        ...\n        sp := opentracing.StartSpan(\"operation_name\")\n        defer sp.Finish()\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting up macOS Libkrun for Podman machine tests\nDESCRIPTION: Bash commands to install dependencies and run Podman machine tests on macOS using the Libkrun virtualization provider as an alternative to Apple Hypervisor.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/machine/e2e/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install krunkit\nmake podman-remote\nexport CONTAINERS_MACHINE_PROVIDER=\"libkrun\"\nmake localmachine\n```\n\n----------------------------------------\n\nTITLE: Compressing Streams Using Zstandard Encoder in Go\nDESCRIPTION: This snippet demonstrates how to compress data read from an input stream and write the compressed result to an output writer using the zstd package in Go. The function initializes a new encoder with default options, performs the copy operation, handles errors, and ensures that the encoder is properly closed to release resources. Dependencies include the 'github.com/klauspost/compress/zstd' module, and 'io.Reader'/'io.Writer' interfaces are used for generality. The primary inputs are any objects implementing io.Reader and io.Writer; output is an error indicating success or failure. Users must handle resource cleanup by always calling Close, as shown.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Compress input to output.\nfunc Compress(in io.Reader, out io.Writer) error {\n    enc, err := zstd.NewWriter(out)\n    if err != nil {\n        return err\n    }\n    _, err = io.Copy(enc, in)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Exit Code 125 (Podman Error)\nDESCRIPTION: Example shell command demonstrating a scenario where Podman exits with code 125. This code indicates an error within Podman itself, such as using an unknown command-line flag (`--foo`). The `echo $?` command displays the exit code.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ podman run --foo busybox; echo $?\nError: unknown flag: --foo\n125\n```\n\n----------------------------------------\n\nTITLE: Aliasing pflag Flag Names with Normalization in Go\nDESCRIPTION: Demonstrates using a flag normalization function (`aliasNormalizeFunc`) to create aliases. This function checks if the input name matches \"old-flag-name\" and, if so, returns \"new-flag-name\" as the normalized name. When registered using `SetNormalizeFunc`, this makes `--old-flag-name` and `--new-flag-name` equivalent.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc aliasNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tswitch name {\n\tcase \"old-flag-name\":\n\t\tname = \"new-flag-name\"\n\t\tbreak\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(aliasNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Single Artifact Mount\nDESCRIPTION: Mount a single artifact from a container registry\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mount.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntype=artifact,src=quay.io/libpod/testartifact:20250206-single,dst=/data\n```\n\n----------------------------------------\n\nTITLE: Removing Pods/Containers using podman kube down with a URL\nDESCRIPTION: This example demonstrates using `podman kube down` with a URL that points to a Kubernetes YAML file. Podman fetches the YAML from the specified URL (`https://podman.io/demo.yml`) and uses it to identify and remove the associated pods and containers. This method requires the YAML file at the URL to be unchanged since the creation of the resources.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-down.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ podman kube down https://podman.io/demo.yml\nPods stopped:\n52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6\nPods removed:\n52182811df2b1e73f36476003a66ec872101ea59034ac0d4d3a7b40903b955a6\n```\n\n----------------------------------------\n\nTITLE: Podman Build Ignore File Configuration Option\nDESCRIPTION: Command line option for specifying an alternative path to a .containerignore file when building containers with Podman. This option applies to both 'podman build' and 'farm build' commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/ignorefile.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--ignorefile\n```\n\n----------------------------------------\n\nTITLE: Volume Mounting with Unix-Style Windows Path (PowerShell)\nDESCRIPTION: Shows mounting a Windows directory using a Unix-like path format (`/c/Users/User/myfolder`) into a container at `/myfolder`. This format is also supported by Podman on Windows.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_24\n\nLANGUAGE: powershell\nCODE:\n```\npodman run --rm -v /c/Users/User/myfolder:/myfolder ubi8-micro ls /myfolder\n```\n\n----------------------------------------\n\nTITLE: Defining Help Option for Podman Build Commands\nDESCRIPTION: Specifies the --help and -h options for Podman build and farm build commands. These options print the usage statement when invoked.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/help.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n####> This option file is used in:\n####>   podman build, farm build\n####> If file is edited, make sure the changes\n####> are applicable to all of those.\n#### **--help**, **-h**\n\nPrint usage statement\n```\n\n----------------------------------------\n\nTITLE: Custom TOML Key Mapping with Go Struct Tags - Go\nDESCRIPTION: Defines a Go struct field with a struct tag to map an arbitrary TOML key name to a Go field, enabling decoding of TOML files with keys that don't match Go identifier conventions. Requires the BurntSushi TOML package. The key parameter is the struct tag `toml:\"some_key_NAME\"`. Input is TOML with non-standard key names; output is a Go struct with mapped field values. Limitation: Only exported fields can be decoded.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype TOML struct {\\n    ObscureKey string `toml:\"some_key_NAME\"`\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah Dependencies on Fedora\nDESCRIPTION: Command to install all required dependencies for building Buildah from source on Fedora.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndnf -y install \\\n    make \\\n    golang \\\n    bats \\\n    btrfs-progs-devel \\\n    glib2-devel \\\n    gpgme-devel \\\n    libassuan-devel \\\n    libseccomp-devel \\\n    git \\\n    bzip2 \\\n    go-md2man \\\n    runc \\\n    containers-common\n```\n\n----------------------------------------\n\nTITLE: Overlay Rootfs Mount Flag in Podman\nDESCRIPTION: The :O flag instructs Podman to mount the directory from the rootfs path as storage using the overlay file system. This allows container processes to modify content within the mount point, which is stored separately in container storage.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/rootfs.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n:O\n```\n\n----------------------------------------\n\nTITLE: Creating Systemd Hook for Podman Network Reload using Python Script\nDESCRIPTION: This systemd unit file defines a service that relies on an external Python script (`/path/to/python/code/podman-redo-nat.py`) to monitor firewalld D-Bus events. The service ensures the Python script starts after `dbus.service` and `firewalld.service` are active. The Python script handles the logic of listening for relevant signals and executing `podman network reload --all`. Requires Python 3 and necessary D-Bus bindings (`python3-dbus`, `python3-gobject`) to be installed.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Redo podman NAT rules after firewalld starts or reloads\nWants=dbus.service\nRequires=firewalld.service\nAfter=dbus.service\n\n[Service]\nType=simple\nExecStart=/usr/bin/python  /path/to/python/code/podman-redo-nat.py\nRestart=always\n\n[Install]\nWantedBy=default.target\n```\n\n----------------------------------------\n\nTITLE: Checking Terminal State and Window Size Using moby/term in Go\nDESCRIPTION: This Go code demonstrates how to use the moby/term package to determine if the standard input is a terminal and how to obtain its window size. It first checks terminal state via term.IsTerminal on os.Stdin.Fd(), then retrieves the terminal's height and width using term.GetWinsize if the state is true. Dependencies include the moby/term and log packages, and the code expects to be run in a terminal environment. Outputs are the terminal's height and width, logged to standard output, and errors are handled via log.Fatalf.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/moby/term/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/moby/term\"\n)\n\nfunc main() {\n\tfd := os.Stdin.Fd()\n\tif term.IsTerminal(fd) {\n\t\tws, err := term.GetWinsize(fd)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"term.GetWinsize: %s\", err)\n\t\t}\n\t\tlog.Printf(\"%d:%d\\n\", ws.Height, ws.Width)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example Podman Service URL (Root SSH Connection)\nDESCRIPTION: An example URL string specifying an SSH connection as root to a remote Podman service running on localhost. It includes the user (root), host, port, and the path to the root Podman Unix socket on the remote machine.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nssh://root@localhost:22/run/podman/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Tagging, Removing, and Pushing a Manifest List with Podman CLI - Shell\nDESCRIPTION: This snippet details how to rename a manifest, remove it from local storage, and push the complete manifest to a remote repository using Podman CLI subcommands. The process involves tagging a manifest, removing the local version with `manifest rm`, and pushing using `manifest push --all` to ensure all architecture contents are included in the remote manifest. Dependencies include Podman CLI and local manifest presence. Input is the local manifest tag; output is the same manifest available at a remote location. Limitation: always ensure `manifest rm` is used on the manifest (not its contents), and push with `--all` for completeness.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-manifest.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman tag localhost/shazam example.com/example/shazam\n$ podman manifest rm localhost/shazam\n$ podman manifest push --all example.com/example/shazam\n```\n\n----------------------------------------\n\nTITLE: Installing and Viewing Podman Man Pages on macOS\nDESCRIPTION: These commands copy the built Podman man pages to the system's man page directory and demonstrate how to view them using the man command.\nSOURCE: https://github.com/containers/podman/blob/main/build_osx.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cp -a docs/build/remote/darwin/* /usr/share/man/man1\n$ man podman\n```\n\n----------------------------------------\n\nTITLE: Stopping a Podman Machine from PowerShell - PowerShell\nDESCRIPTION: Stops the currently running Podman machine using PowerShell. The output confirms a graceful shutdown of the machine named 'podman-machine-default'. Requires Podman CLI available in the system's PATH and an active machine.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_34\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User> podman machine stop\nMachine \"podman-machine-default\" stopped successfully\n```\n\n----------------------------------------\n\nTITLE: Mapping Additional Groups to a Container Namespace - shell\nDESCRIPTION: Explains the process of granting a user access to additional groups within a container by adding subgid ranges with usermod and verifying with grep. Useful for allowing group impersonation in container namespaces. Requires administrative action and unique mapping to prevent security risks. Ensures the specified group IDs are included in the user's mapping.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# usermod --add-subgids 2000-2000 johndoe\\ngrep johndoe /etc/subgid\n```\n\n----------------------------------------\n\nTITLE: Renaming a Podman Container by ID using 'podman container rename' in Shell\nDESCRIPTION: This command renames a Podman container specified by its ID (`6e7514b47180`) to `databaseCtr`. It uses the explicit `podman container rename` subcommand syntax, which is equivalent to `podman rename`. Podman needs to be installed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-rename.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman container rename 6e7514b47180 databaseCtr\n```\n\n----------------------------------------\n\nTITLE: Visualizing Container Socket Activation with Mermaid\nDESCRIPTION: A state diagram illustrating the flow of socket activation for containers, showing how the socket is inherited through podman, conmon, the OCI runtime, and finally the container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> systemd: first client connects\n    systemd --> podman: socket inherited via fork/exec\n    state \"OCI runtime\" as s2\n    podman --> conmon: socket inherited via double fork/exec\n    conmon --> s2: socket inherited via fork/exec\n    s2 --> container: socket inherited via exec\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd Cgroup Delegation for User Services\nDESCRIPTION: This systemd service configuration snippet, intended for a file like `/etc/systemd/system/user@.service.d/delegate.conf`, delegates the `memory`, `pids`, `cpu`, and `cpuset` cgroup controllers to user services. This allows non-root users, including Podman running rootless, to manage these resource limits for their processes and containers. Requires root privileges to create the file and a user logout/login cycle for changes to take effect.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nDelegate=memory pids cpu cpuset\n```\n\n----------------------------------------\n\nTITLE: Importing Tagged Image from URL (Shell)\nDESCRIPTION: Imports an image from a tarball located at a remote URL ('http://example.com/ctr.tar') and tags it as 'url-image'. The output shows the download step followed by the standard import process. Requires network access to the specified URL.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-import.1.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ podman import http://example.com/ctr.tar url-image\nDownloading from \"http://example.com/ctr.tar\"\nGetting image source signatures\nCopying blob sha256:b41deda5a2feb1f03a5c1bb38c598cbc12c9ccd675f438edc6acd815f7585b86\n 25.80 MB / 25.80 MB [======================================================] 0s\nCopying config sha256:5813fe8a3b18696089fd09957a12e88bda43dc1745b5240879ffffe93240d29a\n 419 B / 419 B [============================================================] 0s\nWriting manifest to image destination\nStoring signatures\ndb65d991f3bbf7f31ed1064db9a6ced7652e3f8166c4736aa9133dadd3c7acb3\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Blackfriday HTML Output with Bluemonday in Go\nDESCRIPTION: This Go code snippet demonstrates how to use the `bluemonday` HTML sanitizer package to safely process HTML generated by Blackfriday. It configures a policy to allow specific CSS classes (matching `^language-[a-zA-Z0-9]+$`) on `code` elements, preserving syntax highlighting information from fenced code blocks.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\np := bluemonday.UGCPolicy()\np.AllowAttrs(\"class\").Matching(regexp.MustCompile(\"^language-[a-zA-Z0-9]+$\")).OnElements(\"code\")\nhtml := p.SanitizeBytes(unsafe)\n```\n\n----------------------------------------\n\nTITLE: Creating User with Podmansh Login Shell\nDESCRIPTION: Command to create a user account with podmansh as the login shell. This sets up a user named 'lockedu' who will automatically enter a container when logging in.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podmansh.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# useradd -s /usr/bin/podmansh lockedu\n# grep lockedu /etc/passwd\nlockedu:x:4008:4008::/home/lockedu:/usr/bin/podmansh\n```\n\n----------------------------------------\n\nTITLE: Configuring SBOM Scanner Command for Podman Farm Build\nDESCRIPTION: Specifies the command to run from a scanner image to generate SBOMs. Supports multiple commands and provides text substitutions for filesystem paths and output files.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sbom-scanner-command.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--sbom-scanner-command**=*image*\n```\n\n----------------------------------------\n\nTITLE: Using the Basic Test Function for API Requests in Podman API Tests\nDESCRIPTION: Examples of how to use the 't' function to test API endpoints with different HTTP methods and validate the responses. Shows various patterns for GET and POST requests, as well as how to validate JSON responses and handle special file uploads.\nSOURCE: https://github.com/containers/podman/blob/main/test/apiv2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nt GET /_ping 200 OK\n```\n\nLANGUAGE: bash\nCODE:\n```\nt POST libpod/volumes/create name=foo 201 .ID~[0-9a-f]\\{12\\}\n```\n\nLANGUAGE: bash\nCODE:\n```\nt POST myentrypoint 200\n```\n\nLANGUAGE: bash\nCODE:\n```\nt POST myentrypoint id=$id 200\n```\n\nLANGUAGE: bash\nCODE:\n```\nt POST myentrypoint id=$id filter='{\"foo\":\"bar\"}' 200\n```\n\nLANGUAGE: bash\nCODE:\n```\nt POST myentrypoint name=$name badparam='[\"foo\",\"bar\"]' 500\n```\n\nLANGUAGE: bash\nCODE:\n```\nt POST myentrypoint /mytmpdir/myfile.tar application/foo 400\n```\n\nLANGUAGE: bash\nCODE:\n```\nAPIV2_TEST_EXPECT_TIMEOUT=5 t POST /foo 999\n```\n\n----------------------------------------\n\nTITLE: Adding Podman Connection for QEMU VM on Windows\nDESCRIPTION: This command adds a new Podman connection named 'qemuremote' for the QEMU virtual machine. It specifies the SSH identity file and connection details.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/qemu-remote-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\npodman system connection add --identity C:\\qemu-remote\\remote -p 57561 qemuremote ssh://core@127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Podman Containers\nDESCRIPTION: This snippet demonstrates the usage of the --env/-e option in Podman commands to add or modify environment variables for containers. It supports multiple values and overrides existing variables. The changes take effect after the next container start.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/env.update.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--env**, **-e**=*env*\n\nAdd a value (e.g. env=*value*) to the container. Can be used multiple times.\nIf the value already exists in the container, it is overridden.\nTo remove an environment variable from the container, use the `--unsetenv`\noption.\n\nNote that the env updates only affect the main container process after\nthe next start.\n```\n\n----------------------------------------\n\nTITLE: Defining Time Option for Podman Container/Pod Management\nDESCRIPTION: Specifies the '--time' or '-t' option used in Podman commands like 'pod rm', 'pod stop', 'restart', 'rm', and 'stop'. It sets the number of seconds to wait before forcibly stopping containers or pods.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/time.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--time**, **-t**=*seconds*\n\nSeconds to wait before forcibly stopping <<the container|running containers within the pod>>.\nUse -1 for infinite wait.\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Memory Size Option for Podman Containers\nDESCRIPTION: This snippet defines the --shm-size option for Podman commands. It allows specifying the size of /dev/shm with various units (bytes, kibibytes, mebibytes, gibibytes). The default size is 64m if not specified, and setting it to 0 removes the memory limit for IPC.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/shm-size.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--shm-size**=*number[unit]*\n\nSize of _/dev/shm_. A _unit_ can be **b** (bytes), **k** (kibibytes), **m** (mebibytes), or **g** (gibibytes).\nIf the unit is omitted, the system uses bytes. If the size is omitted, the default is **64m**.\nWhen _size_ is **0**, there is no limit on the amount of memory used for IPC by the <<container|pod>>.\nThis option conflicts with **--ipc=host**.\n```\n\n----------------------------------------\n\nTITLE: Generating KSUIDs as JSON via CLI Template\nDESCRIPTION: This shell command generates four KSUIDs (`-n 4`) and formats the output as JSON using the template feature (`-f template`). The template provided via `-t` constructs a JSON object for each KSUID, including its timestamp, payload, and string representation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/segmentio/ksuid/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -f template -t '{ \"timestamp\": \"{{ .Timestamp }}\", \"payload\": \"{{ .Payload }}\", \"ksuid\": \"{{.String}}\"}' -n 4\n{ \"timestamp\": \"107611700\", \"payload\": \"9850EEEC191BF4FF26F99315CE43B0C8\", \"ksuid\": \"0uk1Hbc9dQ9pxyTqJ93IUrfhdGq\"}\n{ \"timestamp\": \"107611700\", \"payload\": \"CC55072555316F45B8CA2D2979D3ED0A\", \"ksuid\": \"0uk1HdCJ6hUZKDgcxhpJwUl5ZEI\"}\n{ \"timestamp\": \"107611700\", \"payload\": \"BA1C205D6177F0992D15EE606AE32238\", \"ksuid\": \"0uk1HcdvF0p8C20KtTfdRSB9XIm\"}\n{ \"timestamp\": \"107611700\", \"payload\": \"67517BA309EA62AE7991B27BB6F2FCAC\", \"ksuid\": \"0uk1Ha7hGJ1Q9Xbnkt0yZgNwg3g\"}\n```\n\n----------------------------------------\n\nTITLE: Documenting --destroy Flag for Podman Clone Operations\nDESCRIPTION: Describes the --destroy flag option which can be used with 'podman container clone' and 'podman pod clone' commands. When specified, this flag removes the original container or pod after it has been used as a template for cloning.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/destroy.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####> This option file is used in:\\n####>   podman container clone, pod clone\\n####> If file is edited, make sure the changes\\n####> are applicable to all of those.\\n#### **--destroy**\\n\\nRemove the original <<container|pod>> that we are cloning once used to mimic the configuration.\n```\n\n----------------------------------------\n\nTITLE: Configuring Host User for Podman Containers\nDESCRIPTION: This option allows adding a user account from the host system to the container's /etc/passwd file. The specified username or UID must exist on the host system. This is applicable to both 'podman create' and 'podman run' commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/hostuser.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--hostuser**=*name*\n```\n\n----------------------------------------\n\nTITLE: Showing Verbose Podman Disk Usage (Shell)\nDESCRIPTION: Demonstrates the use of the `-v` or `--verbose` flag with `podman system df`. This provides detailed information about individual images (repository, tag, ID, size, etc.), containers (ID, image, command, size, status, etc.), and local volumes (name, links, size).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-df.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman system df -v\nImages space usage:\n\nREPOSITORY                 TAG      IMAGE ID       CREATED       SIZE     SHARED SIZE   UNIQUE SIZE   CONTAINERS\ndocker.io/library/alpine   latest   5cb3aa00f899   2 weeks ago   5.79MB   0B            5.79MB       5\n\nContainers space usage:\n\nCONTAINER ID    IMAGE   COMMAND       LOCAL VOLUMES   SIZE     CREATED        STATUS       NAMES\n073f7e62812d    5cb3    sleep 100     1               0B       20 hours ago   exited       zen_joliot\n3f19f5bba242    5cb3    sleep 100     0               5.52kB   22 hours ago   exited       pedantic_archimedes\n8cd89bf645cc    5cb3    ls foodir     0               58B      21 hours ago   configured   agitated_hamilton\na1d948a4b61d    5cb3    ls foodir     0               12B      21 hours ago   exited       laughing_wing\neafe3e3c5bb3    5cb3    sleep 10000   0               72B      21 hours ago   exited       priceless_liskov\n\nLocal Volumes space usage:\n\nVOLUME NAME   LINKS   SIZE\ndata          1       0B\n```\n\n----------------------------------------\n\nTITLE: Dropping Linux Capabilities in Podman Container (INI)\nDESCRIPTION: Illustrates how to drop specific Linux capabilities from a Podman container for enhanced security using Quadlet configuration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nDropCapability=CAP_DAC_OVERRIDE CAP_IPC_OWNER\n```\n\n----------------------------------------\n\nTITLE: Installing klauspost/compress Package in Go\nDESCRIPTION: Demonstrates how to install the klauspost/compress library using Go modules to enable the use of the advanced compression algorithms and utilities described. Requires a working Go environment and appropriate version (current or up to two versions back). The example uses the 'go get' command to fetch the latest version of the package to the user's go.mod and go.sum files. No input or output is involved; the result is an updated project dependency.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo get github.com/klauspost/compress@latest\n```\n\n----------------------------------------\n\nTITLE: Demonstrating podman unshare Exit Code 125 (Podman Error)\nDESCRIPTION: This shell command demonstrates exit code 125 for `podman unshare`. It occurs when there is an error with Podman itself, such as providing an unknown flag (`--foo`). The `echo $?` command prints the exit code.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-unshare.1.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ podman unshare --foo; echo $?\nError: unknown flag: --foo\n125\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Swap Option in Podman Commands\nDESCRIPTION: This snippet defines the --memory-swap option for Podman commands. It specifies how to set a limit value equal to memory plus swap, using different units of measurement. The option must be used with the --memory flag and has specific rules for setting values.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/memory-swap.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--memory-swap**=*number[unit]*\n\nA limit value equal to memory plus swap.\nA _unit_ can be **b** (bytes), **k** (kibibytes), **m** (mebibytes), or **g** (gibibytes).\n\nMust be used with the **-m** (**--memory**) flag.\nThe argument value must be larger than that of\n **-m** (**--memory**) By default, it is set to double\nthe value of **--memory**.\n\nSet _number_ to **-1** to enable unlimited swap.\n\nThis option is not supported on cgroups V1 rootless systems.\n```\n\n----------------------------------------\n\nTITLE: Checking User Cgroup Controller Delegation in Linux\nDESCRIPTION: This command displays the cgroup controllers (e.g., `memory`, `pids`, `cpu`) available to the current user's systemd service scope by reading the `cgroup.controllers` file within the user's slice. It's used to diagnose issues where Podman cannot set resource limits because the necessary controllers haven't been delegated by systemd. The output lists the delegated controllers; missing entries like `cpu` indicate lack of permission.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n$ cat \"/sys/fs/cgroup/user.slice/user-$(id -u).slice/user@$(id -u).service/cgroup.controllers\"\n```\n\n----------------------------------------\n\nTITLE: Making Root Mount Shared (Shell)\nDESCRIPTION: Shell command to convert the root directory ('/') into a shared mount point. This allows mount events within this mount point to propagate to other bind mounts of the same peer group. This is presented as an alternative way to achieve shared mounts for volumes like '/foo' when '/foo' is sourced from '/'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/volume.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmount --make-shared /\n```\n\n----------------------------------------\n\nTITLE: Extracting Single Blob from OCI Artifact - Podman CLI - Shell\nDESCRIPTION: Demonstrates extracting an OCI artifact containing a single blob to a local file using the 'podman artifact extract' command. Requires Podman to be installed and the referenced artifact to exist in the remote registry. The 'artifact' argument is the reference (e.g., quay.io/artifact/foobar1:test), and the 'target' is the destination file path on the local filesystem. The command overwrites the target if it already exists; no filtering options are used.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-artifact-extract.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman artifact extract quay.io/artifact/foobar1:test /tmp/myfile\n```\n\n----------------------------------------\n\nTITLE: Configuring User Namespaces in Podman\nDESCRIPTION: The --userns option sets the configuration for user namespaces when handling RUN instructions in Podman. It accepts values such as empty string, \"container\", \"host\", or a path to an existing user namespace.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/userns.image.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#### **--userns**=*how*\n```\n\n----------------------------------------\n\nTITLE: Setting Static IPv4 Address in Podman Container/Pod Creation\nDESCRIPTION: Demonstrates how to specify a static IPv4 address when creating a Podman container or pod. The IP address must be within the network's IP address pool (default 10.88.0.0/16) and can only be used with a single network connection.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/ip.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--ip=10.88.64.128\n```\n\n----------------------------------------\n\nTITLE: Extracting a Sub-tree from Viper Configuration\nDESCRIPTION: Illustrates how to extract a subset of the configuration using Viper's Sub method. This is useful for creating reusable modules with their own configuration.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  cache1:\n    max-items: 100\n    item-size: 64\n  cache2:\n    max-items: 200\n    item-size: 80\n```\n\nLANGUAGE: go\nCODE:\n```\ncache1Config := viper.Sub(\"cache.cache1\")\nif cache1Config == nil { // Sub returns nil if the key cannot be found\n\tpanic(\"cache configuration not found\")\n}\n\ncache1 := NewCache(cache1Config)\n```\n\n----------------------------------------\n\nTITLE: Noninteractive Podman Benchmarking within User Namespace - Bash\nDESCRIPTION: This Bash snippet provides an automated, non-interactive approach to benchmarking Podman using a test user with systemd-run. It shows how to pull an image and run a container under an alternative storage driver with benchmarking enabled using '/usr/bin/time -v'. This aids in scripting and automating performance tests across various configurations. Requires systemd, sudo privileges, and Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd testuser\\nsystemd-run --machine=testuser@ --quiet --user --collect --pipe --wait \\\\n   podman --storage-driver=vfs pull docker.io/library/alpine\\nsystemd-run --machine=testuser@ --quiet --user --collect --pipe --wait \\\\n   /usr/bin/time -v podman --storage-driver=vfs run --rm docker.io/library/alpine /bin/true\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Path in Podman\nDESCRIPTION: Sets the path for the container's log file using the 'path' option with --log-opt.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/log-opt.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--log-opt path=/var/log/container/mycontainer.json\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah on RHEL 8 Beta\nDESCRIPTION: Commands to enable the container-tools module and install Buildah on RHEL 8 Beta.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum module enable -y container-tools:1.0\nsudo yum module install -y buildah\n```\n\n----------------------------------------\n\nTITLE: Cross-compiling go-sqlite3 from macOS to Linux (Static) using Bash\nDESCRIPTION: This command demonstrates cross-compiling the `go-sqlite3` package from macOS to a static Linux amd64 binary using the `musl-cross` toolchain. It sets the C (`CC`) and C++ (`CXX`) compilers to the musl-based cross-compilers, specifies the target OS (`GOOS=linux`) and architecture (`GOARCH=amd64`), ensures CGO is enabled, and uses LDFLAGS to link statically (`-linkmode external -extldflags -static`). Requires `musl-cross` to be installed (e.g., via Homebrew).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCC=x86_64-linux-musl-gcc CXX=x86_64-linux-musl-g++ GOARCH=amd64 GOOS=linux CGO_ENABLED=1 go build -ldflags \"-linkmode external -extldflags -static\"\n```\n\n----------------------------------------\n\nTITLE: Specifying SSH Agent Socket for Podman Build\nDESCRIPTION: This option allows specifying an SSH agent socket or keys to expose to the build process. The socket path can be omitted to use the default SSH_AUTH_SOCK value.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/ssh.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--ssh=default | id[=socket>\n```\n\n----------------------------------------\n\nTITLE: Stopping a Container by Name (PowerShell)\nDESCRIPTION: Stops the running container named `httpd` using the `podman stop` command in PowerShell.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\npodman stop httpd\n```\n\n----------------------------------------\n\nTITLE: Setting Logrus Log Level in Go\nDESCRIPTION: This snippet demonstrates how to set the minimum log level for the logger. It configures the logger to only display messages with Info level or higher severity.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Will log anything that is info or above (warn, error, fatal, panic). Default.\nlog.SetLevel(log.InfoLevel)\n```\n\n----------------------------------------\n\nTITLE: Configuring UTS Namespace Mode in Podman (Markdown)\nDESCRIPTION: This snippet defines the --uts option for Podman containers. It specifies the available values for setting the UTS namespace mode, including host, private, ns:[path], and container:[container]. Each option's effect on the container's UTS namespace is explained.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/uts.container.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--uts**=*mode*\n\nSet the UTS namespace mode for the container. The following values are supported:\n\n- **host**: use the host's UTS namespace inside the container.\n- **private**: create a new namespace for the container (default).\n- **ns:[path]**: run the container in the given existing UTS namespace.\n- **container:[container]**: join the UTS namespace of the specified container.\n```\n\n----------------------------------------\n\nTITLE: Mounting Volumes for Podman Build RUN Instructions in Quadlet\nDESCRIPTION: Mounts volumes to containers when executing RUN instructions during the build. It follows the format '[[SOURCE-VOLUME|HOST-DIR:]CONTAINER-DIR[:OPTIONS]]' and supports special handling for volumes ending with '.volume'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_37\n\nLANGUAGE: ini\nCODE:\n```\nVolume=\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Podman Storage Path\nDESCRIPTION: This configuration snippet shows an example `~/.config/containers/storage.conf` file. It defines custom paths for Podman's storage (`graphroot`) and runtime state (`runroot`), allowing users to specify a location on a filesystem *without* the `noexec` mount option, thus bypassing permission errors when the default home directory is mounted `noexec`.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n$ cat ~/.config/containers/storage.conf\n[storage]\n  driver = \"overlay\"\n  runroot = \"/run/user/1000\"\n  graphroot = \"/execdir/myuser/storage\"\n  [storage.options]\n    mount_program = \"/bin/fuse-overlayfs\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Secret Mount Location in Containerfile\nDESCRIPTION: Shows how to override the default location of the secret in the container using the target, dst, or destination option of the RUN --mount flag in a Containerfile.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/secret.image.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRUN --mount=type=secret,id=mysecret,target=/run/secrets/myothersecret cat /run/secrets/myothersecret\n```\n\n----------------------------------------\n\nTITLE: Executing a Read-Write Transaction in bbolt\nDESCRIPTION: Example of using the DB.Update() function to perform a read-write transaction. This method handles transaction creation, commit, and rollback automatically based on the returned error.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nerr := db.Update(func(tx *bolt.Tx) error {\n\t...\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Launching QEMU with Custom Configuration on Windows\nDESCRIPTION: This command launches QEMU with specific settings for CPU, RAM, networking, and disk image. It uses a QCOW2 image of Fedora CoreOS and sets up various virtual devices.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/qemu-remote-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nqemu-system-x86_64w.exe -m 8192 -smp 4 -fw_cfg name=opt/com.coreos/config,file=C:\\qemu-remote\\remote.ign -netdev stream,id=vlan,server=off,addr.type=unix,addr.path=C:\\qemu-remote\\vlan_remote.sock -device virtio-net-pci,netdev=vlan,mac=5a:94:ef:e4:0c:ee -device virtio-serial -chardev socket,path=C:\\qemu-remote\\ready.sock,server=on,wait=off,id=apodman-machine-default_ready -device virtserialport,chardev=apodman-machine-default_ready,name=org.fedoraproject.port.0 -pidfile C:\\qemu-remote\\vm.pid -machine q35,accel=whpx:tcg -cpu max,vmx=off,monitor=off -drive if=virtio,file=C:\\qemu-remote\\fedora-coreos-37.20221127.2.0-qemu.x86_64.qcow2\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Client Connection to Podman (PowerShell)\nDESCRIPTION: Uses the Docker CLI (`docker.exe version`) with a format specifier to query the server (Podman backend) and display the name of the engine component. This confirms that the Docker client is communicating with Podman after setting `DOCKER_HOST`.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User>.\\docker.exe version --format '{{(index .Server.Components 0).Name}}'\n```\n\n----------------------------------------\n\nTITLE: Failed Image Pull Due to Invalid Signature in Podman\nDESCRIPTION: Command and error output showing what happens when trying to pull a signed image with an incorrect verification key, demonstrating the security protection in action.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman pull --tls-verify=false localhost:5000/alpine\nTrying to pull localhost:5000/alpine...\nError: pulling image \"localhost:5000/alpine\": unable to pull localhost:5000/alpine: unable to pull image: Source image rejected: Invalid GPG signature: …\n```\n\n----------------------------------------\n\nTITLE: Demonstrating podman unshare Passing Through Contained Command Exit Code\nDESCRIPTION: This shell example shows that `podman unshare` passes through the exit code of the executed command if it runs successfully. Here, `/bin/sh -c 'exit 3'` exits with code 3, and `podman unshare` mirrors this exit code, as shown by `echo $?`.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-unshare.1.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ podman unshare /bin/sh -c 'exit 3'; echo $?\n3\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Environment Variables in Podman Containers\nDESCRIPTION: Demonstrates how to use the --env-merge flag to modify environment variables in Podman containers. Shows how to append values to existing environment variables and explains behavior when referenced variables don't exist.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/env-merge.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--env-merge hello=${hello}-some\n```\n\n----------------------------------------\n\nTITLE: Defining Authorizer Handler in go-swagger REST API - Go\nDESCRIPTION: This snippet introduces the Authorizer function field within the restapi.Config struct to support authorization logic after a user principal has been authenticated. The Authorizer function receives an *http.Request, retrieves user and route information from the request context and matched route, and returns an error indicating authorization failure. A non-nil error results in an HTTP 403 response, enforcing policy controls based on user roles or route scopes. Required: access to restapi.AuthKey and go-swagger middleware utilities.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-swagger/go-swagger/generator/templates/contrib/stratoscale/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\t...\n\t// Authorizer is used to authorize a request after the Auth function was called using the \"Auth*\" functions\n\t// and the principal was stored in the context in the \"AuthKey\" context value.\n\tAuthorizer func(*http.Request) error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring user namespace for containers in Kubernetes Quadlet\nDESCRIPTION: Shows how to set the user namespace mode for containers using the UserNS directive, equivalent to Podman's --userns option with format MODE[:OPTIONS,...].\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nUserNS=keep-id:uid=200,gid=210\n```\n\n----------------------------------------\n\nTITLE: Sorting Semantic Versions with semver and Go sort Package\nDESCRIPTION: This snippet describes how to sort a slice of semantic version strings using the semver package in conjunction with Go's sort package. Each string is parsed into a Version object, errors are handled during parsing, and the resulting slice is sorted using semver.Collection, which implements sort.Interface. Dependencies include both the semver and sort packages; input is a slice of version strings, output is a sorted slice of Version objects.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nraw := []string{\"1.2.3\", \"1.0\", \"1.3\", \"2\", \"0.4.2\",}\nvs := make([]*semver.Version, len(raw))\nfor i, r := range raw {\n    v, err := semver.NewVersion(r)\n    if err != nil {\n        t.Errorf(\"Error parsing version: %s\", err)\n    }\n\n    vs[i] = v\n}\n\nsort.Sort(semver.Collection(vs))\n```\n\n----------------------------------------\n\nTITLE: Adding Named Connection to Local Unix Domain Socket in Shell\nDESCRIPTION: Illustrates adding a system connection named 'testing' that targets a local Podman service accessible through the Unix domain socket located at '/run/podman/podman.sock'. The `unix://` prefix specifies the connection type.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-connection-add.1.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ podman system connection add testing unix:///run/podman/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Explaining Podman --compat-volumes Option in Markdown\nDESCRIPTION: This markdown documentation explains the --compat-volumes option which restores legacy behavior for VOLUME instructions. When enabled, it ensures that directories marked as volumes can only be modified by ADD and COPY instructions, with changes from RUN instructions being reverted.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/compat-volumes.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####> This option file is used in:\n####>   podman build, farm build\n####> If file is edited, make sure the changes\n####> are applicable to all of those.\n#### **--compat-volumes**\n\nHandle directories marked using the VOLUME instruction (both in this build, and\nthose inherited from base images) such that their contents can only be modified\nby ADD and COPY instructions. Any changes made in those locations by RUN\ninstructions will be reverted. Before the introduction of this option, this\nbehavior was the default, but it is now disabled by default.\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Tilde Expansion in Buildah Push Commands\nDESCRIPTION: This snippet shows the error when using tilde (~) in Buildah push commands and demonstrates the proper way to use environment variables for path expansion.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/troubleshooting.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pull alpine\n$ sudo buildah push alpine oci:~/myalpine:latest\nlstat /home/myusername/~: no such file or directory\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Host Key to Known Hosts on Windows\nDESCRIPTION: This command adds the SSH host key for the QEMU virtual machine to the known_hosts file. It uses the IP address 127.0.0.1 and port 57561.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/qemu-remote-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nssh-keyscan -p 57561 127.0.0.1 >> %USERPROFILE%\\.ssh\\known_hosts\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata Labels in Podman Commands\nDESCRIPTION: This option allows adding key-value metadata labels to containers or pods when using Podman create, pod clone, pod create, or run commands. It's important to ensure that any changes made to this option are applicable across all these commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/label.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**--label**, **-l**=*key=value*\n```\n\n----------------------------------------\n\nTITLE: Defining Client Config and API Interface in Go\nDESCRIPTION: Client configuration struct and API interface for the pet client. The Config struct allows customization of the server endpoint and client middleware, while the API interface defines the available client methods.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-swagger/go-swagger/generator/templates/contrib/stratoscale/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\t// URL is the base URL of the upstream server\n\tURL *url.URL\n\t// Transport is an inner transport for the client\n\tTransport http.RoundTripper\n}\n\n// API is the interface of the pet client\ntype API interface {\n\t// PetCreate adds a new pet to the store\n\tPetCreate(ctx context.Context, params *PetCreateParams) (*PetCreateCreated, error)\n\t// PetDelete deletes a pet\n\tPetDelete(ctx context.Context, params *PetDeleteParams) (*PetDeleteNoContent, error)\n\t// PetGet gets pet by it s ID\n\tPetGet(ctx context.Context, params *PetGetParams) (*PetGetOK, error)\n\t// PetList lists pets\n\tPetList(ctx context.Context, params *PetListParams) (*PetListOK, error)\n\t// PetUpdate updates an existing pet\n\tPetUpdate(ctx context.Context, params *PetUpdateParams) (*PetUpdateCreated, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Using GinkgoHelper() for Test Helpers in Go\nDESCRIPTION: Introduces the `GinkgoHelper()` function, modeled after `testing.T.Helper()`. Calling `GinkgoHelper()` at the start of a function tells Ginkgo to exclude it from the code location stack trace when reporting failures, simplifying helper function creation and removing the need for manual `WithOffset` tracking. This makes composing nested helpers easier.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc helper(model Model) {\n    GinkgoHelper()\n    Expect(model).To(BeValid())\n    Expect(model.SerialNumber).To(MatchRegexp(/[a-f0-9]*/))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring IPC Namespace Options in Podman Build\nDESCRIPTION: Specifies how IPC namespaces should be handled during Podman RUN instructions. Accepts values of empty string or \"container\" for new namespace creation, \"host\" to reuse Podman's namespace, or a path to an existing IPC namespace.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/ipc.image.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--ipc=how\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Secret from Standard Input using Shell\nDESCRIPTION: Creates a Podman secret named `my_secret` using data piped directly from standard input (`stdin`), indicated by the `-` argument. The `<secret>` placeholder should be replaced with the actual secret data provided via a command like `printf` or `echo`.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-secret-create.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ printf <secret> | podman secret create my_secret -\n```\n\n----------------------------------------\n\nTITLE: Building go-sqlite3 with Additional Features in Go\nDESCRIPTION: This command shows how to build the go-sqlite3 library with additional features enabled using build tags. Multiple features can be specified as space-separated tags.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo build -tags \"icu json1 fts5 secure_delete\"\n```\n\n----------------------------------------\n\nTITLE: Running Podman Container with Custom Detach Keys\nDESCRIPTION: This command demonstrates how to run a Podman container with custom detach keys. It helps avoid conflicts between default detach keys and shell history navigation.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ podman run -ti --detach-keys ctrl-q,ctrl-q fedora sh\n```\n\n----------------------------------------\n\nTITLE: Adding Image Labels in Podman Build\nDESCRIPTION: This snippet demonstrates how to add labels to an image during the build process. Labels are key-value pairs that can be used to add metadata to the image. A special label 'io.containers.capabilities' can be used to specify required Linux capabilities for the container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/label.image.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nLABEL io.containers.capabilities=CAP1,CAP2,CAP3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key/Value Pairs from a Bolt Bucket\nDESCRIPTION: Retrieves data from a bucket using a cursor to navigate to the correct position. Returns direct references to the mmap file in read-only transactions for efficiency.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n- `Bucket.Get()` - Retrieves a key/value pair from a bucket. This uses a cursor\n  to move to the page & position of a key/value pair. During a read-only\n  transaction, the key and value data is returned as a direct reference to the\n  underlying mmap file so there's no allocation overhead. For read-write\n  transactions, this data may reference the mmap file or one of the in-memory\n  node values.\n```\n\n----------------------------------------\n\nTITLE: Running Rootful Podman with Automatic User Namespace - Bash\nDESCRIPTION: Presents the command for running Podman as root (using sudo) with automatic user namespace allocation. Useful for demonstrating mapping setup and diagnosing failures related to subuid/subgid configuration. Dependencies are sudo privileges and Podman installed. Input is the Podman command; expected output is successful container operation or error depending on host configuration.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman run --rm --userns=auto alpine echo hello\n```\n\n----------------------------------------\n\nTITLE: Podman User Namespace Exhaustion Error Output - Shell\nDESCRIPTION: Shows the actual error output when attempting to create a new container with --userns=auto fails due to lack of available user namespace IDs. Allows users to verify and recognize this specific error scenario during troubleshooting. No dependencies aside from running Podman with the corresponding commands. Input is a Podman command; output is the error message when resources are unavailable.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\nError: creating container storage: not enough unused IDs in user namespace\n```\n\n----------------------------------------\n\nTITLE: Defining '--until' Option for Podman Logs\nDESCRIPTION: Specifies the '--until' option for filtering log output in Podman. It accepts Unix timestamps, date formatted timestamps, or Go duration strings. The timestamp is used to show logs up to the specified time.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/until.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--until**=*TIMESTAMP*\n```\n\n----------------------------------------\n\nTITLE: Exit Root Shell Session\nDESCRIPTION: Exits the current shell. If the user switched to root using `sudo su -`, this command will return them to the previous user's shell (e.g., the 'core' user).\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n[root@localhost anchors]# exit\n```\n\n----------------------------------------\n\nTITLE: Podman Add Host Command Syntax\nDESCRIPTION: Command syntax for adding custom host-to-IP mappings to a container or pod's /etc/hosts file. Supports multiple semicolon-separated hostnames mapped to a single IP address.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/add-host.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--add-host=hostname[;hostname[;...]]:ip\n```\n\n----------------------------------------\n\nTITLE: Specifying Pod for Podman Container Creation and Running\nDESCRIPTION: This option allows running a container in an existing pod or creating a new pod automatically. It can be used with 'podman create' and 'podman run' commands. The pod is created automatically if the name is prefixed with 'new:'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/pod.run.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--pod**=*name*\n```\n\n----------------------------------------\n\nTITLE: API Structure Example in YAML\nDESCRIPTION: Example structure showing the main sections of the Swagger API definition file, including definitions for reusable objects and paths for API endpoints.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/docker/docker/api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  # reusable objects used in requests and responses\n\npaths:\n  # API endpoints and inline objects\n```\n\n----------------------------------------\n\nTITLE: Defining --logfile Option for Podman Build and Farm Build\nDESCRIPTION: This snippet defines the --logfile option for Podman build and farm build commands. It specifies a filename where log output will be redirected instead of being sent to standard output and standard error. The option is not supported on remote clients, including Mac and Windows (except WSL2) machines.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/logfile.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--logfile**=*filename*\n```\n\n----------------------------------------\n\nTITLE: Normalizing pflag Flag Names for Separators in Go\nDESCRIPTION: Provides an example of a flag name normalization function (`wordSepNormalizeFunc`). This function replaces hyphens (`-`) and underscores (`_`) in flag names with periods (`.`) before comparison. It is registered with a `FlagSet` using `SetNormalizeFunc`, allowing flags like `--my-flag`, `--my_flag`, and `--my.flag` to be treated as identical.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Automatically Signing Git Commits\nDESCRIPTION: Provides the Git command `git commit -s` which automatically appends the required 'Signed-off-by' line to the commit message. This uses the name and email configured in the local Git settings (`user.name` and `user.email`), simplifying the DCO sign-off process.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -s\n```\n\n----------------------------------------\n\nTITLE: Setting C Preprocessor Flags for Podman Build\nDESCRIPTION: This option allows setting additional flags for the C Preprocessor (cpp) when building containers. It's used for Containerfiles with a '.in' suffix that are preprocessed by cpp. Default flags can also be set using the BUILDAH_CPPFLAGS environment variable.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cpp-flag.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n**--cpp-flag**=*flags*\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatting Example for Manpage Footer\nDESCRIPTION: Demonstrates the proper formatting for the end of a manpage, showing that each manpage should terminate with an empty line.\nSOURCE: https://github.com/containers/podman/blob/main/docs/MANPAGE_SYNTAX.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nEvery manpage should end with an empty line.\n```\n\n----------------------------------------\n\nTITLE: Pruning Stopped Pods using Podman CLI - Shell\nDESCRIPTION: This snippet demonstrates how to execute the 'podman pod prune' command in a Unix shell to remove all stopped pods and their containers from local storage. The user invokes the command with root privileges using 'sudo', and the output lists the IDs of the removed pods. No additional dependencies are required beyond Podman itself; the command can accept options such as '--force' to alter its behavior. Input is provided via the shell, and output is a list of affected pod IDs. The command does not affect running pods unless explicitly forced.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod-prune.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo podman pod prune\n22b8813332948064b6566370088c5e0230eeaf15a58b1c5646859fd9fc364fe7\n2afb26869fe5beab979c234afb75c7506063cd4655b1a73557c9d583ff1aebe9\n49161ad2a722cf18722f0e17199a9e840703a17d1158cdeda502b6d54080f674\n5ca429f37fb83a9f54eea89e3a9102b7780a6e6ae5f132db0672da551d862c4a\n6bb06573787efb8b0675bc88ebf8361f1a56d3ac7922d1a6436d8f59ffd955f1\n```\n\n----------------------------------------\n\nTITLE: Defining Option Interface in Go\nDESCRIPTION: Definition of the Option interface used for configuration modification. The interface is sealed by using an unexported apply method.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Podman Event Streams - Bash\nDESCRIPTION: This snippet uses the 'podman events' CLI command without additional options to stream live Podman events as they happen. It relies on Podman being installed and correctly configured, and outputs timestamped event records related to containers, showing default formatting. Key dependencies are Podman runtime and a properly set events_logger (journald or file). Inputs are none, and output is a list of human-readable event occurrences; provides no filtering or formatting beyond default. Requires user privileges to access relevant events.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-events.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman events\n2019-03-02 10:33:42.312377447 -0600 CST container create 34503c192940 (image=docker.io/library/alpine:latest, name=friendly_allen)\n2019-03-02 10:33:46.958768077 -0600 CST container init 34503c192940 (image=docker.io/library/alpine:latest, name=friendly_allen)\n2019-03-02 10:33:46.973661968 -0600 CST container start 34503c192940 (image=docker.io/library/alpine:latest, name=friendly_allen)\n2019-03-02 10:33:50.833761479 -0600 CST container stop 34503c192940 (image=docker.io/library/alpine:latest, name=friendly_allen)\n2019-03-02 10:33:51.047104966 -0600 CST container cleanup 34503c192940 (image=docker.io/library/alpine:latest, name=friendly_allen)\n```\n\n----------------------------------------\n\nTITLE: Displaying Podman Dependency Structure\nDESCRIPTION: A tree representation showing the dependency hierarchy of Podman packages. This illustrates how Podman relies on catatonit, conmon, and containers-common-extra, which in turn depends on crun, netavark, and passt.\nSOURCE: https://github.com/containers/podman/blob/main/DISTRO_PACKAGE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    Podman\n    ├── Requires: catatonit\n    ├── Requires: conmon\n    └── Requires: containers-common-extra\n        ├── Requires: crun\n        ├── Requires: netavark\n        └── Requires: passt\n```\n\n----------------------------------------\n\nTITLE: Accessing Secret in Containerfile RUN Instruction\nDESCRIPTION: Demonstrates how to access a secret within a RUN instruction in a Containerfile. The secret is mounted at /run/secrets/id by default and can be read using the cat command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/secret.image.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRUN --mount=type=secret,id=mysecret cat /run/secrets/mysecret\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Backup Handler for BoltDB in Go\nDESCRIPTION: Creates an HTTP handler function that allows backing up a BoltDB database over HTTP. This implementation uses a read-only transaction to perform a hot backup without blocking other database operations.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nfunc BackupHandleFunc(w http.ResponseWriter, req *http.Request) {\n\terr := db.View(func(tx *bolt.Tx) error {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\tw.Header().Set(\"Content-Disposition\", `attachment; filename=\"my.db\"`)\n\t\tw.Header().Set(\"Content-Length\", strconv.Itoa(int(tx.Size())))\n\t\t_, err := tx.WriteTo(w)\n\t\treturn err\n\t})\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating an ECDSA SSH Key Pair for Podman Remote\nDESCRIPTION: This command uses `ssh-keygen` to create a new SSH key pair using the ECDSA algorithm (`-t ecdsa`), saving the private key to `~/.ssh/podman` and the public key to `~/.ssh/podman.pub`. This is necessary when connecting to a Podman remote host whose SSH server configuration (e.g., due to crypto-policies) no longer accepts the algorithm of the existing default key (like RSA), causing handshake failures.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_36\n\nLANGUAGE: console\nCODE:\n```\n$ ssh-keygen -t ecdsa -f ~/.ssh/podman\n```\n\n----------------------------------------\n\nTITLE: Creating Containerfile for Fedora 36 with cowsay\nDESCRIPTION: Defines a Containerfile that uses Fedora 36 as the base image, updates the system, installs cowsay, and cleans up DNF cache.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM registry.fedoraproject.org/fedora:36\nRUN dnf -y update && dnf -y install cowsay && dnf clean all\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom ID Mapping for Podman Volumes (Configuration)\nDESCRIPTION: Example configuration string for the 'idmap' option when creating Podman volumes. This string defines custom user ID (UID) and group ID (GID) mappings between the backing file system and the host. Mappings are specified as triplets (start_backing_fs_id-start_host_id-length), with multiple ranges separated by '#' and UID/GID sections separated by ';'. This allows fine-grained control over user namespace mapping for the volume.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/volume.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nidmap=uids=0-1-10#10-11-10;gids=0-100-10\n```\n\n----------------------------------------\n\nTITLE: Running a Container with Podman on Windows\nDESCRIPTION: This snippet demonstrates how to use the locally built Podman client for Windows to run a container. It executes the 'hello-world' container as an example.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\n.\\bin\\windows\\podman.exe run hello-world\n```\n\n----------------------------------------\n\nTITLE: Logrus Output with Method Field - JSON and Text Examples\nDESCRIPTION: These examples illustrate the additional 'method' field in both JSON and text logs when method caller reporting is enabled in Logrus. The JSON example shows typical log fields for a fatal event involving a penguin, while the text output provides a logfmt-style equivalent. No dependencies beyond Logrus are needed; input is log statements, and output is structured log lines with method information for debugging and tracing.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"animal\":\"penguin\",\"level\":\"fatal\",\"method\":\"github.com/sirupsen/arcticcreatures.migrate\",\"msg\":\"a penguin swims by\",\\n\"time\":\"2014-03-10 19:57:38.562543129 -0400 EDT\"}\n```\n\nLANGUAGE: text\nCODE:\n```\ntime=\"2015-03-26T01:27:38-04:00\" level=fatal method=github.com/sirupsen/arcticcreatures.migrate msg=\"a penguin swims by\" animal=penguin\n```\n\n----------------------------------------\n\nTITLE: Defining CPU Shares Option in Podman\nDESCRIPTION: Specifies the --cpu-shares option for Podman commands, allowing users to set relative CPU weight for containers. The default value is 1024, and the option affects CPU allocation when multiple containers are running CPU-intensive processes.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cpu-shares.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--cpu-shares**, **-c**=*shares*\n\nCPU shares (relative weight).\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah on RHEL 7\nDESCRIPTION: Commands to enable the Extras channel and install Buildah on RHEL 7.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo subscription-manager repos --enable=rhel-7-server-extras-rpms\nsudo yum -y install buildah\n```\n\n----------------------------------------\n\nTITLE: Change to CA Trust Anchors Directory\nDESCRIPTION: Navigates the shell's current working directory to `/etc/pki/ca-trust/source/anchors`. This specific directory is where custom CA certificates should be placed to be recognized by the `update-ca-trust` command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[root@localhost ~]# cd /etc/pki/ca-trust/source/anchors\n```\n\n----------------------------------------\n\nTITLE: Specifying Label File Option in Podman Commands\nDESCRIPTION: Defines the --label-file option for Podman commands like create, pod clone, pod create, and run. This option allows reading container labels from a specified file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/label-file.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--label-file**=*file*\n\nRead in a line-delimited file of labels.\n```\n\n----------------------------------------\n\nTITLE: Configuring Kernel Parameters via Sysctl - Shell\nDESCRIPTION: This snippet illustrates how to specify multiple kernel parameters using the Sysctl option in a Quadlet file. These parameters control specific behaviors within the container, such as disabling IPv6 and enabling temporary IPv6 addresses. No external dependencies are required other than a Quadlet-compatible environment and Podman; the key is provided as a line in a unit file. The inputs are kernel parameter assignments separated by spaces. The configuration does not support non-kernel sysctl parameters and is limited to containers that honor namespace sysctls.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nSysctl=net.ipv6.conf.all.disable_ipv6=1 net.ipv6.conf.all.use_tempaddr=1\n```\n\n----------------------------------------\n\nTITLE: Loading ContainersConf modules in Kubernetes Quadlet\nDESCRIPTION: Shows how to load containers.conf modules in a Kube unit file, equivalent to Podman's --module option.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nContainersConfModule=/etc/nvd\\.conf\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Podman Image Locating Errors\nDESCRIPTION: Explains the \"image not known\" or \"error locating pulled image\" errors in Podman commands. These errors are typically caused by timing issues between image writing and reading processes, particularly when other processes perform cleanup operations.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\n# ls Containerfile\nFROM registry.access.redhat.com/ubi8-minimal:latest\nMAINTAINER Podman Community\nUSER root\n\n# podman build .\nSTEP 1/2: FROM registry.access.redhat.com/ubi8-minimal\nTrying to pull registry.access.redhat.com/ubi8-minimal:latest...\nGetting image source signatures\nChecking if image destination supports signatures\nCopying blob a6577091999b done\nCopying config abb1ba1bce done\nWriting manifest to image destination\nStoring signatures\nError: error creating build container: error locating pulled image \"registry.access.redhat.com/ubi8-minimal:latest\" name in containers storage: registry.access.redhat.com/ubi8-minimal:latest: image not known\n```\n\n----------------------------------------\n\nTITLE: Rootful Podman User Mapping Setup Error Output - Shell\nDESCRIPTION: Displays the error message encountered when subuid and subgid mappings for the 'containers' user are missing, essential for troubleshooting mapping issues with rootful Podman. No dependencies; this output appears as a result of running the previous command with improper configuration. No input beyond the command itself; output is the error shown in terminal.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\nERRO[0000] Cannot find mappings for user \"containers\": no subuid ranges found for user \"containers\" in /etc/subuid\nError: creating container storage: not enough unused IDs in user namespace\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Environment Variable Expansion in Go\nDESCRIPTION: Illustrates how to use a shellwords.Parser with ParseEnv set to true to expand environment variables in the command.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-shellwords/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nos.Setenv(\"FOO\", \"bar\")\np := shellwords.NewParser()\np.ParseEnv = true\nargs, err := p.Parse(\"./foo $FOO\")\n// args should be [\"./foo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Ignition Configuration for Fedora CoreOS\nDESCRIPTION: JSON configuration file for Fedora CoreOS that sets up user accounts, SSH keys, system directories, files, and systemd units. This configuration prepares the VM for running Podman and exposing its API.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/qemu-remote-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"ignition\":{\"config\":{\"replace\":{\"verification\":{}}},\"proxy\":{},\"security\":{\"tls\":{}},\"timeouts\":{},\"version\":\"3.2.0\"},\"passwd\":{\"users\":[{\"name\":\"core\",\"sshAuthorizedKeys\":[\"YOURSSHKEYHERE\"],\"uid\":501},{\"name\":\"root\",\"sshAuthorizedKeys\":[\"YOURSSHKEYHERE\"]}]},\"storage\":{\"directories\":[{\"group\":{\"name\":\"core\"},\"path\":\"/home/core/.config\",\"user\":{\"name\":\"core\"},\"mode\":493},{\"group\":{\"name\":\"core\"},\"path\":\"/home/core/.config/containers\",\"user\":{\"name\":\"core\"},\"mode\":493},{\"group\":{\"name\":\"core\"},\"path\":\"/home/core/.config/systemd\",\"user\":{\"name\":\"core\"},\"mode\":493},{\"group\":{\"name\":\"core\"},\"path\":\"/home/core/.config/systemd/user\",\"user\":{\"name\":\"core\"},\"mode\":493},{\"group\":{\"name\":\"core\"},\"path\":\"/home/core/.config/systemd/user/default.target.wants\",\"user\":{\"name\":\"core\"},\"mode\":493},{\"group\":{\"name\":\"root\"},\"path\":\"/etc/containers/registries.conf.d\",\"user\":{\"name\":\"root\"},\"mode\":493},{\"group\":{\"name\":\"root\"},\"path\":\"/etc/systemd/system.conf.d\",\"user\":{\"name\":\"root\"},\"mode\":493},{\"group\":{\"name\":\"root\"},\"path\":\"/etc/environment.d\",\"user\":{\"name\":\"root\"},\"mode\":493}],\"files\":[{\"group\":{\"name\":\"core\"},\"path\":\"/home/core/.config/systemd/user/linger-example.service\",\"user\":{\"name\":\"core\"},\"contents\":{\"source\":\"data:,%5BUnit%5D%0ADescription=A%20systemd%20user%20unit%20demo%0AAfter=network-online.target%0AWants=network-online.target%20podman.socket%0A%5BService%5D%0AExecStart=%2Fusr%2Fbin%2Fsleep%20infinity%0A\",\"verification\":{}},\"mode\":484},{\"group\":{\"name\":\"core\"},\"path\":\"/home/core/.config/containers/containers.conf\",\"user\":{\"name\":\"core\"},\"contents\":{\"source\":\"data:,%5Bcontainers%5D%0Anetns=%22bridge%22%0A\",\"verification\":{}},\"mode\":484},{\"group\":{\"name\":\"root\"},\"overwrite\":true,\"path\":\"/etc/subuid\",\"user\":{\"name\":\"root\"},\"contents\":{\"source\":\"data:,core:100000:1000000\",\"verification\":{}},\"mode\":484},{\"group\":{\"name\":\"root\"},\"overwrite\":true,\"path\":\"/etc/subgid\",\"user\":{\"name\":\"root\"},\"contents\":{\"source\":\"data:,core:100000:1000000\",\"verification\":{}},\"mode\":484},{\"group\":{\"name\":\"root\"},\"path\":\"/etc/systemd/system/user@.service.d/delegate.conf\",\"user\":{\"name\":\"root\"},\"contents\":{\"source\":\"data:,%5BService%5D%0ADelegate=memory%20pids%20cpu%20io%0A\",\"verification\":{}},\"mode\":420},{\"group\":{\"name\":\"core\"},\"path\":\"/var/lib/systemd/linger/core\",\"user\":{\"name\":\"core\"},\"contents\":{\"verification\":{}},\"mode\":420},{\"group\":{\"name\":\"root\"},\"path\":\"/etc/containers/containers.conf\",\"user\":{\"name\":\"root\"},\"contents\":{\"source\":\"data:,%5Bengine%5D%0Amachine_enabled=true%0A\",\"verification\":{}},\"mode\":420},{\"group\":{\"name\":\"root\"},\"path\":\"/etc/containers/podman-machine\",\"user\":{\"name\":\"root\"},\"contents\":{\"source\":\"data:,qemu%0A\",\"verification\":{}},\"mode\":420},{\"group\":{\"name\":\"root\"},\"path\":\"/etc/containers/registries.conf.d/999-podman-machine.conf\",\"user\":{\"name\":\"root\"},\"contents\":{\"source\":\"data:,unqualified-search-registries=%5B%22docker.io%22%5D%0A\",\"verification\":{}},\"mode\":420},{\"group\":{},\"path\":\"/etc/tmpfiles.d/podman-docker.conf\",\"user\":{},\"contents\":{\"source\":\"data:,L+%20%20%2Frun%2Fdocker.sock%20%20%20-%20%20%20%20-%20%20%20%20-%20%20%20%20%20-%20%20%20%2Frun%2Fpodman%2Fpodman.sock%0A\",\"verification\":{}},\"mode\":420},{\"group\":{\"name\":\"root\"},\"path\":\"/etc/profile.d/docker-host.sh\",\"user\":{\"name\":\"root\"},\"contents\":{\"source\":\"data:,export%20DOCKER_HOST=%22unix:%2F%2F$%28podman%20info%20-f%20%22%7B%7B.Host.RemoteSocket.Path%7D%7D%22%29%22%0A\",\"verification\":{}},\"mode\":420}],\"links\":[{\"group\":{\"name\":\"core\"},\"path\":\"/home/core/.config/systemd/user/default.target.wants/linger-example.service\",\"user\":{\"name\":\"core\"},\"hard\":false,\"target\":\"/home/core/.config/systemd/user/linger-example.service\"},{\"group\":{\"name\":\"root\"},\"overwrite\":true,\"path\":\"/usr/local/bin/docker\",\"user\":{\"name\":\"root\"},\"hard\":false,\"target\":\"/usr/bin/podman\"},{\"group\":{\"name\":\"root\"},\"overwrite\":false,\"path\":\"/etc/localtime\",\"user\":{\"name\":\"root\"},\"hard\":false,\"target\":\"\\\\usr\\\\share\\\\zoneinfo\"}]},\"systemd\":{\"units\":[{\"enabled\":true,\"name\":\"podman.socket\"},{\"contents\":\"[Unit]\\nRequires=dev-virtio\\\\x2dports-vport1p1.device\\nAfter=remove-moby.service sshd.socket sshd.service\\nOnFailure=emergency.target\\nOnFailureJobMode=isolate\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nExecStart=/bin/sh -c '/usr/bin/echo Ready \\u003e/dev/vport1p1'\\n[Install]\\nRequiredBy=default.target\\n\",\"enabled\":true,\"name\":\"ready.service\"},{\"enabled\":false,\"mask\":true,\"name\":\"docker.service\"},{\"enabled\":false,\"mask\":true,\"name\":\"docker.socket\"},{\"contents\":\"[Unit]\\nDescription=Remove moby-engine\\n# Run once for the machine\\nAfter=systemd-machine-id-commit.service\\nBefore=zincati.service\\nConditionPathExists=!/var/lib/%N.stamp\\n\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nExecStart=/usr/bin/rpm-ostree override remove moby-engine\\nExecStart=/usr/bin/rpm-ostree ex apply-live --allow-replacement\\nExecStartPost=/bin/touch /var/lib/%N.stamp\\n\\n[Install]\\nWantedBy=default.target\\n\",\"enabled\":true,\"name\":\"remove-moby.service\"},{\"contents\":\"[Unit]\\nDescription=Environment setter from QEMU FW_CFG\\n[Service]\\nType=oneshot\\nRemainAfterExit=yes\\nEnvironment=FWCFGRAW=/sys/firmware/qemu_fw_cfg/by_name/opt/com.coreos/environment/raw\\nEnvironment=SYSTEMD_CONF=/etc/systemd/system.conf.d/default-env.conf\\nEnvironment=ENVD_CONF=/etc/environment.d/default-env.conf\\nEnvironment=PROFILE_CONF=/etc/profile.d/default-env.sh\\nExecStart=/usr/bin/bash -c '/usr/bin/test -f ${FWCFGRAW} \\u0026\\u0026\\\\n\\texec=/usr/bin/base64 -d ${FWCFGRAW} | sed -e \\\"s+|+ +g\\\")\\\\n\\\" \\u003e ${SYSTEMD_CONF} ||\\\\n\\techo \\\"[Manager]\\\\n#Got nothing from QEMU FW_CFG\\\\n#DefaultEnvironment=\\\\n\\\" \\u003e ${SYSTEMD_CONF}'\\nExecStart=/usr/bin/bash -c '/usr/bin/test -f ${FWCFGRAW} \\u0026\\u0026 (\\\\n\\techo \\\"#Got from QEMU FW_CFG\\\"\\u003e ${ENVD_CONF};\\\\n\\tIFS=\\\"|\\\"\\\\n;for iprxy in $(/usr/bin/base64 -d ${FWCFGRAW});\\n\\tdo\\\\n\\t\\techo \\\"$iprxy\\\" \\u003e\\u003e ${ENVD_CONF}; done ) || \\\\n\\techo \\\"#Got nothing from QEMU FW_CFG\\\"\\u003e ${ENVD_CONF}'\\nExecStart=/usr/bin/bash -c '/usr/bin/test -f ${FWCFGRAW} \\u0026\\u0026 (\\\\n\\techo \\\"#Got from QEMU FW_CFG\\\"\\u003e ${PROFILE_CONF};\\\\n\\tIFS=\\\"|\\\"\\\\n;for iprxy in $(/usr/bin/base64 -d ${FWCFGRAW});\\n\\tdo\\\\n\\t\\techo \\\"export $iprxy\\\" \\u003e\\u003e ${PROFILE_CONF}; done ) || \\\\n\\techo \\\"#Got nothing from QEMU FW_CFG\\\"\\u003e ${PROFILE_CONF}'\\nExecStartPost=/usr/bin/systemctl daemon-reload\\n[Install]\\nWantedBy=sysinit.target\\n\",\"enabled\":true,\"name\":\"envset-fwcfg.service\"}]}}}\n```\n\n----------------------------------------\n\nTITLE: Building a URL for a Named Route with Gorilla Mux in Go\nDESCRIPTION: Shows how to retrieve a named route using `r.Get(\"article\")` and then build its URL using the `URL()` method, providing key-value pairs for the route variables ('category', 'id'). The result is a `*url.URL` object.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n```go\nurl, err := r.Get(\"article\").URL(\"category\", \"technology\", \"id\", \"42\")\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for `podman system` Command (Shell)\nDESCRIPTION: Illustrates the fundamental command structure for invoking `podman system` subcommands. The user needs to replace `*subcommand*` with one of the specific actions listed in the COMMANDS table (e.g., `df`, `prune`, `info`) to perform the desired Podman system management operation. This command requires Podman to be installed and accessible in the environment.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system.1.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n**podman system** *subcommand*\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Unit for Echo Service\nDESCRIPTION: A systemd container unit file that defines an echo service container using the quadlet format. It specifies the container image, networking settings, and dependencies.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_6\n\nLANGUAGE: systemd unit\nCODE:\n```\n[Unit]\nDescription=Example echo service\nRequires=echo.socket\nAfter=echo.socket\n\n[Container]\nImage=ghcr.io/eriksjolund/socket-activate-echo\nNetwork=none\n\n[Install]\nWantedBy=default.target\n```\n\n----------------------------------------\n\nTITLE: Setting Container Image Annotations in Podman Build\nDESCRIPTION: Demonstrates usage of the --annotation flag to add custom metadata key-value pairs to container images during build. This annotation data is stored in the image metadata but will not persist if the image is later converted to Docker format.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/annotation.image.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--annotation=annotation=value\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validators in GoValidator\nDESCRIPTION: Example of how to add a custom validator to the TagMap. This allows extending the built-in validators with custom functionality using a function that returns a boolean value.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Colored Output for Podman Logs\nDESCRIPTION: This configuration option allows Podman to display container logs with different colors for improved readability. It can be used with both 'podman logs' and 'pod logs' commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/color.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--color**\n\nOutput the containers with different colors in the log.\n```\n\n----------------------------------------\n\nTITLE: Unsetting Environment Variables in Podman Containers\nDESCRIPTION: The --unsetenv option is used to remove specified environment variables from a container. This change affects the main container process, but only after the next start of the container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/unsetenv.update.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--unsetenv=env\n```\n\n----------------------------------------\n\nTITLE: Creating a BoltDB Wrapper for Mobile Applications\nDESCRIPTION: Implementation of a Go struct that wraps BoltDB for use with gomobile on mobile platforms. This provides a clean interface for initializing and accessing the database from mobile applications.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nfunc NewBoltDB(filepath string) *BoltDB {\n\tdb, err := bolt.Open(filepath+\"/demo.db\", 0600, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treturn &BoltDB{db}\n}\n\ntype BoltDB struct {\n\tdb *bolt.DB\n\t...\n}\n\nfunc (b *BoltDB) Path() string {\n\treturn b.db.Path()\n}\n\nfunc (b *BoltDB) Close() {\n\tb.db.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Jobs for Podman Build (Markdown)\nDESCRIPTION: This snippet defines the '--jobs' option for Podman build and farm build commands. It allows users to specify the number of concurrent stages that can run in parallel during the build process. The option accepts a numeric value, with special handling for 0 and values greater than 1.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/jobs.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--jobs**=*number*\n\nRun up to N concurrent stages in parallel.  If the number of jobs is greater\nthan 1, stdin is read from /dev/null.  If 0 is specified, then there is\nno limit in the number of jobs that run in parallel.\n```\n\n----------------------------------------\n\nTITLE: Testing Health Check Handler in Go\nDESCRIPTION: Unit test implementation for the health check handler, demonstrating how to test HTTP handlers using httptest package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_27\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\npackage main\n\nimport (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n)\n\nfunc TestHealthCheckHandler(t *testing.T) {\n    req, err := http.NewRequest(\"GET\", \"/health\", nil)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    rr := httptest.NewRecorder()\n    handler := http.HandlerFunc(HealthCheckHandler)\n\n    handler.ServeHTTP(rr, req)\n\n    if status := rr.Code; status != http.StatusOK {\n        t.Errorf(\"handler returned wrong status code: got %v want %v\",\n            status, http.StatusOK)\n    }\n\n    expected := `{\"alive\": true}`\n    if rr.Body.String() != expected {\n        t.Errorf(\"handler returned unexpected body: got %v want %v\",\n            rr.Body.String(), expected)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Attempts for Podman Image Pull in Quadlet\nDESCRIPTION: Specifies the number of retry attempts for image pulls when HTTP errors occur. This is equivalent to the '--retry' option in Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\nRetry=\n```\n\n----------------------------------------\n\nTITLE: Importing Volume Content from stdin in Podman\nDESCRIPTION: Shows how to pipe compressed tarball content into a Podman volume using stdin (indicated by the dash '-'). This allows importing from a compressed source without creating an intermediate file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-import.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gunzip -c hello.tar.gz | podman volume import myvol -\n```\n\n----------------------------------------\n\nTITLE: Specifying Image Architecture Variant with Podman --variant (Bash)\nDESCRIPTION: This command-line option, used with `podman create`, `pull`, and `run`, allows specifying an architecture variant (e.g., `arm/v5`, `arm/v7`) for a container image, overriding the default. Replace `VARIANT` with the desired architecture variant string. This is particularly useful for images supporting multiple architecture variants like different ARM versions.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/variant.container.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--variant=VARIANT\n```\n\n----------------------------------------\n\nTITLE: Running Podman System Generator in Dry Run Mode\nDESCRIPTION: Command to view generated Systemd files and error messages from Podman Quadlet without applying changes. The {--user} parameter is optional for user-specific configurations.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/usr/lib/systemd/system-generators/podman-system-generator {--user} --dryrun\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain and Subdomain Matching in Gorilla Mux\nDESCRIPTION: This example shows how to restrict routes to specific domains or subdomains using Gorilla Mux. It demonstrates both static and dynamic subdomain matching.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\n// Only matches if domain is \"www.example.com\".\nr.Host(\"www.example.com\")\n// Matches a dynamic subdomain.\nr.Host(\"{subdomain:[a-z]+}.example.com\")\n```\n\n----------------------------------------\n\nTITLE: Debugging commands for investigating test containers\nDESCRIPTION: A series of commands to investigate the test environment during a COMPOSE_WAIT pause, including listing temporary directories and examining container state with podman commands.\nSOURCE: https://github.com/containers/podman/blob/main/test/compose/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# ls -lt /var/tmp/\n# X=/var/tmp/test-compose.tmp.XXXXXX <--- most recent results of above\n# podman --root $X/root --runroot $X/runroot ps -a\n# podman --root $X/root --runroot $X/runroot logs -l\n```\n\n----------------------------------------\n\nTITLE: Using --cap-drop Flag in Podman Commands\nDESCRIPTION: The --cap-drop flag allows dropping specific Linux capabilities when creating or running containers with Podman. This flag helps restrict privileges of containers for improved security.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cap-drop.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--cap-drop=*capability*\n```\n\n----------------------------------------\n\nTITLE: Printing Standard Colored Output - fatih/color - Go\nDESCRIPTION: Shows the use of helper functions to print text in various colors directly to the terminal using fatih/color. These functions automatically append newlines and format strings when required. No external dependencies are needed beyond importing fatih/color.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Print with default helper functions\ncolor.Cyan(\"Prints text in cyan.\")\n\n// A newline will be appended automatically\ncolor.Blue(\"Prints %s in blue.\", \"text\")\n\n// These are using the default foreground colors\ncolor.Red(\"We have red\")\ncolor.Magenta(\"And many others ..\")\n\n```\n\n----------------------------------------\n\nTITLE: Setting AppArmor Profile for Podman Containers/Pods\nDESCRIPTION: These options control AppArmor confinement for Podman containers or pods. You can either turn off AppArmor confinement or set an alternate profile.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/security-opt.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt apparmor=unconfined\n```\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt apparmor=alternate-profile\n```\n\n----------------------------------------\n\nTITLE: Implementing QMP Event Monitor in Go\nDESCRIPTION: Shows how to set up an event monitoring channel to receive and process QMP events from a QEMU instance.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/digitalocean/go-qemu/qmp/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmonitor.Connect()\ndefer monitor.Disconnect()\n\nstream, _ := monitor.Events()\nfor e := range stream {\n\tlog.Printf(\"EVENT: %s\", e.Event)\n}\n```\n\n----------------------------------------\n\nTITLE: Unmasking Paths in Podman Containers/Pods\nDESCRIPTION: This option allows unmasking specific paths or all masked paths inside the container or pod. It can make previously masked or read-only paths accessible.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/security-opt.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt unmask=ALL\n```\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt unmask=/path/1:/path/2\n```\n\n----------------------------------------\n\nTITLE: Initializing a Podman Machine\nDESCRIPTION: Command to initialize a new Podman machine using the locally built podman.exe binary, which creates a virtual machine for running containers.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_19\n\nLANGUAGE: pwsh\nCODE:\n```\n.\\bin\\windows\\podman.exe machine init\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Messages for Validators in Go\nDESCRIPTION: This Go struct definition shows how to specify a custom error message for a validation rule using `govalidator`. In the `FirstName` field's tag, the `required` validator is followed by `~` and the custom message \"First name is blank\". If the `required` validation fails for this field, this custom message will be included in the error.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype Ticket struct {\n  Id        int64     `json:\"id\"`\n  FirstName string    `json:\"firstname\" valid:\"required~First name is blank\"`\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Connections to a Podman Farm - Shell\nDESCRIPTION: Demonstrates how to use the 'podman farm update' CLI to add multiple connections (e.g., 'f35' and 'f38') to an existing farm named 'farm1'. No external dependencies are required beyond the Podman CLI itself. The '--add' option followed by a comma-separated list specifies the connections to add; 'farm1' is the target farm.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-farm-update.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman farm update --add f35,f38 farm1\n```\n\n----------------------------------------\n\nTITLE: Querying OCI Runtime with Podman - Bash\nDESCRIPTION: This Bash snippet retrieves the currently configured OCI runtime used by Podman by formatting the output of 'podman info'. Use this to verify the runtime ('crun' or otherwise) for performance comparisons or validation of setup. Requires Podman installed and proper user privileges.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman info --format={{.Host.OCIRuntime.Name}}\\ncrun\n```\n\n----------------------------------------\n\nTITLE: Sorting Versions in Go\nDESCRIPTION: Illustrates how to create a collection of Version objects from string representations and sort them using the sort package.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nversionsRaw := []string{\"1.1\", \"0.7.1\", \"1.4-beta\", \"1.4\", \"2\"}\nversions := make([]*version.Version, len(versionsRaw))\nfor i, raw := range versionsRaw {\n    v, _ := version.NewVersion(raw)\n    versions[i] = v\n}\n\n// After this, the versions are properly sorted\nsort.Sort(version.Collection(versions))\n```\n\n----------------------------------------\n\nTITLE: Unmounting an Image by ID Using Podman CLI - Shell\nDESCRIPTION: Demonstrates how to unmount a single image's root filesystem by specifying its image ID using the 'podman image unmount' command. There are no prerequisites beyond having Podman installed and the target image mounted. The parameter 'imageID' refers to the unique identifier of the image; upon execution, the command detaches the root filesystem of that image if it is not in use or with --force if forced.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-unmount.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman image unmount imageID\n```\n\n----------------------------------------\n\nTITLE: Decompressing an xz File using the gxz Tool\nDESCRIPTION: This shell command shows how to use the `gxz` tool to decompress a file. The `-d` flag signals decompression, and it operates on the specified 'bigfile.xz', restoring the original file.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/ulikunitz/xz/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ gxz -d bigfile.xz\n```\n\n----------------------------------------\n\nTITLE: Configuring Stop Timeout for Podman Containers\nDESCRIPTION: This configuration option sets the timeout in seconds for stopping a Podman container. The default value is 10 seconds. For remote connections, the local containers.conf file is used for default settings.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/stop-timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--stop-timeout**=*seconds*\n\nTimeout to stop a container. Default is **10**.\nRemote connections use local containers.conf for defaults.\n```\n\n----------------------------------------\n\nTITLE: Removing All Podman Farms via Command Line\nDESCRIPTION: This command-line example shows how to use the alias `podman farm rm` along with the `--all` (or `-a`) option to delete all configured Podman farms. This is a bulk operation and requires the Podman runtime. No farm name is specified when using the `--all` flag.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-farm-remove.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman farm rm --all\n```\n\n----------------------------------------\n\nTITLE: Configuring Unsetlabel Option for Podman Build\nDESCRIPTION: This configuration option allows users to unset an image label, preventing it from being inherited from the base image during Podman build or farm build processes. It is specified using the --unsetlabel flag followed by the label name.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/unsetlabel.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####> This option file is used in:\n####>   podman build, farm build\n####> If file is edited, make sure the changes\n####> are applicable to all of those.\n#### **--unsetlabel**=*label*\n\nUnset the image label, causing the label not to be inherited from the base image.\n```\n\n----------------------------------------\n\nTITLE: Extracting QEMU Fedora CoreOS Image with xz\nDESCRIPTION: Command to decompress the Fedora CoreOS QEMU image file using the xz utility. This extracts the compressed .qcow2 image file to be used with QEMU.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/qemu-remote-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxz -d fedora-coreos-37.20221127.2.0-qemu.x86_64.qcow2.xz\n```\n\n----------------------------------------\n\nTITLE: Accessing Error List via Type Assertion with go-multierror (Go)\nDESCRIPTION: Explains how to use a type assertion to detect if an error value is a *multierror.Error and, if so, access the underlying Errors slice. This is useful when working with APIs that may return multierror values. Assumes something() is a function that returns an error. No import is required beyond multierror itself; use type assertion to extract aggregated errors for inspection, logging, or handling specific cases.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Podman Image Pull Policy Options\nDESCRIPTION: Specifies the available options for the --pull flag in Podman create and run commands. It defines four policies: always, missing, never, and newer, each with specific behaviors for image pulling.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/pull.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--pull**=*policy*\n\nPull image policy. The default is **missing**.\n\n- **always**: Always pull the image and throw an error if the pull fails.\n- **missing**: Pull the image only when the image is not in the local containers storage.  Throw an error if no image is found and the pull fails.\n- **never**: Never pull the image but use the one from the local containers storage.  Throw an error if no image is found.\n- **newer**: Pull if the image on the registry is newer than the one in the local containers storage.  An image is considered to be newer when the digests are different.  Comparing the time stamps is prone to errors.  Pull errors are suppressed if a local image was found.\n```\n\n----------------------------------------\n\nTITLE: Volume Mounting with WSL Linux Path (PowerShell)\nDESCRIPTION: Illustrates mounting a directory from within the WSL distribution's filesystem (`/var/myfolder`) into a container at `/myfolder`. This command is run from the Windows PowerShell prompt but references a path inside the Podman machine's Linux environment.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_25\n\nLANGUAGE: powershell\nCODE:\n```\npodman run --rm -v /var/myfolder:/myfolder ubi-micro ls /myfolder\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Network Container Configuration in Podman\nDESCRIPTION: Command to inspect a container named 'two_networks_con1_1' and verify it has exactly two networks configured. The command uses Podman's inspect feature with a Go template to count the networks attached to the container.\nSOURCE: https://github.com/containers/podman/blob/main/test/compose/two_networks/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman container inspect two_networks_con1_1 --format '{{len .NetworkSettings.Networks}}'\n```\n\n----------------------------------------\n\nTITLE: Running Blackfriday Markdown Parser - Go\nDESCRIPTION: Demonstrates the simplest way to apply Markdown parsing using Blackfriday's default settings in Go. Requires the 'github.com/russross/blackfriday/v2' package. Takes the input as a byte slice ('input'), parses, and renders it using the most widely supported Markdown extensions, returning the result as 'output'. The returned value is a byte slice containing rendered HTML.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input)\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah on Arch Linux\nDESCRIPTION: Command to install Buildah on Arch Linux using the pacman package manager.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S buildah\n```\n\n----------------------------------------\n\nTITLE: Defining an Integer Flag Pointer with pflag in Go\nDESCRIPTION: Shows how to define an integer flag named `flagname` using `flag.Int()`. This function returns a pointer (`*int`) to the flag's value. The function takes the flag name, a default value (1234), and a help message as arguments.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Forwarding Contained Command Exit Code\nDESCRIPTION: Demonstrates that `podman machine ssh` forwards the exit code of the command executed within the VM. In this case, `/bin/sh -c 'exit 3'` exits with code 3, and `podman machine ssh` also returns 3.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-ssh.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine ssh /bin/sh -c 'exit 3'; echo $?\n3\n```\n\n----------------------------------------\n\nTITLE: Manual WSL Installation Command in PowerShell - PowerShell\nDESCRIPTION: Executes a manual installation or repair of Windows Subsystem for Linux using the 'wsl --install' command. Used to recover a failed WSL auto-install scenario. No additional parameters are needed but may require administrative permissions.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_38\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --install\n```\n\n----------------------------------------\n\nTITLE: Example Podman Service URL (TCP Connection - IP Address)\nDESCRIPTION: An example URL string specifying an unencrypted TCP connection to a Podman service listening on the loopback IP address 127.0.0.1 at port 34451.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\ntcp://127.0.0.1:34451\n```\n\n----------------------------------------\n\nTITLE: Configuring Infra Container Name for Podman Pods in Markdown\nDESCRIPTION: This snippet defines the '--infra-name' option for Podman pod commands. It allows users to specify a custom name for the pod's infrastructure container. This option is applicable to 'podman pod clone' and 'podman pod create' commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/infra-name.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--infra-name**=*name*\n\nThe name that is used for the pod's infra container.\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Volume Handling in Podman YAML\nDESCRIPTION: This YAML configuration snippet defines the --image-volume option for Podman. It allows users to specify how builtin image volumes should be handled when creating or running containers. The default value is 'bind', but 'tmpfs' and 'ignore' are also available options.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/image-volume.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#### **--image-volume**=**bind** | *tmpfs* | *ignore*\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Metrics with httpsnoop in Go\nDESCRIPTION: Example showing how to wrap an HTTP handler with httpsnoop to log metrics for every request. Captures response code, duration, and bytes written while maintaining compatibility with all ResponseWriter interfaces.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/felixge/httpsnoop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: Mapping UID for User Without Subordinate UIDs in Podman\nDESCRIPTION: This command shows how to use --uidmap to map the normal UID of a user to a container UID when the user doesn't have any subordinate UIDs configured in /etc/subuid.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/uidmap.container.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman <<subcommand>> --uidmap $container_uid:0:1 --user $container_uid ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows WSL for Podman machine tests\nDESCRIPTION: PowerShell commands to set up and run Podman machine tests on Windows using WSL (Windows Subsystem for Linux). Includes building components and setting environment variables.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/machine/e2e/README.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n.\\winmake.ps1 podman-remote && .\\winmake.ps1 win-gvproxy\n$env:CONTAINERS_HELPER_BINARY_DIR=\"$pwd\\bin\\windows\"\n$env:CONTAINERS_MACHINE_PROVIDER=\"wsl\"\n.\\winmake localmachine\n```\n\n----------------------------------------\n\nTITLE: Beginning a Transaction in Bolt Database\nDESCRIPTION: Starts a read-only or read-write transaction based on the writable argument. Only one read-write transaction can exist at a time.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n- `DB.Begin()` - Starts a read-only or read-write transaction depending on the\n  value of the `writable` argument. This requires briefly obtaining the \"meta\"\n  lock to keep track of open transactions. Only one read-write transaction can\n  exist at a time so the \"rwlock\" is acquired during the life of a read-write\n  transaction.\n```\n\n----------------------------------------\n\nTITLE: Standard Middleware Function Type Definition in Go\nDESCRIPTION: Defines the standard Go type `MiddlewareFunc` used for HTTP middleware, which is a function that takes an `http.Handler` and returns another `http.Handler`. This pattern is commonly used, including by `gorilla/mux`.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype MiddlewareFunc func(http.Handler) http.Handler\n```\n```\n\n----------------------------------------\n\nTITLE: Image Mount with Read-write Option\nDESCRIPTION: Mount a container image with read-write permissions\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mount.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntype=image,source=fedora,destination=/fedora-image,rw=true\n```\n\n----------------------------------------\n\nTITLE: Making a Simple GET Request with go-retryablehttp in Go\nDESCRIPTION: Demonstrates a basic GET request using the `retryablehttp.Get` function. This function automatically handles retries with exponential backoff for transient errors (like connection errors) or 5xx server responses (excluding 501). The code attempts to retrieve the resource at '/foo' and panics if a persistent error occurs after all retry attempts.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nresp, err := retryablehttp.Get(\"/foo\")\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying GID Mapping for Podman Containers\nDESCRIPTION: The --userns-gid-map option allows direct specification of GID mappings for container filesystem ownership. It overrides the remap-gids setting in /etc/containers/storage.conf and can be used in conjunction with other user namespace options.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/userns-gid-map.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--userns-gid-map=mapping\n```\n\n----------------------------------------\n\nTITLE: Segmenting Grapheme Clusters Without Allocating Graphemes Object - Go\nDESCRIPTION: Here, the StepString function is used to iterate through grapheme clusters in a string without creating a Graphemes object. It manually manages iteration state and boundaries. Each grapheme cluster (as a substring) is printed as a slice of runes in hexadecimal. Needs uniseg for StepString, initializes state to -1, and processes the string to completion.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nstr := \"🇩🇪🏳️‍🌈\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, _, state = uniseg.StepString(str, state)\n\tfmt.Printf(\"%x \", []rune(c))\n}\n// [1f1e9 1f1ea] [1f3f3 fe0f 200d 1f308]\n```\n\n----------------------------------------\n\nTITLE: Setting RDT Class for Podman Containers\nDESCRIPTION: The --rdt-class option sets the class of service (CLOS or COS) for a container using Intel's Cache Allocation Technology. It requires root privileges and a pre-configured COS in the resctrl kernel driver. This feature is only supported with the runc runtime.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/rdt-class.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--rdt-class=intel-rdt-class-of-service\n```\n\n----------------------------------------\n\nTITLE: Using Format Option with Podman Volume Inspect\nDESCRIPTION: This example shows how to use the --format option with a Go template to customize the output of podman volume inspect. The command extracts and displays only the Driver and Scope fields of the volume 'myvol'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-inspect.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume inspect --format \"{{.Driver}} {{.Scope}}\" myvol\nlocal local\n```\n\n----------------------------------------\n\nTITLE: Demonstrating podman unshare Exit Code 127 (Command Not Found)\nDESCRIPTION: This shell command shows exit code 127 for `podman unshare`. This happens when the contained command specified cannot be found in the system's PATH (e.g., `foo`). The `echo $?` command prints the exit code.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-unshare.1.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ podman unshare foo; echo $?\nError: fork/exec /usr/bin/bogus: no such file or directory\n127\n```\n\n----------------------------------------\n\nTITLE: Implementing Digest Methods for xxHash in Go\nDESCRIPTION: This snippet defines the key methods of the Digest type, which implements the hash.Hash64 interface. It includes methods for writing bytes or strings and computing the hash.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Cleaning Multiple Containers with Podman CLI - Shell\nDESCRIPTION: Shows how to use 'podman container cleanup' to clean multiple specified containers by providing their names or IDs. This example cleans mountpoints and network settings for 'mywebserver', 'myflaskserver', and a container with ID '860a4b23'. This pattern is useful for batch operations and requires Podman installed and running. Outputs cleanup results for each specified container; does not delete the containers without extra flags.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-cleanup.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman container cleanup mywebserver myflaskserver 860a4b23\n```\n\n----------------------------------------\n\nTITLE: Chaining Sprig Functions in Go Templates\nDESCRIPTION: This snippet shows an example of using Sprig functions within a Go template. It demonstrates chaining functions using the pipe (`|`) operator: the string \"hello!\" is passed to the `upper` function, and its result is then passed to the `repeat` function with an argument of 5.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/sprig/v3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\n{{ \"hello!\" | upper | repeat 5 }}\n```\n\n----------------------------------------\n\nTITLE: Setting Container OS in Podman Commands\nDESCRIPTION: The --os flag allows specifying a custom operating system for container images instead of using the host OS. This setting persists for subsequent lookups of the same image in local storage. Commonly used when working with Windows containers on non-Windows hosts.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/os.pull.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--os=windows\n```\n\n----------------------------------------\n\nTITLE: Disabling SELinux Separation for a Podman Container in Console\nDESCRIPTION: This command provides an alternative way to handle volume permissions, particularly when dealing with system directories. It uses the `--security-opt label=disable` option to disable SELinux label separation for the container, allowing it to access the mounted volume (`~:/home/user`) without requiring relabeling. This should be used cautiously.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ podman run --security-opt label=disable -v ~:/home/user fedora touch /home/user/file\n```\n\n----------------------------------------\n\nTITLE: Checking for a Non-Existent Podman Container (Shell)\nDESCRIPTION: This example uses `podman container exists` to check if a container named 'webbackend' exists. The `echo $?` command reveals an exit code of `1`, signifying that the container was not found in the local storage.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-exists.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman container exists webbackend\n$ echo $?\n1\n```\n\n----------------------------------------\n\nTITLE: Setting up Linux QEMU for Podman machine tests\nDESCRIPTION: Command to build and run Podman machine tests on Linux using QEMU virtualization.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/machine/e2e/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake localmachine\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variable Secret in Podman\nDESCRIPTION: This snippet illustrates how to create a secret as an environment variable named ENVSEC when creating or running a Podman container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/secret.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--secret mysecret,type=env,target=ENVSEC\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Option for Podman Logs in Markdown\nDESCRIPTION: This snippet defines the '--timestamps' or '-t' option for Podman logs and pod logs commands. When used, this flag enables the display of timestamps in log outputs. By default, timestamps are not shown.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/timestamps.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--timestamps**, **-t**\n\nShow timestamps in the log outputs.  The default is false\n```\n\n----------------------------------------\n\nTITLE: Generating a ULID Example using oklog/ulid - Go\nDESCRIPTION: Demonstrates how to generate and print a ULID in Go using the oklog/ulid library. The code shows dependency requirements for 'ulid', 'rand', 'time', and 'fmt' packages. It creates a ULID object using a specific timestamp and a monotonic entropy source. Key parameters include a 'time.Time' object for timestamp and a secure random entropy source, with output as a printed ULID string. Ensure to use a safe entropy source to avoid race conditions, as noted in the surrounding documentation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/oklog/ulid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ExampleULID() {\n\tt := time.Unix(1000000, 0)\n\tentropy := ulid.Monotonic(rand.New(rand.NewSource(t.UnixNano())), 0)\n\tfmt.Println(ulid.MustNew(ulid.Timestamp(t), entropy))\n\t// Output: 0000XSNJG0MQJHBF4QX1EFD6Y3\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Print Functions (PrintFunc) - fatih/color - Go\nDESCRIPTION: Shows how to define and use PrintFunc/PrintfFunc/PrintlnFunc for creating specialized color print functions. These closures can be reused for consistent formatting and can be combined with formatting verbs. Dependencies include fatih/color and relevant attribute constants.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Create a custom print function for convenience\nred := color.New(color.FgRed).PrintfFunc()\nred(\"Warning\")\nred(\"Error: %s\", err)\n\n// Mix up multiple attributes\nnotice := color.New(color.Bold, color.FgGreen).PrintlnFunc()\nnotice(\"Don't forget this...\")\n\n```\n\n----------------------------------------\n\nTITLE: Type-Based Validators in GoValidator\nDESCRIPTION: Validators that can be applied to check the type of a value. This section shows validators that operate on the type of a value rather than its content.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n\"type(type)\": IsType,\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Directory for Podman Image Pull in Quadlet\nDESCRIPTION: Specifies the directory containing certificates (*.crt, *.cert, *.key) to be used when connecting to the registry. This is equivalent to the '--cert-dir' option in Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_41\n\nLANGUAGE: ini\nCODE:\n```\nCertDir=\n```\n\n----------------------------------------\n\nTITLE: Pruning Containers by Age/Duration with Podman - Shell Command Example\nDESCRIPTION: This shell command shows how to prune stopped containers created before a certain duration using the --filter until=\"10m\" option with podman. The command asks for user confirmation before deletion and then outputs the container IDs of all containers removed that satisfy the age condition. Podman must be installed and running for this command to be effective. The user can use various duration strings (e.g., 10m, 1h30m) for selective pruning.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-prune.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman container prune --filter until=\\\"10m\\\"\nWARNING! This will remove all stopped containers.\nAre you sure you want to continue? [y/N] y\n3d366295e33d8cc612c4d873199bacadd55088d90d17dcafaa9a2d317ad50b4e\n```\n\n----------------------------------------\n\nTITLE: Pruning Stopped Containers Without Confirmation - Podman Shell Command Example\nDESCRIPTION: This shell snippet shows the use of the podman container prune command with the -f (force) option, skipping the interactive confirmation before removing stopped containers. Only the resulting list of removed container IDs is outputted. The user must have podman installed. The removal is executed without further checks, so users should ensure they intend to fully and permanently delete stopped containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-prune.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman container prune -f\n878392adf2e6c5c9bb1fc19b69d37d2e98c8abf9d539c0bce4b15b46bbcce471\n37664467fbe3618bf9479c34393ac29c02696675addf1750f9e346581636cde7\ned0c6468b8e1cb641b4621d1fe30cb477e1fefc5c0bceb66feaf2f7cb50e5962\n6ac6c8f0067b7a4682e6b8e18902665b57d1a0e07e885d9abcd382232a543ccd\nfff1c5b6c3631746055ec40598ce8ecaa4b82aef122f9e3a85b03b55c0d06c23\n602d343cd47e7cb3dfc808282a9900a3e4555747787ec6723bb68cedab8384d5\n```\n\n----------------------------------------\n\nTITLE: Running Specific Git Validation Rules\nDESCRIPTION: Example of running specific validation rules (DCO and short-subject) on a Git repository.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/vbatts/git-validation/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvbatts@valse ~/src/vb/git-validation (master) $ git-validation -run DCO,short-subject\n * b243ca4 \"README: adding install and usage\" ... PASS\n * d614ccf \"*: run tests in a runner\" ... PASS\n * b9413c6 \"shortsubject: add a subject length check\" ... PASS\n * 5e74abd \"*: comments and golint\" ... PASS\n * 07a982f \"git: add verbose output of the commands run\" ... PASS\n * 03bda4b \"main: add filtering of rules to run\" ... PASS\n * c10ba9c \"Initial commit\" ... PASS\n```\n\n----------------------------------------\n\nTITLE: Specifying Container Requirements in Podman\nDESCRIPTION: The --requires option allows specifying one or more dependency containers that must be started before the current container. Dependencies can be specified by name or ID, separated by commas.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/requires.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--requires**=*container*\n```\n\n----------------------------------------\n\nTITLE: Mounting Configuration Example in Podman\nDESCRIPTION: Example of mounts.conf file content showing how to mount RHEL secrets into containers at /run/secrets.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncat /usr/share/containers/mounts.conf\n/usr/share/rhel/secrets:/run/secrets\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Attempts for Podman Image Operations\nDESCRIPTION: Sets the number of retry attempts for pulling or pushing images between the registry and local storage in case of failure. The default value is 3 attempts.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/retry.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#### **--retry**=*attempts*\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Rootless Network Configuration\nDESCRIPTION: Exports the in-memory default network configuration for rootless Podman to a JSON file for customization. This creates a network configuration file in the user's local storage directory.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman network inspect podman | jq .[] > ~/.local/share/containers/storage/networks/podman.json\n```\n\n----------------------------------------\n\nTITLE: Deprecating a pflag Flag in Go\nDESCRIPTION: Shows how to mark a flag as deprecated using `flags.MarkDeprecated()`. This requires the flag name (\"badflag\") and a usage message explaining the deprecation and suggesting an alternative. Deprecated flags are hidden from help text and trigger the usage message when used.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// deprecate a flag by specifying its name and a usage message\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n```\n\n----------------------------------------\n\nTITLE: Podman Command Syntax with Global Options (Shell)\nDESCRIPTION: Illustrates the general syntax for Podman commands, showing that global options should precede the specific Podman command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npodman [GLOBAL OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Output of Curl Test (Text)\nDESCRIPTION: Shows the successful HTTP response (StatusCode 200) and content (`<html><body><h1>It works!</h1></body></html>`) received from the `httpd` container via the forwarded port, confirming the setup.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nStatusCode : 200\nStatusDescription : OK\nContent : <html><body><h1>It works!</h1></body></html>\n```\n\n----------------------------------------\n\nTITLE: Configuring UTS Namespace Mode for Podman Pods\nDESCRIPTION: The --uts option allows setting the UTS namespace mode for a Podman pod. It supports three values: 'host' to use the host's UTS namespace, 'private' to create a new namespace (default), and 'ns:[path]' to use an existing UTS namespace.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/uts.pod.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--uts**=*mode*\n\nSet the UTS namespace mode for the pod. The following values are supported:\n\n- **host**: use the host's UTS namespace inside the pod.\n- **private**: create a new namespace for the pod (default).\n- **ns:[path]**: run the pod in the given existing UTS namespace.\n```\n\n----------------------------------------\n\nTITLE: Compiling go-sqlite3 for ARMv7 Linux using Bash\nDESCRIPTION: This command compiles the `go-sqlite3` package for a specific ARM architecture (ARMv7 on Linux). It sets environment variables `CC` and `CXX` to specify the ARM cross-compiler toolchain (`arm-linux-gnueabihf-gcc` and `arm-linux-gnueabihf-g++`), enables CGO, and sets the target OS (`GOOS=linux`), architecture (`GOARCH=arm`), and ARM version (`GOARM=7`) for the Go compiler. The `-v` flag provides verbose output.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ \\\n    CGO_ENABLED=1 GOOS=linux GOARCH=arm GOARM=7 \\\n    go build -v \n```\n\n----------------------------------------\n\nTITLE: Validating URLs in Go\nDESCRIPTION: Example showing how to use the IsURL function to validate a URL string. This function checks if the provided string is a valid URL format.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsURL(`http://user@pass:domain.com/path/page`))\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Metrics Capture with httpsnoop in Go\nDESCRIPTION: Example showing how to wrap an HTTP handler with httpsnoop to capture and log metrics for each request. The code demonstrates capturing method, URL, status code, duration and bytes written.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/felixge/httpsnoop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: Configuring UID Mapping for Podman Pods\nDESCRIPTION: The --uidmap option allows running all containers in a pod within a new user namespace using a specified UID mapping. It can be used multiple times to map different ranges and conflicts with --userns and --subuidname options.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/uidmap.pod.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--uidmap=container_uid:from_uid:amount\n```\n\n----------------------------------------\n\nTITLE: Docker Client with TLS Configuration\nDESCRIPTION: Shows how to create a Docker client with TLS authentication by specifying endpoint and certificate paths explicitly.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/fsouza/go-dockerclient/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tdocker \"github.com/fsouza/go-dockerclient\"\n)\n\nfunc main() {\n\tconst endpoint = \"tcp://[ip]:[port]\"\n\tpath := os.Getenv(\"DOCKER_CERT_PATH\")\n\tca := fmt.Sprintf(\"%s/ca.pem\", path)\n\tcert := fmt.Sprintf(\"%s/cert.pem\", path)\n\tkey := fmt.Sprintf(\"%s/key.pem\", path)\n\tclient, _ := docker.NewTLSClient(endpoint, cert, key, ca)\n\t// use client\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Configuration in Key/Value Store with Crypt\nDESCRIPTION: Shows how to use the crypt command-line tool to store configuration in a key/value store.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/bketelsen/crypt/bin/crypt\n$ crypt set -plaintext /config/hugo.json /Users/hugo/settings/config.json\n```\n\n----------------------------------------\n\nTITLE: Debug Build Command for Podman\nDESCRIPTION: Command to build Podman with debug symbols and without optimizations for source debugging.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmake all BUILDDEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Appending Multiple Errors with go-multierror in Go\nDESCRIPTION: Demonstrates how to use the multierror.Append function to accumulate errors returned from consecutive function calls, storing them in a single error variable. The pattern is flexible: the result variable can initially be nil, an instance of multierror.Error, or any error type. The snippet requires importing github.com/hashicorp/go-multierror and assumes step1 and step2 are user-defined functions returning errors. Pass each non-nil error to multierror.Append and return the aggregated error at the end.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n\n```\n\n----------------------------------------\n\nTITLE: Setting Credentials for Podman Image Pull in Quadlet\nDESCRIPTION: Specifies the username and optional password for authentication with the registry. This follows the format '[username[:password]]' and is equivalent to the '--creds' option in Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\nCreds=\n```\n\n----------------------------------------\n\nTITLE: List of Built-in Type Validators in GoValidator\nDESCRIPTION: This snippet lists the `type` validator tag available in `govalidator`. This validator accepts a type name as a parameter and checks if the field's value matches the specified type. It can be used for any data type.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n```go\n\"type(type)\": IsType,\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Port Publishing Option in Podman\nDESCRIPTION: This snippet defines the syntax for the --publish (-p) option in Podman. It allows specifying the host IP, host port, container port, and protocol for port mapping.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/publish.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**--publish**, **-p**=*[[ip:][hostPort]:]containerPort[/protocol]*\n```\n\n----------------------------------------\n\nTITLE: Managing Goroutines with concurrent.Executor in Go\nDESCRIPTION: Illustrates creating an `UnboundedExecutor` using `concurrent.NewUnboundedExecutor()`, launching a goroutine via `executor.Go()`. The launched goroutine takes a `context.Context` for cancellation handling (`<-ctx.Done()`) and performs periodic work. The example shows how to stop the executor and wait for its goroutines to finish using `executor.StopAndWaitForever()`. This pattern allows for explicit ownership, cancellation, and panic handling of goroutines.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexecutor := concurrent.NewUnboundedExecutor()\nexecutor.Go(func(ctx context.Context) {\n    everyMillisecond := time.NewTicker(time.Millisecond)\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"goroutine exited\")\n            return\n        case <-everyMillisecond.C:\n            // do something\n        }\n    }\n})\ntime.Sleep(time.Second)\nexecutor.StopAndWaitForever()\nfmt.Println(\"executor stopped\")\n```\n\n----------------------------------------\n\nTITLE: Idmap Option for User Namespace Mapping in Podman\nDESCRIPTION: The idmap option creates an idmapped mount to the target user namespace in the container. It supports custom mappings that can differ from the container's user namespace, specified in a format like uids=0-1-10#10-11-10;gids=0-100-10.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/rootfs.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nidmap=uids=0-1-10#10-11-10;gids=0-100-10\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus Environment-specific Formatting in Go\nDESCRIPTION: This snippet shows how to configure different formatters based on the environment. It sets JSON formatting for production environments and text formatting for development environments.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // do something here to set environment depending on an environment variable\n  // or command-line flag\n  if Environment == \"production\" {\n    log.SetFormatter(&log.JSONFormatter{})\n  } else {\n    // The TextFormatter is default, you don't actually have to do this.\n    log.SetFormatter(&log.TextFormatter{})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcibly Removing a Podman Machine (Shell)\nDESCRIPTION: Shows how to remove a Podman virtual machine named 'test1' using the `-f` (or `--force`) option. This bypasses the confirmation prompt and immediately deletes the VM and its associated files (unless `--save-ignition` or `--save-image` are also used), even if the VM is currently running.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-rm.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine rm -f test1\n$\n```\n\n----------------------------------------\n\nTITLE: Illustrating Podman Build Failure due to Missing Image in Console\nDESCRIPTION: This command shows a typical error encountered during `podman build` when the specified base image ('alpine' in this case) cannot be found. This often points to issues with registry configuration, specifically the `unqualified-search-registries` setting in `/etc/containers/registries.conf`.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo podman build -f Dockerfile\nSTEP 1: FROM alpine\nerror building: error creating build container: no such image \"alpine\" in registry: image not known\n```\n\n----------------------------------------\n\nTITLE: Building Linux Guest Agent with Go - Shell\nDESCRIPTION: Shows building the Linux guest agent from the ./cmd/gcs directory using the default shell on Linux. Requires Go installation and source code access. The build generates an agent binary suitable for Linux environments.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n> go build ./cmd/gcs\n\n```\n\n----------------------------------------\n\nTITLE: Importing Tarball from Stdin with Message and Tag (Quiet Mode) (Shell)\nDESCRIPTION: Imports an image from standard input (piped from 'cat ctr.tar') into a tagged image 'image-imported'. It uses the '--message' flag to add a commit message and the '-q' flag for quiet mode, suppressing progress output. The final line is the ID of the imported image. Requires a 'ctr.tar' file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-import.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cat ctr.tar | podman -q import --message \"importing the ctr.tar file\" - image-imported\ndb65d991f3bbf7f31ed1064db9a6ced7652e3f8166c4736aa9133dadd3c7acb3\n```\n\n----------------------------------------\n\nTITLE: Visualizing API Service Socket Activation with Mermaid\nDESCRIPTION: A state diagram showing the flow of socket activation for Podman's API service, illustrating how systemd handles the initial client connection and passes the socket to Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> systemd: first client connects\n    systemd --> podman: socket inherited via fork/exec\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting TLS Verification Error in Buildah\nDESCRIPTION: This snippet shows the error when pushing to a registry without TLS verification. By default, Buildah requires TLS verification for registry communications.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# buildah push alpine docker://localhost:5000/myalpine:latest\nGetting image source signatures\nGet https://localhost:5000/v2/: http: server gave HTTP response to HTTPS client\n```\n\n----------------------------------------\n\nTITLE: Configuring Startup Health Check Command in Podman\nDESCRIPTION: Sets a startup healthcheck command that executes inside the container before the regular healthcheck begins. The command can be specified as a simple string or as a JSON array with command and arguments. Requires a regular healthcheck to be configured via image or --health-cmd option.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-startup-cmd.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--health-startup-cmd=\"command\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n--health-startup-cmd='[\"command\", \"arg1\", ...]'\n```\n\n----------------------------------------\n\nTITLE: Inspecting a KSUID with Template Formatting via CLI\nDESCRIPTION: This shell command demonstrates inspecting a KSUID using a custom output format. The `-f template` flag selects template formatting, and the `-t` flag provides the template string. The template `{{ .Time }}: {{ .Payload }}` extracts the Time and Payload fields from the specified KSUID and prints them separated by a colon.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/segmentio/ksuid/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -f template -t '{{ .Time }}: {{ .Payload }}' 0ujtsYcgvSTl8PAuAdqWYSMnLOv\n2017-10-09 21:00:47 -0700 PDT: B5A1CD34B5F99D1154FB6853345C9735\n```\n\n----------------------------------------\n\nTITLE: Executing 'id' Command within podman unshare Namespace\nDESCRIPTION: This example demonstrates the basic usage of `podman unshare` by running the `id` command within the newly created user namespace. The output shows the user is mapped to UID 0 (root) and GID 0 (root) inside the namespace.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-unshare.1.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ podman unshare id\nuid=0(root) gid=0(root) groups=0(root),65534(nobody)\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Snap Package\nDESCRIPTION: Command to install the Podman snap package using the snap package manager. This requires snapd to be installed on the system.\nSOURCE: https://github.com/containers/podman/blob/main/contrib/snapcraft/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install podman\n```\n\n----------------------------------------\n\nTITLE: Defining User Namespace Mode for Podman Containers\nDESCRIPTION: This snippet demonstrates the syntax for setting the user namespace mode in Podman pod commands. It includes a table showing the mappings between host and container users for different key values in rootless mode.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/userns.pod.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--userns**=*mode*\n\nSet the user namespace mode for all the containers in a pod. It defaults to the `PODMAN_USERNS` environment variable. An empty value (\"\") means user namespaces are disabled.\n\nRootless user --userns=Key mappings:\n\nKey       | Host User |  Container User\n----------|---------------|---------------------\n\"\"        |$UID           |0 (Default User account mapped to root user in container.)\nhost      |$UID           |0 (Default User account mapped to root user in container.)\nkeep-id   |$UID           |$UID (Map user account to same UID within container.)\nauto      |$UID           | nil (Host User UID is not mapped into container.)\nnomap     |$UID           | nil (Host User UID is not mapped into container.)\n```\n\n----------------------------------------\n\nTITLE: Configuring container networking in Kubernetes Quadlet\nDESCRIPTION: Demonstrates how to specify custom networking for containers in a Kube unit file, including using host networking or a custom Podman network that can be defined in a separate .network Quadlet file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nNetwork=host\n```\n\n----------------------------------------\n\nTITLE: Configuring Golangci-Lint Integration in VSCode (JSON)\nDESCRIPTION: This snippet demonstrates how to configure VSCode workspace or folder settings to use golangci-lint for automatic linting of Go packages. It requires the golangci-lint tool to be installed and integrates with the Go plugin for VSCode. The 'go.lintTool' key sets the linter, and 'go.lintOnSave' instructs the editor to run linting at the package level each time a file is saved.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"go.lintTool\\\": \\\"golangci-lint\\\",\\n    \\\"go.lintOnSave\\\": \\\"package\\\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling WSL Features in Windows via DISM - PowerShell\nDESCRIPTION: Disables the Windows Subsystem for Linux and Virtual Machine Platform features using the DISM command-line utility in PowerShell. Both 'Microsoft-Windows-Subsystem-Linux' and 'VirtualMachinePlatform' are explicitly disabled without requiring an immediate restart. Requires PowerShell running as administrator.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_37\n\nLANGUAGE: powershell\nCODE:\n```\ndism.exe /online /disable-feature /featurename:Microsoft-Windows-Subsystem-Linux /norestart\ndism.exe /online /disable-feature /featurename:VirtualMachinePlatform /norestart\n```\n\n----------------------------------------\n\nTITLE: Committing with Sign-Off - Git Command\nDESCRIPTION: This command example instructs the contributor how to create a signed-off Git commit using the '-s' flag. This automatically appends the 'Signed-off-by' line to the commit message as required by the project\\'s contribution process. Prerequisites: Git must be installed and configured with user name and email. Input: Commit message. Output: Git commit including sign-off attestation. Limitation: Only as effective as the local user configuration.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/cgroups/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -s\n```\n\n----------------------------------------\n\nTITLE: Enabling All Tags Pull for Podman Image in Quadlet\nDESCRIPTION: When set to true, all tagged images in the repository are pulled. This is equivalent to the '--all-tags' option in Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_38\n\nLANGUAGE: ini\nCODE:\n```\nAllTags=\n```\n\n----------------------------------------\n\nTITLE: Example CPU Share Distribution Table in Markdown\nDESCRIPTION: Illustrates the distribution of CPU shares across multiple cores for containers with different cpu-share values. This example shows how a container with 512 shares and another with 1024 shares might utilize different CPU cores.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cpu-shares.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| PID  |  container  | CPU     | CPU share    |\n| ---- | ----------- | ------- | ------------ |\n| 100  |  C0         | 0       | 100% of CPU0 |\n| 101  |  C1         | 1       | 100% of CPU1 |\n| 102  |  C1         | 2       | 100% of CPU2 |\n```\n\n----------------------------------------\n\nTITLE: Pausing a Pod by ID - Podman CLI - Shell\nDESCRIPTION: Shows how to pause a pod based on its unique pod ID using the podman pod pause command. You must provide the actual pod ID (here represented as '860a4b23'). This command will suspend the running processes in all containers within the specified pod. Podman must be installed and configured; input must be a valid pod ID.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod-pause.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npodman pod pause 860a4b23\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Log Destination in Podman\nDESCRIPTION: Configures where Podman stores container health check logs. Supports three destinations: local container storage (default), custom directory path with container-ID-based naming, or events logger with default directory backup. Used in podman create, run, and update commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-log-destination.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--health-log-destination=directory_path\n```\n\n----------------------------------------\n\nTITLE: Building Containerd Shim on Windows - PowerShell\nDESCRIPTION: Builds the containerd shim for Windows by setting the GOOS environment variable to 'windows' and invoking Go build on the appropriate source directory. Requires Go installed on Windows and source code in ./cmd/containerd-shim-runhcs-v1. Produces a binary compatible with Containerd's Runtime V2 API.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-23_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\\\> $env:GOOS=\"windows\"\nC:\\\\> go build .\\cmd\\containerd-shim-runhcs-v1\n\n```\n\n----------------------------------------\n\nTITLE: Building Podman Client on macOS\nDESCRIPTION: These commands navigate to the Podman source directory, build the remote client, and move the resulting binary to the bin directory.\nSOURCE: https://github.com/containers/podman/blob/main/build_osx.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd go/src/github.com/containers/podman\n$ make podman-remote\n$ mv bin/darwin/podman bin/podman\n```\n\n----------------------------------------\n\nTITLE: Plugging Color Into Existing Code - fatih/color - Go\nDESCRIPTION: Illustrates temporarily setting global color attributes using color.Set for coloring output in legacy or existing code bases. It also covers both manual and deferred resetting of color states. It requires careful management of Set/Unset to avoid affecting unrelated prints.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Use handy standard colors\ncolor.Set(color.FgYellow)\n\nfmt.Println(\"Existing text will now be in yellow\")\nfmt.Printf(\"This one %s\\n\", \"too\")\n\ncolor.Unset() // Don't forget to unset\n\n// You can mix up parameters\ncolor.Set(color.FgMagenta, color.Bold)\ndefer color.Unset() // Use it in your function\n\nfmt.Println(\"All text will now be bold magenta.\")\n\n```\n\n----------------------------------------\n\nTITLE: Executing podman-remote Command (Shell)\nDESCRIPTION: Basic syntax structure for executing the podman-remote command. It takes global options followed by a specific command to be executed against the remote Podman service.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman-remote [*options*] *command*\n```\n\n----------------------------------------\n\nTITLE: Testing Port Forwarding with Curl (PowerShell)\nDESCRIPTION: Uses the PowerShell `curl` command (Invoke-WebRequest alias) to send an HTTP request to `localhost:8080` to verify that the port forwarding set up for the `httpd` container is working correctly. `-UseBasicParsing` is often needed in PowerShell for simple HTML responses.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User> curl http://localhost:8080/ -UseBasicParsing\n```\n\n----------------------------------------\n\nTITLE: Removing OCI Artifacts with Podman CLI - Bash\nDESCRIPTION: These command-line examples demonstrate how to remove OCI artifacts from local storage using the \"podman artifact rm\" command. Usage covers removal by artifact name, by partial digest, and removal of all artifacts with appropriate options. Dependencies: Podman must be installed and accessible in the shell. Key parameters include the artifact name or digest and the \"-a\" (all) flag. Each command outputs the hash of the deleted artifact(s); this is helpful for verifying removal. Input should be a valid artifact name or digest; errors or unexpected results may occur if the value does not exist or options conflict.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-artifact-rm.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ podman artifact rm quay.io/artifact/foobar2:test\nDeleted: e7b417f49fc24fc7ead6485da0ebd5bc4419d8a3f394c169fee5a6f38faa4056\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ podman artifact rm e7b417f49fc\nDeleted: e7b417f49fc24fc7ead6485da0ebd5bc4419d8a3f394c169fee5a6f38faa4056\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ podman artifact rm -a\nDeleted: cee15f7c5ce3e86ae6ce60d84bebdc37ad34acfa9a2611cf47501469ac83a1ab\nDeleted: 72875f8f6f78d5b8ba98b2dd2c0a6f395fde8f05ff63a1df580d7a88f5afa97b\n```\n\n----------------------------------------\n\nTITLE: Setting Proc Mount Options for Podman Containers/Pods\nDESCRIPTION: This option allows specifying a comma-separated list of options to use for the /proc mount in the container or pod.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/security-opt.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt proc-opts=OPTIONS\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression for Podman Push and Save Commands\nDESCRIPTION: This configuration option enables compression of tarball image layers when pushing to a directory using the 'dir' transport in Podman. By default, it maintains the same compression type as the source (compressed or uncompressed).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/dir-compress.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--compress**\n\nCompress tarball image layers when pushing to a directory using the 'dir' transport. (default is same compression type, compressed or uncompressed, as source)\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Formatting Code for go-jose Contributions\nDESCRIPTION: This snippet shows the commands to run tests and format code when contributing to go-jose. It also recommends using golint and errcheck for additional code quality checks.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-jose/go-jose/v4/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`go test`, and format your code with `go fmt`.\nWe also recommend using `golint` and `errcheck`.\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Formatting Commit References in Podman\nDESCRIPTION: Git configuration settings that create a custom pretty format for displaying commit references in git log and git show commands. This helps maintain consistent formatting when referencing fixed issues.\nSOURCE: https://github.com/containers/podman/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```\n[core]\n        abbrev = 12\n[pretty]\n        fixes = Fixes: %h (\\\"%s\\\")\n```\n```\n\n----------------------------------------\n\nTITLE: Checking for Specific Error Values in go-multierror using errors.Is (Go)\nDESCRIPTION: Shows the use of errors.Is (from Go's errors package) to check if a multierror contains a particular exact error value such as os.ErrNotExist. Requires importing errors and os packages, and assumes err is an error value aggregated via go-multierror. This approach is useful for detecting common sentinel values or error constants propagated within multierror results.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Digestfile Option in Podman Push Commands\nDESCRIPTION: The --digestfile option allows specifying a file where the digest of the resulting image will be written after a successful push operation. This option is applicable for podman artifact push, manifest push, and regular push commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/digestfile.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--digestfile=Digestfile\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Build Stage in Podman\nDESCRIPTION: The '--target' option allows setting a specific intermediate build stage as the final stage when building a multi-stage Containerfile. It takes a 'stageName' parameter to identify the desired stage. Any commands after the specified target stage are skipped in the build process.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/target.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--target**=*stageName*\n```\n\n----------------------------------------\n\nTITLE: Defining --sign-passphrase-file Option for Podman Push Commands\nDESCRIPTION: Specifies the option to read a passphrase from a file when signing images during Podman push operations. This option is applicable when using either --sign-by or --sign-by-sigstore-private-key for image signing.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sign-passphrase-file.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--sign-passphrase-file**=*path*\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using concurrent.Map in Go\nDESCRIPTION: Demonstrates creating a new concurrent.Map instance using `concurrent.NewMap()`, storing a key-value pair with `m.Store()`, and retrieving a value and its existence status using `m.Load()`. This map serves as a backport of `sync.Map` for Go versions prior to 1.9, offering a thread-safe map implementation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nm := concurrent.NewMap()\nm.Store(\"hello\", \"world\")\nelem, found := m.Load(\"hello\")\n// elem will be \"world\"\n// found will be true\n```\n\n----------------------------------------\n\nTITLE: Setting OOM Score Adjustment in Podman\nDESCRIPTION: Command line option for adjusting the Out of Memory (OOM) score for Podman containers. Accepts values from -1000 to 1000. When running in rootless mode, the value cannot be lower than the oom_score_adj of the current process.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/oom-score-adj.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--oom-score-adj=num\n```\n\n----------------------------------------\n\nTITLE: Initializing a Test Token and Running go-pkcs11uri Example via CLI in Bash\nDESCRIPTION: This Bash session demonstrates initializing a new PKCS#11-compatible token using softhsm2-util, building the Go PKCS#11 example, and invoking the binary with an appropriately formatted URI. The example initializes a token at a specified slot with known PINs, compiles the Go program, and passes the URI and parameters to demonstrate full integration. This procedure requires softhsm2, softhsm2-util, Go tooling, and the go-pkcs11uri and miekg/pkcs11 libraries. Outputs include token initialization confirmation and a hexadecimal digest result from the Go program execution.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/stefanberger/go-pkcs11uri/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ sudo softhsm2-util --init-token --slot 1 --label test --pin 1234 --so-pin 1234\nThe token has been initialized and is reassigned to slot 2053753261\n$ go build ./...\n$ sudo ./pkcs11-example 'pkcs11:slot-id=2053753261?module-path=/usr/lib64/pkcs11/libsofthsm2.so&pin-value=1234'\n517592df8fec3ad146a79a9af153db2a4d784ec5\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Limits in Podman Containers\nDESCRIPTION: Specifies the number of CPUs allocated to a container using the --cpus flag. Default value is 0.0 (no limit). This is a shorthand for --cpu-period and --cpu-quota flags and cannot be used with them simultaneously. Has limitations for non-root users and cgroups V1 rootless systems.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cpus.container.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--cpus=number\n```\n\n----------------------------------------\n\nTITLE: Checking PowerShell Execution Policy\nDESCRIPTION: PowerShell command to check the current execution policy, which determines whether PowerShell scripts can be run on the system.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_11\n\nLANGUAGE: pwsh\nCODE:\n```\nGet-ExecutionPolicy\n```\n\n----------------------------------------\n\nTITLE: Documenting OS Version Option in Podman Manifest Commands\nDESCRIPTION: Documents the --os-version option which allows specifying the required operating system version for container images in manifest lists or indexes. This option is noted as rarely used and is applicable to both 'podman manifest add' and 'podman manifest annotate' commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/os-version.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####> This option file is used in:\n####>   podman manifest add, manifest annotate\n####> If file is edited, make sure the changes\n####> are applicable to all of those.\n#### **--os-version**=*version*\n```\n\n----------------------------------------\n\nTITLE: Querying Image History with Podman (No Truncation, Raw Data) - Shell\nDESCRIPTION: This shell command invokes 'podman history' with the '--no-trunc=true' and '--human=false' flags, which shows the image history without truncating output and in raw, non-humanized format. It requires only Podman and access to the target image. The output displays full timestamps and integer sizes in bytes; suitable for scripting or analysis where unambiguous values are required.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-history.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman history --no-trunc=true --human=false debian\nID              CREATED                CREATED BY                                      SIZE       COMMENT\nb676ca55e4f2c   2017-07-24T16:52:55Z   /bin/sh -c #(nop) CMD [\"bash\"]                  0\n<missing>       2017-07-24T16:52:54Z   /bin/sh -c #(nop) ADD file:ebba725fb97cea4...   45142935\n```\n\n----------------------------------------\n\nTITLE: Installing GPGME Go Package using Go Get\nDESCRIPTION: This shell command utilizes the `go get` tool to download and install the `gpgme` package from `github.com/proglottis/gpgme`. The `-u` flag ensures the package and its dependencies are updated to their latest versions. Requires the Go toolchain to be installed and configured in the environment.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/proglottis/gpgme/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/proglottis/gpgme\n```\n\n----------------------------------------\n\nTITLE: Setting Health Check Startup Retries in Podman\nDESCRIPTION: Command line option for configuring the number of health check retry attempts during container startup. Used in podman create, run, and update commands. A value of 0 (default) means the container will never restart based on startup health checks.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-startup-retries.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--health-startup-retries=retries\n```\n\n----------------------------------------\n\nTITLE: Marshaling Data with Standard Go 'encoding/json'\nDESCRIPTION: This snippet shows the standard Go approach to marshal data into JSON format using the built-in 'encoding/json' package. It imports the package and calls the 'json.Marshal' function, passing a pointer to the data structure.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"encoding/json\"\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Setting AutoUpdate for containers in Kubernetes Quadlet\nDESCRIPTION: Shows examples of how to configure container auto-updates in a Kube unit file. Values include 'registry' for fully-qualified image references, 'local' for locally updated images, or targeted updates with 'name/(local|registry)' syntax.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nAutoUpdate=registry\n```\n\n----------------------------------------\n\nTITLE: Parsing and Using PKCS#11 URIs with go-pkcs11uri in Go\nDESCRIPTION: This Go snippet demonstrates a complete workflow for parsing PKCS#11 URIs, extracting token authentication and module details, initializing a PKCS#11 session, performing user login, and computing a SHA-1 digest using the miekg/pkcs11 and go-pkcs11uri libraries. Dependencies include the miekg/pkcs11 package and the go-pkcs11uri library; prerequisites are a valid PKCS#11-compatible token and module library (e.g., softhsm2). The code expects a PKCS#11 URI as a command-line argument, then performs digest computation on a hardcoded string, printing the result as hexadecimal. Proper resource management via defers is emphasized, and error handling is pervasive throughout.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/stefanberger/go-pkcs11uri/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/miekg/pkcs11\"\n\tpkcs11uri \"github.com/stefanberger/go-pkcs11uri\"\n)\n\nfunc main() {\n\tif len(os.Args) < 2 {\n\t\tpanic(\"Missing pkcs11 URI argument\")\n\t}\n\turistr := os.Args[1]\n\n\turi, err := pkcs11uri.New()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = uri.Parse(uristr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmodule, err := uri.GetModule()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tslot, ok := uri.GetPathAttribute(\"slot-id\", false)\n\tif !ok {\n\t\tpanic(\"No slot-id in pkcs11 URI\")\n\t}\n\tslotid, err := strconv.Atoi(slot)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tpin, err := uri.GetPIN()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tp := pkcs11.New(module)\n\terr = p.Initialize()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer p.Destroy()\n\tdefer p.Finalize()\n\n\tsession, err := p.OpenSession(uint(slotid), pkcs11.CKF_SERIAL_SESSION|pkcs11.CKF_RW_SESSION)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer p.CloseSession(session)\n\n\terr = p.Login(session, pkcs11.CKU_USER, pin)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer p.Logout(session)\n\n\tp.DigestInit(session, []*pkcs11.Mechanism{pkcs11.NewMechanism(pkcs11.CKM_SHA_1, nil)})\n\thash, err := p.Digest(session, []byte(\"this is a string\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, d := range hash {\n\t\tfmt.Printf(\"%x\", d)\n\t}\n\tfmt.Println()\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Pod ID File for Podman Container Creation/Execution\nDESCRIPTION: This option allows specifying a file containing the ID of an existing pod in which to run a container. When used, the container will be executed within the specified pod. If the pod has an infra-container, it will start first before the main container.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/pod-id-file.container.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--pod-id-file**=*file*\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Policy for Podman Build in Quadlet\nDESCRIPTION: Equivalent to the '--pull' option in 'podman build', this setting determines the image pull policy for the build process.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\nPull=\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Exit Code 126 (Command Invocation Error)\nDESCRIPTION: Illustrates a scenario where the command passed to `podman machine ssh` (`/etc`) cannot be invoked (due to permission errors). The command returns exit code 126.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-ssh.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine ssh /etc; echo $?\nError: fork/exec /etc: permission denied\n126\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Git commands to create and set up a new feature branch, including updating from upstream master.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.uber.org/automaxprocs/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/go.uber.org/automaxprocs\ngit checkout master\ngit fetch upstream\ngit rebase upstream/master\ngit checkout -b cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Calculating String Width in Go using go-runewidth\nDESCRIPTION: Demonstrates how to use the StringWidth function from the go-runewidth library to calculate the fixed width of a string containing both ASCII and non-ASCII characters.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-runewidth/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrunewidth.StringWidth(\"つのだ☆HIRO\") == 12\n```\n\n----------------------------------------\n\nTITLE: Building Podman with Custom gvproxy Path\nDESCRIPTION: This command builds Podman with a custom path for gvproxy binary, useful when using Podman desktop app as a baseline with a development binary of Podman built from git.\nSOURCE: https://github.com/containers/podman/blob/main/build_osx.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake podman-remote HELPER_BINARIES_DIR=/opt/podman/bin\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Reservation Flag in Podman\nDESCRIPTION: Defines the memory soft limit configuration option for Podman containers. Allows specifying memory limits in bytes (b), kibibytes (k), mebibytes (m), or gibibytes (g). Should be set below the hard memory limit to be effective during memory contention.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/memory-reservation.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--memory-reservation=*number[unit]*\n```\n\n----------------------------------------\n\nTITLE: Writing Configuration Files with Viper\nDESCRIPTION: Demonstrates various methods for writing the current Viper configuration to files, including safe write options that don't overwrite existing files.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nviper.WriteConfig() // writes current config to predefined path set by 'viper.AddConfigPath()' and 'viper.SetConfigName'\nviper.SafeWriteConfig()\nviper.WriteConfigAs(\"/path/to/my/.config\")\nviper.SafeWriteConfigAs(\"/path/to/my/.config\") // will error since it has already been written\nviper.SafeWriteConfigAs(\"/path/to/my/.other_config\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Exit Code 125 (Podman Error)\nDESCRIPTION: Shows an example where `podman machine ssh` fails due to an invalid option (`--foo`). The command returns exit code 125, indicating an error within the Podman command itself, not the command executed inside the VM.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-ssh.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine ssh --foo; echo $?\nError: unknown flag: --foo\n125\n```\n\n----------------------------------------\n\nTITLE: Populating DNF metadata cache using Podman\nDESCRIPTION: Runs a Fedora 36 container to generate and store the most recent DNF metadata cache in the previously created directory.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run --rm -v $HOME/dnf_cache_f36:/var/cache/dnf:Z registry.fedoraproject.org/fedora:36 dnf makecache\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Podman permission denied error with exit code 126\nDESCRIPTION: Example showing Podman's error handling when attempting to execute a directory as a command, resulting in exit code 126, indicating a permission denied error.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run busybox /etc; echo $?\nError: container_linux.go:346: starting container process caused \"exec: \\\"/etc\\\": permission denied\": OCI runtime error\n126\n```\n\n----------------------------------------\n\nTITLE: Unmounting All Images Using Podman --all Option - Shell\nDESCRIPTION: Illustrates the use of the '--all' flag with 'podman image unmount' to unmount the root filesystems of all currently mounted images. The command requires Podman to be installed and multiple images mounted. No image IDs are provided; the command unmounts every mounted image, ensuring mount counters are handled for each.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-unmount.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npodman image unmount --all\n```\n\n----------------------------------------\n\nTITLE: Importing pgzip as a replacement for gzip in Go\nDESCRIPTION: Code snippet showing how to import pgzip as a drop-in replacement for the standard gzip library in Go.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/pgzip/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport gzip \"github.com/klauspost/pgzip\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Port Forwarding for Pasta Network in Podman\nDESCRIPTION: Example of using the --network option with pasta to enable automatic port forwarding based on observed bound ports from both host and container sides.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/network.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npasta:-t,auto,-u,auto,-T,auto,-U,auto\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST in CMD\nDESCRIPTION: Sets the `DOCKER_HOST` environment variable for the current Command Prompt (CMD) session to point to the Podman machine's specific named pipe. This allows Docker clients in CMD to connect to Podman when the default pipe is busy.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_16\n\nLANGUAGE: cmd\nCODE:\n```\nset DOCKER_HOST=npipe:////./pipe/podman-machine-default\n```\n\n----------------------------------------\n\nTITLE: Implementing Interruptible Node with Context in Go\nDESCRIPTION: Example of using interruptible nodes with timeouts in Ginkgo. This pattern allows tests to be canceled when they exceed a specified timeout or when an external interrupt is received.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nIt(\"is interruptible\", func(ctx SpecContext) { // or context.Context instead of SpecContext, both are valid.\n    // do things until `ctx.Done()` is closed, for example:\n    req, err := http.NewRequestWithContext(ctx, \"POST\", \"/build-widgets\", nil)\n    Expect(err).NotTo(HaveOccured())\n    _, err := http.DefaultClient.Do(req)\n    Expect(err).NotTo(HaveOccured())\n\n    Eventually(client.WidgetCount).WithContext(ctx).Should(Equal(17))\n}, NodeTimeout(time.Second*20), GracePeriod(5*time.Second))\n```\n\n----------------------------------------\n\nTITLE: Importing Deflate Compression Packages in Go\nDESCRIPTION: Shows how to import the optimized deflate compression packages as drop-in replacements for standard library packages. These packages offer about 2x speed improvement over the standard library.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/klauspost/compress/gzip\"\n  \"github.com/klauspost/compress/zlib\"\n  \"github.com/klauspost/compress/zip\"\n  \"github.com/klauspost/compress/flate\"\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Unexpected Carriage Returns with Podman TTY Flag\nDESCRIPTION: Demonstrates how using the --tty (-t) flag with Podman can result in unexpected carriage returns in terminal output. The solution is to run Podman without the --tty flag unless user interaction is required.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run --rm -t fedora echo abc | od -c\n0000000   a   b   c  \\r  \\n\n0000005\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ echo abc | od -c\n0000000   a   b   c  \\n\n0000004\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run --rm -t fedora sh -c \"echo 1; echo 2; echo 3\" | cat -A\n1^M$\n    2^M$\n        3^M$\n            $\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run --rm fedora echo abc | od -c\n0000000   a   b   c  \\n\n0000004\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run --rm -t fedora /bin/sh -c \"stty -onlcr && echo abc\" | od -c\n0000000   a   b   c  \\n\n0000004\n```\n\n----------------------------------------\n\nTITLE: Extracting Basic Registry Information\nDESCRIPTION: Demonstrates how to extract registry information using the basic template format.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-info.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ podman info -f {{.Registries}}\nmap[search:[registry.fedoraproject.org registry.access.redhat.com docker.io quay.io]]\n$\n```\n\n----------------------------------------\n\nTITLE: Defining Task Execution Conditions in Cirrus CI YAML\nDESCRIPTION: This YAML snippet demonstrates the common conditions used to determine when Cirrus CI tasks should run. It includes checks for cron jobs, special CI flags, and file change patterns.\nSOURCE: https://github.com/containers/podman/blob/main/contrib/cirrus/CIModes.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nonly_if: |\n  $CIRRUS_PR == '' ||\n  $CIRRUS_CHANGE_TITLE =~ '.*CI:ALL.*' ||\n  changesInclude('.cirrus.yml', 'Makefile', 'contrib/cirrus/**', 'vendor/**', 'test/tools/**', 'hack/**', 'version/rawversion/*') ||\n  (changesInclude('**/*.go', '**/*.c', '**/*.h') && !changesIncludeOnly('test/**', 'pkg/machine/e2e/**'))\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah Dependencies on RHEL and CentOS\nDESCRIPTION: Command to install all required dependencies for building Buildah from source on RHEL and CentOS.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyum -y install \\\n    make \\\n    golang \\\n    bats \\\n    btrfs-progs-devel \\\n    glib2-devel \\\n    gpgme-devel \\\n    libassuan-devel \\\n    libseccomp-devel \\\n    git \\\n    bzip2 \\\n    go-md2man \\\n    runc \\\n    skopeo-containers\n```\n\n----------------------------------------\n\nTITLE: Setting Container Workdir with Podman Options (CLI)\nDESCRIPTION: Command-line options used with `podman create`, `exec`, and `run` to set the working directory inside the container. The `dir` placeholder represents the desired directory path. Using this option overrides the default working directory (`/`) or the one specified by the `WORKDIR` instruction in the container image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/workdir.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--workdir, -w=dir\n```\n\n----------------------------------------\n\nTITLE: Using Cursor to Navigate Bolt's B+Tree Structure\nDESCRIPTION: Provides traversal functionality through Bolt's B+tree of on-disk pages or in-memory nodes, supporting key seeking and bidirectional movement.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n- `Cursor` - This object is simply for traversing the B+tree of on-disk pages\n  or in-memory nodes. It can seek to a specific key, move to the first or last\n  value, or it can move forward or backward. The cursor handles the movement up\n  and down the B+tree transparently to the end user.\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Log Size in Podman\nDESCRIPTION: This option sets the maximum length in characters for stored HealthCheck logs in Podman containers. A value of '0' indicates an infinite log length. The default is 500 characters.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-max-log-size.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--health-max-log-size**=*size of stored logs*\n```\n\n----------------------------------------\n\nTITLE: Using Custom Authentication Middleware with Gorilla Mux in Go\nDESCRIPTION: Shows how to instantiate the custom `authenticationMiddleware`, populate its data (`Populate()`), and apply its `Middleware` method to a `mux.Router` using `r.Use()`. This integrates the custom authentication logic into the request handling chain.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_23\n\nLANGUAGE: go\nCODE:\n```\n```go\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\n\namw := authenticationMiddleware{tokenUsers: make(map[string]string)}\namw.Populate()\n\nr.Use(amw.Middleware)\n```\n```\n\n----------------------------------------\n\nTITLE: Using --replace Option in Podman Container and Pod Creation\nDESCRIPTION: The --replace option is used to replace and remove an existing container or pod with the same name. By default, this option is set to false. When enabled, it allows overwriting existing resources.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/replace.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--replace**\n\nIf another <<container|pod>> with the same name already exists, replace and remove it. The default is **false**.\n```\n\n----------------------------------------\n\nTITLE: Converting Various Types to String Using Cast in Go\nDESCRIPTION: This snippet demonstrates the usage of the ToString function from the Cast library to convert different data types to strings. It shows examples of converting integers, floats, byte slices, and interfaces to strings.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/cast/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncast.ToString(\"mayonegg\")         // \"mayonegg\"\ncast.ToString(8)                  // \"8\"\ncast.ToString(8.31)               // \"8.31\"\ncast.ToString([]byte(\"one time\")) // \"one time\"\ncast.ToString(nil)                // \"\"\n\nvar foo interface{} = \"one more time\"\ncast.ToString(foo)                // \"one more time\"\n```\n\n----------------------------------------\n\nTITLE: Using the 'replace' Template Function in Go\nDESCRIPTION: This snippet demonstrates the `replace` function, introduced in Release 2.3.0, likely used within Go templates. It replaces all occurrences of the first argument (\" \") with the second argument (\"-\") within the third argument (\"Me First\"), resulting in \"Me-First\".\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nreplace \" \" \"-\" \"Me First\"\n```\n\n----------------------------------------\n\nTITLE: Defining Isolation Type Option for Podman Build in Markdown\nDESCRIPTION: This snippet defines the --isolation option for Podman build commands. It specifies the syntax and describes the different isolation types available, including oci, rootless, and chroot. It also mentions how to override the default isolation type using an environment variable.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/isolation.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--isolation**=*type*\n\nControls what type of isolation is used for running processes as part of `RUN`\ninstructions.  Recognized types include *oci* (OCI-compatible runtime, the\ndefault), *rootless* (OCI-compatible runtime invoked using a modified\nconfiguration and its --rootless option enabled, with *--no-new-keyring\n--no-pivot* added to its *create* invocation, with network and UTS namespaces\ndisabled, and IPC, PID, and user namespaces enabled; the default for\nunprivileged users), and *chroot* (an internal wrapper that leans more toward\nchroot(1) than container technology).\n\nNote: You can also override the default isolation type by setting the\nBUILDAH\\_ISOLATION environment variable.  `export BUILDAH_ISOLATION=oci`\n```\n\n----------------------------------------\n\nTITLE: Installing WiX Toolset v5 with dotnet tool\nDESCRIPTION: Command to install WiX Toolset v5 as a global .NET tool, which is used for building the Windows installer for Podman.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_3\n\nLANGUAGE: pwsh\nCODE:\n```\ndotnet tool install --global wix\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Viper\nDESCRIPTION: Example of setting default configuration values in Viper. This demonstrates how to establish fallback values for various configuration keys.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nviper.SetDefault(\"ContentDir\", \"content\")\nviper.SetDefault(\"LayoutDir\", \"layouts\")\nviper.SetDefault(\"Taxonomies\", map[string]string{\"tag\": \"tags\", \"category\": \"categories\"})\n```\n\n----------------------------------------\n\nTITLE: Setting Podman Container Healthcheck Timeout\nDESCRIPTION: Configures the maximum time allowed for a container healthcheck to complete before being marked as failed. Accepts time duration format like '1m22s' with a default of 30s. This setting overrides any healthcheck configuration inherited from the container image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--health-timeout=1m22s\n```\n\n----------------------------------------\n\nTITLE: Starting a Signature Web Server for Podman\nDESCRIPTION: Command to start a simple Python HTTP server to serve image signatures, making them available for verification when images are pulled from other systems.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash -c 'cd /var/lib/containers/sigstore && python3 -m http.server'\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```\n\n----------------------------------------\n\nTITLE: Cloning Podman Source Code from GitHub\nDESCRIPTION: This command clones the latest Podman source code from its GitHub repository into a specific directory structure.\nSOURCE: https://github.com/containers/podman/blob/main/build_osx.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/containers/podman go/src/github.com/containers/podman\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Types with errwrap in Go\nDESCRIPTION: This snippet shows how to implement the Wrapper interface for custom error types to work with errwrap's functionality.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AppError {\n  Code ErrorCode\n  Err  error\n}\n\nfunc (e *AppError) WrappedErrors() []error {\n  return []error{e.Err}\n}\n```\n\n----------------------------------------\n\nTITLE: Image ID File Option Documentation for Podman Build\nDESCRIPTION: Documents the --iidfile option for Podman build commands which writes the built image's ID to a specified file. Important note that this option cannot be used when multiple platforms are specified.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/iidfile.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**--iidfile**=*ImageIDfile*\n```\n\n----------------------------------------\n\nTITLE: Restarting a Single Podman Pod by Name\nDESCRIPTION: Demonstrates restarting a specific Podman pod using its designated name ('mywebserverpod'). The command outputs the full pod ID upon successful completion of the restart operation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod-restart.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman pod restart mywebserverpod\ncc8f0bea67b1a1a11aec1ecd38102a1be4b145577f21fc843c7c83b77fc28907\n```\n\n----------------------------------------\n\nTITLE: Defining a Network with Podman Quadlet\nDESCRIPTION: Network unit file example that specifies subnet configuration, gateway, IP range, and labels for a container network.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_54\n\nLANGUAGE: INI\nCODE:\n```\n[Network]\nSubnet=172.16.0.0/24\nGateway=172.16.0.1\nIPRange=172.16.0.0/28\nLabel=org.test.Key=value\n```\n\n----------------------------------------\n\nTITLE: Validating Struct Fields with Tags using govalidator (Go)\nDESCRIPTION: Showcases multiple struct definitions equipped with tags to demonstrate how govalidator enforces field validation. The examples highlight how missing, mandatory, and optional tags influence validation outcomes. These patterns require the govalidator package and are used with govalidator.ValidateStruct() to perform structured validation. Input is struct values, and output is a Boolean success or failure.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// this struct definition will fail govalidator.ValidateStruct() (and the field values do not matter):\\ntype exampleStruct struct {\\n  Name  string ``\\n  Email string `valid:\\\"email\\\"`\\n}\\n\\n// this, however, will only fail when Email is empty or an invalid email address:\\ntype exampleStruct2 struct {\\n  Name  string `valid:\\\"-\\\"`\\n  Email string `valid:\\\"email\\\"`\\n}\\n\\n// lastly, this will only fail when Email is an invalid email address but not when it's empty:\\ntype exampleStruct2 struct {\\n  Name  string `valid:\\\"-\\\"`\\n  Email string `valid:\\\"email,optional\\\"`\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Infra Container Conmon PID File in Podman Pods\nDESCRIPTION: This option allows specifying a file to write the PID of the infra container's conmon process. It's necessary when using systemd to manage Podman containers and pods, as conmon runs in a separate process from Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/infra-conmon-pidfile.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n**--infra-conmon-pidfile**=*file*\n```\n\n----------------------------------------\n\nTITLE: Passing Secrets to Podman Build in Quadlet\nDESCRIPTION: Allows passing secret information for use in Containerfile build stages. This is equivalent to the '--secret' option in 'podman build' and typically follows the format 'secret[,opt=opt ...]'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\nSecret=\n```\n\n----------------------------------------\n\nTITLE: Android Java Implementation for BoltDB\nDESCRIPTION: Java code for Android that initializes a BoltDB instance using the Go wrapper. This implementation selects the appropriate storage path based on Android version and disables cloud backup for the database file.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nString path;\nif (android.os.Build.VERSION.SDK_INT >=android.os.Build.VERSION_CODES.LOLLIPOP){\n    path = getNoBackupFilesDir().getAbsolutePath();\n} else{\n    path = getFilesDir().getAbsolutePath();\n}\nBoltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)\n```\n\n----------------------------------------\n\nTITLE: Configuring User Subuid Mapping\nDESCRIPTION: Example of correct /etc/subuid file configuration for user namespace mapping\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ cat /etc/subuid\njohndoe:100000:65536\ntest:165536:65536\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Copier Usage in Go\nDESCRIPTION: This snippet showcases the usage of the Copier package to copy data between structs, slices, and maps. It demonstrates various features like field-to-field copying, method-to-field copying, custom field mapping, and ignoring specific fields.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/jinzhu/copier/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/jinzhu/copier\"\n)\n\ntype User struct {\n\tName        string\n\tRole        string\n\tAge         int32\n\tEmployeeCode int64 `copier:\"EmployeeNum\"` // specify field name\n\n\t// Explicitly ignored in the destination struct.\n\tSalary   int\n}\n\nfunc (user *User) DoubleAge() int32 {\n\treturn 2 * user.Age\n}\n\n// Tags in the destination Struct provide instructions to copier.Copy to ignore\n// or enforce copying and to panic or return an error if a field was not copied.\ntype Employee struct {\n\t// Tell copier.Copy to panic if this field is not copied.\n\tName      string `copier:\"must\"`\n\n\t// Tell copier.Copy to return an error if this field is not copied.\n\tAge       int32  `copier:\"must,nopanic\"`\n\n\t// Tell copier.Copy to explicitly ignore copying this field.\n\tSalary    int    `copier:\"-\"`\n\n\tDoubleAge int32\n\tEmployeeId int64 `copier:\"EmployeeNum\"` // specify field name\n\tSuperRole string\n}\n\nfunc (employee *Employee) Role(role string) {\n\temployee.SuperRole = \"Super \" + role\n}\n\nfunc main() {\n\tvar (\n\t\tuser      = User{Name: \"Jinzhu\", Age: 18, Role: \"Admin\", Salary: 200000}\n\t\tusers     = []User{{Name: \"Jinzhu\", Age: 18, Role: \"Admin\", Salary: 100000}, {Name: \"jinzhu 2\", Age: 30, Role: \"Dev\", Salary: 60000}}\n\t\temployee  = Employee{Salary: 150000}\n\t\temployees = []Employee{}\n\t)\n\n\tcopier.Copy(&employee, &user)\n\n\tfmt.Printf(\"%#v \\n\", employee)\n\t// Employee{\n\t//    Name: \"Jinzhu\",           // Copy from field\n\t//    Age: 18,                  // Copy from field\n\t//    Salary:150000,            // Copying explicitly ignored\n\t//    DoubleAge: 36,            // Copy from method\n\t//    EmployeeId: 0,            // Ignored\n\t//    SuperRole: \"Super Admin\", // Copy to method\n\t// }\n\n\t// Copy struct to slice\n\tcopier.Copy(&employees, &user)\n\n\tfmt.Printf(\"%#v \\n\", employees)\n\t// []Employee{\n\t//   {Name: \"Jinzhu\", Age: 18, Salary:0, DoubleAge: 36, EmployeeId: 0, SuperRole: \"Super Admin\"}\n\t// }\n\n\t// Copy slice to slice\n\temployees = []Employee{}\n\tcopier.Copy(&employees, &users)\n\n\tfmt.Printf(\"%#v \\n\", employees)\n\t// []Employee{\n\t//   {Name: \"Jinzhu\", Age: 18, Salary:0, DoubleAge: 36, EmployeeId: 0, SuperRole: \"Super Admin\"},\n\t//   {Name: \"jinzhu 2\", Age: 30, Salary:0, DoubleAge: 60, EmployeeId: 0, SuperRole: \"Super Dev\"},\n\t// }\n\n \t// Copy map to map\n\tmap1 := map[int]int{3: 6, 4: 8}\n\tmap2 := map[int32]int8{}\n\tcopier.Copy(&map2, map1)\n\n\tfmt.Printf(\"%#v \\n\", map2)\n\t// map[int32]int8{3:6, 4:8}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining --from Option for Podman Build Commands\nDESCRIPTION: This snippet defines the --from option used in Podman build and farm build commands. It overrides the first FROM instruction in a Containerfile and includes a note about compatibility with remote Podman clients.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/from.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--from**\n\nOverrides the first `FROM` instruction within the Containerfile.  If there are multiple\nFROM instructions in a Containerfile, only the first is changed.\n\nWith the remote podman client, not all container transports work as\nexpected. For example, oci-archive:/x.tar references /x.tar on the remote\nmachine instead of on the client. When using podman remote clients it is\nbest to restrict use to *containers-storage*, and *docker:// transports*.\n```\n\n----------------------------------------\n\nTITLE: Creating Subrouters with Gorilla Mux in Go\nDESCRIPTION: This snippet demonstrates how to create and use subrouters in Gorilla Mux. It shows how to group routes under a common host and define paths relative to a subrouter.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\ns := r.Host(\"www.example.com\").Subrouter()\n\ns.HandleFunc(\"/products/\", ProductsHandler)\ns.HandleFunc(\"/products/{key}\", ProductHandler)\ns.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n```\n\n----------------------------------------\n\nTITLE: Installing Git and Go with winget on Windows\nDESCRIPTION: Command to install Git and Go tools using Windows Package Manager (winget), which are required dependencies for building Podman.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_0\n\nLANGUAGE: pwsh\nCODE:\n```\nwinget install -e GoLang.Go Git.Git\n```\n\n----------------------------------------\n\nTITLE: Using CopyOnWriteFs for Isolated Modifications\nDESCRIPTION: Implements a copy-on-write filesystem with a read-only base and a writable overlay. This example shows creating and writing to a file that only affects the in-memory overlay filesystem while leaving the base OS filesystem untouched.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nbase := afero.NewOsFs()\nroBase := afero.NewReadOnlyFs(base)\nufs := afero.NewCopyOnWriteFs(roBase, afero.NewMemMapFs())\n\nfh, _ = ufs.Create(\"/home/test/file2.txt\")\nfh.WriteString(\"This is a test\")\nfh.Close()\n```\n\n----------------------------------------\n\nTITLE: Example of suggested build argument file name in Podman\nDESCRIPTION: The suggested filename for Podman build argument files. The file would contain multiple lines of build arguments in arg=value format.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/build-arg-file.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nargfile.conf\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Container Image with Podman\nDESCRIPTION: Shows how to run the newly built custom container image using the podman run command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/Introduction.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npodman run -it hello\n```\n\n----------------------------------------\n\nTITLE: Using Follow Option in Podman Logs\nDESCRIPTION: The --follow (-f) option allows continuous monitoring of log output from containers or pods. When used with containers that are removed via 'podman rm' or '--rm' flag, there's a possibility of missing final log entries if the log file is removed before being fully read.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/follow.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--follow, -f\n\nFollow log output. Default is false.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating YAML Unmarshaling and Marshaling in Go\nDESCRIPTION: This Go program showcases the usage of the `gopkg.in/yaml.v2` package. It defines a sample YAML string and a struct `T` with specific field mappings (`yaml:\"c\"`, `yaml:\",flow\"`). It then unmarshals the YAML data first into the struct `t` and then into a generic map `m`, printing the results. Finally, it marshals both `t` and `m` back into YAML format and prints the output strings. Error handling is included using `log.Fatalf`.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/gopkg.in/yaml.v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Podman Image with Fully Qualified Name and Specific Tag (Shell)\nDESCRIPTION: This example shows how to tag an existing image named `httpd` with a fully qualified name that includes a registry (`myregistryhost:5000`), namespace (`fedora`), repository (`httpd`), and a specific tag (`v2`). This is useful for preparing images for pushing to a remote registry.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-tag.1.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ podman tag httpd myregistryhost:5000/fedora/httpd:v2\n```\n\n----------------------------------------\n\nTITLE: Installing the Uniseg Package in Go - Bash\nDESCRIPTION: This snippet demonstrates how to install the 'github.com/rivo/uniseg' Go package using the Go command-line tool. The command resolves and adds the package dependency to your Go project. You need to have Go installed in your environment for this to work, and the dependency will be downloaded according to your project's Go module configuration.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/rivo/uniseg\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Subsystem for Linux (WSL)\nDESCRIPTION: Command to install WSL, which is one of the supported virtualization providers required to run Podman on Windows. This command must be run with administrator privileges.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_7\n\nLANGUAGE: pwsh\nCODE:\n```\nwsl --install\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Tags to the Upstream Repository\nDESCRIPTION: Git commands to push the newly created tags for the main module and all submodules to the upstream repository, ensuring the release is officially published.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit push upstream <new tag>\ngit push upstream <submodules-path/new tag>\n...\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Real-Time Runtime Limit in Podman Container Commands\nDESCRIPTION: This option limits the CPU real-time runtime for a container in microseconds. It specifies the maximum amount of time real-time tasks can consume within a given CPU period. The option is only supported on cgroups V1 rootful systems and the sum of all runtimes across containers cannot exceed the parent cgroup's allotment.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cpu-rt-runtime.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--cpu-rt-runtime=microseconds\n```\n\n----------------------------------------\n\nTITLE: Defining --name Option for Podman Container Creation and Running\nDESCRIPTION: This snippet defines the --name option for Podman create and run commands. It allows assigning a custom name to a container, which can be used as a human-friendly identifier alongside UUID long and short identifiers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/name.container.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--name**=*name*\n\nAssign a name to the container.\n\nThe operator can identify a container in three ways:\n\n- UUID long identifier (\"f78375b1c487e03c9438c729345e54db9d20cfa2ac1fc3494b6eb60872e74778\");\n- UUID short identifier (\"f78375b1c487\");\n- Name (\"jonah\").\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of errwrap Package in Go\nDESCRIPTION: This snippet demonstrates the basic usage of the errwrap package, including wrapping errors, checking for contained errors, and extracting specific error types.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A function that always returns an error, but wraps it, like a real\n// function might.\nfunc tryOpen() error {\n\t_, err := os.Open(\"/i/dont/exist\")\n\tif err != nil {\n\t\treturn errwrap.Wrapf(\"Doesn't exist: {{err}}\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\terr := tryOpen()\n\n\t// We can use the Contains helpers to check if an error contains\n\t// another error. It is safe to do this with a nil error, or with\n\t// an error that doesn't even use the errwrap package.\n\tif errwrap.Contains(err, \"does not exist\") {\n\t\t// Do something\n\t}\n\tif errwrap.ContainsType(err, new(os.PathError)) {\n\t\t// Do something\n\t}\n\n\t// Or we can use the associated `Get` functions to just extract\n\t// a specific error. This would return nil if that specific error doesn't\n\t// exist.\n\tperr := errwrap.GetType(err, new(os.PathError))\n}\n```\n\n----------------------------------------\n\nTITLE: Podman Build History Omission Flag\nDESCRIPTION: The --omit-history flag allows users to exclude build history information from the final container image. This option is particularly useful when working with images that don't require history tracking or when using build tools that don't include History information by default. The default value is false.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/omit-history.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--omit-history\n```\n\n----------------------------------------\n\nTITLE: Merging with Override Option in Go\nDESCRIPTION: This snippet shows how to use `mergo.Merge` with the `mergo.WithOverride` option. This modifies the default behavior, allowing values from the `src` struct to overwrite existing non-zero values in the `dst` struct.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/imdario/mergo/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src, mergo.WithOverride); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Podman System for UID/GID Remapping\nDESCRIPTION: This command migrates the Podman system, which can help resolve issues related to insufficient IDs available in the namespace. It's particularly useful when unable to pull images.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ podman system migrate\n```\n\n----------------------------------------\n\nTITLE: Reusing Default Fields with logrus.Entry - Go\nDESCRIPTION: This Go snippet highlights efficient logging by creating a logger Entry with common fields that is reused across multiple logging statements. This avoids duplicating context fields (e.g., request_id and user_ip) in every log statement. Inputs are the request-specific fields and messages to log; outputs are logs with attached common fields, simplifying structured logging for repeated context.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nrequestLogger := log.WithFields(log.Fields{\"request_id\": request_id, \"user_ip\": user_ip})\\nrequestLogger.Info(\"something happened on that request\") # will log request_id and user_ip\\nrequestLogger.Warn(\"something not great happened\")\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah on openSUSE Kubic\nDESCRIPTION: Command to install Buildah on openSUSE Kubic using transactional-update.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntransactional-update pkg in buildah\n```\n\n----------------------------------------\n\nTITLE: Setting Podman Machine to Rootless Mode (PowerShell)\nDESCRIPTION: Configures the stopped Podman machine to run Podman services as a non-privileged user (rootless mode, the default) using `podman machine set --rootful=false` in PowerShell. The machine must be stopped first.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_22\n\nLANGUAGE: powershell\nCODE:\n```\npodman machine set --rootful=false\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message Format (Plain Text)\nDESCRIPTION: This snippet provides a concrete example of a well-formatted commit message according to the project's contribution guidelines. It illustrates the subject line format `<subsystem>: <what changed>`, the body explaining the rationale (`why`), and a footer referencing a related issue.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/godbus/dbus/v5/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nscripts: add the test-cluster command\n\nthis uses tmux to setup a test cluster that you can easily kill and\nstart for debugging.\n\nFixes #38\n```\n\n----------------------------------------\n\nTITLE: Specifying UID Mapping in Podman Build Commands\nDESCRIPTION: The --userns-uid-map option allows direct specification of a UID mapping for container filesystem ownership. It overrides the remap-uids setting in /etc/containers/storage.conf and takes precedence over global settings. The mapping consists of triples defining in-container UID, host-level UID, and the number of consecutive IDs.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/userns-uid-map.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--userns-uid-map=mapping\n```\n\n----------------------------------------\n\nTITLE: Generating Default Containerd Configuration File - PowerShell\nDESCRIPTION: Generates a default Containerd configuration file using the containerd.exe binary, writing output to a specific file path in ASCII encoding via Out-File. Requires Containerd installed and accessible executable. The resulting config.toml sets up the runtime environment for further customization.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-23_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\containerd.exe config default | Out-File \"C:\\\\Program Files\\\\containerd\\\\config.toml\" -Encoding ascii\n\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Podman Manifest Lists (Bash)\nDESCRIPTION: Example command showing how to remove multiple manifest lists or image indices simultaneously from local Podman storage by providing their identifiers separated by spaces. Replace `listid1` and `listid2` with the actual identifiers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-manifest-rm.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman manifest rm listid1 listid2\n```\n\n----------------------------------------\n\nTITLE: Compiling go-sqlite3 on macOS (x86_64) using Bash\nDESCRIPTION: This command compiles the `go-sqlite3` package specifically for macOS running on Intel (x86_64) processors. It uses the 'darwin' build tag for macOS and 'amd64' for the architecture. Requires the Go compiler, Xcode command-line tools (which include gcc/clang), and CGO enabled.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngo build -tags \"darwin amd64\"\n```\n\n----------------------------------------\n\nTITLE: Specifying OS Version Parameter in Podman Build Commands\nDESCRIPTION: The --os-version flag allows setting a specific operating system version requirement for container images. This option is particularly relevant for Windows-based images and typically inherits from the base image unless explicitly set. The version parameter accepts a string value specifying the exact OS version required.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/os-version.image.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**--os-version**=*version*\n```\n\n----------------------------------------\n\nTITLE: Setting Image Tag for Podman Pull in Quadlet\nDESCRIPTION: Specifies the actual FQIN (Fully Qualified Image Name) of the referenced Image. This is particularly useful when the source is a file or directory archive.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_47\n\nLANGUAGE: ini\nCODE:\n```\nImageTag=\n```\n\n----------------------------------------\n\nTITLE: Stripping ANSI Escape Codes with stripansi - Go\nDESCRIPTION: Provides a Go example that imports the stripansi library, processes a string containing ANSI escape codes, and prints the cleaned result. Requires `github.com/acarl005/stripansi` to be installed and imported in the module. The input is a string with ANSI sequences, and the output is the cleaned string printed to standard output.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/acarl005/stripansi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"github.com/acarl005/stripansi\"\n)\n\nfunc main() {\n\tmsg := \"\\x1b[38;5;140m foo\\x1b[0m bar\"\n\tcleanMsg := stripansi.Strip(msg)\n\tfmt.Println(cleanMsg) // \" foo bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Config from io.Reader in Viper\nDESCRIPTION: Demonstrates how to read configuration data from an io.Reader interface, allowing for custom configuration sources beyond predefined ones like files or environment variables.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nviper.SetConfigType(\"yaml\") // or viper.SetConfigType(\"YAML\")\n\n// any approach to require this configuration into your program.\nvar yamlExample = []byte(`\nHacker: true\nname: steve\nhobbies:\n- skateboarding\n- snowboarding\n- go\nclothing:\n  jacket: leather\n  trousers: denim\nage: 35\neyes : brown\nbeard: true\n`)\n\nviper.ReadConfig(bytes.NewBuffer(yamlExample))\n\nviper.Get(\"name\") // this would be \"steve\"\n```\n\n----------------------------------------\n\nTITLE: Rootless Build NFS Error\nDESCRIPTION: Error when attempting rootless build on NFS storage\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ podman build .\nERRO[0014] Error while applying layer: ApplyLayer exit status 1 stdout:  stderr: open /root/.bash_logout: permission denied\nerror creating build container: Error committing the finished image: error adding layer with blob \"sha256:a02a4930cb5d36f3290eb84f4bfa30668ef2e9fe3a1fb73ec015fc58b9958b17\": ApplyLayer exit status 1 stdout:  stderr: open /root/.bash_logout: permission denied\n```\n\n----------------------------------------\n\nTITLE: Read-Only and Read-Only-Tmpfs Configuration Table for Podman Containers\nDESCRIPTION: This table illustrates the effects of different combinations of --read-only and --read-only-tmpfs flags on directory permissions within Podman containers. It shows how these settings impact the root directory and other commonly used directories like /run, /tmp, and /var/tmp.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/read-only-tmpfs.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| --read-only | --read-only-tmpfs |  /   | /run, /tmp, /var/tmp|\n| ----------- | ----------------- | ---- | ----------------------------------- |\n| true        |  true             | r/o  | r/w                                 |\n| true        |  false            | r/o  | r/o                                 |\n| false       |  false            | r/w  | r/w                                 |\n| false       |  true             | r/w  | r/w                                 |\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Images with Podman RMI (Shell)\nDESCRIPTION: Contrasts the behavior when attempting to remove an image ('nothing') that does not exist locally. The first command uses the `--ignore` flag, which prevents an error from being thrown. The second command, without `--ignore`, results in an error message indicating the image is not known.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-rmi.1.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ podman rmi --ignore nothing\n$ podman rmi nothing\nError: nothing: image not known\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Individual Validation Errors in Go\nDESCRIPTION: This Go code demonstrates how to handle multiple validation errors returned by `govalidator`. It checks if an error occurred, then type asserts the error to `govalidator.Errors`. It accesses the underlying slice of individual errors using the `Errors()` method and iterates through the slice, printing each error message separately.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n```go\n  if err != nil {\n    errs := err.(govalidator.Errors).Errors()\n    for _, e := range errs {\n      fmt.Println(e.Error())\n    }\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Volume Extension with Unix Socket\nDESCRIPTION: Example demonstrating how to implement a Docker volume extension using Unix sockets. Creates a volume handler with a custom driver implementation and serves it using Unix socket with root user permissions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/docker/go-plugins-helpers/volume/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n  d := MyVolumeDriver{}\n  h := volume.NewHandler(d)\n  u, _ := user.Lookup(\"root\")\n  gid, _ := strconv.Atoi(u.Gid)\n  h.ServeUnix(\"test_volume\", gid)\n```\n\n----------------------------------------\n\nTITLE: MkdirAll API Function Signatures\nDESCRIPTION: The MkdirAll API provides secure methods to create directory structures within a root directory, protecting against the same race attacks as OpenInRoot. These functions ensure safe directory creation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc MkdirAll(root, unsafePath string, mode int) error\nfunc MkdirAllHandle(root *os.File, unsafePath string, mode int) (*os.File, error)\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Declaration - Markdown\nDESCRIPTION: This code snippet contains the text of the Developer Certificate of Origin v1.1, which contributors must agree to when submitting code. It is a legal attestation included verbatim in contribution guides to clarify rights, responsibilities, and the project\\'s open source licensing policies. The snippet is written in Markdown syntax and should be copied exactly as shown without modification. Input: None. Output: Certification statement for contributor compliance.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/cgroups/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Hyper-V on Windows\nDESCRIPTION: PowerShell command to enable the Hyper-V Windows feature, which is an alternative virtualization provider for Podman. Requires Windows Pro, Enterprise, or Education editions.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_8\n\nLANGUAGE: pwsh\nCODE:\n```\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All\n```\n\n----------------------------------------\n\nTITLE: Basic Podman Registry Info Template Options\nDESCRIPTION: Shows available template options for podman info command when using Go templates.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-info.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman info --format={{.\n{{.Host.         {{.Plugins.      {{.Registries}}  {{.Store.        {{.Version.\n```\n\n----------------------------------------\n\nTITLE: Struct Validation with Type Tags in Go\nDESCRIPTION: Shows how to use the 'type' tag with struct validation. This example demonstrates validating a struct with different field types, ensuring each field matches its declared type.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype User\tstruct {\n  Name string      `valid:\"type(string)\"`\n  Age  int         `valid:\"type(int)\"`\n  Meta interface{} `valid:\"type(string)\"`\n}\nresult, err := govalidator.ValidateStruct(User{\"Bob\", 20, \"meta\"})\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Podman on Windows with Logging\nDESCRIPTION: This command runs the Podman Windows installer with logging enabled. It generates detailed installation logs for troubleshooting purposes.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_23\n\nLANGUAGE: powershell\nCODE:\n```\ncontrib\\win-installer\\podman-5.1.0-dev-setup.exe /install /log podman-setup.log\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Delay for Podman Image Pull in Quadlet\nDESCRIPTION: Defines the delay between retry attempts for image pulls. This corresponds to the '--retry-delay' option in Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\nRetryDelay=\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Containers using Go Docker Client\nDESCRIPTION: Example demonstrating how to use the Docker client library in Go to list all containers on a system, equivalent to the 'docker ps --all' command. The code connects to the Docker daemon using environment settings and prints each container's ID, image name, and status.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/docker/docker/client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tapiClient, err := client.NewClientWithOpts(client.FromEnv)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer apiClient.Close()\n\n\tcontainers, err := apiClient.ContainerList(context.Background(), container.ListOptions{All: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, ctr := range containers {\n\t\tfmt.Printf(\"%s %s (status: %s)\\n\", ctr.ID, ctr.Image, ctr.Status)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Podman System Connection using Shell\nDESCRIPTION: This shell command demonstrates how to use `podman system connection remove` to delete a specific named connection, in this case, one named \"production\". This is useful for cleaning up unused or outdated remote Podman service destinations. Requires Podman to be installed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-connection-remove.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman system connection remove production\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Fedora/CentOS/RHEL using Bash\nDESCRIPTION: This command uses the `yum` package manager (common on Fedora, CentOS, RHEL) to install necessary development tools and libraries for compiling software, including CGO-enabled Go packages. It installs the \"Development Tools\" and \"Development Libraries\" package groups, which typically include gcc, make, and other essential build utilities and headers.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum groupinstall \"Development Tools\" \"Development Libraries\"\n```\n\n----------------------------------------\n\nTITLE: Specifying conmon PID file in Podman create/run commands\nDESCRIPTION: The --conmon-pidfile option allows specifying a file to write the PID of the conmon process. This is crucial for systemd integration when restarting Podman containers. It's not available for remote Podman clients, including Mac and Windows (except WSL2).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/conmon-pidfile.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--conmon-pidfile=*file*\n```\n\n----------------------------------------\n\nTITLE: Using Batch Read-Write Transactions in bbolt\nDESCRIPTION: Example of using DB.Batch() to combine multiple updates for better performance. This optimizes disk operations by opportunistically grouping transactions from concurrent goroutines.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nerr := db.Batch(func(tx *bolt.Tx) error {\n\t...\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Using Locker Package in Go for Resource-Specific Locking\nDESCRIPTION: This example demonstrates how to use the locker package to create fine-grained locks for specific resources. The implementation shows proper locking patterns, including acquiring locks before accessing resources and using a combination of resource-specific locks with global locks for data modification.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/storage/pkg/locker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage important\n\nimport (\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/containers/storage/pkg/locker\"\n)\n\ntype important struct {\n\tlocks *locker.Locker\n\tdata  map[string]interface{}\n\tmu    sync.Mutex\n}\n\nfunc (i *important) Get(name string) interface{} {\n\ti.locks.Lock(name)\n\tdefer i.locks.Unlock(name)\n\treturn data[name]\n}\n\nfunc (i *important) Create(name string, data interface{}) {\n\ti.locks.Lock(name)\n\tdefer i.locks.Unlock(name)\n\n\ti.createImportant(data)\n\n\ts.mu.Lock()\n\ti.data[name] = data\n\ts.mu.Unlock()\n}\n\nfunc (i *important) createImportant(data interface{}) {\n\ttime.Sleep(10 * time.Second)\n}\n```\n\n----------------------------------------\n\nTITLE: Running test-compose with debugging pause\nDESCRIPTION: Command that demonstrates how to run the test-compose script with the COMPOSE_WAIT environment variable, which pauses execution before running docker-compose down to allow for debugging.\nSOURCE: https://github.com/containers/podman/blob/main/test/compose/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ env COMPOSE_WAIT=1 sudo --preserve-env=COMPOSE_WAIT test/compose/test-compose\n```\n\n----------------------------------------\n\nTITLE: Generating OpenTelemetry Semantic Conventions with Docker\nDESCRIPTION: A shell script example showing how to generate semantic convention packages by pulling the semconvgen Docker image and running the make target with the appropriate environment variables.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.21.0\" # Change to the release version you are generating.\nexport OTEL_SEMCONV_REPO=\"/absolute/path/to/opentelemetry/semantic-conventions\"\ndocker pull otel/semconvgen:latest\nmake semconv-generate # Uses the exported TAG and OTEL_SEMCONV_REPO.\n```\n\n----------------------------------------\n\nTITLE: Defining blkio-weight-device option for Podman commands\nDESCRIPTION: Option definition for setting block IO relative device weight for a specific device in Podman containers. The option requires a value in the format of 'device:weight' where weight represents the relative priority for I/O operations on the specified block device.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/blkio-weight-device.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--blkio-weight-device**=*device:weight*\n```\n\n----------------------------------------\n\nTITLE: Mapping Slice Elements in Go\nDESCRIPTION: Example of using the Map function to transform each element in a slice according to a provided function, returning a new slice with the transformed values.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.ResultIterator = func(value interface{}, index int) interface{} {\n\treturn value.(int) * 3\n}\n_ = govalidator.Map(data, fn) // result = []interface{}{1, 6, 9, 12, 15}\n```\n\n----------------------------------------\n\nTITLE: Specifying Static IPv6 Address for Podman Containers and Pods\nDESCRIPTION: This option allows setting a static IPv6 address for a container or pod. It can only be used with a single network and not when joining another container's network namespace. The address must be within the network's IPv6 address pool.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/ip6.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--ip6=fd46:db93:aa76:ac37::10\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Progress Bar with mpb in Go\nDESCRIPTION: This Go snippet demonstrates how to initialize and render a single progress bar using the mpb library. Dependencies include the mpb and decor packages for progress bar management and decoration. The code sets up a progress container with custom style, increments the bar as work is simulated, and waits for completion. Key parameters involve the progress bar width, total count, and render decorators for bar appearance and progress feedback. The expected output is a visually updated progress bar in the terminal, synchronized to the simulated workload.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/vbauerster/mpb/v8/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n    \\\"math/rand\\\"\\n    \\\"time\\\"\\n\\n    \\\"github.com/vbauerster/mpb/v8\\\"\\n    \\\"github.com/vbauerster/mpb/v8/decor\\\"\\n)\\n\\nfunc main() {\\n    // initialize progress container, with custom width\\n    p := mpb.New(mpb.WithWidth(64))\\n\\n    total := 100\\n    name := \\\"Single Bar:\\\"\\n    // create a single bar, which will inherit container's width\\n    bar := p.New(int64(total),\\n        // BarFillerBuilder with custom style\\n        mpb.BarStyle().Lbound(\\\"╢\\\").Filler(\\\"▌\\\").Tip(\\\"▌\\\").Padding(\\\"░\\\").Rbound(\\\"╟\\\"),\\n        mpb.PrependDecorators(\\n            // display our name with one space on the right\\n            decor.Name(name, decor.WC{C: decor.DindentRight | decor.DextraSpace}),\\n            // replace ETA decorator with \\\"done\\\" message, OnComplete event\\n            decor.OnComplete(decor.AverageETA(decor.ET_STYLE_GO), \\\"done\\\"),\\n        ),\\n        mpb.AppendDecorators(decor.Percentage()),\\n    )\\n    // simulating some work\\n    max := 100 * time.Millisecond\\n    for i := 0; i < total; i++ {\\n        time.Sleep(time.Duration(rand.Intn(10)+1) * max / 10)\\n        bar.Increment()\\n    }\\n    // wait for our bar to complete and flush\\n    p.Wait()\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SBOM Scanner Image for Podman Farm Build\nDESCRIPTION: This configuration option allows specifying a custom image for generating Software Bill of Materials (SBOM) during the Podman farm build process. It sets the --sbom-scanner-image flag to use a particular container image for SBOM scanning.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sbom-scanner-image.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--sbom-scanner-image**=*image*\n```\n\n----------------------------------------\n\nTITLE: Disabling Flag Sorting in pflag Help Output in Go\nDESCRIPTION: Shows how to prevent `pflag` from sorting flags alphabetically in the help and usage messages. By setting `flags.SortFlags = false`, flags will be displayed in the order they were defined. The example defines three flags and then calls `flags.PrintDefaults()` to show the unsorted output.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\nLANGUAGE: text\nCODE:\n```\nOutput:\n  -v, --verbose           verbose output\n      --coolflag string   it's really cool flag (default \"yeaah\")\n      --usefulflag int    sometimes it's very useful (default 777)\n```\n\n----------------------------------------\n\nTITLE: Configuring PID Namespace Options in Podman Build Commands\nDESCRIPTION: Specifies how to set PID namespace configuration using the --pid flag. Accepts values: empty string (\"\") or \"container\" for new namespace, \"host\" to reuse podman's namespace, or a path to existing PID namespace.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/pid.image.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--pid=pid\n```\n\n----------------------------------------\n\nTITLE: Using Custom Format Descriptors with psgo\nDESCRIPTION: Demonstrating the use of custom format descriptors with psgo. This example shows how to specify process information columns using the -format flag to display PID, user, group, and seccomp status for running processes.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/psgo/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./bin/psgo -format \"pid, user, group, seccomp\" | head -n5\nPID     USER         GROUP        SECCOMP\n1       root         root         disabled\n2       root         root         disabled\n4       root         root         disabled\n6       root         root         disabled\n```\n\n----------------------------------------\n\nTITLE: Specifying Codespell Package Version\nDESCRIPTION: Defines the required version of the codespell package, which is a tool used for checking spelling in code files.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncodespell==2.3.0\n```\n\n----------------------------------------\n\nTITLE: Viewing Podman Socket Logs via Journalctl\nDESCRIPTION: Command to view Podman socket activation logs using journalctl, showing socket listening status.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/bindings/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ journalctl --user --no-pager -u podman.socket\n-- Reboot --\nJul 22 13:50:40 nagato.nanadai.me systemd[1048]: Listening on Podman API Socket.\n```\n\n----------------------------------------\n\nTITLE: Go Module Import Path Example\nDESCRIPTION: Demonstrates the module path format for v2+ versions using semantic import versioning, where N represents the major version number.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/auto/sdk/VERSIONING.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n/vN\n```\n\n----------------------------------------\n\nTITLE: Decoding and Querying SSH Config from String in Go\nDESCRIPTION: This code demonstrates parsing an SSH configuration provided as a string using `ssh_config.Decode` with `strings.NewReader`. After decoding, it queries the resulting configuration object (`cfg`) for a specific value (\"Port\" for \"example.test\") using the `Get` method. It requires the `strings` and `fmt` packages, in addition to the `ssh_config` library.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar config = `\nHost *.test\n  Compression yes\n`\n\ncfg, err := ssh_config.Decode(strings.NewReader(config))\nfmt.Println(cfg.Get(\"example.test\", \"Port\"))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Podman command not found error with exit code 127\nDESCRIPTION: Example showing Podman's error handling when attempting to execute a non-existent command, resulting in exit code 127, indicating the command was not found in PATH.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman.1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ podman run busybox foo; echo $?\nError: container_linux.go:346: starting container process caused \"exec: \\\"foo\\\": executable file not found in $PATH\": OCI runtime error\n127\n```\n\n----------------------------------------\n\nTITLE: Testing CORS Endpoint with cURL\nDESCRIPTION: Example of testing the CORS-enabled endpoint using cURL, showing the expected request and response headers.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8080/foo -v\n```\n\nLANGUAGE: bash\nCODE:\n```\n*   Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 8080 (#0)\n> GET /foo HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.59.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Access-Control-Allow-Methods: GET,PUT,PATCH,OPTIONS\n< Access-Control-Allow-Origin: *\n< Date: Fri, 28 Jun 2019 20:13:30 GMT\n< Content-Length: 3\n< Content-Type: text/plain; charset=utf-8\n< \n* Connection #0 to host localhost left intact\nfoo\n```\n\n----------------------------------------\n\nTITLE: Listing Alpine Images in Podman Repository\nDESCRIPTION: Command to display all Alpine images in the local Podman repository, showing repository name, tag, image ID, creation date, and size.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman images alpine\nREPOSITORY                 TAG      IMAGE ID       CREATED       SIZE\ndocker.io/library/alpine   latest   e7d92cdc71fe   6 weeks ago   5.86 MB\n```\n\n----------------------------------------\n\nTITLE: Using Denco as HTTP Request Multiplexer\nDESCRIPTION: Example showing how to use Denco as an HTTP request multiplexer with route handlers for index and user endpoints. Demonstrates basic routing setup with GET and POST methods.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n\n    \"github.com/go-openapi/runtime/middleware/denco\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, params denco.Params) {\n    fmt.Fprintf(w, \"Welcome to Denco!\\n\")\n}\n\nfunc User(w http.ResponseWriter, r *http.Request, params denco.Params) {\n    fmt.Fprintf(w, \"Hello %s!\\n\", params.Get(\"name\"))\n}\n\nfunc main() {\n    mux := denco.NewMux()\n    handler, err := mux.Build([]denco.Handler{\n        mux.GET(\"/\", Index),\n        mux.GET(\"/user/:name\", User),\n        mux.POST(\"/user/:name\", User),\n    })\n    if err != nil {\n        panic(err)\n    }\n    log.Fatal(http.ListenAndServe(\":8080\", handler))\n}\n```\n\n----------------------------------------\n\nTITLE: Binding a Custom Flag Value to Viper\nDESCRIPTION: Demonstrates how to bind a custom flag value that implements the FlagValue interface to Viper.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nviper.BindFlagValue(\"my-flag-name\", myFlag{})\n```\n\n----------------------------------------\n\nTITLE: Adding a Container to a Pod with Podman Quadlet\nDESCRIPTION: Container unit file that references a pod, allowing the container to run within the specified pod namespace.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_56\n\nLANGUAGE: INI\nCODE:\n```\n[Container]\nImage=quay.io/centos/centos:latest\nExec=sh -c \"sleep inf\"\nPod=test.pod\n```\n\n----------------------------------------\n\nTITLE: List of Built-in Parameterless Validators in GoValidator\nDESCRIPTION: This snippet lists the standard validation tags available in `govalidator` that do not require parameters. It shows the mapping between the tag name (e.g., \"email\", \"url\", \"alpha\") and the corresponding internal validation function (e.g., `IsEmail`, `IsURL`, `IsAlpha`). These tags can be used directly in struct field `valid` annotations.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n```go\n\"email\":              IsEmail,\n\"url\":                IsURL,\n\"dialstring\":         IsDialString,\n\"requrl\":             IsRequestURL,\n\"requri\":             IsRequestURI,\n\"alpha\":              IsAlpha,\n\"utfletter\":          IsUTFLetter,\n\"alphanum\":           IsAlphanumeric,\n\"utfletternum\":       IsUTFLetterNumeric,\n\"numeric\":            IsNumeric,\n\"utfnumeric\":         IsUTFNumeric,\n\"utfdigit\":           IsUTFDigit,\n\"hexadecimal\":        IsHexadecimal,\n\"hexcolor\":           IsHexcolor,\n\"rgbcolor\":           IsRGBcolor,\n\"lowercase\":          IsLowerCase,\n\"uppercase\":          IsUpperCase,\n\"int\":                IsInt,\n\"float\":              IsFloat,\n\"null\":               IsNull,\n\"uuid\":               IsUUID,\n\"uuidv3\":             IsUUIDv3,\n\"uuidv4\":             IsUUIDv4,\n\"uuidv5\":             IsUUIDv5,\n\"creditcard\":         IsCreditCard,\n\"isbn10\":             IsISBN10,\n\"isbn13\":             IsISBN13,\n\"json\":               IsJSON,\n\"multibyte\":          IsMultibyte,\n\"ascii\":              IsASCII,\n\"printableascii\":     IsPrintableASCII,\n\"fullwidth\":          IsFullWidth,\n\"halfwidth\":          IsHalfWidth,\n\"variablewidth\":      IsVariableWidth,\n\"base64\":             IsBase64,\n\"datauri\":            IsDataURI,\n\"ip\":                 IsIP,\n\"port\":               IsPort,\n\"ipv4\":               IsIPv4,\n\"ipv6\":               IsIPv6,\n\"dns\":                IsDNSName,\n\"host\":               IsHost,\n\"mac\":                IsMAC,\n\"latitude\":           IsLatitude,\n\"longitude\":          IsLongitude,\n\"ssn\":                IsSSN,\n\"semver\":             IsSemver,\n\"rfc3339\":            IsRFC3339,\n\"rfc3339WithoutZone\": IsRFC3339WithoutZone,\n\"ISO3166Alpha2\":      IsISO3166Alpha2,\n\"ISO3166Alpha3\":      IsISO3166Alpha3,\n\"ulid\":               IsULID,\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Available Makefile Actions\nDESCRIPTION: Command to view all available actions in the Podman Makefile to help with development tasks.\nSOURCE: https://github.com/containers/podman/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ make help\nUsage: make <target>\n...output...\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Output Tail in Podman\nDESCRIPTION: Specifies the '--tail' option for Podman logs commands. This option controls the number of lines to output from the end of the logs. It accepts an integer value, with -1 as the default to print all lines.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/tail.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--tail**=*LINES*\n\nOutput the specified number of LINES at the end of the logs.  LINES must be an integer.  Defaults to -1,\nwhich prints all lines\n```\n\n----------------------------------------\n\nTITLE: Exit Podman Machine SSH Session\nDESCRIPTION: Exits the SSH session connected to the Podman machine. This command should be run from the shell prompt obtained after initially running `podman machine ssh` (or after exiting the root shell if `sudo su -` was used).\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n[core@localhost ~]$ exit\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Path Parameter in Podman Commands\nDESCRIPTION: Specifies the file path location for the container-init binary executable used during container initialization. This option is applicable to both 'podman create' and 'podman run' commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/init-path.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**--init-path**=*path*\n```\n\n----------------------------------------\n\nTITLE: Example Podman Service URL (Root Unix Socket)\nDESCRIPTION: An example URL string specifying a connection to the Podman service via a Unix domain socket when running as root. This is the typical default location for root.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nunix:///run/podman/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Enabling Method Name Logging in Go with Logrus\nDESCRIPTION: Demonstrates how to enable logging of the calling method name as a field in Logrus, which can be useful for debugging and tracing.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlog.SetReportCaller(true)\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Error Types from go-multierror with errors.As (Go)\nDESCRIPTION: Illustrates using the errors.As function (from Go standard library) to extract a particular error type from a multierror. Requires importing the errors package and defining a RichErrorType type. Given an error that may be a multierror value, errors.As is used to locate and assign the first matching RichErrorType within the aggregated list. This pattern helps when searching for specific error types inside nested or grouped errors.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n\n```\n\n----------------------------------------\n\nTITLE: Quiet Installation of Standalone Podman MSI Package\nDESCRIPTION: This command performs a quiet, non-interactive installation of the standalone Podman MSI package. It requires administrator privileges and allows specifying the machine provider.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_28\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /package contrib\\win-installer\\en-US\\podman.msi /l*v podman-msi.log /quiet MACHINE_PROVIDER=wsl\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example of Parsing Command Line Arguments in Go\nDESCRIPTION: This extensive example demonstrates various features of go-flags, including different option types, callbacks, required flags, choices, value names, pointers, slices, and maps. It also shows how to parse arguments and access the parsed values.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/jessevdk/go-flags/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar opts struct {\n\t// Slice of bool will append 'true' each time the option\n\t// is encountered (can be set multiple times, like -vvv)\n\tVerbose []bool `short:\"v\" long:\"verbose\" description:\"Show verbose debug information\"`\n\n\t// Example of automatic marshalling to desired type (uint)\n\tOffset uint `long:\"offset\" description:\"Offset\"`\n\n\t// Example of a callback, called each time the option is found.\n\tCall func(string) `short:\"c\" description:\"Call phone number\"`\n\n\t// Example of a required flag\n\tName string `short:\"n\" long:\"name\" description:\"A name\" required:\"true\"`\n\n\t// Example of a flag restricted to a pre-defined set of strings\n\tAnimal string `long:\"animal\" choice:\"cat\" choice:\"dog\"`\n\n\t// Example of a value name\n\tFile string `short:\"f\" long:\"file\" description:\"A file\" value-name:\"FILE\"`\n\n\t// Example of a pointer\n\tPtr *int `short:\"p\" description:\"A pointer to an integer\"`\n\n\t// Example of a slice of strings\n\tStringSlice []string `short:\"s\" description:\"A slice of strings\"`\n\n\t// Example of a slice of pointers\n\tPtrSlice []*string `long:\"ptrslice\" description:\"A slice of pointers to string\"`\n\n\t// Example of a map\n\tIntMap map[string]int `long:\"intmap\" description:\"A map from string to int\"`\n}\n\n// Callback which will invoke callto:<argument> to call a number.\n// Note that this works just on OS X (and probably only with\n// Skype) but it shows the idea.\nopts.Call = func(num string) {\n\tcmd := exec.Command(\"open\", \"callto:\"+num)\n\tcmd.Start()\n\tcmd.Process.Release()\n}\n\n// Make some fake arguments to parse.\nargs := []string{\n\t\"-vv\",\n\t\"--offset=5\",\n\t\"-n\", \"Me\",\n\t\"--animal\", \"dog\", // anything other than \"cat\" or \"dog\" will raise an error\n\t\"-p\", \"3\",\n\t\"-s\", \"hello\",\n\t\"-s\", \"world\",\n\t\"--ptrslice\", \"hello\",\n\t\"--ptrslice\", \"world\",\n\t\"--intmap\", \"a:1\",\n\t\"--intmap\", \"b:5\",\n\t\"arg1\",\n\t\"arg2\",\n\t\"arg3\",\n}\n\n// Parse flags from `args'. Note that here we use flags.ParseArgs for\n// the sake of making a working example. Normally, you would simply use\n// flags.Parse(&opts) which uses os.Args\nargs, err := flags.ParseArgs(&opts, args)\n\nif err != nil {\n\tpanic(err)\n}\n\nfmt.Printf(\"Verbosity: %v\\n\", opts.Verbose)\nfmt.Printf(\"Offset: %d\\n\", opts.Offset)\nfmt.Printf(\"Name: %s\\n\", opts.Name)\nfmt.Printf(\"Animal: %s\\n\", opts.Animal)\nfmt.Printf(\"Ptr: %d\\n\", *opts.Ptr)\nfmt.Printf(\"StringSlice: %v\\n\", opts.StringSlice)\nfmt.Printf(\"PtrSlice: [%v %v]\\n\", *opts.PtrSlice[0], *opts.PtrSlice[1])\nfmt.Printf(\"IntMap: [a:%v b:%v]\\n\", opts.IntMap[\"a\"], opts.IntMap[\"b\"])\nfmt.Printf(\"Remaining args: %s\\n\", strings.Join(args, \" \"))\n\n// Output: Verbosity: [true true]\n// Offset: 5\n// Name: Me\n// Ptr: 3\n// StringSlice: [hello world]\n// PtrSlice: [hello world]\n// IntMap: [a:1 b:5]\n// Remaining args: arg1 arg2 arg3\n```\n\n----------------------------------------\n\nTITLE: Verifying Podman Remote Connection Status\nDESCRIPTION: This command attempts to connect to the configured default or specified remote Podman service and retrieve information about the remote host and Podman environment. Successfully running this command confirms that the `podman-remote` client can authenticate via SSH using the configured key (e.g., the newly added ECDSA key) and communicate with the remote Podman socket.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_39\n\nLANGUAGE: console\nCODE:\n```\n$ podman-remote info\n```\n\n----------------------------------------\n\nTITLE: Configuring Network for Podman Build in Quadlet\nDESCRIPTION: Sets the configuration for network namespaces when handling RUN instructions in Podman builds. It supports options like 'host' for host network or 'none' for no networking. Special handling is provided for network names ending with '.network'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\nNetwork=\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Commits Since Last Release Tag\nDESCRIPTION: Command to display a list of all commits made since the last release tag, which helps in preparing the changelog entries for the new release.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit --no-pager log --pretty=oneline \"<last tag>..HEAD\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Startup Success in Podman\nDESCRIPTION: This option specifies the number of successful runs required before the startup healthcheck succeeds and the regular healthcheck begins. It applies to Podman create, run, and update commands. The default value is 0, meaning any success starts the regular healthcheck.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/health-startup-success.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--health-startup-success**=*retries*\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Entrypoint and Arguments (INI)\nDESCRIPTION: Shows how to override the default ENTRYPOINT and provide additional arguments for a Podman container using Quadlet configuration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nEntrypoint=/custom/entrypoint\nExec=arg1 arg2 \"arg with spaces\"\n```\n\n----------------------------------------\n\nTITLE: Setting No-Option Default Value for a pflag Flag in Go\nDESCRIPTION: Shows how to set a 'no-option default value' for a flag using `flag.Lookup().NoOptDefVal`. If a flag with this property is specified on the command line without an explicit value (e.g., `--flagname`), it will be assigned the `NoOptDefVal` (\"4321\" in this case) instead of its regular default value (1234).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: OverlayFS Rootless Build Error\nDESCRIPTION: Error when building with OverlayFS in rootless mode\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ podman build --storage-driver overlay .\nSTEP 1: FROM docker.io/ubuntu:xenial\nGetting image source signatures\nCopying blob edf72af6d627 done\nCopying blob 3e4f86211d23 done\nCopying blob 8d3eac894db4 done\nCopying blob f7277927d38a done\nCopying config 5e13f8dd4c done\nWriting manifest to image destination\nStoring signatures\nError: creating build container: Error committing the finished image: error adding layer with blob \"sha256:8d3eac894db4dc4154377ad28643dfe6625ff0e54bcfa63e0d04921f1a8ef7f8\": Error processing tar file(exit status 1): operation not permitted\n```\n\n----------------------------------------\n\nTITLE: Adding Default User-Agent Header to OTLP Exporter Requests in Go\nDESCRIPTION: Adds a default User-Agent header to OTLP exporter requests for both gRPC and HTTP protocols.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nAdd default User-Agent header to OTLP exporter requests (`go.opentelemetry.io/otel/exporters/otlptrace/otlptracegrpc` and `go.opentelemetry.io/otel/exporters/otlptrace/otlptracehttp`).\n```\n\n----------------------------------------\n\nTITLE: Parsing Command-Line Flags with pflag in Go\nDESCRIPTION: Demonstrates the essential step of calling `flag.Parse()` after all flags have been defined. This function parses the command-line arguments, populating the defined flag variables with the values provided by the user.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nflag.Parse()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Validation in Go\nDESCRIPTION: This Go snippet shows how to implement custom validation logic for specific types or context-dependent validation using `govalidator.CustomTypeTagMap`. It defines a custom type `CustomByteArray` and a struct `StructWithCustomByteArray`. Two custom validators, `customByteArrayValidator` and `customMinLengthValidator`, are registered. These validators use type switches on both the field value (`i`) and the struct context (`context`) to perform complex validation, including checking against other struct fields.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport \"github.com/asaskevich/govalidator\"\n\ntype CustomByteArray [6]byte // custom types are supported and can be validated\n\ntype StructWithCustomByteArray struct {\n  ID              CustomByteArray `valid:\"customByteArrayValidator,customMinLengthValidator\"` // multiple custom validators are possible as well and will be evaluated in sequence\n  Email           string          `valid:\"email\"`\n  CustomMinLength int             `valid:\"-\"`\n}\n\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // you can type switch on the context interface being validated\n  case StructWithCustomByteArray:\n    // you can check and validate against some other field in the context,\n    // return early or not validate against the context at all – your choice\n  case SomeOtherType:\n    // ...\n  default:\n    // expecting some other type? Throw/panic here or continue\n  }\n\n  switch v := i.(type) { // type switch on the struct field being validated\n  case CustomByteArray:\n    for _, e := range v { // this validator checks that the byte array is not empty, i.e. not all zeroes\n      if e != 0 {\n        return true\n      }\n    }\n  }\n  return false\n})\ngovalidator.CustomTypeTagMap.Set(\"customMinLengthValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // this validates a field against the value in another field, i.e. dependent validation\n  case StructWithCustomByteArray:\n    return len(v.ID) >= v.CustomMinLength\n  }\n  return false\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Incorrect GPG Key for Testing Signature Failure in Podman\nDESCRIPTION: Command to export a different GPG key to the verification location, demonstrating what happens when signatures don't match the expected key.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngpg --output /tmp/key.gpg --armor --export mail@saschagrunert.de\nFile '/tmp/key.gpg' exists. Overwrite? (y/N) y\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Access for Podman Containers\nDESCRIPTION: This option allows specifying GPU devices to be added to a container. It can be used with 'podman create', 'pod clone', 'pod create', and 'run' commands. The 'all' value passes all available GPUs to the container. Currently, only Nvidia GPUs are supported.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/gpus.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--gpus**=*ENTRY*\n```\n\n----------------------------------------\n\nTITLE: Working with Multiple Viper Instances in Go\nDESCRIPTION: Shows how to create and use multiple Viper instances, each with its own unique set of configurations and values.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nx := viper.New()\ny := viper.New()\n\nx.SetDefault(\"ContentDir\", \"content\")\ny.SetDefault(\"ContentDir\", \"foobar\")\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Example of Podman Port Mapping Command\nDESCRIPTION: This snippet demonstrates how to use the --publish option in a Podman run command, specifically showing how to bind a container port to all IPs on the host without specifying the host port.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/publish.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman run -p 127.0.0.1::80\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Formatters in Logrus\nDESCRIPTION: Demonstrates how to implement a custom formatter by implementing the Formatter interface. The example creates a simple JSON formatter that serializes the entry data and appends a newline character.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype MyJSONFormatter struct {\n}\n\nlog.SetFormatter(new(MyJSONFormatter))\n\nfunc (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {\n  // Note this doesn't include Time, Level and Message which are available on\n  // the Entry. Consult `godoc` on information about those fields or read the\n  // source of the official loggers.\n  serialized, err := json.Marshal(entry.Data)\n    if err != nil {\n      return nil, fmt.Errorf(\"Failed to marshal fields to JSON, %w\", err)\n    }\n  return append(serialized, '\\n'), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BatchTimeout in OpenTelemetry Examples\nDESCRIPTION: Example showing the change from using numeric value to using time.Duration for WithBatchTimeout parameter in OpenTelemetry examples.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\n// Changed from:\nWithBatchTimeout(5)\n\n// Changed to:\nWithBatchTimeout(5 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: Checking Mount Propagation Settings with findmnt - Bash\nDESCRIPTION: This Bash snippet outlines the use of the findmnt utility to check the mount propagation properties of a source mount directory, which helps determine if a volume can use shared or slave propagation. The command is expected to run on a Linux system with findmnt installed. Input is the mount point directory, and output lists its propagation status.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/volume.image.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfindmnt -o TARGET,PROPAGATION <source-mount-dir>\n```\n\n----------------------------------------\n\nTITLE: Checking and Propagating Errors in a Go Function\nDESCRIPTION: This snippet demonstrates the traditional Go idiom for checking if an error is non-nil and returning early to propagate the error up the call stack. No external dependencies are required. Key parameter: 'err' holds the error value to check. Input is an error; output is the early return if error is present.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra Library using Go Get\nDESCRIPTION: This command installs the latest version of the Cobra library using the Go package management tool. The `-u` flag ensures that dependencies are updated. This is the standard way to add Cobra as a dependency to a Go project.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/spf13/cobra@latest\n```\n\n----------------------------------------\n\nTITLE: Changing Slirp4netns Network CIDR for a Single Container - Bash\nDESCRIPTION: Shows how to specify a custom network CIDR for a container when using the slirp4netns backend. The command includes the '--network' flag followed by slirp4netns:cidr=<CIDR>, which overrides the default network setting for one container instance. Useful for cases where isolation or unique subnetting is required.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--network slirp4netns:cidr=192.168.1.0/24\n```\n\n----------------------------------------\n\nTITLE: Analyzing Symbol Sizes in Podman Binary\nDESCRIPTION: Shows how to compile Podman and analyze symbol sizes in the resulting binary using the nm-symbols-analysis script to identify potential bloat.\nSOURCE: https://github.com/containers/podman/blob/main/dependencies/analyses/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 1) Compile the binary\n[libpod]$ make podman\n[...]\n\n# 2) Run the script with the binary as an argument\n[libpod]$ ./dependencies/analyses/nm-symbols-analysis.sh ./bin/podman | grep \"containers/libpod/libpod\" | head -n10\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test Class\nDESCRIPTION: Command demonstrating how to run only tests from a specific test class (TestImages in this example) rather than the entire test suite.\nSOURCE: https://github.com/containers/podman/blob/main/test/python/docker/compat/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# python3 -m unittest -v test.python.docker.compat.test_images.TestImages\n```\n\n----------------------------------------\n\nTITLE: Staging All Modified/New Files for Git Commit (Shell)\nDESCRIPTION: Adds all changes (new files, modifications to existing files, deletions) within the current working directory and its subdirectories to the Git staging area. Staged changes are prepared to be included in the next commit. Requires `git` and execution within a Git repository.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Specifying Storage Driver Options with Podman Run - Bash\nDESCRIPTION: These Bash snippets display Podman run commands with various storage driver configurations including native overlayfs, fuse-overlayfs, and vfs. Each demonstrates the necessary flags to force a specific storage backend for container operations. Requires Podman with the respective storage drivers/binaries available.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman --storage-driver=overlay run ...\\npodman --storage-driver=overlay --storage-opt overlay.mount_program=/usr/bin/fuse-overlayfs run ...\\npodman --storage-driver=vfs run ...\n```\n\n----------------------------------------\n\nTITLE: Installing the libseccomp-golang Package using Go CLI (Shell)\nDESCRIPTION: This shell command utilizes the `go get` tool to download and install the libseccomp-golang package from its official GitHub repository. Executing this command makes the Go bindings available for import and use within Go projects.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/seccomp/libseccomp-golang/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n% go get github.com/seccomp/libseccomp-golang\n```\n\n----------------------------------------\n\nTITLE: Running a Single Integration Test in Podman\nDESCRIPTION: Command to run a specific integration test case by name using the Ginkgo testing framework's focus option.\nSOURCE: https://github.com/containers/podman/blob/main/test/README.md#2025-04-23_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nmake localintegration FOCUS=\"podman inspect bogus pod\"\n```\n\n----------------------------------------\n\nTITLE: Running Golangci-Lint via Shell Commands (Shell)\nDESCRIPTION: These shell commands provide instructions for running golangci-lint locally from the repository root to ensure Go code quality. Users can run linting on the entire project or a specific package, while additional flags can be used to display all issues. Dependency: golangci-lint must be installed locally. Inputs are file paths or flags, and outputs are linting results or errors in the terminal.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# use . or specify a path to only lint a package\\n# to show all lint errors, use flags \\\"--max-issues-per-linter=0 --max-same-issues=0\\\"\\n> golangci-lint run ./...\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Line Format\nDESCRIPTION: Illustrates the required format for the 'Signed-off-by' line that must be added to every Git commit message when contributing to Buildah. This line certifies the contributor agrees to the Developer Certificate of Origin (DCO) and must include the contributor's real name and email address.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Output of Simple Container Command (Text)\nDESCRIPTION: Shows the standard output from the `podman run ubi8-micro date` command, which is the current date and time from within the container's Linux environment.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nThu May 5 21:56:42 UTC 2022\n```\n\n----------------------------------------\n\nTITLE: Passing Logr Logger to Application Object in Go\nDESCRIPTION: Shows how to pass the initialized logger to other parts of the application, such as creating and running an application object.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\napp := createTheAppObject(logger)\napp.Run()\n```\n\n----------------------------------------\n\nTITLE: Package Import Reference\nDESCRIPTION: Example import path references for loading YAML documents as Swagger specs using the go-openapi/loads package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/spec/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/go-openapi/loads\n```\n\n----------------------------------------\n\nTITLE: Verifying Podman Installation on Windows\nDESCRIPTION: This series of commands checks various aspects of the Podman installation on Windows, including file paths, configuration files, registry entries, and environment variables.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_29\n\nLANGUAGE: powershell\nCODE:\n```\nTest-Path -Path \"$ENV:PROGRAMFILES\\RedHat\\Podman\\podman.exe\"\nTest-Path -Path \"$ENV:PROGRAMDATA\\containers\\containers.conf.d\\99-podman-machine-provider.conf\"\nGet-Content \"$ENV:PROGRAMDATA\\containers\\containers.conf.d\\99-podman-machine-provider.conf\" | Select -Skip 1 | ConvertFrom-StringData | % { $_.provider }\nTest-Path -Path \"HKLM:\\SOFTWARE\\Red Hat\\Podman\"\nGet-ItemProperty \"HKLM:\\SOFTWARE\\Red Hat\\Podman\" InstallDir\n$env:PATH | Select-String -Pattern \"Podman\"\n```\n\n----------------------------------------\n\nTITLE: Restart Podman Machine on Host\nDESCRIPTION: Stops and then starts the Podman virtual machine. These commands are executed on the host system (not inside the Podman machine via SSH) and may be required to ensure services within the machine fully recognize the newly installed CA certificates.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npodman machine stop\\npodman machine start\n```\n\n----------------------------------------\n\nTITLE: Using CamelCase Split Function in Go\nDESCRIPTION: Example showing how to use the camelcase.Split function to break a camelCase string into separate words. The example splits 'GolangPackage' into ['Golang', 'Package'].\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/common/pkg/report/camelcase/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsplit := camelcase.Split(\"GolangPackage\")\n\nfmt.Println(split[0], split[1]) // prints: \"Golang\", \"Package\"\n```\n\n----------------------------------------\n\nTITLE: Multi-artifact Mount with Title Selection\nDESCRIPTION: Mount a specific artifact by title from a multi-artifact container\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mount.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntype=artifact,src=quay.io/libpod/testartifact:20250206-multi,dst=/data,title=test1\n```\n\n----------------------------------------\n\nTITLE: Setting Architecture Variant for Podman Build in Quadlet\nDESCRIPTION: Overrides the default architecture variant of the container image to be built. This is equivalent to the '--variant' option in 'podman build'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_36\n\nLANGUAGE: ini\nCODE:\n```\nVariant=\n```\n\n----------------------------------------\n\nTITLE: Decoding TOML into Go Structs - Go\nDESCRIPTION: Shows how to map TOML data to a Go struct, including definition of the corresponding struct with typed fields, declaration of a config variable, and invocation of toml.Decode to parse data. Requires the github.com/BurntSushi/toml package and Go 1.18+. Main parameters are the TOML data string and a pointer to the target struct. Input is TOML-formatted text, output is a populated Go struct. Limitation: Only exported (public) struct fields are populated.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\\n\\tAge        int\\n\\tCats       []string\\n\\tPi         float64\\n\\tPerfection []int\\n\\tDOB        time.Time\\n}\\n\\nvar conf Config\\n_, err := toml.Decode(tomlData, &conf)\n```\n\n----------------------------------------\n\nTITLE: Defining --cap-drop Option for Podman Build Commands in Markdown\nDESCRIPTION: This snippet defines the --cap-drop option for Podman build and farm build commands. It specifies how to remove capabilities from the command execution environment during RUN instructions. The description includes default capabilities and interaction with the --cap-add option.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cap-drop.image.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--cap-drop**=*CAP\\_xxx*\n\nWhen executing RUN instructions, run the command specified in the instruction\nwith the specified capability removed from its capability set.\nThe CAP\\_CHOWN, CAP\\_DAC\\_OVERRIDE, CAP\\_FOWNER,\nCAP\\_FSETID, CAP\\_KILL, CAP\\_NET\\_BIND\\_SERVICE, CAP\\_SETFCAP,\nCAP\\_SETGID, CAP\\_SETPCAP, and CAP\\_SETUID capabilities are\ngranted by default; this option can be used to remove them.\n\nIf a capability is specified to both the **--cap-add** and **--cap-drop**\noptions, it is dropped, regardless of the order in which the options were\ngiven.\n```\n\n----------------------------------------\n\nTITLE: Output of Podman Machine Start (Text)\nDESCRIPTION: Displays the console output when the Podman machine starts successfully. It indicates the machine name, the current mode (rootless by default), instructions for switching to rootful mode if needed, and the location of the API forwarding endpoint (Docker API pipe).\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nStarting machine \"podman-machine-default\"\n\nThis machine is currently configured in rootless mode. If your containers\nrequire root permissions (e.g. ports < 1024), or if you run into compatibility\nissues with non-podman clients, you can switch using the following command:\n\n        podman machine set --rootful\n\nAPI forwarding listening on: npipe:////./pipe/docker_engine\n\nDocker API clients default to this address. You do not need to set DOCKER_HOST.\nMachine \"podman-machine-default\" started successfully\n```\n\n----------------------------------------\n\nTITLE: Specifying Pod ID File Option in Podman Commands\nDESCRIPTION: This snippet demonstrates the usage of the --pod-id-file option in Podman pod commands. It allows reading the pod ID from a specified file to perform operations like remove, start, or stop on the pod. This option can be used multiple times in a single command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/pod-id-file.pod.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--pod-id-file**=*file*\n\nRead pod ID from the specified *file* and <<subcommand>> the pod. Can be specified multiple times.\n```\n\n----------------------------------------\n\nTITLE: Using Default Fields in Go with Logrus\nDESCRIPTION: Shows how to create a logger with default fields that will be included in all log entries, useful for adding context to all logs within a specific scope.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nrequestLogger := log.WithFields(log.Fields{\"request_id\": request_id, \"user_ip\": user_ip})\nrequestLogger.Info(\"something happened on that request\") # will log request_id and user_ip\nrequestLogger.Warn(\"something not great happened\")\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Huff0 Compression in Go\nDESCRIPTION: This snippet shows the possible error values returned by the Huff0 compression functions. It includes descriptions for each error type, helping developers handle different scenarios when compressing data.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/compress/huff0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Error               | Description                                                                 |\n|---------------------|-----------------------------------------------------------------------------|\n| `<nil>`             | Everything ok, output is returned                                           |\n| `ErrIncompressible` | Returned when input is judged to be too hard to compress                    |\n| `ErrUseRLE`         | Returned from the compressor when the input is a single byte value repeated |\n| `ErrTooBig`         | Returned if the input block exceeds the maximum allowed size (128 Kib)      |\n| `(error)`           | An internal error occurred.                                                 |\n```\n\n----------------------------------------\n\nTITLE: Output Verifying Podman Engine (Text)\nDESCRIPTION: Shows the output 'Podman Engine' from the `docker.exe version` command, confirming that the Docker client successfully connected to and identified the Podman backend.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nPodman Engine\n```\n\n----------------------------------------\n\nTITLE: Defining Signal Option for Podman Kill Commands in Markdown\nDESCRIPTION: This snippet defines the '--signal' or '-s' option for Podman kill commands. It allows specifying a custom signal to send to containers or pods, with SIGKILL as the default. The option is applicable to both 'podman kill' and 'pod kill' commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/signal.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--signal**, **-s**=**signal**\n\nSignal to send to the container<<|s in the pod>>. For more information on Linux signals, refer to *signal(7)*.\nThe default is **SIGKILL**.\n```\n\n----------------------------------------\n\nTITLE: Configuring cgroup v1 on Fedora\nDESCRIPTION: Commands to configure Fedora to use cgroup v1 instead of v2\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n# dnf install -y grubby\n# grubby --update-kernel=ALL --args=\"systemd.unified_cgroup_hierarchy=0\"\n# reboot\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog for go-jose v3.0.2\nDESCRIPTION: Lists fixes and changes made in version 3.0.2, including performance improvements and addition of Thumbprint support.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-jose/go-jose/v4/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# v3.0.2\n\n## Fixed\n\n - DecryptMulti: handle decompression error (#19)\n\n## Changed\n\n - jwe/CompactSerialize: improve performance (#67)\n - Increase the default number of PBKDF2 iterations to 600k (#48)\n - Return the proper algorithm for ECDSA keys (#45)\n\n## Added\n\n - Add Thumbprint support for opaque signers (#38)\n```\n\n----------------------------------------\n\nTITLE: Installing mapstructure library using Go Get (Shell)\nDESCRIPTION: This shell command demonstrates the standard method for installing the 'mapstructure' Go library using the 'go get' command. It fetches the package from its GitHub repository and installs it into the Go workspace.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Attributes from Environment in Go\nDESCRIPTION: Extracting resource attributes from the OTEL_RESOURCE_ATTRIBUTES environment variable and merging them with default and provided resources.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\nOTEL_RESOURCE_ATTRIBUTES\n```\n\n----------------------------------------\n\nTITLE: Setting PID Namespace Options in Podman\nDESCRIPTION: Demonstrates the three possible values for the --pid option when configuring Podman pods. Options include using the host's PID namespace, joining a specific namespace, or creating a private namespace (default behavior). Requires the PID namespace to be shared via --share flag.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/pid.pod.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhost: use the host's PID namespace for the pod\nns: join the specified PID namespace\nprivate: create a new namespace for the pod (default)\n```\n\n----------------------------------------\n\nTITLE: Binding a Custom Flag Value Set to Viper\nDESCRIPTION: Demonstrates how to bind a custom flag value set that implements the FlagValueSet interface to Viper.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfSet := myFlagSet{\n\tflags: []myFlag{myFlag{}, myFlag{}},\n}\nviper.BindFlagValues(\"my-flags\", fSet)\n```\n\n----------------------------------------\n\nTITLE: Specifying Kubernetes YAML file in a Kube Quadlet unit\nDESCRIPTION: Shows how to specify the path to the Kubernetes YAML file that defines the resources to be deployed with 'podman kube play'. This is the only required key in a Kube unit.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nYaml=/tmp/kube.yaml\n```\n\n----------------------------------------\n\nTITLE: Importing Cobra Library in Go\nDESCRIPTION: This Go code snippet shows how to import the installed Cobra library into a Go source file. This import statement makes Cobra's functions and types available for use within the Go application.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Target for Podman in Quadlet\nDESCRIPTION: Sets the target build stage for the Podman build process. Commands in the Containerfile after the specified target stage are skipped. This is equivalent to the '--target' option in 'podman build'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\nTarget=\n```\n\n----------------------------------------\n\nTITLE: Opening a Bolt Database in Go\nDESCRIPTION: Initializes the reference to the database, creating it if needed, obtaining an exclusive lock, reading meta pages, and memory-mapping the file.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n- `Open()` - Initializes the reference to the database. It's responsible for\n  creating the database if it doesn't exist, obtaining an exclusive lock on the\n  file, reading the meta pages, & memory-mapping the file.\n```\n\n----------------------------------------\n\nTITLE: Struct Validation Examples in GoValidator\nDESCRIPTION: Demonstrates different struct definitions with validation tags and their behavior with required fields.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// this struct definition will fail govalidator.ValidateStruct() (and the field values do not matter):\ntype exampleStruct struct {\n  Name  string ``\n  Email string `valid:\"email\"`\n}\n\n// this, however, will only fail when Email is empty or an invalid email address:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email\"`\n}\n\n// lastly, this will only fail when Email is an invalid email address but not when it's empty:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email,optional\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Buildah Format Environment Variable in Bash\nDESCRIPTION: This snippet demonstrates how to set the BUILDAH_FORMAT environment variable to override the default image format used by Podman build commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/format.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BUILDAH_FORMAT=docker\n```\n\n----------------------------------------\n\nTITLE: Using Logr Logger in Go Application Object\nDESCRIPTION: Illustrates how to use the logr.Logger within an application object to log information during execution.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype appObject struct {\n    // ... other fields ...\n    logger logr.Logger\n    // ... other fields ...\n}\n\nfunc (app *appObject) Run() {\n    app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n    // ... app code ...\n```\n\n----------------------------------------\n\nTITLE: Defining Fenced Code Blocks in Blackfriday Markdown\nDESCRIPTION: This Markdown snippet shows how to create fenced code blocks using triple backticks (` ``` `) in Blackfriday. It includes an optional language identifier (`go` in this case) which can be used for syntax highlighting.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```go\nfunc getTrue() bool {\n    return true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Flag Values after Parsing\nDESCRIPTION: This example demonstrates how to access the values of parsed flags using pflag. It shows both direct access to flag pointers and access to bound variables.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flags with pflag\nDESCRIPTION: This example demonstrates how to create custom flags that satisfy the Value interface and couple them to flag parsing using pflag.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Invoking Podman Upgrade Test Suite with BATS - Bash\nDESCRIPTION: This Bash command demonstrates how to run the Podman upgrade test suite via the BATS framework. By setting relevant environment variables (PODMAN, PODMAN_UPGRADE_FROM, PODMAN_UPGRADE_TEST_DEBUG) and running BATS against the 'test/upgrade' path, it initializes the target old Podman version inside a controlled environment. Required dependencies are the Podman binary (pointed at by PODMAN), the BATS testing framework, and the specific Podman test scripts. Key inputs include the upgrade-from version and optional debug flag; output consists of BATS test results for compatibility validation.\nSOURCE: https://github.com/containers/podman/blob/main/test/upgrade/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo env PODMAN=bin/podman PODMAN_UPGRADE_FROM=v4.1.0 PODMAN_UPGRADE_TEST_DEBUG= bats test/upgrade\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Detailed version history entries documenting changes, updates and fixes to the Podman project. Includes version numbers, dates, and itemized changes for each release.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.14.4 (2020-03-25)\n    Fix fips-mode check for RHEL8 boxes\n    Fix potential CVE in tarfile w/ symlink (Edit 02-Jun-2020: Addresses CVE-2020-10696)\n    Fix .dockerignore with globs and ! commands\n    update install steps for Amazon Linux 2\n    Bump github.com/openshift/imagebuilder from 1.1.2 to 1.1.3\n    Add comment for RUN command in volume ownership test\n    Run stat command directly for volume ownership test\n    vendor in containers/common v0.6.1\n    Cleanup go.sum\n    Bump back to v1.15.0-dev\n```\n\n----------------------------------------\n\nTITLE: SSH into Podman Machine (Alternative Method)\nDESCRIPTION: Connects to the running Podman virtual machine using SSH. This is the first step for the alternative method of installing CA certificates using `vi`.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npodman machine ssh\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package with Go\nDESCRIPTION: Command to install the uuid package using Go's package management system. This snippet shows how to fetch and install the package from the GitHub repository.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/google/uuid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Committing Image with Custom Capabilities Label - Podman CLI Bash\nDESCRIPTION: This example shows how to apply a LABEL to the committed image to set container capabilities using podman commit, with -q (quiet). The LABEL is set via --change. The output is the image ID. Dependencies: podman, container named epic_nobel. Useful for customizing security capabilities metadata.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-commit.1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ podman commit -q --change LABEL=io.containers.capabilities=setuid,setgid epic_nobel privimage\n400d31a3f36dca751435e80a0e16da4859beb51ff84670ce6bdc5edb30b94066\n```\n\n----------------------------------------\n\nTITLE: Regenerating Go Code with go generate (Shell)\nDESCRIPTION: This shell command runs the go generate tool across all packages in the repository to ensure auto-generated source files are up-to-date. This is typically required before submitting changes to verify generated code matches the current sources. It requires Go to be installed and properly configured, and executes all //go:generate directives found throughout the project.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> go generate ./...\n```\n\n----------------------------------------\n\nTITLE: Accessing Mounted Volume as Different User in Podman Container - Shell\nDESCRIPTION: This command starts a Podman container running as user 'bin' with SELinux (z) and user permissions enabled ('U'), mounting the S3 FUSE volume at /s3. The illustrative result is a 'Permission denied' error on 'ls /s3', caused by FUSE's default user restrictions. Useful for demonstrating access control lessons.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ podman run --user bin:bin -v s3fs-fuse-volume:/s3:z,U --rm -it fedora:latest\n$ ls /s3\n# ls: /s3: Permission denied\n```\n\n----------------------------------------\n\nTITLE: Installing Godbus Library in Go\nDESCRIPTION: This command installs the godbus library using Go's package management system. It requires Go version 1.20 or later.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/godbus/dbus/v5/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/godbus/dbus/v5\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Matchers in a Single Route with Gorilla Mux\nDESCRIPTION: This example shows how to combine multiple matchers in a single route definition using Gorilla Mux. It demonstrates chaining matchers for host, HTTP method, and URL scheme.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nr.HandleFunc(\"/products\", ProductsHandler).\n  Host(\"www.example.com\").\n  Methods(\"GET\").\n  Schemes(\"http\")\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Package in Go\nDESCRIPTION: Basic import statement to include gRPC package in Go code. After adding this import, running go build/run/test will automatically fetch dependencies.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Setting Podman Machine to Rootful Mode (PowerShell)\nDESCRIPTION: Configures the stopped Podman machine to run Podman services as the root user (rootful mode) using the `podman machine set --rootful` command in PowerShell. This requires the machine to be stopped first.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_20\n\nLANGUAGE: powershell\nCODE:\n```\npodman machine set --rootful\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Fields in Go using Logrus\nDESCRIPTION: Demonstrates the recommended approach for structured logging using fields in Logrus, which improves log discoverability and usefulness.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nlog.WithFields(log.Fields{\n  \"event\": event,\n  \"topic\": topic,\n  \"key\": key,\n}).Fatal(\"Failed to send event\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Pruned Resources with --filter in Bash\nDESCRIPTION: Demonstrates applying filters to the `podman system prune` command using the `--filter` option. Filters allow selective removal based on criteria like labels (`label=key=value` or `label!=key`) or creation timestamp (`until=timestamp`). Multiple `--filter` options can be used simultaneously.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-prune.1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman system prune --filter foo=bar --filter bif=baz\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Rootless Buildah with OverlayFS\nDESCRIPTION: This snippet demonstrates the errors encountered when using OverlayFS with rootless Buildah, due to permission limitations when creating whiteout files during image extraction.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbuildah build --storage-driver overlay .\nSTEP 1: FROM docker.io/ubuntu:xenial\nGetting image source signatures\nCopying blob edf72af6d627 done\nCopying blob 3e4f86211d23 done\nCopying blob 8d3eac894db4 done\nCopying blob f7277927d38a done\nCopying config 5e13f8dd4c done\nWriting manifest to image destination\nStoring signatures\nError: error creating build container: Error committing the finished image: error adding layer with blob \"sha256:8d3eac894db4dc4154377ad28643dfe6625ff0e54bcfa63e0d04921f1a8ef7f8\": Error processing tar file(exit status 1): operation not permitted\n$ buildah build .\nERRO[0014] Error while applying layer: ApplyLayer exit status 1 stdout:  stderr: open /root/.bash_logout: permission denied\nerror creating build container: Error committing the finished image: error adding layer with blob \"sha256:a02a4930cb5d36f3290eb84f4bfa30668ef2e9fe3a1fb73ec015fc58b9958b17\": ApplyLayer exit status 1 stdout:  stderr: open /root/.bash_logout: permission denied\n```\n\n----------------------------------------\n\nTITLE: Creating New Config with Options in Go\nDESCRIPTION: Implementation of a newConfig function that handles setting defaults and applying options to create a configured instance.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Constraints\nDESCRIPTION: A requirements file specifying Python packages with pinned or minimum version requirements. The dependencies include testing tools like pytest, HTTP request libraries, data processing tools, and Docker integration.\nSOURCE: https://github.com/containers/podman/blob/main/test/python/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests-mock~=1.12.1\nrequests~=2.32.3\nsetuptools~=79.0.0\npython-dateutil~=2.9.0\nPyYAML~=6.0.0\nopenapi-schema-validator~=0.6.2\npytest==8.3.5\ndocker~=6.1.0\n```\n\n----------------------------------------\n\nTITLE: Generating Dependency Tree Analysis\nDESCRIPTION: Demonstrates using the dependency-tree script to analyze and query package dependencies in the Podman project.\nSOURCE: https://github.com/containers/podman/blob/main/dependencies/analyses/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[libpod]$ ./dependencies/analyses/dependency-tree.sh github.com/containers/podman\n[libpod]$ grep \"^github.com/containers/podman/pkg/registries\" direct-tree.txt\n```\n\n----------------------------------------\n\nTITLE: Writing Key/Value Pairs to a Bolt Bucket\nDESCRIPTION: Writes data to a bucket by traversing the B+tree to find the correct position, materializing pages as nodes in memory, and preparing them to be flushed to disk during commit.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n- `Bucket.Put()` - Writes a key/value pair into a bucket. After validating the\n  arguments, a cursor is used to traverse the B+tree to the page and position\n  where the key & value will be written. Once the position is found, the bucket\n  materializes the underlying page and the page's parent pages into memory as\n  \"nodes\". These nodes are where mutations occur during read-write transactions.\n  These changes get flushed to disk during commit.\n```\n\n----------------------------------------\n\nTITLE: Removing Hanging gv-proxy Process\nDESCRIPTION: Use lsof and kill commands to identify and remove a hanging gv-proxy process that prevents starting a new VM on the default port after deleting a previous VM.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nkill -9 $(lsof -i:7777)\n```\n\n----------------------------------------\n\nTITLE: Generating and Inspecting a KSUID via CLI\nDESCRIPTION: This shell command combines generation and inspection. Executing `ksuid -f inspect` without providing a KSUID argument causes the tool to first generate a new KSUID and then immediately display its inspected components (representations, time, timestamp, payload).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/segmentio/ksuid/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -f inspect\n\nREPRESENTATION:\n\n  String: 0ujzPyRiIAffKhBux4PvQdDqMHY\n     Raw: 066A029C73FC1AA3B2446246D6E89FCD909E8FE8\n\nCOMPONENTS:\n\n       Time: 2017-10-09 21:46:20 -0700 PDT\n  Timestamp: 107610780\n    Payload: 73FC1AA3B2446246D6E89FCD909E8FE8\n```\n\n----------------------------------------\n\nTITLE: Deprecating a pflag Flag Shorthand in Go\nDESCRIPTION: Illustrates how to deprecate only the shorthand of a flag using `flags.MarkShorthandDeprecated()`. It takes the full flag name (\"noshorthandflag\") and a usage message. This hides the shorthand (\"n\") from help text and prints the message when the shorthand is used, while the full flag name remains functional.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// deprecate a flag shorthand by specifying its flag name and a usage message\nflags.MarkShorthandDeprecated(\"noshorthandflag\", \"please use --noshorthandflag only\")\n```\n\n----------------------------------------\n\nTITLE: Installing YAML Dependency for Tests\nDESCRIPTION: This shell command installs the `gopkg.in/yaml.v2` package, which is noted as a potential dependency required for running the Mergo library's tests.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/imdario/mergo/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngo get gopkg.in/yaml.v2\n```\n\n----------------------------------------\n\nTITLE: Checking for an Existing Podman Container (Shell)\nDESCRIPTION: This snippet demonstrates checking for the existence of a container named 'webclient' using `podman container exists`. The subsequent `echo $?` command shows the exit code, which is `0`, indicating that the container was found in the local storage.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-container-exists.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman container exists webclient\n$ echo $?\n0\n```\n\n----------------------------------------\n\nTITLE: Setting Overrides in Viper\nDESCRIPTION: Shows how to set override values in Viper, which can come from command line flags or application logic and take precedence over other configuration sources.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nviper.Set(\"Verbose\", true)\nviper.Set(\"LogFile\", LogFile)\n```\n\n----------------------------------------\n\nTITLE: Example Podman Service URL (Rootless Unix Socket)\nDESCRIPTION: An example URL string specifying a connection to the Podman service via a Unix domain socket for a rootless user. This is often the default location.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nunix:///run/user/$UID/podman/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Loading Slim-Sprig FuncMap in Go\nDESCRIPTION: This snippet demonstrates how to import and use Slim-Sprig's FuncMap in a Go program. It shows the proper way to set up a template with Slim-Sprig functions before parsing HTML files.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-task/slim-sprig/v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"html/template\"\n\n  \"github.com/go-task/slim-sprig\"\n)\n\n// This example illustrates that the FuncMap *must* be set before the\n// templates themselves are loaded.\ntpl := template.Must(\n  template.New(\"base\").Funcs(sprig.FuncMap()).ParseGlob(\"*.html\")\n)\n```\n\n----------------------------------------\n\nTITLE: Defining --tag Option for Podman Build Commands\nDESCRIPTION: Specifies the --tag option for Podman build and farm build commands. This option allows assigning a name to the resulting image upon successful build completion. If no registry name is provided, 'localhost' is prepended to the image name.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/tag.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--tag**, **-t**=*imageName*\n```\n\n----------------------------------------\n\nTITLE: Manipulating Linux Network Namespaces with netns in Go\nDESCRIPTION: Demonstrates using the vishvananda/netns Go library to programmatically save, create, and switch Linux network namespaces within a Go application. The snippet locks the OS thread to prevent namespace switching across goroutines, retrieves and restores the original namespace, and lists available network interfaces within the new namespace. Dependencies include the \"github.com/vishvananda/netns\" package and elevated privileges (root). Inputs: none directly; Outputs: prints network interfaces to standard output; Limitations: Must run as root, error handling is minimal, and execution is limited to Linux.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/vishvananda/netns/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"runtime\"\n\n    \"github.com/vishvananda/netns\"\n)\n\nfunc main() {\n    // Lock the OS Thread so we don't accidentally switch namespaces\n    runtime.LockOSThread()\n    defer runtime.UnlockOSThread()\n\n    // Save the current network namespace\n    origns, _ := netns.Get()\n    defer origns.Close()\n\n    // Create a new network namespace\n    newns, _ := netns.New()\n    defer newns.Close()\n\n    // Do something with the network namespace\n    ifaces, _ := net.Interfaces()\n    fmt.Printf(\"Interfaces: %v\\n\", ifaces)\n\n    // Switch back to the original namespace\n    netns.Set(origns)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Binding a pflag Flag to an Existing Variable in Go\nDESCRIPTION: Illustrates how to bind a command-line flag directly to an existing integer variable (`flagvar`) using `flag.IntVar()`. This function takes a pointer to the variable, the flag name, a default value, and a help message. This is often done within an `init` function.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Timeout in Podman\nDESCRIPTION: The --timeout option allows setting a maximum runtime for containers in seconds. After this time, conmon sends a kill signal to the container. By default, containers run indefinitely until they exit or are stopped manually.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--timeout**=*seconds*\n\nMaximum time a container is allowed to run before conmon sends it the kill\nsignal.  By default containers run until they exit or are stopped by\n`podman stop`.\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenCensus Go Repository\nDESCRIPTION: Command to checkout the upstream repository to your GOPATH directory using the go get command.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -d go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Cloning the Podman Git Repository\nDESCRIPTION: Git command to clone the Podman source code repository from GitHub to the local machine.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_10\n\nLANGUAGE: pwsh\nCODE:\n```\ngit clone https://github.com/containers/podman\n```\n\n----------------------------------------\n\nTITLE: Importing OCI Image Encryption Library in Go\nDESCRIPTION: This snippet shows the import statements for the ocicrypt library, which provides functionality for encrypting and decrypting OCI (Open Container Initiative) images. It includes various encryption methods and key management features.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/containers/ocicrypt\ngithub.com/containers/ocicrypt/blockcipher\ngithub.com/containers/ocicrypt/config\ngithub.com/containers/ocicrypt/config/keyprovider-config\ngithub.com/containers/ocicrypt/config/pkcs11config\ngithub.com/containers/ocicrypt/crypto/pkcs11\ngithub.com/containers/ocicrypt/helpers\ngithub.com/containers/ocicrypt/keywrap\ngithub.com/containers/ocicrypt/keywrap/jwe\ngithub.com/containers/ocicrypt/keywrap/keyprovider\ngithub.com/containers/ocicrypt/keywrap/pgp\ngithub.com/containers/ocicrypt/keywrap/pkcs11\ngithub.com/containers/ocicrypt/keywrap/pkcs7\ngithub.com/containers/ocicrypt/spec\ngithub.com/containers/ocicrypt/utils\ngithub.com/containers/ocicrypt/utils/keyprovider\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Podman on Windows\nDESCRIPTION: This command uninstalls Podman from Windows using the installer executable. It performs a quiet uninstallation and generates a log file for the process.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_30\n\nLANGUAGE: powershell\nCODE:\n```\ncontrib\\win-installer\\podman-5.1.0-dev-setup.exe /uninstall /quiet /log podman-setup-uninstall.log\n```\n\n----------------------------------------\n\nTITLE: Importing bbolt in Go Code\nDESCRIPTION: Basic code snippet showing how to import bbolt into a Go program and open a database connection. Includes proper error handling and database closure with defer.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport bolt \"go.etcd.io/bbolt\"\n\ndb, err := bolt.Open(path, 0600, nil)\nif err != nil {\n  return err\n}\ndefer db.Close()\n```\n\n----------------------------------------\n\nTITLE: Generating a Digest Using go-digest - Go\nDESCRIPTION: Demonstrates how to generate a digest from a byte slice using the digest.FromBytes function in the go-digest package. This code produces a digest ID that can be used for verifying content integrity or for content addressable storage. The key parameter is the input content (as a byte slice), and the output is a corresponding digest object.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nid := digest.FromBytes([]byte(\"my content\"))\n```\n\n----------------------------------------\n\nTITLE: Exporting and Packaging a Container Root Filesystem - Shell\nDESCRIPTION: Performs operations to prepare a root filesystem for packaging, including pulling a container image, running a container, exporting its filesystem, and compressing it. Uses docker CLI and gzip, requiring Docker to be installed. Outputs a gzip-compressed filesystem suitable for use as a rootfs, and finally executes a make command to build all required artifacts.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull busybox\ndocker run --name base_image_container busybox\ndocker export base_image_container | gzip > base.tar.gz\nBASE=./base.tar.gz\nmake all\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Exporter with Registration\nDESCRIPTION: Example showing how to configure a Prometheus exporter with a custom registerer option.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nWithRegisterer(customRegisterer)\n```\n\n----------------------------------------\n\nTITLE: Importing govalidator in Go Projects\nDESCRIPTION: Demonstrates how to import the govalidator package using both the standard import path and an alias, enabling flexibility in how the package is referenced throughout a Go project. No external dependencies are required besides Go itself and the govalidator library. This is foundational for any subsequent use of govalidator's functionality.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \\\"github.com/asaskevich/govalidator\\\"\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\\n  valid \\\"github.com/asaskevich/govalidator\\\"\\n)\n```\n\n----------------------------------------\n\nTITLE: Alternative to Deprecated NoopMeter in OpenTelemetry Go\nDESCRIPTION: Shows the recommended replacement for the deprecated NewNoopMeter function in the go.opentelemetry.io/otel/metric package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Instead of NewNoopMeter, use:\nnoopMeter := NewMeterProvider().Meter(\"\")\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Pod YAML with Persistent Volume - Podman - YAML\nDESCRIPTION: This YAML manifest represents the output of using 'podman kube generate' for a container that uses a named volume, converting the Podman container setup into a Kubernetes Pod with a persistentVolumeClaim. It requires Docker Hub access for the container image and a pre-created named volume in Podman. The volumeMounts section links the persistentVolumeClaim to the container's internal mount path, with environment variables and ports exposed. Expected input is at least one Podman container with a named volume; output is a Kubernetes Pod YAML suitable for 'kubectl create -f'. Limitations: generated for a single container and volume; customization may be needed for advanced use.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-generate.1.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: \"2024-01-09T02:24:55Z\"\n  labels:\n    app: some-mariadb-pod\n  name: some-mariadb-pod\nspec:\n  containers:\n  - args:\n    - mariadbd\n    env:\n    - name: MARIADB_ROOT_PASSWORD\n      value: x\n    image: docker.io/library/mariadb:10.11\n    name: some-mariadb\n    ports:\n    - containerPort: 3306\n      hostPort: 34891\n    volumeMounts:\n    - mountPath: /var/lib/mysql\n      name: mariadb_data-pvc\n  volumes:\n  - name: mariadb_data-pvc\n    persistentVolumeClaim:\n      claimName: mariadb_data\n\n```\n\n----------------------------------------\n\nTITLE: Prefix Scan in BoltDB using Go\nDESCRIPTION: This snippet shows how to perform a prefix scan by combining Seek() and bytes.HasPrefix() to iterate over keys with a specific prefix.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\t// Assume bucket exists and has keys\n\tc := tx.Bucket([]byte(\"MyBucket\")).Cursor()\n\n\tprefix := []byte(\"1234\")\n\tfor k, v := c.Seek(prefix); k != nil && bytes.HasPrefix(k, prefix); k, v = c.Next() {\n\t\tfmt.Printf(\"key=%s, value=%s\\n\", k, v)\n\t}\n\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single SSH Config Value in Go\nDESCRIPTION: This snippet demonstrates how to use the `ssh_config.Get` function to retrieve a single configuration value (e.g., \"Port\") for a specific host (\"myhost\") from the default SSH config files (`$HOME/.ssh/config` or `/etc/ssh/ssh_config`). It returns the value as a string.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nport := ssh_config.Get(\"myhost\", \"Port\")\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages in GoValidator\nDESCRIPTION: Example demonstrating how to specify custom error messages for validators using the tilde (~) separator in validation tags. This allows for more user-friendly error messages.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ntype Ticket struct {\n  Id        int64     `json:\"id\"`\n  FirstName string    `json:\"firstname\" valid:\"required~First name is blank\"`\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Processing Example in Go\nDESCRIPTION: Demonstrates basic YAML marshaling and unmarshaling in Go using both struct and map types. Shows how to handle nested structures, custom tags, and flow style arrays.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/sigs.k8s.io/yaml/goyaml.v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n--- t:\n{Easy! {2 [3 4]}}\n\n--- t dump:\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n\n--- m:\nmap[a:Easy! b:map[c:2 d:[3 4]]]\n\n--- m dump:\na: Easy!\nb:\n  c: 2\n  d:\n  - 3\n  - 4\n```\n\n----------------------------------------\n\nTITLE: Output of Podman Machine List (Text)\nDESCRIPTION: Example output of the `podman machine ls` command, displaying details for the default machine (`podman-machine-default`). It shows shared CPU/Memory usage (total for WSL) and independent disk usage for the specific distribution.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nNAME                    VM TYPE     CREATED      LAST UP            CPUS        MEMORY      DISK SIZE\npodman-machine-default  wsl         2 hours ago  Currently running  4           331.1MB     768MB\n```\n\n----------------------------------------\n\nTITLE: Using Overlay Rootfs Mount in Podman\nDESCRIPTION: This command shows how to use an overlay rootfs mount in Podman. It provides a way to run containers with a rootfs that appears writable but discards changes on container exit.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n$ podman run --rootfs /path/to/rootfs:O ....\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Error Causer Interface in Go\nDESCRIPTION: This snippet defines the 'causer' interface, which requires a Cause() error method to retrieve the underlying cause of an error. This allows custom errors to be unwrapped programmatically. No dependencies beyond standard Go. Usage: Implement in custom error types to support error causality inspection.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Importing QEMU Management Library in Go\nDESCRIPTION: This snippet shows the import statement for the go-qemu library, which provides functionality for managing QEMU virtual machines through the QEMU Machine Protocol (QMP).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/digitalocean/go-qemu/qmp\n```\n\n----------------------------------------\n\nTITLE: Container Policy Configuration in JSON\nDESCRIPTION: Example policy.json configuration defining default security policies for container operations and docker daemon transport.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"default\": [\n\t{\n\t    \"type\": \"insecureAcceptAnything\"\n\t}\n    ],\n    \"transports\":\n\t{\n\t    \"docker-daemon\":\n\t\t{\n\t\t    \"\": [{\"type\":\"insecureAcceptAnything\"}]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRIU Version Using Go-criu - Go\nDESCRIPTION: This Go snippet demonstrates how to instantiate a CRIU connection using the go-criu library and retrieve the installed CRIU version via an RPC call. It imports the github.com/checkpoint-restore/go-criu/v7 package, establishes the connection with MakeCriu, and processes the response, with errors logged terminally. Dependencies: go-criu v7, CRIU installed on the system. The key parameter is the instantiated CRIU object, and it outputs the CRIU version to the logs or exits on error. This pattern is suitable for tooling or diagnostic applications requiring integration with CRIU from Go.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/checkpoint-restore/go-criu/v7/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"log\"\n\n\t\"github.com/checkpoint-restore/go-criu/v7\"\n)\n\nfunc main() {\n\tc := criu.MakeCriu()\n\tversion, err := c.GetCriuVersion()\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tlog.Println(version)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Local Master from Upstream - Shell\nDESCRIPTION: Shows the Git commands required to sync the local master branch with the upstream repository's master branch. This ensures the contributor's local repository is up to date. Assumes remotes are correctly set up and the user executes these in their local clone.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout master\\n$ git fetch upstream\\n$ git merge upstream/master\n```\n\n----------------------------------------\n\nTITLE: Verifying Quadlet Service Units with Systemd-Analyze\nDESCRIPTION: Command to check for errors in generated Systemd service units using systemd-analyze. This performs additional verification on the unit file beyond basic syntax checking.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsystemd-analyze {--user} --generators=true verify example.service\n```\n\n----------------------------------------\n\nTITLE: Inspecting Network DNS Status in Podman\nDESCRIPTION: Command to check if DNS is enabled on a specific network using podman network inspect with format templating.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/network-alias.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman network inspect -f {{.DNSEnabled}} <name>\n```\n\n----------------------------------------\n\nTITLE: Running Test Commands for gRPC\nDESCRIPTION: Commands for running various tests before submitting a PR. Includes vet error checks, standard tests, and race condition testing.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/vet.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test -cpu 1,4 -timeout 7m ./...\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test -race -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCensus Go Package\nDESCRIPTION: Command to install the OpenCensus Go package using go get.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opencensus.io/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -u go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Checking Version Constraints with semver in Go\nDESCRIPTION: This snippet illustrates how to define version constraints and verify if a version string satisfies them using the semver package. It creates a Constraint object and a Version object, handling parsing errors for both. The Check method is used to determine if the version meets the constraint. The code expects the semver package, and main parameters include constraint and version strings; output is a boolean indicating satisfaction of the constraint.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nc, err := semver.NewConstraint(\">= 1.2.3\")\nif err != nil {\n    // Handle constraint not being parsable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parsable.\n}\n// Check if the version meets the constraints. The a variable will be true.\na := c.Check(v)\n```\n\n----------------------------------------\n\nTITLE: Committing Transactions in Bolt Database\nDESCRIPTION: Handles the two-phase commit process that ensures data integrity by first writing dirty pages to disk with fsync, then writing a new meta page with incremented transaction ID and checksum.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n- `Tx.Commit()` - Converts the in-memory dirty nodes and the list of free pages\n  into pages to be written to disk. Writing to disk then occurs in two phases.\n  First, the dirty pages are written to disk and an `fsync()` occurs. Second, a\n  new meta page with an incremented transaction ID is written and another\n  `fsync()` occurs. This two phase write ensures that partially written data\n  pages are ignored in the event of a crash since the meta page pointing to them\n  is never written. Partially written meta pages are invalidated because they\n  are written with a checksum.\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering a Custom Validator Function in govalidator (Go)\nDESCRIPTION: Explains both the old and the new signature for custom validator functions with govalidator, emphasizing that the context object parameter allows dependent validation on the enclosing struct. It shows how to register validators thread-safely using the CustomTypeTagMap.Set method. Requires familiarity with Go function types, govalidator, and concurrency safety. Used for extending govalidator's validation capabilities.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// old signature\\nfunc(i interface{}) bool\\n\\n// new signature\\nfunc(i interface{}, o interface{}) bool\n```\n\nLANGUAGE: go\nCODE:\n```\n// before\\ngovalidator.CustomTypeTagMap[\\\"customByteArrayValidator\\\"] = func(i interface{}, o interface{}) bool {\\n  // ...\\n}\\n\\n// after\\ngovalidator.CustomTypeTagMap.Set(\\\"customByteArrayValidator\\\", func(i interface{}, o interface{}) bool {\\n  // ...\\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah on Fedora\nDESCRIPTION: Command to install Buildah on Fedora using the dnf package manager.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf -y install buildah\n```\n\n----------------------------------------\n\nTITLE: Removing a Single Podman Manifest List (Bash)\nDESCRIPTION: Example command demonstrating how to remove a single manifest list or image index from local Podman storage using its name or ID. Replace `<list>` with the actual identifier of the manifest list to be removed.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-manifest-rm.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman manifest rm `<list>`\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Indices in Viper Configuration\nDESCRIPTION: Demonstrates how to access array indices in Viper configuration using numbers in the path. It includes a JSON configuration example with an array and shows how to retrieve a specific array element.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"host\": {\n        \"address\": \"localhost\",\n        \"ports\": [\n            5799,\n            6029\n        ]\n    },\n    \"datastore\": {\n        \"metric\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 3099\n        },\n        \"warehouse\": {\n            \"host\": \"198.0.0.1\",\n            \"port\": 2112\n        }\n    }\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nGetInt(\"host.ports.1\") // returns 6029\n```\n\n----------------------------------------\n\nTITLE: Setting No Option Default Values for Flags\nDESCRIPTION: This snippet shows how to set a NoOptDefVal for a flag, which changes its behavior when the flag is set without an option on the command line.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: DevPTS Mount\nDESCRIPTION: Mount a devpts filesystem for pseudo-terminal devices\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mount.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntype=devpts,destination=/dev/pts\n```\n\n----------------------------------------\n\nTITLE: Compiling go-sqlite3 for Android using Bash\nDESCRIPTION: This command compiles the `go-sqlite3` package specifically for the Android platform. It utilizes the Go build tool with the 'android' build tag to include platform-specific configurations or code paths required for Android compatibility. Requires the Go compiler and CGO enabled.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo build -tags \"android\"\n```\n\n----------------------------------------\n\nTITLE: Unsetting Environment Variables in Podman Build\nDESCRIPTION: This snippet demonstrates the usage of the --unsetenv flag in Podman build and farm build commands. It allows for removing specific environment variables from the final container image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/unsetenv.image.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#### **--unsetenv**=*env*\n```\n\n----------------------------------------\n\nTITLE: Comparing Marshal Output Ordering With go-toml v1 vs v2 - Go\nDESCRIPTION: Demonstrates the difference in struct field order when marshaling between go-toml v1 (which emits fields alphabetically) and go-toml v2 (which emits fields in the order defined in the struct). Requires both tomlv1 and tomlv2 packages, as well as the fmt package for output. Takes a struct with unordered fields, marshals it with both versions, and prints the resulting TOML, illustrating the difference.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype S struct {\n\tB string\n\tA string\n}\n\ndata := S{\n\tB: \"B\",\n\tA: \"A\",\n}\n\nb, _ := tomlv1.Marshal(data)\nfmt.Println(\"v1:\\n\" + string(b))\n\nb, _ = tomlv2.Marshal(data)\nfmt.Println(\"v2:\\n\" + string(b))\n\n// Output:\n// v1:\n// A = \"A\"\n// B = \"B\"\n//\n// v2:\n// B = 'B'\n// A = 'A'\n```\n\n----------------------------------------\n\nTITLE: Using a Verifier with io.Reader - go-digest - Go\nDESCRIPTION: Demonstrates how to use a Verifier from a digest to validate data read from an io.Reader with the go-digest package. It creates a Verifier from a digest, copies content from the provided io.Reader into the verifier, and checks its validity. Dependencies include go-digest and the io package. The input is a digest and an io.Reader, and if the verification fails, an error is returned.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nrd := getContent()\nverifier := id.Verifier()\nio.Copy(verifier, rd)\n\nif !verifier.Verified() {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah on CentOS\nDESCRIPTION: Command to install Buildah on CentOS 7/8 using the yum package manager. Note that the available version may lag behind upstream releases.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum -y install buildah\n```\n\n----------------------------------------\n\nTITLE: Exit Podman Machine SSH Session (Alternative Method)\nDESCRIPTION: Exits the SSH session connected to the Podman machine after completing all steps of the alternative certificate installation method.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n[core@localhost ~]$ exit\n```\n\n----------------------------------------\n\nTITLE: Filtering and Counting Slice Elements in Go\nDESCRIPTION: Demonstrates the Filter and Count functions which allow filtering elements from a slice based on a condition and counting elements that match a condition, respectively.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nvar fn govalidator.ConditionIterator = func(value interface{}, index int) bool {\n\treturn value.(int)%2 == 0\n}\n_ = govalidator.Filter(data, fn) // result = []interface{}{2, 4, 6, 8, 10}\n_ = govalidator.Count(data, fn) // result = 5\n```\n\n----------------------------------------\n\nTITLE: Importing Hash Implementations for go-digest - Go\nDESCRIPTION: Highlights the necessity of importing specific hash implementations (crypto/sha256 and crypto/sha512) for use with go-digest. These imports register the hash functions for use in the application; omitting them will cause a panic. The code demonstrates importing with blank identifiers to ensure initialization, with no runtime output.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    _ \"crypto/sha256\"\n    _ \"crypto/sha512\"\n)\n```\n\n----------------------------------------\n\nTITLE: Importing OpenID Connect Library in Go\nDESCRIPTION: This snippet shows the import statement for the go-oidc library, which provides OpenID Connect client implementation for Go.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/coreos/go-oidc/v3/oidc\n```\n\n----------------------------------------\n\nTITLE: Adding User Subnet Range Commands\nDESCRIPTION: Commands to add UID/GID ranges to /etc/subuid and /etc/subgid files for rootless container configuration. These commands grant a user access to additional UIDs and GIDs needed for running containers in rootless mode.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman.1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod --add-subuids 10000-75535 USERNAME\nsudo usermod --add-subgids 10000-75535 USERNAME\n```\n\n----------------------------------------\n\nTITLE: Importing VFKit Library in Go\nDESCRIPTION: This snippet shows the import statements for the vfkit library, which provides functionality related to virtual machine configuration and management.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/crc-org/vfkit/pkg/config\ngithub.com/crc-org/vfkit/pkg/rest/define\ngithub.com/crc-org/vfkit/pkg/util\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah Dependencies on Ubuntu/Debian\nDESCRIPTION: Commands to install all required dependencies for building Buildah from source on Ubuntu 22.10 (Karmic) or Debian 12 (Bookworm).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get -y -qq update\nsudo apt-get -y install bats btrfs-progs git go-md2man golang libapparmor-dev libglib2.0-dev libgpgme11-dev libseccomp-dev libselinux1-dev make runc skopeo libbtrfs-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring GolangCI-Lint in VSCode Workspace - JSON\nDESCRIPTION: Provides a workspace-level VSCode settings snippet to configure golangci-lint as the preferred Go linting tool whenever a package is saved. Requires VSCode and Go extension with golangci-lint installed. Influences editor integration for linting, does not affect command-line behavior.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-23_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.lintOnSave\": \"package\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing the Lighttpd Build Script in Bash\nDESCRIPTION: These commands demonstrate how to make the lighttpd build script executable and run it. The script builds a container image with Lighttpd web server.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ chmod +x lighttpd.sh\n$ ./lighttpd.sh\n```\n\n----------------------------------------\n\nTITLE: Creating an S3 Directory Prefix for s3fs Mount - Shell\nDESCRIPTION: This shell snippet uses the AWS CLI to create an empty object at the 'prefix/' key in a bucket, thereby ensuring the directory exists for s3fs mounting. Prerequisites include awscli installed and configured with credentials. The command is essential because s3fs requires that the prefix exist before mounting.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ aws s3api put-object --bucket bucket --key prefix/\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Gorilla Mux in Go\nDESCRIPTION: This example demonstrates how to serve static files using Gorilla Mux. It sets up a file server for a specified directory and serves files under a '/static/' URL path prefix.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var dir string\n\n    flag.StringVar(&dir, \"dir\", \".\", \"the directory to serve files from. Defaults to the current dir\")\n    flag.Parse()\n    r := mux.NewRouter()\n\n    // This will serve files under http://localhost:8000/static/<filename>\n    r.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(dir))))\n\n    srv := &http.Server{\n        Handler:      r,\n        Addr:         \"127.0.0.1:8000\",\n        // Good practice: enforce timeouts for servers you create!\n        WriteTimeout: 15 * time.Second,\n        ReadTimeout:  15 * time.Second,\n    }\n\n    log.Fatal(srv.ListenAndServe())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Container Hostname Flag in Podman\nDESCRIPTION: Command flag syntax for setting a container's hostname in Podman. The --hostname or -h flag accepts a name parameter and requires private UTS namespace. When used with pods sharing UTS namespace, the pod's hostname takes precedence.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/hostname.container.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**--hostname**, **-h**=*name*\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Slices with Each in Go\nDESCRIPTION: Example of using the Each function to iterate over a slice and apply a function to each element. This demonstrates a functional programming approach to iteration.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.Iterator = func(value interface{}, index int) {\n\tprintln(value.(int))\n}\ngovalidator.Each(data, fn)\n```\n\n----------------------------------------\n\nTITLE: Using Sprint Functions for Color in Strings (SprintFunc) - fatih/color - Go\nDESCRIPTION: Shows how to use SprintFunc, SprintfFunc, and other helpers to generate colored substrings for inclusion in non-colored output. Useful for composing messages or status strings with emphasis. Requires fatih/color and can be used alongside regular fmt.Printf and fmt.Println.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Create SprintXxx functions to mix strings with other non-colorized strings:\nyellow := color.New(color.FgYellow).SprintFunc()\nred := color.New(color.FgRed).SprintFunc()\nfmt.Printf(\"This is a %s and this is %s.\\n\", yellow(\"warning\"), red(\"error\"))\n\ninfo := color.New(color.FgWhite, color.BgGreen).SprintFunc()\nfmt.Printf(\"This %s rocks!\\n\", info(\"package\"))\n\n// Use helper functions\nfmt.Println(\"This\", color.RedString(\"warning\"), \"should be not neglected.\")\nfmt.Printf(\"%v %v\\n\", color.GreenString(\"Info:\"), \"an important message.\")\n\n// Windows supported too! Just don't forget to change the output to color.Output\nfmt.Fprintf(color.Output, \"Windows support: %s\", color.GreenString(\"PASS\"))\n\n```\n\n----------------------------------------\n\nTITLE: Running systemctl as Root with EnterNS in WSL - Bash\nDESCRIPTION: Shows how to run systemd/systemctl commands as root within the correct namespace inside a running Podman machine using 'enterns'. Prefixes the command to ensure it executes against the managed (nested) Linux environment. Assumes WSL and Podman machine are set up.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nwsl -d podman-machine-default enterns systemctl status\n```\n\n----------------------------------------\n\nTITLE: Installing the Go YAML v2 Package using go get\nDESCRIPTION: This command uses the Go toolchain's `go get` utility to download and install the `gopkg.in/yaml.v2` package, making it available for use in Go projects. Requires the Go language environment to be set up.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/gopkg.in/yaml.v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get gopkg.in/yaml.v2\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Container Image with Podman\nDESCRIPTION: Demonstrates how to build a custom container image from a git repository using the podman build command.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/Introduction.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman build -t hello https://github.com/containers/PodmanHello.git\n```\n\n----------------------------------------\n\nTITLE: Instantiating Go PKCS#11 Library with SoftHSM\nDESCRIPTION: This Go code snippet demonstrates how to create a new instance of the PKCS#11 context by providing the file path to the SoftHSM shared library (`libsofthsm2.so`). The resulting object `p` represents the PKCS#11 module and is used for all subsequent operations. Depends on the `pkcs11` Go package and requires the SoftHSM library to be installed at the specified location.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/miekg/pkcs11/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\np := pkcs11.New(\"/usr/lib/softhsm/libsofthsm2.so\")\n```\n\n----------------------------------------\n\nTITLE: Setting Alternate Runtime for Podman Build using Environment Variable\nDESCRIPTION: Demonstrates how to override the default runtime for Podman build commands by setting the BUILDAH_RUNTIME environment variable. This method allows specifying an alternate OCI-compatible runtime without using the '--runtime' command-line option.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/runtime.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BUILDAH_RUNTIME=/usr/local/bin/runc\n```\n\n----------------------------------------\n\nTITLE: Demonstrating podman unshare Exit Code 126 (Command Cannot Be Invoked)\nDESCRIPTION: This shell command illustrates exit code 126 for `podman unshare`. This code indicates the contained command specified could not be invoked, often due to permission errors (attempting to execute a directory `/etc`). The `echo $?` command prints the exit code.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-unshare.1.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ podman unshare /etc; echo $?\nError: fork/exec /etc: permission denied\n126\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Traces\nDESCRIPTION: Example of starting and ending a trace span for cache operations.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opencensus.io/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx, span := trace.StartSpan(ctx, \"cache.Get\")\ndefer span.End()\n\n// Do work to get from cache.\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Kubernetes API Validation After GC Optimization\nDESCRIPTION: Final benchmark results after garbage collection pressure optimization showing further reduction to ~17M allocations and improved memory efficiency.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor             \nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t3758414145 ns/op\t2593881496 B/op\t17111373 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Using the 'plural' Template Function in Go\nDESCRIPTION: This example, introduced in Release 2.3.0, shows the `plural` function within a Go template pipeline. It takes the length of the string \"foo\" (which is 3), pipes it to `plural`, and because the count is not 1, it outputs the plural form \"many foos\". The arguments following the piped value are the singular form and the plural form.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\nlen \"foo\" | plural \"one foo\" \"many foos\"\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Constraints\nDESCRIPTION: A requirements file listing Python packages with version constraints. It includes packages for HTTP requests (requests-mock, requests), build tools (setuptools), date handling (python-dateutil), YAML processing (PyYAML), schema validation (openapi-schema-validator), testing (pytest), and Docker integration (docker).\nSOURCE: https://github.com/containers/podman/blob/main/test/apiv2/python/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrequests-mock~=1.12.1\nrequests~=2.32.3\nsetuptools~=79.0.0\npython-dateutil~=2.9.0\nPyYAML~=6.0.0\nopenapi-schema-validator~=0.6.2\npytest==8.3.5\ndocker~=6.1.0\n```\n\n----------------------------------------\n\nTITLE: Disabling Sorting of Flags\nDESCRIPTION: This snippet shows how to disable the automatic sorting of flags in help and usage messages.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\n----------------------------------------\n\nTITLE: Example Podman Service URL (Rootless SSH Connection)\nDESCRIPTION: An example URL string specifying an SSH connection to a remote Podman service running rootless on localhost. It includes the user, host, port, and the path to the Unix socket on the remote machine.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nssh://notroot@localhost:22/run/user/$UID/podman/podman.sock\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for xxHash Implementation in Go\nDESCRIPTION: This snippet shows the commands used to run benchmarks comparing the pure Go and assembly implementations of Sum64 using the go test command with different tags.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Defining Flags with Shorthand Letters\nDESCRIPTION: This example demonstrates how to define flags with one-letter shorthands using pflag's 'P' suffix functions.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Implementing the FlagValue Interface for Viper\nDESCRIPTION: Shows how to implement the FlagValue interface to integrate custom flag types with Viper.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype myFlag struct {}\nfunc (f myFlag) HasChanged() bool { return false }\nfunc (f myFlag) Name() string { return \"my-flag-name\" }\nfunc (f myFlag) ValueString() string { return \"my-flag-value\" }\nfunc (f myFlag) ValueType() string { return \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Docker Client from Environment Variables\nDESCRIPTION: Demonstrates creating a Docker client using environment variables like DOCKER_HOST, DOCKER_TLS_VERIFY, and DOCKER_CERT_PATH.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/fsouza/go-dockerclient/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tdocker \"github.com/fsouza/go-dockerclient\"\n)\n\nfunc main() {\n\tclient, err := docker.NewClientFromEnv()\n\tif err != nil {\n\t\t// handle err\n\t}\n\t// use client\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Afero in Go\nDESCRIPTION: This snippet shows how to import the Afero library in a Go application.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/afero\"\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah on Fedora CoreOS\nDESCRIPTION: Command to install Buildah on Fedora CoreOS using rpm-ostree package layering, as it's not available by default.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrpm-ostree install buildah\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Podman Project Governance Structure\nDESCRIPTION: Comprehensive markdown documentation detailing the governance structure, contributor roles, and processes for the Podman Project ecosystem. Includes detailed descriptions of contributor levels, requirements, and advancement processes.\nSOURCE: https://github.com/containers/podman/blob/main/GOVERNANCE.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Project Governance\n\n* [Contributor Ladder](#contributor-ladder-template)\n    * [Contributor](#contributor)\n    * [Reviewer](#reviewer)\n    * [Maintainer](#maintainer)\n    * [Core Maintainer](#core-maintainer)\n    * [Community Manager](#community-manager)\n    * [Emeritus Maintainer](#emeritus-maintainer)\n* [Maintainers File](#maintainers-file)\n* [Inactivity](#inactivity)\n* [Involuntary Removal](#involuntary-removal-or-demotion)\n* [Stepping Down/Emeritus Process](#stepping-downemeritus-process)\n* [Updates to this Document](#updates-to-this-document)\n* [Contact](#contact)\n```\n\n----------------------------------------\n\nTITLE: Formatting and Structuring Release Change Logs - Markdown\nDESCRIPTION: This snippet demonstrates how to structure and format a software project's changelog using markdown syntax. It provides headings for each release, subsections for added, changed, and fixed features, as well as shortlog summaries and contribution records. Dependencies include basic knowledge of markdown formatting, and the changelog is intended to be human-readable. Inputs are project changes; outputs are clearly organized documentation for users and contributors. The changelog does not execute code and is designed for maintainability and transparency.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Change Log\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](http://semver.org/).\nThis change log follows the advice of [Keep a CHANGELOG](https://github.com/olivierlacan/keep-a-changelog).\n\n## [Unreleased]\n\n## [3.0.0] - 2022-03-30\n\n### Added\n\n- Rename, Mount and Unmount methods\n- Parse more fields into Zpool type:\n  - dedupratio\n  - fragmentation\n  - freeing\n  - leaked\n  - readonly\n- Parse more fields into Dataset type:\n  - referenced\n- Incremental Send\n- Parse numbers in exact format\n- Support for Solaris (non-blockint, best-effort status)\n- Debug logging for command invocation\n- Use GitHub Actions for CI\n- Nix shell for dev env reproducibility\n- Direnv file for ease of dev\n- Formatting/lint checks (enforced by CI)\n- Go Module\n- FreeBSD based vagrant machine\n\n### Changed\n\n- Temporarily adjust TestDiff expected strings depending on ZFS version\n- Use one `zfs list`/`zpool list` call instead of many `zfs get`/`zpool get`\n- ZFS docs links now point to OpenZFS pages\n- Ubuntu vagrant box changed to generic/ubuntu2004\n\n### Fixed\n\n- `GetProperty` returning `VALUE` instead of the actual value\n\n### Shortlog\n\n    Amit Krishnan (1):\n      Issue #39 and Issue #40 - Enable Solaris support for go-zfs Switch from zfs/zpool get to zfs/zpool list for better performance Signed-off-by: Amit Krishnan <krish.amit@gmail.com>\n\n    Anand Patil (3):\n      Added Rename\n      Small fix to rename.\n      Added mount and umount methods\n\n    Brian Akins (1):\n      Add 'referenced' to zfs properties\n\n    Brian Bickerton (3):\n      Add debug logging before and after running external zfs command\n      Don't export the default no-op logger\n      Update uuid package repo url\n\n    Dmitry Teselkin (1):\n      Issue #52 - fix parseLine for fragmentation field\n\n    Edward Betts (1):\n      correct spelling mistake\n\n    Justin Cormack (1):\n      Switch to google/uuid which is the maintained version of pborman/uuid\n\n    Manuel Mendez (40):\n      rename Umount -> Unmount to follow zfs command name\n      add missing Unmount/Mount docs\n      always allocate largest Mount slice\n      add travis config\n      travis: update to go 1.7\n      travis: get go deps first\n      test: add nok helper to verify an error occurred\n      test: add test for Dataset.GetProperty\n      ci: swap #cerana on freenode for slack\n      ci: install new deps for 0.7 relases\n      ci: bump zol versions\n      ci: bump go versions\n      ci: use better gometalinter invocations\n      ci: add ccache\n      ci: set env earlier in before_install\n      fix test nok error printing\n      test: restructure TestDiff to deal with different order of changes\n      test: better unicode path handling in TestDiff\n      travis: bump zfs and go versions\n      cache zfs artifacts\n      Add nix-shell and direnv goodness\n      prettierify all the files\n      Add go based tools\n      Add Makefile and rules.mk files\n      gofumptize the code base\n      Use tinkerbell/lint-install to setup linters\n      make golangci-lint happy\n      Update CONTRIBUTING.md with make based approach\n      Add GitHub Actions\n      Drop Travis CI\n      One sentence per line\n      Update documentation links to openzfs-docs pages\n      Format Vagrantfile using rufo\n      Add go-zfs.test to .gitignore\n      test: Avoid reptitive/duplicate error logging and quitting\n      test: Use t.Logf instead of fmt.Printf\n      test: Better cleanup and error handling in zpoolTest\n      test: Do not mark TestDatasets as a t.Helper.\n      test: Change zpoolTest to a pure helper that returns a clean up function\n      test: Move helpers to a different file\n      vagrant: Add set -euxo pipefail to provision script\n      vagrant: Update to generic/ubuntu2004\n      vagrant: Minor fixes to Vagrantfile\n      vagrant: Update to go 1.17.8\n      vagrant: Run go tests as part of provision script\n      vagrant: Indent heredoc script\n      vagrant: Add freebsd machine\n\n    Matt Layher (1):\n      Parse more fields into Zpool type\n\n    Michael Crosby (1):\n      Add incremental send\n\n    Rikard Gynnerstedt (1):\n      remove command name from joined args\n\n    Sebastiaan van Stijn (1):\n      Add go.mod and rename to github.com/mistifyio/go-zfs/v3 (v3.0.0)\n\n    mikudeko (1):\n      Fix GetProperty always returning 'VALUE'\n\n## [2.1.1] - 2015-05-29\n\n### Fixed\n\n- Ignoring first pool listed\n- Incorrect `zfs get` argument ordering\n\n### Shortlog\n\n    Alexey Guskov (1):\n      zfs command uses different order of arguments on freebsd\n\n    Brian Akins (4):\n      test that ListZpools returns expected zpool\n      test error first\n      test error first\n      fix test to check correct return value\n\n    James Cunningham (1):\n      Fix Truncating First Zpool\n\n    Pat Norton (2):\n      Added Use of Go Tools\n      Update CONTRIBUTING.md\n\n## [2.1.0] - 2014-12-08\n\n### Added\n\n- Parse hardlink modification count returned from `zfs diff`\n\n### Fixed\n\n- Continuing instead of erroring when rolling back a non-snapshot\n\n### Shortlog\n\n    Brian Akins (2):\n      need to return the error here\n      use named struct fields\n\n    Jörg Thalheim (1):\n      zfs diff handle hardlinks modification now\n\n## [2.0.0] - 2014-12-02\n\n### Added\n\n- Flags for Destroy:\n  - DESTROY_DEFAULT\n  - DESTROY_DEFER_DELETION (`zfs destroy ... -d`)\n  - DESTROY_FORCE (`zfs destroy ... -f`)\n  - DESTROY_RECURSIVE_CLONES (`zfs destroy ... -R`)\n  - DESTROY_RECURSIVE (`zfs destroy ... -r`)\n  - etc\n- Diff method (`zfs diff`)\n- LogicalUsed and Origin properties to Dataset\n- Type constants for Dataset\n- State constants for Zpool\n- Logger interface\n- Improve documentation\n\n### Shortlog\n\n    Brian Akins (8):\n      remove reflection\n      style change for switches\n      need to check for error\n      keep in scope\n      go 1.3.3\n      golint cleanup\n      Just test if logical used is greater than 0, as this appears to be implementation specific\n      add docs to satisfy golint\n\n    Jörg Thalheim (8):\n      Add deferred flag to zfs.Destroy()\n      add Logicalused property\n      Add Origin property\n      gofmt\n      Add zfs.Diff\n      Add Logger\n      add recursive destroy with clones\n      use CamelCase-style constants\n\n    Matt Layher (4):\n      Improve documentation, document common ZFS operations, provide more references\n      Add zpool state constants, for easier health checking\n      Add dataset type constants, for easier type checking\n      Fix string split in command.Run(), use strings.Fields() instead of strings.Split()\n\n## [1.0.0] - 2014-11-12\n\n### Shortlog\n\n    Brian Akins (7):\n      add godoc badge\n      Add example\n      add information about zpool to struct and parser\n      Add Quota\n      add Children call\n      add Children call\n      fix snapshot tests\n\n    Brian Bickerton (3):\n      MIST-150 Change Snapshot second paramater from properties map[string][string] to recursive bool\n      MIST-150 Add Rollback method and related tests\n      MIST-160 Add SendSnapshot streaming method and tests\n\n    Matt Layher (1):\n      Add Error struct type and tests, enabling easier error return checking\n\n[3.0.0]: https://github.com/mistifyio/go-zfs/compare/v2.1.1...v3.0.0\n[2.1.1]: https://github.com/mistifyio/go-zfs/compare/v2.1.0...v2.1.1\n[2.1.0]: https://github.com/mistifyio/go-zfs/compare/v2.0.0...v2.1.0\n[2.0.0]: https://github.com/mistifyio/go-zfs/compare/v1.0.0...v2.0.0\n[1.0.0]: https://github.com/mistifyio/go-zfs/compare/v0.0.0...v1.0.0\n\n```\n\n----------------------------------------\n\nTITLE: Struct Tag Syntax Comparison between go-toml v1 and v2 - Go\nDESCRIPTION: Illustrates the change in struct tagging for TOML marshaling. In v1, multiple struct tags ('toml', 'multiline', 'omitempty') are used separately, whereas v2 combines them into a single 'toml' tag, comma-separated. Useful for developers migrating between library versions. Requires no special dependencies, and focuses on how fields are tagged within struct definitions for TOML encoding.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype doc struct {\n\t// v1\n\tF string `toml:\"field\" multiline:\"true\" omitempty:\"true\"`\n\t// v2\n\tF string `toml:\"field,multiline,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Help with s3fs - Shell\nDESCRIPTION: This command shows how to get help/documentation for the s3fs utility, which is a FUSE driver for mounting S3 buckets. Requires s3fs to be installed. Outputs help text and usage options.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ s3fs --help\n```\n\n----------------------------------------\n\nTITLE: Importing Docker Distribution Reference Library in Go\nDESCRIPTION: This snippet shows the import statement for the reference library, which provides functionality for parsing and formatting container image references.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/distribution/reference\n```\n\n----------------------------------------\n\nTITLE: Network Configuration Table for Podman\nDESCRIPTION: Mapping table showing Network section options and their corresponding podman network create commands\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n| **[Network] options**               | **podman network create equivalent**                            |\n|-------------------------------------|-----------------------------------------------------------------|\n|ContainersConfModule=/etc/nvd\\.conf | --module=/etc/nvd\\.conf                                         |\n|DisableDNS=true                     | --disable-dns                                                   |\n|DNS=192.168.55.1                    | --dns=192.168.55.1                                              |\n|Driver=bridge                       | --driver bridge                                                 |\n|Gateway=192.168.55.3                | --gateway 192.168.55.3                                          |\n|GlobalArgs=--log-level=debug        | --log-level=debug                                               |\n|Internal=true                       | --internal                                                      |\n|IPAMDriver=dhcp                     | --ipam-driver dhcp                                              |\n|IPRange=192.168.55.128/25           | --ip-range 192.168.55.128/25                                    |\n|IPv6=true                           | --ipv6                                                          |\n|Label=\"XYZ\"                         | --label \"XYZ\"                                                   |\n|NetworkDeleteOnStop=true            | Add ExecStopPost to delete the network when the unit is stopped |\n|NetworkName=foo                     | podman network create foo                                       |\n|Options=isolate=true                | --opt isolate=true                                              |\n|PodmanArgs=--dns=192.168.55.1       | --dns=192.168.55.1                                              |\n|Subnet=192.5.0.0/16                 | --subnet 192.5.0.0/16                                           |\n```\n\n----------------------------------------\n\nTITLE: Version Headers and Changes in Markdown\nDESCRIPTION: Markdown formatted changelog entries showing version numbers and associated changes, including bug fixes, features and improvements across multiple Buildah releases.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.9.1 (2019-07-12)\n    add: fix slow copy with no excludes\n    Add errcheck linter and fix missing error check\n    Improve tests/tools/Makefile parallelism and abstraction\n    Fix response body not closed resource leak\n```\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.9.0 (2019-06-15)\n    buildah-run: fix-out-of-range panic (2)\n    Bump back to v1.9.0-dev\n```\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.8.4 (2019-06-13)\n    Update containers/image to v2.0.0\n    run: fix hang with run and --isolation=chroot\n    run: fix hang when using run\n    chroot: drop unused function call\n```\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.8.3 (2019-06-04)\n    Add support for file secret mounts\n    Add ability to skip secrets in mounts file\n    allow 32bit builds\n    fix tutorial instructions\n```\n\n----------------------------------------\n\nTITLE: Installing go-sqlite3 Package in Go\nDESCRIPTION: This snippet shows how to install the go-sqlite3 package using the go get command. Note that this is a CGO-enabled package, requiring CGO_ENABLED=1 and a gcc compiler in the path.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/mattn/go-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Expected Output of the Go YAML Example\nDESCRIPTION: This block shows the standard output produced when the provided Go example code is executed. It includes the `fmt.Printf` outputs showing the Go struct and map representations after unmarshaling, followed by the YAML strings generated by marshaling them back.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/gopkg.in/yaml.v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n--- t:\n{Easy! {2 [3 4]}}\n\n--- t dump:\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n\n--- m:\nmap[a:Easy! b:map[c:2 d:[3 4]]]\n\n--- m dump:\na: Easy!\nb:\n  c: 2\n  d:\n  - 3\n  - 4\n```\n\n----------------------------------------\n\nTITLE: Excluding Paths in Git Validation\nDESCRIPTION: Demonstrates how to exclude specific paths from validation using the GIT_CHECK_EXCLUDE environment variable.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/vbatts/git-validation/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nvbatts@valse ~/src/vb/git-validation (master) $ GIT_CHECK_EXCLUDE=\"./vendor:./git/testdata\" git-validation -q -run dangling-whitespace\n...\n```\n\n----------------------------------------\n\nTITLE: OpenInRoot API Function Signatures\nDESCRIPTION: The OpenInRoot API provides secure methods to open files within a root directory, protecting against race attacks. These functions return O_PATH file descriptors that can be safely manipulated.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc OpenInRoot(root, unsafePath string) (*os.File, error)\nfunc OpenatInRoot(root *os.File, unsafePath string) (*os.File, error)\nfunc Reopen(handle *os.File, flags int) (*os.File, error)\n```\n\n----------------------------------------\n\nTITLE: Removing a Podman Container by ID - Shell\nDESCRIPTION: This command forcefully removes a stopped container from the system. It requires that the target container is not running. Used as a cleanup step after container operations. Success results in the container being deleted, with verification possible via 'podman ps -a'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman_tutorial.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npodman rm <container_id>\n```\n\n----------------------------------------\n\nTITLE: Listing Output Artifacts after Successful Build - Shell\nDESCRIPTION: Lists the contents of the ./out directory to verify build output after successfully building and packaging the guest agent. Assumes artifacts such as delta.tar.gz, initrd.img, and rootfs.tar.gz are generated. Requires shell access and a previous successful build process.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n> ls ./out/\ndelta.tar.gz  initrd.img  rootfs.tar.gz\n\n```\n\n----------------------------------------\n\nTITLE: Commit Reference Format in Podman PRs\nDESCRIPTION: Examples showing how to properly reference specific commits in PR descriptions or discussions. It demonstrates referencing by commit hash with summary and by PR number.\nSOURCE: https://github.com/containers/podman/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```\nCommit f641c2d9384e (\"fix bug in rm -fa parallel deletes\") [...]\nPR #00000\n```\n```\n\n----------------------------------------\n\nTITLE: Installing/Upgrading ICU Library on macOS using Bash\nDESCRIPTION: This command uses the Homebrew package manager (`brew`) on macOS to install or upgrade the `icu4c` package. This package provides the International Components for Unicode (ICU) libraries, which are required if you intend to compile the `go-sqlite3` package with the `icu` extension build tag (`-tags sqlite_icu`).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbrew upgrade icu4c\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Span from Parent Span in OpenTracing for Go\nDESCRIPTION: Demonstrates creating a span as a child of an existing parent span, carrying over the parent context. Requires OpenTracing Go and a parent span instance. Inputs: parentSpan and operation name; outputs: child span for tracking sub-operations. Parent context is linked using ChildOf option and the span is closed with defer.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n    func xyz(parentSpan opentracing.Span, ...) {\n        ...\n        sp := opentracing.StartSpan(\n            \"operation_name\",\n            opentracing.ChildOf(parentSpan.Context()))\n        defer sp.Finish()\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Pruning Volumes by Label in Podman\nDESCRIPTION: Example of selectively pruning volumes that match a specific label. This filters volumes by the specified label key-value pair before removal.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-prune.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman volume prune --filter label=mylabel=mylabelvalue\n```\n\n----------------------------------------\n\nTITLE: Running GolangCI-Lint Across Multiple GOOS and Modules - PowerShell\nDESCRIPTION: Automates running golangci-lint for both 'windows' and 'linux' GOOS targets across the root and 'test' Go modules using nested foreach loops. Requires PowerShell, golangci-lint, and the repository organized as described. Ensures code quality across all supported operating systems and modules.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-23_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nforeach ( $goos in ('windows', 'linux') ) {\n    foreach ( $repo in ('.', 'test') ) {\n        pwsh -Command \"cd $repo && go env -w GOOS=$goos && golangci-lint.exe run --verbose\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Struct Tags for Custom TOML Key Mapping - TOML\nDESCRIPTION: Provides an example of TOML using a key that does not directly match a Go struct field. This enables demonstration of struct tag annotation for custom mapping in Go. No direct dependencies; its purpose is as example input for Go decoding using struct tags. Input and output are as for other TOML snippets.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nsome_key_NAME = \"wat\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Other Users Access on FUSE Mount with s3fs - Shell\nDESCRIPTION: This snippet demonstrates creating a Podman volume with s3fs-fuse using the 'allow_other' option, enabling users other than the mounter to access the FUSE mount within containers. Includes running a container as user 'bin' and listing the mount without permission errors. Prerequisite: s3fs-fuse and Podman, careful use of 'allow_other' due to potential security trade-offs.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ podman volume create s3fs-fuse-other-volume -o type=fuse.s3fs -o device=bucket:/prefix -o o=allow_other,use_xattr,endpoint=aq-central-1\n$ podman run --user bin:bin -v s3fs-fuse-volume:/s3:z,U --rm -it fedora:latest\n$ ls /s3\n```\n\n----------------------------------------\n\nTITLE: Defining Podman Infra Container Command\nDESCRIPTION: Configuration option that specifies the command used to start the infrastructure container in a Podman pod. The default command is '/pause'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/infra-command.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--infra-command=command\n```\n\n----------------------------------------\n\nTITLE: Adding Fork Remote to OpenCensus Repository\nDESCRIPTION: Commands to navigate to the OpenCensus directory in your GOPATH and add your GitHub fork as a remote called 'fork'.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $(go env GOPATH)/src/go.opencensus.io\ngit remote add fork git@github.com:YOUR_GITHUB_USERNAME/opencensus-go.git\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex Named Route with Host, Path, and Query Variables in Go\nDESCRIPTION: Illustrates defining a named route ('article') in Go using `gorilla/mux` that includes matching conditions for the host (`{subdomain}.example.com`), path (`/articles/{category}/{id:[0-9]+}`), and query parameters (`filter={filter}`).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n```go\nr := mux.NewRouter()\nr.Host(\"{subdomain}.example.com\").\n  Path(\"/articles/{category}/{id:[0-9]+}\").\n  Queries(\"filter\", \"{filter}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n```\n```\n\n----------------------------------------\n\nTITLE: Running Build and Conformance Tests with Imagebuilder and Docker (Shell)\nDESCRIPTION: This shell script demonstrates how to prepare the environment and run comprehensive conformance tests for Imagebuilder by ensuring several base images are available locally, handling possible stale images, setting permissions, and invoking Go test suites with appropriate build tags and timeouts. Required prerequisites include a working Docker installation, permissions to pull images from various registries, and Go installed for running tests. Input requires network access for pulls; output is printed test results and confirmation of conformance. Limitations: Tests are slow and may require considerable bandwidth and local storage.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/openshift/imagebuilder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker rmi busybox; docker pull busybox\ndocker rmi alpine; docker pull alpine\ndocker rmi centos:7; docker pull centos:7\ndocker rmi registry.fedoraproject.org/fedora-minimal; docker pull registry.fedoraproject.org/fedora-minimal\ndocker rmi registry.fedoraproject.org/fedora-minimal:41-x86_64; docker pull registry.fedoraproject.org/fedora-minimal:41-x86_64\ndocker rmi registry.fedoraproject.org/fedora-minimal:41-aarch64; docker pull registry.fedoraproject.org/fedora-minimal:41-aarch64\nchmod -R go-w ./dockerclient/testdata\ngo test ./dockerclient -tags conformance -timeout 30m\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling Data with Standard Go 'encoding/json'\nDESCRIPTION: This snippet illustrates the standard Go method for unmarshaling JSON input into a Go data structure using the 'encoding/json' package. It involves importing the package and calling 'json.Unmarshal' with the JSON input (byte slice) and a pointer to the target data structure.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"encoding/json\"\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Unmounting Multiple Images by IDs Using Podman CLI - Shell\nDESCRIPTION: Shows how to unmount several images at once by listing their IDs as arguments to the 'podman image unmount' command. Requires Podman and multiple images already mounted. Parameters 'imageID1', 'imageID2', 'imageID3' represent the images to be unmounted; all specified images will have their root filesystems unmounted as per Podman's mount counter logic.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-unmount.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npodman image unmount imageID1 imageID2 imageID3\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple KSUIDs via CLI\nDESCRIPTION: This shell command executes the `ksuid` tool with the `-n` flag followed by the number `4`. This instructs the tool to generate four new KSUIDs and print each one on a new line to standard output.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/segmentio/ksuid/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -n 4\n0ujsszwN8NRY24YaXiTIE2VWDTS\n0ujsswThIGTUYm2K8FjOOfXtY1K\n0ujssxh0cECutqzMgbtXSGnjorm\n0ujsszgFvbiEr7CDgE3z8MAUPFt\n```\n\n----------------------------------------\n\nTITLE: Overriding Container Image for a Quadlet Instance - systemd unit drop-in file - ini\nDESCRIPTION: This drop-in configuration for a specific instance of a templated Podman Quadlet service (e.g., sleep@10.container.d/10-image.conf) overrides the default container image defined in the base template. By providing a new Image directive inside the [Container] section, this configuration allows a particular instance to run with a different container image. Useful for customizing just one variation of a service while leaving other instances unaffected.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[Container]\\nImage=quay.io/centos/centos\n```\n\n----------------------------------------\n\nTITLE: Custom IsNotExist Implementation in Go\nDESCRIPTION: Implementation of custom IsNotExist function to properly handle ENOTDIR errors within SecureJoin operation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/cyphar/filepath-securejoin/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nENOTDIR\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Flag with pflag\nDESCRIPTION: This example demonstrates how to define an integer flag using pflag. It creates a flag named \"flagname\" with a default value of 1234 and a help message.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication File for Podman Image Pull in Quadlet\nDESCRIPTION: Specifies the path of the authentication file to be used for image pulling. This corresponds to the '--authfile' option in Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_40\n\nLANGUAGE: ini\nCODE:\n```\nAuthFile=\n```\n\n----------------------------------------\n\nTITLE: Defining Command Line Options with Struct Tags in Go\nDESCRIPTION: This snippet shows how to define command line options using struct field tags. It demonstrates specifying short and long option names, as well as descriptions.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/jessevdk/go-flags/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Options struct {\n\tVerbose []bool `short:\"v\" long:\"verbose\" description:\"Show verbose debug information\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Release Tags to OpenTelemetry Go Modules\nDESCRIPTION: Command to add release tags to the appropriate commit for each module set being released, with an optional parameter to specify a specific commit hash.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\n```\n\n----------------------------------------\n\nTITLE: Triggering GitHub Actions for Podman Releases via CLI\nDESCRIPTION: Command for triggering GitHub workflow actions after publishing a release. This command uses the GitHub CLI to start the specified action with the version parameter.\nSOURCE: https://github.com/containers/podman/blob/main/RELEASE_PROCESS.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh workflow run \"ACTION NAME\" -F version=\"vX.Y.Z\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Logrus Syslog Hook for Local Logging (Go)\nDESCRIPTION: This snippet shows how to configure the Logrus Syslog hook to connect to the local system's Syslog daemon (e.g., '/dev/log'). It uses `lSyslog.NewSyslogHook` but passes empty strings for the network and address parameters. This signals the hook to use the default local Syslog connection. The log priority (`syslog.LOG_INFO`) and tag (empty string) are also specified. The created hook is added to the Logrus logger if initialization succeeds.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/hooks/syslog/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"log/syslog\"\n  \"github.com/sirupsen/logrus\"\n  lSyslog \"github.com/sirupsen/logrus/hooks/syslog\"\n)\n\nfunc main() {\n  log       := logrus.New()\n  hook, err := lSyslog.NewSyslogHook(\"\", \"\", syslog.LOG_INFO, \"\")\n\n  if err == nil {\n    log.Hooks.Add(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Git Commit Sign-off Line\nDESCRIPTION: Illustrates the required format for the 'Signed-off-by' line added to every git commit message when contributing. Replace 'Joe Smith <joe.smith@email.com>' with your real name and email address. This line certifies agreement with the Developer Certificate of Origin.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    Signed-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Using Host Environment in Podman Containers\nDESCRIPTION: The --env-host option allows the use of the host environment inside a container. This option is not available for remote Podman clients, including Mac and Windows (except WSL2) machines. The file notes that environment precedence should be considered when using this option.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/env-host.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--env-host**\n\nUse host environment inside of the container. See **Environment** note below for precedence. (This option is not available with the remote Podman client, including Mac and Windows (excluding WSL2) machines)\n```\n\n----------------------------------------\n\nTITLE: Defining Cgroup v1 Statistics Messages using Protocol Buffers\nDESCRIPTION: This Protocol Buffer definition outlines the structure for collecting and serializing cgroup v1 statistics. The main `Metrics` message acts as a container for various specific statistic types like `HugetlbStat`, `PidsStat`, `CPUStat`, `MemoryStat`, `BlkIOStat`, `RdmaStat`, `NetworkStat`, `CgroupStats`, and `MemoryOomControl`. Each nested message type defines fields (mostly optional `uint64`) corresponding to specific metrics available within the respective cgroup controller (e.g., memory usage, limits, CPU time, I/O operations). This structure facilitates standardized reporting of container resource usage.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nfile {\n  name: \"github.com/containerd/cgroups/cgroup1/stats/metrics.proto\"\n  package: \"io.containerd.cgroups.v1\"\n  message_type {\n    name: \"Metrics\"\n    field {\n      name: \"hugetlb\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.HugetlbStat\"\n      json_name: \"hugetlb\"\n    }\n    field {\n      name: \"pids\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.PidsStat\"\n      json_name: \"pids\"\n    }\n    field {\n      name: \"cpu\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.CPUStat\"\n      json_name: \"cpu\"\n    }\n    field {\n      name: \"memory\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryStat\"\n      json_name: \"memory\"\n    }\n    field {\n      name: \"blkio\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOStat\"\n      json_name: \"blkio\"\n    }\n    field {\n      name: \"rdma\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.RdmaStat\"\n      json_name: \"rdma\"\n    }\n    field {\n      name: \"network\"\n      number: 7\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.NetworkStat\"\n      json_name: \"network\"\n    }\n    field {\n      name: \"cgroup_stats\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.CgroupStats\"\n      json_name: \"cgroupStats\"\n    }\n    field {\n      name: \"memory_oom_control\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryOomControl\"\n      json_name: \"memoryOomControl\"\n    }\n  }\n  message_type {\n    name: \"HugetlbStat\"\n    field {\n      name: \"usage\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"usage\"\n    }\n    field {\n      name: \"max\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"max\"\n    }\n    field {\n      name: \"failcnt\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"failcnt\"\n    }\n    field {\n      name: \"pagesize\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"pagesize\"\n    }\n  }\n  message_type {\n    name: \"PidsStat\"\n    field {\n      name: \"current\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"current\"\n    }\n    field {\n      name: \"limit\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"limit\"\n    }\n  }\n  message_type {\n    name: \"CPUStat\"\n    field {\n      name: \"usage\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.CPUUsage\"\n      json_name: \"usage\"\n    }\n    field {\n      name: \"throttling\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.Throttle\"\n      json_name: \"throttling\"\n    }\n  }\n  message_type {\n    name: \"CPUUsage\"\n    field {\n      name: \"total\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"total\"\n    }\n    field {\n      name: \"kernel\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"kernel\"\n    }\n    field {\n      name: \"user\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"user\"\n    }\n    field {\n      name: \"per_cpu\"\n      number: 4\n      label: LABEL_REPEATED\n      type: TYPE_UINT64\n      json_name: \"perCpu\"\n    }\n  }\n  message_type {\n    name: \"Throttle\"\n    field {\n      name: \"periods\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"periods\"\n    }\n    field {\n      name: \"throttled_periods\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"throttledPeriods\"\n    }\n    field {\n      name: \"throttled_time\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"throttledTime\"\n    }\n  }\n  message_type {\n    name: \"MemoryStat\"\n    field {\n      name: \"cache\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"cache\"\n    }\n    field {\n      name: \"rss\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"rss\"\n    }\n    field {\n      name: \"rss_huge\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"rssHuge\"\n    }\n    field {\n      name: \"mapped_file\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"mappedFile\"\n    }\n    field {\n      name: \"dirty\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"dirty\"\n    }\n    field {\n      name: \"writeback\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"writeback\"\n    }\n    field {\n      name: \"pg_pg_in\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgPgIn\"\n    }\n    field {\n      name: \"pg_pg_out\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgPgOut\"\n    }\n    field {\n      name: \"pg_fault\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgFault\"\n    }\n    field {\n      name: \"pg_maj_fault\"\n      number: 10\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"pgMajFault\"\n    }\n    field {\n      name: \"inactive_anon\"\n      number: 11\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"inactiveAnon\"\n    }\n    field {\n      name: \"active_anon\"\n      number: 12\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"activeAnon\"\n    }\n    field {\n      name: \"inactive_file\"\n      number: 13\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"inactiveFile\"\n    }\n    field {\n      name: \"active_file\"\n      number: 14\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"activeFile\"\n    }\n    field {\n      name: \"unevictable\"\n      number: 15\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"unevictable\"\n    }\n    field {\n      name: \"hierarchical_memory_limit\"\n      number: 16\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"hierarchicalMemoryLimit\"\n    }\n    field {\n      name: \"hierarchical_swap_limit\"\n      number: 17\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"hierarchicalSwapLimit\"\n    }\n    field {\n      name: \"total_cache\"\n      number: 18\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalCache\"\n    }\n    field {\n      name: \"total_rss\"\n      number: 19\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalRss\"\n    }\n    field {\n      name: \"total_rss_huge\"\n      number: 20\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalRssHuge\"\n    }\n    field {\n      name: \"total_mapped_file\"\n      number: 21\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalMappedFile\"\n    }\n    field {\n      name: \"total_dirty\"\n      number: 22\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalDirty\"\n    }\n    field {\n      name: \"total_writeback\"\n      number: 23\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalWriteback\"\n    }\n    field {\n      name: \"total_pg_pg_in\"\n      number: 24\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalPgPgIn\"\n    }\n    field {\n      name: \"total_pg_pg_out\"\n      number: 25\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalPgPgOut\"\n    }\n    field {\n      name: \"total_pg_fault\"\n      number: 26\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalPgFault\"\n    }\n    field {\n      name: \"total_pg_maj_fault\"\n      number: 27\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalPgMajFault\"\n    }\n    field {\n      name: \"total_inactive_anon\"\n      number: 28\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalInactiveAnon\"\n    }\n    field {\n      name: \"total_active_anon\"\n      number: 29\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalActiveAnon\"\n    }\n    field {\n      name: \"total_inactive_file\"\n      number: 30\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalInactiveFile\"\n    }\n    field {\n      name: \"total_active_file\"\n      number: 31\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalActiveFile\"\n    }\n    field {\n      name: \"total_unevictable\"\n      number: 32\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"totalUnevictable\"\n    }\n    field {\n      name: \"usage\"\n      number: 33\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryEntry\"\n      json_name: \"usage\"\n    }\n    field {\n      name: \"swap\"\n      number: 34\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryEntry\"\n      json_name: \"swap\"\n    }\n    field {\n      name: \"kernel\"\n      number: 35\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryEntry\"\n      json_name: \"kernel\"\n    }\n    field {\n      name: \"kernel_tcp\"\n      number: 36\n      label: LABEL_OPTIONAL\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.MemoryEntry\"\n      json_name: \"kernelTcp\"\n    }\n  }\n  message_type {\n    name: \"MemoryEntry\"\n    field {\n      name: \"limit\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"limit\"\n    }\n    field {\n      name: \"usage\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n\n```\n\n----------------------------------------\n\nTITLE: Executing Project Tests via Makefile (Shell)\nDESCRIPTION: Invokes the `test` target defined in the project's Makefile. This command typically orchestrates the execution of the test suite, potentially including setup, teardown, or specific test configurations beyond a simple `go test`. Requires the `make` utility and a properly configured Makefile.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Composing Example Git Commit Messages in Plaintext\nDESCRIPTION: This snippet demonstrates the structure and formatting of a well-formed Git commit message, including a concise summary, a detailed body, bullet points, and references to issues. It illustrates how to communicate the intent and details of a code change following widely accepted commit message conventions. No dependencies are required; it serves as a guide for manual creation of commit messages within Git.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sigstore/rekor/CONTRIBUTORS.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSummarize changes in around 50 characters or less\n\nMore detailed explanatory text, if necessary. Wrap it to about 72\ncharacters or so. In some contexts, the first line is treated as the\nsubject of the commit and the rest of the text as the body. The\nblank line separating the summary from the body is critical (unless\nyou omit the body entirely); various tools like `log`, `shortlog`\nand `rebase` can get confused if you run the two together.\n\nExplain the problem that this commit is solving. Focus on why you\nare making this change as opposed to how (the code explains that).\nAre there side effects or other unintuitive consequences of this\nchange? Here's the place to explain them.\n\nFurther paragraphs come after blank lines.\n\n - Bullet points are okay, too\n\n - Typically a hyphen or asterisk is used for the bullet, preceded\n   by a single space, with blank lines in between, but conventions\n   vary here\n\nIf you use an issue tracker, put references to them at the bottom,\nlike this:\n\nResolves: #123\nSee also: #456, #789\n```\n\n----------------------------------------\n\nTITLE: Building Podman Documentation\nDESCRIPTION: Command to build Podman's manpages using the Makefile. The built documentation is placed in the docs/build/man directory.\nSOURCE: https://github.com/containers/podman/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ make docs\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text\nDESCRIPTION: The complete text of the Developer Certificate of Origin version 1.1 that contributors must agree to when making contributions to the project. This certificate ensures contributors have the right to submit their code under the project's open source license.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/docker/go-units/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Using ForEach in BoltDB with Go\nDESCRIPTION: This snippet shows how to use the ForEach() function to iterate over all keys in a bucket when you know you'll be processing all keys.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\t// Assume bucket exists and has keys\n\tb := tx.Bucket([]byte(\"MyBucket\"))\n\n\tb.ForEach(func(k, v []byte) error {\n\t\tfmt.Printf(\"key=%s, value=%s\\n\", k, v)\n\t\treturn nil\n\t})\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Using syscall.ELOOP for Symlink Error Handling in Go\nDESCRIPTION: Updated error handling to use syscall.ELOOP as the base error for symlink loops instead of internal error implementation to enable better error checking with errors.Is().\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/cyphar/filepath-securejoin/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nsyscall.ELOOP\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah Dependencies on openSUSE\nDESCRIPTION: Command to install all required dependencies for building Buildah from source on openSUSE Tumbleweed.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nzypper in make \\\n    git \\\n    golang \\\n    runc \\\n    bzip2 \\\n    libgpgme-devel \\\n    libseccomp-devel \\\n    libbtrfs-devel \\\n    go-md2man\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Issue Reference - Shell\nDESCRIPTION: Shows how to make a commit in Git with a message referencing an issue number, following project commit message conventions. Assumes the user has staged changes and helps title commits efficiently for traceability in the go-zfs project.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -m \"Issue #<issue-number> - <commit-message>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging and Compression with Gorilla Handlers in Go\nDESCRIPTION: This Go code demonstrates how to use the gorilla/handlers package to wrap an HTTP server with request logging and gzip compression. The LoggingHandler middleware logs incoming requests to stdout for the /admin route, while CompressHandler is applied globally to gzip all responses. Required dependencies are the Go standard net/http package and github.com/gorilla/handlers; ensure these are available in your environment. Key parameters include the HTTP handler and output stream for logging. The snippet expects customary HTTP ListenAndServe arguments and outputs logs and compressed HTTP responses. This approach is suitable for building middleware stacks in Go HTTP servers.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/gorilla/handlers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"net/http\"\n    \"github.com/gorilla/handlers\"\n)\n\nfunc main() {\n    r := http.NewServeMux()\n\n    // Only log requests to our admin dashboard to stdout\n    r.Handle(\"/admin\", handlers.LoggingHandler(os.Stdout, http.HandlerFunc(ShowAdminDashboard)))\n    r.HandleFunc(\"/\", ShowIndex)\n\n    // Wrap our server with our gzip handler to gzip compress all responses.\n    http.ListenAndServe(\":8000\", handlers.CompressHandler(r))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Multi-line Strings (Heredoc)\nDESCRIPTION: Demonstrates the syntax for defining multi-line strings in HCL using here documents. The string starts with `<<MARKER` at the end of a line (where `MARKER` can be any identifier, like `FOO`) and ends when the `MARKER` appears on a line by itself.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/hashicorp/hcl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<<FOO\nhello\nworld\nFOO\n```\n\n----------------------------------------\n\nTITLE: Matching Request Headers using Regex with Gorilla Mux in Go\nDESCRIPTION: Shows how to use the `HeadersRegexp()` method on a `gorilla/mux` route to match incoming requests based on a regular expression applied to a specific header (e.g., `Content-Type` matching `application/text` or `application/json`).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n```go\nr.HeadersRegexp(\"Content-Type\", \"application/(text|json)\")\n```\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test Method\nDESCRIPTION: Command showing how to run a specific individual test method within a test class, useful for focusing on a particular functionality.\nSOURCE: https://github.com/containers/podman/blob/main/test/python/docker/compat/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# python3 -m unittest test.python.docker.compat.test_images.TestImages.test_tag_valid_image\n```\n\n----------------------------------------\n\nTITLE: Update System CA Trust Store (Alternative Method)\nDESCRIPTION: Runs the `update-ca-trust` command after creating the certificate file(s) using `vi`. This integrates the manually created certificate(s) into the Podman machine's system-wide trust store.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n[root@localhost anchors]# update-ca-trust\n```\n\n----------------------------------------\n\nTITLE: Implementing SecureJoin Using chroot on GNU/Linux\nDESCRIPTION: A trivial implementation of SecureJoin using chroot and readlink to canonicalize paths. This example requires root privileges and is provided for illustrative purposes, showing how the securejoin functionality works conceptually.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage securejoin\n\nimport (\n\t\"os/exec\"\n\t\"path/filepath\"\n)\n\nfunc SecureJoin(root, unsafePath string) (string, error) {\n\tunsafePath = string(filepath.Separator) + unsafePath\n\tcmd := exec.Command(\"chroot\", root,\n\t\t\"readlink\", \"--canonicalize-missing\", \"--no-newline\", unsafePath)\n\toutput, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\texpanded := string(output)\n\treturn filepath.Join(root, expanded), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Farm Name for Podman Farm Build\nDESCRIPTION: This configuration option allows users to specify the name of the farm to be used in the Podman farm build process. It is crucial for identifying which farm environment should be utilized during the build.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/farm.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--farm**\n```\n\n----------------------------------------\n\nTITLE: Default containers.conf Path (Linux/Mac)\nDESCRIPTION: Specifies the default location of the `containers.conf` file on Linux and macOS systems. This file contains configuration settings for Podman, including remote connections.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n$HOME/.config/containers/containers.conf\n```\n\n----------------------------------------\n\nTITLE: Sanitizing OpenTelemetry Instrument Names in Prometheus Exporter\nDESCRIPTION: The Prometheus exporter now sanitizes OpenTelemetry instrument names when exporting, replacing invalid characters with underscores.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nThe Prometheus exporter sanitizes OpenTelemetry instrument names when exporting.\nInvalid characters are replaced with `_`.\n```\n\n----------------------------------------\n\nTITLE: SecureJoinVFS API Implementation in Go\nDESCRIPTION: New API implementation for mocking and custom handling of lookup operations, particularly useful for rootless containers lacking CAP_DAC_READ_SEARCH or CAP_DAC_OVERRIDE capabilities.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/cyphar/filepath-securejoin/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nSecureJoinVFS\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateful Authentication Middleware in Go\nDESCRIPTION: Defines a struct `authenticationMiddleware` with associated methods (`Populate`, `Middleware`) to create a stateful authentication middleware in Go. The `Middleware` method checks for a token in the 'X-Session-Token' header, validates it against an internal map, and either passes the request down or returns a Forbidden error.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n```go\n// Define our struct\ntype authenticationMiddleware struct {\n\ttokenUsers map[string]string\n}\n\n// Initialize it somewhere\nfunc (amw *authenticationMiddleware) Populate() {\n\tamw.tokenUsers[\"00000000\"] = \"user0\"\n\tamw.tokenUsers[\"aaaaaaaa\"] = \"userA\"\n\tamw.tokenUsers[\"05f717e5\"] = \"randomUser\"\n\tamw.tokenUsers[\"deadbeef\"] = \"user0\"\n}\n\n// Middleware function, which will be called for each request\nfunc (amw *authenticationMiddleware) Middleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        token := r.Header.Get(\"X-Session-Token\")\n\n        if user, found := amw.tokenUsers[token]; found {\n        \t// We found the token in our map\n        \tlog.Printf(\"Authenticated user %s\\n\", user)\n        \t// Pass down the request to the next middleware (or final handler)\n        \tnext.ServeHTTP(w, r)\n        } else {\n        \t// Write an error and stop the handler chain\n        \thttp.Error(w, \"Forbidden\", http.StatusForbidden)\n        }\n    })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing TextFormatter Configuration - Go\nDESCRIPTION: This Go code snippet shows how to configure the TextFormatter for Logrus by disabling colors and enabling full timestamps in log output. The configuration is set programmatically using SetFormatter with desired options. Dependencies include the Logrus package. There are no required parameters; expected input is log statements, and the output is colored or plain text logs depending on the options.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\tlog.SetFormatter(&log.TextFormatter{\\n\t\tDisableColors: true,\\n\t\tFullTimestamp: true,\\n\t})\n```\n\n----------------------------------------\n\nTITLE: Passing global arguments to podman in Kubernetes Quadlet\nDESCRIPTION: Demonstrates how to pass arguments between 'podman' and 'kube' commands in the generated service file, allowing access to Podman features not directly supported by the Quadlet generator.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nGlobalArgs=--log-level=debug\n```\n\n----------------------------------------\n\nTITLE: Update System CA Trust Store\nDESCRIPTION: Executes the `update-ca-trust` command. This utility consolidates CA certificates from various sources, including the `/etc/pki/ca-trust/source/anchors` directory, and updates the system-wide trust store, making the newly added certificates available to applications within the Podman machine.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n[root@localhost anchors]# update-ca-trust\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository Fork and Entering Directory (Shell)\nDESCRIPTION: Downloads a copy (clone) of the specified Git repository (replace `your_username` with the actual GitHub username) to the local machine and then navigates the shell's current working directory into the created `cobra` folder. This is the standard first step for working on a forked project locally. Requires `git` to be installed.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/your_username/cobra && cd cobra\n```\n\n----------------------------------------\n\nTITLE: Importing Container Storage Library in Go\nDESCRIPTION: This snippet shows the import statements for the storage library, which provides functionality for managing container storage, including various storage drivers, archiving, and filesystem operations.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/containers/storage\ngithub.com/containers/storage/drivers\ngithub.com/containers/storage/drivers/aufs\ngithub.com/containers/storage/drivers/btrfs\ngithub.com/containers/storage/drivers/copy\ngithub.com/containers/storage/drivers/overlay\ngithub.com/containers/storage/drivers/overlayutils\ngithub.com/containers/storage/drivers/quota\ngithub.com/containers/storage/drivers/register\ngithub.com/containers/storage/drivers/vfs\ngithub.com/containers/storage/drivers/windows\ngithub.com/containers/storage/drivers/zfs\ngithub.com/containers/storage/internal/dedup\ngithub.com/containers/storage/pkg/archive\ngithub.com/containers/storage/pkg/chrootarchive\ngithub.com/containers/storage/pkg/chunked\ngithub.com/containers/storage/pkg/chunked/compressor\ngithub.com/containers/storage/pkg/chunked/dump\ngithub.com/containers/storage/pkg/chunked/internal/minimal\ngithub.com/containers/storage/pkg/chunked/internal/path\ngithub.com/containers/storage/pkg/chunked/toc\ngithub.com/containers/storage/pkg/config\ngithub.com/containers/storage/pkg/directory\ngithub.com/containers/storage/pkg/fileutils\ngithub.com/containers/storage/pkg/fsutils\ngithub.com/containers/storage/pkg/fsverity\ngithub.com/containers/storage/pkg/homedir\ngithub.com/containers/storage/pkg/idmap\ngithub.com/containers/storage/pkg/idtools\ngithub.com/containers/storage/pkg/ioutils\ngithub.com/containers/storage/pkg/locker\ngithub.com/containers/storage/pkg/lockfile\ngithub.com/containers/storage/pkg/longpath\ngithub.com/containers/storage/pkg/loopback\ngithub.com/containers/storage/pkg/mount\ngithub.com/containers/storage/pkg/parsers\ngithub.com/containers/storage/pkg/pools\ngithub.com/containers/storage/pkg/promise\ngithub.com/containers/storage/pkg/reexec\ngithub.com/containers/storage/pkg/regexp\ngithub.com/containers/storage/pkg/stringid\ngithub.com/containers/storage/pkg/stringutils\ngithub.com/containers/storage/pkg/system\ngithub.com/containers/storage/pkg/tarlog\ngithub.com/containers/storage/pkg/truncindex\ngithub.com/containers/storage/pkg/unshare\ngithub.com/containers/storage/types\n```\n\n----------------------------------------\n\nTITLE: Enabling User Linger for Persistent Socket\nDESCRIPTION: Command to enable linger for the current user, which allows the Podman socket to remain active even when the user is not logged in to the Linux server.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/mac_win_client.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo loginctl enable-linger $USER\n```\n\n----------------------------------------\n\nTITLE: Using Logrus Logging Levels in Go\nDESCRIPTION: This snippet shows the different logging levels available in Logrus (Trace, Debug, Info, Warning, Error, Fatal, Panic) and how to use them. It also demonstrates how to set the global logging level.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nlog.Trace(\"Something very low level.\")\nlog.Debug(\"Useful debugging information.\")\nlog.Info(\"Something noteworthy happened!\")\nlog.Warn(\"You should probably take a look at this.\")\nlog.Error(\"Something failed but I'm not quitting.\")\n// Calls os.Exit(1) after logging\nlog.Fatal(\"Bye.\")\n// Calls panic() after logging\nlog.Panic(\"I'm bailing.\")\n```\n\n----------------------------------------\n\nTITLE: Adding Standard Go Flags to a pflag FlagSet in Go\nDESCRIPTION: Illustrates how to incorporate flags defined using Go's standard `flag` package into a `pflag` `FlagSet`. This is done by calling `flag.CommandLine.AddGoFlagSet(goflag.CommandLine)`, passing the standard library's default `FlagSet`. This ensures compatibility with third-party libraries that might define flags using the standard package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding a pflag Flag from Help Text in Go\nDESCRIPTION: Demonstrates how to hide a flag from usage and help messages using `flags.MarkHidden()`. The function takes the name of the flag to hide (\"secretFlag\"). The flag remains fully functional but is not advertised to users.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// hide a flag by specifying its name\nflags.MarkHidden(\"secretFlag\")\n```\n\n----------------------------------------\n\nTITLE: Setting up macOS Apple Hypervisor for Podman machine tests\nDESCRIPTION: Bash commands to install dependencies and run Podman machine tests on macOS using the Apple Hypervisor virtualization.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/machine/e2e/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install vfkit\nmake podman-remote\nmake localmachine\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin (DCO) v1.1 Text\nDESCRIPTION: The full text of the Developer Certificate of Origin Version 1.1. Signing off on a commit certifies agreement with these terms, ensuring the contributor has the right to submit the work under the project's open-source license.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Adding Global Arguments to Podman Image Pull in Quadlet\nDESCRIPTION: Allows passing additional arguments between 'podman' and 'image' commands. Arguments can be space-separated and escaped to include whitespace. This key can be listed multiple times.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_45\n\nLANGUAGE: ini\nCODE:\n```\nGlobalArgs=\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah on Gentoo\nDESCRIPTION: Command to install Buildah on Gentoo using the emerge package manager.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo emerge app-containers/buildah\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Containers Code of Conduct\nDESCRIPTION: Markdown link referencing the Containers Community Code of Conduct document that applies to the OCIcrypt Library project.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/ocicrypt/CODE-OF-CONDUCT.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## The OCIcrypt Library Project Community Code of Conduct\n\nThe OCIcrypt Library project follows the [Containers Community Code of Conduct](https://github.com/containers/common/blob/main/CODE-OF-CONDUCT.md).\n```\n\n----------------------------------------\n\nTITLE: Installing bbolt Using Go Get Command\nDESCRIPTION: Command for retrieving the bbolt library using Go's package management. This will update go.mod and go.sum files with the latest version of bbolt.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get go.etcd.io/bbolt@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger Exporter Environment Variables in Go\nDESCRIPTION: Environment variables for overriding Jaeger agent hostname and port in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\nOTEL_EXPORTER_JAEGER_AGENT_HOST\nOTEL_EXPORTER_JAEGER_AGENT_PORT\n```\n\n----------------------------------------\n\nTITLE: Creating RHEL 8 Systemd Hook for Podman Network Reload (dbus-monitor)\nDESCRIPTION: This systemd unit provides a firewalld hook specifically for RHEL 8, using `dbus-monitor` as an alternative to `busctl`. It monitors D-Bus signals for firewalld startup (`NameAcquired`) and reloads (`Reloaded`) by parsing the output of `dbus-monitor` with `sed` and a bash `while` loop. When either event is detected, it executes `podman network reload --all` to restore Podman's NAT rules, addressing potential limitations or issues with `busctl` on RHEL 8.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Redo podman NAT rules after firewalld starts or reloads\nWants=dbus.service\nAfter=dbus.service\nRequires=firewalld.service\n\n[Service]\nType=simple\nExecStart=/bin/bash -c \"dbus-monitor --profile --system 'type=signal,sender=org.freedesktop.DBus,path=/org/freedesktop/DBus,interface=org.freedesktop.DBus,member=NameAcquired,arg0=org.fedoraproject.FirewallD1' 'type=signal,path=/org/fedoraproject/FirewallD1,interface=org.fedoraproject.FirewallD1,member=Reloaded' | sed -u '/^#/d' | while read -r type timestamp serial sender destination path interface member _junk; do if [[ $type = '#'* ]]; then continue; elif [[ $interface = org.freedesktop.DBus && $member = NameAcquired ]]; then echo 'firewalld started'; podman network reload --all; elif [[ $interface = org.fedoraproject.FirewallD1 && $member = Reloaded ]]; then echo 'firewalld reloaded'; podman network reload --all; fi; done\"\nRestart=Always\n\n[Install]\nWantedBy=default.target\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom pflag Flag using flag.Var in Go\nDESCRIPTION: Shows how to register a custom flag type that satisfies the `pflag.Value` interface. The `flag.Var()` function is used, taking a pointer to the custom flag variable (`flagVal`), the flag name, and a help message. The initial value of the variable serves as the default.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Handling Unrecognized Namespace Mode in Older Podman Versions\nDESCRIPTION: Shows how to work around the \"unrecognized namespace mode\" error in Podman versions older than 4.3.0 when using --userns keep-id with uid and gid options. The solution uses --uidmap and --gidmap options to achieve the same UID and GID mapping.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\n$ uid=1000\n$ gid=1000\n$ podman run --rm\n  --user $uid:$gid \\\n  --userns keep-id:uid=$uid,gid=$gid \\\n     docker.io/library/ubuntu /bin/cat /proc/self/uid_map\nError: unrecognized namespace mode keep-id:uid=1000,gid=1000 passed\n$\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ uid=1000\n$ gid=1000\n$ subuidSize=$(( $(podman info --format \"{{ range \\\n   .Host.IDMappings.UIDMap }}+{{.Size }}{{end }}\" ) - 1 ))\n$ subgidSize=$(( $(podman info --format \"{{ range \\\n   .Host.IDMappings.GIDMap }}+{{.Size }}{{end }}\" ) - 1 ))\n$ podman run --rm \\\n  --user $uid:$gid \\\n  --uidmap 0:1:$uid \\\n  --uidmap $uid:0:1 \\\n  --uidmap $(($uid+1)):$(($uid+1)):$(($subuidSize-$uid)) \\\n  --gidmap 0:1:$gid \\\n  --gidmap $gid:0:1 \\\n  --gidmap $(($gid+1)):$(($gid+1)):$(($subgidSize-$gid)) \\\n     docker.io/library/ubuntu /bin/cat /proc/self/uid_map\n         0          1       1000\n      1000          0          1\n      1001       1001      64536\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ uid=1000\n$ gid=1000\n$ podman run --rm \\\n  --user $uid:$gid \\\n  --userns keep-id:uid=$uid,gid=$gid \\\n     docker.io/library/ubuntu /bin/cat /proc/self/uid_map\n         0          1       1000\n      1000          0          1\n      1001       1001      64536\n```\n\n----------------------------------------\n\nTITLE: Unsetting Environment Variables in Podman Containers\nDESCRIPTION: The --unsetenv option allows users to unset default environment variables for Podman containers. This includes variables provided by Podman, configured by the image, and from containers.conf.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/unsetenv.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--unsetenv**=*env*\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Options in Go\nDESCRIPTION: Implementation of options using a functional approach with closures.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Container Image Handling Libraries in Go\nDESCRIPTION: This snippet shows the import statements for various container image handling libraries from the github.com/containers/image/v5 package. These libraries provide functionality for copying, manipulating, and managing container images across different formats and storage systems.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/containers/image/v5/copy\ngithub.com/containers/image/v5/directory\ngithub.com/containers/image/v5/directory/explicitfilepath\ngithub.com/containers/image/v5/docker\ngithub.com/containers/image/v5/docker/archive\ngithub.com/containers/image/v5/docker/daemon\ngithub.com/containers/image/v5/docker/internal/tarfile\ngithub.com/containers/image/v5/docker/policyconfiguration\ngithub.com/containers/image/v5/docker/reference\ngithub.com/containers/image/v5/image\ngithub.com/containers/image/v5/internal/blobinfocache\ngithub.com/containers/image/v5/internal/image\ngithub.com/containers/image/v5/internal/imagedestination\ngithub.com/containers/image/v5/internal/imagedestination/impl\ngithub.com/containers/image/v5/internal/imagedestination/stubs\ngithub.com/containers/image/v5/internal/imagesource\ngithub.com/containers/image/v5/internal/imagesource/impl\ngithub.com/containers/image/v5/internal/imagesource/stubs\ngithub.com/containers/image/v5/internal/iolimits\ngithub.com/containers/image/v5/internal/manifest\ngithub.com/containers/image/v5/internal/multierr\ngithub.com/containers/image/v5/internal/pkg/platform\ngithub.com/containers/image/v5/internal/private\ngithub.com/containers/image/v5/internal/putblobdigest\ngithub.com/containers/image/v5/internal/rootless\ngithub.com/containers/image/v5/internal/set\ngithub.com/containers/image/v5/internal/signature\ngithub.com/containers/image/v5/internal/signer\ngithub.com/containers/image/v5/internal/streamdigest\ngithub.com/containers/image/v5/internal/tmpdir\ngithub.com/containers/image/v5/internal/unparsedimage\ngithub.com/containers/image/v5/internal/uploadreader\ngithub.com/containers/image/v5/internal/useragent\ngithub.com/containers/image/v5/manifest\ngithub.com/containers/image/v5/oci/archive\ngithub.com/containers/image/v5/oci/internal\ngithub.com/containers/image/v5/oci/layout\ngithub.com/containers/image/v5/openshift\ngithub.com/containers/image/v5/ostree\ngithub.com/containers/image/v5/pkg/blobcache\ngithub.com/containers/image/v5/pkg/blobinfocache\ngithub.com/containers/image/v5/pkg/blobinfocache/internal/prioritize\ngithub.com/containers/image/v5/pkg/blobinfocache/memory\ngithub.com/containers/image/v5/pkg/blobinfocache/none\ngithub.com/containers/image/v5/pkg/blobinfocache/sqlite\ngithub.com/containers/image/v5/pkg/cli\ngithub.com/containers/image/v5/pkg/cli/sigstore\ngithub.com/containers/image/v5/pkg/cli/sigstore/params\ngithub.com/containers/image/v5/pkg/compression\ngithub.com/containers/image/v5/pkg/compression/internal\ngithub.com/containers/image/v5/pkg/compression/types\ngithub.com/containers/image/v5/pkg/docker/config\ngithub.com/containers/image/v5/pkg/shortnames\ngithub.com/containers/image/v5/pkg/strslice\ngithub.com/containers/image/v5/pkg/sysregistriesv2\ngithub.com/containers/image/v5/pkg/tlsclientconfig\ngithub.com/containers/image/v5/sif\ngithub.com/containers/image/v5/signature\ngithub.com/containers/image/v5/signature/internal\ngithub.com/containers/image/v5/signature/signer\ngithub.com/containers/image/v5/signature/sigstore\ngithub.com/containers/image/v5/signature/sigstore/fulcio\ngithub.com/containers/image/v5/signature/sigstore/internal\ngithub.com/containers/image/v5/signature/sigstore/rekor\ngithub.com/containers/image/v5/signature/simplesigning\ngithub.com/containers/image/v5/storage\ngithub.com/containers/image/v5/tarball\ngithub.com/containers/image/v5/transports\ngithub.com/containers/image/v5/transports/alltransports\ngithub.com/containers/image/v5/types\ngithub.com/containers/image/v5/version\n```\n\n----------------------------------------\n\nTITLE: Mapping a Map to a Struct using Mergo in Go\nDESCRIPTION: This Go code snippet illustrates the use of the `mergo.Map` function to populate the fields of a struct (`dst`, passed by address) from a `map[string]interface{}` (`srcMap`). Mergo attempts to match capitalized map keys to the exported fields of the destination struct. The snippet includes basic error handling for the map operation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/dario.cat/mergo/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Map(&dst, srcMap); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Building URLs using Subrouters in Gorilla Mux (Go)\nDESCRIPTION: Illustrates how to create a subrouter with a specific host pattern (`{subdomain}.example.com`) using `Host().Subrouter()` and define named routes within it. Shows building the full URL for a route defined in a subrouter using `r.Get().URL()`.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n```go\nr := mux.NewRouter()\ns := r.Host(\"{subdomain}.example.com\").Subrouter()\ns.Path(\"/articles/{category}/{id:[0-9]+}\").\n  HandlerFunc(ArticleHandler).\n  Name(\"article\")\n\n// \"http://news.example.com/articles/technology/42\"\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\",\n                                 \"category\", \"technology\",\n                                 \"id\", \"42\")\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Podman Network Backend\nDESCRIPTION: Determines which network backend (CNI or netavark) is being used by Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo podman info --format {{.Host.NetworkBackend}}\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah on openSUSE\nDESCRIPTION: Command to install Buildah on openSUSE using the zypper package manager.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install buildah\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Podman Push Failure due to TLS Mismatch in Console\nDESCRIPTION: This command attempts to push an image ('alpine') to a local, likely insecure, registry (`docker://localhost:5000`). It fails because Podman attempts an HTTPS connection (default) while the server expects HTTP, resulting in the 'server gave HTTP response to HTTPS client' error.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo podman push alpine docker://localhost:5000/myalpine:latest\nGetting image source signatures\nGet https://localhost:5000/v2/: http: server gave HTTP response to HTTPS client\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Environment Variables with gotenv in Go\nDESCRIPTION: This Go code snippet demonstrates the difference between gotenv.Apply and gotenv.OverApply. While Apply respects existing environment variable values, OverApply overwrites them. It sets an initial value, applies new data, and prints results using fmt.Println and os.Getenv(). The strings package provides the string reader.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/subosito/gotenv/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nos.Setenv(\"HELLO\", \"world\")\n\n// NOTE: using Apply existing value will be reserved\ngotenv.Apply(strings.NewReader(\"HELLO=universe\"))\nfmt.Println(os.Getenv(\"HELLO\"))\n// Output: \"world\"\n\n// NOTE: using OverApply existing value will be overridden\ngotenv.OverApply(strings.NewReader(\"HELLO=universe\"))\nfmt.Println(os.Getenv(\"HELLO\"))\n// Output: \"universe\"\n```\n\n----------------------------------------\n\nTITLE: Streaming Zstandard Decompression in Go\nDESCRIPTION: Demonstrates basic streaming decompression using `github.com/klauspost/compress/zstd`. It creates a `zstd.NewReader` from an input `io.Reader`, copies the decompressed data to an output `io.Writer` using `io.Copy`, and ensures the reader is closed afterwards using `defer d.Close()` to release resources like goroutines. This approach is suitable for large data streams.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\nfunc Decompress(in io.Reader, out io.Writer) error {\n    d, err := zstd.NewReader(in)\n    if err != nil {\n        return err\n    }\n    defer d.Close()\n    \n    // Copy content...\n    _, err = io.Copy(out, d)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Serpent Block Cipher Library using Go - Bash\nDESCRIPTION: This code installs the Go implementation of the Serpent block cipher library by fetching the latest version directly into the user's GOPATH. It requires Go to be installed and available on the system. Execute this command in a terminal to download and set up the 'github.com/aead/serpent' package for use within Go projects.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/aead/serpent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/aead/serpent\n```\n\n----------------------------------------\n\nTITLE: Configuring No-Stream Option for Podman Pod Stats\nDESCRIPTION: This configuration option disables the streaming of pod statistics and retrieves only the first result. The default setting for this option is false, meaning streaming is enabled by default.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/no-stream.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--no-stream**\n\nDisable streaming <<|pod >>stats and only pull the first result, default setting is false\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Slice with Each Function in Go\nDESCRIPTION: Demonstrates the use of the Each function to iterate over a slice and apply a custom function to each element.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.Iterator = func(value interface{}, index int) {\n\tprintln(value.(int))\n}\ngovalidator.Each(data, fn)\n```\n\n----------------------------------------\n\nTITLE: Example of Default Struct Merging with Mergo in Go\nDESCRIPTION: This runnable Go program provides a practical example of default merging behavior using `mergo.Merge`. It defines a struct `Foo`, creates two instances (`src` and `dest`), and merges `src` into `dest`. Since `dest.B` is initially zero (the default `int64` value), it gets updated with `src.B`'s value (2), while `dest.A` retains its original value (\"two\") because it's non-zero. The final merged `dest` struct is then printed.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/dario.cat/mergo/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n)\n\ntype Foo struct {\n\tA string\n\tB int64\n}\n\nfunc main() {\n\tsrc := Foo{\n\t\tA: \"one\",\n\t\tB: 2,\n\t}\n\tdest := Foo{\n\t\tA: \"two\",\n\t}\n\tmergo.Merge(&dest, src)\n\tfmt.Println(dest)\n\t// Will print\n\t// {two 2}\n}\n```\n\n----------------------------------------\n\nTITLE: New Meter Creation Methods\nDESCRIPTION: Updated creation methods for metrics using the Meter interface in OpenTelemetry SDK\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nMeter.Int64ObservableCounter\nMeter.Int64ObservableUpDownCounter\nMeter.Int64ObservableGauge\nMeter.Float64ObservableCounter\nMeter.Float64ObservableUpDownCounter\nMeter.Float64ObservableGauge\nMeter.Int64Counter\nMeter.Int64UpDownCounter\nMeter.Int64Histogram\nMeter.Float64Counter\nMeter.Float64UpDownCounter\nMeter.Float64Histogram\n```\n\n----------------------------------------\n\nTITLE: Using Denco as URL Router\nDESCRIPTION: Example demonstrating Denco's usage as a URL router with various routing patterns including static routes, parameter routes, and wildcard routes.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/go-openapi/runtime/middleware/denco\"\n)\n\ntype route struct {\n\tname string\n}\n\nfunc main() {\n\trouter := denco.New()\n\trouter.Build([]denco.Record{\n\t\t{\"/\", &route{\"root\"}},\n\t\t{\"/user/:id\", &route{\"user\"}},\n\t\t{\"/user/:name/:id\", &route{\"username\"}},\n\t\t{\"/static/*filepath\", &route{\"static\"}},\n\t})\n\n\tdata, params, found := router.Lookup(\"/\")\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/user/hoge\")\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/user/hoge/7\")\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n\n\tdata, params, found = router.Lookup(\"/static/path/to/file\")\n\tfmt.Printf(\"%#v, %#v, %#v\\n\", data, params, found)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Formatter in Go using Logrus\nDESCRIPTION: Demonstrates how to set the JSON formatter for Logrus to output logs in JSON format, which is useful for parsing by tools like logstash or Splunk.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlog.SetFormatter(&log.JSONFormatter{})\n```\n\n----------------------------------------\n\nTITLE: Performing Basic PKCS#11 Operations in Go\nDESCRIPTION: This Go example illustrates a complete basic workflow using the PKCS#11 library with SoftHSM. It initializes the library instance, retrieves available slots, opens a read-write session on the first available slot, logs into the token using the user PIN (\"1234\"), performs a SHA-1 digest operation on a sample string, and prints the resulting hash. Crucially, it uses `defer` statements to ensure proper cleanup by logging out, closing the session, finalizing, and destroying the library context upon function exit. Requires the `pkcs11` and `fmt` Go packages, and an initialized SoftHSM token configured as shown previously.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/miekg/pkcs11/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\np := pkcs11.New(\"/usr/lib/softhsm/libsofthsm2.so\")\nerr := p.Initialize()\nif err != nil {\n    panic(err)\n}\n\ndefer p.Destroy()\ndefer p.Finalize()\n\nslots, err := p.GetSlotList(true)\nif err != nil {\n    panic(err)\n}\n\nsession, err := p.OpenSession(slots[0], pkcs11.CKF_SERIAL_SESSION|pkcs11.CKF_RW_SESSION)\nif err != nil {\n    panic(err)\n}\ndefer p.CloseSession(session)\n\nerr = p.Login(session, pkcs11.CKU_USER, \"1234\")\nif err != nil {\n    panic(err)\n}\ndefer p.Logout(session)\n\np.DigestInit(session, []*pkcs11.Mechanism{pkcs11.NewMechanism(pkcs11.CKM_SHA_1, nil)})\nhash, err := p.Digest(session, []byte(\"this is a string\"))\nif err != nil {\n    panic(err)\n}\n\nfor _, d := range hash {\n        fmt.Printf(\"%x\", d)\n}\nfmt.Println()\n```\n\n----------------------------------------\n\nTITLE: Displaying Tagged Alpine Images in Podman\nDESCRIPTION: Command showing the result of tagging the Alpine image, displaying both the original Docker Hub image and the newly tagged local registry version.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman images alpine\nREPOSITORY                 TAG      IMAGE ID       CREATED       SIZE\nlocalhost:5000/alpine      latest   e7d92cdc71fe   6 weeks ago   5.86 MB\ndocker.io/library/alpine   latest   e7d92cdc71fe   6 weeks ago   5.86 MB\n```\n\n----------------------------------------\n\nTITLE: Enabling SSH Daemon on Linux Server\nDESCRIPTION: Command to enable and start the SSH daemon on the Linux server, which is required for communication between the client and server.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/mac_win_client.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now sshd\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to Manpage Using Command Line Arguments\nDESCRIPTION: Example demonstrating how to convert a markdown file to a manpage using explicit command line arguments instead of shell redirection.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/cpuguy83/go-md2man/v2/go-md2man.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo-md2man -in=go-md2man.1.md -out=go-md2man.1\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Resolving Patch Conflicts\nDESCRIPTION: Git commands for resolving conflicts when applying patches to Buildah tests, including continuing a failed patch and updating the buildah differences.\nSOURCE: https://github.com/containers/podman/blob/main/test/buildah-bud/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add tests/helpers.bash\ngit am --continue\n./make-new-buildah-diffs\ncd ..; git diff test/buildah-bud\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy to Allow Local Scripts\nDESCRIPTION: PowerShell command to change the execution policy to RemoteSigned, which allows locally-created PowerShell scripts to run, necessary for using the winmake.ps1 script.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_12\n\nLANGUAGE: pwsh\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Serving Single Page Applications with Gorilla Mux in Go\nDESCRIPTION: This comprehensive example shows how to serve a Single Page Application (SPA) alongside API endpoints using Gorilla Mux. It implements a custom handler for serving the SPA and demonstrates API routing.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/gorilla/mux\"\n)\n\n// spaHandler implements the http.Handler interface, so we can use it\n// to respond to HTTP requests. The path to the static directory and\n// path to the index file within that static directory are used to\n// serve the SPA in the given static directory.\ntype spaHandler struct {\n\tstaticPath string\n\tindexPath  string\n}\n\n// ServeHTTP inspects the URL path to locate a file within the static dir\n// on the SPA handler. If a file is found, it will be served. If not, the\n// file located at the index path on the SPA handler will be served. This\n// is suitable behavior for serving an SPA (single page application).\nfunc (h spaHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\t// Join internally call path.Clean to prevent directory traversal\n\tpath := filepath.Join(h.staticPath, r.URL.Path)\n\n\t// check whether a file exists or is a directory at the given path\n\tfi, err := os.Stat(path)\n\tif os.IsNotExist(err) || fi.IsDir() {\n\t\t// file does not exist or path is a directory, serve index.html\n\t\thttp.ServeFile(w, r, filepath.Join(h.staticPath, h.indexPath))\n\t\treturn\n\t}\n\n\tif err != nil {\n\t\t// if we got an error (that wasn't that the file doesn't exist) stating the\n\t\t// file, return a 500 internal server error and stop\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n\t}\n\n\t// otherwise, use http.FileServer to serve the static file\n\thttp.FileServer(http.Dir(h.staticPath)).ServeHTTP(w, r)\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\n\trouter.HandleFunc(\"/api/health\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// an example API handler\n\t\tjson.NewEncoder(w).Encode(map[string]bool{\"ok\": true})\n\t})\n\n\tspa := spaHandler{staticPath: \"build\", indexPath: \"index.html\"}\n\trouter.PathPrefix(\"/\").Handler(spa)\n\n\tsrv := &http.Server{\n\t\tHandler: router,\n\t\tAddr:    \"127.0.0.1:8000\",\n\t\t// Good practice: enforce timeouts for servers you create!\n\t\tWriteTimeout: 15 * time.Second,\n\t\tReadTimeout:  15 * time.Second,\n\t}\n\n\tlog.Fatal(srv.ListenAndServe())\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Mergo Library in Go\nDESCRIPTION: This Go code snippet demonstrates how to import the Mergo library into a Go source file using its vanity import path `dario.cat/mergo`. This import statement makes the functions and types defined in the Mergo package, such as `mergo.Merge` and `mergo.Map`, accessible within the code.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/dario.cat/mergo/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// use in your .go code\nimport (\n    \"dario.cat/mergo\"\n)\n```\n\n----------------------------------------\n\nTITLE: Bind Mount with Shared Relabeling\nDESCRIPTION: Bind mount with shared relabeling for SELinux contexts\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/mount.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntype=bind,src=/path/on/host,dst=/path/in/container,relabel=shared\n```\n\n----------------------------------------\n\nTITLE: Using PublishPort for exposing container ports in Kubernetes Quadlet\nDESCRIPTION: Demonstrates various syntax formats for the PublishPort directive in a Kube unit file to expose container ports to the host. The syntax follows the format ip:hostPort:containerPort with various shorthand options.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nPublishPort=8080:80\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in fsnotify Go Project\nDESCRIPTION: This shell command executes all the tests within the fsnotify Go project directory and its subdirectories. It is the standard command used in Continuous Integration (CI) for testing across all supported platforms. Use the `-short` flag to make the stress test run faster.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Span Interface Updates in Go\nDESCRIPTION: Changes to the Span interface methods AddEvent and RecordError to remove unused context parameter and add EventOptions support.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\n// Old signatures\nAddEventWithTimestamp(ctx context.Context, ...)\nRecordError(ctx context.Context, ...)\n\n// New signatures\nAddEvent(name string, opts ...EventOption)\nRecordError(err error, opts ...EventOption)\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Lists of Objects using Repeated Blocks\nDESCRIPTION: Illustrates an alternative method for creating lists of objects in HCL by using repeated blocks with the same name (e.g., `service`). Each block defines an object within the list. This structure is often used for defining multiple instances of a resource or configuration item.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/hashicorp/hcl/README.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n    key = \"value\"\n}\n\nservice {\n    key = \"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Go flags with pflag\nDESCRIPTION: This example demonstrates how to add Go's standard flag package flags to the pflag flagset, which is necessary for supporting flags defined by third-party dependencies.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Focus Behavior in Ginkgo Tests (Go)\nDESCRIPTION: This code snippet demonstrates the improved focus behavior in Ginkgo tests. When using FDescribe and FIt, only the focused test 'B' will run, while test 'A' is skipped.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nFDescribe(\"Some describe\", func() {\n    It(\"A\", func() {})\n\n    FIt(\"B\", func() {})\n})\n```\n\n----------------------------------------\n\nTITLE: Marshaling Data with 'json-iterator/go'\nDESCRIPTION: This snippet demonstrates how to marshal data using the 'json-iterator/go' library as a replacement for the standard library. It imports 'github.com/json-iterator/go', configures it for compatibility with the standard library using 'jsoniter.ConfigCompatibleWithStandardLibrary', and then calls the 'Marshal' method on the configured instance.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Output of HTTPD Container Run (Text)\nDESCRIPTION: Displays the container ID returned after successfully launching the HTTPD container with `podman run`.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nf708641300564a6caf90c145e64cd852e76f77f6a41699478bb83a162dceada9\n```\n\n----------------------------------------\n\nTITLE: Running a Container in a Podman Pod\nDESCRIPTION: This command demonstrates how to run a container within a Podman pod without publishing ports on the container itself. It addresses the issue of containers with exposed ports not running in a pod.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n$ podman run --pod srcview --name src-expose -v \"${PWD}:/var/opt/localrepo\":Z,ro sourcegraph/src-expose:latest serve /var/opt/localrepo\n```\n\n----------------------------------------\n\nTITLE: Deserializing Tracing Context from HTTP Headers with OpenTracing Go\nDESCRIPTION: Exemplifies the extraction of a tracing context from incoming HTTP headers and creation of a corresponding server span. Requires OpenTracing Go, net/http, and context packages. Inputs: incoming HTTP request; outputs: a server-side span for the request, set in a new context for further propagation. Includes error handling for extraction failures and fallback to root spans if necessary.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-23_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n        var serverSpan opentracing.Span\n        appSpecificOperationName := ...\n        wireContext, err := opentracing.GlobalTracer().Extract(\n            opentracing.HTTPHeaders,\n            opentracing.HTTPHeadersCarrier(req.Header))\n        if err != nil {\n            // Optionally record something about err here\n        }\n\n        // Create the span referring to the RPC client if available.\n        // If wireContext == nil, a root span will be created.\n        serverSpan = opentracing.StartSpan(\n            appSpecificOperationName,\n            ext.RPCServerOption(wireContext))\n\n        defer serverSpan.Finish()\n\n        ctx := opentracing.ContextWithSpan(context.Background(), serverSpan)\n        ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining Core xxHash Functions in Go\nDESCRIPTION: This snippet shows the main API functions provided by the xxhash package, including Sum64 for byte slices and strings, and the Digest struct for streaming hashing.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Defining OS Feature Option for Podman Build Commands\nDESCRIPTION: Specifies the --os-feature option for Podman build and farm build commands. This option sets required OS features for the built image, primarily useful for Windows-based images. Features can be added or removed from the base image's feature set.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/os-feature.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--os-feature**=*feature*\n```\n\n----------------------------------------\n\nTITLE: Updated Value Type References\nDESCRIPTION: Examples of replaced value type references after merging value package into kv package\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nkv.BoolValue\nkv.Int64Value\nkv.Uint64Value\nkv.Float64Value\nkv.Int32Value\nkv.Uint32Value\nkv.Float32Value\nkv.StringValue\nkv.IntValue\nkv.UintValue\nkv.ArrayValue\n```\n\n----------------------------------------\n\nTITLE: Reading Remote Configuration from Firestore with Viper\nDESCRIPTION: Shows how to connect to and read configuration from a Google Cloud Firestore provider using Viper.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"firestore\", \"google-cloud-project-id\", \"collection/document\")\nviper.SetConfigType(\"json\") // Config's format: \"json\", \"toml\", \"yaml\", \"yml\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Go Build Error from Incompatible go-multierror Usage (Go)\nDESCRIPTION: Provides error messages shown when attempting to compile go-multierror with an outdated Go version that lacks support for errors.As and errors.Is (pre-1.13). Not intended for use as executable code, but serves as a reference for diagnosing compatibility issues. Indicates the file and line number where problems occur. Developers encountering these errors should upgrade their Go toolchain or use an older tag of go-multierror.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n/go/src/github.com/hashicorp/go-multierror/multierror.go:112:9: undefined: errors.As\n/go/src/github.com/hashicorp/go-multierror/multierror.go:117:9: undefined: errors.Is\n\n```\n\n----------------------------------------\n\nTITLE: Working with Pipes and Redirections in Buildah Run Commands\nDESCRIPTION: Examples of Buildah run commands that would fail when using pipes or redirections, followed by the proper syntax using bash -c to wrap the commands.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# buildah run $whalecontainer bash -c '/usr/games/fortune -a | cowsay'\n# buildah run $newcontainer bash -c 'echo \"daemon off;\" >> /etc/nginx/nginx.conf'\n# buildah run $newcontainer bash -c 'echo \"nginx on Fedora\" > /usr/share/nginx/html/index.html'\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah on Debian\nDESCRIPTION: Commands to install Buildah on Debian Stable/Bookworm or Unstable/Sid distributions using apt-get.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Debian Stable/Bookworm or Unstable/Sid\nsudo apt-get update\nsudo apt-get -y install buildah\n```\n\n----------------------------------------\n\nTITLE: Debug Log Output Example\nDESCRIPTION: Sample debug log output showing initialization sequence, configuration loading, and runtime setup for Podman system service.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/bindings/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nINFO[0000] podman filtering at log level debug\nDEBU[0000] Called service.PersistentPreRunE(podman --log-level=debug system service -t0)\nDEBU[0000] Ignoring libpod.conf EventsLogger setting \"/home/lsm5/.config/containers/containers.conf\". Use \"journald\" if you want to change this setting and remove libpod.conf files.\nDEBU[0000] Reading configuration file \"/usr/share/containers/containers.conf\"\nDEBU[0000] Merged system config \"/usr/share/containers/containers.conf\": {Editors note: the remainder of this line was removed due to Jekyll formatting errors.}\nDEBU[0000] Using conmon: \"/usr/bin/conmon\"\nDEBU[0000] Initializing boltdb state at /home/lsm5/.local/share/containers/storage/libpod/bolt_state.db\nDEBU[0000] Overriding run root \"/run/user/1000/containers\" with \"/run/user/1000\" from database\nDEBU[0000] Using graph driver overlay\nDEBU[0000] Using graph root /home/lsm5/.local/share/containers/storage\nDEBU[0000] Using run root /run/user/1000\nDEBU[0000] Using static dir /home/lsm5/.local/share/containers/storage/libpod\nDEBU[0000] Using tmp dir /run/user/1000/libpod/tmp\nDEBU[0000] Using volume path /home/lsm5/.local/share/containers/storage/volumes\nDEBU[0000] Set libpod namespace to \"\"\nDEBU[0000] Not configuring container store\nDEBU[0000] Initializing event backend file\nDEBU[0000] using runtime \"/usr/bin/runc\"\nDEBU[0000] using runtime \"/usr/bin/crun\"\nWARN[0000] Error initializing configured OCI runtime kata: no valid executable found for OCI runtime kata: invalid argument\nDEBU[0000] using runtime \"/usr/bin/crun\"\nINFO[0000] Setting parallel job count to 25\nINFO[0000] podman filtering at log level debug\nDEBU[0000] Called service.PersistentPreRunE(podman --log-level=debug system service -t0)\nDEBU[0000] Ignoring libpod.conf EventsLogger setting \"/home/lsm5/.config/containers/containers.conf\". Use \"journald\" if you want to change this setting and remove libpod.conf files.\nDEBU[0000] Reading configuration file \"/usr/share/containers/containers.conf\"\n```\n\n----------------------------------------\n\nTITLE: Using SSH Agent in Containerfile RUN Instruction\nDESCRIPTION: This command demonstrates how to use the SSH agent within a RUN instruction in a Containerfile. It mounts the SSH agent using the specified ID.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/ssh.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRUN --mount=type=ssh,id=id mycmd\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Fields in GoValidator\nDESCRIPTION: Example showing how to configure GoValidator to require validation tags on all fields by default in an init function.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\nfunc init() {\n  govalidator.SetFieldsRequiredByDefault(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling go-sqlite3 on Linux linking against libsqlite3 using Bash\nDESCRIPTION: This command compiles the `go-sqlite3` package on Linux, explicitly linking against the system's pre-installed `libsqlite3` shared library instead of using the embedded C source code. It uses both the 'libsqlite3' and 'linux' build tags. Requires the Go compiler, gcc, CGO enabled, and the `libsqlite3` development library installed on the system.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngo build -tags \"libsqlite3 linux\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Remote for Fork\nDESCRIPTION: Git command to add your personal fork as a remote repository for contribution workflow.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Iterating Route Authenticators and Scopes in go-swagger REST API - Go\nDESCRIPTION: This code illustrates how to access and iterate through authenticators and their scopes associated with a matched route using go-swagger's middleware utilities. It allows fine-grained policy enforcement by checking which scopes are required for the route, and can be used within custom Authorizer logic. This pattern requires integration with go-swagger's middleware, specifically middleware.MatchedRouteFrom, and assumes prior authentication context is present.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-swagger/go-swagger/generator/templates/contrib/stratoscale/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfor _, auth := range route.Authenticators {\n    for scopeName, scopeValues := range auth.Scopes {\n        for _, scopeValue := range scopeValues {\n            ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-specific Logging in Logrus\nDESCRIPTION: Shows how to implement environment-specific logging configurations. The example demonstrates setting different formatters based on the application environment, using JSON formatter for production and text formatter for development.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // do something here to set environment depending on an environment variable\n  // or command-line flag\n  if Environment == \"production\" {\n    log.SetFormatter(&log.JSONFormatter{})\n  } else {\n    // The TextFormatter is default, you don't actually have to do this.\n    log.SetFormatter(&log.TextFormatter{})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown List of OCICrypt Adopters\nDESCRIPTION: A formatted markdown list showing current adopters of OCICrypt library and projects in the process of adoption, including links to their respective GitHub repositories.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/ocicrypt/ADOPTERS.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nBelow are list of adopters of the `ocicrypt` library or supports use of OCI encrypted images:\n- [skopeo](https://github.com/containers/skopeo)\n- [buildah](https://github.com/containers/buildah)\n- [containerd](https://github.com/containerd/imgcrypt)\n- [nerdctl](https://github.com/containerd/nerdctl)\n- [distribution](https://github.com/distribution/distribution)\n\nBelow are the list of projects that are in the process of adopting support:\n- [quay](https://github.com/quay/quay)\n- [kata-containers](https://github.com/kata-containers/kata-containers)\n```\n\n----------------------------------------\n\nTITLE: Installing the ksuid Command-Line Tool\nDESCRIPTION: This shell command uses `go install` to compile and install the `ksuid` command-line executable from the source code located in the `cmd/ksuid` subdirectory of the library's repository. The executable will typically be placed in the `$GOPATH/bin` or `$GOBIN` directory.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/segmentio/ksuid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ go install github.com/segmentio/ksuid/cmd/ksuid\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Hyper-V for Podman machine tests\nDESCRIPTION: PowerShell commands to set up and run Podman machine tests on Windows using Hyper-V virtualization. Includes building necessary components and setting environment variables.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/machine/e2e/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n.\\winmake.ps1 podman-remote && .\\winmake.ps1 win-gvproxy\n$env:CONTAINERS_HELPER_BINARY_DIR=\"$pwd\\bin\\windows\"\n$env:CONTAINERS_MACHINE_PROVIDER=\"hyperv\"\n.\\winmake localmachine\n```\n\n----------------------------------------\n\nTITLE: Installing and Using go-md2man CLI\nDESCRIPTION: Commands to install go-md2man using go install and convert a markdown file to a man page. The tool takes input markdown file path and output man page path as parameters.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/cpuguy83/go-md2man/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/cpuguy83/go-md2man@latest\n\ngo-md2man -in /path/to/markdownfile.md -out /manfile/output/path\n```\n\n----------------------------------------\n\nTITLE: Compiling go-sqlite3 on macOS (ARM64) using Bash\nDESCRIPTION: This command compiles the `go-sqlite3` package specifically for macOS running on Apple Silicon (ARM64) processors. It uses the 'darwin' build tag for macOS and 'arm64' for the architecture. Requires the Go compiler, Xcode command-line tools (which include gcc/clang), and CGO enabled.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngo build -tags \"darwin arm64\"\n```\n\n----------------------------------------\n\nTITLE: Running focused Ginkgo tests on Windows for Podman machine\nDESCRIPTION: A PowerShell script for running specific Podman machine tests on Windows using Ginkgo test framework. It demonstrates how to specify remote tags, focus on specific test files or test cases, and set timeout parameters.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/machine/e2e/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$remotetags = \"remote exclude_graphdriver_btrfs btrfs_noversion containers_image_openpgp\"\n$focus_file = \"basic_test.go\"\n$focus_test = \"podman build contexts\"\n./test/tools/build/ginkgo.exe `\n     -v --tags \"$remotetags\" -timeout=90m --trace --no-color `\n     --focus-file  $focus_file `\n     --focus \"$focus_test\" `\n     ./pkg/machine/e2e/.\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring Upstream in Git - Shell\nDESCRIPTION: Demonstrates how to fork, clone, and set up the upstream remote for the go-zfs project using Git. Prerequisites include having Git installed and proper authentication credentials. This setup enables contributors to keep their fork updated and submit pull requests; no input or output apart from terminal execution and Git repo state.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone git@github.com:<your-username>/go-zfs.git\\n$ cd go-zfs\\n$ git remote add upstream https://github.com/mistifyio/go-zfs.git\n```\n\n----------------------------------------\n\nTITLE: Populating ssh.ClientConfig.HostKeyAlgorithms Using KnownHosts in Go\nDESCRIPTION: This Go code snippet demonstrates how to populate the HostKeyAlgorithms field of an ssh.ClientConfig structure based on the entries in a known_hosts file, using the github.com/skeema/knownhosts package's NewDB constructor. It initializes a new knownhosts database, sets up a user and authentication methods, configures the HostKeyCallback and HostKeyAlgorithms using the knownhosts methods, and returns the configured ClientConfig object for a specific host. Dependencies are golang.org/x/crypto/ssh and github.com/skeema/knownhosts. Inputs are the known_hosts file path and the target host string (including port); output is a configured *ssh.ClientConfig and possible error. The main limitation is error handling on loading the known_hosts database.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/skeema/knownhosts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"golang.org/x/crypto/ssh\"\n\t\"github.com/skeema/knownhosts\"\n)\n\nfunc sshConfigForHost(hostWithPort string) (*ssh.ClientConfig, error) {\n\tkh, err := knownhosts.NewDB(\"/home/myuser/.ssh/known_hosts\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tconfig := &ssh.ClientConfig{\n\t\tUser:              \"myuser\",\n\t\tAuth:              []ssh.AuthMethod{ /* ... */ },\n\t\tHostKeyCallback:   kh.HostKeyCallback(),\n\t\tHostKeyAlgorithms: kh.HostKeyAlgorithms(hostWithPort),\n\t}\n\treturn config, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Mergo Go Library\nDESCRIPTION: This shell command utilizes the `go get` tool to download and install the Mergo library from its vanity URL `dario.cat/mergo`. This makes the library available for import and use in Go projects.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/dario.cat/mergo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get dario.cat/mergo\n```\n\n----------------------------------------\n\nTITLE: MPL 2.0 Source Code License Notice (Plaintext)\nDESCRIPTION: Provides the standard notice text required by the Mozilla Public License v. 2.0 (Section 10.4, Exhibit A) to be included in or alongside distributed source code files. It asserts the code's subjection to MPL 2.0 terms and directs recipients to the official license location if a copy wasn't provided.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/letsencrypt/boulder/LICENSE.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n```\n\n----------------------------------------\n\nTITLE: Setting container log driver in Kubernetes Quadlet\nDESCRIPTION: Shows how to specify a custom log driver for Podman to use when running containers defined in a Kube Quadlet unit.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nLogDriver=journald\n```\n\n----------------------------------------\n\nTITLE: Approving Pull Requests with LGTM Comment\nDESCRIPTION: Signals approval ('Looks Good To Me') for a pull request. A comment containing 'LGTM' is used by maintainers during the review process. Two LGTMs from listed MAINTAINERS are required to merge a pull request, though the PR creator cannot provide one of the LGTMs.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/cgroups/MAINTAINERS_GUIDE.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLGTM\n```\n\n----------------------------------------\n\nTITLE: Installing Copystructure Go Library\nDESCRIPTION: Command to install the copystructure library using Go's package management system. This command fetches the library from the specified GitHub repository.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/mitchellh/copystructure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mitchellh/copystructure\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Identity Label for Podman Build\nDESCRIPTION: This configuration option controls whether the default identity label 'io.buildah.version' is added to builds. It is applicable to both 'podman build' and 'farm build' commands. The default setting is true, meaning the label is added by default.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/identity-label.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--identity-label**\n\nAdds default identity label `io.buildah.version` if set. (default true).\n```\n\n----------------------------------------\n\nTITLE: Setting Global Logging Level in Logrus\nDESCRIPTION: Demonstrates how to set the minimum severity level for logged messages. This affects which log entries are processed, with only messages at or above the specified level being output.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Will log anything that is info or above (warn, error, fatal, panic). Default.\nlog.SetLevel(log.InfoLevel)\n```\n\n----------------------------------------\n\nTITLE: Installing the go-ini Package via Go Get (Shell)\nDESCRIPTION: This shell command utilizes the `go get` tool to download and install version 1 of the `gopkg.in/ini` package. This package enables reading and writing INI configuration files within Go programs. A minimum Go version of 1.13 is required for this package.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/gopkg.in/ini.v1/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get gopkg.in/ini.v1\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog for go-jose v4.0.2\nDESCRIPTION: Lists improvements made in version 4.0.2, including documentation updates and definition of exported error values.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-jose/go-jose/v4/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# v4.0.2\n\n## Changed\n\n - Improved documentation of Verify() to note that JSONWebKeySet is a supported\n   argument type (#104)\n - Defined exported error values for missing x5c header and unsupported elliptic\n   curves error cases (#117)\n```\n\n----------------------------------------\n\nTITLE: WhiteList Function in GoValidator\nDESCRIPTION: Example of using the WhiteList function which removes all characters from a string except those specified in the allowlist pattern. Useful for sanitizing input data.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// Remove all characters from string ignoring characters between \"a\" and \"z\"\nprintln(govalidator.WhiteList(\"a3a43a5a4a3a2a23a4a5a4a3a4\", \"a-z\") == \"aaaaaaaaaaaa\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Monospace String Width - Go\nDESCRIPTION: This example calls the 'StringWidth' function from uniseg to compute the display width of a string in monospaced fonts (considering emojis and multibyte characters). It outputs the width using fmt. Prerequisites are importing fmt and uniseg; the function takes a string argument and returns the integer width in columns.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nwidth := uniseg.StringWidth(\"🇩🇪🏳️‍🌈!\")\nfmt.Println(width)\n// 5\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Terminal via Winget (PowerShell)\nDESCRIPTION: Installs the modern Windows Terminal application using the `winget` package manager command in PowerShell. This terminal is recommended for a better user experience with WSL and Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install Microsoft.WindowsTerminal\n```\n\n----------------------------------------\n\nTITLE: Setting OTLP Exporter Environment Variables in Go\nDESCRIPTION: Environment variables for configuring OTLP/HTTP and OTLP/gRPC exporters, including endpoints, TLS certificates, headers, compression, and timeouts.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\nOTEL_EXPORTER_OTLP_ENDPOINT\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT\nOTEL_EXPORTER_OTLP_METRICS_ENDPOINT\nOTEL_EXPORTER_OTLP_HEADERS\nOTEL_EXPORTER_OTLP_TRACES_HEADERS\nOTEL_EXPORTER_OTLP_METRICS_HEADERS\nOTEL_EXPORTER_OTLP_COMPRESSION\nOTEL_EXPORTER_OTLP_TRACES_COMPRESSION\nOTEL_EXPORTER_OTLP_METRICS_COMPRESSION\nOTEL_EXPORTER_OTLP_TIMEOUT\nOTEL_EXPORTER_OTLP_TRACES_TIMEOUT\nOTEL_EXPORTER_OTLP_METRICS_TIMEOUT\nOTEL_EXPORTER_OTLP_CERTIFICATE\nOTEL_EXPORTER_OTLP_TRACES_CERTIFICATE\nOTEL_EXPORTER_OTLP_METRICS_CERTIFICATE\n```\n\n----------------------------------------\n\nTITLE: YAML Format Example\nDESCRIPTION: Demonstrates correct and incorrect ways to handle binary data in YAML, avoiding the !!binary tag for JSON compatibility.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nBAD:\n\texampleKey: !!binary gIGC\n\nGOOD:\n\texampleKey: gIGC\n```\n\n----------------------------------------\n\nTITLE: Running Remote Integration Tests for Podman\nDESCRIPTION: Command to run the remote integration tests for Podman using the Ginkgo testing framework.\nSOURCE: https://github.com/containers/podman/blob/main/test/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nmake remoteintegration\n```\n\n----------------------------------------\n\nTITLE: Converting retryablehttp.Client to Standard http.Client in Go\nDESCRIPTION: Shows how to create a standard Go `*http.Client` that incorporates the retry logic from go-retryablehttp. It first initializes a `*retryablehttp.Client` using `NewClient()`, configures its maximum number of retries using the `RetryMax` field, and then calls the `StandardClient()` method to obtain an `*http.Client`. This allows using the retry functionality with interfaces expecting a standard client.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/go-retryablehttp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nretryClient := retryablehttp.NewClient()\nretryClient.RetryMax = 10\n\nstandardClient := retryClient.StandardClient() // *http.Client\n```\n\n----------------------------------------\n\nTITLE: Running bbolt Command Line Utility\nDESCRIPTION: Command to run the bbolt command line utility directly without installation. This allows interacting with bbolt databases from the command line.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ go run go.etcd.io/bbolt/cmd/bbolt@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Span Status Setting Behavior in Go\nDESCRIPTION: Updates the span.SetStatus method to make calls that lower the status no-ops.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\n`span.SetStatus` has been updated such that calls that lower the status are now no-ops.\n```\n\n----------------------------------------\n\nTITLE: Defining PetAPI and StoreAPI Interfaces in Go\nDESCRIPTION: Auto-generated interfaces for PetAPI and StoreAPI, representing the business logic of the service. These interfaces are implemented by the developer and are separated from the generated code.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-swagger/go-swagger/generator/templates/contrib/stratoscale/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// PetAPI\ntype PetAPI interface {\n\tPetCreate(ctx context.Context, params pet.PetCreateParams) middleware.Responder\n\tPetDelete(ctx context.Context, params pet.PetDeleteParams) middleware.Responder\n\tPetGet(ctx context.Context, params pet.PetGetParams) middleware.Responder\n\tPetList(ctx context.Context, params pet.PetListParams) middleware.Responder\n\tPetUpdate(ctx context.Context, params pet.PetUpdateParams) middleware.Responder\n}\n\n//go:generate mockery -name StoreAPI -inpkg\n\n// StoreAPI\ntype StoreAPI interface {\n\tInventoryGet(ctx context.Context, params store.InventoryGetParams) middleware.Responder\n\tOrderCreate(ctx context.Context, params store.OrderCreateParams) middleware.Responder\n\t// OrderDelete is For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n\tOrderDelete(ctx context.Context, params store.OrderDeleteParams) middleware.Responder\n\t// OrderGet is For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n\tOrderGet(ctx context.Context, params store.OrderGetParams) middleware.Responder\n}\n```\n\n----------------------------------------\n\nTITLE: Building Linux Guest Agent with Go - PowerShell\nDESCRIPTION: Demonstrates how to set the GOOS environment variable to 'linux' and build the Linux guest agent from the ./cmd/gcs directory using Go within PowerShell. The snippet assumes you have Go installed and the source code available in ./cmd/gcs. No additional dependencies are required beyond a functional PowerShell environment and golang tooling. Expected output is a compiled Linux guest agent binary.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\\\> $env:GOOS=\"linux\"\nC:\\\\> go build .\\cmd\\gcs\\\n\n```\n\n----------------------------------------\n\nTITLE: Podman Command Reference Table\nDESCRIPTION: Markdown table listing all available Podman commands with their corresponding descriptions. Each command links to its detailed documentation page.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                                          | Description                                                                 |\n| ------------------------------------------------ | --------------------------------------------------------------------------- |\n| [podman-attach(1)](podman-attach.1.md)           | Attach to a running container.                                              |\n| [podman-build(1)](podman-build.1.md)             | Build a container image using a Dockerfile.                                 |\n```\n\n----------------------------------------\n\nTITLE: Using Go Modules for gRPC Installation in Restricted Networks\nDESCRIPTION: Commands to use go mod replace feature for installing gRPC when google.golang.org is not accessible. Creates aliases for golang.org packages using GitHub mirrors.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Validation Tags in govalidator (Go)\nDESCRIPTION: Illustrates activation of the SetFieldsRequiredByDefault option in govalidator, which forces validation to fail when struct fields lack explicit validation tags. Intended for use inside an init or main function, the snippet requires the govalidator package and affects validation behavior of all subsequently validated structs in the application.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \\\"github.com/asaskevich/govalidator\\\"\\n\\nfunc init() {\\n  govalidator.SetFieldsRequiredByDefault(true)\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthToken Handler in go-swagger REST API - Go\nDESCRIPTION: This snippet defines the AuthToken function field within the restapi.Config struct, which is responsible for authenticating users based on the 'Cookie' header. The function receives a token string, and returns a user-representing interface{} or error. Returning nil for the interface{} results in an HTTP 401 response, while a non-nil error leads to an HTTP 500 error. This handler facilitates authentication middleware configuration for REST APIs. Prerequisites: knowledge of Go interfaces and Go server context.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-swagger/go-swagger/generator/templates/contrib/stratoscale/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n    ...\n\t// AuthToken Applies when the \"Cookie\" header is set\n\tAuthToken func(token string) (interface{}, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing oklog/ulid with Go Modules - Shell\nDESCRIPTION: Installs the oklog/ulid package for Go using the 'go get' command. Requires Go to be installed and configured in your development environment. The command fetches and adds the package to your project's dependencies. No input parameters are required, and output is the updated module dependencies. It must be run from your shell in the root of a Go module project.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/oklog/ulid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/oklog/ulid\n```\n\n----------------------------------------\n\nTITLE: Building Podman Documentation on macOS\nDESCRIPTION: These commands build the Podman documentation for macOS and list the generated files in the specified directory.\nSOURCE: https://github.com/containers/podman/blob/main/build_osx.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ make podman-remote-darwin-docs\n$ ls docs/build/remote/darwin\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies on Fedora\nDESCRIPTION: Commands to install the required Python packages and dependencies for building HTMLized Podman man pages on a Fedora system.\nSOURCE: https://github.com/containers/podman/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install python3-sphinx python3-recommonmark\n$ pip install sphinx-markdown-tables myst_parser\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Options in Go\nDESCRIPTION: Implementation of boolean configuration options with both default true and false patterns.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype defaultTrueOption bool\n\nfunc (o defaultTrueOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithoutOption sets a T to have Bool option excluded.\nfunc WithoutOption() Option {\n\treturn defaultTrueOption(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling go-sqlite3 on macOS (ARM64) linking libsqlite3 using Bash\nDESCRIPTION: This command compiles the `go-sqlite3` package on macOS (Apple Silicon/ARM64), linking against the system's `libsqlite3` library instead of the embedded source. It uses the 'libsqlite3', 'darwin', and 'arm64' build tags. Requires Go, CGO, Xcode tools, and the `sqlite3` library (installable via `brew install sqlite3`).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# ARM\ngo build -tags \"libsqlite3 darwin arm64\"\n```\n\n----------------------------------------\n\nTITLE: Anonymous Pull Authentication Error\nDESCRIPTION: Error message when pulling anonymous images with invalid credentials\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ podman run -it --rm docker://docker.io/library/alpine:latest ls\nTrying to pull docker://docker.io/library/alpine:latest...ERRO[0000] Error pulling image ref //alpine:latest: Error determining manifest MIME type for docker://alpine:latest: unable to retrieve auth token: invalid username/password\nFailed\nError: unable to pull docker://docker.io/library/alpine:latest: unable to pull image: Error determining manifest MIME type for docker://alpine:latest: unable to retrieve auth token: invalid username/password\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Volume Extension with TCP Socket\nDESCRIPTION: Example showing how to implement a Docker volume extension using TCP sockets. Creates a volume handler with a custom driver implementation and serves it on port 8080.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/docker/go-plugins-helpers/volume/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n  d := MyVolumeDriver{}\n  h := volume.NewHandler(d)\n  h.ServeTCP(\"test_volume\", \":8080\")\n```\n\n----------------------------------------\n\nTITLE: Validating URL in Go\nDESCRIPTION: Demonstrates how to use the IsURL function to validate a URL string.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsURL(`http://user@pass:domain.com/path/page`))\n```\n\n----------------------------------------\n\nTITLE: CPU Statistics Output Example\nDESCRIPTION: Example output from Linux container CPU statistics showing throttling metrics when GOMAXPROCS exceeds CPU quota.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.uber.org/automaxprocs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cat /sys/fs/cgroup/cpu,cpuacct/system.slice/[...]/cpu.stat\nnr_periods 42227334\nnr_throttled 131923\nthrottled_time 88613212216618\n```\n\n----------------------------------------\n\nTITLE: Defining a Focused Integration Test in Podman\nDESCRIPTION: Example of marking a specific Ginkgo test to be run in isolation by changing 'It' to 'FIt' in the test declaration.\nSOURCE: https://github.com/containers/podman/blob/main/test/README.md#2025-04-23_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nIt(\"podman inspect bogus pod\", func() {\n\t\tsession := podmanTest.Podman([]string{\"pod\", \"inspect\", \"foobar\"})\n\t\tsession.WaitWithDefaultTimeout()\n\t\tExpect(session).To(ExitWithError(125, \"no such pod foobar\"))\n\t})\n```\n\n----------------------------------------\n\nTITLE: Using Stateless Gzip Compression in Go\nDESCRIPTION: Demonstrates how to use stateless compression with gzip, which doesn't maintain state between Write calls. This is useful for scenarios with many concurrent compressors but little activity.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)\nif err != nil {\n    return err\n}\ndefer gzw.Close()\n\nw := bufio.NewWriterSize(gzw, 4096)\ndefer w.Flush()\n\n// Write to 'w'\n```\n\n----------------------------------------\n\nTITLE: Defining SBOM Merge Strategy Option for Podman Farm Build\nDESCRIPTION: This snippet defines the --sbom-merge-strategy option for Podman farm build. It specifies methods to merge outputs from multiple SBOM scanner commands, including concatenation and merging based on component or package information.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sbom-merge-strategy.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--sbom-merge-strategy**=*method*\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin for Podman PRs\nDESCRIPTION: The full text of the Developer Certificate of Origin v1.1 from developercertificate.org that contributors agree to when signing their commits with the Signed-off-by line.\nSOURCE: https://github.com/containers/podman/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text\nDESCRIPTION: The full text of the Developer Certificate of Origin v1.1 that contributors must agree to when signing their work. Defines the terms under which contributions can be made to the project.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/distribution/reference/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Words Using FirstWordInString - Go\nDESCRIPTION: This code uses the FirstWordInString function from uniseg to segment an input string into words and non-word sequences. It maintains an iteration state, printing each token surrounded by parentheses. The snippet relies on the state management and expects inputs like punctuation and spaces to be treated as separate boundaries.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nstr := \"Hello, world!\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, state = uniseg.FirstWordInString(str, state)\n\tfmt.Printf(\"(%s)\\n\", c)\n}\n// (Hello)\n// (,)\n// ( )\n// (world)\n// (!)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Multiple Generated KSUIDs with Template Formatting via CLI\nDESCRIPTION: This shell command generates four KSUIDs using a subshell `$(ksuid -n 4)` and pipes them as arguments to another `ksuid` command for inspection. The outer command uses `-f template` and the template `-t '{{ .Time }}: {{ .Payload }}'` to format the Time and Payload of each generated KSUID.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/segmentio/ksuid/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -f template -t '{{ .Time }}: {{ .Payload }}' $(ksuid -n 4)\n2017-10-09 21:05:37 -0700 PDT: 304102BC687E087CC3A811F21D113CCF\n2017-10-09 21:05:37 -0700 PDT: EAF0B240A9BFA55E079D887120D962F0\n2017-10-09 21:05:37 -0700 PDT: DF0761769909ABB0C7BB9D66F79FC041\n2017-10-09 21:05:37 -0700 PDT: 1A8F0E3D0BDEB84A5FAD702876F46543\n```\n\n----------------------------------------\n\nTITLE: Web Server Log Output for Signature Verification in Podman\nDESCRIPTION: Log output from the signature web server showing a successful signature file request, confirming that the signature verification process is working correctly.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1 - - [04/Mar/2020 11:18:21] \"GET /alpine@sha256=e9b65ef660a3ff91d28cc50eba84f21798a6c5c39b4dd165047db49e84ae1fb9/signature-1 HTTP/1.1\" 200 -\n```\n\n----------------------------------------\n\nTITLE: Updating Changelog for Podman 1.3 Release\nDESCRIPTION: This snippet lists the changes and updates made in version 1.3 of Podman, including bug fixes, feature additions, and dependency updates.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1.3 (2018-08-4)\n    Revert pull error handling from 881\n    bud should not search context directory for Dockerfile\n    Set BUILDAH_ISOLATION=rootless when running unprivileged\n    .papr.sh: Also test with BUILDAH_ISOLATION=rootless\n    Skip certain tests when we're using \"rootless\" isolation\n    .travis.yml: run integration tests with BUILDAH_ISOLATION=chroot\n    Add and implement IsolationOCIRootless\n    Add a value for IsolationOCIRootless\n    Fix rmi to remove intermediate images associated with an image\n    Return policy error on pull\n    Update containers/image to 216acb1bcd2c1abef736ee322e17147ee2b7d76c\n    Switch to github.com/containers/image/pkg/sysregistriesv2\n    unshare: make adjusting the OOM score optional\n    Add flags validation\n    chroot: handle raising process limits\n    chroot: make the resource limits name map module-global\n    Remove rpm.bats, we need to run this manually\n    Set the default ulimits to match Docker\n    buildah: no args is out of bounds\n    unshare: error message missed the pid\n    preprocess \".in\" suffixed Dockerfiles\n    Fix the the in buildah-config man page\n    Only test rpmbuild on latest fedora\n    Add support for multiple Short options\n    Update to latest urvave/cli\n    Add additional SELinux tests\n    Vendor in latest github.com/containers/{image;storage}\n    Stop testing with golang 1.8\n    Fix volume cache issue with buildah bud --layers\n    Create buildah pull command\n    Increase the deadline for gometalinter during 'make validate'\n    .papr.sh: Also test with BUILDAH_ISOLATION=chroot\n    .travis.yml: run integration tests with BUILDAH_ISOLATION=chroot\n    Add a Dockerfile\n    Set BUILDAH_ISOLATION=chroot when running unprivileged\n    Add and implement IsolationChroot\n    Update github.com/opencontainers/runc\n    maybeReexecUsingUserNamespace: add a default for root\n    Allow ping command without NET_RAW Capabilities\n    rmi.storageImageID: fix Wrapf format warning\n    Allow Dockerfile content to come from stdin\n    Vendor latest container/storage to fix overlay mountopt\n    userns: assign additional IDs sequentially\n    Remove default dev/pts\n    Add OnBuild test to baseline test\n    tests/run.bats(volumes): use :z when SELinux is enabled\n    Avoid a stall in runCollectOutput()\n    Use manifest from container/image\n    Vendor in latest containers/image and containers/storage\n    add rename command\n    Completion command\n    Update CHANGELOG.md\n    Update vendor for runc to fix 32 bit builds\n    bash completion: remove shebang\n    Update vendor for runc to fix 32 bit builds\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Kubernetes API Validation After Refactoring\nDESCRIPTION: Benchmark results after initial refactoring showing reduction to ~25M allocations and improved memory usage. Shows significant performance improvement from the initial version.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo test -bench Spec\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor\nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t4064535557 ns/op\t3379715592 B/op\t25320330 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Error Handling in GoValidator\nDESCRIPTION: Example showing how to iterate over individual errors returned by the validation functions. Useful when you need to handle each validation error separately rather than as a combined error message.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n  if err != nil {\n    errs := err.(govalidator.Errors).Errors()\n    for _, e := range errs {\n      fmt.Println(e.Error())\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Usage of Global MeterProvider in OpenTelemetry Go\nDESCRIPTION: Example of how to use the global MeterProvider functions in the go.opentelemetry.io/otel package, including getting a Meter, retrieving the global MeterProvider, and setting a global MeterProvider.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Use Meter for a metric.Meter from the global metric.MeterProvider\nmeter := otel.Meter(\"my-meter-name\")\n\n// Use GetMeterProvider for a global metric.MeterProvider\nglobalMP := otel.GetMeterProvider()\n\n// Use SetMeterProvider to set the global metric.MeterProvider\notel.SetMeterProvider(myMeterProvider)\n```\n\n----------------------------------------\n\nTITLE: Importing Docker Distribution Library in Go\nDESCRIPTION: This snippet shows the import statements for the Docker distribution library, which provides functionality related to Docker registry APIs and error handling.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/docker/distribution/registry/api/errcode\ngithub.com/docker/distribution/registry/api/v2\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing Go OLE\nDESCRIPTION: Commands to download, install and test the go-ole library, including running an Excel example program.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-ole/go-ole/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/go-ole/go-ole\ncd /path/to/go-ole/\ngo test\n\ncd /path/to/go-ole/example/excel\ngo run excel.go\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Certificate with certtool\nDESCRIPTION: Generates a self-signed certificate using the previously created private key and a domain configuration template. The certificate is generated without password protection and saved to domain.crt.\nSOURCE: https://github.com/containers/podman/blob/main/test/certs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncerttool --generate-self-signed --load-privkey=domain.key --template=domain.cfg --outfile=domain.crt --load-ca-privkey=domain.key --null-password --no-text\n```\n\n----------------------------------------\n\nTITLE: Running All Ginkgo Tests Locally - Bash\nDESCRIPTION: Runs all tests in the project recursively and in parallel using the Ginkgo test runner. Depends on having Ginkgo installed in the environment. The '-r' flag tells Ginkgo to run tests in all subdirectories, while '-p' enables parallel test execution. Input: none; Output: console output from test runs. Used to ensure all unit tests pass before submitting a pull request.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/gomega/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nginkgo -r -p\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Arithmetic with shopspring/decimal in Go\nDESCRIPTION: Demonstrates basic usage of the `shopspring/decimal` library in Go. It shows how to create `decimal` instances from strings (`NewFromString`), integers (`NewFromInt`), and floats (`NewFromFloat`), perform multiplication (`Mul`), addition (`Add`), subtraction (`Sub`), and division (`Div`) operations, and print the results using `fmt.Println`. Error handling for string conversion using `NewFromString` is included. Dependencies include the standard `fmt` package and `github.com/shopspring/decimal`.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/shopspring/decimal/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/shopspring/decimal\"\n)\n\nfunc main() {\n\tprice, err := decimal.NewFromString(\"136.02\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tquantity := decimal.NewFromInt(3)\n\n\tfee, _ := decimal.NewFromString(\".035\")\n\ttaxRate, _ := decimal.NewFromString(\".08875\")\n\n\tsubtotal := price.Mul(quantity)\n\n\tpreTax := subtotal.Mul(fee.Add(decimal.NewFromFloat(1)))\n\n\ttotal := preTax.Mul(taxRate.Add(decimal.NewFromFloat(1)))\n\n\tfmt.Println(\"Subtotal:\", subtotal)                      // Subtotal: 408.06\n\tfmt.Println(\"Pre-tax:\", preTax)                         // Pre-tax: 422.3421\n\tfmt.Println(\"Taxes:\", total.Sub(preTax))                // Taxes: 37.482861375\n\tfmt.Println(\"Total:\", total)                            // Total: 459.824961375\n\tfmt.Println(\"Tax rate:\", total.Sub(preTax).Div(preTax)) // Tax rate: 0.08875\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Programmatically Enabling/Disabling Color Output - fatih/color - Go\nDESCRIPTION: Shows how to toggle color output globally or per-color-instance by changing the NoColor variable or calling EnableColor/DisableColor. Supports user-driven configuration (e.g., CLI flags) and environmental constraints. This pattern is essential for creating accessible or CI-friendly apps.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar flagNoColor = flag.Bool(\"no-color\", false, \"Disable color output\")\n\nif *flagNoColor {\n\tcolor.NoColor = true // disables colorized output\n}\n\n```\n\nLANGUAGE: go\nCODE:\n```\nc := color.New(color.FgCyan)\nc.Println(\"Prints cyan text\")\n\nc.DisableColor()\nc.Println(\"This is printed without any color\")\n\nc.EnableColor()\nc.Println(\"This prints again cyan...\")\n\n```\n\n----------------------------------------\n\nTITLE: Binding Flag to Variable with pflag\nDESCRIPTION: This snippet shows how to bind a flag to a variable using pflag's Var() functions. It creates an integer flag named \"flagname\" and binds it to the flagvar variable.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Switch to Root User (Alternative Method)\nDESCRIPTION: Escalates privileges to the 'root' user within the Podman machine if running in rootless mode. This step is necessary for the alternative method to allow writing files to the system trust store directory.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n[core@localhost ~]$ sudo su -\n```\n\n----------------------------------------\n\nTITLE: Resolving Volume Mount Permissions using :Z Suffix in Podman Console\nDESCRIPTION: This command demonstrates a solution to SELinux-related permission issues when mounting volumes. Appending the `:Z` suffix to the volume mount definition (`-v ~/mycontent:/content:Z`) instructs Podman to relabel the host directory (`~/mycontent`) with a private, unshared SELinux label, allowing the container exclusive read/write access.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ podman run -v ~/mycontent:/content:Z fedora touch /content/file\n```\n\n----------------------------------------\n\nTITLE: Handling Shared Configuration in Go\nDESCRIPTION: Example of handling overlapping configuration between different types using shared config and specific option interfaces.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// config holds options for all animals.\ntype config struct {\n\tWeight      float64\n\tColor       string\n\tMaxAltitude float64\n}\n\n// DogOption apply Dog specific options.\ntype DogOption interface {\n\tapplyDog(config) config\n}\n\n// BirdOption apply Bird specific options.\ntype BirdOption interface {\n\tapplyBird(config) config\n}\n\n// Option apply options for all animals.\ntype Option interface {\n\tBirdOption\n\tDogOption\n}\n\ntype weightOption float64\n\nfunc (o weightOption) applyDog(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc (o weightOption) applyBird(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc WithWeight(w float64) Option { return weightOption(w) }\n\ntype furColorOption string\n\nfunc (o furColorOption) applyDog(c config) config {\n\tc.Color = string(o)\n\treturn c\n}\n\nfunc WithFurColor(c string) DogOption { return furColorOption(c) }\n\ntype maxAltitudeOption float64\n\nfunc (o maxAltitudeOption) applyBird(c config) config {\n\tc.MaxAltitude = float64(o)\n\treturn c\n}\n\nfunc WithMaxAltitude(a float64) BirdOption { return maxAltitudeOption(a) }\n\nfunc NewDog(name string, o ...DogOption) Dog    {…}\nfunc NewBird(name string, o ...BirdOption) Bird {…}\n```\n\n----------------------------------------\n\nTITLE: Verbose Git Validation Output\nDESCRIPTION: Demonstrates verbose output of git-validation, showing detailed results for each rule.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/vbatts/git-validation/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nvbatts@valse ~/src/vb/git-validation (master) $ git-validation -v\n * d614ccf \"*: run tests in a runner\" ... PASS\n  - PASS - has a valid DCO\n  - PASS - commit subject is 72 characters or less! *yay*\n * b9413c6 \"shortsubject: add a subject length check\" ... PASS\n  - PASS - has a valid DCO\n  - PASS - commit subject is 72 characters or less! *yay*\n * 5e74abd \"*: comments and golint\" ... PASS\n  - PASS - has a valid DCO\n  - PASS - commit subject is 72 characters or less! *yay*\n * 07a982f \"git: add verbose output of the commands run\" ... PASS\n  - PASS - has a valid DCO\n  - PASS - commit subject is 72 characters or less! *yay*\n * 03bda4b \"main: add filtering of rules to run\" ... PASS\n  - PASS - has a valid DCO\n  - PASS - commit subject is 72 characters or less! *yay*\n * c10ba9c \"Initial commit\" ... PASS\n  - PASS - has a valid DCO\n  - PASS - commit subject is 72 characters or less! *yay*\n```\n\n----------------------------------------\n\nTITLE: OTLP Version 0.7.0 Release Changes - Go\nDESCRIPTION: Key changes in version 0.7.0 implementing OpenTelemetry specification v0.5.0, including instrumentation improvements, propagator fixes, and API refinements.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Parsing Basic Shell Command in Go\nDESCRIPTION: Demonstrates how to use shellwords.Parse() to split a basic shell command into arguments.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-shellwords/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nargs, err := shellwords.Parse(\"./foo --bar=baz\")\n// args should be [\"./foo\", \"--bar=baz\"]\n```\n\n----------------------------------------\n\nTITLE: Defining the causer Interface for Error Unwrapping - Go\nDESCRIPTION: This snippet defines a Go interface called causer, which requires implementing a Cause() error method for error unwrapping. It is meant for custom error types that can expose their underlying cause, enabling recursive error extraction. This is primarily used in conjunction with errors.Cause from pkg/errors when inspecting errors. There are no dependencies other than Go's native interface features.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Marshaling Go struct to TOML\nDESCRIPTION: Shows how to marshal a Go struct into a TOML document using go-toml v2.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncfg := MyConfig{\n      Version: 2,\n      Name:    \"go-toml\",\n      Tags:    []string{\"go\", \"toml\"},\n}\n\nb, err := toml.Marshal(cfg)\nif err != nil {\n      panic(err)\n}\nfmt.Println(string(b))\n```\n\n----------------------------------------\n\nTITLE: Fixes Reference Format in Commit Messages for Podman\nDESCRIPTION: Examples of correctly formatted 'Fixes:' lines that should be included in commit messages when fixing issues. This format helps link the PR to the issue it resolves, using either GitHub issue numbers or Red Hat issue tracking references.\nSOURCE: https://github.com/containers/podman/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```\nFixes: #00000\nFixes: https://github.com/containers/common/issues/00000\nFixes: https://issues.redhat.com/browse/RHEL-00000\nFixes: RHEL-00000\n```\n```\n\n----------------------------------------\n\nTITLE: Exit Root Shell Session (Alternative Method)\nDESCRIPTION: Exits the root shell session after updating the trust store in the alternative method. This returns the user to the 'core' user's shell if `sudo su -` was used.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n[root@localhost anchors]# exit\n```\n\n----------------------------------------\n\nTITLE: Installing Mergo Library using Go Get\nDESCRIPTION: This command installs the Mergo library using the `go get` tool. It downloads and installs the package from its GitHub repository, making it available for use in Go projects.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/imdario/mergo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/imdario/mergo\n```\n\n----------------------------------------\n\nTITLE: YAML-JSON Conversion in Go\nDESCRIPTION: Demonstrates conversion between YAML and JSON formats using YAMLToJSON and JSONToYAML utility functions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/sigs.k8s.io/yaml/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"sigs.k8s.io/yaml\"\n)\n\nfunc main() {\n\tj := []byte(`{\"name\": \"John\", \"age\": 30}`)\n\ty, err := yaml.JSONToYAML(j)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(y))\n\t/* Output:\n\tage: 30\n\tname: John\n\t*/\n\tj2, err := yaml.YAMLToJSON(y)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(j2))\n\t/* Output:\n\t{\"age\":30,\"name\":\"John\"}\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Grapheme Clusters with Graphemes Class - Go\nDESCRIPTION: This snippet initializes a Graphemes iterator for the input string and uses its Next method to iterate over each grapheme cluster. For each cluster, it prints the runes in hexadecimal format. Requires the uniseg package for the Graphemes struct and Next/Runes methods, and fmt for printing. The input string can contain multicodepoint characters; outputs are clusters as rune slices.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngr := uniseg.NewGraphemes(\"👍🏼!\")\nfor gr.Next() {\n\tfmt.Printf(\"%x \", gr.Runes())\n}\n// [1f44d 1f3fc] [21]\n```\n\n----------------------------------------\n\nTITLE: Formatting Log Output with TextFormatter - Go\nDESCRIPTION: This snippet displays log output from Logrus using the TextFormatter, which mimics the logfmt style and is suitable for environments without TTY. The fields include 'time', 'level', 'msg', and other contextual information. No dependencies outside Logrus are required. Input is log statements; output is a plain text line per log event formatted with key-value pairs.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntime=\"2015-03-26T01:27:38-04:00\" level=debug msg=\"Started observing beach\" animal=walrus number=8\\ntime=\"2015-03-26T01:27:38-04:00\" level=info msg=\"A group of walrus emerges from the ocean\" animal=walrus size=10\\ntime=\"2015-03-26T01:27:38-04:00\" level=warning msg=\"The group's number increased tremendously!\" number=122 omg=true\\ntime=\"2015-03-26T01:27:38-04:00\" level=debug msg=\"Temperature changes\" temperature=-4\\ntime=\"2015-03-26T01:27:38-04:00\" level=panic msg=\"It's over 9000!\" animal=orca size=9009\\ntime=\"2015-03-26T01:27:38-04:00\" level=fatal msg=\"The ice breaks!\" err=&{0x2082280c0 map[animal:orca size:9009] 2015-03-26 01:27:38.441574009 -0400 EDT panic It's over 9000!} number=100 omg=true\n```\n\n----------------------------------------\n\nTITLE: Using MemMapFs Backend in Afero\nDESCRIPTION: This snippet demonstrates the usage of Afero's MemMapFs backend, which provides a fully atomic memory-backed filesystem.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmm := afero.NewMemMapFs()\nmm.MkdirAll(\"src/a\", 0755)\n```\n\n----------------------------------------\n\nTITLE: Output of Podman Machine Initialization (Text)\nDESCRIPTION: Shows the typical console output during the `podman machine init` process. This includes extracting files, importing the OS into WSL, installing packages, configuring the system, generating SSH keys, and confirming completion. It also provides the command to start the machine.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPS C:\\Users\\User> podman machine init\nExtracting compressed file\nImporting operating system into WSL (this may take 5+ minutes on a new WSL install)...\nInstalling packages (this will take a while)...\nComplete!\nConfiguring system...\nGenerating public/private ed25519 key pair.\nYour identification has been saved in podman-machine-default\nYour public key has been saved in podman-machine-default.pub\nThe key fingerprint is:\nSHA256:RGTGg2Q/LX7ijN+mzu8+BzcS3cEWP6Hir6pYllJtceA root@WINPC\nMachine init complete\nTo start your machine run:\n\n        podman machine start\n```\n\n----------------------------------------\n\nTITLE: Parameterized Validators in GoValidator\nDESCRIPTION: List of validators that accept parameters, enabling more specific validation constraints. These validators allow specifying min/max values, patterns, and other configurable limits.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n\"range(min|max)\": Range,\n\"length(min|max)\": ByteLength,\n\"runelength(min|max)\": RuneLength,\n\"stringlength(min|max)\": StringLength,\n\"matches(pattern)\": StringMatches,\n\"in(string1|string2|...|stringN)\": IsIn,\n\"rsapub(keylength)\" : IsRsaPub,\n\"minstringlength(int): MinStringLength,\n\"maxstringlength(int): MaxStringLength,\n```\n\n----------------------------------------\n\nTITLE: Importing Spew Debugging Library in Go\nDESCRIPTION: This snippet shows the import statement for the go-spew library, which provides deep pretty printing for Go data structures to aid in debugging.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/davecgh/go-spew/spew\n```\n\n----------------------------------------\n\nTITLE: Installing fatih/color with go get - Bash\nDESCRIPTION: Installs the fatih/color package from GitHub into the current Go workspace. This command is required before using the package in your Go projects. It downloads the latest version and resolves dependencies, but you must have Go installed.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/fatih/color\n```\n\n----------------------------------------\n\nTITLE: Importing Process Status Library in Go\nDESCRIPTION: This snippet shows the import statements for the psgo library, which provides functionality for retrieving process status information in a container-aware manner. It includes packages for handling capabilities, cgroups, and process information.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/containers/psgo\ngithub.com/containers/psgo/internal/capabilities\ngithub.com/containers/psgo/internal/cgroups\ngithub.com/containers/psgo/internal/dev\ngithub.com/containers/psgo/internal/host\ngithub.com/containers/psgo/internal/proc\ngithub.com/containers/psgo/internal/process\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for test/utils in Podman\nDESCRIPTION: Command to run unit tests for the test/utils package which contains common testing utilities for Podman.\nSOURCE: https://github.com/containers/podman/blob/main/test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nmake localunit\n```\n\n----------------------------------------\n\nTITLE: Checking Minimum CRIU Version with Go-criu - Go\nDESCRIPTION: This Go snippet checks whether a specified minimum version of CRIU is installed using the IsCriuAtLeast method from the go-criu package. It creates a CRIU context with MakeCriu and queries if CRIU meets the version requirement, returning a result and potential error for further handling. Dependencies: go-criu v7, CRIU must be installed. The key parameter is the version integer (e.g., 31100), representing the required minimum CRIU version. Outputs a boolean indicating success or failure and any errors encountered. This approach is essential for programs that depend on specific CRIU features, enabling graceful version compatibility checks.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/checkpoint-restore/go-criu/v7/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\tc := criu.MakeCriu()\n\tresult, err := c.IsCriuAtLeast(31100)\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC-Go Logging\nDESCRIPTION: Environment variable settings to enable detailed logging in gRPC-Go. Sets maximum verbosity and info severity level.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99\n$ export GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Copying with Options in Go using Copier\nDESCRIPTION: This snippet demonstrates how to use the CopyWithOption function from the Copier package. It allows for more advanced copying options such as ignoring empty fields and performing deep copies.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/jinzhu/copier/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncopier.CopyWithOption(&to, &from, copier.Option{IgnoreEmpty: true, DeepCopy: true})\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Canonicalization Library in Go\nDESCRIPTION: This snippet shows the import statement for the json-canonicalization library, which provides functionality for canonicalizing JSON data.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/cyberphone/json-canonicalization/go/src/webpki.org/jsoncanonicalizer\n```\n\n----------------------------------------\n\nTITLE: Using `numcpus` Package to Get Online and Possible CPUs in Go\nDESCRIPTION: This Go code snippet demonstrates how to use the `numcpus` package to retrieve the number of online and possible CPUs. It imports the package, calls the `GetOnline()` and `GetPossible()` functions, performs basic error handling by printing errors to standard error, and prints the retrieved CPU counts to standard output. It requires the `github.com/tklauser/numcpus` package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/tklauser/numcpus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n```Go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/tklauser/numcpus\"\n)\n\nfunc main() {\n\tonline, err := numcpus.GetOnline()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GetOnline: %v\\n\", err)\n\t}\n\tfmt.Printf(\"online CPUs: %v\\n\", online)\n\n\tpossible, err := numcpus.GetPossible()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GetPossible: %v\\n\", err)\n\t}\n\tfmt.Printf(\"possible CPUs: %v\\n\", possible)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Domain Information Output\nDESCRIPTION: Example output showing the result of running the previous code, displaying the libvirt version and a list of domains with their respective IDs, names, and UUIDs.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/digitalocean/go-libvirt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nVersion: 1.3.4\nID\tName\t\tUUID\n--------------------------------------------------------\n1\tTest-1\t\tdc329f87d4de47198cfd2e21c6105b01\n2\tTest-2\t\tdc229f87d4de47198cfd2e21c6105b01\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Podman Repository Directory\nDESCRIPTION: PowerShell command to change the current directory to the Podman git repository folder for building the project.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_13\n\nLANGUAGE: pwsh\nCODE:\n```\nSet-Location .\\podman\n```\n\n----------------------------------------\n\nTITLE: Example Template Dictionary Creation\nDESCRIPTION: Shows how to create a dictionary inside a Go template using the dict function\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{$d := dict \"key1\" \"val1\" \"key2\" \"val2\"}}\n```\n\n----------------------------------------\n\nTITLE: Using BasePathFs in Afero\nDESCRIPTION: This snippet shows how to use Afero's BasePathFs, which restricts all operations to a given path within a filesystem.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nbp := afero.NewBasePathFs(afero.NewOsFs(), \"/base/path\")\n```\n\n----------------------------------------\n\nTITLE: Reading Remote Configuration from Etcd3 with Viper\nDESCRIPTION: Shows how to connect to and read configuration from an etcd3 remote provider using Viper.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"etcd3\", \"http://127.0.0.1:4001\",\"/config/hugo.json\")\nviper.SetConfigType(\"json\") // because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Displaying Contribution Guidelines in Markdown\nDESCRIPTION: This markdown snippet outlines the contribution process for the Podman container project. It includes instructions on commit formatting, testing, release procedures, and legal requirements.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/google/uuid/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# How to contribute\n\nWe definitely welcome patches and contribution to this project!\n\n### Tips\n\nCommits must be formatted according to the [Conventional Commits Specification](https://www.conventionalcommits.org).\n\nAlways try to include a test case! If it is not possible or not necessary,\nplease explain why in the pull request description.\n\n### Releasing\n\nCommits that would precipitate a SemVer change, as described in the Conventional\nCommits Specification, will trigger [`release-please`](https://github.com/google-github-actions/release-please-action)\nto create a release candidate pull request. Once submitted, `release-please`\nwill create a release.\n\nFor tips on how to work with `release-please`, see its documentation.\n\n### Legal requirements\n\nIn order to protect both you and ourselves, you will need to sign the\n[Contributor License Agreement](https://cla.developers.google.com/clas).\n\nYou may have already signed it for other Google projects.\n```\n\n----------------------------------------\n\nTITLE: Filtering and Counting Slice Elements in Go\nDESCRIPTION: Demonstrates the use of Filter and Count functions to process slice elements based on a condition.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nvar fn govalidator.ConditionIterator = func(value interface{}, index int) bool {\n\treturn value.(int)%2 == 0\n}\n_ = govalidator.Filter(data, fn) // result = []interface{}{2, 4, 6, 8, 10}\n_ = govalidator.Count(data, fn) // result = 5\n```\n\n----------------------------------------\n\nTITLE: Creating Libvirt Monitor via virsh in Go\nDESCRIPTION: Initializes a QMP monitor connection using the virsh executable as a proxy to communicate with QEMU instances.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/digitalocean/go-qemu/qmp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmonitor, err := qmp.NewLibvirtMonitor(\"qemu:///system\", \"stage-lb-1\")\n```\n\n----------------------------------------\n\nTITLE: Viewing Changelog Details in Markdown\nDESCRIPTION: Detailed changelog entries documenting the evolution of the Podman container project, including major feature additions, bug fixes, and version releases from 0.2 through 1.1.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1 (2018-06-08)\n    Drop capabilities if running container processes as non root\n    Print Warning message if cmd will not be used based on entrypoint\n    Update 01-intro.md\n    Shouldn't add insecure registries to list of search registries\n    Report errors on bad transports specification when pushing images\n    Move parsing code out of common for namespaces and into pkg/parse.go\n    Add disable-content-trust noop flag to bud\n    Change freenode chan to buildah\n    runCopyStdio(): don't close stdin unless we saw POLLHUP\n    Add registry errors for pull\n```\n\n----------------------------------------\n\nTITLE: Listing Available Git Validation Rules\nDESCRIPTION: Demonstrates how to list all registered validation rules using the -list-rules flag.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/vbatts/git-validation/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvbatts@valse ~/src/vb/git-validation (master) $ git-validation -list-rules\n\"dangling-whitespace\" -- checking the presence of dangling whitespaces on line endings\n\"DCO\" -- makes sure the commits are signed\n\"message_regexp\" -- checks the commit message for a user provided regular expression\n\"short-subject\" -- commit subjects are strictly less than 90 (github ellipsis length)\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Go with Git\nDESCRIPTION: Alternative command to clone the repository directly using git instead of the Go module system.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Running Git Validation Tests\nDESCRIPTION: Command to run linting, vetting, building, and testing for the git-validation project.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/vbatts/git-validation/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo run mage.go lint vet build test\n```\n\n----------------------------------------\n\nTITLE: Installing aec Library using Go Get (Bash)\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the `aec` package from its GitHub repository. This is the standard way to add Go dependencies to a project. Requires Go to be installed and configured.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/morikuni/aec/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/morikuni/aec\n```\n\n----------------------------------------\n\nTITLE: Verifying Pre-release Changes in Git\nDESCRIPTION: Commands to verify the changes made by the pre-release process, comparing the differences and merging them into the pre-release branch if correct.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit diff ...prerelease_<module set>_<new tag>\ngit merge prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: Accessing Parsed Flag Values with pflag in Go\nDESCRIPTION: Shows how to access the values of parsed flags. If the flag was defined using functions like `flag.Int()`, its value is accessed by dereferencing the returned pointer (`*ip`). If the flag was bound to a variable using functions like `flag.IntVar()`, the variable (`flagvar`) can be used directly.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Updating Podman Changelog in Markdown\nDESCRIPTION: This snippet shows the changelog entries for Podman versions 1.25.0, 1.24.2, and 1.24.1. It lists various updates, including dependency bumps, bug fixes, and new features implemented in the project.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.25.0 (2022-03-25)\n\n    install: drop RHEL/CentOS 7 doc\n    build(deps): bump github.com/containers/common from 0.47.4 to 0.47.5\n    Bump c/storage to v1.39.0 in main\n    Add a test for CVE-2022-27651\n    build(deps): bump github.com/docker/docker\n    Bump github.com/prometheus/client_golang to v1.11.1\n    [CI:DOCS] man pages: sort flags, and keep them that way\n    build(deps): bump github.com/containerd/containerd from 1.6.1 to 1.6.2\n    Don't pollute\n    network setup: increase timeout to 4 minutes\n    do not set the inheritable capabilities\n    build(deps): bump github.com/golangci/golangci-lint in /tests/tools\n    build(deps): bump github.com/containers/ocicrypt from 1.1.2 to 1.1.3\n    parse: convert exposed GetVolumes to internal only\n    buildkit: mount=type=cache support locking external cache store\n    .in support: improve error message when cpp is not installed\n    buildah image: install cpp\n    build(deps): bump github.com/stretchr/testify from 1.7.0 to 1.7.1\n    build(deps): bump github.com/spf13/cobra from 1.3.0 to 1.4.0\n    build(deps): bump github.com/docker/docker\n    Add --no-hosts flag to eliminate use of /etc/hosts within containers\n    test: remove skips for rootless users\n    test: unshare mount/umount if test is_rootless\n    tests/copy: read correct containers.conf\n    build(deps): bump github.com/docker/distribution\n    cirrus: add seperate task and matrix for rootless\n    tests: skip tests for rootless which need unshare\n    buildah: test rootless integration\n    vendor: bump c/storage to main/93ce26691863\n    build(deps): bump github.com/fsouza/go-dockerclient from 1.7.9 to 1.7.10\n    tests/copy: initialize the network, too\n    [CI:DOCS] remove references to Kubic for CentOS and Ubuntu\n    build(deps): bump github.com/containerd/containerd from 1.6.0 to 1.6.1\n    use c/image/pkg/blobcache\n    vendor c/image/v5@v5.20.0\n    add: ensure the context directory is an absolute path\n    executor: docker builds must inherit healthconfig from base if any\n    docs: Remove Containerfile and containeringore\n    build(deps): bump github.com/fsouza/go-dockerclient from 1.7.8 to 1.7.9\n    helpers.bash: Use correct syntax\n    speed up combination-namespaces test\n    build(deps): bump github.com/golangci/golangci-lint in /tests/tools\n    Bump back to 1.25.0-dev\n    build(deps): bump github.com/containerd/containerd from 1.5.9 to 1.6.0\n\n## v1.24.2 (2022-02-16)\n\n    Increase subuid/subgid to 65535\n    history: only add proxy vars to history if specified\n    run_linux: use --systemd-cgroup\n    buildah: new global option --cgroup-manager\n    Makefile: build with systemd when available\n    build(deps): bump github.com/fsouza/go-dockerclient from 1.7.7 to 1.7.8\n    Bump c/common to v0.47.4\n    Cirrus: Use updated VM images\n    conformance: add a few \"replace-directory-with-symlink\" tests\n    Bump back to v1.25.0-dev\n\n## v1.24.1 (2022-02-03)\n\n    executor: Add support for inline --platform within Dockerfile\n    caps: fix buildah run --cap-add=all\n    Update vendor of openshift/imagebuilder\n    Bump version of containers/image and containers/common\n    Update vendor of containers/common\n    System tests: fix accidental vandalism of source dir\n    build(deps): bump github.com/containers/storage from 1.38.1 to 1.38.2\n    imagebuildah.BuildDockerfiles(): create the jobs semaphore\n    build(deps): bump github.com/onsi/gomega from 1.18.0 to 1.18.1\n    overlay: always honor mountProgram\n    overlay: move mount program invocation to separate function\n    overlay: move mount program lookup to separate function\n    Bump to v1.25.0-dev [NO TESTS NEEDED]\n```\n\n----------------------------------------\n\nTITLE: Implementing the FlagValueSet Interface for Viper\nDESCRIPTION: Shows how to implement the FlagValueSet interface to integrate sets of custom flags with Viper.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype myFlagSet struct {\n\tflags []myFlag\n}\n\nfunc (f myFlagSet) VisitAll(fn func(FlagValue)) {\n\tfor _, flag := range flags {\n\t\tfn(flag)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Top-Level Buckets in BoltDB using Go\nDESCRIPTION: This snippet demonstrates how to iterate over all existing top-level buckets using the Tx.ForEach() function within a database view transaction.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ndb.View(func(tx *bolt.Tx) error {\n\ttx.ForEach(func(name []byte, b *bolt.Bucket) error {\n\t\tfmt.Println(string(name))\n\t\treturn nil\n\t})\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Profiling with Tags\nDESCRIPTION: Example of using OpenCensus tags with Go profiler for labeling samples.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opencensus.io/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx, err = tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Insert(userIDKey, \"fff0989878\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\ntag.Do(ctx, func(ctx context.Context) {\n\t// Do work.\n\t// When profiling is on, samples will be\n\t// recorded with the key/values from the tag map.\n})\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Go with Go Get\nDESCRIPTION: Command to fetch OpenTelemetry Go using the Go module system. This will add the package to your GOPATH.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Importing OpenTelemetry Attribute Package in Go\nDESCRIPTION: Examples of importing and using deprecated attribute functions from the OpenTelemetry Go SDK.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/attribute\"\n\n// Deprecated\nattribute.Sortable\nattribute.NewSetWithSortable\nattribute.NewSetWithSortableFiltered\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Nested Objects\nDESCRIPTION: Shows how to define objects and nested objects in HCL using block syntax. This example defines a top-level object type 'variable' with a specific instance named 'ami', which itself contains key-value pairs like 'description'.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/hashicorp/hcl/README.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"ami\" {\n    description = \"the AMI to use\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running All Build/Format Steps via Makefile (Shell)\nDESCRIPTION: Executes the `all` target specified in the project's Makefile. This command often represents a comprehensive check, ensuring code is correctly formatted (e.g., using `gofmt`), passes linting checks, builds successfully, and sometimes runs tests. Requires the `make` utility and a Makefile with an `all` target.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Flag or Shorthand\nDESCRIPTION: This snippet shows how to deprecate a flag or its shorthand, which hides it from help text and prints a usage message when used.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// deprecate a flag by specifying its name and a usage message\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n\n// deprecate a flag shorthand by specifying its flag name and a usage message\nflags.MarkShorthandDeprecated(\"noshorthandflag\", \"please use --noshorthandflag only\")\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Buildah from Source\nDESCRIPTION: Commands to clone the Buildah repository, build it, and install it on the system.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/containers/buildah\ncd buildah\nmake\nsudo make install\nbuildah --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus Hooks for Multiple Logging Destinations in Go\nDESCRIPTION: This snippet demonstrates how to set up multiple hooks in Logrus to send logs to different destinations. It configures an Airbrake hook for error reporting and a Syslog hook for local logging.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n  \"gopkg.in/gemnasium/logrus-airbrake-hook.v2\" // the package is named \"airbrake\"\n  logrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n  \"log/syslog\"\n)\n\nfunc init() {\n\n  // Use the Airbrake hook to report errors that have Error severity or above to\n  // an exception tracker. You can create custom hooks, see the Hooks section.\n  log.AddHook(airbrake.NewHook(123, \"xyz\", \"production\"))\n\n  hook, err := logrus_syslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n  if err != nil {\n    log.Error(\"Unable to connect to local syslog daemon\")\n  } else {\n    log.AddHook(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Podman Proxy URL Format (Plaintext)\nDESCRIPTION: Defines the format for specifying a SOCKS5 proxy URL via the `CONTAINER_PROXY` environment variable when using a `tcp` schema for the Podman service connection. It includes schema (socks5, socks5h), user, password, host, and port.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n<socks5|socks5h>://[<user[:<password>]@]<host>[:<port>]\n```\n\n----------------------------------------\n\nTITLE: In-Memory Zstandard Buffer Decompression in Go\nDESCRIPTION: Shows how to decompress a Zstandard compressed byte slice (`[]byte`) in memory using a reusable decoder. It initializes a `zstd.Reader` with a `nil` reader argument and potentially configures concurrency using `zstd.WithDecoderConcurrency(0)` (which defaults to GOMAXPROCS). The `DecodeAll` method decompresses the source slice `src`, automatically allocating and returning the destination buffer since the second argument is `nil`. This decoder can be reused for multiple concurrent decompression operations.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a reader that caches decompressors.\n// For this operation type we supply a nil Reader.\nvar decoder, _ = zstd.NewReader(nil, zstd.WithDecoderConcurrency(0))\n\n// Decompress a buffer. We don't supply a destination buffer,\n// so it will be allocated by the decoder.\nfunc Decompress(src []byte) ([]byte, error) {\n    return decoder.DecodeAll(src, nil)\n} \n```\n\n----------------------------------------\n\nTITLE: Importing Windows Quit Handler Library in Go\nDESCRIPTION: This snippet shows the import statements for the winquit library, which provides functionality for handling quit signals on Windows systems.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/containers/winquit/pkg/winquit\ngithub.com/containers/winquit/pkg/winquit/win32\n```\n\n----------------------------------------\n\nTITLE: Importing gotenv Package in Go\nDESCRIPTION: This snippet demonstrates how to import the gotenv package into a Go project. Including this import allows access to all gotenv functions for managing environment variables. No external dependencies are required beyond having gotenv in your module dependencies.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/subosito/gotenv/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/subosito/gotenv\"\n```\n\n----------------------------------------\n\nTITLE: Installing stripansi via Go Modules - Shell\nDESCRIPTION: Demonstrates how to install the stripansi library for Go using the `go get` command. This shell snippet ensures the package is added to your module’s dependencies, making it available for import and use within Go code. Run this command from your project root with Go modules enabled.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/acarl005/stripansi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get -u github.com/acarl005/stripansi\n```\n\n----------------------------------------\n\nTITLE: Running the Pre-release Process for OpenTelemetry Go\nDESCRIPTION: Commands to execute the pre-release target for a specific module set, creating a branch with version updates that can be reviewed before merging.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake prerelease MODSET=<module set>\n```\n\n----------------------------------------\n\nTITLE: Importing Hyper-V Extension Library in Go\nDESCRIPTION: This snippet shows the import statement for the libhvee library, which provides functionality for interacting with Hyper-V extensions. It includes packages for Hyper-V control, key-value pair operations, and WMI extensions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/containers/libhvee/pkg/hypervctl\ngithub.com/containers/libhvee/pkg/kvp/ginsu\ngithub.com/containers/libhvee/pkg/wmiext\n```\n\n----------------------------------------\n\nTITLE: Checking Podman Version Inside Podman Machine - Bash\nDESCRIPTION: Runs the podman executable inside a WSL or SSH session to check the installed version. Assumes the command is run as root within the Podman machine shell and outputs the current version number. No arguments are needed beyond shell access and the Podman install.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n[root@WINPC /]# podman --version\npodman version 4.1.0\n```\n\n----------------------------------------\n\nTITLE: Converting Strfmt Types to String in Go\nDESCRIPTION: Demonstrates how to convert strfmt types to strings using the String() method or direct type conversion.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-openapi/strfmt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nstring(Email{})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Path Parameter Values in Denco\nDESCRIPTION: Illustrates two methods for retrieving path parameter values in Denco: using the Get method and finding by loop.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/go-openapi/runtime/middleware/denco\"\n)\n\nfunc main() {\n    router := denco.New()\n    if err := router.Build([]denco.Record{\n        {\"/user/:name/:id\", \"route1\"},\n    }); err != nil {\n        panic(err)\n    }\n\n    // 1. Using denco.Params.Get method.\n    _, params, _ := router.Lookup(\"/user/alice/1\")\n    name := params.Get(\"name\")\n    if name != \"\" {\n        fmt.Printf(\"Hello %s.\\n\", name) // prints \"Hello alice.\".\n    }\n\n    // 2. Find by loop.\n    for _, param := range params {\n        if param.Name == \"name\" {\n            fmt.Printf(\"Hello %s.\\n\", name) // prints \"Hello alice.\".\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific FSNotify Test Example\nDESCRIPTION: Example demonstrating how to write platform-specific test cases with different expected outputs for different operating systems.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwatch /\ntouch /file\n\nOutput:\n    # Tested if nothing else matches\n    create    /file\n\n    # Windows-specific test.\n    windows:\n        write  /file\n```\n\n----------------------------------------\n\nTITLE: Installing Viper using Go Modules\nDESCRIPTION: Command to install Viper using Go's module system. This snippet shows how to add Viper as a dependency to a Go project.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/spf13/viper\n```\n\n----------------------------------------\n\nTITLE: Event Checking with Has() Method Example - Go\nDESCRIPTION: Demonstrates the new Has() method for checking event types in FSNotify v1.6.0, showing a comparison between the old and new syntax for checking event operations.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif event.Op&Write == Write && !(event.Op&Remove == Remove) {\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nif event.Has(Write) && !event.Has(Remove) {\n}\n```\n\n----------------------------------------\n\nTITLE: Go Import Path Example\nDESCRIPTION: Example of import path references in changelog\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_29\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/golangci/golangci-lint\n```\n\n----------------------------------------\n\nTITLE: Installing go-isatty via Go Get\nDESCRIPTION: This command installs the go-isatty library using the go get command. It fetches the library from the GitHub repository and installs it in the Go workspace.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/mattn/go-isatty/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/mattn/go-isatty\n```\n\n----------------------------------------\n\nTITLE: Importing OpenTelemetry Log Package in Go\nDESCRIPTION: Example of importing the new OpenTelemetry Go logging module, which is in alpha state.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/log\"\n```\n\n----------------------------------------\n\nTITLE: Change to CA Trust Anchors Directory (Alternative Method)\nDESCRIPTION: Navigates to the `/etc/pki/ca-trust/source/anchors` directory within the Podman machine. This is where the certificate file will be created using `vi` in the alternative method.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n[root@localhost ~]# cd /etc/pki/ca-trust/source/anchors\n```\n\n----------------------------------------\n\nTITLE: Copying an ECDSA Public SSH Key to a Remote Host\nDESCRIPTION: This command utilizes `ssh-copy-id` to securely append the specified public key (`~/.ssh/podman.pub`) to the `~/.ssh/authorized_keys` file on the remote host (`user@host`). This action authorizes the client machine to authenticate using the corresponding private key (`~/.ssh/podman`) for future SSH connections without needing a password. Replace `user@host` with the correct remote username and hostname.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_37\n\nLANGUAGE: console\nCODE:\n```\n$ ssh-copy-id -i ~/.ssh/podman.pub user@host\n```\n\n----------------------------------------\n\nTITLE: Importing pflag as flag in Go\nDESCRIPTION: Demonstrates how to import the `pflag` library, aliasing it to `flag`. This allows `pflag` to be used as a drop-in replacement for Go's standard `flag` package, maintaining compatibility with existing code that uses the standard library's functions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Global Backtick Expansion Setting in Go\nDESCRIPTION: Shows how to set the global ParseBacktick option and use it with a new parser instance.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-shellwords/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nshellwords.ParseBacktick = true\np := shellwords.NewParser()\nargs, err := p.Parse(\"./foo `echo $SHELL`\")\n// args should be [\"./foo\", \"/bin/bash\"]\n```\n\n----------------------------------------\n\nTITLE: Merging with Override Option using Mergo in Go\nDESCRIPTION: This Go code snippet shows how to use the `mergo.Merge` function with the `mergo.WithOverride` option. This option modifies the default merge behavior, causing fields from the `src` struct or map to overwrite existing non-zero values in the `dst` struct or map. Error handling for the merge operation is included.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/dario.cat/mergo/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src, mergo.WithOverride); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Autoincrementing Integer in BoltDB with Go\nDESCRIPTION: This snippet demonstrates how to use NextSequence() to generate a unique identifier for key-value pairs, useful for creating user IDs or other sequential data.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// CreateUser saves u to the store. The new user ID is set on u once the data is persisted.\nfunc (s *Store) CreateUser(u *User) error {\n    return s.db.Update(func(tx *bolt.Tx) error {\n        // Retrieve the users bucket.\n        // This should be created when the DB is first opened.\n        b := tx.Bucket([]byte(\"users\"))\n\n        // Generate ID for the user.\n        // This returns an error only if the Tx is closed or not writeable.\n        // That can't happen in an Update() call so I ignore the error check.\n        id, _ := b.NextSequence()\n        u.ID = int(id)\n\n        // Marshal user data into bytes.\n        buf, err := json.Marshal(u)\n        if err != nil {\n            return err\n        }\n\n        // Persist bytes to users bucket.\n        return b.Put(itob(u.ID), buf)\n    })\n}\n\n// itob returns an 8-byte big endian representation of v.\nfunc itob(v int) []byte {\n    b := make([]byte, 8)\n    binary.BigEndian.PutUint64(b, uint64(v))\n    return b\n}\n\ntype User struct {\n    ID int\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using OpenTelemetry Baggage Package in Go\nDESCRIPTION: Examples of new functions added to the OpenTelemetry Go baggage package for creating raw members and properties.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/baggage\"\n\nbaggage.NewMemberRaw\nbaggage.NewKeyValuePropertyRaw\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks\nDESCRIPTION: This command runs all benchmarks in the project 10 times to generate reliable results.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./... -bench=. -count=10\n```\n\n----------------------------------------\n\nTITLE: Running Local Go Documentation Server\nDESCRIPTION: Commands to install and run a local documentation server for viewing package documentation during development.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Podman Machine Info (Shell)\nDESCRIPTION: Demonstrates the basic usage of the `podman machine info` command without any options. It outputs host and version information in a human-readable format. This command requires Podman to be installed and configured, particularly for rootless operation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-info.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine info\nHost:\n  Arch: amd64\n  CurrentMachine: \"\"\n  DefaultMachine: \"\"\n  EventsDir: /run/user/3267/podman\n  MachineConfigDir: /home/myusername/.config/containers/podman/machine/qemu\n  MachineImageDir: /home/myusername/.local/share/containers/podman/machine/qemu\n  MachineState: \"\"\n  NumberOfMachines: 0\n  OS: linux\n  VMType: qemu\nVersion:\n  APIVersion: 4.4.0\n  Built: 1677097848\n  BuiltTime: Wed Feb 22 15:30:48 2023\n  GitCommit: aa196c0d5c9abd5800edf9e27587c60343a26c2b-dirty\n  GoVersion: go1.20\n  Os: linux\n  OsArch: linux/amd64\n  Version: 4.4.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Clock Ticks (SC_CLK_TCK) using go-sysconf in Go\nDESCRIPTION: This Go code demonstrates the basic usage of the go-sysconf package to fetch the system's clock ticks per second (SC_CLK_TCK), equivalent to `C.sysconf(C._SC_CLK_TCK)`. It imports the necessary packages (`fmt` and `github.com/tklauser/go-sysconf`), calls the `sysconf.Sysconf` function with the `sysconf.SC_CLK_TCK` constant, performs error checking, and prints the retrieved value to the console.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/tklauser/go-sysconf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n```Go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/tklauser/go-sysconf\"\n)\n\nfunc main() {\n\t// get clock ticks, this will return the same as C.sysconf(C._SC_CLK_TCK)\n\tclktck, err := sysconf.Sysconf(sysconf.SC_CLK_TCK)\n\tif err == nil {\n\t\tfmt.Printf(\"SC_CLK_TCK: %v\\n\", clktck)\n\t}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Links Section in Markdown\nDESCRIPTION: Reference link definitions for the Contributor Covenant homepage and version links used in the document.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-openapi/jsonpointer/CODE_OF_CONDUCT.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n```\n\n----------------------------------------\n\nTITLE: Markdown Code of Conduct Document Structure\nDESCRIPTION: Structured markdown document containing the complete Code of Conduct for the Podman project, including sections for pledge, standards, responsibilities, scope, enforcement and attribution\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/swag/CODE_OF_CONDUCT.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at ivan+abuse@flanders.co.nz. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n```\n\n----------------------------------------\n\nTITLE: Listing and Linking Release Changes - Markdown\nDESCRIPTION: This snippet illustrates the use of Markdown syntax to format a changelog, including release headings, bullet points, and links to GitHub pull requests and contributors. Dependencies are minimal, as any Markdown viewer or GitHub web interface will render formatting and links correctly. The snippet demonstrates standard conventions for documenting project history, citing both features and bug fixes, and using reference-style links for cleaner formatting.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/chzyer/readline/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ChangeLog\n\n### 1.4 - 2016-07-25\n\n* [#60][60] Support dynamic autocompletion\n* Fix ANSI parser on Windows\n* Fix wrong column width in complete mode on Windows\n* Remove dependent package \"golang.org/x/crypto/ssh/terminal\"\n\n### 1.3 - 2016-05-09\n\n* [#38][38] add SetChildren for prefix completer interface\n* [#42][42] improve multiple lines compatibility\n* [#43][43] remove sub-package(runes) for gopkg compatibility\n* [#46][46] Auto complete with space prefixed line\n* [#48][48]\tsupport suspend process (ctrl+Z)\n* [#49][49] fix bug that check equals with previous command\n* [#53][53] Fix bug which causes integer divide by zero panicking when input buffer is empty\n\n### 1.2 - 2016-03-05\n\n* Add a demo for checking password strength [example/readline-pass-strength](https://github.com/chzyer/readline/blob/master/example/readline-pass-strength/readline-pass-strength.go), , written by [@sahib](https://github.com/sahib)\n* [#23][23], support stdin remapping\n* [#27][27], add a `UniqueEditLine` to `Config`, which will erase the editing line after user submited it, usually use in IM.\n* Add a demo for multiline [example/readline-multiline](https://github.com/chzyer/readline/blob/master/example/readline-multiline/readline-multiline.go) which can submit one SQL by multiple lines.\n* Supports performs even stdin/stdout is not a tty.\n* Add a new simple apis for single instance, check by [here](https://github.com/chzyer/readline/blob/master/std.go). It need to save history manually if using this api.\n* [#28][28], fixes the history is not working as expected.\n* [#33][33], vim mode now support `c`, `d`, `x (delete character)`, `r (replace character)`\n\n### 1.1 - 2015-11-20\n\n* [#12][12] Add support for key `<Delete>`/`<Home>`/`<End>`\n* Only enter raw mode as needed (calling `Readline()`), program will receive signal(e.g. Ctrl+C) if not interact with `readline`.\n* Bugs fixed for `PrefixCompleter`\n* Press `Ctrl+D` in empty line will cause `io.EOF` in error, Press `Ctrl+C` in anytime will cause `ErrInterrupt` instead of `io.EOF`, this will privodes a shell-like user experience.\n* Customable Interrupt/EOF prompt in `Config`\n* [#17][17] Change atomic package to use 32bit function to let it runnable on arm 32bit devices\n* Provides a new password user experience(`readline.ReadPasswordEx()`).\n\n### 1.0 - 2015-10-14\n\n* Initial public release.\n\n[12]: https://github.com/chzyer/readline/pull/12\n[17]: https://github.com/chzyer/readline/pull/17\n[23]: https://github.com/chzyer/readline/pull/23\n[27]: https://github.com/chzyer/readline/pull/27\n[28]: https://github.com/chzyer/readline/pull/28\n[33]: https://github.com/chzyer/readline/pull/33\n[38]: https://github.com/chzyer/readline/pull/38\n[42]: https://github.com/chzyer/readline/pull/42\n[43]: https://github.com/chzyer/readline/pull/43\n[46]: https://github.com/chzyer/readline/pull/46\n[48]: https://github.com/chzyer/readline/pull/48\n[49]: https://github.com/chzyer/readline/pull/49\n[53]: https://github.com/chzyer/readline/pull/53\n[60]: https://github.com/chzyer/readline/pull/60\n\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry List in Markdown\nDESCRIPTION: A markdown-formatted list of changes, updates, and fixes included in Buildah version 1.29.0, including dependency updates, bug fixes, and feature enhancements.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.29.0 (2023-01-25)\n\n    tests: improve build-with-network-test\n    Bump c/storagev1.45.3, c/imagev5.24.0, c/commonv0.51.0\n    build(deps): bump github.com/onsi/gomega from 1.25.0 to 1.26.0\n    Flake 3710 has been closed. Reenable the test.\n    [CI:DOCS] Fix two diversity issues in a tutorial\n    build(deps): bump github.com/fsouza/go-dockerclient from 1.9.2 to 1.9.3\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Output Format in go-multierror (Go)\nDESCRIPTION: Shows how to set a custom ErrorFormat function on a multierror.Error instance to override its Error() string output. This allows customizing how the aggregated errors are displayed. The code requires that result is a *multierror.Error with errors already accumulated. The ErrorFormat is set to a user-supplied function that receives a slice of error and returns a string; in this example, it returns a static message, but it could format errors more elaborately. Use this pattern to control multierror stringification in logs or APIs.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining SFTP Request Structure and Method Handlers in Go\nDESCRIPTION: This documentation references the handler interface methods (Fileread, Filewrite, Filecmd, Fileinfo), each utilizing a standardized Request structure to process SFTP actions. Required dependencies include Go's io.Reader, io.Writer, and os.FileInfo interfaces. Handlers receive a *Request containing Method, Filepath, Flags, Attrs, and Target, and must return types according to protocol expectations (e.g., io.Reader, io.Writer, error, or a slice of os.FileInfo). Inputs are requests from an SFTP client; outputs are the corresponding data or error responses. Handlers must unmarshal raw attribute byte data if necessary and handle bitmask flags as per SFTP RFC.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/pkg/sftp/request-readme.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Request struct {\n    Method   string     // string name of incoming call\n    Filepath string     // POSIX path of file to act on\n    Flags    uint32     // 32bit bitmask value of file open/create flags\n    Attrs    []byte     // byte string of file attribute data\n    Target   string     // target path for renames and sym-links\n}\n\n// Fileread handler: returns io.Reader for \"Get\" requests\nFileread(*Request) (io.Reader, error)\n\n// Filewrite handler: returns io.Writer for \"Put\" requests\nFilewrite(*Request) (io.Writer, error)\n\n// Filecmd handler: executes file commands (\"SetStat\", \"Rename\", \"Rmdir\", \"Mkdir\", \"Symlink\")\nFilecmd(*Request) error\n\n// Fileinfo handler: retrieves file information (\"List\", \"Stat\", \"Readlink\")\nFileinfo(*Request) ([]os.FileInfo, error)\n\n```\n\n----------------------------------------\n\nTITLE: Go Package Path Example\nDESCRIPTION: Example of package path references in changelog\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_28\n\nLANGUAGE: Go\nCODE:\n```\ngo.opentelemetry.io/otel/exporter/trace/jaeger\n```\n\n----------------------------------------\n\nTITLE: Getting Flag Value by Name from pflag.FlagSet in Go\nDESCRIPTION: Illustrates how to retrieve the value of a flag by its name from a `pflag.FlagSet` object using type-specific getter methods like `GetInt()`. This avoids needing to manage pointers directly but requires knowing the flag's type and handling potential errors if the flag doesn't exist or has a different type.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ni, err := flagset.GetInt(\"flagname\")\n```\n\n----------------------------------------\n\nTITLE: Starting a Podman Machine\nDESCRIPTION: Command to start a previously initialized Podman machine using the locally built podman.exe binary, preparing it for running containers.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_20\n\nLANGUAGE: pwsh\nCODE:\n```\n.\\bin\\windows\\podman.exe machine start\n```\n\n----------------------------------------\n\nTITLE: Example Output of Chained Sprig Functions\nDESCRIPTION: This snippet shows the expected output generated by the preceding Go template example (`{{ \"hello!\" | upper | repeat 5 }}`). It illustrates the result of converting the string to uppercase and repeating it five times.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/sprig/v3/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nHELLO!HELLO!HELLO!HELLO!HELLO!\n```\n\n----------------------------------------\n\nTITLE: Running the test-compose script with optional pattern filtering\nDESCRIPTION: Command for executing the test-compose script, with an optional pattern parameter to filter which test subdirectories to run.\nSOURCE: https://github.com/containers/podman/blob/main/test/compose/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo test/compose/test-compose [pattern]\n```\n\n----------------------------------------\n\nTITLE: Using Slim-Sprig Functions in Go Templates\nDESCRIPTION: This example shows how to use Slim-Sprig functions within Go templates. It demonstrates chaining multiple functions to manipulate a string.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-task/slim-sprig/v3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ \"hello!\" | upper | repeat 5 }}\n```\n\n----------------------------------------\n\nTITLE: Implementing encoding.TextUnmarshaler for Complex Types and Decoding TOML - Go\nDESCRIPTION: Defines a custom Go type that satisfies encoding.TextUnmarshaler to parse mail addresses directly from TOML strings, sets up a struct for use with the BurntSushi TOML decoder, and prints parsed results. Dependencies: github.com/BurntSushi/toml and net/mail for address parsing, log for error handling, fmt for output. Main parameters are the TOML data blob and the Contacts slice. Input is TOML-formatted email addresses; output is a Go struct with slices of parsed mail.Address objects. Limitation: Errors on invalid addresses, and only addresses that conform to net/mail standards can be parsed.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Create address type which satisfies the encoding.TextUnmarshaler interface.\\ntype address struct {\\n\\t*mail.Address\\n}\\n\\nfunc (a *address) UnmarshalText(text []byte) error {\\n\\tvar err error\\n\\ta.Address, err = mail.ParseAddress(string(text))\\n\\treturn err\\n}\\n\\n// Decode it.\\nfunc decode() {\\n\\tblob := `\\n\\t\\tcontacts = [\\n\\t\\t\\t\"Donald Duck <donald@duckburg.com>\",\\n\\t\\t\\t\"Scrooge McDuck <scrooge@duckburg.com>\",\\n\\t\\t]\\n\\t`\\n\\n\\tvar contacts struct {\\n\\t\\tContacts []address\\n\\t}\\n\\n\\t_, err := toml.Decode(blob, &contacts)\\n\\tif err != nil {\\n\\t\\tlog.Fatal(err)\\n\\t}\\n\\n\\tfor _, c := range contacts.Contacts {\\n\\t\\tfmt.Printf(\"%#v\\n\", c.Address)\\n\\t}\\n\\n\\t// Output:\\n\\t// &mail.Address{Name:\"Donald Duck\", Address:\"donald@duckburg.com\"}\\n\\t// &mail.Address{Name:\"Scrooge McDuck\", Address:\"scrooge@duckburg.com\"}\\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Array of Interface Values using encoding.TextUnmarshaler - TOML\nDESCRIPTION: Shows a TOML array of contact strings intended for decoding into Go types that implement the encoding.TextUnmarshaler interface. Serves as sample data to demonstrate advanced decoding and custom structure mapping in Go. No dependencies; to process, the value requires Go code that implements the interface.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/BurntSushi/toml/README.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\ncontacts = [\\n    \"Donald Duck <donald@duckburg.com>\",\\n    \"Scrooge McDuck <scrooge@duckburg.com>\",\\n]\n```\n\n----------------------------------------\n\nTITLE: Opposing Pull Requests with Rejected Comment\nDESCRIPTION: Signals opposition or rejection of a pull request. A comment containing 'Rejected' can be used by maintainers during the review process to indicate the pull request should not be merged in its current state.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/cgroups/MAINTAINERS_GUIDE.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRejected\n```\n\n----------------------------------------\n\nTITLE: Reading Remote Configuration from Etcd with Viper\nDESCRIPTION: Shows how to connect to and read configuration from an etcd remote provider using Viper.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"etcd\", \"http://127.0.0.1:4001\",\"/config/hugo.json\")\nviper.SetConfigType(\"json\") // because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Installing pgzip library in Go\nDESCRIPTION: Command to install the pgzip library and its dependencies using Go's package manager.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/klauspost/pgzip/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/klauspost/pgzip/...\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/klauspost/compress\n```\n\n----------------------------------------\n\nTITLE: Importing GoValidator Package in Go\nDESCRIPTION: Shows two ways to import the GoValidator package - using the full package name or with an alias.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  valid \"github.com/asaskevich/govalidator\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite3 Dependency on macOS using Bash\nDESCRIPTION: This command uses the Homebrew package manager (`brew`) on macOS to install the `sqlite3` library. This is listed as a required dependency for compiling the `go-sqlite3` package on macOS, especially if linking against the system library.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbrew install sqlite3\n```\n\n----------------------------------------\n\nTITLE: Encoding HTTP Status Code as Integer in OpenTracing Bridge\nDESCRIPTION: Updates the OpenTracing bridge to encode HTTP status codes as integers.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nEncode the HTTP status code in the OpenTracing bridge (`go.opentelemetry.io/otel/bridge/opentracing`) as an integer.\n```\n\n----------------------------------------\n\nTITLE: Create/Edit Certificate File using Vi\nDESCRIPTION: Launches the `vi` text editor to create a new file (or edit an existing one) named `SOME-CERTIFICATE.pem` (replace with the actual desired filename) in the current directory (`/etc/pki/ca-trust/source/anchors`). The user should then paste the certificate content into the editor and save the file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n[root@localhost ~]# vi SOME-CERTIFICATE.pem\n```\n\n----------------------------------------\n\nTITLE: Defining the StartedByExplorer Function Signature in Go\nDESCRIPTION: This Go function signature defines `StartedByExplorer`, the core function of the 'mousetrap' library. It takes no arguments and returns a boolean value indicating whether the current process was launched by double-clicking the executable in Windows Explorer. This is intended for use within Windows applications to customize behavior for non-CLI users.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/inconshreveable/mousetrap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc StartedByExplorer() (bool)\n```\n\n----------------------------------------\n\nTITLE: Running Automated Tests for Podman Windows Installer\nDESCRIPTION: This command executes a series of automated tests for the Podman Windows installer. It requires administrator privileges and allows specifying the machine provider (WSL or Hyper-V).\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_25\n\nLANGUAGE: powershell\nCODE:\n```\n.\\winmake.ps1 installertest [wsl|hyperv]\n```\n\n----------------------------------------\n\nTITLE: Committing, Pushing, and Creating Gomega Release via Git/GitHub CLI (Bash)\nDESCRIPTION: This sequence of commands first commits staged changes with a version tag message (e.g., \"vM.m.p\"). It then pushes the commit to the remote repository. Subsequently, it utilizes the GitHub CLI (`gh`) to create a new release on GitHub corresponding to the specified tag. Finally, it updates the local repository with the newly created tags from the remote origin. Requires Git and GitHub CLI to be installed and configured.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/gomega/RELEASING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"vM.m.p\"\ngit push\ngh release create \"vM.m.p\"\ngit fetch --tags origin master\n```\n\n----------------------------------------\n\nTITLE: Opening BoltDB in Read-Only Mode\nDESCRIPTION: Example of opening a BoltDB database in read-only mode using Options.ReadOnly flag. This allows multiple processes to share read access while preventing write access to the database.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_26\n\nLANGUAGE: go\nCODE:\n```\ndb, err := bolt.Open(\"my.db\", 0600, &bolt.Options{ReadOnly: true})\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Podman Machine Info using Go Template (Shell)\nDESCRIPTION: Illustrates using the `--format` option with a Go template (`\"{{ .Host.Arch }}\"`) to extract a specific piece of information (the host architecture) from the `podman machine info` output. This allows for customized output formatting. Requires Podman installation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-info.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine info --format \"{{ .Host.Arch }}\"\namd64\n```\n\n----------------------------------------\n\nTITLE: SSH into Podman Machine\nDESCRIPTION: Connects to the running Podman virtual machine using the Secure Shell (SSH) protocol. This command is the initial step required to access the machine's terminal for configuration.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-install-certificate-authority.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman machine ssh\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Blackfriday Markdown Extension\nDESCRIPTION: This Markdown snippet demonstrates the syntax for creating tables, an extension supported by the Blackfriday processor. It uses pipes (`|`) to separate columns and hyphens (`-`) to define the header separator.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nName    | Age\n--------|------\nBob     | 27\nAlice   | 23\n```\n\n----------------------------------------\n\nTITLE: Installing YAML v3 Dependency for Mergo Tests\nDESCRIPTION: This shell command uses `go get` to download and install the `gopkg.in/yaml.v3` package. This specific package is noted as a potential dependency required for running the test suite of the Mergo library.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/dario.cat/mergo/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngo get gopkg.in/yaml.v3\n```\n\n----------------------------------------\n\nTITLE: Specifying Architecture for Podman Image Pull in Quadlet\nDESCRIPTION: Overrides the architecture of the image to be pulled, defaulting to the host's architecture if not specified. This is equivalent to the '--arch' option in Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_39\n\nLANGUAGE: ini\nCODE:\n```\nArch=\n```\n\n----------------------------------------\n\nTITLE: Defining SBOM Output Option for Podman Farm Build in Markdown\nDESCRIPTION: This snippet defines the --sbom-output option for the Podman farm build command. It specifies that the option takes a file parameter and is used to store the generated SBOM in a named file on the local filesystem. There is no default value for this option.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/sbom-output.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--sbom-output**=*file*\n\nWhen generating SBOMs, store the generated SBOM in the named file on the local\nfilesystem.  There is no default.\n```\n\n----------------------------------------\n\nTITLE: Pinning Mergo Version using Go Modules Replace Directive\nDESCRIPTION: This Go module directive is used in a `go.mod` file to resolve potential dependency conflicts caused by Mergo's move to a vanity URL (`dario.cat/mergo`) in version 1.0.0. It instructs the Go build system to use the specific older version `v0.3.16` (from the old GitHub path) instead of any version requested via the new vanity URL, ensuring compatibility for projects indirectly depending on pre-1.0.0 Mergo.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/dario.cat/mergo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nreplace github.com/imdario/mergo => github.com/imdario/mergo v0.3.16\n```\n\n----------------------------------------\n\nTITLE: Shell Command Example\nDESCRIPTION: Example shell command parameter option mentioned in documentation update\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/changelog.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n--cmd\n```\n\n----------------------------------------\n\nTITLE: Configuration Path Example\nDESCRIPTION: Configuration file path referenced in documentation\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/changelog.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmounts.conf\n```\n\n----------------------------------------\n\nTITLE: Using Denco as HTTP Request Multiplexer in Go\nDESCRIPTION: Demonstrates how to use Denco as an HTTP request multiplexer, defining routes with handlers and starting an HTTP server.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n\n    \"github.com/go-openapi/runtime/middleware/denco\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, params denco.Params) {\n    fmt.Fprintf(w, \"Welcome to Denco!\\n\")\n}\n\nfunc User(w http.ResponseWriter, r *http.Request, params denco.Params) {\n    fmt.Fprintf(w, \"Hello %s!\\n\", params.Get(\"name\"))\n}\n\nfunc main() {\n    mux := denco.NewMux()\n    handler, err := mux.Build([]denco.Handler{\n        mux.GET(\"/\", Index),\n        mux.GET(\"/user/:name\", User),\n        mux.POST(\"/user/:name\", User),\n    })\n    if err != nil {\n        panic(err)\n    }\n    log.Fatal(http.ListenAndServe(\":8080\", handler))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dictionary within a Go Template\nDESCRIPTION: Introduced in Release 2.0.0, this Go template snippet demonstrates the `dict` function. It creates a dictionary (map[string]interface{}) with specified key-value pairs (\"key1\": \"val1\", \"key2\": \"val2\") and assigns it to the template variable `$d`.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{$d := dict \"key1\" \"val1\" \"key2\" \"val2\"}}\n```\n\n----------------------------------------\n\nTITLE: Getting Path Parameter Values in Denco\nDESCRIPTION: Example showing two methods for retrieving path parameter values in Denco: using the Params.Get method and finding by loop iteration.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/runtime/middleware/denco/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/go-openapi/runtime/middleware/denco\"\n)\n\nfunc main() {\n    router := denco.New()\n    if err := router.Build([]denco.Record{\n        {\"/user/:name/:id\", \"route1\"},\n    }); err != nil {\n        panic(err)\n    }\n\n    _, params, _ := router.Lookup(\"/user/alice/1\")\n    name := params.Get(\"name\")\n    if name != \"\" {\n        fmt.Printf(\"Hello %s.\\n\", name)\n    }\n\n    for _, param := range params {\n        if param.Name == \"name\" {\n            fmt.Printf(\"Hello %s.\\n\", name)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyper-V as Podman's Virtualization Provider\nDESCRIPTION: TOML configuration for containers.conf that sets Hyper-V as the virtualization provider for Podman machines.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n[machine]\nprovider=\"hyperv\"\n```\n\n----------------------------------------\n\nTITLE: Installing ULID Package in Go\nDESCRIPTION: Command to install the ULID package using Go's package manager.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/oklog/ulid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/oklog/ulid\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Configuration Directory and File\nDESCRIPTION: PowerShell commands to create the Podman configuration directory and an empty configuration file, which can be used to customize Podman's behavior.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_17\n\nLANGUAGE: pwsh\nCODE:\n```\nNew-Item -ItemType Directory $env:PROGRAMDATA\\containers\\\nNew-Item -ItemType File $env:PROGRAMDATA\\containers\\containers.conf\nnotepad $env:PROGRAMDATA\\containers\\containers.conf\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog for go-jose v3.0.1\nDESCRIPTION: Details a security fix in version 3.0.1 to prevent potential DoS attacks through large 'p2c' values in JWE decryption.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-jose/go-jose/v4/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n# v3.0.1\n\n## Fixed\n\n - Security issue: an attacker specifying a large \"p2c\" value can cause\n   JSONWebEncryption.Decrypt and JSONWebEncryption.DecryptMulti to consume large\n   amounts of CPU, causing a DoS. Thanks to Matt Schwager (@mschwager) for the\n   disclosure and to Tom Tervoort for originally publishing the category of attack.\n   https://i.blackhat.com/BH-US-23/Presentations/US-23-Tervoort-Three-New-Attacks-Against-JSON-Web-Tokens.pdf\n```\n\n----------------------------------------\n\nTITLE: Reversing Unicode-Aware Strings by Grapheme Cluster - Go\nDESCRIPTION: This snippet reverses a string by grapheme cluster, ensuring Unicode characters (like emojis and flag sequences) remain intact rather than splitting by code point. It uses uniseg's ReverseString function and prints the result. The output maintains the visual meaning and clustered characters after reversal.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(uniseg.ReverseString(\"🇩🇪🏳️‍🌈\"))\n// 🏳️‍🌈🇩🇪\n```\n\n----------------------------------------\n\nTITLE: Type-Switch on the Cause of an Error Using pkg/errors - Go\nDESCRIPTION: This snippet demonstrates how to use errors.Cause from pkg/errors in a type switch to handle specific error types originating deeper in the stack. This pattern is useful for distinguishing known error types and separating them from unknown errors after retrieval via wrapping. The code requires github.com/pkg/errors and any user-defined error types, such as MyError. The input is an error, and the output is the control flow branch based on the error type.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Function Example in GoValidator\nDESCRIPTION: Shows the updated signature for custom validator functions including a context parameter.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// old signature\nfunc(i interface{}) bool\n\n// new signature\nfunc(i interface{}, o interface{}) bool\n```\n\n----------------------------------------\n\nTITLE: Generating Test Coverage Report\nDESCRIPTION: These commands generate a test coverage report and display the coverage percentage for each function.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -covermode=atomic -coverprofile=coverage.out\ngo tool cover -func=coverage.out\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Badge Configuration\nDESCRIPTION: Package documentation badge configuration linking to the Go package documentation for OpenTelemetry propagation module.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/propagation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/propagation)](https://pkg.go.dev/go.opentelemetry.io/otel/propagation)\n```\n\n----------------------------------------\n\nTITLE: Running the Complete Docker Regression Test Suite\nDESCRIPTION: Command to run the entire test suite from the root directory of the repository to discover and execute all docker compatibility tests.\nSOURCE: https://github.com/containers/podman/blob/main/test/python/docker/compat/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# python3 -m unittest discover -s test/python/docker\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Ubuntu/Debian using Bash\nDESCRIPTION: This command uses the `apt-get` package manager (common on Ubuntu, Debian) to install the `build-essential` package. This meta-package installs the GCC compiler, make, and other fundamental development tools and libraries required for compiling software, including CGO-enabled Go packages like `go-sqlite3`.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies\nDESCRIPTION: Command to install the required test dependencies for the AutoMaxProcs package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.uber.org/automaxprocs/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake dependencies\n```\n\n----------------------------------------\n\nTITLE: Inspecting a KSUID via CLI\nDESCRIPTION: This shell command uses the `ksuid` tool to inspect an existing KSUID. The `-f inspect` flag specifies the inspection format, and the final argument is the KSUID string to be analyzed. The tool outputs the string and raw representations, along with the extracted time, timestamp, and payload components.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/segmentio/ksuid/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid -f inspect 0ujtsYcgvSTl8PAuAdqWYSMnLOv\n\nREPRESENTATION:\n\n  String: 0ujtsYcgvSTl8PAuAdqWYSMnLOv\n     Raw: 0669F7EFB5A1CD34B5F99D1154FB6853345C9735\n\nCOMPONENTS:\n\n       Time: 2017-10-09 21:00:47 -0700 PDT\n  Timestamp: 107608047\n    Payload: B5A1CD34B5F99D1154FB6853345C9735\n```\n\n----------------------------------------\n\nTITLE: Go Package Dependencies List\nDESCRIPTION: A structured list of Go package dependencies with explicit version requirements and import paths. Each entry includes the package path, version constraint, and any sub-packages that are imported.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n# dario.cat/mergo v1.0.1\n## explicit; go 1.13\ndario.cat/mergo\n# github.com/Azure/go-ansiterm v0.0.0-20250102033503-faa5f7b0171c\n## explicit; go 1.16\ngithub.com/Azure/go-ansiterm\ngithub.com/Azure/go-ansiterm/winterm\n# github.com/BurntSushi/toml v1.5.0\n## explicit; go 1.18\ngithub.com/BurntSushi/toml\ngithub.com/BurntSushi/toml/internal\n```\n\n----------------------------------------\n\nTITLE: Handling Disconnection with Logging in Go\nDESCRIPTION: This Go snippet attempts to disconnect a resource using the provided Disconnect method on l and logs a fatal error if the disconnection fails. It depends on the log package for error reporting and presumes that l implements a Disconnect method returning an error. The key parameter is err, which captures any disconnection errors. This pattern ensures that failures immediately halt execution with a helpful error message. Input: none; Output: possible fatal log message if an error occurs during disconnect.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/digitalocean/go-libvirt/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nif err := l.Disconnect(); err != nil {\n        log.Fatalf(\"failed to disconnect: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Compatibility Testing Configuration\nDESCRIPTION: Table of operating systems, Go versions, and architectures supported by the OpenTelemetry compatibility testing suite in the CI system.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_20\n\nLANGUAGE: Markdown\nCODE:\n```\n| OS      | Go Version | Architecture |\n| ------- | ---------- | ------------ |\n| Ubuntu  | 1.15       | amd64        |\n| Ubuntu  | 1.14       | amd64        |\n| Ubuntu  | 1.15       | 386          |\n| Ubuntu  | 1.14       | 386          |\n| MacOS   | 1.15       | amd64        |\n| MacOS   | 1.14       | amd64        |\n| Windows | 1.15       | amd64        |\n| Windows | 1.14       | amd64        |\n| Windows | 1.15       | 386          |\n| Windows | 1.14       | 386          |\n```\n\n----------------------------------------\n\nTITLE: Loading Containers.conf Module for Podman in Quadlet\nDESCRIPTION: Specifies a containers.conf(5) module to be loaded. This is equivalent to the '--module' option in Podman and can be listed multiple times.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\nContainersConfModule=\n```\n\n----------------------------------------\n\nTITLE: Installing the ksuid Go Library\nDESCRIPTION: This shell command uses the `go get` tool to download and install the `ksuid` Go library from its GitHub repository. The `-u` flag ensures that the package and its dependencies are updated to the latest versions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/segmentio/ksuid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/segmentio/ksuid\n```\n\n----------------------------------------\n\nTITLE: Usage of B3 Propagator Constants\nDESCRIPTION: Example showing how to reference B3 header constants from the authoritative OpenZipkin package instead of removed local constants\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n\"github.com/openzipkin/zipkin-go@v0.2.2/propagation/b3\"\n```\n\n----------------------------------------\n\nTITLE: Defining Config struct for Handler in Go\nDESCRIPTION: Auto-generated Config struct used to initialize an http.Handler. It includes the PetAPI and StoreAPI interfaces, as well as a logger and middleware function.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-swagger/go-swagger/generator/templates/contrib/stratoscale/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Config is configuration for Handler\ntype Config struct {\n\tPetAPI\n\tStoreAPI\n\tLogger func(string, ...interface{})\n\t// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.\n\t// The middleware executes after routing but before authentication, binding and validation\n\tInnerMiddleware func(http.Handler) http.Handler\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Aliases in Viper\nDESCRIPTION: Demonstrates how to register and use aliases in Viper, allowing a single value to be referenced by multiple keys for flexibility in configuration.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nviper.RegisterAlias(\"loud\", \"Verbose\")\n\nviper.Set(\"verbose\", true) // same result as next line\nviper.Set(\"loud\", true)   // same result as prior line\n\nviper.GetBool(\"loud\") // true\nviper.GetBool(\"verbose\") // true\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST in PowerShell\nDESCRIPTION: Sets the `DOCKER_HOST` environment variable for the current PowerShell session to point to the Podman machine's specific named pipe. This is necessary when the default Docker pipe address is unavailable.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User> $Env:DOCKER_HOST = 'npipe:////./pipe/podman-machine-default'\n```\n\n----------------------------------------\n\nTITLE: Listing External Containers with Podman\nDESCRIPTION: Uses the podman ps --external -a command to list containers created by tools other than Podman. This shows containers created by other container tools like Buildah that are visible to Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-ps.1.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ podman ps --external -a\nCONTAINER ID  IMAGE                             COMMAND  CREATED      STATUS  PORTS  NAMES\n69ed779d8ef9f  redis:alpine  \"redis-server\"  25 hours ago  Created                   6379/tcp  k8s_container1_podsandbox1_redhat.test.crio_redhat-test-crio_1\n38a8a78596f9  docker.io/library/busybox:latest  buildah  2 hours ago  storage        busybox-working-container\nfd7b786b5c32  docker.io/library/alpine:latest   buildah  2 hours ago  storage        alpine-working-container\nf78620804e00  scratch                           buildah  2 hours ago  storage        working-container\n```\n\n----------------------------------------\n\nTITLE: Sampler Interface Reference\nDESCRIPTION: Reference to the SDK's Sampler interface as replacement for removed duplicate API sampler\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n\"github.com/open-telemetry/opentelemetry-go/blob/v0.11.0/sdk/trace/sampling.go\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Code of Conduct Reference\nDESCRIPTION: Markdown formatting for linking to CNCF Code of Conduct and providing contact information for reporting violations.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/distribution/reference/CODE-OF-CONDUCT.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Code of Conduct\n\nWe follow the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/main/code-of-conduct.md).\n\nPlease contact the [CNCF Code of Conduct Committee](mailto:conduct@cncf.io) in order to report violations of the Code of Conduct.\n```\n\n----------------------------------------\n\nTITLE: Returning Error Only If Aggregated Errors Exist with multierror.ErrorOrNil (Go)\nDESCRIPTION: Demonstrates returning a nil error or a multierror.Error based on whether any errors have been aggregated into the multierror. Calls ErrorOrNil() on the *multierror.Error variable result: it returns nil if there are no errors accumulated, or a multierror.Error otherwise. The pattern is essential for ensuring functions only return non-nil errors when needed, facilitating idiomatic Go error handling. Requires use of the go-multierror package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n\n```\n\n----------------------------------------\n\nTITLE: Importing LUKS Library in Go\nDESCRIPTION: This snippet shows the import statement for the luksy library, which likely provides functionality for working with LUKS (Linux Unified Key Setup) encrypted containers.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/containers/luksy\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Project Governance\nDESCRIPTION: Comprehensive markdown documentation covering project governance including maintainership criteria, reviewer roles, decision-making processes, and conflict resolution procedures.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/distribution/reference/GOVERNANCE.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# distribution/reference Project Governance\n\nDistribution [Code of Conduct](./CODE-OF-CONDUCT.md) can be found here.\n\nFor specific guidance on practical contribution steps please\nsee our [CONTRIBUTING.md](./CONTRIBUTING.md) guide.\n\n## Maintainership\n\nThere are different types of maintainers, with different responsibilities, but\nall maintainers have 3 things in common:\n\n1) They share responsibility in the project's success.\n2) They have made a long-term, recurring time investment to improve the project.\n3) They spend that time doing whatever needs to be done, not necessarily what\nis the most interesting or fun.\n\nMaintainers are often under-appreciated, because their work is harder to appreciate.\nIt's easy to appreciate a really cool and technically advanced feature. It's harder\nto appreciate the absence of bugs, the slow but steady improvement in stability,\nor the reliability of a release process. But those things distinguish a good\nproject from a great one.\n```\n\n----------------------------------------\n\nTITLE: Testing Nginx Container with cURL on Windows\nDESCRIPTION: This command uses cURL to test the Nginx container running on localhost:8080.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/qemu-remote-tutorial.md#2025-04-23_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\ncurl http -v http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Updating PATH Environment Variable for Git and Go\nDESCRIPTION: PowerShell command to manually add Git and Go binary paths to the PATH environment variable, allowing their commands to be recognized in the terminal.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_1\n\nLANGUAGE: pwsh\nCODE:\n```\n$env:Path += \";C:\\Program Files\\Go\\bin\\;C:\\Program Files\\Git\\cmd\\\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON for Mapstructure Use Case\nDESCRIPTION: An example JSON snippet demonstrating a scenario where mapstructure would be useful. The JSON contains a 'type' field that determines the structure of the data.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure with Table of Contents\nDESCRIPTION: RST markup defining the document structure and table of contents for Podman documentation, including links to various sections and external resources.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: includes.rst\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   Introduction\n   :doc:`<markdown/podman.1>` Simple management tool for pods, containers and images\n   Commands\n   Reference\n   Tutorials\n   Search\n   Podman Python <https://podman-py.readthedocs.io/en/latest/>\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite3 Connection with DSN in Go\nDESCRIPTION: This example demonstrates how to create a SQLite3 database connection using a Data Source Name (DSN) string. It shows the format for specifying options in the connection string.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfile:test.db?cache=shared&mode=memory\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling TOML to Go struct\nDESCRIPTION: Demonstrates how to unmarshal a TOML document into a Go struct using go-toml v2.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndoc := `\nversion = 2\nname = \"go-toml\"\ntags = [\"go\", \"toml\"]\n`\n\nvar cfg MyConfig\nerr := toml.Unmarshal([]byte(doc), &cfg)\nif err != nil {\n      panic(err)\n}\nfmt.Println(\"version:\", cfg.Version)\nfmt.Println(\"name:\", cfg.Name)\nfmt.Println(\"tags:\", cfg.Tags)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Exit Code 127 (Command Not Found)\nDESCRIPTION: Shows an example where the command passed to `podman machine ssh` (`foo`) cannot be found within the VM's environment. The command returns exit code 127.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-ssh.1.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine ssh foo; echo $?\nError: fork/exec /usr/bin/bogus: no such file or directory\n127\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Attribute Package in Markdown\nDESCRIPTION: Markdown code that displays a badge linking to the Go package documentation for the OpenTelemetry attribute package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/attribute/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/attribute)](https://pkg.go.dev/go.opentelemetry.io/otel/attribute)\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for OpenTelemetry Metric Reader\nDESCRIPTION: The supported environment variables for configuring the periodic Reader in the OpenTelemetry Go SDK metric package. These variables control export intervals and timeouts.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nOTEL_METRIC_EXPORT_INTERVAL  # sets the time between collections and exports\nOTEL_METRIC_EXPORT_TIMEOUT   # sets the timeout an export is attempted\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory for Podman Build in Quadlet\nDESCRIPTION: Provides context (working directory) for 'podman build'. It supports paths, URLs, or special keys 'file' or 'unit'. This allows Quadlet to resolve relative paths and can also set the WorkingDirectory in the Systemd service unit.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\nSetWorkingDirectory=\n```\n\n----------------------------------------\n\nTITLE: Resource Creation API Change in Go\nDESCRIPTION: The resource.New() method signature was updated to support built-in attributes and functional options, including telemetry.sdk.* and host.name semantic conventions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\nresource.New() // Old method\nresource.NewWithAttributes() // New renamed method\n```\n\n----------------------------------------\n\nTITLE: Updating the Mergo Go Library\nDESCRIPTION: This shell command uses the Go toolchain to download and update the Mergo library to the latest version using its vanity import path. The `-u` flag ensures that the command updates the package and its dependencies if newer versions are available.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/dario.cat/mergo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u dario.cat/mergo\n```\n\n----------------------------------------\n\nTITLE: Compiling go-sqlite3 on Linux using Bash\nDESCRIPTION: This command compiles the `go-sqlite3` package on a Linux system using the 'linux' build tag. This tag might enable specific optimizations or configurations suited for the Linux environment. Requires the Go compiler, gcc, and CGO enabled.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo build -tags \"linux\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Feature Branch\nDESCRIPTION: Git commands for creating a new feature branch, making changes, committing them, and pushing the branch to your fork repository.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b feature\n# edit files\n$ git commit\n$ git push fork feature\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Test Directory\nDESCRIPTION: Command to remove the temporary test directory before rerunning tests, using tab completion to match the version-specific directory name.\nSOURCE: https://github.com/containers/podman/blob/main/test/buildah-bud/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf test-buildah-v<TAB>\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block for Contact Information\nDESCRIPTION: HTML comment block providing template for adding custom contact information including Slack channel and mailing list details.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/sigs.k8s.io/yaml/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!---\nCustom Information - if you're copying this template for the first time you can add custom content here, for example:\n\n## Contact Information\n\n- [Slack channel](https://kubernetes.slack.com/messages/kubernetes-users) - Replace `kubernetes-users` with your slack channel string, this will send users directly to your channel. \n- [Mailing list](URL)\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Unit with Dependencies in Quadlet\nDESCRIPTION: Example Quadlet container unit file showing how to specify dependencies between different Quadlet units. This fedora.container unit depends on basic.container through Requires and After directives.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nAfter=basic.container\nRequires=basic.container\n\n[Container]\nImage=registry.fedoraproject.org/fedora:41\n```\n\n----------------------------------------\n\nTITLE: Pruning All Unused Networks - Podman - Shell\nDESCRIPTION: This snippet demonstrates how to prune (delete) all unused container networks in Podman using the basic 'podman network prune' command. No additional parameters are required, and no confirmation prompt will be shown unless the '--force' flag is set. The command removes networks with no containers attached except the default network named 'podman'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-network-prune.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npodman network prune\n```\n\n----------------------------------------\n\nTITLE: Implementing System Call Dispatch Entry Points in Assembly\nDESCRIPTION: Defines the three core entry points for system call dispatch that must be implemented in asm_${GOOS}_${GOARCH}.s when porting Go to a new architecture/OS pair. These functions provide the raw system call interface.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/golang.org/x/sys/unix/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Using By to Document Long Tests in Ginkgo (Go)\nDESCRIPTION: This code snippet shows how to use the 'By' function in Ginkgo to document long test cases. It writes to the GinkgoWriter to provide additional context within a test.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nIt(\"should do something complex\", func() {\n    By(\"Step 1: Setting up\")\n    // Setup code\n    \n    By(\"Step 2: Performing action\")\n    // Action code\n    \n    By(\"Step 3: Verifying results\")\n    // Assertion code\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Output for jWalterWeatherman in Go\nDESCRIPTION: This snippet shows how to set a custom io.Writer as the log output for jWalterWeatherman. This allows for flexibility in where logs are written.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/jwalterweatherman/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\njww.SetLogOutput(customWriter)\n```\n\n----------------------------------------\n\nTITLE: Output When Default Docker API Pipe is Busy (Text)\nDESCRIPTION: Illustrates the message shown by `podman machine start` if another process is already listening on the default Docker API named pipe (`npipe:////./pipe/docker_engine`). It provides instructions on how to set the `DOCKER_HOST` environment variable.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nAnother process was listening on the default Docker API pipe address.\nYou can still connect Docker API clients by setting DOCKER HOST using the\nfollowing PowerShell command in your terminal session:\n\n        $Env:DOCKER_HOST = 'npipe:////./pipe/podman-machine-default'\n\nOr in a classic CMD prompt:\n\n        set DOCKER_HOST=npipe:////./pipe/podman-machine-default\n\nAlternatively, terminate the other process and restart podman machine.\nMachine \"podman-machine-default\" started successfully\n```\n\n----------------------------------------\n\nTITLE: Inspecting the Default Podman Machine using Shell\nDESCRIPTION: This shell command demonstrates the usage of `podman machine inspect` to retrieve detailed configuration and state information for the virtual machine named `podman-machine-default`. It requires Podman to be installed and a machine environment to be set up. If no machine name is specified, it defaults to inspecting `podman-machine-default`.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-inspect.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine inspect podman-machine-default\n```\n\n----------------------------------------\n\nTITLE: Illustrating Trailing Whitespace in Podman Configuration Example (Plaintext)\nDESCRIPTION: This snippet shows an example configuration format, likely for Podman or a related tool. It demonstrates lines with 'Host' and 'HostName' directives containing significant trailing whitespace and comments. The surrounding text explains that prior to Podman v1.2, this whitespace was part of the value, but v1.2 introduced stripping of trailing whitespace.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/kevinburke/ssh_config/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHost example       # A comment\n    HostName example.com      # Another comment\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Kubernetes API Validation v0.22.6\nDESCRIPTION: Initial benchmark showing ~60M allocations with high memory usage for validating Kubernetes API. Running on Linux/AMD64 with Ryzen 7 5800X processor.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/validate/BENCHMARK.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/validate\ncpu: AMD Ryzen 7 5800X 8-Core Processor\nBenchmark_KubernetesSpec/validating_kubernetes_API-16         \t       1\t8549863982 ns/op\t7067424936 B/op\t59583275 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Importing Container Trust Library in Go\nDESCRIPTION: This snippet shows the import statement for the libtrust library, which provides trust-related functionality for containers.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/containers/libtrust\n```\n\n----------------------------------------\n\nTITLE: Installing GoTree with Go Get\nDESCRIPTION: This snippet shows how to install the GoTree module using the Go package manager.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/disiqueira/gotree/v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/disiqueira/gotree\n```\n\n----------------------------------------\n\nTITLE: Starting the Podman Service with Systemd (Rootful)\nDESCRIPTION: Command to start the Podman system service for a rootful (privileged) user using systemd.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/bindings/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# systemctl start podman.socket\n```\n\n----------------------------------------\n\nTITLE: Running Podman Command as Another User via su (Non-Login)\nDESCRIPTION: This command uses `su user1 -c 'command'` to execute `podman images` as `user1`. The `-c` flag runs the command directly without initializing a full login shell environment. This often leads to issues with rootless Podman if executed by root, as it might inherit root's environment or lack a proper systemd user session for `user1`, causing errors like 'XDG_RUNTIME_DIR directory \"/run/user/0\" is not owned by the current user'.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_45\n\nLANGUAGE: console\nCODE:\n```\n# su user1 -c 'podman images'\nERRO[0000] XDG_RUNTIME_DIR directory \"/run/user/0\" is not owned by the current user\n```\n\n----------------------------------------\n\nTITLE: Configuring No-Truncate Option for Podman Artifact and Image Listing\nDESCRIPTION: Defines the '--no-trunc' option for Podman commands. When set to true, this option prevents the output from being truncated, showing full details instead of abbreviated information.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/no-trunc.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#### **--no-trunc**\n\nDo not truncate the output (default *false*).\n```\n\n----------------------------------------\n\nTITLE: SQLite3 User Management SQL Operations\nDESCRIPTION: SQL examples showing how to authenticate users, create admin users, change passwords, and delete users using SQLite3 auth functions. These operations return SQLITE_OK (0) on success or SQLITE_AUTH (23) on failure.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\n// Autheticate user\n// Create Admin User\nSELECT auth_user_add('admin2', 'admin2', 1);\n\n// Change password for user\nSELECT auth_user_change('user', 'userpassword', 0);\n\n// Delete user\nSELECT user_delete('user');\n```\n\n----------------------------------------\n\nTITLE: Installing go-version library using go get\nDESCRIPTION: Command to install the go-version library using Go's package management system.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get github.com/hashicorp/go-version\n```\n\n----------------------------------------\n\nTITLE: Formatting Multi-line Content in Podman Documentation\nDESCRIPTION: Shows the recommended way to format code blocks in Podman documentation, placing the triple backticks on separate lines to avoid man page corruption.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\nSome man page text\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the --cidfile option for Podman container management commands\nDESCRIPTION: This snippet defines the --cidfile option which allows specifying a file containing a container ID. This option can be used with podman kill, pause, rm, stop, and unpause commands, and can be specified multiple times.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/cidfile.read.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####> This option file is used in:\n####>   podman kill, pause, rm, stop, unpause\n####> If file is edited, make sure the changes\n####> are applicable to all of those.\n#### **--cidfile**=*file*\n```\n\n----------------------------------------\n\nTITLE: Apache License Declaration Text\nDESCRIPTION: This plain text license block provides the legal terms for using, modifying, and distributing the source code under the Apache License, Version 2.0. It includes the web address for the license text and the required statements about warranties, usage rights, and limitations. There are no parameters; this should be copied verbatim into source or documentation as needed. No dependencies; simply for reproduction or legal compliance.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/skeema/knownhosts/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nLicensed under the Apache License, Version 2.0 (the \\\"License\\\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \\\"AS IS\\\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Referencing Named Build Contexts in Dockerfile\nDESCRIPTION: Shows how to reference named build contexts in Containerfile commands that accept the \"from\" parameter. This includes FROM directives, COPY commands with --from flag, and RUN commands with --mount=from option.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/build-context.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM [name]\nCOPY --from=[name] ...\nRUN --mount=from=[name] …\n```\n\n----------------------------------------\n\nTITLE: Issue Filing Checklist in Markdown\nDESCRIPTION: A numbered list of required information when filing Go project issues, including version details, system specifications, and problem description.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/golang.org/x/term/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  What version of Go are you using (`go version`)?\n2.  What operating system and processor architecture are you using?\n3.  What did you do?\n4.  What did you expect to see?\n5.  What did you see instead?\n```\n\n----------------------------------------\n\nTITLE: Performance Benchmark Results for httpsnoop\nDESCRIPTION: Benchmark comparison showing minimal performance overhead (~500ns) when using CaptureMetrics compared to baseline HTTP handler.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/felixge/httpsnoop/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkBaseline-8      \t   20000\t     94912 ns/op\nBenchmarkCaptureMetrics-8\t   20000\t     95461 ns/op\n```\n\n----------------------------------------\n\nTITLE: Type Checking with IsType in Go\nDESCRIPTION: Examples demonstrating the IsType function which verifies if a value matches the specified type. Can check primitive types like strings and integers as well as pointer types.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsType(\"Bob\", \"string\"))\nprintln(govalidator.IsType(1, \"int\"))\ni := 1\nprintln(govalidator.IsType(&i, \"*int\"))\n```\n\n----------------------------------------\n\nTITLE: Generating GitHub Release Notes\nDESCRIPTION: This command uses the GitHub CLI to generate release notes for a new version of go-toml.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngh api -X POST \\\n  -F tag_name='v2.0.0-beta.5' \\\n  -F target_commitish='v2' \\\n  -F previous_tag_name='v2.0.0-beta.4' \\\n  --jq '.body' \\\n  repos/pelletier/go-toml/releases/generate-notes\n```\n\n----------------------------------------\n\nTITLE: Signing a Git Commit Automatically with Bash\nDESCRIPTION: Demonstrates the git command used to automatically add the 'Signed-off-by' line based on the user's git configuration to a commit message. This requires having the 'user.name' and 'user.email' git configurations set correctly beforehand.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -s\n```\n\n----------------------------------------\n\nTITLE: Inspecting Registered Routes using Walk in Gorilla Mux (Go)\nDESCRIPTION: Provides a complete Go program demonstrating how to use the `Walk()` function on a `mux.Router` to iterate through all registered routes. Inside the walk function, it retrieves and prints details like path templates, path regexps, query templates/regexps, and HTTP methods for each route.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\treturn\n}\n\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/\", handler)\n\tr.HandleFunc(\"/products\", handler).Methods(\"POST\")\n\tr.HandleFunc(\"/articles\", handler).Methods(\"GET\")\n\tr.HandleFunc(\"/articles/{id}\", handler).Methods(\"GET\", \"PUT\")\n\tr.HandleFunc(\"/authors\", handler).Queries(\"surname\", \"{surname}\")\n\terr := r.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n\t\tpathTemplate, err := route.GetPathTemplate()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"ROUTE:\", pathTemplate)\n\t\t}\n\t\tpathRegexp, err := route.GetPathRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Path regexp:\", pathRegexp)\n\t\t}\n\t\tqueriesTemplates, err := route.GetQueriesTemplates()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries templates:\", strings.Join(queriesTemplates, \",\"))\n\t\t}\n\t\tqueriesRegexps, err := route.GetQueriesRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries regexps:\", strings.Join(queriesRegexps, \",\"))\n\t\t}\n\t\tmethods, err := route.GetMethods()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Methods:\", strings.Join(methods, \",\"))\n\t\t}\n\t\tfmt.Println()\n\t\treturn nil\n\t})\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\thttp.Handle(\"/\", r)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block for Custom Guidelines\nDESCRIPTION: HTML comment block indicating where project-specific contribution guidelines should be placed in the template.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/sigs.k8s.io/yaml/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!---\nIf your repo has certain guidelines for contribution, put them here ahead of the general k8s resources\n-->\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to a Gorilla Mux Router in Go\nDESCRIPTION: Demonstrates how to add a middleware function (like `loggingMiddleware`) to a `mux.Router` instance using the `Use()` method. Middleware added this way will be executed for requests matching the router and its subrouters.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n```go\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\nr.Use(loggingMiddleware)\n```\n```\n\n----------------------------------------\n\nTITLE: gRPC Connection Error Example\nDESCRIPTION: Example of a common gRPC connection error message when accessing google.golang.org is blocked.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ go get -u google.golang.org/grpc\npackage google.golang.org/grpc: unrecognized import path \"google.golang.org/grpc\" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Types in Go\nDESCRIPTION: Shows the usage of the IsType function to verify the type of different variables.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsType(\"Bob\", \"string\"))\nprintln(govalidator.IsType(1, \"int\"))\ni := 1\nprintln(govalidator.IsType(&i, \"*int\"))\n```\n\n----------------------------------------\n\nTITLE: Committing, Pushing, and Creating GitHub Release using Git and gh CLI in Bash\nDESCRIPTION: This sequence of bash commands finalizes the release process. It commits the prepared changes (like the updated CHANGELOG and version file) with a version tag message (`vM.m.p`), pushes the commit to the remote repository, creates a corresponding release on GitHub using the `gh release create` command, and fetches updated tags from the remote origin's master branch. Requires Git and the GitHub CLI (`gh`).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/ginkgo/v2/RELEASING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"vM.m.p\"\ngit push\ngh release create \"vM.m.p\"\ngit fetch --tags origin master\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git - Shell\nDESCRIPTION: Illustrates how to create a new branch for developing a fix or feature in Git. Requires an existing Git repo and switches to a newly named branch for isolating specific changes before committing them.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b <feature-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Terminal Progress Bar with aec Library (Go)\nDESCRIPTION: This complete Go program demonstrates using various `aec` features like cursor movement (`Up`, `Column`), color formatting (`Color8BitF`, `LightRedF`), text styling (`Underline`), and the builder pattern to create a progress bar that updates in place in the terminal. It uses standard libraries (`fmt`, `strings`, `time`) and the `aec` library. The program iterates, updating the progress display and percentage label with styled text and cursor positioning.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/morikuni/aec/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/morikuni/aec\"\n)\n\nfunc main() {\n\tconst n = 20\n\tbuilder := aec.EmptyBuilder\n\n\tup2 := aec.Up(2)\n\tcol := aec.Column(n + 2)\n\tbar := aec.Color8BitF(aec.NewRGB8Bit(64, 255, 64))\n\tlabel := builder.LightRedF().Underline().With(col).Right(1).ANSI\n\n\t// for up2\n\tfmt.Println()\n\tfmt.Println()\n\n\tfor i := 0; i <= n; i++ {\n\t\tfmt.Print(up2)\n\t\tfmt.Println(label.Apply(fmt.Sprint(i, \"/\", n)))\n\t\tfmt.Print(\"[\")\n\t\tfmt.Print(bar.Apply(strings.Repeat(\"=\", i)))\n\t\tfmt.Println(col.Apply(\"]\"))\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Vet Linter on the Entire Project - Bash\nDESCRIPTION: Checks all Go source files in the project for common mistakes using the 'go vet' linter. Requires Go to be installed. The './...' pattern ensures vetting is performed recursively on all packages. Input: none; Output: warnings or errors if any issues are found. This is a prerequisite to submitting contributions to ensure code quality.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/gomega/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngo vet ./...\n```\n\n----------------------------------------\n\nTITLE: Starting Span from Context with Logging in OpenTracing for Go\nDESCRIPTION: Shows how to begin a new child span from an existing Go context using StartSpanFromContext, and log fields with error information. Requires the context, OpenTracing, and an optional log package. Inputs: context.Context and operation name; outputs: span and updated context. Handles span closure via defer and demonstrates logging structured data for tracing.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n    func xyz(ctx context.Context, ...) {\n        ...\n        span, ctx := opentracing.StartSpanFromContext(ctx, \"operation_name\")\n        defer span.Finish()\n        span.LogFields(\n            log.String(\"event\", \"soft error\"),\n            log.String(\"type\", \"cache timeout\"),\n            log.Int(\"waited.millis\", 1500))\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Example Version Changelog Entry\nDESCRIPTION: Format used for documenting changes in release versions, shown as bullet points organized by version numbers and dates\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/changelog.txt#2025-04-23_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- Changelog for v1.3 (2018-08-04)\n  * Revert pull error handling from 881\n  * bud should not search context directory for Dockerfile\n  * Set BUILDAH_ISOLATION=rootless when running unprivileged\n```\n\n----------------------------------------\n\nTITLE: Enabling CNI DHCP Service\nDESCRIPTION: Configures DHCP service for CNI backend using systemd or manual startup.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo systemctl enable --now cni-dhcp.socket\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo /usr/libexec/cni/dhcp daemon\n```\n\n----------------------------------------\n\nTITLE: Copying an Image via SSH to Local Storage\nDESCRIPTION: This command copies the 'alpine' image from a remote host specified by an SSH connection string (`charliedoern@192.168.68.126:22`) and a specific Podman socket path (`/run/user/1000/podman/podman.sock`) to the local storage. The warning indicates the connection isn't pre-configured via `podman system connection add`.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-scp.1.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ podman image scp charliedoern@192.168.68.126:22/run/user/1000/podman/podman.sock::alpine\nWARN[0000] Unknown connection name given. Please use system connection add to specify the default remote socket location\nGetting image source signatures\nCopying blob 9450ef9feb15 [--------------------------------------] 0.0b / 0.0b\nCopying config 1f97f0559c done\nWriting manifest to image destination\nStoring signatures\nLoaded image: docker.io/library/alpine:latest\n```\n\n----------------------------------------\n\nTITLE: Listing Fedora Package Dependencies for Podman Build Environment\nDESCRIPTION: This snippet enumerates all required packages that must be installed on a Fedora system before attempting to build Podman from source. The list includes development libraries for btrfs, device-mapper, and security components, as well as necessary build tools and Python dependencies.\nSOURCE: https://github.com/containers/podman/blob/main/contrib/dependencies.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbtrfs-progs-devel\nbzip2\ncontainernetworking-cni\ndevice-mapper-devel\nfindutils\ngit\nglib2-devel\nglibc-static\ngolang\ngpgme-devel\niptables\nlibassuan-devel\nlibseccomp-devel\nlibselinux-devel\nlsof\nmake\nnmap-ncat\nprocps-ng\npython\npython3-dateutil\npython3-pip\npython3-psutil\npython3-pytoml\npython3-pyyaml\nrsync\nslirp4netns\nunzip\nwhich\nxz\nzip\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Container Engine Performance Testing\nDESCRIPTION: A set of environment variables that can be configured to customize the behavior of the performance testing scripts. These variables control which container engines to compare, the number of test runs, the number of containers created, and the container image used.\nSOURCE: https://github.com/containers/podman/blob/main/hack/perf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nENGINE_A=\"podman\"\nENGINE_B=\"docker\"\nRUNS=\"100\"\nNUM_CONTAINERS=\"100\"\nIMAGE=\"docker.io/library/alpine:latest\"\n```\n\n----------------------------------------\n\nTITLE: Adding Named Connection to Local TCP Socket in Shell\nDESCRIPTION: Provides an example of adding a system connection named 'debug' connecting to a local Podman service listening on a TCP socket at 'localhost:8080'. The `tcp://` prefix indicates the connection protocol and address.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-connection-add.1.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ podman system connection add debug tcp://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Creating Tags in OpenCensus\nDESCRIPTION: Example of creating new tags with key-value pairs in the current context using tag.New().\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opencensus.io/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx, err := tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Upsert(userIDKey, \"cde36753ed\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Mergo Merge Implementation in Go\nDESCRIPTION: This is a complete Go example demonstrating how `mergo.Merge` works. It defines a `Foo` struct, initializes a source (`src`) and destination (`dest`) instance, merges `src` into `dest`, and prints the result. The merge only affects the zero-value field `B` in `dest`.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/imdario/mergo/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/imdario/mergo\"\n)\n\ntype Foo struct {\n\tA string\n\tB int64\n}\n\nfunc main() {\n\tsrc := Foo{\n\t\tA: \"one\",\n\t\tB: 2,\n\t}\n\tdest := Foo{\n\t\tA: \"two\",\n\t}\n\tmergo.Merge(&dest, src)\n\tfmt.Println(dest)\n\t// Will print\n\t// {two 2}\n}\n```\n\n----------------------------------------\n\nTITLE: Example Template Tuple Creation\nDESCRIPTION: Demonstrates creating a tuple data structure inside a Go template using the tuple function\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{$t := tuple \"a\", \"b\" \"c\"}}\n```\n\n----------------------------------------\n\nTITLE: Shutting Down QEMU VM via SSH\nDESCRIPTION: This command, executed within the SSH session, gracefully shuts down the QEMU virtual machine.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/qemu-remote-tutorial.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo poweroff\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin (DCO) Text\nDESCRIPTION: Presents the full text of the Developer Certificate of Origin Version 1.1. Contributors certify adherence to this declaration by signing their commits using 'Signed-off-by'. This is a mandatory requirement for contributing to the Buildah project.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Defining Containerfile Option for Podman Build in Markdown\nDESCRIPTION: This snippet defines the '--file' or '-f' option for specifying a Containerfile in Podman build commands. It explains the option's usage, including local file and URL support, and how it affects the build context.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/file.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--file**, **-f**=*Containerfile*\n```\n\n----------------------------------------\n\nTITLE: Generating Gomega Changelog Draft using Git (Bash)\nDESCRIPTION: This Bash script retrieves the latest Git tag, collects commit messages since that tag formatted as a list, and prepends this list along with section headers (NEXT, Features, Fixes, Maintenance) to the existing CHANGELOG.md file. It requires Git to be installed and accessible in the environment.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/gomega/RELEASING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLAST_VERSION=$(git tag --sort=version:refname | tail -n1)\nCHANGES=$(git log --pretty=format:'- %s [%h]' HEAD...$LAST_VERSION)\necho -e \"## NEXT\\n\\n$CHANGES\\n\\n### Features\\n\\n### Fixes\\n\\n### Maintenance\\n\\n$(cat CHANGELOG.md)\" > CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: Overriding Stdlib Logger with Logrus in Go\nDESCRIPTION: Demonstrates how to replace the standard library's default logger with a Logrus logger. The example configures a Logrus logger with JSON formatting and sets it as the output for the standard log package.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nlogger := logrus.New()\nlogger.Formatter = &logrus.JSONFormatter{}\n\n// Use logrus for standard log output\n// Note that `log` here references stdlib's log\n// Not logrus imported under the name `log`.\nlog.SetOutput(logger.Writer())\n```\n\n----------------------------------------\n\nTITLE: Example Template Default Value\nDESCRIPTION: Shows how to use the default function to provide a fallback value in a template\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{.Foo | default \"bar\"}}\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra CLI Tool using Go Install\nDESCRIPTION: This command installs the `cobra-cli` executable, a tool used to bootstrap Cobra application structures and generate command files. It uses `go install` to download and build the tool, placing the binary in the Go bin directory.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/spf13/cobra-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Rootless Buildah on NFS\nDESCRIPTION: This snippet shows the permission errors encountered when running rootless Buildah builds on NFS filesystems, which do not understand user namespaces.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/troubleshooting.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ buildah build .\nERRO[0014] Error while applying layer: ApplyLayer exit status 1 stdout:  stderr: open /root/.bash_logout: permission denied\nerror creating build container: Error committing the finished image: error adding layer with blob \"sha256:a02a4930cb5d36f3290eb84f4bfa30668ef2e9fe3a1fb73ec015fc58b9958b17\": ApplyLayer exit status 1 stdout:  stderr: open /root/.bash_logout: permission denied\n```\n\n----------------------------------------\n\nTITLE: Integrating Standard Library Flags with Viper via Pflags\nDESCRIPTION: Shows how to combine the standard library flag package with pflag and Viper for comprehensive flag handling.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"github.com/spf13/pflag\"\n)\n\nfunc main() {\n\n\t// using standard library \"flag\" package\n\tflag.Int(\"flagname\", 1234, \"help message for flagname\")\n\n\tpflag.CommandLine.AddGoFlagSet(flag.CommandLine)\n\tpflag.Parse()\n\tviper.BindPFlags(pflag.CommandLine)\n\n\ti := viper.GetInt(\"flagname\") // retrieve value from viper\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Podman Configuration File Path\nDESCRIPTION: Documentation of the containers.conf configuration file location and usage details.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n**containers.conf** (`$HOME/.config/containers/containers.conf`)\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for New Podman Command in Go\nDESCRIPTION: This shell command creates a new directory for the 'manifest' command in the Podman project structure.\nSOURCE: https://github.com/containers/podman/blob/main/cmd/podman/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir -p $GOPATH/src/github.com/containers/podman/cmd/podman/manifest\n```\n\n----------------------------------------\n\nTITLE: Pushing a Local Git Branch to a Remote Repository (Shell)\nDESCRIPTION: Uploads the specified local branch (`my-new-feature`) along with its commit history to the remote repository configured under the alias `origin`. This makes the local changes available on the remote, typically a GitHub fork, enabling the creation of a Pull Request. Requires `git` and appropriate remote configuration/permissions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Git Release Tagging Commands\nDESCRIPTION: Git commands used by project owners to create and push signed version tags for releases\nSOURCE: https://github.com/containers/podman/blob/main/vendor/sigs.k8s.io/yaml/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s $VERSION\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push $VERSION\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge Link for Go Package Documentation\nDESCRIPTION: Markdown code showing the PkgGoDev badge and link to the OpenTelemetry baggage package documentation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/baggage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/baggage)](https://pkg.go.dev/go.opentelemetry.io/otel/baggage)\n```\n\n----------------------------------------\n\nTITLE: Compiling go-sqlite3 on Hardened Systems (-fPIC Error) using Bash\nDESCRIPTION: This command addresses a potential compilation error (`recompile with -fPIC`) often encountered on hardened Linux systems. It passes the `-fno-PIC` flag to the external linker via Go's `-ldflags` mechanism, overriding the default Position Independent Code (PIC) requirement that might cause conflicts with the way `go-sqlite3`'s C code is built.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngo build -ldflags '-extldflags=-fno-PIC'\n```\n\n----------------------------------------\n\nTITLE: Initial Podman Changelog Entry in Markdown\nDESCRIPTION: Documents the first logged release (v1.0.0-rc1) of Podman, noting major and breaking changes from previous unlogged versions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-logr/logr/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## v1.0.0-rc1\n\nThis is the first logged release.  Major changes (including breaking changes)\nhave occurred since earlier tags.\n```\n\n----------------------------------------\n\nTITLE: Exporting GPG Public Key for Image Verification in Podman\nDESCRIPTION: Command to export the public GPG key in ASCII armor format to a file location specified in the signature verification policy, enabling image signature validation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngpg --output /tmp/key.gpg --armor --export sgrunert@suse.com\n```\n\n----------------------------------------\n\nTITLE: Reinstalling go-sqlite3 to Fix Compilation Errors using Bash\nDESCRIPTION: This command forces a reinstallation of the `go-sqlite3` package. It's suggested as a troubleshooting step if `go get` fails with an internal compiler error from `gcc`. Using `go install` might resolve issues related to corrupted downloads or inconsistent build states by fetching and building the package cleanly.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/mattn/go-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes Pod Definition YAML (demo.yml)\nDESCRIPTION: This snippet shows a sample Kubernetes Pod definition (`demo.yml`) used in subsequent examples. It defines a simple pod containing one container named 'container', using the 'foobar' image and running the 'top' command. This file acts as the input manifest for `podman kube down` to identify the resources for removal.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-kube-down.1.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n...\nspec:\n  containers:\n  - command:\n    - top\n    - name: container\n      value: podman\n    image: foobar\n...\n```\n\n----------------------------------------\n\nTITLE: Extracting Registry Search Map\nDESCRIPTION: Shows how to extract the search map value from registry information using index notation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-info.1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ podman info -f '{{index .Registries \"search\"}}'\n[registry.fedoraproject.org registry.access.redhat.com docker.io quay.io]\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Race Detection\nDESCRIPTION: This command runs all tests in the project with race detection enabled.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pelletier/go-toml/v2/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race ./...\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Form in HTML for Podman Documentation\nDESCRIPTION: This HTML snippet creates a search form with an input field and a submit button. It's designed to allow users to search through the Podman documentation. The form submits to a '/en/latest/search.html' page and includes a progress indicator.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/Search.rst#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>\nFrom here you can search these documents. Enter your search\nwords into the box below and click \"search\". Note that the search\nfunction will automatically search for all of the words. Pages\ncontaining fewer words won't appear in the result list.\n</p>\n<form action=\"/en/latest/search.html\" method=\"get\" _lpchecked=\"1\">\n<input type=\"text\" name=\"q\" value=\"\">\n<input type=\"submit\" value=\"search\">\n<span id=\"search-progress\" style=\"padding-left: 10px\"></span>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Setting Up AutoMaxProcs Development Environment\nDESCRIPTION: Commands to clone and set up the AutoMaxProcs repository in the correct GOPATH location. Includes creating necessary directories and configuring git remotes.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.uber.org/automaxprocs/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/go.uber.org\ncd $GOPATH/src/go.uber.org\ngit clone git@github.com:your_github_username/automaxprocs.git\ncd automaxprocs\ngit remote add upstream https://github.com/uber-go/automaxprocs.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Running a Single File of Integration Tests in Podman\nDESCRIPTION: Command to run integration tests from a specific Go test file using the Ginkgo testing framework's focus-file option.\nSOURCE: https://github.com/containers/podman/blob/main/test/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nmake localintegration FOCUS_FILE=your_test.go\n```\n\n----------------------------------------\n\nTITLE: Disabling Mutex Locking for Logger in Go\nDESCRIPTION: This snippet shows how to disable mutex locking for a Logger object when concurrent write protection is not needed. It's useful when hooks are thread-safe or when writing to the output is already protected.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nlogger.SetNoLock()\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog in Markdown\nDESCRIPTION: This markdown snippet outlines the structure of the changelog, including the format used and versioning system adhered to. It also includes entries for multiple versions, detailing added features, fixed issues, and removed functionalities.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/manifoldco/promptui/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\nand this project adheres to [Semantic Versioning](http://semver.org/).\n\n## Unreleased\n\n## [0.9.0] - 2021-10-30\n\n### Fixed\n\n- Resolve license incompatibility in tabwriter\n\n\n## [0.8.0] - 2020-09-28\n\n### Added\n\n- Support ctrl-h for backspace\n- Allow hiding entered data after submit\n- Allow masking input with an empty rune to hide input length\n\n### Fixed\n\n- Fix echo of cursor after input is finished\n- Better support for keycodes on Windows\n\n\n## [0.7.0] - 2020-01-11\n\n### Added\n\n- Add support for configurable Stdin/Stdout on Prompt\n- Add support for setting initial cursor position\n- Switch to golangci-lint for linting\n\n### Removed\n\n- Removed support for Go 1.11\n\n### Fixed\n\n- Reduce tool-based deps, hopefully fixing any install issues\n\n## [0.6.0] - 2019-11-29\n\n### Added\n\n- Support configurable stdin\n\n### Fixed\n\n- Correct the dep on go-i18n\n\n## [0.5.0] - 2019-11-29\n\n### Added\n\n- Now building and testing on go 1.11, go 1.12, and go 1.13\n\n### Removed\n\n- Removed support for Go versions that don't include modules.\n\n## [0.4.0] - 2019-02-19\n\n### Added\n\n- The text displayed when an item was successfully selected can be hidden\n\n## [0.3.2] - 2018-11-26\n\n### Added\n\n- Support Go modules\n\n### Fixed\n\n- Fix typos in PromptTemplates documentation\n\n## [0.3.1] - 2018-07-26\n\n### Added\n\n- Improved documentation for GoDoc\n- Navigation keys information for Windows\n\n### Fixed\n\n- `success` template was not properly displayed after a successful prompt.\n\n## [0.3.0] - 2018-05-22\n\n### Added\n\n- Background colors codes and template helpers\n- `AllowEdit` for prompt to prevent deletion of the default value by any key\n- Added `StartInSearchMode` to allow starting the prompt in search mode\n\n### Fixed\n\n- `<Enter>` key press on Windows\n- `juju/ansiterm` dependency\n- `chzyer/readline#136` new api with ReadCloser\n- Deleting UTF-8 characters sequence\n\n## [0.2.1] - 2017-11-30\n\n### Fixed\n\n- `SelectWithAdd` panicking on `.Run` due to lack of keys setup\n- Backspace key on Windows\n\n## [0.2.0] - 2017-11-16\n\n### Added\n\n- `Select` items can now be searched\n\n## [0.1.0] - 2017-11-02\n\n### Added\n\n- extract `promptui` from [torus](https://github.com/manifoldco/torus-cli) as a\n  standalone lib.\n- `promptui.Prompt` provides a single input line to capture user information.\n- `promptui.Select` provides a list of options to choose from. Users can\n  navigate through the list either one item at time or by pagination\n```\n\n----------------------------------------\n\nTITLE: Using RegexpFs for Filtered File Creation\nDESCRIPTION: Creates a filesystem that only allows operations on files matching a specified regular expression pattern. This example shows creating a RegexpFs that only handles .txt files and rejecting creation of an HTML file.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewRegexpFs(afero.NewMemMapFs(), regexp.MustCompile(`\\.txt$`))\n_, err := fs.Create(\"/file.html\")\n// err = syscall.ENOENT\n```\n\n----------------------------------------\n\nTITLE: Passing custom arguments to podman kube play\nDESCRIPTION: Shows how to pass additional arguments directly to the 'podman kube play' command in the generated service file, allowing access to Podman features not directly supported by the Quadlet generator.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nPodmanArgs=\\-\\-annotation=key=value\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Origin - Shell\nDESCRIPTION: Details the command to push a named feature branch from the local repository to the user's fork on GitHub. This step is necessary before opening a pull request and assumes the branch was previously created and contains new commits.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mistifyio/go-zfs/v3/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ git push origin <feature-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Listing Generated Image Signatures in Podman Storage\nDESCRIPTION: Command to view the automatically generated signature file created during the signed image push, stored in the system's signature storage directory.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/image_signing.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo ls /var/lib/containers/sigstore\n'alpine@sha256=e9b65ef660a3ff91d28cc50eba84f21798a6c5c39b4dd165047db49e84ae1fb9'\n```\n\n----------------------------------------\n\nTITLE: Parsing Environment Variables from io.Reader with gotenv (Go)\nDESCRIPTION: This Go snippet demonstrates parsing environment variable key-value pairs from any io.Reader source using gotenv.Parse and gotenv.StrictParse. Parse ignores invalid lines, while StrictParse returns an error. Ideal for custom workflows that require explicit parsing and validation. Requires gotenv and strings as dependencies.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/subosito/gotenv/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// import \"strings\"\n\npairs := gotenv.Parse(strings.NewReader(\"FOO=test\\nBAR=$FOO\"))\n// gotenv.Env{\"FOO\": \"test\", \"BAR\": \"test\"}\n\npairs, err := gotenv.StrictParse(strings.NewReader(`FOO=\"bar\"`))\n// gotenv.Env{\"FOO\": \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Installing bbolt Command Line Utility\nDESCRIPTION: Command to install the bbolt CLI into the Go binary path. This allows executing the bbolt command directly from anywhere in the terminal.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ go install go.etcd.io/bbolt/cmd/bbolt@latest\n```\n\n----------------------------------------\n\nTITLE: Installing .NET SDK 8 with winget\nDESCRIPTION: Command to install .NET SDK 8 using Windows Package Manager (winget), which is required for developing and building the Podman Windows installer.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_2\n\nLANGUAGE: pwsh\nCODE:\n```\nwinget install -e Microsoft.DotNet.SDK.8\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Tags from Podman Images\nDESCRIPTION: This example shows how to remove the ':latest' tag from two different images, 'imageName' and 'otherImageName', using a single 'podman untag' command. It removes only the specified tag from each image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-untag.1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ podman untag imageName:latest otherImageName:latest\n```\n\n----------------------------------------\n\nTITLE: Linking to OpenTelemetry Semantic Conventions Go Package Documentation\nDESCRIPTION: Markdown code that displays a badge linking to the Go package documentation for OpenTelemetry Semantic Conventions v1.20.0.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.20.0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.20.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.20.0)\n```\n\n----------------------------------------\n\nTITLE: Counting Unicode Grapheme Clusters - Go\nDESCRIPTION: This snippet uses the 'GraphemeClusterCount' function from the uniseg package to count the number of grapheme clusters (user-perceived characters) in a string containing multi-codepoint emojis. It prints the result using the fmt package. Dependencies are the uniseg package and fmt; the function expects a string as input and returns an integer count.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nn := uniseg.GraphemeClusterCount(\"🇩🇪🏳️‍🌈\")\nfmt.Println(n)\n// 2\n```\n\n----------------------------------------\n\nTITLE: Using cURL to Backup BoltDB Database\nDESCRIPTION: A shell command example showing how to use cURL to download a BoltDB database backup via HTTP. This works with the backup handler function implemented in the previous code snippet.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n$ curl http://localhost/backup > my.db\n```\n\n----------------------------------------\n\nTITLE: Executing Podman via systemd-run for Login Session\nDESCRIPTION: Use systemd-run to start a systemd login session before executing a Podman command. This resolves issues related to missing login sessions for rootless containers with cgroups v2.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_47\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemd-run --machine=username@ --quiet --user --collect --pipe --wait podman run --rm docker.io/library/alpine echo hello\n```\n\n----------------------------------------\n\nTITLE: Testing Successful Rootful Podman Run After Mapping Fix - Bash\nDESCRIPTION: Shows the command to rerun Podman after resolving user namespace mapping problems, confirming that container startup and basic command execution succeed. Serves as a simple post-fix verification stage. Dependencies are successful subuid/subgid configuration, sudo privileges, and Podman. Input is the Podman command; output is the expected result ('hello') if the fix is applied.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman run --rm --userns=auto alpine echo hello\n```\n\n----------------------------------------\n\nTITLE: Testing the Socket-Activated HTTP Server\nDESCRIPTION: Command to test the socket-activated HTTP server by making a request with curl and displaying the beginning of the response.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s localhost:8080 | head -6\n<!doctype html>\n<html>\n  <head>\n<meta charset='utf-8'>\n<meta name='viewport' content='width=device-width, initial-scale=1'>\n<title>Test Page for the HTTP Server on Fedora</title>\n$\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package for Go\nDESCRIPTION: Command to install the UUID package using Go's package manager. This will download and install the package from the specified GitHub repository.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/google/uuid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Illustrating Podman Pull Failure due to Registry Configuration Error in Console\nDESCRIPTION: This command demonstrates an error during `podman pull` caused by a syntax error (like a bare colon) in the `/etc/containers/registries.conf` file. Podman fails to parse the registry list, preventing it from finding and pulling the requested image ('fedora').\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo podman pull fedora\nerror pulling image \"fedora\": unable to pull fedora: error getting default registries to try: Near line 9 (last key parsed ''): Bare keys cannot contain ':'.\n\n```\n\n----------------------------------------\n\nTITLE: Importing AutoMaxProcs in Go Application\nDESCRIPTION: Basic example showing how to import and use automaxprocs in a Go application. The library automatically configures GOMAXPROCS when imported, requiring no additional configuration.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.uber.org/automaxprocs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport _ \"go.uber.org/automaxprocs\"\n\nfunc main() {\n  // Your application logic here.\n}\n```\n\n----------------------------------------\n\nTITLE: Using OsFs Backend in Afero\nDESCRIPTION: This snippet shows how to use Afero's OsFs backend, which is a wrapper around native OS calls.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nappfs := afero.NewOsFs()\nappfs.MkdirAll(\"src/a\", 0755)\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenTelemetry Go Repository\nDESCRIPTION: Command for cloning the OpenTelemetry Go GitHub repository to local environment for development purposes.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice for applying the Apache License 2.0 to software projects. Replace [yyyy] with the year and [name of copyright owner] with the appropriate copyright holder information. This notice should be included at the top of source files using appropriate comment syntax.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/digitalocean/go-libvirt/LICENSE.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Listing Mounted Images with Podman - Bash/Shell\nDESCRIPTION: Shows how to list all currently mounted images using the podman image mount command with no arguments. The command outputs each image's repository and its corresponding host mountpoint. Useful in environments with several mounted images to view their locations. Requires Podman to be operational and appropriate user permissions.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-image-mount.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npodman image mount\nregistry.fedoraproject.org/fedora:latest /var/lib/containers/storage/overlay/f3ac502d97b5681989dff84dfedc8354239bcecbdc2692f9a639f4e080a02364/merged\nregistry.access.redhat.com/ubi8-init:latest /var/lib/containers/storage/overlay/0ff7d7ca68bed1ace424f9df154d2dd7b5a125c19d887f17653cbcd5b6e30ba1/merged\n```\n\n----------------------------------------\n\nTITLE: Mounting S3 Bucket with Podman Volume Create for FUSE - Shell\nDESCRIPTION: This shell snippet creates a new Podman volume ('s3fs-fuse-volume') that uses s3fs-fuse as a FUSE backend with the specified bucket and prefix and applies custom mount options required for S3 access. Requires Podman CLI, s3fs-fuse installed on host, and appropriate environment configuration for AWS access.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ podman volume create s3fs-fuse-volume -o type=fuse.s3fs -o device=bucket:/prefix -o o=use_xattr,endpoint=aq-central-1\n```\n\n----------------------------------------\n\nTITLE: Example Template Plural Formatting\nDESCRIPTION: Shows how to handle plural forms in templates using the plural function with a length check\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlen \"foo\" | plural \"one foo\" \"many foos\"\n```\n\n----------------------------------------\n\nTITLE: Opening a bbolt Database with Timeout\nDESCRIPTION: Opening a bbolt database with a timeout option to prevent indefinite waiting when another process has the file lock. This is useful in environments where file locks may cause application hangs.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ndb, err := bolt.Open(\"my.db\", 0600, &bolt.Options{Timeout: 1 * time.Second})\n```\n\n----------------------------------------\n\nTITLE: Installing Git Validation Tool with Go\nDESCRIPTION: Command to install the git-validation tool using Go's package manager.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/vbatts/git-validation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/vbatts/git-validation@latest\n```\n\n----------------------------------------\n\nTITLE: Testing Log Messages with Logrus Test Hooks in Go\nDESCRIPTION: Shows how to test logging behavior using Logrus's built-in test facilities. The example creates a null logger with a test hook, asserts the presence and content of log messages, and demonstrates hook reset functionality.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport(\n  \"github.com/sirupsen/logrus\"\n  \"github.com/sirupsen/logrus/hooks/test\"\n  \"github.com/stretchr/testify/assert\"\n  \"testing\"\n)\n\nfunc TestSomething(t*testing.T){\n  logger, hook := test.NewNullLogger()\n  logger.Error(\"Helloerror\")\n\n  assert.Equal(t, 1, len(hook.Entries))\n  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)\n  assert.Equal(t, \"Helloerror\", hook.LastEntry().Message)\n\n  hook.Reset()\n  assert.Nil(t, hook.LastEntry())\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SystemD Libraries in Go\nDESCRIPTION: These snippets show the import statements for SystemD-related libraries, including both the older and newer versions of go-systemd. These libraries provide functionality for interacting with SystemD services and journals.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/coreos/go-systemd/activation\n```\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/coreos/go-systemd/v22/activation\ngithub.com/coreos/go-systemd/v22/daemon\ngithub.com/coreos/go-systemd/v22/dbus\ngithub.com/coreos/go-systemd/v22/internal/dlopen\ngithub.com/coreos/go-systemd/v22/journal\ngithub.com/coreos/go-systemd/v22/sdjournal\n```\n\n----------------------------------------\n\nTITLE: Declaring Typed and Untyped Constants - Go\nDESCRIPTION: This Go code snippet demonstrates the declaration of a constant block with mixed typed and untyped constants. Here, 'a' is explicitly given the 'byte' type while 'b' relies on type inference, which may result in them not sharing the same type. This serves as an example for why explicitly specifying types for each constant in a block may be necessary, particularly to avoid subtle bugs or mismatched types. No third-party dependencies are required, and the snippet is aimed at showcasing Go's constant declaration semantics.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/ulikunitz/xz/TODO.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n  a byte = 0x1\n  b      = 0x2\n)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Ping Failure in Rootless Podman Container via Console\nDESCRIPTION: This command runs `ping` inside a rootless Fedora container. The failure (100% packet loss) demonstrates a common issue where rootless containers lack the necessary privileges to create ICMP echo sockets, which are required for ping.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ podman run --rm fedora ping -W10 -c1 redhat.com\nPING redhat.com (209.132.183.105): 56 data bytes\n\n--- redhat.com ping statistics ---\n1 packets transmitted, 0 packets received, 100% packet loss\n```\n\n----------------------------------------\n\nTITLE: Running a Container Healthcheck with Podman CLI - Shell\nDESCRIPTION: This shell command demonstrates how to manually execute a healthcheck in a specified container using Podman. It assumes Podman is already installed and the target container (in this example, 'mywebapp') is running and has a defined healthcheck. The command outputs a numeric result to represent the healthcheck's status: 0 for success, 1 for failure, and 125 for errors. Limitations include the requirement that the container must be running and have a defined healthcheck.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-healthcheck-run.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman healthcheck run mywebapp\n```\n\n----------------------------------------\n\nTITLE: Installing Mapstructure Go Library\nDESCRIPTION: Instructions for installing the mapstructure library using the standard go get command.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Illustrating Missing newuidmap Dependency for Rootless Podman in Console\nDESCRIPTION: This command attempts to run an interactive shell in a Fedora container using rootless Podman. The error message 'exec: \"newuidmap\": executable file not found in $PATH' indicates that the essential `newuidmap` (and likely `newgidmap`) program, required for setting up user namespaces in rootless mode, is missing or not in the system's PATH.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ podman run -ti fedora sh\ncommand required for rootless mode with multiple IDs: exec: \"newuidmap\": executable file not found in $PATH\n```\n\n----------------------------------------\n\nTITLE: Deleting Key-Value Pairs in BoltDB using Go\nDESCRIPTION: This code shows how to delete a key from a bucket using the Bucket.Delete() function within a database update transaction.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ndb.Update(func (tx *bolt.Tx) error {\n    b := tx.Bucket([]byte(\"MyBucket\"))\n    err := b.Delete([]byte(\"answer\"))\n    return err\n})\n```\n\n----------------------------------------\n\nTITLE: Interface Evolution Pattern in Go\nDESCRIPTION: Example showing how to safely extend interfaces by adding new interfaces for additional functionality.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype Exporter interface {\n\tExport()\n}\n\ntype Closer interface {\n\tClose()\n}\n\nfunc caller(e Exporter) {\n\t/* ... */\n\tif c, ok := e.(Closer); ok {\n\t\tc.Close()\n\t}\n\t/* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Post-PR #79 Benchmark Results on AMD CPU\nDESCRIPTION: Additional benchmark results after PR #79 on AMD Ryzen 7 5800X CPU showing similar improvements in performance\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: AMD Ryzen 7 5800X 8-Core Processor             \nBenchmarkToXXXName/ToGoName-16         \t18527378\t      1972 ns/op\t      42 B/op\t       5 allocs/op\nBenchmarkToXXXName/ToVarName-16        \t15552692\t      2093 ns/op\t      62 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToFileName-16       \t32161176\t      1117 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToCommandName-16    \t32256634\t      1137 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-16 \t18599661\t      1946 ns/op\t      92 B/op\t       6 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-16 \t17581353\t      2054 ns/op\t     105 B/op\t       6 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Starting the Podman Machine (PowerShell)\nDESCRIPTION: Starts the default Podman machine (`podman-machine-default`) using the `podman machine start` command in PowerShell. This makes the Podman service running inside the WSL environment available.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\User> podman machine start\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Missing Image Error in Buildah\nDESCRIPTION: This snippet demonstrates the error message when Buildah cannot find an image during build operations, typically caused by missing or misconfigured registry configuration files.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo buildah build -f Dockerfile .\nSTEP 1: FROM alpine\nerror creating build container: 2 errors occurred:\n\n* Error determining manifest MIME type for docker://localhost/alpine:latest: pinging docker registry returned: Get https://localhost/v2/: dial tcp [::1]:443: connect: connection refused\n* Error determining manifest MIME type for docker://registry.access.redhat.com/alpine:latest: Error reading manifest latest in registry.access.redhat.com/alpine: unknown: Not Found\nerror building: error creating build container: no such image \"alpine\" in registry: image not known\n```\n\n----------------------------------------\n\nTITLE: Extending Timeout for Podman Quadlet Services - systemd unit file - ini\nDESCRIPTION: This snippet modifies a Podman Quadlet-generated systemd service by setting the TimeoutStartSec parameter in the [Service] section to 900 seconds (15 minutes). This is necessary because container pulls or builds may exceed systemd's 90-second default start timeout; this change prevents premature service failure. Place this configuration within the relevant Quadlet file or a drop-in, and note that TimeoutStartSec is unavailable for Type=oneshot units.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\\nTimeoutStartSec=900\n```\n\n----------------------------------------\n\nTITLE: Configuring ConfigMap in Kubernetes Quadlet\nDESCRIPTION: Shows how to specify Kubernetes ConfigMap YAML path for podman kube play using the ConfigMap directive. The path can be absolute or relative to the location of the unit file.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nConfigMap=/tmp/config.map\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple SSH Config Values in Go\nDESCRIPTION: This example shows the usage of `ssh_config.GetAll` to retrieve all occurrences of a specific configuration directive (e.g., \"IdentityFile\") for a given host (\"myhost\"). This is necessary for directives that can appear multiple times for the same host. It returns a slice of strings.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/kevinburke/ssh_config/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfiles := ssh_config.GetAll(\"myhost\", \"IdentityFile\")\n```\n\n----------------------------------------\n\nTITLE: Removing a Connection from a Podman Farm - Shell\nDESCRIPTION: Shows how to remove a specific connection (e.g., 'f35') from an existing Podman farm ('farm1') using the '--remove' option. This command only requires the Podman CLI and removes the specified connection from the named farm. The target connection name and farm are given as arguments.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-farm-update.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman farm update --remove f35 farm1\n```\n\n----------------------------------------\n\nTITLE: Pruning Build Containers with --build in Bash\nDESCRIPTION: Illustrates the use of the `--build` flag with `podman system prune`. This flag specifically targets the removal of any build containers created during image builds that were not cleaned up due to unexpected termination. Caution is advised as this operation is considered unsafe and should only be run when no builds are actively in progress.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-system-prune.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman system prune --build\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork\nDESCRIPTION: Git command to push the new feature branch to your forked repository.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.uber.org/automaxprocs/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin cool_new_feature\n```\n\n----------------------------------------\n\nTITLE: Defining Disable Compression Option for Podman Build in Markdown\nDESCRIPTION: This snippet defines the --disable-compression (-D) option for Podman build and farm build commands. It explains that by default, filesystem layers are not compressed during image building unless required by the storage location. Compression can be forced by setting the option to false.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/disable-compression.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--disable-compression**, **-D**\n\nDon't compress filesystem layers when building the image unless it is required\nby the location where the image is being written.  This is the default setting,\nbecause image layers are compressed automatically when they are pushed to\nregistries, and images being written to local storage only need to be\ndecompressed again to be stored.  Compression can be forced in all cases by\nspecifying **--disable-compression=false**.\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog for go-jose v4.0.4\nDESCRIPTION: Lists the changes made in version 4.0.4 of the go-jose library, specifically reverting a breaking change.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-jose/go-jose/v4/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v4.0.4\n\n## Fixed\n\n - Reverted \"Allow unmarshalling JSONWebKeySets with unsupported key types\" as a\n   breaking change. See #136 / #137.\n```\n\n----------------------------------------\n\nTITLE: RDMA Entry Message Definition\nDESCRIPTION: Protobuf message type definition for individual RDMA entries containing device information and HCA (Host Channel Adapter) metrics.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-23_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"RdmaEntry\"\n    field {\n      name: \"device\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"device\"\n    }\n    field {\n      name: \"hca_handles\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"hcaHandles\"\n    }\n    field {\n      name: \"hca_objects\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT32\n      json_name: \"hcaObjects\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Marking a Flag as Hidden\nDESCRIPTION: This example demonstrates how to mark a flag as hidden, which keeps it functional but removes it from usage/help text.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// hide a flag by specifying its name\nflags.MarkHidden(\"secretFlag\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog for go-jose v4.0.0\nDESCRIPTION: Outlines major changes in version 4.0.0, including breaking changes to address vulnerabilities and improvements in security measures.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-jose/go-jose/v4/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# v4.0.0\n\nThis release makes some breaking changes in order to more thoroughly\naddress the vulnerabilities discussed in [Three New Attacks Against JSON Web\nTokens][1], \"Sign/encrypt confusion\", \"Billion hash attack\", and \"Polyglot\ntoken\".\n\n## Changed\n\n - Limit JWT encryption types (exclude password or public key types) (#78)\n - Enforce minimum length for HMAC keys (#85)\n - jwt: match any audience in a list, rather than requiring all audiences (#81)\n - jwt: accept only Compact Serialization (#75)\n - jws: Add expected algorithms for signatures (#74)\n - Require specifying expected algorithms for ParseEncrypted,\n   ParseSigned, ParseDetached, jwt.ParseEncrypted, jwt.ParseSigned,\n   jwt.ParseSignedAndEncrypted (#69, #74)\n   - Usually there is a small, known set of appropriate algorithms for a program\n     to use and it's a mistake to allow unexpected algorithms. For instance the\n     \"billion hash attack\" relies in part on programs accepting the PBES2\n     encryption algorithm and doing the necessary work even if they weren't\n     specifically configured to allow PBES2.\n - Revert \"Strip padding off base64 strings\" (#82)\n  - The specs require base64url encoding without padding.\n - Minimum supported Go version is now 1.21\n\n## Added\n\n - ParseSignedCompact, ParseSignedJSON, ParseEncryptedCompact, ParseEncryptedJSON.\n   - These allow parsing a specific serialization, as opposed to ParseSigned and\n     ParseEncrypted, which try to automatically detect which serialization was\n     provided. It's common to require a specific serialization for a specific\n     protocol - for instance JWT requires Compact serialization.\n\n[1]: https://i.blackhat.com/BH-US-23/Presentations/US-23-Tervoort-Three-New-Attacks-Against-JSON-Web-Tokens.pdf\n```\n\n----------------------------------------\n\nTITLE: Marshalling Viper Configuration to YAML String in Go\nDESCRIPTION: Demonstrates how to marshal all settings in Viper to a YAML string using the AllSettings method and a YAML marshaler.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_30\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tyaml \"gopkg.in/yaml.v2\"\n\t// ...\n)\n\nfunc yamlStringSettings() string {\n\tc := viper.AllSettings()\n\tbs, err := yaml.Marshal(c)\n\tif err != nil {\n\t\tlog.Fatalf(\"unable to marshal config to YAML: %v\", err)\n\t}\n\treturn string(bs)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors and Panics in gotenv Load Operations in Go\nDESCRIPTION: This Go snippet illustrates error handling when loading .env files using gotenv.Load, and how to escalate errors to panics using gotenv.Must. If the specified .env file does not exist, gotenv.Load returns an error, which can be handled directly or passed to Must for panic behavior. Requires fmt and gotenv.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/subosito/gotenv/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nerr := gotenv.Load(\".env-is-not-exist\")\nfmt.Println(\"error\", err)\n// error: open .env-is-not-exist: no such file or directory\n\ngotenv.Must(gotenv.Load, \".env-is-not-exist\")\n// it will throw a panic\n// panic: open .env-is-not-exist: no such file or directory\n```\n\n----------------------------------------\n\nTITLE: Path to Podman Storage Configuration File (Configuration)\nDESCRIPTION: Specifies the default location of the 'storage.conf' file, which configures container storage options for Podman and other tools using the containers/storage library. This file contains settings related to storage drivers, graph locations, and other storage backend parameters.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-manifest-rm.1.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/etc/containers/storage.conf\n```\n\n----------------------------------------\n\nTITLE: Performing Basic ZFS Filesystem Operations in Go\nDESCRIPTION: This Go code snippet demonstrates fundamental usage of the `go-zfs` library. It shows how to create a ZFS filesystem within an existing pool named 'test', take a snapshot of it, clone the snapshot into a new filesystem, and then destroy the cloned filesystem, the snapshot, and the original filesystem. Error handling (`ok(t, err)`) is indicated but omitted in the provided snippet for brevity. This example assumes a ZFS pool named 'test' is already configured.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mistifyio/go-zfs/v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//assuming a zpool named test\n//error handling omitted\n\n\nf, err := zfs.CreateFilesystem(\"test/snapshot-test\", nil)\nok(t, err)\n\ns, err := f.Snapshot(\"test\", nil)\nok(t, err)\n\n// snapshot is named \"test/snapshot-test@test\"\n\nc, err := s.Clone(\"test/clone-test\", nil)\n\nerr := c.Destroy()\nerr := s.Destroy()\nerr := f.Destroy()\n\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools\nDESCRIPTION: Command to install required development tools for Podman using the project's Makefile.\nSOURCE: https://github.com/containers/podman/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ make install.tools\n```\n\n----------------------------------------\n\nTITLE: Example Command with Root Permissions\nDESCRIPTION: Demonstrates how to execute a Podman command with the status option that requires root privileges.\nSOURCE: https://github.com/containers/podman/blob/main/docs/MANPAGE_SYNTAX.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# podman command --status=better\n```\n\n----------------------------------------\n\nTITLE: Illustrating Exit Code 127 (Command Not Found Error)\nDESCRIPTION: Example shell command resulting in Podman exit code 127. This signifies that the command specified to run inside the container (`foo`) could not be found within the container's PATH.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ podman run busybox foo; echo $?\nError: container_linux.go:346: starting container process caused \"exec: \\\"foo\\\": executable file not found in $PATH\": OCI runtime error\n127\n```\n\n----------------------------------------\n\nTITLE: Installing Buildah on Ubuntu\nDESCRIPTION: Commands to install Buildah on Ubuntu 20.10 and newer versions using apt-get.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Ubuntu 20.10 and newer\nsudo apt-get -y update\nsudo apt-get -y install buildah\n```\n\n----------------------------------------\n\nTITLE: Network Statistics Message Definition\nDESCRIPTION: Protobuf message type definition for network interface statistics including receive and transmit metrics.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-23_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"NetworkStat\"\n    field {\n      name: \"name\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"name\"\n    }\n    field {\n      name: \"rx_bytes\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"rxBytes\"\n    }\n    field {\n      name: \"rx_packets\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"rxPackets\"\n    }\n    field {\n      name: \"rx_errors\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"rxErrors\"\n    }\n    field {\n      name: \"rx_dropped\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"rxDropped\"\n    }\n    field {\n      name: \"tx_bytes\"\n      number: 6\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"txBytes\"\n    }\n    field {\n      name: \"tx_packets\"\n      number: 7\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"txPackets\"\n    }\n    field {\n      name: \"tx_errors\"\n      number: 8\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"txErrors\"\n    }\n    field {\n      name: \"tx_dropped\"\n      number: 9\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"txDropped\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Blackfriday Output with Bluemonday - Go\nDESCRIPTION: Illustrates secure Markdown HTML rendering by combining Blackfriday with Bluemonday HTML sanitizer. Requires 'github.com/russross/blackfriday/v2' for Markdown parsing, and 'github.com/microcosm-cc/bluemonday' for sanitization. The code parses the Markdown input to potentially unsafe HTML ('unsafe'), then applies Bluemonday's UGCPolicy to sanitize and store the cleaned result in 'html'. Both 'input' and 'unsafe' are byte slices. Output is sanitized HTML as a byte slice, suitable for safe web display.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/microcosm-cc/bluemonday\"\n    \"github.com/russross/blackfriday/v2\"\n)\n\n// ...\nunsafe := blackfriday.Run(input)\nhtml := bluemonday.UGCPolicy().SanitizeBytes(unsafe)\n```\n\n----------------------------------------\n\nTITLE: Using Initials Function Example in Go\nDESCRIPTION: Demonstrates how to use the Initials function from GoUtils which takes a full name and returns the initials. This function does not return any errors.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/goutils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\t\"github.com/Masterminds/goutils\"\n)\n\nfunc main() {\n\n\t// EXAMPLE 1: A goutils function which returns no errors\n    fmt.Println (goutils.Initials(\"John Doe Foo\")) // Prints out \"JDF\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog for go-jose v4.0.3\nDESCRIPTION: Documents changes made in version 4.0.3, including allowing unmarshalling of JSONWebKeySets with unsupported key types and dependency updates.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-jose/go-jose/v4/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# v4.0.3\n\n## Changed\n\n - Allow unmarshalling JSONWebKeySets with unsupported key types (#130)\n - Document that OpaqueKeyEncrypter can't be implemented (for now) (#129)\n - Dependency updates\n```\n\n----------------------------------------\n\nTITLE: Running Ginkgo Test Suites on the Command Line in Bash\nDESCRIPTION: This command demonstrates how to execute Ginkgo test suites in parallel from the command line using the `ginkgo` CLI tool. It requires Ginkgo to be installed globally or as part of the Go project. Running `ginkgo -p` will automatically discover and execute all specs across multiple processes to speed up test completion, especially in larger test suites. No additional arguments are required, though project setup and proper test file organization per Ginkgo conventions are assumed.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/ginkgo/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nginkgo -p\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Keys in Viper with JSON Configuration\nDESCRIPTION: Shows how to access nested configuration values in Viper using dot-delimited paths. It includes an example JSON configuration and demonstrates accessing various nested keys.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"host\": {\n        \"address\": \"localhost\",\n        \"port\": 5799\n    },\n    \"datastore\": {\n        \"metric\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 3099\n        },\n        \"warehouse\": {\n            \"host\": \"198.0.0.1\",\n            \"port\": 2112\n        }\n    }\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nGetString(\"datastore.metric.host\") // (returns \"127.0.0.1\")\n```\n\n----------------------------------------\n\nTITLE: Running GolangCI-Lint on the Repository - Shell\nDESCRIPTION: Executes golangci-lint on the current directory or specified package, allowing flags for issue display. Requires golangci-lint to be installed. Assists in ensuring code quality and compliance with linting rules.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-23_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n# use . or specify a path to only lint a package\n# to show all lint errors, use flags \"--max-issues-per-linter=0 --max-same-issues=0\"\n> golangci-lint run\n\n```\n\n----------------------------------------\n\nTITLE: Defining URL Path Variables with Gorilla Mux in Go\nDESCRIPTION: This example shows how to define URL paths with variables using Gorilla Mux. It demonstrates both simple variables and those with regular expression patterns for more precise matching.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/gorilla/mux/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nr := mux.NewRouter()\nr.HandleFunc(\"/products/{key}\", ProductHandler)\nr.HandleFunc(\"/articles/{category}/\", ArticlesCategoryHandler)\nr.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler)\n```\n\n----------------------------------------\n\nTITLE: Restarting Multiple Podman Pods by ID\nDESCRIPTION: Shows how to restart multiple Podman pods simultaneously by providing their respective partial or full IDs ('490eb', '3557fb'). Each successfully restarted pod's full ID is printed on a new line.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-pod-restart.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npodman pod restart 490eb 3557fb\n490eb241aaf704d4dd2629904410fe4aa31965d9310a735f8755267f4ded1de5\n3557fbea6ad61569de0506fe037479bd9896603c31d3069a6677f23833916fab\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Validation Tool Usage\nDESCRIPTION: Shows the available command-line flags for the git-validation tool.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/vbatts/git-validation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvbatts@valse ~/src/vb/git-validation (master *) $ git-validation -h\nUsage of git-validation:\n  -D    debug output\n  -d string\n        git directory to validate from (default \".\")\n  -list-rules\n        list the rules registered\n  -range string\n        use this commit range instead\n  -run string\n        comma delimited list of rules to run. Defaults to all.\n  -v    verbose\n```\n\n----------------------------------------\n\nTITLE: Upgrading golang.org/x/sys/unix Package in Go\nDESCRIPTION: Upgrades the golang.org/x/sys/unix package to address a security vulnerability (GO-2022-0493).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nUpgrade `golang.org/x/sys/unix` from `v0.0.0-20210423185535-09eb48e85fd7` to `v0.0.0-20220919091848-fb04ddd9f9c8`.\n```\n\n----------------------------------------\n\nTITLE: Updating Changelog for Podman 1.2 Release\nDESCRIPTION: This snippet lists the changes and updates made in version 1.2 of Podman, including new features, bug fixes, and improvements to documentation and testing.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1.2 (2018-07-14)\n    Vendor in lates containers/image\n    build-using-dockerfile: let -t include transports again\n    Block use of /proc/acpi and /proc/keys from inside containers\n    Fix handling of --registries-conf\n    Fix becoming a maintainer link\n    add optional CI test fo darwin\n    Don't pass a nil error to errors.Wrapf()\n    image filter test: use kubernetes/pause as a \"since\"\n    Add --cidfile option to from\n    vendor: update containers/storage\n    Contributors need to find the CONTRIBUTOR.md file easier\n    Add a --loglevel option to build-with-dockerfile\n    Create Development plan\n    cmd: Code improvement\n    allow buildah cross compile for a darwin target\n    Add unused function param lint check\n    docs: Follow man-pages(7) suggestions for SYNOPSIS\n    Start using github.com/seccomp/containers-golang\n    umount: add all option to umount all mounted containers\n    runConfigureNetwork(): remove an unused parameter\n    Update github.com/opencontainers/selinux\n    Fix buildah bud --layers\n    Force ownership of /etc/hosts and /etc/resolv.conf to 0:0\n    main: if unprivileged, reexec in a user namespace\n    Vendor in latest imagebuilder\n    Reduce the complexity of the buildah.Run function\n    mount: output it before replacing lastError\n    Vendor in latest selinux-go code\n    Implement basic recognition of the \"--isolation\" option\n    Run(): try to resolve non-absolute paths using $PATH\n    Run(): don't include any default environment variables\n    build without seccomp\n    vendor in latest runtime-tools\n    bind/mount_unsupported.go: remove import errors\n    Update github.com/opencontainers/runc\n    Add Capabilities lists to BuilderInfo\n    Tweaks for commit tests\n    commit: recognize committing to second storage locations\n    Fix ARGS parsing for run commands\n    Add info on registries.conf to from manpage\n    Switch from using docker to podman for testing in .papr\n    buildah: set the HTTP User-Agent\n    ONBUILD tutorial\n    Add information about the configuration files to the install docs\n    Makefile: add uninstall\n    Add tilde info for push to troubleshooting\n    mount: support multiple inputs\n    Use the right formatting when adding entries to /etc/hosts\n    Vendor in latest go-selinux bindings\n    Allow --userns-uid-map/--userns-gid-map to be global options\n    bind: factor out UnmountMountpoints\n    Run(): simplify runCopyStdio()\n    Run(): handle POLLNVAL results\n    Run(): tweak terminal mode handling\n    Run(): rename 'copyStdio' to 'copyPipes'\n    Run(): don't set a Pdeathsig for the runtime\n    Run(): add options for adding and removing capabilities\n    Run(): don't use a callback when a slice will do\n    setupSeccomp(): refactor\n    Change RunOptions.Stdin/Stdout/Stderr to just be Reader/Writers\n    Escape use of '_' in .md docs\n    Break out getProcIDMappings()\n    Break out SetupIntermediateMountNamespace()\n    Add Multi From Demo\n    Use the c/image conversion code instead of converting configs manually\n    Don't throw away the manifest MIME type and guess again\n    Consolidate loading manifest and config in initConfig\n    Pass a types.Image to Builder.initConfig\n    Require an image ID in importBuilderDataFromImage\n    Use c/image/manifest.GuessMIMEType instead of a custom heuristic\n    Do not ignore any parsing errors in initConfig\n    Explicitly handle \"from scratch\" images in Builder.initConfig\n    Fix parsing of OCI images\n    Simplify dead but dangerous-looking error handling\n    Don't ignore v2s1 history if docker_version is not set\n    Add --rm and --force-rm to buildah bud\n    Add --all,-a flag to buildah images\n    Separate stdio buffering from writing\n    Remove tty check from images --format\n    Add environment variable BUILDAH_RUNTIME\n    Add --layers and --no-cache to buildah bud\n    Touch up images man\n    version.md: fix DESCRIPTION\n    tests: add containers test\n    tests: add images test\n    images: fix usage\n    fix make clean error\n    Change 'registries' to 'container registries' in man\n    add commit test\n    Add(): learn to record hashes of what we add\n    Minor update to buildah config documentation for entrypoint\n    Bump to v1.2-dev\n    Add registries.conf link to a few man pages\n```\n\n----------------------------------------\n\nTITLE: Configuring Encoder Table Indentation with go-toml v2 - Go\nDESCRIPTION: Shows how to control table indentation when marshaling TOML with go-toml v1 and v2. Demonstrates v1 and v2 default outputs and how to enable table indentation in v2 with Encoder.SetIndentTables. Requires tomlv1, tomlv2, bytes, and fmt. Uses a map with a nested table for demonstration. Outputs are printed to compare indentation levels for default marshaling and explicit configuration.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ndata := map[string]interface{}{\n\t\"table\": map[string]string{\n\t\t\"key\": \"value\",\n\t},\n}\n\nb, _ := tomlv1.Marshal(data)\nfmt.Println(\"v1:\\n\" + string(b))\n\nb, _ = tomlv2.Marshal(data)\nfmt.Println(\"v2:\\n\" + string(b))\n\nbuf := bytes.Buffer{}\nenc := tomlv2.NewEncoder(&buf)\nenc.SetIndentTables(true)\nenc.Encode(data)\nfmt.Println(\"v2 Encoder:\\n\" + string(buf.Bytes()))\n\n// Output:\n// v1:\n//\n// [table]\n//   key = \"value\"\n//\n// v2:\n// [table]\n// key = 'value'\n//\n//\n// v2 Encoder:\n// [table]\n//   key = 'value'\n```\n\n----------------------------------------\n\nTITLE: Go SQLite3 Shared Cache Database Connection\nDESCRIPTION: Example of opening a SQLite3 database connection with shared cache settings to handle concurrent access and prevent database locking issues.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ndb, err := sql.Open(\"sqlite3\", \"file:locked.sqlite?cache=shared\")\ndb.SetMaxOpenConns(1)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Errors with Context Using pkg/errors - Go\nDESCRIPTION: This snippet shows how to use the errors.Wrap function from the github.com/pkg/errors library to add contextual information to an error. It is designed for debugging and tracking error origins without losing the original error value. The dependencies include the external errors package and io utilities; the main parameter is the error to be wrapped, and the context message. The input is an error, and the output is a wrapped error retaining both the original error message and a new descriptive context.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing myst_parser for Markdown Support in ReadTheDocs\nDESCRIPTION: Specifies myst_parser package as a requirement to enable Markdown parsing functionality in ReadTheDocs documentation build system.\nSOURCE: https://github.com/containers/podman/blob/main/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n# requirements file for readthedocs pip installs\n\n# use md instead of rst\nmyst_parser\n```\n\n----------------------------------------\n\nTITLE: Installing Webbrowser Package with Go Get\nDESCRIPTION: This command installs the webbrowser package using Go's package management system. The -u flag ensures the latest version is downloaded.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/toqueteos/webbrowser/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/toqueteos/webbrowser\n```\n\n----------------------------------------\n\nTITLE: Block I/O Statistics Message Definition\nDESCRIPTION: Protobuf message type definition for block I/O statistics including service bytes, queued operations, service time, wait time, and other metrics tracked recursively.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-23_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"BlkIOStat\"\n    field {\n      name: \"io_service_bytes_recursive\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioServiceBytesRecursive\"\n    }\n    field {\n      name: \"io_serviced_recursive\"\n      number: 2\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioServicedRecursive\"\n    }\n    field {\n      name: \"io_queued_recursive\"\n      number: 3\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioQueuedRecursive\"\n    }\n    field {\n      name: \"io_service_time_recursive\"\n      number: 4\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioServiceTimeRecursive\"\n    }\n    field {\n      name: \"io_wait_time_recursive\"\n      number: 5\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioWaitTimeRecursive\"\n    }\n    field {\n      name: \"io_merged_recursive\"\n      number: 6\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioMergedRecursive\"\n    }\n    field {\n      name: \"io_time_recursive\"\n      number: 7\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"ioTimeRecursive\"\n    }\n    field {\n      name: \"sectors_recursive\"\n      number: 8\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.BlkIOEntry\"\n      json_name: \"sectorsRecursive\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Establishing Direct Socket Connection in Go\nDESCRIPTION: Creates a direct socket connection to QEMU instance monitor for environments not managed by libvirt.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/digitalocean/go-qemu/qmp/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmonitor, err := qmp.NewSocketMonitor(\"unix\", \"/var/lib/qemu/example.monitor\", 2*time.Second)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Verification for Podman Build in Quadlet\nDESCRIPTION: Determines whether HTTPS and certificate verification are required when contacting registries. This corresponds to the '--tls-verify' option in 'podman build'.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nTLSVerify=\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests Recursively (Shell)\nDESCRIPTION: Executes all Go test files (`*_test.go`) found in the current directory and all subdirectories using the standard Go testing framework. This command is typically used to ensure code changes pass all existing tests. Requires the Go toolchain to be installed and configured.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Importing Secure File Path Join Library in Go\nDESCRIPTION: This snippet shows the import statement for the filepath-securejoin library, which provides a secure way to join file paths to prevent path traversal attacks.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/cyphar/filepath-securejoin\n```\n\n----------------------------------------\n\nTITLE: Opening File with O_APPEND Flag for Thread-Safe Writing in Go\nDESCRIPTION: This code snippet suggests using the O_APPEND flag when opening a file for writing to ensure thread-safe appends. It's applicable when each write operation is smaller than 4KB, allowing for multi-thread/multi-process writing without additional locking.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nos.File handler opened with `O_APPEND` flag\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Prompt in Go using Promptui\nDESCRIPTION: This example shows how to implement a select prompt using Promptui. It allows the user to choose a day of the week from a predefined list.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/manifoldco/promptui/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/manifoldco/promptui\"\n)\n\nfunc main() {\n\tprompt := promptui.Select{\n\t\tLabel: \"Select Day\",\n\t\tItems: []string{\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\",\n\t\t\t\"Saturday\", \"Sunday\"},\n\t}\n\n\t_, result, err := prompt.Run()\n\n\tif err != nil {\n\t\tfmt.Printf(\"Prompt failed %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"You choose %q\\n\", result)\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Specific Quadlet Unit Files Using Environment Variables\nDESCRIPTION: Command to test specific Quadlet unit files by setting QUADLET_UNIT_DIRS to a custom directory. This limits the debug output to only the units you're interested in testing.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nQUADLET_UNIT_DIRS=<Directory> /usr/lib/systemd/system-generators/podman-system-generator {--user} --dryrun\n```\n\n----------------------------------------\n\nTITLE: Loading Podman Completion for PowerShell - PowerShell\nDESCRIPTION: This PowerShell snippet enables Podman completions for the current session by generating the completion script using podman.exe and piping its output through Out-String to Invoke-Expression, which evaluates the script. This command requires that the podman.exe binary is accessible, and temporarily adds completion support for Podman until the session ends.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-completion.1.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\npodman.exe completion powershell | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up GoTree for Development\nDESCRIPTION: This snippet shows the commands for cloning the GoTree repository and navigating to the project directory for development purposes.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/disiqueira/gotree/v3/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone --recursive git@github.com:DiSiqueira/GoTree.git\n$ cd GoTree/\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to Manpage Using Shell Redirection\nDESCRIPTION: Example showing how to convert a markdown file to a manpage using standard input/output redirection.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/cpuguy83/go-md2man/v2/go-md2man.1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo-md2man < go-md2man.1.md > go-md2man.1\n```\n\n----------------------------------------\n\nTITLE: Importing Libvirt Go Binding in Go\nDESCRIPTION: This snippet shows the import statements for the go-libvirt library, which provides Go bindings for the libvirt virtualization API.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/digitalocean/go-libvirt\ngithub.com/digitalocean/go-libvirt/internal/constants\ngithub.com/digitalocean/go-libvirt/internal/event\ngithub.com/digitalocean/go-libvirt/internal/go-xdr/xdr2\ngithub.com/digitalocean/go-libvirt/socket\ngithub.com/digitalocean/go-libvirt/socket/dialers\n```\n\n----------------------------------------\n\nTITLE: Running Buildah Bud Tests with Filter Option\nDESCRIPTION: Command example showing how to run Buildah bud tests with a filter pattern to target specific tests.\nSOURCE: https://github.com/containers/podman/blob/main/test/buildah-bud/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrun-buildah-bud-tests --filter=\"pattern\"\n```\n\n----------------------------------------\n\nTITLE: Converting Strfmt Date and Time Types in Go\nDESCRIPTION: Shows how to convert strfmt Date and DateTime types to time.Time, and Duration to time.Duration.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-openapi/strfmt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntime.Time(Time{})\n```\n\nLANGUAGE: go\nCODE:\n```\ntime.Duration(Duration{})\n```\n\n----------------------------------------\n\nTITLE: Collecting BoltDB Performance Statistics in Go\nDESCRIPTION: A goroutine example that collects and logs BoltDB statistics every 10 seconds. This implementation captures performance metrics over time intervals by comparing snapshots, which is useful for monitoring database operations.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_25\n\nLANGUAGE: go\nCODE:\n```\ngo func() {\n\t// Grab the initial stats.\n\tprev := db.Stats()\n\n\tfor {\n\t\t// Wait for 10s.\n\t\ttime.Sleep(10 * time.Second)\n\n\t\t// Grab the current stats and diff them.\n\t\tstats := db.Stats()\n\t\tdiff := stats.Sub(&prev)\n\n\t\t// Encode stats to JSON and print to STDERR.\n\t\tjson.NewEncoder(os.Stderr).Encode(diff)\n\n\t\t// Save stats for the next loop.\n\t\tprev = stats\n\t}\n}()\n```\n\n----------------------------------------\n\nTITLE: Rebasing and Squashing Commits Using Git - Shell\nDESCRIPTION: This snippet demonstrates a sequence of shell commands for interactively rebasing a series of Git commits and performing a squash operation to combine them into a single commit. It details selecting commits to squash, amending the commit message, and force-pushing the branch. Required dependencies include Git installed locally, and expected inputs are the commit range or branch; outputs are a rewritten commit history in the remote repository.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sigstore/rekor/CONTRIBUTORS.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase -i HEAD~3\n```\n\nLANGUAGE: plaintext\nCODE:\n```\npick eb36612 initial commit\npick 9ac8968 second commit\npick a760569 final commit\n\n# Rebase eb1429f..a760569 onto eb1429f (3 commands)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\npick eb36612 initial commit\nsquash 9ac8968 second commit\nsquash a760569 final commit\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --amend\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin your-branch --force\n```\n\n----------------------------------------\n\nTITLE: Building Podman with Debug Flags\nDESCRIPTION: Demonstrates building Podman with -work and -a flags to enable dependency analysis, followed by running the go-archive-analysis script to analyze package sizes.\nSOURCE: https://github.com/containers/podman/blob/main/dependencies/analyses/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 1) Build the Podman binary with `-work -a`.\n[libpod]$ BUILDFLAGS=\"-work -a\" make podman\n[...]\nWORK=/tmp/go-build794287815\n\n# 2) Set the work directory as an environment variable and call the analysis script\n[libpod]$ WORK=/tmp/go-build794287815 ./dependencies/analyses/go-archive-analysis.sh | head -n10\n```\n\n----------------------------------------\n\nTITLE: Compiling go-sqlite3 on macOS (x86_64) linking libsqlite3 using Bash\nDESCRIPTION: This command compiles the `go-sqlite3` package on macOS (Intel/x86_64), linking against the system's `libsqlite3` library instead of the embedded source. It uses the 'libsqlite3', 'darwin', and 'amd64' build tags. Requires Go, CGO, Xcode tools, and the `sqlite3` library (installable via `brew install sqlite3`).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# x86 \ngo build -tags \"libsqlite3 darwin amd64\"\n```\n\n----------------------------------------\n\nTITLE: Creating Users in Nested Buckets in BoltDB using Go\nDESCRIPTION: This code demonstrates how to work with nested buckets in a multi-tenant application. It shows creating a user within an account bucket, which contains a users bucket.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// createUser creates a new user in the given account.\nfunc createUser(accountID int, u *User) error {\n    // Start the transaction.\n    tx, err := db.Begin(true)\n    if err != nil {\n        return err\n    }\n    defer tx.Rollback()\n\n    // Retrieve the root bucket for the account.\n    // Assume this has already been created when the account was set up.\n    root := tx.Bucket([]byte(strconv.FormatUint(accountID, 10)))\n\n    // Setup the users bucket.\n    bkt, err := root.CreateBucketIfNotExists([]byte(\"USERS\"))\n    if err != nil {\n        return err\n    }\n\n    // Generate an ID for the new user.\n    userID, err := bkt.NextSequence()\n    if err != nil {\n        return err\n    }\n    u.ID = userID\n\n    // Marshal and save the encoded user.\n    if buf, err := json.Marshal(u); err != nil {\n        return err\n    } else if err := bkt.Put([]byte(strconv.FormatUint(u.ID, 10)), buf); err != nil {\n        return err\n    }\n\n    // Commit the transaction.\n    if err := tx.Commit(); err != nil {\n        return err\n    }\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Cgroup Statistics Message Definition\nDESCRIPTION: Protobuf message type definition for cgroup process statistics including counts of processes in different states.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-23_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"CgroupStats\"\n    field {\n      name: \"nr_sleeping\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"nrSleeping\"\n    }\n    field {\n      name: \"nr_running\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"nrRunning\"\n    }\n    field {\n      name: \"nr_stopped\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"nrStopped\"\n    }\n    field {\n      name: \"nr_uninterruptible\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"nrUninterruptible\"\n    }\n    field {\n      name: \"nr_io_wait\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"nrIoWait\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Go Generate on All Packages - Shell\nDESCRIPTION: Executes go generate for all packages in the repository, followed by doing the same in the 'test' subdirectory. Requires Go installed and assumes appropriate go:generate directives in source. Keeps generated artifacts up to date as part of development or CI workflow.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/Microsoft/hcsshim/README.md#2025-04-23_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n> go generate ./...\n> cd test && go generate ./...\n\n```\n\n----------------------------------------\n\nTITLE: Generating CHANGELOG Draft from Git History using Bash\nDESCRIPTION: This bash script automates the initial generation of a CHANGELOG entry for a new release. It retrieves the latest Git tag, collects commit messages since that tag using `git log`, formats them, adds standard sections (Features, Fixes, Maintenance), and prepends this structure to the existing `CHANGELOG.md` file, overwriting it. Requires Git and standard shell commands.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/ginkgo/v2/RELEASING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLAST_VERSION=$(git tag --sort=version:refname | tail -n1)\nCHANGES=$(git log --pretty=format:'- %s [%h]' HEAD...$LAST_VERSION)\necho -e \"## NEXT\\n\\n$CHANGES\\n\\n### Features\\n\\n### Fixes\\n\\n### Maintenance\\n\\n$(cat CHANGELOG.md)\" > CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: Creating DNF cache directory for Fedora 36\nDESCRIPTION: Creates an empty directory to store the DNF metadata cache for Fedora 36 containers.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/performance.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir $HOME/dnf_cache_f36\n```\n\n----------------------------------------\n\nTITLE: Using Afero FileSystem in Go\nDESCRIPTION: This snippet illustrates how to use Afero's filesystem methods, replacing standard OS package calls with Afero equivalents.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nAppFs.Open(\"/tmp/foo\")\n```\n\n----------------------------------------\n\nTITLE: Committing an Image with Author Metadata - Podman CLI Bash\nDESCRIPTION: This snippet details setting the author metadata during a podman commit operation using the --author flag. The -q option suppresses output, and the resulting output is the image ID. Dependencies: podman, existing container (reverent_golick). The author parameter provides provenance for the resulting image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-commit.1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ podman commit -q --author \"firstName lastName\" reverent_golick image-committed\ne3ce4d93051ceea088d1c242624d659be32cf1667ef62f1d16d6b60193e2c7a8\n```\n\n----------------------------------------\n\nTITLE: Using Logrus Logging Levels in Go\nDESCRIPTION: Shows the seven logging levels available in Logrus and how to use them. Includes examples of logging at each severity level and setting the global logging threshold to control which messages are processed.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nlog.Trace(\"Something very low level.\")\nlog.Debug(\"Useful debugging information.\")\nlog.Info(\"Something noteworthy happened!\")\nlog.Warn(\"You should probably take a look at this.\")\nlog.Error(\"Something failed but I'm not quitting.\")\n// Calls os.Exit(1) after logging\nlog.Fatal(\"Bye.\")\n// Calls panic() after logging\nlog.Panic(\"I'm bailing.\")\n```\n\n----------------------------------------\n\nTITLE: Declaring All Constants With Explicit Types - Go\nDESCRIPTION: This Go code snippet illustrates a preferred approach for declaring constants with explicit types within a block, ensuring all constants have the desired type ('byte' in this case). By assigning the 'byte' type to both 'a' and 'b', it prevents type mismatches and clarifies intent for future code maintainers. This pattern is recommended in Go when type consistency across constants is required, particularly in APIs or codebases that rely on consistent typing. No additional dependencies or parameters are involved.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/ulikunitz/xz/TODO.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst (\n  a byte = 0x1\n  b byte = 0x2\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Custom ANSI Styles using aec Builder (Go)\nDESCRIPTION: This snippet shows how to use the `aec.EmptyBuilder` to chain multiple ANSI formatting methods (move cursor right, set 8-bit foreground color, set red background color) to create a custom `aec.ANSI` object. The `Apply` method is then used to wrap a string with the generated ANSI codes. Depends on the `aec` library being imported.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/morikuni/aec/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncustom := aec.EmptyBuilder.Right(2).RGB8BitF(128, 255, 64).RedB().ANSI\ncustom.Apply(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Interactively Removing a Specific Podman Machine (Shell)\nDESCRIPTION: Demonstrates the standard, interactive process of removing a Podman virtual machine named 'test1'. The command outputs the list of files that will be deleted (ignition file, image file, JSON configuration) and prompts the user for confirmation before proceeding with the removal.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-machine-rm.1.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ podman machine rm test1\n\nThe following files will be deleted:\n\n/home/user/.config/containers/podman/machine/qemu/test1.ign\n/home/user/.local/share/containers/podman/machine/qemu/test1_fedora-coreos-33.20210315.1.0-qemu.x86_64.qcow2\n/home/user/.config/containers/podman/machine/qemu/test1.json\n\nAre you sure you want to continue? [y/N] y\n```\n\n----------------------------------------\n\nTITLE: Displaying Go Version in go.mod File\nDESCRIPTION: This snippet demonstrates how to check the Go version specified in the go.mod file using a shell command. It's used to illustrate the importance of maintaining the correct Go version in project dependencies.\nSOURCE: https://github.com/containers/podman/blob/main/REVIEWING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cat go.mod | grep 'go 1.'\ngo 1.22.8\n```\n\n----------------------------------------\n\nTITLE: Committing Staged Git Changes with a Message (Shell)\nDESCRIPTION: Creates a new commit in the local Git repository history, permanently recording the currently staged changes. The `-m` flag allows providing a short commit message directly on the command line. Requires `git` and staged changes.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m 'Add some feature'\n```\n\n----------------------------------------\n\nTITLE: Default containers.conf Path (Windows)\nDESCRIPTION: Specifies the default location of the `containers.conf` file on Windows systems. This file contains configuration settings for Podman, including remote connections.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-remote.1.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n%APPDATA%\\containers\\containers.conf\n```\n\n----------------------------------------\n\nTITLE: Using OpenTelemetry Metric Package in Go\nDESCRIPTION: Example of a new option added to the OpenTelemetry Go metric package for defining explicit bucket boundaries when creating histogram instruments.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/metric\"\n\nmetric.WithExplicitBucketBoundaries\n```\n\n----------------------------------------\n\nTITLE: iOS Objective-C Implementation for BoltDB\nDESCRIPTION: Objective-C code for iOS that initializes a BoltDB instance and excludes the database file from iCloud backup. This implementation ensures proper database file management on iOS devices.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_29\n\nLANGUAGE: objc\nCODE:\n```\n- (void)demo {\n    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,\n                                                          NSUserDomainMask,\n                                                          YES) objectAtIndex:0];\n\tGoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);\n\t[self addSkipBackupAttributeToItemAtPath:demo.path];\n\t//Some DB Logic would go here\n\t[demo close];\n}\n\n- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString\n{\n    NSURL* URL= [NSURL fileURLWithPath: filePathString];\n    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);\n\n    NSError *error = nil;\n    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]\n                                  forKey: NSURLIsExcludedFromBackupKey error: &error];\n    if(!success){\n        NSLog(@\"Error excluding %@ from backup %@\", [URL lastPathComponent], error);\n    }\n    return success;\n}\n```\n\n----------------------------------------\n\nTITLE: Formal Commit Message Structure Definition (Plain Text)\nDESCRIPTION: This snippet formally defines the required structure for commit messages in the Podman project. It specifies the components: a subject line indicating the subsystem and change, a blank line, a body explaining the reason for the change, another blank line, and an optional footer. It also enforces character limits for the subject (70 chars) and body lines (80 chars) for better readability.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/godbus/dbus/v5/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<subsystem>: <what changed>\n<BLANK LINE>\n<why this change was made>\n<BLANK LINE>\n<footer>\n```\n\n----------------------------------------\n\nTITLE: Using the 'default' Function for Fallback Values in Go Templates\nDESCRIPTION: This Go template snippet demonstrates the `default` function, highlighted in Release 2.1.0 for its updated behavior. If the value of `.Foo` passed via the pipeline is considered empty (e.g., nil, zero value, empty string/collection), the function outputs the default value \"bar\". Otherwise, it outputs the value of `.Foo`.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{.Foo | default \"bar\"}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Afero Backend in Go\nDESCRIPTION: This snippet demonstrates how to declare a package variable and set it to a pointer to a filesystem using Afero. It shows examples for both memory-mapped and OS-based filesystems.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar AppFs = afero.NewMemMapFs()\n\nor\n\nvar AppFs = afero.NewOsFs()\n```\n\n----------------------------------------\n\nTITLE: Importing pflag as a Replacement for Go's flag Package\nDESCRIPTION: This snippet shows how to import pflag as a drop-in replacement for Go's native flag package. By importing it under the name \"flag\", existing code can continue to function without changes.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Defining Features Flag in Podman Manifest Commands\nDESCRIPTION: Specifies the features list that the manifest list or index records as requirements for the container image. This is an advanced option that is rarely used in typical workflows.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/features.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**--features**=*feature*\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Buildah Test Files\nDESCRIPTION: Git commands for amending a pull request with changes to the buildah-bud test files and force pushing the updated changes.\nSOURCE: https://github.com/containers/podman/blob/main/test/buildah-bud/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --amend\ngit push --force\n```\n\n----------------------------------------\n\nTITLE: Installing CamelCase Package with Go Get\nDESCRIPTION: Command to install the CamelCase package using Go's package manager. This adds the GitHub-hosted package to your Go modules.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/common/pkg/report/camelcase/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/fatih/camelcase\n```\n\n----------------------------------------\n\nTITLE: Initial Benchmark Results at b3e7a5386f\nDESCRIPTION: Baseline benchmark measurements showing performance metrics for various name conversion operations on Intel i5-6200U CPU\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\nBenchmarkToXXXName/ToGoName-4         \t  862623\t     44101 ns/op\t   10450 B/op\t     732 allocs/op\nBenchmarkToXXXName/ToVarName-4        \t  853656\t     40728 ns/op\t   10468 B/op\t     734 allocs/op\nBenchmarkToXXXName/ToFileName-4       \t 1268312\t     27813 ns/op\t    9785 B/op\t     617 allocs/op\nBenchmarkToXXXName/ToCommandName-4    \t 1276322\t     27903 ns/op\t    9785 B/op\t     617 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-4 \t  895334\t     40354 ns/op\t   10472 B/op\t     731 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-4 \t  882441\t     40678 ns/op\t   10566 B/op\t     749 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Creating a List ('Tuple') within a Go Template\nDESCRIPTION: Introduced in Release 2.0.0, this Go template snippet demonstrates the `tuple` function (later superseded by `list`). It creates a list containing the strings \"a\", \"b\", and \"c\" and assigns it to the template variable `$t` for later use within the template.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-task/slim-sprig/v3/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{$t := tuple \"a\", \"b\" \"c\"}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Connection Flag Help\nDESCRIPTION: Command to display help information about the '--connection' flag, which allows specifying which configured connection to use for Podman commands.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/mac_win_client.md#2025-04-23_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\Users\\baude> podman system connection --help\n```\n\n----------------------------------------\n\nTITLE: Shell Script Fix for Non-Portable Shebang\nDESCRIPTION: Fixes a non-portable shebang in shell scripts as referenced in issue #2812\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/changelog.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfix: non-portable shebang #2812\n```\n\n----------------------------------------\n\nTITLE: Watching for Configuration Changes in Etcd with Viper\nDESCRIPTION: Shows how to set up a goroutine to continuously watch for changes in remote configuration stored in etcd and update runtime configuration accordingly.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n// alternatively, you can create a new viper instance.\nvar runtime_viper = viper.New()\n\nruntime_viper.AddRemoteProvider(\"etcd\", \"http://127.0.0.1:4001\", \"/config/hugo.yml\")\nruntime_viper.SetConfigType(\"yaml\") // because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\n\n// read from remote config the first time.\nerr := runtime_viper.ReadRemoteConfig()\n\n// unmarshal config\nruntime_viper.Unmarshal(&runtime_conf)\n\n// open a goroutine to watch remote changes forever\ngo func(){\n\tfor {\n\t\ttime.Sleep(time.Second * 5) // delay after each request\n\n\t\t// currently, only tested with etcd support\n\t\terr := runtime_viper.WatchRemoteConfig()\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"unable to read remote config: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\t// unmarshal new config into our runtime config struct. you can also use channel\n\t\t// to implement a signal to notify the system of the changes\n\t\truntime_viper.Unmarshal(&runtime_conf)\n\t}\n}()\n```\n\n----------------------------------------\n\nTITLE: Build Configuration Update\nDESCRIPTION: Sets build flag configurations including CPP, CC and other flags in dependency check scripts\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/changelog.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUse CPP, CC and flags in dep check scripts\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Feature Branch\nDESCRIPTION: Git workflow commands for creating a branch, making changes, running tests, and pushing to your fork for pull request creation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a New Git Branch (Shell)\nDESCRIPTION: Creates a new local branch named `my-new-feature` based on the current branch and immediately switches the working copy to this new branch. This isolates development work for a specific feature or bug fix. Requires `git` and execution within a Git repository.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Referencing the List of Project Maintainers\nDESCRIPTION: Refers to the official list or file identifying the project maintainers. Only individuals listed as `MAINTAINERS` are counted towards the required two LGTMs for merging pull requests.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/cgroups/MAINTAINERS_GUIDE.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nMAINTAINERS\n```\n\n----------------------------------------\n\nTITLE: Renaming a Podman Container by ID using Shell\nDESCRIPTION: This example demonstrates renaming a Podman container using its unique ID (`717716c00a6b`) to the new name `testcontainer`. This is useful when the container name is unknown or inconvenient to use. Requires Podman installation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-rename.1.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ podman rename 717716c00a6b testcontainer\n```\n\n----------------------------------------\n\nTITLE: FSNotify Changelog Entry Format\nDESCRIPTION: Standard format used for changelog entries, showing version number, date and changes\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.1.0] - 2014-12-12\n\n* kqueue: rework internals [#43]\n    * add low-level functions\n    * only need to store flags on directories\n    * less mutexes [#13]\n    * done can be an unbuffered channel\n    * remove calls to os.NewSyscallError\n```\n\n----------------------------------------\n\nTITLE: Using errwrap with Custom Types in Go\nDESCRIPTION: This snippet demonstrates how to use errwrap's ContainsType function with a custom error type that implements the Wrapper interface.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nerr := &AppError{Err: fmt.Errorf(\"an error\")}\nif errwrap.ContainsType(err, fmt.Errorf(\"\")) {\n\t// This will work!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Namespace UID Mapping Option for Podman Build\nDESCRIPTION: This snippet defines the --userns-uid-map-user option for Podman build and farm build commands. It specifies how to use UID mappings from /etc/subuid for setting filesystem-level ownership in working containers. The option affects the execution of RUN instructions and has special behavior for rootless users.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/userns-uid-map-user.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### **--userns-uid-map-user**=*user*\n```\n\n----------------------------------------\n\nTITLE: Post-PR #79 Benchmark Results on Intel CPU\nDESCRIPTION: Improved benchmark results after PR #79 showing ~10x performance improvement and reduced allocations on Intel i5-6200U CPU\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/go-openapi/swag\ncpu: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz\nBenchmarkToXXXName/ToGoName-4         \t 9595830\t      3991 ns/op\t      42 B/op\t       5 allocs/op\nBenchmarkToXXXName/ToVarName-4        \t 9194276\t      3984 ns/op\t      62 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToFileName-4       \t17002711\t      2123 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToCommandName-4    \t16772926\t      2111 ns/op\t     147 B/op\t       7 allocs/op\nBenchmarkToXXXName/ToHumanNameLower-4 \t 9788331\t      3749 ns/op\t      92 B/op\t       6 allocs/op\nBenchmarkToXXXName/ToHumanNameTitle-4 \t 9188260\t      3941 ns/op\t     104 B/op\t       6 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Parsing Semantic Versions with semver in Go\nDESCRIPTION: This snippet demonstrates how to use the semver Go package to parse a semantic version string and handle parsing errors. It relies on the semver package and returns a Version object, which provides methods for manipulating and comparing versions. Inputs are provided as version strings, and output is a parsed Version object or an error; ensure that the semver package is installed and imported before use.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nv, err := semver.NewVersion(\"1.2.3-beta.1+build345\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Secret Driver in Podman\nDESCRIPTION: Demonstrates the configuration structure (likely within Podman's configuration files like `containers.conf`) to define custom scripts for listing, looking up, storing, and deleting secrets when using the 'shell' driver. An environment variable `SECRET_ID` is passed to these scripts (except for `list`).\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-secret-create.1.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[secrets]\ndriver = \"shell\"\n\n[secrets.opts]\nlist =\nlookup =\nstore =\ndelete =\n```\n\n----------------------------------------\n\nTITLE: Output of Docker CLI Command (Text)\nDESCRIPTION: Shows the output produced by the container run via the Docker CLI, confirming that the command was successfully processed by the Podman backend.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nHello Podman!\n```\n\n----------------------------------------\n\nTITLE: Displaying Podman Contribution Guidelines in Markdown\nDESCRIPTION: This snippet contains the full content of the contribution guidelines for the Podman project. It outlines the welcome message for patches and contributions, and specifies the legal requirement of signing the Contributor License Agreement.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/google/uuid/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# How to contribute\n\nWe definitely welcome patches and contribution to this project!\n\n### Legal requirements\n\nIn order to protect both you and ourselves, you will need to sign the\n[Contributor License Agreement](https://cla.developers.google.com/clas).\n\nYou may have already signed it for other Google projects.\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests for ULID Package\nDESCRIPTION: Command to run all tests in the ULID package and its subpackages.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/oklog/ulid/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Validating Semantic Versions Against Constraints in Go\nDESCRIPTION: Demonstrates how to validate a semantic version against multiple version constraints. Shows error handling for constraint and version parsing, along with processing validation error messages. Uses the semver package to perform version validation.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nc, err := semver.NewConstraint(\"<= 1.2.3, >= 1.4\")\nif err != nil {\n    // Handle constraint not being parseable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parseable.\n}\n\n// Validate a version against a constraint.\na, msgs := c.Validate(v)\n// a is false\nfor _, m := range msgs {\n    fmt.Println(m)\n\n    // Loops over the errors which would read\n    // \"1.3 is greater than 1.2.3\"\n    // \"1.3 is less than 1.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Go JOSE v4 Package\nDESCRIPTION: Example showing how to import the current stable version (v4) of the Go JOSE library.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-jose/go-jose/v4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/go-jose/go-jose/v4\"\n```\n\n----------------------------------------\n\nTITLE: Installing VSSetup PowerShell Module\nDESCRIPTION: PowerShell command to install the VSSetup module, which is used to detect and configure Visual Studio instances during the build process.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_6\n\nLANGUAGE: pwsh\nCODE:\n```\nInstall-Module VSSetup\n```\n\n----------------------------------------\n\nTITLE: Initializing Logrus Syslog Hook for Remote Logging (Go)\nDESCRIPTION: This snippet demonstrates how to initialize the Logrus Syslog hook to send logs to a remote Syslog server. It imports necessary packages, creates a new Logrus logger instance, and then attempts to create a new Syslog hook using `lSyslog.NewSyslogHook`. Parameters specify the network protocol ('udp'), the remote server address ('localhost:514'), the minimum log priority (`syslog.LOG_INFO`), and an optional tag (empty string). If hook creation is successful, it's added to the logger's hooks.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/hooks/syslog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"log/syslog\"\n  \"github.com/sirupsen/logrus\"\n  lSyslog \"github.com/sirupsen/logrus/hooks/syslog\"\n)\n\nfunc main() {\n  log       := logrus.New()\n  hook, err := lSyslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n\n  if err == nil {\n    log.Hooks.Add(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Graphroot Permission Error Example\nDESCRIPTION: Error message when SELinux blocks container access to custom storage location\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n# podman run -p 5000:5000 -it centos bash\n\nbash: error while loading shared libraries: /lib64/libc.so.6: cannot apply additional memory protection after relocation: Permission denied\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Alpine Linux using Bash\nDESCRIPTION: This command uses the Alpine Linux package manager (`apk`) to install essential build dependencies required for compiling CGO-enabled Go packages like `go-sqlite3`. It installs the GCC compiler (`gcc`) and the musl C library development files (`musl-dev`). The `--update` flag ensures the package list is refreshed before installation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mattn/go-sqlite3/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\napk add --update gcc musl-dev\n```\n\n----------------------------------------\n\nTITLE: Verifying Signed Git Release Tags using Shell\nDESCRIPTION: This shell command verifies the GPG signature associated with a specific git tag. Replace `<tag>` with the actual release tag (e.g., v0.10.0). This is used to ensure the authenticity and integrity of the libseccomp-golang releases, confirming they were signed by an authorized maintainer.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/seccomp/libseccomp-golang/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% git tag -v <tag>\n```\n\n----------------------------------------\n\nTITLE: Package Badge for OpenTelemetry Semantic Conventions\nDESCRIPTION: Markdown code displaying the Go package documentation badge that links to the OpenTelemetry semantic conventions package documentation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.26.0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.26.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.26.0)\n```\n\n----------------------------------------\n\nTITLE: Installing Standalone Podman MSI Package\nDESCRIPTION: This command installs the standalone Podman MSI package using the Microsoft Standard Installer. It generates a detailed log file for the installation process.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_27\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /package contrib\\win-installer\\en-US\\podman.msi /l*v podman-msi.log\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log File Size in Podman\nDESCRIPTION: Specifies the maximum size of the log file using the 'max-size' option with --log-opt.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/log-opt.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--log-opt max-size=10mb\n```\n\n----------------------------------------\n\nTITLE: Launching Elevated PowerShell (Run as Administrator) - PowerShell\nDESCRIPTION: Opens a new PowerShell window with administrative privileges using the Start-Process cmdlet in PowerShell. Essential for performing system-level tasks like disabling Windows features. Requires PowerShell to be available in the user's environment.\nSOURCE: https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md#2025-04-23_snippet_36\n\nLANGUAGE: powershell\nCODE:\n```\nStart-Process powershell -Verb RunAs\n```\n\n----------------------------------------\n\nTITLE: Using WhiteList to Filter String Characters in Go\nDESCRIPTION: This Go example demonstrates the use of `govalidator.WhiteList`. It removes all characters from the input string except those matching the specified whitelist range \"a-z\". The result, containing only 'a' characters, is compared to an expected string and the comparison result is printed.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n```go\n// Remove all characters from string ignoring characters between \"a\" and \"z\"\nprintln(govalidator.WhiteList(\"a3a43a5a4a3a2a23a4a5a4a3a4\", \"a-z\") == \"aaaaaaaaaaaa\")\n```\n```\n\n----------------------------------------\n\nTITLE: Available Validators for Struct Fields in GoValidator\nDESCRIPTION: Comprehensive list of built-in validators available for use in struct tags. Each validator is mapped to a corresponding validation function in the library.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n\"email\":              IsEmail,\n\"url\":                IsURL,\n\"dialstring\":         IsDialString,\n\"requrl\":             IsRequestURL,\n\"requri\":             IsRequestURI,\n\"alpha\":              IsAlpha,\n\"utfletter\":          IsUTFLetter,\n\"alphanum\":           IsAlphanumeric,\n\"utfletternum\":       IsUTFLetterNumeric,\n\"numeric\":            IsNumeric,\n\"utfnumeric\":         IsUTFNumeric,\n\"utfdigit\":           IsUTFDigit,\n\"hexadecimal\":        IsHexadecimal,\n\"hexcolor\":           IsHexcolor,\n\"rgbcolor\":           IsRGBcolor,\n\"lowercase\":          IsLowerCase,\n\"uppercase\":          IsUpperCase,\n\"int\":                IsInt,\n\"float\":              IsFloat,\n\"null\":               IsNull,\n\"uuid\":               IsUUID,\n\"uuidv3\":             IsUUIDv3,\n\"uuidv4\":             IsUUIDv4,\n\"uuidv5\":             IsUUIDv5,\n\"creditcard\":         IsCreditCard,\n\"isbn10\":             IsISBN10,\n\"isbn13\":             IsISBN13,\n\"json\":               IsJSON,\n\"multibyte\":          IsMultibyte,\n\"ascii\":              IsASCII,\n\"printableascii\":     IsPrintableASCII,\n\"fullwidth\":          IsFullWidth,\n\"halfwidth\":          IsHalfWidth,\n\"variablewidth\":      IsVariableWidth,\n\"base64\":             IsBase64,\n\"datauri\":            IsDataURI,\n\"ip\":                 IsIP,\n\"port\":               IsPort,\n\"ipv4\":               IsIPv4,\n\"ipv6\":               IsIPv6,\n\"dns\":                IsDNSName,\n\"host\":               IsHost,\n\"mac\":                IsMAC,\n\"latitude\":           IsLatitude,\n\"longitude\":          IsLongitude,\n\"ssn\":                IsSSN,\n\"semver\":             IsSemver,\n\"rfc3339\":            IsRFC3339,\n\"rfc3339WithoutZone\": IsRFC3339WithoutZone,\n\"ISO3166Alpha2\":      IsISO3166Alpha2,\n\"ISO3166Alpha3\":      IsISO3166Alpha3,\n\"ulid\":               IsULID,\n```\n\n----------------------------------------\n\nTITLE: Downloading Visual Studio Build Tools\nDESCRIPTION: PowerShell command to download the Build Tools for Visual Studio 2022 installer, which is needed for compiling C components in the Podman installer.\nSOURCE: https://github.com/containers/podman/blob/main/build_windows.md#2025-04-23_snippet_4\n\nLANGUAGE: pwsh\nCODE:\n```\nInvoke-WebRequest -Uri 'https://aka.ms/vs/17/release/vs_BuildTools.exe' -OutFile \"$env:TEMP\\vs_BuildTools.exe\"\n```\n\n----------------------------------------\n\nTITLE: Running Blackfriday Without Extensions - Go\nDESCRIPTION: Shows how to invoke Blackfriday with only the core Markdown features, disabling all default extensions for strict Markdown compliance. This requires the 'github.com/russross/blackfriday/v2' package. The input is a byte slice and is processed with 'blackfriday.WithNoExtensions()', producing barebones HTML output. The result is a byte slice matching Markdown specification output.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input, blackfriday.WithNoExtensions())\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fprint Functions (FprintFunc) - fatih/color - Go\nDESCRIPTION: Demonstrates setting up FprintfFunc and FprintlnFunc to print colored and formatted output to arbitrary writers. These functions wrap the standard Fprintf/Fprintln but add coloring capabilities. You must provide a compatible io.Writer.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nblue := color.New(color.FgBlue).FprintfFunc()\nblue(myWriter, \"important notice: %s\", stars)\n\n// Mix up with multiple attributes\nsuccess := color.New(color.Bold, color.FgGreen).FprintlnFunc()\nsuccess(myWriter, \"Don't forget this...\")\n\n```\n\n----------------------------------------\n\nTITLE: Example Template String Replacement\nDESCRIPTION: Demonstrates using the replace function to substitute parts of a string\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nreplace \" \" \"-\" \"Me First\"\n```\n\n----------------------------------------\n\nTITLE: Implementing CacheOnReadFs for Layered Access\nDESCRIPTION: Creates a composite filesystem that lazily copies files from a base layer to an overlay cache when they're read. This example shows setting up a cache with a 100-second duration using the OS filesystem as base and an in-memory filesystem as the cache layer.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nbase := afero.NewOsFs()\nlayer := afero.NewMemMapFs()\nufs := afero.NewCacheOnReadFs(base, layer, 100 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: Container Memory OOM Control Message Definition\nDESCRIPTION: Protobuf message type definition for memory OOM (Out Of Memory) control statistics including OOM kill disable status, under OOM status, and OOM kill count.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"MemoryOomControl\"\n    field {\n      name: \"oom_kill_disable\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"oomKillDisable\"\n    }\n    field {\n      name: \"under_oom\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"underOom\"\n    }\n    field {\n      name: \"oom_kill\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"oomKill\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Representing HCL Nested Objects in JSON\nDESCRIPTION: Provides the JSON equivalent of the preceding HCL nested object example (`variable \"ami\"`). This demonstrates the JSON compatibility of HCL, showing how the HCL structure maps directly to nested JSON objects, facilitating interoperability.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/hashicorp/hcl/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variable\": {\n      \"ami\": {\n          \"description\": \"the AMI to use\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Struct Validator Tag in Go\nDESCRIPTION: This snippet demonstrates how to add a new custom validation rule to the `govalidator` library. It registers a tag named \"duck\" associated with a custom function that checks if the input string is exactly \"duck\". This allows the use of `valid:\"duck\"` in struct field tags.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n```go\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Using CamelCase Package to Split Strings in Go\nDESCRIPTION: Example of using the CamelCase package to split a camel case string into its constituent words and printing the results.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/util/camelcase/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsplit := camelcase.Split(\"GolangPackage\")\n\nfmt.Println(split[0], split[1]) // prints: \"Golang\", \"Package\"\n```\n\n----------------------------------------\n\nTITLE: Checking for Errors Using the Standard Go Idiom - Go\nDESCRIPTION: This snippet demonstrates the conventional way of checking and returning errors in Go functions. It is recommended for maintaining clear error propagation up the call stack. No external dependencies are required, and the input is typically the result of a function, while the output is returning any error encountered.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pkg/errors/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Git Validation Failure Example\nDESCRIPTION: Shows an example of a failed validation due to an invalid DCO.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/vbatts/git-validation/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nvbatts@valse ~/src/vb/git-validation (master) $ git-validation \n * 49f51a8 \"README: adding install and usage\" ... FAIL\n  - FAIL - does not have a valid DCO\n * d614ccf \"*: run tests in a runner\" ... PASS\n * b9413c6 \"shortsubject: add a subject length check\" ... PASS\n * 5e74abd \"*: comments and golint\" ... PASS\n * 07a982f \"git: add verbose output of the commands run\" ... PASS\n * 03bda4b \"main: add filtering of rules to run\" ... PASS\n * c10ba9c \"Initial commit\" ... PASS\n1 issues to fix\nvbatts@valse ~/src/vb/git-validation (master) $ echo $?\n1\n```\n\n----------------------------------------\n\nTITLE: Tagging Podman Image ID with Default Latest Tag (Shell)\nDESCRIPTION: This command demonstrates tagging an existing image, identified by its ID `0e3bbc2`, with a new name `fedora`. Since no tag is specified for the target name, it defaults to `latest`, resulting in the tag `fedora:latest` being applied to the image.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-tag.1.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ podman tag 0e3bbc2 fedora:latest\n```\n\n----------------------------------------\n\nTITLE: Installing s3fs-fuse Utility - Shell\nDESCRIPTION: This shell snippet demonstrates installing the s3fs-fuse FUSE driver (for S3 bucket mounting) using DNF with doas for privilege escalation. Requires DNF package manager and administrative rights. s3fs-fuse allows S3 storage to be mounted as a filesystem.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-volume-create.1.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ doas dnf install s3fs-fuse\n```\n\n----------------------------------------\n\nTITLE: Mapping a Map to a Struct using Mergo\nDESCRIPTION: This Go snippet demonstrates using the `mergo.Map` function to populate fields in a destination struct (`dst`) from a source map (`srcMap` of type `map[string]interface{}`). Keys in the map are matched to capitalized exported field names in the struct.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/imdario/mergo/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Map(&dst, srcMap); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom io.Writer Output - fatih/color - Go\nDESCRIPTION: Illustrates directing formatted color output to custom io.Writer instances instead of standard output. This pattern is useful for logging, file writing, or stream processing. Requires an instantiated writer and the fatih/color package.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/fatih/color/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Use your own io.Writer output\ncolor.New(color.FgBlue).Fprintln(myWriter, \"blue color!\")\n\nblue := color.New(color.FgBlue)\nblue.Fprint(writer, \"This will print text in blue.\")\n\n```\n\n----------------------------------------\n\nTITLE: Converting Various Types to Integer Using Cast in Go\nDESCRIPTION: This snippet illustrates the usage of the ToInt function from the Cast library to convert different data types to integers. It demonstrates converting floats, strings, booleans, and interfaces to integers.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/cast/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncast.ToInt(8)                  // 8\ncast.ToInt(8.31)               // 8\ncast.ToInt(\"8\")                // 8\ncast.ToInt(true)               // 1\ncast.ToInt(false)              // 0\n\nvar eight interface{} = 8\ncast.ToInt(eight)              // 8\ncast.ToInt(nil)                // 0\n```\n\n----------------------------------------\n\nTITLE: Initializing SoftHSM Token via Command Line\nDESCRIPTION: This shell command initializes a new token within SoftHSM. It targets slot 0, assigns the label \"test\", and sets the user PIN to \"1234\". This command is a prerequisite for using the SoftHSM token with the PKCS#11 library. Requires the `softhsm` tool to be installed and configured (e.g., potentially using the `SOFTHSM_CONF` environment variable as mentioned in the surrounding text).\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/miekg/pkcs11/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsofthsm --init-token --slot 0 --label test --pin 1234\n```\n\n----------------------------------------\n\nTITLE: Reading Remote Configuration from Consul with Viper\nDESCRIPTION: Shows how to connect to and read JSON configuration from a Consul key/value store using Viper.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"consul\", \"localhost:8500\", \"MY_CONSUL_KEY\")\nviper.SetConfigType(\"json\") // Need to explicitly set this to json\nerr := viper.ReadRemoteConfig()\n\nfmt.Println(viper.Get(\"port\")) // 8080\nfmt.Println(viper.Get(\"hostname\")) // myhostname.com\n```\n\n----------------------------------------\n\nTITLE: Enabling Go Modules Support via Environment Variable\nDESCRIPTION: Provides the shell command to enable Go Modules by setting the `GO111MODULE` environment variable to `on`. This is presented as the recommended solution for resolving package dependency issues encountered with Viper and other libraries that utilize Go Modules.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/TROUBLESHOOTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Using OpenTelemetry Resource Package in Go\nDESCRIPTION: Example of using the new ErrSchemaURLConflict error from the OpenTelemetry Go SDK resource package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/sdk/resource\"\n\n// New error type\nresource.ErrSchemaURLConflict\n```\n\n----------------------------------------\n\nTITLE: Running Podman API v2 Tests with test-apiv2\nDESCRIPTION: Shows how to execute the API tests using the test-apiv2 runner. The command accepts optional test names as arguments to run specific tests, otherwise it runs all *.at tests. The tests connect to localhost via TCP.\nSOURCE: https://github.com/containers/podman/blob/main/test/apiv2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./test-apiv2 [NAME [...]]\n```\n\n----------------------------------------\n\nTITLE: Importing Mergo Library in Go Code\nDESCRIPTION: This Go code snippet shows how to import the installed Mergo library into a Go source file using an import statement. This makes the library's functions, like `Merge` and `Map`, accessible within the code.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/imdario/mergo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// use in your .go code\nimport (\n    \"github.com/imdario/mergo\"\n)\n```\n\n----------------------------------------\n\nTITLE: Illustrative JSON structure for mapstructure decoding (JSON)\nDESCRIPTION: This JSON snippet provides an example data structure that might be decoded using the 'mapstructure' library. It highlights a scenario where the target Go struct might depend on the value of a specific field (like \"type\"), making direct decoding challenging and motivating the use of an intermediate map[string]interface{} representation handled by mapstructure.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing xstrings Package in Go\nDESCRIPTION: Command to install the xstrings package using Go's package manager.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/huandu/xstrings/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/huandu/xstrings\n```\n\n----------------------------------------\n\nTITLE: Registering Fatal Handlers with Logrus in Go\nDESCRIPTION: This snippet demonstrates how to register exit handlers that will be executed before Logrus performs os.Exit(1) for fatal-level log messages. This allows for graceful shutdown when fatal errors occur.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nhandler := func() {\n  // gracefully shutdown something...\n}\nlogrus.RegisterExitHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Using Logrus as an IO Writer in Go\nDESCRIPTION: Shows how to transform Logrus into an io.Writer for integration with standard library components. The example demonstrates creating a writer from a logger and using it with an HTTP server's error log.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nw := logger.Writer()\ndefer w.Close()\n\nsrv := http.Server{\n    // create a stdlib log.Logger that writes to\n    // logrus.Logger.\n    ErrorLog: log.New(w, \"\", 0),\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Libvirt RPC Connection in Go\nDESCRIPTION: Establishes a QMP connection using Libvirt's RPC protocol implementation. Supports both Unix socket and TCP connections with timeout configuration.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/digitalocean/go-qemu/qmp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//conn, err := net.DialTimeout(\"unix\", \"/var/run/libvirt/libvirt-sock\", 2*time.Second)\nconn, err := net.DialTimeout(\"tcp\", \"192.168.1.1:16509\", 2*time.Second)\nmonitor := libvirtrpc.New(\"stage-lb-1\", conn)\n```\n\n----------------------------------------\n\nTITLE: Example .env File for gotenv (Shell)\nDESCRIPTION: This shell snippet showcases a sample .env file defining environment variables for use with gotenv. It contains application-specific variables such as APP_ID and APP_SECRET. Place this file in the project's root directory for loading by gotenv.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/subosito/gotenv/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nAPP_ID=1234567\nAPP_SECRET=abcdef\n```\n\n----------------------------------------\n\nTITLE: Afero Utility Functions in Go\nDESCRIPTION: This snippet shows two approaches to using Afero's utility functions: calling them directly with the filesystem as the first parameter, or declaring a new Afero type to bind the functions as methods.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfs := new(afero.MemMapFs)\nf, err := afero.TempFile(fs,\"\", \"ioutil-test\")\n```\n\nLANGUAGE: go\nCODE:\n```\nfs := afero.NewMemMapFs()\nafs := &afero.Afero{Fs: fs}\nf, err := afs.TempFile(\"\", \"ioutil-test\")\n```\n\n----------------------------------------\n\nTITLE: Importing Tree Visualization Library in Go\nDESCRIPTION: This snippet shows the import statement for the gotree library, which provides functionality for creating and visualizing tree-like structures in text format.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/modules.txt#2025-04-23_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\ngithub.com/disiqueira/gotree/v3\n```\n\n----------------------------------------\n\nTITLE: Opening a bbolt Database\nDESCRIPTION: Complete example of opening a bbolt database file with proper error handling and file permission settings. The database will be created if it doesn't exist.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.etcd.io/bbolt/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\tbolt \"go.etcd.io/bbolt\"\n)\n\nfunc main() {\n\t// Open the my.db data file in your current directory.\n\t// It will be created if it doesn't exist.\n\tdb, err := bolt.Open(\"my.db\", 0600, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Security in Swagger YAML\nDESCRIPTION: YAML configuration for defining security and security definitions in a Swagger file. It demonstrates how to set up API key authentication using a Cookie header.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/go-swagger/go-swagger/generator/templates/contrib/stratoscale/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityDefinitions:\n  token:\n    type: apiKey\n    in: header\n    name: Cookie\n\nsecurity:\n  - token: []\n\npaths:\n  /pets:\n    post:\n      [...]\n      security:\n        - token: [admin]\n```\n\n----------------------------------------\n\nTITLE: Setting Up HttpFs for Serving Files\nDESCRIPTION: Demonstrates how to use Afero's HttpFs to create an HTTP file server from any Afero filesystem. This allows serving files over HTTP from any backend Afero supports.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/afero/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nhttpFs := afero.NewHttpFs(<ExistingFS>)\nfileserver := http.FileServer(httpFs.Dir(<PATH>))\nhttp.Handle(\"/\", fileserver)\n```\n\n----------------------------------------\n\nTITLE: Installing CNI Plugins from Source\nDESCRIPTION: Commands to clone, build, and install CNI plugins from source. These plugins are required for Buildah when running commands in separate network namespaces.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/install.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/containernetworking/plugins\n( cd ./plugins; ./build_linux.sh )\nsudo mkdir -p /opt/cni/bin\nsudo install -v ./plugins/bin/* /opt/cni/bin\n```\n\n----------------------------------------\n\nTITLE: Registering Fatal Handlers in Logrus\nDESCRIPTION: Demonstrates how to register exit handlers that execute before Logrus performs os.Exit(1) on fatal log messages. This allows for graceful shutdown operations when a fatal error occurs.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nhandler := func() {\n  // gracefully shutdown something...\n}\nlogrus.RegisterExitHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from Viper in Go\nDESCRIPTION: Demonstrates how to use Viper's Get methods to retrieve configuration values of different types. It also shows how to check if a key exists using the IsSet method.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nviper.GetString(\"logfile\") // case-insensitive Setting & Getting\nif viper.GetBool(\"verbose\") {\n\tfmt.Println(\"verbose enabled\")\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying OS for Podman Image Pull in Quadlet\nDESCRIPTION: Overrides the OS of the image to be pulled, defaulting to the host's OS if not specified. This is equivalent to the '--os' option in Podman.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/podman-systemd.unit.5.md#2025-04-23_snippet_48\n\nLANGUAGE: ini\nCODE:\n```\nOS=\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Binding Example in Viper\nDESCRIPTION: Demonstrates how to set an environment variable prefix, bind a key to an environment variable, and retrieve the value in a Go application using Viper.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nSetEnvPrefix(\"spf\") // will be uppercased automatically\nBindEnv(\"id\")\n\nos.Setenv(\"SPF_ID\", \"13\") // typically done outside of the app\n\nid := Get(\"id\") // 13\n```\n\n----------------------------------------\n\nTITLE: Validating Struct Fields with Type Tags in Go\nDESCRIPTION: Demonstrates how to use the 'type' tag for struct field validation using ValidateStruct function.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype User\tstruct {\n  Name string      `valid:\"type(string)\"`\n  Age  int         `valid:\"type(int)\"`\n  Meta interface{} `valid:\"type(string)\"`\n}\nresult, err := govalidator.ValidateStruct(User{\"Bob\", 20, \"meta\"})\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Config File in Viper\nDESCRIPTION: Shows how to specifically handle the case where no configuration file is found when using Viper's ReadInConfig function.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := viper.ReadInConfig(); err != nil {\n\tif _, ok := err.(viper.ConfigFileNotFoundError); ok {\n\t\t// Config file not found; ignore error if desired\n\t} else {\n\t\t// Config file was found but another error was produced\n\t}\n}\n\n// Config file found and successfully parsed\n```\n\n----------------------------------------\n\nTITLE: Reporting Security Vulnerability Email Contact for Podman\nDESCRIPTION: Email address for privately reporting security vulnerabilities in Podman to the maintainers through the CNCF distribution security list.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/distribution/reference/SECURITY.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncncf-distribution-security@lists.cncf.io\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Flag Name Normalization\nDESCRIPTION: This example demonstrates how to set a custom flag name normalization function to handle different flag name formats consistently.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Converting Struct to String in Go\nDESCRIPTION: Shows how to use the ToString function to convert a struct to a string representation.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tFirstName string\n\tLastName string\n}\n\nstr := govalidator.ToString(&User{\"John\", \"Juan\"})\nprintln(str)\n```\n\n----------------------------------------\n\nTITLE: Opening a Web Page with Webbrowser in Go\nDESCRIPTION: This Go code snippet demonstrates how to use the webbrowser package to open a web page in the default browser. It imports the package and calls the Open function with a URL.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/toqueteos/webbrowser/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/toqueteos/webbrowser\"\n\nfunc main() {\n    webbrowser.Open(\"http://golang.org\")\n}\n```\n\n----------------------------------------\n\nTITLE: Block I/O Entry Message Definition\nDESCRIPTION: Protobuf message type definition for individual block I/O entries containing operation type, device information, and metric value.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-23_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"BlkIOEntry\"\n    field {\n      name: \"op\"\n      number: 1\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"op\"\n    }\n    field {\n      name: \"device\"\n      number: 2\n      label: LABEL_OPTIONAL\n      type: TYPE_STRING\n      json_name: \"device\"\n    }\n    field {\n      name: \"major\"\n      number: 3\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"major\"\n    }\n    field {\n      name: \"minor\"\n      number: 4\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"minor\"\n    }\n    field {\n      name: \"value\"\n      number: 5\n      label: LABEL_OPTIONAL\n      type: TYPE_UINT64\n      json_name: \"value\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring TextFormatter in Go with Logrus\nDESCRIPTION: Shows how to configure the TextFormatter in Logrus to disable colors and enable full timestamps, ensuring consistent output even when a TTY is attached.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/sirupsen/logrus/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlog.SetFormatter(&log.TextFormatter{\n\tDisableColors: true,\n\tFullTimestamp: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling New Privileges for Podman Container Processes\nDESCRIPTION: This option prevents container processes from gaining additional privileges through the execve(2) system call, enhancing security by limiting privilege escalation.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/security-opt.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt no-new-privileges\n```\n\n----------------------------------------\n\nTITLE: Signed-off-by Commit Line - Shell\nDESCRIPTION: This snippet demonstrates the required sign-off line to be appended to every Git commit message in order to comply with the Developer Certificate of Origin. By including this line using your real name and email, contributors formally certify the origin and licensing of their code. Prerequisite: Contributor must have satisfied the DCO terms. Input: Author name and email. Output: A signed-off Git commit message line. Limitation: Only valid when the contributor’s name and email are genuine; pseudonyms are not permitted.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/opencontainers/cgroups/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n    Signed-off-by: Joe Smith <joe@gmail.com>\n```\n\n----------------------------------------\n\nTITLE: Generating Private Key Without Password using certtool\nDESCRIPTION: Creates an RSA private key file without password protection using the certtool utility. The --null-password flag ensures no password is set, and the output is saved to domain.key.\nSOURCE: https://github.com/containers/podman/blob/main/test/certs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncerttool --rsa --generate-privkey --null-password --outfile=domain.key\n```\n\n----------------------------------------\n\nTITLE: RHEL7/CentOS7 Init Container Error\nDESCRIPTION: Error when running RHEL7/CentOS7 init containers with cgroup v2\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n# podman run --name test -d registry.access.redhat.com/rhel7-init:latest && sleep 10 && podman exec test systemctl status\nc8567461948439bce72fad3076a91ececfb7b14d469bfa5fbc32c6403185beff\nFailed to get D-Bus connection: Operation not permitted\nError: non zero exit code: 1: OCI runtime error\n```\n\n----------------------------------------\n\nTITLE: Mapping Slice Elements in Go\nDESCRIPTION: Shows how to use the Map function to transform elements of a slice using a custom function.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.ResultIterator = func(value interface{}, index int) interface{} {\n\treturn value.(int) * 3\n}\n_ = govalidator.Map(data, fn) // result = []interface{}{1, 6, 9, 12, 15}\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite with Verbose Output\nDESCRIPTION: Command to run the test suite with increased verbosity, showing detailed test execution information and results.\nSOURCE: https://github.com/containers/podman/blob/main/test/python/docker/compat/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# python3 -m unittest -v discover -s test/python/docker\n```\n\n----------------------------------------\n\nTITLE: RDMA Statistics Message Definition\nDESCRIPTION: Protobuf message type definition for RDMA (Remote Direct Memory Access) statistics including current and limit values.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containerd/cgroups/v3/cgroup1/stats/metrics.pb.txt#2025-04-23_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage_type {\n    name: \"RdmaStat\"\n    field {\n      name: \"current\"\n      number: 1\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.RdmaEntry\"\n      json_name: \"current\"\n    }\n    field {\n      name: \"limit\"\n      number: 2\n      label: LABEL_REPEATED\n      type: TYPE_MESSAGE\n      type_name: \".io.containerd.cgroups.v1.RdmaEntry\"\n      json_name: \"limit\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Structure in Go\nDESCRIPTION: Definition of a basic config struct pattern for holding configuration options. The struct should be unexported unless external configuration building is expected.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validator Type in GoValidator\nDESCRIPTION: Demonstrates the new thread-safe way to add custom validator types to prevent data races.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/asaskevich/govalidator/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// before\ngovalidator.CustomTypeTagMap[\"customByteArrayValidator\"] = func(i interface{}, o interface{}) bool {\n  // ...\n}\n\n// after\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, o interface{}) bool {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flag Value from FlagSet\nDESCRIPTION: This snippet shows how to retrieve the value of a flag from a FlagSet using pflag's helper functions like GetInt().\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/pflag/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ni, err := flagset.GetInt(\"flagname\")\n```\n\n----------------------------------------\n\nTITLE: Running Tests for OpenCensus Go\nDESCRIPTION: Commands to install required tools (only needed once) and run the test suite for the OpenCensus Go project.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make install-tools  # Only first time.\n$ make\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Badge\nDESCRIPTION: A markdown header with package name and PkgGoDev documentation badge that links to the OpenTelemetry trace embedded package documentation.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/trace/embedded/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Trace Embedded\n\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/embedded)\n```\n\n----------------------------------------\n\nTITLE: Checking Version Constraints in Go\nDESCRIPTION: Shows how to create and use version constraints to check if a version satisfies specific requirements.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/hashicorp/go-version/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nv1, err := version.NewVersion(\"1.2\")\n\n// Constraints example.\nconstraints, err := version.NewConstraint(\">= 1.0, < 1.4\")\nif constraints.Check(v1) {\n\tfmt.Printf(\"%s satisfies constraints %s\", v1, constraints)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up OTLP Environment Variables\nDESCRIPTION: Configuration of OTLP exporters using environment variables for security settings\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: Environment Variables\nCODE:\n```\nOTEL_EXPORTER_OTLP_INSECURE\nOTEL_EXPORTER_OTLP_TRACES_INSECURE\nOTEL_EXPORTER_OTLP_METRICS_INSECURE\nOTEL_EXPORTER_OTLP_CLIENT_KEY\nOTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY\nOTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY\nOTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE\nOTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE\nOTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE\n```\n\n----------------------------------------\n\nTITLE: Configuring Force Compression in Podman Push Commands\nDESCRIPTION: Defines the --force-compression option for Podman manifest push and push commands. When set, it forces the use of the specified compression algorithm, even if the destination already contains a differently-compressed variant. By default, it's true if --compression-format is explicitly specified, false otherwise.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/force-compression.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n####> This option file is used in:\n####>   podman manifest push, push\n####> If file is edited, make sure the changes\n####> are applicable to all of those.\n#### **--force-compression**\n\nIf set, push uses the specified compression algorithm even if the destination contains a differently-compressed variant already.\nDefaults to `true` if `--compression-format` is explicitly specified on the command-line, `false` otherwise.\n```\n\n----------------------------------------\n\nTITLE: Compressing a File using the gxz Tool\nDESCRIPTION: This shell command demonstrates how to use the installed `gxz` tool to compress a file named 'bigfile'. Upon successful execution, it replaces 'bigfile' with a compressed version named 'bigfile.xz'.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/ulikunitz/xz/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gxz bigfile\n```\n\n----------------------------------------\n\nTITLE: Setting Up User Mappings with usermod\nDESCRIPTION: Commands to configure UID/GID mappings using usermod utility\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n# usermod --add-subuids 200000-201000 --add-subgids 200000-201000 johndoe\n# grep johndoe /etc/subuid /etc/subgid\n/etc/subuid:johndoe:200000:1001\n/etc/subgid:johndoe:200000:1001\n```\n\n----------------------------------------\n\nTITLE: Binding Flag Sets with Viper in Go\nDESCRIPTION: Demonstrates how to bind an entire set of pflags to Viper for unified configuration access.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npflag.Int(\"flagname\", 1234, \"help message for flagname\")\n\npflag.Parse()\nviper.BindPFlags(pflag.CommandLine)\n\ni := viper.GetInt(\"flagname\") // retrieve values from viper instead of pflag\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Based Options in Go\nDESCRIPTION: Implementation of options for custom declared types with struct-based approach.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n```\n\n----------------------------------------\n\nTITLE: Podman Remove Container Example\nDESCRIPTION: Example command showing how a container can be removed, which may affect log following behavior\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/follow.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npodman run --rm ...\n```\n\n----------------------------------------\n\nTITLE: Configuring UTS Namespace for Podman Build Commands\nDESCRIPTION: Sets the UTS namespace configuration for RUN instructions. Options include creating a new namespace, reusing the host namespace, or specifying an existing namespace path.\nSOURCE: https://github.com/containers/podman/blob/main/docs/source/markdown/options/uts.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#### **--uts**=*how*\n```\n\n----------------------------------------\n\nTITLE: Generating a Single KSUID via CLI\nDESCRIPTION: This shell command executes the `ksuid` command-line tool without any arguments. By default, it generates a single new KSUID and prints its string representation to standard output.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/segmentio/ksuid/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ksuid\n0ujsswThIGTUYm2K8FjOOfXtY1K\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linters\nDESCRIPTION: Commands to run the test suite and linting checks for the AutoMaxProcs package.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.uber.org/automaxprocs/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake test\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmarks Command\nDESCRIPTION: Command to execute benchmarks with 30 second duration for name mangling utilities\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/swag/BENCHMARK.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -bench XXX -run XXX -benchtime 30s\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Permission Denied Error on noexec Mount in Podman Console\nDESCRIPTION: This command attempts to run a simple container (`centos:7`) using rootless Podman. The 'permission denied' error indicates that the underlying storage location for the container (often within the user's home directory) is mounted with the `noexec` option, preventing the execution of binaries from that filesystem.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ podman run centos:7\nstandard_init_linux.go:203: exec user process caused \"permission denied\"\n```\n\n----------------------------------------\n\nTITLE: Defining Ginkgo Helper Functions (Old Method) in Go\nDESCRIPTION: Demonstrates the previous pattern for creating helper functions in Ginkgo tests using `WithOffset(1)` to adjust the reported code location for assertions made within the helper. This method requires manual offset management, which can be cumbersome, especially in nested helper scenarios.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/onsi/ginkgo/v2/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc helper(model Model) {\n    Expect(model).WithOffset(1).To(BeValid())\n    Expect(model.SerialNumber).WithOffset(1).To(MatchRegexp(/[a-f0-9]*/))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing CamelCase Go Package\nDESCRIPTION: Command to install the CamelCase package via Go's package manager.\nSOURCE: https://github.com/containers/podman/blob/main/pkg/util/camelcase/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/fatih/camelcase\n```\n\n----------------------------------------\n\nTITLE: Using OpenTelemetry Bridge Package in Go\nDESCRIPTION: Example of a new function added to install the OpenCensus trace bridge in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/bridge/opencensus\"\n\nopencensus.InstallTraceBridge()\n```\n\n----------------------------------------\n\nTITLE: Installing the nxadm/tail Library using Go Get\nDESCRIPTION: This shell command uses the Go toolchain's `go get` utility to download and install the `nxadm/tail` library from its GitHub repository. The `...` wildcard ensures that the main package and any subpackages within the repository are installed, making the library and its components available for use in Go projects. Requires the Go toolchain to be installed.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/nxadm/tail/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n    go get github.com/nxadm/tail/...\n```\n\n----------------------------------------\n\nTITLE: Importing go-toml v2 in Go\nDESCRIPTION: Shows how to import the go-toml v2 library in a Go project.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/pelletier/go-toml/v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/pelletier/go-toml/v2\"\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregation Types\nDESCRIPTION: Creating different types of aggregations for OpenCensus views including distribution, count and sum.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opencensus.io/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndistAgg := view.Distribution(1<<32, 2<<32, 3<<32)\ncountAgg := view.Count()\nsumAgg := view.Sum()\n```\n\n----------------------------------------\n\nTITLE: MPL 2.0 'Incompatible With Secondary Licenses' Notice (Plaintext)\nDESCRIPTION: Provides the specific notice text required by the Mozilla Public License v. 2.0 (Section 10.4, Exhibit B) when distributing source code designated as 'Incompatible With Secondary Licenses'. This notice clarifies the specific distribution terms applicable under the MPL 2.0 for such code.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/letsencrypt/boulder/LICENSE.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n```\n\n----------------------------------------\n\nTITLE: Starting an Interactive Shell in Systemd Login Session\nDESCRIPTION: Use machinectl to start an interactive shell in a systemd login session before running Podman commands. This is an alternative method to resolve login session issues.\nSOURCE: https://github.com/containers/podman/blob/main/troubleshooting.md#2025-04-23_snippet_48\n\nLANGUAGE: console\nCODE:\n```\n$ sudo -i\n# machinectl shell username@\nConnected to the local host. Press ^] three times within 1s to exit session.\n$ podman run --rm docker.io/library/alpine echo hello\n```\n\n----------------------------------------\n\nTITLE: Basic FSNotify Test Script Example\nDESCRIPTION: Example showing how to create a basic test case that watches a directory and creates a file, demonstrating the expected output format.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Create a new empty file with some data.\nwatch /\necho data >/file\n\nOutput:\n    create  /file\n    write   /file\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog for go-jose v4.0.1\nDESCRIPTION: Details a security fix in version 4.0.1 to prevent potential DoS attacks through compressed data in JWEs.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-jose/go-jose/v4/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# v4.0.1\n\n## Fixed\n\n - An attacker could send a JWE containing compressed data that used large\n   amounts of memory and CPU when decompressed by `Decrypt` or `DecryptMulti`.\n   Those functions now return an error if the decompressed data would exceed\n   250kB or 10x the compressed size (whichever is larger). Thanks to\n   Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj)\n   for reporting.\n```\n\n----------------------------------------\n\nTITLE: Buildah Version Headers and Changes\nDESCRIPTION: Markdown formatted changelog entries detailing version releases and associated changes including features, fixes, and dependency updates.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## v1.28.0 (2022-09-30)\n\n    Update vendor containers/(common,image)\n    [CI:DOCS] Add quay-description update reminder\n    vendor: bump c/common to v0.49.2-0.20220929111928-2d1b45ae2423\n    build(deps): bump github.com/opencontainers/selinux\n    Vendor in latest containers/storage\n    Changing shell list operators from `;` to `&&`\n    Fix buildahimage container.conf permissions regression\n    Set sysctls from containers.conf\n    refactor: stop using Normalize directly from containerd package\n    config,builder: process variant while populating image spec\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration from Key/Value Store with Crypt\nDESCRIPTION: Demonstrates how to retrieve configuration values from a key/value store using the crypt command-line tool.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ crypt get -plaintext /config/hugo.json\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Go Package Not Found Error with Viper/HCL\nDESCRIPTION: Displays a typical error message indicating that the Go compiler cannot locate a required package, specifically 'github.com/hashicorp/hcl/tree/hcl1'. This often occurs when the project setup uses GOPATH mode while Viper relies on Go Modules for dependency management.\nSOURCE: https://github.com/containers/podman/blob/main/test/tools/vendor/github.com/spf13/viper/TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncannot find package \"github.com/hashicorp/hcl/tree/hcl1\" in any of:\n/usr/local/Cellar/go/1.15.7_1/libexec/src/github.com/hashicorp/hcl/tree/hcl1 (from $GOROOT)\n/Users/user/go/src/github.com/hashicorp/hcl/tree/hcl1 (from $GOPATH)\n```\n\n----------------------------------------\n\nTITLE: Listing Podman Binary in bin Directory\nDESCRIPTION: This command lists the contents of the bin directory to verify the presence of the built Podman binary.\nSOURCE: https://github.com/containers/podman/blob/main/build_osx.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -l bin/\n```\n\n----------------------------------------\n\nTITLE: Format Types Example\nDESCRIPTION: List of supported format types in strfmt package including base formats, swagger extensions and custom formats. Each type supports marshaling and validation capabilities.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/strfmt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Base64\n- CreditCard\n- Date\n- DateTime\n- Duration\n- Email\n- HexColor\n- Hostname\n- IPv4\n- IPv6\n- CIDR\n- ISBN\n- ISBN10\n- ISBN13\n- MAC\n- ObjectId\n- Password\n- RGBColor\n- SSN\n- URI\n- UUID\n- UUID3\n- UUID4\n- UUID5\n- ULID\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice text for applying Apache License 2.0 to software projects. The notice should be included at the top of source files with appropriate comment syntax and includes copyright declaration, license terms, and distribution conditions.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/digitalocean/go-qemu/LICENSE.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Cloning Podman Repository\nDESCRIPTION: Instructions for forking and cloning the Podman repository to start contributing to the project.\nSOURCE: https://github.com/containers/podman/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ git clone git@github.com:<you>/podman\n$ cd ./podman/\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Podman Code of Conduct\nDESCRIPTION: A markdown formatted document that defines the code of conduct, including sections for pledge, standards, responsibilities, scope, enforcement, and attribution.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/go-openapi/strfmt/CODE_OF_CONDUCT.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at ivan+abuse@flanders.co.nz. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Kubernetes Code of Conduct\nDESCRIPTION: A markdown link that redirects users to the official Kubernetes Community Code of Conduct document.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/sigs.k8s.io/yaml/code-of-conduct.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Kubernetes Community Code of Conduct\\n\\nPlease refer to our [Kubernetes Community Code of Conduct](https://git.k8s.io/community/code-of-conduct.md)\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge for Metric Embedded Package Documentation\nDESCRIPTION: A markdown badge that links to the package documentation for go.opentelemetry.io/otel/metric/embedded on pkg.go.dev.\nSOURCE: https://github.com/containers/podman/blob/main/vendor/go.opentelemetry.io/otel/metric/embedded/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/embedded)\n```\n\n----------------------------------------\n\nTITLE: Makefile Cross-Compilation Configuration\nDESCRIPTION: Removes Windows 386 target from cross-compilation settings in the Makefile\nSOURCE: https://github.com/containers/podman/blob/main/vendor/github.com/containers/buildah/changelog.txt#2025-04-23_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nMakefile: cross: remove windows.386 target\n```"
  }
]