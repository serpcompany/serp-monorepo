[
  {
    "owner": "ibm",
    "repo": "pysigma-backend-qradar-aql",
    "content": "TITLE: Converting Sigma Rules to AQL using pySigma in Python\nDESCRIPTION: Python code demonstrating how to convert a Sigma rule to AQL using the QRadar AQL backend and pipeline in pySigma.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sigma.collection import SigmaCollection\nfrom sigma.backends.QRadarAQL import QRadarAQLBackend\nfrom sigma.pipelines.QRadarAQL import QRadarAQL_fields_pipeline, QRadarAQL_payload_pipeline\n\npipeline = QRadarAQL_fields_pipeline  # or QRadarAQL_payload_pipeline\nrule = SigmaCollection.from_yaml(\"\"\"\n    logsource:\n        product: windows\n        category: create_remote_thread\n    detection:\n        selection:\n            TargetImage|endswith: '\\KeePass.exe'\n        condition: selection\n\"\"\")\nprint(QRadarAQLBackend(pipeline()).convert(rule)[0])\n```\n\n----------------------------------------\n\nTITLE: Converting Sigma Rules to AQL with pySigma in Python\nDESCRIPTION: Python code example showing how to programmatically convert a Sigma rule to QRadar AQL using the pySigma library and the QRadar backend with a specific pipeline.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/readme_template.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sigma.collection import SigmaCollection\nfrom sigma.backends.QRadarAQL import QRadarAQLBackend\nfrom sigma.pipelines.QRadarAQL import QRadarAQL_fields_pipeline, QRadarAQL_payload_pipeline\n\npipeline = QRadarAQL_fields_pipeline  # or QRadarAQL_payload_pipeline\nrule = SigmaCollection.from_yaml(\"\"\"\n    logsource:\n        product: windows\n        category: create_remote_thread\n    detection:\n        selection:\n            TargetImage|endswith: '\\KeePass.exe'\n        condition: selection\n\"\"\")\nprint(QRadarAQLBackend(pipeline()).convert(rule)[0])\n```\n\n----------------------------------------\n\nTITLE: Converting Sigma Rules to AQL using Sigma CLI\nDESCRIPTION: Command to convert Sigma rules to AQL using the Sigma CLI with the QRadar AQL backend and specified pipeline.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsigma convert -t ibm-qradar-aql -p qradar-aql-payload rules/windows/create_remote_thread/create_remote_thread_win_keepass.yml -o output_file.txt\n```\n\n----------------------------------------\n\nTITLE: Example of Converting Sigma Rules to AQL with Sigma CLI\nDESCRIPTION: Example command demonstrating how to convert a specific Windows Sigma rule to QRadar AQL format using the payload pipeline.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/readme_template.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsigma convert -t ibm-qradar-aql -p qradar-aql-payload rules/windows/create_remote_thread/create_remote_thread_win_keepass.yml -o output_file.txt\n```\n\n----------------------------------------\n\nTITLE: Example Output of Sigma to AQL Conversion\nDESCRIPTION: Example output from converting a Sigma rule to QRadar AQL. The result is a query that searches for events matching specific criteria.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/readme_template.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n['SELECT * FROM events WHERE devicetype=12 AND LOWER(\"Target Process Path\") LIKE \\'%\\\\keepass.exe\\'']\n```\n\n----------------------------------------\n\nTITLE: Example Output of pySigma Conversion to AQL\nDESCRIPTION: Example output from the Python pySigma conversion of a Sigma rule to QRadar AQL, showing the resulting query.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/readme_template.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nSELECT * FROM events WHERE devicetype=12 AND LOWER(\"Target Process Path\") LIKE '%\\keepass.exe'\n```\n\n----------------------------------------\n\nTITLE: Converting Sigma Rules to AQL with Sigma CLI\nDESCRIPTION: Command to convert Sigma rules to QRadar AQL queries using the Sigma command-line interface, specifying the backend and pipeline.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/readme_template.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsigma convert -t ibm-qradar-aql -p <qradar-aql-fields | qradar-aql-payload> <rule path> -o <output file name>\n```\n\n----------------------------------------\n\nTITLE: Field Mapping Table in Markdown\nDESCRIPTION: A table that maps various Sigma fields to their corresponding QRadar AQL fields. This includes network-related fields, URL components, and command-related fields.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| DestinationPort          | destinationport                                                                       |\n| destination.port         | destinationport                                                                       |\n| dst_ip                   | destinationip                                                                         |\n| dst_port                 | destinationport                                                                       |\n| SourcePort               | sourceport                                                                            |\n| src_ip                   | sourceip                                                                              |\n| c-uri                    | URL                                                                                   |\n| c-uri-extension          | URL                                                                                   |\n| c-uri-query              | URL                                                                                   |\n| cs-uri                   | URL                                                                                   |\n| cs-uri-query             | URL                                                                                   |\n| cs-uri-stem              | URL                                                                                   |\n| properties.message       | Message                                                                               |\n| ScriptBlockText          | Message                                                                               |\n| uri                      | URL                                                                                   |\n| a0                       | Command                                                                               |\n| a1                       | Command                                                                               |\n| a2                       | Command                                                                               |\n| a3                       | Command                                                                               |\n| a4                       | Command                                                                               |\n| a5                       | Command                                                                               |\n```\n\n----------------------------------------\n\nTITLE: Log Source Mapping Table in Markdown\nDESCRIPTION: A table that maps Sigma services to QRadar AQL device types and their corresponding device type IDs. This mapping is crucial for translating Sigma rules to QRadar AQL queries.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| <u>Sigma service</u>   | <u>QRadar AQL device type name</u>                     | <u>QRadar AQL device type id</u>   |\n|:-----------------------|:-------------------------------------------------------|:-----------------------------------|\n| aaa                    | BridgewaterAAA                                         | 143                                |\n| apache                 | Apache                                                 | 10                                 |\n| auditd                 | LinuxServer                                            | 11                                 |\n| auth                   | WindowsAuthServer                                      | 12                                 |\n| clamav                 | LinuxServer                                            | 11                                 |\n| cloudtrail             | AmazonAWSCloudTrail                                    | 347                                |\n| cron                   | LinuxServer                                            | 11                                 |\n| exchange               | MicrosoftExchange                                      | 99                                 |\n| gcp.audit              | GoogleCloudAudit                                       | 449                                |\n| iis                    | IIS                                                    | 13                                 |\n| ldp                    | NetScreenIDP                                           | 17                                 |\n| lsa-server             | ISA                                                    | 191                                |\n| microsoft365portal     | Office365, Office365MessageTrace, Microsoft365Defender | 397, 452, 515                      |\n| okta                   | OktaIdentityManagement                                 | 382                                |\n| powershell             | WindowsAuthServer                                      | 12                                 |\n| rdp                    | LinuxServer, WindowsAuthServer                         | 11, 12                             |\n| smbclient-security     | LinuxServer, WindowsAuthServer                         | 11, 12                             |\n| sshd                   | LinuxServer                                            | 11                                 |\n| sudo                   | LinuxServer                                            | 11                                 |\n| syslog                 | LinuxServer, WindowsAuthServer                         | 11, 12                             |\n| sysmon                 | WindowsAuthServer                                      | 12                                 |\n| taskscheduler          | LinuxServer, WindowsAuthServer                         | 11, 12                             |\n| threat_detection       | SAPEnterpriseThreatDetection                           | 424                                |\n| windefend              | MicrosoftWindowsDefenderATP                            | 433                                |\n| wmi                    | WindowsAuthServer                                      | 12                                 |\n```\n\n----------------------------------------\n\nTITLE: Sigma to QRadar Field Mapping Structure\nDESCRIPTION: Shows the structure of field mapping files that convert Sigma fields to QRadar AQL fields. Includes mappings for exact matches, host fields, unstructured fields and partial field matches.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfield_mapping\nhost_field_mapping\nunstructured_field_mapping\nunstructured_part_field_mapping\n```\n\n----------------------------------------\n\nTITLE: QRadar Log Source Mapping References\nDESCRIPTION: References to mapping files that handle conversion between Sigma log sources and QRadar device types. Includes mappings for log sources, services and products.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\naql_log_source_mapping\naql_service_mapping\naql_product_mapping\n```\n\n----------------------------------------\n\nTITLE: Installing PySigma QRadar AQL Backend in Python\nDESCRIPTION: Python code to install the PySigma QRadar AQL backend using the SigmaPluginDirectory.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sigma.plugins import SigmaPluginDirectory\n\nplugins = SigmaPluginDirectory.default_plugin_directory()\nplugins.get_plugin_by_id(\"ibm-qradar-aql\").install()\n```\n\n----------------------------------------\n\nTITLE: Installing PySigma QRadar AQL Backend via pySigma\nDESCRIPTION: Python code to install the QRadar AQL backend plugin through the pySigma plugin directory.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/readme_template.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sigma.plugins import SigmaPluginDirectory\n\nplugins = SigmaPluginDirectory.default_plugin_directory()\nplugins.get_plugin_by_id(\"ibm-qradar-aql\").install()\n```\n\n----------------------------------------\n\nTITLE: Installing PySigma QRadar AQL Backend as Sigma CLI Plugin\nDESCRIPTION: Command to install the PySigma QRadar AQL backend as a plugin for Sigma CLI.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsigma plugin install ibm-qradar-aql\n```\n\n----------------------------------------\n\nTITLE: Installing PySigma QRadar AQL Backend via Sigma CLI\nDESCRIPTION: Two-step process to install the QRadar AQL backend as a Sigma CLI plugin. First install sigma-cli, then install the plugin.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/readme_template.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsigma plugin install ibm-qradar-aql\n```\n\n----------------------------------------\n\nTITLE: Installing PySigma QRadar AQL Backend via PyPI\nDESCRIPTION: Command to install the PySigma QRadar AQL backend using pip package manager.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ibm-qradar-aql\n```\n\n----------------------------------------\n\nTITLE: Installing PySigma QRadar AQL Backend via PyPI\nDESCRIPTION: Command to install the QRadar AQL backend package through pip package manager.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/readme_template.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ibm-qradar-aql\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodule for Development\nDESCRIPTION: Command to update the pySigma_QRadar_base submodule when developing the project.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodule for Development\nDESCRIPTION: Command to update the pySigma_QRadar_base submodule when developing or contributing to the project.\nSOURCE: https://github.com/ibm/pysigma-backend-qradar-aql/blob/main/readme_template.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\n```"
  }
]