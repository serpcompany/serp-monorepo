[
  {
    "owner": "chaijs",
    "repo": "chai-docs",
    "content": "TITLE: Using Expect Style in Chai.js\nDESCRIPTION: Shows the BDD-style expect interface for creating chainable assertions. Includes examples of string checking, equality testing, and property verification.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/styles.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {expect} from 'chai';\n\nconst foo = 'bar';\nconst beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\n\nexpect(foo).to.be.a('string');\nexpect(foo).to.equal('bar');\nexpect(foo).to.have.lengthOf(3);\nexpect(beverages).to.have.property('tea').with.lengthOf(3);\n```\n\n----------------------------------------\n\nTITLE: Using Boolean type assertions\nDESCRIPTION: Examples of using the boolean() assertion to verify that values are of Boolean type.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(true).to.be.boolean();\nexpect(false).to.be.boolean();\n```\n\n----------------------------------------\n\nTITLE: Initializing Chai HTTP Plugin in Node.js\nDESCRIPTION: Code snippet showing how to require and use the Chai HTTP plugin in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , chaiHttp = require('chai-http');\n\nchai.use(chaiHttp);\n```\n\n----------------------------------------\n\nTITLE: Composing a Basic Assertion in Chai Plugins\nDESCRIPTION: Shows how to create a basic assertion using the assert method, which evaluates a truth test and throws an appropriate error message if the test fails.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/plugins.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst arthur = new Assertion('Arthur Dent');\n\narthur.assert(\n    arthur._obj === 'Arthur Dent'\n  , \"expected #{this} to be 'Arthur Dent'\"\n  , \"expected #{this} to not be 'Arthur Dent'\"\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Chai Plugin in Tests\nDESCRIPTION: Demonstrates the pattern for importing a custom Chai plugin/helper and applying it with chai.use() in a test file.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/plugins.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as chai from 'chai';\nimport {chaiModel} from './helpers/model.js'\nimport {expect} from 'chai';\n\nchai.use(chaiModel);\n```\n\n----------------------------------------\n\nTITLE: Asserting DOM Attributes with Chai-DOM in JavaScript\nDESCRIPTION: Demonstrates how to use chai-dom to assert the presence and value of attributes on DOM elements. It shows both 'should' and 'expect' styles of assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_dom.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('header').should.have.attr('foo')\nexpect(document.querySelector('main article')).to.have.attribute('foo', 'bar')\nexpect(document.querySelector('main article')).to.have.attr('foo').match(/bar/)\n```\n\n----------------------------------------\n\nTITLE: Promise-Specific Assertions with chai-as-promised (JavaScript)\nDESCRIPTION: Shows various promise-specific assertions provided by chai-as-promised, including fulfilled, rejected, and become.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn promise.should.be.fulfilled;\nreturn promise.should.eventually.deep.equal(\"foo\");\nreturn promise.should.become(\"foo\"); // same as `.eventually.deep.equal`\nreturn promise.should.be.rejected;\nreturn promise.should.be.rejectedWith(Error); // other variants of Chai's `throw` assertion work too.\n```\n\n----------------------------------------\n\nTITLE: Validating Data Against JSON Schema with chai-json-schema-ajv\nDESCRIPTION: Example showing how to use chai-json-schema-ajv to validate objects against a JSON schema. It demonstrates both the expect and assert styles of assertions with positive and negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema_ajv.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai')\nchai.use(require('chai-json-schema-ajv'))\nconst expect = chai.expect\nconst assert = chai.assert\n\nconst apple = {\n  name: 'foo',\n  color: ['red', 'green', 'yellow'],\n  value: 10\n}\nconst car = {\n  name: 'bar',\n  speed: 1.1\n}\nconst schema = {\n  title: 'fruit schema v0.1',\n  type: 'object',\n  required: ['name', 'color', 'value'],\n  properties: {\n    name: {\n      type: 'string',\n      minLength: 3\n    },\n    color: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string'\n      }\n    },\n    value: {\n      type: 'integer',\n      minimum: 5\n    }\n  }\n}\n\nexpect(apple).to.be.jsonSchema(schema, 'custom flag')\nexpect(car).to.not.be.jsonSchema(schema, 'custom flag')\n\nassert.jsonSchema(apple, schema, 'custom flag')\nassert.notJsonSchema(car, schema, 'custom flag')\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Chai Iterator Assertions in JavaScript\nDESCRIPTION: Demonstrates various assertions that can be made using chai-iterator, including checking if an object is iterable and comparing iterable sequences.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[2, 3, 5].should.be.iterable;\n\n[2, 3, 5].should.iterate.over([2, 3, 5]);\n[2, 3, 5].should.iterate.from([2, 3]);\n[2, 3, 5].should.iterate.until([3, 5]);\n\n[2, 3, 5].should.iterate.for.lengthOf(3);\n[2, 3, 5].should.iterate.for.length.above(2);\n[2, 3, 5].should.iterate.for.length.below(4);\n[2, 3, 5].should.iterate.for.length.of.at.least(3);\n[2, 3, 5].should.iterate.for.length.of.at.most(3);\n[2, 3, 5].should.iterate.for.length.within(2, 4);\n\n[2, 3, 5].should.not.iterate.over([1, 2, 3]);\n[{n: 2}, {n: 3}].should.deep.iterate.from([{n: 2}]);\n```\n\n----------------------------------------\n\nTITLE: Using id assertion with jQuery elements\nDESCRIPTION: Shows how to assert that a jQuery element has a specific ID using the id assertion which checks the id attribute.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n$('.header').should.have.id('#main');\nexpect($('body')).to.have.id('foo');\n```\n\n----------------------------------------\n\nTITLE: Using mean assertion\nDESCRIPTION: Examples of using the mean assertion to check array means against various conditions\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-stats.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([ 1, 2, 3 ]).to.have.mean.equal(2);\nexpect([ 1, 2, 3 ]).to.have.mean.above(1.5);\nexpect([ 1, 2, 3 ]).to.have.mean.below(2.5);\n```\n\n----------------------------------------\n\nTITLE: Basic Sinon.JS Assertion Example\nDESCRIPTION: Shows the traditional Sinon.JS assertion syntax that the plugin aims to improve.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsinon.assert.calledWith(mySpy, \"foo\");\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Promises with Chai as Promised\nDESCRIPTION: Demonstrates how to test multiple promises simultaneously using Promise.all combined with Chai as Promised assertions. This approach passes individual promise assertion failures directly to the test framework.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"should all be well\", function () {\n    return Promise.all([\n        promiseA.should.become(\"happy\"),\n        promiseB.should.eventually.have.property(\"fun times\"),\n        promiseC.should.be.rejectedWith(TypeError, \"only joyful types are allowed\")\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Dirty Chai with Chai-as-Promised\nDESCRIPTION: Example showing the correct order for initializing chai-as-promised and dirty-chai plugins to ensure compatibility.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai__.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar chaiAsPromised = require(\"chai-as-promised\");\nvar dirtyChai = require(\"dirty-chai\");\n\n\nchai.use(chaiAsPromised);\nchai.use(dirtyChai);\n```\n\n----------------------------------------\n\nTITLE: Setting up Chai as Promised with Node.js\nDESCRIPTION: This snippet demonstrates how to install and configure Chai as Promised in a Node.js environment. It shows the required imports and how to set up different assertion styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar chaiAsPromised = require(\"chai-as-promised\");\n\nchai.use(chaiAsPromised);\n\n// Then either:\nvar expect = chai.expect;\n// or:\nvar assert = chai.assert;\n// or:\nchai.should();\n// according to your preference of assertion style\n```\n\n----------------------------------------\n\nTITLE: Exporting API Schema Coverage Report to JSON File\nDESCRIPTION: Configuration example showing how to export API definitions coverage report to a coverage.json file by setting the exportCoverage option to true.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/api_contract_validator.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuse(matchApiSchema({\n    apiDefinitionsPath,\n    exportCoverage: true\n}));\n```\n\n----------------------------------------\n\nTITLE: Complete API Examples for chai-shallowly\nDESCRIPTION: Comprehensive examples of all supported chai-shallowly assertions, comparing the standard Enzyme syntax with the chai-shallowly equivalent. Includes methods for class checking, text content, element matching, finding, filtering, state management, props validation, and event simulation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_shallowly.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// hasClass\nexpect(shallow(component).hasClass(\"class\")).to.be.true;\nexpect(component).to.shallowly.haveClass(\"class\");\n\n// text\nexpect(shallow(component).text()).to.equal(\"text\");\nexpect(component).to.shallowly.have.text().equal(\"text\");\n\n// is\nexpect(shallow(component).is(\"div\")).to.be.true;\nexpect(component).to.shallowly.match(\"div\");\n\n// type\nexpect(shallow(component).type(\"div\")).to.be.true;\nexpect(component).to.shallowly.have.type(\"div\");\n\n\n// find\nexpect(shallow(component).find(\".foo\")).to.have.length(2);\nexpect(component).to.shallowly.find(\".foo\").to.have.length(2);\n\n// filter\nexpect(shallow(component).find(\".foo\").filter(\".bar\")).to.have.length(1);\nexpect(component).to.shallowly.find(\".foo\").filter(\".bar\").to.have.length(1);\n\n// not\nexpect(shallow(component).find(\".foo\").not(\".bar\")).to.have.length(1);\nexpect(component).to.shallowly.find(\".foo\").without(\".bar\").to.have.length(1);\n\n// contains\nexpect(shallow(component).contains(\"div\")).to.be.true;\nexpect(component).to.shallowly.containJSX(\"div\");\n\n// state\nexpect(shallow(component).state(state)).to.eql({\"foo\": \"bar\"});\nexpect(component).to.shallowly.have.state(state).eql({\"foo\": \"bar\"});\n\n// props\nexpect(shallow(component).instance().props(propKey)).to.eql(propValue);\nexpect(component).to.shallowly.have.props(propKey).eql(propValue);\n\n// simulate\n/* all of this */\nvar shallowComponent = shallow(component);\nshallowComponent.simulate(\"click\");\nexpect(shallowComponent.state()).to.eql({\"state\":\"clicked\"});\n\n/* vs */\nexpect(component).to.shallowly.on(\"click\").have.state().eql({\"state\":\"clicked\"});\n\n// setState / setProps\nvar shallowComponent = shallow(component);\nshallowComponent.setState(state);\nexpect(shallowComponent.state()).to.equal(state);\n\nexpect(component).to.shallowly.withState(state).to.have.state().equal(state);\n```\n\n----------------------------------------\n\nTITLE: Multiple Promise Assertions using Promise.all\nDESCRIPTION: Technique for asserting on multiple promises in a single test by combining Chai as Promised assertions with Promise.all to maintain proper error reporting.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"should all be well\", function () {\n    return Promise.all([\n        promiseA.should.become(\"happy\"),\n        promiseB.should.eventually.have.property(\"fun times\"),\n        promiseC.should.be.rejectedWith(TypeError, \"only joyful types are allowed\")\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Exportable Helper Structure for Chai Plugins\nDESCRIPTION: Shows how to structure a Chai plugin as an exportable helper function that can be used across multiple test files or shared with the community.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function chaiModel(chai, utils) {\n  var Assertion = chai.Assertion;\n\n  // your helpers here\n};\n```\n\n----------------------------------------\n\nTITLE: Using chai-as-promised with Chai's assert Interface (JavaScript)\nDESCRIPTION: Demonstrates how to use chai-as-promised with Chai's assert interface, including promise-specific extensions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nassert.equal(2 + 2, 4, \"This had better be true\");\n\n// becomes\nreturn assert.eventually.equal(Promise.resolve(2 + 2), 4, \"This had better be true, eventually\");\n\nreturn assert.isFulfilled(promise, \"optional message\");\n\nreturn assert.becomes(promise, \"foo\", \"optional message\");\nreturn assert.doesNotBecome(promise, \"foo\", \"optional message\");\n\nreturn assert.isRejected(promise, \"optional message\");\nreturn assert.isRejected(promise, Error, \"optional message\");\nreturn assert.isRejected(promise, /error message matcher/, \"optional message\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Chai as Promised in Node.js\nDESCRIPTION: This snippet demonstrates how to install and set up Chai as Promised in a Node.js environment. It shows the required npm install command and the JavaScript code to require and configure Chai with the Chai as Promised plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar chaiAsPromised = require(\"chai-as-promised\");\n\nchai.use(chaiAsPromised);\n\n// Then either:\nvar expect = chai.expect;\n// or:\nvar assert = chai.assert;\n// or:\nchai.should();\n// according to your preference of assertion style\n```\n\n----------------------------------------\n\nTITLE: Retaining Cookies Between Requests\nDESCRIPTION: Example of retaining cookies between multiple HTTP requests using Chai HTTP's agent feature.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar agent = chai.request.agent(app)\nagent\n  .post('/session')\n  .send({ username: 'me', password: '123' })\n  .then(function (res) {\n    expect(res).to.have.cookie('sessionid');\n    return agent.get('/user/me')\n      .then(function (res) {\n         expect(res).to.have.status(200);\n      });\n  });\n```\n\n----------------------------------------\n\nTITLE: Using deep-equal-in-any-order with Chai expect\nDESCRIPTION: Example of how to use the deep-equal-in-any-order plugin with Chai's expect assertion style. It demonstrates various equality checks for arrays and nested objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/deep_equal_in_any_order.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst deepEqualInAnyOrder = require('deep-equal-in-any-order');\nconst chai = require('chai');\n\nchai.use(deepEqualInAnyOrder);\n\nconst { expect } = chai;\n\nexpect([1, 2]).to.deep.equalInAnyOrder([2, 1]);\nexpect([1, 2]).to.not.deep.equalInAnyOrder([2, 1, 3]);\nexpect({ foo: [1, 2], bar: [4, 89, 22] }).to.deep.equalInAnyOrder({ foo: [2, 1], bar: [4, 22, 89] });\nexpect({ foo: ['foo-1', 'foo-2', [1, 2], null ] }).to.deep.equalInAnyOrder({ foo: [null, [1, 2], 'foo-1', 'foo-2'] });\nexpect({ foo: [1, 2], bar: { baz: ['a', 'b', { lorem: [5, 6] }] } }).to.deep.equalInAnyOrder({ foo: [2, 1], bar: { baz: ['b', 'a', { lorem: [6, 5] }] } });\n```\n\n----------------------------------------\n\nTITLE: Browser Setup Using Script Tags for Chai Backbone\nDESCRIPTION: Shows how to include and set up chai-backbone in a browser environment using script tags. The plugin automatically integrates with Chai when loaded after it.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_backbone.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-backbone.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Overwriting 'above' Method Assertion in Chai for Model Age Comparison\nDESCRIPTION: This snippet demonstrates how to overwrite Chai's 'above' method to add custom behavior for comparing a model's age attribute. It includes type checking and custom error messages.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/helpers.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nAssertion.overwriteMethod('above', function (_super) {\n  return function assertAge (n) {\n    if (utils.flag(this, 'model.age')) {\n      const obj = this._obj;\n\n      // first we assert we are actually working with a model\n      new Assertion(obj).instanceof(Model);\n\n      // next, make sure we have an age\n      new Assertion(obj).to.have.deep.property('_attrs.age').a('number');\n\n      // now we compare\n      const age = obj.get('age');\n      this.assert(\n          age > n\n        , \"expected #{this} to have an age above #{exp} but got #{act}\"\n        , \"expected #{this} to not have an age above #{exp} but got #{act}\"\n        , n\n        , age\n      );\n    } else {\n      _super.apply(this, arguments);\n    }\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Fluent Promise Assertion with chai-as-promised (JavaScript)\nDESCRIPTION: Shows how to use chai-as-promised to write more expressive and concise assertions for promise fulfillment values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn doSomethingAsync().should.eventually.equal(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Asserting a Spy Was Called\nDESCRIPTION: Demonstrates how to assert that a spy function has been called using both expect and should styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called();\nspy.should.have.been.called();\n```\n\n----------------------------------------\n\nTITLE: Importing Chai in Browser via ESM\nDESCRIPTION: Example of importing Chai's expect function in a browser environment using ES modules through jsDelivr CDN. Shows basic assertion usage.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/installation.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { expect } from 'https://cdn.jsdelivr.net/npm/chai@5.1.1/+esm';\n\n  expect(1 + 1).to.equal(2);\n</script>\n```\n\n----------------------------------------\n\nTITLE: MongoDB ObjectId Comparison in JavaScript\nDESCRIPTION: Illustrates how ChaId works with MongoDB ObjectIds for ID comparisons in various scenarios.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chaid.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndoc.should.have.id(new ObjectId())\ndoc.should.have.same.id(otherDoc)\n(new ObjectId()).should.id(doc)\n```\n\n----------------------------------------\n\nTITLE: Creating and Testing a Fibonacci Generator in JavaScript\nDESCRIPTION: Example of creating and testing a generator function that produces the Fibonacci sequence, demonstrating how to use chai-iterator with generator objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* fibonacci() {\n  for (let [x, y] = [1, 1]; true; [x, y] = [y, x + y]) {\n    yield x;\n  }\n}\n\nfibonacci().should.iterate.from([1, 1, 2, 3, 5]);\n```\n\n----------------------------------------\n\nTITLE: Writing an API test with chai-openapi-response-validator\nDESCRIPTION: Example of writing a test using Mocha and Chai with the chai-openapi-response-validator plugin to validate an HTTP response against an OpenAPI specification.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_openapi_response_validator.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Set up Chai\nimport chai from 'chai';\nconst expect = chai.expect;\n\n// Import this plugin\nimport chaiResponseValidator from 'chai-openapi-response-validator';\n\n// Load an OpenAPI file (YAML or JSON) into this plugin\nchai.use(chaiResponseValidator('path/to/openapi.yml'));\n\n// Write your test (e.g. using Mocha)\ndescribe('GET /example/endpoint', () => {\n  it('should satisfy OpenAPI spec', async () => {\n    // Get an HTTP response from your server (e.g. using axios)\n    const res = await axios.get('http://localhost:3000/example/endpoint');\n\n    expect(res.status).to.equal(200);\n\n    // Assert that the HTTP response satisfies the OpenAPI spec\n    expect(res).to.satisfyApiSpec;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Iterator Sequence Mismatch with assert.doesNotIterateOver() in JavaScript\nDESCRIPTION: Shows how to use assert.doesNotIterateOver() to verify that a value does not iterate over a specific sequence. Tests arrays and strings.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nassert.doesNotIterateOver([2, 3, 5], [1, 2, 3]);\nassert.doesNotIterateOver('abcdefg', 'abc');\n```\n\n----------------------------------------\n\nTITLE: Using chai-jest-mocks assertions\nDESCRIPTION: Examples of using the new assertions provided by chai-jest-mocks, including checking if a mock was called, called with specific arguments, and returned successfully.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jest_mocks.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Expect a mock to be called\nexpect(mockFn).to.have.beenCalled();\n\n// Expect a mock to have been called a certain number of times\nexpect(mockFn).to.have.beenCalledTimes(4);\n\n// Expect a mock to have been called with specific arguments\nexpect(mockFn).to.have.beenCalledWith('hello', 'world');\n\n// Expect a mock to have been last called with specific arguments\nexpect(mockFn).to.have.beenLastCalledWith('hello', 'world');\n\n// Expect a mock to have been nth (in this case, second) called with specific arguments\nexpect(mockFn).to.have.beenNthCalledWith(2, 'hello', 'world');\n\n// Expect a mock to have returned succesfully (i.e, not throw)\nexpect(mockFn).to.have.returned();\n\n// Expect a mock to have returned succesfully a certain number of times\nexpect(mockFn).to.have.returnedTimes(3);\n```\n\n----------------------------------------\n\nTITLE: Using Should Style in Chai.js\nDESCRIPTION: Demonstrates the BDD-style should interface that extends Object.prototype for chainable assertions. Shows string checking, equality testing, and property verification.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/styles.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {should} from 'chai';\n\nshould(); //actually call the function\n\nconst foo = 'bar';\nconst beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\n\nfoo.should.be.a('string');\nfoo.should.equal('bar');\nfoo.should.have.lengthOf(3);\nbeverages.should.have.property('tea').with.lengthOf(3);\n```\n\n----------------------------------------\n\nTITLE: Chai HTTP GET Request Test Example\nDESCRIPTION: Complete example demonstrating how to use chai-http to test an HTTP GET request, including assertions for status code and response body.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/using-chai-with-esm-and-plugins.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as chai from 'chai';\nimport { request, default as chaiHttp } from 'chai-http';\n\nconst {expect} = chai;\n\nchai.use(chaiHttp);\n\ndescribe('GET /user', () => {\n  it('should return the user', done => {\n    request('http://example.com')\n      .get('/user')\n      .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        done();\n      });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Chai Spies in Node.js\nDESCRIPTION: Demonstrates how to require and set up the chai-spies plugin in a Node.js environment, including configuring the should and expect interfaces.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai')\n  , spies = require('chai-spies');\n\nchai.use(spies);\n\nconst should = chai.should()\n  , expect = chai.expect;\n```\n\n----------------------------------------\n\nTITLE: Testing if a Value is a Result Object\nDESCRIPTION: Using the 'result' property to verify that a value is an instance of the Result class from Kekka. Works with both Success and Failure result types.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kekka.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(Success('Some String')).to.be.a.result\nexpect(Failure(new Error('Failure...'))).to.be.a.result\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality of Immutable Collections (JavaScript)\nDESCRIPTION: Shows how to use .equal(), .strictEqual(), and .deepEqual() to assert equality between immutable collections. These methods assert based on the values of the collections, not their references.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = List.of(1, 2, 3);\nconst b = List.of(1, 2, 3);\nassert.equal(a, b);\n```\n\n----------------------------------------\n\nTITLE: Attaching Files to HTTP Request\nDESCRIPTION: Example of attaching a file to an HTTP POST request using chai-http. This demonstrates file upload testing capabilities.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Attach a file\nchai.request(app)\n  .post('/user/avatar')\n  .attach('imageField', fs.readFileSync('avatar.png'), 'avatar.png')\n```\n\n----------------------------------------\n\nTITLE: Using Assert Style in Chai.js\nDESCRIPTION: Demonstrates the classic assert-dot notation style for writing assertions in Chai.js. Shows basic type checking, equality testing, and length verification with optional error messages.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/styles.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {assert} from 'chai';\n\nconst foo = 'bar';\nconst beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\n\nassert.typeOf(foo, 'string'); // without optional message\nassert.typeOf(foo, 'string', 'foo is a string'); // with optional message\nassert.equal(foo, 'bar', 'foo equal `bar`');\nassert.lengthOf(foo, 3, 'foo`s value has a length of 3');\nassert.lengthOf(beverages.tea, 3, 'beverages has 3 types of tea');\n```\n\n----------------------------------------\n\nTITLE: Promise Testing with Chai as Promised using Return Pattern\nDESCRIPTION: Simplified promise testing using Chai as Promised's 'eventually' property, which allows for more expressive and concise test assertions by returning the promise.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn doSomethingAsync().should.eventually.equal(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Testing Iterator Start Sequence\nDESCRIPTION: Examples of asserting iteration beginning values using iteratesFrom and doesNotIterateFrom assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nassert.iteratesFrom([2, 3, 5], [2, 3, 5]);\nassert.iteratesFrom([2, 3, 5], [2, 3]);\nassert.iteratesFrom('abcdefg', 'abc');\nassert.iteratesFrom('abcdefg', '');\nassert.doesNotIterateFrom([2, 3, 5], [3, 5]);\nassert.doesNotIterateFrom('abcdefg', 'cdef');\n```\n\n----------------------------------------\n\nTITLE: Including Chai HTTP Plugin in Browser\nDESCRIPTION: HTML snippet demonstrating how to include and use the Chai HTTP plugin in a web browser environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-http.js\"></script>\n<script>\n  chai.use(chaiHttp);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting up Chai HTTP Plugin in Node.js\nDESCRIPTION: How to install and use the chai-http plugin with Node.js. This enables HTTP integration testing capabilities in the Chai assertion library.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiHttp = require('chai-http');\n\nchai.use(chaiHttp);\n```\n\n----------------------------------------\n\nTITLE: Using Sinon-Chai with Chai's expect interface\nDESCRIPTION: A complete example showing how to set up and use Sinon-Chai with Chai's expect interface in a test suite using a hello function that calls a callback.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_es.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nvar expect = chai.expect;\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        expect(cb).to.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Function type assertions\nDESCRIPTION: Example of using the function() assertion to verify that a value is of Function type.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(() => true).to.be.function();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Spy Functions\nDESCRIPTION: Shows how to create spy functions, either by wrapping an existing function or creating an empty spy function.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction original () {\n  // do something cool\n}\n\nconst spy = chai.spy(original);\n\n// then use in place of original\nee.on('some event', spy);\n\n// or use without original\nconst spyAgain = chai.spy();\nee.on('some other event', spyAgain);\n```\n\n----------------------------------------\n\nTITLE: Chai as Promised Assertion in JavaScript\nDESCRIPTION: Demonstrates how to use Chai as Promised to write more expressive assertions for promises.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn doSomethingAsync().should.eventually.equal(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Testing RxJS Observables with TestScheduler\nDESCRIPTION: Demonstrates basic setup and usage of chai-rxjs for testing Observable streams. Uses TestScheduler to create and test a hot observable with map transformation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rxjs.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Rx from 'rx';\nimport chai from 'chai';\nimport chaiRx from 'chai-rx';\n\nchai.use(chaiRx);\n\nconst { onNext, onCompleted } = Rx.ReactiveTest;\nconst scheduler = new Rx.TestScheduler();\n\nconst xs = scheduler.createHotObservable(\n  onNext(150, 1),\n  onNext(210, 2),\n  onNext(220, 3),\n  onCompleted(230)\n);\n\n// Note we'll start at 200 for subscribe, hence missing the 150 mark\nconst output = scheduler.startScheduler(() => xs.map(x => x * x), {\n  created: 100,\n  subscribed: 200,\n  disposed: 300\n});\n\nexpect(output).to.emit([\n  onNext(210, 4),\n  onNext(220, 9),\n  onCompleted(230)\n]);\n```\n\n----------------------------------------\n\nTITLE: Loading Chai HTTP Plugin\nDESCRIPTION: Shows how to import and configure the chai-http plugin to extend Chai's functionality for HTTP testing.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/using-chai-with-esm-and-plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as chai from 'chai';\nimport { request, default as chaiHttp } from 'chai-http';\n\nchai.use(chaiHttp);\n\n// Now you can use `chai-http` using the `request` function.\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to URL\nDESCRIPTION: Example of making an HTTP GET request to a specific URL using Chai HTTP.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request('http://localhost:8080')\n  .get('/')\n```\n\n----------------------------------------\n\nTITLE: Keeping Server Open for Multiple Requests\nDESCRIPTION: Example of keeping the server connection open for multiple HTTP requests and then manually closing it. This is useful when testing multiple endpoints in sequence.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst requester = chai.request(app).keepOpen()\n\nPromise.all([\n  requester.get('/a'),\n  requester.get('/b'),\n])\n.then(responses => { /* ... */ })\n.then(() => requester.close())\n```\n\n----------------------------------------\n\nTITLE: Using notify for Post-Promise Assertions\nDESCRIPTION: Advanced pattern for performing assertions after a promise has been fulfilled, while still properly handling test completion signaling.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"should change the state\", function (done) {\n    otherState.should.equal(\"before\");\n    promise.should.be.fulfilled.then(function () {\n        otherState.should.equal(\"after\");\n    }).should.notify(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Using ascendingBy method for object attribute sorting\nDESCRIPTION: Demonstrates the explicit .ascendingBy() method to test if objects are sorted by a specific attribute in ascending order.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sorted.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([{id:2,name:\"apple\"},{id:3,name:\"bat\"}]).to.be.ascendingBy(\"name\")\n```\n\n----------------------------------------\n\nTITLE: Setting Dispatch Expectations with Chai-Signals\nDESCRIPTION: Examples of various assertions for checking if signals were dispatched, including frequency checks and verifying parameters used in the dispatch.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_signals.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(signalSpy).to.have.been.dispatched();        // the spy's signal has been dispatched at least once\nexpect(signalSpy).to.have.been.dispatched(n);       // the spy's signal has been dispatched n times\nexpect(signal).to.have.been.dispatched();           // the signal has been dispatched at least once\nexpect(signal).to.have.been.dispatched(n);          // the signal has been dispatched n times\nexpect(signalSpy).to.not.have.been.dispatched();    // the spy's signal has not been dispatched at all\nexpect(signalSpy).to.not.have.been.dispatched(n);   // the spy's signal has not been dispatched n times\nexpect(signal).to.not.have.been.dispatched();       // the signal has not been dispatched at all\nexpect(signal).to.not.have.been.dispatched(n);      // the signal has not been dispatched at all\n\nexpect(signalSpy).to.have.been.dispatchedWith(n);          // the spy's signal has been dispatched using n\nexpect(signalSpy).to.have.been.dispatchedWith(m, n);       // the spy's signal has been dispatched using (m, n)\nexpect(signalSpy).to.have.been.dispatchedWith(<object>);   // the spy's signal has been dispatched with using object\nexpect(signal).to.have.been.dispatchedWith(n);          // the signal has been dispatched using n\nexpect(signal).to.have.been.dispatchedWith(m, n);       // the signal has been dispatched using (m, n)\nexpect(signal).to.have.been.dispatchedWith(<object>);   // the signal has been dispatched with using object\nexpect(signalSpy).to.not.have.been.dispatchedWith(n);          // the spy's signal has not been dispatched using n\nexpect(signalSpy).to.not.have.been.dispatchedWith(m, n);       // the spy's signal has not been dispatched using (m, n)\nexpect(signalSpy).to.not.have.been.dispatchedWith(<object>);   // the spy's signal has not been dispatched with using object\nexpect(signal).to.not.have.been.dispatchedWith(n);          // the signal has not been dispatched using n\nexpect(signal).to.not.have.been.dispatchedWith(m, n);       // the signal has not been dispatched using (m, n)\nexpect(signal).to.not.have.been.dispatchedWith(<object>);   // the signal has not been dispatched with using object\n```\n\n----------------------------------------\n\nTITLE: Using chai-bignumber assertions in JavaScript\nDESCRIPTION: Examples of using chai-bignumber assertions for comparing BigNumber values, including equality, comparison, and rounding operations.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bignumber.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = new BigNumber('100000000000000000').plus(1);\nvar expected = '100000000000000001';\nresult.should.be.bignumber.equal(expected);\nexpect(result).to.be.bignumber.at.most(expected);\n'1000'.should.be.bignumber.lessThan(2000);\n```\n\n----------------------------------------\n\nTITLE: Example Using Chai's 'should' Syntax with Sinon-Chai\nDESCRIPTION: Illustrates how to set up and use Sinon-Chai with Chai's 'should' syntax in a Node.js environment. It includes a simple test case for a 'hello' function using a Sinon spy.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_slightlytyler_sinon_chai.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nchai.should();\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        cb.should.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting a Spy Was Called Exactly Twice\nDESCRIPTION: Demonstrates how to assert that a spy was called exactly twice, using both positive and negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.twice;\nexpect(spy).to.not.have.been.called.twice;\nspy.should.have.been.called.twice;\nspy.should.not.have.been.called.twice;\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Chai HTTP in JavaScript\nDESCRIPTION: Examples of making HTTP requests using chai-http, including GET and PUT requests with various options like headers, query parameters, and request body.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/natanavra_chai_http.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .get('/')\n\nchai.request('http://localhost:8080')\n  .get('/')\n\nchai.request(app)\n  .put('/user/me')\n  .set('Content-Type', 'application/json')\n  .send({ password: '123', confirmPassword: '123' })\n\nchai.request(app)\n  .post('/user/me')\n  .type('form')\n  .send({\n    '_method': 'put',\n    'password': '123',\n    'confirmPassword': '123'\n  })\n\nchai.request(app)\n  .post('/user/avatar')\n  .attach('imageField', fs.readFileSync('avatar.png'), 'avatar.png')\n\nchai.request(app)\n  .get('/protected')\n  .auth('user', 'pass')\n\nchai.request(app)\n  .get('/search')\n  .query({name: 'foo', limit: 10}) // /search?name=foo&limit=10\n```\n\n----------------------------------------\n\nTITLE: Basic Usage with expect in CoffeeScript\nDESCRIPTION: Demonstrates the basic syntax for using chai-changes with the expect style. This shows how to verify that a value changes when a specific function is executed.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_0\n\nLANGUAGE: coffeescript\nCODE:\n```\nexpect(-> codeThatYieldsAChangedResult).to....when ->\n  executeTheCodeThatCausesTheChange()\n```\n\n----------------------------------------\n\nTITLE: Sending Form Data in HTTP Request\nDESCRIPTION: Example of sending form data in an HTTP POST request using Chai HTTP.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .post('/user/me')\n  .type('form')\n  .send({\n    '_method': 'put',\n    'password': '123',\n    'confirmPassword': '123'\n  })\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Examples of chai-react-element\nDESCRIPTION: Demonstrates basic assertion patterns for React elements using the chai-react-element plugin. Shows how to check element text content, element type, and props.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_react_element.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(<div>hello</div>).to.have.text('hello');\nexpect(<div></div>).to.have.elementOfType('div')\nexpect(<div data-foo=\"bar\"></div>).to.have.prop('data-foo', 'bar');\n\nexpect(<div><div data-foo=\"bar\"></div></div>).to.include.prop('data-foo', 'bar');\n\nexpect(<div><span>hello</span></div>).to.include.elementOfType('span').with.text('hello');\n```\n\n----------------------------------------\n\nTITLE: Assert Interface with Chai as Promised - Basic Example\nDESCRIPTION: Using Chai's assert interface with the 'eventually' extender to adapt standard assertions for promise testing.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nassert.equal(2 + 2, 4, \"This had better be true\");\n\n// becomes\nreturn assert.eventually.equal(Promise.resolve(2 + 2), 4, \"This had better be true, eventually\");\n```\n\n----------------------------------------\n\nTITLE: Should/Expect Interface with Chai as Promised - Basic Transformations\nDESCRIPTION: Examples showing how standard Chai assertions can be transformed to work with promises using the 'eventually' property in both 'should' and 'expect' styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(2 + 2).should.equal(4);\n\n// becomes\nreturn Promise.resolve(2 + 2).should.eventually.equal(4);\n\n\nexpect({ foo: \"bar\" }).to.have.property(\"foo\");\n\n// becomes\nreturn expect(Promise.resolve({ foo: \"bar\" })).to.eventually.have.property(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Using chai-date-string Plugin for Date String Validation\nDESCRIPTION: Demonstrates how to use the chai-date-string plugin to validate date strings using Chai's assertion library. Shows both passing and failing test cases for date string validation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_date_string.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , expect = chai.expect\n  , chaiDateString = require('chai-date-string');\n\nexpect('2015-11-12').to.be.a.dateString(); // will pass\nexpect('2015-24-12').to.be.a.dateString(); // will fail\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Response with Promises\nDESCRIPTION: Example of handling an HTTP response using Promises with Chai HTTP and making assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .put('/user/me')\n  .send({ password: '123', confirmPassword: '123' })\n  .then(function (res) {\n     expect(res).to.have.status(200);\n  })\n  .catch(function (err) {\n     throw err;\n  });\n```\n\n----------------------------------------\n\nTITLE: Mixed Assertion Styles with Dirty Chai\nDESCRIPTION: Examples showing how property and function assertions can be mixed in a chain, with the important requirement that the chain must terminate with a function call.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai__.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(true).to.be.true.and.not.false();\nexpect(true).to.be.true().and.not.false();\n```\n\n----------------------------------------\n\nTITLE: Using chai-like for basic JSON comparison\nDESCRIPTION: Example of using chai-like to compare JSON objects, ignoring certain properties.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_like.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = {\n  id: 1,\n  name: 'test',\n  updatedAt: 'now'\n};\nobject.should.like({\n  name: 'test'\n});\nobject.should.not.like({\n  name: 'test1'\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Called in Chai\nDESCRIPTION: Demonstrates how to assert that a spy function has been called using both expect and should styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called();\nspy.should.have.been.called();\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Pattern for Object Validation in JavaScript\nDESCRIPTION: Demonstrates how to create a JSON pattern for validating object properties using chai-json-pattern. The pattern includes various validators for different data types and constraints.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_pattern.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pattern = `\n    {\n        \"username\": String AND alphanum AND minLength(3) AND maxLength(30),\n        \"password\": String AND regex(\"/^[0-9a-zA-Z]{5,30}$/\"),\n        \"access_token\"?: String AND Number,\n        \"birthyear\": Integer AND range(1900, 2017),\n        \"email\": String,\n        ...\n    }\n`;\n\nexpect(user).to.matchPattern(pattern);\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Tests with Mocha's Done Callback\nDESCRIPTION: Examples showing how to properly handle asynchronous tests with Mocha, using the done callback to signal test completion after assertions are verified.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nit('fails, as expected', function(done) { // <= Pass in done callback\n  chai.request('http://localhost:8080')\n  .get('/')\n  .end((err, res) => {\n    expect(res).to.have.status(123);\n    done();                               // <= Call done to signal callback end\n  });\n});\n\nit('succeeds silently!', () => {   // <= No done callback\n  chai.request('http://localhost:8080')\n  .get('/')\n  .end((err, res) => {\n    expect(res).to.have.status(123);    // <= Test completes before this runs\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of chai-interface for Type Checking\nDESCRIPTION: Demonstrates how to use chai-interface to check that an object has properties of specific types. The example shows verification of Boolean, String, Number, Function, and Array types.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_interface.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\nchai.should()\nchai.use(require('chai-interface'))\n\nvar foo = {\n  bar: true,\n  baz: 'green',\n  qux: 37,\n  quack: function () {},\n  ducks: [1, 2, 3]\n}\n\nfoo.should.have.interface({\n  bar: Boolean,\n  baz: String,\n  qux: Number,\n  quack: Function,\n  ducks: Array\n})\n```\n\n----------------------------------------\n\nTITLE: Using Not Equals Shorthand in Assertions\nDESCRIPTION: Example showing the not equals shorthand operator for negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_by_proxy.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nobj = { foo: { bar: 'baz' } }\n\nobj.should.have.foo.bar.not= 'qux'\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Pattern for Object Validation in JavaScript\nDESCRIPTION: Demonstrates how to create a JSON pattern for validating object properties using chai-json-pattern. The pattern includes various validators for different data types and constraints.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_pattern.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pattern = `\n    {\n        \"username\": String AND alphanum AND minLength(3) AND maxLength(30),\n        \"password\": String AND regex(\"/^[0-9a-zA-Z]{5,30}$/\"),\n        \"access_token\"?: String AND Number,\n        \"birthyear\": Integer AND range(1900, 2017),\n        \"email\": String,\n        ...\n    }\n`;\n\nexpect(user).to.matchPattern(pattern);\n```\n\n----------------------------------------\n\nTITLE: Using chai-json-schema assertions with sample data and schema\nDESCRIPTION: Example demonstrating how to use the jsonSchema assertion with sample data and a schema in both BDD and TDD assertion styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-json-schema.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar goodApple = {\n  skin: 'thin',\n  colors: ['red', 'green', 'yellow'],\n  taste: 10\n};\nvar badApple = {\n  colors: ['brown'],\n  taste: 0,\n  worms: 2\n};\nvar fruitSchema = {\n  title: 'fresh fruit schema v1',\n  type: 'object',\n  required: ['skin', 'colors', 'taste'],\n  properties: {\n    colors: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string'\n      }\n    },\n    skin: {\n      type: 'string'\n    },\n    taste: {\n      type: 'number',\n      minimum: 5\n    }\n  }\n};\n\n//bdd style\nexpect(goodApple).to.be.jsonSchema(fruitSchema);\nexpect(badApple).to.not.be.jsonSchema(fruitSchema);\n\ngoodApple.should.be.jsonSchema(fruitSchema);\nbadApple.should.not.be.jsonSchema(fruitSchema);\n\n//tdd style\nassert.jsonSchema(goodApple, fruitSchema);\nassert.notJsonSchema(badApple, fruitSchema);\n```\n\n----------------------------------------\n\nTITLE: Sinon-Chai Assertion Examples\nDESCRIPTION: Shows the improved syntax when using Sinon-Chai assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_cypress_sinon_chai.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmySpy.should.have.been.calledWith(\"foo\");\nexpect(mySpy).to.have.been.calledWith(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML Content with Chai-DOM in JavaScript\nDESCRIPTION: Demonstrates how to use chai-dom to assert the HTML content of DOM elements. It includes examples for exact matching and partial content matching.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_dom.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('.name').should.have.html('<em>John Doe</em>')\nexpect(document.querySelector('#title')).to.have.html('Chai Tea')\n\ndocument.querySelector('.name').should.contain.html('<span>Doe</span>')\nexpect(document.querySelector('#title')).to.contain.html('<em>Tea</em>')\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Called With Multiple Arguments in Chai\nDESCRIPTION: Shows how to check that a spy was called with multiple specific arguments at least once, in any order.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nspy('foo', 'bar', 1);\nexpect(spy).to.have.been.called.with('bar', 'foo');\nspy.should.have.been.called.with('bar', 'foo');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Matching in Better Shallow Deep Equal\nDESCRIPTION: Shows how to use the addMatch API to define custom matching logic between different types, allowing for more flexible comparisons in test assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_better_shallow_deep_equal.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nchaiBetterShallowDeepEqual.addMatch({\n  leftType: \"CustomDate\",\n  rightType: \"string\",\n  handler: (lhs, rhs) => [lhs.toISOString(), rhs]\n});\n```\n\n----------------------------------------\n\nTITLE: Checking CSS Classes with Chai-DOM in JavaScript\nDESCRIPTION: Shows how to use chai-dom to assert the presence of CSS classes on DOM elements. It includes examples using both string and regex matching.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_dom.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementsByName('bar').should.have.class('foo')\nexpect(document.querySelector('main article')).to.have.class('foo')\n\ndocument.getElementsByName('bar').should.have.class(/foo/)\nexpect(document.querySelector('main article')).to.have.class(/foo/)\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to Application Server\nDESCRIPTION: Example of making an HTTP GET request to the root endpoint of an application using chai-http. This demonstrates the basic request syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .get('/')\n```\n\n----------------------------------------\n\nTITLE: Configuring chai-json-schema-ajv with Custom Options\nDESCRIPTION: Example showing how to initialize the plugin with custom options. The options are passed to the underlying AJV instance, allowing for customization of the validation behavior.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema_ajv.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n...\nconst options = { ... }\nchai.use(\n  require('chai-json-schema-ajv').create(options)\n)\n...\n\n// Basically, it's same as `new Ajv(options)`\n```\n\n----------------------------------------\n\nTITLE: Expect and Should Syntax Examples with Chai-Rx\nDESCRIPTION: Shows how to use both expect and should assertion styles with chai-rx for testing observables. Includes examples of testing next and error notifications with complex objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rx.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xs = scheduler.createHotObservable(onNext(250, { 'foo': 'bar' }), onError(300, new Error('An error')));\nconst output = scheduler.startScheduler(() => xs);\n\n// expect\nexpect(output).to.emit([\n  onNext(250, { 'foo': 'bar' }),\n  onError(300, ({error}) => error.message === 'An error')\n]);\n\n// should\noutput.should.emit([\n  onNext(250, { 'foo': 'bar' }),\n  onError(300, ({error}) => error.message === 'An error')\n]);\n```\n\n----------------------------------------\n\nTITLE: Example Error Message in Original chai-subset\nDESCRIPTION: Shows the typical error message format from the original chai-subset plugin, which lacks detailed information about what exactly differs between objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_thiscode_chai_subset.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nexpected { Object (key1, key2, ...) } to contain subset { Object (key1) }\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Using node-fetch-response-matchers\nDESCRIPTION: Complete example showing how to set up Chai with the node-fetch-response-matchers plugin and use it in test cases, including chaining assertions with 'and'.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/node_fetch_response_matchers.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodeFetchMatchers = require('node-fetch-response-matchers');\nconst fetch = require('node-fetch');\nconst chai = require('chai');\n\nchai.use(nodeFetchMatchers);\n\ndescribe('test suite', function(){\n    it('http success test', function(){\n        return expect(fetch('http://localhost/')).to.be.successful();\n    });\n    it('and', function(){\n          return expect(fetch('http://localhost/')).to.be.successful()\n                                                    .and.haveBodyText('foo');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Chai Spies\nDESCRIPTION: Shows how to create spies using chai.spy(), both wrapping an existing function and creating an empty spy.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-spies.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction original () {\n  // do something cool\n}\n\nconst spy = chai.spy(original);\n\n// then use in place of original\nee.on('some event', spy);\n\n// or use without original\nconst spyAgain = chai.spy();\nee.on('some other event', spyAgain);\n```\n\n----------------------------------------\n\nTITLE: Creating Function Spies in Chai\nDESCRIPTION: Demonstrates multiple ways of creating spies using Chai: wrapping an existing function, creating an empty spy function, tracking an object's method, tracking multiple methods, and creating a spy that returns a specific value.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction original () {\n  // do something cool\n}\n\nvar spy = chai.spy(original);\n\n// then use in place of original\nee.on('some event', spy);\n\n// or use without original\nvar spy_again = chai.spy();\nee.on('some other event', spy_again);\n\n// or you can track an object's method\nvar array = [ 1, 2, 3 ];\nchai.spy.on(array, 'push');\n\n// or you can track multiple object's methods\nchai.spy.on(array, 'push', 'pop');\n\narray.push(5);\n\n// and you can reset the object calls\narray.push.reset();\n\n// or you can create spy object\nvar object = chai.spy.object([ 'push', 'pop' ]);\nobject.push(5);\n\n// or you create spy which returns static value\nvar spy = chai.spy.returns(true);\n\nspy(); // true\n```\n\n----------------------------------------\n\nTITLE: Spying on Existing Object Methods\nDESCRIPTION: Demonstrates how to spy on existing methods of an object using the spy.on functionality, including single or multiple methods.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [1, 2, 3];\n\nchai.spy.on(array, 'push');\n\n// or multiple spies\nchai.spy.on(array, ['push', 'pop']);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Element Assertions with Chai Things in JavaScript\nDESCRIPTION: This snippet shows how to use Chai Things to perform assertions on array elements. It demonstrates the difference between regular Chai assertions and the enhanced capabilities provided by Chai Things for deep equality checks on array elements.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-things.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Although they are equal, two different { a: 1 } objects are not the same\n[{ a: 1 }, { b: 2 }].should.not.include({ a: 1 })\n// However, Chai Things allows us to test what we want\n[{ a: 1 }, { b: 2 }].should.include.something.that.deep.equals({ b: 2 })\n// If the test fails, we get a descriptive message\n[{ a: 1 }, { b: 2 }].should.include.something.that.deep.equals({ c: 3 })\n/* expected an element of [ { a: 1 }, { b: 2 } ] to deeply equal { c: 3 } */\n```\n\n----------------------------------------\n\nTITLE: Using Sinon-Chai assertions elegantly\nDESCRIPTION: The elegant syntax provided by sinon-chai for asserting on Sinon.JS spies.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sinon.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmySpy.should.have.been.calledWith(\"foo\");\nexpect(mySpy).to.have.been.calledWith(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Asserting a Spy Was Called Exactly Once\nDESCRIPTION: Shows how to assert that a spy was called exactly once, using both positive and negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.once;\nexpect(spy).to.not.have.been.called.once;\nspy.should.have.been.called.once;\nspy.should.not.have.been.called.once;\n```\n\n----------------------------------------\n\nTITLE: Sinon-Chai Example with Chai's Expect Interface\nDESCRIPTION: Demonstrates how to use Sinon-Chai with Chai's expect interface in a test scenario.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_joethefkingfrypan_sinon_chai.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nvar expect = chai.expect;\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        expect(cb).to.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using chai-roughly for deep equality assertion\nDESCRIPTION: Example test demonstrating how to use the roughly.deep.equal assertion to compare objects with numerical values that are approximately equal.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_roughly.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('works', function() {\n  expect({ value: 42 }).to.roughly.deep.equal({ value: 41.9999999 });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Response Status Code\nDESCRIPTION: Example of asserting that an HTTP response has a specific status code. This is one of the most common assertions when testing HTTP endpoints.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(res).to.have.status(200);\n```\n\n----------------------------------------\n\nTITLE: Using dirty-chai with sinon-chai plugin\nDESCRIPTION: Example showing how dirty-chai converts sinon-chai's property assertions to method assertions when loaded in the correct order.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nspy.should.have.been.called();\nspy.should.have.been.calledOnce();\nspy.should.have.been.calledTwice();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Chai URL Plugin\nDESCRIPTION: Demonstrates how to import and use the chai-url plugin with basic assertions for URL path and protocol verification. Shows the core setup and basic usage patterns.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_url.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nchai.use(require('chai-url'));\n\nchai.expect('http://example.com/foo/bar').to.have.path('/foo/bar');\nchai.expect('http://example.com/foo/bar').to.have.protocol('http');\n```\n\n----------------------------------------\n\nTITLE: Using chai-xml Plugin for XML Assertions in JavaScript Tests\nDESCRIPTION: A complete example demonstrating how to use the chai-xml plugin for comparing XML strings. The example shows various assertions including checking validity, comparing XML ignoring attribute order, and comparing XML ignoring whitespace.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_xml.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai    = require('chai');\nvar expect  = require('chai').expect;\nvar chaiXml = require('chai-xml');\n\n//loads the plugin\nchai.use(chaiXml);\n\ndescribe('assert some xml', function(){\n\n    var someXml = '<root>\\n\\t<child name=\"foo\" value=\"bar\"></child>\\n</root>';\n    var otherXml = '<root><child value=\"bar\" name=\"foo\" /></root>';\n\n    it(\"should be valid\", function(){\n        expect(someXml).xml.to.be.valid();\n    });\n\n    it(\"should be the same string as otherXml \", function(){\n        expect(someXml).to.not.equal(otherXml);\n    });\n    it(\"should be the same XML as otherXml \", function(){\n        expect(someXml).xml.to.equal(otherXml);\n    });\n\n    it(\"should be the same XML ignoring the whitespace at the begining and end of the text nodes\", function () {\n        var formattedXml = \"<tag>\\n\\tContent\\n</tag>\";\n        var unformattedXml = \"<tag>Content</tag>\";\n        expect(formattedXml).xml.to.deep.equal(unformattedXml);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using chai-eventemitter2 with Expect API\nDESCRIPTION: Example of using chai-eventemitter2 with the Expect API. It demonstrates various assertions on an EventEmitter instance, including checking if it's an EventEmitter and expecting specific event emissions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_eventemitter_.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = new EventEmitter();\n\nexpect(emitter).to.be.an.eventEmitter;\n\nexpect(emitter)\n\t.to.emit('foo')\n\t.to.emit('bar', {count: 2})\n\t.to.emit('baz', {withArgs: ['X', 'Y', 'Z']})\n\t.to.emit('error', {count: 0})\n\t.on(() =>\n\t{\n\t\temitter.emit('foo');\n\t\temitter.emit('bar');\n\t\temitter.emit('bar');\n\t\temitter.emit('baz', 'X', 'Y', 'Z');\n\t});\n```\n\n----------------------------------------\n\nTITLE: Using sinon-chai-in-order for Fluent Order Assertions in JavaScript\nDESCRIPTION: Example demonstrating the improved, fluent syntax for verifying spy call order using the sinon-chai-in-order plugin, with chained assertions for sequential calls.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_in_order.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).inOrder.to.have.been.calledWith(1)\n                   .subsequently.calledWith(2)\n                   .subsequently.calledWith(3);\n```\n\n----------------------------------------\n\nTITLE: Asserting Headers Exist in HTTP Request or Response\nDESCRIPTION: Example of asserting that headers exist in an HTTP request or response object. This checks for the presence of headers without checking specific values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(req).to.have.headers;\n```\n\n----------------------------------------\n\nTITLE: Including Chai Iterator via HTML Script Tag\nDESCRIPTION: Shows how to include chai-iterator in an HTML file using a script tag.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-iterator.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Deep comparison with chai-like\nDESCRIPTION: Demonstrates how chai-like performs deep comparisons of nested JSON objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_like.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = {\n  id: 1,\n  name: 'test',\n  product: {\n    id: 1,\n    name: 'product'\n  },\n  updatedAt: 'now'\n};\nobject.should.like({\n  name: 'test',\n  product: {\n    name: 'product'\n  }\n});\nobject.should.not.like({\n  name: 'test',\n  product: {\n    name: 'product1'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Content Types in HTTP Request or Response\nDESCRIPTION: Examples of asserting that an HTTP request or response has a specific content type (JSON, HTML, or text). This helps verify the format of the data being sent or received.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(req).to.be.json;\nexpect(req).to.be.html;\nexpect(req).to.be.text;\n```\n\n----------------------------------------\n\nTITLE: Validating Schema Definition with chai-json-schema-ajv\nDESCRIPTION: Example showing how to validate whether a schema itself is a valid JSON schema. It demonstrates both the expect and assert styles with positive and negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema_ajv.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai')\nchai.use(require('chai-json-schema-ajv'))\nconst expect = chai.expect\nconst assert = chai.assert\n\nconst schema = {\n  title: 'valid schema',\n  type: 'object',\n  required: ['name'],\n  properties: {\n    name: {\n      type: 'string',\n      minLength: 3\n    }\n  }\n}\n\nexpect(schema, 'custom flag').to.be.validJsonSchema\nexpect({ type: '__invalid__' }, 'custom flag').to.not.be.validJsonSchema\n\nassert.validJsonSchema(schema, 'custom flag')\nassert.notValidJsonSchema({ type: '__invalid__' }, 'custom flag')\n```\n\n----------------------------------------\n\nTITLE: Using chai-roughly-v2 for assertions with tolerance\nDESCRIPTION: Example test showcasing how to use the 'roughly' assertion to compare values with a numerical tolerance. This allows assertions to pass when values are approximately equal within the specified tolerance.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_roughly_v_.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = chai;\n\nit('works', () => {\n  const result = { value: 41.9999999 };\n  expect(result).to.roughly.deep.equal({ value: 42 });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing RxJS Observables with Chai-Rx Basic Example\nDESCRIPTION: Demonstrates basic usage of chai-rx plugin to test RxJS Observable streams using TestScheduler. Shows setup, creating a hot observable, scheduling its execution, and asserting its emissions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rx.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Rx from 'rx';\nimport chai from 'chai';\nimport chaiRx from 'chai-rx';\n\nchai.use(chaiRx);\n\nconst { onNext, onCompleted } = Rx.ReactiveTest;\nconst scheduler = new Rx.TestScheduler();\n\nconst xs = scheduler.createHotObservable(\n  onNext(150, 1),\n  onNext(210, 2),\n  onNext(220, 3),\n  onCompleted(230)\n);\n\n// Note we'll start at 200 for subscribe, hence missing the 150 mark\nconst output = scheduler.startScheduler(() => xs.map(x => x * x), {\n  created: 100,\n  subscribed: 200,\n  disposed: 300\n});\n\nexpect(output).to.emit([\n  onNext(210, 4),\n  onNext(220, 9),\n  onCompleted(230)\n]);\n```\n\n----------------------------------------\n\nTITLE: Chai as Promised Should/Expect Interface Examples in JavaScript\nDESCRIPTION: Illustrates various ways to use Chai as Promised with the should and expect interfaces, including promise-specific extensions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Promise.resolve(2 + 2).should.eventually.equal(4);\n\nreturn expect(Promise.resolve({ foo: \"bar\" })).to.eventually.have.property(\"foo\");\n\nreturn promise.should.be.fulfilled;\nreturn promise.should.eventually.deep.equal(\"foo\");\nreturn promise.should.become(\"foo\"); // same as `.eventually.deep.equal`\nreturn promise.should.be.rejected;\nreturn promise.should.be.rejectedWith(Error); // other variants of Chai's `throw` assertion work too.\n```\n\n----------------------------------------\n\nTITLE: Asserting Arguments for All Calls with always.with\nDESCRIPTION: Demonstrates how to assert that every call to a spy included the specified arguments, even if additional arguments were provided.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nspy('foo');\nspy('foo', 'bar');\nspy(1, 2, 'foo');\nexpect(spy).to.have.been.called.always.with('foo');\nspy.should.have.been.called.always.with('foo');\n```\n\n----------------------------------------\n\nTITLE: Testing Generator Functions with Chai Iterator in JavaScript\nDESCRIPTION: Demonstrates how to use chai-iterator to test generator functions, specifically a Fibonacci sequence generator.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* fibonacci() {\n  for (let [x, y] = [1, 1]; true; [x, y] = [y, x + y]) {\n    yield x;\n  }\n}\n\nfibonacci().should.iterate.from([1, 1, 2, 3, 5]);\n\nlet fiborator = fibonacci();\n\nfiborator.should.iterate.from([1, 1, 2, 3, 5]);\nfiborator.should.iterate.from([8, 13, 21, 34]);\n\nfibonacci().should.iterate.from([1, 1, 2, 3, 5]);\nfibonacci().should.iterate.from([1, 1, 2, 3, 5, 8, 13]);\n```\n\n----------------------------------------\n\nTITLE: UUID Validation Using Chai's Expect Interface\nDESCRIPTION: Examples demonstrating how to validate various UUID versions (v1-v5) and general UUIDs using Chai's expect assertion style. Shows both uuid() and guid() method usage.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_uuid.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require(\"chai\");\nchai.use(require('chai-uuid'));\nconst expect = chai.expect;\n\n// validate UUID v1\nexpect('bd74c8da-4d9e-11e7-b114-b2f933d5fe66').to.be.a.uuid('v1');\n// validate UUID v2\nexpect('f6b93689-1c6a-2931-a785-c7d5606f7f4d').to.be.a.uuid('v2');\n// validate UUID v3\nexpect('622ab4f8-c3e7-3747-a548-0e2d11bf5ab1').to.be.a.uuid('v3');\n// validate UUID v4\nexpect('0ce529f4-8854-41ec-b67c-fbcb4e716e42').to.be.a.uuid('v4');\n// validate UUID v5\nexpect('48a698a0-1641-5aca-bc1b-de9b1a482ee1').to.be.a.uuid('v5');\n// validate UUID (any version)\nexpect('a416d989-91d1-48c9-b583-267df138834c').to.be.a.uuid();\n\n// optionally, you can use the guid method\nexpect('a416d989-91d1-48c9-b583-267df138834c').to.be.a.guid();\n```\n\n----------------------------------------\n\nTITLE: Using chai-semver assertions\nDESCRIPTION: Examples of using chai-semver assertions to check semver format and version ranges.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_semver.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('1.2.0').to.be.semver() // passes if given string is in semver format, rejects if not\n'1.6.3'.should.be.semver() // equivalent\nexpect('1.2.0').to.satisfySemver('>1.0.3') // passes if given string is in given version range, rejects if not\n```\n\n----------------------------------------\n\nTITLE: Using chai-js-factories to Define and Create Factories\nDESCRIPTION: This JavaScript snippet demonstrates how to use chai-js-factories to define a factory and create instances with default and custom arguments. It showcases the basic usage of the chai.factory object for defining and creating test objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_js_factories.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchai.factory.define('testFactory', function (args) {\n  return new Example(_.extend({foo: 'bar'}, args));\n});\n\nconsole.log(chai.factory.create('testFactory'));\nconsole.log(chai.factory.create('testFactory', {wom: 'bat'}));\nconsole.log(chai.factory.create('testFactory', {foo: 'wombat'}));\n```\n\n----------------------------------------\n\nTITLE: Asserting File Content Matches RegExp using Chai\nDESCRIPTION: Examples of asserting that a path exists, is a file, and has contents matching a regular expression using expect/should/assert styles in chai-fs. Reads file as utf8 text to match against the pattern.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-fs.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).with.contents.that.match(/xyz/, ?msg);\nexpect(path).to.be.a.file(?msg).and.not.have.contents.that.match(/xyz/, ?msg);\n\npath.should.be.a.file(?msg).with.contents.that.match(/xyz/, ?msg);\npath.should.be.a.file(?msg).and.not.have.contents.that.match(/xyz/, ?msg);\n\nassert.fileContentMatch(path, /xyz/, ?msg);\nassert.notFileContentMatch(path, /xyz/, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Making Multiple Requests with Chai HTTP\nDESCRIPTION: Example of making multiple HTTP requests while keeping the server open, and then closing it manually.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar requester = chai.request(app).keepOpen()\n\nPromise.all([\n  requester.get('/a'),\n  requester.get('/b'),\n])\n.then(responses => ....)\n.then(() => requester.close())\n```\n\n----------------------------------------\n\nTITLE: Using startsWith/startWith Assertion\nDESCRIPTION: Examples of the startsWith/startWith assertion in different syntax styles to verify if a string starts with a specific substring.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nassert.startsWith('abcdef', 'abc');\nexpect('abcdef').to.startsWith('abc');\n'abcdef'.should.startWith('abc');\n```\n\n----------------------------------------\n\nTITLE: Traditional Promise Assertion in JavaScript\nDESCRIPTION: Shows the traditional way of asserting promises using callback functions for fulfillment and rejection.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomethingAsync().then(\n    function (result) {\n        result.should.equal(\"foo\");\n        done();\n    },\n    function (err) {\n       done(err);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Chai.js Options\nDESCRIPTION: Examples of configuring Chai.js options including stack trace display, diff reporting, and value truncation settings.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/styles.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchai.config.includeStack = true; // turn on stack trace\nchai.config.showDiff = false; // turn off reporter diff display\nchai.config.truncateThreshold = 0; // disable truncating\n```\n\n----------------------------------------\n\nTITLE: Using Chai Subset with Expect Interface\nDESCRIPTION: Examples of using chai-subset with Chai's expect interface, including basic property matching, nested objects, compare functions, and negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_subset.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = {\n\ta: 'b',\n\tc: 'd',\n\te: {\n\t\tfoo: 'bar',\n\t\tbaz: {\n\t\t\tqux: 'quux'\n\t\t}\n\t}\n};\n\t\nexpect(obj).to.containSubset({\n\ta: 'b',\n\te: {\n\t\tbaz: {\n\t\t\tqux: 'quux'\n\t\t}\n\t}\n});\n\n// or using a compare function\nexpect(obj).containSubset({\n\ta: (expectedValue) => expectedValue,\n\tc: (expectedValue) => expectedValue === 'd'\n})\n\n// or with 'not'\nexpect(obj).to.not.containSubset({\n\tg: 'whatever'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chai with Chai Things Plugin in JavaScript\nDESCRIPTION: This snippet shows how to set up Chai with the Chai Things plugin. It requires Chai, enables the should-style assertions, and then uses the Chai Things plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_things.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nchai.should();\nchai.use(require('chai-things'));\n```\n\n----------------------------------------\n\nTITLE: Using core-js for Symbol.iterator Polyfill\nDESCRIPTION: Example of minimally polyfilling Symbol.iterator functionality for environments that don't support it natively, using specific modules from core-js.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('core-js/es6/symbol');\nrequire('core-js/fn/symbol/iterator');\n```\n\n----------------------------------------\n\nTITLE: Using Chai Spy Sandboxes\nDESCRIPTION: Demonstrates how to use chai.spy.sandbox() to create a set of spies that can be easily restored, including setup and teardown in a test environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-spies.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst sandbox = chai.spy.sandbox();\n\ndescribe('Array', () => {\n  let array;\n\n  beforeEach(() => {\n    array = [];\n    sandbox.on(array, ['push', 'pop']);\n  });\n\n  afterEach(() => {\n    sandbox.restore(); // restores original methods on `array`\n  })\n\n  it('allows to add items', () => {\n    array.push(1);\n\n    expect(array.push).to.have.been.called.with(1);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Dirty Chai with Sinon-Chai Plugin\nDESCRIPTION: Example showing how dirty-chai converts property assertions from other plugins like sinon-chai into method assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai__.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nspy.should.have.been.called();\nspy.should.have.been.calledOnce();\nspy.should.have.been.calledTwice();\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions to Replace Method Implementation\nDESCRIPTION: Demonstrates how to use arrow functions to simplify providing constant return values for spied methods.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nchai.spy.on(array, 'push', () => 5);\n\n// or more readable :)\nchai.spy.on(array, 'push', returns => 5);\n```\n\n----------------------------------------\n\nTITLE: Using Array Element Assertions with Chai Each\nDESCRIPTION: Demonstrates how to use chai-each plugin to assert properties on every element of an array. The example checks if each object has a 'value' property less than 20.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_each.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[{\"value\": 4}, {\"value\": 11}, {\"value\": 15}].should.each.have.property('value').that.is.below(20)\n```\n\n----------------------------------------\n\nTITLE: Using the jsonObj() assertion\nDESCRIPTION: Example of asserting that a JSON file's content equals a specific JavaScript object.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(testFile).to.be.a.jsonFile().and.to.be.jsonObj(jsonObj);\n```\n\n----------------------------------------\n\nTITLE: Retaining Cookies Between Requests in Chai HTTP\nDESCRIPTION: Shows how to use the agent feature of chai-http to retain cookies between multiple requests, useful for testing authenticated sessions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/natanavra_chai_http.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar agent = chai.request.agent(app)\nagent\n  .post('/session')\n  .send({ username: 'me', password: '123' })\n  .then(function (res) {\n    expect(res).to.have.cookie('sessionid');\n    return agent.get('/user/me')\n      .then(function (res) {\n         expect(res).to.have.status(200);\n      });\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Fresh Generator Instances for Each Test\nDESCRIPTION: Best practice for testing generators: create a new generator for each test to ensure consistent starting state.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfibonacci().should.iterate.from([1, 1, 2, 3, 5]);\nfibonacci().should.iterate.from([1, 1, 2, 3, 5, 8, 13]);\n```\n\n----------------------------------------\n\nTITLE: Using Chai-Datetime Assertions with Different Syntax Styles\nDESCRIPTION: JavaScript code example demonstrating the three different assertion styles (BDD should, BDD expect, and TDD assert) for using the chai-datetime plugin to compare date objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_datetime.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar d1 = new Date(2013, 4, 30, 16, 5),\n    d2 = new Date(2013, 4, 30, 17);\n\nd1.should.equalDate(d2)\nexpect(d1).to.equalDate(d2)\nassert.equalDate(d1, d2)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Dirty Chai Plugin with Chai\nDESCRIPTION: Example of importing and initializing the dirty-chai plugin with Chai. Shows the function-form termination of a basic assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai__.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar dirtyChai = require('dirty-chai');\nvar expect = chai.expect\n\nchai.use(dirtyChai);\n// ...\nexpect(true).to.be.true();\n```\n\n----------------------------------------\n\nTITLE: Checking array equality with chai-arrays\nDESCRIPTION: Example of using the equalTo assertion to compare two arrays for equality.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_arrays.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.equalTo([1, 2, 3]);\nexpect([1, 2, 3]).not.to.be.equalTo([1, 2, 5]);\n```\n\n----------------------------------------\n\nTITLE: Requiring and Using chai-match Plugin\nDESCRIPTION: Code to require the Chai library and register the chai-match plugin using the use() method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_match.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-match'));\n```\n\n----------------------------------------\n\nTITLE: Asserting Arguments for Specific Call with nth\nDESCRIPTION: Demonstrates how to assert that a specific call (by number) to a spy was made with particular arguments.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nspy('foo');\nspy('bar');\nspy('baz');\nspy('foobar');\nexpect(spy).to.have.been.first.called.with('foo');\nspy.should.have.been.first.called.with('foo');\nexpect(spy).on.nth(5).be.called.with('foobar');\nspy.should.on.nth(5).be.called.with('foobar');\n```\n\n----------------------------------------\n\nTITLE: Asserting File Content Matches RegExp in Chai-FS\nDESCRIPTION: Demonstrates how to assert that a path exists, is a file, and has contents that match a regular expression. Reads file as utf8 text and supports pattern matching.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).with.contents.that.match(/xyz/, ?msg);\nexpect(path).to.be.a.file(?msg).and.not.have.contents.that.match(/xyz/, ?msg);\n\npath.should.be.a.file(?msg).with.contents.that.match(/xyz/, ?msg);\npath.should.be.a.file(?msg).and.not.have.contents.that.match(/xyz/, ?msg);\n\nassert.fileContentMatch(path, /xyz/, ?msg);\nassert.notFileContentMatch(path, /xyz/, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Asserting Directory Contents with chai-fs\nDESCRIPTION: Examples of using the directory contents assertion to check if a directory exists and has specific contents, including deep and include variations.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.directory(?msg).with.contents(array, ?msg);\nexpect(path).to.be.a.directory(?msg).and.not.have.contents(array, ?msg);\nexpect(path).to.be.a.directory(?msg).with.deep.contents(array, ?msg);\nexpect(path).to.be.a.directory(?msg).and.not.have.deep.contents(array, ?msg);\nexpect(path).to.be.a.directory(?msg).and.include.contents(array, ?msg);\nexpect(path).to.be.a.directory(?msg).and.not.include.contents(array, ?msg);\n\npath.should.be.a.directory(?msg).with.contents(array, ?msg);\npath.should.be.a.directory(?msg).and.not.have.contents(array, ?msg);\npath.should.be.a.directory(?msg).with.deep.contents(array, ?msg);\npath.should.be.a.directory(?msg).and.not.have.deep.contents(array, ?msg);\npath.should.be.a.directory(?msg).and.include.contents(array, ?msg);\npath.should.be.a.directory(?msg).and.not.include.contents(array, ?msg);\n\nassert.directoryContent(path, array, ?msg);\nassert.notDirectoryContent(path, array, ?msg);\nassert.directoryDeepContent(path, array, ?msg);\nassert.notDirectoryDeepContent(path, array, ?msg);\nassert.directoryInclude(path, array, ?msg);\nassert.notDirectoryInclude(path, array, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Assertions with Promises in Chai Change Plugin\nDESCRIPTION: Demonstrates how to use the chai-change plugin with promises for asynchronous assertions, supporting test runners like mocha.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-change.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"creates a user\", () => {\n  let count = 0;\n  const User = {\n    create(attrs) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          count += 1\n          resolve();\n        });\n      });\n    },\n    count() {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(count);\n        });\n      });\n    },\n  };\n\n  // when `changer` or `changeWatcher` returns a promise the expectation will return a promise as well\n  return expect(() => (\n    User.create({name: \"bob\"});\n  )).to.alter(() => (\n    User.count();\n  ),{\n    by: 1,\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting File Content Matches RegExp in Chai-FS\nDESCRIPTION: Demonstrates how to assert that a path exists, is a file, and has contents that match a regular expression. Reads file as utf8 text and supports pattern matching.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).with.contents.that.match(/xyz/, ?msg);\nexpect(path).to.be.a.file(?msg).and.not.have.contents.that.match(/xyz/, ?msg);\n\npath.should.be.a.file(?msg).with.contents.that.match(/xyz/, ?msg);\npath.should.be.a.file(?msg).and.not.have.contents.that.match(/xyz/, ?msg);\n\nassert.fileContentMatch(path, /xyz/, ?msg);\nassert.notFileContentMatch(path, /xyz/, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Complete Example of chai-webdriver-exec in a Test Suite\nDESCRIPTION: A comprehensive example showing how to set up and use chai-webdriver-exec in a Selenium WebDriver test suite. Includes WebDriver initialization, plugin setup, and a simple test case.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_exec.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar webdriver = require('selenium-webdriver'),\n  test = require('selenium-webdriver/testing')\nvar driver = new webdriver.Builder()\n  .forBrowser('firefox')\n  .build()\n\nvar chai = require('chai')\nvar chaiWebdriverExec = require('chai-webdriver-exec')\nchai.use(chaiWebdriverExec(driver)) // here you hook it up\n\ntest.describe('some cool feature', function() {\n  this.timeout(10000)\n  \n  test.it('should work as expected', function() {\n    driver.get('http://github.com');\n    chai.expect('return window.scrollX').to.be.a('number')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Chai Exec for Synchronous CLI Testing\nDESCRIPTION: Example of using Chai Exec to test a CLI synchronously, demonstrating various assertion styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exec.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chaiExec = require(\"@jsdevtools/chai-exec\");\nconst chai = require(\"chai\");\n\nchai.use(chaiExec);\n\ndescribe(\"My CLI\", () => {\n  it(\"should exit with a zero exit code\", () => {\n    // Run your CLI\n    let myCLI = chaiExec('my-cli --arg1 --arg2 \"some other arg\"');\n\n    // Should syntax\n    myCLI.should.exit.with.code(0);\n    myCLI.stdout.should.contain(\"Success!\");\n    myCLI.stderr.should.be.empty;\n\n    // Expect sytnax\n    expect(myCLI).to.exit.with.code(0);\n    expect(myCLI).stdout.to.contain(\"Success!\");\n    expect(myCLI).stderr.to.be.empty;\n\n    // Assert syntax\n    assert.exitCode(myCLI, 0);\n    assert.stdout(myCLI, \"Success!\");\n    assert.stderr(myCLI, \"\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Reusing an Existing AJV Instance with chai-json-schema-ajv\nDESCRIPTION: Example showing how to pass an existing AJV instance to the plugin. This allows for reusing the same AJV instance across different parts of the application.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema_ajv.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ajv = new Ajv\n...\nchai.use(\n  require('chai-json-schema-ajv').create({\n    ajv\n  })\n)\n...\n\nassert.ok(ajv === chai.ajv)\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Promise-Based Response Handling\nDESCRIPTION: Example of making an HTTP request and handling the response with promises. This provides a cleaner syntax for handling asynchronous operations.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .put('/user/me')\n  .send({ password: '123', confirmPassword: '123' })\n  .then((res) => {\n     expect(res).to.have.status(200);\n  })\n  .catch((err) => {\n     throw err;\n  });\n```\n\n----------------------------------------\n\nTITLE: Status Assertion Example\nDESCRIPTION: Example showing how to assert HTTP response status code\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_superagent.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(res).to.have.status(200);\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up Chai as Promised in Node.js\nDESCRIPTION: Shows how to install and configure the chai-as-promised plugin in a Node.js environment. Demonstrates the various assertion styles available after setup (expect, assert, should).\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar chaiAsPromised = require(\"chai-as-promised\");\n\nchai.use(chaiAsPromised);\n\n// Then either:\nvar expect = chai.expect;\n// or:\nvar assert = chai.assert;\n// or:\nchai.should();\n// according to your preference of assertion style\n```\n\n----------------------------------------\n\nTITLE: Asserting Paths are Directories with Equal Content using Chai\nDESCRIPTION: Examples of asserting that two paths exist, are directories, and contain the same contents using expect/should/assert styles in chai-fs. Includes options for deep equality checking and negation patterns.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-fs.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.directory(?msg).and.equal(otherPath, ?msg);\nexpect(path).to.be.a.directory(?msg).and.not.equal(otherPath, ?msg);\nexpect(path).to.be.a.directory(?msg).and.deep.equal(otherPath, ?msg);\nexpect(path).to.be.a.directory(?msg).and.not.deep.equal(otherPath, ?msg);\n\npath.should.be.a.directory(?msg).and.equal(otherPath, ?msg);\npath.should.be.a.directory(?msg).and.not.equal(otherPath, ?msg);\npath.should.be.a.directory(?msg).and.deep.equal(otherPath, ?msg);\npath.should.be.a.directory(?msg).and.not.deep.equal(otherPath, ?msg);\n\nassert.directoryEqual(path, otherPath, ?msg);\nassert.notDirectoryEqual(path, otherPath, ?msg);\nassert.directoryDeepEqual(path, otherPath, ?msg);\nassert.notDirectoryDeepEqual(path, otherPath, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Working with Non-Promise-Friendly Test Runners using notify\nDESCRIPTION: Approach for using Chai as Promised with test frameworks that don't support returned promises, using the notify method to signal test completion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"should be fulfilled\", function (done) {\n    promise.should.be.fulfilled.and.notify(done);\n});\n\nit(\"should be rejected\", function (done) {\n    otherPromise.should.be.rejected.and.notify(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Chainable Method Assertion in Chai\nDESCRIPTION: Shows how to create a chainable 'age' assertion that can function as both a property and a method for model age checks.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/helpers.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction assertModelAge (n) {\n  // make sure we are working with a model\n  new Assertion(this._obj).to.be.instanceof(Model);\n\n  // make sure we have an age and its a number\n  const age = this._obj.get('age');\n  new Assertion(age).to.be.a('number');\n\n  // do our comparison\n  this.assert(\n      age === n\n    , \"expected #{this} to have age #{exp} but got #{act}\"\n    , \"expected #{this} to not have age #{act}\"\n    , n\n    , age\n  );\n}\n\nfunction chainModelAge () {\n  utils.flag(this, 'model.age', true);\n}\n\nAssertion.addChainableMethod('age', assertModelAge, chainModelAge);\n```\n\n----------------------------------------\n\nTITLE: Initializing Chai SuperAgent Plugin\nDESCRIPTION: Example showing how to import and initialize the chai-superagent plugin with Chai. The plugin accepts an optional strict parameter that defaults to true.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_superagent.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { use } from 'chai';\nimport superagent from 'chai-superagent';\n\nuse(superagent());\n```\n\n----------------------------------------\n\nTITLE: Asserting Inequality of Immutable Collections (JavaScript)\nDESCRIPTION: Shows how to use .notEqual(), .notStrictEqual(), and .notDeepEqual() to assert that two immutable collections are not equal based on their values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = List.of(1, 2, 3);\nconst b = List.of(4, 5, 6);\nassert.notEqual(a, b);\n```\n\n----------------------------------------\n\nTITLE: Deep Comparing Iterator Sequences with assert.deepIteratesOver() in JavaScript\nDESCRIPTION: Demonstrates using assert.deepIteratesOver() to check iterator sequences using deep equality for objects and arrays within the iterations.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nassert.deepIteratesOver([{n: 2}, {n: 3}], [{n: 2}, {n: 3}]);\nassert.deepIteratesOver([[0, 2], [1, 3]], [[0, 2], [1, 3]]);\n```\n\n----------------------------------------\n\nTITLE: Installing Sinon assertions into Chai's assert object\nDESCRIPTION: Example demonstrating how to install Sinon.JS assertions directly into Chai's assert object using expose method, eliminating the need for Sinon-Chai with the assert interface.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_es.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\n\nsinon.assert.expose(chai.assert, { prefix: \"\" });\n```\n\n----------------------------------------\n\nTITLE: Installing Chai HTTP Plugin via npm\nDESCRIPTION: Command to install the Chai HTTP plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-http\n```\n\n----------------------------------------\n\nTITLE: Using Sinon.JS Assertions with Chai\nDESCRIPTION: Demonstrates the difference between using Sinon.JS assertions directly and using Sinon-Chai assertions with Chai's should and expect interfaces.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_joethefkingfrypan_sinon_chai.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsinon.assert.calledWith(mySpy, \"foo\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmySpy.calledWith(\"foo\").should.be.ok;\nexpect(mySpy.calledWith(\"foo\")).to.be.ok;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmySpy.should.have.been.calledWith(\"foo\");\nexpect(mySpy).to.have.been.calledWith(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Real-world Image Service Test - TypeScript\nDESCRIPTION: Complete example showing how to test an image transformation service using chai-image\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_image.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Real-world Example\nimport * as sharp from \"sharp\";\n\nclass ImageService {\n  public async transform(buf: Buffer): Promise<Buffer> {\n    return await sharp(buf).resize().max(320, 320).png().toBuffer();\n  }\n}\n\nconst service = new ImageService();\n\ndescribe(\"ImageService\", () => {\n  describe(\"#transform\", () => {\n    it(\"should transform image\", async () => {\n      const input = fs.readFileSync(\"fixtures/input.png\");\n      const output = fs.readFileSync(\"fixtures/output.png\");\n      \n      expect(await service.transform(input)).to.matchImage(output);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Promise Testing with Chai as Promised using Notify Pattern\nDESCRIPTION: Alternative pattern for Chai as Promised when 'return' is not preferred or possible. Uses 'notify' to signal test completion to frameworks that use callbacks.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomethingAsync().should.eventually.equal(\"foo\").notify(done);\n```\n\n----------------------------------------\n\nTITLE: Using deep-equal-in-any-order with Chai assert\nDESCRIPTION: Example of how to use the deep-equal-in-any-order plugin with Chai's assert style. It shows various equality assertions for arrays and nested objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/deep_equal_in_any_order.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst deepEqualInAnyOrder = require('deep-equal-in-any-order');\nconst chai = require('chai');\n\nchai.use(deepEqualInAnyOrder);\n\nconst { assert } = chai;\n\nassert.deepEqualInAnyOrder([1, 2], [2, 1]);\nassert.notDeepEqualInAnyOrder(1, 2], [2, 1, 3]);\nassert.deepEqualInAnyOrder({ foo: [1, 2], bar: [4, 89, 22] }, { foo: [2, 1], bar: [4, 22, 89] });\nassert.deepEqualInAnyOrder({ foo: ['foo-1', 'foo-2', [1, 2], null ] }, { foo: [null, [1, 2], 'foo-1', 'foo-2'] });\nassert.deepEqualInAnyOrder({ foo: [1, 2], bar: { baz: ['a', 'b', { lorem: [5, 6] }] } }, { foo: [2, 1], bar: { baz: ['b', 'a', { lorem: [6, 5] }] } });\n```\n\n----------------------------------------\n\nTITLE: Using data assertion with jQuery elements\nDESCRIPTION: Shows how to assert data attributes on jQuery elements using the data assertion. Can verify existence or specific values and supports chaining with regex matching.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n$('#header').should.have.data('foo');\nexpect($('body')).to.have.data('foo', 'bar');\nexpect($('body')).to.have.data('foo').match(/bar/);\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Iterator End Sequence\nDESCRIPTION: Examples of asserting deep equality in iteration ending values using deepIteratesUntil and doesNotDeepIterateUntil assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nassert.deepIteratesUntil([{n: 2}, {n: 3}], [{n: 3}]);\nassert.deepIteratesUntil([[0, 2], [1, 3]], [[1, 3]]);\nassert.doesNotDeepIterateUntil([{n: 2}, {n: 3}], [{n: 5}]);\nassert.doesNotDeepIterateUntil([[0, 2], [1, 3]], [[0, 2]]);\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Usage Example\nDESCRIPTION: Demonstrates how to use the plugin in a test suite with before and after hooks.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_assertions_count.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiAssertionsCount = require('chai-assertions-count');\nchai.use(chaiAssertionsCount);\n\ndescribe('suite #2', () => {\n  beforeEach(() => {\n    chai.Assertion.resetAssertsCheck();\n  });\n  afterEach(() => {\n    // you don't need both of them\n    chai.Assertion.checkAssertionsCount();\n    chai.Assertion.checkExpectsCount();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: UUID Validation Using Chai's Assert Interface\nDESCRIPTION: Examples demonstrating UUID validation with Chai's assert style interface. Shows how to validate a specific UUID version and how to use the general guid() assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_uuid.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require(\"chai\");\nchai.use(require('chai-uuid'));\nconst assert = chai.assert;\n\n// validate UUID v1\nassert.uuid('bd74c8da-4d9e-11e7-b114-b2f933d5fe66', 'v1');\n\n// validate GUID\nassert.guid('bd74c8da-4d9e-11e7-b114-b2f933d5fe66');\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Progress with Sinon and Sinon-Chai (JavaScript)\nDESCRIPTION: Example of how to test promise progress callbacks using Sinon.JS and Sinon-Chai, as chai-as-promised doesn't have built-in support for this.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar progressSpy = sinon.spy();\n\nreturn promise.then(null, null, progressSpy).then(function () {\n    progressSpy.should.have.been.calledWith(\"33%\");\n    progressSpy.should.have.been.calledWith(\"67%\");\n    progressSpy.should.have.been.calledThrice;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Chai Exec in JavaScript\nDESCRIPTION: Demonstrates how to use Chai Exec to test a CLI application's exit code, stdout, and stderr using different assertion styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jsdevtools_chai_exec.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chaiExec = require(\"@jsdevtools/chai-exec\");\nconst chai = require(\"chai\");\n\nchai.use(chaiExec);\n\ndescribe(\"My CLI\", () => {\n  it(\"should exit with a zero exit code\", () => {\n    // Run your CLI\n    let myCLI = chaiExec('my-cli --arg1 --arg2 \"some other arg\"');\n\n    // Should syntax\n    myCLI.should.exit.with.code(0);\n    myCLI.stdout.should.contain(\"Success!\");\n    myCLI.stderr.should.be.empty;\n\n    // Expect sytnax\n    expect(myCLI).to.exit.with.code(0);\n    expect(myCLI).stdout.to.contain(\"Success!\");\n    expect(myCLI).stderr.to.be.empty;\n\n    // Assert syntax\n    assert.exitCode(myCLI, 0);\n    assert.stdout(myCLI, \"Success!\");\n    assert.stderr(myCLI, \"\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Including Chai-Datetime in Node.js Environment\nDESCRIPTION: JavaScript code snippet showing how to require and use the chai-datetime plugin in a Node.js environment. It demonstrates importing the chai library and registering the plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_datetime.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-datetime'));\n```\n\n----------------------------------------\n\nTITLE: Using data() assertion with jQuery elements\nDESCRIPTION: Examples of using the data() assertion to check if a jQuery element has a specific data value and optionally verify its value. The return value is available for chaining.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n$('#header').should.have.data('foo');\nexpect($('body')).to.have.data('foo', 'bar');\nexpect($('body')).to.have.data('foo').match(/bar/);\n```\n\n----------------------------------------\n\nTITLE: Using chai-subset-in-order Plugin with Chai\nDESCRIPTION: Demonstrates how to initialize and use the chai-subset-in-order plugin with Chai assertion library. Shows various examples of matching object properties and arrays while maintaining order.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_subset_in_order.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiSubsetInOrder = require('chai-subset-in-order');\n\nchai.use(chaiSubsetInOrder);\nconst expect = chai.expect;\n\nexpect({ foo: 2, bar: 3 }).to.containSubsetInOrder({ foo: 2 });\nexpect({ foo: 2, bar: 3 }).to.containSubsetInOrder({ bar: 3 });\nexpect({ foo: 2, bar: 3 }).to.containSubsetInOrder({ foo:2, bar: 3 });\nexpect({ foo: 2, bar: 3 }).to.not.containSubsetInOrder({ foo: 5 });\nexpect([{ foo: 123, bar: 456 }, { baz: 111 }]).to.containSubsetInOrder([{ foo: 123 }]);\nexpect([{ foo: 123, bar: 456 }, { baz: 111 }]).to.containSubsetInOrder([{ bar: 456 }]);\nexpect([{ foo: 123, bar: 456 }, { baz: 111 }]).to.containSubsetInOrder([{ foo: 123 }, { baz: 111 }]);\nexpect([{ foo: 123, bar: 456 }, { baz: 111 }]).to.not.containSubsetInOrder([{ baz: 111 }, { foo: 123 }]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Chai-BN Plugin\nDESCRIPTION: Setup code to enable chai-bn plugin and inject BN.js dependency into Chai assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bn.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst BN = require('bn.js');\n\n// Enable and inject BN dependency\nchai.use(require('chai-bn')(BN));\n```\n\n----------------------------------------\n\nTITLE: Testing Generators with chai-generator Plugin in JavaScript\nDESCRIPTION: Shows the simplified way of testing generators using the chai-generator plugin. It demonstrates how to check yielded and returned values with more concise syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_generator.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(generator).to.yield(15)\nexpect(generator).to.return(-1)\n```\n\n----------------------------------------\n\nTITLE: Using BDD and TDD Syntax with chai-string\nDESCRIPTION: Example of assertion syntax variations showing both BDD and TDD styles for string comparisons.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar d1 = 'abcdef',\n    d2 = 'abc';\n\nd1.should.startWith.d2\nexpect(d1).to.startsWith(d2)\nassert.startsWith(d1, d2)\n```\n\n----------------------------------------\n\nTITLE: Adding schemas to chai-json-schema's tv4 validator\nDESCRIPTION: Shows how to access the tv4 instance exposed by chai-json-schema and add schemas for use in validations.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-json-schema.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nchai.tv4.addSchema(uri, schema);\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await with chai-fetch\nDESCRIPTION: Example showing how to make HTTP tests more readable using async/await syntax with chai-fetch. This approach simplifies the test code by removing nested promises.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fetch.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('should match responses with matching bodies', async () => {\n    await mockServer.get('/match').thenReply(200, 'matching body');\n\n    await expect(fetch('http://localhost:8080/match')).to.have.responseText('matching body');\n});\n```\n\n----------------------------------------\n\nTITLE: Using like() assertion with objects\nDESCRIPTION: Examples of using the like() assertion to compare object attributes and values rather than checking references. Shows usage with should, expect, and assert styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fuzzy.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar subject = {a: 'a'};\nsubject.should.be.like({a: 'a'});\nsubject.should.not.be.like({x: 'x'});\nsubject.should.not.be.like({a: 'a', b: 'b'});\n\nexpect(subject).to.be.like({a: 'a'});\nexpect(subject).not.to.be.like({x: 'x'});\nexpect(subject).not.to.be.like({a: 'a', b: 'b'});\n\nassert.like(subject, {a: 'a'});\nassert.notLike(subject, {x: 'x'});\nassert.notLike(subject, {a: 'a', b: 'b'});\n```\n\n----------------------------------------\n\nTITLE: Configuring API Contract Validator with Multiple Definition Files\nDESCRIPTION: Example showing how to configure the api-contract-validator to use multiple API definition files by providing an array of file paths.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/api_contract_validator.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst apiDefinitionsPath = [path.join(__dirname, 'myApp.yaml'), path.join(__dirname, 'myApp2.yaml')];\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of chai-shallowly with JSX Components\nDESCRIPTION: Demonstrates the basic syntax for using chai-shallowly to test React components with a chai-like assertion style. The code shows how to check if a component has a specific CSS class.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_shallowly.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nlet component = <Foo />;\nexpect(component).to.shallowly.haveClass(\"this-is-a-class\");\n```\n\n----------------------------------------\n\nTITLE: Complete Example Using Chai's Expect Interface\nDESCRIPTION: Demonstrates a complete test example using Sinon-Chai with Chai's expect interface to test a function that takes a callback.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nvar expect = chai.expect;\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        expect(cb).to.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Chai Plugin Utilities in JavaScript\nDESCRIPTION: Demonstrates how to access Chai's plugin utilities by using the chai.use() method, which accepts a function that receives the chai object and utils object as parameters.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchai.use(function (_chai, utils) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Chai Plugin Utilities in JavaScript\nDESCRIPTION: Demonstrates how to access Chai's plugin utilities by using the chai.use() method, which accepts a function that receives the chai object and utils object as parameters.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchai.use(function (_chai, utils) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Trigger Assertions in Backbone Testing\nDESCRIPTION: Shows how to chain multiple trigger assertions to test that a model triggers multiple events or to verify that certain events are not triggered during an operation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_backbone.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodel.should.trigger(\"change\").and.trigger(\"change:attribute\").when(function() {\n  model.set({ attribute: \"value\" });\n});\n\nmodel.should.trigger(\"change\").and.not.trigger(\"reset\").when(function() {\n  model.set({ attribute: \"value\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Character Set in HTTP Request or Response\nDESCRIPTION: Example of asserting that an HTTP request or response has a specific character set. This is important for ensuring proper text encoding.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(req).to.have.charset('utf-8');\n```\n\n----------------------------------------\n\nTITLE: Using .capture() Method with expect and should Style\nDESCRIPTION: Examples demonstrating how to use the .capture() method to make assertions on specific regex capture groups after a successful match, using both expect and should assertion styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_match.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('some thing to test').to.match(/some (\\w+) to test/).and.capture(0).equals('thing');\n'Here in London'.should.match(/(here|there) in (\\w+)/i).and.capture(1).equals('London');\n```\n\n----------------------------------------\n\nTITLE: Setting up chai-graphql plugin\nDESCRIPTION: Code to import and setup the chai-graphql plugin with Chai assertion library\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_graphql.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport chai from 'chai'\nimport chaiGraphQL from 'chai-graphql'\nchai.use(chaiGraphQL)\n```\n\n----------------------------------------\n\nTITLE: Header Assertion Examples\nDESCRIPTION: Examples showing different ways to assert HTTP headers including specific values and regex patterns\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_superagent.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(req).to.have.header('x-api-key');\nexpect(req).to.have.header('content-type', 'text/plain');\nexpect(req).to.have.header('content-type', /^text/);\n```\n\n----------------------------------------\n\nTITLE: Configuring chai-change Plugin in Node.js\nDESCRIPTION: Shows how to configure and use the chai-change plugin in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_change.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\n\nchai.use(require('chai-change'));\n```\n\n----------------------------------------\n\nTITLE: Basic Image Assertion Example - TypeScript\nDESCRIPTION: Basic example showing how to use the matchImage assertion to compare two images\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_image.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(bufImage).to.matchImage(bufExpectedImage);\n```\n\n----------------------------------------\n\nTITLE: Integrating API Contract Validator with Chai.js\nDESCRIPTION: Example showing how to use the api-contract-validator as a Chai.js plugin. This demonstrates loading the plugin, defining the API definitions path, and using it in a test case.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/api_contract_validator.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst matchApiSchema = require('api-contract-validator').chaiPlugin;\nconst path = require('path');\nconst { expect, use } = require('chai');\n\n// API definitions path\nconst apiDefinitionsPath = path.join(__dirname, 'myApp.yaml'); \n\n// add as chai plugin\nuse(matchApiSchema({ apiDefinitionsPath }));\n\nit('GET /pets/123', async () => {\n    const response = await request.get('/pet/123');\n    expect(response).to.have.status(200).and.to.matchApiSchema();\n\n    // alternatively pass\n    const { statusCode, headers, body } = response\n    expect({\n        path: '/pet/123',\n        method: 'get',\n        status: statusCode,\n        body: body,\n        headers: headers,\n    }).to.have.status(200).and.to.matchApiSchema();\n})\n```\n\n----------------------------------------\n\nTITLE: Using value assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting the value of form elements using the value assertion which utilizes jQuery's val method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n$('.name').should.have.value('John Doe');\nexpect($('.year')).to.have.value('2012');\n```\n\n----------------------------------------\n\nTITLE: Setting Up chai-react-element with ES6\nDESCRIPTION: Shows how to install and configure the chai-react-element plugin in an ES6 environment. Imports chai and the plugin, then configures chai to use it.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_react_element.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport chai, {expect} from 'chai';\nimport matcher from 'chai-react-element';\nchai.use(matcher);\n```\n\n----------------------------------------\n\nTITLE: Promise-Specific Assertions with Should Interface\nDESCRIPTION: Specialized assertions for working with promises including testing for fulfillment, rejection, and deep equality of resolved values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn promise.should.be.fulfilled;\nreturn promise.should.eventually.deep.equal(\"foo\");\nreturn promise.should.become(\"foo\"); // same as `.eventually.deep.equal`\nreturn promise.should.be.rejected;\nreturn promise.should.be.rejectedWith(Error); // other variants of Chai's `throw` assertion work too.\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Types to Better Shallow Deep Equal in JavaScript\nDESCRIPTION: Demonstrates how to use the addType API to register custom types for special handling during comparison, extending the plugin's capabilities for specific testing needs.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_better_shallow_deep_equal.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chaiBetterShallowDeepEqual = require(\"chai-better-shallow-deep-equal\");\n\nchaiBetterShallowDeepEqual.addType({\n  name: \"CustomDate\",\n  base: \"date\",\n  identify: obj => obj && obj._isCustomDate\n});\n```\n\n----------------------------------------\n\nTITLE: Using value assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting the value of form elements using the value assertion which utilizes jQuery's val method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n$('.name').should.have.value('John Doe');\nexpect($('.year')).to.have.value('2012');\n```\n\n----------------------------------------\n\nTITLE: Larger Element Count Comparison in Chai WebDriver\nDESCRIPTION: Tests if the number of elements matching the selector is larger than the provided number.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.have.larger.count(0)\n```\n\n----------------------------------------\n\nTITLE: Using endsWith/endWith Assertion\nDESCRIPTION: Examples of the endsWith/endWith assertion in different syntax styles to verify if a string ends with a specific substring.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nassert.endsWith('abcdef', 'def');\nexpect('abcdef').to.endsWith('def');\n'abcdef'.should.endWith('def');\n```\n\n----------------------------------------\n\nTITLE: Using Chai-SamSam for Deep Matching in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to use chai-samsam for deep matching assertions. It shows importing the libraries, setting up Chai with the plugin, and examples of passing and failing assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_samsam.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst chai = require('chai')\nconst chaiSamSam = require('chai-samsam')\n\nchai.use(chaiSamSam)\n\nexpect([{\n  firstName: 'John',\n  lastName: 'Doe',\n  jobs: [{ bartender: true, barista: true }]\n}]).to.deep.match([\n  { jobs: [{ barista: true }] }\n])\n// =>  pass\n\nexpect([{\n  firstName: 'John',\n  lastName: 'Doe',\n  jobs: [{ bartender: true, barista: true }]\n}]).to.not.deep.match([\n  { jobs: [{ pilot: true }] }\n])\n// =>  pass\n\n// also possible\nassert.deepMatch(a, b)\nassert.notDeepMatch(a, b)\n```\n\n----------------------------------------\n\nTITLE: Handling Responses with Promises in Chai HTTP\nDESCRIPTION: Demonstrates how to use Promise-based syntax for handling responses from chai-http requests, including chaining and error handling.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/natanavra_chai_http.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .put('/user/me')\n  .send({ password: '123', confirmPassword: '123' })\n  .then(function (res) {\n     expect(res).to.have.status(200);\n  })\n  .catch(function (err) {\n     throw err;\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing chai-exclude with TypeScript\nDESCRIPTION: Example showing how to import the chai-exclude plugin in TypeScript, noting that type definitions are included with the package.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exclude.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as chai from 'chai';\nimport chaiExclude from 'chai-exclude';\n\nchai.use(chaiExclude);\n\n// The typings for chai-exclude are included with the package itself.\n```\n\n----------------------------------------\n\nTITLE: Setting up chai-eventemitter2 in test environment\nDESCRIPTION: JavaScript code to set up the chai-eventemitter2 plugin in the test environment. It requires chai and the plugin, then uses the plugin with chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_eventemitter_.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst eventemitter2 = require('chai-eventemitter2');\n\nchai.use(eventemitter2());\n```\n\n----------------------------------------\n\nTITLE: Using checked assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting that a jQuery element (typically a checkbox or radio) is checked using the checked assertion which uses jQuery's :checked selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n$('.checked').should.be.checked;\nexpect($('input')).not.to.be.checked;\n```\n\n----------------------------------------\n\nTITLE: Using sorted() assertion with Chai\nDESCRIPTION: Examples showing how to check if an array is sorted, with optional custom sorting function.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_ermeschultz_chai_arrays.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.sorted();\nexpect([1, 2, 4, 3]).not.to.be.sorted();\n\nexpect([3, 2, 1]).to.be.sorted((prev, next) => prev < next); // sorting based on the provided function\n```\n\n----------------------------------------\n\nTITLE: Comparing ES6 Set Objects with shallowDeepEqual in JavaScript\nDESCRIPTION: Shows how the plugin handles ES6 Set objects, identifying both missing and extra elements when comparing Sets structurally.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_better_shallow_deep_equal.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new Set([\"foo\", \"baz\"])).to.shallowDeepEqual(\n  new Set([\"foo\", \"bar\"])\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing the AJV Instance from chai-json-schema-ajv\nDESCRIPTION: Example showing how to access the AJV instance that the plugin is using. This can be useful for performing additional operations with the AJV instance directly.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema_ajv.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n...\nchai.use(\n  require('chai-json-schema-ajv')\n)\n...\n\nassert.ok(chai.ajv instanceof Ajv)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Transformation of Asserter Arguments\nDESCRIPTION: Advanced example of asynchronously transforming asserter arguments to enable promise-to-promise comparisons using Promise.all to handle promise resolution.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// This will normally fail, since within() only works on numbers.\nPromise.resolve(2).should.eventually.be.within(Promise.resolve(1), Promise.resolve(6));\n\nchaiAsPromised.transformAsserterArgs = function (args) {\n    return Promise.all(args);\n};\n\n// But now it will pass, since we transformed the array of promises for numbers into\n// (a promise for) an array of numbers\nPromise.resolve(2).should.eventually.be.within(Promise.resolve(1), Promise.resolve(6));\n```\n\n----------------------------------------\n\nTITLE: Using checked assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting that a jQuery element (typically a checkbox or radio) is checked using the checked assertion which uses jQuery's :checked selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n$('.checked').should.be.checked;\nexpect($('input')).not.to.be.checked;\n```\n\n----------------------------------------\n\nTITLE: Asserting Iterator Length with assert.lengthOf() in JavaScript\nDESCRIPTION: Demonstrates how to use assert.lengthOf() with custom iterators to verify the number of yielded values. Works with generator functions and other iterables.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* range(min=0, max=Infinity, step=1) {\n  for (let n = min; n < max; n += step) {\n    yield n;\n  }\n}\n\nassert.lengthOf(range(0, 10), 10);\nassert.lengthOf(range(6, 42), 36);\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Error Messages in chai-json-schema-ajv\nDESCRIPTION: Example showing how to configure the plugin to provide more detailed error messages by enabling the verbose option, which will print the full error objects instead of just the error text.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema_ajv.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n...\nchai.use(\n  require('chai-json-schema-ajv').create({\n    verbose: true\n  })\n)\n...\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality with bn-chai\nDESCRIPTION: Examples of using the 'eq' assertion with bn-chai to check for equality between BN.js decimals.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new BN('1')).to.eq.BN(1);\nexpect(new BN('1')).not.to.eq.BN(0);\n```\n\n----------------------------------------\n\nTITLE: Using prop assertion with jQuery elements\nDESCRIPTION: Shows how to verify that a jQuery element has a specific property using the prop assertion. Can check for existence or a specific value and supports chaining for additional assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n$('#header').should.have.prop('disabled');\nexpect($('body')).to.have.prop('disabled', false);\nexpect($('body')).to.have.prop('value').match(/bar/);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chai-WebDriver with Selenium in JavaScript\nDESCRIPTION: Demonstrates how to set up chai-webdriver with selenium-webdriver. Creates a webdriver instance, configures chai to use the chai-webdriver plugin, and performs a basic assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Start with a webdriver instance:\nvar sw = require('selenium-webdriver');\nvar driver = new sw.Builder()\n  .withCapabilities(sw.Capabilities.chrome())\n  .build()\n\n// And then...\nvar chai = require('chai');\nvar chaiWebdriver = require('chai-webdriver');\nchai.use(chaiWebdriver(driver));\n\n// And you're good to go!\ndriver.get('http://github.com');\nchai.expect('#site-container h1.heading').dom.to.not.contain.text(\"I'm a kitty!\");\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Subset Plugin with npm\nDESCRIPTION: Command to install the chai-subset plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_subset.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev chai-subset\n```\n\n----------------------------------------\n\nTITLE: Basic Chai WebDriver Assertions in JavaScript\nDESCRIPTION: Examples of basic assertions using chai-webdriver-promised to check text content and visibility of elements.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('.frequency-field').dom.to.contain.text('One time')\nexpect('.toggle-pane').dom.to.eventually.not.be.visible()\n```\n\n----------------------------------------\n\nTITLE: Installing and Using chai-js-factories in Node.js\nDESCRIPTION: This snippet shows how to install chai-js-factories using npm and then require and use it in a Node.js environment. It demonstrates the basic setup for integrating the plugin with Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_js_factories.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar chaiJsFactories = require('chai-js-factories');\nchai.use(chaiJsFactories);\n```\n\n----------------------------------------\n\nTITLE: Using ascending property for simple syntax\nDESCRIPTION: Demonstrates the property syntax for testing if an array is sorted in ascending order.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sorted.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([\"a\",\"b\"]).to.be.ascending\n```\n\n----------------------------------------\n\nTITLE: Asserting array size with chai-arrays\nDESCRIPTION: Example of using the ofSize assertion to check the length of an array.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_arrays.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.ofSize(3);\nexpect([1, 2, 3]).not.to.be.ofSize(5);\n```\n\n----------------------------------------\n\nTITLE: Using @thiscode/chai-subset with expect Interface\nDESCRIPTION: Demonstrates usage of the containSubset assertion with the expect interface, including basic object comparison, comparison using functions, and negated assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_thiscode_chai_subset.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = {\n\ta: 'b',\n\tc: 'd',\n\te: {\n\t\tfoo: 'bar',\n\t\tbaz: {\n\t\t\tqux: 'quux'\n\t\t}\n\t}\n};\n\t\nexpect(obj).to.containSubset({\n\ta: 'b',\n\te: {\n\t\tbaz: {\n\t\t\tqux: 'quux'\n\t\t}\n\t}\n});\n\n// or using a compare function\nexpect(obj).containSubset({\n\ta: (expectedValue) => expectedValue,\n\tc: (expectedValue) => expectedValue === 'd'\n})\n\n// or with 'not'\nexpect(obj).to.not.containSubset({\n\tg: 'whatever'\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting array size with chai-arrays\nDESCRIPTION: Example of using the ofSize assertion to check the length of an array.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_arrays.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.ofSize(3);\nexpect([1, 2, 3]).not.to.be.ofSize(5);\n```\n\n----------------------------------------\n\nTITLE: Using palindrome Assertion\nDESCRIPTION: Examples of the palindrome assertion to verify if a string reads the same forward and backward.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nassert.palindrome('abccba');\nexpect('abccba').to.be.palindrome();\n```\n\n----------------------------------------\n\nTITLE: Deep almost equality assertions\nDESCRIPTION: Examples of deep equality assertions using the almost matcher with nested objects and arrays\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_almost.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect({ taco: 'pastor', num: 3.9999999 }).to.almost.eql({ taco: 'pastor', num: 4 }); // passes\nexpect([[1, 2, 2.9999999], 1.0000001]).to.be.deep.almost([[1, 2, 3], 1]);             // passes\nexpect({ taco: 'pastor', num: 3.9 }).to.not.almost.eql({ taco: 'pastor', num: 4 });   // passes\n```\n\n----------------------------------------\n\nTITLE: Using Sinon.JS Assertions with Chai's Assert Interface\nDESCRIPTION: Shows how to install Sinon.JS assertions directly into Chai's assert object using the expose method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_joethefkingfrypan_sinon_chai.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\n\nsinon.assert.expose(chai.assert, { prefix: \"\" });\n```\n\n----------------------------------------\n\nTITLE: Using Sinon-Chai assertions\nDESCRIPTION: Elegant examples of using Sinon-Chai to create readable assertions with both should and expect syntax styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_es.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmySpy.should.have.been.calledWith(\"foo\");\nexpect(mySpy).to.have.been.calledWith(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Using reverseOf Assertion\nDESCRIPTION: Examples of the reverseOf assertion to verify if a string is the reverse of another string.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nassert.reverseOf('abcdef', 'fedcba');\nexpect('abcdef').to.be.reverseOf('fedcba');\n```\n\n----------------------------------------\n\nTITLE: Using Number type assertions\nDESCRIPTION: Examples of using the number() assertion to verify that values are of Number type.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(1).to.be.number();\nexpect(0).to.be.number();\nexpect(-1).to.be.number();\nexpect(63465789908753).to.be.number();\nexpect(27.11).to.be.number();\n```\n\n----------------------------------------\n\nTITLE: Including Chai Spies in Browser\nDESCRIPTION: Shows how to include the chai-spies library in a browser environment after loading the main Chai library.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<script src=\"chai-spies.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Partial URL Path Matching with Chai URL\nDESCRIPTION: Shows how to use the contains clause for partial matching of URL components. This example demonstrates checking if a URL path contains a specific substring.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_url.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('http://example.com/foo/bar').to.contain.path('/foo');\n```\n\n----------------------------------------\n\nTITLE: Excluding Multiple Properties from Objects and Arrays\nDESCRIPTION: Examples demonstrating how to exclude multiple top-level properties from objects and arrays using both assert and expect styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exclude.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  a: 'a',\n  b: 'b',\n  c: {\n    d: 'd',\n    e: 'e'\n  }\n}\n\n// Object\nassert.deepEqualExcluding(obj, { b: 'b' }, ['a', 'c'])\nassert.deepEqualExcluding(obj, { a: 'z', b: 'b' }, ['a', 'c'])\n\nexpect(obj).excluding(['a', 'c']).to.deep.equal({ b: 'b' })\nexpect(obj).excluding(['a', 'c']).to.deep.equal({ a: 'z', b: 'b' })\n\nconst array = [\n  {\n    a: 'a',\n    b: 'b',\n    c: {\n      d: 'd',\n      e: 'e'\n    }\n  }\n]\n\n// Array\nassert.deepEqualExcluding(array, [{ b: 'b' }], ['a', 'c'])\nassert.deepEqualExcluding(array, [{ a: 'z', b: 'b' }], ['a', 'c'])\n\nexpect(array).excluding(['a', 'c']).to.deep.equal([{ b: 'b' }])\nexpect(array).excluding(['a', 'c']).to.deep.equal([{ a: 'z', b: 'b' }])\n```\n\n----------------------------------------\n\nTITLE: UUID Validation Using Chai's Should Interface\nDESCRIPTION: Examples showing how to validate UUIDs using Chai's should assertion style. Demonstrates both specific version validation and general UUID format validation with guid().\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_uuid.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require(\"chai\");\nchai.use(require('chai-uuid'));\nconst should = chai.should();\n\n// validate UUID v1\n'bd74c8da-4d9e-11e7-b114-b2f933d5fe66'.should.be.a.uuid('v1');\n\n// validate GUID\n'bd74c8da-4d9e-11e7-b114-b2f933d5fe66'.should.be.a.guid();\n```\n\n----------------------------------------\n\nTITLE: Using class assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting that a jQuery element has a specific CSS class using the class assertion which utilizes jQuery's hasClass method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n$('#header').should.have.class('foo');\nexpect($('body')).to.have.class('foo');\n```\n\n----------------------------------------\n\nTITLE: Handling Length and Arguments Assertions with Dirty Chai\nDESCRIPTION: Example of a limitation with length and arguments assertions and the recommended workaround to use multiple assertion statements.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai__.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyArray.should.exist.and.should.have.length(3); // Error: length is not a function\n\n// Do two assert statements instead\nmyArray.should.exist();\nmyArray.should.have.length(3);\n```\n\n----------------------------------------\n\nTITLE: Plugin Integration Example\nDESCRIPTION: Example showing proper integration with other Chai plugins like chai-as-promised and dirty-chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiAsPromised = require('chai-as-promised');\nconst chaiImmutable = require('chai-immutable');\nconst dirtyChai = require('dirty-chai');\nconst { expect } = chai;\n\nchai.use(chaiImmutable);\nchai.use(chaiAsPromised);\nchai.use(dirtyChai);\n\nconst { List } = require('immutable');\n\n/* ... */\n\nexpect(Promise.resolve(List.of(1, 2, 3))).to.eventually.have.size(3);\nexpect(true).to.be.true();\n```\n\n----------------------------------------\n\nTITLE: Integrating chai-webdriver-exec with Chai\nDESCRIPTION: Shows how to import and integrate the chai-webdriver-exec plugin with Chai, passing the WebDriver instance to the plugin function.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_exec.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar chaiWebdriverExec = require('chai-webdriver-exec')\nchai.use(chaiWebdriverExec(driver))\n```\n\n----------------------------------------\n\nTITLE: Asserting a Spy Was Called Exactly N Times\nDESCRIPTION: Shows how to assert that a spy was called exactly n times, using both positive and negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.exactly(3);\nexpect(spy).to.not.have.been.called.exactly(3);\nspy.should.have.been.called.exactly(3);\nspy.should.not.have.been.called.exactly(3);\n```\n\n----------------------------------------\n\nTITLE: Using Sinon.JS Assertions with Chai\nDESCRIPTION: Demonstrates how to use Sinon-Chai assertions instead of native Sinon.JS assertions or awkward Chai assertions on spy properties.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_slightlytyler_sinon_chai.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsinon.assertCalledWith(mySpy, \"foo\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmySpy.calledWith(\"foo\").should.be.ok;\nexpect(mySpy.calledWith(\"foo\")).to.be.ok;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmySpy.should.have.been.calledWith(\"foo\");\nexpect(mySpy).to.have.been.calledWith(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Using Chai as Promised with Non-Promise-Friendly Test Runners\nDESCRIPTION: Illustrates how to use the notify method to adapt Chai as Promised assertions to test runners that don't support promise returns.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"should be fulfilled\", function (done) {\n    promise.should.be.fulfilled.and.notify(done);\n});\n\nit(\"should be rejected\", function (done) {\n    otherPromise.should.be.rejected.and.notify(done);\n});\n\nit(\"should change the state\", function (done) {\n    otherState.should.equal(\"before\");\n    promise.should.be.fulfilled.then(function () {\n        otherState.should.equal(\"after\");\n    }).should.notify(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Using strict momentFormat Assertion\nDESCRIPTION: Examples of using the strict momentFormat assertion for strict date string validation, with and without locale specification.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_moment_string.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Without locale\nexpect('2018-01-26').to.momentFormat.strict('YYYY-MM-DD');\n// With locale\nexpect('2012 juillet').to.momentFormat.strict('YYYY MMMM', 'fr');\n```\n\n----------------------------------------\n\nTITLE: Using Just Assertions\nDESCRIPTION: Examples of using the 'just' assertion to test Maybe.Just values\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/maybe_chai.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect( Maybe.just(5) ).to.be.a.just()      // OK!\nexpect( Maybe.just(5) ).to.be.just(5)       // OK!\nexpect( Maybe.nothing() ).to.be.just(5)     // fails\nexpect( Maybe.nothing() ).to.not.be.just(5) // OK!\nexpect( 'string' ).to.be.just(5)            // fails\nexpect( 'string' ).to.not.be.just(5)        // OK!\n```\n\n----------------------------------------\n\nTITLE: Installing chai-uuid Plugin via npm\nDESCRIPTION: Command to install the chai-uuid plugin as a dependency in your Node.js project using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_uuid.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-uuid\n```\n\n----------------------------------------\n\nTITLE: Asserting Empty File in Chai-FS\nDESCRIPTION: Demonstrates how to assert that a path exists, is a file, and has zero size. Chains after file() and uses fs.statSync().size === 0 for verification.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).and.empty;\nexpect(path).to.be.a.file(?msg).and.not.empty;\n\npath.should.be.a.file(?msg).and.empty;\npath.should.be.a.file(?msg).and.not.empty;\n\nassert.isEmptyFile(path, ?msg);\nassert.notIsEmptyFile(path, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Spy Sandboxes\nDESCRIPTION: Demonstrates how to create and use spy sandboxes to track and restore original methods, particularly useful in test setup and teardown.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst sandbox = chai.spy.sandbox();\n\ndescribe('Array', () => {\n  let array;\n\n  beforeEach(() => {\n    array = [];\n    sandbox.on(array, ['push', 'pop']);\n  });\n\n  afterEach(() => {\n    sandbox.restore(); // restores original methods on `array`\n  })\n\n  it('allows to add items', () => {\n    array.push(1);\n\n    expect(array.push).to.have.been.called.with(1);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Chai Files Plugin\nDESCRIPTION: Setup code to import and configure the chai-files plugin with Chai assertion library.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_files.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar chaiFiles = require('chai-files');\n\nchai.use(chaiFiles);\n\nvar expect = chai.expect;\nvar file = chaiFiles.file;\nvar dir = chaiFiles.dir;\n```\n\n----------------------------------------\n\nTITLE: Using equalIgnoreCase Assertion\nDESCRIPTION: Examples of the equalIgnoreCase assertion to verify if two strings are equal, ignoring letter case differences.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nassert.equalIgnoreCase('abcdef', 'AbCdEf');\nexpect('abcdef').to.equalIgnoreCase('AbCdEf');\n```\n\n----------------------------------------\n\nTITLE: Using match assertion with jQuery elements\nDESCRIPTION: Shows how to assert that a jQuery selection matches a given selector using the match assertion with jQuery's is method. Overrides Chai's built-in assertion for jQuery objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n$('input').should.match('#foo');\nexpect($('#empty')).to.match(':empty');\n```\n\n----------------------------------------\n\nTITLE: Using Deep Almost Equal Assertion\nDESCRIPTION: Examples of using deepAlmostEqual to compare objects containing numerical values within precision\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats_jamestalmage.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect({ pi: 3.1416 }).to.almost.eql({ pi: 3.14159 }, 3);\nassert.deepAlmostEqual({ pi: 3.1416 }, { pi: 3.14159 }, 3);\n```\n\n----------------------------------------\n\nTITLE: Using beforeDateTime Assertion with Chai-Luxon\nDESCRIPTION: Shows how to use the beforeDateTime assertion provided by chai-luxon. It demonstrates comparing dates with should-style, expect-style, and tdd-style assertions, including the use of granularity options.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_luxon.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar dateString = '2020-04-21',\n  oneDayLater = '2020-04-22';\n\n// using should-style assertions\ndateString.should.be.beforeDateTime(oneDayLater);\ndateString.should.be.beforeDateTime(oneDayLater, 'month'); // fails\n\n// using expect-style assertions\nexpect(dateString).to.be.beforeDateTime(oneDayLater);\nexpect(dateString).to.be.beforeDateTime(oneDayLater, 'month'); // fails\n\n// using tdd assertions\nassert.beforeDateTime(luxonDateTime, oneDayLater);\nassert.beforeDateTime(luxonDateTime, oneDayLater, 'month'); // fails\nassert.beforeDateTime(luxonDateTime, oneDayLater, 'month', 'custom error message'); // fails\nassert.beforeDateTime(luxonDateTime, oneDayLater, 'custom error message');\n```\n\n----------------------------------------\n\nTITLE: Using Nothing Assertions\nDESCRIPTION: Examples of using the 'nothing' assertion to test Maybe.Nothing values\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/maybe_chai.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect( Maybe.nothing() ).to.be.nothing()   // OK!\nexpect( Maybe.just(5) ).to.be.nothing()     // fails\nexpect( Maybe.just(5) ).to.not.be.nothing() // OK!\nexpect( 'string' ).to.be.nothing()          // fails\nexpect( 'string' ).to.not.be.nothing()      // OK!\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Objects with spy.interface\nDESCRIPTION: Shows how to use chai.spy.interface() to create mock objects with spied methods, including examples with and without implementations.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-spies.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventBus = chai.spy.interface(['on', 'off', 'emit']);\n\n// with implementation\nconst arrayLike = chai.spy.interface({\n  push(item) {\n    this.__items = this.__items || [];\n    return this.__items.push(item)\n  },\n  // other methods\n});\n\narrayLike.push(5);\n```\n\n----------------------------------------\n\nTITLE: Checking Iterator Sequence Suffix Mismatch with assert.doesNotIterateUntil() in JavaScript\nDESCRIPTION: Shows how to use assert.doesNotIterateUntil() to verify that an iterable does not end with a specific sequence of values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nassert.doesNotIterateUntil([2, 3, 5], [2, 3]);\nassert.doesNotIterateUntil('abcdefg', 'cdef');\n```\n\n----------------------------------------\n\nTITLE: Using Sum Assertions\nDESCRIPTION: Examples of using sum assertions to compare array sums with various conditions\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats_jamestalmage.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([ 1, 2, 3 ]).to.have.sum.equal(6);\nexpect([ 1, 2, 3 ]).to.have.sum.above(5);\nexpect([ 1, 2, 3 ]).to.have.sum.below(7);\n```\n\n----------------------------------------\n\nTITLE: Using equalIgnoreSpaces Assertion\nDESCRIPTION: Examples of the equalIgnoreSpaces assertion to verify if two strings are equal, ignoring whitespace differences.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nassert.equalIgnoreSpaces('abcdef', 'a\\nb\\tc\\r d  ef');\nexpect('abcdef').to.equalIgnoreSpaces('a\\nb\\tc\\r d  ef');\n```\n\n----------------------------------------\n\nTITLE: Installing chai-interface via npm\nDESCRIPTION: Command to install the chai-interface plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_interface.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-interface\n```\n\n----------------------------------------\n\nTITLE: Example Test Using chai-fetch with http-server-mock\nDESCRIPTION: Complete test example showing how to use chai-fetch with http-server-mock to test HTTP responses. Demonstrates setting up the test environment, mocking server responses, and using the responseText matcher.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fetch.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiFetch = require('chai-fetch');\nchai.use(chaiFetch);\n\nconst { expect } = chai;\n\ndescribe('Chai-fetch', () => {\n    beforeEach(() => mockServer.start(8080));\n    afterEach(() => mockServer.stop());\n\n    describe('.responseText', () => {\n        it('should match responses with matching bodies', () => {\n            mockServer.get('/match').thenReply(200, 'matching body')\n            .then(() =>\n                expect(fetch('http://localhost:8080/match')).to.have.responseText('matching body')\n            );\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using bn-chai for BN.js Decimal Comparison\nDESCRIPTION: Examples of using bn-chai to compare BN.js decimals, demonstrating the improved readability over traditional methods.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(bn1).to.eq.BN(bn2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(bn1).to.eq.BN(1);\n```\n\n----------------------------------------\n\nTITLE: Using chaiExecAsync for Asynchronous CLI Testing in JavaScript\nDESCRIPTION: Shows how to use the asynchronous version of chaiExec for testing CLIs that run asynchronously.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jsdevtools_chai_exec.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { chaiExecAsync } = require(\"@jsdevtools/chai-exec\");\nconst chai = require(\"chai\");\n\nchai.use(chaiExecAsync);\n\ndescribe(\"My CLI\", () => {\n  it(\"should exit with a zero exit code\", async () => {\n    // Run your CLI\n    let myCLI = await chaiExecAsync('my-cli --arg1 --arg2 \"some other arg\"');\n\n    // Should syntax\n    myCLI.should.exit.with.code(0);\n    myCLI.stdout.should.contain(\"Success!\");\n    myCLI.stderr.should.be.empty;\n\n    // Expect sytnax\n    expect(myCLI).to.exit.with.code(0);\n    expect(myCLI).stdout.to.contain(\"Success!\");\n    expect(myCLI).stderr.to.be.empty;\n\n    // Assert syntax\n    assert.exitCode(myCLI, 0);\n    assert.stdout(myCLI, \"Success!\");\n    assert.stderr(myCLI, \"\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using like() assertion with arrays\nDESCRIPTION: Examples of using the like() assertion to compare arrays by their elements rather than by reference. Shows usage with should, expect, and assert styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fuzzy.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar subject = ['a'];\nsubject.should.be.like(['a']);\nsubject.should.not.be.like(['x']);\nsubject.should.not.be.like(['a', 'b']);\n\nexpect(subject).to.be.like(['a']);\nexpect(subject).not.to.be.like(['x']);\nexpect(subject).not.to.be.like(['a', 'b']);\n\nassert.like(subject, ['a']);\nassert.notLike(subject, ['x']);\nassert.notLike(subject, ['a', 'b']);\n```\n\n----------------------------------------\n\nTITLE: Importing Expect vs Should in Chai.js\nDESCRIPTION: Shows the difference between importing expect and should interfaces, highlighting that should must be executed to extend Object.prototype.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/styles.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as chai from 'chai';\n\nconst {expect} = chai;\nconst should = chai.should();\n```\n\n----------------------------------------\n\nTITLE: Asserting Files are Empty using Chai\nDESCRIPTION: Examples of asserting that a path exists, is a file, and has zero size using expect/should/assert styles in chai-fs. Uses fs.statSync().size === 0 internally to check file emptiness.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-fs.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).and.empty;\nexpect(path).to.be.a.file(?msg).and.not.empty;\n\npath.should.be.a.file(?msg).and.empty;\npath.should.be.a.file(?msg).and.not.empty;\n\nassert.isEmptyFile(path, ?msg);\nassert.notIsEmptyFile(path, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Using toEmitInTime with timed events\nDESCRIPTION: Example of using toEmitInTime() with a callback that uses tick and clock to control time advancement, sending values at specific times.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).toEmitInTime(expected, (tick, clock) => {\n  send(obs, [value(1)])\n  tick(10)\n  send(obs, [error(new Error('whoops!'))])\n  tick(10)\n  send(obs, [end()])\n})\n```\n\n----------------------------------------\n\nTITLE: Using Chai Subset with Assert Interface\nDESCRIPTION: Example of using chai-subset with Chai's assert interface for simple property matching.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_subset.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nassert.containSubset({a: 1, b: 2}, {a: 1});\n```\n\n----------------------------------------\n\nTITLE: Defining Time-based Emission Expectations with chai-kefir\nDESCRIPTION: Example showing how to define expected emissions over time for a Kefir Observable.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst expected = [\n    [0, value(1)],\n    [10, error(new Error('whoops!'))],\n    [20, end()]\n]\n```\n\n----------------------------------------\n\nTITLE: Standard Error (stderr) Assertions in Chai Exec\nDESCRIPTION: Shows various ways to assert on a CLI's standard error output using Chai Exec, including exact matches, substrings, and regular expressions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jsdevtools_chai_exec.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Should syntax\nmyCLI.stderr.should.equal(\"Failure!\");\nmyCLI.should.have.stderr.that.contains(\"Failure!\");\nmyCLI.should.have.stderr.that.does.not.contain(\"Success!\");\nmyCLI.should.have.stderr.that.matches(/^Failure!$/);\nmyCLI.should.have.stderr.that.does.not.match(/^Success!$/);\n\n// Expect syntax\nexpect(myCLI).stderr.to.equal(\"Failure!\");\nexpect(myCLI).to.have.stderr.that.contains(\"Failure!\");\nexpect(myCLI).to.have.stderr.that.does.not.contain(\"Success!\");\nexpect(myCLI).to.have.stderr.that.matches(/^Failure!$/);\nexpect(myCLI).to.have.stderr.that.does.not.match(/^Success!$/);\n\n// Assert syntax\nassert.stderr(myCLI, \"Failure!\");\nassert.stderr(myCLI, /^Failure!$/);\n\nassert.include(myCLI.stderr, \"Failure!\");\nassert.notInclude(myCLI.stderr, \"Success!\");\n\nassert.match(myCLI.stderr, /^Failure!$/);\nassert.notMatch(myCLI.stderr, /^Success!$/);\n```\n\n----------------------------------------\n\nTITLE: Using Chai Exec for Asynchronous CLI Testing\nDESCRIPTION: Example of using Chai Exec to test a CLI asynchronously, demonstrating the use of async/await and various assertion styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exec.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { chaiExecAsync } = require(\"@jsdevtools/chai-exec\");\nconst chai = require(\"chai\");\n\nchai.use(chaiExecAsync);\n\ndescribe(\"My CLI\", () => {\n  it(\"should exit with a zero exit code\", async () => {\n    // Run your CLI\n    let myCLI = await chaiExecAsync('my-cli --arg1 --arg2 \"some other arg\"');\n\n    // Should syntax\n    myCLI.should.exit.with.code(0);\n    myCLI.stdout.should.contain(\"Success!\");\n    myCLI.stderr.should.be.empty;\n\n    // Expect sytnax\n    expect(myCLI).to.exit.with.code(0);\n    expect(myCLI).stdout.to.contain(\"Success!\");\n    expect(myCLI).stderr.to.be.empty;\n\n    // Assert syntax\n    assert.exitCode(myCLI, 0);\n    assert.stdout(myCLI, \"Success!\");\n    assert.stderr(myCLI, \"\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Validating IP Address Format\nDESCRIPTION: Examples of asserting that a string represents a valid IP address, supporting both IPv4 and IPv6 formats. This is useful for validating network-related data.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('127.0.0.1').to.be.an.ip;\nexpect('2001:0db8:85a3:0000:0000:8a2e:0370:7334').to.be.an.ip;\n```\n\n----------------------------------------\n\nTITLE: Sinon-Chai Example with Chai's Should Interface\nDESCRIPTION: Demonstrates how to use Sinon-Chai with Chai's should interface in a test scenario.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_joethefkingfrypan_sinon_chai.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nchai.should();\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        cb.should.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using attr assertion with jQuery elements\nDESCRIPTION: Demonstrates how to assert that a jQuery element has a specific attribute using the attr assertion. Optionally checks for a particular attribute value and supports chaining.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n$('#header').should.have.attr('foo');\nexpect($('body')).to.have.attr('foo', 'bar');\nexpect($('body')).to.have.attr('foo').match(/bar/);\n```\n\n----------------------------------------\n\nTITLE: Chai-BN Assertion Methods Example\nDESCRIPTION: Demonstration of using chai-bn assertions with BN instances and string numbers for comparison operations.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bn.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst actual = new BN('100000000000000000').plus(new BN('1'));\nconst expected = '100000000000000001';\n\nactual.should.be.a.bignumber.that.equals(expected);\nexpect(actual).to.be.a.bignumber.that.is.at.most(expected);\n(new BN('1000')).should.be.a.bignumber.that.is.lessThan('2000');\n```\n\n----------------------------------------\n\nTITLE: Installing chai-arrays plugin via npm\nDESCRIPTION: Command to install the chai-arrays plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_arrays.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-arrays\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Global Exposure Through Chai Object\nDESCRIPTION: Shows problematic approaches to exposing globals in Chai plugins by attaching them to the chai object, which can cause issues with cross-file usage.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/index.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myGlobal = {...};\n\nexport default function myPlugin(chai, utils) {\n  chai.myGlobal = myGlobal;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring chai-param in JavaScript\nDESCRIPTION: Code snippet showing how to configure chai-param by setting properties in the chaiParam.config object. This example enables improved error messages.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_param.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar chaiParam = require('chai-param');\n\nchaiParam.config.improveMessages = true;\n```\n\n----------------------------------------\n\nTITLE: Test File Implementation\nDESCRIPTION: Example test file showing how to use chai-karma-snapshot assertions\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_karma_snapshot.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { use, expect, assert } from \"chai\";\nimport { matchSnapshot } from \"chai-karma-snapshot\";\nimport { test } from \"../src/index.js\";\nuse(matchSnapshot);\n\ndescribe(\"src/index.js\", () => {\n  it(\"check snapshot\", () => {\n    // 'expect' syntax:\n    expect(test()).to.matchSnapshot();\n    // 'assert' syntax:\n    assert.matchSnapshot(test());\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Examples of Chai Shallow Deep Equal Assertions\nDESCRIPTION: Detailed examples demonstrating how the shallowDeepEqual assertion works with various objects, arrays, and nested structures. Shows when assertions pass and fail.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_shallow_deep_equal.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nassert.shallowDeepEqual({name: 'Michel', language: 'javascript'}, {name: 'Michel'}); // true\n\nassert.shallowDeepEqual({\n  name: 'Michel',\n  language: 'javascript',\n  tags: [\n    'developer',\n    'gamer'\n  ]},\n  {\n  name: 'Michel',\n  tags: [\n    'developer'\n  ]}); // true\n\nassert.shallowDeepEqual([\n    {brand: 'apple', color: 'red'},\n    {brand: 'samsung', color: 'blue'},\n  ],\n  {\n  length: 2,\n  0: {color: 'red'},\n  1: {brand: 'samsung'},\n  }); // true\n\nassert.shallowDeepEqual({\n  name: 'Michel',\n  age: undefined\n  },\n  {\n  name: 'Michel',\n  age: 37\n  }); // false (age should not be defined)\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON File in Chai-FS\nDESCRIPTION: Shows how to assert that a path exists, is a file, and contains JSON-parsable text. Chains after file() and supports the 'with' syntactic sugar.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).with.json;\nexpect(path).to.be.a.file(?msg).with.not.json;\n\npath.should.be.a.file(?msg).with.json;\npath.should.be.a.file(?msg).with.not.json;\n\nassert.jsonFile(path, ?msg);\nassert.notJsonFile(path, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Importing Chai Iterator in Node.js\nDESCRIPTION: Shows how to import and set up chai-iterator in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiIterator = require('chai-iterator');\n\nchai.use(chaiIterator);\n```\n\n----------------------------------------\n\nTITLE: Using assert.unaltered in Chai\nDESCRIPTION: Demonstrates how to use the assert.unaltered method to assert that a value doesn't change.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_change.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 0;\nconst noop = () => undefined;\nassert.unaltered(noop, () => x);\n```\n\n----------------------------------------\n\nTITLE: Using Chai Shallow Deep Equal with Different Assertion Styles\nDESCRIPTION: Examples of using the shallowDeepEqual assertion with all Chai assertion styles: should, expect, and assert.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_shallow_deep_equal.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = {name: 'Michel', language: 'javascript'};\nvar b = {name: 'Michel'};\n\na.should.shallowDeepEqual(b);\nexpect(a).to.shallowDeepEqual(b);\nassert.shallowDeepEqual(a, b);\n```\n\n----------------------------------------\n\nTITLE: Setting Up chai-react-element with ES5\nDESCRIPTION: Shows how to configure the chai-react-element plugin in an ES5 environment, using require syntax and accessing the default export.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_react_element.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchai.use(require('chai-react-element').default);\n```\n\n----------------------------------------\n\nTITLE: Using custom error messages with dirty-chai\nDESCRIPTION: Examples demonstrating how to provide custom error messages in assertions, both mid-chain and at the end.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(true).to.be.true.and.not.false('Reason: Paradox');\nexpect(true).to.be.true('The fabric of logic has torn').and.not.false();\n```\n\n----------------------------------------\n\nTITLE: HTTP Status Matchers Examples\nDESCRIPTION: Examples showing how to use status matchers to verify HTTP response status codes, including the successful() matcher and the haveStatus() matcher with a specific status code.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/node_fetch_response_matchers.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nit('http success test', function(){\n   return expect(fetch('http://localhost/')).to.be.successful();\n});\nit('http status assert', function(){\n     return expect(fetch('http://localhost/')).to.haveStatus(500);\n});\n```\n\n----------------------------------------\n\nTITLE: Using shallowDeepEqual Assertion with Objects in JavaScript\nDESCRIPTION: Demonstrates basic usage of the shallowDeepEqual assertion with objects, showing how it compares object properties and displays a diff when expectations fail.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_better_shallow_deep_equal.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect({ foo: true, bar: 0 }).to.shallowDeepEqual({ foo: true, bar: 1 });\n```\n\n----------------------------------------\n\nTITLE: Running Tests with V8 Native Syntax\nDESCRIPTION: Shell command showing how to run tests with the --allow-natives-syntax flag, which is required for the plugin to access V8's internal optimization state.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_v__optimisation.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode --allow-natives-syntax your-optimisation-tests.js\n```\n\n----------------------------------------\n\nTITLE: Asserting Files are Equal using Chai\nDESCRIPTION: Examples of asserting that both paths exist, are files, and contain the same content using expect/should/assert styles in chai-fs. Reads both files as utf8 text to compare their contents.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-fs.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).and.equal(otherPath, ?msg);\nexpect(path).to.be.a.file(?msg).and.not.equal(otherPath, ?msg);\n\npath.should.be.a.file(?msg).and.equal(otherPath, ?msg);\npath.should.be.a.file(?msg).and.not.equal(otherPath, ?msg);\n\nassert.fileEqual(path, otherPath, ?msg);\nassert.notFileEqual(path, otherPath, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Indented Markdown Snapshot Format Example\nDESCRIPTION: Example of snapshot output in indented markdown format\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_karma_snapshot.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# `src/html.js`\n\n## `Sub Suite`\n\n####   `HTML Snapshot`\n\n    <div>\n      <span />\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Installing and Importing chai-json-pattern in JavaScript\nDESCRIPTION: Shows how to install the chai-json-pattern package using npm and import it into a JavaScript file. It also demonstrates how to use the plugin with Chai assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_pattern.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport chai, { expect } from 'chai';\nimport chaiJsonPattern from 'chai-json-pattern';\n\nchai.use(chaiJsonPattern);\n\nexpect({ a: 2 }).to.matchPattern(`{\n    \"a\": Number AND range(0, 5),\n}`);\n```\n\n----------------------------------------\n\nTITLE: Installing and Importing chai-json-pattern in JavaScript\nDESCRIPTION: Shows how to install the chai-json-pattern package using npm and import it into a JavaScript file. It also demonstrates how to use the plugin with Chai assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_pattern.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport chai, { expect } from 'chai';\nimport chaiJsonPattern from 'chai-json-pattern';\n\nchai.use(chaiJsonPattern);\n\nexpect({ a: 2 }).to.matchPattern(`{\n    \"a\": Number AND range(0, 5),\n}`);\n```\n\n----------------------------------------\n\nTITLE: Using containIgnoreCase Assertion\nDESCRIPTION: Examples of the containIgnoreCase assertion to verify if a string contains another string, ignoring letter case differences.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nassert.containIgnoreCase('abcdefgh', 'AbcDefGH'); \nexpect('abcdefgh').to.containIgnoreCase('AbcDefGH');\n'abcdef'.should.containIgnoreCase('cDe');\n```\n\n----------------------------------------\n\nTITLE: Chaining Directory Assertions with Chai Methods\nDESCRIPTION: Examples of chaining directory assertions with other Chai methods to perform more complex checks on directory contents.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.directory().and.content.is.an('array');\n\nexpect(path).to.be.a.directory().and.files.have.lengthOf(5);\n\npath.should.be.a.directory().with.subDirs.that.include.members(['subDir1', 'subDir2']);\n\npath.should.be.a.directory().with.files.that.satisfy(function(files) {\n  return files.every(function(file) {\n    return file.substr(-4) === '.txt';\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting File Content in Chai-FS\nDESCRIPTION: Shows how to assert that a path exists, is a file, and has specific content. Reads file as utf8 text and supports both .content() and .contents() methods.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).with.content(data, ?msg);\nexpect(path).to.be.a.file(?msg).and.not.have.content(data, ?msg);\n\npath.should.be.a.file(?msg).with.content(data, ?msg);\npath.should.be.a.file(?msg).and.not.have.content(data, ?msg);\n\nassert.fileContent(path, data, ?msg);\nassert.notFileContent(path, data, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Visibility Assertion in Chai WebDriver\nDESCRIPTION: Checks if an element is visible on-screen.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.be.visible()\n```\n\n----------------------------------------\n\nTITLE: Testing if a Value is a Success Result\nDESCRIPTION: Using the 'success' property to verify that a value is a Success instance of the Result class. Includes examples of both positive and negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kekka.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Positive\nexpect(Success('Success String')).to.be.a.success // OK\nexpect(Failure(new Error('Failure...'))).to.be.a.success // FAIL\nexpect('Not a result').to.be.a.success // FAIL\n\n// Negative\nexpect(Success('Success String')).not.to.be.a.success // FAIL\nexpect(Failure(new Error('Failure...'))).not.to.be.a.success // OK\nexpect('Not a result').not.to.be.a.success // FAIL with 'expected 'Not a result' to be an instance of Result'\n```\n\n----------------------------------------\n\nTITLE: Asserting Less Than or Equal with bn-chai\nDESCRIPTION: Examples of using the 'lte' assertion with bn-chai to check if one BN.js decimal is less than or equal to another.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new BN('0')).to.be.lte.BN(1);\nexpect(new BN('1')).to.be.lte.BN(1);\nexpect(new BN('2')).not.to.be.lte.BN(1);\n```\n\n----------------------------------------\n\nTITLE: Using selected assertion with jQuery elements\nDESCRIPTION: Shows how to assert that a jQuery element (typically an option) is selected using the selected assertion which uses jQuery's :selected selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n$('option').should.be.selected;\nexpect($('option')).not.to.be.selected;\n```\n\n----------------------------------------\n\nTITLE: Importing chai-openapi-response-validator in ES6/TypeScript\nDESCRIPTION: Example of importing the chai-openapi-response-validator plugin using ES6 or TypeScript syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_openapi_response_validator.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport chaiResponseValidator from 'chai-openapi-response-validator';\n```\n\n----------------------------------------\n\nTITLE: Using .almost.equal assertion\nDESCRIPTION: Examples of using the .almost.equal assertion to compare numbers with a specified precision.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(3.1415).to.almost.equal(3.14159, 3);\nassert.almostEqual(3.1416, 3.14159, 3, 'these numbers are almost equal');\n```\n\n----------------------------------------\n\nTITLE: Using .almost.equal assertion\nDESCRIPTION: Examples of using the .almost.equal assertion to compare numbers with a specified precision.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(3.1415).to.almost.equal(3.14159, 3);\nassert.almostEqual(3.1416, 3.14159, 3, 'these numbers are almost equal');\n```\n\n----------------------------------------\n\nTITLE: Checking if an array contains an element with chai-arrays\nDESCRIPTION: Example of using the containing assertion to check if an array includes a specific element.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_arrays.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.containing(1);\nexpect([1, 2, 3]).not.to.be.containing(5);\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Checking in JavaScript\nDESCRIPTION: Demonstrates how to enable TypeScript type checking in a JavaScript file using the @ts-check directive.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_typed.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n```\n\n----------------------------------------\n\nTITLE: Asserting a Spy Was Called Fewer Than N Times\nDESCRIPTION: Shows how to assert that a spy was called fewer than n times, using both below and lt syntaxes.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.below(3);\nexpect(spy).to.not.have.been.called.lt(3);\nspy.should.have.been.called.lt(3);\nspy.should.not.have.been.called.below(3);\n```\n\n----------------------------------------\n\nTITLE: Using Chai Checkmark in Tests\nDESCRIPTION: This snippet demonstrates how to use Chai Checkmark in a test scenario. It shows how to set up expectations for the number of checks, make synchronous and asynchronous assertions, and use the .mark() method to track assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_checkmark.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"something\", function() {\n  it(\"should check two things\", function(next) {\n    expect(2).checks(next) // <-- pass in the callback\n\n    \"sync test\".should.be.a(\"string\").mark() // <-- check 1\n\n    setTimeout(function() {\n      // check 2, callback is called after the current event finishes\n      \"async test\".should.be.a(\"string\").mark()\n    }, 500)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing ES6 Map Objects with shallowDeepEqual in JavaScript\nDESCRIPTION: Demonstrates how the plugin supports ES6 Map objects, performing structural comparison between them and showing the differences in a readable format.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_better_shallow_deep_equal.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(\n  new Map([\n    [\"foo\", 1],\n    [\"bar\", false]\n  ])\n).to.shallowDeepEqual(\n  new Map([\n    [\"foo\", 1],\n    [\"bar\", true]\n  ])\n);\n```\n\n----------------------------------------\n\nTITLE: Negating Property Assertions (JavaScript)\nDESCRIPTION: Shows how to use .not to negate property assertions. It also warns about the dangers of negating property assertions when providing a value.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new Map({ a: 1 })).to.not.have.property('b');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new Map({ b: 2 })).to.not.have.property('a'); // Recommended\nexpect(new Map({ b: 2 })).to.not.have.property('a', 1); // Not recommended\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new Map({ a: 3 })).to.have.property('a', 3); // Recommended\nexpect(new Map({ a: 3 })).to.not.have.property('a', 1); // Not recommended\n```\n\n----------------------------------------\n\nTITLE: Using almost.equal assertion\nDESCRIPTION: Examples of using the almost.equal assertion to check for near equality between numbers with specified precision\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-stats.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(3.1415).to.almost.equal(3.14159, 3);\nassert.almostEqual(3.1416, 3.14159, 3, 'these numbers are almost equal');\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage with Assertion Counting\nDESCRIPTION: Shows how to use expectAssertions and expectExpects methods to verify assertion counts.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_assertions_count.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiAssertionsCount = require('chai-assertions-count');\nchai.use(chaiAssertionsCount);\n\ndescribe('suite #3', () => {\n  it('test #1', () => {\n    chai.Assertion.expectAssertions(3);\n    chai.Assertion.expectExpects(2);\n\n    chai.expect(1).to.be.equal(1);\n    chai.expect([]).to.have.property('length', 0);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Chai Each\nDESCRIPTION: Demonstrates how to import and set up the chai-each plugin with Chai testing framework using ES6 module syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_each.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { use } from \"chai\";\nimport * as chaiEach from \"chai-each\";\nuse(chaiEach);\n```\n\n----------------------------------------\n\nTITLE: Overwriting 'ok' Property Assertion in Chai for Model Validation\nDESCRIPTION: This snippet demonstrates how to overwrite Chai's 'ok' property to add custom validation for model objects. It checks if the object has a numeric 'id' attribute.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/helpers.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nchai.overwriteProperty('ok', function (_super) {\n  return function checkModel () {\n    const obj = this._obj;\n    if (obj && obj instanceof Model) {\n      new Assertion(obj).to.have.deep.property('_attrs.id').a('number');\n    } else {\n      _super.call(this);\n    }\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Including Sinon-Chai via script tags in browser\nDESCRIPTION: HTML script tags for including Chai, Sinon-Chai, and Sinon.JS in a browser environment, where Sinon-Chai automatically plugs into Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sinon.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"sinon-chai.js\"></script>\n<script src=\"sinon.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Asserting Iterator Length with iterate.for.length.above() in JavaScript\nDESCRIPTION: Demonstrates how to use the iterate.for.length.above() assertion to check if an iterable yields more than n values. Works with both arrays and strings.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([2, 3, 5]).to.iterate.for.length.above(2);\nexpect('abcdefg').to.iterate.for.length.above(5);\nexpect([2, 3, 5]).not.to.iterate.for.length.above(3);\n```\n\n----------------------------------------\n\nTITLE: Using .mean assertion\nDESCRIPTION: Examples of using the .mean assertion to compare the mean of an array of numbers.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([ 1, 2, 3 ]).to.have.mean.equal(2);\nexpect([ 1, 2, 3 ]).to.have.mean.above(1.5);\nexpect([ 1, 2, 3 ]).to.have.mean.below(2.5);\n```\n\n----------------------------------------\n\nTITLE: Importing chai-exclude with ES6\nDESCRIPTION: Example showing how to import the chai-exclude plugin and configure it with Chai using ES6 import syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exclude.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport chai from 'chai';\nimport chaiExclude from 'chai-exclude';\n\nchai.use(chaiExclude);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Schemas with tv4\nDESCRIPTION: Method to add a custom schema for use in validations using the tv4 instance exported through Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nchai.tv4.addSchema(uri, schema);\n```\n\n----------------------------------------\n\nTITLE: Additional Setup for Node.js 0.10\nDESCRIPTION: Mocha configuration for Node.js 0.10 to enable harmony collections support.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_by_proxy.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"--harmony_collections\" >> test/mocha.opts\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Called More Than n Times in Chai\nDESCRIPTION: Demonstrates how to assert that a spy has been called more than n times, using both above/gt syntax and positive/negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.above(3);\nexpect(spy).to.not.have.been.called.gt(3);\nspy.should.have.been.called.gt(3);\nspy.should.not.have.been.called.above(3);\n```\n\n----------------------------------------\n\nTITLE: Transforming Asserter Arguments - Simple Example\nDESCRIPTION: Basic example of transforming arguments passed to Chai as Promised asserters, showing how to modify values before they're used in assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nchaiAsPromised.transformAsserterArgs = function (args) {\n    return args.map(function (x) { return x + 1; });\n}\n\nPromise.resolve(2).should.eventually.equal(2); // will now fail!\nPromise.resolve(3).should.eventually.equal(2); // will now pass!\n```\n\n----------------------------------------\n\nTITLE: Asserting a Spy Was Called With Multiple Arguments\nDESCRIPTION: Demonstrates how to assert that a spy was called with multiple specific arguments at least once.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nspy('foo', 'bar', 1);\nexpect(spy).to.have.been.called.with('bar', 'foo');\nspy.should.have.been.called.with('bar', 'foo');\n```\n\n----------------------------------------\n\nTITLE: Disabled Form Element Assertion in Chai WebDriver\nDESCRIPTION: Checks if a form element is disabled.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.be.disabled()\n```\n\n----------------------------------------\n\nTITLE: Testing Iterator End Sequence\nDESCRIPTION: Examples of asserting iteration ending values using iteratesUntil and doesNotIterateUntil assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nassert.iteratesUntil([2, 3, 5], [2, 3, 5]);\nassert.iteratesUntil([2, 3, 5], [3, 5]);\nassert.iteratesUntil('abcdefg', 'efg');\nassert.iteratesUntil('abcdefg', '');\nassert.doesNotIterateUntil([2, 3, 5], [2, 3]);\nassert.doesNotIterateUntil('abcdefg', 'cdef');\n```\n\n----------------------------------------\n\nTITLE: Using Mean Assertions\nDESCRIPTION: Examples of using mean assertions to compare array means with various conditions\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats_jamestalmage.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([ 1, 2, 3 ]).to.have.mean.equal(2);\nexpect([ 1, 2, 3 ]).to.have.mean.above(1.5);\nexpect([ 1, 2, 3 ]).to.have.mean.below(2.5);\n```\n\n----------------------------------------\n\nTITLE: Using tv4 utilities through chai-json-schema\nDESCRIPTION: Examples showing how to use various tv4 utility methods exposed through chai.tv4 for managing schemas and references.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-json-schema.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar list = chai.tv4.getMissingUris();\nvar list = chai.tv4.getMissingUris(/^https?:/);\n\nvar list = chai.tv4.getSchemaUris();\nvar list = chai.tv4.getSchemaUris(/example.com/);\n\nvar schema = chai.tv4.getSchema('http://example.com/item');\nvar schema = chai.tv4.getSchema('http://example.com/item/#sub/type');\n\nchai.tv4.dropSchemas();\n```\n\n----------------------------------------\n\nTITLE: Checking File and Directory Existence\nDESCRIPTION: Examples of asserting whether files or directories exist using chai-files.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_files.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(file('index.js')).to.exist;\nexpect(file('index.coffee')).to.not.exist;\n\nexpect(dir('foo')).to.exist;\nexpect(dir('missing')).to.not.exist;\n```\n\n----------------------------------------\n\nTITLE: Checking if an array is sorted with chai-arrays\nDESCRIPTION: Examples of using the sorted assertion to check if an array is sorted, including custom sorting function.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_arrays.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.sorted();\nexpect([1, 2, 4, 3]).not.to.be.sorted();\n\nexpect([3, 2, 1]).to.be.sorted((prev, next) => prev < next); // sorting based on the provided function\n```\n\n----------------------------------------\n\nTITLE: Importing Chai Iterator as an AMD Module\nDESCRIPTION: Demonstrates how to import and set up chai-iterator as an AMD module.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndefine((require, exports, module) => {\n  let chai = require('chai');\n  let chaiIterator = require('chai-iterator');\n\n  chai.use(chaiIterator);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Iterator Length with iterate.for.length.of.at.least() in JavaScript\nDESCRIPTION: Demonstrates how to use the iterate.for.length.of.at.least() assertion to check if an iterable yields at least n values. Tests boundary conditions with arrays.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([2, 3, 5]).to.iterate.for.length.of.at.least(2);\nexpect([2, 3, 5]).to.iterate.for.length.of.at.least(3);\nexpect([2, 3, 5]).not.to.iterate.for.length.of.at.least(4);\n```\n\n----------------------------------------\n\nTITLE: JSON Array Member Equality in Chai\nDESCRIPTION: Shows how to compare array members using JSON equality assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_equal.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[ship].should.have.jsonEqual.members [barge]\n```\n\n----------------------------------------\n\nTITLE: Traditional Spy Call Order Assertions in JavaScript\nDESCRIPTION: Example showing the traditional, non-fluent approach to verifying spy call order using regular Sinon.JS and Chai, requiring manual checking of each call's arguments separately.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_in_order.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar spy = sinon.spy();\n[1, 2, 3].forEach(spy);\nexpect(spy.getCall(0).args[0]).to.equal(1);\nexpect(spy.getCall(1).args[0]).to.equal(2);\nexpect(spy.getCall(2).args[0]).to.equal(3);\n```\n\n----------------------------------------\n\nTITLE: Testing Generators with Standard Chai in JavaScript\nDESCRIPTION: Demonstrates the verbose way of testing generators without the chai-generator plugin. It shows how to check the yielded and returned values using deep equality assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_generator.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(generator.next()).to.deep.equal({ done: false, value: 15 })\nexpect(generator.next()).to.deep.equal({ done: true, value: -1 })\n```\n\n----------------------------------------\n\nTITLE: Multiple Promise Assertions with chai-as-promised (JavaScript)\nDESCRIPTION: Demonstrates how to perform assertions on multiple promises using Promise.all with chai-as-promised.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"should all be well\", function () {\n    return Promise.all([\n        promiseA.should.become(\"happy\"),\n        promiseB.should.eventually.have.property(\"fun times\"),\n        promiseC.should.be.rejectedWith(TypeError, \"only joyful types are allowed\")\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using enabled assertion with jQuery elements\nDESCRIPTION: Examples of using the enabled assertion to check if at least one element in a jQuery selection is enabled using :enabled selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n$('.enabled').should.be.enabled;\nexpect($('enabled')).to.be.enabled;\n```\n\n----------------------------------------\n\nTITLE: Snapshot Configuration Example\nDESCRIPTION: Example of custom snapshot configuration including path resolver\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_karma_snapshot.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction resolve(basePath, suiteName) {\n  return path.join(basePath, \"__snapshots__\", suiteName);\n}\n\nconfig.set({\n  ...\n  snapshot: {\n    update: true,           // Run snapshot tests in UPDATE mode (default: false)\n    prune: false,            // Prune snapshots for removed tests (default: true)\n    format: \"indented-md\",  // Snapshot format (default: md)\n    checkSourceFile: true,  // Checks existince of the source file associated with tests (default: false)\n    pathResolver: resolve,  // Custom path resolver\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using enabled assertion with jQuery elements\nDESCRIPTION: Shows how to assert that a jQuery element is enabled using the enabled assertion which uses jQuery's :enabled selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n$('.enabled').should.be.enabled;\nexpect($('enabled')).to.be.enabled;\n```\n\n----------------------------------------\n\nTITLE: HTML Class Assertion in Chai WebDriver\nDESCRIPTION: Tests if an element has the specified class in its class attribute.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.have.htmlClass('warning')\n```\n\n----------------------------------------\n\nTITLE: Array, Date, and Function Type Assertions\nDESCRIPTION: Examples of type assertions for arrays, dates, and functions\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype_extra.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexpect([]).to.be.array();\nexpect([1, 2, 3]).to.be.array();\n\nexpect(new Date()).to.be.date();\n\nexpect(() => true).to.be.function();\n```\n\n----------------------------------------\n\nTITLE: Numeric Comparison with Value in Chai WebDriver\nDESCRIPTION: Tests if a numeric value is larger than the provided number.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('input[type=number]').dom.to.have.larger.value(0)\n```\n\n----------------------------------------\n\nTITLE: Decrease Assertion Examples in CoffeeScript\nDESCRIPTION: Shows how to verify that a value specifically decreases during code execution rather than just changing.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_9\n\nLANGUAGE: coffeescript\nCODE:\n```\nresult = 0\nexpect(-> result).to.decrease.when -> result -= 1\nexpect(-> result).not.to.decrease.when -> result\nexpect(-> result).not.to.decrease.when -> result += 1\n```\n\n----------------------------------------\n\nTITLE: AtLeast Change Amount Assertion Examples in CoffeeScript\nDESCRIPTION: Demonstrates how to verify that a value changes by at least a minimum amount during code execution.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_10\n\nLANGUAGE: coffeescript\nCODE:\n```\nresult = 0\nexpect(-> result).to.change.by.atLeast(4).when -> result += 5\nexpect(-> result).to.change.by.atLeast(4).when -> result -= 10\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Implementation for Spied Methods\nDESCRIPTION: Shows how to provide a custom implementation when spying on a method, replacing the original functionality.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nchai.spy.on(array, 'push', function (...items) {\n  // custom implementation of `push` method\n});\n```\n\n----------------------------------------\n\nTITLE: Using disabled assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting that a jQuery element is disabled using the disabled assertion which uses jQuery's :disabled selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n$('.disabled').should.be.disabled;\nexpect($('input')).not.to.be.disabled;\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Chai-Subset in Node.js\nDESCRIPTION: Shows how to require and set up the chai-subset plugin with Chai in a Node.js environment using CommonJS module syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_spankchain_chai_subset.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar chaiSubset = require('chai-subset');\nchai.use(chaiSubset);\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Called Fewer Than n Times in Chai\nDESCRIPTION: Shows how to assert that a spy has been called fewer than n times, using both below/lt syntax and positive/negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.below(3);\nexpect(spy).to.not.have.been.called.lt(3);\nspy.should.have.been.called.lt(3);\nspy.should.not.have.been.called.below(3);\n```\n\n----------------------------------------\n\nTITLE: Importing chai-openapi-response-validator in CommonJS/JavaScript\nDESCRIPTION: Example of importing the chai-openapi-response-validator plugin using CommonJS or JavaScript syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_openapi_response_validator.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst chaiResponseValidator = require('chai-openapi-response-validator').default;\n```\n\n----------------------------------------\n\nTITLE: Asserting File Content with chai-fs\nDESCRIPTION: Examples of using the content assertion to check the content of a file.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs_latest.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.have.content(data, ?msg);\nexpect(path).to.not.have.content(data, ?msg);\n\npath.should.have.content(data, ?msg);\npath.should.not.have.content(data, ?msg);\n\nassert.fileContent(path, data, ?msg);\nassert.notFileContent(path, data, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Implementation for Spied Methods\nDESCRIPTION: Shows how to provide a custom implementation when spying on a method, replacing the original functionality.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nchai.spy.on(array, 'push', function (...items) {\n  // custom implementation of `push` method\n});\n```\n\n----------------------------------------\n\nTITLE: Using isXxxx functions as direct assertions in Chai\nDESCRIPTION: Example of using an included isXxxx function (isBetween) as a direct assertion in Chai tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_match_pattern.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchai.expect(7.5).isBetween(7, 8);\n```\n\n----------------------------------------\n\nTITLE: Basic Chai-WebDriver Assertion Examples in JavaScript\nDESCRIPTION: Shows basic usage examples of chai-webdriver assertions for checking text content and visibility of DOM elements.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('.frequency-field').dom.to.contain.text('One time')\nexpect('.toggle-pane').dom.to.not.be.visible()\n```\n\n----------------------------------------\n\nTITLE: Checking Empty Files and Directories\nDESCRIPTION: Examples of asserting whether files or directories are empty.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_files.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(file('empty.txt')).to.be.empty;\nexpect(file('foo.txt')).to.not.be.empty;\n\nexpect(dir('empty')).to.be.empty;\nexpect(dir('foo')).to.not.be.empty;\n```\n\n----------------------------------------\n\nTITLE: Using the 'requested' Assertion with chai-nock in JavaScript\nDESCRIPTION: Example of using the 'requested' assertion to verify that a request has been made to a nocked endpoint.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_nock.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('requested', () => {\n  const requestNock = nock('http://bbc.co.uk')\n    .get('/')\n    .reply(200);\n\n  request({\n    uri: 'http://bbc.co.uk',\n  });\n\n  return expect(requestNock).to.have.been.requested;\n});\n```\n\n----------------------------------------\n\nTITLE: Negative Assertion Limitation Example\nDESCRIPTION: Shows an example of a negative assertion that may behave unexpectedly when used with nested elements. The assertion will fail on the first match rather than checking all elements.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_react_element.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(<div><span></span><span data-foo=\"bar\"></span></div>).to.not.include.elementOfType('span').with.prop('data-foo');\n```\n\n----------------------------------------\n\nTITLE: Charset Assertion Example\nDESCRIPTION: Example showing how to assert response charset\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_superagent.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(req).to.have.charset('utf-8');\n```\n\n----------------------------------------\n\nTITLE: Using custom plugin for number string comparison\nDESCRIPTION: Demonstrates how to use the custom number string plugin for assertions with chai-like.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_like.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  var object = {\n    number: 123\n  };\n  object.should.like({\n    number: '123'\n  });\n  object.should.not.like({\n    number: 'not a number'\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Default Options for chaiExec in JavaScript\nDESCRIPTION: Demonstrates how to set default options for chaiExec to avoid repetition in test cases.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jsdevtools_chai_exec.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chaiExec = require(\"@jsdevtools/chai-exec\");\nconst chai = require(\"chai\");\n\nchai.use(chaiExec);\n\n// Set some defaults\nchaiExec.defaults = {\n  command: \"my-cli\",\n  args: \"--arg1 --arg2\",\n  options: {\n    cwd: \"/usr/bin\"\n  }\n};\n\ndescribe(\"My CLI\", () => {\n  it(\"should use defaults\", () => {\n    // Run your CLI using defaults + one-time args\n    let myCLI(\"--arg3 --arg4\");\n\n    myCLI.command.should.equal(\"my-cli\");\n    myCLI.args.should.deep.equal([ \"--arg1\", \"--arg2\", \"--arg3\", \"--arg4\" ]);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Signal Spies in Chai-Signals\nDESCRIPTION: Examples of creating signal spies to monitor signal dispatches. Shows how to spy on individual signals or create spy objects for multiple signals.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_signals.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar signal = new signals.Signal();\nvar signalSpy = chai.signals.spyOnSignal(signal);\nvar signalSpies = chai.signals.createSignalSpyObj([signal1, signal2]);\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Equality Assertion in Chai\nDESCRIPTION: Demonstrates how to compare a string with an object that implements toJSON() using the jsonEqual assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_equal.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ship = \"ship\",\n    barge = {toJSON: function () {\n      return \"ship\";\n    }}\nship.should.jsonEqual(barge);\n```\n\n----------------------------------------\n\nTITLE: Asserting Directory Existence and Equality in Chai-FS\nDESCRIPTION: Demonstrates how to assert that two paths exist, are directories, and contain the same contents. Supports deep comparison with the '.deep' modifier and negation with '.not'.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.directory(?msg).and.equal(otherPath, ?msg);\nexpect(path).to.be.a.directory(?msg).and.not.equal(otherPath, ?msg);\nexpect(path).to.be.a.directory(?msg).and.deep.equal(otherPath, ?msg);\nexpect(path).to.be.a.directory(?msg).and.not.deep.equal(otherPath, ?msg);\n\npath.should.be.a.directory(?msg).and.equal(otherPath, ?msg);\npath.should.be.a.directory(?msg).and.not.equal(otherPath, ?msg);\npath.should.be.a.directory(?msg).and.deep.equal(otherPath, ?msg);\npath.should.be.a.directory(?msg).and.not.deep.equal(otherPath, ?msg);\n\nassert.directoryEqual(path, otherPath, ?msg);\nassert.notDirectoryEqual(path, otherPath, ?msg);\nassert.directoryDeepEqual(path, otherPath, ?msg);\nassert.notDirectoryDeepEqual(path, otherPath, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Asserting Greater Than with bn-chai\nDESCRIPTION: Examples of using the 'gt' assertion with bn-chai to check if one BN.js decimal is greater than another.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new BN('1')).to.be.gt.BN(0);\nexpect(new BN('1')).not.to.be.gt.BN(1);\n```\n\n----------------------------------------\n\nTITLE: Running tests with Mocha\nDESCRIPTION: Command to run tests for the chai-json plugin using the Mocha test framework.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ mocha test\n```\n\n----------------------------------------\n\nTITLE: Including chai-json-schema in browser with script tags\nDESCRIPTION: HTML code showing how to include chai-json-schema in a browser environment with script tags, loading all required dependencies.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-json-schema.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"jsonpointer.js\"></script>\n<script src=\"tv4.js\"></script>\n<script src=\"chai.js\"></script>\n<script src=\"chai-json-schema.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Asserting Directory Existence and Equality in Chai-FS\nDESCRIPTION: Demonstrates how to assert that two paths exist, are directories, and contain the same contents. Supports deep comparison with the '.deep' modifier and negation with '.not'.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.directory(?msg).and.equal(otherPath, ?msg);\nexpect(path).to.be.a.directory(?msg).and.not.equal(otherPath, ?msg);\nexpect(path).to.be.a.directory(?msg).and.deep.equal(otherPath, ?msg);\nexpect(path).to.be.a.directory(?msg).and.not.deep.equal(otherPath, ?msg);\n\npath.should.be.a.directory(?msg).and.equal(otherPath, ?msg);\npath.should.be.a.directory(?msg).and.not.equal(otherPath, ?msg);\npath.should.be.a.directory(?msg).and.deep.equal(otherPath, ?msg);\npath.should.be.a.directory(?msg).and.not.deep.equal(otherPath, ?msg);\n\nassert.directoryEqual(path, otherPath, ?msg);\nassert.notDirectoryEqual(path, otherPath, ?msg);\nassert.directoryDeepEqual(path, otherPath, ?msg);\nassert.notDirectoryDeepEqual(path, otherPath, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Setting up chai-sorted plugin in Node.js\nDESCRIPTION: Code snippet showing how to require and use the chai-sorted plugin with Chai.js in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sorted.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\"),\n    expect = chai.expect; // preference and tested with expect\n\nchai.use(require(\"chai-sorted\"));\n```\n\n----------------------------------------\n\nTITLE: Simplified Nock Request Checking with chai-nock in JavaScript\nDESCRIPTION: Shows how to use the chai-nock plugin to create a more readable assertion that checks if a Nock request was made with a specific body.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_nock.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn expect(nock('http://some-url')).to.have.been.requestedWith({\n  hello: 'world'\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Ban Unknown Properties in tv4\nDESCRIPTION: Setting to make validation fail on unknown schema properties, ensuring schemas don't contain undesirable data.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nchai.tv4.banUnknown = true;\n```\n\n----------------------------------------\n\nTITLE: Testing Observable Type with chai-kefir\nDESCRIPTION: Example showing how to assert that a value is a Kefir Observable.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).to.be.an.observable();\n```\n\n----------------------------------------\n\nTITLE: Using .yield with .deep Chain in chai-generator\nDESCRIPTION: Shows how to use the .yield assertion with the .deep chain for deep equality comparisons.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_generator.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(generator).to.deep.yield([1, 2, 3])\ngenerator.should.deep.yield([1, 2, 3])\nassert.deepYield([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Using containingAnyOf() assertion with Chai\nDESCRIPTION: Examples demonstrating how to check if an array contains any elements from another array.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_ermeschultz_chai_arrays.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.containingAnyOf([1]);\nexpect([1, 2, 3]).to.be.containingAnyOf([6, 7, 3, 5]);\nexpect([1, 2, 3]).to.be.containingAnyOf([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: AtMost Change Amount Assertion Examples in CoffeeScript\nDESCRIPTION: Shows how to verify that a value changes by at most a maximum amount during code execution.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_11\n\nLANGUAGE: coffeescript\nCODE:\n```\nresult = 0\nexpect(-> result).to.change.by.atMost(7).when -> result += 5\nexpect(-> result).to.change.by.atMost(14).when -> result -= 10\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Iterator Values\nDESCRIPTION: Examples of asserting deep equality in iteration using deepIteratesOver and doesNotDeepIterateOver assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nassert.deepIteratesOver([{n: 2}, {n: 3}], [{n: 2}, {n: 3}]);\nassert.deepIteratesOver([[0, 2], [1, 3]], [[0, 2], [1, 3]]);\nassert.doesNotDeepIterateOver([{n: 2}, {n: 3}], [{n: 5}, {n: 7}]);\nassert.doesNotDeepIterateOver([[0, 2], [1, 3]], [[1, 3], [0, 2]]);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-json-schema-ajv with npm\nDESCRIPTION: Installation commands for the chai-json-schema-ajv plugin and its dependency ajv using npm. The comment indicates that users can specify a particular version of ajv if needed.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema_ajv.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i ajv --save-dev # Or any version you prefer `npm i ajv@4 --save-dev`\nnpm i chai-json-schema-ajv --save-dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Chai V8 Optimisation Plugin\nDESCRIPTION: Code snippet showing how to require the chai library and register the V8 optimisation plugin with Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_v__optimisation.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\"),\n    v8opt = require(\"chai-v8-optimisation\");\n    \nchai.use(v8opt);\n```\n\n----------------------------------------\n\nTITLE: Non-numeric almost equality assertions\nDESCRIPTION: Examples showing how the almost matcher handles non-numeric values\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_almost.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('taco').to.almost.equal('taco');   // still passes\nexpect({ x: 5 }).to.be.almost({ x: 5 });  // still fails (shallow equality)\nexpect(['tacos', 2, 3]).to.be.deep.almost(['burritos', 2, 2.9999999]); // still fails\n```\n\n----------------------------------------\n\nTITLE: Setting up chai-fuzzy in Node.js environment\nDESCRIPTION: Code snippet demonstrating how to set up and use the chai-fuzzy plugin in a Node.js server environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fuzzy.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-fuzzy'));\n```\n\n----------------------------------------\n\nTITLE: Matching File Content with RegExp\nDESCRIPTION: Examples of matching file contents against regular expressions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_files.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(file('foo.txt')).to.match(/fo+/);\nexpect(file('foo.txt')).to.not.match(/bar?/);\n```\n\n----------------------------------------\n\nTITLE: Testing Pool Type with chai-kefir\nDESCRIPTION: Example showing how to assert that a value is a Kefir Pool.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).to.be.an.observable.pool();\n```\n\n----------------------------------------\n\nTITLE: Excluding Multiple Properties Throughout Deeply Nested Objects\nDESCRIPTION: Examples showing how to exclude multiple properties at all levels in a deeply nested object using the excludingEvery method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exclude.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst actualObj = {\n  a: 'a',\n  b: 'b',\n  c: {\n    a: 'a',\n    b: {\n      a: 'a',\n      d: {\n        a: 'a',\n        b: 'b',\n        d: null\n      }\n    }\n  },\n  d: ['a', 'c']\n}\n\nconst actualArray = [actualObj]\n\nconst expectedObj = {\n  b: 'b',\n  c: {\n    b: {\n    }\n  }\n}\n\nconst expectedArray = [expectedObj]\n\n// Object\nassert.deepEqualExcludingEvery(actualObj, expectedObj, ['a', 'd'])\nexpect(actualObj).excludingEvery(['a', 'd']).to.deep.equal(expectedObj)\n\n// Array\nassert.deepEqualExcludingEvery(actualArray, expectedArray, ['a', 'd'])\nexpect(actualArray).excludingEvery(['a', 'd']).to.deep.equal(expectedArray)\n```\n\n----------------------------------------\n\nTITLE: Sinon-Chai Should Interface Example\nDESCRIPTION: Complete example showing how to set up and use Sinon-Chai with Chai's should interface.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_cypress_sinon_chai.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nchai.should();\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        cb.should.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Iterator Values\nDESCRIPTION: Examples of asserting exact iteration over a sequence of values using iteratesOver and doesNotIterateOver assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nassert.iteratesOver([2, 3, 5], [2, 3, 5]);\nassert.iteratesOver('abcdefg', 'abcdefg');\nassert.doesNotIterateOver([2, 3, 5], [1, 2, 3]);\nassert.doesNotIterateOver('abcdefg', 'abc');\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up chai-kefir with ESModules\nDESCRIPTION: Example showing how to import the required dependencies and set up chai-kefir when using ES Modules syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Kefir from 'kefir';\nimport { use } from 'chai';\nimport chaiKefir from 'chai-kefir';\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Type in Chai\nDESCRIPTION: Shows how to assert that an object is a spy using both expect and should assertion styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.be.spy;\nspy.should.be.spy;\n```\n\n----------------------------------------\n\nTITLE: Asserting Negativity with bn-chai\nDESCRIPTION: Examples of using the 'negative' assertion with bn-chai to check if a BN.js decimal is negative.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new BN('-1')).to.be.negative;\nexpect(new BN('1')).not.to.be.negative;\n```\n\n----------------------------------------\n\nTITLE: Importing Chai AssertType Extra Plugin\nDESCRIPTION: Demonstrates different ways to import the plugin using TypeScript/JavaScript module syntax\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype_extra.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst ChaiPluginAssertType = require('chai-asserttype-extra');\nimport ChaiPluginAssertType = require('chai-asserttype-extra');\nimport ChaiPluginAssertType from 'chai-asserttype-extra';\nimport { ChaiPlugin as ChaiPluginAssertType } from 'chai-asserttype-extra';\n```\n\n----------------------------------------\n\nTITLE: Testing Stream Type with chai-kefir\nDESCRIPTION: Example showing how to assert that a value is a Kefir Stream.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).to.be.an.observable.stream();\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Arguments for All Calls with always.with.exactly\nDESCRIPTION: Shows how to assert that every call to a spy was made with exactly the specified arguments and no others.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nspy('foo');\nspy('foo');\nexpect(spy).to.have.been.called.always.with.exactly('foo');\nspy.should.have.been.called.always.with.exactly('foo');\n```\n\n----------------------------------------\n\nTITLE: ES6 Module Setup\nDESCRIPTION: Setup using ES6 import syntax, requires Babel transpilation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport chai from 'chai';\nimport chaiImmutable from 'chai-immutable';\n\nchai.use(chaiImmutable);\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Arguments with with.exactly\nDESCRIPTION: Shows how to assert that a spy was called with exactly the specified arguments, in the exact order, with no additional arguments.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nspy();\nspy('foo', 'bar');\nexpect(spy).to.have.been.called.with.exactly('foo', 'bar');\nspy.should.have.been.called.with.exactly('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Installing chai-fs Plugin in Node.js\nDESCRIPTION: Instructions for installing the chai-fs plugin via npm and requiring it in a Node.js application.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs_latest.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install chai-fs\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-fs'));\n```\n\n----------------------------------------\n\nTITLE: Asserting Even Numbers with bn-chai\nDESCRIPTION: Examples of using the 'even' assertion with bn-chai to check if a BN.js decimal is even.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new BN('2')).to.be.even;\nexpect(new BN('1')).not.to.be.even;\n```\n\n----------------------------------------\n\nTITLE: Checking if an array contains all specified elements with chai-arrays\nDESCRIPTION: Example of using the containingAllOf assertion to check if an array includes all specified elements.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_arrays.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.containingAllOf([1]);\nexpect([1, 2, 3]).to.be.containingAllOf([1, 3]);\nexpect([1, 2, 3]).to.be.containingAllOf([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Transforming Asserter Arguments in Chai as Promised\nDESCRIPTION: Demonstrates how to use the transformAsserterArgs hook to modify the arguments passed to asserters.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchaiAsPromised.transformAsserterArgs = function (args) {\n    return args.map(function (x) { return x + 1; });\n}\n\nPromise.resolve(2).should.eventually.equal(2); // will now fail!\nPromise.resolve(3).should.eventually.equal(2); // will now pass!\n```\n\n----------------------------------------\n\nTITLE: Setting up sinon-chai-in-order with ES6 in JavaScript\nDESCRIPTION: ES6 module import example showing how to configure Chai to use both sinon-chai and sinon-chai-in-order plugins for test assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_in_order.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport chai, {expect} from 'chai';\nimport sinonChai from 'sinon-chai';\nimport sinonChaiInOrder from 'sinon-chai-in-order';\n\nchai.use(sinonChai);\nchai.use(sinonChaiInOrder);\n```\n\n----------------------------------------\n\nTITLE: Negated Larger Value Comparison in Chai WebDriver\nDESCRIPTION: Tests if a numeric value is not larger than the provided number.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('input[type=number]').dom.not.to.have.larger.value(0)\n```\n\n----------------------------------------\n\nTITLE: Including Chai-Datetime in Browser Environment\nDESCRIPTION: HTML code snippet showing how to include the chai-datetime plugin in a browser environment. This requires including both the chai.js library and the chai-datetime.js plugin scripts.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_datetime.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-datetime.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Element Assertions with Chai Things in JavaScript\nDESCRIPTION: This snippet shows how Chai Things extends Chai's assertion capabilities for array elements. It demonstrates the difference between standard Chai assertions and the enhanced functionality provided by Chai Things.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_things.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Although they are equal, two different { a: 1 } objects are not the same\n[{ a: 1 }, { b: 2 }].should.not.include({ a: 1 })\n// However, Chai Things allows us to test what we want\n[{ a: 1 }, { b: 2 }].should.include.something.that.deep.equals({ b: 2 })\n// If the test fails, we get a descriptive message\n[{ a: 1 }, { b: 2 }].should.include.something.that.deep.equals({ c: 3 })\n/* expected an element of [ { a: 1 }, { b: 2 } ] to deeply equal { c: 3 } */\n```\n\n----------------------------------------\n\nTITLE: Using containing() assertion with Chai\nDESCRIPTION: Examples showing how to check if an array contains a specific element.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_ermeschultz_chai_arrays.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.containing(1);\nexpect([1, 2, 3]).not.to.be.containing(5);\n```\n\n----------------------------------------\n\nTITLE: Customizing Output Promises in Chai as Promised\nDESCRIPTION: Shows how to override the transferPromiseness function to customize the output promises with additional methods.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nchaiAsPromised.transferPromiseness = function (assertion, promise) {\n    assertion.then = promise.then.bind(promise); // this is all you get by default\n    assertion.finally = promise.finally.bind(promise);\n    assertion.done = promise.done.bind(promise);\n};\n```\n\n----------------------------------------\n\nTITLE: Preloading Remote Schema References in Test Setup\nDESCRIPTION: Example of asynchronously loading remote schema references before running tests, using a before hook in a BDD-style test framework like Mocha or Jasmine.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// simplified example using a bdd-style async before();\n// as used in mocha, jasmine etc.\n\nbefore(function (done) {\n\n  // iterate missing\n  var checkMissing = function (callback) {\n    var missing = chai.tv4.getMissingUris();\n    if (missing.length === 0) {\n      // all $ref's solved\n      callback();\n      return;\n    }\n    // load a schema using your favourite JSON loader\n    // (jQuery, request, SuperAgent etc)\n    var uri = missing.pop();\n    myFavoriteJsonLoader.load(uri, function (err, schema) {\n      if (err || !schema) {\n        callback(err || 'no data loaded');\n        return;\n      }\n      // add it\n      chai.tv4.addSchema(uri, schema);\n      // iterate\n      checkMissing(callback);\n    });\n  };\n\n  // load first instance manually\n  myFavoriteJsonLoader.load(uri, function (err, schema) {\n    if (err || !schema) {\n      done(err || 'no data loaded');\n      return;\n    }\n    // add it\n    chai.tv4.addSchema(uri, schema);\n\n    // start checking\n    checkMissing(done);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Equality Assertion in Chai.js\nDESCRIPTION: Demonstrates how to use the mongoDoc assertion to compare MongoDB documents for equality. This assertion allows for comparing two MongoDB documents while handling special MongoDB-specific data types.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_mongo_doc.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(someDoc).to.be.mongoDoc(actualDoc)\n```\n\n----------------------------------------\n\nTITLE: Comparing Iterator Sequences with assert.iteratesOver() in JavaScript\nDESCRIPTION: Demonstrates how to use assert.iteratesOver() to check if a value iterates exactly over a given sequence. Works with arrays and strings.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nassert.iteratesOver([2, 3, 5], [2, 3, 5]);\nassert.iteratesOver('abcdefg', 'abcdefg');\n```\n\n----------------------------------------\n\nTITLE: Using Array type assertions\nDESCRIPTION: Examples of using the array() assertion to verify that values are of Array type.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([]).to.be.array();\nexpect([1, 2, 3]).to.be.array();\n```\n\n----------------------------------------\n\nTITLE: Using the 'requestedWithHeaders' Assertion with chai-nock in JavaScript\nDESCRIPTION: Example of using the 'requestedWithHeaders' assertion to verify that a request has been made with specific headers that match exactly.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_nock.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nit('requestedWithHeaders', () => {\n  const requestNock = nock('http://bbc.co.uk')\n    .get('/')\n    .reply(200);\n\n  request({\n    json: true,\n    uri: 'http://bbc.co.uk',\n    headers: {\n      myHeader: 'myHeaderValue'\n    }\n  });\n\n  return expect(requestNock).to.have.been.requestedWithHeaders({\n    host: 'bbc.co.uk',\n    accept: 'application/json',\n    myHeader: 'myHeaderValue'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing File Contents with Strings\nDESCRIPTION: Examples of comparing file contents with expected string values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_files.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(file('foo.txt')).to.equal('foo');\nexpect(file('foo.txt')).to.not.equal('bar');\n\nexpect('foo').to.equal(file('foo.txt'));\nexpect('foo').to.not.equal(file('foo.txt'));\n```\n\n----------------------------------------\n\nTITLE: Using toBePool assertion\nDESCRIPTION: Example of using the toBePool() assertion to check if a value is a Kefir.Pool.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).toBePool()\n```\n\n----------------------------------------\n\nTITLE: AMD Module Usage of Sinon-Chai\nDESCRIPTION: Demonstrates how to use Sinon-Chai when loading modules via AMD (Asynchronous Module Definition).\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function (require, exports, module) {\n    var chai = require(\"chai\");\n    var sinonChai = require(\"sinon-chai\");\n\n    chai.use(sinonChai);\n});\n```\n\n----------------------------------------\n\nTITLE: Using toBeActiveObservable assertion\nDESCRIPTION: Example of using the toBeActiveObservable() assertion to check if an observable is active.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).toBeActiveObservable()\n```\n\n----------------------------------------\n\nTITLE: Testing if a Value is a Failure Result\nDESCRIPTION: Using the 'failure' property to verify that a value is a Failure instance of the Result class. Shows examples of both positive and negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kekka.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Positive\nexpect(Success('Success String')).to.be.a.failure // FAIL\nexpect(Failure(new Error('Failure...'))).to.be.a.failure // OK\nexpect('Not a result').to.be.a.failure // FAIL\n\n// Negative\nexpect(Success('Success String')).not.to.be.a.failure // OK\nexpect(Failure(new Error('Failure...'))).not.to.be.a.failure // FAIL\nexpect('Not a result').not.to.be.a.failure // FAIL with 'expected 'Not a result' to be an instance of Result'\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Flags in Chai Plugins\nDESCRIPTION: Shows how to use the utils.flag utility to get and set key-value pairs (flags) on an assertion object for storing and retrieving data.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/plugins.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAssert = new Assertion(obj);\nutils.flag(myAssert, 'owner', 'me'); // sets key `owner` to `me`\nconst owner = utils.flag(myAssert, 'owner'); // get key `owner', returns value\n```\n\n----------------------------------------\n\nTITLE: Using the .yield Assertion with chai-generator in JavaScript\nDESCRIPTION: Demonstrates various ways to use the .yield assertion provided by chai-generator, including negation, chaining, and different assertion styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_generator.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(generator).to.yield()\nexpect(generator).to.yield(1)\nexpect(generator).not.to.yield('missing')\nexpect(generator.next(10)).to.yield(10)\n\ngenerator.should.yield()\ngenerator.should.yield(1)\ngenerator.should.not.yield('missing')\ngenerator.next(10).should.yield(10)\n\nassert.yield(generator, 1)\nassert.notYield(generator, 'missing')\nassert.yield(generator.next(10), 10)\n```\n\n----------------------------------------\n\nTITLE: Testing EventEmitter with Spies in JavaScript\nDESCRIPTION: This snippet demonstrates the traditional way of testing EventEmitter using spies. It shows how to set up a spy, emit an event, and check if the spy was called with the correct arguments.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_eventemitter.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar spy = sinon.spy()\n\nee.on('test', spy)\nee.emit('test')\nexpect(spy).to.have.been.called()\n\nspy.reset()\nee.emit('test', args)\nexpect(spy).to.have.been.calledWith(args)\n```\n\n----------------------------------------\n\nTITLE: Configuring tv4 validation options in chai-json-schema\nDESCRIPTION: Examples showing how to set non-standard tv4 properties to enable support for cyclical objects, ban unknown properties, and validate multiple errors.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-json-schema.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchai.tv4.cyclicCheck = true;\n```\n\n----------------------------------------\n\nTITLE: Manual Nock Request Checking Example in JavaScript\nDESCRIPTION: Demonstrates the traditional way of checking Nock intercepted requests by manually subscribing to the request event and using chai assertions on the intercepted body.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_nock.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst nockedRequest = nock('http://some-url');\n\nnockedRequest.on('request', function(req, interceptor, body) {\n  expect(body).to.deep.equal({ hello: 'world' });\n});\n```\n\n----------------------------------------\n\nTITLE: Directory Content Testing with Satisfy Function\nDESCRIPTION: Example showing how to use the .satisfy() method to validate directory contents with a custom function. This demonstrates using chai-fs with a function that checks if all files have a specific extension.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-fs.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npath.should.be.a.directory().with.files.that.satisfy(function(files) {\n  return files.every(function(file) {\n    return file.substr(-4) === '.txt';\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Using Date type assertions\nDESCRIPTION: Example of using the date() assertion to verify that a value is of Date type.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new Date()).to.be.date();\n```\n\n----------------------------------------\n\nTITLE: Larger Attribute Value Comparison in Chai WebDriver\nDESCRIPTION: Tests if an attribute value is larger than the provided number.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.have.larger.attribute('offsetWidth', 0)\n```\n\n----------------------------------------\n\nTITLE: Using @thiscode/chai-subset with assert Interface\nDESCRIPTION: Demonstrates the usage of containSubset with Chai's assert interface for simple object comparison.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_thiscode_chai_subset.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nassert.containSubset({a: 1, b: 2}, {a: 1});\n```\n\n----------------------------------------\n\nTITLE: Using toEmitInTime for time-based assertions\nDESCRIPTION: Example showing how to set up expected values as time-based tuples for the toEmitInTime() assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst expected = [[0, value(1)], [10, error(new Error('whoops!'))], [20, end()]]\n```\n\n----------------------------------------\n\nTITLE: Testing for Expected Type Errors\nDESCRIPTION: Demonstrates how to test for an expected number of type errors in a JavaScript file using the chai-as-typed plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_typed.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('/absolute/path/to/filename.js').to.have.types.errors(1);\n```\n\n----------------------------------------\n\nTITLE: Larger Style Value Comparison in Chai WebDriver\nDESCRIPTION: Tests if a CSS style property value is larger than the provided number, ignoring units.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.have.larger.style('width', 0)\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Called At Least n Times in Chai\nDESCRIPTION: Shows how to assert that a spy has been called at least n times, using both min/at.least syntax and positive/negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.min(3);\nexpect(spy).to.not.have.been.called.at.least(3);\nspy.should.have.been.called.at.least(3);\nspy.should.not.have.been.called.min(3);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-image Package - Bash\nDESCRIPTION: Command to install the chai-image package as a dev dependency\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_image.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-image --save-dev\n```\n\n----------------------------------------\n\nTITLE: Using RegExp plugin with chai-like\nDESCRIPTION: Demonstrates how to use the RegExp plugin for string matching assertions with chai-like.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_like.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = {\n  text: 'the quick brown fox jumps over the lazy dog'\n};\nobject.should.like({\n  text: /.* jumps over .*/\n});\nobject.should.not.like({\n  text: /\\d/\n});\n```\n\n----------------------------------------\n\nTITLE: Using Standard Deviation Assertion\nDESCRIPTION: Example of using deviation assertion to compare array standard deviation within precision\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats_jamestalmage.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([ 1, 2, 3, 4 ]).to.have.deviation.almost.equal(1.290, 2);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-sorted with npm\nDESCRIPTION: Command for installing the chai-sorted plugin via npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sorted.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-sorted\n```\n\n----------------------------------------\n\nTITLE: Installing chai-rx-assert via npm\nDESCRIPTION: Commands to install the chai-rx-assert plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rx_assert.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-rx-assert\n```\n\n----------------------------------------\n\nTITLE: Asserting Less Than with bn-chai\nDESCRIPTION: Examples of using the 'lt' assertion with bn-chai to check if one BN.js decimal is less than another.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new BN('0')).to.be.lt.BN(1);\nexpect(new BN('1')).not.to.be.lt.BN(1);\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions for Constant Return Values\nDESCRIPTION: Shows the preferred approach for creating spy functions that return constant values using arrow functions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst returnTrue = chai.spy(returns => true);\n```\n\n----------------------------------------\n\nTITLE: Enabling multiple error validation in tv4\nDESCRIPTION: Code to enable validation of multiple errors at once rather than just the first error encountered.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-json-schema.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nchai.tv4.multiple = true;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Type Matching with Date Objects in JavaScript\nDESCRIPTION: Demonstrates an example of using custom type matching to compare a Date object with an ISO string representation, showing how the plugin handles the comparison.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_better_shallow_deep_equal.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst fooDate = new Date(1583947016326);\n\nexpect({ fooDate }).to.shallowDeepEqual({\n  fooDate: \"2020-03-11T17:16:56.326Z\"\n});\n```\n\n----------------------------------------\n\nTITLE: Using Object type assertions\nDESCRIPTION: Example of using the object() assertion to verify that a value is of Object type.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect({}).to.be.object();\n```\n\n----------------------------------------\n\nTITLE: Creating a RegExp plugin for chai-like\nDESCRIPTION: Example of creating a plugin for chai-like to support string matching with regular expressions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_like.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar like = require('chai-like');\n\nvar regexPlugin = like.extend({\n  match: function(object, expected) {\n    return typeof object === 'string' && expected instanceof RegExp;\n  },\n  assert: function(object, expected) {\n    return expected.test(object);\n  }\n});\n\nlike.extend(regexPlugin);\n\nchai.use(like);\n```\n\n----------------------------------------\n\nTITLE: Using deepAlmostEqual assertion\nDESCRIPTION: Examples of using deepAlmostEqual to check near equality between objects containing numbers\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-stats.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect({ pi: 3.1416 }).to.almost.eql({ pi: 3.14159 }, 3);\nassert.deepAlmostEqual({ pi: 3.1416 }, { pi: 3.14159 }, 3);\n```\n\n----------------------------------------\n\nTITLE: Karma Configuration Setup\nDESCRIPTION: Complete Karma configuration file showing how to set up snapshot testing\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_karma_snapshot.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst webpack = require(\"webpack\");\n\nmodule.exports = function (config) {\n  config.set({\n    browsers: [\"ChromeHeadless\"],\n    frameworks: [\"mocha\", \"snapshot\", \"mocha-snapshot\"],\n    reporters: [\"mocha\"],\n    preprocessors: {\n      \"**/__snapshots__/**/*.md\": [\"snapshot\"],\n      \"__tests__/index.js\": [\"webpack\", \"sourcemap\"]\n    },\n    files: [\n      \"**/__snapshots__/**/*.md\",\n      \"__tests__/index.js\"\n    ],\n\n    colors: true,\n    autoWatch: true,\n\n    webpack: {\n      devtool: \"inline-source-map\",\n      performance: {\n        hints: false\n      },\n    },\n\n    webpackMiddleware: {\n      stats: \"errors-only\",\n      noInfo: true\n    },\n\n    snapshot: {\n      update: !!process.env.UPDATE,\n      prune: !!process.env.PRUNE,\n    },\n\n    mochaReporter: {\n      showDiff: true,\n    },\n\n    client: {\n      mocha: {\n        reporter: \"html\",\n        ui: \"bdd\",\n      }\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Negated Assertion in Chai WebDriver\nDESCRIPTION: Shows how to negate an assertion using the 'not' keyword.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.not.to.have.style('property', 'value')\n```\n\n----------------------------------------\n\nTITLE: Setting up bn-chai with Chai and BN.js\nDESCRIPTION: JavaScript code to set up bn-chai plugin with Chai and BN.js. It requires the necessary modules and adds bn-chai to Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar BN = require('bn.js');\nvar bnChai = require('bn-chai');\nchai.use(bnChai(BN));\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of chai-webdriver-exec Assertions in JavaScript\nDESCRIPTION: Demonstrates how to use the chai-webdriver-exec plugin to make assertions on scripts executed in the browser. The script is passed as the first argument to chai.expect() and will be executed via selenium-webdriver's executeScript() method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_exec.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchai.expect('return document.childElementCount').exec.to.equal(1)\nchai.expect('return document.childElementCount').exec.to.exist\n```\n\n----------------------------------------\n\nTITLE: Negated Smaller Value Comparison in Chai WebDriver\nDESCRIPTION: Tests if a numeric value is not smaller than the provided number.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('input[type=number]').dom.not.to.have.smaller.value(0)\n```\n\n----------------------------------------\n\nTITLE: Using Chai Subset with Should Interface and Arrays\nDESCRIPTION: Examples of using chai-subset with Chai's should interface and arrays, demonstrating both passing and failing assertions with detailed error messages.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_subset.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar list = [{a: 'a', b: 'b'}, {v: 'f', d: {z: 'g'}}];\n\nlist.should.containSubset([{a:'a'}]); //Assertion error is not thrown\nlist.should.containSubset([{a:'a',  b: 'b'}]); //Assertion error is not thrown\n\nlist.should.containSubset([{a:'a', b: 'bd'}]); \n/*throws\nAssertionError: expected\n[\n    {\n        \"a\": \"a\",\n        \"b\": \"b\"\n    },\n    {\n        \"v\": \"f\",\n        \"d\": {\n            \"z\": \"g\"\n        }\n    }\n]\nto contain subset \n[ { a: 'a', b: 'bd' } ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Enzyme with Karma\nDESCRIPTION: Configuration settings needed to make Enzyme (and chai-shallowly) work with Karma and Webpack. Includes externals, resolve aliases, and module parsing exclusions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_shallowly.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexternals: {\n  jsdom: \"window\",\n  cheerio: \"window\",\n  \"react/lib/ExecutionEnvironment\": true,\n  \"react/lib/ReactContext\": true\n},\nresolve: {\n  alias: {\n    sinon: require.resolve(\"sinon/pkg/sinon\")\n  }\n},\nmodule: {\n  noParse: [\n    /node_modules\\/sinon\\//\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Eventually Assertion in Chai WebDriver\nDESCRIPTION: Shows how to use the 'eventually' modifier to poll for a condition until it's met or times out.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.eventually.have.htmlClass('warning')\n```\n\n----------------------------------------\n\nTITLE: Restoring Spied Methods\nDESCRIPTION: Shows different ways to restore spied methods, including restoring all methods, all methods on an object, or specific methods on an object.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [1, 2, 3];\n\nchai.spy.on(array, ['push', 'pop']);\n\nchai.spy.restore(array) // restores all methods on object\nchai.spy.restore(array, 'push') // restores only `push` method\n```\n\n----------------------------------------\n\nTITLE: Installing Chai-DOM via npm and bower\nDESCRIPTION: Provides instructions for installing chai-dom using npm and bower package managers.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_dom.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-dom\n```\n\nLANGUAGE: bash\nCODE:\n```\nbower install chai-dom\n```\n\n----------------------------------------\n\nTITLE: Extending chai-like with custom plugins\nDESCRIPTION: Example of how to create and use a custom plugin to extend chai-like's functionality for number string comparison.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_like.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar like = require('chai-like');\n\nvar numberStringPlugin = {\n  match: function(object) {\n    return !isNaN(Number(object));\n  },\n  assert: function(object, expected) {\n    return object === Number(expected);\n  }\n};\nlike.extend(numberStringPlugin);\n\nchai.use(like);\n```\n\n----------------------------------------\n\nTITLE: String, Boolean, and Object Type Assertions\nDESCRIPTION: Examples of basic type assertions for strings, booleans, and objects\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype_extra.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexpect('').to.be.string();\nexpect('foobar').to.be.string();\n\nexpect(true).to.be.boolean();\nexpect(false).to.be.boolean();\n\nexpect({}).to.be.object();\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Setup in JavaScript\nDESCRIPTION: Code to require chai and register the chai-by-proxy plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_by_proxy.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\nchai.use(require('chai-by-proxy'))\n```\n\n----------------------------------------\n\nTITLE: Language Chain Example with Negation\nDESCRIPTION: Demonstrates the use of language chains with the 'not' operator for negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rxjs.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst const xs = scheduler.createHotObservable(onNext(250));\nconst output = scheduler.startScheduler(() => xs);\n\n// with `not`\nexpect(output).to.not.emit([\n  onNext(300)\n]);\n```\n\n----------------------------------------\n\nTITLE: Using deviation assertion\nDESCRIPTION: Example of using the deviation assertion to check standard deviation of an array\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-stats.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([ 1, 2, 3, 4 ]).to.have.deviation.almost.equal(1.290, 2);\n```\n\n----------------------------------------\n\nTITLE: Browser Script Tag Implementation\nDESCRIPTION: Shows how to include chai-rx in a browser environment using script tags.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rxjs.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-rx.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Integrating API Contract Validator with Should.js\nDESCRIPTION: Example showing how to use the api-contract-validator as a Should.js plugin. This demonstrates loading the plugin, defining the API definitions path, and using it in a test case.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/api_contract_validator.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst matchApiSchema = require('api-contract-validator').shouldPlugin;\n\n// API definitions path\nconst apiDefinitionsPath = path.join(__dirname, 'myApp.yaml');\n\n// add as should plugin\nmatchApiSchema(should, { apiDefinitionsPath });\n\nit('GET /pets/123', async () => {\n    const response = await request.get('/pet/123');\n    should(response).have.status(200).and.matchApiSchema();\n})\n```\n\n----------------------------------------\n\nTITLE: Chaining Zombied-Chai URL assertions\nDESCRIPTION: Example demonstrating how to chain multiple URL-related assertions in Zombied-Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/zombied_chai.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n.url().withHost('host').withPath('/').withQuery('a', 'b')\n```\n\n----------------------------------------\n\nTITLE: Running Tests for chai-webdriver-exec\nDESCRIPTION: Command to run the test suite for the chai-webdriver-exec plugin using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_exec.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Called Twice in Chai\nDESCRIPTION: Shows how to assert that a spy has been called exactly twice, using both positive and negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.twice;\nexpect(spy).to.not.have.been.called.twice;\nspy.should.have.been.called.twice;\nspy.should.not.have.been.called.twice;\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Request Testing Example\nDESCRIPTION: Example demonstrating how to make an HTTP request using SuperAgent and test the response using chai assertions\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_superagent.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport request from 'superagent';\n\nrequest\n  .get('http://localhost:8000/foo')\n  .then(res => expect(res).to.have.status(200));\n```\n\n----------------------------------------\n\nTITLE: Example of Failing Assertion for Nth Call\nDESCRIPTION: Shows how assertions for specific call numbers will fail if the spy hasn't been called enough times.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nspy('foo');\nspy('bar');\nexpect(spy).to.have.been.third.called.with('baz');\nspy.should.have.been.third.called.with('baz');\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to Application\nDESCRIPTION: Example of making an HTTP GET request to an application using Chai HTTP.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .get('/')\n```\n\n----------------------------------------\n\nTITLE: Installing chai-webdriver-exec with npm\nDESCRIPTION: Command to install the chai-webdriver-exec plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_exec.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i --save-dev chai-webdriver-exec\n```\n\n----------------------------------------\n\nTITLE: Checking File Content Substring\nDESCRIPTION: Examples of checking if files contain specific substrings.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_files.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(file('foo.txt')).to.contain('foo');\nexpect(file('foo.txt')).to.not.contain('bar');\n```\n\n----------------------------------------\n\nTITLE: Improved Error Message in @thiscode/chai-subset\nDESCRIPTION: Demonstrates the improved error message format in @thiscode/chai-subset which shows the exact path and values of the differences.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_thiscode_chai_subset.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nExpected to have \"some_value\" but got \"other_value\" at path \"/key1/key2\"\n```\n\n----------------------------------------\n\nTITLE: Mixed assertion forms with dirty-chai\nDESCRIPTION: Examples showing how to mix property and function forms, emphasizing that chains must be terminated with function form.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(true).to.be.true.and.not.false();\nexpect(true).to.be.true().and.not.false();\n```\n\n----------------------------------------\n\nTITLE: AMD Import Configuration\nDESCRIPTION: Shows how to import and configure chai-rx using AMD module format.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rxjs.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar chaiRx = require('chai-rx');\n\nchai.use(chaiRx);\n```\n\n----------------------------------------\n\nTITLE: Using containIgnoreSpaces Assertion\nDESCRIPTION: Examples of the containIgnoreSpaces assertion to verify if a string contains another string, ignoring whitespace differences.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nassert.containIgnoreSpaces('abcdefgh', 'a\\nb\\tc\\r d  ef');\nexpect('abcdefgh').to.containIgnoreSpaces('a\\nb\\tc\\r d  ef');\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Chai DecimalJS Plugin Documentation\nDESCRIPTION: This YAML front matter block sets up the layout, permalink, and plugin name for the chai-decimaljs plugin documentation page. It uses the 'plugin' layout and defines a specific URL path for the documentation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_decimaljs.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: plugin\npermalink: plugins/chai-decimaljs/\npluginName: chai-decimaljs\n---\n```\n\n----------------------------------------\n\nTITLE: Using empty assertion with jQuery elements\nDESCRIPTION: Shows how to assert that a jQuery element is empty using the empty assertion which uses jQuery's :empty selector. Falls back to Chai's implementation for non-jQuery objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n$('.empty').should.be.empty;\nexpect($('body')).not.to.be.empty;\n```\n\n----------------------------------------\n\nTITLE: Asserting Promise Fulfillment with Chai (JavaScript)\nDESCRIPTION: Demonstrates the traditional way of asserting a promise's fulfillment value using callbacks, which can be verbose and error-prone.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomethingAsync().then(\n    function (result) {\n        result.should.equal(\"foo\");\n        done();\n    },\n    function (err) {\n       done(err);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Asserting Promise Fulfillment with Chai (JavaScript)\nDESCRIPTION: Demonstrates the traditional way of asserting a promise's fulfillment value using callbacks, which can be verbose and error-prone.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomethingAsync().then(\n    function (result) {\n        result.should.equal(\"foo\");\n        done();\n    },\n    function (err) {\n       done(err);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Using html() assertion with jQuery elements\nDESCRIPTION: Examples of using the html() assertion to check if a jQuery element's HTML content matches the specified HTML string.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n$('.name').should.have.html('<em>John Doe</em>');\nexpect($('#title')).to.have.html('Chai Tea');\n```\n\n----------------------------------------\n\nTITLE: Installing chai-json via npm\nDESCRIPTION: Command to install the chai-json plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-json\n```\n\n----------------------------------------\n\nTITLE: NPM Installation Command\nDESCRIPTION: Shows the npm command to install the chai-rx package.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rxjs.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install chai-rx\n```\n\n----------------------------------------\n\nTITLE: Asserting File Basename with chai-fs\nDESCRIPTION: Examples of using the basename assertion to check the base name of a file path.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs_latest.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.have.basename(name, ?msg);\nexpect(path).to.not.have.basename(name, ?msg);\n\npath.should.have.basename(name, ?msg);\npath.should.not.have.basename(name, ?msg);\n\nassert.basename(path, name, ?msg);\nassert.notBasename(path, name, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Using visible assertion with jQuery elements\nDESCRIPTION: Examples of using the visible assertion to check if at least one element in a jQuery selection is visible using :visible selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n$('.name').should.be.visible;\nexpect($('.year')).to.be.visible;\n```\n\n----------------------------------------\n\nTITLE: Setting up sinon-chai-in-order with ES5 in JavaScript\nDESCRIPTION: ES5 require syntax example showing how to use the plugin with CommonJS module format, noting the need to access the default export.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_in_order.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nchai.use(require('chai-react-element').default);\n```\n\n----------------------------------------\n\nTITLE: Setting Test Framework Timeout for chai-nock in JavaScript\nDESCRIPTION: Example of setting a test framework timeout (in this case Jest) to accommodate the chai-nock timeout.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_nock.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\njest.setTimeout(12000);\n```\n\n----------------------------------------\n\nTITLE: Node.js Installation and Setup in JavaScript\nDESCRIPTION: Shows how to install and configure chai-changes in a Node.js environment using npm and require statements.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar chaiChanges = require(\"chai-changes\");\n\nchai.use(chaiChanges);\n```\n\n----------------------------------------\n\nTITLE: Requiring and Loading chai-param in JavaScript\nDESCRIPTION: Code snippet showing how to require and load the chai-param plugin in a JavaScript environment. It demonstrates importing chai, chai-param, and setting up the necessary variables.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_param.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai'),\n    chaiParam = require('chai-param'),\n    expect = chai.expect,\n    should = chai.should(),\n    param = chaiParam.param;\n\nchai.use(chaiParam);\n```\n\n----------------------------------------\n\nTITLE: Testing Iterator Length\nDESCRIPTION: Examples of asserting the number of values yielded by an iterator using the lengthOf assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* range(min=0, max=Infinity, step=1) {\n  for (let n = min; n < max; n += step) {\n    yield n;\n  }\n}\n\nassert.lengthOf(range(0, 10), 10);\nassert.lengthOf(range(6, 42), 36);\n```\n\n----------------------------------------\n\nTITLE: Using equalTo() assertion with Chai\nDESCRIPTION: Examples demonstrating how to check if arrays are equal using the equalTo() assertion method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_ermeschultz_chai_arrays.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.equalTo([1, 2, 3]);\nexpect([1, 2, 3]).not.to.be.equalTo([1, 2, 5]);\n```\n\n----------------------------------------\n\nTITLE: Registering a Factory Pattern\nDESCRIPTION: Shows how to register factory patterns for creating test objects with default properties\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-factories.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchai.factory('person', { name: 'John Doe', age: 29 });\nchai.factory('cat', { name: 'Boo' });\n```\n\n----------------------------------------\n\nTITLE: Using tv4 Utility Methods\nDESCRIPTION: Examples of utility methods available through the tv4 instance for managing schemas and identifying missing references.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar list = chai.tv4.getMissingUris();\nvar list = chai.tv4.getMissingUris(/^https?:/);\n\nvar list = chai.tv4.getSchemaUris();\nvar list = chai.tv4.getSchemaUris(/example.com/);\n\nvar schema = chai.tv4.getSchema('http://example.com/item');\nvar schema = chai.tv4.getSchema('http://example.com/item/#sub/type');\n\nchai.tv4.dropSchemas();\n```\n\n----------------------------------------\n\nTITLE: Using assert.alters in Chai\nDESCRIPTION: Shows how to use the assert.alters method provided by the chai-change plugin for asserting changes in values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_change.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 0;\nassert.alters(changer, changeWatcher);\n\nfunction changer() { x += 1; }\nfunction changeWatcher() { return x }\n\nassert.alters(() => { x += 1 }, () => x, { by: 1 });\nassert.alters(() => { x += 1 }, () => x, { from: x });\nassert.alters(() => { x += 1 }, () => x, { from: x, to: x + 1 });\nassert.alters(() => { x += 1 }, () => x, { to: x + 1 });\n```\n\n----------------------------------------\n\nTITLE: Setting up chai-json with Chai\nDESCRIPTION: Code to require the Chai library and register the chai-json plugin for use in tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-json'));\n```\n\n----------------------------------------\n\nTITLE: Installing chai-roughly-v2 via npm\nDESCRIPTION: Command to install the chai-roughly-v2 plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_roughly_v_.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev chai-roughly-v2\n```\n\n----------------------------------------\n\nTITLE: Using chai-jscodeshift Assertions\nDESCRIPTION: Examples of how to use the chai-jscodeshift plugin to test transformers. Shows both the expect and assert syntax for verifying that a transformer correctly transforms a fixture.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jscodeshift.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport myTransform from '../src/my-transform';\n\ndescribe('myTransform', () => {\n  it('transforms properly', () => {\n    expect(myTransform).to.transform('my-fixture');\n\n    // or\n\n    assert.transforms(myTransform, 'my-fixture');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: ES6 Import Configuration for Chai-Rx\nDESCRIPTION: Shows how to import and configure chai-rx using ES6 module syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rx.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport chai from 'chai';\nimport chaiRx from 'chai-rx';\n\nchai.use(chaiRx);\n```\n\n----------------------------------------\n\nTITLE: Using the jsonFile() assertion\nDESCRIPTION: Example of asserting that a file is a valid JSON file using the jsonFile() assertion method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(testFile).to.be.a.jsonFile();\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up chai-as-typed\nDESCRIPTION: Shows how to install the chai-as-typed plugin and configure it with Chai for use in tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_typed.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar chaiAsTyped = require('chai-as-typed');\n\nchai.use(chaiAsTyped);\n```\n\n----------------------------------------\n\nTITLE: Initializing chai-stats in Node.js\nDESCRIPTION: JavaScript code to require and use the chai-stats plugin in a Node.js environment, setting up the should and expect interfaces.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , chaiStats = require('chai-stats');\n\nchai.use(chaiStats);\n\nvar should = chai.should()\n  , expect = chai.expect;\n```\n\n----------------------------------------\n\nTITLE: Checking if Values are Not Iterable with assert.isNotIterable() in JavaScript\nDESCRIPTION: Shows how to use the assert.isNotIterable() method to check if a value is not an iterable object. Tests with primitive values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nassert.isNotIterable(235);\nassert.isNotIterable(true);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-retry Plugin via npm\nDESCRIPTION: Command to install the chai-retry plugin as a dev dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_retry.md#2025-04-09_snippet_0\n\nLANGUAGE: ssh\nCODE:\n```\nnpm i --save-dev chai-retry\n```\n\n----------------------------------------\n\nTITLE: Serenity/JS Integration Example\nDESCRIPTION: Example showing how to use Chai Smoothie with Serenity/JS Questions\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_smoothie.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(actor.toSee(WebElement.of(Article.Title))).displayed\n```\n\n----------------------------------------\n\nTITLE: Importing Jest-Kefir with ES Modules\nDESCRIPTION: Example showing how to import jest-kefir and Kefir using ES Modules syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Kefir from 'kefir'\nimport jestKefir from 'jest-kefir'\n```\n\n----------------------------------------\n\nTITLE: Using chai-bytes with expect and assert Styles\nDESCRIPTION: Demonstrates basic usage of chai-bytes plugin with both expect and assert styles. Shows how to compare a Uint8Array with a hexadecimal string and an array of numbers.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bytes.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect, assert } = require('chai')\n  .use(require('chai-bytes'));\n\nconst buffer = new Uint8Array([ 1, 2, 3, 4, 5 ]);\nexpect(buffer).to.equalBytes('0102030405');\n// `assert` style works, too\nassert.equalBytes(buffer, [1, 2, 3, 4, 5], 'error message');\n```\n\n----------------------------------------\n\nTITLE: MongoDB ObjectId Type Validation in Chai.js\nDESCRIPTION: Shows how to verify that a value is a valid MongoDB ObjectId using the objectId assertion. This is useful for validating MongoDB document IDs and references.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_mongo_doc.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(someObjectId).to.be.objectId\n```\n\n----------------------------------------\n\nTITLE: Referencing Chai-Spy Module\nDESCRIPTION: Shows the basic module reference for the chai-spy plugin, which is used for adding spy functionality to Chai assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spy.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nchai-spy\n```\n\n----------------------------------------\n\nTITLE: Testing Synchronous Emissions with chai-kefir\nDESCRIPTION: Example showing how to assert synchronous emissions from a Kefir Observable using the emit assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).to.emit([value(1), error(new Error('whoops!')), end()], () => {\n    send(obs, [value(1), error(new Error('whoops!')), end()]);\n});\n```\n\n----------------------------------------\n\nTITLE: Expect and Should Syntax Examples\nDESCRIPTION: Shows different assertion styles using expect and should syntax with error handling scenarios.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rxjs.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xs = scheduler.createHotObservable(onNext(250, { 'foo': 'bar' }), onError(300, new Error('An error')));\nconst output = scheduler.startScheduler(() => xs);\n\n// expect\nexpect(output).to.emit([\n  onNext(250, { 'foo': 'bar' }),\n  onError(300, ({error}) => error.message === 'An error')\n]);\n\n// should\noutput.should.emit([\n  onNext(250, { 'foo': 'bar' }),\n  onError(300, ({error}) => error.message === 'An error')\n]);\n```\n\n----------------------------------------\n\nTITLE: Testing Associated Values using successWrapping and failureWrapping Methods\nDESCRIPTION: Using the successWrapping and failureWrapping methods to verify both the type and associated value of a Result in a single assertion. Supports equality modifiers like 'deep'.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kekka.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst error = new Error('Failure message')\nexpect(Failure(error)).to.be.a.failureWrapping(error) // OK\nexpect(Failure(error)).to.be.a.successWrapping(error) // FAIL - not a Success\nexpect(Failure(error)).to.be.a.failureWrapping('some other value') // FAIL\n\nexpect(Success('Success String')).to.be.a.successWrapping('Success String') // OK\nexpect(Success('Success String')).to.be.a.failureWrapping('Success String') // Fail - not a Failure\n\n// equality modifiers can be used, such as deep, on successWrapping and failureWrapping\nexpect(Success({ a: '423' })).to.be.a.deep.successWrapping({ a: '423' })\n```\n\n----------------------------------------\n\nTITLE: Unordered ID Comparison in JavaScript\nDESCRIPTION: Shows how to use the 'unordered' chain to compare IDs in arrays without considering their order.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chaid.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[{id:'a'}, {id:'b'}].should.have.same.unordered.ids [{id:'b'}, {id:'a'}]\n```\n\n----------------------------------------\n\nTITLE: Sinon-Chai example using should interface\nDESCRIPTION: Complete example showing how to use sinon-chai with Chai's should interface in a Mocha test.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sinon.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nchai.should();\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        cb.should.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Null Object from Scratch\nDESCRIPTION: Example of building a null object with custom methods using chai-null's fluent interface.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_null.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar nullobject = chai.Null().method('foo').method('bar').create();\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to External URL\nDESCRIPTION: Example of making an HTTP GET request to an external URL using chai-http, allowing testing of external services.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request('http://localhost:8080')\n  .get('/')\n```\n\n----------------------------------------\n\nTITLE: Defining AMD Tests with Chai-Signals\nDESCRIPTION: Example of defining a test using AMD module pattern with chai-signals to spy on and verify signal dispatches.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_signals.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(['myClass', 'chaiSignals'], function(myClass, chaiSignals) {\n\tit('should signal completed', function () {\n\t\tchai.signals.spyOnSignal(myClass.completed);\n\n\t\tmyClass.doSomething();\n\n\t\texpect(myClass.completed).to.have.been.dispatched();\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Files Contain Valid JSON using Chai\nDESCRIPTION: Examples of asserting that a path exists, is a file, and contains JSON-parsable text using expect/should/assert styles in chai-fs. Attempts to parse the file content as JSON to validate it.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-fs.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).with.json;\nexpect(path).to.be.a.file(?msg).with.not.json;\n\npath.should.be.a.file(?msg).with.json;\npath.should.be.a.file(?msg).with.not.json;\n\nassert.jsonFile(path, ?msg);\nassert.notJsonFile(path, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Using noReservedWordsExcept assertion in Chai\nDESCRIPTION: Shows how to use the noReservedWordsExcept assertion, which allows specifying exceptions to the reserved word check. This snippet demonstrates usage with different Chai assertion styles and both single string and array arguments.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_dynamodb.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst usingAttributeNamePrefix = 'SET #name = :fullname';\nconst usingAttributeValuePrefix = 'SET username = :name';\nconst missingPrefix = 'SET username = name';\n\n// using should-style assertions\nusingAttributeNamePrefix.should.have.noReservedWordsExcept('set');\nusingAttributeValuePrefix.should.have.noReservedWordsExcept('SET');\nmissingPrefix.should.have.noReservedWordsExcept(['SET', 'NAME']);\nmissingPrefix.should.have.noReservedWordsExcept('SET'); // fails\n\n// using expect-style assertions\nexpect(usingAttributeNamePrefix).to.have.noReservedWordsExcept('set');\nexpect(usingAttributeValuePrefix).to.have.noReservedWordsExcept('SET');\nexpect(missingPrefix).to.have.noReservedWordsExcept(['SET', 'NAME']);\nexpect(missingPrefix).to.have.noReservedWordsExcept('SET'); // fails\n\n// using tdd assertions\nassert.noReservedWordsExcept(usingAttributeNamePrefix, 'set');\nassert.noReservedWordsExcept(usingAttributeValuePrefix, 'SET');\nassert.noReservedWordsExcept(missingPrefix, ['SET', 'NAME']);\nassert.noReservedWordsExcept(missingPrefix, 'SET'); // fails\n```\n\n----------------------------------------\n\nTITLE: Chai Image Plugin Setup - TypeScript\nDESCRIPTION: Code showing how to import and set up chai-image plugin with different assertion styles\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_image.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as chai from \"chai\";\nimport { chaiImage } from \"chai-image\";\n\nchai.use(chaiImage);\n\n// Then either:\nconst expect = chai.expect;\n// or:\nconst assert = chai.assert;\n// or:\nchai.should();\n// according to your preference of assertion style\n```\n\n----------------------------------------\n\nTITLE: Browser Installation\nDESCRIPTION: HTML script tag for including chai-immutable in browser environments.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai-immutable.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting up Zombied-Chai in a spec helper\nDESCRIPTION: Code showing how to initialize and configure Zombied-Chai in a spec helper file for testing.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/zombied_chai.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nvar chai = require('chai')\nvar zombiedChai = require('zombied-chai')\n\nchai.should()\nchai.use(zombiedChai)\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-standard tv4 Properties\nDESCRIPTION: Settings to enable cyclical object validation, ban unknown properties, and validate multiple errors using tv4's extended functionality.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchai.tv4.cyclicCheck = true;\n```\n\n----------------------------------------\n\nTITLE: Setting up chai-generator in Node.js\nDESCRIPTION: Demonstrates how to require and use the chai-generator plugin in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_generator.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\nchai.use(require('chai-generator'))\n```\n\n----------------------------------------\n\nTITLE: Using matchPattern assertion in Chai tests\nDESCRIPTION: Example of using the matchPattern assertion to check JSON objects against patterns in Chai tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_match_pattern.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchai.expect({a: 1, b: 'abc'}).to.matchPattern({a: 1, b: _.isString});\n```\n\n----------------------------------------\n\nTITLE: Installing and Including Chai HTTP Plugin in JavaScript\nDESCRIPTION: Shows how to install the chai-http plugin via npm and include it in a JavaScript project using Node.js require syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/natanavra_chai_http.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , chaiHttp = require('chai-http');\n\nchai.use(chaiHttp);\n```\n\n----------------------------------------\n\nTITLE: Markdown Snapshot Format Example\nDESCRIPTION: Example of snapshot output in markdown format with syntax highlighting support\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_karma_snapshot.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `src/html.js`\n\n## `Sub Suite`\n\n####   `HTML Snapshot`\n\n```html\n<div>\n  <span />\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Using Chai-Subset with Expect Interface for Object Property Matching\nDESCRIPTION: Demonstrates how to use the containSubset matcher with Chai's expect interface to verify that an object contains specific properties and nested objects. Also shows usage with compare functions and negation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_spankchain_chai_subset.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = {\n\ta: 'b',\n\tc: 'd',\n\te: {\n\t\tfoo: 'bar',\n\t\tbaz: {\n\t\t\tqux: 'quux'\n\t\t}\n\t}\n};\n\t\nexpect(obj).to.containSubset({\n\ta: 'b',\n\te: {\n\t\tbaz: {\n\t\t\tqux: 'quux'\n\t\t}\n\t}\n});\n\n// or using a compare function\nexpect(obj).containSubset({\n\ta: (expectedValue) => expectedValue,\n\tc: (expectedValue) => expectedValue === 'd'\n})\n\n// or with 'not'\nexpect(obj).to.not.containSubset({\n\tg: 'whatever'\n});\n```\n\n----------------------------------------\n\nTITLE: Using spy.on to Add Spies to Existing Methods\nDESCRIPTION: Demonstrates how to use chai.spy.on() to add spies to existing methods of an object, including multiple spies and custom implementations.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-spies.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [1, 2, 3];\n\nchai.spy.on(array, 'push');\n\n// or multiple spies\nchai.spy.on(array, ['push', 'pop']);\n\n// Custom implementation\nchai.spy.on(array, 'push', function (...items) {\n  // custom implementation of `push` method\n});\n\n// Constant return value\nchai.spy.on(array, 'push', () => 5);\n\n// or more readable :)\nchai.spy.on(array, 'push', returns => 5);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Iterable Class in JavaScript\nDESCRIPTION: Example of creating a user-defined iterable object using ES2015 class syntax and a generator method for Symbol.iterator, which produces an infinite sequence.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass Count {\n\n  constructor(start=0, step=1) {\n    this.start = start;\n    this.step = step;\n  }\n\n  *[Symbol.iterator]() {\n    for (let n = this.start; true; n += this.step) {\n      yield n;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Data in Request\nDESCRIPTION: Example of sending JSON data in an HTTP PUT request using chai-http. By default, data sent with the send method is JSON formatted.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Send some JSON\nchai.request(app)\n  .put('/user/me')\n  .send({ password: '123', confirmPassword: '123' })\n```\n\n----------------------------------------\n\nTITLE: Browser Script Tag Setup in HTML\nDESCRIPTION: Shows how to include chai-changes in a browser environment using script tags, which will automatically plug into Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-changes.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Asserting Size of Immutable Collections (JavaScript)\nDESCRIPTION: Demonstrates the use of .size() and .sizeOf() to assert the size of immutable collections. It also shows how .size can be used as a chain precursor for size comparisons.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(List.of(1, 2, 3)).to.have.size(3);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(List.of(1, 2, 3)).to.have.size.least(3);\nexpect(List.of(1, 2, 3)).to.have.size.most(3);\nexpect(List.of(1, 2, 3)).to.have.size.above(2);\nexpect(List.of(1, 2, 3)).to.have.size.below(4);\nexpect(List.of(1, 2, 3)).to.have.size.within(2, 4);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(List.of(1, 2, 3)).to.have.sizeOf(3);\n```\n\n----------------------------------------\n\nTITLE: Installing Chai JSON Equal Plugin\nDESCRIPTION: Demonstrates how to include and initialize the chai-json-equal plugin in a Node.js project.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_equal.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , chaiJsonEqual = require('chai-json-equal');\n\nchai.use(chaiJsonEqual);\n```\n\n----------------------------------------\n\nTITLE: Testing Progression of an Iterator\nDESCRIPTION: Example showing how iterators maintain state and can be progressively consumed, which affects subsequent tests using the same iterator instance.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet fiborator = fibonacci();\n\nfiborator.should.iterate.from([1, 1, 2, 3, 5]);\nfiborator.should.iterate.from([8, 13, 21, 34]);\n```\n\n----------------------------------------\n\nTITLE: Importing and configuring chai-match-pattern in JavaScript\nDESCRIPTION: Code snippet showing how to import chai, chai-match-pattern, and configure the plugin for use in tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_match_pattern.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiMatchPattern = require('chai-match-pattern');\nchai.use(chaiMatchPattern);\nconst _ = chaiMatchPattern.getLodashModule(); // recommend using our lodash extension\n```\n\n----------------------------------------\n\nTITLE: Installing chai-string in Browser Environment\nDESCRIPTION: HTML script tags for including chai and chai-string in a browser environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-string.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Checkmark with CommonJS\nDESCRIPTION: This snippet demonstrates how to require and use Chai Checkmark in a CommonJS environment. It loads both Chai and the Checkmark plugin, then uses the plugin with Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_checkmark.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\"),\n    plugin = require(\"chai-checkmark\")\nchai.use(plugin)\n```\n\n----------------------------------------\n\nTITLE: Testing View Event Callbacks with call Assertion\nDESCRIPTION: Shows how to use the 'call' assertion to test view callbacks by rebinding view events to test DOM events. This is particularly useful for testing view interactions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_backbone.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nview.should.call('startAuthentication').when(function() {\n  view.$('a.login').trigger('click');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Stats via NPM\nDESCRIPTION: Command to install the chai-stats plugin using npm package manager\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats_jamestalmage.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install chai-stats\n```\n\n----------------------------------------\n\nTITLE: Setting up chai-semver in a unit test\nDESCRIPTION: Code snippet showing how to require and use the chai-semver plugin in a unit test setup.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_semver.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai')\nconst chaiSemver = require('chai-semver')\n\nchai.use(chaiSemver)\n```\n\n----------------------------------------\n\nTITLE: Including Sinon-Chai via script tags\nDESCRIPTION: Example of including Sinon-Chai directly in a browser using script tags, showing the correct loading order with Chai and Sinon.JS.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_es.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"sinon-chai.js\"></script>\n<script src=\"sinon.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Redirect in Response\nDESCRIPTION: Examples of asserting that an HTTP response indicates a redirect. This is useful for testing navigation flows and URL changes.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(res).to.redirect;\nexpect(res).to.not.redirect;\n```\n\n----------------------------------------\n\nTITLE: Using descendants assertion with jQuery elements\nDESCRIPTION: Shows how to assert that a jQuery selection has descendants matching a given selector using the descendants assertion with jQuery's has method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_20\n\nLANGUAGE: js\nCODE:\n```\n$('body').should.have.descendants('h1');\nexpect($('#content')).to.have.descendants('div');\n```\n\n----------------------------------------\n\nTITLE: Node.js Installation and Setup\nDESCRIPTION: Shows how to install and set up Sinon-Chai in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar sinonChai = require(\"sinon-chai\");\n\nchai.use(sinonChai);\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Shallow Deep Equal in Node.js\nDESCRIPTION: JavaScript code for requiring and using the chai-shallow-deep-equal plugin in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_shallow_deep_equal.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-shallow-deep-equal'));\n```\n\n----------------------------------------\n\nTITLE: Configuring chai-null with Node.js\nDESCRIPTION: Setup code for using chai-null plugin in Node.js environment by requiring and registering it with chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_null.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , nil = require('chai-null');\n\nchai.use(nil);\n```\n\n----------------------------------------\n\nTITLE: Configuring chai-null with Node.js\nDESCRIPTION: Setup code for using chai-null plugin in Node.js environment by requiring and registering it with chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_null.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , nil = require('chai-null');\n\nchai.use(nil);\n```\n\n----------------------------------------\n\nTITLE: Simple Image Comparison Example - TypeScript\nDESCRIPTION: Example showing how to read and compare two PNG images using filesystem\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_image.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Simple Example\nimport * as fs from \"fs\";\n\nconst bufActual = fs.readFileSync(\"actual.png\");\nconst bufExpected = fs.readFileSync(\"expected.png\");\n\nexpect(bufActual).to.matchImage(bufExpected);\n```\n\n----------------------------------------\n\nTITLE: Setting up chai-eventemitter in Node.js\nDESCRIPTION: This code snippet shows how to set up the chai-eventemitter plugin in a Node.js environment. It requires the Chai library and uses the plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_eventemitter.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\nchai.use(require('chai-eventemitter'))\n```\n\n----------------------------------------\n\nTITLE: Testing arrays with ascending sort order\nDESCRIPTION: Demonstrates how to test if an array is sorted in ascending order using the .sorted() method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sorted.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([\"a\",\"b\"]).to.be.sorted()\n// or\nexpect([\"a\",\"b\"]).to.be.sorted({descending: false})\n```\n\n----------------------------------------\n\nTITLE: Enabling API Schema Coverage Report in Terminal\nDESCRIPTION: Configuration example showing how to enable API definitions coverage reporting in the terminal by setting the reportCoverage option to true.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/api_contract_validator.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nuse(matchApiSchema({\n    apiDefinitionsPath,\n    reportCoverage: true\n}));\n```\n\n----------------------------------------\n\nTITLE: Integrating chai-roughly-v2 with Chai\nDESCRIPTION: Code snippet showing how to import and register the chai-roughly-v2 plugin with Chai to enable the 'roughly' assertion chain.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_roughly_v_.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\n\nchai.use(require('chai-roughly-v2'));\n```\n\n----------------------------------------\n\nTITLE: Testing arrays with descending sort order\nDESCRIPTION: Shows how to test if an array is sorted in descending order using the .sorted() method with the descending option.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sorted.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([\"b\",\"apples\"]).to.be.sorted({descending: true})\n```\n\n----------------------------------------\n\nTITLE: Using the 'requestedWith' Assertion with chai-nock in JavaScript\nDESCRIPTION: Example of using the 'requestedWith' assertion to verify that a request has been made with a specific body payload.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_nock.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('requestedWith', () => {\n  const requestNock = nock('http://bbc.co.uk')\n    .get('/')\n    .reply(200);\n\n  request({\n    json: true,\n    uri: 'http://bbc.co.uk',\n    body: {\n      hello: 'world'\n    }\n  });\n\n  return expect(requestNock).to.have.been.requestedWith({ hello: 'world' });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Sinon-Chai as an AMD Module\nDESCRIPTION: Demonstrates how to use Sinon-Chai as an AMD module with a module loader.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_joethefkingfrypan_sinon_chai.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function (require, exports, module) {\n    var chai = require(\"chai\");\n    var sinonChai = require(\"sinon-chai\");\n\n    chai.use(sinonChai);\n});\n```\n\n----------------------------------------\n\nTITLE: Using disabled assertion with jQuery elements\nDESCRIPTION: Examples of using the disabled assertion to check if at least one element in a jQuery selection is disabled using :disabled selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n$('.disabled').should.be.disabled;\nexpect($('input')).not.to.be.disabled;\n```\n\n----------------------------------------\n\nTITLE: Increase Assertion Examples in CoffeeScript\nDESCRIPTION: Demonstrates how to verify that a value specifically increases during code execution rather than just changing.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_8\n\nLANGUAGE: coffeescript\nCODE:\n```\nresult = 0\nexpect(-> result).to.increase.when -> result += 1\nexpect(-> result).not.to.increase.when -> result\nexpect(-> result).not.to.increase.when -> result -= 1\n```\n\n----------------------------------------\n\nTITLE: Larger Text Length Comparison in Chai WebDriver\nDESCRIPTION: Tests if the text length is larger than the provided number.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.have.larger.text(0)\n```\n\n----------------------------------------\n\nTITLE: Installing chai-null via HTML Script Tag\nDESCRIPTION: Instructions for including the chai-null plugin in browser environments by adding a script tag after chai.js.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_null.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai-null.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Chai-Subset with Should Interface for Array Matching\nDESCRIPTION: Shows how to use containSubset with Chai's should interface for matching arrays of objects, including example error messages when assertions fail.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_spankchain_chai_subset.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar list = [{a: 'a', b: 'b'}, {v: 'f', d: {z: 'g'}}];\n\nlist.should.containSubset([{a:'a'}]); //Assertion error is not thrown\nlist.should.containSubset([{a:'a',  b: 'b'}]); //Assertion error is not thrown\n\nlist.should.containSubset([{a:'a', b: 'bd'}]); \n/*throws\nAssertionError: expected\n[\n    {\n        \"a\": \"a\",\n        \"b\": \"b\"\n    },\n    {\n        \"v\": \"f\",\n        \"d\": {\n            \"z\": \"g\"\n        }\n    }\n]\nto contain subset \n[ { a: 'a', b: 'bd' } ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Checking Iterator Sequence Prefixes with assert.iteratesFrom() in JavaScript\nDESCRIPTION: Demonstrates how to use assert.iteratesFrom() to check if an iterable begins with a given sequence of values. Tests various prefix lengths including empty prefixes.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nassert.iteratesFrom([2, 3, 5], [2, 3, 5]);\nassert.iteratesFrom([2, 3, 5], [2, 3]);\nassert.iteratesFrom('abcdefg', 'abc');\nassert.iteratesFrom('abcdefg', '');\n```\n\n----------------------------------------\n\nTITLE: Customizing Fixture Directory\nDESCRIPTION: Configures chai-jscodeshift to look for fixtures in a specific directory. Uses the path module to join the current directory with a 'fixtures' subdirectory.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jscodeshift.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport path from 'path';\n\nchai.use(chaiJSCodeShift({\n  fixtureDirectory: path.join(__dirname, 'fixtures')\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Chai as Promised with async/await and Promise-Friendly Test Runners\nDESCRIPTION: Demonstrates how to use Chai as Promised assertions with async/await syntax in promise-friendly test environments.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nit('should work well with async/await', async () => {\n  (await Promise.resolve(42)).should.equal(42)\n  await Promise.reject(new Error()).should.be.rejectedWith(Error);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up chai-stats in Node.js\nDESCRIPTION: Code to require and initialize chai-stats plugin with Chai in Node.js environment\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-stats.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , chaiStats = require('chai-stats');\n\nchai.use(chaiStats);\n\nvar should = chai.should()\n  , expect = chai.expect;\n```\n\n----------------------------------------\n\nTITLE: Custom tolerance assertions\nDESCRIPTION: Examples of using custom tolerance values for specific assertions\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_almost.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(10).to.be.almost(15, 10)                   // passes\nexpect([4, 2, 5]).to.be.deep.almost([3, 4, 7], 3) // passes\n```\n\n----------------------------------------\n\nTITLE: Checking if Values are Iterable with assert.isIterable() in JavaScript\nDESCRIPTION: Shows how to use the assert.isIterable() method to check if a value is an iterable object with an @@iterator method. Tests with arrays and strings.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nassert.isIterable([2, 3, 5]);\nassert.isIterable('abcdefg');\n```\n\n----------------------------------------\n\nTITLE: Plugin Integration with Chai\nDESCRIPTION: Shows how to import and integrate the plugin with Chai testing framework.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_assertions_count.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiAssertionsCount = require('chai-assertions-count');\n\nchai.use(chaiAssertionsCount);\n```\n\n----------------------------------------\n\nTITLE: Subset ID Comparison in JavaScript\nDESCRIPTION: Demonstrates how to check for a subset of IDs using the 'include' or 'contain' chains with ChaId assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chaid.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[{id:'a'}, {id:'b'}].should.include.same.ids [{id:'a'}]\n```\n\n----------------------------------------\n\nTITLE: Testing CLI Output with Chai-Exec Assertions\nDESCRIPTION: Demonstrates various ways to test CLI output using different Chai assertion styles. Shows how to check for exact matches, substrings, and regular expressions against both stdout and combined output.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exec.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Should syntax\nmyCLI.output.should.equal(\"Success!\");\nmyCLI.should.have.output.that.contains(\"Failure!\");\nmyCLI.should.have.output.that.does.not.contain(\"Success!\");\nmyCLI.should.have.output.that.matches(/^(Success|Failure)!$/);\nmyCLI.should.have.output.that.does.not.match(/^(Success|Failure)!$/);\n\n// Expect syntax\nexpect(myCLI).output.to.equal(\"Success!\");\nexpect(myCLI).to.have.output.that.contains(\"Failure!\");\nexpect(myCLI).to.have.output.that.does.not.contain(\"Success!\");\nexpect(myCLI).to.have.output.that.matches(/^(Success|Failure)!$/);\nexpect(myCLI).to.have.output.that.does.not.match(/^(Success|Failure)!$/);\n\n// Assert syntax\nassert.output(myCLI, \"Failure!\");\nassert.output(myCLI, /^(Success|Failure)!$/);\n\nassert.include(myCLI.output, \"Failure!\");\nassert.notInclude(myCLI.output, \"Success!\");\n\nassert.match(myCLI.output, /^Failure!$/);\nassert.notMatch(myCLI.output, /^Success!$/);\n```\n\n----------------------------------------\n\nTITLE: Deep Equality Just Assertions\nDESCRIPTION: Example of using just assertion with deep equality checking\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/maybe_chai.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect( Maybe.just({a: 'test'}) ).to.be.just({a: 'test'})\n```\n\n----------------------------------------\n\nTITLE: Including Chai-jQ in Browser\nDESCRIPTION: Shows how to include chai-jq plugin in a standard HTML page after loading Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jq.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-jq.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Infinite Iterable Objects\nDESCRIPTION: Examples of testing an infinite sequence using the from() assertion, which is safe because it only consumes the necessary elements to complete the comparison.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet tens = new Count(10, 10);\n\ntens.should.be.iterable;\ntens.should.iterate.from([10, 20, 30]);\ntens.should.iterate.from([10, 20, 30, 40, 50]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Chai IP Plugin\nDESCRIPTION: Code to import and initialize the chai-ip plugin with Chai assertion library.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_ip.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { use } from 'chai';\nimport ip from 'chai-ip';\n\nuse(ip);\n```\n\n----------------------------------------\n\nTITLE: Setting up Chai Iterator in Node.js\nDESCRIPTION: Code to set up and register the chai-iterator plugin with Chai in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiIterator = require('chai-iterator');\n\nchai.use(chaiIterator);\n```\n\n----------------------------------------\n\nTITLE: Using Sinon.JS assertions directly\nDESCRIPTION: Traditional usage of Sinon.JS assertions without Chai integration.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sinon.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsinon.assertCalledWith(mySpy, \"foo\");\n```\n\n----------------------------------------\n\nTITLE: Deep Checking Iterator Sequence Suffixes with assert.deepIteratesUntil() in JavaScript\nDESCRIPTION: Demonstrates using assert.deepIteratesUntil() to check if an iterable ends with a given sequence, using deep equality for complex objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nassert.deepIteratesUntil([{n: 2}, {n: 3}], [{n: 3}]);\nassert.deepIteratesUntil([[0, 2], [1, 3]], [[1, 3]]);\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Always Called With Specific Arguments in Chai\nDESCRIPTION: Shows how to verify that a spy was always called with certain arguments, though other arguments may have been present in each call.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nspy('foo');\nspy('foo', 'bar');\nspy(1, 2, 'foo');\nexpect(spy).to.have.been.called.always.with('foo');\nspy.should.have.been.called.always.with('foo');\n```\n\n----------------------------------------\n\nTITLE: Using spy.returns Helper (Deprecated)\nDESCRIPTION: Demonstrates the deprecated spy.returns helper that creates a function returning a constant value, and the preferred arrow function approach.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst returnTrue = chai.spy.returns(true);\n\nreturnTrue(); // true\n```\n\n----------------------------------------\n\nTITLE: Installing chai-like with npm\nDESCRIPTION: Command to install the chai-like plugin as a dev dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_like.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev chai-like\n```\n\n----------------------------------------\n\nTITLE: Asserting Odd Numbers with bn-chai\nDESCRIPTION: Examples of using the 'odd' assertion with bn-chai to check if a BN.js decimal is odd.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new BN('1')).to.be.odd;\nexpect(new BN('2')).not.to.be.odd;\n```\n\n----------------------------------------\n\nTITLE: Chai-BN Property Assertions Example\nDESCRIPTION: Examples showing how to use chai-bn property assertions for checking negative numbers and zero values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bn.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(new BN('-100')).should.be.a.bignumber.that.is.negative;\nexpect(new BN('1').sub(new BN('1'))).to.be.a.bignumber.that.is.zero;\n```\n\n----------------------------------------\n\nTITLE: Body Matcher Example with Object Comparison\nDESCRIPTION: Example showing how to use the haveBodyObject matcher to verify the response body against an expected object structure.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/node_fetch_response_matchers.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit('have body object', () => {\n  return expect(fetch('http://localhost/').to.haveBodyObject({foo: 'bar'});\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing chai-bignumber plugin in JavaScript\nDESCRIPTION: Code snippet showing how to require and use the chai-bignumber plugin with either default or custom BigNumber implementation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bignumber.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\n\n//use default BigNumber\nchai.use(require('chai-bignumber')());\n\n//use custom BigNumber\nchai.use(require('chai-bignumber')(BigNumber));\n```\n\n----------------------------------------\n\nTITLE: Initializing Chai with Better Shallow Deep Equal Plugin in JavaScript\nDESCRIPTION: Shows how to import and initialize the chai-better-shallow-deep-equal plugin with Chai. This setup adds the shallowDeepEqual assertion to all Chai interfaces.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_better_shallow_deep_equal.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require(\"chai\");\nconst expect = chai.expect;\n\nchai.use(require(\"chai-better-shallow-deep-equal\"));\n```\n\n----------------------------------------\n\nTITLE: IPv6 Address Assertion Examples\nDESCRIPTION: Examples showing IPv6-specific address validation assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_ip.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('127.0.0.1').to.not.be.an.ipv6;\nexpect('2001:0db8:85a3:0000:0000:8a2e:0370:7334').to.be.an.ipv6;\n```\n\n----------------------------------------\n\nTITLE: Installing chai-eventemitter2 with NPM\nDESCRIPTION: Command to install the chai-eventemitter2 plugin using NPM as a development dependency.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_eventemitter_.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D chai-eventemitter2\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Chai Exec Plugin\nDESCRIPTION: JavaScript code to import the Chai Exec plugin and register it with Chai for use in tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exec.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chaiExec = require(\"@jsdevtools/chai-exec\");\nconst chai = require(\"chai\");\n\nchai.use(chaiExec);\n```\n\n----------------------------------------\n\nTITLE: Using .deepAlmostEqual assertion\nDESCRIPTION: Examples of using the .deepAlmostEqual assertion to compare objects with numeric leaves within a specified precision.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect({ pi: 3.1416 }).to.almost.eql({ pi: 3.14159 }, 3);\nassert.deepAlmostEqual({ pi: 3.1416 }, { pi: 3.14159 }, 3);\n```\n\n----------------------------------------\n\nTITLE: Asserting a Spy Was Called More Than N Times\nDESCRIPTION: Demonstrates how to assert that a spy was called more than n times, using both above and gt syntaxes.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.above(3);\nexpect(spy).to.not.have.been.called.gt(3);\nspy.should.have.been.called.gt(3);\nspy.should.not.have.been.called.above(3);\n```\n\n----------------------------------------\n\nTITLE: IP Address Assertion Examples\nDESCRIPTION: Examples showing how to use the IP address assertions to validate both IPv4 and IPv6 addresses.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_ip.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('127.0.0.1').to.be.an.ip;\nexpect('2001:0db8:85a3:0000:0000:8a2e:0370:7334').to.be.an.ip;\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Files Plugin with NPM\nDESCRIPTION: Command to install the chai-files plugin as a development dependency.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_files.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev chai-files\n```\n\n----------------------------------------\n\nTITLE: Asserting Zero with bn-chai\nDESCRIPTION: Examples of using the 'zero' assertion with bn-chai to check if a BN.js decimal is equal to zero.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new BN('0')).to.be.zero;\nexpect(new BN('1')).not.to.be.zero;\n```\n\n----------------------------------------\n\nTITLE: Adding DOM Flag to Selector in JavaScript\nDESCRIPTION: Shows how to add the dom flag to the selector chain to enable DOM-specific assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom\n```\n\n----------------------------------------\n\nTITLE: Setting Request Headers with Chai HTTP\nDESCRIPTION: Example of setting HTTP request headers when making a PUT request to update user data. This demonstrates how to configure request metadata.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Set a request header\nchai.request(app)\n  .put('/user/me')\n  .set('Content-Type', 'application/json')\n  .send({ password: '123', confirmPassword: '123' })\n```\n\n----------------------------------------\n\nTITLE: Installing chai-eventemitter2 with Yarn\nDESCRIPTION: Command to install the chai-eventemitter2 plugin using Yarn as a development dependency.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_eventemitter_.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D chai-eventemitter2\n```\n\n----------------------------------------\n\nTITLE: Including chai-stats in browser\nDESCRIPTION: HTML script tag to include the chai-stats plugin in a browser environment after loading Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<script src=\"chai-stats.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuration Interfaces - TypeScript\nDESCRIPTION: Type definitions for configuration options including alignment, diff settings, and output options\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_image.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenum Align {\n  LEFT_TOP = \"leftTop\",\n  CENTER = \"center\",\n}\n\ninterface MatchImageOptions {\n  // Custom diff config passed to pixelmatch\n  diff?: DiffOptions;\n  \n  // Image aligning config for aligning different size image (default: Align.LEFT_TOP)\n  align?: Align;\n  \n  // Output config\n  // if specified, chai-image will create output files to visualize diff \n  output?: OutputOptions;\n}\n\ninterface DiffOptions {\n  threshold?: number;\n  includeAA?: boolean;\n  alpha?: number;\n  aaColor?: [number, number, number];\n  /* The color of differing pixels in the diff output. [255, 0, 0] by default. */\n  diffColor?: [number, number, number];\n}\n\ninterface OutputOptions {\n  // Currently name is used to generate filename\n  name: string;\n  // Path of output directory (default: WORKDING_DIR/outputs)\n  dir?: string;\n  \n  // Output creation conditions\n  // Controls when to create output files (default: failure)\n  on?: \"failure\" | \"always\";\n  \n  // Controls output file types (default: false)\n  diffOnly?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Chai-Signals with AMD Module Pattern\nDESCRIPTION: Configuration for using chai-signals with AMD (Asynchronous Module Definition) pattern, showing how to define paths and use the plugin in tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_signals.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire.config({\n\tpaths: {\n\t\tsignals: 'components/js-signals/signals',\n\t\t'chai-signals': 'components/chai-signals/lib/chai-signals'\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Installing chai-semver plugin\nDESCRIPTION: Command to install the chai-semver plugin as a dev dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_semver.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D chai-semver\n```\n\n----------------------------------------\n\nTITLE: Installing chai-json-schema with Bower\nDESCRIPTION: Command to install the chai-json-schema package using Bower for browser-side usage.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-json-schema.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bower install chai-json-schema\n```\n\n----------------------------------------\n\nTITLE: Deep Checking Iterator Prefix Mismatch with assert.doesNotDeepIterateFrom() in JavaScript\nDESCRIPTION: Shows how to use assert.doesNotDeepIterateFrom() to verify that an iterable does not begin with a specific sequence, using deep equality for complex objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nassert.doesNotDeepIterateFrom([{n: 2}, {n: 3}], [{n: 5}]);\nassert.doesNotDeepIterateFrom([[0, 2], [1, 3]], [[1, 3]]);\n```\n\n----------------------------------------\n\nTITLE: Using String type assertions\nDESCRIPTION: Examples of using the string() assertion to verify that values are of String type.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('').to.be.string();\nexpect('foobar').to.be.string();\n```\n\n----------------------------------------\n\nTITLE: Testing Function Non-Optimization with 'no' Parameter\nDESCRIPTION: Example of testing that a function is not optimized using both the method-based approach and the property-based approach with both spelling variants.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_v__optimisation.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fn() {\n  try{}catch(e){}\n}\nexpect(fn).optimisation(\"no\");\nexpect(fn).optimization(\"no\");    // american spelling\nexpect(fn).not.to.be.optimised;\nexpect(fn).not.to.be.optimized;   // american spelling\n```\n\n----------------------------------------\n\nTITLE: Listing Available Type Assertions\nDESCRIPTION: Shows how to get a list of all available type assertions provided by the plugin\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype_extra.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(ChaiPluginAssertType.list());\n/*\n[ 'array',\n  'boolean',\n  'date',\n  'float',\n  'function',\n  'integer',\n  'null',\n  'number',\n  'object',\n  'regexp',\n  'string',\n  'undefined' ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Comparing arrays with chai-like\nDESCRIPTION: Shows how chai-like can be used to compare arrays of JSON objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_like.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [{\n  id: 1,\n  name: 'test',\n  product: {\n    id: 1,\n    name: 'product'\n  },\n  updatedAt: 'now'\n}];\narray.should.like([{\n  name: 'test',\n  product: {\n    name: 'product'\n  }\n}]);\narray.should.not.like([{\n  name: 'test',\n  product: {\n    name: 'product1'\n  }\n}]);\n```\n\n----------------------------------------\n\nTITLE: Using containOneLike() assertion\nDESCRIPTION: Examples of using the containOneLike() assertion to check if an object contains a value like the one provided at the first level. Shows usage with both object and string values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fuzzy.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar subject = {\n  a:   'alphabet'\n  , b: 'butternut'\n  , c: {\n    name:       'chowder'\n    , attributes: [\n      'scales'\n      , 'fins'\n    ]\n  }\n  , x: 'xylophone'\n  , z: 'xylophone'\n};\nsubject.should.containOneLike({\n  name:         'chowder'\n  , attributes: [\n    'scales', 'fins'\n  ]\n});\nsubject.should.not.containOneLike({\n  name:         'chowder'\n  , attributes: [\n    'scales', 'fins', 'cream'\n  ]\n});\n\nsubject.should.containOneLike('xylophone');\nsubject.should.not.containOneLike('cow patties');\n\nexpect(subject).to.containOneLike('xylophone');\nexpect(subject).to.not.containOneLike('cow patties');\n\nassert.containOneLike(subject, 'xylophone');\nassert.notContainOneLike(subject, 'cow patties');\n```\n\n----------------------------------------\n\nTITLE: Installing and Using chai-kekka with Chai\nDESCRIPTION: How to install the chai-kekka plugin and register it with Chai. Requires importing both chai and chai-kekka modules, then using the plugin with chai.use().\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kekka.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require(\"chai\")\nconst chaiKekka = require(\"chai-kekka\")\n \nchai.use(chaiKekka)\n```\n\n----------------------------------------\n\nTITLE: Including Browser-Side Dependencies\nDESCRIPTION: HTML script tags for including the necessary dependencies for using chai-json-schema in a browser environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"jsonpointer.js\"></script>\n<script src=\"tv4.js\"></script>\n<script src=\"chai.js\"></script>\n<script src=\"chai-json-schema.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maybe-Chai Adapter\nDESCRIPTION: TypeScript interface and example for configuring a custom adapter for maybe-chai\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/maybe_chai.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmaybeChai( {\n    match: (maybe: Maybe<T>, cases: MatchCases<T, U>) => U,\n    isMaybe: (maybe: Maybe<T>) => Boolean,\n} )\n\ntype MatchCases<T, U> = {\n    Just: (value: T) => U,\n    Nothing: () => U,\n}\n```\n\n----------------------------------------\n\nTITLE: Using html assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting the inner HTML content of a jQuery element using the html assertion which utilizes jQuery's html method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n$('.name').should.have.html('<em>John Doe</em>');\nexpect($('#title')).to.have.html('Chai Tea');\n```\n\n----------------------------------------\n\nTITLE: Installing chai-doge via npm\nDESCRIPTION: Command to install the chai-doge plugin as a dev dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_doge.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-doge --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing chai-json-schema via npm\nDESCRIPTION: Command to install the chai-json-schema plugin using npm for server-side usage.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-json-schema\n```\n\n----------------------------------------\n\nTITLE: Node.js Installation Example\nDESCRIPTION: Shows how to install and configure Sinon-Chai in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_cypress_sinon_chai.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar sinonChai = require(\"sinon-chai\");\n\nchai.use(sinonChai);\n```\n\n----------------------------------------\n\nTITLE: Chai as Promised Assertion with Notify in JavaScript\nDESCRIPTION: Shows how to use the notify method when return is not possible or preferred in the testing framework.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomethingAsync().should.eventually.equal(\"foo\").notify(done);\n```\n\n----------------------------------------\n\nTITLE: Using Should Extras in Chai.js\nDESCRIPTION: Demonstrates usage of should extras for handling edge cases with null/undefined checks in asynchronous operations.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/styles.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {should as loadShould} from 'chai';\n\nconst should = loadShould();\n\ndb.get(1234, function (err, doc) {\n  should.not.exist(err);\n  should.exist(doc);\n  doc.should.be.an('object');\n});\n```\n\n----------------------------------------\n\nTITLE: Browser Script Tag Installation for Chai-Rx\nDESCRIPTION: Shows how to include chai-rx in a browser environment using script tags.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rx.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-rx.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including chai-generator in a Browser Environment\nDESCRIPTION: Shows how to include the chai-generator plugin in a browser environment using script tags.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_generator.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-generator.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using have/has Chaining with chai-by-proxy\nDESCRIPTION: Example showing how to use the have/has chain starters to fluently access nested properties.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_by_proxy.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nobj = { foo: { bar: 'baz' } })\n\nobj.should.have.foo.bar.eq('baz')\n// same as\nobj.should.have.property('foo').property('bar').eq('baz')\n```\n\n----------------------------------------\n\nTITLE: Number Type Assertions\nDESCRIPTION: Examples of using number type assertions including integer and float checks\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype_extra.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(1).to.be.number();\nexpect(0).to.be.number();\nexpect(-1).to.be.number();\nexpect(63465789908753).to.be.number();\nexpect(27.11).to.be.number();\n\nexpect(1).to.be.number;\nexpect(0).to.be.number;\nexpect(-1).to.be.number;\nexpect(63465789908753).to.be.number;\nexpect(27.11).to.be.number;\n\nexpect(27).to.be.integer();\nexpect(27).to.be.integer;\n\nexpect(27.11).to.be.float();\nexpect(27.11).to.be.float;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example for node-fetch-response-matchers\nDESCRIPTION: A simple example demonstrating how to use the node-fetch-response-matchers plugin to test HTTP responses in a more declarative way, avoiding promise callback nesting.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/node_fetch_response_matchers.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('some-test', function(){\n  return expect(fetch('http://localhost/')).to.be.successful()\n                         .and.to.haveBodyText('foo');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Chai Spies in Node.js\nDESCRIPTION: Example showing how to require and use chai-spies in a Node.js environment. This loads the Chai library and the spies plugin, then sets up should and expect assertion styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , spies = require('chai-spies');\n\nchai.use(spies);\n\nvar should = chai.should()\n  , expect = chai.expect;\n```\n\n----------------------------------------\n\nTITLE: Loading OpenAPI spec from an object in JavaScript\nDESCRIPTION: Example of loading an OpenAPI specification from a JavaScript object and using it with the chai-openapi-response-validator plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_openapi_response_validator.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Set up Chai\nimport chai from 'chai';\nconst expect = chai.expect;\n\n// Import this plugin\nimport chaiResponseValidator from 'chai-openapi-response-validator';\n\n// Get an object representing your OpenAPI spec\nconst openApiSpec = {\n  openapi: '3.0.0',\n  info: {\n    title: 'Example API',\n    version: '0.1.0',\n  },\n  paths: {\n    '/example/endpoint': {\n      get: {\n        responses: {\n          200: {\n            description: 'Response body should be a string',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'string',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n\n// Load that OpenAPI object into this plugin\nchai.use(chaiResponseValidator(openApiSpec));\n\n// Write your test (e.g. using Mocha)\ndescribe('GET /example/endpoint', () => {\n  it('should satisfy OpenAPI spec', async () => {\n    // Get an HTTP response from your server (e.g. using axios)\n    const res = await axios.get('http://localhost:3000/example/endpoint');\n\n    expect(res.status).to.equal(200);\n\n    // Assert that the HTTP response satisfies the OpenAPI spec\n    expect(res).to.satisfyApiSpec;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Sinon.JS Assertion Example\nDESCRIPTION: Shows the traditional way of using Sinon.JS assertions without Sinon-Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_cypress_sinon_chai.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsinon.assertCalledWith(mySpy, \"foo\");\n```\n\n----------------------------------------\n\nTITLE: AMD Import Configuration for Chai-Rx\nDESCRIPTION: Shows how to import and configure chai-rx using AMD module syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rx.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar chaiRx = require('chai-rx');\n\nchai.use(chaiRx);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-graphql with npm\nDESCRIPTION: Command to install the chai-graphql plugin as a dev dependency\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_graphql.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev chai-graphql\n```\n\n----------------------------------------\n\nTITLE: Installing deep-equal-in-any-order plugin via yarn\nDESCRIPTION: Command to install the deep-equal-in-any-order plugin using yarn package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/deep_equal_in_any_order.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add deep-equal-in-any-order\n```\n\n----------------------------------------\n\nTITLE: Parameter Assertion Examples\nDESCRIPTION: Examples showing how to assert query string parameters\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_superagent.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(req).to.have.param('orderby');\nexpect(req).to.have.param('orderby', 'date');\nexpect(req).to.not.have.param('limit');\n```\n\n----------------------------------------\n\nTITLE: Using hidden assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting that a jQuery element is hidden using the hidden assertion which uses jQuery's :hidden selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n$('.name').should.be.hidden;\nexpect($('.year')).to.be.hidden;\n```\n\n----------------------------------------\n\nTITLE: Using the jsonWithProps() assertion\nDESCRIPTION: Demonstrates checking if a JSON file contains objects with specific properties. The example checks an array of repository data for objects with the repoName property equal to 'giper'.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* \nContent of testFile:  \n[{\"repoName\":\"giper\",\"labName\":\"TelnetClientSniffing_1\",\"state\":\"STOPPED\"},{\"repoName\":\"giper\",\"labName\":\"ErrorSameSubnet\",\"state\":\"STOPPED\"},\n{\"repoName\":\"giper\",\"labName\":\"ErrorSamePort\",\"state\":\"STOPPED\"},    \n{\"repoName\":\"giper\",\"labName\":\"ErrorWrongAction\",\"state\":\"STOPPED\"},{\"repoName\":\"giper\",\"labName\":\"ErrorNoDefinedAction\",\"state\":\"NO_NETWORK\"},{\"repoName\":\"giper\",\"labName\":\"ErrorCopyFile\",\"state\":\"STOPPED\"},\n{\"repoName\":\"giper\",\"labName\":\"TestActionNoArgs\",\"state\":\"STOPPED\"}\n]\n*/ \nexpect(testFile).to.be.a.jsonFile().and.contain.jsonWithProps({ repoName: 'giper' });\n```\n\n----------------------------------------\n\nTITLE: Installing Chai-Signals Plugin with NPM\nDESCRIPTION: Command to install the chai-signals plugin using npm package manager. The plugin depends on js-signals library being installed.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_signals.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-signals\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions After Property (JavaScript)\nDESCRIPTION: Illustrates how .property changes the target of subsequent assertions to the value of the property from the original target object.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new Map({ a: 1 }))\n  .to.have.property('a')\n  .that.is.a('number');\n```\n\n----------------------------------------\n\nTITLE: Using hidden assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting that a jQuery element is hidden using the hidden assertion which uses jQuery's :hidden selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n$('.name').should.be.hidden;\nexpect($('.year')).to.be.hidden;\n```\n\n----------------------------------------\n\nTITLE: Testing Iterable Type\nDESCRIPTION: Examples of asserting whether a value is an iterable object using isIterable and isNotIterable assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nassert.isIterable([2, 3, 5]);\nassert.isIterable('abcdefg');\nassert.isNotIterable(235);\nassert.isNotIterable(true);\n```\n\n----------------------------------------\n\nTITLE: Displaying Chai Plugin Name in Markdown\nDESCRIPTION: Package name for the Chai assertion plugin that checks length/size inequality\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_chai_stuff_not_length_of.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@chai-stuff/not-length-of`\n```\n\n----------------------------------------\n\nTITLE: Installing node-fetch-response-matchers via npm\nDESCRIPTION: Command to install the node-fetch-response-matchers package as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/node_fetch_response_matchers.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save-dev node-fetch-response-matchers\n```\n\n----------------------------------------\n\nTITLE: Loading Chai-Fireproof Plugin\nDESCRIPTION: Example showing how to load the chai-fireproof plugin into Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fireproof.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchai.use(require('chai-fireproof'));\n```\n\n----------------------------------------\n\nTITLE: Including chai-jquery in HTML with jQuery and Chai dependencies\nDESCRIPTION: Shows how to include the necessary scripts for using chai-jquery in your test file, requiring jQuery and Chai (version 1.0.0-rc1 or later) to be loaded first.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"jquery.js\"></script>\n<script src=\"chai.js\"></script>\n<script src=\"chai-jquery.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing chai-factories via HTML Script Tag\nDESCRIPTION: Shows how to include the chai-factories plugin in browser environments after including the main Chai library\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-factories.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai-factories.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing chai-kefir Package with npm\nDESCRIPTION: Command to install the chai-kefir package as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev chai-kefir\n```\n\n----------------------------------------\n\nTITLE: Installing Chai V8 Optimisation with NPM\nDESCRIPTION: Instructions for installing the chai-v8-optimisation plugin via NPM and requiring it in a project.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_v__optimisation.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('chai-v8-optimisation')\n```\n\n----------------------------------------\n\nTITLE: Using Chai-Subset with Assert Interface\nDESCRIPTION: Demonstrates how to use containSubset with Chai's assert interface for simple property matching.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_spankchain_chai_subset.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nassert.containSubset({a: 1, b: 2}, {a: 1});\n```\n\n----------------------------------------\n\nTITLE: Using Chai Iterator with TypeScript\nDESCRIPTION: Demonstrates how to import and use chai-iterator in a TypeScript environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport chai = require(\"chai\");\nimport chaiIterator = require(\"chai-iterator\");\n\nchai.use(chaiIterator);\n\n[2, 3, 5].should.iterate.over([2, 3, 5]);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Chai-DOM in JavaScript\nDESCRIPTION: Demonstrates how to import and use chai-dom in different module systems: CommonJS, AMD, and global script tags.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_dom.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\nchai.use(require('chai-dom'))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['chai', 'chai-dom'], function(chai, chaiDom) {\n  chai.use(chaiDom)\n})\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-dom.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing ChaId Plugin in JavaScript\nDESCRIPTION: Shows how to install the ChaId plugin using npm and integrate it with Chai in a JavaScript project.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chaid.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , chaid = require('chaid');\n\nchai.use(chaid);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-roughly via npm\nDESCRIPTION: Command to install the chai-roughly plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_roughly.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev chai-roughly\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of chai-parentheses\nDESCRIPTION: Example showing how to require and use the chai-parentheses plugin with Chai assertions\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_parentheses.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar parentheses = require('chai-parentheses');\nvar expect = chai.expect\n\nchai.use(parentheses);\n// ...\nexpect(true).to.be.true();\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Data in HTTP Request\nDESCRIPTION: Example of sending JSON data in an HTTP PUT request using Chai HTTP.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .put('/user/me')\n  .set('X-API-Key', 'foobar')\n  .send({ password: '123', confirmPassword: '123' })\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Data in HTTP Request\nDESCRIPTION: Example of sending JSON data in an HTTP PUT request using Chai HTTP.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .put('/user/me')\n  .set('X-API-Key', 'foobar')\n  .send({ password: '123', confirmPassword: '123' })\n```\n\n----------------------------------------\n\nTITLE: Using descending property for simple syntax\nDESCRIPTION: Shows the property syntax for testing if an array is sorted in descending order.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sorted.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([\"b\",\"apples\"]).to.be.descending\n```\n\n----------------------------------------\n\nTITLE: Customizing Fixture Paths\nDESCRIPTION: Advanced configuration for chai-jscodeshift that customizes the paths to input and output fixtures. This allows for more flexible directory structures for test fixtures.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jscodeshift.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nchai.use(chaiJSCodeShift({\n  fixtureDirectory: path.join(__dirname, 'fixtures'),\n  inputFixturePath(fixtureName, fixtureDirectory) {\n    return path.join(fixtureDirectory, 'input', `${fixtureName}.js`);\n  },\n  inputFixturePath(fixtureName, fixtureDirectory) {\n    return path.join(fixtureDirectory, 'output', `${fixtureName}.js`);\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing Chai and Chai-SamSam via npm\nDESCRIPTION: Shell commands to install the required dependencies (chai and chai-samsam) using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_samsam.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install --save chai\n$ npm install --save chai-samsam\n```\n\n----------------------------------------\n\nTITLE: Testing Iterator Length Below Threshold\nDESCRIPTION: Examples of asserting that an iterable yields fewer than n values using the iterate.for.length.below assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([2, 3, 5]).to.iterate.for.length.below(4);\nexpect('abcdefg').to.iterate.for.length.below(10);\nexpect([2, 3, 5]).not.to.iterate.for.length.below(3);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-sip via npm\nDESCRIPTION: Command to install the chai-sip plugin as a development dependency in a Node.js project using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sip.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-sip --save\n```\n\n----------------------------------------\n\nTITLE: Unsupported Chainable Assertion Example\nDESCRIPTION: Demonstrates a pattern that is not supported by the plugin, where prop and text assertions can only be used at the end of an assertion chain.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_react_element.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(<div data-foo=\"bar\"><span></span></div>).to.have.prop('data-foo', 'bar').with.an.elementOfType('span')\n```\n\n----------------------------------------\n\nTITLE: Using .cookie Assertion with Chai HTTP\nDESCRIPTION: Examples of asserting that a Request or Response object has cookies. This demonstrates checking for cookie existence and optionally validating cookie values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/natanavra_chai_http.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(req).to.have.cookie('session_id');\nexpect(req).to.have.cookie('session_id', '1234');\nexpect(req).to.not.have.cookie('PHPSESSID');\nexpect(res).to.have.cookie('session_id');\nexpect(res).to.have.cookie('session_id', '1234');\nexpect(res).to.not.have.cookie('PHPSESSID');\n```\n\n----------------------------------------\n\nTITLE: Installing chai-string in Node.js Environment\nDESCRIPTION: JavaScript code for requiring chai and registering the chai-string plugin in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-string'));\n```\n\n----------------------------------------\n\nTITLE: Installing chai-bignumber plugin with npm\nDESCRIPTION: Command to install the chai-bignumber plugin as a dev dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bignumber.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev chai-bignumber\n```\n\n----------------------------------------\n\nTITLE: Handling Property Name Conflicts with chai\nDESCRIPTION: Example showing how to handle conflicts between your object's properties and chai's built-in properties.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_by_proxy.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nobj = { a: { property: '' } }\n// you can't do\nobj.should.have.a.property\n// instead, fallback to old style\nobj.should.have.deep.property('a.property')\n```\n\n----------------------------------------\n\nTITLE: Using entriesCount Assertion\nDESCRIPTION: Examples of the entriesCount assertion to verify the number of occurrences of a substring within a string.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nassert.entriesCount('abcabd', 'ab', 2);\nexpect('abcabd').to.have.entriesCount('ab', 2);\n```\n\n----------------------------------------\n\nTITLE: Display Assertion in Chai WebDriver\nDESCRIPTION: Checks if an element is displayed, even if it's scrolled off-screen.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.be.displayed()\n```\n\n----------------------------------------\n\nTITLE: Using .deviation assertion\nDESCRIPTION: Example of using the .deviation assertion to compare the standard deviation of an array of numbers.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([ 1, 2, 3, 4 ]).to.have.deviation.almost.equal(1.290, 2);\n```\n\n----------------------------------------\n\nTITLE: Installing deep-equal-in-any-order plugin via npm\nDESCRIPTION: Command to install the deep-equal-in-any-order plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/deep_equal_in_any_order.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save deep-equal-in-any-order\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Argument Transformation in Chai as Promised\nDESCRIPTION: Shows how to use Promise.all in the transformAsserterArgs hook to enable comparing promises against other promises.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nchaiAsPromised.transformAsserterArgs = function (args) {\n    return Promise.all(args);\n};\n\nPromise.resolve(2).should.eventually.be.within(Promise.resolve(1), Promise.resolve(6));\n```\n\n----------------------------------------\n\nTITLE: Installing chai-bignumber Plugin with npm\nDESCRIPTION: Command to install the chai-bignumber plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_defi_org_chai_bignumber.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev chai-bignumber\n```\n\n----------------------------------------\n\nTITLE: Installing chai-stats via npm\nDESCRIPTION: Command to install the chai-stats plugin using npm for Node.js environments.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-stats\n```\n\n----------------------------------------\n\nTITLE: Using chai-doge with Mocha and Chai\nDESCRIPTION: Example of how to use chai-doge plugin with Mocha test framework and Chai assertion library. It demonstrates importing necessary modules, setting up chai-doge, and writing tests using Doge-style language chains.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_doge.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport chai from \"chai\"\nimport chaiDoge from \"../src/chai-doge\"\nimport {describe as such, it as wow} from \"mocha\"\n\nchai.use(chaiDoge)\n\nconst expect = chai.expect\n\nsuch(\"getTreats\", function () {\n\n  wow(\"very test\", function () {\n    const treats = getTreats(10)\n    expect(treats).so.lengthOf(10)\n  })\n\n  wow(\"many chaining\", function () {\n    const treats = getTreats(100)\n    expect(treats).wow.such.many.lengthOf(100)    \n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Mixing BN, Numbers, and Strings in Assertions\nDESCRIPTION: Examples demonstrating how bn-chai allows mixing of BN objects, numbers, and strings in assertions for flexible comparisons.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new BN('1')).to.eq.BN(new BN('1'));\nexpect(new BN('1')).to.eq.BN('1');\nexpect(new BN('1')).to.eq.BN(1);\n\nexpect('1').to.eq.BN(new BN('1'));\nexpect('1').to.eq.BN('1');\nexpect('1').to.eq.BN(1);\n\nexpect(1).to.eq.BN(new BN('1'));\nexpect(1).to.eq.BN('1');\nexpect(1).to.eq.BN(1);\n```\n\n----------------------------------------\n\nTITLE: Asserting Size of Immutable Collections (TDD style) (JavaScript)\nDESCRIPTION: Shows how to use assert.sizeOf() to check the size of immutable collections in the TDD assertion style.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nassert.sizeOf(List.of(1, 2, 3), 3);\nassert.sizeOf(new List(), 0);\n```\n\n----------------------------------------\n\nTITLE: Various Ways to Call chaiExec in JavaScript\nDESCRIPTION: Demonstrates different ways to pass CLI commands and arguments to the chaiExec function.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jsdevtools_chai_exec.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchaiExec(`git commit -am \"Fixed a bug\"`);\nchaiExec(\"git\", \"commit\", \"-am\", \"Fixed a bug\");\nchaiExec([\"git\", \"commit\", \"-am\", \"Fixed a bug\"]);\nchaiExec(\"git\", [\"commit\", \"-am\", \"Fixed a bug\"]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic ID Equality Assertions in JavaScript\nDESCRIPTION: Shows basic usage of ChaId assertions for comparing IDs in various object structures and formats. Includes examples of string and object ID comparisons.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chaid.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{_id: 'foo'}.should.have.id('foo')\n'foo'.should.id({id: 'foo'})\n{id: 'foo', bar: 2}.should.have.same.id({id: 'foo', baz: 3})\n{_id: 'foo'}.should.not.have.same.id({_id: 'bar'})\n{_id: 'foo'}.should.have.same.id({id: {toString: function() { return 'foo'}}})\n{_id: 'foo'}.should.have.id(new ObjectId('foo'))\n```\n\n----------------------------------------\n\nTITLE: Using contain assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting that a jQuery selection contains given text using the contain assertion with jQuery's :contains selector. Falls back to Chai's implementation for non-jQuery objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n$('body').should.contain('text');\nexpect($('#content')).to.contain('text');\n```\n\n----------------------------------------\n\nTITLE: Importing chai-dynamodb in Node.js\nDESCRIPTION: Demonstrates how to include and use the chai-dynamodb plugin in a Node.js environment. This snippet shows how to require Chai and the plugin, then use the plugin with Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_dynamodb.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-dynamodb'));\n```\n\n----------------------------------------\n\nTITLE: Using descendants() assertion with jQuery elements\nDESCRIPTION: Examples of using the descendants() assertion to check if a jQuery selection contains at least one element with a descendant matching the given selector using .has().\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_20\n\nLANGUAGE: js\nCODE:\n```\n$('body').should.have.descendants('h1');\nexpect($('#content')).to.have.descendants('div');\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Timeout for chai-nock in JavaScript\nDESCRIPTION: Shows how to set a custom global timeout for chai-nock assertions, which controls how long to wait for Nock to intercept a request.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_nock.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst chaiNock = require('chai-nock');\n\nchai.use(chaiNock);\n// Set a timeout of 10 seconds\nchaiNock.setTimeout(10000);\n```\n\n----------------------------------------\n\nTITLE: Installing Dirty Chai Plugin via NPM\nDESCRIPTION: Command to install the dirty-chai plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai__.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dirty-chai --save-dev\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in Property Names (JavaScript)\nDESCRIPTION: Demonstrates how to escape special characters like '.' and '[]' when they are part of the actual property name in nested property assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(Immutable.fromJS({ '.a': { '[b]': 'x' } })).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Exec via npm\nDESCRIPTION: Shows how to install the Chai Exec plugin using npm and how to require and register it with Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jsdevtools_chai_exec.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @jsdevtools/chai-exec\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst chaiExec = require(\"@jsdevtools/chai-exec\");\nconst chai = require(\"chai\");\n\nchai.use(chaiExec);\n```\n\n----------------------------------------\n\nTITLE: Contributing to chai-webdriver-promised in Bash\nDESCRIPTION: Simple commands for contributing to the chai-webdriver-promised project, showing how to edit the main file and run tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$EDITOR index.js      # edit index.js\nnpm test              # run the specs\n```\n\n----------------------------------------\n\nTITLE: Asserting Nested Properties in Immutable Structures (JavaScript)\nDESCRIPTION: Shows how to use .nested.property() to assert the existence and value of nested properties in Immutable data structures. It supports dot notation, bracket notation, and arrays for specifying the property path.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(Immutable.fromJS({ a: { b: ['x', 'y'] } })).to.have.nested.property('a.b[1]');\nexpect(Immutable.fromJS({ a: { b: ['x', 'y'] } })).to.have.nested.property('a.b[1]', 'y');\nexpect(Immutable.fromJS({ a: { b: ['x', 'y'] } })).to.have.nested.property(['a', 'b', 1], 'y');\nexpect(Immutable.fromJS({ a: { b: ['x', 'y'] } })).to.have.nested.property(new List(['a', 'b', 1]), 'y');\n```\n\n----------------------------------------\n\nTITLE: Using chai-deep-match with Chai in JavaScript\nDESCRIPTION: Example of how to require and use the chai-deep-match plugin with Chai for deep matching assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_deep_match.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar chaiDeepMatch = require('chai-deep-match');\n\nchai.use( chaiDeepMatch );\n\n\nchai.expect( { a: 'foo', b: 'bar', c: 'baz' } ).to.deep.match( { a: 'foo', c: 'baz' } );\n// =>  pass\n\nchai.expect( { a: 'foo', b: 'bar', c: 'baz' } ).to.not.deep.match( { a: 'fuzz', c: 'baz' } );\n// =>  pass\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Exec Plugin with npm\nDESCRIPTION: Command to install the Chai Exec plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exec.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @jsdevtools/chai-exec\n```\n\n----------------------------------------\n\nTITLE: Testing Maximum Iterator Length\nDESCRIPTION: Examples of asserting that an iterable yields at most n values using the iterate.for.length.of.at.most assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([2, 3, 5]).to.iterate.for.length.of.at.most(4);\nexpect([2, 3, 5]).to.iterate.for.length.of.at.most(3);\nexpect([2, 3, 5]).not.to.iterate.for.length.of.at.most(2);\n```\n\n----------------------------------------\n\nTITLE: Redirect Assertion Examples\nDESCRIPTION: Examples showing how to assert HTTP redirects and redirect locations\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_superagent.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(res).to.redirect;\nexpect(res).to.not.redirect;\nexpect(res).to.redirectTo('http://example.com');\nexpect(res).to.redirectTo(/^\\/search\\/results\\?orderBy=desc$/);\n```\n\n----------------------------------------\n\nTITLE: Setting up @thiscode/chai-subset with CommonJS\nDESCRIPTION: Shows how to require and register the @thiscode/chai-subset plugin with Chai in a CommonJS environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_thiscode_chai_subset.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar chaiSubset = require('@thiscode/chai-subset');\nchai.use(chaiSubset);\n```\n\n----------------------------------------\n\nTITLE: Using prop() assertion with jQuery elements\nDESCRIPTION: Examples of using the prop() assertion to check if a jQuery element has a specific property and optionally verify its value. The return value is available for chaining.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n$('#header').should.have.prop('disabled');\nexpect($('body')).to.have.prop('disabled', false);\nexpect($('body')).to.have.prop('value').match(/bar/);\n```\n\n----------------------------------------\n\nTITLE: Installing Chai AssertType Extra Plugin\nDESCRIPTION: Shows how to install the plugin using npm package manager\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype_extra.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai chai-asserttype-extra\n```\n\n----------------------------------------\n\nTITLE: Additional Setup for Node.js < 6\nDESCRIPTION: Installation commands and Mocha configuration for Node.js versions less than 6, which require harmony-reflect to support Proxy objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_by_proxy.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-dev harmony-reflect\n\n$ echo \"--harmony_proxies\"         >> test/mocha.opts\n$ echo \"--require harmony-reflect\" >> test/mocha.opts\n```\n\n----------------------------------------\n\nTITLE: Defining Assert API Documentation Page\nDESCRIPTION: YAML frontmatter configuration for the Assert API documentation page, specifying the title, weight for navigation ordering, permalink, and API namespace.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/api/assert.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Assert\nweight: 15\npermalink: /api/assert/\napi_namespace: Assert\n```\n\n----------------------------------------\n\nTITLE: Running Server-Side Tests for Chai\nDESCRIPTION: Command to run Chai's server-side tests using the make command. This executes the test suite for all interfaces (expect, assert, should) in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/resources.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Including chai-stats in Browser\nDESCRIPTION: HTML script tag to include chai-stats after chai.js in browser environments\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-stats.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<script src=\"chai-stats.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Matching in Chai WebDriver\nDESCRIPTION: Tests if the text content of an element matches the provided regular expression.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.match(/regex/)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chai-Signals Development Environment\nDESCRIPTION: Commands for setting up the development environment for chai-signals, including installing dependencies and running tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_signals.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install\nbower install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Direct Global Assignment in Plugin\nDESCRIPTION: Illustrates another problematic approach where globals are created and assigned directly within the plugin function.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/index.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myPlugin(chai, utils) {\n  chai.myGlobal = {...};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter for Chai.js Test Suite Page in Markdown\nDESCRIPTION: This code snippet defines the front matter for the Chai.js online test suite page. It specifies the title, layout, weight, and permalink for the page. This information is used by static site generators to properly render and organize the content.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/api/test.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\n  title: Online Test Suite\n  layout: test\n  weight: 35\n  permalink: /api/test/\n---\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Flow with Callbacks and Promises in chai-webdriver-exec\nDESCRIPTION: Shows how to handle asynchronous assertions using either callbacks or promises with the chai-webdriver-exec plugin. This pattern is necessary when not using selenium-webdriver/testing wrappers.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_exec.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(script).exec.to.have.ownProperty('string', function(){...})\nexpect(script).exec.to.have.ownProperty('string').then(function(){...})\n```\n\n----------------------------------------\n\nTITLE: Setting up Chai Iterator with AMD Module System\nDESCRIPTION: Example of how to set up chai-iterator in an environment using the AMD (Asynchronous Module Definition) module system.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndefine((require, exports, module) => {\n  let chai = require('chai');\n  let chaiIterator = require('chai-iterator');\n\n  chai.use(chaiIterator);\n});\n```\n\n----------------------------------------\n\nTITLE: Using attr() assertion with jQuery elements\nDESCRIPTION: Examples of using the attr() assertion to check if a jQuery element has a specific attribute and optionally verify its value. The return value is available for chaining.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n$('#header').should.have.attr('foo');\nexpect($('body')).to.have.attr('foo', 'bar');\nexpect($('body')).to.have.attr('foo').match(/bar/);\n```\n\n----------------------------------------\n\nTITLE: Change From Value Assertion Examples in CoffeeScript\nDESCRIPTION: Demonstrates how to verify that a value changes from a specific starting value during code execution, with support for deep equality checking.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_6\n\nLANGUAGE: coffeescript\nCODE:\n```\nresult = ['a', 'b']\n(-> result).should.change.from(['a', 'b']).when -> result.push('c')\n(-> result).should.change.from(['a', 'b']).to(['a', 'b', 'c']).when -> result.push('c')\n```\n\n----------------------------------------\n\nTITLE: Installing Chai via NPM for Node.js\nDESCRIPTION: Command to install Chai as a development dependency using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/installation.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev chai\n```\n\n----------------------------------------\n\nTITLE: Setting up chai-roughly with Chai\nDESCRIPTION: Code snippet showing how to import Chai, create an expect instance, and register the chai-roughly plugin with Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_roughly.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar expect = chai.expect;\n\nchai.use(require('chai-roughly'));\n```\n\n----------------------------------------\n\nTITLE: Using Sinon-Chai as an AMD Module\nDESCRIPTION: Demonstrates how to use Sinon-Chai as an AMD module, assuming the loader is configured to map Chai and Sinon-Chai files to their respective module IDs.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_slightlytyler_sinon_chai.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function (require, exports, module) {\n    var chai = require(\"chai\");\n    var sinonChai = require(\"sinon-chai\");\n\n    chai.use(sinonChai);\n});\n```\n\n----------------------------------------\n\nTITLE: Chai-Fireproof Assertions Example with Mocha\nDESCRIPTION: Example demonstrating how to use chai-fireproof assertions in Mocha tests to verify Firebase data structure and values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fireproof.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('My Firebase', function() {\n  \n  var root = new Fireproof(new Firebase('https://metropolis.firebaseio.com'));\n\n  it('should have some data in there already', function() {\n    return expect(root.child('robots')).to.exist;\n  });\n\n  it('should have some users in there', function() {\n\n    return expect(root.child('citizens')).to.deep.equal({\n      fred: {\n        name: 'Freder Frederson',\n        hometown: 'Metropolis',\n        assignment: 'Utopia'\n      },\n      maria: {\n        name: 'Maria',\n        hometown: 'Metropolis',\n        assignment: 'Underworld'\n      }\n    });\n\n  });\n\n  it('should have the water level in there', function() {\n    return expect(root.child('waterLevel')).to.be.lessThan(5);\n  })\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using Chai Quantifiers with Array Assertions\nDESCRIPTION: Example demonstrating the usage of chai-quantifiers plugin with three different array assertion methods: containAll, containOne, and containExactlyOne. Includes setup of chai with the plugin and test cases showing each assertion type.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_quantifiers.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiQuantifiers = require('chai-quantifiers');\n\nchai.use(chaiQuantifiers);\n\nconst { expect } = chai;\n\ndescribe('chai-quantifiers', () => {\n  it('containAll should be true if all items are true', () => {\n    expect([0, 1, 2, 3]).to.containAll(item => item < 4);\n  });\n  it('containOne should be true if at least one item is true', () => {\n    expect([0, 1, 2, 3]).to.containOne(item => item >= 2);\n  });\n  it('containExactlyOne should be true if exactly one item is true', () => {\n    expect([0, 1, 2, 3]).to.containExactlyOne(item => item === 2);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using noReservedWords assertion in Chai\nDESCRIPTION: Illustrates various ways to use the noReservedWords assertion with different Chai assertion styles (should, expect, and assert). This snippet demonstrates checking strings for DynamoDB reserved words that are not prefixed by '#' or ':'.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_dynamodb.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst safe = 'id, phone, email';\nconst notSafe = 'id, name, phone, email';\nconst usingAttributeNamePrefix = 'id, #name, phone, email';\nconst usingAttributeValuePrefix = 'username = :name';\n\n// using should-style assertions\nsafe.should.have.noReservedWords();\nnotSafe.should.have.noReservedWords(); // fails\nusingAttributeNamePrefix.should.have.noReservedWords();\nusingAttributeValuePrefix.should.have.noReservedWords();\n\n// using expect-style assertions\nexpect(safe).to.have.noReservedWords();\nexpect(notSafe).to.have.noReservedWords(); // fails\nexpect(usingAttributeNamePrefix).to.have.noReservedWords();\nexpect(usingAttributeValuePrefix).to.have.noReservedWords();\n\n// using tdd assertions\nassert.noReservedWords(safe);\nassert.noReservedWords(notSafe); // fails\nassert.noReservedWords(usingAttributeNamePrefix);\nassert.noReservedWords(usingAttributeValuePrefix);\n```\n\n----------------------------------------\n\nTITLE: Asserting a Spy Was Called With Specific Arguments\nDESCRIPTION: Shows how to assert that a spy was called with specific arguments at least once, even if additional arguments were provided.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nspy('foo');\nexpect(spy).to.have.been.called.with('foo');\nspy.should.have.been.called.with('foo');\n```\n\n----------------------------------------\n\nTITLE: Using chai-bignumber assertions with rounding in JavaScript\nDESCRIPTION: Examples of using chai-bignumber assertions with rounding options, specifying decimal places and rounding mode.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bignumber.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar BigNumber = require('bignumber.js');\n(100.343).should.be.bignumber.equal(100.341, 2);\n(100.349).should.be.bignumber.equal(100.341, 2, BigNumber.ROUND_DOWN);\n```\n\n----------------------------------------\n\nTITLE: Loading the chai-uuid Plugin\nDESCRIPTION: Basic setup code to require and register the chai-uuid plugin with Chai.js.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_uuid.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require(\"chai\");\nchai.use(require('chai-uuid'));\n```\n\n----------------------------------------\n\nTITLE: Using chai-bignumber assertions with rounding in JavaScript\nDESCRIPTION: Examples of using chai-bignumber assertions with rounding options, specifying decimal places and rounding mode.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bignumber.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar BigNumber = require('bignumber.js');\n(100.343).should.be.bignumber.equal(100.341, 2);\n(100.349).should.be.bignumber.equal(100.341, 2, BigNumber.ROUND_DOWN);\n```\n\n----------------------------------------\n\nTITLE: Integrating Chai-jQ with Node.js\nDESCRIPTION: Shows how to require and initialize chai-jq plugin in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jq.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai    = require(\"chai\");\nvar plugin  = require(\"chai-jq\");\n\n// Inject plugin.\nchai.use(plugin);\n\n// Rest of test code here...\n```\n\n----------------------------------------\n\nTITLE: Using chai-contained assertion plugin with Chai.js\nDESCRIPTION: Demonstrates how to use the chai-contained plugin to check if a value is contained within an array. The plugin adds the containedIn assertion to check array membership.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_contained.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , expect = chai.expect\n  , chaiContained = require('chai-contained');\n\nexpect('foo').to.be.containedIn(['foo', 'bar']); // will pass\nexpect('foo').to.be.containedIn(['noFoo', 'baz']); // will fail\n```\n\n----------------------------------------\n\nTITLE: Using toEmit for synchronous assertions\nDESCRIPTION: Example of using toEmit() to assert that an observable emits the expected values synchronously, with a callback that sends values to the observable.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).toEmit([value(1), error(new Error('whoops!')), end()], () => {\n  send(obs, [value(1), error(new Error('whoops!')), end()])\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Chai-jQ with AMD/RequireJS\nDESCRIPTION: Demonstrates how to load and initialize chai-jq plugin using AMD/RequireJS module system.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jq.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire([\"chai\", \"chai-jq\"], function (chai, plugin) {\n  // Inject plugin.\n  chai.use(plugin);\n\n  // Rest of your test code here...\n});\n```\n\n----------------------------------------\n\nTITLE: Exit Code Assertions in Chai Exec\nDESCRIPTION: Shows various ways to assert on a CLI's exit code using Chai Exec, including specific codes, lists of codes, and ranges.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jsdevtools_chai_exec.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Should syntax\nmyCLI.exitCode.should.equal(0);\nmyCLI.should.have.exitCode(0);\nmyCLI.should.exit.with.code(0);\nmyCLI.should.exit.with.a.code.that.is.oneOf(0, [0, 1, 2, 3]);\nmyCLI.should.have.an.exit.code.of.at.least(0).and.at.most(5);\n\n// Expect sytnax\nexpect(myCLI).exitCode.to.equal(0);\nexpect(myCLI).to.have.exitCode(0);\nexpect(myCLI).to.exit.with.code(0);\nexpect(myCLI).to.exit.with.a.code.that.is.oneOf([0, 1, 2, 3]);\nexpect(myCLI).to.have.an.exit.code.of.at.least(0).and.at.most(5);\n\n// Assert syntax\nassert.equal(myCLI.exitCode, 0);\n\nassert.exitCode(myCLI, 0);\nassert.exitCode(myCLI, [0, 1, 2, 3]);\n\nassert.notExitCode(myCLI, 1);\nassert.notExitCode(myCLI, [1, 2, 3]);\n\nassert.exitCodeBetween(myCLI, 0, 5);\nassert.exitCodeNotBetween(myCLI, 1, 5);\n```\n\n----------------------------------------\n\nTITLE: Cookie Assertion Examples\nDESCRIPTION: Examples showing how to assert cookies in requests and responses\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_superagent.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(req).to.have.cookie('session_id');\nexpect(req).to.have.cookie('session_id', '1234');\nexpect(req).to.not.have.cookie('PHPSESSID');\nexpect(res).to.have.cookie('session_id');\nexpect(res).to.have.cookie('session_id', '1234');\nexpect(res).to.not.have.cookie('PHPSESSID');\n```\n\n----------------------------------------\n\nTITLE: Security Testing Examples with Chai-Fireproof\nDESCRIPTION: Examples showing how to use chai-fireproof for testing Firebase security rules with read and write permissions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fireproof.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreturn expect({ uid: 'metropolis:maria' }).can.read.ref(root.child('users/maria'));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreturn expect({ uid: 'metropolis:robotmaria'}).cannot.read.ref(root.child('users/maria'));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreturn expect({ uid: 'metropolis:robotmaria'}).cannot.write(true)\n.to.ref(root.child('city/agitation'));\n```\n\n----------------------------------------\n\nTITLE: Installing Chai-Luxon Server-Side with Node.js\nDESCRIPTION: Shows how to include and use the chai-luxon plugin in a Node.js environment. This snippet demonstrates requiring chai and chai-luxon, then using the plugin with chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_luxon.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-luxon'));\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Called With Arguments in Chai\nDESCRIPTION: Shows how to check that a spy was called with specific arguments at least once, even if additional arguments were provided.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nspy('foo');\nexpect(spy).to.have.been.called.with('foo');\nspy.should.have.been.called.with('foo');\n```\n\n----------------------------------------\n\nTITLE: Including Sinon-Chai via Script Tags\nDESCRIPTION: Shows how to include Sinon-Chai directly in an HTML file using script tags.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_joethefkingfrypan_sinon_chai.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"sinon-chai.js\"></script>\n<script src=\"sinon.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Enhanced Chai Smoothie Assertion\nDESCRIPTION: Improved assertion syntax using Chai Smoothie for better readability\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_smoothie.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(element(by.id('title'))).to.eventually.be.displayed\n```\n\n----------------------------------------\n\nTITLE: Using text assertion with jQuery elements\nDESCRIPTION: Shows how to assert the text content of a jQuery element using the text assertion which utilizes jQuery's text method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n$('.name').should.have.text('John Doe');\nexpect($('#title')).to.have.text('Chai Tea');\n```\n\n----------------------------------------\n\nTITLE: Testing Property Type with chai-kefir\nDESCRIPTION: Example showing how to assert that a value is a Kefir Property. Must be chained with observable.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).to.be.an.observable.property();\n```\n\n----------------------------------------\n\nTITLE: Testing String Iteration with Chai Iterator\nDESCRIPTION: Example showing how to test string iteration, which is a built-in iterable type in JavaScript. The example uses until() assertion to verify subsequence iteration.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'abcde'.should.iterate.until(['c', 'd', 'e']);\n```\n\n----------------------------------------\n\nTITLE: Using text assertion with jQuery elements\nDESCRIPTION: Shows how to assert the text content of a jQuery element using the text assertion which utilizes jQuery's text method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n$('.name').should.have.text('John Doe');\nexpect($('#title')).to.have.text('Chai Tea');\n```\n\n----------------------------------------\n\nTITLE: Transforming Synchronous Assertions to Promise Assertions (JavaScript)\nDESCRIPTION: Examples of how chai-as-promised transforms regular Chai assertions into promise-based assertions using the 'eventually' property.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(2 + 2).should.equal(4);\n\n// becomes\nreturn Promise.resolve(2 + 2).should.eventually.equal(4);\n\n\nexpect({ foo: \"bar\" }).to.have.property(\"foo\");\n\n// becomes\nreturn expect(Promise.resolve({ foo: \"bar\" })).to.eventually.have.property(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Using toBeObservable assertion\nDESCRIPTION: Example of using the toBeObservable() assertion to check if a value is a Kefir.Observable.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).toBeObservable()\n```\n\n----------------------------------------\n\nTITLE: Installing Sinon-Chai in Node.js\nDESCRIPTION: Shows how to install and use Sinon-Chai in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_joethefkingfrypan_sinon_chai.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar sinonChai = require(\"sinon-chai\");\n\nchai.use(sinonChai);\n```\n\n----------------------------------------\n\nTITLE: Standard Output (stdout) Assertions in Chai Exec\nDESCRIPTION: Demonstrates various ways to assert on a CLI's standard output using Chai Exec, including exact matches, substrings, and regular expressions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jsdevtools_chai_exec.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Should syntax\nmyCLI.stdout.should.equal(\"Success!\");\nmyCLI.should.have.stdout.that.contains(\"Success!\");\nmyCLI.should.have.stdout.that.does.not.contain(\"Failure!\");\nmyCLI.should.have.stdout.that.matches(/^Success!$/);\nmyCLI.should.have.stdout.that.does.not.match(/^Failure!$/);\n\n// Expect syntax\nexpect(myCLI).stdout.to.equal(\"Success!\");\nexpect(myCLI).to.have.stdout.that.contains(\"Success!\");\nexpect(myCLI).to.have.stdout.that.does.not.contain(\"Failure!\");\nexpect(myCLI).to.have.stdout.that.matches(/^Success!$/);\nexpect(myCLI).to.have.stdout.that.does.not.match(/^Failure!$/);\n\n// Assert syntax\nassert.stdout(myCLI, \"Success!\");\nassert.stdout(myCLI, /^Success!$/);\n\nassert.include(myCLI.stdout, \"Success!\");\nassert.notInclude(myCLI.stdout, \"Failure!\");\n\nassert.match(myCLI.stdout, /^Success!$/);\nassert.notMatch(myCLI.stdout, /^Failure!$/);\n```\n\n----------------------------------------\n\nTITLE: Including chai-eventemitter in Browser HTML\nDESCRIPTION: This HTML snippet demonstrates how to include the chai-eventemitter plugin in a browser environment. It includes both the Chai library and the chai-eventemitter script.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_eventemitter.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-eventemitter.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Sinon-Chai via Script Tags\nDESCRIPTION: Shows how to include Sinon-Chai directly in an HTML file using script tags, along with Chai and Sinon.JS.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_slightlytyler_sinon_chai.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"sinon-chai.js\"></script>\n<script src=\"sinon.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Testing objects sorted by attribute in descending order\nDESCRIPTION: Shows how to test if an array of objects is sorted in descending order by a specific attribute using .sortedBy() with the descending option.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sorted.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([{id:2,name:\"bat\"},{id:3,name:\"apples\"}]).to.be.sortedBy(\"name\", {descending: true})\n```\n\n----------------------------------------\n\nTITLE: Text Contain Assertion in Chai WebDriver\nDESCRIPTION: Tests if the text content of an element contains the provided substring.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.contain.text('string')\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for chai-timers Plugin Documentation\nDESCRIPTION: Sets up the layout and permalink for the chai-timers plugin documentation page using YAML frontmatter in Markdown.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_timers.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: plugin\npermalink: plugins/chai-timers/\npluginName: chai-timers\n---\n```\n\n----------------------------------------\n\nTITLE: Working around length/arguments assertion limitations\nDESCRIPTION: Example showing the limitation with length and arguments assertions and how to work around it using separate assertion statements.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyArray.should.exist.and.should.have.length(3); // Error: length is not a function\n\n// Do two assert statements instead\nmyArray.should.exist();\nmyArray.should.have.length(3);\n```\n\n----------------------------------------\n\nTITLE: Importing Jest-Kefir with CommonJS\nDESCRIPTION: Example showing how to import jest-kefir and Kefir using CommonJS require syntax, making sure to grab the default export.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Kefir = require('kefir')\nconst {use} = require('chai')\nconst jestKefir = require('jest-kefir').default\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for chai-timers Plugin Documentation\nDESCRIPTION: Sets up the layout and permalink for the chai-timers plugin documentation page using YAML frontmatter in Markdown.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_timers.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: plugin\npermalink: plugins/chai-timers/\npluginName: chai-timers\n---\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Sinon-Chai in Node.js\nDESCRIPTION: Shows how to install Sinon-Chai via npm and set it up in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_slightlytyler_sinon_chai.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar sinonChai = require(\"sinon-chai\");\n\nchai.use(sinonChai);\n```\n\n----------------------------------------\n\nTITLE: Nested Object Interface Validation with chai-interface\nDESCRIPTION: Demonstrates how to use chai-interface to validate more complex nested object structures. The example checks a user object with nested name and emails objects, verifying all string types.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_interface.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar user = {\n  name: {\n    first: 'Betty',\n    last: 'Dodson'\n  },\n  emails: {\n    work: 'b.dodson@megacorp.com',\n    home: 'butterflychica947@lol.com',\n    school: 'bdodso4@stateu.edu'\n  }\n}\n\nuser.should.have.interface({\n  name: {\n    first: String,\n    last: String\n  },\n  emails: {\n    work: String,\n    home: String,\n    school: String\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON with array sub-nodes using chai-like\nDESCRIPTION: Demonstrates how chai-like handles comparison of JSON objects containing array sub-nodes.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_like.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = {\n  id: 1,\n  name: 'test',\n  products: [{\n    id: 1,\n    name: 'product'\n  }],\n  updatedAt: 'now'\n};\nobject.should.like({\n  name: 'test',\n  products: [{\n    name: 'product'\n  }]\n});\nobject.should.not.like({\n  name: 'test',\n  products: [{\n    name: 'product1'\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Bundler on Linux/MacOS\nDESCRIPTION: Command to install the Bundler package manager for Ruby.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo gem install bundler\n```\n\n----------------------------------------\n\nTITLE: Testing Time-based Emissions with chai-kefir\nDESCRIPTION: Example showing how to assert emissions over time from a Kefir Observable using the emitInTime assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).to.emit(expected, (tick, clock) => {\n    send(obs, [value(1)]);\n    tick(10);\n    send(obs, [error(new Error('whoops!'))]);\n    tick(10);\n    send(obs, [end()]);\n});\n```\n\n----------------------------------------\n\nTITLE: Including chai-change in Browser\nDESCRIPTION: Demonstrates how to include the chai-change plugin in a browser environment using a script tag.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_change.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<script src=\"chai-change.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using toBeStream assertion\nDESCRIPTION: Example of using the toBeStream() assertion to check if a value is a Kefir.Stream.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).toBeStream()\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for brookjs-desalinate Plugin\nDESCRIPTION: YAML configuration metadata block defining the page layout, permalink URL, and plugin name for the brookjs-desalinate Chai plugin documentation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/brookjs_desalinate.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: plugin\npermalink: plugins/brookjs-desalinate/\npluginName: brookjs-desalinate\n```\n\n----------------------------------------\n\nTITLE: Node.js Installation and Setup for Chai Backbone\nDESCRIPTION: Instructions for installing and setting up chai-backbone in a Node.js environment using npm. Shows how to require the module and integrate it with Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_backbone.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar chaiBackbone = require(\"chai-backbone\");\n\nchai.use(chaiBackbone);\n```\n\n----------------------------------------\n\nTITLE: Testing Backbone Router Routes with route.to Assertion\nDESCRIPTION: Demonstrates the 'route.to' assertion for testing if a route is correctly delegated to the right router and if arguments are properly extracted. Includes examples of positive, negative, and conditional routing tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_backbone.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"page/3\".should.route.to(myRouter, \"openPage\", { arguments: [\"3\"] });\n\"pages/3\".should.not.route.to(myRouter, \"openPage\");\n\"page/3\".should.route.to(myRouter, \"openPage\", { considering: [conflictingRouter] });\n```\n\n----------------------------------------\n\nTITLE: Installing Maybe-Chai via NPM\nDESCRIPTION: Command to install the maybe-chai plugin as a dev dependency\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/maybe_chai.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install maybe-chai --save-dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Chai-Fireproof Test Environment in Gulp\nDESCRIPTION: Gulp task that sets up the test environment by loading required dependencies, configuring chai-fireproof, and initializing Firebase connection using environment variables.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fireproof.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngulp.task('test:setup', 'Set up tests.', ['build'], function() {\n\n  var Firebase = require('firebase'),\n    chai = require('chai');\n\n  require('./dist/chai-fireproof');\n  global.chai = chai;\n  global.expect = chai.expect;\n\n  if (!process.env.FIREBASE_TEST_URL || !process.env.FIREBASE_TEST_SECRET) {\n\n    gutil.log('Please set FIREBASE_TEST_URL and FIREBASE_TEST_SECRET.');\n    process.exit(1);\n\n  }\n\n  global.root = new Fireproof(new Firebase(process.env.FIREBASE_TEST_URL));\n  global.authToken = process.env.FIREBASE_TEST_SECRET;\n\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a unit test with chai-openapi-response-validator\nDESCRIPTION: Example of writing a unit test using Mocha and Chai with the chai-openapi-response-validator plugin to validate an object against a schema defined in an OpenAPI specification.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_openapi_response_validator.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Set up Chai\nimport chai from 'chai';\nconst expect = chai.expect;\n\n// Import this plugin and the function you want to test\nimport chaiResponseValidator from 'chai-openapi-response-validator';\nimport { functionToTest } from 'path/to/your/code';\n\n// Load an OpenAPI file (YAML or JSON) into this plugin\nchai.use(chaiResponseValidator('path/to/openapi.yml'));\n\n// Write your test (e.g. using Mocha)\ndescribe('functionToTest()', () => {\n  it('should satisfy OpenAPI spec', async () => {\n    // Assert that the function returns a value satisfying a schema defined in your OpenAPI spec\n    expect(functionToTest()).to.satisfySchemaInApiSpec('ExampleSchemaObject');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Chai directly with Sinon.JS spies\nDESCRIPTION: Examples of awkwardly using Chai's should or expect interfaces directly on Sinon.JS spy properties without using Sinon-Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_es.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmySpy.calledWith(\"foo\").should.be.ok;\nexpect(mySpy.calledWith(\"foo\")).to.be.ok;\n```\n\n----------------------------------------\n\nTITLE: Setting up Chai Stats in Node.js\nDESCRIPTION: Code to require and initialize chai-stats plugin with Chai in Node.js environment\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats_jamestalmage.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , chaiStats = require('chai-stats');\n\nchai.use(chaiStats);\n\nvar should = chai.should()\n  , expect = chai.expect;\n```\n\n----------------------------------------\n\nTITLE: Using Equals Shorthand in Assertions\nDESCRIPTION: Example demonstrating the equals shorthand operator for assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_by_proxy.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nobj = { foo: { bar: 'baz' } }\n\nobj.should.have.foo.bar= 'baz'\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Chai-Cheerio Plugin\nDESCRIPTION: Instructions for running the test suite for the chai-cheerio plugin. It requires Node.js to be installed and npm dependencies to be installed.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_cheerio.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Initializing chai-almost plugin\nDESCRIPTION: Basic setup to import and initialize the chai-almost plugin with default tolerance (1e-6)\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_almost.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiAlmost = require('chai-almost');\n\nchai.use(chaiAlmost());\n```\n\n----------------------------------------\n\nTITLE: AMD Module Setup in JavaScript\nDESCRIPTION: Demonstrates how to use chai-changes as an AMD module with a module loader like RequireJS.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function (require, exports, module) {\n    var chai = require(\"chai\");\n    var chaiChanges = require(\"chai-changes\");\n\n    chai.use(chaiChanges);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting File Equality in Chai-FS\nDESCRIPTION: Shows how to assert that both paths exist, are files, and contain the same content. Reads both files as utf8 text for comparison.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).and.equal(otherPath, ?msg);\nexpect(path).to.be.a.file(?msg).and.not.equal(otherPath, ?msg);\n\npath.should.be.a.file(?msg).and.equal(otherPath, ?msg);\npath.should.be.a.file(?msg).and.not.equal(otherPath, ?msg);\n\nassert.fileEqual(path, otherPath, ?msg);\nassert.notFileEqual(path, otherPath, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Enhancing Error Messages in Overwritten 'ok' Assertion\nDESCRIPTION: This snippet shows how to improve error messages in the custom 'ok' assertion by providing more context about the assertion being performed.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/helpers.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst assertId = new Assertion(obj._attrs.id, 'model assert ok id type');\n```\n\n----------------------------------------\n\nTITLE: Comparing Files with Other Files\nDESCRIPTION: Examples of comparing contents between two different files.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_files.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(file('foo.txt')).to.equal(file('foo-copy.txt'));\nexpect(file('foo.txt')).to.not.equal(file('bar.txt'));\n```\n\n----------------------------------------\n\nTITLE: Using 'and' to Return to Previous Chain\nDESCRIPTION: Example demonstrating how to use the 'and' keyword to return to the last have/has in the chain.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_by_proxy.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nobj = { foo: { bar: '' },\n        baz: { qux: 11 } }\n\nobj.should.have.foo.bar.with.a('string')\n           .and.baz.qux.eq(11)\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Shallow Deep Equal in Browser\nDESCRIPTION: HTML script tags for including the Chai library and the shallow-deep-equal plugin in a browser environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_shallow_deep_equal.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-shallow-deep-equal.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Testing Minimum Iterator Length\nDESCRIPTION: Examples of asserting that an iterable yields at least n values using the iterate.for.length.of.at.least assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([2, 3, 5]).to.iterate.for.length.of.at.least(2);\nexpect([2, 3, 5]).to.iterate.for.length.of.at.least(3);\nexpect([2, 3, 5]).not.to.iterate.for.length.of.at.least(4);\n```\n\n----------------------------------------\n\nTITLE: Non-eager Matching Example with chai-react-element\nDESCRIPTION: Illustrates how the plugin works non-eagerly, meaning it doesn't just match against the first element found but continues searching for matches throughout the component tree.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_react_element.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(<div><span></span><span>hello</span></div>).to.include.elementOfType('span').with.text('hello');\n```\n\n----------------------------------------\n\nTITLE: JavaScript Setup and Usage\nDESCRIPTION: Example showing how to require and configure Chai Smoothie with JavaScript\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_smoothie.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-smoothie'));\nvar expect = chai.expect;\n\nexpect(element(by.css('h1'))).to.be.present;\n```\n\n----------------------------------------\n\nTITLE: Using descendingBy method for object attribute sorting\nDESCRIPTION: Shows the explicit .descendingBy() method to test if objects are sorted by a specific attribute in descending order.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sorted.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([{id:2,name:\"bat\"},{id:3,name:\"apples\"}]).to.be.descendingBy(\"name\")\n```\n\n----------------------------------------\n\nTITLE: Testing Function Optimization with Parameters\nDESCRIPTION: Example showing how to test function optimization while passing parameters to the function being evaluated, including arguments and a thisArg context.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_v__optimisation.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fn(a, b, c) {}\nexpect(fn).optimisation(\"yes\", [1, 2, 3], thisArg);\n```\n\n----------------------------------------\n\nTITLE: Asserting Directory Existence with chai-fs\nDESCRIPTION: Examples of using the directory assertion to check if a path exists and is a directory.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs_latest.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.directory(?msg);\nexpect(path).to.not.be.a.directory(?msg);\n\npath.should.be.a.directory(?msg);\npath.should.not.be.a.directory(?msg);\n\nassert.isDirectory(path,  ?msg);\nassert.notIsDirectory(path, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Using Sinon-Chai with Chai's should interface\nDESCRIPTION: A complete example showing how to set up and use Sinon-Chai with Chai's should interface in a test suite using a hello function that calls a callback.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_es.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nchai.should();\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        cb.should.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Including Chai HTTP Plugin in HTML\nDESCRIPTION: Demonstrates how to include the chai-http plugin in an HTML file for use in a web browser environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/natanavra_chai_http.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-http.js\"></script>\n<script>\n  chai.use(chaiHttp);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sample HTML Element Definition\nDESCRIPTION: Example HTML showing the element structure used in testing examples\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_smoothie.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1 id=\"title\">Chai Smoothie is delicious!</h1>\n```\n\n----------------------------------------\n\nTITLE: Using chai-include-ordered-with-gaps Plugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the chai-include-ordered-with-gaps plugin with different Chai assertion styles (expect, should, assert). It shows how to test for ordered subsets with gaps in arrays.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_include_ordered_with_gaps.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst chai = require('chai');\nconst { expect, should, assert } = chai;\n\nshould();\nchai.use(require('chai-include-ordered-with-gaps'));\n\nexpect([1, 2, 3, 4, 5]).to.include.ordered.members.with.gaps([2, 4, 5]);\n\n[1, 2, 3, 4, 5].should.include.ordered.members.with.gaps([2, 4, 5]);\n\nassert.includeOrderedMembersWithGaps([1, 2, 3, 4, 5], [3, 4, 5]);\n```\n\n----------------------------------------\n\nTITLE: Using Chai's Native 'not' with node-fetch-response-matchers\nDESCRIPTION: Example demonstrating how to use Chai's native 'not' operator with the node-fetch-response-matchers plugin for negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/node_fetch_response_matchers.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('not', function(){\n   return expect(fetch('http://localhost/')).to.not.be.successful();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Sinon-Chai with AMD module loader\nDESCRIPTION: Setting up sinon-chai with an AMD module loader like RequireJS by mapping module IDs and registering it with Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sinon.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function (require, exports, module) {\n    var chai = require(\"chai\");\n    var sinonChai = require(\"sinon-chai\");\n\n    chai.use(sinonChai);\n});\n```\n\n----------------------------------------\n\nTITLE: Improved Assertions Using Sinon-Chai\nDESCRIPTION: Shows the improved, more readable syntax provided by the sinon-chai plugin for both should and expect interfaces.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmySpy.should.have.been.calledWith(\"foo\");\nexpect(mySpy).to.have.been.calledWith(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Checking if an array contains any of specified elements with chai-arrays\nDESCRIPTION: Example of using the containingAnyOf assertion to check if an array includes any of the specified elements.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_arrays.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.containingAnyOf([1]);\nexpect([1, 2, 3]).to.be.containingAnyOf([6, 7, 3, 5]);\nexpect([1, 2, 3]).to.be.containingAnyOf([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Installing Chai-Moment-String on Server\nDESCRIPTION: Demonstrates how to require and configure the chai-moment-string plugin in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_moment_string.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-moment-string'));\n```\n\n----------------------------------------\n\nTITLE: Including chai-fuzzy in browser environment\nDESCRIPTION: Code snippet showing how to include the chai-fuzzy plugin in a browser environment. Requires underscore.js and chai.js to be loaded first.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fuzzy.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"underscore.js\"></script>\n<script src=\"chai.js\"></script>\n<script src=\"chai-fuzzy.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Header Matcher Example\nDESCRIPTION: Example showing how to use the haveHeader matcher to verify a specific header name and value in the HTTP response.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/node_fetch_response_matchers.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nit('have header', () => {\n  return expect(fetch('http://localhost/').to.haveHeader('connection', 'close');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Chai-Moment-String in Browser\nDESCRIPTION: Shows how to include the chai-moment-string plugin in a browser environment using script tags.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_moment_string.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-moment-string.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing chai-postman via npm\nDESCRIPTION: Command to install the chai-postman plugin as a dev dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_postman.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-postman --save-dev\n```\n\n----------------------------------------\n\nTITLE: Using chai-parentheses with sinon-chai\nDESCRIPTION: Example demonstrating how chai-parentheses works with sinon-chai spy assertions\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_parentheses.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nspy.should.have.been.called();\nspy.should.have.been.calledOnce();\nspy.should.have.been.calledTwice();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Promise Support for Older Browsers\nDESCRIPTION: Example showing how to add Promise support for older browsers that don't have native Promise implementation, using a third-party library.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Add promise support if this does not exist natively.\nif (!global.Promise) {\n  global.Promise = require('q');\n}\nconst chai = require('chai');\nchai.use(require('chai-http'));\n```\n\n----------------------------------------\n\nTITLE: Using chai-bites for Byte Array Equality Testing in JavaScript\nDESCRIPTION: Demonstrates how to use the chai-bites plugin with Chai for comparing byte arrays (Uint8Array instances) against hexadecimal strings or arrays. Shows both expect and assert style assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bites.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect, assert } = require('chai')\n  .use(require('chai-bites'));\n\nconst buffer = new Uint8Array([ 1, 2, 3, 4, 5 ]);\nexpect(buffer).to.equalBytes('0102030405');\n// `assert` style works, too\nassert.equalBytes(buffer, [1, 2, 3, 4, 5], 'error message');\n```\n\n----------------------------------------\n\nTITLE: Installing chai-immutable via Package Managers\nDESCRIPTION: Commands to install the chai-immutable plugin using npm or yarn package managers.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev chai-immutable\nyarn add --dev chai-immutable\n```\n\n----------------------------------------\n\nTITLE: Installing chai-xml Plugin with npm\nDESCRIPTION: Command to install the chai-xml plugin using npm. This needs to be run in addition to installing the main chai package.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_xml.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-xml --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring chai-retry Plugin in JavaScript\nDESCRIPTION: JavaScript code to configure the chai-retry plugin, including setting up the plugin, specifying retry count, and defining the polling interval between retries.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_retry.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chaiRetry = require('chai-retry')\nchai.use(chaiRetry)\n\nchai.config.retry = 20 // will retry same assertion for 20 times, defaults to 10\nchai.config.interval = 5000 // the polling interval in ms between each retry, defaults to 2000 ms\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Transform Options\nDESCRIPTION: Configures chai-jscodeshift with custom transform options that will be passed to the transformer. This example sets printing options for the transformed code.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jscodeshift.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nchai.use(chaiJSCodeShift({\n  transformOptions: {\n    printOptions: {space: 'single'},\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Called At Most n Times in Chai\nDESCRIPTION: Shows how to assert that a spy has been called at most n times, using both max/at.most syntax and positive/negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.max(3);\nexpect(spy).to.not.have.been.called.at.most(3);\nspy.should.have.been.called.at.most(3);\nspy.should.not.have.been.called.max(3);\n```\n\n----------------------------------------\n\nTITLE: Basic Change Assertion Examples in CoffeeScript\nDESCRIPTION: Demonstrates basic change assertions to check if a value changes, increases, or stays the same during code execution.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_4\n\nLANGUAGE: coffeescript\nCODE:\n```\nresult = 0\n(-> result).should.change.when -> result += 1\nexpect(-> result).to.change.when -> result -= 1\nexpect(-> result).not.to.change.when -> result = result * 1\n```\n\n----------------------------------------\n\nTITLE: Installing chai-colors via npm\nDESCRIPTION: Command to install the chai-colors plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_colors.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-colors\n```\n\n----------------------------------------\n\nTITLE: Including Chai Stats in Browser\nDESCRIPTION: HTML script tag to include chai-stats.js after chai.js for browser usage\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats_jamestalmage.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<script src=\"chai-stats.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Asserting Greater Than or Equal with bn-chai\nDESCRIPTION: Examples of using the 'gte' assertion with bn-chai to check if one BN.js decimal is greater than or equal to another.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new BN('1')).to.be.gte.BN(0);\nexpect(new BN('1')).to.be.gte.BN(1);\nexpect(new BN('1')).not.to.be.gte.BN(2);\n```\n\n----------------------------------------\n\nTITLE: Installing bn-chai via npm\nDESCRIPTION: Command to install the bn-chai plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/bn_chai.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -s bn-chai\n```\n\n----------------------------------------\n\nTITLE: Basic usage of dirty-chai with Chai.js\nDESCRIPTION: Example showing how to require and initialize the dirty-chai plugin with Chai, and use the function-style assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar dirtyChai = require('dirty-chai');\nvar expect = chai.expect\n\nchai.use(dirtyChai);\n// ...\nexpect(true).to.be.true();\n```\n\n----------------------------------------\n\nTITLE: Using Chai with Sinon.JS awkwardly\nDESCRIPTION: Using Chai's should or expect interfaces on spy properties directly, which is less elegant than the sinon-chai approach.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sinon.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmySpy.calledWith(\"foo\").should.be.ok;\nexpect(mySpy.calledWith(\"foo\")).to.be.ok;\n```\n\n----------------------------------------\n\nTITLE: Sinon-Chai example using expect interface\nDESCRIPTION: Complete example showing how to use sinon-chai with Chai's expect interface in a Mocha test.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sinon.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nvar expect = chai.expect;\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        expect(cb).to.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Promises with When and Then in CoffeeScript\nDESCRIPTION: Shows an alternative approach to handling promises in chai-changes by chaining a then callback for test completion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_3\n\nLANGUAGE: coffeescript\nCODE:\n```\nexpect(-> value).to.change.when(-> promise).then\n  -> done()\n  (error) -> done(error)\n```\n\n----------------------------------------\n\nTITLE: Using singleLine Assertion\nDESCRIPTION: Examples of the singleLine assertion to verify if a string consists of a single line without line breaks.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nassert.singleLine('abcdef');\nexpect('abcdef').to.be.singleLine();\n```\n\n----------------------------------------\n\nTITLE: Installing chai-match via npm\nDESCRIPTION: Command to install the chai-match plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_match.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev chai-match\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest-Kefir in test files\nDESCRIPTION: Code snippet showing how to initialize jest-kefir by creating extensions and registering them with Jest's expect.extend() method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {extensions, activate, send, stream, prop, pool} = chaiKefir(Kefir)\nexpect.extend(extensions)\n```\n\n----------------------------------------\n\nTITLE: Content Type Assertion Examples\nDESCRIPTION: Examples showing how to assert response content types (json, html, text)\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_superagent.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(req).to.be.json;\nexpect(req).to.be.html;\nexpect(req).to.be.text;\n```\n\n----------------------------------------\n\nTITLE: Installing Sinon-Chai with Node.js\nDESCRIPTION: Setting up sinon-chai in a Node.js environment by installing the package and registering it with Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sinon.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar sinonChai = require(\"sinon-chai\");\n\nchai.use(sinonChai);\n```\n\n----------------------------------------\n\nTITLE: Traditional Protractor Assertion\nDESCRIPTION: Example of a typical Protractor assertion checking element visibility\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_smoothie.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(element(by.id('title')).isDisplayed()).to.eventually.be.true\n```\n\n----------------------------------------\n\nTITLE: Sinon-Chai Expect Interface Example\nDESCRIPTION: Complete example showing how to set up and use Sinon-Chai with Chai's expect interface.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_cypress_sinon_chai.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nvar expect = chai.expect;\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        expect(cb).to.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Basename with chai-fs\nDESCRIPTION: Examples of using the basename assertion to check the return value of path.basename(path) in different Chai styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.have.basename(name, ?msg);\nexpect(path).to.not.have.basename(name, ?msg);\n\npath.should.have.basename(name, ?msg);\npath.should.not.have.basename(name, ?msg);\n\nassert.basename(path, name, ?msg);\nassert.notBasename(path, name, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-asserttype via npm\nDESCRIPTION: Command to install the chai-asserttype plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-asserttype\n```\n\n----------------------------------------\n\nTITLE: Using Basic Authentication in HTTP Request\nDESCRIPTION: Example of using Basic authentication in an HTTP GET request using Chai HTTP.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .get('/protected')\n  .auth('user', 'pass')\n```\n\n----------------------------------------\n\nTITLE: Using toBeProperty assertion\nDESCRIPTION: Example of using the toBeProperty() assertion to check if a value is a Kefir.Property.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).toBeProperty()\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Checkmark in Browser\nDESCRIPTION: This snippet shows how to include Chai Checkmark in a browser environment using script tags. It requires the Chai library to be loaded first.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_checkmark.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-checkmark.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using jsonSchema Assertion with BDD and TDD Styles\nDESCRIPTION: Example demonstrating how to use the jsonSchema assertion with both BDD and TDD styles to validate objects against a JSON schema. Shows validation of both valid and invalid objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar goodApple = {\n  skin: 'thin',\n  colors: ['red', 'green', 'yellow'],\n  taste: 10\n};\nvar badApple = {\n  colors: ['brown'],\n  taste: 0,\n  worms: 2\n};\nvar fruitSchema = {\n  title: 'fresh fruit schema v1',\n  type: 'object',\n  required: ['skin', 'colors', 'taste'],\n  properties: {\n    colors: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string'\n      }\n    },\n    skin: {\n      type: 'string'\n    },\n    taste: {\n      type: 'number',\n      minimum: 5\n    }\n  }\n};\n\n//bdd style\nexpect(goodApple).to.be.jsonSchema(fruitSchema);\nexpect(badApple).to.not.be.jsonSchema(fruitSchema);\n\ngoodApple.should.be.jsonSchema(fruitSchema);\nbadApple.should.not.be.jsonSchema(fruitSchema);\n\n//tdd style\nassert.jsonSchema(goodApple, fruitSchema);\nassert.notJsonSchema(badApple, fruitSchema);\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Property Assertion to Chai\nDESCRIPTION: Shows how to add a custom 'model' property assertion to Chai using the addProperty utility.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/helpers.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nutils.addProperty(Assertion.prototype, 'model', function () {\n  this.assert(\n      this._obj instanceof Model\n    , 'expected #{this} to be a Model'\n    , 'expected #{this} to not be a Model'\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up chai-jscodeshift Plugin\nDESCRIPTION: Imports the chai-jscodeshift plugin and registers it with Chai. This setup is required before using the custom assertions provided by the plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jscodeshift.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport chai from 'chai';\nimport chaiJSCodeShift from 'chai-jscodeshift';\nchai.use(chaiJSCodeShift());\n```\n\n----------------------------------------\n\nTITLE: Improved 'ok' Assertion with Flag Transfer for Negation Support\nDESCRIPTION: This snippet enhances the overwritten 'ok' assertion to properly handle negation by transferring flags from the original assertion to the new one.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/helpers.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nchai.overwriteProperty('ok', function (_super) {\n  return function checkModel () {\n    const obj = this._obj;\n    if (obj && obj instanceof Model) {\n      new Assertion(obj).to.have.deep.property('_attrs.id'); // we always want this\n      const assertId = new Assertion(obj._attrs.id);\n      utils.transferFlags(this, assertId, false); // false means don't transfer `object` flag\n      assertId.is.a('number');\n    } else {\n      _super.call(this);\n    }\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Deep Checking Iterator Sequence Prefixes with assert.deepIteratesFrom() in JavaScript\nDESCRIPTION: Demonstrates using assert.deepIteratesFrom() to check if an iterable begins with a given sequence, using deep equality for complex objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nassert.deepIteratesFrom([{n: 2}, {n: 3}], [{n: 2}]);\nassert.deepIteratesFrom([[0, 2], [1, 3]], [[0, 2]]);\n```\n\n----------------------------------------\n\nTITLE: Installing and Using chai-fs Plugin with Node.js\nDESCRIPTION: Instructions for installing the chai-fs plugin via npm and integrating it with Chai in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-fs\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-fs'));\n```\n\n----------------------------------------\n\nTITLE: ES6 Import Configuration\nDESCRIPTION: Demonstrates how to import and configure chai-rx using ES6 modules.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rxjs.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport chai from 'chai';\nimport chaiRx from 'chai-rx';\n\nchai.use(chaiRx);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-null via npm\nDESCRIPTION: Command to install the chai-null plugin using npm package manager\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-null.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-null\n```\n\n----------------------------------------\n\nTITLE: Setting up Chai Things in JavaScript\nDESCRIPTION: This snippet shows how to require and set up Chai Things in a JavaScript file. It demonstrates importing Chai, enabling the should syntax, and incorporating the Chai Things plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-things.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nchai.should();\nchai.use(require('chai-things'));\n```\n\n----------------------------------------\n\nTITLE: Using Overwritten 'ok' Assertion with Models and Non-Models\nDESCRIPTION: This snippet shows how to use the overwritten 'ok' assertion with both model objects and regular values. It demonstrates that the custom behavior applies only to models.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/helpers.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst arthur = new Model('person');\narthur.set('id', 42);\nexpect(arthur).to.be.ok;\nexpect(true).to.be.ok;\n```\n\n----------------------------------------\n\nTITLE: Installing API Contract Validator with npm\nDESCRIPTION: Command to install the api-contract-validator package as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/api_contract_validator.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npm i --save-dev api-contract-validator\n```\n\n----------------------------------------\n\nTITLE: Asserting Iterator Length Range with iterate.for.length.within() in JavaScript\nDESCRIPTION: Demonstrates how to use the iterate.for.length.within() assertion to check if an iterable yields between min and max values (inclusive). Tests boundary conditions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([2, 3, 5]).to.iterate.for.length.within(2, 4);\nexpect([2, 3, 5]).to.iterate.for.length.within(3, 3);\nexpect([2, 3, 5]).not.to.iterate.for.length.within(4, 7);\n```\n\n----------------------------------------\n\nTITLE: Implementing Exportable Globals in Chai Plugin\nDESCRIPTION: Demonstrates the recommended approach for exposing global variables in a Chai plugin by exporting them directly in the module record for direct importing.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/index.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const myGlobal = {...};\n\nexport default function myPlugin(chai, utils) {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting tv4 to ban unknown properties\nDESCRIPTION: Shows how to configure chai-json-schema to fail validation when schema contains unknown properties.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-json-schema.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nchai.tv4.banUnknown = true;\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Smoothie via NPM\nDESCRIPTION: Command to install the Chai Smoothie plugin as a dev dependency\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_smoothie.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-smoothie --save-dev\n```\n\n----------------------------------------\n\nTITLE: Using chai-integer Plugin with Chai in JavaScript\nDESCRIPTION: This snippet demonstrates how to require and use the chai-integer plugin with Chai. It shows how to set up the assertion library and make integer assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_integer.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , expect = chai.expect\n  , chai.use( require('chai-integer') );\n\nexpect(2015).to.be.an.integer();\nexpect(2.015).not.to.be.an.integer();\n```\n\n----------------------------------------\n\nTITLE: Extending Factory Patterns\nDESCRIPTION: Demonstrates how to create new factory patterns by extending existing ones with additional properties\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-factories.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar cat = chai.factory('cat', { cute: true, age: 4 });\nchai.factory('tiger', cat.extend({ scary: true }));\n```\n\n----------------------------------------\n\nTITLE: Asserting HTTP Headers in Request or Response\nDESCRIPTION: Examples of asserting the presence and value of headers in HTTP requests or responses. This can check both header existence and specific values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(req).to.have.header('x-api-key');\nexpect(req).to.have.header('content-type', 'text/plain');\nexpect(req).to.have.header('content-type', /^text/);\n```\n\n----------------------------------------\n\nTITLE: Running the Documentation Server\nDESCRIPTION: Commands to generate data and start the Jekyll web server.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/README.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ make\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ make generated_data\n$ make docs-server\n```\n\n----------------------------------------\n\nTITLE: Using js.spec-chai Plugin with Nested Maps in TypeScript\nDESCRIPTION: This example demonstrates how to use the js.spec-chai plugin to test object conformance against nested specifications. It shows importing the necessary libraries, setting up Chai with the plugin, and writing tests that verify object structures using the 'conform' assertion method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/js_spec_chai.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as s from \"js.spec\"\nimport * as chai from \"chai\";\nimport jsSpecChai from \"../src/index\";\n// fancy chai dancing\nchai.use(jsSpecChai);\nchai.should();\n\ndescribe(\"Spec tests\", () => {\n\n  context(\"with nested maps\", () => {\n    const school = s.spec.map(\"schoolSpec\", {\n      city: s.string\n    });\n    const friend = s.spec.map(\"friendSpec\", {\n      name: s.spec.string,\n      age: s.spec.number,\n      school\n    });\n\n    it(\"conforms a good object\", () => {\n      const obj = {\n        name: \"andrea\",\n        age: 18,\n        school: {\n          city: \"Turin\",\n        }\n      };\n      obj.should.conform(friend);\n    })\n\n    it(\"does not conform is there is a missing key\", () => {\n      const obj = {\n        name: \"andrea\",\n        school: {\n          city: \"Turin\",\n        }\n      };\n      obj.should.not.conform(friend);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Cookie Matcher Example\nDESCRIPTION: Example showing how to use the haveCookie matcher to verify a specific cookie name and value in the HTTP response.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/node_fetch_response_matchers.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('have cookie', () => {\n  return expect(fetch('http://localhost/').to.haveCookie('foo', 'bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Each Plugin\nDESCRIPTION: Shows the command to install chai-each plugin using Yarn package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_each.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add chai-each\n```\n\n----------------------------------------\n\nTITLE: Testing EventEmitter with chai-eventemitter in JavaScript\nDESCRIPTION: This snippet shows how to use the chai-eventemitter plugin to simplify EventEmitter testing. It demonstrates checking if an event was emitted and if it was emitted with specific arguments.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_eventemitter.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(function(){ ee.emit('test') }).to.emitFrom(ee, 'test')\nexpect(function(){ ee.emit('test', arg) }).to.emitFrom(ee, 'test', arg)\n```\n\n----------------------------------------\n\nTITLE: Initializing chai-js-factories with AMD\nDESCRIPTION: This code demonstrates how to initialize chai-js-factories when using AMD (Asynchronous Module Definition). It shows the process of requiring the necessary modules and explicitly initializing the plugin with the js-factories library.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_js_factories.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(['chai', 'js-factories', 'chai-js-factories'], function(chai, Factory, chaiJsFactories) {\n  chai.use(function(chai, utils) {\n    chaiJsFactories(Factory, chai, utils);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Types Using Chai Assertion\nDESCRIPTION: Shows how to test that types are correctly used in a JavaScript file using the chai-as-typed plugin assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_typed.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('/absolute/path/to/filename.js').to.have.types.validated();\n```\n\n----------------------------------------\n\nTITLE: Installing XCode Command Line Tools on MacOS\nDESCRIPTION: Commands to install Git via XCode Command Line Tools and verify the installation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/README.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ xcode-select --install\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ git --version\ngit version 2.20.1\n```\n\n----------------------------------------\n\nTITLE: Cloning the Chai.js Documentation Repository\nDESCRIPTION: Commands to clone the repository and install dependencies.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/README.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/chaijs/chaijs.github.io\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ make install\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo bundle install\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Declarations for Chai Iterator\nDESCRIPTION: Command to install TypeScript declaration files for Chai and chai-iterator using the typings package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ntypings install --save-dev npm~chai npm:chai-iterator\n```\n\n----------------------------------------\n\nTITLE: Initializing and Registering chai-kefir Plugin\nDESCRIPTION: Code to initialize the chai-kefir plugin with Kefir and register it with Chai.js.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { plugin, activate, send, stream, prop, pool } = chaiKefir(Kefir);\nuse(plugin);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage with should in CoffeeScript\nDESCRIPTION: Demonstrates the basic syntax for using chai-changes with the should style. This shows how to verify that a value changes when a specific function is executed.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_1\n\nLANGUAGE: coffeescript\nCODE:\n```\n(-> codeThatYieldsAChangedResult).should....when ->\n  executeTheCodeThatCausesTheChange()\n```\n\n----------------------------------------\n\nTITLE: Using Zombied-Chai with should and expect syntax\nDESCRIPTION: Examples of how to assert HTTP status using Zombied-Chai's improved syntax with both should and expect styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/zombied_chai.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbrowser.should.have.status(200)\nexpect(browser).to.have.status(200)\n```\n\n----------------------------------------\n\nTITLE: Using containingAllOf() assertion with Chai\nDESCRIPTION: Examples demonstrating how to check if an array contains all elements from another array.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_ermeschultz_chai_arrays.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.containingAllOf([1]);\nexpect([1, 2, 3]).to.be.containingAllOf([1, 3]);\nexpect([1, 2, 3]).to.be.containingAllOf([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Chai Plugin Utilities Documentation\nDESCRIPTION: This snippet defines the YAML frontmatter for the Markdown document, specifying the title, weight, permalink, and API namespace for the plugin utilities documentation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/api/plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n  title: Plugin Utilities\n  weight: 20\n  permalink: /api/plugins/\n  api_namespace: Utils\n---\n```\n\n----------------------------------------\n\nTITLE: Using momentFormat Assertion\nDESCRIPTION: Examples of using the momentFormat assertion for validating date strings against moment.js formats, with and without locale specification.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_moment_string.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Without locale\nexpect('2018-01-26').to.momentFormat('YYYY-MM-DD');\n// With locale\nexpect('2012 juillet').to.momentFormat('YYYY MMMM', 'fr');\n```\n\n----------------------------------------\n\nTITLE: Using chai-bignumber property assertions in JavaScript\nDESCRIPTION: Examples of using chai-bignumber property-based assertions for checking finite, integer, negative, and zero values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bignumber.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n(100 / 0).should.not.be.finite;\nexpect(10).to.be.integer;\n(-100).should.be.negative;\nexpect(1 - 1).to.be.zero;\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Interfaces with spy.interface\nDESCRIPTION: Shows how to create mock objects with either empty method implementations or custom implementations using spy.interface.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventBus = chai.spy.interface(['on', 'off', 'emit']);\n\n// with implementation\nconst arrayLike = chai.spy.interface({\n  push(item) {\n    this.__items = this.__items || [];\n    return this.__items.push(item)\n  },\n  // other methods\n});\n\narrayLike.push(5);\n```\n\n----------------------------------------\n\nTITLE: Using chai-bignumber property assertions in JavaScript\nDESCRIPTION: Examples of using chai-bignumber property-based assertions for checking finite, integer, negative, and zero values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_bignumber.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n(100 / 0).should.not.be.finite;\nexpect(10).to.be.integer;\n(-100).should.be.negative;\nexpect(1 - 1).to.be.zero;\n```\n\n----------------------------------------\n\nTITLE: Installing sinon-chai-in-order via npm\nDESCRIPTION: Command for installing the sinon-chai-in-order plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_in_order.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install sinon-chai-in-order\n```\n\n----------------------------------------\n\nTITLE: Example Using Chai's 'expect' Syntax with Sinon-Chai\nDESCRIPTION: Demonstrates how to set up and use Sinon-Chai with Chai's 'expect' syntax in a Node.js environment. It includes a simple test case for a 'hello' function using a Sinon spy.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_slightlytyler_sinon_chai.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nvar expect = chai.expect;\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        expect(cb).to.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using visible assertion with jQuery elements\nDESCRIPTION: Shows how to assert that a jQuery element is visible using the visible assertion which uses jQuery's :visible selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n$('.name').should.be.visible;\nexpect($('.year')).to.be.visible;\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Model Relationships\nDESCRIPTION: Example demonstrating how to test hasMany relationship between User and Thing models using chai-bookshelf assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-bookshelf.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('User model', function() {\n  var User\n    , Thing\n  ;\n\n  beforeEach(function() {\n    Thing = db.Model.extend({\n      tableName: 'things'\n    });\n\n    User = db.Model.extend({\n      things: function() {\n        return this.hasMany(Thing);\n      }\n    });\n  });\n\n  describe('Relationships', function() {\n    it('has many things', function() {\n      expect(User).to.haveMany(Thing);\n    })\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing chai-openapi-response-validator with npm\nDESCRIPTION: Command to install the chai-openapi-response-validator package using npm as a development dependency.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_openapi_response_validator.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev chai-openapi-response-validator\n```\n\n----------------------------------------\n\nTITLE: Installing chai-param via npm\nDESCRIPTION: Command to install the chai-param plugin using npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_param.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-param\n```\n\n----------------------------------------\n\nTITLE: Using Trigger Assertion with Backbone Models in JavaScript\nDESCRIPTION: Demonstrates how to use the 'trigger' assertion to test that a Backbone model triggers specific events when actions are performed on it. The example shows testing a single event and also chaining multiple event assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_backbone.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodel.should.trigger(\"change\", { with: [model] }).when(function() {\n  model.set({ attribute: \"value\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Node.js Setup with CommonJS\nDESCRIPTION: Standard setup for using chai-immutable in Node.js with CommonJS require statements.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiImmutable = require('chai-immutable');\n\nchai.use(chaiImmutable);\n```\n\n----------------------------------------\n\nTITLE: Using selected assertion with jQuery elements\nDESCRIPTION: Examples of using the selected assertion to check if at least one element in a jQuery selection is selected using :selected selector.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n$('option').should.be.selected;\nexpect($('option')).not.to.be.selected;\n```\n\n----------------------------------------\n\nTITLE: Using chai-as-promised with Non-Promise-Friendly Test Runners (JavaScript)\nDESCRIPTION: Shows how to use the notify method to adapt chai-as-promised assertions to test runners that don't support returning promises for asynchronous tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"should be fulfilled\", function (done) {\n    promise.should.be.fulfilled.and.notify(done);\n});\n\nit(\"should be rejected\", function (done) {\n    otherPromise.should.be.rejected.and.notify(done);\n});\n\nit(\"should change the state\", function (done) {\n    otherState.should.equal(\"before\");\n    promise.should.be.fulfilled.then(function () {\n        otherState.should.equal(\"after\");\n    }).should.notify(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting verbose logging for chai-sip debugging\nDESCRIPTION: Command to set the LOG_LEVEL environment variable to verbose mode for detailed logging when troubleshooting chai-sip tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sip.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export LOG_LEVEL=verbose\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification Example\nDESCRIPTION: Example of an OpenAPI specification in YAML format defining a simple API endpoint and response schema.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_openapi_response_validator.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: 3.0.0\ninfo:\n  title: Example API\n  version: 1.0.0\npaths:\n  /example:\n    get:\n      responses:\n        200:\n          description: Response body should be an object with fields 'stringProperty' and 'integerProperty'\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - stringProperty\n                  - integerProperty\n                properties:\n                  stringProperty:\n                    type: string\n                  integerProperty:\n                    type: integer\n```\n\n----------------------------------------\n\nTITLE: Form Field Value Assertion in Chai WebDriver\nDESCRIPTION: Tests the value of a form field against the provided string.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.have.value('string')\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request with Callback Response Handling\nDESCRIPTION: Example of making an HTTP request and handling the response with a callback function to perform assertions. This demonstrates the traditional async pattern.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = chai;\n\nchai.request(app)\n  .put('/user/me')\n  .send({ password: '123', confirmPassword: '123' })\n  .end((err, res) => {\n     expect(err).to.be.null;\n     expect(res).to.have.status(200);\n  });\n```\n\n----------------------------------------\n\nTITLE: AMD Module Setup for Chai Backbone\nDESCRIPTION: Instructions for using chai-backbone as an AMD module. Shows how to define dependencies and set up the plugin when using an AMD loader.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_backbone.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function (require, exports, module) {\n    var chai = require(\"chai\");\n    var chaiBackbone = require(\"chai-backbone\");\n\n    chai.use(chaiBackbone);\n});\n```\n\n----------------------------------------\n\nTITLE: Promise-Specific Assertions with Assert Interface\nDESCRIPTION: Dedicated promise assertions for the assert interface including testing for fulfillment, resolved values, and rejection with specific error types.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreturn assert.isFulfilled(promise, \"optional message\");\n\nreturn assert.becomes(promise, \"foo\", \"optional message\");\nreturn assert.doesNotBecome(promise, \"foo\", \"optional message\");\n\nreturn assert.isRejected(promise, \"optional message\");\nreturn assert.isRejected(promise, Error, \"optional message\");\nreturn assert.isRejected(promise, /error message matcher/, \"optional message\");\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Assertion with Callback using chai-as-promised (JavaScript)\nDESCRIPTION: Demonstrates how to use chai-as-promised with testing frameworks that don't support returning promises, using the notify method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomethingAsync().should.eventually.equal(\"foo\").notify(done);\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring chai-nock in JavaScript\nDESCRIPTION: Demonstrates how to install the chai-nock plugin via npm and then configure it with Chai in your test setup.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_nock.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiNock = require('chai-nock');\n\nchai.use(chaiNock);\n```\n\n----------------------------------------\n\nTITLE: Asserting Reference Inequality of Immutable Collections (JavaScript)\nDESCRIPTION: Demonstrates the use of .notReferenceEqual() to assert that two immutable collections do not refer to the same instance. This preserves the original behavior of Chai's notEqual for reference comparison.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = List.of(1, 2, 3);\nconst b = a;\nconst c = List.of(1, 2, 3);\nassert.throws(() => assert.notReferenceEqual(a, b));\nassert.notReferenceEqual(a, c);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-jest-mocks via npm\nDESCRIPTION: Command to install the chai-jest-mocks plugin as a dev dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jest_mocks.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-dev chai-jest-mocks\n```\n\n----------------------------------------\n\nTITLE: Asserting JSON Schema Validation in Chai-FS\nDESCRIPTION: Demonstrates how to assert that a path exists, is a file, contains JSON-parsable text conforming to a given JSON-Schema. Requires the chai-json-schema plugin to be activated separately.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).with.json.using.schema(obj);\nexpect(path).to.be.a.file(?msg).with.json.not.using.schema(obj);\n\npath.should.be.a.file(?msg).with.json.using.schema(obj);\npath.should.be.a.file(?msg).with.json.not.using.schema(obj);\n\nassert.jsonSchemaFile(path, schema,?msg);\nassert.notJsonSchemaFile(path, schema, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Change To Value Assertion Examples in CoffeeScript\nDESCRIPTION: Shows how to verify that a value changes to a specific ending value during code execution, with support for deep equality checking.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_7\n\nLANGUAGE: coffeescript\nCODE:\n```\nresult = ['a', 'b']\n(-> result).should.change.to(['a', 'b', 'c']).when -> result.push('c')\n(-> result).should.change.from(['a', 'b']).to(['a', 'c']).when -> result = ['a', 'c']\n```\n\n----------------------------------------\n\nTITLE: Change To Value Assertion Examples in CoffeeScript\nDESCRIPTION: Shows how to verify that a value changes to a specific ending value during code execution, with support for deep equality checking.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_7\n\nLANGUAGE: coffeescript\nCODE:\n```\nresult = ['a', 'b']\n(-> result).should.change.to(['a', 'b', 'c']).when -> result.push('c')\n(-> result).should.change.from(['a', 'b']).to(['a', 'c']).when -> result = ['a', 'c']\n```\n\n----------------------------------------\n\nTITLE: Installing Chai SuperAgent Plugin\nDESCRIPTION: npm command to install the chai-superagent plugin and its dependency superagent\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_superagent.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-superagent superagent\n```\n\n----------------------------------------\n\nTITLE: Using array() assertion with Chai\nDESCRIPTION: Examples demonstrating how to use the array() assertion to check if an object is an Array or typed array.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_ermeschultz_chai_arrays.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.array();\nexpect('foobar').not.to.be.array();\n\nexpect(new Uint8Array([1])).to.be.Uint8Array();\nexpect(new Uint16Array([1])).to.be.Uint16Array();\nexpect(new Uint32Array([1])).to.be.Uint32Array();\nexpect(new Uint8ClampedArray([1])).to.be.Uint8ClampedArray();\n```\n\n----------------------------------------\n\nTITLE: Asserting Property Existence in Immutable Map (JavaScript)\nDESCRIPTION: Demonstrates how to use the .property() assertion to check for the existence of a property in an Immutable Map. This method can also assert the value of the property if provided.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new Map({ a: 1 })).to.have.property('a');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(new Map({ a: 1 })).to.have.property('a', 1);\n```\n\n----------------------------------------\n\nTITLE: Including Chai Iterator with HTML Script Tags\nDESCRIPTION: Example of how to include Chai and the chai-iterator plugin in a browser environment using HTML script tags.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\"></script>\n<script src=\"chai-iterator.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Chai-jQ Attribute Assertions\nDESCRIPTION: Examples of using chai-jq's $attr assertions with and without expected values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jq.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar $elem = $(\"<div id=\\\"hi\\\" foo=\\\"bar time\\\" />\");\n\nexpect($elem)\n  // Assertion object is `$elem`\n  .to.have.$attr(\"id\", \"hi\").and\n  // Assertion object is still `$elem`\n  .to.contain.$attr(\"foo\", \"bar\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar $elem = $(\"<div id=\\\"hi\\\" foo=\\\"bar time\\\" />\");\n\nexpect($elem)\n  // Assertion object is `$elem`\n  .to.have.$attr(\"foo\").and\n    // Assertion object now changed to `$attr()` value: `\"bar time\"`\n    .to.equal(\"bar time\").and\n    .to.match(/^b/).and\n    .to.not.have.length(2);\n```\n\n----------------------------------------\n\nTITLE: Asserting File Existence in Chai-FS\nDESCRIPTION: Shows how to assert that a path exists and is a file. Uses fs.statSync().isFile() for verification, with examples for expect, should, and assert styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg);\nexpect(path).to.not.be.a.file(?msg);\n\npath.should.be.a.file(?msg);\npath.should.not.be.a.file(?msg);\n\nassert.isFile(path, ?msg);\nassert.notIsFile(path, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-almost via npm\nDESCRIPTION: Command to install the chai-almost plugin as a development dependency using npm\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_almost.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-almost --save-dev\n```\n\n----------------------------------------\n\nTITLE: Integrating chai-arrays with Chai\nDESCRIPTION: Code to import and use the chai-arrays plugin with the Chai assertion library.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_ermeschultz_chai_arrays.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst assertArrays = require('chai-arrays');\nchai.use(assertArrays);\n```\n\n----------------------------------------\n\nTITLE: Asserting a Spy Was Called at Most N Times\nDESCRIPTION: Shows how to assert that a spy was called at most n times, using both max and at.most syntaxes.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.max(3);\nexpect(spy).to.not.have.been.called.at.most(3);\nspy.should.have.been.called.at.most(3);\nspy.should.not.have.been.called.max(3);\n```\n\n----------------------------------------\n\nTITLE: Using indexOf Assertion\nDESCRIPTION: Examples of the indexOf assertion to verify the position of the first occurrence of a substring within a string.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_string.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nassert.indexOf('abcabd', 'ab', 0);\nexpect('abcabd').to.have.indexOf('ab', 0);\n```\n\n----------------------------------------\n\nTITLE: Asserting Reference Equality of Immutable Collections (JavaScript)\nDESCRIPTION: Demonstrates the use of .referenceEqual() to assert that two immutable collections refer to the same instance. This preserves the original behavior of Chai's equal for reference comparison.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_immutable.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = List.of(1, 2, 3);\nconst b = a;\nconst c = List.of(1, 2, 3);\nassert.referenceEqual(a, b);\nassert.throws(() => assert.referenceEqual(a, c));\n```\n\n----------------------------------------\n\nTITLE: Verifying Bundler Installation on MacOS\nDESCRIPTION: Command to verify Bundler version after installation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/README.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ bundler -v\nBundler version 2.0.1\n```\n\n----------------------------------------\n\nTITLE: Transforming Asserter Arguments in chai-as-promised (JavaScript)\nDESCRIPTION: Demonstrates how to use the transformAsserterArgs hook to modify the arguments passed to asserters, including asynchronous transformations.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nchaiAsPromised.transformAsserterArgs = function (args) {\n    return args.map(function (x) { return x + 1; });\n}\n\nPromise.resolve(2).should.eventually.equal(2); // will now fail!\nPromise.resolve(3).should.eventually.equal(2); // will now pass!\n\n// Asynchronous transformation example\nchaiAsPromised.transformAsserterArgs = function (args) {\n    return Promise.all(args);\n};\n\nPromise.resolve(2).should.eventually.be.within(Promise.resolve(1), Promise.resolve(6));\n```\n\n----------------------------------------\n\nTITLE: Complete chai-nock Usage Example in JavaScript\nDESCRIPTION: A complete example demonstrating how to use chai-nock in a test case, including setting up Nock, making a request, and verifying the request was made with the expected body.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_nock.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = require('chai');\nconst nock = require('nock');\nconst request = require('request-promise-native');\n\ndescribe('example', () => {\n  it('test', () => {\n    const requestNock = nock('http://bbc.co.uk')\n    .get('/')\n    .reply(200);\n\n    request({\n      json: true,\n      uri: 'http://bbc.co.uk',\n      body: {\n        hello: 'world'\n      }\n    });\n\n    return expect(requestNock).to.have.been.requestedWith({ hello: 'world' });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Smaller Value Comparison in Chai WebDriver\nDESCRIPTION: Tests if a numeric value is smaller than the provided number.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('input[type=number]').dom.to.have.smaller.value(0)\n```\n\n----------------------------------------\n\nTITLE: Using chai-rx-assert with TestScheduler\nDESCRIPTION: Example demonstrating how to use chai-rx-assert to test RxJS observables with the TestScheduler. Shows how to test delayed streams and verify the output using the rxEqual assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rx_assert.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar chaiRx = require('chai-rx-assert');\nchai.use(chaiRx);\n\nit('should return messages with delay', () => {\n    var scheduler = new TestScheduler();\n\n    var xs = scheduler.createHotObservable(onNext(250, 2), onCompleted(550));\n\n    var results = scheduler.startScheduler(() => {\n        return xs.delay(100, scheduler);\n    });\n\n    expect(results.messages).to.rxEqual([onNext(350, 2), onCompleted(650)]) // assert ok\n\n    // or without wrapping in list\n\n    expect(results.messages).to.rxEqual(onNext(350, 2), onCompleted(650)) // assert ok\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Signals with Matching Function\nDESCRIPTION: Demonstrates how to filter signal dispatches using a matching function that determines which dispatches should be registered by the spy.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_signals.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar signal = new signals.Signal();\nvar signalSpy = chai.signals.spyOnSignal(signal).matching(function (dispatchInfo) {\n\treturn dispatchInfo !== null;\n});\nsignal.dispatch();  // ignored\nsignal.dispatch(5); // registered\n```\n\n----------------------------------------\n\nTITLE: Chaining Just Assertions\nDESCRIPTION: Example of chaining assertions after a just assertion\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/maybe_chai.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect( Maybe.just( { status: 200 } ) ).to.be.a.just()\n    .and.to.have.property( 'status', 200 ) // OK\n```\n\n----------------------------------------\n\nTITLE: IPv4 Address Assertion Examples\nDESCRIPTION: Examples demonstrating IPv4-specific address validation assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_ip.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('127.0.0.1').to.be.an.ipv4;\nexpect('2001:0db8:85a3:0000:0000:8a2e:0370:7334').to.not.be.an.ipv4;\n```\n\n----------------------------------------\n\nTITLE: Testing objects sorted by attribute in ascending order\nDESCRIPTION: Demonstrates how to test if an array of objects is sorted in ascending order by a specific attribute using the .sortedBy() method.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_sorted.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([{id:2,name:\"apple\"},{id:3,name:\"bat\"}]).to.be.sortedBy(\"name\")\n```\n\n----------------------------------------\n\nTITLE: Text Regex Assertion in Chai WebDriver\nDESCRIPTION: Another way to test if the text content of an element matches the provided regular expression.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.have.text(/regex/)\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Called Once in Chai\nDESCRIPTION: Shows how to assert that a spy has been called exactly once, using both positive and negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.once;\nexpect(spy).to.not.have.been.called.once;\nspy.should.have.been.called.once;\nspy.should.not.have.been.called.once;\n```\n\n----------------------------------------\n\nTITLE: Asserting CLI Output with Chai Exec Plugin in JavaScript\nDESCRIPTION: Demonstrates various ways to assert CLI output using the Chai Exec plugin. It covers Should, Expect, and Assert syntaxes for checking exact matches, substrings, and regular expressions in CLI output.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jsdevtools_chai_exec.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Should syntax\nmyCLI.output.should.equal(\"Success!\");\nmyCLI.should.have.output.that.contains(\"Failure!\");\nmyCLI.should.have.output.that.does.not.contain(\"Success!\");\nmyCLI.should.have.output.that.matches(/^(Success|Failure)!$/);\nmyCLI.should.have.output.that.does.not.match(/^(Success|Failure)!$/);\n\n// Expect syntax\nexpect(myCLI).output.to.equal(\"Success!\");\nexpect(myCLI).to.have.output.that.contains(\"Failure!\");\nexpect(myCLI).to.have.output.that.does.not.contain(\"Success!\");\nexpect(myCLI).to.have.output.that.matches(/^(Success|Failure)!$/);\nexpect(myCLI).to.have.output.that.does.not.match(/^(Success|Failure)!$/);\n\n// Assert syntax\nassert.output(myCLI, \"Failure!\");\nassert.output(myCLI, /^(Success|Failure)!$/);\n\nassert.include(myCLI.output, \"Failure!\");\nassert.notInclude(myCLI.output, \"Success!\");\n\nassert.match(myCLI.output, /^Failure!$/);\nassert.notMatch(myCLI.output, /^Success!$/);\n```\n\n----------------------------------------\n\nTITLE: Verbose Testing Without node-fetch-response-matchers\nDESCRIPTION: Example showing how verbose and nested the code becomes when testing HTTP responses without the plugin, handling promises and callbacks manually.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/node_fetch_response_matchers.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('some-test', function(done){\n   fetch('http://localhost/')\n      .then(res => {\n         expect(res.status).to.equal(200);\n         return res.text();\n      }).then(text => {\n         expect(text).to.equal('foo');\n         done();\n      })\n});\n```\n\n----------------------------------------\n\nTITLE: Using chai-colors to Compare Different Color Representations in JavaScript\nDESCRIPTION: Demonstrates how to use the chai-colors assertion to compare colors in different formats. This example compares an RGBA color representation with a hexadecimal color value using the 'colored' assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_colors.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'rgba(0, 0, 0, 1)'.should.be.colored('#000000');\n```\n\n----------------------------------------\n\nTITLE: Testing Property Current Values with chai-kefir\nDESCRIPTION: Example showing how to assert current values in a Kefir Property.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsend(obs, [value(1)]);\nsend(obs, [value(2)]);\nexpect(obs).to.emit([value(2, { current: true }), end()], () => {\n    send(obs, [end()]);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Null Object from Object\nDESCRIPTION: Example of creating a null object based on an existing object where all properties and methods return null.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_null.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar nullobject = chai.Null(obj).create();\n```\n\n----------------------------------------\n\nTITLE: Creating Null Object from Object\nDESCRIPTION: Example of creating a null object based on an existing object where all properties and methods return null.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_null.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar nullobject = chai.Null(obj).create();\n```\n\n----------------------------------------\n\nTITLE: Text Assertion in Chai WebDriver\nDESCRIPTION: Tests if the text content of an element exactly matches the provided string.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.have.text('string')\n```\n\n----------------------------------------\n\nTITLE: Integrating chai-arrays plugin with Chai\nDESCRIPTION: Code snippet showing how to require and use the chai-arrays plugin with Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_arrays.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst assertArrays = require('chai-arrays');\nchai.use(assertArrays);\n```\n\n----------------------------------------\n\nTITLE: Using dirty-chai with chai-as-promised\nDESCRIPTION: Example showing the correct order for using chai-as-promised with dirty-chai, where chai-as-promised should be loaded first.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar chaiAsPromised = require(\"chai-as-promised\");\nvar dirtyChai = require(\"dirty-chai\");\n\n\nchai.use(chaiAsPromised);\nchai.use(dirtyChai);\n```\n\n----------------------------------------\n\nTITLE: Including Chai Change Plugin in Browser\nDESCRIPTION: Demonstrates how to include the chai-change plugin in a browser environment using a script tag.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-change.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<script src=\"chai-change.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Excluding a Single Property from Objects and Arrays\nDESCRIPTION: Examples demonstrating how to exclude a single top-level property from objects and arrays using both assert and expect styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exclude.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Object\nassert.deepEqualExcluding({ a: 'a', b: 'b' }, { b: 'b' }, 'a')\nassert.deepEqualExcluding({ a: 'a', b: 'b' }, { a: 'z', b: 'b' }, 'a')\n\nexpect({ a: 'a', b: 'b' }).excluding('a').to.deep.equal({ b: 'b' })\nexpect({ a: 'a', b: 'b' }).excluding('a').to.deep.equal({ a: 'z', b: 'b' })\n\n// Array\nassert.deepEqualExcluding([{ a: 'a', b: 'b' }], [{ b: 'b' }], 'a')\nassert.deepEqualExcluding([{ a: 'a', b: 'b' }], [{ a: 'z', b: 'b' }], 'a')\n\nexpect([{ a: 'a', b: 'b' }]).excluding('a').to.deep.equal([{ b: 'b' }])\nexpect([{ a: 'a', b: 'b' }]).excluding('a').to.deep.equal([{ a: 'z', b: 'b' }])\n```\n\n----------------------------------------\n\nTITLE: Change By Amount Assertion Examples in CoffeeScript\nDESCRIPTION: Shows how to use the change.by assertion to verify that a value changes by a specific delta during code execution.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_5\n\nLANGUAGE: coffeescript\nCODE:\n```\nresult = 0\n(-> result).should.change.by(3).when -> result += 3\nexpect(-> result).not.to.change.by(-3).when -> result += 1\nexpect(-> result).to.change.by(-2).when -> result -= 2\n```\n\n----------------------------------------\n\nTITLE: Sending Form Data in Request\nDESCRIPTION: Example of sending form data in an HTTP POST request by setting the content type to 'form'. This is useful for testing form submissions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Send some Form Data\nchai.request(app)\n  .post('/user/me')\n  .type('form')\n  .send({\n    '_method': 'put',\n    'password': '123',\n    'confirmPassword': '123'\n  })\n```\n\n----------------------------------------\n\nTITLE: Alternative Optimization Status Testing\nDESCRIPTION: Additional optimization status tests for 'always-optimised', 'never-optimised', and 'maybe-deoptimised' states that functions might be in.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_v__optimisation.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(fn).optimisation(\"always\");  // always-optimised\nexpect(fn).optimisation(\"never\");   // never-optimised\nexpect(fn).optimisation(\"maybe\");   // maybe-deoptimised\n```\n\n----------------------------------------\n\nTITLE: Using Sinon.JS basic assertions\nDESCRIPTION: Example of using Sinon.JS's built-in assertions to verify a spy was called with a specific argument.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_es.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsinon.assert.calledWith(mySpy, \"foo\");\n```\n\n----------------------------------------\n\nTITLE: Testing Active State of Observable with chai-kefir\nDESCRIPTION: Example showing how to assert that a Kefir Observable is active.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_kefir.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(obs).to.be.an.active.observable();\n```\n\n----------------------------------------\n\nTITLE: Using .param Assertion with Chai HTTP\nDESCRIPTION: Examples of asserting that a Request object has query string parameters. This allows verification of parameter existence and optionally checking parameter values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/natanavra_chai_http.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(req).to.have.param('orderby');\nexpect(req).to.have.param('orderby', 'date');\nexpect(req).to.not.have.param('limit');\n```\n\n----------------------------------------\n\nTITLE: Validating HTTP Responses Against OpenAPI Spec in JavaScript with Chai\nDESCRIPTION: Demonstrates how to load an OpenAPI specification from a web endpoint and validate HTTP responses against it using chai-openapi-response-validator. The example uses axios for HTTP requests and Mocha for test structure, showing both the setup process and actual response validation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_openapi_response_validator.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Set up Chai\nimport chai from 'chai';\nconst expect = chai.expect;\n\n// Import this plugin and an HTTP client (e.g. axios)\nimport chaiResponseValidator from 'chai-openapi-response-validator';\nimport axios from 'axios';\n\n// Write your test (e.g. using Mocha)\ndescribe('GET /example/endpoint', () => {\n  // Load your OpenAPI spec from a web endpoint\n  before(async () => {\n    const response = await axios.get('url/to/openapi/spec');\n    const openApiSpec = response.data; // e.g. { openapi: '3.0.0', <etc> };\n    chai.use(chaiResponseValidator(openApiSpec));\n  });\n\n  it('should satisfy OpenAPI spec', async () => {\n    // Get an HTTP response from your server (e.g. using axios)\n    const res = await axios.get('http://localhost:3000/example/endpoint');\n\n    expect(res.status).to.equal(200);\n\n    // Assert that the HTTP response satisfies the OpenAPI spec\n    expect(res).to.satisfyApiSpec;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Maybe-Chai with Chai\nDESCRIPTION: Setup code to integrate maybe-chai plugin with Chai testing framework\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/maybe_chai.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport chai from 'chai'\nimport maybeChai from 'maybe-chai'\n\nchai.use( maybeChai() )\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Iterator Start Sequence\nDESCRIPTION: Examples of asserting deep equality in iteration beginning values using deepIteratesFrom and doesNotDeepIterateFrom assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nassert.deepIteratesFrom([{n: 2}, {n: 3}], [{n: 2}]);\nassert.deepIteratesFrom([[0, 2], [1, 3]], [[0, 2]]);\nassert.doesNotDeepIterateFrom([{n: 2}, {n: 3}], [{n: 5}]);\nassert.doesNotDeepIterateFrom([[0, 2], [1, 3]], [[1, 3]]);\n```\n\n----------------------------------------\n\nTITLE: Accessing the Object Flag in Chai Assertions\nDESCRIPTION: Demonstrates two ways to access the subject of an assertion (stored in the 'object' flag): using utils.flag and the _obj property shortcut.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/plugins.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAssert = new Assertion('Arthur Dent');\nconst obj = flag(myAssert, 'object'); // obj === 'Arthur Dent';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = myAssert._obj; // obj === `Arthur Dent`\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Things via npm\nDESCRIPTION: This command installs the Chai Things plugin using npm (Node Package Manager). It adds the plugin to your project's dependencies.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_things.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-things\n```\n\n----------------------------------------\n\nTITLE: Installing @thiscode/chai-subset\nDESCRIPTION: NPM command to install the @thiscode/chai-subset plugin as a development dependency.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_thiscode_chai_subset.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nnpm install --save-dev @thiscode/chai-subset\n```\n\n----------------------------------------\n\nTITLE: Using focus assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting that a jQuery element has focus using the focus assertion. Uses document.activeElement comparison instead of :focus selector due to WebKit browser compatibility issues.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n$('#focused').should.have.focus();\nexpect($('#nonfocused')).not.have.focus();\n```\n\n----------------------------------------\n\nTITLE: Setting up Sinon-Chai with Node.js\nDESCRIPTION: Instructions for installing and setting up Sinon-Chai in a Node.js environment using npm and require statements.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_es.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require(\"chai\");\nvar sinonChai = require(\"sinon-chai\");\n\nchai.use(sinonChai);\n```\n\n----------------------------------------\n\nTITLE: Handling Responses with Callbacks in Chai HTTP\nDESCRIPTION: Shows how to handle responses from chai-http requests using callbacks, including error handling and assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/natanavra_chai_http.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .put('/user/me')\n  .send({ password: '123', confirmPassword: '123' })\n  .end(function (err, res) {\n     expect(err).to.be.null;\n     expect(res).to.have.status(200);\n  });\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Iterator Start Sequence\nDESCRIPTION: Examples of asserting deep equality in iteration beginning values using deepIteratesFrom and doesNotDeepIterateFrom assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nassert.deepIteratesFrom([{n: 2}, {n: 3}], [{n: 2}]);\nassert.deepIteratesFrom([[0, 2], [1, 3]], [[0, 2]]);\nassert.doesNotDeepIterateFrom([{n: 2}, {n: 3}], [{n: 5}]);\nassert.doesNotDeepIterateFrom([[0, 2], [1, 3]], [[1, 3]]);\n```\n\n----------------------------------------\n\nTITLE: Using focus assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting that a jQuery element has focus using the focus assertion. Uses document.activeElement comparison instead of :focus selector due to WebKit browser compatibility issues.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_21\n\nLANGUAGE: js\nCODE:\n```\n$('#focused').should.have.focus();\nexpect($('#nonfocused')).not.have.focus();\n```\n\n----------------------------------------\n\nTITLE: Defining and Testing Custom Iterable Objects in JavaScript\nDESCRIPTION: Shows how to create a custom iterable object using a class with a Symbol.iterator method, and demonstrates testing it with chai-iterator assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Count {\n\n  constructor(start=0, step=1) {\n    this.start = start;\n    this.step = step;\n  }\n\n  *[Symbol.iterator]() {\n    for (let n = this.start; true; n += this.step) {\n      yield n;\n    }\n  }\n}\n\nlet tens = new Count(10, 10);\n\ntens.should.be.iterable;\ntens.should.iterate.from([10, 20, 30]);\ntens.should.iterate.from([10, 20, 30, 40, 50]);\n```\n\n----------------------------------------\n\nTITLE: Deep Checking Iterator Sequence Mismatch with assert.doesNotDeepIterateOver() in JavaScript\nDESCRIPTION: Shows how to use assert.doesNotDeepIterateOver() to verify that complex objects do not iterate over a specific sequence, using deep equality comparison.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nassert.doesNotDeepIterateOver([{n: 2}, {n: 3}], [{n: 5}, {n: 7}]);\nassert.doesNotDeepIterateOver([[0, 2], [1, 3]], [[1, 3], [0, 2]]);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-deep-match and Chai via npm\nDESCRIPTION: Commands to install the required dependencies (Chai and chai-deep-match) using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_deep_match.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --save chai\n$ npm install --save chai-deep-match\n```\n\n----------------------------------------\n\nTITLE: Setting Default Options for Chai Exec\nDESCRIPTION: Example of setting default options for Chai Exec to avoid repetition in test cases.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exec.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chaiExec = require(\"@jsdevtools/chai-exec\");\nconst chai = require(\"chai\");\n\nchai.use(chaiExec);\n\n// Set some defaults\nchaiExec.defaults = {\n  command: \"my-cli\",\n  args: \"--arg1 --arg2\",\n  options: {\n    cwd: \"/usr/bin\"\n  }\n};\n\ndescribe(\"My CLI\", () => {\n  it(\"should use defaults\", () => {\n    // Run your CLI using defaults + one-time args\n    let myCLI(\"--arg3 --arg4\");\n\n    myCLI.command.should.equal(\"my-cli\");\n    myCLI.args.should.deep.equal([ \"--arg1\", \"--arg2\", \"--arg3\", \"--arg4\" ]);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Example Test Scenario in JavaScript\nDESCRIPTION: Demonstrates a test case where counting assertions would be useful, particularly for checking callback execution.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_assertions_count.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport InstanceGenerator from '../lib/instances-generator';\n\ndescribe('suite #1', () => {\n  it('test #1', () => {\n    class S1T1A {\n      /* Other props and methods are skipped */\n      /**\n       * I'm called after any instance of S1T1A is created\n       */\n      afterCreate(...args) {\n        // I need to check `args` here\n        // chai.expect(args)... \n      }\n    }\n    InstanceGenerator.create(S1T1A, 3); // create 3 instances of S1T1A\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing chai-by-proxy with npm\nDESCRIPTION: Command to install the chai-by-proxy plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_by_proxy.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-dev chai-by-proxy\n```\n\n----------------------------------------\n\nTITLE: Defining and Testing Custom Iterable Objects in JavaScript\nDESCRIPTION: Shows how to create a custom iterable object using a class with a Symbol.iterator method, and demonstrates testing it with chai-iterator assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Count {\n\n  constructor(start=0, step=1) {\n    this.start = start;\n    this.step = step;\n  }\n\n  *[Symbol.iterator]() {\n    for (let n = this.start; true; n += this.step) {\n      yield n;\n    }\n  }\n}\n\nlet tens = new Count(10, 10);\n\ntens.should.be.iterable;\ntens.should.iterate.from([10, 20, 30]);\ntens.should.iterate.from([10, 20, 30, 40, 50]);\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin with TypeScript Support\nDESCRIPTION: Shows different methods to install the plugin with Chai, including TypeScript-friendly installation\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype_extra.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst chai = ChaiPluginAssertType.install();\n\nconst chai = ChaiPluginAssertType.install(require('chai'));\n\nconst chai = require('chai-asserttype-extra').install()\n\nconst chai = require('chai');\nchai.use(ChaiPluginAssertType);\n\nconst chai = require('chai');\nchai.use(ChaiPluginAssertType);\n```\n\n----------------------------------------\n\nTITLE: Testing Iterator Length Range\nDESCRIPTION: Examples of asserting that an iterable yields between min and max values using the iterate.for.length.within assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([2, 3, 5]).to.iterate.for.length.within(2, 4);\nexpect([2, 3, 5]).to.iterate.for.length.within(3, 3);\nexpect([2, 3, 5]).not.to.iterate.for.length.within(4, 7);\n```\n\n----------------------------------------\n\nTITLE: Installing dirty-chai plugin with npm\nDESCRIPTION: Command to install the dirty-chai plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dirty-chai --save-dev\n```\n\n----------------------------------------\n\nTITLE: Attribute Assertion in Chai WebDriver\nDESCRIPTION: Tests an element's attribute value or presence. Can check for exact value or just existence.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(selector).dom.to.have.attribute('attribute', 'value')\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Called Exact Number of Times in Chai\nDESCRIPTION: Demonstrates how to assert that a spy has been called exactly n times, using both positive and negative assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.exactly(3);\nexpect(spy).to.not.have.been.called.exactly(3);\nspy.should.have.been.called.exactly(3);\nspy.should.not.have.been.called.exactly(3);\n```\n\n----------------------------------------\n\nTITLE: Testing Iterator Length Range\nDESCRIPTION: Examples of asserting that an iterable yields between min and max values using the iterate.for.length.within assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_iterator.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([2, 3, 5]).to.iterate.for.length.within(2, 4);\nexpect([2, 3, 5]).to.iterate.for.length.within(3, 3);\nexpect([2, 3, 5]).not.to.iterate.for.length.within(4, 7);\n```\n\n----------------------------------------\n\nTITLE: Creating Null Object from Scratch\nDESCRIPTION: Example of building a null object with custom methods using chai-null\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-null.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar nullobject = chai.Null().method('foo').method('bar').create();\n```\n\n----------------------------------------\n\nTITLE: Creating Null Object from Scratch\nDESCRIPTION: Example of building a null object with custom methods using chai-null\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-null.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar nullobject = chai.Null().method('foo').method('bar').create();\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Counting Plugin with npm\nDESCRIPTION: Command to install the Chai Counting plugin using npm package manager. This step is required before using the plugin in your project.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_counting.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install chai-counting\n```\n\n----------------------------------------\n\nTITLE: Installing chai-exclude with npm and yarn\nDESCRIPTION: Commands for installing the chai-exclude package as a development dependency using npm or yarn package managers.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exclude.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-exclude --save-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add chai-exclude --dev\n```\n\n----------------------------------------\n\nTITLE: Loading and Initializing chai-colors Plugin in JavaScript\nDESCRIPTION: Shows how to require and use the chai-colors plugin with Chai.js. This code snippet demonstrates the necessary setup to make color assertions available in your tests.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_colors.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai')\n  , chaiColors = require('chai-colors');\n\nchai.use(chaiColors);\n```\n\n----------------------------------------\n\nTITLE: Setting up chai-asserttype plugin\nDESCRIPTION: Code to import and configure the chai-asserttype plugin with Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_asserttype.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst asserttype = require('chai-asserttype');\nchai.use(asserttype);\n```\n\n----------------------------------------\n\nTITLE: Chai-Rx Language Chains Example\nDESCRIPTION: Demonstrates using chai language chains (specifically 'not') with chai-rx assertions for negative testing scenarios.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rx.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst const xs = scheduler.createHotObservable(onNext(250));\nconst output = scheduler.startScheduler(() => xs);\n\n// with `not`\nexpect(output).to.not.emit([\n  onNext(300)\n]);\n```\n\n----------------------------------------\n\nTITLE: Asserting Iterator Length with iterate.for.length.below() in JavaScript\nDESCRIPTION: Demonstrates how to use the iterate.for.length.below() assertion to check if an iterable yields fewer than n values. Works with both arrays and strings.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([2, 3, 5]).to.iterate.for.length.below(4);\nexpect('abcdefg').to.iterate.for.length.below(10);\nexpect([2, 3, 5]).not.to.iterate.for.length.below(3);\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Plugin package name reference using markdown code formatting\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_chai_stuff_same_props.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@chai-stuff/same-props`\n```\n\n----------------------------------------\n\nTITLE: Using .sum assertion\nDESCRIPTION: Examples of using the .sum assertion to compare the sum of an array of numbers.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([ 1, 2, 3 ]).to.have.sum.equal(6);\nexpect([ 1, 2, 3 ]).to.have.sum.above(5);\nexpect([ 1, 2, 3 ]).to.have.sum.below(7);\n```\n\n----------------------------------------\n\nTITLE: Asserting Response Redirection in Chai HTTP\nDESCRIPTION: Demonstrates how to use the .redirectTo assertion to check if a Response object redirects to a specific URL or matches a regular expression pattern.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(res).to.redirectTo('http://example.com');\nexpect(res).to.redirectTo(/^\\/search\\/results\\?orderBy=desc$/);\n```\n\n----------------------------------------\n\nTITLE: Asserting Iterator Length with iterate.for.length.of.at.most() in JavaScript\nDESCRIPTION: Demonstrates how to use the iterate.for.length.of.at.most() assertion to check if an iterable yields at most n values. Tests various conditions with arrays.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([2, 3, 5]).to.iterate.for.length.of.at.most(4);\nexpect([2, 3, 5]).to.iterate.for.length.of.at.most(3);\nexpect([2, 3, 5]).not.to.iterate.for.length.of.at.most(2);\n```\n\n----------------------------------------\n\nTITLE: Using .change Assertion in Chai\nDESCRIPTION: Demonstrates various ways to use the .change assertion provided by the chai-change plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_change.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 0;\n\nexpect(() => { x += 1; }).to.alter(() => x);\nexpect(() => {         }).not.to.alter(() => x);\n\nexpect(() => { x += 1 }).to.alter(() => x, { by: 1 });\nexpect(() => { x += 1 }).to.alter(() => x, { from: x });\nexpect(() => { x += 1 }).to.alter(() => x, { from: x, to: x + 1 });\nexpect(() => { x += 1 }).to.alter(() => x, { to: x + 1 });\n```\n\n----------------------------------------\n\nTITLE: Using .sum assertion\nDESCRIPTION: Examples of using the .sum assertion to compare the sum of an array of numbers.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([ 1, 2, 3 ]).to.have.sum.equal(6);\nexpect([ 1, 2, 3 ]).to.have.sum.above(5);\nexpect([ 1, 2, 3 ]).to.have.sum.below(7);\n```\n\n----------------------------------------\n\nTITLE: Comparing Lists of Objects by ID in JavaScript\nDESCRIPTION: Demonstrates how to use ChaId to compare arrays of objects based on their IDs. Includes examples of ordered and unordered comparisons.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chaid.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[{id:'a'}, {id:'b'}].should.have.ids ['a', 'b']\n['a', 'b'].should.be.ids ['a', 'b']\n[{id:'a'}, {id:'b'}].should.have.same.ids [{id:'a'}, {id:'b'}]\n[{id:'a'}, {id:'b'}].should.not.have.same.ids [{id:'b'}, {id:'a'}]\n```\n\n----------------------------------------\n\nTITLE: Checking Iterator Sequence Prefix Mismatch with assert.doesNotIterateFrom() in JavaScript\nDESCRIPTION: Shows how to use assert.doesNotIterateFrom() to verify that an iterable does not begin with a specific sequence of values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nassert.doesNotIterateFrom([2, 3, 5], [3, 5]);\nassert.doesNotIterateFrom('abcdefg', 'cdef');\n```\n\n----------------------------------------\n\nTITLE: Using .change Assertion in Chai\nDESCRIPTION: Demonstrates various ways to use the .change assertion provided by the chai-change plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_change.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 0;\n\nexpect(() => { x += 1; }).to.alter(() => x);\nexpect(() => {         }).not.to.alter(() => x);\n\nexpect(() => { x += 1 }).to.alter(() => x, { by: 1 });\nexpect(() => { x += 1 }).to.alter(() => x, { from: x });\nexpect(() => { x += 1 }).to.alter(() => x, { from: x, to: x + 1 });\nexpect(() => { x += 1 }).to.alter(() => x, { to: x + 1 });\n```\n\n----------------------------------------\n\nTITLE: Using css assertion with jQuery elements\nDESCRIPTION: Demonstrates assertion of CSS properties on jQuery elements. Checks for property existence or specific computed values and supports chaining with regex matching.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n$('#header').should.have.css('background');\nexpect($('body')).to.have.css('background-color', 'rgb(0, 0, 0)');\nexpect($('body')).to.have.css('font-family').match(/sans-serif/);\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Always Called With Exact Arguments in Chai\nDESCRIPTION: Demonstrates how to verify that a spy has always been called with exactly the same arguments, no more and no less.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nspy('foo');\nspy('foo');\nexpect(spy).to.have.been.called.always.with.exactly('foo');\nspy.should.have.been.called.always.with.exactly('foo');\n```\n\n----------------------------------------\n\nTITLE: Using Different Iterables for Expected Values\nDESCRIPTION: Example showing that any iterable can be used as expected values in assertions, not just arrays.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'abcde'.should.iterate.until('cde');\n```\n\n----------------------------------------\n\nTITLE: Requiring chai-exclude with CommonJS\nDESCRIPTION: Example showing how to require the chai-exclude plugin and configure it with Chai using CommonJS syntax.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_exclude.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\nconst chaiExclude = require('chai-exclude');\n\nchai.use(chaiExclude);\n```\n\n----------------------------------------\n\nTITLE: Using css assertion with jQuery elements\nDESCRIPTION: Demonstrates assertion of CSS properties on jQuery elements. Checks for property existence or specific computed values and supports chaining with regex matching.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n$('#header').should.have.css('background');\nexpect($('body')).to.have.css('background-color', 'rgb(0, 0, 0)');\nexpect($('body')).to.have.css('font-family').match(/sans-serif/);\n```\n\n----------------------------------------\n\nTITLE: Chaining .yield with Other Assertions in chai-generator\nDESCRIPTION: Demonstrates how to chain the .yield assertion with other Chai assertions for more complex checks.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_generator.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(generator).to.yield().and.equal(1)\ngenerator.should.yield().and.equal(1)\n```\n\n----------------------------------------\n\nTITLE: Deep Checking Iterator Suffix Mismatch with assert.doesNotDeepIterateUntil() in JavaScript\nDESCRIPTION: Shows how to use assert.doesNotDeepIterateUntil() to verify that an iterable does not end with a specific sequence, using deep equality for complex objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nassert.doesNotDeepIterateUntil([{n: 2}, {n: 3}], [{n: 5}]);\nassert.doesNotDeepIterateUntil([[0, 2], [1, 3]], [[0, 2]]);\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter block defining the page layout, permalink URL, and plugin name for the documentation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stuff.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: plugin\npermalink: plugins/chai-stuff/\npluginName: chai-stuff\n---\n```\n\n----------------------------------------\n\nTITLE: Asserting a Spy Was Called at Least N Times\nDESCRIPTION: Demonstrates how to assert that a spy was called at least n times, using both min and at.least syntaxes.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.have.been.called.min(3);\nexpect(spy).to.not.have.been.called.at.least(3);\nspy.should.have.been.called.at.least(3);\nspy.should.not.have.been.called.min(3);\n```\n\n----------------------------------------\n\nTITLE: Using the .return Assertion with chai-generator in JavaScript\nDESCRIPTION: Shows various ways to use the .return assertion provided by chai-generator, including negation, chaining, and different assertion styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_generator.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(generator).to.return()\nexpect(generator).to.return(1)\nexpect(generator).not.to.return('missing')\nexpect(generator.next(10)).to.return(10)\n\ngenerator.should.return()\ngenerator.should.return(1)\ngenerator.should.not.return('missing')\ngenerator.next(10).should.return(10)\n\nassert.return(generator)\nassert.return(generator, 1)\nassert.notReturn(generator, 'missing')\nassert.return(generator.next(10), 10)\n```\n\n----------------------------------------\n\nTITLE: Using chai-graphql assertions\nDESCRIPTION: Comprehensive examples showing various assertion patterns using chai-graphql including successful and failing test cases\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_graphql.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar goodResponse = {\n  data: {\n    foo: 'bar'\n  }\n}\n\n// Passes\nassert.graphQL(goodResponse, { foo: 'bar' })\nassert.graphQLSubset(goodResponse, { foo: 'bar' })\nassert.graphQL(goodResponse)\nassert.graphQLSubset(goodResponse)\nassert.graphQLSubset(goodResponse, { })\nassert.notGraphQLError(goodResponse)\nexpect(goodResponse).to.be.graphQl({ foo: 'bar' })\n\n// Fails\nassert.graphQL(goodResponse, { foo: 'FAIL' })\nassert.graphQL(goodResponse, { })\nassert.graphQLError(goodResponse)\nexpect(goodResponse).to.be.graphQLError()\n\nconst badResponse = {\n  errors: [\n    {\n      message: 'Error message',\n      stack: 'Prints if present'\n    },\n    new GraphQLError('GraphQL Error Object'),\n    new Error('Regular Error')\n  ]\n}\n\n// Passes\nassert.graphQLError(badResponse)\nexpect(badResponse).to.be.graphQLError()\n\nassert.graphQLError(badResponse, 'Error message')\nassert.graphQLError(badResponse, /GraphQL Error Object/)\nassert.graphQLError(badResponse, [\n  'Error message',\n  /GraphQL Error Object/\n])\n\n// fails\nassert.graphQL(badResponse, { foo: 'bar' })\nassert.graphQL(badResponse)\nassert.notGraphQLError(badResponse)\nexpect(badResponse).to.be.graphQl({ foo: 'bar' })\nassert.graphQLError(badResponse, 'Rando Error')\nassert.graphQLError(badResponse, [ 'Error message' ])\n```\n\n----------------------------------------\n\nTITLE: Attaching File in HTTP Request\nDESCRIPTION: Example of attaching a file in an HTTP POST request using Chai HTTP.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .post('/user/avatar')\n  .attach('imageField', fs.readFileSync('avatar.png'), 'avatar.png')\n```\n\n----------------------------------------\n\nTITLE: Using @thiscode/chai-subset with should Interface and Arrays\nDESCRIPTION: Shows how to use the containSubset assertion with the should interface and arrays, including examples of passing and failing assertions with the corresponding error messages.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_thiscode_chai_subset.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar list = [{a: 'a', b: 'b'}, {v: 'f', d: {z: 'g'}}];\n\nlist.should.containSubset([{a:'a'}]); //Assertion error is not thrown\nlist.should.containSubset([{a:'a',  b: 'b'}]); //Assertion error is not thrown\n\nlist.should.containSubset([{a:'a', b: 'bd'}]); \n/*throws\nAssertionError: expected\n[\n    {\n        \"a\": \"a\",\n        \"b\": \"b\"\n    },\n    {\n        \"v\": \"f\",\n        \"d\": {\n            \"z\": \"g\"\n        }\n    }\n]\nto contain subset \n[ { a: 'a', b: 'bd' } ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Including Chai Spies in Browser\nDESCRIPTION: Shows how to include the chai-spies.js script in an HTML file after including chai.js.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-spies.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<script src=\"chai-spies.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Usage with Promises in chai-change\nDESCRIPTION: Shows how to use chai-change with asynchronous operations using promises.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_change.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"creates a user\", () => {\n  let count = 0;\n  const User = {\n    create(attrs) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          count += 1\n          resolve();\n        });\n      });\n    },\n    count() {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(count);\n        });\n      });\n    },\n  };\n\n  // when `changer` or `changeWatcher` returns a promise the expectation will return a promise as well\n  return expect(() => (\n    User.create({name: \"bob\"});\n  )).to.alter(() => (\n    User.count();\n  ),{\n    by: 1,\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Chai WebDriver Setup with Selenium\nDESCRIPTION: Complete setup example showing how to initialize chai-webdriver-promised with a Selenium WebDriver instance and configure timeout and polling interval.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// Start with a webdriver instance:\nvar sw = require('selenium-webdriver');\nvar driver = new sw.Builder()\n  .withCapabilities(sw.Capabilities.chrome())\n  .build()\n\n//optional timeout in ms to use with eventually (defaults to 1000)\nvar timeout = 15000;\n//optional interval in ms to use when polling (defaults to 200)\nvar interval = 100;\n\n// And then...\nvar chai = require('chai');\nvar chaiWebdriver = require('chai-webdriver-promised');\nchai.use(chaiWebdriver(driver, timeout, interval));\n\n// And you're good to go!\nchai.describe('kitty test', function() {\n  chai.before(function(done) {\n    driver.get('http://github.com').then(done);\n  });\n  it('should not find a kitty', function() {\n    return chai.expect('#site-container h1.heading').dom.to.not.contain.text(\"I'm a kitty!\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting File Deep Equality in Chai-FS\nDESCRIPTION: Demonstrates how to assert that both paths exist, are files, contain the same content, and have the same attributes (owner, group, creation time, modification time, and change time).\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).and.deep.equal(otherPath, ?msg);\nexpect(path).to.be.a.file(?msg).and.not.deep.equal(otherPath, ?msg);\n\npath.should.be.a.file(?msg).and.deep.equal(otherPath, ?msg);\npath.should.be.a.file(?msg).and.not.deep.equal(otherPath, ?msg);\n\nassert.fileDeepEqual(path, otherPath, ?msg);\nassert.notFileDeepEqual(path, otherPath, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-stats via npm\nDESCRIPTION: Command to install the chai-stats plugin through npm package manager\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-stats.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-stats\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages with chai-parentheses\nDESCRIPTION: Examples demonstrating how to include custom error messages in assertions\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_parentheses.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(true).to.be.true.and.not.false('Reason: Paradox');\nexpect(true).to.be.true('The fabric of logic has torn').and.not.false();\n```\n\n----------------------------------------\n\nTITLE: Basic Chai Assertion Examples\nDESCRIPTION: Demonstrates awkward usage of Chai's should/expect interfaces with Sinon spy properties.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_cypress_sinon_chai.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmySpy.calledWith(\"foo\").should.be.ok;\nexpect(mySpy.calledWith(\"foo\")).to.be.ok;\n```\n\n----------------------------------------\n\nTITLE: Asserting File Deep Equality in Chai-FS\nDESCRIPTION: Demonstrates how to assert that both paths exist, are files, contain the same content, and have the same attributes (owner, group, creation time, modification time, and change time).\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fs.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg).and.deep.equal(otherPath, ?msg);\nexpect(path).to.be.a.file(?msg).and.not.deep.equal(otherPath, ?msg);\n\npath.should.be.a.file(?msg).and.deep.equal(otherPath, ?msg);\npath.should.be.a.file(?msg).and.not.deep.equal(otherPath, ?msg);\n\nassert.fileDeepEqual(path, otherPath, ?msg);\nassert.notFileDeepEqual(path, otherPath, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Loading chai-json-schema in Node.js\nDESCRIPTION: Code to load the chai-json-schema plugin in a Node.js environment, making the jsonSchema assertion available in Chai.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-json-schema.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-json-schema'));\n```\n\n----------------------------------------\n\nTITLE: Configuring custom tolerance\nDESCRIPTION: Example showing how to initialize chai-almost with a custom tolerance value of 0.1\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_almost.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchai.use(chaiAlmost(0.1));\n```\n\n----------------------------------------\n\nTITLE: Installing chai-withintoleranceof plugin via npm\nDESCRIPTION: Command to install the chai-withintoleranceof plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_withintoleranceof.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev chai-withintoleranceof\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages with Expect in Chai.js\nDESCRIPTION: Demonstrates how to include custom error messages in expect-style assertions for better error reporting.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/styles.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst answer = 43;\n\n// AssertionError: expected 43 to equal 42.\nexpect(answer).to.equal(42);\n\n// AssertionError: topic [answer]: expected 43 to equal 42.\nexpect(answer, 'topic [answer]').to.equal(42);\n```\n\n----------------------------------------\n\nTITLE: Including chai-jquery in HTML files\nDESCRIPTION: Script tags for including jQuery, Chai, and chai-jquery in your test file. The order of jQuery and Chai scripts doesn't matter, but chai-jquery must come after both.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"jquery.js\"></script>\n<script src=\"chai.js\"></script>\n<script src=\"chai-jquery.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using chai-param for Method Parameter Validation\nDESCRIPTION: Example function demonstrating how to use chai-param to validate method parameters. It shows both 'should' and 'expect' syntaxes for parameter validation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_param.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction register(user, pass) {\n\t// using should\n\tparam(user, 'user', 'UsersCtl.register').should.not.be.empty;\n\t\n\t// or using expect\n\texpect(user).param('user', 'UsersCtl.register')\n\t\t.to.have.length.above(5)\n\t\t.and.below(16);\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional property-based assertions in Chai\nDESCRIPTION: Example demonstrating the traditional property-based assertions in Chai that dirty-chai aims to improve.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(true).to.be.true;\nfoo.should.be.ok;\n```\n\n----------------------------------------\n\nTITLE: Using toEmit with Kefir.Property assertions\nDESCRIPTION: Example of using toEmit() with a Kefir.Property, showing how to mark a value as current using the options object.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsend(obs, [value(1)])\nsend(obs, [value(2)])\nexpect(obs).to.emit([value(2, {current: true}), end()], () => {\n  send(obs, [end()])\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Instance in JavaScript\nDESCRIPTION: Demonstrates how to create an instance of the Model class and set/get attributes.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/helpers.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst arthur = new Model('person');\narthur.set('name', 'Arthur Dent');\narthur.set('occupation', 'traveller');\nconsole.log(arthur.get('name')); // Arthur Dent\n```\n\n----------------------------------------\n\nTITLE: Using chai-withintoleranceof plugin for number assertions in JavaScript\nDESCRIPTION: Demonstrates how to use the chai-withintoleranceof plugin to assert that numbers are within specified tolerance ranges. It includes examples for single and asymmetric tolerances, positive and negative numbers, and array length assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_withintoleranceof.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar expect = chai.expect;\n\nchai.use(require('chai-withintoleranceof'));\n\n// check that 515 is within tolerance of 500 +/- 5% (475 .. 525)\nexpect(515).to.be.withinToleranceOf(500, 0.05);\n\n// check that 786 is within tolerance of 1000 +30% / -70% (300 .. 1300)\nexpect(786).to.be.withinToleranceOf(1000, [+0.3, -0.7]);\nexpect(786).to.be.withinToleranceOf(1000, [-0.7, +0.3]);\n\n// check that 400 is within tolerance of 350 +15% (350 .. 402.5)\nexpect(400).to.be.withinToleranceOf(350, [+0.15]);\n\n// check that 500 is within tolerance of 555 -37% (349.65 .. 555)\nexpect(500).to.be.withinToleranceOf(555, [-0.37]);\n\n// check that -645 is within tolerance of -1000 +30% / -70% (-1300 .. -300)\nexpect(-645).to.be.withinToleranceOf(-1000, [+0.3, -0.7]);\nexpect(-645).to.be.withinToleranceOf(-1000, [-0.7, +0.3]);\n\n// Can also be used in conjunction with `length`\n// check that the length of 'foo' is within tolerance of 2 +/- 50% (1 .. 3)\nexpect('foo').to.have.length.withinToleranceOf(2, 0.5);\n\n// check that the length of the array is within tolerance of\n// 2 +50% / -40% (1.2 .. 3)\nexpect([ 1, 2, 3 ]).to.have.length.withinToleranceOf(2, [+0.5, -0.4]);\n\n// There is also an abbreviated form\nexpect(786).to.be.withinTolOf(1000, [+0.3, -0.7]);\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation on MacOS\nDESCRIPTION: Commands to verify Node.js and npm versions after installation.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/README.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ node -v\n11.1.0\n$ npm -v\n6.4.1\n```\n\n----------------------------------------\n\nTITLE: Using Promises with When in CoffeeScript\nDESCRIPTION: Shows how to use chai-changes with promises, including the notify option for integration with testing frameworks like Mocha.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_changes.md#2025-04-09_snippet_2\n\nLANGUAGE: coffeescript\nCODE:\n```\nexpect(-> value).to.change.when(\n  -> promise\n  notify: done\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Dependencies using Make\nDESCRIPTION: Initial setup commands to install and run the Chai.js documentation website locally.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ make install\n$ make\n```\n\n----------------------------------------\n\nTITLE: Using chai-postman plugin with Chai and Postman SDK\nDESCRIPTION: JavaScript code demonstrating how to set up and use the chai-postman plugin with Chai assertions and the Postman SDK. It includes creating request and response instances and performing assertions on them.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_postman.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar _ = require('lodash'),\n    chai = require('chai'),\n    sdk = require('postman-collection'),\n    chaiPostman = require('chai-postman'),\n\n    req,\n    res,\n    expect = chai.expect;\n\nchai.use(chaiPostman(sdk, _));\n\n// create postman-collection request and response instances\nreq = new sdk.Request({\n    header: [{\n        key: 'Content-Type',\n        value: 'application/json; charset=utf-8'\n    }]\n});\nres = new sdk.Response({ code: 200 });\n\n// request assertions\nexpect(req).to.be.a.postmanRequest;\nexpect(req).to.have.header('Content-Type'); // an optional second argument can also be provided to assert value\n\n// response assertions\nexpect(res).to.be.a.postmanResponse;\nexpect(res).to.have.statusCode(200);\n```\n\n----------------------------------------\n\nTITLE: Function-style assertions with dirty-chai\nDESCRIPTION: Example showing the clearer function-call form that dirty-chai provides for assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(true).to.be.true();\nfoo.should.be.ok();\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Method Assertion to Chai\nDESCRIPTION: Demonstrates how to add a custom 'model' method assertion to Chai that checks both instance type and model type.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/helpers.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nAssertion.addMethod('model', function (type) {\n  const obj = this._obj;\n\n  // first, our instanceof check, shortcut\n  new Assertion(this._obj).to.be.instanceof(Model);\n\n  // second, our type check\n  this.assert(\n      obj._type === type\n    , \"expected #{this} to be of type #{exp} but got #{act}\"\n    , \"expected #{this} to not be of type #{act}\"\n    , type        // expected\n    , obj._type   // actual\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using the 'requestedWithHeadersMatch' Assertion with chai-nock in JavaScript\nDESCRIPTION: Example of using the 'requestedWithHeadersMatch' assertion to verify that a request has been made with headers that at least contain the specified key/value pairs.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_nock.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit('requestedWithHeadersMatch', () => {\n  const requestNock = nock('http://bbc.co.uk')\n    .get('/')\n    .reply(200);\n\n  request({\n    json: true,\n    uri: 'http://bbc.co.uk',\n    headers: {\n      myHeader: 'myHeaderValue',\n      otherHeader: 'otherHeaderValue'\n    }\n  });\n\n  return expect(requestNock).to.have.been.requestedWithHeadersMatch({\n    myHeader: 'myHeaderValue'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using the 'requestedWithHeadersMatch' Assertion with chai-nock in JavaScript\nDESCRIPTION: Example of using the 'requestedWithHeadersMatch' assertion to verify that a request has been made with headers that at least contain the specified key/value pairs.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_nock.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit('requestedWithHeadersMatch', () => {\n  const requestNock = nock('http://bbc.co.uk')\n    .get('/')\n    .reply(200);\n\n  request({\n    json: true,\n    uri: 'http://bbc.co.uk',\n    headers: {\n      myHeader: 'myHeaderValue',\n      otherHeader: 'otherHeaderValue'\n    }\n  });\n\n  return expect(requestNock).to.have.been.requestedWithHeadersMatch({\n    myHeader: 'myHeaderValue'\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian Linux\nDESCRIPTION: Command to install Git, Node.js, and Ruby on Debian-based Linux distributions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get install -y git nodejs ruby\n```\n\n----------------------------------------\n\nTITLE: Installing Chai-Rx via NPM\nDESCRIPTION: Shows the NPM command to install the chai-rx plugin.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_rx.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install chai-rx\n```\n\n----------------------------------------\n\nTITLE: Checking Text Content with Chai-DOM in JavaScript\nDESCRIPTION: Shows how to use chai-dom to assert the text content of DOM elements. It includes examples for single elements, node lists, and various text matching options.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_dom.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('.name').should.have.text('John Doe')\nexpect(document.querySelector('#title')).to.have.text('Chai Tea')\ndocument.querySelectorAll('ul li').should.have.text('JohnJaneJessie')\ndocument.querySelector('h1').should.have.trimmed.text('chai-tests')\nexpect(document.querySelector('article')).to.have.rendered.text('Chai Tea is great')\n\ndocument.querySelector('.name').should.contain.text('John')\nexpect(document.querySelector('#title')).to.contain.text('Chai')\ndocument.querySelectorAll('ul li').should.contain.text('Jane')\n```\n\n----------------------------------------\n\nTITLE: Displaying npm Version Badge in Markdown\nDESCRIPTION: This code snippet shows how to embed an npm version badge in a markdown file. It uses a shield.io badge to dynamically display the current version of the @faltest/chai package on npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_faltest_chai.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![npm version](https://badge.fury.io/js/%40faltest%2Fchai.svg)](https://badge.fury.io/js/%40faltest%2Fchai)\n```\n\n----------------------------------------\n\nTITLE: Using 'without' for Negation\nDESCRIPTION: Example showing how to use 'without' to negate assertions in the chain.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_by_proxy.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nobj = { foo: {} }\n\nobj.should.have.foo.without.bar\n```\n\n----------------------------------------\n\nTITLE: Asserting a Spy Object\nDESCRIPTION: Shows how to assert that an object is a spy using both expect and should styles.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(spy).to.be.spy;\nspy.should.be.spy;\n```\n\n----------------------------------------\n\nTITLE: Using Almost Equal Assertion\nDESCRIPTION: Examples of using the almost.equal assertion to compare numbers within a specified precision\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_stats_jamestalmage.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(3.1415).to.almost.equal(3.14159, 3);\nassert.almostEqual(3.1416, 3.14159, 3, 'these numbers are almost equal');\n```\n\n----------------------------------------\n\nTITLE: TypeScript Setup and Usage\nDESCRIPTION: Example showing how to import and configure Chai Smoothie with TypeScript\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_smoothie.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport chai = require('chai');\nchai.use(require('chai-smoothie'));\nconst expect = chai.expect;\n\nexpect(element(by.css('h1'))).to.be.present;\n```\n\n----------------------------------------\n\nTITLE: Installing Chai Quantifiers\nDESCRIPTION: npm command to install chai and chai-quantifiers as development dependencies\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_quantifiers.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev chai chai-quantifiers\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Use Guard Pattern\nDESCRIPTION: Shows how to protect against multiple plugin initializations using a flag variable, ensuring plugin methods are only applied once.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/index.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as chai from 'chai';\n\nlet overwritten = false;\n\nfunction somePlugin(base) {\n  if (!overwritten) {\n    base.util.overwriteMethod(base.Assertion.prototype, \"equal\", function (_super) {\n      return function(...args) {\n        console.log(\"Called!\"); // log something out\n\n        return _super.call(this, ...args);\n      };\n    });\n    overwritten = true;\n  }\n}\n\nchai.use(somePlugin);\nchai.use(somePlugin);\n\nchai.expect(123).to.equal(123); // Logs `Called!` only once\n```\n\n----------------------------------------\n\nTITLE: Using Sinon-Chai with AMD module loader\nDESCRIPTION: Example of loading Sinon-Chai as an AMD module with a module loader like RequireJS, mapping to the appropriate module IDs.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai_es.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(function (require, exports, module) {\n    var chai = require(\"chai\");\n    var sinonChai = require(\"sinon-chai\");\n\n    chai.use(sinonChai);\n});\n```\n\n----------------------------------------\n\nTITLE: Chai as Promised Assert Interface Examples in JavaScript\nDESCRIPTION: Demonstrates how to use Chai as Promised with the assert interface, including promise-specific extensions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_jridgewell_chai_as_promised_es_.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn assert.eventually.equal(Promise.resolve(2 + 2), 4, \"This had better be true, eventually\");\n\nreturn assert.isFulfilled(promise, \"optional message\");\n\nreturn assert.becomes(promise, \"foo\", \"optional message\");\nreturn assert.doesNotBecome(promise, \"foo\", \"optional message\");\n\nreturn assert.isRejected(promise, Error, \"optional message\");\nreturn assert.isRejected(promise, /error message regex matcher/, \"optional message\");\nreturn assert.isRejected(promise, \"substring to search error message for\", \"optional message\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Model Class in JavaScript\nDESCRIPTION: Defines a basic Model class with a type and arbitrary attributes. Includes methods for setting and getting attribute values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/_guides/helpers.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * # Model\n *\n * A constructor for a simple data model\n * object. Has a `type` and contains arbitrary\n * attributes.\n *\n * @param {String} type\n */\n\nfunction Model (type) {\n  this._type = type;\n  this._attrs = {};\n}\n\n/**\n * .set (key, value)\n *\n * Set an attribute to be stored in this model.\n *\n * @param {String} key\n * @param {Mixted} value\n */\n\nModel.prototype.set = function (key, value) {\n  this._attrs[key] = value;\n};\n\n/**\n * .get (key)\n *\n * Get an attribute that is stored in this model.\n *\n * @param {String} key\n */\n\nModel.prototype.get = function (key) {\n  return this._attrs[key];\n};\n```\n\n----------------------------------------\n\nTITLE: Using .return with .deep Chain in chai-generator\nDESCRIPTION: Demonstrates how to use the .return assertion with the .deep chain for deep equality comparisons.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_generator.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(generator).to.deep.return([1, 2, 3])\ngenerator.should.deep.return([1, 2, 3])\nassert.deepReturn([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Using Date-Only Assertions with Chai-Luxon\nDESCRIPTION: Shows how to use the date-only assertions (sameDate, beforeDate, afterDate) provided by chai-luxon. These are convenience methods for comparing only the date portion of DateTime values, equivalent to using a granularity of 'day'.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_luxon.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst date = DateTime.fromISO('2020-04-21T12:00:00Z');\nconst oneHourLater = date.plus({ hour: 1 });\nconst oneHourEarlier = date.minus({ hour: 1 });\nconst oneDayLater = date.plus({ day: 1 });\nconst oneDayEarlier = date.minus({ day: 1 });\n\n// using should-style assertions\ndate.should.be.sameDate(oneHourLater);\ndate.should.be.beforeDate(oneHourLater); // fails\ndate.should.be.beforeDate(oneDayLater);\ndate.should.be.afterDate(oneHourEarlier); // fails\ndate.should.be.afterDate(oneDayLater);\n\n// using expect-style assertions\nexpect(date).to.be.sameDate(oneHourLater);\nexpect(date).to.be.beforeDate(oneHourLater); // fails\nexpect(date).to.be.beforeDate(oneDayLater);\nexpect(date).to.be.afterDate(oneHourEarlier); // fails\nexpect(date).to.be.afterDate(oneDayLater);\n\n// using tdd assertions\nassert.sameDate(date, oneHourLater);\nassert.beforeDate(date, oneDayLater);\nassert.beforeDate(date, oneHourLater); // fails\nassert.afterDate(oneDayLater, date);\nassert.afterDate(oneDayLater, oneHourLater); // fails\n```\n\n----------------------------------------\n\nTITLE: Using exist assertion with jQuery elements\nDESCRIPTION: Demonstrates asserting that a jQuery selection is not empty using the exist assertion. Overrides Chai's built-in assertion but falls back to it for non-jQuery objects.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_jquery.md#2025-04-09_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n$('#exists').should.exist;\nexpect($('#nonexistent')).not.to.exist;\n```\n\n----------------------------------------\n\nTITLE: Complete Example Using Chai's Should Interface\nDESCRIPTION: Demonstrates a complete test example using Sinon-Chai with Chai's should interface to test a function that takes a callback.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/sinon_chai.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\nvar chai = require(\"chai\");\nvar sinon = require(\"sinon\");\nvar sinonChai = require(\"sinon-chai\");\nchai.should();\nchai.use(sinonChai);\n\nfunction hello(name, cb) {\n    cb(\"hello \" + name);\n}\n\ndescribe(\"hello\", function () {\n    it(\"should call callback with correct greeting\", function () {\n        var cb = sinon.spy();\n\n        hello(\"foo\", cb);\n\n        cb.should.have.been.calledWith(\"hello foo\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Chai IP Plugin\nDESCRIPTION: Command to install the chai-ip plugin via npm package manager.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_ip.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-ip\n```\n\n----------------------------------------\n\nTITLE: Asserting Spy Was Called With Exact Arguments in Chai\nDESCRIPTION: Demonstrates how to check that a spy was called with exactly the specified arguments, no more and no less.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_spies_next.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nspy();\nspy('foo', 'bar');\nexpect(spy).to.have.been.called.with.exactly('foo', 'bar');\nspy.should.have.been.called.with.exactly('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Testing Event Emission with Chai Events Plugin in JavaScript\nDESCRIPTION: This code demonstrates how to use the chai-events plugin to test event emission in Node.js. It shows setup, assertions for emitted and non-emitted events, and configurable timeout options.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_events.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require(\"chai\");\nchai.use(require(\"chai-events\"));\nconst should = chai.should();\nconst EventEmitter = require(\"events\");\n\ndescribe(\"Event Emitting\", function() {\n\n  let emitter = null;\n  beforeEach(function() {\n    emitter = new EventEmitter();\n  });\n\n  it(\"should get emitted events\", function() {\n    let p = emitter.should.emit(\"get\");\n    setTimeout(function() {\n      emitter.emit(\"get\");\n    }, 200);\n    return p;\n  });\n\n  it(\"should handle non-emitted events\", function() {\n    emitter.should.not.emit(\"missing\");\n  });\n\n  it(\"can be configured\", function() {\n    emitter.should.not.emit(\"another missing\", {\n      timeout: 50, // in milliseconds\n    });\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Chai to Use the BigNumber Plugin\nDESCRIPTION: JavaScript code demonstrating how to configure Chai to use the chai-bignumber plugin with either the default BigNumber implementation or a custom one.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_defi_org_chai_bignumber.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\n\n//use default BigNumber\nchai.use(require('chai-bignumber')());\n\n//use custom BigNumber\nchai.use(require('chai-bignumber')(BigNumber));\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of chai-change in JavaScript\nDESCRIPTION: Demonstrates the basic usage of chai-change plugin to assert changes in values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_change.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(() => {\n  users.create();\n}).to.alter(users.count, { by: 1 });\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of chai-change in JavaScript\nDESCRIPTION: Demonstrates the basic usage of chai-change plugin to assert changes in values.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_change.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(() => {\n  users.create();\n}).to.alter(users.count, { by: 1 });\n```\n\n----------------------------------------\n\nTITLE: Overwriting Factory Properties\nDESCRIPTION: Shows how to create factory objects with custom property values that override defaults\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-factories.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nchai.factory('cat', { cute: true, age: 4 });\nvar cat = chai.factory('cat', { cute: false });\n```\n\n----------------------------------------\n\nTITLE: Installing @harrysarson/chai-iterator with npm\nDESCRIPTION: Command to install the fork of chai-iterator that works with chai@4, as the original plugin is no longer maintained.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save chai @harrysarson/chai-iterator\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to HTTP Request\nDESCRIPTION: Example of adding query parameters to an HTTP GET request using Chai HTTP.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_http.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nchai.request(app)\n  .get('/search')\n  .query({name: 'foo', limit: 10}) // /search?name=foo&limit=10\n```\n\n----------------------------------------\n\nTITLE: Installing chai-fetch with npm\nDESCRIPTION: Command to install the chai-fetch plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fetch.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install --save-dev chai-fetch\n```\n\n----------------------------------------\n\nTITLE: Using jsonOf() assertion\nDESCRIPTION: Examples of using the jsonOf() assertion to check if a given JavaScript object is like the JSON-ified expected value. Useful for checking stringification and parsing of an object.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_fuzzy.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar apple = {\n  skin: 'thin'\n  , colors: ['red', 'green', 'yellow']\n  , isFruit: true\n  , picked: new Date()\n};\nvar orange = {\n  skin: 'thin'\n  , colors: ['red', 'green', 'yellow']\n  , isFruit: true\n  , picked: new Date()\n};\n// here appleJSON would be the json result of some process like a JSON api\nvar appleJSON  = JSON.parse(JSON.stringify(apple));\n\nappleJSON.should.be.jsonOf(apple);\nappleJSON.should.not.be.jsonOf(orange);\n\nexpect(appleJSON).to.be.jsonOf(apple);\nexpect(appleJSON).to.not.be.jsonOf(orange);\n\nassert.jsonOf(appleJSON, apple);\nassert.notJsonOf(appleJSON, orange);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-json-schema via Bower\nDESCRIPTION: Command to install the chai-json-schema plugin using Bower for browser-side usage.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bower install chai-json-schema\n```\n\n----------------------------------------\n\nTITLE: Using sameDateTime Assertion with Chai-Luxon\nDESCRIPTION: Demonstrates various ways to use the sameDateTime assertion provided by chai-luxon. It shows how to compare different date formats and use granularity options with should-style, expect-style, and tdd-style assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_luxon.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dateString = '2020-04-21',\n  date = new Date(2020, 3, 21),\n  milliseconds = 1461222000000, // assumes system has PDT timezone\n  obj = { year: 2020, month: 3, day: 21 },\n  luxonDateTime = DateTime.fromISO('2020-04-21'),\n  oneDayLater = DateTime.fromISO('2020-04-22');\n\n// using should-style assertions\ndateString.should.be.sameDateTime(date);\ndateString.should.be.sameDateTime(oneDayLater, 'month');\n\n// using expect-style assertions\nexpect(milliseconds).to.be.sameDateTime(obj);\nexpect(dateString).to.be.sameDateTime(oneDayLater, 'month');\n\n// using tdd assertions\nassert.sameDateTime(luxonDateTime, luxonDateTime);\nassert.sameDateTime(luxonDateTime, oneDayLater, 'month');\nassert.sameDateTime(luxonDateTime, oneDayLater, 'month', 'custom error message');\nassert.sameDateTime(luxonDateTime, oneDayLater, 'custom error message'); // fails\n```\n\n----------------------------------------\n\nTITLE: Basic almost equality assertions\nDESCRIPTION: Examples of shallow equality assertions using the almost matcher with different numerical values\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_almost.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(3.9999999).to.almost.equal(4);\t        // passes\nexpect(3.9).to.almost.equal(4);\t\t\t// fails\nexpect(4.0000001).to.be.almost(4);\t\t// passes\nexpect(4.1).to.not.be.almost(4);\t\t// passes\n```\n\n----------------------------------------\n\nTITLE: Using array assertion in Chai with chai-arrays\nDESCRIPTION: Examples of using the array assertion to check if a value is an array or specific typed array.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_arrays.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([1, 2, 3]).to.be.array();\nexpect('foobar').not.to.be.array();\n\nexpect(new Uint8Array([1])).to.be.Uint8Array();\nexpect(new Uint16Array([1])).to.be.Uint16Array();\nexpect(new Uint32Array([1])).to.be.Uint32Array();\nexpect(new Uint8ClampedArray([1])).to.be.Uint8ClampedArray();\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages with Dirty Chai\nDESCRIPTION: Examples showing how to provide custom error messages with assertions when using dirty-chai. Both mid-chain and end-of-chain examples are demonstrated.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/dirty_chai__.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(true).to.be.true.and.not.false('Reason: Paradox');\nexpect(true).to.be.true('The fabric of logic has torn').and.not.false();\n```\n\n----------------------------------------\n\nTITLE: Customizing Output Promises with transferPromiseness\nDESCRIPTION: Advanced customization of Chai as Promised's output promises by overriding the transferPromiseness function to add additional methods from promise libraries.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_as_promised_compat.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nchaiAsPromised.transferPromiseness = function (assertion, promise) {\n    assertion.then = promise.then.bind(promise); // this is all you get by default\n    assertion.finally = promise.finally.bind(promise);\n    assertion.done = promise.done.bind(promise);\n};\n```\n\n----------------------------------------\n\nTITLE: Using match() assertion with jQuery elements\nDESCRIPTION: Examples of using the match() assertion to check if a jQuery selection matches a given selector using .is(). This overrides Chai's built-in match assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n$('input').should.match('#foo');\nexpect($('#empty')).to.match(':empty');\n```\n\n----------------------------------------\n\nTITLE: Checking Iterator Sequence Suffixes with assert.iteratesUntil() in JavaScript\nDESCRIPTION: Demonstrates how to use assert.iteratesUntil() to check if an iterable ends with a given sequence of values. Tests various suffix lengths including empty suffixes.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_harrysarson_chai_iterator.md#2025-04-09_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nassert.iteratesUntil([2, 3, 5], [2, 3, 5]);\nassert.iteratesUntil([2, 3, 5], [3, 5]);\nassert.iteratesUntil('abcdefg', 'efg');\nassert.iteratesUntil('abcdefg', '');\n```\n\n----------------------------------------\n\nTITLE: Installing chai-parentheses via npm\nDESCRIPTION: Command to install the chai-parentheses plugin as a dev dependency\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_parentheses.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chai-parentheses --save-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication to HTTP Requests\nDESCRIPTION: Examples of adding authentication to HTTP requests using either Basic authentication or Bearer token authentication with chai-http.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Authenticate with Basic authentication\nchai.request(app)\n  .get('/protected')\n  .auth('user', 'pass')\n  \n// Authenticate with Bearer Token\nchai.request(app)\n  .get('/protected')\n  .auth(accessToken, { type: 'bearer' })  \n```\n\n----------------------------------------\n\nTITLE: CSS Selector Examples for Chai WebDriver in JavaScript\nDESCRIPTION: Examples of CSS selectors that can be used with chai-webdriver-promised to target elements for assertions.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_webdriver_promised.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexpect('.list')\nexpect('div > h1')\nexpect('a[href=http://google.com]')\n```\n\n----------------------------------------\n\nTITLE: Installing Jest-Kefir with npm\nDESCRIPTION: Command to install the jest-kefir plugin as a development dependency using npm.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/jest_kefir.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev jest-kefir\n```\n\n----------------------------------------\n\nTITLE: Setting up Chai Subset in CommonJS\nDESCRIPTION: Code for requiring and setting up the chai-subset plugin with Chai in a CommonJS environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_subset.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nvar chaiSubset = require('chai-subset');\nchai.use(chaiSubset);\n```\n\n----------------------------------------\n\nTITLE: Including chai-js-factories via Script Tags\nDESCRIPTION: This HTML snippet shows how to include chai-js-factories in a web page using script tags. It demonstrates the correct order for including Chai, js-factories, and chai-js-factories scripts.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_js_factories.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"chai.js\" encoding=\"utf-8\"></script>\n<script src=\"js-factories.js\" encoding=\"utf-8\"></script>\n<script src=\"chai-js-factories.js\" encoding=\"utf-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using afterDateTime Assertion with Chai-Luxon\nDESCRIPTION: Demonstrates the usage of the afterDateTime assertion provided by chai-luxon. It shows how to compare dates using should-style, expect-style, and tdd-style assertions, including examples with granularity options.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_luxon.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar dateString = '2020-04-21',\n  oneDayLater = '2020-04-22';\n\n// using should-style assertions\noneDayLater.should.be.afterDateTime(luxonDateTime);\noneDayLater.should.be.afterDateTime(luxonDateTime, 'month'); // fails\n\n// using expect-style assertions\nexpect(oneDayLater).to.be.afterDateTime(luxonDateTime);\nexpect(oneDayLater).to.be.afterDateTime(luxonDateTime, 'month'); // fails\n\n// using tdd assertions\nassert.afterDateTime(oneDayLater, luxonDateTime);\nassert.afterDateTime(oneDayLater, luxonDateTime, 'month'); // fails\nassert.afterDateTime(oneDayLater, luxonDateTime, 'month', 'custom error message'); // fails\nassert.afterDateTime(oneDayLater, luxonDateTime, 'custom error message');\n```\n\n----------------------------------------\n\nTITLE: Using exist assertion with jQuery elements\nDESCRIPTION: Examples of using the exist assertion to check if a jQuery selection is not empty. This overrides Chai's built-in exist assertion.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-jquery.md#2025-04-09_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n$('#exists').should.exist;\nexpect($('#nonexistent')).not.to.exist;\n```\n\n----------------------------------------\n\nTITLE: Asserting Paths are Files using Chai\nDESCRIPTION: Examples of asserting that a path exists and is a file using expect/should/assert styles in chai-fs. Uses fs.statSync().isFile() internally to verify the path is a file.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai-fs.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(path).to.be.a.file(?msg);\nexpect(path).to.not.be.a.file(?msg);\n\npath.should.be.a.file(?msg);\npath.should.not.be.a.file(?msg);\n\nassert.isFile(path, ?msg);\nassert.notIsFile(path, ?msg);\n```\n\n----------------------------------------\n\nTITLE: Installing chai-assertions-count via NPM\nDESCRIPTION: Shell commands for installing the plugin using npm or yarn package managers.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_assertions_count.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D chai-assertions-count\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D chai-assertions-count\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Chai with JSON Schema Plugin\nDESCRIPTION: JavaScript code to require and configure Chai to use the JSON Schema plugin in a Node.js environment.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar chai = require('chai');\nchai.use(require('chai-json-schema'));\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Error Validation in tv4\nDESCRIPTION: Setting to use tv4.validateMultiple instead of tv4.validateResult, showing all validation errors at once rather than just the first one.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_json_schema.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nchai.tv4.multiple = true;\n```\n\n----------------------------------------\n\nTITLE: Installing chai-openapi-response-validator with yarn\nDESCRIPTION: Command to install the chai-openapi-response-validator package using yarn as a development dependency.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_openapi_response_validator.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev chai-openapi-response-validator\n```\n\n----------------------------------------\n\nTITLE: Installing chai-change via npm in Node.js\nDESCRIPTION: Shows how to install the chai-change plugin using npm for Node.js environments.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_change.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-change\n```\n\n----------------------------------------\n\nTITLE: Installing chai-change via npm in Node.js\nDESCRIPTION: Shows how to install the chai-change plugin using npm for Node.js environments.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_change.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install chai-change\n```\n\n----------------------------------------\n\nTITLE: Installing chai-match-pattern with npm or yarn\nDESCRIPTION: Commands to install the chai-match-pattern plugin using either npm or yarn package managers.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/chai_match_pattern.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# with npm\nnpm install chai-match-pattern --save-dev\n# or with yarn\nyarn add --dev chai-match-pattern\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to HTTP Request\nDESCRIPTION: Example of adding query parameters to an HTTP GET request using the query method. This creates a URL with the appropriate query string.\nSOURCE: https://github.com/chaijs/chai-docs/blob/master/plugins/_hackmd_chai_http.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Chain some GET query parameters\nchai.request(app)\n  .get('/search')\n  .query({name: 'foo', limit: 10}) // /search?name=foo&limit=10\n```"
  }
]