[
  {
    "owner": "leoafarias",
    "repo": "fvm",
    "content": "TITLE: Installing FVM via Bash Shell Command - Bash\nDESCRIPTION: This snippet provides the Bash shell command to install FVM on Mac and Linux systems. It uses curl to download the official install script and pipes it directly to bash for execution. Prerequisites include curl and bash; ensure you trust the source before piping code to shell as this process executes scripts fetched from the internet. The expected output is a successful installation of FVM on Unix-like systems.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/scripts/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://fvm.app/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Installing FVM via PowerShell Command - PowerShell\nDESCRIPTION: This snippet provides the PowerShell command to install FVM on Windows systems. The command downloads and executes an installation script from the official FVM website using System.Net.WebClient and Invoke-Expression. It requires administrator privileges in PowerShell and an active internet connection. The process installs FVM on the system, with no input parameters needed and outputs status/progress to the console.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/scripts/install.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-Expression (New-Object System.Net.WebClient).DownloadString('https://fvm.app/install.ps1')\n```\n\n----------------------------------------\n\nTITLE: FVM Install Command\nDESCRIPTION: Installs a specified Flutter SDK version to your machine and caches it for future use. Without a version, it installs the version specified in the project's FVM settings. The `--setup` option builds the SDK post-installation.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfvm install [version]\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Version Using FVM (bash)\nDESCRIPTION: This bash snippet uses the `fvm install` command to install a specific Flutter version (1.17.4 in this case) and cache it locally on the machine. It requires the FVM tool to be installed and accessible in the system's PATH. The input is the desired Flutter version, and the output is the installation of the specified version.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/example/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> fvm install 1.17.4\n```\n\n----------------------------------------\n\nTITLE: Setting Project Flutter Version with FVM (bash)\nDESCRIPTION: This bash snippet uses the `fvm use` command to set the project to utilize the previously installed Flutter version (1.17.4 in this example). This assumes that the specified Flutter version has already been installed using `fvm install`. The input is the version to use and the output is the project set to use that version.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/example/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> fvm use 1.17.4\n```\n\n----------------------------------------\n\nTITLE: Setting Global Flutter Version with FVM (Bash)\nDESCRIPTION: This snippet demonstrates the use of the `fvm global` command to set a specific Flutter version as the global default. It allows users to switch between different Flutter channels (e.g., beta, stable) easily.  The command takes the Flutter version or channel as input.  It updates the environment path to use the specified version. The output is the version being used or instructions for configuring the environment path if not set.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/global-configuration.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfvm global {version}\n```\n\n----------------------------------------\n\nTITLE: Project Flavors Configuration\nDESCRIPTION: Defines the project flavors and their corresponding Flutter SDK versions. The `flutter` key specifies the default Flutter SDK version for the project. The `flavors` key maps flavor names (e.g., development, staging, production) to specific Flutter SDK versions. This configuration allows different environments to use different Flutter SDK versions. No dependencies.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/project-flavors.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"flutter\": \"stable\",\n  \"flavors\": {\n    \"development\": \"stable\",\n    \"staging\": \"3.16.9\",\n    \"production\": \"3.10.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pin Flavor Version - FVM\nDESCRIPTION: Pins a specific Flutter SDK version to a given flavor. The `fvm use` command is used with the `--flavor` option to associate the specified version with the flavor name. This ensures that when the flavor is used, the correct Flutter SDK version is activated. Requires FVM to be installed and configured.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/project-flavors.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nfvm use {version} --flavor {flavor_name}\n```\n\n----------------------------------------\n\nTITLE: FVM Exec Command\nDESCRIPTION: Executes scripts or commands using the Flutter SDK version configured for your project. It ensures the correct version of the Flutter SDK is used for various scripts and operations.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nfvm exec <command> [arguments]\n```\n\n----------------------------------------\n\nTITLE: FVM Exec Command Example\nDESCRIPTION: Demonstrates how to run a command (like `melos bootstrap`) and a script using the project's Flutter SDK version.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nfvm exec melos bootstrap\n```\n\nLANGUAGE: bash\nCODE:\n```\nfvm exec path/to/script.sh\n```\n\n----------------------------------------\n\nTITLE: FVM Spawn Build Example\nDESCRIPTION: Illustrates how to build your Flutter project using version 2.5.0 of the Flutter SDK using the `fvm spawn` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nfvm spawn 2.5.0 flutter build\n```\n\n----------------------------------------\n\nTITLE: FVM Flavor Test Example\nDESCRIPTION: Shows how to run tests using a specific Flutter SDK version that is associated with the `staging` flavor with the `fvm flavor` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n> fvm flavor staging flutter test\n```\n\n----------------------------------------\n\nTITLE: FVM Use Specific Version Example\nDESCRIPTION: Demonstrates how to set the Flutter version to 2.2.3 using the `fvm use` command. This ensures the project uses the specified SDK version.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfvm use 2.2.3\n```\n\n----------------------------------------\n\nTITLE: FVM Destroy Example\nDESCRIPTION: Illustrates how to destroy the FVM cache and delete all cached Flutter SDK versions using the `fvm destroy` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nfvm destroy\n```\n\n----------------------------------------\n\nTITLE: FVM Destroy Command\nDESCRIPTION: Completely removes the FVM cache, including all cached Flutter SDK versions.  It is useful for cleaning up space or resetting your FVM setup.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nfvm destroy\n```\n\n----------------------------------------\n\nTITLE: FVM Use Command\nDESCRIPTION: Sets a specific Flutter SDK version for a project. This command ensures environment consistency and meets project-specific SDK needs. It accepts a version or channel and provides options for forcing compatibility, pinning channels, specifying flavors, and skipping setup steps.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfvm use [version] [options]\n```\n\n----------------------------------------\n\nTITLE: FVM List Example\nDESCRIPTION: Shows how to list all Flutter SDK versions installed via FVM using the `fvm list` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfvm list\n```\n\n----------------------------------------\n\nTITLE: Spawning Command on Specific SDK Version via FVM (Bash)\nDESCRIPTION: Execute a command using a *specific* SDK version installed by FVM, regardless of the project's configured version or the global version. This is useful for testing commands on different versions without changing the project or global FVM settings.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/running-flutter.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfvm spawn {version}\n```\n\n----------------------------------------\n\nTITLE: FVM Global Command\nDESCRIPTION: Sets a specific Flutter SDK version as the global version on your machine. This is essential for defining a default Flutter SDK version. Includes options for forcing and unlinking.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nfvm global [version]\n```\n\n----------------------------------------\n\nTITLE: Example: Spawning flutter analyze on 'master' Channel (Bash)\nDESCRIPTION: Demonstrates using `fvm spawn` to run the `flutter analyze` command specifically with the Flutter SDK version referred to by the 'master' channel, assuming the 'master' channel is installed via FVM.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/running-flutter.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfvm spawn master analyze\n```\n\n----------------------------------------\n\nTITLE: FVM Use Channel Example\nDESCRIPTION: Shows how to use the latest stable channel version with `fvm use`. The `--pin` flag pins the channel to its current latest release, ensuring a consistent SDK version.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfvm use stable\n```\n\nLANGUAGE: bash\nCODE:\n```\nfvm use stable -p\n```\n\n----------------------------------------\n\nTITLE: Proxying Flutter/Dart Commands via FVM (Bash)\nDESCRIPTION: Execute standard Flutter or Dart commands by prefixing them with `fvm`. FVM will then route the command to the appropriate SDK version based on project configuration or fallback logic. This is the recommended way to interact with FVM-managed SDKs.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/running-flutter.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Use\n> fvm flutter {command}\n# Instead of\n> flutter {command}\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Use\n> fvm dart {command}\n# Instead of\n> dart {command}\n```\n\n----------------------------------------\n\nTITLE: Creating Aliases for FVM Proxy Commands (Bash)\nDESCRIPTION: Define shell aliases to create shorter shortcuts for proxying commands through `fvm flutter` and `fvm dart`. This simplifies the command line experience when frequently using FVM-managed SDKs, allowing commands like `f run` instead of `fvm flutter run`.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/running-flutter.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# aliases\nf=\"fvm flutter\"\nd=\"fvm dart\"\n\n# Now you can use\nf run\n```\n\n----------------------------------------\n\nTITLE: FVM List Command\nDESCRIPTION: Displays a list of all Flutter SDK versions installed via FVM on your machine. It provides a quick and easy way to review available versions. Includes alias command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nfvm list\n```\n\nLANGUAGE: bash\nCODE:\n```\nfvm ls\n```\n\n----------------------------------------\n\nTITLE: FVM Global Example\nDESCRIPTION: Shows how to set Flutter SDK version 2.5.0 as your global version using `fvm global 2.5.0` and how to unlink the global version using `fvm global --unlink`.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nfvm global 2.5.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nfvm global --unlink\n```\n\n----------------------------------------\n\nTITLE: Rerouting flutter/dart Commands to FVM (Linux Bash) - Create\nDESCRIPTION: Configure your Linux system to automatically route standard `flutter` and `dart` commands through `fvm`. This involves creating executable scripts in a user's local binary directory (like `$HOME/.local/bin`) that internally call `fvm flutter` or `fvm dart` with the provided arguments.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/running-flutter.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho 'fvm flutter ${@:1}' > \"$HOME/.local/bin/flutter\" && chmod +x \"$HOME/.local/bin/flutter\"\necho 'fvm dart ${@:1}' > \"$HOME/.local/bin/dart\" && chmod +x \"$HOME/.local/bin/dart\"\n```\n\n----------------------------------------\n\nTITLE: FVM Install Specific Version Example\nDESCRIPTION: Demonstrates how to install Flutter SDK version 2.5.0 using the `fvm install` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfvm install 2.5.0\n```\n\n----------------------------------------\n\nTITLE: Removing Rerouted flutter/dart Commands (Linux Bash) - Remove\nDESCRIPTION: Remove the custom scripts created on Linux that reroute `flutter` and `dart` commands to `fvm`. This restores the standard behavior where `flutter` and `dart` refer to binaries found elsewhere in the system's PATH.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/running-flutter.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm \"$HOME/.local/bin/flutter\"\nrm \"$HOME/.local/bin/dart\"\n```\n\n----------------------------------------\n\nTITLE: FVM Remove Example\nDESCRIPTION: Demonstrates how to remove Flutter SDK version 2.2.3 from your machine using the `fvm remove` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nfvm remove 2.2.3\n```\n\n----------------------------------------\n\nTITLE: FVM Spawn Command\nDESCRIPTION: Executes Flutter commands using a specific Flutter SDK version. This command is useful for running Flutter commands with a different SDK version.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nfvm spawn [version] [flutter_command] [flutter_command_args]\n```\n\n----------------------------------------\n\nTITLE: Installing FVM via Install.sh Script Using Bash\nDESCRIPTION: This snippet shows how to install FVM by executing a shell script fetched using curl. It requires a bash-compatible shell environment to run the script using 'curl -fsSL https://fvm.app/install.sh | bash', which automates the download and installation process. No additional dependencies are specified. This method works on MacOS and Linux environments and provides a straightforward way to install FVM.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/getting-started/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://fvm.app/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling FVM Using Homebrew on MacOS/Linux Bash\nDESCRIPTION: Demonstrates installing and uninstalling FVM using the Homebrew package manager. Installation requires running 'brew tap leoafarias/fvm' to add the specialized repository followed by 'brew install fvm'. To remove FVM, 'brew uninstall fvm' and 'brew untap leoafarias/fvm' are executed. Homebrew must be pre-installed on the system. This is mainly targeted at MacOS and Linux systems with Homebrew support.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/getting-started/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap leoafarias/fvm\nbrew install fvm\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew uninstall fvm\nbrew untap leoafarias/fvm\n```\n\n----------------------------------------\n\nTITLE: FVM Use Flavor Example\nDESCRIPTION: Shows how to set a version for a specific project flavor using the `--flavor` option with the `fvm use` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfvm use 2.2.3 --flavor production\n```\n\nLANGUAGE: bash\nCODE:\n```\nfvm use production\n```\n\n----------------------------------------\n\nTITLE: FVM Releases Example\nDESCRIPTION: Illustrates how to view all available Flutter SDK releases using `fvm releases` and how to filter by channel, specifically the beta channel, using `fvm releases --channel beta`.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nfvm releases\n```\n\nLANGUAGE: bash\nCODE:\n```\nfvm releases --channel beta\n```\n\n----------------------------------------\n\nTITLE: Switch Flavors - FVM\nDESCRIPTION: Switches the active Flutter SDK version to the one configured for a specific flavor. The `fvm use` command is used with the flavor name. This retrieves the version associated with the flavor and sets it as the project's active Flutter SDK version. Requires FVM to be installed and the flavor to have a configured SDK version.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/project-flavors.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nfvm use {flavor_name}\n```\n\n----------------------------------------\n\nTITLE: Spawn Command with Flavor - FVM\nDESCRIPTION: Executes a Flutter command using the Flutter SDK version associated with a specific flavor. The `fvm flavor` command is used with the flavor name, the Flutter command to execute, and any arguments for the Flutter command. This ensures the command is run using the correct SDK version for the flavor. Requires FVM to be installed and the flavor to have a configured SDK version.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/project-flavors.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nfvm flavor {flavor_name} {flutter_command} {flutter_command_args}\n```\n\n----------------------------------------\n\nTITLE: Installing FVM Using Chocolatey on Windows PowerShell\nDESCRIPTION: Provides the command for installing FVM on Windows environments using the Chocolatey package manager. The user must have Chocolatey installed and run 'choco install fvm' within PowerShell or Command Prompt to install FVM. No uninstallation commands are provided in this snippet. This method is intended to simplify Windows-based installation processes.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/getting-started/installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchoco install fvm\n```\n\n----------------------------------------\n\nTITLE: Calling Project SDK Directly (Bash)\nDESCRIPTION: Execute Flutter commands directly using the symlink created by FVM within the project directory. This symlink (`.fvm/flutter_sdk`) points to the specific Flutter SDK version configured for the current project, bypassing the need to proxy via the `fvm` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/running-flutter.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# flutter run\n.fvm/flutter_sdk/bin/flutter run\n```\n\n----------------------------------------\n\nTITLE: FVM Install with Setup Example\nDESCRIPTION: Shows how to use the `--setup` flag to perform setup tasks after installation, such as downloading dependencies, using the `fvm install` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfvm install 2.5.0 --setup\n```\n\n----------------------------------------\n\nTITLE: Creating Alias for Direct Project SDK Call (Bash)\nDESCRIPTION: Create a shell alias to shorten the command for calling the project's configured Flutter SDK directly via its symlink. This allows running commands like `fv run` instead of typing the full path to the symlink's binary.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/running-flutter.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfv=\".fvm/flutter_sdk/bin/flutter\"\n```\n\n----------------------------------------\n\nTITLE: FVM Spawn Test Example\nDESCRIPTION: Shows how to run tests using a specific Flutter SDK version (2.2.3) using the `fvm spawn` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nfvm spawn 2.2.3 flutter test\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter SDK Path in VSCode settings.json\nDESCRIPTION: This JSON configuration is automatically added to the .vscode/settings.json file by FVM to specify the Flutter SDK path. It directs Visual Studio Code to use the Flutter SDK version managed by FVM for the project.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/vscode.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dart.flutterSdkPath\": \".fvm/versions/stable\"\n}\n```\n\n----------------------------------------\n\nTITLE: FVM Flavor Build Example\nDESCRIPTION: Shows how to build a Flutter project using the SDK version associated with the `development` flavor using `fvm flavor` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n> fvm flavor development flutter build\n```\n\n----------------------------------------\n\nTITLE: Configuring FVM Globally to Use Custom Flutter Repository - Bash\nDESCRIPTION: Sets the global Flutter repository URL used by FVM with the 'fvm config --flutter-url' command. Replace the URL with the actual fork's location. This change applies to all future installations or uses of Flutter SDK by FVM and requires reinstallation of existing versions for the change to take effect. Outputs no value directly but changes the global configuration in FVM.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/custom-version.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfvm config --flutter-url https://github.com/org/custom-flutter.git\n```\n\n----------------------------------------\n\nTITLE: Rerouting flutter/dart Commands to FVM (Mac Bash) - Create\nDESCRIPTION: Configure your Mac system to automatically route standard `flutter` and `dart` commands executed in the terminal through `fvm`. This involves creating executable scripts in a directory within your PATH (like `/usr/local/bin`) that internally call `fvm flutter` or `fvm dart` with the provided arguments.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/running-flutter.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo echo 'fvm flutter ${@:1}' > \"/usr/local/bin/flutter\" && sudo chmod +x /usr/local/bin/flutter\nsudo echo 'fvm dart ${@:1}' > \"/usr/local/bin/dart\" && sudo chmod +x /usr/local/bin/dart\n```\n\n----------------------------------------\n\nTITLE: Switching to Custom Flutter SDK Version using FVM - Bash\nDESCRIPTION: Activates a custom Flutter SDK fork for the current project by running 'fvm use' with the custom version name. This assumes the fork is placed in the FVM cache with a 'custom_' prefix. Requires FVM to be installed and the custom SDK version to exist in the cache. Outputs confirmation that the custom SDK is selected for local development.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/custom-version.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfvm use custom_special\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flutter Project Configuration via FVM JSON API - Bash and JSON\nDESCRIPTION: Runs the `project` endpoint to obtain configuration details of the current or specified Flutter project with optional JSON compression. Includes the project's SDK versions (both flutter and dart), active flavor, paths to key configuration files, and pubspec metadata such as dependencies and environment constraints. This provides an in-depth view of the Flutter project setup managed through FVM, enabling automation and inspection of version pinning and flavoring.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/json-api.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfvm api project [options]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": {\n    \"name\": \"my_project\",\n    \"config\": {\n      \"flutter\": \"3.19.2\",\n      \"flavors\": {\n        \"production\": \"3.19.2\",\n        \"development\": \"stable\"\n      }\n    },\n    \"path\": \"/path/to/project\",\n    \"pinnedVersion\": {\n      \"name\": \"3.19.2\",\n      \"releaseFromChannel\": null,\n      \"type\": \"release\"\n    },\n    \"activeFlavor\": \"production\",\n    \"flavors\": {\n      \"production\": \"3.19.2\",\n      \"development\": \"stable\"\n    },\n    \"dartToolGeneratorVersion\": \"3.3.0\",\n    \"dartToolVersion\": \"3.19.2\",\n    \"isFlutter\": true,\n    \"localFvmPath\": \"/path/to/project/.fvm\",\n    \"localVersionsCachePath\": \"/path/to/project/.fvm/versions\",\n    \"localVersionSymlinkPath\": \"/path/to/project/.fvm/versions/3.19.2\",\n    \"gitIgnorePath\": \"/path/to/project/.gitignore\",\n    \"pubspecPath\": \"/path/to/project/pubspec.yaml\",\n    \"configPath\": \"/path/to/project/.fvmrc\",\n    \"legacyConfigPath\": \"/path/to/project/.fvm/fvm_config.json\",\n    \"hasConfig\": true,\n    \"hasPubspec\": true,\n    \"pubspec\": {\n      \"name\": \"my_project\",\n      \"version\": \"0.1.0\",\n      \"publish_to\": \"none\",\n      \"environment\": {\n        \"sdk\": \">=2.17.0 <4.0.0\"\n      },\n      \"description\": \"A new Flutter project.\",\n      \"dependencies\": {\n        ...\n      },\n      \"dev_dependencies\": {\n        ...\n      },\n      \"flutter\": {\n        \"uses-material-design\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Setting and Checking Flutter Version (Bash)\nDESCRIPTION: This example illustrates setting the beta channel as the global Flutter version using `fvm global beta` and then verifying the change with `flutter --version`.  It then repeats the process for the stable channel.  It requires FVM to be installed and configured, as well as Flutter itself. The output of `flutter --version` reflects the globally set channel.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/global-configuration.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set beta channel as global\nfvm global beta\n\n# Check version\nflutter --version # Will be beta release\n\n# Set stable channel as global\nfvm global stable\n\n# Check version\nflutter --version # Will be stable release\n```\n\n----------------------------------------\n\nTITLE: Cloning Custom Flutter SDK Fork into FVM Cache - Bash\nDESCRIPTION: Executes a Git clone to add a custom fork of the Flutter SDK into the FVM versions cache directory. Replace 'url-to-repository.git' with the desired repository URL and use the format 'custom_{name}' for the directory to differentiate from official releases. Do not use '--depth' or '--single-branch' when cloning to ensure Flutter Tools can resolve repository references properly. Input is the repository URL and target directory name; output is the custom Flutter fork stored under FVM's management.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/custom-version.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone url-to-repository.git custom_special\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Flutter SDK Releases Using FVM CLI JSON API - Bash and JSON\nDESCRIPTION: Uses the `releases` command to list downloadable Flutter SDK releases filtered optionally by channel and limited in number. Command options enable JSON output compression and filtering by stable, beta, or dev channels. The JSON response includes an array of available versions with metadata like hash, release channel, version label, release date, archive url and SHA256 checksum, along with aggregate information about available release channels.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/json-api.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfvm api releases [options]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versions\": [\n    {\n      \"hash\": \"0b591f2c82e9f59276ed68c7d4cbd63196f7c865\",\n      \"channel\": \"beta\",\n      \"version\": \"3.17.0-0.0.pre\",\n      \"release_date\": \"2023-11-15T22:44:50.703003Z\",\n      \"archive\": \"beta/macos/flutter_macos_3.17.0-0.0.pre-beta.zip\",\n      \"sha256\": \"2937447f814eff2ebf5aba098dfdb059654a0113456f1b22e855403c2ec413df\",\n      \"dart_sdk_arch\": \"x64\",\n      \"dart_sdk_version\": \"3.3.0 (build 3.3.0-91.0.dev)\",\n      \"active_channel\": false,\n      \"channelName\": \"beta\",\n      \"archiveUrl\": \"https://storage.googleapis.com/flutter_infra_release/releases/beta/macos/flutter_macos_3.17.0-0.0.pre-beta.zip\"\n    }\n  ],\n  \"channels\": {\n    \"beta\": {...},\n    \"stable\": {...}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting FVM Flutter Repository URL via Environment Variable - Bash\nDESCRIPTION: Exports the 'FVM_FLUTTER_URL' environment variable in the shell to override the Flutter repository URL used by FVM. Place this line in your shell profile (e.g., .bashrc, .zshrc) for global effect or run it in the terminal for the current session. Overrides FVM's default source for downloads and installs. Inputs: custom repository URL. No direct output; affects environment configuration.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/custom-version.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport FVM_FLUTTER_URL=\"https://github.com/org/custom-flutter.git\"\n```\n\n----------------------------------------\n\nTITLE: Installing FVM as a Dart Pub Global Package\nDESCRIPTION: This snippet installs FVM through Dart's pub package manager using the command 'dart pub global activate fvm'. It requires a working Dart SDK to be installed. This method is not recommended if the user intends to manage the global Flutter SDK version with FVM but is suitable for managing project-scoped Flutter versions. A warning is included to highlight this limitation.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/getting-started/installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate fvm\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Flutter SDK Versions Using FVM CLI JSON API - Bash and JSON\nDESCRIPTION: Executes the `list` command via `fvm api` CLI to retrieve a list of locally installed Flutter SDK versions. Supports options for output compression and skipping size calculations to improve performance. The response is a JSON object containing total cache size and detailed properties of each installed SDK version such as version name, directory paths, SDK types, and executable locations.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/json-api.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfvm api list [options]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"size\": \"922.50 MB\",\n  \"versions\": [\n    {\n      \"name\": \"3.19.2\",\n      \"directory\": \"/path/to/fvm/versions/3.19.2\",\n      \"releaseFromChannel\": null,\n      \"type\": \"release\",\n      \"binPath\": \"/path/to/fvm/versions/3.19.2/bin\",\n      \"hasOldBinPath\": false,\n      \"dartBinPath\": \"/path/to/fvm/versions/3.19.2/bin\",\n      \"dartExec\": \"/path/to/fvm/versions/3.19.2/bin/dart\",\n      \"flutterExec\": \"/path/to/fvm/versions/3.19.2/bin/flutter\",\n      \"flutterSdkVersion\": \"3.19.2\",\n      \"dartSdkVersion\": \"3.3.0\",\n      \"isSetup\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Rerouted flutter/dart Commands (Mac Bash) - Remove\nDESCRIPTION: Remove the custom scripts created on macOS that reroute `flutter` and `dart` commands to `fvm`. This restores the standard behavior where `flutter` and `dart` refer to binaries found elsewhere in the system's PATH.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/running-flutter.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm /usr/local/bin/flutter\nsudo rm /usr/local/bin/dart\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Flutter Repository per Project in .fvmrc - JSON\nDESCRIPTION: Creates a '.fvmrc' config file in the project root specifying the custom Flutter repository URL to be used by FVM for that project only. The key 'flutterUrl' must be set to the desired fork URL. This approach localizes the configuration, but developers must ensure that project versions/channels are unique to avoid conflicts between projects. No inputs; outputs the per-project FVM configuration.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/custom-version.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flutterUrl\": \"https://github.com/org/custom-flutter.git\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using FVM with Default Channel Priority (Bash)\nDESCRIPTION: Demonstrates using `fvm use` with a version number (e.g., `2.2.2`) that exists on multiple channels. FVM defaults to installing and using the version from the most stable channel available (stable in this example), based on the priority Stable > Beta > Dev.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/release-multiple-channels.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nfvm use 2.2.2 # Installs 2.2.2 from stable\n```\n\n----------------------------------------\n\nTITLE: Forcing FVM to Use a Specific Channel (Bash)\nDESCRIPTION: Illustrates how to override FVM's default channel priority by specifying the desired channel using the `VERSION@CHANNEL` syntax (e.g., `2.2.2@beta`). This command forces FVM to install and use the specified version from the beta channel, even if a more stable channel like 'stable' also contains that version.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/release-multiple-channels.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nfvm use 2.2.2@beta # Installs 2.2.2 from beta\n```\n\n----------------------------------------\n\nTITLE: Fetching Current FVM Context Information Using JSON API - Bash and JSON\nDESCRIPTION: Executes `context` command to gather detailed information about the current FVM environment and configuration. Includes options for JSON compression. The resulting JSON contains fields such as FVM version, working directory, flags for testing and CI environment, cache paths, Git repository URL used for Flutter releases, update check statuses, command arguments, and privilege access indicators, facilitating diagnostic and configuration inspection tasks.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/json-api.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfvm api context [options]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": {\n    \"fvmVersion\": \"3.0.14\",\n    \"workingDirectory\": \"/path/to/project\",\n    \"isTest\": false,\n    \"fvmDir\": \"/path/to/.fvm\",\n    \"gitCache\": true,\n    \"runPubGetOnSdkChanges\": true,\n    \"gitCachePath\": \"/path/to/.fvm/cache.git\",\n    \"flutterUrl\": \"https://github.com/flutter/flutter.git\",\n    \"lastUpdateCheck\": \"2024-03-13T14:46:08.735250Z\",\n    \"updateCheckDisabled\": false,\n    \"privilegedAccess\": false,\n    \"globalCacheLink\": \"/path/to/.fvm/default\",\n    \"globalCacheBinPath\": \"/path/to/.fvm/default/bin\",\n    \"versionsCachePath\": \"/path/to/.fvm/versions\",\n    \"configPath\": \"/Users/username/Library/Application Support/fvm/.fvmrc\",\n    \"isCI\": false,\n    \"id\": \"MAIN\",\n    \"args\": [\n      \"api\",\n      \"info\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FVM Use Force Flag Example\nDESCRIPTION: Explains how to use the `--force` flag to set a version without performing the usual project checks. This is useful when compatibility is assumed.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfvm use 2.2.3 --force\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Flutter SDK Versions with FVM - Bash\nDESCRIPTION: Runs the 'fvm list' command to display all Flutter SDK versions currently managed in the local FVM cache. Requires FVM to be installed. Outputs the list of cached versions, their channels, version numbers, Dart versions, release dates, and local/global status as a formatted table in the terminal. No input parameters and outputs are printed to the console.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/advanced/custom-version.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfvm list\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (bash)\nDESCRIPTION: This bash snippet changes the current directory to a specified project directory using the `cd` command. The user should replace `path/to/project` with the actual path to their project directory. This requires a valid directory path and allows the user to navigate to the project directory in the terminal.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/example/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> cd path/to/project\n```\n\n----------------------------------------\n\nTITLE: FVM Flavor Command\nDESCRIPTION: Executes Flutter commands using a specific Flutter SDK version defined by a project flavor. This command is useful for running Flutter commands with a SDK version associated with a flavor.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nfvm flavor [flavor] [flutter_command] [flutter_command_args]\n```\n\n----------------------------------------\n\nTITLE: Defining the Root Next.js App Component (JavaScript)\nDESCRIPTION: This JavaScript code defines the root `App` component for a Next.js application using function component syntax. It imports global CSS (`globals.css`, `styles.css`) and renders the active page component (`Component`) passed via props, along with its specific page properties (`pageProps`). This is the standard way to initialize a Next.js app and apply global layouts or context.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/_app.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"../globals.css\";\nimport \"../styles.css\";\n\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: FVM Use Commit Hash Example\nDESCRIPTION: Illustrates how to install and bind a specific framework revision by providing the Git commit hash (short or long) using the `fvm use` command.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n## Short hash\nfvm use fa345b1\n## Long hash\nfvm use 476ad8a917e64e345f05e4147e573e2a42b379f9\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Playlist - HTML\nDESCRIPTION: Embeds a standard YouTube video player using an iframe element. The player is configured to display a specific playlist (ID: PLVnlSO6aQelAAddOFQVJNoaRGZ1mMsj2Q), providing direct access to related video guides and walkthroughs within the document.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/index.mdx#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\n  width=\"560\"\n  height=\"315\"\n  src=\"https://www.youtube.com/embed/videoseries?list=PLVnlSO6aQelAAddOFQVJNoaRGZ1mMsj2Q\"\n  title=\"YouTube video player\"\n  frameBorder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowFullScreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Displaying Main Heading Component - MDX/JSX\nDESCRIPTION: Renders the MainHeading component, likely serving as the primary title or header for the page or section. This is a simple use of a custom React component within the MDX flow.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/index.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<MainHeading />\n```\n\n----------------------------------------\n\nTITLE: FVM Releases Command\nDESCRIPTION: Allows you to view all available Flutter SDK releases, making it easier to choose which version to install or switch to.  The `-c` or `--channel` option filters the releases by a specific channel.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfvm releases [options]\n```\n\n----------------------------------------\n\nTITLE: FVM Install from Configuration Example\nDESCRIPTION: Illustrates how `fvm install` installs the version specified in the project's FVM configuration if run within a Flutter project with an FVM configuration.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfvm install\n```\n\n----------------------------------------\n\nTITLE: Defining FVM Project Configuration in JSON\nDESCRIPTION: Provides a sample JSON configuration for the .fvmrc file that specifies the Flutter SDK version, custom flavors, and flags for auto-updating VS Code settings, .gitignore, and running 'flutter pub get' upon SDK changes. This snippet requires the .fvmrc file to be used in the root of the Flutter project and enables project-specific Flutter version management and tooling behavior.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/getting-started/configuration.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flutter\": \"3.19.1\",\n  \"flavors\": {\n    \"development\": \"beta\",\n    \"production\": \"3.19.1\"\n  },\n  \"updateVscodeSettings\": true,\n  \"updateGitIgnore\": true,\n  \"runPubGetOnSdkChanges\": true\n}\n```\n\n----------------------------------------\n\nTITLE: FVM Remove Command\nDESCRIPTION: Removes a specific Flutter SDK version from your machine. Requires the version number as an argument.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/documentation/guides/basic-commands.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nfvm remove [version]\n```\n\n----------------------------------------\n\nTITLE: Displaying Social and Project Links - MDX/JSX/HTML\nDESCRIPTION: Structures a horizontal row of links and buttons for social engagement and project statistics (GitHub stars, Pub likes, contributors, Twitter). It utilizes a flexbox container, custom components (GithubStarButton, TwitterButton, Spacer), Next.js Link for navigation, and standard HTML img tags for embedding badges.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/index.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"flex flex-row\">\n  <GithubStarButton />\n  <Spacer />\n  <Link href=\"https://pub.dev/packages/fvm\">\n    <img alt=\"Pub Likes\" src=\"https://img.shields.io/pub/likes/fvm?style=for-the-badge&logo=flutter&logoColor=%2358CDFA&label=Pub%20Likes&labelColor=white&color=%2358CDFA\"/>\n  </Link>\n  <Spacer />\n  <Link href=\"https://github.com/leoafarias/fvm/graphs/contributors\">\n    <img src=\"https://img.shields.io/github/all-contributors/leoafarias/fvm?style=for-the-badge\" />\n  </Link>\n  <Spacer />\n  <TwitterButton />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Linking to Contributors Graph - HTML\nDESCRIPTION: Embeds an image dynamically generated by contrib.rocks to visualize project contributors and wraps it in an anchor tag. Clicking the image navigates the user to the project's contributors graph page on GitHub.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/index.mdx#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/leoafarias/fvm/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=leoafarias/fvm\" />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components - MDX/JSX\nDESCRIPTION: Imports reusable React components (Spacer, GithubStarButton, TwitterButton, Link, MainHeading) into the MDX document for structuring content and adding interactive elements. These components are prerequisites for subsequent UI rendering snippets.\nSOURCE: https://github.com/leoafarias/fvm/blob/main/docs/pages/index.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Spacer from \"../components/Spacer\";\nimport GithubStarButton from \"../components/GithubStarButton\";\nimport TwitterButton from \"../components/TwitterButton\";\nimport Link from \"next/link\";\nimport MainHeading from \"../components/MainHeading\";\n```"
  }
]