[
  {
    "owner": "devcontainers",
    "repo": "spec",
    "content": "TITLE: Setting container environment variables in devcontainer.json\nDESCRIPTION: Example of defining environment variables in a dev container using the containerEnv property. This approach sets environment variables at the container level so all processes in the container can access them.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"containerEnv\": { \"MY_VARIABLE\": \"${localEnv:MY_VARIABLE}\" }\n```\n\n----------------------------------------\n\nTITLE: Image Metadata Structure for Development Containers\nDESCRIPTION: JSON schema for storing development container metadata in image labels. Supports an array of configuration snippets that can be merged with local devcontainer.json files. Includes support for Features and container customizations.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-reference.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"id\"?: string,\n\t\t\"init\"?: boolean,\n\t\t\"privileged\"?: boolean,\n\t\t\"capAdd\"?: string[],\n\t\t\"securityOpt\"?: string[],\n\t\t\"entrypoint\"?: string,\n\t\t\"mounts\"?: [],\n\t\t...\n\t\t\"customizations\"?: {\n\t\t\t...\n\t\t}\n\t},\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Features in devcontainer.json\nDESCRIPTION: This JSON snippet shows how to specify Features in a devcontainer.json file. It includes examples of different ways to reference Features, including from OCI registries, HTTPS URIs, and local directories.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n\"features\": {\n  \"ghcr.io/user/repo/go\": {},\n  \"ghcr.io/user/repo1/go:1\": {},\n  \"ghcr.io/user/repo2/go:latest\": {},\n  \"https://github.com/user/repo/releases/devcontainer-feature-go.tgz\": { \n        \"optionA\": \"value\" \n  },\n  \"./myGoFeature\": { \n        \"optionA\": true,\n        \"optionB\": \"hello\",\n        \"version\" : \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dev Container Features in devcontainer.json\nDESCRIPTION: Example of adding Features to a dev container using the features property. Features are reusable components that can be added to containers.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"features\": { \"ghcr.io/devcontainers/features/github-cli\": {} }\n```\n\n----------------------------------------\n\nTITLE: Overriding Feature installation order in devcontainer.json\nDESCRIPTION: Example of explicitly setting the installation order of Features using the overrideFeatureInstallOrder property instead of relying on the default automatic ordering.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"overrideFeatureInstallОrder\": [ \"ghcr.io/devcontainers/features/common-utils\", \"ghcr.io/devcontainers/features/github-cli\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Options in JSON\nDESCRIPTION: Demonstrates how to define options for a Feature in the devcontainer-feature.json file, including type, description, proposals, and default value.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"options\": {\n    \"optionIdGoesHere\": {\n      \"type\": \"string\",\n      \"description\": \"Description of the option\",\n      \"proposals\": [\"value1\", \"value2\"],\n      \"default\": \"value1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Folder Structure\nDESCRIPTION: Shows the required folder structure for a Dev Container Feature, including the mandatory devcontainer-feature.json and install.sh files.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+-- feature\n|    +-- devcontainer-feature.json\n|    +-- install.sh\n|    +-- (other files)\n```\n\n----------------------------------------\n\nTITLE: Java Template Options Example in devcontainer-template.json\nDESCRIPTION: Demonstrates a complete options configuration for a Java template with multiple configurable parameters including Java version, Node.js version, and Maven installation option.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-templates.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// ...\n\"options\": {\n    \"imageVariant\": {\n        \"type\": \"string\",\n        \"description\": \"Specify version of java.\",\n        \"proposals\": [\n          \"17-bullseye\",\n          \"17-buster\",\n          \"11-bullseye\",\n          \"11-buster\",\n          \"17\",\n          \"11\"\n        ],\n\t\t\t  \"default\": \"17-bullseye\"\n    },\n    \"nodeVersion\": {\n        \"type\": \"string\", \n        \"proposals\": [\n          \"latest\",\n          \"16\",\n          \"14\",\n          \"10\",\n          \"none\"\n        ],\n        \"default\": \"latest\",\n        \"description\": \"Specify version of node, or 'none' to skip node installation.\"\n    },\n    \"installMaven\": {\n        \"type\": \"boolean\", \n        \"description\": \"Install Maven, a management tool for Java.\",\n        \"default\": \"false\"\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Lifecycle Scripts in DevContainer JSON\nDESCRIPTION: Example configuration showing how to define multiple commands to run in parallel during container lifecycle stages. The configuration uses an object format where each key represents a unique command name and the value can be either a string or array command.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/parallel-lifecycle-script-execution.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"postCreateCommand\": {\n    \"server\": \"npm start\",\n    \"db\": [\"mysql\", \"-u\", \"root\", \"-p\", \"my database\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Template Folder Structure Example\nDESCRIPTION: Shows the required folder structure for a Dev Container Template, with the devcontainer-template.json at the root and the .devcontainer folder containing the devcontainer.json configuration file.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-templates.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+-- template\n|   +-- devcontainer-template.json\n|   +-- .devcontainer\n|       +-- devcontainer.json\n|       +-- (other files)\n|   +-- (other files)\n```\n\n----------------------------------------\n\nTITLE: Structuring a Dev Container Feature Repository\nDESCRIPTION: Shows the file structure for a repository that contains multiple features. Each feature has its own directory with required files like devcontainer-feature.json and install.sh, along with an optional test directory structure.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features-distribution.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── README.md\n├── src\n│   ├── dotnet\n│   │   ├── devcontainer-feature.json\n│   │   ├── install.sh\n│   │   └── ...\n|   ├\n│   ├── go\n│   │   ├── devcontainer-feature.json\n│   │   └── install.sh\n|   ├── ...\n│   │   ├── devcontainer-feature.json\n│   │   └── install.sh\n├── test\n│   ├── dotnet\n│   │   ├── test.sh\n│   │   └── ...\n│   └── go\n│   |   └── test.sh\n|   ├── ...\n│   │   └── test.sh\n├── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Attributes in devcontainer.json\nDESCRIPTION: Example of configuring port forwarding attributes including label, protocol, auto-forwarding behavior, and local port requirements.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"portsAttributes\": {\n    \"80\": {\n      \"label\": \"Web App\",\n      \"protocol\": \"https\",\n      \"onAutoForward\": \"openBrowser\",\n      \"requireLocalPort\": true,\n      \"elevateIfNeeded\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Secrets in Dev Container JSON Configuration\nDESCRIPTION: This snippet demonstrates how to declare secrets in a dev container JSON configuration file. It includes examples of secrets with and without additional metadata.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/declarative-secrets.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/base:bullseye\",\n    \"secrets\": {\n        \"CHAT_GPT_API_KEY\": {\n            \"description\": \"I'm your super cool API key for ChatGPT.\",\n            \"documentationUrl\": \"https://openai.com/api/\"\n        },\n        \"STABLE_DIFFUSION_API_KEY\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Python Feature in devcontainer.json\nDESCRIPTION: Example of how to reference and configure the Python Feature in a user's devcontainer.json file, overriding default options for version and pip installation.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_11\n\nLANGUAGE: jsonc\nCODE:\n```\n\"features\": {\n    \"ghcr.io/devcontainers/features/python:1\": {\n        \"version\": \"3.10\",\n        \"pip\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Command Configuration in devcontainer.json\nDESCRIPTION: Example of defining various lifecycle commands that execute at different stages of container creation and operation.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"initializeCommand\": \"yarn install\",\n  \"onCreateCommand\": [\"yarn\", \"install\"],\n  \"postCreateCommand\": \"bash scripts/install-dev-tools.sh\",\n  \"waitFor\": \"updateContentCommand\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hard Dependencies with dependsOn in Dev Container Feature\nDESCRIPTION: Example of using dependsOn property in devcontainer-feature.json to specify required Feature dependencies with version constraints and options. Shows how to reference Features by version tag and SHA digest.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"My Feature\",\n    \"id\": \"myFeature\",\n    \"version\": \"1.0.0\",\n    \"dependsOn\": {\n        \"foo:1\": {\n            \"flag\": true\n        },\n        \"bar:1.2.3\": {},\n        \"baz@sha256:a4cdc44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" {},\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring port attributes in devcontainer.json\nDESCRIPTION: Example of setting port attributes for a specific port using the portsAttributes property. This allows adding labels and other metadata to forwarded ports.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"portsAttributes\": {\"3000\": {\"label\": \"Application port\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Dependencies in JSON\nDESCRIPTION: Example of a devcontainer-feature.json file with dependencies on four other published Features. The dependsOn property specifies the required features along with any options or version constraints.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/feature-dependencies.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"My Feature\",\n    \"id\": \"myFeature\",\n    \"version\": \"1.0.0\",\n    \"dependsOn\": {\n        \"ghcr.io/second:1\": {\n            \"flag\": true\n        },\n        \"features.azurecr.io/third:1\": {},\n        \"features.azurecr.io/fourth:1.2.3\": {},\n        \"features.azurecr.io/fifth@sha256:a4cdc44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\" {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolved Java Template devcontainer.json\nDESCRIPTION: Demonstrates the resulting devcontainer.json after the template options have been resolved with the user's selected values.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-templates.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"Go\",\n\t\"image\": \"mcr.microsoft.com/devcontainers/go:0-17-bullseye\",\n\t\"features\": {\n\t\t\"ghcr.io/devcontainers/features/node:1\": {\n\t\t\t\"version\": \"latest\",\n      \"installMaven\": \"false\"\n\t\t}\n\t},\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Options Property Example in devcontainer-template.json\nDESCRIPTION: Demonstrates the structure of the options property in devcontainer-template.json which defines configurable parameters that users can set when applying the template.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-templates.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"options\": {\n    \"optionId\": {\n      \"type\": \"string\",\n      \"description\": \"Description of the option\",\n      \"proposals\": [\"value1\", \"value2\"],\n      \"default\": \"value1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Generated from Feature Options\nDESCRIPTION: Example of environment variables that are generated based on feature options, showing how defaults are applied for options not explicitly set by the user.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_12\n\nLANGUAGE: env\nCODE:\n```\nVERSION=\"3.10\"\nPIP=\"false\"\nOPTIMIZE=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Option Parameters in devcontainer-feature.json for Python Feature\nDESCRIPTION: Example of declaring option parameters for a Python Feature in the devcontainer-feature.json file, including version selection, pip installation, and optimization settings.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_10\n\nLANGUAGE: jsonc\nCODE:\n```\n// ...\n\"options\": {\n    \"version\": {\n        \"type\": \"string\",\n        \"enum\": [\"latest\", \"3.10\", \"3.9\", \"3.8\", \"3.7\", \"3.6\"],\n        \"default\": \"latest\",\n        \"description\": \"Select a Python version to install.\"\n    },\n    \"pip\": {\n        \"type\": \"boolean\",\n        \"default\": true,\n        \"description\": \"Installs pip\"\n    },\n    \"optimize\": {\n        \"type\": \"boolean\",\n        \"default\": true,\n        \"description\": \"Optimize python installation\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting default port forwarding behavior in devcontainer.json\nDESCRIPTION: Example of defining default behavior for ports not explicitly configured in portsAttributes using the otherPortsAttributes property.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"otherPortsAttributes\": {\"onAutoForward\": \"silent\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Lifecycle Commands in Feature JSON with Simple and Complex Syntax\nDESCRIPTION: Example showing how to define onCreateCommand, postCreateCommand, and postAttachCommand in a Feature's devcontainer-feature.json. Demonstrates both simple string commands and object-based syntax for parallel execution.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/features-contribute-lifecycle-scripts.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n   \"id\": \"featureA\",\n   \"version\": \"1.0.0\",\n   \"onCreateCommand\": \"myOnCreate.sh && myOnCreate2.sh\",\n   \"postCreateCommand\": \"myPostCreate.sh\",\n    \"postAttachCommand\": {\n        \"command01\": \"myPostAttach.sh arg01\",\n        \"command02\": \"myPostAttach.sh arg02\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Java Template devcontainer.json with Template Options\nDESCRIPTION: Shows how template options are referenced in a devcontainer.json file using the ${templateOption:optionId} syntax for variable substitution.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-templates.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"Java\",\n\t\"image\": \"mcr.microsoft.com/devcontainers/java:0-${templateOption:imageVariant}\",\n\t\"features\": {\n\t\t\"ghcr.io/devcontainers/features/node:1\": {\n\t\t\t\"version\": \"${templateOption:nodeVersion}\",\n      \"installMaven\": \"${templateOption:installMaven}\"\n\t\t}\n\t},\n//\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Host Requirements in devcontainer.json\nDESCRIPTION: Example of specifying minimum CPU, memory, and storage requirements for a dev container using the hostRequirements property.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRequirements\": {\n    \"cpus\": 2,\n    \"memory\": \"4gb\",\n    \"storage\": \"32gb\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Installation Script Using Environment Variables\nDESCRIPTION: Example of a bash install.sh script that accesses environment variables generated from feature options to customize the installation process.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\necho \"Version is $VERSION\"\necho \"Pip? $PIP\"\necho \"Optimize? $OPTIMIZE\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code-specific Properties in devcontainer.json\nDESCRIPTION: Example of how to configure VS Code-specific properties in the devcontainer.json file using the 'customizations.vscode' property. This allows setting VS Code settings and extensions that should be installed inside the container when it is created.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/supporting-tools.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n\"customizations\": {\n\t\t// Configure properties specific to VS Code.\n\t\t\"vscode\": {\n\t\t\t// Set *default* container specific settings.json values on container create.\n\t\t\t\"settings\": {},\n\t\t\t\"extensions\": [],\n\t\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Docker volume mounts in devcontainer.json\nDESCRIPTION: Example of adding additional mounts to a container using the mounts property, which accepts Docker CLI mount syntax.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"mounts\": [{ \"source\": \"dind-var-lib-docker\", \"target\": \"/var/lib/docker\", \"type\": \"volume\" }]\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Features in devcontainer.json\nDESCRIPTION: Shows how to reference local Features in the devcontainer.json file using relative paths. The paths are provided using unix-style syntax and must point to subdirectories within the .devcontainer folder.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features-distribution.md#2025-04-17_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n        // ...\n        \"features\": {\n                \"./localFeatureA\": {},\n                \"./localFeatureB\": {}\n        }\n\n}\n```\n\n----------------------------------------\n\nTITLE: OptionalPaths Property Example in devcontainer-template.json\nDESCRIPTION: Shows how to define optionalPaths in a template configuration to specify files or directories that may be omitted when applying the template.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-templates.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"cpp\",\n    \"version\": \"3.0.0\",\n    \"name\": \"C++\",\n    \"description\": \"Develop C++ applications\",\n    \"optionalPaths\": [\n         \"GETTING-STARTED.md\",                 // Single file\n         \"example-project-1/MyProject.csproj\", // Single file in nested directory\n         \".github/*\"                           // Entire recursive contents of directory\n     ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Docker-in-Docker Feature with Dev Container ID in JSONC\nDESCRIPTION: This snippet demonstrates how to use the ${devcontainerId} in the mounts configuration of a Docker-in-Docker feature. It creates a unique volume for each dev container.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-id-variable.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"id\": \"docker-in-docker\",\n    \"version\": \"1.0.4\",\n    // ...\n    \"mounts\": [\n        {\n            \"source\": \"dind-var-lib-docker-${devcontainerId}\",\n            \"target\": \"/var/lib/docker\",\n            \"type\": \"volume\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Codespaces Repository Permissions in devcontainer.json\nDESCRIPTION: Example showing how to configure repository permissions for GitHub Codespaces using the 'customizations.codespaces' property. This allows a codespace to access other repositories with specific permission levels.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/supporting-tools.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n\"customizations\": {\n\t// Configure properties specific to Codespaces.\n\t\"codespaces\": {\n\t\t\"repositories\": {\n\t\t\t\"my_org/my_repo\": {\n\t\t\t\t\"permissions\": {\n\t\t\t\t\t\"issues\": \"write\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Workspace Mount Configuration Example\nDESCRIPTION: Example showing how to configure workspace mounting with custom source and target paths\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"workspaceMount\": \"source=${localWorkspaceFolder}/sub-folder,target=/workspace,type=bind,consistency=cached\", \"workspaceFolder\": \"/workspace\"\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Local Features in Dev Containers\nDESCRIPTION: Illustrates the expected file structure for a project using locally referenced Features. Shows the directory hierarchy with two local Features inside the .devcontainer folder, each containing their required files.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features-distribution.md#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .devcontainer/\n│   ├── localFeatureA/\n│   │   ├── devcontainer-feature.json\n│   │   ├── install.sh\n│   │   └── ...\n│   ├── localFeatureB/\n│   │   ├── devcontainer-feature.json\n│   │   ├── install.sh\n│   │   └── ...\n│   ├── devcontainer.json\n```\n\n----------------------------------------\n\nTITLE: Complete Devcontainer Configuration with Features and Lifecycle Hooks\nDESCRIPTION: Sample devcontainer.json showing how to integrate multiple features with custom lifecycle commands. Demonstrates sequential and parallel command execution syntax.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/features-contribute-lifecycle-scripts.md#2025-04-17_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"image\": \"ubuntu\",\n    \"features\": {\n        \"featureA\":  {},\n        \"featureB\":  {},\n    },\n    \"postCreateCommand\":  \"userPostCreate.sh\",\n    \"postAttachCommand\": {\n        \"server\": \"npm start\",\n        \"db\": [\"mysql\", \"-u\", \"root\", \"-p\", \"my database\"]\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: File Structure for Dev Container Templates\nDESCRIPTION: Example directory structure for organizing multiple Dev Container Templates in a single repository. Each template has its own subdirectory with required files.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-templates-distribution.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── README.md\n├── src\n│   ├── dotnet\n│   │   ├── devcontainer-template.json\n│   │   ├── .devcontainer\n│   │       ├── devcontainer.json\n│   │       └── ...\n│   │   ├── ...\n|   ├\n│   ├── docker-from-docker\n│   │   ├── devcontainer-template.json\n│   │   ├── .devcontainer\n│   │       ├── devcontainer.json\n│   │       ├── Dockerfile\n│   │       └── ...\n│   │   ├── ...\n|   ├\n│   ├── go-postgres\n│   │   ├── devcontainer-template.json\n│   │   ├── .devcontainer\n│   │       ├── devcontainer.json\n│   │       ├── docker-compose.yml\n│   │       ├── Dockerfile\n│   │       └── ...\n│   │   ├── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Dependencies with installsAfter in Dev Container Feature\nDESCRIPTION: Example of using installsAfter property to specify soft dependencies that only affect installation order of already-queued Features, without version constraints or options.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"My Feature\",\n    \"id\": \"myFeature\",\n    \"version\": \"1.0.0\",\n    \"installsAfter\": [\n        \"foo\",\n        \"bar\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Feature Configuration After Renaming\nDESCRIPTION: Example of an updated devcontainer-feature.json configuration after renaming a feature, showing how to maintain backward compatibility with legacyIds.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_15\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"id\": \"docker-outside-of-docker\",\n    \"version\": \"2.0.2\",\n    \"name\": \"Docker (Docker-outside-of-Docker)\",\n    \"documentationURL\": \"https://github.com/devcontainers/features/tree/main/src/docker-outside-of-docker\",\n    \"legacyIds\": [\n        \"docker-from-docker\"\n    ]\n    ....\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Notation for Feature Version in devcontainer.json\nDESCRIPTION: These two JSON snippets demonstrate the shorthand notation for specifying a Feature version in devcontainer.json. Both examples are equivalent, with the first using the shorthand string notation and the second using the full object notation.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n\"features\": {\n  \"ghcr.io/owner/repo/go\": \"1.18\"\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n\"features\": {\n  \"ghcr.io/owner/repo/go\": {\n    \"version\": \"1.18\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PostAttachCommand Array Format\nDESCRIPTION: Example of postAttachCommand using array format which preserves single quotes in output.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n\"postAttachCommand\": [\"echo\", \"foo='bar'\"]\n```\n\n----------------------------------------\n\nTITLE: Publishing Dev Container Features to OCI Registry with ORAS\nDESCRIPTION: Demonstrates pushing a packaged feature to an OCI registry using the ORAS tool. This example publishes multiple versions of a Go feature following semantic versioning conventions.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features-distribution.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# ghcr.io/devcontainers/features/go:1 \nREGISTRY=ghcr.io\nNAMESPACE=devcontainers/features\nFEATURE=go\n\nARTIFACT_PATH=devcontainer-feature-go.tgz\n\nfor VERSION in 1  1.2  1.2.3  latest\ndo\n    oras push ${REGISTRY}/${NAMESPACE}/${FEATURE}:${VERSION} \\\n            --manifest-config /dev/null:application/vnd.devcontainers \\\n                             ./${ARTIFACT_PATH}:application/vnd.devcontainers.layer.v1+tar\ndone\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Property in Dev Container Feature JSON\nDESCRIPTION: Example of using the include property in devcontainer-feature.json to specify paths for code sharing between features.\nSOURCE: https://github.com/devcontainers/spec/blob/main/proposals/features-library.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"featureA\",\n    \"version\": \"0.0.1\",\n    \"include\": [\n        \"../../utils/\",\n        \"../../company-welcome-message.txt\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: OCI Manifest with Feature Metadata Annotation\nDESCRIPTION: Example of an OCI manifest with the dev.containers.metadata annotation containing the serialized devcontainer-feature.json content. This allows dependency resolution without downloading the feature tarball.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/feature-dependencies.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"config\": {\n    \"mediaType\": \"application/vnd.devcontainers\",\n    \"digest\": \"sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n    \"size\": 0\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.devcontainers.layer.v1+tar\",\n      \"digest\": \"sha256:738af5504b253dc6de51d2cb1556cdb7ce70ab18b2f32b0c2f12650ed6d2e4bc\",\n      \"size\": 3584,\n      \"annotations\": {\n        \"org.opencontainers.image.title\": \"devcontainer-feature-myFeature.tgz\"\n      }\n    }\n  ],\n  \"annotations\": {\n    \"dev.containers.metadata\": \"{\\\"name\\\": \\\"My Feature\\\",\\\"id\\\": \\\"myFeature\\\",\\\"version\\\": \\\"1.0.0\\\",\\\"dependsOn\\\": {\\\"ghcr.io/myotherFeature:1\\\": {\\\"flag\\\": true},\\\"features.azurecr.io/aThirdFeature:1\\\": {},\\\"features.azurecr.io/aFourthFeature:1.2.3\\\": {}}}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Container Run Arguments Example\nDESCRIPTION: Example showing how to specify Docker run arguments for debugging capabilities\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"runArgs\": [ \"--cap-add=SYS_PTRACE\", \"--security-opt\", \"seccomp=unconfined\" ]\n```\n\n----------------------------------------\n\nTITLE: Publishing Dev Container Collection Metadata to OCI Registry\nDESCRIPTION: Shows how to push the devcontainer-collection.json metadata file to an OCI registry. This file serves as a catalog of all features available in a particular namespace.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features-distribution.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# ghcr.io/devcontainers/features\nREGISTRY=ghcr.io\nNAMESPACE=devcontainers/features\n\noras push ${REGISTRY}/${NAMESPACE}:latest \\\n        --manifest-config /dev/null:application/vnd.devcontainers \\\n                            ./devcontainer-collection.json:application/vnd.devcontainers.collection.layer.v1+json\n```\n\n----------------------------------------\n\nTITLE: PostAttachCommand Object Format\nDESCRIPTION: Example of postAttachCommand using object format for parallel execution of multiple commands.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"postAttachCommand\": {\n    \"server\": \"npm start\",\n    \"db\": [\"mysql\", \"-u\", \"root\", \"-p\", \"my database\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Dev Container Collection JSON to OCI Registry\nDESCRIPTION: Bash script showing how to push the auto-generated devcontainer-collection.json file to an OCI registry using ORAS. This file contains metadata for all templates in the collection.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-templates-distribution.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# ghcr.io/devcontainers/templates\nREGISTRY=ghcr.io\nNAMESPACE=devcontainers/templates\n\noras push ${REGISTRY}/${NAMESPACE}:latest \\\n        --config /dev/null:application/vnd.devcontainers \\\n                            ./devcontainer-collection.json:application/vnd.devcontainers.collection.layer.v1+json\n```\n\n----------------------------------------\n\nTITLE: Example overrideFeatureInstallOrder Configuration in JSON\nDESCRIPTION: An example configuration showing how Features can be prioritized for installation using the overrideFeatureInstallOrder property in devcontainer.json. This affects the roundPriority assignment during dependency resolution.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/feature-dependencies.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\noverrideFeatureInstallOrder = [\n  \"foo\",\n  \"bar\",\n  \"baz\"\n]\n```\n\n----------------------------------------\n\nTITLE: Adding GPU Property to hostRequirements Table in Markdown\nDESCRIPTION: Markdown table showing the proposed 'gpu' property for the hostRequirements object in the devcontainer.json schema. The property can be a boolean, the string 'optional', or an object to indicate GPU requirements.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/gpu-host-requirement.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Type | Description |\n|----------|------|-------------|\n| `hostRequirements.gpu` 🏷️ | boolean \\| 'optional' | Indicates whether or not a GPU is required. A value 'optional' indicates that might be used if available. The object is described in the table below. The default is false. For example: `\"hostRequirements\": \"optional\"` |\n```\n\n----------------------------------------\n\nTITLE: Configuring Secrets Input Format in JSON\nDESCRIPTION: Example JSON structure for passing secrets to dev containers through a file. The format allows specification of key-value pairs for sensitive data like API keys, configuration settings, and passwords. This represents one possible implementation approach for secret management.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/secrets-support.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"API_KEY\": \"adsjhsd6dfwdjfwde7edwfwedfdjedwf7wedfwe\",\n\t\"NUGET_CONFIG\": \"<config>\\n    <add key=\\\"dependencyVersion\\\" value=\\\"Highest\\\" />\\n    <add key=\\\"http_proxy\\\" value=\\\"http://company-squid:3128@contoso.com\\\" />\\n</config>\",\n\t\"PASSWORD\": \"Simple Passwords\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON for Renamed Docker Feature with Legacy ID\nDESCRIPTION: Example showing the updated configuration after renaming docker-from-docker to docker-outside-of-docker, including the legacyIds property for backward compatibility.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/features-legacyIds-deprecated-properties.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"id\": \"docker-outside-of-docker\",\n    \"version\": \"2.0.2\",\n    \"name\": \"Docker (Docker-outside-of-Docker)\",\n    \"documentationURL\": \"https://github.com/devcontainers/features/tree/main/src/docker-outside-of-docker\",\n    \"legacyIds\": [\n        \"docker-from-docker\"\n    ]\n    ....\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool-Specific Properties in devcontainer.json for VS Code\nDESCRIPTION: This snippet demonstrates how to use the 'customizations' property in devcontainer.json to specify tool-specific configurations. It shows the structure for VS Code-specific settings, which are nested under the 'vscode' namespace within 'customizations'.\nSOURCE: https://github.com/devcontainers/spec/blob/main/contributing.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// Configure tool-specific properties.\n\"customizations\": {\n     // Configure properties specific to VS Code.\n     \"vscode\": {\n          // Set *default* container specific settings.json values on container create.\n          \"settings\": {},\n\t\t\t\n          // Additional VS Code specific properties...\n     }\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Utility Functions in Common Shell Script\nDESCRIPTION: Example of a common shell script containing shared functions that can be reused across multiple features.\nSOURCE: https://github.com/devcontainers/spec/blob/main/proposals/features-library.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# utils/common.sh\nfunction common_function() {\n   echo \"Hello, '$1'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Dev Container Template to OCI Registry with ORAS\nDESCRIPTION: Example bash script demonstrating how to push a Dev Container Template to an OCI registry using ORAS. It pushes multiple versions of the template according to semver rules.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-templates-distribution.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# ghcr.io/devcontainers/templates/go:1\nREGISTRY=ghcr.io\nNAMESPACE=devcontainers/templates\nTEMPLATE=go\n\nARTIFACT_PATH=devcontainer-template-go.tgz\n\nfor VERSION in 1  1.2  1.2.3  latest\ndo\n        oras push ${REGISTRY}/${NAMESPACE}/${TEMPLATE}:${VERSION} \\\n                --config /dev/null:application/vnd.devcontainers \\\n                        ./${ARTIFACT_PATH}:application/vnd.devcontainers.layer.v1+tar\ndone\n```\n\n----------------------------------------\n\nTITLE: Using Shared Functions in Feature Installation Script\nDESCRIPTION: Example showing how to import and use shared functions from a common utility script in a feature's install script.\nSOURCE: https://github.com/devcontainers/spec/blob/main/proposals/features-library.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# src/featureA/install.sh\n\n# Include common functions\nsource \"../../utils/common.sh\"\n\n# Use common function\ncommon_function \"devcontainers\"\n```\n\n----------------------------------------\n\nTITLE: Docker Build Options Example\nDESCRIPTION: Example demonstrating how to specify Docker build options in devcontainer.json\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"build\": { \"options\": [ \"--add-host=host.docker.internal:host-gateway\" ] }\n```\n\n----------------------------------------\n\nTITLE: Option Name Sanitization for Environment Variables in JavaScript\nDESCRIPTION: This function sanitizes Feature option names to ensure they are valid as environment variable names. It replaces non-word characters with underscores, removes leading digits, and converts the name to uppercase.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n(str: string) => str\n\t.replace(/[^\\w_]/g, '_')\n\t.replace(/^[\\d_]+/g, '_')\n\t.toUpperCase();\n```\n\n----------------------------------------\n\nTITLE: Docker Build Arguments Example\nDESCRIPTION: Example showing how to specify Docker build arguments in devcontainer.json configuration\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"build\": { \"args\": { \"MYARG\": \"MYVALUE\", \"MYARGFROMENVVAR\": \"${localEnv:VARIABLE_NAME}\" } }\n```\n\n----------------------------------------\n\nTITLE: Basic Devcontainer Lockfile Example in JSONC\nDESCRIPTION: Demonstrates the structure of a devcontainer lockfile with two features: an OCI feature and a tarball feature. Each feature entry includes version, resolved location, and integrity checksum.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-lockfile.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"features\": {\n        \"ghcr.io/devcontainers/features/node:1\": {\n            \"version\": \"1.0.4\",\n            \"resolved\": \"ghcr.io/devcontainers/features/node@sha256:567d704b3f4d3eca3acee51ded7c460a8395436d135d53d1175fb565daff42b8\",\n            \"integrity\": \"sha256:567d704b3f4d3eca3acee51ded7c460a8395436d135d53d1175fb565daff42b8\"\n        },\n        \"https://mycustomdomain.com/devcontainer-feature-myfeature.tgz\": {\n            \"version\": \"1.2.3\",\n            \"resolved\": \"https://mycustomdomain.com/devcontainer-feature-myfeature.tgz\",\n            \"integrity\": \"sha256:567d704b3f4d3eca3acee51ded7c460a8395436d135d53d1175fb565daff42b8\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Bundled Scripts in Feature Lifecycle Hooks\nDESCRIPTION: Example showing how to reference scripts bundled with a Feature in lifecycle commands. This feature depends on featureA and will execute after it during the container build process.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/features-contribute-lifecycle-scripts.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n   \"id\": \"featureB\",\n   \"version\": \"1.0.0\",\n   \"postCreateCommand\": \"/usr/myDir/bundledScript.sh\",\n   \"installsAfter\": [\n        \"featureA\"\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Devcontainer Lockfile Example with Dependencies in JSONC\nDESCRIPTION: Illustrates a devcontainer lockfile that includes feature dependencies. The 'dependsOn' property lists the dependent features, which are also recorded in the lockfile.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-lockfile.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"features\": {\n    \"ghcr.io/codspace/dependson/a\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"ghcr.io/codspace/dependson/a@sha256:932027ef71da186210e6ceb3294c3459caaf6b548d2b547d5d26be3fc4b2264a\",\n      \"integrity\": \"sha256:932027ef71da186210e6ceb3294c3459caaf6b548d2b547d5d26be3fc4b2264a\",\n      \"dependsOn\": [\n        \"ghcr.io/codspace/dependson/e:2\"\n      ]\n    },\n    \"ghcr.io/codspace/dependson/e:2\": {\n      \"version\": \"2.3.4\",\n      \"resolved\": \"ghcr.io/codspace/dependson/e@sha256:9f36f159c70f8bebff57f341904b030733adb17ef12a5d58d4b3d89b2a6c7d5a\",\n      \"integrity\": \"sha256:9f36f159c70f8bebff57f341904b030733adb17ef12a5d58d4b3d89b2a6c7d5a\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dev Container Metadata JSON Structure\nDESCRIPTION: The proposed JSON structure for storing dev container configuration and feature metadata in image labels. Each entry in the array represents either a feature or a devcontainer.json configuration, with properties like init settings, privileges, mount points, and customizations.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/image-metadata.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"id\"?: string,\n\t\t\"init\"?: boolean,\n\t\t\"privileged\"?: boolean,\n\t\t\"capAdd\"?: string[],\n\t\t\"securityOpt\"?: string[],\n\t\t\"entrypoint\"?: string,\n\t\t\"mounts\"?: [],\n\t\t...\n\t\t\"customizations\"?: {\n\t\t\t...\n\t\t}\n\t},\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect RunArgs Format Example\nDESCRIPTION: Shows incorrect usage of single quotes in runArgs array that should be avoided.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"runArgs\": [\"--device-cgroup-rule='my rule here'\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Files to Open on Codespaces Creation\nDESCRIPTION: Example showing how to specify which files should be automatically opened when a GitHub Codespace is created using the 'customizations.codespaces.openFiles' property. Files are opened in the specified order with the first file activated.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/supporting-tools.md#2025-04-17_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n\"customizations\": {\n\t// Configure properties specific to Codespaces.\n\t\"codespaces\": {\n\t\t\"openFiles\": [\n\t\t\t\"README\"\n\t\t\t\"src/index.js\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Docker-in-Docker Feature with Dev Container ID in JSON\nDESCRIPTION: This snippet demonstrates how to use the dev container id in the 'docker-in-docker' Feature configuration, specifically for mounting a volume.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"id\": \"docker-in-docker\",\n    \"version\": \"1.0.4\",\n    // ...\n    \"mounts\": [\n        {\n            \"source\": \"dind-var-lib-docker-${devcontainerId}\",\n            \"target\": \"/var/lib/docker\",\n            \"type\": \"volume\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Build Target Example\nDESCRIPTION: Example showing how to specify a Docker build target in devcontainer.json\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"build\": { \"target\": \"development\" }\n```\n\n----------------------------------------\n\nTITLE: Assigning Round Priority for Feature Installation Order in JavaScript\nDESCRIPTION: This snippet demonstrates how the 'overrideFeatureInstallOrder' property is used to assign round priorities to Features, influencing their installation order while respecting dependencies.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\noverrideFeatureInstallOrder = [\n  \"foo\",\n  \"bar\",\n  \"baz\"\n]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst roundPriority = {\n  \"foo\": 3,\n  \"bar\": 2,\n  \"baz\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Configuration in GitHub Codespaces\nDESCRIPTION: Example showing how to disable the automatic configuration that GitHub Codespaces normally performs when no postCreateCommand is specified. This gives developers more control over the setup process.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/supporting-tools.md#2025-04-17_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n\"customizations\": {\n\t// Configure properties specific to Codespaces.\n\t\"codespaces\": {\n\t\t\"disableAutomaticConfiguration\": true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON for Current Docker Feature Configuration\nDESCRIPTION: Example showing the current configuration of a docker-from-docker Feature in devcontainer-feature.json before renaming.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/features-legacyIds-deprecated-properties.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"id\": \"docker-from-docker\",\n    \"version\": \"2.0.1\",\n    \"name\": \"Docker (Docker-from-Docker)\",\n    \"documentationURL\": \"https://github.com/devcontainers/features/tree/main/src/docker-from-docker\",\n    ....\n}\n```\n\n----------------------------------------\n\nTITLE: Example OCI Manifest with Dev Container Feature Metadata Annotation\nDESCRIPTION: Illustrates an OCI manifest with a 'dev.containers.metadata' annotation that contains the escaped JSON of the feature's metadata. This enables discovery and validation of features in OCI registries.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features-distribution.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"config\": {\n    \"mediaType\": \"application/vnd.devcontainers\",\n    \"digest\": \"sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n    \"size\": 0\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.devcontainers.layer.v1+tar\",\n      \"digest\": \"sha256:738af5504b253dc6de51d2cb1556cdb7ce70ab18b2f32b0c2f12650ed6d2e4bc\",\n      \"size\": 3584,\n      \"annotations\": {\n        \"org.opencontainers.image.title\": \"devcontainer-feature-myFeature.tgz\"\n      }\n    }\n  ],\n  \"annotations\": {\n    \"dev.containers.metadata\": \"{\\\"name\\\": \\\"My Feature\\\",\\\"id\\\": \\\"myFeature\\\",\\\"version\\\": \\\"1.0.0\\\",\\\"dependsOn\\\": {\\\"ghcr.io/myotherFeature:1\\\": {\\\"flag\\\": true},\\\"features.azurecr.io/aThirdFeature:1\\\": {},\\\"features.azurecr.io/aFourthFeature:1.2.3\\\": {}}}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RunArgs in DevContainer JSON\nDESCRIPTION: Demonstrates the correct array format for runArgs property without single quotes for parameters containing spaces.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"runArgs\": [\"--device-cgroup-rule=my rule here\"]\n```\n\n----------------------------------------\n\nTITLE: Resulting roundPriority Assignments for overrideFeatureInstallOrder\nDESCRIPTION: A JavaScript representation of how roundPriority values are assigned based on the overrideFeatureInstallOrder array. Features listed earlier receive higher priority values, affecting their installation order.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/feature-dependencies.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nconst roundPriority = {\n  \"foo\": 3,\n  \"bar\": 2,\n  \"baz\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Unique Dev Container ID in JavaScript\nDESCRIPTION: This function computes a unique identifier for a dev container based on its labels. It takes an object of labels, sorts them, creates a SHA-256 hash, and returns a base-32 encoded string.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-id-variable.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\n\nfunction uniqueIdForLabels(idLabels) {\n\tconst stringInput = JSON.stringify(idLabels, Object.keys(idLabels).sort()); // sort properties\n\tconst bufferInput = Buffer.from(stringInput, 'utf-8');\n\n\tconst hash = crypto.createHash('sha256')\n\t\t.update(bufferInput)\n\t\t.digest();\n\n\tconst uniqueId = BigInt(`0x${hash.toString('hex')}`)\n\t\t.toString(32)\n\t\t.padStart(52, '0');\n\treturn uniqueId;\n}\n```\n\n----------------------------------------\n\nTITLE: Current Feature Configuration Before Renaming\nDESCRIPTION: Example of a devcontainer-feature.json configuration before renaming a feature, showing the current id, version, and other metadata.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_14\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"id\": \"docker-from-docker\",\n    \"version\": \"2.0.1\",\n    \"name\": \"Docker (Docker-from-Docker)\",\n    \"documentationURL\": \"https://github.com/devcontainers/features/tree/main/src/docker-from-docker\",\n    ....\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Unique ID for Labels in JavaScript\nDESCRIPTION: This JavaScript function computes a unique ID for a set of labels using SHA-256 hashing and base-32 encoding. It takes an object with labels as input and returns a string as the result.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-features.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst crypto = require('crypto');\nfunction uniqueIdForLabels(idLabels) {\n\tconst stringInput = JSON.stringify(idLabels, Object.keys(idLabels).sort()); // sort properties\n\tconst bufferInput = Buffer.from(stringInput, 'utf-8');\n\tconst hash = crypto.createHash('sha256')\n\t\t.update(bufferInput)\n\t\t.digest();\n\tconst uniqueId = BigInt(`0x${hash.toString('hex')}`)\n\t\t.toString(32)\n\t\t.padStart(52, '0');\n\treturn uniqueId;\n}\n```\n\n----------------------------------------\n\nTITLE: PostAttachCommand String Format\nDESCRIPTION: Example of postAttachCommand using string format where shell parsing removes single quotes.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainerjson-reference.md#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"postAttachCommand\": \"echo foo='bar'\"\n```\n\n----------------------------------------\n\nTITLE: Feature Installation Script Moving Bundled Scripts\nDESCRIPTION: Shell script showing how a Feature's install.sh would copy a bundled script to a persistent location on the container, making it available for lifecycle hooks.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/features-contribute-lifecycle-scripts.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\ncp ./bundleScript /usr/myDir\n...\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Host Definition in Dev Container Build\nDESCRIPTION: Example configuration showing how to add a host definition during container build using the proposed options property.\nSOURCE: https://github.com/devcontainers/spec/blob/main/proposals/build-options.md#2025-04-17_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"build\": {\n    \"dockerfile\": \"Dockerfile\",\n    \"options\": [\n      \"--add-host=host.docker.internal:host-gateway\"\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Host Network in Dev Container Build\nDESCRIPTION: Example configuration demonstrating how to enable host network access during container build using the proposed options property.\nSOURCE: https://github.com/devcontainers/spec/blob/main/proposals/build-options.md#2025-04-17_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"build\": {\n    \"dockerfile\": \"Dockerfile\",\n    \"options\": [\n      \"--network=host\"\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Feature Dependencies\nDESCRIPTION: Example of including a library feature as a dependency using the include property.\nSOURCE: https://github.com/devcontainers/spec/blob/main/proposals/features-library.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"featureA\",\n    \"version\": \"0.0.1\",\n    \"include\": [\n        \"ghcr.io/devcontainers/features/utils:0.0.1\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GPU Object Properties in Markdown Table\nDESCRIPTION: Markdown table defining the properties available when using the object form of the GPU requirement. It includes options for specifying minimum core count and memory requirements.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/gpu-host-requirement.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property | Type | Description |\n|----------|------|-------------|\n| `hostRequirements.gpu.cores` 🏷️ | integer | Indicates the minimum required number of cores. For example: `\"hostRequirements\": { \"gpu\": {\"cores\": 2} }` |\n| `hostRequirements.gpu.memory` 🏷️ | string |  A string indicating minimum memory requirements with a `tb`, `gb`, `mb`, or `kb` suffix. For example, `\"hostRequirements\": {\"memory\": \"4gb\"}` |\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Lifecycle Scripts in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure parallel execution of lifecycle scripts in a dev container. It shows the postCreateCommand object with two parallel commands: one for starting a server and another for initializing a database.\nSOURCE: https://github.com/devcontainers/spec/blob/main/docs/specs/devcontainer-reference.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"postCreateCommand\": {\n    \"server\": \"npm start\",\n    \"db\": [\"mysql\", \"-u\", \"root\", \"-p\", \"my database\"]\n  }\n}\n```"
  }
]