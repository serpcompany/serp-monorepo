[
  {
    "owner": "graphql-hive",
    "repo": "graphql-yoga",
    "content": "TITLE: Creating and Starting a GraphQL Yoga Server with Node.js\nDESCRIPTION: Complete example demonstrating how to create a GraphQL schema, initialize a GraphQL Yoga server, and start a Node.js HTTP server. Includes schema definition with typeDefs and resolvers, and server configuration.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String\n      }\n    `,\n    resolvers: {\n      Query: {\n        hello: () => 'Hello from Yoga!'\n      }\n    }\n  })\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting a Basic GraphQL Yoga Server with Node.js\nDESCRIPTION: Complete example showing how to create a schema with typeDefs and resolvers, initialize the Yoga server, and start a Node.js HTTP server on port 4000. The example creates a simple GraphQL server with a 'hello' query.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/graphql-yoga/README.md#2025-04-15_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String\n      }\n    `,\n    resolvers: {\n      Query: {\n        hello: () => 'Hello from Yoga!'\n      }\n    }\n  })\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga and GraphQL dependencies\nDESCRIPTION: Command to install the required packages for setting up GraphQL Yoga. Both graphql-yoga and graphql packages are required.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Security Plugins with GraphQL Armor in Yoga\nDESCRIPTION: This code demonstrates how to implement security plugins from GraphQL Armor in a GraphQL Yoga application. It imports various protection plugins including cost limit, max aliases, max depth, max directives, and max tokens to prevent abuse and protect the API from malicious attacks.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/prepare-for-production.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport { costLimitPlugin } from '@escape.tech/graphql-armor-cost-limit'\nimport { maxAliasesPlugin } from '@escape.tech/graphql-armor-max-aliases'\nimport { maxDepthPlugin } from '@escape.tech/graphql-armor-max-depth'\nimport { maxDirectivesPlugin } from '@escape.tech/graphql-armor-max-directives'\nimport { maxTokensPlugin } from '@escape.tech/graphql-armor-max-tokens'\n\nexport const yoga = createYoga({\n  plugins: [\n    costLimitPlugin(),\n    maxTokensPlugin(),\n    maxDepthPlugin(),\n    maxDirectivesPlugin(),\n    maxAliasesPlugin()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing KV Namespaces in GraphQL Yoga resolvers with Cloudflare Workers\nDESCRIPTION: This snippet demonstrates how to access Cloudflare Workers' KV Namespaces within GraphQL Yoga resolvers, including CRUD operations on todos.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-cloudflare-workers.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\n\ninterface Env {\n  MY_NAMESPACE: KVNamespace\n}\n\nconst yoga = createYoga<Env>({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        todo(id: ID!): String\n        todos: [String]\n      }\n      type Mutation {\n        createTodo(id: ID!, text: String!): String\n        deleteTodo(id: ID!): String\n      }\n    `,\n    resolvers: {\n      Query: {\n        todo: (_, { id }, { MY_NAMESPACE }) => MY_NAMESPACE.get(id),\n        todos: (_, __, { MY_NAMESPACE }) => MY_NAMESPACE.list()\n      },\n      Mutation: {\n        // MY_NAMESPACE is available as a GraphQL context\n        createTodo(_, { id, text }, context) {\n          return context.MY_NAMESPACE.put(id, text)\n        },\n        deleteTodo(_, { id }, context) {\n          return context.MY_NAMESPACE.delete(id)\n        }\n      }\n    }\n  })\n})\n\nexport default { fetch: yoga.fetch }\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Handling in GraphQL Yoga\nDESCRIPTION: Complete example showing how to create a GraphQL Yoga server with cookie handling capabilities. The code demonstrates how to get and set cookies using the CookieStore API through GraphQL queries and mutations.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/cookies.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { useCookies } from '@whatwg-node/server-plugin-cookies'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        cookie(name: String): String\n      }\n      type Mutation {\n        setCookie(name: String, value: String): String\n      }\n    `,\n    resolvers: {\n      Query: {\n        async cookie(root, args, ctx: YogaInitialContext) {\n          const cookie = await ctx.request.cookieStore?.get(args.name)\n          return cookie?.value\n        }\n      },\n      Mutation: {\n        async setCookie(root, args, ctx: YogaInitialContext) {\n          await ctx.request.cookieStore?.set(args.name, args.value)\n          return args.value\n        }\n      }\n    }\n  }),\n  plugins: [useCookies()]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.log('Server is running on http://localhost:4000')\n})\n```\n\n----------------------------------------\n\nTITLE: Building an HTTP Executor for GraphQL Yoga\nDESCRIPTION: Creates a GraphQL schema, initializes a Yoga instance, and builds an HTTP executor for testing. This setup allows for simulating HTTP requests to the GraphQL API.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/testing.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { buildHTTPExecutor } from '@graphql-tools/executor-http'\n\nconst schema = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      greetings: String!\n    }\n  `,\n  resolvers: {\n    Query: {\n      greetings: () => 'Hello World!'\n    }\n  }\n})\n\nconst yoga = createYoga({ schema })\n\nconst executor = buildHTTPExecutor({\n  fetch: yoga.fetch\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload with GraphQL Yoga in TypeScript\nDESCRIPTION: A complete example showing how to set up file upload functionality in GraphQL Yoga. This includes creating a File scalar type, defining mutations for reading and saving files, and implementing the resolvers that process the uploaded files.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/file-uploads.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport { createServer } from 'http'\n\n// Provide your schema\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      scalar File\n\n      type Query {\n        greetings: String!\n      }\n\n      type Mutation {\n        readTextFile(file: File!): String!\n        saveFile(file: File!): Boolean!\n      }\n    `,\n    resolvers: {\n      Query: {\n        greetings: () => 'Hello World!'\n      },\n      Mutation: {\n        readTextFile: async (_, { file }: { file: File }) => {\n          const textContent = await file.text()\n          return textContent\n        }\n\n        saveFile: async (_, { file }: { file: File }) => {\n          try {\n            const fileArrayBuffer = await file.arrayBuffer()\n            await fs.promises.writeFile(\n              path.join(__dirname, file.name),\n              Buffer.from(fileArrayBuffer),\n            )\n          } catch (e) {\n            return false\n          }\n          return true\n        },\n      }\n    }\n  })\n})\n\n// Start the server and explore http://localhost:4000/graphql\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Resolvers with In-Memory Data\nDESCRIPTION: Implements resolver functions for the Query and Link types, including TypeScript types and sample data storage. Demonstrates resolver implementation for feed query and Link type fields.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/04-a-simple-query.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Link = {\n  id: string\n  url: string\n  description: string\n}\n\nconst links: Link[] = [\n  {\n    id: 'link-0',\n    url: 'https://graphql-yoga.com',\n    description: 'The easiest way of setting up a GraphQL server'\n  }\n]\n\nconst resolvers = {\n  Query: {\n    info: () => `This is the API of a Hackernews Clone`,\n    feed: () => links\n  },\n  Link: {\n    id: (parent: Link) => parent.id,\n    description: (parent: Link) => parent.description,\n    url: (parent: Link) => parent.url\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Advanced GraphQL Schema with Query and Mutation Types\nDESCRIPTION: This snippet demonstrates a more complex GraphQL schema with Query and Mutation types, including fields for querying users and creating a new user. It also defines a User type with id and name fields.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  users: [User!]!\n  user(id: ID!): User\n}\n\ntype Mutation {\n  createUser(name: String!): User!\n}\n\ntype User {\n  id: ID!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Yoga Route Handler in Next.js App Router\nDESCRIPTION: Setup of GraphQL Yoga as a custom route handler in Next.js 13+ App Router. Creates a GraphQL schema with a simple query and configures the yoga instance with proper endpoint settings.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-nextjs.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Next.js Custom Route Handler: https://nextjs.org/docs/app/building-your-application/routing/router-handlers\nimport { createSchema, createYoga } from 'graphql-yoga'\n\ninterface NextContext {\n  params: Promise<Record<string, string>>\n}\n\nconst { handleRequest } = createYoga<NextContext>({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        greetings: String\n      }\n    `,\n    resolvers: {\n      Query: {\n        greetings: () => 'This is the `greetings` field of the root `Query` type'\n      }\n    }\n  }),\n\n  // While using Next.js file convention for routing, we need to configure Yoga to use the correct endpoint\n  graphqlEndpoint: '/api/graphql',\n\n  // Yoga needs to know how to create a valid Next response\n  fetchAPI: { Response }\n})\n\nexport { handleRequest as GET, handleRequest as POST, handleRequest as OPTIONS }\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Yoga using Modules Approach in Cloudflare Workers\nDESCRIPTION: This example shows how to set up GraphQL Yoga using the modules approach, which exports a fetch handler for Cloudflare Workers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-cloudflare-workers.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n    `,\n    resolvers: {\n      Query: {\n        hello: () => 'Hello World!'\n      }\n    }\n  })\n})\nexport default { fetch: yoga.fetch }\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Yoga Integration with Express\nDESCRIPTION: Simple implementation that creates an Express application and integrates GraphQL Yoga by binding it to a specific endpoint.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-express.mdx#2025-04-15_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { createYoga } from 'graphql-yoga'\n\nconst app = express()\n\nconst yoga = createYoga()\n\n// Bind GraphQL Yoga to the graphql endpoint to avoid rendering the playground on any path\napp.use(yoga.graphqlEndpoint, yoga)\n\napp.listen(4000, () => {\n  console.log('Running a GraphQL API server at http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Yoga Lambda Handler\nDESCRIPTION: Complete implementation of a GraphQL Yoga server as an AWS Lambda function handler. The code sets up a GraphQL schema and handles the Lambda event lifecycle using streamified responses.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-aws-lambda.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pipeline } from 'stream/promises'\nimport type { Context, LambdaFunctionURLEvent } from 'aws-lambda'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga<{\n  event: LambdaFunctionURLEvent\n  lambdaContext: Context\n  res: awslambda.ResponseStream\n}>({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        greetings: String\n      }\n    `,\n    resolvers: {\n      Query: {\n        greetings: () => 'This is the `greetings` field of the root `Query` type'\n      }\n    }\n  })\n})\n\nexport const handler = awslambda.streamifyResponse(async function handler(\n  event: LambdaFunctionURLEvent,\n  res,\n  lambdaContext\n) {\n  const response = await yoga.fetch(\n    // Construct the URL\n    `https://${event.requestContext.domainName}${event.requestContext.http.path}?${event.rawQueryString}`,\n    {\n      method: event.requestContext.http.method,\n      headers: event.headers as HeadersInit,\n      // Parse the body if needed\n      body: event.body && event.isBase64Encoded ? Buffer.from(event.body, 'base64') : event.body\n    },\n    {\n      event,\n      lambdaContext,\n      res\n    }\n  )\n\n  // Attach the metadata to the response stream\n  res = awslambda.HttpResponseStream.from(res, {\n    statusCode: response.status,\n    headers: Object.fromEntries(response.headers.entries())\n  })\n\n  // Pipe the response body to the response stream\n  if (response.body) {\n    await pipeline(response.body, res)\n  }\n\n  // End the response stream\n  res.end()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL schema using @graphql-tools/schema\nDESCRIPTION: Uses makeExecutableSchema from @graphql-tools/schema to define a GraphQL schema with a 'hello' query that returns 'world'.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeExecutableSchema } from '@graphql-tools/schema'\n\nexport const schema = makeExecutableSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      hello: String\n    }\n  `,\n  resolvers: {\n    Query: {\n      hello: () => 'world'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up a GraphQL Yoga server with Node.js HTTP\nDESCRIPTION: Creates a GraphQL Yoga server instance and integrates it with Node's HTTP server. The server listens on port 4000 and serves the GraphQL API at /graphql endpoint.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { schema } from './schema'\n\n// Create a Yoga instance with a GraphQL schema.\nconst yoga = createYoga({ schema })\n\n// Pass it into a server to hook into request handlers.\nconst server = createServer(yoga)\n\n// Start the server and you're done!\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Mutation and Query Operations in GraphQL Yoga\nDESCRIPTION: Demonstrates how to test mutation and query operations using the HTTP executor. It includes type assertions and result validation for a simple greeting query.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/testing.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parse } from 'graphql'\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { buildHTTPExecutor } from '@graphql-tools/executor-http'\n\nconst schema = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      greetings: String!\n    }\n  `,\n  resolvers: {\n    Query: {\n      greetings: () => 'Hello World!'\n    }\n  }\n})\n\nfunction assertSingleValue<TValue extends object>(\n  value: TValue | AsyncIterable<TValue>\n): asserts value is TValue {\n  if (Symbol.asyncIterator in value) {\n    throw new Error('Expected single value')\n  }\n}\n\nconst yoga = createYoga({ schema })\n\nconst executor = buildHTTPExecutor({\n  fetch: yoga.fetch,\n  endpoint: `http://yoga/graphql`\n})\n\nconst result = await executor({\n  document: parse(/* GraphQL */ `\n    query {\n      greetings\n    }\n  `)\n})\n\nassertSingleValue(result)\n\nconsole.assert(\n  result.data?.greetings === 'Hello World!',\n  `Expected 'Hello World!' but got ${result.data.greetings}`\n)\n```\n\n----------------------------------------\n\nTITLE: Extending Context with Function\nDESCRIPTION: Demonstrates how to extend context using a function that returns an object for each request.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/context.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        someNumber: Int!\n      }\n    `,\n    resolvers: {\n      Query: {\n        someNumber(_, _args, context) {\n          return context.someNumber\n        }\n      }\n    }\n  }),\n  context() {\n    return { someNumber: 13 }\n  }\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to S3 with GraphQL Yoga\nDESCRIPTION: Example demonstrating how to upload files to Amazon S3 using GraphQL Yoga. It uses the AWS SDK for JavaScript v3 to handle the S3 operations, converting the uploaded file to a buffer and sending it to S3.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/file-uploads.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http'\nimport { createYoga } from 'graphql-yoga'\nimport { PutObjectCommand, S3Client } from '@aws-sdk/client-s3'\n\nconst client = new S3Client({})\n\n// Provide your schema\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      scalar File\n\n      type Mutation {\n        upload(file: File!): Boolean!\n      }\n    `,\n    resolvers: {\n      Mutation: {\n        upload: async (_, { file }: { file: File }) => {\n          try {\n            await client.send(\n              new PutObjectCommand({\n                Bucket: 'test-bucket',\n                Key: file.name,\n                Body: Buffer.from(await file.arrayBuffer())\n              })\n            )\n            return true\n          } catch (e) {\n            return false\n          }\n        }\n      }\n    }\n  })\n})\n\n// Start the server and explore http://localhost:4000/graphql\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from Apollo Server to GraphQL Yoga\nDESCRIPTION: Example showing how to migrate from Apollo Server to GraphQL Yoga with Apollo Server Errors plugin.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-apollo-server.mdx#2025-04-15_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport { schema } from './schema'\n- import { ApolloServer } from 'apollo-server'\n+ import { createYoga } from 'graphql-yoga'\n+ import { useApolloServerErrors } from '@envelop/apollo-server-errors'\n\n- const server = new ApolloServer({\n+ const yoga = createYoga({\n  // You can also pass `typeDefs` and `resolvers` here directly if you previously use `ApolloServer` constructor to build your `GraphQLSchema`\n  // schema: createSchema({ typeDefs, resolvers }),\n  schema,\n+  plugins: [useApolloServerErrors()],\n})\n\n+ const server = createServer(yoga)\n\nserver.listen(4000)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Federation Gateway with Apollo Managed Federation\nDESCRIPTION: JavaScript example demonstrating how to create a GraphQL Yoga server that implements a Federation Gateway connected to Apollo GraphOS for managed federation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { useManagedFederation } from '@graphql-yoga/apollo-managed-federation'\n\nconst yoga = createYoga({\n  plugins: [useManagedFederation()]\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.log('Server is running on http://localhost:4000')\n})\n\nprocess.on('SIGINT', () => {\n  server.close()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Yoga in Azure Functions\nDESCRIPTION: Complete example of integrating GraphQL Yoga with Azure Functions. Creates a GraphQL schema with a simple query, configures the Yoga instance with Azure Functions context, and sets up the HTTP trigger function that handles GraphQL requests.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-azure-functions.mdx#2025-04-15_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { app, InvocationContext } from '@azure/functions'\n\n// The `InvocationContext` is your server context\nconst yoga = createYoga<InvocationContext>({\n  // This is the path to your Azure function\n  graphqlEndpoint: '/api/yoga',\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        greetings: String\n      }\n    `,\n    resolvers: {\n      Query: {\n        greetings: () => 'This is the `greetings` field of the root `Query` type'\n      }\n    }\n  })\n})\n\napp.http('yoga', {\n  methods: ['GET', 'POST'],\n  authLevel: 'anonymous',\n  handler: yoga\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Subscription Operations in GraphQL Yoga\nDESCRIPTION: Illustrates how to test subscription operations using the HTTP executor. It sets up a counter subscription and validates the streamed results.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/testing.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parse } from 'graphql'\nimport { createSchema, createYoga, Repeater } from 'graphql-yoga'\nimport { buildHTTPExecutor } from '@graphql-tools/executor-http'\n\nconst schema = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      greetings: String!\n    }\n\n    type Subscription {\n      counter: Int!\n    }\n  `,\n  resolvers: {\n    Subscription: {\n      counter: {\n        subscribe: () =>\n          new Repeater((push, end) => {\n            let i = 0\n            const interval = setInterval(() => {\n              push({ counter: i++ })\n            }, 100)\n\n            end.then(() => clearInterval(interval))\n          })\n      }\n    }\n  }\n})\n\nfunction assertStreamValue<TValue extends object>(\n  value: TValue | AsyncIterable<TValue>\n): asserts value is AsyncIterable<TValue> {\n  if (Symbol.asyncIterator in value) {\n    return\n  }\n  throw new Error('Expected single value')\n}\n\nconst executor = buildHTTPExecutor({\n  fetch: yoga.fetch\n})\n\nconst result1 = await executor({\n  document: parse(/* GraphQL */ `\n    subscription {\n      counter\n    }\n  `)\n})\n\nconst result2 = await executor({\n  document: parse(/* GraphQL */ `\n    subscription {\n      counter\n    }\n  `)\n})\n\nassertStreamValue(result1)\nassertStreamValue(result2)\n\nlet iterationCounter = 0\n\nfor await (const value of result1) {\n  if (iterationCounter === 0) {\n    console.assert(value.data?.counter === 1, `Expected 1 but got ${value.data?.counter}`)\n    iterationCounter++\n  } else if (iterationCounter === 1) {\n    console.assert(value.data?.counter === 1, `Expected 2 but got ${value.data?.counter}`)\n    break\n  } else {\n    throw new Error('Expected only two iterations')\n  }\n}\n\nconst result2It = result2[Symbol.asyncIterator]()\nconst itResult = await result2It.next()\nconsole.assert(itResult.value.data?.counter === 1)\nawait roomUpdatesIterator.return?.()\n```\n\n----------------------------------------\n\nTITLE: GraphQL Yoga Server Implementation\nDESCRIPTION: Complete server implementation using GraphQL Yoga, including schema definition, resolver setup, and server creation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/hello-world/README.md#2025-04-15_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSchema, createServer } from 'http'\nimport { createYoga } from 'graphql-yoga'\n\n// ... or using `require()`\n// const { createServer, createSchema } = require('graphql-yoga')\n\nconst typeDefs = /* GraphQL */ `\n  type Query {\n    hello(name: String): String!\n  }\n`\n\nconst resolvers = {\n  Query: {\n    hello: (_, { name }) => `Hello ${name || 'World'}`\n  }\n}\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs,\n    resolvers\n  })\n})\n\nconst server = createServer(yoga)\nserver.listen(() => console.log('Server is running on localhost:4000'))\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Resolvers to Use Prisma Client\nDESCRIPTION: Refactors the GraphQL resolvers to use Prisma Client for database operations instead of in-memory data. Includes query and mutation resolvers for fetching and creating links.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/07-connecting-server-and-database.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from 'graphql-yoga'\nimport type { Link } from '@prisma/client'\nimport type { GraphQLContext } from './context'\n\nconst typeDefs = /* GraphQL */ `\n  ...\n`\n\nconst resolvers = {\n  Query: {\n    info: () => `This is the API of a Hackernews Clone`,\n    feed: async (parent: unknown, args: {}, context: GraphQLContext) => {\n      return context.prisma.link.findMany()\n    }\n  },\n  Link: {\n    id: (parent: Link) => parent.id,\n    description: (parent: Link) => parent.description,\n    url: (parent: Link) => parent.url\n  },\n  Mutation: {\n    async postLink(\n      parent: unknown,\n      args: { description: string; url: string },\n      context: GraphQLContext\n    ) {\n      const newLink = await context.prisma.link.create({\n        data: {\n          url: args.url,\n          description: args.description\n        }\n      })\n      return newLink\n    }\n  }\n}\n\nexport const schema = createSchema({\n  resolvers: [resolvers],\n  typeDefs: [typeDefinitions]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Resolver in TypeScript\nDESCRIPTION: Implements the resolver functions including a postLink mutation resolver that creates new Link objects with unique IDs and adds them to an in-memory array.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/05-a-simple-mutation.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Link = {\n  id: string\n  url: string\n  description: string\n}\n\nconst links: Link[] = [\n  {\n    id: 'link-0',\n    url: 'www.howtographql.com',\n    description: 'Fullstack tutorial for GraphQL'\n  }\n]\n\nconst resolvers = {\n  Query: {\n    info: () => `This is the API of a Hackernews Clone`,\n    feed: () => links\n  },\n  Mutation: {\n    postLink: (parent: unknown, args: { description: string; url: string }) => {\n      let idCount = links.length\n\n      const link: Link = {\n        id: `link-${idCount}`,\n        description: args.description,\n        url: args.url\n      }\n\n      links.push(link)\n\n      return link\n    }\n  },\n  Link: {\n    id: (parent: Link) => parent.id,\n    description: (parent: Link) => parent.description,\n    url: (parent: Link) => parent.url\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Context Usage in GraphQL Yoga\nDESCRIPTION: Demonstrates how to access and use the default context object to log headers from incoming requests. Shows basic server setup with GraphQL Yoga and header logging functionality.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/context.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        logHeader: Boolean\n      }\n    `,\n    resolvers: {\n      Query: {\n        logHeader(_, _args, context) {\n          console.log(context.request.headers.get('x-foo'))\n        }\n      }\n    }\n  })\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL HTTP Server with Node.js and Yoga\nDESCRIPTION: TypeScript code to set up a GraphQL HTTP server using GraphQL Yoga. It creates a server instance, applies the schema, and starts listening on port 4000.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/03-graphql-server.mdx#2025-04-15_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { schema } from './schema'\n\nfunction main() {\n  const yoga = createYoga({ schema })\n  const server = createServer(yoga)\n  server.listen(4000, () => {\n    console.info('Server is running on http://localhost:4000/graphql')\n  })\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Advanced Query Operation Testing in GraphQL Yoga\nDESCRIPTION: Demonstrates advanced testing of query operations by directly processing the request body. This approach provides more control over the testing process.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/testing.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst schema = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      greetings: String!\n    }\n  `,\n  resolvers: {\n    Query: {\n      greetings: () => 'Hello World!'\n    }\n  }\n})\n\nconst yoga = createYoga({ schema })\n\nconst response = await yoga.fetch('http://yoga/graphql', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    query: '{ greetings }'\n  })\n})\n\nconsole.assert(response.status === 200, 'Response status should be 200')\nconst executionResult = await response.json()\nconsole.assert(\n  executionResult.data?.greetings === 'Hello World!',\n  `Expected 'Hello World!' but got ${executionResult.data?.greetings}`\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Prisma Client to GraphQL Context\nDESCRIPTION: Initializes a Prisma Client instance and makes it available in the GraphQL context for resolvers to access database operations.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/07-connecting-server-and-database.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nexport type GraphQLContext = {\n  prisma: PrismaClient\n}\n\nexport async function createContext(): Promise<GraphQLContext> {\n  return { prisma }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Federation Gateway with Hive in JavaScript\nDESCRIPTION: JavaScript example showing how to create a GraphQL Yoga server that implements a Federation Gateway by fetching the supergraph SDL from Hive and stitching it into an executable schema.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { createSupergraphSDLFetcher } from '@graphql-hive/yoga'\nimport { getStitchedSchemaFromSupergraphSdl } from '@graphql-tools/federation'\n\nconst supergraphFetcher = createSupergraphSDLFetcher({\n  key: env.HIVE_CDN_KEY,\n  endpoint: env.HIVE_CDN_URL\n})\nconst { supergraphSdl } = await supergraphFetcher()\n\nconst yoga = createYoga({\n  schema: getStitchedSchemaFromSupergraphSdl({ supergraphSdl })\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Yoga Server for Google Cloud Run\nDESCRIPTION: Implementation of a GraphQL Yoga server for Cloud Run using Node's native HTTP server. The server listens on the port specified by the PORT environment variable or defaults to 4000, which is necessary for Cloud Run deployment.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-gcp.mdx#2025-04-15_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        greetings: String\n      }\n    `,\n    resolvers: {\n      Query: {\n        greetings: () => 'This is the `greetings` field of the root `Query` type'\n      }\n    }\n  })\n})\n\nconst server = createServer(yoga)\nconst port = parseInt(process.env.PORT) || 4000\n\nserver.listen(port, () => {\n  console.info(`Server is running on http://localhost:${port}${yoga.graphqlEndpoint}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Subscription Operation Testing in GraphQL Yoga\nDESCRIPTION: Shows advanced testing of subscription operations by manually processing the event stream. This method allows for fine-grained control over subscription handling and testing.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/testing.mdx#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga, Repeater } from 'graphql-yoga'\n\nconst schema = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      greetings: String!\n    }\n\n    type Subscription {\n      counter: Int!\n    }\n  `,\n  resolvers: {\n    Subscription: {\n      counter: {\n        subscribe: () =>\n          new Repeater((push, end) => {\n            let i = 0\n            const interval = setInterval(() => {\n              push({ counter: i++ })\n            }, 100)\n\n            end.then(() => clearInterval(interval))\n          })\n      }\n    }\n  }\n})\n\nconst yoga = createYoga({ schema })\n\nfunction eventStream<TType = unknown>(source: ReadableStream<Uint8Array>) {\n  return new Repeater<TType>(async (push, end) => {\n    const cancel: Promise<{ done: true }> = end.then(() => ({ done: true }))\n    const iterable = source[Symbol.asyncIterator]()\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const result = await Promise.race([cancel, iterable.next()])\n\n      if (result.done) {\n        break\n      }\n\n      const values = result.value.toString().split('\\n\\n').filter(Boolean)\n      for (const value of values) {\n        if (!value.startsWith('data: ')) {\n          continue\n        }\n        const result = value.replace('data: ', '')\n        push(JSON.parse(result))\n      }\n    }\n\n    iterable.return?.()\n    end()\n  })\n}\n\nconst response = await yoga.fetch('http://yoga/graphql', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    query: 'subscription { counter }'\n  })\n})\n\nconsole.assert(response.status === 200, 'Response status should be 200')\nlet iterationCounter = 0\n\nfor await (const executionResult of eventStream(response.body!)) {\n  if (iterationCounter === 0) {\n    console.assert(\n      executionResult.data?.counter === 1,\n      `Expected 1 but got ${executionResult.data?.counter}`\n    )\n    iterationCounter++\n  } else if (iterationCounter === 1) {\n    console.assert(\n      executionResult.data?.counter === 2,\n      `Expected 2 but got ${executionResult.data?.counter}`\n    )\n    iterationCounter++\n  } else if (iterationCounter === 2) {\n    console.assert(\n      executionResult.data?.counter === 3,\n      `Expected 3 but got ${executionResult.data?.counter}`\n    )\n    break\n  } else {\n    throw new Error('Expected only three iterations')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating GraphQL Yoga with Fastify in TypeScript\nDESCRIPTION: Example code demonstrating how to set up GraphQL Yoga with Fastify. It includes creating a Fastify instance, configuring Yoga with custom logging, and setting up a route to handle GraphQL requests.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-fastify.mdx#2025-04-15_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport fastify, { FastifyReply, FastifyRequest } from 'fastify'\nimport { createYoga } from 'graphql-yoga'\n\n// This is the fastify instance you have created\nconst app = fastify({ logger: true })\n\nconst yoga = createYoga<{\n  req: FastifyRequest\n  reply: FastifyReply\n}>({\n  // Integrate Fastify logger\n  logging: {\n    debug: (...args) => args.forEach(arg => app.log.debug(arg)),\n    info: (...args) => args.forEach(arg => app.log.info(arg)),\n    warn: (...args) => args.forEach(arg => app.log.warn(arg)),\n    error: (...args) => args.forEach(arg => app.log.error(arg))\n  }\n})\n\n/**\n * We pass the incoming HTTP request to GraphQL Yoga\n * and handle the response using Fastify's `reply` API\n * Learn more about `reply` https://www.fastify.io/docs/latest/Reply/\n **/\napp.route({\n  // Bind to the Yoga's endpoint to avoid rendering on any path\n  url: yoga.graphqlEndpoint,\n  method: ['GET', 'POST', 'OPTIONS'],\n  handler: (req, reply) =>\n    yoga.handleNodeRequestAndResponse(req, reply, {\n      req,\n      reply\n    })\n})\n\napp.listen({ port: 4000 })\n```\n\n----------------------------------------\n\nTITLE: Creating a Prisma Schema with SQLite Configuration\nDESCRIPTION: Prisma schema definition that configures SQLite as the database, sets up the Prisma Client generator, and defines a Link model with its fields and attributes.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/06-adding-a-database.mdx#2025-04-15_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\n// 1\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\n// 2\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// 3\nmodel Link {\n  id          Int      @id @default(autoincrement())\n  createdAt   DateTime @default(now())\n  description String\n  url         String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Yoga Middleware for Custom Environments\nDESCRIPTION: This example shows how to create a middleware function that adapts a custom environment request to the WHATWG Request format that GraphQL Yoga understands, and then transforms the WHATWG Response back to a format suitable for the custom environment. It handles the complete request-response cycle and supports various body formats.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/z-other-environments.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga<MyRandomCtx>()\n\nexport async function myMiddleware(req: MyRandomRequest, ctx: MyRandomCtx) {\n  // req.url is a full url here not a relative path\n  const response = await yoga.fetch(\n    req.url,\n    {\n      method: req.method,\n      headers: req.headers,\n      body: req.body // req.body should be a valid BodyInit like an AsyncIterable, a ReadableStream, a Node.js Readable, a string or a Buffer etc...\n    },\n    // Third parameter becomes your server context\n    ctx\n  )\n  // response is a WHATWG `Response` object\n\n  // Create a headers object for your middleware response\n  const headersObj = Object.fromEntries(response.headers.entries())\n\n  // Let's say your environment needs to return something like the below;\n  return {\n    statusCode: response.status,\n    body: response.body,\n    // static responses will disable subscriptions\n    // body: await response.text() If it accepts a string\n    // body: await response.json() If it accepts a json\n    // body: response.body if it accepts a ReadableStream or an AsyncIterable\n    // body: Readable.from(response.body) if it accepts a Node.js Readable\n    headers: headersObj // We assume that your environments accepts a regular JS object for response headers\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Yoga in Next.js Pages Directory\nDESCRIPTION: Integration of GraphQL Yoga with Next.js Pages Directory API routes. Includes configuration to disable body parsing and setup of a basic GraphQL schema.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-nextjs.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nexport const config = {\n  api: {\n    // Disable body parsing (required for file uploads)\n    bodyParser: false\n  }\n}\n\nconst schema = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      greetings: String\n    }\n  `,\n  resolvers: {\n    Query: {\n      greetings: () => 'This is the `greetings` field of the root `Query` type'\n    }\n  }\n})\n\nexport default createYoga<{\n  req: NextApiRequest\n  res: NextApiResponse\n}>({\n  schema,\n  // Needed to be defined explicitly because our endpoint lives at a different path other than `/graphql`\n  graphqlEndpoint: '/api/graphql'\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript-safe Testing with GraphQL Code Generator\nDESCRIPTION: Shows how to use GraphQL Code Generator to create type-safe tests for GraphQL Yoga APIs. This approach enhances developer experience by providing TypeScript types for GraphQL operations.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/testing.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildHTTPExecutor } from '@graphql-tools/executor-http'\nimport { graphql } from './gql'\nimport { yoga } from './yoga'\n\nconst HelloWorldQuery = graphql(/* GraphQL */ `\n  query HelloWorld {\n    hello\n  }\n`)\n\nconst executor = buildHTTPExecutor({\n  fetch: yoga.fetch\n})\n\nconst result = await executor({\n  document: HelloWorldQuery\n})\n\n// this is now a type-safe when being accessed\n// result.data?.hello\n```\n\n----------------------------------------\n\nTITLE: Adding dummy content type parser for File Uploads in Fastify\nDESCRIPTION: Code snippet to add a content type parser for multipart/form-data requests in Fastify, allowing it to forward these requests to GraphQL Yoga for handling file uploads.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-fastify.mdx#2025-04-15_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// This will allow Fastify to forward multipart requests to GraphQL Yoga\napp.addContentTypeParser('multipart/form-data', {}, (req, payload, done) => done(null))\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Verification Options in GraphQL Yoga JWT Plugin\nDESCRIPTION: Example showing how to configure token verification options including algorithms, audience, and issuer. This demonstrates the improved verification options introduced in version 3.0.0.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/jwt/CHANGELOG.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuseJWT({\n  tokenVerification: {\n    algorithms: ['RS256', 'HS256'],\n    audience: 'my.app',\n    issuer: 'http://my-issuer'\n    // You can pass more options to `jsonwebtoken.verify(\"...\", options)` here\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Full GraphQL Yoga Server with Execution Cancellation\nDESCRIPTION: This example demonstrates a complete GraphQL Yoga server setup with execution cancellation enabled. It includes a schema definition, resolvers with artificial delays, and server configuration.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/execution-cancellation.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { setTimeout as setTimeout$ } from 'node:timers/promises'\nimport { createLogger, createSchema, createYoga, useExecutionCancellation } from 'graphql-yoga'\n\nconst logger = createLogger('debug')\n\nconst schema = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      user: User\n    }\n\n    type User {\n      id: ID!\n      name: String!\n      bestFriend: User\n    }\n  `,\n  resolvers: {\n    Query: {\n      async user(_, __, { request }) {\n        logger.info('resolving user')\n\n        await setTimeout$(5000)\n\n        logger.info('resolved user')\n\n        return {\n          id: '1',\n          name: 'Chewie'\n        }\n      }\n    },\n    User: {\n      bestFriend() {\n        logger.info('resolving user best friend')\n\n        return {\n          id: '2',\n          name: 'Han Solo'\n        }\n      }\n    }\n  }\n})\n\nconst yoga = createYoga({\n  plugins: [useExecutionCancellation()],\n  schema,\n  logging: logger\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Yoga Server for Google Cloud Functions\nDESCRIPTION: Implementation of a GraphQL Yoga server exported as a Cloud Function. The code creates a schema with a simple greeting query and configures the yoga instance to accept requests at any path.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-gcp.mdx#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nexport const graphql = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        greetings: String\n      }\n    `,\n    resolvers: {\n      Query: {\n        greetings: () => 'This is the `greetings` field of the root `Query` type'\n      }\n    }\n  }),\n  graphqlEndpoint: '*'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Endpoint in SvelteKit with GraphQL Yoga\nDESCRIPTION: This TypeScript code creates a GraphQL endpoint using GraphQL Yoga in a SvelteKit project. It defines a simple schema with a 'hello' query and configures the yoga app with SvelteKit-specific settings.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-sveltekit.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport type { RequestEvent } from '@sveltejs/kit'\n\nconst yogaApp = createYoga<RequestEvent>({\n  schema: createSchema({\n    typeDefs: `\n\t\t\ttype Query {\n\t\t\t\thello: String\n\t\t\t}\n\t\t`,\n    resolvers: {\n      Query: {\n        hello: () => 'SvelteKit - GraphQL Yoga'\n      }\n    }\n  }),\n  // Needed to be defined explicitly because our endpoint lives at a different path other than `/graphql`\n  graphqlEndpoint: '/api/graphql',\n\n  // Needed to let Yoga use sveltekit's Response object\n  fetchAPI: { Response }\n})\n\nexport { yogaApp as GET, yogaApp as POST, handler as OPTIONS }\n```\n\n----------------------------------------\n\nTITLE: Setting up Response Cache in GraphQL Yoga Server\nDESCRIPTION: Configures a GraphQL Yoga server with response caching. Includes a slow resolver and global cache setup.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { setTimeout as setTimeout$ } from 'node:timers/promises'\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { useResponseCache } from '@graphql-yoga/plugin-response-cache'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        slow: String\n      }\n    `,\n    resolvers: {\n      Query: {\n        slow: async () => {\n          await setTimeout$(5000)\n          return 'I am slow.'\n        }\n      }\n    }\n  }),\n  plugins: [\n    useResponseCache({\n      // global cache\n      session: () => null\n    })\n  ]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Slow Schema with Defer and Stream Support in GraphQL Yoga\nDESCRIPTION: Creates a GraphQL Yoga server with a schema that has both fast and slow resolving fields, demonstrating how to implement and enable the @defer and @stream directives using the plugin.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/defer-stream.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { setTimeout as setTimeout$ } from 'node:timers/promises'\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { useDeferStream } from '@graphql-yoga/plugin-defer-stream'\n\nconst typeDefs = /* GraphQL */ `\n  type Query {\n    alphabet: [String!]!\n    \"\"\"\n    A field that resolves fast.\n    \"\"\"\n    fastField: String!\n\n    \"\"\"\n    A field that resolves slowly.\n    Maybe you want to @defer this field ;)\n    \"\"\"\n    slowField(waitFor: Int! = 5000): String\n  }\n`\n\nconst resolvers = {\n  Query: {\n    async *alphabet() {\n      for (const character of ['a', 'b', 'c', 'd', 'e', 'f', 'g']) {\n        yield character\n        await setTimeout$(1000)\n      }\n    },\n    fastField: async () => {\n      await setTimeout$(100)\n      return 'I am speed'\n    },\n    slowField: async (_, { waitFor }) => {\n      await setTimeout$(waitFor)\n      return 'I am slow'\n    }\n  }\n}\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs,\n    resolvers\n  }),\n  plugins: [useDeferStream()]\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Static CORS Options in GraphQL Yoga\nDESCRIPTION: Demonstrates how to set up CORS with static configuration options including origin, credentials, allowed headers, and methods.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/cors.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\n\nconst yogaApp = createYoga({\n  cors: {\n    origin: 'http://localhost:4000',\n    credentials: true,\n    allowedHeaders: ['X-Custom-Header'],\n    methods: ['POST']\n  }\n  /* ...other args */\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Masking in GraphQL Yoga\nDESCRIPTION: Shows how to implement custom error masking behavior by providing a maskError function. This example selectively exposes errors from subgraphs (based on an error code) while masking other errors using the default maskError function.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/error-masking.mdx#2025-04-15_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga, maskError } from 'graphql-yoga'\nimport { schema } from './schema.js'\n\nconst yoga = createYoga({\n  schema,\n  maskedErrors: {\n    maskError(error, message, isDev) {\n      if (error?.extensions?.code === 'DOWNSTREAM_SERVICE_ERROR') {\n        return error\n      }\n\n      return maskError(error, message, isDev)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Filter Parameter in TypeScript\nDESCRIPTION: GraphQL schema definition for a feed query that accepts a filter parameter to search links by description or URL.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/10-filtering-and-pagination.mdx#2025-04-15_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  info: String!\n  feed(filterNeedle: String): [Link!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Federated Tracing with GraphQL Yoga\nDESCRIPTION: TypeScript example showing how to add federated tracing to a GraphQL Yoga server using the Apollo Inline Trace plugin for improved metrics in Apollo Federation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http'\nimport { createYoga } from 'graphql-yoga'\nimport { useApolloInlineTrace } from '@graphql-yoga/plugin-apollo-inline-trace'\n\nconst yoga = createYoga({\n  plugins: [\n    useApolloInlineTrace()\n    // ...rest of your Apollo federation plugins\n  ]\n})\n\n// Start the server and explore http://localhost:4000/graphql\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Yoga Server with Bun\nDESCRIPTION: Example of setting up a GraphQL Yoga server in a Bun environment. Creates a simple schema with a greeting query and configures the server using Bun's serve API with the Yoga fetch handler.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-bun.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        greetings: String\n      }\n    `,\n    resolvers: {\n      Query: {\n        greetings: () => 'Hello from Yoga in a Bun app!'\n      }\n    }\n  })\n})\n\nconst server = Bun.serve({\n  fetch: yoga\n})\n\nconsole.info(\n  `Server is running on ${new URL(\n    yoga.graphqlEndpoint,\n    `http://${server.hostname}:${server.port}`\n  )}`\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating GraphQL Yoga with Koa Application\nDESCRIPTION: This TypeScript code demonstrates how to create a Koa application, set up GraphQL Yoga, and bind it to the '/graphql' endpoint. It handles request processing, sets appropriate headers and status codes, and converts the response body to a NodeJS Stream.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-koa.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport Koa from 'koa'\n\nconst app = new Koa()\n\nconst yoga = createYoga<Koa.ParameterizedContext>()\n\n// Bind GraphQL Yoga to `/graphql` endpoint\napp.use(async ctx => {\n  // Second parameter adds Koa's context into GraphQL Context\n  // If you use any body parsing middleware in your application,\n  // Make sure it is `ctx.request` and not `ctx.req`\n  const response = await yoga.handleNodeRequestAndResponse(ctx.request, ctx.res, ctx)\n\n  // Set status code\n  ctx.status = response.status\n\n  // Set headers\n  response.headers.forEach((value, key) => {\n    ctx.append(key, value)\n  })\n\n  // Converts ReadableStream to a NodeJS Stream\n  ctx.body = response.body\n})\n\napp.listen(4000, () => {\n  console.log(`Running a GraphQL API server at http://localhost:4000/${yoga.graphqlEndpoint}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Resolvers\nDESCRIPTION: Implementation of resolver functions that provide the actual logic for the schema fields\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello World!'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Readiness Check in GraphQL Yoga with TypeScript\nDESCRIPTION: This code snippet shows how to implement a custom readiness health check in GraphQL Yoga using the 'useReadinessCheck' plugin. It demonstrates how to set a custom endpoint and provide a check function that verifies if the database is available, responding with appropriate status codes based on service readiness.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/health-check.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga, useReadinessCheck } from 'graphql-yoga'\nimport { checkDbAvailable, schema } from './my-service'\n\nconst yoga = createYoga({\n  schema,\n  plugins: [\n    useReadinessCheck({\n      endpoint: '/ready', // default\n      check: async () => {\n        // if resolves, respond with 200 OK\n        // if throw, respond with 503 Service Unavailable and error message as plaintext in body\n        await checkDbAvailable()\n      }\n    })\n  ]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Providing a Static GraphQL Schema in GraphQL Yoga (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a GraphQL Yoga server with a static schema. It imports the schema from an external file and passes it to the createYoga function. The server is then created and started on port 4000.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/schema.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { schema } from './schema.js'\n\nconst yoga = createYoga({ schema })\nconst server = createServer(yoga)\n\n// Start the server and you're done!\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Prevention in GraphQL Yoga Server\nDESCRIPTION: Example of setting up a GraphQL Yoga server with CSRF prevention plugin. The code shows creation of a schema with a simple hello query and configuring the CSRF prevention plugin with custom request headers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/csrf-prevention.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { useCSRFPrevention } from '@graphql-yoga/plugin-csrf-prevention'\n\nconst schema = createSchema({\n  typeDefs: `\n    type Query {\n      hello: String!\n    }\n  `,\n  resolvers: {\n    Query: {\n      hello() {\n        return 'world'\n      }\n    }\n  }\n})\n\nconst yoga = createYoga({\n  schema,\n  plugins: [\n    useCSRFPrevention({\n      requestHeaders: ['x-graphql-yoga-csrf'] // default\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a User Federation Service with GraphQL Yoga\nDESCRIPTION: TypeScript example implementing a Federation User service with GraphQL Yoga, including the necessary type definitions with Federation directives and resolvers with reference resolution.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst { parse } = require('graphql')\nconst { buildSubgraphSchema } = require('@apollo/subgraph')\nconst { createYoga } = require('graphql-yoga')\nconst { createServer } = require('http')\n\nconst typeDefs = parse(/* GraphQL */ `\n  type Query {\n    me: User\n  }\n\n  type User @key(fields: \"id\") {\n    id: ID!\n    username: String\n  }\n`)\n\nconst resolvers = {\n  Query: {\n    me() {\n      return { id: '1', username: '@ava' }\n    }\n  },\n  User: {\n    __resolveReference(user, { fetchUserById }) {\n      return fetchUserById(user.id)\n    }\n  }\n}\nconst yoga = createYoga({\n  schema: buildSubgraphSchema([{ typeDefs, resolvers }])\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4001, () => {\n  console.log(`🚀 Server ready at http://localhost:4001`)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple JWT Signing Key Providers\nDESCRIPTION: Example of configuring the JWT plugin with multiple signing key providers, including both remote JWKS and inline providers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createInlineSigningKeyProvider,\n  createRemoteJwksSigningKeyProvider,\n  useJWT\n} from '@graphql-yoga/plugin-jwt'\n\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useJWT({\n      signingKeyProviders: [\n        // In case your remote provider is not available, the plugin will try use the inline provider.\n        createRemoteJwksSigningKeyProvider({\n          jwksUri: 'https://example.com/.well-known/jwks.json'\n        }),\n        createInlineSigningKeyProvider(process.env.MY_JWT_SECRET)\n      ]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Isolating GraphiQL Configuration with Express Router\nDESCRIPTION: Advanced implementation that isolates GraphiQL-specific CSP configuration using Express Router to avoid affecting other endpoints.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-express.mdx#2025-04-15_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport helmet from 'helmet'\n\nconst app = express()\n\nconst yoga = createYoga()\nconst yogaRouter = express.Router()\n// GraphiQL specefic CSP configuration\nyogaRouter.use(\n  helmet({\n    contentSecurityPolicy: {\n      directives: {\n        'style-src': [\"'self'\", 'unpkg.com'],\n        'script-src': [\"'self'\", 'unpkg.com', \"'unsafe-inline'\"],\n        'img-src': [\"'self'\", 'raw.githubusercontent.com']\n      }\n    }\n  })\n)\nyogaRouter.use(yoga)\n\n// By adding the GraphQL Yoga router before the global helmet middleware,\n// you can be sure that the global CSP configuration will not be applied to the GraphQL Yoga endpoint\napp.use(yoga.graphqlEndpoint, yogaRouter)\n\n// Add the global CSP configuration for the rest of your server.\napp.use(helmet())\n\n// You can know register your other endpoints that will not be affected by the GraphiQL CSP configuration\napp.get('/hello', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(4000, () => {\n  console.log('Running a GraphQL API server at http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Token Lookup in WebSocket Connection Params\nDESCRIPTION: Example of configuring the JWT plugin to look for the token in WebSocket connection parameters when using graphql-ws.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractFromConnectionParams, useJWT } from '@graphql-yoga/plugin-jwt'\n\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useJWT({\n      // So it will look for the token in the connectionParams.token field in case of a WebSockets connection\n      lookupLocations: [extractFromConnectionParams({ name: 'token' })]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Stream Resolvers with Repeater in GraphQL Yoga\nDESCRIPTION: Creates a GraphQL Yoga server with a safe streaming implementation using Repeater instead of AsyncGenerators to prevent memory leaks when streams are canceled.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/defer-stream.mdx#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createSchema, createYoga, Repeater } from 'graphql-yoga'\nimport { useDeferStream } from '@graphql-yoga/plugin-defer-stream'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        alphabet: [String!]!\n      }\n    `,\n    resolvers: {\n      Query: {\n        alphabet: () =>\n          new Repeater<string>(async (push, stop) => {\n            const values = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n            const publish = () => {\n              const value = values.shift()\n              console.log('publish', value)\n\n              if (value) {\n                push(value)\n              }\n\n              if (values.length === 0) {\n                stop()\n              }\n            }\n\n            let interval = setInterval(publish, 1000)\n            publish()\n\n            await stop.then(() => {\n              console.log('cancel')\n              clearInterval(interval)\n            })\n          })\n      }\n    }\n  }),\n  plugins: [useDeferStream()]\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating GraphQL Yoga with Hapi Server in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a GraphQL Yoga instance, set up a Hapi server, and configure routing to handle GraphQL requests. It includes error handling and proper stream management for Hapi compatibility.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-hapi.mdx#2025-04-15_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport http from 'node:http'\nimport { Readable } from 'node:stream'\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport Hapi from '@hapi/hapi'\nimport { schema } from './my-graphql-schema'\n\ninterface ServerContext {\n  req: Hapi.Request\n  h: Hapi.ResponseToolkit\n}\n\nconst yoga = createYoga<ServerContext>({ schema })\n\nconst server = Hapi.server({ port: 4000 })\n\nserver.route({\n  method: '*',\n  path: yoga.graphqlEndpoint,\n  options: {\n    payload: {\n      // let yoga handle the parsing\n      output: 'stream'\n    }\n  },\n  handler: async (req, h) => {\n    const { status, headers, body } = await yoga.handleNodeRequestAndResponse(\n      req.raw.req,\n      req.raw.res,\n      {\n        req,\n        h\n      }\n    )\n\n    const res = h.response(\n      Readable.from(body, {\n        // hapi needs the stream not to be in object mode\n        objectMode: false\n      })\n    )\n\n    for (const [key, val] of headers) {\n      res.header(key, val)\n    }\n\n    return res.code(status)\n  }\n})\n\nserver.start()\n```\n\n----------------------------------------\n\nTITLE: Implementing File Uploads with GraphQL Nexus and Yoga\nDESCRIPTION: A complete example showing how to implement file uploads using GraphQL Nexus with GraphQL Yoga. It demonstrates defining a File scalar type in Nexus and implementing a readTextFile mutation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/file-uploads.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http'\nimport { createYoga } from 'graphql-yoga'\nimport { arg, makeSchema, mutationField, nonNull, queryField, scalarType } from 'nexus'\n\nconst FileScalar = scalarType({\n  name: 'File',\n  asNexusMethod: 'file',\n  description: 'The `File` scalar type represents a file upload.',\n  sourceType: 'File'\n})\n\nconst greetings = queryField('greetings', {\n  type: 'String',\n  resolve: () => 'Hello World!'\n})\n\nconst readTextFile = mutationField('readTextFile', {\n  type: 'String',\n  args: { file: nonNull(arg({ type: 'File' })) },\n  resolve: async (parent, { file }, ctx) => {\n    const textContent = await file.text()\n    return textContent\n  }\n})\n\nconst schema = makeSchema({\n  types: [FileScalar, greetings, readTextFile]\n})\n\nconst yoga = createYoga({\n  schema: schema\n})\n\n// Start the server and explore http://localhost:4000/graphql\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Plugin in GraphQL Yoga Server\nDESCRIPTION: Example of setting up a GraphQL Yoga server with JWT authentication plugin. It demonstrates configuring signing key providers, token lookup locations, and context injection.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport jwt from 'jsonwebtoken'\nimport {\n  createInlineSigningKeyProvider,\n  createRemoteJwksSigningKeyProvider,\n  extractFromHeader,\n  useJWT\n} from '@graphql-yoga/plugin-jwt'\nimport { getUserById, getUserByLogin } from './db'\n\nconst signingKey = process.env.JWT_SECRET\n\nconst yoga = createYoga({\n  schema: mySchema, // Provide your GraphQL schema\n  plugins: [\n    useJWT({\n      // Configure your signing providers: either a local signing-key or a remote JWKS are supported.\n      signingKeyProviders: [\n        createInlineSigningKeyProvider(signingKey),\n        createRemoteJwksSigningKeyProvider({ jwksUri: 'https://example.com/.well-known/jwks.json' })\n      ],\n      // Configure where to look for the JWT token: in the headers, or cookies.\n      // By default, the plugin will look for the token in the 'authorization' header only.\n      tokenLookupLocations: [extractFromHeader({ name: 'authorization', prefix: 'Bearer' })],\n      // Configure your token issuers/audience/algorithms verification options.\n      // By default, the plugin will only verify the HS256/RS256 algorithms.\n      // Please note that this should match the JWT signer issuer/audience/algorithms.\n      tokenVerification: {\n        issuer: 'http://my-issuer.com',\n        audience: 'my-audience',\n        algorithms: ['HS256', 'RS256']\n      },\n      // Configure context injection after the token is verified.\n      // By default, the plugin will inject the token's payload into the context into the `jwt` field.\n      // You can pass a string: `\"myJwt\"` to change the field name.\n      extendContext: true,\n      // The plugin can reject the request if the token is missing or invalid (doesn't pass JWT `verify` flow).\n      // By default, the plugin will reject the request if the token is missing or invalid.\n      reject: {\n        missingToken: true,\n        invalidToken: true\n      }\n    })\n  ]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.log(`Server is running on http://localhost:4000/${server.graphqlEndpoint}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Yoga Server in Deno\nDESCRIPTION: Demonstrates how to create a GraphQL Yoga server in Deno with a basic schema. Uses Deno's standard HTTP server module to serve the GraphQL endpoint.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-deno.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { serve } from 'https://deno.land/std@0.157.0/http/server.ts'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n    `,\n    resolvers: {\n      Query: {\n        hello: () => 'Hello Deno!'\n      }\n    }\n  })\n})\n\nserve(yoga, {\n  onListen({ hostname, port }) {\n    console.log(`Listening on http://${hostname}:${port}/${yoga.graphqlEndpoint}`)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NestJS Application Module with GraphQL Yoga Federation Driver\nDESCRIPTION: This TypeScript code snippet demonstrates how to set up the main application module in NestJS using the GraphQL Yoga Federation driver. It imports necessary modules and configures the GraphQLModule with YogaFederationDriver and typePaths for schema files.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/nestjs-federation/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { YogaFederationDriver, YogaFederationDriverConfig } from '@graphql-yoga/nestjs-federation'\nimport { Module } from '@nestjs/common'\nimport { GraphQLModule } from '@nestjs/graphql'\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<YogaFederationDriverConfig>({\n      driver: YogaFederationDriver,\n      typePaths: ['**/*.graphql']\n    })\n  ]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Next.js Server with WebSocket Support\nDESCRIPTION: Complete server implementation that combines Next.js with GraphQL Yoga and WebSocket support for subscriptions. Includes schema definition, WebSocket server setup, and request handling.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-nextjs.mdx#2025-04-15_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createServer } = require('http')\nconst { WebSocketServer } = require('ws')\nconst { createYoga, createSchema } = require('graphql-yoga')\nconst { useServer } = require('graphql-ws/use/ws')\nconst { parse } = require('url')\nconst next = require('next')\nconst { setTimeout: setTimeout$ } = require('timers/promises')\n\nconst dev = process.env.NODE_ENV !== 'production'\nconst hostname = 'localhost'\nconst port = 3000\n\n// prepare nextjs\nconst app = next({ dev, hostname, port })\n\n// match the route next would use if yoga was in `pages/api/graphql.ts`\nconst graphqlEndpoint = '/api/graphql'\n\n// prepare yoga\nconst yoga = createYoga({\n  graphqlEndpoint,\n  graphiql: {\n    subscriptionsProtocol: 'WS'\n  },\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n      type Subscription {\n        clock: String!\n      }\n    `,\n    resolvers: {\n      Query: {\n        hello: () => 'world'\n      },\n      Subscription: {\n        clock: {\n          async *subscribe() {\n            for (let i = 0; i < 5; i++) {\n              yield { clock: new Date().toString() }\n              await setTimeout$(1_000)\n            }\n          }\n        }\n      }\n    }\n  })\n})\n\n;(async () => {\n  await app.prepare()\n  const handle = app.getRequestHandler()\n\n  // create http server\n  const server = createServer(async (req, res) => {\n    try {\n      // Be sure to pass `true` as the second argument to `url.parse`.\n      // This tells it to parse the query portion of the URL.\n      const url = parse(req.url, true)\n\n      if (url.pathname.startsWith(graphqlEndpoint)) {\n        await yoga(req, res)\n      } else {\n        await handle(req, res, url)\n      }\n    } catch (err) {\n      console.error(`Error while handling ${req.url}`, err)\n      res.writeHead(500).end()\n    }\n  })\n\n  // create websocket server\n  const wsServer = new WebSocketServer({ server, path: graphqlEndpoint })\n\n  // prepare graphql-ws\n  useServer(\n    {\n      execute: args => args.rootValue.execute(args),\n      subscribe: args => args.rootValue.subscribe(args),\n      onSubscribe: async (ctx, _id, params) => {\n        const { schema, execute, subscribe, contextFactory, parse, validate } = yoga.getEnveloped({\n          ...ctx,\n          req: ctx.extra.request,\n          socket: ctx.extra.socket,\n          params\n        })\n\n        const args = {\n          schema,\n          operationName: params.operationName,\n          document: parse(params.query),\n          variableValues: params.variables,\n          contextValue: await contextFactory(),\n          rootValue: {\n            execute,\n            subscribe\n          }\n        }\n\n        const errors = validate(args.schema, args.document)\n        if (errors.length) return errors\n        return args\n      }\n    },\n    wsServer\n  )\n\n  await new Promise((resolve, reject) =>\n    server.listen(port, err => (err ? reject(err) : resolve()))\n  )\n\n  console.log(`\n> App started!\n  HTTP server running on http://${hostname}:${port}\n  GraphQL WebSocket server running on ws://${hostname}:${port}${graphqlEndpoint}\n`)\n})()\n```\n\n----------------------------------------\n\nTITLE: Defining Input Type and Enum for Sorting in GraphQL Schema\nDESCRIPTION: Defines a LinkOrderByInput input type and Sort enum in the GraphQL schema to enable clients to specify sorting options for Link elements.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/advanced/03-advanced-sorting.mdx#2025-04-15_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput LinkOrderByInput {\n  description: Sort\n  url: Sort\n  createdAt: Sort\n}\n\nenum Sort {\n  asc\n  desc\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Managed Federation Plugin Programmatically\nDESCRIPTION: JavaScript code snippet showing how to configure the Apollo Managed Federation plugin programmatically with custom settings for API key, graph reference, and various retry options.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst yoga = createYoga({\n  plugins: [\n    useManagedFederation({\n      apiKey: '<YOU_APOLLO_API_KEY>',\n      graphRef: '<YOUR_GRAPH_ID>[@<VARIANT>]',\n      maxRetries: 5, // max retries in case of loading failure\n      retryDelaySeconds: 0, // delay between retries\n      minDelaySeconds: 1 // minimum delay between polling requests\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a File-Based Federation Gateway in JavaScript\nDESCRIPTION: JavaScript example showing how to create a GraphQL Yoga server that implements a Federation Gateway by loading a supergraph SDL from the file system and stitching it into an executable schema.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readFileSync } from 'fs'\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { getStitchedSchemaFromSupergraphSdl } from '@graphql-tools/federation'\n\nconst yoga = createYoga({\n  schema: getStitchedSchemaFromSupergraphSdl({\n    // This doesn't have to be from a file system, it can be fetched via HTTP from a schema registry\n    supergraphSdl: readFileSync('./supergraph.graphql', 'utf-8')\n  })\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.log(`🚀 Server ready at http://localhost:4000/graphql`)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Yoga server with SOFA plugin\nDESCRIPTION: Complete example of setting up a GraphQL Yoga server with SOFA plugin to generate a REST API. Includes schema definition, resolver implementation, and server configuration.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/sofa-api.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http'\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { useSofa } from '@graphql-yoga/plugin-sofa'\n\nconst books = [\n  { id: 1, title: 'Book A', type: 'AUDIO' },\n  { id: 2, title: 'Book B', type: 'LEGACY' }\n]\nconst users = [\n  {\n    id: 1,\n    name: 'User A',\n    favoriteBook: books[0],\n    shelf: books\n  },\n  {\n    id: 2,\n    name: 'User B',\n    favoriteBook: books[1],\n    shelf: books\n  }\n]\n\nconst UsersCollection = {\n  get(id: string | number) {\n    const uid = typeof id === 'string' ? parseInt(id, 10) : id\n\n    return users.find(u => u.id === uid)\n  },\n  all() {\n    return users\n  }\n}\n\nconst BooksCollection = {\n  get(id: string | number) {\n    const bid = typeof id === 'string' ? parseInt(id, 10) : id\n\n    return books.find(u => u.id === bid)\n  },\n  all() {\n    return books\n  },\n  add(title: string) {\n    const book = {\n      id: parseInt(Math.random().toString(10).substr(2), 10),\n      title,\n      type: 'LEGACY'\n    }\n\n    books.push(book)\n\n    return book\n  }\n}\n\nconst schema = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Book {\n      id: ID!\n      title: String!\n      type: BookType!\n    }\n\n    enum BookType {\n      AUDIO\n      LEGACY\n    }\n\n    type User {\n      id: ID!\n      name: String!\n      favoriteBook: Book!\n      shelf: [Book!]!\n    }\n\n    type Query {\n      user(id: ID!): User\n      users: [User!]\n      book(id: ID!): Book\n      books: [Book!]\n    }\n\n    type Mutation {\n      addBook(title: String!): Book\n    }\n\n    schema {\n      query: Query\n      mutation: Mutation\n    }\n  `,\n  resolvers: {\n    Query: {\n      user(_: any, { id }: any) {\n        return UsersCollection.get(id)\n      },\n      users() {\n        return UsersCollection.all()\n      },\n      book(_: any, { id }: any) {\n        return BooksCollection.get(id)\n      },\n      books() {\n        return BooksCollection.all()\n      }\n    },\n    Mutation: {\n      addBook(_: any, { title }: any) {\n        const book = BooksCollection.add(title)\n        return book\n      }\n    }\n  }\n})\n\nexport const yoga = createYoga({\n  schema,\n  plugins: [\n    useSofa({\n      basePath: '/rest',\n      swaggerUI: {\n        endpoint: '/swagger'\n      },\n      title: 'Example API',\n      version: '1.0.0'\n    })\n  ]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Conditional Schema in GraphQL Yoga (TypeScript)\nDESCRIPTION: This code snippet shows how to use a conditional schema in GraphQL Yoga. It uses an async factory function that determines the schema based on a header in the request. The function getSchemaForViewer is called for each GraphQL request, allowing dynamic schema selection.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/schema.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { getSchemaForViewer } from './schema.js'\n\nconst yoga = createYoga({\n  schema: async ({ request }) => getSchemaForViewer(request.headers.get('x-schema') ?? 'default')\n})\nconst server = createServer(yoga)\n\n// Start the server and you're done!\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Extended Error Handling with Error Codes\nDESCRIPTION: Demonstrates how to add error codes and additional extensions to GraphQLErrors for more detailed error reporting. Shows implementation with custom error extensions.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/error-masking.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new GraphQLError(\n  `User with id '${args.byId}' not found.`,\n  {\n    extensions: {\n      code: 'USER_NOT_FOUND',\n      userId: args.byId,\n      foo: {\n        some: {\n          complex: ['structure']\n        }\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up GraphQL Yoga with fetch event listener in Cloudflare Workers\nDESCRIPTION: This snippet demonstrates how to create a basic GraphQL schema and set up a Yoga instance that listens to fetch events in a Cloudflare Worker.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-cloudflare-workers.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n    `,\n    resolvers: {\n      Query: {\n        hello: () => 'Hello World!'\n      }\n    }\n  })\n})\n\nself.addEventListener('fetch', yoga)\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga with Hive for Federation Gateway\nDESCRIPTION: Command to install GraphQL Yoga and the Hive plugin required for implementing a Federation Gateway.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga graphql @graphql-hive/yoga\n```\n\n----------------------------------------\n\nTITLE: Replacing Express GraphQL middleware with GraphQL Yoga\nDESCRIPTION: This code shows the necessary changes to migrate from express-graphql to GraphQL Yoga. It demonstrates how to replace the graphqlHTTP middleware with createYoga and update the context handling and server configuration.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-express-graphql.mdx#2025-04-15_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nconst express = require('express');\n- const { graphqlHTTP } = require('express-graphql');\n+ const { createYoga } = require('graphql-yoga');\nconst { schema } = require('./schema');\n\nconst app = express();\n\n-app.use('/graphql', graphqlHTTP(req => ({\n-  schema: schema,\n-  context: {\n-    token: req.headers.authorization\n-  },\n-  graphiql: true,\n-})));\n\n+const yoga = createYoga({\n+   schema,\n+   context: (req) => ({ // Context factory gets called for every request\n+      myToken: req.headers.get('authorization'),\n+   }),\n+   graphiql: true,\n+})\n+\n+app.use('/graphql', yoga);\n\napp.listen(4000);\nconsole.log('Running a GraphQL API server at http://localhost:4000/graphql');\n```\n\n----------------------------------------\n\nTITLE: Setting up GraphQL Yoga Server with Apollo Federation\nDESCRIPTION: Example of creating a GraphQL Yoga server with Apollo Managed Federation plugin integration. Shows server setup with HTTP creation and signal handling.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apollo-managed-federation/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { useManagedFederation } from '@graphql-yoga/apollo-managed-federation'\n\nconst yoga = createYoga({\n  plugins: [useManagedFederation()]\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.log('Server is running on http://localhost:4000')\n})\n\nprocess.on('SIGINT', () => {\n  server.close()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Injection in GraphQL Yoga JWT Plugin\nDESCRIPTION: Examples showing how to configure context injection for the JWT plugin. This demonstrates the flexible context injection options introduced in version 3.0.0.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/jwt/CHANGELOG.md#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Can be a boolean. By default injects to \"context.jwt\" field\nuseJWT({\n  reject: {\n    extendContext: true\n  }\n})\n\n// Or an object to customize the field name\nuseJWT({\n  reject: {\n    extendContext: 'myJwt'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL schema using graphql-js\nDESCRIPTION: Uses the core graphql-js library to define a GraphQL schema using its object-oriented API with a 'hello' query that returns 'world'.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GraphQLObjectType, GraphQLSchema, GraphQLString } from 'graphql'\n\nexport const schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'Query',\n    fields: {\n      hello: {\n        type: GraphQLString,\n        resolve: () => 'world'\n      }\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling GraphQL Schema Introspection Conditionally in TypeScript\nDESCRIPTION: This snippet shows how to conditionally disable introspection based on request headers. It allows introspection only when a specific header with a secret key is provided in the request.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/introspection.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport { useDisableIntrospection } from '@graphql-yoga/plugin-disable-introspection'\n\n// Provide your schema\nconst yoga = createYoga({\n  graphiql: false,\n  plugins: [\n    useDisableIntrospection({\n      isDisabled: request => request.headers.get('x-allow-introspection') !== 'secret-access-key'\n    })\n  ]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Introspection Based on JWT Token Validity in GraphQL Yoga\nDESCRIPTION: Shows how to combine the JWT plugin with the Disable Introspection plugin to conditionally disable GraphQL introspection for unauthorized requests.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDisableIntrospection } from '@graphql-yoga/plugin-disable-introspection'\nimport { useJWT } from '@graphql-yoga/plugin-jwt'\n\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useJWT({\n      reject: {\n        missingToken: false,\n        invalidToken: false\n      }\n    }),\n    useDisableIntrospection({\n      disableIf(_req, ctx) {\n        // If there is no JWT token(unauthorized), disable introspection\n        if (!ctx.jwt) {\n          return true\n        }\n        return false\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Resolver with Timer Cleanup for Cancellation\nDESCRIPTION: This example shows how to modify a resolver to properly clean up a timer when the request is aborted, ensuring that no further processing occurs after cancellation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/execution-cancellation.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createLogger, createSchema, createYoga, useExecutionCancellation } from 'graphql-yoga'\n\nconst logger = createLogger('debug')\n\nconst schema = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      user: User\n    }\n\n    type User {\n      id: ID!\n      name: String!\n      bestFriend: User\n    }\n  `,\n  resolvers: {\n    Query: {\n      async user(_, __, { request }) {\n        logger.info('resolving user')\n        await new Promise((resolve, reject) => {\n          const timeout = setTimeout(resolve, 5000)\n          request.signal.addEventListener('abort', () => {\n            clearTimeout(timeout)\n            reject(request.signal.reason)\n          })\n        })\n        logger.info('resolved user')\n\n        return {\n          id: '1',\n          name: 'Chewie'\n        }\n      }\n    },\n    User: {\n      bestFriend() {\n        logger.info('resolving user best friend')\n\n        return {\n          id: '2',\n          name: 'Han Solo'\n        }\n      }\n    }\n  }\n})\n\n// Provide your schema\nconst yoga = createYoga({\n  plugins: [useExecutionCancellation()],\n  schema,\n  logging: logger\n})\n\n// Start the server and explore http://localhost:4000/graphql\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Cancellation in GraphQL Yoga\nDESCRIPTION: This snippet demonstrates how to enable execution cancellation in a GraphQL Yoga server by adding the useExecutionCancellation plugin to the Yoga instance.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/execution-cancellation.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga, useExecutionCancellation } from 'graphql-yoga'\nimport { schema } from './schema'\n\n// Provide your schema\nconst yoga = createYoga({\n  plugins: [useExecutionCancellation()],\n  schema\n})\n\n// Start the server and explore http://localhost:4000/graphql\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Record with Prisma Client in TypeScript\nDESCRIPTION: TypeScript code snippet showing how to create a new record in the database using Prisma Client's create operation with properly typed data fields.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/06-adding-a-database.mdx#2025-04-15_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst newLink = await prisma.link.create({\n  data: {\n    description: 'Fullstack tutorial for GraphQL',\n    url: 'www.howtographql.com'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Safe Readiness Check Implementation in GraphQL Yoga with TypeScript\nDESCRIPTION: This code snippet demonstrates a more secure implementation of a readiness check that prevents sensitive information leakage. It uses a try-catch block and returns a boolean instead of throwing errors, ensuring no error details are exposed in the response body while still properly logging errors server-side.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/health-check.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga, useReadinessCheck } from 'graphql-yoga'\nimport { checkDbAvailable, schema } from './my-service'\n\nconst yoga = createYoga({\n  schema,\n  plugins: [\n    useReadinessCheck({\n      endpoint: '/ready', // default\n      check: async () => {\n        try {\n          await checkDbAvailable()\n          // if true, respond with 200 OK\n          return false\n        } catch (err) {\n          // log the error on the server for debugging purposes\n          console.error(err)\n          // if false, respond with 503 Service Unavailable and no bdy\n          return false\n        }\n      }\n    })\n  ]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NestJS Federation Subgraph with GraphQL Yoga\nDESCRIPTION: TypeScript configuration for setting up a NestJS Federation subgraph using the Yoga Federation driver, including resolver configurations.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-nestjs.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { YogaFederationDriver, YogaFederationDriverConfig } from '@graphql-yoga/nestjs-federation'\nimport { Module } from '@nestjs/common'\nimport { GraphQLModule } from '@nestjs/graphql'\nimport { DeprecatedProductsResolver } from './deprecated-products.resolver'\nimport { InventoryResolver } from './inventory.resolver'\nimport { ProductResearchResolver } from './product-research.resolver'\nimport { ProductsResolver } from './products.resolver'\nimport { UsersResolver } from './users.resolver'\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<YogaFederationDriverConfig>({\n      driver: YogaFederationDriver,\n      typePaths: ['**/*.graphql']\n    })\n  ],\n  providers: [\n    UsersResolver,\n    ProductsResolver,\n    ProductResearchResolver,\n    DeprecatedProductsResolver,\n    InventoryResolver\n  ]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga for File-Based Federation Gateway\nDESCRIPTION: Command to install GraphQL Yoga and the required Federation tools to implement a Federation Gateway using a locally stored supergraph SDL file.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga graphql @graphql-tools/federation\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger in GraphQL Yoga\nDESCRIPTION: Demonstrates how to implement a custom logger in GraphQL Yoga by providing custom logging functions for each log level. Includes server setup with the custom logger.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/logging-and-debugging.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { logger } from './my-logger.js'\nimport { schema } from './my-schema.js'\n\nconst yoga = createYoga({\n  schema,\n  logging: {\n    debug(...args) {\n      logger.debug(...args)\n    },\n    info(...args) {\n      logger.info(...args)\n    },\n    warn(...args) {\n      logger.warn(...args)\n    },\n    error(...args) {\n      logger.error(...args)\n    }\n  }\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling GraphQL Schema Introspection Based on Context in TypeScript\nDESCRIPTION: This example demonstrates how to disable introspection based on the GraphQL context. It integrates with the JWT plugin to allow introspection only for authenticated users with a valid JWT token.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/introspection.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport { useDisableIntrospection } from '@graphql-yoga/plugin-disable-introspection'\nimport { useJWT } from '@graphql-yoga/plugin-jwt'\n\n// Provide your schema\nconst yoga = createYoga({\n  graphiql: false,\n  plugins: [\n    useJWT({\n      /* .. */\n    }),\n    useDisableIntrospection({\n      isDisabled: (_req, ctx) => !ctx.jwt\n    })\n  ]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Context in GraphQL Yoga Server Setup\nDESCRIPTION: Imports the context factory function and adds it to the GraphQL Yoga server initialization to make it available during query execution.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/07-connecting-server-and-database.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { createContext } from './context'\nimport { schema } from './schema'\n\nfunction main() {\n  const yoga = createYoga({ schema, context: createContext })\n  const server = createServer(yoga)\n  server.listen(4000, () => {\n    console.info('Server is running on http://localhost:4000/graphql')\n  })\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Configuring Time to Live (TTL) for Response Cache\nDESCRIPTION: Sets up TTL for cached operations globally, by type, and by schema coordinate.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nuseResponseCache({\n  session: () => null,\n  // by default cache all operations for 2 seconds\n  ttl: 2_000,\n  ttlPerType: {\n    // only cache query operations containing User for 500ms\n    User: 500\n  },\n  ttlPerSchemaCoordinate: {\n    // cache operations selecting Query.lazy for 10 seconds\n    'Query.lazy': 10_000\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: GraphQL Yoga with WebSocket Subscriptions\nDESCRIPTION: Extended setup that implements WebSocket-based subscriptions using graphql-ws, including a time subscription example.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-uwebsockets.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { execute, ExecutionArgs, subscribe } from 'graphql'\nimport { makeBehavior } from 'graphql-ws/use/uWebSockets'\nimport { createSchema, createYoga, Repeater } from 'graphql-yoga'\nimport { App, HttpRequest, HttpResponse } from 'uWebSockets.js'\n\ninterface ServerContext {\n  req: HttpRequest\n  res: HttpResponse\n}\n\nexport const yoga = createYoga<ServerContext>({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n\n      type Subscription {\n        time: String!\n      }\n    `,\n    resolvers: {\n      Query: {\n        hello: () => 'Hello world!'\n      },\n      Subscription: {\n        time: {\n          subscribe: () =>\n            new Repeater((push, stop) => {\n              const interval = setInterval(() => {\n                push({\n                  time: new Date().toISOString()\n                })\n              }, 1000)\n              stop.then(() => clearInterval(interval))\n            })\n        }\n      }\n    }\n  }),\n  graphiql: {\n    subscriptionsProtocol: 'WS' // use WebSockets instead of SSE\n  }\n})\n\n// yoga's envelop may augment the `execute` and `subscribe` operations\n// so we need to make sure we always use the freshest instance\ntype EnvelopedExecutionArgs = ExecutionArgs & {\n  rootValue: {\n    execute: typeof execute\n    subscribe: typeof subscribe\n  }\n}\n\nconst wsHandler = makeBehavior({\n  execute: args => (args as EnvelopedExecutionArgs).rootValue.execute(args),\n  subscribe: args => (args as EnvelopedExecutionArgs).rootValue.subscribe(args),\n  onSubscribe: async (ctx, _id, params) => {\n    const { schema, execute, subscribe, contextFactory, parse, validate } = yoga.getEnveloped(ctx)\n\n    const args: EnvelopedExecutionArgs = {\n      schema,\n      operationName: params.operationName,\n      document: parse(params.query),\n      variableValues: params.variables,\n      contextValue: await contextFactory(),\n      rootValue: {\n        execute,\n        subscribe\n      }\n    }\n\n    const errors = validate(args.schema, args.document)\n    if (errors.length) return errors\n    return args\n  }\n})\n\nApp()\n  .any('/*', yoga)\n  .ws(yoga.graphqlEndpoint, wsHandler)\n  .listen(() => {\n    console.log(`Server is running on http://localhost:4000`)\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Context for Prisma Integration in TypeScript\nDESCRIPTION: Defines a basic GraphQL context type and factory function that will later be used to provide Prisma Client to resolvers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/07-connecting-server-and-database.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type GraphQLContext = {}\n\nexport async function createContext(): Promise<GraphQLContext> {\n  return {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL schema using Nexus GraphQL\nDESCRIPTION: Uses Nexus to define a GraphQL schema in a code-first approach with a 'hello' query that returns 'world'.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeSchema, queryField } from 'nexus'\n\nconst helloField = queryField('hello', {\n  type: 'String',\n  resolve: () => 'world'\n})\n\nexport const schema = makeSchema({ types: [helloField] })\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL schema using gqtx\nDESCRIPTION: Uses gqtx to define a type-safe GraphQL schema with a 'hello' query that returns 'world'.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { buildGraphQLSchema, Gql } from 'gqtx'\n\nconst Query = Gql.Query({\n  fields: () => [\n    Gql.Field({\n      name: 'hello',\n      type: Gql.String,\n      resolve: () => 'world'\n    })\n  ]\n})\n\nexport const schema = buildGraphQLSchema({ query: Query })\n```\n\n----------------------------------------\n\nTITLE: Adding Comment Model to Prisma Schema\nDESCRIPTION: Extends the Prisma schema to include a Comment model and establishes a one-to-many relationship between Link and Comment.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Link {\n  id          Int      @id @default(autoincrement())\n  createdAt   DateTime @default(now())\n  description String\n  url         String\n  comments    Comment[]\n}\n\nmodel Comment {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  body      String\n  link      Link     @relation(fields: [linkId], references: [id])\n  linkId    Int\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Request Parser Plugin\nDESCRIPTION: Example of creating a custom request parser plugin for GraphQL Yoga to handle a specific content type not supported by the built-in parsers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-customization.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLParams, Plugin } from 'graphql-yoga'\n\nconst useMyParser: Plugin = () => {\n  return {\n    onRequestParse({ request, url, setRequestParser }) {\n      const contentType = request.headers.get('Content-Type')\n      if (contentType === 'application/my-content-type') {\n        setRequestParser(async function myParser() {\n          const body = await request.text()\n          const params: GraphQLParams = getParamsFromMyParser(body)\n          return params\n        })\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Envelop Logger Plugin in GraphQL Yoga\nDESCRIPTION: Shows how to integrate Envelop's useLogger plugin with GraphQL Yoga for advanced logging capabilities. Provides custom event-based logging functionality.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/logging-and-debugging.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga, useLogger } from 'graphql-yoga'\nimport { logger } from './my-logger'\nimport { schema } from './my-schema'\n\nconst yoga = createYoga({\n  schema,\n  plugins: [\n    useLogger({\n      logFn: (eventName, args) => {\n        logger.debug(eventName, ...args)\n      }\n    })\n  ]\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Feed Resolver with Sorting Support in TypeScript\nDESCRIPTION: Updates the feed resolver to handle the orderBy parameter and pass it to Prisma. The implementation supports filtering, pagination, and sorting of links.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/advanced/03-advanced-sorting.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Link, Prisma, User } from '@prisma/client'\n\nconst resolvers = {\n  // ... other resolvers ...\n  Query: {\n    // ... other resolvers ...\n    feed(\n      parent: unknown,\n      args: {\n        filter?: string\n        skip?: number\n        take?: number\n        orderBy?: {\n          description?: Prisma.SortOrder\n          url?: Prisma.SortOrder\n          createdAt?: Prisma.SortOrder\n        }\n      },\n      context: GraphQLContext\n    ) {\n      const where = args.filter\n        ? {\n            OR: [{ description: { contains: args.filter } }, { url: { contains: args.filter } }]\n          }\n        : {}\n\n      return context.prisma.link.findMany({\n        where,\n        skip: args.skip,\n        take: args.take,\n        orderBy: args.orderBy\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Signature Plugin in GraphQL Yoga\nDESCRIPTION: Example showing how to create a plugin that adds a custom X-GraphQL-Server header to responses using the onResponse hook\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/envelop-plugins.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugin } from 'graphql-yoga'\n\nfunction useYogaSignature(): Plugin {\n  return {\n    onResponse({ request, response }) {\n      response.headers.set('X-GraphQL-Server', 'Yoga')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Token Verification Options in GraphQL Yoga\nDESCRIPTION: Demonstrates how to configure JWT token verification options such as issuer, audience, and algorithms when using the JWT plugin with GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useJWT({\n      tokenVerification: {\n        issuer: ['http://yoga'],\n        audience: 'my-audience',\n        algorithms: ['HS256', 'RS256']\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga Defer Stream Plugin\nDESCRIPTION: Installs the required plugin to enable support for the @defer and @stream directives in GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/defer-stream.mdx#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @graphql-yoga/plugin-defer-stream\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Yoga Setup with µWebSockets.js\nDESCRIPTION: Example of setting up a basic GraphQL server using GraphQL Yoga with µWebSockets.js. Includes schema definition and server initialization.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-uwebsockets.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { App, HttpRequest, HttpResponse } from 'uWebSockets.js'\n\ninterface ServerContext {\n  req: HttpRequest\n  res: HttpResponse\n}\n\nconst yoga = createYoga<ServerContext>({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n    `,\n    resolvers: {\n      Query: {\n        hello: () => 'Hello world!'\n      }\n    }\n  })\n})\n\nApp()\n  .any('/*', yoga)\n  .listen('localhost', 4000, () => {\n    console.log(`Server is running on http://localhost:4000`)\n  })\n```\n\n----------------------------------------\n\nTITLE: Complete Query.comment Resolver Implementation\nDESCRIPTION: Full implementation of the comment query resolver that fetches a comment by ID using Prisma client.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    async comment(parent: unknown, args: { id: string }, context: GraphQLContext) {\n      return context.prisma.comment.findUnique({\n        where: { id: parseInt(args.id) }\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Prisma Client Script for Database Operations in TypeScript\nDESCRIPTION: TypeScript script demonstrating how to use Prisma Client to connect to the database, execute queries to find all links, and properly disconnect when finished.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/06-adding-a-database.mdx#2025-04-15_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// 1\nimport { PrismaClient } from '@prisma/client'\n\n// 2\nconst prisma = new PrismaClient()\n\n// 3\nasync function main() {\n  const allLinks = await prisma.link.findMany()\n  console.log(allLinks)\n}\n\n// 4\nmain()\n  // 5\n  .finally(async () => {\n    await prisma.$disconnect()\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom JWT Token Lookup Function\nDESCRIPTION: Example of using a custom function to look up the JWT token in the request.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst getToken = ({ request, serverContext, url }) => {\n  return request.headers.get('x-my-token')\n}\n\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useJWT({\n      lookupLocations: [getToken]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic GraphQL Batching in TypeScript\nDESCRIPTION: Demonstrates how to enable basic request batching in a GraphQL Yoga server by setting the batching option to true. Creates a simple server with a hello query endpoint.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-batching.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nexport const yoga = createYoga<ServerContext, UserContext>({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n    `\n  }),\n  batching: true\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Using @cacheControl Directive for TTL Configuration\nDESCRIPTION: Shows how to use the @cacheControl directive in the GraphQL schema to define TTL for types and fields.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cacheControlDirective } from '@graphql-yoga/plugin-response-cache'\n\nconst typeDefs = /* GraphQL */ `\n  # the directive needs to be defined in the schema\n  ${cacheControlDirective}\n\n  type Query {\n    # cache operations selecting Query.lazy for 10 seconds\n    lazy: Something @cacheControl(maxAge: 10000)\n  }\n\n  # only cache query operations containing User for 500ms\n  type User @cacheControl(maxAge: 500) {\n    #...\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Error Masking in GraphQL Yoga\nDESCRIPTION: Sets up a basic GraphQL Yoga server with error masking enabled by default. Demonstrates how unexpected errors from external services are automatically masked.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/error-masking.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { fetch } from '@whatwg-node/fetch'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        greeting: String!\n      }\n    `,\n    resolvers: {\n      Query: {\n        greeting: async () => {\n          const greeting = await fetch('http://localhost:9876/greeting').then(res => res.text())\n          return greeting\n        }\n      }\n    }\n  })\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Store Implementation for APQ\nDESCRIPTION: Example of implementing a custom store for persisted queries using Map\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/automatic-persisted-queries.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { useAPQ } from '@graphql-yoga/plugin-apq'\n\n// Note: this store grows infinitely, so it is not a good idea to use it in production.\nconst store: APQStore = new Map()\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n    `\n  }),\n  plugins: [useAPQ({ store })]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query Operation\nDESCRIPTION: Sample GraphQL query demonstrating how to retrieve feed data with specific field selection.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/04-a-simple-query.mdx#2025-04-15_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  feed {\n    id\n    url\n    description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Feed Resolver with Prisma Client\nDESCRIPTION: Enhanced TypeScript resolver implementation that adds pagination support using Prisma's skip and take parameters for limit-offset pagination.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/10-filtering-and-pagination.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  // ... other resolvers maps ...\n  Query: {\n    // ... other Query object type resolver functions ...\n    async feed(\n      parent: unknown,\n      args: { filterNeedle?: string; skip?: number; take?: number },\n      context: GraphQLContext\n    ) {\n      const where = args.filterNeedle\n        ? {\n            OR: [\n              { description: { contains: args.filterNeedle } },\n              { url: { contains: args.filterNeedle } }\n            ]\n          }\n        : {}\n\n      return context.prisma.link.findMany({\n        where,\n        skip: args.skip,\n        take: args.take\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading File with GraphQL Mutation using cURL\nDESCRIPTION: This curl command demonstrates how to upload a file using a GraphQL mutation. It sends a multipart form-data request to the GraphQL endpoint with the file and necessary metadata.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/file-upload-nextjs-pothos/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:3000/api/graphql \\\n  -F operations='{ \"query\": \"mutation ($file: Upload!) { readTextFile(file: $file) }\", \"variables\": { \"file\": null } }' \\\n  -F map='{ \"0\": [\"variables.file\"] }' \\\n  -F 0=@test.txt\n```\n\n----------------------------------------\n\nTITLE: Disabling GraphQL schema introspection based on context in Yoga\nDESCRIPTION: Example code showing how to use the useDisableIntrospection plugin with GraphQL Yoga, demonstrating how to conditionally disable introspection based on the request context, specifically checking for a JWT in the context.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/disable-introspection/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport { useDisableIntrospection } from '@graphql-yoga/plugin-disable-introspection'\n\n// Provide your schema\nconst yoga = createYoga({\n  graphiql: false,\n  plugins: [\n    useDisableIntrospection({\n      isDisabled: (_req, ctx) => !ctx.jwt\n    })\n  ]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Client with JWT Token\nDESCRIPTION: Example of setting up a graphql-ws client to pass the JWT token in the connection parameters for WebSocket connections.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'graphql-ws'\nimport { getCurrentToken } from './my-auth'\n\nconst client = createClient({\n  url: 'ws://localhost:4000/graphql',\n  // The object returned by this function will be passed to the server as `connectionParams` to be used by the JWT plugin\n  connectionParams: async () => {\n    return {\n      // the token is fetched from the storage\n      token: await getCurrentToken()\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL schema using Pothos\nDESCRIPTION: Uses Pothos SchemaBuilder to define a GraphQL schema programmatically with a 'hello' query that returns 'world'.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport SchemaBuilder from '@pothos/core'\n\nconst builder = new SchemaBuilder({})\n\nbuilder.queryType({\n  fields: t => ({\n    hello: t.string({\n      resolve: () => 'world'\n    })\n  })\n})\n\nexport const schema = builder.toSchema()\n```\n\n----------------------------------------\n\nTITLE: Extending Context with Static Object\nDESCRIPTION: Shows how to extend the GraphQL context by providing a static object to the createYoga configuration.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/context.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        someNumber: Int!\n      }\n    `,\n    resolvers: {\n      Query: {\n        someNumber(_, _args, context) {\n          context.someNumber\n        }\n      }\n    }\n  }),\n  context: { someNumber: 13 }\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Context in GraphiQL Configuration\nDESCRIPTION: This example demonstrates how to access the server context (including Node.js request and response objects) within the GraphiQL configuration function. This allows for user role-based access control to GraphiQL.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/graphiql.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\n\n// Provide your schema\nconst yoga = createYoga({\n  graphiql(request, { req, res }) {\n    // access something attached to the request object\n    // e.g. a user object added by an auth middleware.\n    if (req.user.role === 'admin') {\n      return true\n    }\n    return false\n  }\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache for Response Caching\nDESCRIPTION: Sets up a Redis cache for use with the response cache plugin in GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useResponseCache } from '@graphql-yoga/plugin-response-cache'\nimport { createRedisCache } from '@envelop/response-cache-redis'\nimport { Redis } from 'ioredis'\n\nconst redis = new Redis({\n  host: 'my-redis-db.example.com',\n  port: '30652',\n  password: '1234567890'\n})\n\nconst redis = new Redis('redis://:1234567890@my-redis-db.example.com:30652')\n\nconst cache = createRedisCache({ redis })\n\nuseResponseCache({\n  session: () => null,\n  cache\n})\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Query\nDESCRIPTION: Example of a simple GraphQL query to test the server's 'hello' resolver.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/03-graphql-server.mdx#2025-04-15_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hello\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Store Implementation for APQ\nDESCRIPTION: Example of implementing a Redis-based store with error handling for persisted queries\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/automatic-persisted-queries.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Keyv from 'keyv'\n\nconst store = new Keyv('redis://user:pass@localhost:6379')\n\nuseAPQ({\n  store: {\n    async get(key) {\n      try {\n        return await store.get(key)\n      } catch (e) {\n        console.error(`Error while fetching the operation: ${key}`, e)\n      }\n    },\n    async set(key, value) {\n      try {\n        return await store.set(key, value)\n      } catch (e) {\n        console.error(`Error while saving the operation: ${key}`, e)\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Armor with Envelop\nDESCRIPTION: TypeScript code showing how to initialize GraphQL Armor and integrate it with a GraphQL server using Envelop plugins.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/graphql-armor/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EnvelopArmor } from '@escape.tech/graphql-armor'\n\nconst armor = new EnvelopArmor()\nconst enhancements = armor.protect()\n\nconst server = createServer({\n  plugins: [...enhancements.plugins],\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics for GraphQL Operation Phases\nDESCRIPTION: Example showing how to configure Prometheus metrics to observe only specific GraphQL execution phases like execute and subscribe for error tracking.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/prometheus/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { execute, parse, specifiedRules, subscribe, validate } from 'graphql'\nimport { envelop, useEngine } from '@envelop/core'\nimport { usePrometheus } from '@envelop/prometheus'\n\nconst getEnveloped = envelop({\n  plugins: [\n    useEngine({ parse, validate, specifiedRules, execute, subscribe }),\n    usePrometheus({\n      metrics: {\n        graphql_envelop_phase_error: ['execute', 'subscribe']\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Batched GraphQL Operations\nDESCRIPTION: Shows how to send a batched GraphQL request using curl, combining multiple queries into a single HTTP request.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-batching.mdx#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H 'Content-Type: application/json' http://localhost:4000/graphql \\\n  -d '[{\"query\": \"{ hee: hello }\"}, {\"query\": \"{ ho: hello }\"}]'\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL schema using graphql-yoga\nDESCRIPTION: Uses Yoga's createSchema function to define a simple GraphQL schema with a 'hello' query that returns 'world'. This method reuses the makeExecutableSchema function from @graphql-tools/schema.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSchema } from 'graphql-yoga'\n\nexport const schema = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      hello: String\n    }\n  `,\n  resolvers: {\n    Query: {\n      hello: () => 'world'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Stores in GraphQL Yoga\nDESCRIPTION: This snippet shows how to implement custom cache stores for document, error, and validation caching in GraphQL Yoga. It defines a CacheStore interface and uses custom cache store implementations when creating the Yoga instance.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/parsing-and-validation-caching.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { DocumentNode, validate } from 'graphql'\nimport { createYoga } from 'graphql-yoga'\nimport { documentCacheStore, errorCacheStore, validationCacheStore } from './my-cache'\nimport { schema } from './my-schema'\n\ninterface CacheStore<T> {\n  get(key: string): T | undefined\n  set(key: string, value: T): void\n}\n\nconst yoga = createYoga({\n  schema,\n  parserAndValidationCache: {\n    documentCache: documentCacheStore as CacheStore<DocumentNode>,\n    errorCache: errorCacheStore as CacheStore<Error>,\n    validationCache: validationCacheStore as CacheStore<typeof validate>\n  }\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Filtering in Feed Resolver with Prisma Client\nDESCRIPTION: TypeScript resolver implementation for the Query.feed field that filters links based on the provided filterNeedle argument using Prisma Client.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/10-filtering-and-pagination.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  // ... other resolver maps ...\n  Query: {\n    // ... other Query object type field resolver functions ...\n    async feed(parent: unknown, args: { filterNeedle?: string }, context: GraphQLContext) {\n      const where = args.filterNeedle\n        ? {\n            OR: [\n              { description: { contains: args.filterNeedle } },\n              { url: { contains: args.filterNeedle } }\n            ]\n          }\n        : {}\n\n      return context.prisma.link.findMany({ where })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helmet for GraphQL Yoga\nDESCRIPTION: Configuration for using Helmet with GraphQL Yoga to set proper Content Security Policy (CSP) for GraphiQL.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-express.mdx#2025-04-15_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\napp.use(\n  helmet({\n    contentSecurityPolicy: {\n      directives: {\n        'style-src': [\"'self'\", 'unpkg.com'],\n        'script-src': [\"'self'\", 'unpkg.com', \"'unsafe-inline'\"],\n        'img-src': [\"'self'\", 'raw.githubusercontent.com']\n      }\n    }\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Types\nDESCRIPTION: Basic GraphQL schema definition using SDL (Schema Definition Language) that defines a Query type with a hello field\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeDefinitions = /* GraphQL */ `\n  type Query {\n    hello: String!\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch with Cancellation in a Resolver\nDESCRIPTION: This example demonstrates how to use the context.request.signal to cancel a fetch request when the GraphQL request is canceled, ensuring proper resource cleanup.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/execution-cancellation.mdx#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        greeting: String!\n      }\n    `,\n    resolvers: {\n      Query: {\n        greeting: async (_, args, context) => {\n          // This service does not exist\n          const greeting = await fetch('http://localhost:9876/greeting', {\n            signal: context.request.signal\n          }).then(res => res.text())\n\n          return greeting\n        }\n      }\n    }\n  })\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with curl\nDESCRIPTION: Command to send a GraphQL query to the server using curl, demonstrating how to interact with the server without a graphical interface.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/03-graphql-server.mdx#2025-04-15_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST http://localhost:4000/graphql -H \"Content-type: application/json\" --data-raw '{\"query\": \"query { hello }\"}'\n```\n\n----------------------------------------\n\nTITLE: Using @stream Directive in GraphQL Query\nDESCRIPTION: GraphQL operation that demonstrates how to use the @stream directive to receive individual items from a list field as they become available.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/defer-stream.mdx#2025-04-15_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery StreamAlphabet {\n  alphabet @stream\n}\n```\n\n----------------------------------------\n\nTITLE: Testing File Upload with cURL\nDESCRIPTION: A curl command example demonstrating how to test file uploads with GraphQL Yoga. It uses the multipart request format to send a file to the server and execute a GraphQL mutation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/file-uploads.mdx#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:4000/graphql \\\n  -F operations='{ \"query\": \"mutation ($file: File!) { readTextFile(file: $file) }\", \"variables\": { \"file\": null } }' \\\n  -F map='{ \"0\": [\"variables.file\"] }' \\\n  -F 0=@mytext.txt\n```\n\n----------------------------------------\n\nTITLE: Enforcing Session-based Caching with Scope\nDESCRIPTION: Configures response caching with scope to ensure caching only occurs when a session is present.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nuseResponseCache({\n  // cache based on the authentication header\n  session: request => request.headers.get('authentication')\n\n  // You can use configuration object to define the scope\n  scopePerSchemaCoordinate: {\n    'Query.me': 'PRIVATE', // on a field\n    User: 'PRIVATE', // or a type\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic CORS Configuration with Request Builder\nDESCRIPTION: Shows how to implement dynamic CORS configuration using a builder function that constructs options based on the incoming request.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/cors.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\n\nconst yogaApp = createYoga({\n  cors: request => {\n    const requestOrigin = request.headers.get('origin')\n    return {\n      origin: requestOrigin,\n      credentials: true,\n      allowedHeaders: ['X-Custom-Header'],\n      methods: ['POST']\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: WaitUntil Background Job Handling\nDESCRIPTION: Demonstration of using waitUntil for managing background tasks with proper disposal handling.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/explicit-resource-management.mdx#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst yoga = createSchema({\n  typeDefs: /* GraphQL */ `\n    type Query {\n      greetings(name: String!): String\n    }\n  `,\n  resolvers: {\n    Query: {\n      hello: (_, args, context) => {\n        // This does not block the response\n        context.waitUntil(\n          fetch('http://my-analytics.com/analytics', {\n            method: 'POST',\n            body: JSON.stringify({\n              name: args.name,\n              userAgent: context.request.headers.get('User-Agent')\n            })\n          })\n        )\n        return `Hello, ${args.name}`\n      }\n    }\n  }\n})\n\nconst res = await yoga.fetch('http://localhost:4000/graphql', {\n  query: /* GraphQL */ `\n    query {\n      greetings(name: \"John\")\n    }\n  `\n})\n\nconsole.log(await res.json()) // { data: { greetings: \"Hello, John\" } }\n\nawait yoga.dispose()\n// The fetch request for `analytics` will be awaited here\n```\n\n----------------------------------------\n\nTITLE: Configuring Multipart Request Processing Limits in Node.js\nDESCRIPTION: Example demonstrating how to configure limits for multipart request processing in Node.js, including maximum file size, number of files, field size, and header size using createFetch from @whatwg-node/fetch.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/file-uploads.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport { createFetch } from '@whatwg-node/fetch'\n\ncreateYoga({\n  fetchAPI: createFetch({\n    formDataLimits: {\n      // Maximum allowed file size (in bytes)\n      fileSize: 1000000,\n      // Maximum allowed number of files\n      files: 10,\n      // Maximum allowed size of content (operations, variables etc...)\n      fieldSize: 1000000,\n      // Maximum allowed header size for form data\n      headerSize: 1000000\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Increment Global Counter Mutation\nDESCRIPTION: GraphQL mutation to increment the global counter value which will trigger updates to active subscriptions.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/subscriptions/README.md#2025-04-15_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  incrementGlobalCounter\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling with GraphQLError\nDESCRIPTION: Example showing how to throw custom GraphQLErrors for expected error cases, such as resource not found scenarios. Includes user lookup implementation with custom error messages.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/error-masking.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLError } from 'graphql'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst users = [\n  { id: '1', login: 'Laurin' },\n  { id: '2', login: 'Saihaj' },\n  { id: '3', login: 'Dotan' }\n]\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type User {\n        id: ID!\n        login: String!\n      }\n      type Query {\n        user(byId: ID!): User!\n      }\n    `,\n    resolvers: {\n      Query: {\n        user: async (_, args) => {\n          const user = users.find(user => user.id === args.byId)\n          if (!user) {\n            throw new GraphQLError(`User with id '${args.byId}' not found.`)\n          }\n          return user\n        }\n      }\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query\nDESCRIPTION: Code to execute a GraphQL query against the schema using the graphql execute function\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { execute, parse } from 'graphql'\nimport { schema } from './schema'\n\nasync function main() {\n  const myQuery = parse(/* GraphQL */ `\n    query {\n      hello\n    }\n  `)\n\n  const result = await execute({\n    schema,\n    document: myQuery\n  })\n\n  console.log(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Masking for Subgraph Errors in GraphQL Yoga\nDESCRIPTION: TypeScript example showing how to customize error masking behavior in GraphQL Yoga to allow specific subgraph errors to be exposed to clients while maintaining security for other errors.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga, maskError } from 'graphql-yoga'\nimport { schema } from './schema.js'\n\nconst yoga = createYoga({\n  schema,\n  maskedErrors: {\n    maskError(error, message, isDev) {\n      if (error?.extensions?.code === 'DOWNSTREAM_SERVICE_ERROR') {\n        return error\n      }\n\n      return maskError(error, message, isDev)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Response Cache Plugin for GraphQL Yoga\nDESCRIPTION: Command to install the response cache plugin package for GraphQL Yoga using npm or yarn.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @graphql-yoga/plugin-response-cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple JWT Token Lookup Locations\nDESCRIPTION: Example of configuring the JWT plugin to look for the token in multiple locations, including headers and cookies.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimoprt { extractFromHeader, extractFromCookie, useJWT } from '@graphql-yoga/plugin-jwt'\n\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useCookies(),\n    useJWT({\n      lookupLocations: [\n        extractFromHeader({ name: 'authorization', prefix: 'Bearer' }),\n        extractFromHeader({ name: 'x-legacy-auth' }),\n        extractFromHeader({ name: 'x-api-key', prefix: 'API-Access' }),\n        extractFromCookie({ name: 'browserAuth' })\n      ]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT with GraphQL Yoga and WebSocket Connection Support\nDESCRIPTION: Example showing how to use the JWT plugin with GraphQL Yoga, including WebSocket connection support. The code demonstrates how to configure token extraction from both HTTP headers and WebSocket connection parameters.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/jwt/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractFromConnectionParams, extractFromHeader, useJWT } from '@graphql-yoga/plugin-jwt'\n\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useJWT({\n      // So it will look for the token in the connectionParams.my-token field in case of a WebSockets connection\n      // It will check WS params and headers, and get the available one\n      lookupLocations: [\n        extractFromConnectionParams({ name: 'my-token' }),\n        extractFromHeader({ name: 'authorization', prefix: 'Bearer ' })\n      ]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating Schema Creation\nDESCRIPTION: Demonstrates how to migrate from inline schema definition to using the createSchema helper function.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v2.mdx#2025-04-15_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import { createServer } from '@graphql-yoga/node'\n+ import { createYoga, createSchema } from 'graphql-yoga'\n\n- createServer({\n-   typeDefs: /* GraphQL */ `\n-     type Query {\n-       hello: String\n-     }\n-   `,\n-   resolvers: {\n-     Query: {\n-       hello: () => 'world'\n-     }\n-   }\n- })\n\n+ createYoga({\n+   schema: createSchema({\n+     typeDefs: /* GraphQL */ `\n+       type Query {\n+         hello: String\n+       }\n+     `,\n+     resolvers: {\n+       Query: {\n+         hello: () => 'world'\n+       }\n+     }\n+   })\n+ })\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Level in GraphQL Yoga\nDESCRIPTION: Shows how to set a custom logging level (warn) in GraphQL Yoga configuration. This will only log warn and error messages.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/logging-and-debugging.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { schema } from './my-schema.js'\n\nconst yoga = createYoga({\n  schema,\n  logging: 'warn'\n})\n```\n\n----------------------------------------\n\nTITLE: Adding orderBy Argument to Query.feed Field in GraphQL Schema\nDESCRIPTION: Updates the Query.feed field to include the orderBy argument that accepts a LinkOrderByInput, allowing clients to specify sorting criteria.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/advanced/03-advanced-sorting.mdx#2025-04-15_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  info: String!\n  feed(filterNeedle: String, skip: Int, take: Int, orderBy: LinkOrderByInput): [Link!]!\n  me: User!\n}\n```\n\n----------------------------------------\n\nTITLE: Basic APQ Setup in GraphQL Yoga\nDESCRIPTION: Basic server setup with APQ plugin integration in GraphQL Yoga, including schema definition and server initialization\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/automatic-persisted-queries.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { useAPQ } from '@graphql-yoga/plugin-apq'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n    `\n  }),\n  plugins: [useAPQ()]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Counter Subscription Query\nDESCRIPTION: GraphQL subscription query that listens to the counter field which increments every second.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/subscriptions/README.md#2025-04-15_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  counter\n}\n```\n\n----------------------------------------\n\nTITLE: Link.comments Resolver Implementation\nDESCRIPTION: Implementation of the Link.comments resolver that fetches related comments ordered by creation date.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Link: {\n    comments: (parent: Link, args: {}, context: GraphQLContext) => {\n      return context.prisma.comment.findMany({\n        orderBy: { createdAt: 'desc' },\n        where: {\n          linkId: parent.id\n        }\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with JSON Body\nDESCRIPTION: Example of sending a GraphQL query using a POST request with JSON payload following the GraphQL-over-HTTP specification.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-customization.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('/graphql', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    query: 'query { __typename }'\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Session-based Caching with Authentication Header\nDESCRIPTION: Sets up response caching based on the authentication header from the request.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuseResponseCache({\n  // cache based on the authentication header\n  session: request => request.headers.get('authentication')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Plugin with Signing Key Providers in GraphQL Yoga\nDESCRIPTION: Example showing how to configure the JWT plugin with multiple signing key providers including remote JWKS and inline signing keys. This demonstrates the new configuration format introduced in version 3.0.0.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/jwt/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createInlineSigningKeyProvider,\n  createRemoteJwksSigningKeyProvider,\n  useJWT\n} from '@graphql-yoga/plugin-jwt'\n\nuseJWT({\n  // Pass one or more providers\n  singingKeyProviders: [\n    createRemoteJwksSigningKeyProvider({\n      // ...\n    })\n    // This one also acts as a fallback in case of a fetching issue with the 1st provider\n    createInlineSigningKeyProvider({ signingKey: \"...\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Executable GraphQL Schema\nDESCRIPTION: Combining type definitions and resolvers to create an executable GraphQL schema using graphql-yoga\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from 'graphql-yoga'\n\nconst typeDefinitions = /* GraphQL */ `\n  type Query {\n    hello: String!\n  }\n`\n\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello World!'\n  }\n}\n\nexport const schema = createSchema({\n  resolvers: [resolvers],\n  typeDefs: [typeDefinitions]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Parameters in GraphQL Yoga\nDESCRIPTION: Example of configuring GraphQL Yoga to accept additional parameters in the request body beyond the standard GraphQLParams properties.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-customization.mdx#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  /* other options */\n  extraParamNames: ['extraParam1', 'extraParam2']\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Users and a Single User in GraphQL\nDESCRIPTION: This snippet shows a GraphQL query that combines fetching all users and a single user by ID in one operation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n  }\n  user(id: \"user-1\") {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Mutation Type\nDESCRIPTION: Extends the GraphQL schema to include a Mutation type with a postLink field that accepts url and description arguments and returns a Link type.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/05-a-simple-mutation.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeDefinitions = /* GraphQL */ `\n  type Query {\n    info: String!\n    feed: [Link!]!\n  }\n\n  type Mutation {\n    postLink(url: String!, description: String!): Link!\n  }\n\n  type Link {\n    id: ID!\n    description: String!\n    url: String!\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Multipart Configuration Update\nDESCRIPTION: Demonstrates how to migrate multipart configuration to use @whatwg-node/fetch instead of built-in Node configuration.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v2.mdx#2025-04-15_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- import { createServer } from '@graphql-yoga/node'\n+ import { createYoga } from 'graphql-yoga'\n+ import { createFetch } from '@whatwg-node/fetch'\n\n- const yoga = createServer({\n+ const yoga = createYoga({\n+  fetchAPI: createFetch({\n+     useNodeFetch: true,\n+     formDataLimits: {\n-  multipart: {\n      fileSize: 1000000,\n      files: 10,\n      fieldSize: 1000000,\n      headerSize: 1000000,\n    },\n+  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Types in TypeScript\nDESCRIPTION: Defines the core GraphQL schema including Query type with info and feed fields, and a Link type with id, description, and url fields.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/04-a-simple-query.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst typeDefinitions = /* GraphQL */ `\n  type Query {\n    info: String!\n    feed: [Link!]!\n  }\n\n  type Link {\n    id: ID!\n    description: String!\n    url: String!\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data for File Uploads\nDESCRIPTION: Example of sending a GraphQL query with multipart form data, typically used for file uploads, following the GraphQL Multipart Request Specification.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-customization.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst formData = new FormData()\nformData.append('operations', JSON.stringify({ query: 'query { __typename }' }))\nfetch('/graphql', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  },\n  body: formData\n})\n```\n\n----------------------------------------\n\nTITLE: HTTP Status Code and Headers in GraphQL Errors\nDESCRIPTION: Shows how to modify HTTP status codes and headers through GraphQL error extensions. Demonstrates custom HTTP response handling in GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/error-masking.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new GraphQLError(\n  `User with id '${args.byId}' not found.`,\n  {\n    extensions: {\n      http: {\n        status: 400,\n        headers: {\n          'x-custom-header': 'some-value'\n        }\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Payload in GraphQL Resolvers\nDESCRIPTION: Example of how to access the JWT payload in GraphQL resolvers after it has been verified and injected into the context.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    viewer: (parent, args, ctx) => {\n      if (!ctx.jwt) {\n        return throw new GraphQLError('Unauthorized')\n      }\n\n      // ctx.jwt contains an object with `payload`, `token.value` + `token.prefix`\n      return {\n        id: ctx.jwt.payload.sub,\n        name: ctx.jwt.payload.profile.username\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Token Lookup in HTTP Cookie\nDESCRIPTION: Example of configuring the JWT plugin to look for the token in an HTTP cookie, using the @whatwg-node/server-plugin-cookies package.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCookies } from '@whatwg-node/server-plugin-cookies'\nimoprt { extractFromCookie, useJWT } from '@graphql-yoga/plugin-jwt'\n\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    // Make sure to add the useCookies plugin before the useJWT plugin.\n    useCookies(),\n    useJWT({\n      lookupLocations: [extractFromCookie({ name: 'my-cookie' })]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Monitoring Specific GraphQL Operations with Prometheus\nDESCRIPTION: Example demonstrating how to configure Prometheus histogram metrics to monitor timing for specific GraphQL operations based on operation names.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/prometheus/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { execute, parse, specifiedRules, subscribe, validate } from 'graphql'\nimport { envelop, useEngine } from '@envelop/core'\nimport { usePrometheus } from '@envelop/prometheus'\n\nconst TRACKED_OPERATION_NAMES = [\n  // make a list of operation that you want to monitor\n]\n\nconst getEnveloped = envelop({\n  plugins: [\n    useEngine({ parse, validate, specifiedRules, execute, subscribe }),\n    usePrometheus({\n      metrics: {\n        graphql_yoga_http_duration: createHistogram({\n          registry,\n          histogram: {\n            name: 'graphql_envelop_request_duration',\n            help: 'Time spent on HTTP connection',\n            labelNames: ['operationName']\n          },\n          fillLabelsFn: ({ operationName }, _rawContext) => ({ operationName }),\n          phases: ['execute', 'subscribe'],\n          shouldObserve: ({ operationName }) => TRACKED_OPERATIONS.includes(operationName)\n        })\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Querying User Session Data with GraphQL\nDESCRIPTION: A GraphQL query that retrieves the current user session information, including expiration time and user details such as ID, email, and profile image.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/nextjs-auth/README.md#2025-04-15_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery Session {\n  session {\n    expires\n    user {\n      id\n      email\n      image\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Context with Async Function\nDESCRIPTION: Shows how to extend context using an async function that returns a Promise.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/context.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        someNumber: Int!\n      }\n    `,\n    resolvers: {\n      Query: {\n        someNumber: (_, _args, context) => context.someNumber\n      }\n    }\n  }),\n  async context() {\n    return { someNumber: 13 }\n  }\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing postCommentOnLink Mutation Resolver\nDESCRIPTION: Implements the resolver function for the postCommentOnLink mutation, which creates a new comment in the database using Prisma Client.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  // ... other resolver maps ...\n  Mutation: {\n    // ... other field resolver functions\n    async postCommentOnLink(\n      parent: unknown,\n      args: { linkId: string; body: string },\n      context: GraphQLContext\n    ) {\n      const newComment = await context.prisma.comment.create({\n        data: {\n          linkId: parseInt(args.linkId),\n          body: args.body\n        }\n      })\n\n      return newComment\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending GraphQL Query as Plain Text\nDESCRIPTION: Example of sending a GraphQL query as plain text in a POST request with the application/graphql content type.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-customization.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('/graphql', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/graphql'\n  },\n  body: 'query { __typename }'\n})\n```\n\n----------------------------------------\n\nTITLE: Plugin Resource Disposal\nDESCRIPTION: Example of implementing resource cleanup in a plugin using onPluginInit and onDispose hooks.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/explicit-resource-management.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet dbConnection: Connection\nconst plugin = {\n  onPluginInit: async () => {\n    dbConnection = await createConnection()\n  },\n  onDispose: async () => {\n    // Dispose of resources\n    await dbConnection.close()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Default GraphiQL Document String in GraphQL Yoga\nDESCRIPTION: This snippet demonstrates how to set a default query that appears when GraphiQL is loaded. It creates a GraphQL Yoga server with a custom defaultQuery option which pre-populates the query editor.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/graphiql.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\n\n// Provide your schema\nconst yoga = createYoga({\n  graphiql: {\n    defaultQuery: /* GraphQL */ `\n      query {\n        hello\n      }\n    `\n  }\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote JWKS Signing Key Provider\nDESCRIPTION: Example of configuring the JWT plugin to fetch the signing key from a remote JWKS endpoint.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRemoteJwksSigningKeyProvider, useJWT } from '@graphql-yoga/plugin-jwt'\n\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useJWT({\n      signingKeyProviders: [\n        createRemoteJwksSigningKeyProvider({\n          jwksUri: 'https://example.com/.well-known/jwks.json'\n        })\n      ]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using @cacheControl Directive for Scoped Caching\nDESCRIPTION: Demonstrates how to use the @cacheControl directive in the GraphQL schema to define caching scope.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cacheControlDirective } from '@graphql-yoga/plugin-response-cache'\n\nconst typeDefs = /* GraphQL */ `\n  # the directive needs to be defined in the schema\n  ${cacheControlDirective}\n\n  type Query {\n    # cache operations selecting Query.lazy for 10 seconds\n    me: User @cacheControl(scope: PRIVATE)\n  }\n\n  type User @cacheControl(scope: PRIVATE) {\n    #...\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Testing Context with cURL Command\nDESCRIPTION: Shell command to test the GraphQL context implementation by sending a request with custom headers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/context.mdx#2025-04-15_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:4000/graphql \\\n  -H \"content-type: application/json\" \\\n  -H \"x-foo: iliketurtles\"\n--data-raw '{\"query\": \"query { logHeader }\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Defer Stream Plugin in GraphQL Yoga\nDESCRIPTION: Example showing how to set up a GraphQL Yoga server with the Defer Stream plugin, enabling streaming responses.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/envelop-plugins.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { useDeferStream } from '@graphql-yoga/plugin-defer-stream'\n\nconst yoga = createYoga({\n  plugins: [useDeferStream()]\n})\n\nconst server = createServer(yoga)\n\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: GraphQL Comment Query Operation\nDESCRIPTION: Example GraphQL query operation to fetch a comment by ID.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery comment {\n  comment(id: 1) {\n    id\n    body\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript CORS Configuration Type Definition\nDESCRIPTION: Defines the TypeScript type for CORS configuration options in GraphQL Yoga, including origin, methods, headers, credentials, and max age settings.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/cors.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CORSOptions =\n  | {\n      origin?: string[] | string\n      methods?: string[]\n      allowedHeaders?: string[]\n      exposedHeaders?: string[]\n      credentials?: boolean\n      maxAge?: number\n    }\n  | false\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Liveliness Health Check Endpoint in GraphQL Yoga with TypeScript\nDESCRIPTION: This code snippet demonstrates how to customize the built-in liveliness health check endpoint in GraphQL Yoga. It shows how to change the default '/health' endpoint to a custom path using the 'healthCheckEndpoint' configuration option.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/health-check.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { schema } from './my-service'\n\nconst yoga = createYoga({\n  schema,\n  healthCheckEndpoint: '/live'\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Using @defer Directive in GraphQL Query\nDESCRIPTION: GraphQL operation that demonstrates how to use the @defer directive to postpone the delivery of slow fields while receiving fast fields immediately.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/defer-stream.mdx#2025-04-15_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery SlowAndFastFieldWithDefer {\n  ... on Query @defer {\n    slowField\n  }\n  fastField\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic GraphiQL Options Based on Request Headers\nDESCRIPTION: This snippet shows how to conditionally enable GraphiQL based on the presence of a specific header in the incoming request. It allows fine-grained control over when GraphiQL is available.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/graphiql.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\n\n// Provide your schema\nconst yoga = createYoga({\n  graphiql(request) {\n    if (request.headers.get('graphiql-enabled')) {\n      return true\n    }\n    return false\n  }\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Token Lookup in GraphQL Yoga JWT Plugin\nDESCRIPTION: Example showing how to use a custom function for token lookup in the JWT plugin configuration. This provides a more flexible approach for extracting tokens from custom locations.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/jwt/CHANGELOG.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuseJWT({\n  lookupLocations: [payload => payload.request.headers.get('...')]\n})\n```\n\n----------------------------------------\n\nTITLE: Extending context type with ExecutionContext in GraphQL Yoga for Cloudflare Workers\nDESCRIPTION: This example shows how to extend the context type to include both the Cloudflare Workers' environment and ExecutionContext for use in resolvers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-cloudflare-workers.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\n\ninterface Env {\n  MY_NAMESPACE: KVNamespace\n}\n\nconst yoga = createYoga<Env & ExecutionContext>({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n    `,\n    resolvers: {\n      Query: {\n        hello: () => 'Hello World!'\n      }\n    }\n  })\n})\n\nexport default { fetch: yoga.fetch }\n```\n\n----------------------------------------\n\nTITLE: Migrating from createServer to createYoga\nDESCRIPTION: Shows how to update the server creation function from createServer to createYoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v2.mdx#2025-04-15_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { createServer } from '@graphql-yoga/node'\n+ import { createYoga } from 'graphql-yoga'\nimport { schema } from './schema';\n\n- const yoga = createServer({\n+ const yoga = createYoga({\n     schema,\n })\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Token Lookup in HTTP Header\nDESCRIPTION: Example of configuring the JWT plugin to look for the token in a custom HTTP header with a specific prefix.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimoprt { extractFromHeader, useJWT } from '@graphql-yoga/plugin-jwt'\n\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useJWT({\n      lookupLocations: [\n        extractFromHeader({ name: 'x-auth-token', prefix: 'Bearer' }),\n      ]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Invalid Field Query Example\nDESCRIPTION: Example showing how GraphQL Armor handles invalid field queries by disabling the suggestion feature.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/graphql-armor/README.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:4000/graphql' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\"query\":\"query { books { titlee } }\"}'\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Retrieving Links\nDESCRIPTION: A GraphQL query operation that fetches all links from the database, retrieving their id, url, and description.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/07-connecting-server-and-database.mdx#2025-04-15_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  feed {\n    id\n    url\n    description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Field Suggestions with GraphQL Armor Plugin in TypeScript\nDESCRIPTION: This snippet shows how to disable both introspection and field suggestions (\"did you mean x\") using a combination of the introspection plugin and the graphql-armor block field suggestions plugin.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/introspection.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport { blockFieldSuggestionsPlugin } from '@escape.tech/graphql-armor-block-field-suggestions'\n\n// Provide your schema\nconst yoga = createYoga({\n  graphiql: false,\n  plugins: [useDisableIntrospection(), blockFieldSuggestionsPlugin()]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL JIT Plugin with Envelop\nDESCRIPTION: Demonstrates integration of GraphQL JIT optimization using Envelop plugin system in GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/envelop-plugins.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { useGraphQlJit } from '@envelop/graphql-jit'\n\n// Provide your schema\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        greetings: String!\n      }\n    `,\n    resolvers: {\n      Query: {\n        greetings: () => 'Hello World!'\n      }\n    }\n  }),\n  plugins: [useGraphQlJit()]\n})\n\n// Start the server and explore http://localhost:4000/graphql\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling GraphQL Schema Introspection with a Plugin in TypeScript\nDESCRIPTION: This snippet demonstrates how to disable GraphQL schema introspection using the @graphql-yoga/plugin-disable-introspection plugin. It creates a Yoga instance with the introspection disabled and GraphiQL interface turned off.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/introspection.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport { useDisableIntrospection } from '@graphql-yoga/plugin-disable-introspection'\n\n// Provide your schema\nconst yoga = createYoga({\n  graphiql: false,\n  plugins: [useDisableIntrospection()]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New User with GraphQL Mutation\nDESCRIPTION: This snippet demonstrates a GraphQL mutation to create a new user with a given name, returning the created user's id and name.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  createUser(name: \"Bob\") {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript with TSX for Node.js Execution\nDESCRIPTION: Command to execute a TypeScript file directly using TSX, which allows running TypeScript code without explicit compilation for easier development workflow.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/06-adding-a-database.mdx#2025-04-15_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsx src/script.ts\n```\n\n----------------------------------------\n\nTITLE: Updating Parser and Validation Cache Configuration in GraphQL Yoga\nDESCRIPTION: Diff showing the changes in parser and validation cache configuration. The separate 'parserCache' and 'validationCache' options are combined into a single 'parserAndValidationCache' option.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v3.mdx#2025-04-15_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  DocumentNode,\n-  GraphQLError,\n+  validate,\n} from 'graphql'\nimport { createYoga } from 'graphql-yoga'\nimport { schema } from './my-schema'\nimport {\n  documentCacheStore,\n  errorCacheStore,\n  validationCacheStore,\n} from './my-cache'\n\ninterface CacheStore<T> {\n  get(key: string): T | undefined\n  set(key: string, value: T): void\n}\n\nconst yoga = createYoga({\n  schema,\n- parserCache: {\n+ parserAndValidationCache: {\n    documentCache: documentCacheStore as CacheStore<DocumentNode>,\n    errorCache: errorCacheStore as CacheStore<Error>,\n+   validationCache: validationCacheStore as CacheStore<typeof validate>,\n  },\n- validationCache: validationCacheStore as CacheStore<readonly GraphQLError[]>\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Pagination Parameters to GraphQL Schema\nDESCRIPTION: Updated GraphQL schema definition that adds skip and take pagination parameters to the feed query for implementing limit-offset pagination.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/10-filtering-and-pagination.mdx#2025-04-15_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  info: String!\n  feed(filterNeedle: String, skip: Int, take: Int): [Link!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Masked Unexpected Errors Query\nDESCRIPTION: GraphQL query that demonstrates how unexpected errors are masked with a generic error message.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/error-handling/README.md#2025-04-15_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  greeting\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"Unexpected error.\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 3\n        }\n      ],\n      \"path\": [\"greeting\"]\n    }\n  ],\n  \"data\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Prometheus Metrics Configuration\nDESCRIPTION: Shows the updated configuration for custom metrics with registry parameter and removed registers property.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/prometheus/CHANGELOG.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nusePrometheus({\n  execute: createHistogram({\n    registry: registry\n    histogram: new Histogram({\n      name: 'my_custom_name',\n      help: 'HELP ME',\n      labelNames: ['opText'] as const,\n    }),\n    fillLabelsFn: () => {}\n  }),\n  requestCount: createCounter({\n    registry: registry\n    histogram: new Histogram({\n      name: 'my_custom_name',\n      help: 'HELP ME',\n      labelNames: ['opText'] as const,\n    }),\n    fillLabelsFn: () => {}\n  }),\n  requestSummary: createSummary({\n    registry: registry\n    histogram: new Histogram({\n      name: 'my_custom_name',\n      help: 'HELP ME',\n      labelNames: ['opText'] as const,\n    }),\n    fillLabelsFn: () => {}\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline JWT Signing Key Provider\nDESCRIPTION: Example of configuring the JWT plugin with an inline signing key provider, using an environment variable for the secret.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createInlineSigningKeyProvider, useJWT } from '@graphql-yoga/plugin-jwt'\n\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useJWT({\n      signingKeyProviders: [createInlineSigningKeyProvider(process.env.MY_JWT_SECRET)]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Batch Request Limits\nDESCRIPTION: Shows how to configure a custom limit for the number of operations allowed in a single batched request, setting the maximum to 2 operations.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-batching.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nexport const yoga = createYoga<ServerContext, UserContext>({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n    `\n  }),\n  batching: {\n    limit: 2\n  }\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Cache Construction for Invalidation\nDESCRIPTION: Sets up a manual cache instance for use with the response cache plugin, allowing programmatic invalidation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createInMemoryCache, useResponseCache } from '@graphql-yoga/plugin-response-cache'\n\nconst cache = createInMemoryCache()\n\nuseResponseCache({\n  session: () => null,\n  cache\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple GraphQL Schema with Query Type\nDESCRIPTION: This snippet shows a basic GraphQL schema with a single Query type containing one field 'hello' that returns a non-nullable String.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  hello: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Priming APQ Cache with cURL\nDESCRIPTION: Example of registering an operation in APQ cache using cURL command\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/automatic-persisted-queries.mdx#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H 'Content-Type: application/json' http://localhost:4000/graphql \\\n  -d '{\"query\":\"{__typename}\",\"extensions\":{\"persistedQuery\":{\"version\":1,\"sha256Hash\":\"ecf4edb46db40b5132295c0291d62fb65d6759a9eedfa4d5d612dd5ec54a6b38\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Implementing a plugin with dependent plugin addition in GraphQL Yoga V5\nDESCRIPTION: This TypeScript code demonstrates how to create a plugin that adds another plugin during initialization. The addPlugin method is now executed inplace, changing the order of plugin execution compared to V4.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v4.mdx#2025-04-15_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst plugin: Plugin = {\n  onPluginInit({ addPlugin }) {\n    addPlugin(useAnotherPlugin())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Supergraph Configuration File for Apollo Federation\nDESCRIPTION: YAML configuration file (supergraph.yaml) defining subgraphs for Apollo Federation, including routing URLs and schema file paths for each service.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsubgraphs:\n  accounts:\n    routing_url: http://localhost:4001/graphql\n    schema:\n      file: ./services/accounts.graphql\n  inventory:\n    routing_url: http://localhost:4002/graphql\n    schema:\n      file: ./services/inventory.graphql\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migration for Database Creation\nDESCRIPTION: Command to create and run a Prisma migration that generates the SQLite database and required tables based on the schema definition.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/06-adding-a-database.mdx#2025-04-15_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Rejection for Missing or Invalid JWT Tokens\nDESCRIPTION: Shows how to configure the JWT plugin to reject requests with status code 401 when tokens are missing or invalid.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useJWT({\n      reject: {\n        missingToken: true,\n        invalidToken: true\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Explicit Node.js Server Disposal\nDESCRIPTION: Implementation of explicit GraphQL Yoga disposal when running on a Node.js server, using the server's close event.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/explicit-resource-management.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String\n      }\n    `,\n    resolvers: {\n      Query: { hello: () => 'world' }\n    }\n  })\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\nserver.once('close', async () => {\n  await yoga.dispose()\n  console.info('Server is disposed so is Yoga')\n})\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Operation for Cache Invalidation\nDESCRIPTION: Example of a GraphQL mutation operation that will trigger automatic cache invalidation for the affected type.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateUser {\n  updateUser(id: 1, newName: \"John\") {\n    __typename\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual GraphQL Yoga Disposal\nDESCRIPTION: Shows how to manually dispose of a GraphQL Yoga instance using the dispose method.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/explicit-resource-management.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('Yoga is starting')\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String\n      }\n    `,\n    resolvers: {\n      Query: {\n        hello: () => 'world'\n      }\n    }\n  })\n})\nawait yoga.dispose()\nconsole.log('Yoga is disposed')\n```\n\n----------------------------------------\n\nTITLE: Executing @stream Operation via curl\nDESCRIPTION: Shell command to execute a GraphQL operation using the @stream directive via curl, with the required headers for multipart response handling.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/defer-stream.mdx#2025-04-15_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -g -X POST \\\n  -H \"accept:multipart/mixed\" \\\n  -H \"content-type: application/json\" \\\n  -d '{\"query\":\"query StreamAlphabet { alphabet @stream }\"}' \\\n  http://localhost:4000/graphql\n```\n\n----------------------------------------\n\nTITLE: Configuring APQ Error Responses\nDESCRIPTION: Example of configuring APQ to force 200 OK status code for error responses\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/automatic-persisted-queries.mdx#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createSchema, createYoga } from 'graphql-yoga'\nimport { useAPQ } from '@graphql-yoga/plugin-apq'\n\n// Note: this store grows infinitely, so it is not a good idea to use it in production.\nconst store: APQStore = new Map()\n\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        hello: String!\n      }\n    `\n  }),\n  plugins: [\n    useAPQ({\n      responseConfig: {\n        forceStatusCodeOk: true\n      }\n    })\n  ]\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NestJS Federation Gateway with GraphQL Yoga\nDESCRIPTION: TypeScript configuration for setting up a NestJS Federation gateway using the Yoga Gateway driver with service configuration.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-nestjs.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { YogaGatewayDriver, YogaGatewayDriverConfig } from '@graphql-yoga/nestjs-federation'\nimport { Module } from '@nestjs/common'\nimport { GraphQLModule } from '@nestjs/graphql'\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<YogaGatewayDriverConfig>({\n      driver: YogaGatewayDriver,\n      gateway: {\n        services: [{ name: 'subgraph', url: 'http://subgraph/graphql' }]\n      }\n    })\n  ]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga with Express\nDESCRIPTION: Command for installing the required dependencies for using GraphQL Yoga with Express.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-express.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i express graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Defining EnabledFn Type in GraphQL Yoga Response Cache Plugin\nDESCRIPTION: TypeScript type definition for the EnabledFn function that determines whether caching is enabled for a particular request. It takes GraphQLParams and Request objects as arguments and returns a boolean value.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/response-cache/CHANGELOG.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype EnabledFn = (params: GraphQLParams, request: Request) => boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring Session-based Caching with JWT Context\nDESCRIPTION: Configures response caching using the JWT token from the GraphQL context.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuseResponseCache({\n  // cache based on the authentication header\n  session: ({ context }) => context.jwt.token\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing JWT Context Injection Field Name in GraphQL Yoga\nDESCRIPTION: Demonstrates how to customize the field name used when injecting the JWT payload into the GraphQL context.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useJWT({\n      extendContext: { fieldName: 'myJwt' }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga with Apollo Inline Trace Plugin\nDESCRIPTION: Command to install GraphQL Yoga and the Apollo Inline Trace plugin required for implementing federated tracing in Apollo Federation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga @graphql-yoga/plugin-apollo-inline-trace graphql\n```\n\n----------------------------------------\n\nTITLE: Link Type Schema Definition\nDESCRIPTION: GraphQL schema definition for Link type with comments field.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype Link {\n  id: ID!\n  description: String!\n  url: String!\n  comments: [Comment!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Example Query with Sorting by Creation Date\nDESCRIPTION: Demonstrates a GraphQL query that uses the sorting functionality to retrieve links sorted by their creation dates in ascending order.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/advanced/03-advanced-sorting.mdx#2025-04-15_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  feed(orderBy: { createdAt: asc }) {\n    id\n    description\n    url\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Rejection Behavior in GraphQL Yoga JWT Plugin\nDESCRIPTION: Example showing how to configure token rejection behavior for missing or invalid tokens. This demonstrates the token rejection configuration introduced in version 3.0.0.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/jwt/CHANGELOG.md#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nuseJWT({\n  reject: {\n    missingToken: true,\n    invalidToken: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Argument Sanitization\nDESCRIPTION: Enhanced resolver implementation with input validation for the take parameter, enforcing minimum and maximum values with clear error messages when limits are exceeded.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/10-filtering-and-pagination.mdx#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other code ...\nimport { GraphQLError } from 'graphql'\n\nconst applyTakeConstraints = (params: { min: number; max: number; value: number }) => {\n  if (params.value < params.min || params.value > params.max) {\n    throw new GraphQLError(\n      `'take' argument value '${params.value}' is outside the valid range of '${params.min}' to '${params.max}'.`\n    )\n  }\n  return params.value\n}\n\nconst resolvers = {\n  // ... other resolvers maps ...\n  Query: {\n    // ... other Query object type resolver functions ...\n    async feed(\n      parent: unknown,\n      args: { filterNeedle?: string; skip?: number; take?: number },\n      context: GraphQLContext\n    ) {\n      const where = args.filterNeedle\n        ? {\n            OR: [\n              { description: { contains: args.filterNeedle } },\n              { url: { contains: args.filterNeedle } }\n            ]\n          }\n        : {}\n\n      const take = applyTakeConstraints({\n        min: 1,\n        max: 50,\n        value: args.take ?? 30\n      })\n\n      return context.prisma.link.findMany({\n        where,\n        skip: args.skip,\n        take\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga Dependencies for NestJS\nDESCRIPTION: Command to install required packages for using GraphQL Yoga with NestJS, including the core GraphQL packages and Yoga driver.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-nestjs.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @nestjs/graphql @graphql-yoga/nestjs graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query Using Filtering\nDESCRIPTION: Example GraphQL query that uses the filterNeedle parameter to search for links containing 'QL' in either the description or URL.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/10-filtering-and-pagination.mdx#2025-04-15_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  feed(filterNeedle: \"QL\") {\n    id\n    description\n    url\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Cache Invalidation Examples\nDESCRIPTION: Demonstrates various ways to manually invalidate cached results for specific types or entities.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncache.invalidate([{ typename: 'User' }])\n\ncache.invalidate([{ typename: 'User', id: '1' }])\n\ncache.invalidate([\n  { typename: 'Post', id: '1' },\n  { typename: 'User', id: '2' }\n])\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Type Definitions for TypeScript\nDESCRIPTION: Type definitions for AWS Lambda to resolve TypeScript typings issues when working with streamified responses. These types extend the global namespace with AWS Lambda specific stream handling functionality.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-aws-lambda.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Writable } from 'node:stream'\nimport type { Context, Handler } from 'aws-lambda'\n\ndeclare global {\n  namespace awslambda {\n    export namespace HttpResponseStream {\n      function from(\n        responseStream: ResponseStream,\n        metadata: {\n          statusCode?: number\n          headers?: Record<string, string>\n        }\n      ): ResponseStream\n    }\n\n    export type ResponseStream = Writable & {\n      setContentType(type: string): void\n    }\n\n    export type StreamifyHandler<Event> = (\n      event: Event,\n      responseStream: ResponseStream,\n      context: Context\n    ) => Promise<unknown>\n\n    export function streamifyResponse<Event>(handler: StreamifyHandler<Event>): Handler<Event>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga Federation Dependencies for NestJS\nDESCRIPTION: Command to install required packages for implementing Apollo Federation with GraphQL Yoga in NestJS.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-nestjs.mdx#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @nestjs/graphql @graphql-yoga/nestjs-federation graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Querying All Users in GraphQL\nDESCRIPTION: This snippet shows a GraphQL query to fetch all users, requesting their id and name fields.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Creating a New Link\nDESCRIPTION: A GraphQL mutation operation that creates a new link in the database with the specified URL and description, returning the generated ID.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/07-connecting-server-and-database.mdx#2025-04-15_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  postLink(url: \"www.prisma.io\", description: \"Prisma replaces traditional ORMs\") {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga with Apollo Managed Federation\nDESCRIPTION: Command to install GraphQL Yoga and the Apollo Managed Federation plugin for implementing a Federation Gateway connected to Apollo GraphOS.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga graphql @graphql-yoga/apollo-managed-federation\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQL Schema with Comment Type and Mutations\nDESCRIPTION: Updates the GraphQL schema to include the Comment type, a query for fetching a comment by ID, and a mutation for posting a comment on a link.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  info: String!\n  feed: [Link!]!\n  comment(id: ID!): Comment\n}\n\ntype Mutation {\n  postLink(url: String!, description: String!): Link!\n  postCommentOnLink(linkId: ID!, body: String!): Comment!\n}\n\ntype Link {\n  id: ID!\n  description: String!\n  url: String!\n}\n\ntype Comment {\n  id: ID!\n  createdAt: String!\n  body: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga Dependencies\nDESCRIPTION: Command to install required packages graphql-yoga and graphql using npm.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-bun.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query Using Pagination\nDESCRIPTION: Example GraphQL query demonstrating how to use skip and take pagination parameters to retrieve the second link from the feed.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/10-filtering-and-pagination.mdx#2025-04-15_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  feed(take: 1, skip: 1) {\n    id\n    description\n    url\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga with Apollo Federation Plugin\nDESCRIPTION: Package installation command for adding GraphQL Yoga and Apollo Managed Federation plugin dependencies.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apollo-managed-federation/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add graphql-yoga @graphql-yoga/apollo-managed-federation\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in GraphQL Yoga\nDESCRIPTION: Demonstrates how to enable debug level logging in GraphQL Yoga server configuration. Sets the logging level to 'debug' which enables all logging levels.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/logging-and-debugging.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { schema } from './my-schema.js'\n\nconst yoga = createYoga({\n  schema,\n  logging: 'debug'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga for NestJS\nDESCRIPTION: Command to install the necessary dependencies for integrating GraphQL Yoga with NestJS, including the core packages for NestJS GraphQL, GraphQL Yoga, GraphQL, and the NestJS adapter.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/nestjs/README.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @nestjs/graphql graphql-yoga graphql @graphql-yoga/nestjs\n```\n\n----------------------------------------\n\nTITLE: Using @defer directive for partial GraphQL responses\nDESCRIPTION: Example showing how to use the @defer directive to get partial GraphQL operation results as soon as possible.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-apollo-server.mdx#2025-04-15_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery AB($postId: ID!) {\n  ... on Query @defer(label: \"A\") {\n    viewer {\n      id\n      name\n    }\n  }\n  ... on Query @defer(label: \"A\") {\n    post(id: $postId) {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Mutation Query\nDESCRIPTION: Example GraphQL mutation query for testing the postLink mutation operation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/05-a-simple-mutation.mdx#2025-04-15_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  postLink(url: \"www.prisma.io\", description: \"Prisma replaces traditional ORMs\") {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feed Query with Comments\nDESCRIPTION: GraphQL query to fetch feed with related comments.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery feed {\n  feed {\n    id\n    comments {\n      id\n      body\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Apollo Server with Express integration\nDESCRIPTION: Diff showing how to replace Apollo Server middleware with GraphQL Yoga in an Express application.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-apollo-server.mdx#2025-04-15_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- server.applyMiddleware({ app })\n+ app.use('/graphql', yoga)\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Dependencies\nDESCRIPTION: Command to install graphql and graphql-yoga packages required for creating and executing GraphQL schemas\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i graphql@16.10.0 graphql-yoga@5.10.4\n```\n\n----------------------------------------\n\nTITLE: Creating New Prometheus Registry Instance\nDESCRIPTION: Demonstrates creating a new Prometheus registry instance for each plugin initialization to avoid metric duplication.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/prometheus/CHANGELOG.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction usePrometheusWithRegistry() {\n  const registry = new Registry()\n  return usePrometheus({\n    registry,\n    ...\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Request with Extra Parameters\nDESCRIPTION: Example of sending a GraphQL request with extra parameters that have been configured to be allowed by the server.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-customization.mdx#2025-04-15_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await yoga.fetch('/graphql', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    query: 'query { __typename }',\n    extraParam1: 'value1',\n    extraParam2: 'value2'\n  })\n})\n\nconsole.assert(res.status === 200)\n```\n\n----------------------------------------\n\nTITLE: Disabling CORS in GraphQL Yoga\nDESCRIPTION: Demonstrates how to completely disable CORS functionality by setting the cors property to false.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/cors.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\n\nconst yogaApp = createYoga({\n  cors: false\n  // ...other args\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Form URL Encoded Request\nDESCRIPTION: Example of sending a GraphQL query using a POST request with form URL encoded data.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-customization.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('/graphql', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  body: 'query=query { __typename }'\n})\n```\n\n----------------------------------------\n\nTITLE: Sending GraphQL Query with curl to Get ETag and Last-Modified Headers\nDESCRIPTION: This curl command sends a GraphQL query to the server to retrieve the ETag and Last-Modified headers. These headers are used for caching purposes in subsequent requests.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'Content-Type: application/json' \\\n  \"http://localhost:4000/graphql?query={me{id name}}\" -v\n```\n\n----------------------------------------\n\nTITLE: Server Response with ETag and Last-Modified Headers\nDESCRIPTION: This snippet shows the server's response to the GraphQL query, including the ETag and Last-Modified headers. The ETag is used to identify the cached response, while Last-Modified is used to determine if the cached response is still valid.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n> GET /graphql?query={me{id,name}} HTTP/1.1\n> Host: localhost:4000\n> User-Agent: curl/7.68.0\n> Accept: application/json\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 200 OK\n< access-control-allow-origin: *\n< content-length: 130\n< content-type: application/json; charset=utf-8\n< etag: 2c0ebfe7b2b0273029f2fa23a99d213b56f4838756b3ef7b323c04de1e836be3\n< last-modified: Wed Feb 15 2023 15:23:55 GMT+0300 (GMT+03:00)\n< Date: Wed, 15 Feb 2023 12:23:55 GMT\n< Connection: keep-alive\n< Keep-Alive: timeout=5\n<\n\n{\"data\":{\"me\":{\"id\":\"1\",\"name\":\"Bob\"}}}\n```\n\n----------------------------------------\n\nTITLE: Counter Subscription Response\nDESCRIPTION: Example JSON responses from the counter subscription showing how the value increments over time.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/subscriptions/README.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"counter\": 1,\n  }\n}\n// ... 1 seconds\n{\n  \"data\": {\n    \"counter\": 2,\n  }\n}\n// ... 2 seconds\n{\n  \"data\": {\n    \"counter\": 3,\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using await syntax for GraphQL Yoga Disposal\nDESCRIPTION: Demonstrates how to create and automatically dispose of a GraphQL Yoga instance using the await using syntax within a block scope.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/explicit-resource-management.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('Yoga is starting')\n{\n  await using yoga = createYoga({\n    schema: createSchema({\n      typeDefs: /* GraphQL */ `\n        type Query {\n          hello: String\n        }\n      `,\n      resolvers: {\n        Query: {\n          hello: () => 'world'\n        }\n      }\n    })\n  })\n}\nconsole.log('Yoga is disposed')\n```\n\n----------------------------------------\n\nTITLE: Starting Apollo Managed Federation Gateway with pnpm\nDESCRIPTION: This command starts the Apollo Managed Federation Gateway server using pnpm. After running this command, the server will be accessible at http://localhost:4000.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/apollo-managed-federation/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Querying a Single User by ID in GraphQL\nDESCRIPTION: This snippet demonstrates a GraphQL query to fetch a single user by their ID, requesting their id and name fields.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  user(id: \"user-1\") {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Counter Subscription Query\nDESCRIPTION: GraphQL subscription query that listens to the globalCounter field which can be incremented through mutations.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/subscriptions/README.md#2025-04-15_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  globalCounter\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Validation and Parser Caching in GraphQL Yoga\nDESCRIPTION: This snippet demonstrates how to disable the default parsing and validation caching in GraphQL Yoga. It uses the 'parserAndValidationCache' option set to false when creating a new Yoga instance.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/parsing-and-validation-caching.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\nimport { schema } from './my-schema'\n\nconst yoga = createYoga({\n  schema,\n  parserAndValidationCache: false // disable parse and validate caching\n})\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client Type Definitions\nDESCRIPTION: Command to manually generate Prisma Client type definitions based on the schema, ensuring up-to-date types for TypeScript integration.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/06-adding-a-database.mdx#2025-04-15_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Executing a Query with Header Authorization in GraphQL\nDESCRIPTION: Curl command to perform a GraphQL query with authentication provided via the 'x-authorization' header. This example uses the token 'aaa'.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/generic-auth/README.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -g \\\n  -X POST \\\n  -H \"content-type: application/json\" \\\n  -H \"x-authorization: aaa\" \\\n  -d '{\"query\":\"query Hi { requiresAuth }\"}' \\\n  \"http://localhost:4000/graphql\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Without Name Parameter\nDESCRIPTION: Example GraphQL query to fetch hello message without a name parameter.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/hello-world/README.md#2025-04-15_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hello\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Instrumentation Composition in GraphQL Yoga\nDESCRIPTION: Example demonstrating how to customize the composition of multiple plugin instrumentations with specific execution order\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/envelop-plugins.mdx#2025-04-15_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { composeInstrumentation, envelop } from '@envelop/core'\n\nconst { instrumentation: instrumentation1, ...plugin1 } = usePlugin1()\nconst { instrumentation: instrumentation2, ...plugin2 } = usePlugin2()\n\nconst instrumentation = composeInstrumentation([instrumentation2, instrumentation1])\n\nconst getEnveloped = envelop({\n  plugin: [{ insturments }, plugin1, plugin2]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the App\nDESCRIPTION: Commands to install project dependencies and start the GraphQL server for the subscriptions example.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/subscriptions/README.md#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm install # or npm install\npnpm start   # or npm start\n```\n\n----------------------------------------\n\nTITLE: Breaking API Change Example - Federation Plugin Usage\nDESCRIPTION: Example showing the breaking change in version 0.8.0 where the supergraphManager option was removed in favor of passing the SupergraphManager directly to the plugin.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apollo-managed-federation/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- useManagedFederation({ supergraphManager })\n+ useManagedFederation(supergraphManager)\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request with GraphQL Query in URL\nDESCRIPTION: Example of sending a GraphQL query using a GET request with the query in the URL parameters, following the GraphQL-over-HTTP specification.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-customization.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('/graphql?query=query { __typename }')\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Endpoint in GraphQL Yoga\nDESCRIPTION: Shows how to configure a custom GraphQL endpoint to avoid the default 404 landing page.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/landing-page.mdx#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  graphqlEndpoint: '/my-graphql-endpoint'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga with µWebSockets.js Dependencies\nDESCRIPTION: Commands to install the required packages including GraphQL Yoga, GraphQL, and µWebSockets.js.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-uwebsockets.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga graphql uWebSockets.js@uNetworking/uWebSockets.js#v20.31.0\n```\n\n----------------------------------------\n\nTITLE: Testing Exposed Expected Errors Query\nDESCRIPTION: GraphQL query that shows how expected errors are exposed with detailed error information including custom extensions.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/error-handling/README.md#2025-04-15_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  user(byId: \"6\") {\n    id\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"User with id '6' not found.\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 3\n        }\n      ],\n      \"path\": [\"user\"],\n      \"extensions\": {\n        \"code\": \"USER_NOT_FOUND\",\n        \"someRandomExtensions\": {\n          \"aaaa\": 3\n        }\n      }\n    }\n  ],\n  \"data\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Custom Next.js Server\nDESCRIPTION: Command to start the custom Next.js server with WebSocket support\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-nextjs.mdx#2025-04-15_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone NestJS Application Module with GraphQL Yoga\nDESCRIPTION: TypeScript configuration for setting up a basic NestJS application module using the GraphQL Yoga driver.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-nestjs.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { YogaDriver, YogaDriverConfig } from '@graphql-yoga/nestjs'\nimport { Module } from '@nestjs/common'\nimport { GraphQLModule } from '@nestjs/graphql'\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<YogaDriverConfig>({\n      driver: YogaDriver\n    })\n  ]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server in Bash\nDESCRIPTION: Commands to start the Next.js development server using npm, yarn, or pnpm package managers. After running any of these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/nextjs-app/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Apollo Federation Service\nDESCRIPTION: Command to install the necessary dependencies for implementing a Federation service with GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga @apollo/subgraph graphql\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GCP Cloud Functions with GraphQL Yoga\nDESCRIPTION: Command to install the necessary dependencies for running GraphQL Yoga on Google Cloud Functions, including functions-framework, graphql-yoga, and graphql packages.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-gcp.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @google-cloud/functions-framework graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Using ETag and Last-Modified Headers to Check Cached Response Validity\nDESCRIPTION: This curl command demonstrates how to use the previously received ETag and Last-Modified headers in subsequent requests. The ETag is sent as the If-None-Match header, and Last-Modified is sent as the If-Modified-Since header to check if the cached response is still valid.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Accept: application/json\" \\\n  -H \"If-None-Match: 2c0ebfe7b2b0273029f2fa23a99d213b56f4838756b3ef7b323c04de1e836be3\" \\\n  -H \"If-Modified-Since: Wed Feb 15 2023 15:23:55 GMT\" \\\n  \"http://localhost:4000/graphql?query=\\{me\\{id,name\\}\\}\" -v\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GraphQL Yoga with Azure Functions\nDESCRIPTION: Command to install the required dependencies for running GraphQL Yoga on Azure Functions. Installs the Azure Functions SDK, GraphQL Yoga, and GraphQL core packages.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-azure-functions.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @azure/functions graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga and Koa Dependencies\nDESCRIPTION: This command installs the necessary npm packages for integrating GraphQL Yoga with Koa, including koa, graphql-yoga, and graphql.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-koa.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i koa graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Global Counter Initial Response\nDESCRIPTION: Initial JSON response from the globalCounter subscription showing the starting value of 0.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/subscriptions/README.md#2025-04-15_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"globalCounter\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Dependencies in Node.js\nDESCRIPTION: Command to install Prisma CLI and Prisma Client as development dependencies with exact version specifications for a Node.js project.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/06-adding-a-database.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D --save-exact prisma@6.0.1 @prisma/client@6.0.1\n```\n\n----------------------------------------\n\nTITLE: Creating NestJS Application Module with GraphQL Yoga\nDESCRIPTION: TypeScript code for setting up the root application module in NestJS with GraphQL Yoga as the GraphQL driver. This configures the GraphQLModule with the YogaDriver to enable GraphQL functionality in the NestJS application.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/nestjs/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { YogaDriver, YogaDriverConfig } from '@graphql-yoga/nestjs'\nimport { Module } from '@nestjs/common'\nimport { GraphQLModule } from '@nestjs/graphql'\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<YogaDriverConfig>({\n      driver: YogaDriver\n    })\n  ]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Starting Apollo Federation Gateway\nDESCRIPTION: Command to start the Apollo Federation gateway with required environment variables for API key and graph reference.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apollo-managed-federation/README.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAPOLLO_KEY='<YOUR_GRAPH_API_KEY>' APOLLO_GRAPH_REF='<YOUR_GRAPH_ID>@<VARIANT>' node index.mjs\n```\n\n----------------------------------------\n\nTITLE: Response Cache Plugin Breaking Changes\nDESCRIPTION: Documents major changes in the Response Cache Plugin v1.0.0, including new session factory and enabled function parameters.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/response-cache/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ntype SessionIdFactory = (params: GraphQLParams, request: Request) => Maybe<string>\n\ntype EnabledFn = (params: GraphQLParams, request: Request) => boolean\n```\n\n----------------------------------------\n\nTITLE: Deploying GraphQL Yoga to Google Cloud Functions\nDESCRIPTION: Command to deploy the GraphQL Yoga server to Google Cloud Functions using gcloud CLI. This configures a Node.js 18 runtime with HTTP trigger and allows unauthenticated access.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-gcp.mdx#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud functions deploy graphql --runtime nodejs18 --trigger-http --allow-unauthenticated\n```\n\n----------------------------------------\n\nTITLE: Executing a Subscription with Query Parameter Authorization in GraphQL\nDESCRIPTION: Curl command to initiate a GraphQL subscription with authentication provided via the 'x-authorization' query parameter. This example uses the token 'aaa' and expects a text/event-stream response.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/generic-auth/README.md#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -g \\\n  -X GET \\\n  -H \"accept: text/event-stream\" \\\n  \"http://localhost:4000/graphql?query=subscription%20Hi%20%7B%20requiresAuth%20%7D&x-authorization=aaa\"\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Plugin for GraphQL Yoga\nDESCRIPTION: Command to install the JWT plugin for GraphQL Yoga using npm or yarn.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/jwt.mdx#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @graphql-yoga/plugin-jwt\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fetching User with Best Friend\nDESCRIPTION: This GraphQL query retrieves a user's id, name, and their best friend's id and name.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/execution-cancellation.mdx#2025-04-15_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserWithBestFriend {\n  user {\n    id\n    name\n    bestFriend {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying GraphQL Yoga to Google Cloud Run\nDESCRIPTION: Command to deploy the GraphQL Yoga server to Google Cloud Run using gcloud CLI. The --source flag indicates that the service should be built from the current directory.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-gcp.mdx#2025-04-15_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud run deploy --source .\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma in a Node.js Project\nDESCRIPTION: Command to initialize Prisma in a Node.js project, creating the necessary directory structure and configuration files.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/06-adding-a-database.mdx#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx prisma init\n```\n\n----------------------------------------\n\nTITLE: Node.js Server Configuration Update\nDESCRIPTION: Shows how to migrate Node.js server configuration from the integrated approach to using native http module.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v2.mdx#2025-04-15_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { createServer } from '@graphql-yoga/node'\n+ import { createYoga } from 'graphql-yoga'\n+ import { createServer } from 'http'\n\n- const server = createServer({\n-     port: 4000,\n-     hostname: '127.0.0.1'\n- })\n+ const yoga = createYoga({})\n+ const server = createServer(yoga)\n\n- server.start()\n+ server.listen(4000, '127.0.0.1')\n```\n\n----------------------------------------\n\nTITLE: Running the Generic Auth Example with PNPM\nDESCRIPTION: Command to start the development server for the generic auth example using PNPM.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/generic-auth/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter example-generic-auth dev\n```\n\n----------------------------------------\n\nTITLE: Installing Cookie Plugin for GraphQL Yoga\nDESCRIPTION: Command to install the WHATWG Node server plugin for cookie handling in GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/cookies.mdx#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @whatwg-node/server-plugin-cookies\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Yoga Server in Deno\nDESCRIPTION: Command to run the Deno GraphQL Yoga server with network access permissions. The --allow-net flag grants network access needed for serving the GraphQL endpoint.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-deno.mdx#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --allow-net deno-yoga.ts\n```\n\n----------------------------------------\n\nTITLE: Executing APQ Operation without Query\nDESCRIPTION: Example of executing a persisted query without including the query payload\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/automatic-persisted-queries.mdx#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H 'Content-Type: application/json' http://localhost:4000/graphql \\\n  -d '{\"extensions\":{\"persistedQuery\":{\"version\":1,\"sha256Hash\":\"ecf4edb46db40b5132295c0291d62fb65d6759a9eedfa4d5d612dd5ec54a6b38\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Disabling GraphiQL in GraphQL Yoga\nDESCRIPTION: This example shows how to completely disable the GraphiQL interface in a GraphQL Yoga server by setting the graphiql option to false. This is useful for production environments where the IDE should not be publicly accessible.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/graphiql.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport { createYoga } from 'graphql-yoga'\n\n// Provide your schema\nconst yoga = createYoga({ graphiql: false })\n\nconst server = createServer(yoga)\nserver.listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Pothos for GraphQL schema building\nDESCRIPTION: Command to install the @pothos/core package, which is a plugin-based GraphQL schema builder for TypeScript.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @pothos/core\n```\n\n----------------------------------------\n\nTITLE: Describing Deployed Cloud Function\nDESCRIPTION: Command to retrieve details about the deployed GraphQL Cloud Function, which includes the HTTP trigger URL needed to access the GraphQL API.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-gcp.mdx#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud functions describe graphql\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript Configuration\nDESCRIPTION: Command to create a TypeScript configuration file (tsconfig.json) for the project.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/01-project-setup.mdx#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Executing @defer Operation via curl\nDESCRIPTION: Shell command to execute a GraphQL operation using the @defer directive via curl, with the required headers for multipart response handling.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/defer-stream.mdx#2025-04-15_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -g -X POST \\\n  -H \"accept:multipart/mixed\" \\\n  -H \"content-type: application/json\" \\\n  -d '{\"query\":\"query SlowAndFastFieldWithDefer { ... on Query @defer { slowField } fastField }\"}' \\\n  http://localhost:4000/graphql\n```\n\n----------------------------------------\n\nTITLE: Cloning the GraphQL Yoga Repository and Navigating to the Example Directory\nDESCRIPTION: Commands to clone the graphql-yoga repository from GitHub and navigate to the defer-stream example directory.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/defer-stream/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/graphcool/graphql-yoga.git\ncd graphql-yoga/examples/defer-stream\n```\n\n----------------------------------------\n\nTITLE: Optional Schema Extensions\nDESCRIPTION: Additional schema definitions for Comment.link and Query.link resolvers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype Comment {\n  link: Link!\n}\n\ntype Query {\n  link(id: ID!): Link\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query Using Curl\nDESCRIPTION: This curl command sends a POST request to execute the UserWithBestFriend GraphQL query on the local server.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/execution-cancellation.mdx#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -g \\\n  -X POST \\\n  -H \"content-type: application/json\" \\\n  -d '{\"query\":\"{ user { id name bestFriend { id name } } }\"}' \\\n  \"http://localhost:4000/graphql\"\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with cURL\nDESCRIPTION: cURL command to execute a GraphQL query operation that selects the slow field, demonstrating the caching effect.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H 'Content-Type: application/json' http://localhost:4000/graphql \\\n  -d '{\"query\":\"{slow}\"}' -w '\\nTotal time : %{time_total}'\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple GraphQL Schema\nDESCRIPTION: This GraphQL schema defines a Query type with a user field that returns a User type. The User type has id, name, and bestFriend fields.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/execution-cancellation.mdx#2025-04-15_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  user: User\n}\n\ntype User {\n  id: ID!\n  name: String!\n  bestFriend: User\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nexus GraphQL for declarative schema definition\nDESCRIPTION: Command to install the nexus package, which enables declarative, code-first GraphQL schema definition for JavaScript/TypeScript.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm i nexus\n```\n\n----------------------------------------\n\nTITLE: Disabling Multipart/File Upload Processing in GraphQL Yoga\nDESCRIPTION: Code example showing how to disable multipart request processing in GraphQL Yoga by setting the multipart option to false when creating a Yoga instance.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/file-uploads.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateYoga({ multipart: false })\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Prettier\nDESCRIPTION: Commands to install and run Prettier for code formatting.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/01-project-setup.mdx#2025-04-15_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D --save-exact prettier@3.4.2\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx prettier . --write\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Scripts\nDESCRIPTION: JSON configuration for package.json showing the development and start scripts for running the TypeScript application.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/01-project-setup.mdx#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hackernews-node-ts\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=development tsx watch src/main.ts\",\n    \"start\": \"tsx src/main.ts\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"22.10.1\",\n    \"cross-env\": \"7.0.3\",\n    \"tsx\": \"4.19.2\",\n    \"typescript\": \"5.7.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server in watch mode.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/01-project-setup.mdx#2025-04-15_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Apollo Federation Gateway and Services with GraphQL Yoga\nDESCRIPTION: This command starts the Apollo Federation Gateway and associated services using GraphQL Yoga. It utilizes pnpm as the package manager to run the start script defined in the project.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/apollo-federation/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Disabling Landing Page in GraphQL Yoga\nDESCRIPTION: Demonstrates how to disable the default landing page completely, resulting in direct 404 errors.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/landing-page.mdx#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  landingPage: false\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Cloudflare Workers compatibility date for Server Sent Events\nDESCRIPTION: This TOML configuration sets the compatibility date for Cloudflare Workers to enable Server Sent Events based subscriptions with GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-cloudflare-workers.mdx#2025-04-15_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\ncompatibility_date = \"2022-11-30\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphiQL for Offline Usage in GraphQL Yoga\nDESCRIPTION: This snippet shows how to use a locally installed version of GraphiQL instead of the default CDN-served version. It imports and uses the renderGraphiQL function from the installed package.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/graphiql.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport { renderGraphiQL } from '@graphql-yoga/render-graphiql'\n\nconst yoga = createYoga({ renderGraphiQL })\n```\n\n----------------------------------------\n\nTITLE: Installing @graphql-tools/schema package\nDESCRIPTION: Command to install the @graphql-tools/schema package which provides utilities for creating executable GraphQL schemas.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @graphql-tools/schema\n```\n\n----------------------------------------\n\nTITLE: Removing Unused GraphiQL Options in GraphQL Yoga Configuration\nDESCRIPTION: Diff showing the removal of 'defaultVariableEditorOpen' and 'headerEditorEnabled' options from the GraphQL Yoga configuration.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v3.mdx#2025-04-15_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\nimport { schema } from './schema'\n\nconst yoga = createYoga({\n  schema,\n  graphiql: {\n-    defaultVariableEditorOpen: false,\n-    headerEditorEnabled: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga package\nDESCRIPTION: Command to install the graphql-yoga package using npm or yarn.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-apollo-server.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Studio from Command Line\nDESCRIPTION: Command to launch Prisma Studio, a GUI tool that allows you to interact with your database data through the Prisma data model interface. Running this command opens a browser tab at http://localhost:5555.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/07-connecting-server-and-database.mdx#2025-04-15_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx prisma studio\n```\n\n----------------------------------------\n\nTITLE: Resetting Prometheus Registry in GraphQL Yoga\nDESCRIPTION: Shows how to reset the Prometheus registry before plugin re-initialization to ensure metrics configuration is up to date.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/prometheus/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction usePrometheusWithReset() {\n  registry.clear()\n  return usePrometheus({ ... })\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Landing Page with Custom HTML Response\nDESCRIPTION: Shows how to implement a custom landing page renderer that returns a custom HTML response with a 404 status code.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/landing-page.mdx#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createYoga } from 'graphql-yoga'\n\nconst yoga = createYoga({\n  landingPage: ({ url, fetchAPI }) => {\n    return new fetchAPI.Response(\n      /* HTML */ `\n        <!doctype html>\n        <html>\n          <head>\n            <title>404 Not Found</title>\n          </head>\n          <body>\n            <h1>404 Not Found</h1>\n            <p>Sorry, the page (${url.pathname}) you are looking for could not be found.</p>\n          </body>\n        </html>\n      `,\n      {\n        status: 404,\n        headers: {\n          'Content-Type': 'text/html'\n        }\n      }\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Cloud Run with GraphQL Yoga\nDESCRIPTION: Package.json configuration for a Cloud Run deployment. Sets up ESM syntax, adds the start script that Cloud Run requires, and defines the necessary dependencies.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-gcp.mdx#2025-04-15_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"graphql-yoga-cloud-run-guide\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"start\": \"node .\"\n  },\n  \"dependencies\": {\n    \"graphql\": \"^16.6.0\",\n    \"graphql-yoga\": \"^3.9.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphiQL for Offline Usage\nDESCRIPTION: This command installs the GraphiQL rendering package to enable offline usage without relying on CDN. This is useful for environments with limited internet access or strict security requirements.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/graphiql.mdx#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @graphql-yoga/render-graphiql\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Tools HTTP Executor\nDESCRIPTION: Command to install the @graphql-tools/executor-http package for easier testing of GraphQL Yoga APIs.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/testing.mdx#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @graphql-tools/executor-http\n```\n\n----------------------------------------\n\nTITLE: Cloudflare/Service Workers Configuration\nDESCRIPTION: Shows how to update the event listener configuration for Cloudflare/Service Workers environments.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v2.mdx#2025-04-15_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- yoga.start()\n+ self.addEventListener('fetch', yoga)\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga V4 Package\nDESCRIPTION: Command to install the new GraphQL Yoga package using npm or yarn.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v3.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga V3 Package\nDESCRIPTION: Instructions for installing the new unified GraphQL Yoga package that works across all environments.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v2.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for GraphQL Yoga Dependencies\nDESCRIPTION: Documents the update of @graphql-tools/federation dependency from ^2.0.0 to version 2.1.0, along with related changes to the core graphql-yoga package which was updated to version 5.4.0.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apollo-managed-federation/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#3328](https://github.com/dotansimha/graphql-yoga/pull/3328)\n  [`9b468ec`](https://github.com/dotansimha/graphql-yoga/commit/9b468ec0cd6c6a9f879192acb8d5a8e561c96876)\n  Thanks [@EmrysMyrddin](https://github.com/EmrysMyrddin)! - dependencies updates:\n  - Updated dependency\n    [`@graphql-tools/federation@2.1.0` ↗︎](https://www.npmjs.com/package/@graphql-tools/federation/v/2.1.0)\n    (from `^2.0.0`, in `dependencies`)\n- Updated dependencies\n  [[`4cd43b9`](https://github.com/dotansimha/graphql-yoga/commit/4cd43b9ff56ad9358dc897f4bb87a6a94f953047),\n  [`fdd902c`](https://github.com/dotansimha/graphql-yoga/commit/fdd902c2a713c6bd951e1b1e6570164b6ff2d546),\n  [`d5dfe99`](https://github.com/dotansimha/graphql-yoga/commit/d5dfe99af030a5afac26968ba8dd81dee6df0dc2),\n  [`7335a82`](https://github.com/dotansimha/graphql-yoga/commit/7335a82a4b0696c464311a5027a43b16c7f68156),\n  [`f9aa1cd`](https://github.com/dotansimha/graphql-yoga/commit/f9aa1cdc968816a9f83f054dbd24799c85f71a2c)]:\n  - graphql-yoga@5.4.0\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Cache for Response Caching\nDESCRIPTION: Command to install the Redis cache implementation for response caching in GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @envelop/response-cache-redis\n```\n\n----------------------------------------\n\nTITLE: Generating a Supergraph SDL with Apollo Rover CLI\nDESCRIPTION: Bash command to generate a supergraph SDL file from a supergraph configuration using the Apollo Rover CLI.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrover supergraph compose --config ./supergraph.yaml > supergraph.graphql\n```\n\n----------------------------------------\n\nTITLE: Implementing Query.comment Resolver Structure in TypeScript\nDESCRIPTION: Initial structure for the comment query resolver that accepts an ID parameter and returns a comment.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolvers = {\n  Query: {\n    async comment(parent: unknown, args: { id: string }, context: GraphQLContext) {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies\nDESCRIPTION: Command to install TypeScript and related development dependencies including typescript compiler, Node.js types, tsx for running TypeScript files, and cross-env for environment variables.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/01-project-setup.mdx#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D --save-exact typescript@5.7.2 @types/node@22.10.1 tsx@4.19.2 cross-env@7.0.3\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for GraphQL Yoga with AWS Lambda\nDESCRIPTION: Command to install the required packages for setting up GraphQL Yoga with AWS Lambda.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-aws-lambda.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i aws-lambda graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Installing CSRF Prevention Plugin for GraphQL Yoga\nDESCRIPTION: Command to install the CSRF prevention plugin package using npm or yarn.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/csrf-prevention.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @graphql-yoga/plugin-csrf-prevention\n```\n\n----------------------------------------\n\nTITLE: Combining multiple GraphQL queries into a single operation\nDESCRIPTION: Example of combining separate GraphQL queries into a single operation as an alternative to batched queries.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-apollo-server.mdx#2025-04-15_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery AB($postId: ID!) {\n  viewer {\n    id\n    name\n  }\n  post(id: $postId) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple GraphQL Server Instances\nDESCRIPTION: Commands to start two GraphQL Yoga server instances on different ports using pnpm\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/redis-pub-sub/README.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPORT=4000 pnpm --filter example-redis-pub-sub start\nPORT=4001 pnpm --filter example-redis-pub-sub start\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Maps for GraphQL Yoga in Deno\nDESCRIPTION: Sets up import maps in deno.json to use GraphQL Yoga from npm. This configuration allows importing graphql-yoga in a Deno project.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-deno.mdx#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"graphql-yoga\": \"npm:graphql-yoga@^3.7.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Mutation Invalidation\nDESCRIPTION: Configuration to disable automatic cache invalidation triggered by mutations.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/response-caching.mdx#2025-04-15_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nuseResponseCache({\n  session: request => null,\n  invalidateViaMutation: false\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Running GraphQL Yoga Example\nDESCRIPTION: Commands to clone the repository and install dependencies for the GraphQL Yoga hello world example.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/hello-world/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/graphcool/graphql-yoga.git\ncd graphql-yoga/examples/hello-world\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm install # or npm install\npnpm start   # or npm start\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga with pnpm\nDESCRIPTION: Command to install GraphQL Yoga and its GraphQL dependency using pnpm package manager.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/graphql-yoga/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Building Packages for GraphQL Yoga Project\nDESCRIPTION: This command builds the packages required for the GraphQL Yoga project using pnpm.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/CONTRIBUTING.md#2025-04-15_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query\nDESCRIPTION: Sample GraphQL query to fetch the hello field from the schema\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hello\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Comment Query Response\nDESCRIPTION: Example JSON response for a successful comment query.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"comment\": {\n      \"id\": \"1\",\n      \"body\": \"This is my first comment!\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Node.js Process Termination Handling\nDESCRIPTION: Configuration for automatic GraphQL Yoga disposal on Node.js process termination using disposeOnProcessTerminate option.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/explicit-resource-management.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http'\nimport { createSchema, createYoga } from 'graphql-yoga'\n\ncreateServer(\n  createYoga({\n    schema: createSchema({\n      typeDefs: /* GraphQL */ `\n        type Query {\n          hello: String\n        }\n      `,\n      resolvers: { Query: { hello: () => 'world' } }\n    }),\n    disposeOnProcessTerminate: true\n  })\n).listen(4000, () => {\n  console.info('Server is running on http://localhost:4000/graphql')\n})\n```\n\n----------------------------------------\n\nTITLE: Running Hackernews GraphQL API Example\nDESCRIPTION: Commands to set up and run the Hackernews GraphQL API example. First runs database migrations using pnpm, then starts the development server. The application will be accessible at http://localhost:4000/.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/hackernews/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# run migrations\npnpm run --filter example-hackernews migrate\n# start dev server\npnpm run --filter example-hackernews dev\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga with Package Manager\nDESCRIPTION: Command to install GraphQL Yoga and its GraphQL dependency using pnpm package manager.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription Query URL\nDESCRIPTION: URL endpoint for setting up a GraphQL subscription to receive messages\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/redis-pub-sub/README.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttp://127.0.0.1:4000/graphql?query=subscription+%7B%0A++message%0A%7D\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga Dependencies\nDESCRIPTION: Commands to install the required GraphQL Yoga and GraphQL dependencies using npm or yarn\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-nextjs.mdx#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Installing Packages for GraphQL Yoga Project\nDESCRIPTION: This command installs the necessary packages for the GraphQL Yoga project using pnpm.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/CONTRIBUTING.md#2025-04-15_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Disabling Error Masking in GraphQL Yoga\nDESCRIPTION: Demonstrates how to disable the default error masking behavior in GraphQL Yoga using the maskedErrors configuration option. When disabled, error messages may expose sensitive information about internal API calls.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/error-masking.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateYoga({ maskedErrors: false })\n```\n\n----------------------------------------\n\nTITLE: Running Basic CDK Commands for GraphQL Yoga AWS Lambda Project\nDESCRIPTION: Commands for building, deploying, and managing the GraphQL Yoga AWS Lambda project using CDK. Includes commands for compiling TypeScript, watching for changes, bootstrapping the CDK environment, deploying to AWS, comparing deployment states, and generating CloudFormation templates.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/aws-lambda/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run watch\ncdk bootstrap\ncdk deploy\ncdk diff\ncdk synth\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GCP Cloud Run with GraphQL Yoga\nDESCRIPTION: Command to install the necessary dependencies for running GraphQL Yoga on Google Cloud Run, including graphql-yoga and graphql packages.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-gcp.mdx#2025-04-15_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Docker Container\nDESCRIPTION: Command to start a Redis server instance using Docker on port 6379\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/redis-pub-sub/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p \"6379:6379\" redis:7.0.2\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query Operation\nDESCRIPTION: A simple GraphQL query that requests a greeting field, used to demonstrate error message behavior.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/error-masking.mdx#2025-04-15_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  greeting\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack for GraphQL Yoga Setup\nDESCRIPTION: This command enables Corepack, which is used for package management in the GraphQL Yoga project.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/CONTRIBUTING.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response Without Name\nDESCRIPTION: Server response for hello query without a name parameter.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/hello-world/README.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"hello\": \"Hello World\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Subscription with Header Authorization in GraphQL\nDESCRIPTION: Curl command to initiate a GraphQL subscription with authentication provided via the 'x-authorization' header. This example uses the token 'bbb' and expects a text/event-stream response.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/generic-auth/README.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -g \\\n  -X GET \\\n  -H \"accept: text/event-stream\" \\\n  -H \"x-authorization: bbb\" \\\n  \"http://localhost:4000/graphql?query=subscription%20Hi%20%7B%20requiresAuth%20%7D\"\n```\n\n----------------------------------------\n\nTITLE: Executing a Query with Query Parameter Authorization in GraphQL\nDESCRIPTION: Curl command to perform a GraphQL query with authentication provided via the 'x-authorization' query parameter. This example uses the token 'bbb'.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/generic-auth/README.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -g \\\n  -X POST \\\n  -H \"content-type: application/json\" \\\n  -d '{\"query\":\"query Hi { requiresAuth }\"}' \\\n  \"http://localhost:4000/graphql?x-authorization=bbb\"\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga and GraphQL dependencies\nDESCRIPTION: Command to install the required npm packages for setting up GraphQL Yoga in a Cloudflare Workers project.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-cloudflare-workers.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Linking to GraphQL Yoga SvelteKit Integration Documentation\nDESCRIPTION: This Markdown snippet provides a hyperlink to the official documentation for integrating GraphQL Yoga with SvelteKit. It directs users to detailed instructions and best practices for implementation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/sveltekit/README.md#2025-04-15_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[Learn more](https://www.graphql-yoga.com/docs/integrations/integration-with-sveltekit)\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga with npm\nDESCRIPTION: Command to install the graphql-yoga package with a specific version using npm.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/03-graphql-server.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --save-exact graphql-yoga@5.10.4\n```\n\n----------------------------------------\n\nTITLE: Running Local GraphiQL Development Server with pnpm\nDESCRIPTION: Command to start a local GraphiQL development server that will run on port 4001 and automatically proxy to a GraphQL Yoga instance running on port 4000.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/graphiql/README.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npnpm --filter @graphql-yoga/graphiql start\n```\n\n----------------------------------------\n\nTITLE: Global Counter Subscription Update\nDESCRIPTION: JSON update received by the globalCounter subscription after the increment mutation is executed.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/subscriptions/README.md#2025-04-15_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"globalCounter\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response\nDESCRIPTION: JSON response from the GraphQL server for the 'hello' query.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/03-graphql-server.mdx#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"data\": { \"hello\": \"Hello World!\" } }\n```\n\n----------------------------------------\n\nTITLE: Installing APQ Plugin for GraphQL Yoga\nDESCRIPTION: Command to install the Automatic Persisted Queries plugin package\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/automatic-persisted-queries.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @graphql-yoga/plugin-apq\n```\n\n----------------------------------------\n\nTITLE: Rendering GraphQL Yoga Version Warning in JSX\nDESCRIPTION: This JSX snippet creates a warning message for users viewing outdated GraphQL Yoga documentation. It includes a link to migration instructions and uses dynamic version numbers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/app/legacy-docs-banner.mdx#2025-04-15_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div data-pagefind-ignore=\"all\">\n\n> [!WARNING]\n>\n> This is the documentation for the **old GraphQL Yoga v{props.yogaVersion}**.<br/> We recommend\n> upgrading to the latest GraphQL&nbsp;Yoga v5. <Link\n> href={`/docs/migration/migration-from-yoga-v${props.yogaVersion}`}>Migrate to GraphQL Yoga\n> v5</Link>.\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga and GraphQL in SvelteKit\nDESCRIPTION: Command to install GraphQL Yoga and GraphQL dependencies in a SvelteKit project using npm or yarn.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-sveltekit.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Updating NestJS Peer Dependencies\nDESCRIPTION: Updates the peer dependencies for @nestjs/common and @nestjs/core to version 10.0.0 in the package.json file.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/nestjs-federation/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"@nestjs/common\": \"^10.0.0\",\n\"@nestjs/core\": \"^10.0.0\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query With Name Parameter\nDESCRIPTION: Example GraphQL query to fetch hello message with a name parameter.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/hello-world/README.md#2025-04-15_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hello(name: \"Sarah\")\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Query URL\nDESCRIPTION: URL endpoint for executing a GraphQL mutation to send messages\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/redis-pub-sub/README.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttp://127.0.0.1:4001/graphql?query=mutation+%7B%0A++sendMessage%28message%3A+%22Yo+we+share+a+redis+instance.%22%29%0A%7D\n```\n\n----------------------------------------\n\nTITLE: Execution Result with Unmasked Error Message\nDESCRIPTION: JSON response showing a leaked error message when error masking is disabled. The error exposes internal implementation details like connection refusal to an internal API endpoint.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/error-masking.mdx#2025-04-15_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"request to http://localhost:9876/greeting failed, reason: connect ECONNREFUSED 127.0.0.1:9876\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 3\n        }\n      ],\n      \"path\": [\"greeting\"]\n    }\n  ],\n  \"data\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Armor Block Field Suggestions Package\nDESCRIPTION: This command installs the @escape.tech/graphql-armor-block-field-suggestions package which is used to disable the \"did you mean x\" suggestion feature in GraphQL error messages.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/introspection.mdx#2025-04-15_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @escape.tech/graphql-armor-block-field-suggestions\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the GraphQL Yoga Application\nDESCRIPTION: Commands for installing the project dependencies using either pnpm or npm, and then starting the application.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/defer-stream/README.md#2025-04-15_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm install # or npm install\npnpm start   # or npm start\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component for GraphQL Yoga Documentation in JavaScript\nDESCRIPTION: This snippet imports the 'Link' component from a custom MDX components file and renames it for use in the warning message.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/app/legacy-docs-banner.mdx#2025-04-15_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useMDXComponents } from '../mdx-components'\n\nexport const { a: Link } = useMDXComponents()\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Dependencies\nDESCRIPTION: Commands to install additional dependencies required for WebSocket support in GraphQL Yoga\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-nextjs.mdx#2025-04-15_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i graphql-yoga graphql ws graphql-ws\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: Updates the @envelop/apollo-federation and @envelop/core dependencies to version 5.0.0 from 4.0.0 in the package.json file.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/nestjs-federation/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"@envelop/apollo-federation\": \"^5.0.0\",\n\"@envelop/core\": \"^5.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.0.1-beta.0\nDESCRIPTION: Documents beta release version 0.0.1-beta.0 with patch changes including a release trigger.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/apollo-federation/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.1-beta.0\n\n### Patch Changes\n\n- de1693e: trigger release\n```\n\n----------------------------------------\n\nTITLE: Error Handling Migration\nDESCRIPTION: Shows how to migrate from GraphQLYogaError to GraphQLError with proper error configuration.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v2.mdx#2025-04-15_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nnew GraphQLError('My error message', {\n  extensions: {\n    code: 'NOT_LOGGED_IN',\n    message: 'You need to be logged in to do this',\n    http: {\n      status: 401,\n      headers: {\n        'X-Custom-Header': 'my-custom-value'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Increment Global Counter Mutation Response\nDESCRIPTION: JSON response from the incrementGlobalCounter mutation showing the new counter value.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/subscriptions/README.md#2025-04-15_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"incrementGlobalCounter\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running GraphQL Yoga Error Masking Example\nDESCRIPTION: Commands to clone the repository and set up the error masking example project.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/error-handling/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/graphcool/graphql-yoga.git\ncd graphql-yoga/examples/error-masking\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm install # or npm install\npnpm start   # or npm start\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry with Commit Link\nDESCRIPTION: Standard changelog entry format showing dependency updates with commit link.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/render-graphiql/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies\n  [[`000c33d`](https://github.com/graphql-hive/graphql-yoga/commit/000c33dc043454f4b73d15f03c3e688cfb9d0901)]:\n  - graphql-yoga@5.13.4\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Dependencies\nDESCRIPTION: Command to install graphql-ws package for WebSocket support.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-uwebsockets.mdx#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-ws\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Update Listing\nDESCRIPTION: Lists version changes and dependency updates for GraphQL Yoga and @graphql-yoga/plugin-response-cache packages.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/benchmark/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies\n  [[`fdd902c`](https://github.com/dotansimha/graphql-yoga/commit/fdd902c2a713c6bd951e1b1e6570164b6ff2d546),\n  [`4cd43b9`](https://github.com/dotansimha/graphql-yoga/commit/4cd43b9ff56ad9358dc897f4bb87a6a94f953047),\n  [`fdd902c`](https://github.com/dotansimha/graphql-yoga/commit/fdd902c2a713c6bd951e1b1e6570164b6ff2d546),\n  [`d5dfe99`](https://github.com/dotansimha/graphql-yoga/commit/d5dfe99af030a5afac26968ba8dd81dee6df0dc2),\n  [`7335a82`](https://github.com/dotansimha/graphql-yoga/commit/7335a82a4b0696c464311a5027a43b16c7f68156),\n  [`f9aa1cd`](https://github.com/dotansimha/graphql-yoga/commit/f9aa1cdc968816a9f83f054dbd24799c85f71a2c)]:\n  - @graphql-yoga/plugin-response-cache@3.6.0\n  - graphql-yoga@5.4.0\n```\n\n----------------------------------------\n\nTITLE: Starting GraphQL Armor Example\nDESCRIPTION: Command to start the GraphQL Armor example application using pnpm package manager.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/graphql-armor/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter example-graphql-armor start\n```\n\n----------------------------------------\n\nTITLE: Setting Apollo GraphOS Environment Variables\nDESCRIPTION: Bash command showing how to set the necessary environment variables when using Apollo Managed Federation with GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/apollo-federation.mdx#2025-04-15_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nAPOLLO_KEY='<YOU_APOLLO_API_KEY>' APOLLO_GRAPH_REF='<YOUR_GRAPH_ID>[@<VARIANT>]' node src/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Example of individual GraphQL queries that could be batched\nDESCRIPTION: Two separate GraphQL queries that demonstrate operations that could be combined into a single operation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-apollo-server.mdx#2025-04-15_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery A {\n  viewer {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery B($postId: ID!) {\n  post(id: $postId) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Entry Point\nDESCRIPTION: Basic TypeScript file serving as the entry point for the application.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/01-project-setup.mdx#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Running the GraphQL Server\nDESCRIPTION: Command to start the GraphQL server in development mode.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/03-graphql-server.mdx#2025-04-15_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in GraphQL Yoga Changelog\nDESCRIPTION: This code snippet shows the format used to document dependency updates in the GraphQL Yoga changelog. It includes links to specific commit hashes and version numbers for the @graphql-yoga/common package.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/render-graphiql/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies\n  [[`779b55ee`](https://github.com/dotansimha/graphql-yoga/commit/779b55eea843bd282f659e1012f255f62fd888b6),\n  [`313e6f30`](https://github.com/dotansimha/graphql-yoga/commit/313e6f3036a1ddeb7e6299925a49bb7f0c2d2eb6)]:\n  - @graphql-yoga/common@2.12.9\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga via npm or yarn\nDESCRIPTION: Command to install the graphql-yoga package using npm or yarn package managers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-express-graphql.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json for GraphQL Yoga Node\nDESCRIPTION: This code snippet shows a typical dependency update entry in the changelog. It specifies the version of file-upload-nexus being updated and the corresponding changes to its @graphql-yoga/node dependency.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/file-upload-nexus/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.13.11\n\n### Patch Changes\n\n- Updated dependencies []:\n  - @graphql-yoga/node@2.13.11\n```\n\n----------------------------------------\n\nTITLE: Documenting Version History in Markdown\nDESCRIPTION: This snippet shows the changelog format used to document version updates and dependency changes for the GraphQL Yoga Redis PubSub example project. It includes multiple versions with patch changes and updated dependencies.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/redis-pub-sub/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# example-redis-pub-sub\n\n## 0.1.11\n\n### Patch Changes\n\n- Updated dependencies []:\n  - @graphql-yoga/node@2.13.11\n\n## 0.1.10\n\n### Patch Changes\n\n- Updated dependencies\n  [[`779b55ee`](https://github.com/dotansimha/graphql-yoga/commit/779b55eea843bd282f659e1012f255f62fd888b6)]:\n  - @graphql-yoga/node@2.13.10\n\n## 0.1.9\n\n### Patch Changes\n\n- Updated dependencies []:\n  - @graphql-yoga/node@2.13.9\n\n## 0.1.8\n\n### Patch Changes\n\n- Updated dependencies []:\n  - @graphql-yoga/node@2.13.8\n\n## 0.1.7\n\n### Patch Changes\n\n- Updated dependencies\n  [[`e4e8ade`](https://github.com/dotansimha/graphql-yoga/commit/e4e8ade526c2aec7ea28218ca7795e96b867fc6b),\n  [`94b41f3`](https://github.com/dotansimha/graphql-yoga/commit/94b41f30f598afb37db2438c736764e2a539cd10)]:\n  - @graphql-yoga/node@2.13.7\n\n## 0.1.6\n\n### Patch Changes\n\n- Updated dependencies [eecf24c]\n  - @graphql-yoga/redis-event-target@0.1.3\n  - @graphql-yoga/node@2.13.6\n\n## 0.1.5\n\n### Patch Changes\n\n- Updated dependencies [c00dad3]\n  - @graphql-yoga/node@2.13.5\n\n## 0.1.4\n\n### Patch Changes\n\n- @graphql-yoga/node@2.13.4\n\n## 0.1.3\n\n### Patch Changes\n\n- Updated dependencies [639607d]\n  - @graphql-yoga/node@2.13.3\n\n## 0.1.2\n\n### Patch Changes\n\n- Updated dependencies [3363de2]\n  - @graphql-yoga/redis-event-target@0.1.2\n  - @graphql-yoga/node@2.13.2\n\n## 0.1.1\n\n### Patch Changes\n\n- Updated dependencies [ebddc71]\n  - @graphql-yoga/redis-event-target@0.1.1\n  - @graphql-yoga/node@2.13.1\n\n## 0.1.0\n\n### Patch Changes\n\n- Updated dependencies [d024757]\n  - @graphql-yoga/redis-event-target@0.1.0\n  - @graphql-yoga/node@2.13.0\n```\n\n----------------------------------------\n\nTITLE: Testing Batch Limit Exceeded\nDESCRIPTION: Demonstrates how to test the batching limit by sending a request that exceeds the configured maximum number of operations.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-batching.mdx#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H 'Content-Type: application/json' -i http://localhost:4000/graphql \\\n  -d '[{\"query\": \"{ hee: hello }\"}, {\"query\": \"{ ho: hello }\"}, {\"query\": \"{ holla: hello }\"}]'\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server using pnpm package manager, which launches the application on the default port 3000.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/nextjs-auth/README.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates in Markdown\nDESCRIPTION: Version history markdown showing dependency updates and changes for the @graphql-yoga/urql-exchange package. Includes breaking changes, patches, and version bumps.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/client/urql-exchange/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @graphql-yoga/urql-exchange\n\n## 3.13.4\n\n## 3.13.3\n\n## 3.13.2\n\n## 3.13.1\n\n## 3.13.0\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Block in Markdown\nDESCRIPTION: A markdown block showing dependency updates and version links for the package\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apollo-usage-report/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[[`c93366d`](https://github.com/dotansimha/graphql-yoga/commit/c93366df8b4a2edd209d1eb94d989eaba3b7031b),\n[`c93366d`](https://github.com/dotansimha/graphql-yoga/commit/c93366df8b4a2edd209d1eb94d989eaba3b7031b)]:\n- graphql-yoga@5.10.3\n- @graphql-yoga/plugin-apollo-inline-trace@3.10.3\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga V5 package using npm or yarn\nDESCRIPTION: This command installs the latest version of the graphql-yoga package using either npm or yarn package managers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/migration/migration-from-yoga-v4.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-yoga\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Example of how version changes and dependency updates are documented in the changelog using markdown format.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/file-upload-nextjs-pothos/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.11.11\n\n### Patch Changes\n\n- Updated dependencies []:\n  - @graphql-yoga/node@2.13.11\n```\n\n----------------------------------------\n\nTITLE: Version Control Log in Markdown\nDESCRIPTION: A changelog documenting version updates from 0.0.1-beta.0 through 0.12.10, tracking patch changes and dependency updates primarily related to @graphql-yoga/common package\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/service-worker/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# service-worker\n\n## 0.12.10\n\n### Patch Changes\n\n- Updated dependencies\n  [[`cb360975`](https://github.com/dotansimha/graphql-yoga/commit/cb36097523b5700fed8260cb654cbce75d37de20)]:\n  - @graphql-yoga/common@2.12.10\n```\n\n----------------------------------------\n\nTITLE: Installing SOFA plugin for GraphQL Yoga\nDESCRIPTION: Command to install the SOFA plugin for GraphQL Yoga using npm or yarn.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/sofa-api.mdx#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @graphql-yoga/plugin-sofa\n```\n\n----------------------------------------\n\nTITLE: Updating @graphql-tools/executor-http Dependency in GraphQL Yoga\nDESCRIPTION: Updates the @graphql-tools/executor-http dependency to version 0.0.4 from 0.0.3 in the dependencies.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/client/apollo-link/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependency\n  [`@graphql-tools/executor-http@0.0.4` ↗︎](https://www.npmjs.com/package/@graphql-tools/executor-http/v/0.0.4)\n  (from `0.0.3`, in `dependencies`)\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Declarations\nDESCRIPTION: Package dependency declarations showing version changes for NestJS and GraphQL Yoga peer dependencies\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/nestjs/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"@nestjs/graphql@^13.0.0\" (from \"^12.0.0\", in peerDependencies)\n\"@nestjs/common@^11.0.0\" (from \"^10.0.0\", in peerDependencies)\n\"@nestjs/core@^11.0.0\" (from \"^10.0.0\", in peerDependencies)\ngraphql-yoga@^5.3.1\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version Updates\nDESCRIPTION: Documents the version history from 0.0.1 to current, tracking dependency updates to @graphql-yoga/common package across multiple releases.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/cloudflare-modules/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [8947657]\n  - @graphql-yoga/common@2.10.0\n\n## 0.1.0\n\n### Patch Changes\n\n- Updated dependencies [7de07cd]\n- Updated dependencies [8922c3b]\n  - @graphql-yoga/common@2.9.0\n\n## 0.0.3\n\n### Patch Changes\n\n- Updated dependencies [2c0bcda]\n  - @graphql-yoga/common@2.8.3\n\n## 0.0.2\n\n### Patch Changes\n\n- Updated dependencies [a06091f]\n  - @graphql-yoga/common@2.8.2\n\n## 0.0.1\n\n### Patch Changes\n\n- Updated dependencies [06652c7]\n- Updated dependencies [a4960bd]\n  - @graphql-yoga/common@2.8.1\n```\n\n----------------------------------------\n\nTITLE: Initializing NodeJS Project Directory\nDESCRIPTION: Commands to create a new project directory and initialize a NodeJS project with npm.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/01-project-setup.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir hackernews-node-ts\ncd hackernews-node-ts\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Version Change Entry with Commit Reference\nDESCRIPTION: Example of a version change entry with commit hash reference showing dependency updates to @graphql-yoga/node\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/file-upload/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`779b55ee`](https://github.com/dotansimha/graphql-yoga/commit/779b55eea843bd282f659e1012f255f62fd888b6)]:\n  - @graphql-yoga/node@2.13.10\n```\n\n----------------------------------------\n\nTITLE: Removing dependencies from package.json\nDESCRIPTION: Removes @graphql-tools/utils and @whatwg-node/fetch from peer dependencies.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apollo-usage-report/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"peerDependencies\": {\n  // Removed dependencies\n  // \"@graphql-tools/utils\": \"^10.6.1\",\n  // \"@whatwg-node/fetch\": \"^0.10.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Version Update Log in Markdown\nDESCRIPTION: Changelog entries documenting version updates and dependency changes for GraphQL Yoga, including commit references and version numbers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/nextjs-app/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies\n  [[`01430e03`](https://github.com/dotansimha/graphql-yoga/commit/01430e03288f072a9cb09b0b898316b1f5b58a5f),\n  [`5b615478`](https://github.com/dotansimha/graphql-yoga/commit/5b6154783957874281bdf180575cdf57fadb75bf),\n  [`350bb851`](https://github.com/dotansimha/graphql-yoga/commit/350bb85195c01cc5b5721f7a90f6cfbe1af36aff)]:\n  - graphql-yoga@5.0.0\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in GraphQL Yoga Changelog\nDESCRIPTION: This snippet shows a changelog entry for updating dependencies in the GraphQL Yoga project. It includes a link to the specific commit that made the changes.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/hackernews/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies\n  [[`779b55ee`](https://github.com/dotansimha/graphql-yoga/commit/779b55eea843bd282f659e1012f255f62fd888b6)]:\n  - @graphql-yoga/node@2.13.10\n```\n\n----------------------------------------\n\nTITLE: Non-existent Comment Query\nDESCRIPTION: GraphQL query for a non-existent comment ID.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/08-graph-relations.mdx#2025-04-15_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery comment {\n  comment(id: 999999999) {\n    id\n    body\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Version Changes in Markdown Changelog\nDESCRIPTION: A changelog entry tracking dependency updates and patch changes across multiple versions of GraphQL Yoga, focusing on updates to @graphql-yoga/common package from version 0.1.0 through various patch releases.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/cloudflare-advanced/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [8947657]\n  - @graphql-yoga/common@2.10.0\n\n## 0.4.0\n\n### Patch Changes\n\n- Updated dependencies [7de07cd]\n- Updated dependencies [8922c3b]\n  - @graphql-yoga/common@2.9.0\n\n## 0.3.3\n\n### Patch Changes\n\n- Updated dependencies [2c0bcda]\n  - @graphql-yoga/common@2.8.3\n\n## 0.3.2\n\n### Patch Changes\n\n- Updated dependencies [a06091f]\n  - @graphql-yoga/common@2.8.2\n\n## 0.3.1\n\n### Patch Changes\n\n- Updated dependencies [06652c7]\n- Updated dependencies [a4960bd]\n  - @graphql-yoga/common@2.8.1\n\n## 0.3.0\n\n### Patch Changes\n\n- Updated dependencies [c96e7c2]\n  - @graphql-yoga/common@2.8.0\n\n## 0.2.0\n\n### Patch Changes\n\n- Updated dependencies [bcda7fd]\n  - @graphql-yoga/common@2.7.0\n\n## 0.1.1\n\n### Patch Changes\n\n- Updated dependencies [0224bf9]\n  - @graphql-yoga/common@2.6.1\n\n## 0.1.0\n\n### Patch Changes\n\n- Updated dependencies [0deb5bd]\n- Updated dependencies [a7834d6]\n- Updated dependencies [b8f0680]\n  - @graphql-yoga/common@2.6.0\n```\n\n----------------------------------------\n\nTITLE: Cloning the GraphQL Yoga Repository\nDESCRIPTION: Commands to clone the graphql-yoga repository and navigate to the subscriptions example directory.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/subscriptions/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/graphcool/graphql-yoga.git\ncd graphql-yoga/examples/subscriptions\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for GraphQL Yoga with Fastify\nDESCRIPTION: Command to install the necessary packages: fastify, graphql-yoga, and graphql using npm or yarn.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-fastify.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i fastify graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Version History Entry for Prometheus Plugin\nDESCRIPTION: Major version release entry introducing the new Prometheus plugin with associated dependency updates and version bumps.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/prometheus/CHANGELOG.md#2025-04-15_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- [#1910](https://github.com/dotansimha/graphql-yoga/pull/1910)\n  [`dc1dd6bc`](https://github.com/dotansimha/graphql-yoga/commit/dc1dd6bc194ea024478e62f0c77da8199f2f1dea)\n  Thanks [@ardatan](https://github.com/ardatan)! - New Prometheus Plugin\n```\n\n----------------------------------------\n\nTITLE: Version Commit Reference - GraphQL Yoga Update\nDESCRIPTION: A commit reference showing a dependency update to GraphQL Yoga version 3.2.1.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apollo-inline-trace/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[`5528d312`](https://github.com/dotansimha/graphql-yoga/commit/5528d312d46281651b330c12f1b9f7a7d64ef3da)]:\n  - graphql-yoga@3.2.1\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Version in Markdown Changelog\nDESCRIPTION: This snippet shows a typical entry in the changelog, updating the version of the @graphql-yoga/node dependency. It includes the version number, change type, and link to the commit.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/issue-template/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies\n  [[`779b55ee`](https://github.com/dotansimha/graphql-yoga/commit/779b55eea843bd282f659e1012f255f62fd888b6)]:\n  - @graphql-yoga/node@2.13.10\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates - Markdown\nDESCRIPTION: Markdown formatted changelog entries showing version increments and dependency updates for the SOFA GraphQL plugin.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/sofa/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @graphql-yoga/plugin-sofa\n\n## 3.13.5\n\n### Patch Changes\n\n- Updated dependencies\n  [[`000c33d`](https://github.com/graphql-hive/graphql-yoga/commit/000c33dc043454f4b73d15f03c3e688cfb9d0901)]:\n  - graphql-yoga@5.13.4\n```\n\n----------------------------------------\n\nTITLE: Testing Pagination Constraints with Invalid Input\nDESCRIPTION: GraphQL query example that tests the pagination constraints by providing an invalid take value, demonstrating how the API handles validation errors.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/10-filtering-and-pagination.mdx#2025-04-15_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  feed(take: -1) {\n    id\n    description\n    url\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version Number Formatting in Changelog\nDESCRIPTION: Version number entry from changelog showing major.minor.patch format.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/render-graphiql/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.13.4\n```\n\n----------------------------------------\n\nTITLE: Updating graphql-yoga Dependency in Markdown\nDESCRIPTION: This snippet shows a changelog entry updating the graphql-yoga dependency to version 5.3.1. It includes commit hashes and links to the relevant changes.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/gcp-cloud-run/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies\n  [[`3324bbab`](https://github.com/dotansimha/graphql-yoga/commit/3324bbabf1f32e8b4ee95ea8700acfb06f87f8ca),\n  [`3324bbab`](https://github.com/dotansimha/graphql-yoga/commit/3324bbabf1f32e8b4ee95ea8700acfb06f87f8ca)]:\n  - graphql-yoga@5.3.1\n```\n\n----------------------------------------\n\nTITLE: GraphQL AST Example\nDESCRIPTION: JSON representation of the Abstract Syntax Tree (AST) for a simple GraphQL query\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/tutorial/basic/02-getting-started.mdx#2025-04-15_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Document\",\n  \"definitions\": [\n    {\n      \"kind\": \"OperationDefinition\",\n      \"operation\": \"query\",\n      \"variableDefinitions\": [],\n      \"selectionSet\": {\n        \"kind\": \"SelectionSet\",\n        \"selections\": [\n          {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"hello\"\n            },\n            \"arguments\": []\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Valid GraphQL Query Example\nDESCRIPTION: Example of a valid GraphQL query using curl to fetch book titles from the API endpoint.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/graphql-armor/README.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:4000/graphql' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\"query\":\"query { books { title } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.13.10\nDESCRIPTION: Shows the patch changes for version 0.13.10, including a specific commit update for the @graphql-yoga/node dependency.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/live-query/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.13.10\n\n### Patch Changes\n\n- Updated dependencies\n  [[`779b55ee`](https://github.com/dotansimha/graphql-yoga/commit/779b55eea843bd282f659e1012f255f62fd888b6)]:\n  - @graphql-yoga/node@2.13.10\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GraphQL Yoga and Hapi Integration\nDESCRIPTION: This command installs the required packages: @hapi/hapi for the Hapi server, graphql-yoga for the GraphQL server, and graphql as a peer dependency.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/integrations/integration-with-hapi.mdx#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @hapi/hapi graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Version Change Record in Markdown\nDESCRIPTION: Lists version changes and dependency updates for GraphQL Yoga, including commit references and version numbers.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/aws-lambda/lambda/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies\n  [[`01430e03`](https://github.com/dotansimha/graphql-yoga/commit/01430e03288f072a9cb09b0b898316b1f5b58a5f),\n  [`5b615478`](https://github.com/dotansimha/graphql-yoga/commit/5b6154783957874281bdf180575cdf57fadb75bf),\n  [`350bb851`](https://github.com/dotansimha/graphql-yoga/commit/350bb85195c01cc5b5721f7a90f6cfbe1af36aff)]:\n  - graphql-yoga@5.0.0\n```\n\n----------------------------------------\n\nTITLE: Version Control Markdown Changelog\nDESCRIPTION: Changelog documenting version updates and dependency changes for the SvelteKit adapter of GraphQL Yoga. Each version entry includes patch changes and dependency updates with corresponding commit references.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/sveltekit/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# sveltekit\n\n## 0.12.10\n\n### Patch Changes\n\n- Updated dependencies [[`cb360975`](https://github.com/dotansimha/graphql-yoga/commit/cb36097523b5700fed8260cb654cbce75d37de20)]:\n  - @graphql-yoga/common@2.12.10\n```\n\n----------------------------------------\n\nTITLE: Adding New Dependency in package.json\nDESCRIPTION: In version 3.13.1, a new dependency @whatwg-node/promise-helpers was added. This snippet shows how it would be added to package.json.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apq/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@whatwg-node/promise-helpers\": \"^1.2.4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.13.11\nDESCRIPTION: Shows the patch changes for version 0.13.11, updating the @graphql-yoga/node dependency.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/live-query/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.13.11\n\n### Patch Changes\n\n- Updated dependencies []:\n  - @graphql-yoga/node@2.13.11\n```\n\n----------------------------------------\n\nTITLE: Major Version Commit References - GraphQL Yoga v3.0.0\nDESCRIPTION: Multiple commit references documenting changes for the major version 3.0.0 release of GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apollo-inline-trace/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[`2e0c4824`](https://github.com/dotansimha/graphql-yoga/commit/2e0c482418af2281c9cf0c34dd16f207d850cdb7),\n  [`8773a27f`](https://github.com/dotansimha/graphql-yoga/commit/8773a27ffb7f50a4b1f8c044d2a0c428d14e4fee),\n  [`720898db`](https://github.com/dotansimha/graphql-yoga/commit/720898dbf923a7aa52ff63e50e25527be1e8921b)]\n```\n\n----------------------------------------\n\nTITLE: Installing gqtx for type-safe GraphQL schema definition\nDESCRIPTION: Command to install the gqtx package, which provides a code-first type-safe approach to define GraphQL schemas without codegen or metaprogramming.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/index.mdx#2025-04-15_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm i gqtx\n```\n\n----------------------------------------\n\nTITLE: Referencing Specific Commit in Dependency Update\nDESCRIPTION: This snippet demonstrates how a specific commit is referenced when updating dependencies. It includes a link to the commit in the GitHub repository and details the exact files changed.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/file-upload-nexus/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.13.10\n\n### Patch Changes\n\n- Updated dependencies\n  [[`779b55ee`](https://github.com/dotansimha/graphql-yoga/commit/779b55eea843bd282f659e1012f255f62fd888b6)]:\n  - @graphql-yoga/node@2.13.10\n```\n\n----------------------------------------\n\nTITLE: Updating NestJS GraphQL Peer Dependency\nDESCRIPTION: Updates the peer dependency for @nestjs/graphql to version 12.0.0 in the package.json file.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/nestjs-federation/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"@nestjs/graphql\": \"^12.0.0\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response With Name\nDESCRIPTION: Server response for hello query with a name parameter.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/hello-world/README.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"hello\": \"Hello Sarah\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Custom Server with WebSocket Support\nDESCRIPTION: Commands to start the custom Next.js server that supports WebSockets and GraphQL. This server setup is necessary because WebSockets cannot be used with standard Next.js API routes.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/nextjs-ws/README.md#2025-04-15_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n# or\nyarn start\n# or\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: Various entries show updates to dependencies, particularly graphql-yoga. This snippet demonstrates how such an update would appear in package.json.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apq/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"graphql-yoga\": \"^5.13.4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SessionIdFactory Type in GraphQL Yoga Response Cache Plugin\nDESCRIPTION: TypeScript type definition for the SessionIdFactory function that takes GraphQLParams and Request objects as arguments instead of GraphQL context. The function returns a string or null/undefined value.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/response-cache/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype SessionIdFactory = (params: GraphQLParams, request: Request) => Maybe<string>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GraphQL Yoga with NestJS Federation\nDESCRIPTION: This command installs the necessary npm packages for setting up GraphQL Yoga with Apollo Federation in a NestJS application. It includes @nestjs/graphql, graphql-yoga, graphql, and @graphql-yoga/nestjs-federation.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/nestjs-federation/README.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @nestjs/graphql graphql-yoga graphql @graphql-yoga/nestjs-federation\n```\n\n----------------------------------------\n\nTITLE: Commit Hash Reference in Markdown\nDESCRIPTION: Git commit hash reference in markdown format used in changelog entries to link to specific changes\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/graphql-ws/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`779b55ee`](https://github.com/dotansimha/graphql-yoga/commit/779b55eea843bd282f659e1012f255f62fd888b6)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[`e4e8ade`](https://github.com/dotansimha/graphql-yoga/commit/e4e8ade526c2aec7ea28218ca7795e96b867fc6b)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[`94b41f3`](https://github.com/dotansimha/graphql-yoga/commit/94b41f30f598afb37db2438c736764e2a539cd10)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Error Response Format\nDESCRIPTION: Shows the error response format when the batching limit is exceeded, returning a 413 Payload Too Large status code.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/request-batching.mdx#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [{ \"message\": \"Batching is limited to 2 operations per request.\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Lookup Locations in GraphQL Yoga JWT Plugin\nDESCRIPTION: Example showing how to configure token extraction from multiple locations including headers and cookies. This demonstrates the flexible token lookup functionality introduced in version 3.0.0.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/jwt/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimoprt { extractFromHeader, extractFromCookie, useJWT } from '@graphql-yoga/plugin-jwt'\n\nconst yoga = createYoga({\n  // ...\n  plugins: [\n    useCookies(), // Required if \"extractFromCookie\" is used.\n    useJWT({\n      lookupLocations: [\n        extractFromHeader({ name: 'authorization', prefix: 'Bearer' }),\n        extractFromHeader({ name: 'x-legacy-auth' }),\n        extractFromHeader({ name: 'x-api-key', prefix: 'API-Access' }),\n        extractFromCookie({ name: 'browserAuth' })\n      ]\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entry documenting version updates and dependency changes for GraphQL Yoga plugins and core package\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/benchmark/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies\n  [[`64f769ec`](https://github.com/dotansimha/graphql-yoga/commit/64f769ec41f41a0c625bc7d4c749435f573e690c),\n  [`9e743db5`](https://github.com/dotansimha/graphql-yoga/commit/9e743db5f43a8e6e5944667ddec349005dbb2cd9),\n  [`23d1b26c`](https://github.com/dotansimha/graphql-yoga/commit/23d1b26cde5d86e21deb74846348e077b4fdf620),\n  [`9e743db5`](https://github.com/dotansimha/graphql-yoga/commit/9e743db5f43a8e6e5944667ddec349005dbb2cd9),\n  [`23d1b26c`](https://github.com/dotansimha/graphql-yoga/commit/23d1b26cde5d86e21deb74846348e077b4fdf620),\n  [`4e824b3d`](https://github.com/dotansimha/graphql-yoga/commit/4e824b3d6224604ef5b06f1eb6bdf55e8a70fc23)]:\n  - @graphql-yoga/plugin-response-cache@1.7.0\n  - graphql-yoga@3.7.0\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Reference Format\nDESCRIPTION: Shows how dependency updates with commit references are formatted in the changelog.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/file-upload-nextjs-pothos/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies\n  [[`779b55ee`](https://github.com/dotansimha/graphql-yoga/commit/779b55eea843bd282f659e1012f255f62fd888b6)]:\n  - @graphql-yoga/node@2.13.10\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in GraphQL Yoga Apollo Client Link\nDESCRIPTION: Updates dependencies for @graphql-tools/executor-http and @graphql-tools/executor-apollo-link packages.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/client/apollo-link/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependency\n  [`@graphql-tools/executor-http@0.0.7` ↗︎](https://www.npmjs.com/package/@graphql-tools/executor-http/v/0.0.7)\n  (from `0.0.4`, in `dependencies`)\n- Updated dependency\n  [`@graphql-tools/executor-apollo-link@0.0.5` ↗︎](https://www.npmjs.com/package/@graphql-tools/executor-apollo-link/v/0.0.5)\n  (from `0.0.3`, in `dependencies`)\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Entry\nDESCRIPTION: Patch update entry showing dependency updates including the Prometheus package version bump.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/prometheus/CHANGELOG.md#2025-04-15_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#2156](https://github.com/dotansimha/graphql-yoga/pull/2156)\n  [`491ef5da`](https://github.com/dotansimha/graphql-yoga/commit/491ef5da7c6bcc3038fdb0909fd333a2b5217046)\n  Thanks [@renovate](https://github.com/apps/renovate)! - dependencies updates:\n  - Updated dependency\n    [`@envelop/prometheus@7.0.4` ↗︎](https://www.npmjs.com/package/@envelop/prometheus/v/7.0.4)\n    (from `7.0.3`, in `dependencies`)\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies in package.json\nDESCRIPTION: Updates the version of whatwg-node packages as dependencies.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/apollo-usage-report/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"dependencies\": {\n  \"@whatwg-node/promise-helpers\": \"^1.2.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Lifecycle Flow Diagram\nDESCRIPTION: Mermaid diagram illustrating the complete lifecycle of plugins in GraphQL Yoga, showing the flow from request to response.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/envelop-plugins.mdx#2025-04-15_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    [*] --> onRequest\n\n    state onRequest_if_state <<choice>>\n\n    onRequest --> onRequest_if_state\n\n    onRequest_if_state --> onResponse: Is not a GraphQL Request\n    onRequest_if_state --> GraphQLRequest: Is GraphQL Request\n\n    GraphQLRequest: GraphQL Request\n\n    state GraphQLRequest {\n      [*] --> onRequestParse\n      onRequestParse --> onParams\n      onParams --> onParse\n      onParse --> onValidate\n      onValidate --> onContextBuilding\n      onContextBuilding --> onExecute\n      onContextBuilding --> onSubscribe\n\n      onExecute --> onExecutionResult\n      onSubscribe --> onExecutionResult\n\n      onExecutionResult --> onResultProcess\n\n      onResultProcess --> [*]\n    }\n\n    GraphQLRequest --> onResponse\n    onResponse --> [*]\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.0.1\nDESCRIPTION: Documents release version 0.0.1 with patch changes including a release trigger.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/apollo-federation/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.1\n\n### Patch Changes\n\n- de1693e: trigger release\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Name and Warning in Markdown\nDESCRIPTION: This code snippet shows the package name and a warning message about its internal nature and potential for breaking changes. It also includes a link to documentation on GraphQL Subscriptions.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/event-target/typed-event-target/README.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @graphql-yoga/typed-event-target\n\nThis is an internal package. Please don't use this package directly. The package will do unexpected\nbreaking changes.\n\n[Learn more about GraphQL Subscriptions.](https://www.graphql-yoga.com/docs/features/subscriptions)\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: A structured changelog documenting version updates and dependency changes for the cloudflare-advanced integration, following semantic versioning with major, minor and patch changes.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/cloudflare-advanced/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# cloudflare-advanced\n\n## 3.13.4\n\n### Patch Changes\n\n- Updated dependencies\n  [[`000c33d`](https://github.com/graphql-hive/graphql-yoga/commit/000c33dc043454f4b73d15f03c3e688cfb9d0901)]:\n  - graphql-yoga@5.13.4\n```\n\n----------------------------------------\n\nTITLE: Background Jobs Management Plugin in GraphQL Yoga\nDESCRIPTION: Plugin implementation for managing background jobs queue, adding analytics jobs during request parsing and flushing the queue on server disposal\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/envelop-plugins.mdx#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst backgroundJobs: Promise<void>[] = []\n\nconst plugin = {\n  onRequestParse() {\n    backgroundJobs.push(\n      sendAnalytics({\n        /* ... */\n      })\n    )\n  },\n  onDispose: async () => {\n    // Flush the queue of background jobs\n    await Promise.all(backgroundJobs)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Dependency Updates Entry\nDESCRIPTION: Version change entry showing multiple dependency updates with their respective commit references\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/file-upload/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`e4e8ade`](https://github.com/dotansimha/graphql-yoga/commit/e4e8ade526c2aec7ea28218ca7795e96b867fc6b),\n  [`94b41f3`](https://github.com/dotansimha/graphql-yoga/commit/94b41f30f598afb37db2438c736764e2a539cd10)]:\n  - @graphql-yoga/node@2.13.7\n```\n\n----------------------------------------\n\nTITLE: Using Response Cache with Context Access in GraphQL Yoga\nDESCRIPTION: Code example showing how to use the response cache plugin with context access, specifically using a JWT token from the context object for session identification.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/packages/plugins/response-cache/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseResponseCache({\n  session: (req, ctx) => ctx.jwt.token\n})\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version Updates\nDESCRIPTION: Markdown formatted changelog entries documenting version changes and dependency updates, particularly focusing on graphql-yoga package updates from version 3.x.x to 5.0.0\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/cloudflare-advanced/CHANGELOG.md#2025-04-15_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies\n  [[`01430e03`](https://github.com/dotansimha/graphql-yoga/commit/01430e03288f072a9cb09b0b898316b1f5b58a5f),\n  [`5b615478`](https://github.com/dotansimha/graphql-yoga/commit/5b6154783957874281bdf180575cdf57fadb75bf),\n  [`350bb851`](https://github.com/dotansimha/graphql-yoga/commit/350bb85195c01cc5b5721f7a90f6cfbe1af36aff)]:\n  - graphql-yoga@5.0.0\n```\n\n----------------------------------------\n\nTITLE: Authentication Plugin Implementation\nDESCRIPTION: Example of implementing a custom authentication plugin using the onRequest hook in GraphQL Yoga.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/envelop-plugins.mdx#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Plugin } from 'graphql-yoga'\n\nfunction useAuth(): Plugin {\n  return {\n    onRequest({ request, fetchAPI, endResponse }) {\n      if (!request.headers.get('authorization')) {\n        endResponse(\n          new fetchAPI.Response(null, {\n            status: 401,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          })\n        )\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.13.7\nDESCRIPTION: Shows the patch changes for version 0.13.7, including multiple commit updates for the @graphql-yoga/node dependency.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/examples/live-query/CHANGELOG.md#2025-04-15_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.13.7\n\n### Patch Changes\n\n- Updated dependencies\n  [[`e4e8ade`](https://github.com/dotansimha/graphql-yoga/commit/e4e8ade526c2aec7ea28218ca7795e96b867fc6b),\n  [`94b41f3`](https://github.com/dotansimha/graphql-yoga/commit/94b41f30f598afb37db2438c736764e2a539cd10)]:\n  - @graphql-yoga/node@2.13.7\n```\n\n----------------------------------------\n\nTITLE: Database Connection Disposal Plugin in GraphQL Yoga\nDESCRIPTION: Implementation of a plugin that manages database connection lifecycle, establishing connection on init and properly closing it on disposal\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/envelop-plugins.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet dbConnection: Connection\nconst plugin = {\n  onPluginInit: async () => {\n    dbConnection = await createConnection()\n  },\n  onDispose: async () => {\n    // Dispose of resources\n    await dbConnection.close()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Background Jobs Queue Disposal\nDESCRIPTION: Implementation of background job queue management with disposal handling.\nSOURCE: https://github.com/graphql-hive/graphql-yoga/blob/main/website/src/content/docs/features/explicit-resource-management.mdx#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst backgroundJobs: Promise<void>[] = []\n\nconst plugin = {\n  onRequestParse() {\n    backgroundJobs.push(\n      sendAnalytics({\n        /* ... */\n      })\n    )\n  },\n  onDispose: async () => {\n    // Flush the queue of background jobs\n    await Promise.all(backgroundJobs)\n  }\n}\n```"
  }
]