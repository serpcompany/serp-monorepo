[
  {
    "owner": "jamsocket",
    "repo": "y-sweet",
    "content": "TITLE: Implementing Y-Sweet Authentication in Next.js Server Component\nDESCRIPTION: This example demonstrates how to implement Y-Sweet authentication in a Next.js server component. It shows how to get or create a document and token using a connection string, then pass the client token to the YDocProvider component for client-side collaboration.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/sdk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { YDocProvider } from '@y-sweet/react'\nimport { getOrCreateDocAndToken } from '@y-sweet/sdk'\n\ntype HomeProps = {\n  searchParams: Record<string, string>\n}\n\nexport default async function Home({ searchParams }: HomeProps) {\n    // Point to a local or production y-sweet server.\n    const connectionString = \"ys://localhost:8080\"\n\n    const clientToken = await getOrCreateDocAndToken(connectionString, searchParams.doc)\n\n    return (\n        <YDocProvider clientToken={clientToken} setQueryParam=\"doc\">\n            // Call your collaborative interface here\n        </YDocProvider>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Presence with usePresence Hooks\nDESCRIPTION: Complete example of implementing presence features using usePresence and usePresenceSetter hooks, displaying users' cursors with different colors in a collaborative space.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/react/README.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { usePresence, usePresenceSetter } from '@y-sweet/react'\nimport { useCallback, useRef } from 'react'\n\nconst COLORS = ['bg-red-500', 'bg-blue-500', 'bg-green-500', 'bg-purple-500', 'bg-pink-500']\n\ntype Presence = { x: number; y: number; color: string }\n\nexport function Presence() {\n  const myColor = useRef(COLORS[Math.floor(Math.random() * COLORS.length)])\n  const presence = usePresence<Presence>()\n  const setPresence = usePresenceSetter<Presence>()\n\n  const updatePresence = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      setPresence({\n        x: e.clientX - e.currentTarget.offsetLeft,\n        y: e.clientY - e.currentTarget.offsetTop,\n        color: myColor.current,\n      })\n    },\n    [setPresence],\n  )\n\n  return (\n    <div\n      className=\"border-blue-400 border relative overflow-hidden w-[500px] h-[500px]\"\n      onMouseMove={updatePresence}\n    >\n      {Array.from(presence.entries()).map(([key, value]) => (\n        <div\n          key={key}\n          className={`absolute rounded-full ${value.color}`}\n          style={{ left: value.x - 6, top: value.y - 8, width: 10, height: 10 }}\n        />\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Y-Sweet Client Implementation\nDESCRIPTION: Example showing how to create a Yjs document, connect it to Y-Sweet server, and handle document updates on the client side.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Y from 'yjs';\nimport { createYjsProvider } from '@y-sweet/client';\n\n// Create the Yjs doc and link it to the Y-Sweet server:\nconst doc = new Y.Doc();\nconst docId = 'my-doc-id';\ncreateYjsProvider(doc, docId, '/api/my-auth-endpoint');\n\n// Now use the doc like a normal Yjs doc!\nlet mySharedMap = doc.getMap('thing');\nmySharedMap.set(\"foo\", 123);\n\n// Update your UI based on `mySharedMap` changes like this, for example:\nmySharedMap.observe((event) => {\n  event.keysChanged.forEach((key) => {\n    // do whatever you want based on the detected change:\n    yourUpdateFunction(key, mySharedMap.get(key));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using useMap for Shared Object Data in ColorGrid\nDESCRIPTION: Example of using useMap hook to store a grid of colors using coordinates as keys, allowing for deletion and setting of color values.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst items = useMap<string>('colorgrid')\n\nitems.delete(key)\nitems.set(`${x},${y}`, color)\n```\n\n----------------------------------------\n\nTITLE: Using useArray for Shared Array Data in ToDoList\nDESCRIPTION: Example showing how to use useArray to store and manipulate a list of to-do items, including adding new items and clearing completed ones.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst items = useArray<Y.Map<any>>('todolist')\n\nconst pushItem = useCallback((text: string) => {\n    let item = new Y.Map([\n        ['text', text],\n        ['done', false],\n    ] as [string, any][])\n\n    items?.push([item])\n},[items])\n\nconst clearCompleted = useCallback(() => {\n    let indexOffset = 0\n    items?.forEach((item, index) => {\n        if (item.get('done')) {\n            items.delete(index - indexOffset, 1)\n            indexOffset += 1\n        }\n    })\n}, [items])\n```\n\n----------------------------------------\n\nTITLE: Y-Sweet Server Implementation\nDESCRIPTION: Server-side code showing how to set up document management and create an authentication endpoint for Y-Sweet.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DocumentManager } from '@y-sweet/sdk';\n\n// Pass in a CONNECTION_STRING, which you can get from a Y-Sweet service in the Jamsocket dashboard or from running npx y-sweet@latest serve locally\nconst manager = new DocumentManager(CONNECTION_STRING);\n\n// create an endpoint that auths your user and returns a Y-Sweet client token\nexport async function POST(request) {\n  // in a production app, you'd want to authenticate the user\n  // and make sure they have access to the given doc\n  const body = await request.json();\n  const docId = body.docId;\n  const clientToken = await manager.getOrCreateDocAndToken(docId);\n  return Response.json(clientToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Y-Sweet document using Python\nDESCRIPTION: This example demonstrates how to use y_sweet_sdk to obtain a WebSocket URL for a Y.js document and connect to it using y_py and ypy_websocket. It shows setting up a document observer that logs changes to a 'todolist' array.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/python/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom y_sweet_sdk import DocumentManager\n\n# Get the websocket url for a document.\ndoc = DocumentManager('ys://localhost:8080')\nurl = doc.get_websocket_url('my-document-id')\n\n# Connect to the document using y_py and ypy_websocket.\n# (Based on: https://davidbrochart.github.io/ypy-websocket/usage/client/)\nfrom ypy_websocket import WebsocketProvider\nimport y_py as Y\nfrom websockets import connect\nimport asyncio\n\nydoc = Y.YDoc()\n\n# Simple example: log the array \"todolist\" to stdout every time it changes.\ndata = ydoc.get_array(\"todolist\")\ndef data_changed(event: Y.AfterTransactionEvent):\n    print(f\"data changed: {data.to_json()}\")\n\ndata.observe_deep(data_changed)\n\nasync with (\n    connect(url) as websocket,\n    WebsocketProvider(ydoc, websocket),\n):\n    await asyncio.Future()  # run forever\n```\n\n----------------------------------------\n\nTITLE: Using useAwareness for Editor Bindings\nDESCRIPTION: Example showing how to use useAwareness hook with CodeMirror editor to enable collaborative editing with presence features.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst awareness = useAwareness()\n\nbindingRef.current = new CodemirrorBinding(yText!, editorRef.current, awareness)\n```\n\n----------------------------------------\n\nTITLE: Using useText for Shared Text Editing\nDESCRIPTION: Simple example of using useText hook to access a shared text document for collaborative text editing.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst yText = useText('text')\n```\n\n----------------------------------------\n\nTITLE: Installing Y-Sweet via NPX\nDESCRIPTION: Command to quickly create a new Y-Sweet project using the create-y-sweet-app CLI tool.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-y-sweet-app@latest\n```\n\n----------------------------------------\n\nTITLE: Installing and Running create-y-sweet-app\nDESCRIPTION: Command to initialize a new Y-Sweet project. This will prompt you for a project name and allow you to select a framework template (Next.js or Remix).\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/create-y-sweet-app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-y-sweet-app@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Y-Sweet SDK via npm\nDESCRIPTION: Command to install the @y-sweet/sdk package using npm, which is required to use the Y-Sweet collaboration features in your JavaScript/TypeScript project.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @y-sweet/sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Y-Sweet Client Package with NPM\nDESCRIPTION: Command to install the @y-sweet/client package from npm registry. This package provides JavaScript functionality for implementing collaboration features with y-sweet.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @y-sweet/client\n```\n\n----------------------------------------\n\nTITLE: Running Y-Sweet Server with Data Persistence\nDESCRIPTION: Command to start a Y-Sweet server with a specified directory path for data persistence. The path can be a local directory or an S3-compatible bucket (requiring AWS credentials).\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/docs/running.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx y-sweet@latest serve /path/to/data\n```\n\n----------------------------------------\n\nTITLE: Running a Y-Sweet Development Server with npx\nDESCRIPTION: Command to start a local Y-Sweet server using npx. This downloads the Y-Sweet server if not already installed and runs it without persisting data to disk.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/docs/running.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx y-sweet@latest serve\n```\n\n----------------------------------------\n\nTITLE: Running Y-Sweet Server Locally\nDESCRIPTION: Commands for running a Y-Sweet server locally with optional data persistence configuration.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx y-sweet@latest serve\n\n# With persistence:\nnpx y-sweet@latest serve /path/to/data\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Y-Sweet VanillaJS Demo\nDESCRIPTION: Command sequence for setting up and running the Y-Sweet VanillaJS demo. Includes installation of dependencies, starting the development server, and running the Y-Sweet server with a connection string.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/examples/vanilla/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nCONNECTION_STRING=<your-connection-string> npm run server\n```\n\n----------------------------------------\n\nTITLE: Starting Y-Sweet Development Server\nDESCRIPTION: Command to start the local development server for a Y-Sweet Next.js application. Running this command will start the server on localhost:3000 with automatic state synchronization across multiple windows.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/create-y-sweet-app/src/frameworks/nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Y-Sweet Development Server with npm\nDESCRIPTION: Command to start the development server for a Y-Sweet project. This will launch the app locally, allowing you to view and test it in your browser.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/create-y-sweet-app/src/frameworks/remix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Setup Locally\nDESCRIPTION: Command to start the y-sweet server using Docker Compose for local development and testing.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/deploy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Running Y-Sweet NextJS Demos with Connection String\nDESCRIPTION: Command to start the development server for Y-Sweet NextJS demos, using a connection string for the Y-Sweet server.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/examples/nextjs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCONNECTION_STRING=<your-connection-string> npm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Servers for SDK and React Packages\nDESCRIPTION: Commands to start development servers for both the SDK and React packages in the y-sweet project. These should be run in separate terminal tabs from the root directory of the repository.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev -w js-pkg/sdk\nnpm run dev -w js-pkg/react\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for NextJS Example\nDESCRIPTION: Command to start the development server for the NextJS example in the y-sweet project. This should be run from the root directory of the repository.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev -w examples/nextjs\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for y-sweet Project\nDESCRIPTION: Command to install all necessary dependencies for the y-sweet project. This should be run from the root directory of the repository.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/js-pkg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Y-Sweet NextJS Demos\nDESCRIPTION: Command to install the necessary dependencies for the Y-Sweet NextJS demos.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/examples/nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Publishing Y-Sweet Packages\nDESCRIPTION: This command runs the releaser program to publish Y-Sweet packages. It checks for published binaries, compares versions with published ones, and publishes packages with different versions to npm, crates.io, and PyPI.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/releaser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -- publish\n```\n\n----------------------------------------\n\nTITLE: Bumping Y-Sweet Version\nDESCRIPTION: This command runs the releaser program to bump the version across all Y-Sweet packages. It prompts for bump type, updates versions, creates a new git branch, and pushes it for PR creation.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/releaser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -- bump\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Configuration Environment Variables for Y-Sweet Tests\nDESCRIPTION: Enumerates the five environment variables required to enable S3 backend testing in the Y-Sweet test suite. All variables must be set to trigger S3 storage backend tests.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Y_SWEET_S3_ACCESS_KEY_ID\n- Y_SWEET_S3_SECRET_KEY\n- Y_SWEET_S3_REGION\n- Y_SWEET_S3_BUCKET_PREFIX\n- Y_SWEET_S3_BUCKET_NAME\n```\n\n----------------------------------------\n\nTITLE: Setting up development environment with UV\nDESCRIPTION: Command to set up the virtual environment for y_sweet_sdk development using UV. This installs both regular and development dependencies.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/python/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --dev\n```\n\n----------------------------------------\n\nTITLE: Installing UV on Mac or Linux\nDESCRIPTION: Command to install the UV package manager on Mac or Linux systems. UV is required for developing with y_sweet_sdk as it handles virtual environment management.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/python/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Running tests with UV\nDESCRIPTION: Command to run pytest tests for y_sweet_sdk using UV. This executes the pytest command in the virtual environment managed by UV.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/python/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest\n```\n\n----------------------------------------\n\nTITLE: Formatting code with Ruff\nDESCRIPTION: Command to format y_sweet_sdk code using Ruff formatter through UV. This should be run before committing changes.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/python/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv run ruff format\n```\n\n----------------------------------------\n\nTITLE: Accessing the Local y-sweet Server\nDESCRIPTION: URL for accessing the locally deployed y-sweet server after starting the Docker Compose setup.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/deploy/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Domain Reference\nDESCRIPTION: Reference to the Caddyfile configuration where HTTPS setup for custom domains can be configured.\nSOURCE: https://github.com/jamsocket/y-sweet/blob/main/deploy/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nCaddyfile\n```"
  }
]