[
  {
    "owner": "modelcontextprotocol",
    "repo": "servers",
    "content": "TITLE: Annotating Messages in JSON for MCP Protocol\nDESCRIPTION: This snippet demonstrates JSON structure for message annotations in the MCP protocol. It shows how to set priority levels (on a 0.0-1.0 scale) and specify audience visibility (user, assistant, or both) for different types of messages.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/everything/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"priority\": 1.0,\n  \"audience\": [\"user\", \"assistant\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Claude Desktop MCP Configuration for Multiple Servers\nDESCRIPTION: Comprehensive JSON configuration for Claude Desktop to use multiple MCP servers including filesystem, git, github, and postgres. Demonstrates how to configure environment variables and server-specific arguments.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relation Structure in Knowledge Graph Memory\nDESCRIPTION: JSON structure representing a relation in the knowledge graph. Relations define directed connections between entities, stored in active voice.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/memory/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"from\": \"John_Smith\",\n  \"to\": \"Anthropic\",\n  \"relationType\": \"works_at\"\n}\n```\n\n----------------------------------------\n\nTITLE: Observations Structure in Knowledge Graph Memory\nDESCRIPTION: JSON structure representing observations about an entity. Observations are discrete, atomic pieces of information stored as strings and attached to specific entities.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/memory/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entityName\": \"John_Smith\",\n  \"observations\": [\n    \"Speaks fluent Spanish\",\n    \"Graduated in 2019\",\n    \"Prefers morning meetings\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: System Prompt for Memory-Enabled Claude\nDESCRIPTION: Example prompt for utilizing memory in Claude.ai Projects. The prompt guides Claude on identifying users, retrieving memory, categorizing new information, and updating the knowledge graph.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/memory/README.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nFollow these steps for each interaction:\n\n1. User Identification:\n   - You should assume that you are interacting with default_user\n   - If you have not identified default_user, proactively try to do so.\n\n2. Memory Retrieval:\n   - Always begin your chat by saying only \"Remembering...\" and retrieve all relevant information from your knowledge graph\n   - Always refer to your knowledge graph as your \"memory\"\n\n3. Memory\n   - While conversing with the user, be attentive to any new information that falls into these categories:\n     a) Basic Identity (age, gender, location, job title, education level, etc.)\n     b) Behaviors (interests, habits, etc.)\n     c) Preferences (communication style, preferred language, etc.)\n     d) Goals (goals, targets, aspirations, etc.)\n     e) Relationships (personal and professional relationships up to 3 degrees of separation)\n\n4. Memory Update:\n   - If any new information was gathered during the interaction, update your memory as follows:\n     a) Create entities for recurring organizations, people, and significant events\n     b) Connect them to the current entities using relations\n     b) Store facts about them as observations\n```\n\n----------------------------------------\n\nTITLE: Providing Launch Options in Tool Call Arguments\nDESCRIPTION: JSON example showing how to pass launch options directly to the puppeteer_navigate tool. This allows for dynamic configuration of browser behavior during navigation.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/puppeteer/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://example.com\",\n  \"launchOptions\": {\n    \"headless\": false,\n    \"defaultViewport\": {\"width\": 1280, \"height\": 720}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Notification Message Format in MCP Protocol\nDESCRIPTION: Shows the JSON format for log notification messages sent by the server. The structure includes the notification method and parameters with a level field and data payload for the log message content.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/everything/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"notifications/message\",\n  \"params\": {\n\t\"level\": \"info\",\n\t\"data\": \"Info-level message\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Memory MCP Server with npx\nDESCRIPTION: Command to run the TypeScript-based Memory MCP server directly using npx. This demonstrates how to quickly start an MCP server without installation.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -y @modelcontextprotocol/server-memory\n```\n\n----------------------------------------\n\nTITLE: Basic Claude Desktop MCP Configuration for Memory Server\nDESCRIPTION: JSON configuration for Claude Desktop to use the Memory MCP server. Shows the minimal required settings to connect an MCP client to a server.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Git MCP Server with uvx and pip\nDESCRIPTION: Commands to run the Python-based Git MCP server using either uvx (recommended) or pip. Shows two alternative methods for starting the same server.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\n----------------------------------------\n\nTITLE: Building and Running MCP Server Commands\nDESCRIPTION: Set of npm commands for building, testing, and running the MCP server in different modes including stdio and SSE transport options.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/everything/CLAUDE.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start:sse\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prepare\n```\n\n----------------------------------------\n\nTITLE: Entity Structure in Knowledge Graph Memory\nDESCRIPTION: JSON structure representing an entity in the knowledge graph. Entities are primary nodes with a unique name, type, and list of observations.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/memory/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John_Smith\",\n  \"entityType\": \"person\",\n  \"observations\": [\"Speaks fluent Spanish\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-based GitHub MCP Server Integration\nDESCRIPTION: JSON configuration for setting up GitHub integration with Claude Desktop using Docker. Includes environment variable configuration for GitHub personal access token.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/github/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"mcp/github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL MCP Server with Docker in Claude Desktop\nDESCRIPTION: JSON configuration for adding a PostgreSQL MCP server to Claude Desktop using Docker. This allows Claude to connect to PostgreSQL databases. The configuration specifies using host.docker.internal for macOS connections and supports username/password authentication.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/postgres/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"postgres\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \n        \"-i\", \n        \"--rm\", \n        \"mcp/postgres\", \n        \"postgresql://host.docker.internal:5432/mydb\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS KB Retrieval with Docker in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the AWS Knowledge Base Retrieval server using Docker in Claude Desktop. Requires AWS credentials (access key, secret key, and region) to be specified in environment variables.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/aws-kb-retrieval-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"aws-kb-retrieval\": {\n      \"command\": \"docker\",\n      \"args\": [ \"run\", \"-i\", \"--rm\", \"-e\", \"AWS_ACCESS_KEY_ID\", \"-e\", \"AWS_SECRET_ACCESS_KEY\", \"-e\", \"AWS_REGION\", \"mcp/aws-kb-retrieval-server\" ],\n      \"env\": {\n        \"AWS_ACCESS_KEY_ID\": \"YOUR_ACCESS_KEY_HERE\",\n        \"AWS_SECRET_ACCESS_KEY\": \"YOUR_SECRET_ACCESS_KEY_HERE\",\n        \"AWS_REGION\": \"YOUR_AWS_REGION_HERE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging MCP Fetch Server with Inspector (development)\nDESCRIPTION: Command to debug the MCP Fetch Server using the inspector tool when working with the source code directly.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/fetch/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/servers/src/fetch\nnpx @modelcontextprotocol/inspector uv run mcp-server-fetch\n```\n\n----------------------------------------\n\nTITLE: Sample Image Generation Usage\nDESCRIPTION: JavaScript example demonstrating how to call the generate_image tool with specific parameters\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/everart/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await client.callTool({\n  name: \"generate_image\",\n  arguments: {\n    prompt: \"A cat sitting elegantly\",\n    model: \"7000\",\n    image_count: 1\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration for Claude Desktop\nDESCRIPTION: JSON configuration to add the memory server to claude_desktop_config.json using Docker. This mounts a volume for persistent storage and runs the memory server container.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/memory/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"-v\", \"claude-memory:/app/dist\", \"--rm\", \"mcp/memory\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging MCP Server with UVX\nDESCRIPTION: Command to debug the mcp-server-sentry using the MCP inspector with uvx.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sentry/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector uvx mcp-server-sentry --auth-token YOUR_SENTRY_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Image Generation Parameters Type Definition\nDESCRIPTION: TypeScript interface defining the parameters for image generation including prompt, model selection and image count\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/everart/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  prompt: string,       // Image description\n  model?: string,       // Model ID (default: \"207910310772879360\")\n  image_count?: number  // Number of images (default: 1)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPX-based GitHub MCP Server Integration\nDESCRIPTION: JSON configuration for setting up GitHub integration with Claude Desktop using NPX. Specifies the MCP server package and environment configuration.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/github/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem MCP Server with NPX in Claude Desktop\nDESCRIPTION: JSON configuration for using the Filesystem MCP Server with Claude Desktop using NPX. It specifies the command to run the server using NPX with allowed directories as arguments.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/filesystem/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"/Users/username/Desktop\",\n        \"/path/to/other/allowed/dir\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer MCP Server with Docker\nDESCRIPTION: JSON configuration for using the Puppeteer server via Docker. This implementation uses headless Chromium rather than opening a browser window.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/puppeteer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"--init\", \"-e\", \"DOCKER_CONTAINER=true\", \"mcp/puppeteer\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps MCP Server with Docker in claude_desktop_config.json\nDESCRIPTION: JSON configuration for setting up the Google Maps MCP server using Docker in Claude Desktop. Specifies the Docker command with appropriate environment variables for the API key.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/google-maps/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"google-maps\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GOOGLE_MAPS_API_KEY\",\n        \"mcp/google-maps\"\n      ],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"<YOUR_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer MCP Server with Custom Launch Options\nDESCRIPTION: JSON configuration example showing how to set custom Puppeteer launch options using environment variables. This allows for custom browser paths and configurations.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/puppeteer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mcp-puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-puppeteer\"],\n      \"env\": {\n        \"PUPPETEER_LAUNCH_OPTIONS\": \"{ \\\"headless\\\": false, \\\"executablePath\\\": \\\"C:/Program Files/Google/Chrome/Application/chrome.exe\\\", \\\"args\\\": [] }\",\n        \"ALLOW_DANGEROUS\": \"true\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem MCP Server with Docker in Claude Desktop\nDESCRIPTION: JSON configuration for using the Filesystem MCP Server with Claude Desktop using Docker. It specifies the command to run the Docker container with mounted directories for file access.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/filesystem/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--mount\", \"type=bind,src=/Users/username/Desktop,dst=/projects/Desktop\",\n        \"--mount\", \"type=bind,src=/path/to/other/allowed/dir,dst=/projects/other/allowed/dir,ro\",\n        \"--mount\", \"type=bind,src=/path/to/file.txt,dst=/projects/path/to/file.txt\",\n        \"mcp/filesystem\",\n        \"/projects\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL MCP Server with NPX in Claude Desktop\nDESCRIPTION: JSON configuration for adding a PostgreSQL MCP server to Claude Desktop using NPX. This setup installs and runs the @modelcontextprotocol/server-postgres package, connecting to a local PostgreSQL database.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/postgres/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-postgres\",\n        \"postgresql://localhost/mydb\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running MCP Fetch Server as a Python module\nDESCRIPTION: Command to run the MCP Fetch Server as a Python module after installation.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/fetch/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m mcp_server_fetch\n```\n\n----------------------------------------\n\nTITLE: Authenticating Docker-Based Google Drive Server\nDESCRIPTION: Command to authenticate the Docker-based Google Drive MCP server by mounting the OAuth keys file and a persistent volume for credentials. This command initiates the authentication flow in the browser.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/gdrive/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i --rm --mount type=bind,source=/path/to/gcp-oauth.keys.json,target=/gcp-oauth.keys.json -v mcp-gdrive:/gdrive-server -e GDRIVE_OAUTH_PATH=/gcp-oauth.keys.json -e \"GDRIVE_CREDENTIALS_PATH=/gdrive-server/credentials.json\" -p 3000:3000 mcp/gdrive auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Brave Search MCP Server with Docker for Claude Desktop\nDESCRIPTION: JSON configuration for integrating the Brave Search MCP server with Claude Desktop using Docker. Requires setting your Brave API key as an environment variable.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/brave-search/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"brave-search\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"BRAVE_API_KEY\",\n        \"mcp/brave-search\"\n      ],\n      \"env\": {\n        \"BRAVE_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequential Thinking MCP Server with npx\nDESCRIPTION: JSON configuration for adding the Sequential Thinking server to Claude Desktop using npx. This configuration should be added to the claude_desktop_config.json file.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sequentialthinking/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"sequential-thinking\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-sequential-thinking\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPX-Based Google Drive Server in MCP App\nDESCRIPTION: JSON configuration for integrating the NPX-based Google Drive MCP server with a desktop application. This simpler configuration uses NPX to download and run the server package on demand.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/gdrive/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"gdrive\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-gdrive\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server in Claude Desktop\nDESCRIPTION: JSON configuration snippet for adding the Everything MCP server to Claude Desktop. The configuration specifies the server name, command to run, and arguments to pass for server initialization using npx.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/everything/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"everything\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-everything\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS KB Retrieval with NPX in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the AWS Knowledge Base Retrieval server using NPX in Claude Desktop. Uses the @modelcontextprotocol/server-aws-kb-retrieval package and requires AWS credentials to be provided as environment variables.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/aws-kb-retrieval-server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"aws-kb-retrieval\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-aws-kb-retrieval\"\n      ],\n      \"env\": {\n        \"AWS_ACCESS_KEY_ID\": \"YOUR_ACCESS_KEY_HERE\",\n        \"AWS_SECRET_ACCESS_KEY\": \"YOUR_SECRET_ACCESS_KEY_HERE\",\n        \"AWS_REGION\": \"YOUR_AWS_REGION_HERE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer MCP Server with NPX\nDESCRIPTION: JSON configuration for using the Puppeteer server via NPX. This implementation will open a browser window rather than using headless mode.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/puppeteer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-puppeteer\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab MCP Server with NPX\nDESCRIPTION: JSON configuration for setting up the GitLab MCP server using NPX in claude_desktop_config.json. Specifies the package and required environment variables.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/gitlab/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"gitlab\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-gitlab\"\n      ],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\" // Optional, for self-hosted instances\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab MCP Server with Docker\nDESCRIPTION: JSON configuration for setting up the GitLab MCP server using Docker in claude_desktop_config.json. Includes environment variables for GitLab token and API URL.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/gitlab/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": { \n    \"gitlab\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\",\n        \"-e\",\n        \"GITLAB_API_URL\",\n        \"mcp/gitlab\"\n      ],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\" // Optional, for self-hosted instances\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zed with PIP Installation\nDESCRIPTION: JSON configuration for setting up the Git MCP server with Zed editor using PIP installation.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/git/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"context_servers\": {\n  \"mcp-server-git\": {\n    \"command\": {\n      \"path\": \"python\",\n      \"args\": [\"-m\", \"mcp_server_git\"]\n    }\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps MCP Server with NPX in claude_desktop_config.json\nDESCRIPTION: JSON configuration for setting up the Google Maps MCP server using NPX in Claude Desktop. Specifies the NPX command to run the server package with the necessary API key environment variable.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/google-maps/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"google-maps\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-google-maps\"\n      ],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"<YOUR_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Configuration for Redis MCP Server using NPX\nDESCRIPTION: JSON configuration for integrating the Redis MCP server with Claude Desktop using NPX to run the server package directly.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/redis/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"redis\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-redis\",\n        \"redis://localhost:6379\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Claude.app Configuration using uvx\nDESCRIPTION: JSON configuration for setting up the fetch server in Claude.app using uvx.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/fetch/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"fetch\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-fetch\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop with Docker\nDESCRIPTION: JSON configuration for setting up the Git MCP server with Claude Desktop using Docker.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/git/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"--rm\", \"-i\", \"--mount\", \"type=bind,src=/Users/username,dst=/Users/username\", \"mcp/git\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Claude.app Configuration using pip installation\nDESCRIPTION: JSON configuration for setting up the fetch server in Claude.app using a Python module after pip installation.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/fetch/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"fetch\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_fetch\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop with SQLite MCP Server using uv\nDESCRIPTION: Configuration snippet for adding the SQLite MCP server to Claude Desktop using uv (Python package manager). This configuration specifies the command and arguments needed to run the server with a test database path.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sqlite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add the server to your claude_desktop_config.json\n\"mcpServers\": {\n  \"sqlite\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"parent_of_servers_repo/servers/src/sqlite\",\n      \"run\",\n      \"mcp-server-sqlite\",\n      \"--db-path\",\n      \"~/test.db\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Zed Configuration with UVX\nDESCRIPTION: JSON configuration for using mcp-server-sentry with Zed editor using uvx.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sentry/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"context_servers\": [\n  \"mcp-server-sentry\": {\n    \"command\": {\n      \"path\": \"uvx\",\n      \"args\": [\"mcp-server-sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n    }\n  }\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequential Thinking MCP Server with Docker\nDESCRIPTION: JSON configuration for adding the Sequential Thinking server to Claude Desktop using Docker. This configuration should be added to the claude_desktop_config.json file.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sequentialthinking/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"sequentialthinking\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"mcp/sequentialthinking\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Zed Configuration with PIP Installation\nDESCRIPTION: JSON configuration for using mcp-server-sentry with Zed editor using pip installation.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sentry/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"context_servers\": {\n  \"mcp-server-sentry\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: NPX Configuration with Custom Settings for Claude Desktop\nDESCRIPTION: JSON configuration with custom environment variables for the memory server. Allows setting a custom path for the memory storage file.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/memory/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-memory\"\n      ],\n      \"env\": {\n        \"MEMORY_FILE_PATH\": \"/path/to/custom/memory.json\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running MCP Server Sentry After PIP Installation\nDESCRIPTION: Command to run the installed mcp-server-sentry as a Python module.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sentry/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m mcp_server_sentry\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Configuration with UVX\nDESCRIPTION: JSON configuration for using mcp-server-sentry with Claude Desktop using the uvx command.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sentry/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"sentry\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EverArt MCP Server\nDESCRIPTION: Basic installation steps using npm and setting up the API key environment variable\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/everart/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nexport EVERART_API_KEY=your_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Git with PIP\nDESCRIPTION: Commands for installing and running the MCP server git using pip package manager.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/git/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mcp-server-git\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m mcp_server_git\n```\n\n----------------------------------------\n\nTITLE: Testing SQLite MCP Server with MCP Inspector\nDESCRIPTION: Commands for testing the SQLite MCP server using the MCP inspector tool. This adds the MCP CLI package using uv and then runs the server in development mode.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sqlite/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv add \"mcp[cli]\"\nmcp dev src/mcp_server_sqlite/server.py:wrapper  \n```\n\n----------------------------------------\n\nTITLE: Configuring Slack MCP Server with npx in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Slack MCP Server using npx in claude_desktop_config.json. Includes environment variables for the Slack bot token, team ID, and optional channel IDs.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/slack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"slack\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-slack\"\n      ],\n      \"env\": {\n        \"SLACK_BOT_TOKEN\": \"xoxb-your-bot-token\",\n        \"SLACK_TEAM_ID\": \"T01234567\",\n        \"SLACK_CHANNEL_IDS\": \"C01234567, C76543210\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Configuration for Redis MCP Server using Docker\nDESCRIPTION: JSON configuration for integrating the Redis MCP server with Claude Desktop using Docker. Includes configuration for connecting to a Redis instance with options for host address specification.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/redis/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"redis\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \n        \"-i\", \n        \"--rm\", \n        \"mcp/redis\", \n        \"redis://host.docker.internal:6379\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Brave Search MCP Server Docker Image\nDESCRIPTION: Bash command for building the Brave Search MCP server Docker image. Creates a Docker image tagged as mcp/brave-search:latest using the Dockerfile in the src/brave-search directory.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/brave-search/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/brave-search:latest -f src/brave-search/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop with UVX\nDESCRIPTION: JSON configuration for setting up the Git MCP server with Claude Desktop using UVX.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/git/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Slack MCP Server\nDESCRIPTION: Bash command for building a Docker image for the Slack MCP Server. The image is tagged as mcp/slack and uses the Dockerfile located in the src/slack directory.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/slack/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/slack -f src/slack/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration for Claude Desktop\nDESCRIPTION: JSON configuration for setting up the EverArt server using Docker in Claude Desktop\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/everart/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"everart\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"-e\", \"EVERART_API_KEY\", \"mcp/everart\"],\n      \"env\": {\n        \"EVERART_API_KEY\": \"your_key_here\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building GitLab MCP Docker Image\nDESCRIPTION: Docker build command for creating the GitLab MCP server image locally.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/gitlab/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t vonwig/gitlab:mcp -f src/gitlab/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Claude.app Configuration using docker\nDESCRIPTION: JSON configuration for setting up the fetch server in Claude.app using Docker.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/fetch/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"fetch\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/fetch\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Filesystem MCP Server\nDESCRIPTION: Bash command to build a Docker image for the Filesystem MCP Server. It uses the Dockerfile located in the src/filesystem directory and tags the image as mcp/filesystem.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/filesystem/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/filesystem -f src/filesystem/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Configuring Zed with UVX\nDESCRIPTION: JSON configuration for setting up the Git MCP server with Zed editor using UVX.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/git/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"context_servers\": [\n  \"mcp-server-git\": {\n    \"command\": {\n      \"path\": \"uvx\",\n      \"args\": [\"mcp-server-git\"]\n    }\n  }\n],\n```\n\n----------------------------------------\n\nTITLE: Building PostgreSQL MCP Server Docker Image\nDESCRIPTION: Shell command for building a Docker image of the PostgreSQL MCP server. This creates a container image tagged as mcp/postgres using the specified Dockerfile.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/postgres/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t mcp/postgres -f src/postgres/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: NPX Configuration for Claude Desktop\nDESCRIPTION: JSON configuration for setting up the EverArt server using NPX in Claude Desktop\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/everart/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"everart\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-everart\"],\n      \"env\": {\n        \"EVERART_API_KEY\": \"your_key_here\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Redis MCP Server Docker Image\nDESCRIPTION: Shell command for building the Docker image for the Redis Model Context Protocol server. The image is tagged as mcp/redis.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/redis/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t mcp/redis -f src/redis/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Configuration with Docker\nDESCRIPTION: JSON configuration for using mcp-server-sentry with Claude Desktop using Docker.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sentry/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"sentry\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command\nDESCRIPTION: Shell command for building the Docker image for the EverArt server\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/everart/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t mcp/everart -f src/everart/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop with PIP Installation\nDESCRIPTION: JSON configuration for setting up the Git MCP server with Claude Desktop using PIP installation.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/git/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_git\", \"--repository\", \"path/to/git/repo\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NPX Configuration for Claude Desktop\nDESCRIPTION: JSON configuration to add the memory server to claude_desktop_config.json using NPX. This runs the memory server package directly without Docker.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/memory/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-memory\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop with SQLite MCP Server using Docker\nDESCRIPTION: Configuration snippet for adding the SQLite MCP server to Claude Desktop using Docker. This setup mounts a volume for persistent storage and specifies the database path within the container.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sqlite/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n# Add the server to your claude_desktop_config.json\n\"mcpServers\": {\n  \"sqlite\": {\n    \"command\": \"docker\",\n    \"args\": [\n      \"run\",\n      \"--rm\",\n      \"-i\",\n      \"-v\",\n      \"mcp-test:/mcp\",\n      \"mcp/sqlite\",\n      \"--db-path\",\n      \"/mcp/test.db\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Brave Search MCP Server with NPX for Claude Desktop\nDESCRIPTION: JSON configuration for integrating the Brave Search MCP server with Claude Desktop using NPX. Installs and runs the server package directly, requiring your Brave API key as an environment variable.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/brave-search/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"brave-search\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-brave-search\"\n      ],\n      \"env\": {\n        \"BRAVE_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-Based Google Drive Server in MCP App\nDESCRIPTION: JSON configuration for integrating the Docker-based Google Drive MCP server with a desktop application. This configuration defines how the application should launch the server using Docker with the previously authenticated credentials.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/gdrive/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"gdrive\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"-v\", \"mcp-gdrive:/gdrive-server\", \"-e\", \"GDRIVE_CREDENTIALS_PATH=/gdrive-server/credentials.json\", \"mcp/gdrive\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building AWS KB Retrieval Server Docker Image\nDESCRIPTION: Shell command for building a Docker image for the AWS Knowledge Base Retrieval server. Tags the image as 'mcp/aws-kb-retrieval' using the Dockerfile in the src/aws-kb-retrieval-server directory.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/aws-kb-retrieval-server/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t mcp/aws-kb-retrieval -f src/aws-kb-retrieval-server/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: Commands for building the Docker image for the MCP Git server.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/git/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd src/git\ndocker build -t mcp/git .\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Configuration with PIP Installation\nDESCRIPTION: JSON configuration for using mcp-server-sentry with Claude Desktop using pip installation.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sentry/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"mcpServers\": {\n  \"sentry\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Container for GitHub MCP Server\nDESCRIPTION: Docker build command for creating the GitHub MCP server container image.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/github/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/github -f src/github/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Debugging MCP Fetch Server with Inspector (uvx installation)\nDESCRIPTION: Command to debug the MCP Fetch Server using the inspector tool for uvx installations.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/fetch/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector uvx mcp-server-fetch\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack MCP Server with Docker in Claude Desktop\nDESCRIPTION: JSON configuration for setting up the Slack MCP Server using Docker in claude_desktop_config.json. Includes environment variables for the Slack bot token, team ID, and optional channel IDs.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/slack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"slack\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"SLACK_BOT_TOKEN\",\n        \"-e\",\n        \"SLACK_TEAM_ID\",\n        \"-e\",\n        \"SLACK_CHANNEL_IDS\",\n        \"mcp/slack\"\n      ],\n      \"env\": {\n        \"SLACK_BOT_TOKEN\": \"xoxb-your-bot-token\",\n        \"SLACK_TEAM_ID\": \"T01234567\",\n        \"SLACK_CHANNEL_IDS\": \"C01234567, C76543210\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Fetch Server using pip\nDESCRIPTION: Command to install the MCP Fetch Server using Python's pip package manager.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/fetch/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mcp-server-fetch\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Memory Server\nDESCRIPTION: Shell command to build a Docker image for the memory server. Creates an image named mcp/memory using the Dockerfile in the src/memory directory.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/memory/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t mcp/memory -f src/memory/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building Puppeteer Docker Container\nDESCRIPTION: Bash command for building the Puppeteer server Docker container. This creates a containerized version of the server with tag mcp/puppeteer.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/puppeteer/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/puppeteer -f src/puppeteer/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building Sequential Thinking MCP Server Docker Image\nDESCRIPTION: Bash command for building a Docker image of the Sequential Thinking MCP server. This creates a container image tagged as mcp/sequentialthinking using the specified Dockerfile.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sequentialthinking/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/sequentialthinking -f src/sequentialthinking/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Sentry via PIP\nDESCRIPTION: Command to install the mcp-server-sentry package using pip package manager.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sentry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mcp-server-sentry\n```\n\n----------------------------------------\n\nTITLE: Building Google Maps MCP Server Docker Image\nDESCRIPTION: Bash command for building a Docker image for the Google Maps MCP server. Tags the image as 'mcp/google-maps' using the Dockerfile located in the src/google-maps directory.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/google-maps/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/google-maps -f src/google-maps/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building SQLite MCP Server Docker Image\nDESCRIPTION: Command for building the Docker image for the SQLite MCP server. This creates an image tagged as 'mcp/sqlite' that can be referenced in the Docker configuration.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sqlite/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t mcp/sqlite .\n```\n\n----------------------------------------\n\nTITLE: UVX Development Configuration\nDESCRIPTION: JSON configuration for development setup using UVX for testing changes.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/git/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"uv\",\n    \"args\": [ \n      \"--directory\",\n      \"/<path to mcp-servers>/mcp-servers/src/git\",\n      \"run\",\n      \"mcp-server-git\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Development Configuration\nDESCRIPTION: JSON configuration for development setup using Docker with mounted volumes for testing changes.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/git/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"git\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"--mount\", \"type=bind,src=/Users/username/Desktop,dst=/projects/Desktop\",\n        \"--mount\", \"type=bind,src=/path/to/other/allowed/dir,dst=/projects/other/allowed/dir,ro\",\n        \"--mount\", \"type=bind,src=/path/to/file.txt,dst=/projects/path/to/file.txt\",\n        \"mcp/git\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging MCP Server from Local Directory\nDESCRIPTION: Commands to debug the mcp-server-sentry from a local development directory.\nSOURCE: https://github.com/modelcontextprotocol/servers/blob/main/src/sentry/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/servers/src/sentry\nnpx @modelcontextprotocol/inspector uv run mcp-server-sentry --auth-token YOUR_SENTRY_TOKEN\n```"
  }
]