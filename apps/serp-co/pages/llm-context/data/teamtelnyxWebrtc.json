[
  {
    "owner": "team-telnyx",
    "repo": "webrtc",
    "content": "TITLE: Initializing and Connecting TelnyxRTC Client\nDESCRIPTION: Code for initializing the TelnyxRTC client with authentication credentials and establishing a connection. Shows both JWT authentication and username/password options.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the client\nconst client = new TelnyxRTC({\n  /* Use a JWT to authenticate (recommended) */\n  login_token: login_token,\n  /* or use your Connection credentials */\n  // login: username,\n  // password: password,\n});\n\n// Connect and login\nclient.connect();\n\n// You can call client.disconnect() when you're done.\n// Note: When you call `client.disconnect()` you need to remove all ON event methods you've had attached before.\n\n// Disconnecting and Removing listeners.\n// client.disconnect();\n// client.off('telnyx.ready')\n// client.off('telnyx.notification');\n```\n\n----------------------------------------\n\nTITLE: Initiating a Video Call with TelnyxRTC\nDESCRIPTION: Example code for creating a new outgoing video call using the TelnyxRTC client. Shows how to enable video for a call and the corresponding HTML needed.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst videoCall = client.newCall({\n  destinationNumber: 'sip:example@sip.example.com',\n  video: true,\n});\n\n// And in your HTML, replace the audio element with video.\n//  <video id=\"remoteMedia\" autoplay=\"true\" playsinline=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a New Call with Telnyx WebRTC Client\nDESCRIPTION: Demonstrates how to create a new outgoing call using the client.newCall method, specifying destination and caller numbers.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst call = client.newCall({\n  // Destination is required and can be a phone number or SIP URI\n  destinationNumber: '18004377950',\n  callerNumber: '‬155531234567',\n});\n```\n\n----------------------------------------\n\nTITLE: Answering an Incoming Call with Telnyx WebRTC Client\nDESCRIPTION: Shows how to set up an event listener for incoming calls and answer them when they reach the ringing state.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on('telnyx.notification', (notification) => {\n  const call = notification.call;\n\n  if (notification.type === 'callUpdate' && call.state === 'ringing') {\n    call.answer();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Answering an Incoming Call\nDESCRIPTION: Demonstrates the basic syntax for answering an incoming call using the answer method.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncall.answer()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using TelnyxRTC Client in JavaScript\nDESCRIPTION: Shows how to initialize the TelnyxRTC client, attach event listeners, connect to the Telnyx backend, and disconnect when done. Includes proper cleanup of event listeners.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the client\nconst client = new TelnyxRTC({\n  // Use a JWT to authenticate (recommended)\n  login_token: login_token,\n  // or use your Connection credentials\n  //  login: username,\n  //  password: password,\n});\n\n// Attach event listeners\nclient\n  .on('telnyx.ready', () => console.log('ready to call'))\n  .on('telnyx.notification', (notification) => {\n    console.log('notification:', notification)\n  });\n\n// Connect and login\nclient.connect();\n\n// You can call client.disconnect() when you're done.\nNote: When you call `client.disconnect()` you need to remove all ON event methods you've had attached before.\n\n// Disconnecting and Removing listeners.\nclient.disconnect();\nclient.off('telnyx.ready')\nclient.off('telnyx.notification');\n```\n\n----------------------------------------\n\nTITLE: Handling Telnyx Notifications with Event Listener in JavaScript\nDESCRIPTION: Example showing how to use the TelnyxRTC client's event listener to handle notifications. It demonstrates checking notification types and responding appropriately to callUpdate and userMediaError events.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/interfaces/INotification.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on('telnyx.notification', (notification) => {\n  if (notification.type === 'callUpdate') {\n    console.log(notification.call);\n\n    // Do something with the call and update UI accordingly\n  } else if (notification.type === 'userMediaError') {\n    console.log(notification.error);\n\n    // Handle the error and update UI accordingly\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating TelnyxRTC Client with JWT\nDESCRIPTION: Shows how to authenticate a TelnyxRTC client using a JSON Web Token (JWT), which is the recommended authentication method.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new TelnyxRTC({\n  login_token: login_token,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up TelnyxRTC Event Listeners\nDESCRIPTION: Example of attaching event listeners to the TelnyxRTC client to handle ready state, errors, and notifications. Shows how to capture the active call from notifications.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a variable to track the current call\nlet activeCall;\n\n// Attach event listeners\nclient\n  .on('telnyx.ready', () => console.log('ready to call'))\n  .on('telnyx.error', () => console.log('error'))\n  // Events are fired on both session and call updates\n  // ex: when the session has been established\n  // ex: when there's an incoming call\n  .on('telnyx.notification', (notification) => {\n    if (notification.type === 'callUpdate') {\n      activeCall = notification.call;\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Basic Call Management Functions in Telnyx WebRTC SDK\nDESCRIPTION: Demonstrates common call management functions including hanging up a call, sending DTMF tones, and toggling call states like hold and mute.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Hangup or reject an incoming call\ncall.hangup();\n\n// Send digits and keypresses\ncall.dtmf('1234');\n\n// Call states that can be toggled\ncall.hold();\ncall.muteAudio();\n```\n\n----------------------------------------\n\nTITLE: Initiating an Outgoing Call with TelnyxRTC\nDESCRIPTION: Code to create a new outgoing call using the TelnyxRTC client. Shows how to specify destination and caller numbers.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst call = client.newCall({\n  // Destination is required and can be a phone number or SIP URI\n  destinationNumber: '18004377950',\n  callerNumber: '‬155531234567',\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Call Actions with TelnyxRTC\nDESCRIPTION: Examples of call management methods that can be used to control an active call, including hangup, sending DTMF tones, and toggling call states.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Hangup or reject an incoming call\ncall.hangup();\n\n// Send digits and keypresses\ncall.dtmf('1234');\n\n// Call states that can be toggled\ncall.hold();\ncall.muteAudio();\n```\n\n----------------------------------------\n\nTITLE: Toggling Audio Mute in WebRTC Call (JavaScript)\nDESCRIPTION: Toggles the audio mute state of a call. This method switches between muted and unmuted states with each call.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ncall.toggleAudioMute();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for WebRTC Client Options\nDESCRIPTION: Interface defining the configuration options for initializing a Telnyx WebRTC client. Includes properties for authentication (login/password/token), debugging settings, ICE candidate configuration, region selection, and audio file URLs.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/interfaces/IClientOptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IClientOptions {\n  anonymous_login?: {\n    target_id: string;\n    target_type: string;\n  };\n  debug?: boolean;\n  debugOutput?: \"file\" | \"socket\";\n  forceRelayCandidate?: boolean;\n  login?: string;\n  login_token?: string;\n  password?: string;\n  prefetchIceCandidates?: boolean;\n  region?: string;\n  ringbackFile?: string;\n  ringtoneFile?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Unmuting Audio in WebRTC Call (JavaScript)\nDESCRIPTION: Turns on audio output, making it so other call participants can hear the user's audio.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ncall.unmuteAudio();\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTML Media Element for TelnyxRTC Calls\nDESCRIPTION: Shows how to specify an HTML media element to hear or view calls in the browser, including both the JavaScript setup and corresponding HTML markup.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclient.remoteElement = 'remoteMedia';\n```\n\nLANGUAGE: html\nCODE:\n```\n<audio id=\"remoteMedia\" autoplay=\"true\" />\n<!-- or for video: -->\n<!-- <video id=\"remoteMedia\" autoplay=\"true\" playsinline=\"true\" /> -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Audio Component for Call Streams\nDESCRIPTION: Shows how to use the Audio component to play the remote audio stream from an active call.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Audio } from '@telnyx/react-client';\n\nfunction Phone({ activeCall }) {\n  return (\n    <div>\n      <Audio stream={activeCall.remoteStream} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Answering an Incoming Call with TelnyxRTC\nDESCRIPTION: Code for handling and answering incoming calls by listening to the notification event and checking for a ringing call state.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on('telnyx.notification', (notification) => {\n  const call = notification.call;\n\n  if (notification.type === 'callUpdate' && call.state === 'ringing') {\n    call.answer();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Putting a Call on Hold with Async/Await\nDESCRIPTION: Shows how to put a call on hold using the async/await syntax and then check the call state.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait call.hold()\nconsole.log(call.state) // => 'held'\n```\n\n----------------------------------------\n\nTITLE: React WebRTC Components and Hooks\nDESCRIPTION: Core components and hooks provided in the WebRTC React client including TelnyxRTCContext context provider, useCallbacks and useTelnyxRTC hooks, and Audio/Video media components.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nTelnyxRTCContext\nuseCallbacks\nuseTelnyxRTC\nAudio\nVideo\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote Media Stream in Telnyx WebRTC SDK\nDESCRIPTION: Demonstrates how to access the remote media stream of a call and attach it to an audio HTML element for playback.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst stream = call.remoteStream;\ndocument.querySelector('audio').srcObject = stream;\n```\n\n----------------------------------------\n\nTITLE: Changing Audio Input Device with Async/Await\nDESCRIPTION: Demonstrates how to change the audio input device (microphone) used for a call using async/await syntax.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait call.setAudioInDevice('abc123')\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Media Stream in Telnyx WebRTC SDK\nDESCRIPTION: Shows how to access the local media stream of a call and attach it to an audio HTML element for playback.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst stream = call.localStream;\ndocument.querySelector('audio').srcObject = stream;\n```\n\n----------------------------------------\n\nTITLE: Getting Registration State in TelnyxRTC\nDESCRIPTION: Code snippet showing how to check if a client is registered with the Telnyx server gateway using a Promise-based method.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nclient.getIsRegistered().then(isRegistered => {...})\n```\n\n----------------------------------------\n\nTITLE: Specifying HTML Media Element for WebRTC Audio/Video\nDESCRIPTION: Code to specify the HTML media element that will handle audio/video playback for calls. Shows how to reference an existing element by ID.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclient.remoteElement = 'remoteMedia';\n```\n\n----------------------------------------\n\nTITLE: Unmuting Video in WebRTC Call (JavaScript)\nDESCRIPTION: Turns on the video output, making video visible to other call participants. This method is deprecated but still supported.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ncall.unmuteVideo();\n```\n\n----------------------------------------\n\nTITLE: Checking WebRTC Browser Support\nDESCRIPTION: Static method to check if the current browser supports TelnyxRTC functionality. Returns support information or error message.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = TelnyxRTC.webRTCInfo();\nconst isWebRTCSupported = info.supportWebRTC;\nconsole.log(isWebRTCSupported); // => true\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = TelnyxRTC.webRTCInfo();\nif (!info.supportWebRTC) {\n  console.error(info) // => 'This browser does not support @telnyx/webrtc. To see browser support list: `TelnyxRTC.webRTCSupportedBrowserList()'\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Media Elements for WebRTC Audio/Video\nDESCRIPTION: HTML code examples for creating the audio or video elements needed to play remote media for WebRTC calls.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<audio id=\"remoteMedia\" autoplay=\"true\" />\n<!-- or for video: -->\n<!-- <video id=\"remoteMedia\" autoplay=\"true\" playsinline=\"true\" /> -->\n```\n\n----------------------------------------\n\nTITLE: Running Pre-Call Diagnosis with TelnyxRTC\nDESCRIPTION: Code to perform pre-call diagnosis to check connectivity and call quality before initiating a call, using credentials and a test application number.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PreCallDiagnosis } from '@telnyx/webrtc';\n\nPreCallDiagnosis.run({\n  credentials: {\n    login: clientOptions.login,\n    password: clientOptions.password,\n    loginToken: clientOptions.login_token,\n  },\n  texMLApplicationNumber: '+1-240-775-8982',\n})\n  .then((report) => {\n    console.log(report);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Making a Call to Another Telnyx Connection with TelnyxRTC\nDESCRIPTION: Demonstrates how to create a call to another Telnyx connection using just the SIP username.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst call = client.newCall({\n destinationNumber: 'telnyx-sip-username' // This is equivalent to 'sip:telnyx-sip-username@sip.telnyx.com'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Settings in TelnyxRTC\nDESCRIPTION: Sets microphone settings including device ID, label and audio constraints like echo cancellation. Handles Safari device ID persistence issues by matching both ID and label.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst constraints = await client.setAudioSettings({\n micId: '772e94959e12e589b1cc71133d32edf543d3315cfd1d0a4076a60601d4ff4df8',\n micLabel: 'Internal Microphone (Built-in)',\n echoCancellation: false\n})\n```\n\n----------------------------------------\n\nTITLE: Monitoring In-Call Quality Metrics with TelnyxRTC\nDESCRIPTION: Example of enabling and accessing in-call quality metrics by enabling debugging and listening for the stats frame event.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst call = client.newCall({\n  // Destination is required and can be a phone number or SIP URI\n  destinationNumber: '18004377950',\n  debug: true, // it is required to enable debugging for the call,\n});\n\nclient.on('telnyx.stats.frame', (stats) => {\n  console.log(stats);\n});\n```\n\n----------------------------------------\n\nTITLE: Muting Local Audio in a Call\nDESCRIPTION: Shows how to mute the local audio output so that other call participants cannot hear your audio.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncall.muteAudio();\n```\n\n----------------------------------------\n\nTITLE: Running Pre-Call Diagnosis in WebRTC\nDESCRIPTION: Static method that executes the pre-call diagnosis and returns a promise resolving with a diagnostic report. Takes PreCallDiagnosisOptions as input parameter.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/PreCallDiagnosis.md#2025-04-17_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ `Static` **run**(`options`): `Promise`\\<[`Report`](/docs/voice/webrtc/js-sdk/interfaces/Report.md)\\>\n```\n\n----------------------------------------\n\nTITLE: Enabling ICE Candidate Prefetching in TelnyxRTC Call\nDESCRIPTION: Shows how to enable ICE candidate prefetching when making a new call with TelnyxRTC.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nclient.newCall({\n destinationNumber: 'xxx',\n prefetchIceCandidates: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple TelnyxRTC Events\nDESCRIPTION: Shows how to subscribe to multiple events with the TelnyxRTC client using method chaining.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new TelnyxRTC(options);\n\nclient.on('telnyx.ready', (client) => {\n  // Your client is ready!\n}).on('telnyx.error', (error) => {\n  // Got an error...\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Deaf Mode in WebRTC Call (JavaScript)\nDESCRIPTION: Toggles the remote stream audio, allowing the user to switch between hearing and not hearing the remote participant.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ncall.toggleDeaf()\n```\n\n----------------------------------------\n\nTITLE: Changing Audio Output Device Using Device List\nDESCRIPTION: Shows how to get a list of available audio output devices and then select one to use for the current call.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = await client.getAudioOutDevices();\n\nif (result.length) {\n  await call.setAudioOutDevice(result[1].deviceId);\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Video Mute in WebRTC Call (JavaScript)\nDESCRIPTION: Toggles the video output on/off. This method is deprecated but still supported.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ncall.toggleVideoMute();\n```\n\n----------------------------------------\n\nTITLE: Changing Audio Input Device with Promises\nDESCRIPTION: Shows how to change the audio input device (microphone) used for a call using ES6 Promises.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncall.setAudioInDevice('abc123').then(() => {\n  // Do something using new audio input device\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Telnyx Call IDs for Call Control Integration\nDESCRIPTION: Shows how to access Telnyx call identifiers which can be used to identify specific calls in application code when using Telnyx Call Control services.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { telnyxCallControlId, telnyxSessionId, telnyxLegId } = call.telnyxIDs;\n```\n\n----------------------------------------\n\nTITLE: Telnyx userMediaError Notification Structure in JavaScript\nDESCRIPTION: Data structure for the userMediaError notification type which is dispatched when the browser lacks permission to access media devices. It contains the error object with details about the error.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/interfaces/INotification.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: 'userMediaError',\n  error: Error\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Audio Input Devices with TelnyxRTC using Async/Await\nDESCRIPTION: Demonstrates how to get audio input devices using async/await syntax with the TelnyxRTC client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function() {\n  const client = new TelnyxRTC(options);\n\n  let result = await client.getAudioInDevices();\n\n  console.log(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing and Unsubscribing to TelnyxRTC Events\nDESCRIPTION: Demonstrates how to subscribe to events and later unsubscribe from them using the TelnyxRTC client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst errorHandler = (error) => {\n // Log the error..\n}\n\nconst client = new TelnyxRTC(options);\n\nclient.on('telnyx.error', errorHandler)\n\n // .. later\nclient.off('telnyx.error', errorHandler)\n```\n\n----------------------------------------\n\nTITLE: Getting Audio Output Devices with TelnyxRTC using Async/Await\nDESCRIPTION: Demonstrates how to get audio output devices using async/await syntax with the TelnyxRTC client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nasync function() {\n  const client = new TelnyxRTC(options);\n\n  let result = await client.getAudioOutDevices();\n\n  console.log(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ICallOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the configuration options for WebRTC calls, including media settings, caller identification, ICE servers, and call control parameters.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/interfaces/ICallOptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ICallOptions {\n  audio?: boolean;\n  callerName?: string;\n  callerNumber?: string;\n  camId?: string;\n  clientState?: string;\n  customHeaders?: { name: string; value: string; }[];\n  debug?: boolean;\n  debugOutput?: \"file\" | \"socket\";\n  destinationNumber?: string;\n  forceRelayCandidate?: boolean;\n  iceServers?: RTCIceServer[];\n  id?: string;\n  localElement?: string | HTMLMediaElement;\n  localStream?: MediaStream;\n  mediaSettings?: {\n    sdpASBandwidthKbps?: number;\n    useSdpASBandwidthKbps?: boolean;\n  };\n  micId?: string;\n  onNotification?: Function;\n  preferred_codecs?: RTCRtpCodecCapability[];\n  prefetchIceCandidates?: boolean;\n  remoteElement?: string | HTMLMediaElement;\n  remoteStream?: MediaStream;\n  speakerId?: string;\n  telnyxCallControlId?: string;\n  telnyxLegId?: string;\n  telnyxSessionId?: string;\n  useStereo?: boolean;\n  video?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Putting a Call on Hold with Promises\nDESCRIPTION: Demonstrates how to put a call on hold using ES6 Promises and then check the call state in the resolution handler.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncall.hold().then(() => {\n  console.log(call.state) // => 'held'\n});\n```\n\n----------------------------------------\n\nTITLE: Anonymous Login for AI Assistant with TelnyxRTC\nDESCRIPTION: Example of authenticating the TelnyxRTC client for use with an AI assistant without requiring a SIP connection, using anonymous login with target ID and type.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new TelnyxRTC({\n  anonymous_login: {\n    target_id: 'YOUR_TARGET_ID',\n    target_type: 'ai_assistant',\n  },\n});\n\nclient.connect();\n```\n\n----------------------------------------\n\nTITLE: Removing Hold from WebRTC Call with Async/Await (JavaScript)\nDESCRIPTION: Removes the hold state from a call using async/await pattern, returning the call to an active state. Returns a Promise that resolves or rejects based on server response.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nawait call.unhold()\nconsole.log(call.state) // => 'active'\n```\n\n----------------------------------------\n\nTITLE: Toggling Hold State in WebRTC Call with Async/Await (JavaScript)\nDESCRIPTION: Toggles the hold state of a call using async/await pattern. This method returns a Promise that resolves or rejects based on the server response.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nawait call.toggleHold()\nconsole.log(call.state) // => 'held'\n\nawait call.toggleHold()\nconsole.log(call.state) // => 'active'\n```\n\n----------------------------------------\n\nTITLE: Removing Hold from WebRTC Call with Promises (JavaScript)\nDESCRIPTION: Removes the hold state from a call using ES6 Promises, returning the call to an active state.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ncall.unhold().then(() => {\n  console.log(call.state) // => 'active'\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating TelnyxRTC Client with Username and Password\nDESCRIPTION: Shows how to authenticate a TelnyxRTC client using username and password credentials instead of JWT.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new TelnyxRTC({\n  login: username,\n  password: password,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers in TelnyxRTC Call\nDESCRIPTION: Shows how to set custom headers when making a new call with TelnyxRTC.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nclient.newCall({\n destinationNumber: '18004377950',\n\n callerNumber: '155531234567',\n\n customHeaders: [ {name: \"X-Header\", value: \"value\" } ] \n});\n```\n\n----------------------------------------\n\nTITLE: Sending DTMF Tones in a Call\nDESCRIPTION: Demonstrates how to send dual-tone multi-frequency (DTMF) signals during a call, useful for interactive voice response systems.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncall.dtmf('0');\ncall.dtmf('1');\ncall.dtmf('*');\ncall.dtmf('#');\n```\n\n----------------------------------------\n\nTITLE: Making Calls with AI Assistant in TelnyxRTC\nDESCRIPTION: Code for initiating a call using the AI assistant functionality, including finding and setting the Opus codec as the preferred codec for optimal audio quality.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getOpusCodec() {\n  const allCodecs = RTCRtpReceiver.getCapabilities('audio').codecs;\n  const codec = allCodecs.find((codec) => codec.mimeType === 'audio/opus');\n  return codec;\n}\n\nconst call = client.newCall({\n  destinationNumber: '',\n  remoteElement: 'remoteElement',\n  preferred_codecs: [getOpusCodec()],\n});\n```\n\n----------------------------------------\n\nTITLE: Muting Remote Audio with Deaf Function\nDESCRIPTION: Shows how to use the deaf function to turn off the remote stream audio in a call.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncall.deaf()\n```\n\n----------------------------------------\n\nTITLE: Changing Audio Output Device with Async/Await\nDESCRIPTION: Shows how to change the audio output device (speaker) used for a call using async/await syntax.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait call.setAudioOutDevice('abc123')\n```\n\n----------------------------------------\n\nTITLE: Undeafening a WebRTC Call (JavaScript)\nDESCRIPTION: Turns on the remote stream audio, allowing the user to hear the remote participant.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ncall.undeaf()\n```\n\n----------------------------------------\n\nTITLE: Getting All Media Devices with TelnyxRTC using Async/Await\nDESCRIPTION: Demonstrates how to retrieve all media devices using async/await with the TelnyxRTC client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nasync function() {\n  const client = new TelnyxRTC(options);\n  let result = await client.getDevices();\n  console.log(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Codec for TelnyxRTC Calls\nDESCRIPTION: Example of setting preferred audio codecs for a call by retrieving available codecs and specifying preferences when creating a new call.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst allCodecs = RTCRtpReceiver.getCapabilities('audio').codecs;\n\nconst PCMACodec = allCodecs.find((c) =>\n  c.mimeType.toLowerCase().includes('pcma')\n);\n\nclient.newCall({\n  destinationNumber: '123',\n  preferred_codecs: [PCMACodec],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Notification Hook and Audio Component\nDESCRIPTION: Example of a Phone component that uses the useNotification hook to detect incoming calls and the Audio component to play the remote audio stream.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Phone.jsx\nimport { useNotification, Audio } from '@telnyx/react-client';\n\nfunction Phone() {\n  const notification = useNotification();\n  const activeCall = notification && notification.call;\n\n  return (\n    <div>\n      {activeCall &&\n        activeCall.state === 'ringing' &&\n        'You have an incoming call.'}\n\n      <Audio stream={activeCall && activeCall.remoteStream} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Codec in TelnyxRTC Call\nDESCRIPTION: Demonstrates how to set a preferred codec when making a new call with TelnyxRTC.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst allCodecs = RTCRtpReceiver.getCapabilities('audio').codecs;\n\nconst PCMACodec = allCodecs.find((c) => c.mimeType.toLowerCase().includes('pcma'));\n\nclient.newCall({\n destinationNumber: 'xxx',\n preferred_codecs: [PCMACodec],\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Audio Input Device Using Device List\nDESCRIPTION: Demonstrates how to get a list of available audio input devices and then select one to use for the current call.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = await client.getAudioInDevices();\n\nif (result.length) {\n  call.setAudioInDevice(result[1].deviceId);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PreCallDiagnosisOptions Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for pre-call diagnosis options. It includes a credentials object for authentication (with optional login, password, and loginToken properties) and a texMLApplicationNumber string for the TexML service.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/interfaces/PreCallDiagnosisOptions.md#2025-04-17_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface PreCallDiagnosisOptions {\n  credentials: {\n    login?: string;\n    password?: string;\n    loginToken?: string;\n  };\n  texMLApplicationNumber: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Basic Outbound Call with TelnyxRTC\nDESCRIPTION: Demonstrates how to create a new outbound call to a phone number with TelnyxRTC.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst call = client.newCall({\n  destinationNumber: '+18564440362',\n  callerNumber: '+15551231234'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Settings in TelnyxRTC\nDESCRIPTION: Sets webcam settings including device ID, label and video constraints like resolution. Handles Safari device ID persistence issues by matching both ID and label.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst constraints = await client.setVideoSettings({\n camId: '882e94959e12e589b1cc71133d32edf543d3315cfd1d0a4076a60601d4ff4df8',\n camLabel: 'Default WebCam (Built-in)',\n width: 1080,\n height: 720\n})\n```\n\n----------------------------------------\n\nTITLE: Making an Outbound Call to a SIP Address with TelnyxRTC\nDESCRIPTION: Shows how to create a new outbound call to a SIP address without specifying a caller number.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst call = client.newCall({\n destinationNumber: 'sip:example-sip-username@voip-provider.example.net'\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Audio Output Device with Promises\nDESCRIPTION: Demonstrates how to change the audio output device (speaker) used for a call using ES6 Promises.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncall.setAudioOutDevice('abc123').then(() => {\n  // Do something using new audio output device\n});\n```\n\n----------------------------------------\n\nTITLE: Getting All Media Devices with TelnyxRTC using Promises\nDESCRIPTION: Shows how to retrieve all media devices using Promises with the TelnyxRTC client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclient.getDevices().then((result) => {\n  console.log(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing TelnyxRTC Client via React's useContext Hook\nDESCRIPTION: Shows how to access the TelnyxRTC client using React's useContext hook with the TelnyxRTCContext from the library.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { TelnyxRTCContext } from '@telnyx/react-client';\n\nfunction Phone() {\n  const client = useContext(TelnyxRTCContext);\n\n  client.on('telnyx.ready', () => {\n    console.log('client ready');\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Microphone in TelnyxRTC\nDESCRIPTION: Shows how to enable the microphone for subsequent calls in a TelnyxRTC client instance.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new TelnyxRTC(options);\n\nclient.enableMicrophone();\n```\n\n----------------------------------------\n\nTITLE: Getting Audio Output Devices with TelnyxRTC using Promises\nDESCRIPTION: Shows how to retrieve audio output devices using ES6 Promises with the TelnyxRTC client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclient.getAudioOutDevices().then((result) => {\n  console.log(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from TelnyxRTC in JavaScript\nDESCRIPTION: Demonstrates how to disconnect all active calls in a TelnyxRTC client instance.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new TelnyxRTC(options);\n\nclient.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Ringtones with TelnyxRTC\nDESCRIPTION: Example of initializing the TelnyxRTC client with custom ringtone and ringback files for call audio. Files can be local or served via CDN.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new TelnyxRTC({\n  login_token: login_token,\n  ringtoneFile: './sounds/incoming_call.mp3',\n  ringbackFile: './sounds/ringback_tone.mp3',\n});\n```\n\n----------------------------------------\n\nTITLE: Getting WebRTC Browser Support List\nDESCRIPTION: Static method that returns list of browsers and operating systems supported by TelnyxRTC, including audio/video feature support details.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst browserList = TelnyxRTC.webRTCSupportedBrowserList();\nconsole.log(browserList) // => [{\"operationSystem\": \"Android\", \"supported\": [{\"browserName\": \"Chrome\", \"features\": [\"video\", \"audio\"], \"supported\": \"full\"},{...}]\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Components for Video Conferencing\nDESCRIPTION: Example of using the Video component for video conferencing, displaying both local and remote video streams with appropriate muting.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Video } from '@telnyx/react-client';\n\nfunction VideoConference({ activeCall }) {\n  return (\n    <div>\n      <Video stream={activeCall.localStream} muted />\n      <Video stream={activeCall.remoteStream} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TelnyxRTCProvider with Credentials and Options\nDESCRIPTION: Shows how to set up TelnyxRTCProvider with both credential options (either login token or username/password) and additional configuration like custom ringtone files.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TelnyxRTCProvider } from '@telnyx/react-client';\n\nfunction App() {\n  const credential = {\n    // You can either use your On-Demand Credential token\n    // or your Telnyx SIP username and password\n    // login_token: 'mytoken',\n    login: 'myusername',\n    password: 'mypassword',\n  };\n\n  const options = {\n    ringtoneFile: 'https://example.com/sounds/incoming_call.mp3',\n    ringbackFile: 'https://example.com/sounds/ringback_tone.mp3',\n  };\n\n  return (\n    <TelnyxRTCProvider credential={credential} options={options}>\n      <Phone />\n    </TelnyxRTCProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TelnyxRTCProvider in React Application\nDESCRIPTION: Sets up the TelnyxRTCProvider at the root level of a React application. This example shows how to provide login credentials to the Telnyx client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// App.jsx\nimport { TelnyxRTCProvider } from '@telnyx/react-client';\n\nfunction App() {\n  const credential = {\n    login_token: 'mytoken',\n  };\n\n  return (\n    <TelnyxRTCProvider credential={credential}>\n      <Phone />\n    </TelnyxRTCProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Callbacks with useCallbacks Hook\nDESCRIPTION: Shows how to use the useCallbacks hook to register event handlers for various client events such as ready, error, socket events, and notifications.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallbacks } from '@telnyx/react-client';\n\nfunction Phone() {\n  useCallbacks({\n    onReady: () => console.log('client ready'),\n    onError: () => console.log('client registration error'),\n    onSocketError: () => console.log('client socket error'),\n    onSocketClose: () => console.log('client disconnected'),\n    onNotification: (x) => console.log('received notification:', x),\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Telnyx WebRTC Package with NPM\nDESCRIPTION: Command to install the @telnyx/webrtc package using npm. This adds the package to your project dependencies.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @telnyx/webrtc --save\n```\n\n----------------------------------------\n\nTITLE: Accessing TelnyxRTC Client Directly with useTelnyxRTC Hook\nDESCRIPTION: Demonstrates how to use the useTelnyxRTC hook for direct access to the TelnyxRTC client instance, allowing manual event handling.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTelnyxRTC } from '@telnyx/react-client';\n\nfunction Phone() {\n  const client = useTelnyxRTC({ login_token: 'mytoken' });\n\n  client.on('telnyx.ready', () => {\n    console.log('client ready');\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Audio Input Devices with TelnyxRTC using Promises\nDESCRIPTION: Shows how to retrieve audio input devices using ES6 Promises with the TelnyxRTC client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclient.getAudioInDevices().then((result) => {\n  console.log(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Using TelnyxRTCContext.Consumer Component Pattern\nDESCRIPTION: Demonstrates how to access the TelnyxRTC client using the render props pattern with TelnyxRTCContext.Consumer.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TelnyxRTCContext } from '@telnyx/react-client';\n\nfunction PhoneWrapper() {\n  return (\n    <TelnyxRTCContext.Consumer>\n      {(context) => <Phone client={context} />}\n    </TelnyxRTCContext.Consumer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Webcam in TelnyxRTC (Deprecated)\nDESCRIPTION: Demonstrates how to enable the webcam for subsequent calls in a TelnyxRTC client instance. This method is marked as deprecated.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new TelnyxRTC(options);\n\nclient.enableWebcam();\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in TelnyxRTCProvider\nDESCRIPTION: Shows how to enable debugging in the TelnyxRTCProvider to help diagnose client-side issues. The debug flag is set in the provider options.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<TelnyxRTCProvider credential={credential} options={{ debug: true }}>\n  // Your app goes here\n</TelnyxRTCProvider>\n```\n\n----------------------------------------\n\nTITLE: Changing Video Device with Promises\nDESCRIPTION: Shows how to change the video device (webcam) used for a call using ES6 Promises. This method is deprecated.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ncall.setVideoDevice('abc123').then(() => {\n  // Do something using new video device\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Call Debugging in TelnyxRTC\nDESCRIPTION: Code for enabling debugging on a call to gather WebRTC metrics, showing options for debug output direction (socket or file).\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst call = client.newCall({\n  // Destination is required and can be a phone number or SIP URI\n  destinationNumber: '18004377950',\n  callerNumber: '‬155531234567',\n  debug: true // Default is false,\n  debugOutput: 'socket' // Possible values are 'socket' | 'file'\n});\n\n// The debug dump is set to be sent to telnyx by default, if you want to save the debug data to disk\n// You can change the debugOutput option to 'file'\n```\n\n----------------------------------------\n\nTITLE: Getting Device Resolutions with TelnyxRTC using Async/Await (Null DeviceId)\nDESCRIPTION: Demonstrates how to retrieve device resolutions for the default webcam using async/await with the TelnyxRTC client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync function() {\n  const client = new TelnyxRTC(options);\n  let result = await client.getDeviceResolutions();\n  console.log(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Device Resolutions with TelnyxRTC using Async/Await (Specific DeviceId)\nDESCRIPTION: Demonstrates how to retrieve device resolutions for a specific webcam using async/await with the TelnyxRTC client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nasync function() {\n  const client = new TelnyxRTC(options);\n  let result = await client.getDeviceResolutions(deviceId);\n  console.log(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Device Resolutions with TelnyxRTC using Promises (Specific DeviceId)\nDESCRIPTION: Shows how to retrieve device resolutions for a specific webcam using Promises with the TelnyxRTC client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclient.getDeviceResolutions(deviceId).then((result) => {\n  console.log(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Device Resolutions with TelnyxRTC using Promises (Null DeviceId)\nDESCRIPTION: Shows how to retrieve device resolutions for the default webcam using Promises with the TelnyxRTC client.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclient.getDeviceResolutions().then((result) => {\n  console.log(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Video Devices with TelnyxRTC using Promises\nDESCRIPTION: Shows how to retrieve video devices using Promises with the TelnyxRTC client. This method is marked as deprecated.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nclient.getVideoDevices().then((result) => {\n  console.log(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Telnyx callUpdate Notification Structure in JavaScript\nDESCRIPTION: Data structure for the callUpdate notification type which is dispatched when a call changes state. It contains the call object with the current call information.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/interfaces/INotification.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: 'callUpdate',\n  call: Call // current call\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Telnyx React Client and WebRTC packages\nDESCRIPTION: Command to install the required Telnyx packages via npm. This installs both the React client wrapper and the core WebRTC library as dependencies.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @telnyx/react-client @telnyx/webrtc\n```\n\n----------------------------------------\n\nTITLE: Importing TelnyxRTC in JavaScript\nDESCRIPTION: Example of importing the TelnyxRTC class from the @telnyx/webrtc package using ES6 import syntax.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TelnyxRTC } from '@telnyx/webrtc';\n```\n\n----------------------------------------\n\nTITLE: Defining TelnyxIDs Interface in TypeScript\nDESCRIPTION: This interface represents the Telnyx identifiers used in WebRTC communications. It includes three optional properties: telnyxCallControlId for call control identification, telnyxLegId for leg identification, and telnyxSessionId for session identification.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/interfaces/TelnyxIDs.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TelnyxIDs {\n  /**\n   * The Telnyx call control identifier.\n   */\n  telnyxCallControlId?: string;\n\n  /**\n   * The Telnyx leg identifier.\n   */\n  telnyxLegId?: string;\n\n  /**\n   * The Telnyx session identifier.\n   */\n  telnyxSessionId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for Telnyx React Client\nDESCRIPTION: Commands for setting up a development environment for the Telnyx React Client library, including installation, linking, and running the example application.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/react-client/README.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn start\nyarn link\n\n# in another tab:\ngit clone https://github.com/team-telnyx/webrtc-examples/tree/main/react-client/react-app\n\n# fill in .env\nyarn install\nyarn link @telnyx/react-client\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Using @apialias Tag in TypeScript Documentation\nDESCRIPTION: Shows how to use the @apialias tag to display alternative names in public documentation for interfaces or other types.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @apialias PublicObject\n */\ninterface IPublicObject {}\n```\n\n----------------------------------------\n\nTITLE: Changing Video Device with Async/Await\nDESCRIPTION: Demonstrates how to change the video device (webcam) used for a call using async/await syntax. This method is deprecated.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nawait call.setVideoDevice('abc123')\n```\n\n----------------------------------------\n\nTITLE: Defining Report Interface Properties for WebRTC Pre-Call Diagnosis in TypeScript\nDESCRIPTION: This snippet defines the properties of the Report interface, including iceCandidatePairStats, iceCandidateStats, sessionStats, and summaryStats. Each property is typed and includes a description of its purpose and contents.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/interfaces/Report.md#2025-04-17_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Report {\n  iceCandidatePairStats: RTCIceCandidatePairStats;\n  iceCandidateStats: RTCIceCandidateStats[];\n  sessionStats: {\n    bytesReceived: number;\n    bytesSent: number;\n    packetsLost: number;\n    packetsReceived: number;\n    packetsSent: number;\n  };\n  summaryStats: {\n    jitter: MinMaxAverage;\n    mos: number;\n    quality: Quality;\n    rtt: MinMaxAverage;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Video Devices with TelnyxRTC using Async/Await\nDESCRIPTION: Demonstrates how to retrieve video devices using async/await with the TelnyxRTC client. This method is marked as deprecated.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/TelnyxRTC.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nasync function() {\n  const client = new TelnyxRTC(options);\n  let result = await client.getVideoDevices();\n  console.log(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Telnyx IDs in PreCallDiagnosis Class\nDESCRIPTION: Method to retrieve Telnyx identifiers for the pre-call diagnosis. Returns an object that implements the TelnyxIDs interface.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/PreCallDiagnosis.md#2025-04-17_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **getTelnyxIds**(): [`TelnyxIDs`](/docs/voice/webrtc/js-sdk/interfaces/TelnyxIDs.md)\n```\n\n----------------------------------------\n\nTITLE: Changing Video Device Using Device List\nDESCRIPTION: Demonstrates how to get a list of available video devices and then select one to use for the current call. This method is deprecated.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/docs/ts/classes/Call.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = await client.getVideoDevices();\n\nif (result.length) {\n  await call.setVideoDevice(result[1].deviceId);\n}\n```\n\n----------------------------------------\n\nTITLE: Using @internalnote Tag in TSDoc Comments\nDESCRIPTION: Shows how to add internal notes in documentation that should not be rendered in public documentation using the @internalnote tag.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @internalnote {@see InternalUseModule} for implementation\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing TSDoc Comments for Class Documentation in TypeScript\nDESCRIPTION: Demonstrates how to properly document TypeScript classes using TSDoc comments, showing which methods will appear in documentation based on visibility modifiers and comment presence. Includes examples of ignored methods and visibility rules.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// `PublicUseModule` will appear in docs due to the class-level TSDoc comment.\n/**\n * A module for public consumption\n * @category Public Modules\n */\nclass PublicUseModule {\n  // `getSomething` WILL appear in docs because\n  // there is a TSDoc comment\n  /**\n   * Gets something.\n   */\n  getSomething() {}\n  // `getSomethingElse` will NOT appear in docs\n  // because of the `@ignore` tag\n  /**\n   * Adds another thing\n   * @ignore\n   */\n  getSomethingElse() {}\n  // `addAnotherThing` will NOT appear in docs\n  // because there is no TSDoc comment\n  addAnotherThing() {}\n  // `updateSomething` will NOT appear in docs\n  // because of the `private` keyword\n  private updateSomething() {}\n  // `deleteSomething` will NOT appear in docs\n  // because of the `protected` keyword\n  protected deleteSomething() {}\n}\n\n// `InternalUseModule` will NOT appear in docs,\n// even if its members are documented, because\n// there is no class-level TSDoc comment.\nclass InternalUseModule {\n  doThis() {}\n  doThat() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Code Examples in TSDoc Comments\nDESCRIPTION: Demonstrates how to include code examples in documentation using the @examples tag with markdown code blocks.\nSOURCE: https://github.com/team-telnyx/webrtc/blob/main/packages/js/README.md#2025-04-17_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @examples\n * ```js\n * new PublicUseModule(options);\n * ```\n */\n```"
  }
]