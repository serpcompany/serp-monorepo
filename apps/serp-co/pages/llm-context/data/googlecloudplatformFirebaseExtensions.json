[
  {
    "owner": "googlecloudplatform",
    "repo": "firebase-extensions",
    "content": "TITLE: Querying Firebase Embeddings using JavaScript with Firebase Auth and Cloud Functions\nDESCRIPTION: This JavaScript code snippet demonstrates how to query the embeddings extension using a callable Cloud Function. It initializes Firebase, signs in anonymously to Firebase Auth, and calls the extension's query function with a search term.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-vector-search/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {getFunctions, httpsCallable} from 'firebase/functions';\nimport {getAuth, signInAnonymously} from 'firebase/auth';\nimport {initializeApp} from 'firebase/app';\n\nconst firebaseConfig = {\n  apiKey: 'YOUR_API_KEY',\n  authDomain: 'YOUR_AUTH_DOMAIN',\n  projectId: 'YOUR_PROJECT_ID',\n  storageBucket: 'YOUR_STORAGE_BUCKET',\n  messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',\n  appId: 'YOUR_APP_ID',\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Auth\nconst auth = getAuth(app);\n\n// Initialize Firebase Functions with the specified region\nconst functions = getFunctions(app, '${param:LOCATION}');\n\n// Sign in anonymously\nsignInAnonymously(auth)\n  .then(() => {\n    const queryCallable = httpsCallable(\n      functions,\n      'ext-${param:EXT_INSTANCE_ID}-queryCallable'\n    );\n\n    queryCallable({query: 'foo bar'})\n      .then(result => {\n        // Read result\n        console.log(result.data);\n      })\n      .catch(error => {\n        console.error('Error querying function:', error);\n      });\n  })\n  .catch(error => {\n    console.error('Error signing in anonymously:', error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding and Monitoring a Document with Firebase Admin SDK\nDESCRIPTION: This snippet demonstrates how to add a document to a Firestore collection and listen for changes to detect when the AI response is generated. The code creates a document in the specified collection and sets up a snapshot listener to log the response once it's available.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-multimodal-genai/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ref = await admin\n    .firestore()\n    .collection(\"${param:COLLECTION_NAME}\")\n    .add({ ... })\n\nref.onSnapshot(snap => {\n    if (snap.get('${param:RESPONSE_FIELD}')) console.log(\n        'RESPONSE:',\n        snap.get('${param:RESPONSE_FIELD}')\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using PaLM API with Firebase Functions\nDESCRIPTION: This code demonstrates how to authenticate with Firebase, initialize the Functions SDK, retrieve available PaLM models, and generate text using the PaLM API through Firebase Cloud Functions. It shows the complete flow from authentication to making API requests.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/palm-secure-backend/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst firebaseConfig = {...};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n\n// authenticating in with email and password, for example\n// signInAnonymously is another option if you don't want to enforce account creation\nawait signInWithEmailAndPassword(auth,\"test@example.com\",\"password\");\n\nconst functions = getFunctions(app,\"${param:LOCATION}\");\n\nconst getModels = httpsCallable(functions,\"ext-${param:EXT_INSTANCE_ID}-getModels\")\nconst models = await getModels();\n\nconst getModel = httpsCallable(functions, 'ext-${param:EXT_INSTANCE_ID}-getModel');\nconst chatBison = await getModel({name: \"chat-bison-001\"});\n\nconst post = httpsCallable(functions, 'ext-${param:EXT_INSTANCE_ID}-post');\n\n/** Data does not need to be restructured or could be { data } **/\nconst response = await post({\n    model: \"text-bison-001\",\n    method: \"generateText\",\n    prompt: {\n        text: \"Hello there!\"\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Firestore Document Creation and Response Monitoring\nDESCRIPTION: JavaScript code demonstrating how to create a new document in Firestore with a prompt and listen for the PaLM API response using onSnapshot(). The code creates a document and sets up a real-time listener to monitor for the response field.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-palm-chatbot/POSTINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ref = await admin\n    .firestore()\n    .collection(\"${param:COLLECTION_NAME}\")\n    .add({\n        ${param:PROMPT_FIELD}: \"How are you today?\",\n    })\n\nref.onSnapshot(snap => {\n    if (snap.get('${param:RESPONSE_FIELD}')) console.log(\n        'RESPONSE:' +\n        snap.get('${param:RESPONSE_FIELD}')\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a document and listening for AI responses in Firestore using JavaScript\nDESCRIPTION: Example code that adds a document with a prompt to a Firestore collection and sets up a snapshot listener to wait for the AI response field to be populated.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-genai-chatbot/POSTINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ref = await admin\n    .firestore()\n    .collection(\"${param:COLLECTION_NAME}\")\n    .add({\n        ${param:PROMPT_FIELD}: \"How are you today?\",\n    })\n\nref.onSnapshot(snap => {\n    if (snap.get('${param:RESPONSE_FIELD}')) console.log(\n        'RESPONSE:' +\n        snap.get('${param:RESPONSE_FIELD}')\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Embedding Cloud Function in JavaScript\nDESCRIPTION: This code demonstrates how to create a simple custom embedding function using Firebase Cloud Functions. It accepts a batch of strings and returns a simple 2D embedding that classifies whether a string contains 'cat' or not.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-vector-search/POSTINSTALL.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst {https} = require('firebase-functions');\nconst {logger} = require('firebase-functions');\n\n// This function is triggered on HTTP requests\nexports.processBatch = https.onRequest((request, response) => {\n  // Log the incoming request\n  logger.info('Processing batch', {structuredData: true});\n\n  // Ensure the request is a POST request\n  if (request.method !== 'POST') {\n    // Respond with 405 Method Not Allowed if not a POST request\n    response.status(405).send('Only POST requests are accepted');\n    return;\n  }\n\n  try {\n    // Parse the request body\n    const {batch} = request.body;\n\n    // Validate the batch input\n    if (!Array.isArray(batch)) {\n      response\n        .status(400)\n        .send('Invalid input: batch must be an array of strings.');\n      return;\n    }\n\n    // Map each string in the batch to [1, 0] if it contains \"cat\", [0, 1] otherwise\n    const embeddings = batch.map(item =>\n      item.includes('cat') ? [1, 0] : [0, 1]\n    );\n\n    // Send the response with the embeddings array\n    response.send({embeddings});\n  } catch (error) {\n    // Handle any errors that might occur\n    logger.error('Error processing request', {error});\n    response\n      .status(500)\n      .send('An error occurred while processing the request.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Prefilter Query Structure for Firebase Embeddings Extension\nDESCRIPTION: This JSON structure demonstrates how to query embeddings with prefilters. It shows how to specify a query string, limit the number of results, and apply filters on specific fields using comparison operators.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-vector-search/POSTINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    query: \"my query\",\n    limit: 4,\n    prefilters: [\n        {\n            field: \"age\",\n            operator: \"==\",\n            value: 30\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Embedding Function Request Structure\nDESCRIPTION: This JSON structure shows the expected request format for a custom embedding endpoint. The request contains a batch of strings to be embedded.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-vector-search/POSTINSTALL.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"batch\": string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Labeled Image Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to query Firestore to retrieve the labels extracted from an uploaded image. It uses the collection path configured during extension setup and filters by the file path of the uploaded image.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/storage-label-images/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase\n  .firestore()\n  .collection(config.collectionPath) // ðŸ‘ˆ the collection you configured\n  .where('file', '==', filePath) // ðŸ‘ˆ the uploaded file, in format: \"gs://${object.bucket}/${object.name}\"\n  .get();\n```\n\n----------------------------------------\n\nTITLE: Client-Side Integration with Firebase and Callable Functions\nDESCRIPTION: JavaScript implementation showing how to integrate the reverse image search functionality in a client application using Firebase SDK. The code initializes the Firebase Functions module, calls the search function, and processes the returned paths to matched images.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/storage-reverse-image-search/POSTINSTALL.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport firebase from \"firebase\";\nimport { getFunctions, httpsCallable } from \"firebase/functions\";\n\nconst functions = getFunctions();\nconst search = httpsCallable(functions, `ext-${param:EXT_INSTANCE_ID}-queryIndex`);\n\n// run search\nawait search({ query: searchQuery })\n  .then(async (result) => {\n    // get results\n    const { nearestNeighbours } = result.data;\n    const paths  = nearestNeighbours.neighbours.map($ => $.datapoint.datapointId);\n\n    // do something with the paths...\n});\n```\n\n----------------------------------------\n\nTITLE: Client Integration with Firebase Functions\nDESCRIPTION: JavaScript example showing how to call the queryIndex function from a client application using Firebase Functions and handle the results, potentially fetching the actual documents from Firestore using the returned IDs.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-semantic-search/POSTINSTALL.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport firebase from \"firebase\";\nimport { getFunctions, httpsCallable } from \"firebase/functions\";\n\nconst functions = getFunctions();\nconst search = httpsCallable(functions, `ext-${param:EXT_INSTANCE_ID}-queryIndex`);\n\n// run search\nawait search({ query: searchQuery })\n  .then(async (result) => {\n    // get results\n    const { nearestNeighbours } = result.data;\n    const paths  = nearestNeighbours.neighbours.map($ => $.datapoint.datapointId);\n\n    // fetch documents from Firestore using the ids...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up a Firestore Listener for Latest Transfer Run in JavaScript\nDESCRIPTION: This code sets up a Firestore listener to subscribe to updates on the 'latest' document for a specific transfer config. It updates the latestRunId variable whenever the document changes, allowing real-time tracking of the most recent transfer run.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/bigquery-firestore-export/POSTINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst latestRunId = null;\ndb.collection(`transferConfigs/${transferConfigId}/runs`)\n  .doc('latest')\n  .onSnapshot(doc => {\n    if (!!doc.data()) {\n      latestRunId = doc.data().latestRunId;\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding a Document to Firestore for Text-to-Speech Conversion in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a document to a Firestore collection that will trigger the text-to-speech conversion process. It includes both required text field and optional configuration parameters such as language code, SSML gender, audio encoding, and voice name that can be used if per-document overrides are enabled.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/text-to-speech/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nadmin.firestore().collection('${param:COLLECTION_PATH}').add({\n  text: 'Hello, world!',\n  languageCode: 'en-US', // Optional if per-document overrides are enabled\n  ssmlGender: 'FEMALE', // Optional if per-document overrides are enabled\n  audioEncoding: 'MP3', // Optional if per-document overrides are enabled\n  voiceName: 'en-US-Wavenet-A', // Optional if per-document overrides are enabled\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Image Labels from Firestore using Firebase JavaScript SDK\nDESCRIPTION: Code snippet demonstrating how to query Firestore to retrieve extracted image labels. The query searches for a document matching the uploaded file's Cloud Storage path in the configured collection.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/storage-label-images/PREINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase\n  .firestore()\n  .collection(config.collectionPath) // ðŸ‘ˆ the collection you configured\n  .where('file', '==', filePath) // ðŸ‘ˆ the uploaded file, in format: \"gs://${object.bucket}/${object.name}\"\n  .get();\n```\n\n----------------------------------------\n\nTITLE: Adding a document and monitoring response with Firebase Admin SDK for PaLM extension\nDESCRIPTION: This code snippet demonstrates how to add a document to a Firestore collection using the Firebase Admin SDK and then listen for changes to detect when the PaLM API response is available. It uses the collection name specified during extension installation and monitors the response field for updates.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-palm-gen-text/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ref = await admin\n    .firestore()\n    .collection(\"${param:COLLECTION_NAME}\")\n    .add({ ... }) // Include values for ${param:VARIABLE_FIELDS} fields\n\nref.onSnapshot(snap => {\n    if (snap.get('${param:RESPONSE_FIELD}')) console.log(\n        'RESPONSE:',\n        snap.get('${param:RESPONSE_FIELD}')\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Example Prompt Template for Star Rating Prediction with Gemini API\nDESCRIPTION: A sample prompt template for the Gemini API that demonstrates few-shot learning to predict star ratings from product reviews. The template includes example reviews with ratings and uses a handlebars variable for substituting actual review text from Firestore documents.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-multimodal-genai/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nProvide a star rating from 1-5 of the following review text: \"This is a truly incredible water bottle, I keep it with me all the time when I'm traveling and it has never let me down.\"\n5\n\nProvide a star rating from 1-5 of the following review text: \"I really enjoyed the water bottle, I just wish they carried this in a larger size as I go for long hikes. But overall the aesthetic, manufacturing, and functional design are great for what I needed.\"\n4\n\nProvide a star rating from 1-5 of the following review text: \"The water bottle was fine, although the design was a bit lacking and could be improved.\"\n3\n\nProvide a star rating from 1-5 of the following review text: \"Please don't get this water bottle, there are major design flaws, for example the cap doesn't screw on fully so water leaks into my backpack all the time.\"\n1\n\nProvide a star rating from 1-5 of the following review text: \\\"{{review_text}}\\\"\n\n```\n\n----------------------------------------\n\nTITLE: Adding and Monitoring Firestore Documents with Firebase Admin SDK\nDESCRIPTION: This code snippet demonstrates how to add a document to a specified Firestore collection with text to be summarized, and then listen for changes to monitor when the PaLM API response is available. It uses the Firebase Admin SDK and the onSnapshot listener.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-palm-summarize-text/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ref = await admin\n    .firestore()\n    .collection(\"${param:COLLECTION_NAME}\")\n    .add({\n        ${param:TEXT_FIELD}: \"some text you want summarized\"\n    })\n\nref.onSnapshot(snap => {\n    if (snap.get('${param:RESPONSE_FIELD}')) console.log(\n        'RESPONSE:',\n        snap.get('${param:RESPONSE_FIELD}')\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Querying the Reverse Image Search API Using cURL\nDESCRIPTION: This command demonstrates how to query the Firebase extension's image search function using cURL with the gcloud CLI for authentication. The function expects a base64-encoded image as input and returns nearest matching images.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/storage-reverse-image-search/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n-d '{\"data\": {\"query\": [\"...\"]} }' \\\nhttps://${param:LOCATION}-${param:PROJECT_ID}.cloudfunctions.net/ext-${param:EXT_INSTANCE_ID}-queryIndex\n```\n\n----------------------------------------\n\nTITLE: Querying Firestore for Transfer Config ID in JavaScript\nDESCRIPTION: This snippet demonstrates how to query Firestore to identify the transfer config created by the extension. It filters the collection based on the extension instance ID and extracts the transfer config ID from the result.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/bigquery-firestore-export/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst q = db.collection(config.firestoreCollection).where(\"extInstanceId\", \"==\", <MY_INSTANCE_ID>);\nconst results = await q.get();\nconst existingTransferConfig = results.docs[0].data();\nconst splitName = existingTransferConfig.name.split(\"/\");\nconst transferConfigId = splitName[splitName.length-3];\n```\n\n----------------------------------------\n\nTITLE: Triggering a Firestore Restoration Job with cURL\nDESCRIPTION: Example cURL command to trigger a Firestore restoration job from one hour ago. This calls the HTTP function provided by the extension to start the restoration process.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/POSTINSTALL.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -m 70 -X POST https://us-central1-${PROJECT_ID}.cloudfunctions.net/ext-firestore-incremental-capture-onHttpRunRestoration \\\n-H \"Authorization: bearer $(gcloud auth print-identity-token)\" \\\n-H \"Content-Type: application/json\" \\\n-d \"{\\\"timestamp\\\":$(date -u -v-1H +%s)}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Vector Index using gcloud CLI\nDESCRIPTION: Command to call the queryIndex function using the gcloud CLI to perform a vector search.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-semantic-search/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud functions --project ${param:PROJECT_ID} call ext-${param:EXT_INSTANCE_ID}-queryIndex --data '{\"data\": {\"query\":[\"\"]}}'\n```\n\n----------------------------------------\n\nTITLE: Example Prompt Template for Star Rating Prediction with PaLM API\nDESCRIPTION: A sample prompt template that uses few-shot learning to predict star ratings from product reviews. The template includes examples of 1-5 star reviews followed by a placeholder for the actual review text from Firestore documents.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-palm-gen-text/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nProvide a star rating from 1-5 of the following review text: \"This is a truly incredible water bottle, I keep it with me all the time when I'm traveling and it has never let me down.\"\n5\n\nProvide a star rating from 1-5 of the following review text: \"I really enjoyed the water bottle, I just wish they carried this in a larger size as I go for long hikes. But overall the aesthetic, manufacturing, and functional design are great for what I needed.\"\n4\n\nProvide a star rating from 1-5 of the following review text: \"The water bottle was fine, although the design was a bit lacking and could be improved.\"\n3\n\nProvide a star rating from 1-5 of the following review text: \"Please don't get this water bottle, there are major design flaws, for example the cap doesn't screw on fully so water leaks into my backpack all the time.\"\n1\n\nProvide a star rating from 1-5 of the following review text: \\\"{{review_text}}\\\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Firebase Restoration Pipeline Locally using DirectRunner\nDESCRIPTION: This command executes the RestorationPipeline Java class locally for debugging using the DirectRunner. It requires specifying the timestamp for PITR restoration, Firestore collection ID, database, temporary storage location, and project ID.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture-pipeline/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn compile exec:java \\\n    -Dexec.mainClass=com.pipeline.RestorationPipeline \\\n    -Dexec.args='--timestamp=1697740800 --firestoreCollectionId=\"test\" --firestoreDb=\"test\" --tempLocation=\"gs://PROJECT_ID.appspot.com\" --project=\"PROJECT_ID\"'\n```\n\n----------------------------------------\n\nTITLE: Example Prompt for Star Rating Prediction with Gemini API\nDESCRIPTION: A prompt template that uses few-shot learning to train the Gemini model to predict star ratings for product reviews. It includes several examples with ratings from 1-5 and uses a handlebars variable to insert the review text from the Firestore document.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-multimodal-genai/PREINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\nProvide a star rating from 1-5 of the following review text: \"This is a truly incredible water bottle, I keep it with me all the time when I'm traveling and it has never let me down.\"\n5\n\nProvide a star rating from 1-5 of the following review text: \"I really enjoyed the water bottle, I just wish they carried this in a larger size as I go for long hikes. But overall the aesthetic, manufacturing, and functional design are great for what I needed.\"\n4\n\nProvide a star rating from 1-5 of the following review text: \"The water bottle was fine, although the design was a bit lacking and could be improved.\"\n3\n\nProvide a star rating from 1-5 of the following review text: \"Please don't get this water bottle, there are major design flaws, for example the cap doesn't screw on fully so water leaks into my backpack all the time.\"\n1\n\nProvide a star rating from 1-5 of the following review text: \\\"{{review_text}}\\\"\n\n```\n\n----------------------------------------\n\nTITLE: Example Message Document Structure for Gemini Chatbot\nDESCRIPTION: Shows the structure of a message document that would be added to Firestore to trigger the chatbot. When this document is added, the extension retrieves conversation history, queries the configured Gemini model, and writes the response back to the document.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-genai-chatbot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  prompt: \"What is the best museum to visit in Barcelona, Spain?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Firestore Message Document Structure for PaLM Chatbot\nDESCRIPTION: Example of the document structure used to store chat messages in Firestore. The document contains a prompt field that stores the user's question or input message.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-palm-chatbot/PREINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  prompt: \"What is the best museum to visit in Barcelona, Spain?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Firestore Message Document Structure for PaLM Chatbot\nDESCRIPTION: Sample structure of a message document stored in Firestore that triggers the chatbot extension. The document contains a prompt field that will be sent to the PaLM API for processing.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-palm-chatbot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  prompt: \"What is the best museum to visit in Barcelona, Spain?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Videos with Cloud Video AI Extension\nDESCRIPTION: JSON configuration for the Firebase extension that extracts labels from videos using Cloud Video Intelligence API. It includes parameters for storage locations, detection modes, confidence thresholds, and model selection.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/storage-label-videos/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Cloud Functions location\": \"Cloud region where annotation should take place\",\n  \"Cloud Storage bucket where videos should be picked up and processed.\": \"Input bucket name\",\n  \"Cloud Storage bucket where the ouput json from a processed videos should be stored.\": \"Output bucket name\",\n  \"Input videos path\": \"Storage path for input videos\",\n  \"Output videos path\": \"Storage path for output JSON\",\n  \"Label detection mode\": \"SHOT_MODE (default)\",\n  \"Video confidence threshold\": \"0.3 (default, range 0.1-0.9)\",\n  \"Frame confidence threshold\": \"0.4 (default, range 0.1-0.9)\",\n  \"Model\": \"Model name for label detection\",\n  \"Stationary Camera\": \"false (default)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Message Document Structure in Firestore for Gemini Chatbot\nDESCRIPTION: Shows the structure of a message document that would be stored in Firestore for the chatbot. When this document is added to the configured collection, the extension will obtain conversation history, query the Gemini model, and write the response back to the document.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-genai-chatbot/PREINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  prompt: \"What is the best museum to visit in Barcelona, Spain?\"\n}\n```\n\n----------------------------------------\n\nTITLE: PaLM API Context Configuration Example\nDESCRIPTION: Example of how to configure the chatbot's context during installation to specify its role and behavior. This example shows configuration for a travel guide chatbot.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-palm-chatbot/PREINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nI want you to act as a travel guide. I will ask you questions about various travel destinations, and you will describe those destinations and give me suggestions on places to visit.\n```\n\n----------------------------------------\n\nTITLE: Example Context for Configuring the Gemini Chatbot as a Travel Guide\nDESCRIPTION: Shows an example of the context that can be provided during installation to configure the chatbot for a specific purpose. This example configures the chatbot to act as a travel guide that provides information about destinations and suggestions on places to visit.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-genai-chatbot/PREINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nI want you to act as a travel guide. I will ask you questions about various travel destinations, and you will describe those destinations and give me suggestions on places to visit.\n```\n\n----------------------------------------\n\nTITLE: Example Context Setting for Travel Guide Chatbot with PaLM API\nDESCRIPTION: Sample context configuration that instructs the PaLM model to act as a travel guide. This context primes the model to generate travel-related responses when users ask about destinations.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-palm-chatbot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nI want you to act as a travel guide. I will ask you questions about various travel destinations, and you will describe those destinations and give me suggestions on places to visit.\n```\n\n----------------------------------------\n\nTITLE: Querying Latest Transfer Run Results from Firestore in JavaScript\nDESCRIPTION: This snippet shows how to query Firestore for the results of the latest transfer run. It constructs a query to fetch the output documents from the specific run identified by latestRunId.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/bigquery-firestore-export/POSTINSTALL.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst q = db.collection(\n  `transferConfigs/${transferConfigId}/runs/${latestRunId}/output`\n);\nconst results = await q.get();\n```\n\n----------------------------------------\n\nTITLE: Sample Request Body for Image Search Query\nDESCRIPTION: Example JSON payload for the reverse image search function. The query field contains a base64-encoded image string that will be matched against the image index.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/storage-reverse-image-search/POSTINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"query\": [\"iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAY...\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure from Firebase Embeddings Query Function\nDESCRIPTION: This JSON structure shows the response format returned by the embeddings query function. The response contains an array of document IDs that match the query criteria.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-vector-search/POSTINSTALL.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ids: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Vector Search Request Format\nDESCRIPTION: JSON structure for the request body when calling the queryIndex function with a search query.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-semantic-search/POSTINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"query\": [\"I am a query\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Vector Search Response Format\nDESCRIPTION: Example JSON response from the queryIndex function showing document IDs and similarity distances for nearest neighbors.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-semantic-search/POSTINSTALL.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nearestNeighbors\": [\n    {\n      \"id\": \"0\",\n      \"neighbors\": [\n        {\n          \"datapoint\": {\n            \"datapointId\": \"zVnAFpQQd6LDntOPhWlk\",\n            \"crowdingTag\": {\n              \"crowdingAttribute\": \"0\"\n            }\n          },\n          \"distance\": 0.40997931361198425\n        },\n        {\n          \"datapoint\": {\n            \"datapointId\": \"VjdCBMgq939nUB846TZ2\",\n            \"crowdingTag\": {\n              \"crowdingAttribute\": \"0\"\n            }\n          },\n          \"distance\": 0.36510562896728516\n        },\n        ...\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Embedding Function Response Structure\nDESCRIPTION: This JSON structure shows the expected response format from a custom embedding endpoint. The response contains an array of embedding vectors (number arrays) corresponding to each input string.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-vector-search/POSTINSTALL.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    embeddings: number[][]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Dataflow Flex Template for Firestore Restoration\nDESCRIPTION: Command to build a Dataflow Flex Template for Firestore restoration. This template will be used to run Dataflow jobs that restore Firestore data from a point-in-time backup.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/POSTINSTALL.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngcloud dataflow flex-template build gs://${param:PROJECT_ID}.appspot.com/${param:EXT_INSTANCE_ID}-dataflow-restore \\\n    --image-gcr-path ${param:LOCATION}-docker.pkg.dev/${param:PROJECT_ID}/${param:EXT_INSTANCE_ID}/dataflow/restore:latest \\\n    --sdk-language JAVA \\\n    --flex-template-base-image JAVA11 \\\n    --jar /path/to/restore-firestore.jar \\\n    --env FLEX_TEMPLATE_JAVA_MAIN_CLASS=\"com.pipeline.RestorationPipeline\" \\\n    --project ${param:PROJECT_ID}\n```\n\n----------------------------------------\n\nTITLE: Firestore Latest Run Document Structure\nDESCRIPTION: Defines the document structure for tracking the latest BigQuery query run. Includes metadata, row counts, and the latest run ID for frontend applications to reference.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/bigquery-firestore-export/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nCOLLECTION: transferConfigs/<configId>/runs/latest\nDOCUMENT: {\n  runMetadata: { },\n  totalRowCount: 779,\n  failedRowCount: 0,\n  latestRunId: 648762e0-0000-28ef-9109-001a11446b2a\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Path Variables in Firebase Extension\nDESCRIPTION: Configuration variables showing the storage paths used for input and output media files in the transcoding process. These variables represent bucket names and folder paths that the extension uses.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/storage-transcode-videos/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n${param:INPUT_VIDEOS_BUCKET}\n${param:INPUT_VIDEOS_PATH}\n${param:OUTPUT_VIDEOS_BUCKET}\n${param:OUTPUT_VIDEOS_PATH}\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Reverse Image Search API\nDESCRIPTION: Example response returned by the Firebase extension's image search function. It includes an array of nearest neighbors with their respective distances and datapoint IDs that correspond to images in the specified storage bucket.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/storage-reverse-image-search/POSTINSTALL.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nearestNeighbors\": [\n    {\n      \"id\": \"0\",\n      \"neighbors\": [\n        {\n          \"datapoint\": {\n            \"datapointId\": \"image1.png\",\n            \"crowdingTag\": {\n              \"crowdingAttribute\": \"0\"\n            }\n          },\n          \"distance\": 0.40997931361198425\n        },\n        {\n          \"datapoint\": {\n            \"datapointId\": \"image2.png\",\n            \"crowdingTag\": {\n              \"crowdingAttribute\": \"0\"\n            }\n          },\n          \"distance\": 0.36510562896728516\n        },\n        ...\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Input and Output Locations in Firebase Extension Configuration\nDESCRIPTION: This snippet demonstrates how to reference configuration parameters for specifying input and output locations in the Firebase extension. It shows the use of placeholders for the input videos bucket, input videos path, output bucket, and output path.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/storage-label-videos/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Using the extension\n\nThis extension will annotate media that appears in the `${param:INPUT_VIDEOS_BUCKET}` storage bucket under the `${param:INPUT_VIDEOS_PATH}` folder.\n\nResults of the transcoding will appear in the `${param:OUTPUT_BUCKET}` storage bucket inside the `${param:OUTPUT_PATH}` folder.\n```\n\n----------------------------------------\n\nTITLE: Firestore Run Metadata Structure\nDESCRIPTION: Shows the document structure for storing metadata about each BigQuery query run in Firestore. The document contains run metadata, total row count, and failed row count.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/bigquery-firestore-export/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nCOLLECTION: transferConfigs/<configId>/runs/<runId>\nDOCUMENT: {\n  runMetadata: { },\n  totalRowCount: 779,\n  failedRowCount: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Separate Firestore Database for Restoration in Firebase\nDESCRIPTION: This command creates a separate Firestore database instance in native mode for use as a restoration target. The command requires specifying the database ID, location, and project ID parameters.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/PREINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    gcloud alpha firestore databases create \\\n    --database=DATABASE_ID \\\n    --location=LOCATION \\\n    --type=firestore-native \\\n    --project=PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Adding a document with a prompt field in Firestore\nDESCRIPTION: Example of adding a simple prompt field to a Firestore document to be processed by the AI extension.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-genai-chatbot/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n${param:PROMPT_FIELD}: \"How are you today?\"\n```\n\n----------------------------------------\n\nTITLE: Firestore Document Structure for Latest Run Metadata\nDESCRIPTION: Illustrates the Firestore document that maintains reference to the latest query run. Frontend applications can use Firestore listeners on this document to detect when new query results are available.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/bigquery-firestore-export/PREINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCOLLECTION: transferConfigs/<configId>/runs/latest\nDOCUMENT: {\n  runMetadata: { },\n  totalRowCount: 779,\n  failedRowCount: 0,\n  latestRunId: 648762e0-0000-28ef-9109-001a11446b2a\n}\n```\n\n----------------------------------------\n\nTITLE: Firestore Document Structure for Query Run Results\nDESCRIPTION: Shows the Firestore document structure created for each BigQuery query run, containing metadata, total row count, and failed row count. This document is stored under a unique run ID within the transferConfigs collection.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/bigquery-firestore-export/PREINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCOLLECTION: transferConfigs/<configId>/runs/<runId>\nDOCUMENT: {\n  runMetadata: { },\n  totalRowCount: 779,\n  failedRowCount: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Functions Configuration for Gemini AI Firebase Extension\nDESCRIPTION: Defines two cloud functions: generateOnCall for direct callable generative AI tasks, and generateText for handling Firestore data write triggers.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-multimodal-genai/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n* generateOnCall: A callable function to perform generative AI tasks.\n* generateText: Listens to Firestore data writes to perform generative AI tasks.\n```\n\n----------------------------------------\n\nTITLE: Creating a Firestore Database Instance using gcloud CLI\nDESCRIPTION: This bash command creates a new Firestore database instance using the gcloud CLI. It specifies the database ID, location, type (firestore-native), and project ID.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud alpha firestore databases create \\\n    --database=DATABASE_ID \\\n    --location=LOCATION \\\n    --type=firestore-native \\\n    --project=PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Finding Extension Service Account Email\nDESCRIPTION: Command to retrieve the service account email associated with a Firebase extension. This service account will need appropriate permissions to perform restoration operations.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/POSTINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud iam service-accounts list --format=\"value(EMAIL)\" --filter=\"displayName='Firebase Extensions ${param:EXT_INSTANCE_ID} service account' AND DISABLED=False\" --project=\"${param:PROJECT_ID}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Authentication for Artifact Registry\nDESCRIPTION: Command to configure Docker to authenticate with Google Cloud Artifact Registry. This allows pushing Docker images to the registry when building Dataflow Flex Templates.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/POSTINSTALL.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth configure-docker ${param:LOCATION}-docker.pkg.dev\n```\n\n----------------------------------------\n\nTITLE: Adding IAM Policy Binding for Artifact Registry\nDESCRIPTION: Command to add IAM policy binding to give the service account write access to the Artifact Registry repository. This is required for the service account to push images to the repository.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/POSTINSTALL.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud artifacts repositories add-iam-policy-binding ${param:EXT_INSTANCE_ID} \\\n  --location=${param:LOCATION} \\\n  --project=${param:PROJECT_ID} \\\n  --member=serviceAccount:SERVICE_ACCOUNT_EMAIL \\\n  --role=roles/artifactregistry.writer\n```\n\n----------------------------------------\n\nTITLE: Adding Dataflow Developer Role to Service Account\nDESCRIPTION: Command to grant the Dataflow Developer role to the extension service account. This role is required for the service account to create and manage Dataflow jobs.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/POSTINSTALL.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects add-iam-policy-binding ${param:PROJECT_ID} \\\n    --project ${param:PROJECT_ID} \\\n    --member=serviceAccount:SA_EMAIL \\\n    --role=roles/dataflow.developer\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifact Registry for Dataflow Templates\nDESCRIPTION: Command to create a Docker repository in Artifact Registry. This repository will store the Docker images used by Dataflow Flex Templates for restoration jobs.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/POSTINSTALL.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud artifacts repositories create ${param:EXT_INSTANCE_ID} \\\n  --repository-format=docker \\\n  --location=${param:LOCATION} \\\n  --project=${param:PROJECT_ID} \\\n  --async\n```\n\n----------------------------------------\n\nTITLE: Adding Service Account User Role to Service Account\nDESCRIPTION: Command to grant the Service Account User role to the extension service account. This role allows the service account to act as other service accounts when running Dataflow jobs.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/POSTINSTALL.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects add-iam-policy-binding ${param:PROJECT_ID} \\\n    --project ${param:PROJECT_ID} \\\n    --member=serviceAccount:SA_EMAIL \\\n    --role=roles/iam.serviceAccountUser\n```\n\n----------------------------------------\n\nTITLE: Adding Artifact Registry Writer Role to Service Account\nDESCRIPTION: Command to grant the Artifact Registry Writer role to the extension service account. This allows the service account to write to Artifact Registry repositories.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/POSTINSTALL.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects add-iam-policy-binding ${param:PROJECT_ID} \\\n    --project ${param:PROJECT_ID} \\\n    --member=serviceAccount:SA_EMAIL \\\n    --role=roles/artifactregistry.writer\n```\n\n----------------------------------------\n\nTITLE: Required IAM Roles for Firebase Gemini Extension\nDESCRIPTION: Lists the required IAM roles for the extension's operation including Firestore access, Storage admin permissions, and AI platform usage.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-multimodal-genai/README.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n* datastore.user (Reason: Allows this extension to access Cloud Firestore to read and process added messages.)\n* storage.objectAdmin (Reason: Allows the extension to read from your Cloud Storage.)\n* aiplatform.user (Reason: Allows this extension to access the Gemini family of genai models via Vertex AI if this provider is chosen.)\n```\n\n----------------------------------------\n\nTITLE: Compiling JAR for Firebase Restoration Pipeline on Dataflow\nDESCRIPTION: This command compiles the RestorationPipeline into a JAR file that can be run on Google Cloud Dataflow. It skips tests and specifies the main class to be packaged.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture-pipeline/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package -DskipTests -Dexec.mainClass=com.pipeline.RestorationPipeline\n```\n\n----------------------------------------\n\nTITLE: Setting Field Value in Firestore Document\nDESCRIPTION: Example showing how to add a simple text prompt to a Firestore document using the specified collection and field names.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-palm-chatbot/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n${param:PROMPT_FIELD}: \"How are you today?\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Secondary Firestore Database with GCloud\nDESCRIPTION: Command to create a secondary Firestore database using Google Cloud CLI. This allows for creating a separate database instance that can be used as a target for restoration operations.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-incremental-capture/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud alpha firestore databases create --database=DATABASE_ID --location=LOCATION --type=firestore-native --project=${param:PROJECT_ID}\n```\n\n----------------------------------------\n\nTITLE: Supported Image File Extensions\nDESCRIPTION: The extension checks if an object in Storage is an image by matching its extension against this list of supported file types.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/storage-reverse-image-search/PREINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`jpg`, `jpeg`, `png`, `gif`, `bmp`\n```\n\n----------------------------------------\n\nTITLE: Example Prompt Template for Star Rating Prediction using PaLM API\nDESCRIPTION: A template prompt that demonstrates how to structure input for predicting star ratings from product reviews. The prompt includes example reviews with ratings and uses handlebars syntax for dynamic content insertion from Firestore documents.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-palm-gen-text/PREINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\nProvide a star rating from 1-5 of the following review text: \"This is a truly incredible water bottle, I keep it with me all the time when I'm traveling and it has never let me down.\"\n5\n\nProvide a star rating from 1-5 of the following review text: \"I really enjoyed the water bottle, I just wish they carried this in a larger size as I go for long hikes. But overall the aesthetic, manufacturing, and functional design are great for what I needed.\"\n4\n\nProvide a star rating from 1-5 of the following review text: \"The water bottle was fine, although the design was a bit lacking and could be improved.\"\n3\n\nProvide a star rating from 1-5 of the following review text: \"Please don't get this water bottle, there are major design flaws, for example the cap doesn't screw on fully so water leaks into my backpack all the time.\"\n1\n\nProvide a star rating from 1-5 of the following review text: \\\"{{review_text}}\\\"\n```\n\n----------------------------------------\n\nTITLE: Firebase Extension Version History Entries\nDESCRIPTION: Version history entries detailing changes and updates made to the Firebase Speech-to-Text extension, from initial release through version 0.1.6.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/speech-to-text/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Version 0.1.6\n\nfixed - bump to nodejs20 runtime in functions and run npm audit fix\n\n## Version 0.1.5\n\nfeature - add config for enabling/disabling automatic punctuation\n\nfeature - add optional collection for transcribed output\n\n## Version 0.1.4\n\nfeature - add object name to events (#94)\n\nfixed - downgrade err to warning\n\nfixed - fix storage path param\n\n## Version 0.1.3\n\nUpdate docs.\n\n## Version 0.1.2\n\nFix incorrect parameters in extension.yaml.\n\n## Version 0.1.1\n\nAdd releaseNotesUrl.\n\n## Version 0.1.0\n\nInitial release of the speech-to-text extension.\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Detailed changelog listing version updates from 0.0.1 to 0.0.13, covering features like Gemini model support, runtime updates, and documentation changes.\nSOURCE: https://github.com/googlecloudplatform/firebase-extensions/blob/main/firestore-genai-chatbot/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Version 0.0.13\n\n- feat: support Gemini Flash Lite Preview on Vertex AI\n\n## Version 0.0.12\n\n- feat: support Gemini 2.0 models\n\n- feat: use nodejs20 runtime and run npm audit fix\n\n- chore: bump genkit version\n\n- fix: change sort order for correct default behavior\n\n## Version 0.0.11\n\n- refactor: use Firebase Genkit SDK to access Gemini API\n\n- fix: update default Gemini models\n\n## Version 0.0.10\n\n- Add docs on regional support for Gemini APIs\n\n- Fixed: dependency vulnerabilties and SDK bumps\n\n## Version 0.0.9\n\n- fix typo in documentation\n\n## Version 0.0.8\n\n- Update documentation\n\n## Version 0.0.7\n\n- Update documentation\n- Update extensions display name\n\n## Version 0.0.6\n\n- Make model a string param, to allow for future changes to model names.\n\n- Add maxOutputTokens parameter\n\n- Update documentation\n\n- Add safety threshold params\n\n## Version 0.0.5\n\n- Add Vertex AI provider\n\n## Version 0.0.4\n\n- Fix context parameter\n\n## Version 0.0.3\n\n- Update docs to describe provider param correctly\n\n## Version 0.0.2\n\n- Update the display name of the extension to `Chatbot with Gemini`.\n\n## Version 0.0.1\n\nInitial release of the firestore-genai-chatbot extension.\n```"
  }
]