[
  {
    "owner": "crossplane",
    "repo": "docs",
    "content": "TITLE: Complete Crossplane Function Implementation in Python\nDESCRIPTION: This snippet shows the full implementation of a Crossplane composition function in Python, including imports, class definition, and detailed comments explaining the function's logic for creating S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"A Crossplane composition function.\"\"\"\n\nimport grpc\nfrom crossplane.function import logging, response\nfrom crossplane.function.proto.v1 import run_function_pb2 as fnv1\nfrom crossplane.function.proto.v1 import run_function_pb2_grpc as grpcv1\n\n\nclass FunctionRunner(grpcv1.FunctionRunnerService):\n    \"\"\"A FunctionRunner handles gRPC RunFunctionRequests.\"\"\"\n\n    def __init__(self):\n        \"\"\"Create a new FunctionRunner.\"\"\"\n        self.log = logging.get_logger()\n\n    async def RunFunction(\n        self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext\n    ) -> fnv1.RunFunctionResponse:\n        \"\"\"Run the function.\"\"\"\n        # Create a logger for this request.\n        log = self.log.bind(tag=req.meta.tag)\n        log.info(\"Running function\")\n\n        # Create a response to the request. This copies the desired state and\n        # pipeline context from the request to the response.\n        rsp = response.to(req)\n\n        # Get the region and a list of bucket names from the observed composite\n        # resource (XR). Crossplane represents resources using the Struct\n        # well-known protobuf type. The Struct Python object can be accessed\n        # like a dictionary.\n        region = req.observed.composite.resource[\"spec\"][\"region\"]\n        names = req.observed.composite.resource[\"spec\"][\"names\"]\n\n        # Add a desired S3 bucket for each name.\n        for name in names:\n            # Crossplane represents desired composed resources using a protobuf\n            # map of messages. This works a little like a Python defaultdict.\n            # Instead of assigning to a new key in the dict-like map, you access\n            # the key and mutate its value as if it did exist.\n            #\n            # The below code works because accessing the xbuckets-{name} key\n            # automatically creates a new, empty fnv1.Resource message. The\n            # Resource message has a resource field containing an empty Struct\n            # object that can be populated from a dictionary by calling update.\n            #\n            # https://protobuf.dev/reference/python/python-generated/#map-fields\n            rsp.desired.resources[f\"xbuckets-{name}\"].resource.update(\n                {\n                    \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                    \"kind\": \"Bucket\",\n                    \"metadata\": {\n                        \"annotations\": {\n                            \"crossplane.io/external-name\": name,\n                        },\n                    },\n                    \"spec\": {\n                        \"forProvider\": {\n                            \"region\": region,\n                        },\n                    },\n                }\n            )\n\n        # Log what the function did. This will only appear in the function's pod\n        # logs. A function can use response.normal() and response.warning() to\n        # emit Kubernetes events associated with the XR it's operating on.\n        log.info(\"Added desired buckets\", region=region, count=len(names))\n\n        return rsp\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane via Helm\nDESCRIPTION: Commands to add the Crossplane Helm repository and install Crossplane in a Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n&&\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane from the Master Channel\nDESCRIPTION: Command to install the pre-release version of Crossplane from the master channel. This creates the crossplane-system namespace and installs Crossplane into it.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-master/crossplane \\\n--devel\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: Configuration file format for AWS credentials containing access key ID and secret access key. Used to authenticate with AWS services.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws.md#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = $@<aws_access_key>$@\naws_secret_access_key = $@<aws_secret_key>$@\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource Definition (XRD) for VirtualMachine API\nDESCRIPTION: YAML manifest that creates a Composite Resource Definition (XRD) for the VirtualMachine API. This defines the schema, validation rules, and both cluster and namespace-scoped access points for the custom API.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: virtualmachines.compute.example.com\nspec:\n  group: compute.example.com\n  names:\n    kind: VirtualMachine\n    plural: virtualmachines\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              location:\n                type: string\n                oneOf:\n                  - pattern: '^EU$'\n                  - pattern: '^US$'\n            required:\n              - location\n    served: true\n    referenceable: true\n  claimNames:\n    kind: VirtualMachineClaim\n    plural: virtualmachineclaims\nEOF\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Definition (XRD)\nDESCRIPTION: Complete YAML configuration for defining a custom PubSub API using Crossplane's XRD\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: pubsubs.queue.example.com\nspec:\n  group: queue.example.com\n  names:\n    kind: PubSub\n    plural: pubsubs\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              location:\n                type: string\n                oneOf:\n                  - pattern: '^EU$'\n                  - pattern: '^US$'\n            required:\n              - location\n    served: true\n    referenceable: true\n  claimNames:\n    kind: PubSubClaim\n    plural: pubsubclaims\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource Definition (XRD)\nDESCRIPTION: YAML configuration that defines a custom API for VirtualMachine resources, including the API schema with a location field restricted to 'EU' or 'US' values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: virtualmachines.compute.example.com\nspec:\n  group: compute.example.com\n  names:\n    kind: VirtualMachine\n    plural: virtualmachines\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              location:\n                type: string\n                oneOf:\n                  - pattern: '^EU$'\n                  - pattern: '^US$'\n            required:\n              - location\n    served: true\n    referenceable: true\n  claimNames:\n    kind: VirtualMachineClaim\n    plural: virtualmachineclaims\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition Pipeline with Multiple Functions in YAML\nDESCRIPTION: This example shows a Composition using a pipeline of two functions: function-cue to create an S3 bucket, and function-auto-ready to mark the composite resource as ready when the bucket becomes ready.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: cue-export-resources\n    functionRef:\n      name: function-cue\n    input:\n      apiVersion: cue.fn.crossplane.io/v1beta1\n      kind: CUEInput\n      name: storage-bucket\n      export:\n        target: Resources\n        value: |\n          apiVersion: \"s3.aws.upbound.io/v1beta1\"\n          kind: \"Bucket\"\n          spec: forProvider: region: \"us-east-2\"\n  - step: automatically-detect-readiness\n    functionRef:\n      name: function-auto-ready\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Single Command Line Parameter\nDESCRIPTION: Example showing how to install Crossplane with a custom image pull policy using helm install command with --set flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n--set image.pullPolicy=Always\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Provider in Crossplane\nDESCRIPTION: Basic Provider installation manifest that installs the AWS Community Provider from the crossplane-contrib registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition in YAML\nDESCRIPTION: This YAML snippet defines a Composition that matches the XRD's group and kind. It uses the compositeTypeRef field to specify which composite resource type this Composition can be used with.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: my-composition\nspec:\n  compositeTypeRef:\n    apiVersion: example.org/v1alpha1\n    kind: MyDatabase\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Helm Repository\nDESCRIPTION: Commands to add and update the Crossplane Helm chart repository to enable installation of Crossplane components.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Definition (XRD)\nDESCRIPTION: Complete YAML definition for creating a custom PubSub API using Crossplane's XRD.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: pubsubs.queue.example.com\nspec:\n  group: queue.example.com\n  names:\n    kind: PubSub\n    plural: pubsubs\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              location:\n                type: string\n                oneOf:\n                  - pattern: '^EU$'\n                  - pattern: '^US$'\n            required:\n              - location\n    served: true\n    referenceable: true\n  claimNames:\n    kind: PubSubClaim\n    plural: pubsubclaims\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider Credentials\nDESCRIPTION: Provider configuration YAML that specifies how to load AWS credentials from a Kubernetes secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-managed-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane CLI using shell script\nDESCRIPTION: A shell command that downloads and executes the Crossplane install script to install the latest version of the Crossplane CLI. The script automatically detects the CPU architecture and downloads the appropriate binary.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh\" | sh\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for AWS Credentials\nDESCRIPTION: This shell command creates a Kubernetes secret named 'aws-secret' in the 'crossplane-system' namespace. It uses the contents of the 'aws-credentials.txt' file as the secret data.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric aws-secret \\\n-n crossplane-system \\\n--from-file=creds=./aws-credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Required Fields in Nested Objects\nDESCRIPTION: This example shows how to define required fields in nested objects. The schema contains a top-level 'spec' object that requires 'size' and 'location', and the 'location' object requires the 'country' field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Removed for brevity\n- name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              size:\n                type: string  \n              name:\n                type: string \n              location:\n                type: object\n                properties:\n                  country: \n                    type: string \n                  zone:\n                    type: string\n                required:\n                  - country\n            required:  \n              - size\n              - location\n```\n\n----------------------------------------\n\nTITLE: Creating a NoSQL Resource using Crossplane Custom API\nDESCRIPTION: Creates a NoSQL resource using the custom API defined by the XRD. This will trigger the creation of the underlying AWS S3 Bucket and DynamoDB Table resources according to the Composition template.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: database.example.com/v1alpha1\nkind: NoSQL\nmetadata:\n  name: my-nosql-database\nspec:\n  location: \"US\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource for Crossplane Testing\nDESCRIPTION: YAML definition of a composite resource (XR) for testing a Crossplane composition function. This example defines an XBuckets resource with a region and list of bucket names to create.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Basic XRD Definition in YAML\nDESCRIPTION: Demonstrates the basic structure of a CompositeResourceDefinition with group, name and version configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMyDatabase\n    plural: xmydatabases\n  versions:\n  - name: v1alpha1\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Composition for GCP Resources\nDESCRIPTION: Creates a Composition template that defines GCP Storage Bucket and PubSub Topic resources using patch-and-transform functionality. The template accepts location input and maps it to appropriate regional settings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: topic-with-bucket\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: crossplane-quickstart-bucket\n          base:\n            apiVersion: storage.gcp.upbound.io/v1beta1\n            kind: Bucket\n            spec:\n              forProvider:\n                location: \"US\"\n          patches:\n            - fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"EU\"\n                    US: \"US\"\n        - name: crossplane-quickstart-topic\n          base:\n            apiVersion: pubsub.gcp.upbound.io/v1beta1\n            kind: Topic\n            spec:\n              forProvider:\n                messageStoragePolicy:\n                  - allowedPersistenceRegions:\n                    - \"us-central1\"\n          patches:\n            - fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.messageStoragePolicy[0].allowedPersistenceRegions[0]\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"europe-central2\"\n                    US: \"us-central1\"\n  compositeTypeRef:\n    apiVersion: queue.example.com/v1alpha1\n    kind: PubSub\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Secret Keys in Crossplane XRD\nDESCRIPTION: This YAML snippet demonstrates how to configure connection secret keys in a Composite Resource Definition (XRD). It specifies which keys (username, password, address) should be passed to the composite resource or Claim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  connectionSecretKeys:\n    - username\n    - password\n    - address\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Provider in Crossplane\nDESCRIPTION: Basic Provider installation manifest that specifies the AWS provider package to install from the crossplane-contrib registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Admin ClusterRole\nDESCRIPTION: Creates the crossplane-admin ClusterRole with aggregation rules to combine permissions from roles labeled with rbac.crossplane.io/aggregate-to-admin.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane-admin\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\naggregationRule:\n  clusterRoleSelectors:\n  - matchLabels:\n      rbac.crossplane.io/aggregate-to-admin: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Examining the Created Kubernetes Secret\nDESCRIPTION: Describes the created Kubernetes Secret to verify it was properly created with the AWS credentials. This shows the metadata and confirms the data size.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret aws-secret -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Defining AWS S3 Bucket Resource in Crossplane\nDESCRIPTION: Example of specifying desired state for an S3 bucket resource, showing minimal required fields for region configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Crossplane Version\nDESCRIPTION: Command to install a specific version of Crossplane using Helm version flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/install.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-stable/crossplane \\\n--version 1.10.0\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Provider in Kubernetes\nDESCRIPTION: Kubernetes configuration to install the AWS S3 provider using Crossplane Provider resource. This creates necessary Custom Resource Definitions (CRDs) for managing AWS S3 services.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-s3\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Creating a Crossplane Composition for AWS S3 Bucket and DynamoDB Table\nDESCRIPTION: This YAML snippet defines a Crossplane Composition that creates an AWS S3 Bucket and a DynamoDB Table. It uses the patch-and-transform function to map user inputs to resource configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dynamo-with-bucket\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: s3Bucket\n          base:\n            apiVersion: s3.aws.upbound.io/v1beta1\n            kind: Bucket\n            spec:\n              forProvider:\n                region: us-east-2\n              providerConfigRef:\n                name: default\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.region\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"eu-north-1\"\n                    US: \"us-east-2\"\n        - name: dynamoDB\n          base:\n            apiVersion: dynamodb.aws.upbound.io/v1beta1\n            kind: Table\n            spec:\n              forProvider:\n                region: \"us-east-2\"\n                writeCapacity: 1\n                readCapacity: 1\n                attribute:\n                  - name: S3ID\n                    type: S\n                hashKey: S3ID\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.region\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"eu-north-1\"\n                    US: \"us-east-2\"\n  compositeTypeRef:\n    apiVersion: database.example.com/v1alpha1\n    kind: NoSQL\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret from GCP Credentials\nDESCRIPTION: Shell command to create a Kubernetes secret containing GCP service account credentials. The secret is created in the crossplane-system namespace using a GCP credentials JSON file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric gcp-secret \\\n-n crossplane-system \\\n--from-file=creds=./gcp-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Schema Versions in Crossplane XRD\nDESCRIPTION: This YAML example demonstrates how to define multiple schema versions in a Crossplane XRD. It shows two versions of the schema, v1alpha1 and v1, with different field definitions, illustrating how to expand the API across versions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string  \n  - name: v1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string \n              size:\n                type: string            \n```\n\n----------------------------------------\n\nTITLE: Complete Crossplane Function Implementation with Documentation\nDESCRIPTION: Full implementation including imports, class definition, and detailed documentation of the S3 bucket creation function with comprehensive comments explaining the implementation details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"A Crossplane composition function.\"\"\"\n\nimport grpc\nfrom crossplane.function import logging, response\nfrom crossplane.function.proto.v1 import run_function_pb2 as fnv1\nfrom crossplane.function.proto.v1 import run_function_pb2_grpc as grpcv1\n\n\nclass FunctionRunner(grpcv1.FunctionRunnerService):\n    \"\"\"A FunctionRunner handles gRPC RunFunctionRequests.\"\"\"\n\n    def __init__(self):\n        \"\"\"Create a new FunctionRunner.\"\"\"\n        self.log = logging.get_logger()\n\n    async def RunFunction(\n        self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext\n    ) -> fnv1.RunFunctionResponse:\n        \"\"\"Run the function.\"\"\"\n        # Create a logger for this request.\n        log = self.log.bind(tag=req.meta.tag)\n        log.info(\"Running function\")\n\n        # Create a response to the request. This copies the desired state and\n        # pipeline context from the request to the response.\n        rsp = response.to(req)\n\n        # Get the region and a list of bucket names from the observed composite\n        # resource (XR). Crossplane represents resources using the Struct\n        # well-known protobuf type. The Struct Python object can be accessed\n        # like a dictionary.\n        region = req.observed.composite.resource[\"spec\"][\"region\"]\n        names = req.observed.composite.resource[\"spec\"][\"names\"]\n\n        # Add a desired S3 bucket for each name.\n        for name in names:\n            # Crossplane represents desired composed resources using a protobuf\n            # map of messages. This works a little like a Python defaultdict.\n            # Instead of assigning to a new key in the dict-like map, you access\n            # the key and mutate its value as if it did exist.\n            #\n            # The below code works because accessing the xbuckets-{name} key\n            # automatically creates a new, empty fnv1.Resource message. The\n            # Resource message has a resource field containing an empty Struct\n            # object that can be populated from a dictionary by calling update.\n            #\n            # https://protobuf.dev/reference/python/python-generated/#map-fields\n            rsp.desired.resources[f\"xbuckets-{name}\"].resource.update(\n                {\n                    \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                    \"kind\": \"Bucket\",\n                    \"metadata\": {\n                        \"annotations\": {\n                            \"crossplane.io/external-name\": name,\n                        },\n                    },\n                    \"spec\": {\n                        \"forProvider\": {\n                            \"region\": region,\n                        },\n                    },\n                }\n            )\n\n        # Log what the function did. This will only appear in the function's pod\n        # logs. A function can use response.normal() and response.warning() to\n        # emit Kubernetes events associated with the XR it's operating on.\n        log.info(\"Added desired buckets\", region=region, count=len(names))\n\n        return rsp\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Composition with Templated YAML\nDESCRIPTION: A Crossplane composition using the Go templating function to create a Deployment and Service for an App XR. It uses Go template syntax to inject values from the composite resource into the composed resources and to manage the readiness status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: app-templated-yaml\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: App\n  mode: Pipeline\n  pipeline:\n  - step: create-deployment-and-service\n    functionRef:\n      name: crossplane-contrib-function-go-templating\n    input:\n      apiVersion: gotemplating.fn.crossplane.io/v1beta1\n      kind: GoTemplate\n      source: Inline\n      inline:\n        template: |\n          ---\n          apiVersion: apps/v1\n          kind: Deployment\n          metadata:\n            annotations:\n              gotemplating.fn.crossplane.io/composition-resource-name: deployment\n              {{ if eq (.observed.resources.deployment | getResourceCondition \"Available\").Status \"True\" }}\n              gotemplating.fn.crossplane.io/ready: \"True\"\n              {{ end }}\n            labels:\n              example.crossplane.io/app: {{ .observed.composite.resource.metadata.name }}\n          spec:\n            replicas: 2\n            selector:\n              matchLabels:\n                example.crossplane.io/app: {{ .observed.composite.resource.metadata.name }}\n            template:\n              metadata:\n                labels:\n                  example.crossplane.io/app: {{ .observed.composite.resource.metadata.name }}\n              spec:\n                containers:\n                - name: app\n                  image: {{ .observed.composite.resource.spec.image }}\n                  ports:\n                  - containerPort: 80\n          ---\n          apiVersion: v1\n          kind: Service\n          metadata:\n            annotations:\n              gotemplating.fn.crossplane.io/composition-resource-name: service\n              {{ if (get (getComposedResource . \"service\").spec \"clusterIP\") }}\n              gotemplating.fn.crossplane.io/ready: \"True\"\n              {{ end }}\n            labels:\n              example.crossplane.io/app: {{ .observed.composite.resource.metadata.name }}\n          spec:\n            selector:\n              example.crossplane.io/app: {{ .observed.composite.resource.metadata.name }}\n            ports:\n            - protocol: TCP\n              port: 8080\n              targetPort: 80\n          ---\n          apiVersion: example.crossplane.io/v1\n          kind: App\n          status:\n            replicas: {{ get (getComposedResource . \"deployment\").status \"availableReplicas\" | default 0 }}\n            address: {{ get (getComposedResource . \"service\").spec \"clusterIP\" | default \"\" | quote }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource in Crossplane\nDESCRIPTION: Example of a Composite Resource (XR) that implements a Composition template with user-defined settings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: test.example.org/v1alpha1\nkind: MyComputeResource\nmetadata:\n  name: my-resource\nspec:\n  storage: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane API Resources\nDESCRIPTION: Command to list all the Kubernetes API resources that are created by Crossplane installation. It displays various Crossplane-specific resources like compositions, providers, and configurations that are used to define and manage infrastructure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources  | grep crossplane\ncompositeresourcedefinitions      xrd,xrds     apiextensions.crossplane.io/v1         false        CompositeResourceDefinition\ncompositionrevisions              comprev      apiextensions.crossplane.io/v1         false        CompositionRevision\ncompositions                      comp         apiextensions.crossplane.io/v1         false        Composition\nenvironmentconfigs                envcfg       apiextensions.crossplane.io/v1beta1    false        EnvironmentConfig\nusages                                         apiextensions.crossplane.io/v1alpha1   false        Usage\nconfigurationrevisions                         pkg.crossplane.io/v1                   false        ConfigurationRevision\nconfigurations                                 pkg.crossplane.io/v1                   false        Configuration\ncontrollerconfigs                              pkg.crossplane.io/v1alpha1             false        ControllerConfig\ndeploymentruntimeconfigs                       pkg.crossplane.io/v1beta1              false        DeploymentRuntimeConfig\nfunctionrevisions                              pkg.crossplane.io/v1beta1              false        FunctionRevision\nfunctions                                      pkg.crossplane.io/v1beta1              false        Function\nlocks                                          pkg.crossplane.io/v1beta1              false        Lock\nproviderrevisions                              pkg.crossplane.io/v1                   false        ProviderRevision\nproviders                                      pkg.crossplane.io/v1                   false        Provider\nstoreconfigs                                   secrets.crossplane.io/v1alpha1         false        StoreConfig\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Helm\nDESCRIPTION: This command installs Crossplane using Helm, creating a dedicated namespace called 'crossplane-system'. It references the Crossplane chart from the 'crossplane-stable' repository.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Full Implementation of Crossplane Composition Function in Go\nDESCRIPTION: This snippet presents the complete implementation of a Crossplane composition function in Go, including imports, struct definition, and the RunFunction method. It demonstrates how to process input, create S3 bucket resources, and handle errors.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/utils/ptr\"\n\n\t\"github.com/upbound/provider-aws/apis/s3/v1beta1\"\n\n\t\"github.com/crossplane/function-sdk-go/errors\"\n\t\"github.com/crossplane/function-sdk-go/logging\"\n\tfnv1 \"github.com/crossplane/function-sdk-go/proto/v1\"\n\t\"github.com/crossplane/function-sdk-go/request\"\n\t\"github.com/crossplane/function-sdk-go/resource\"\n\t\"github.com/crossplane/function-sdk-go/resource/composed\"\n\t\"github.com/crossplane/function-sdk-go/response\"\n)\n\n// Function returns whatever response you ask it to.\ntype Function struct {\n\tfnv1.UnimplementedFunctionRunnerServiceServer\n\n\tlog logging.Logger\n}\n\n// RunFunction observes an XBuckets composite resource (XR). It adds an S3\n// bucket to the desired state for every entry in the XR's spec.names array.\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n\tf.log.Info(\"Running Function\", \"tag\", req.GetMeta().GetTag())\n\n\t// Create a response to the request. This copies the desired state and\n\t// pipeline context from the request to the response.\n\trsp := response.To(req, response.DefaultTTL)\n\n\t// Read the observed XR from the request. Most functions use the observed XR\n\t// to add desired managed resources.\n\txr, err := request.GetObservedCompositeResource(req)\n\tif err != nil {\n\t\t// You can set a custom status condition on the claim. This\n\t\t// allows you to communicate with the user.\n\t\tresponse.ConditionFalse(rsp, \"FunctionSuccess\", \"InternalError\").\n\t\t\tWithMessage(\"Something went wrong.\").\n\t\t\tTargetCompositeAndClaim()\n\n\t\t// You can emit an event regarding the claim. This allows you to\n\t\t// communicate with the user. Note that events should be used \n\t\t// sparingly and are subject to throttling\n\t\tresponse.Warning(rsp, errors.New(\"something went wrong\")).\n\t\t\tTargetCompositeAndClaim()\n\n\t\t// If the function can't read the XR, the request is malformed. This\n\t\t// should never happen. The function returns a fatal result. This tells\n\t\t// Crossplane to stop running functions and return an error.\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get observed composite resource from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\t// Create an updated logger with useful information about the XR.\n\tlog := f.log.WithValues(\n\t\t\"xr-version\", xr.Resource.GetAPIVersion(),\n\t\t\"xr-kind\", xr.Resource.GetKind(),\n\t\t\"xr-name\", xr.Resource.GetName(),\n\t)\n\n\t// Get the region from the XR. The XR has getter methods like GetString,\n\t// GetBool, etc. You can use them to get values by their field path.\n\tregion, err := xr.Resource.GetString(\"spec.region\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.region field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\t// Get the array of bucket names from the XR.\n\tnames, err := xr.Resource.GetStringArray(\"spec.names\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.names field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\t// Get all desired composed resources from the request. The function will\n\t// update this map of resources, then save it. This get, update, set pattern\n\t// ensures the function keeps any resources added by other functions.\n\tdesired, err := request.GetDesiredComposedResources(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get desired resources from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\t// Add v1beta1 types (including Bucket) to the composed resource scheme.\n\t// composed.From uses this to automatically set apiVersion and kind.\n\t_ = v1beta1.AddToScheme(composed.Scheme)\n\n\t// Add a desired S3 bucket for each name.\n\tfor _, name := range names {\n\t\t// One advantage of writing a function in Go is strong typing. The\n\t\t// function can import and use managed resource types from the provider.\n\t\tb := &v1beta1.Bucket{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\t// Set the external name annotation to the desired bucket name.\n\t\t\t\t// This controls what the bucket will be named in AWS.\n\t\t\t\tAnnotations: map[string]string{\n\t\t\t\t\t\"crossplane.io/external-name\": name,\n\t\t\t\t},\n\t\t\t},\n\t\t\tSpec: v1beta1.BucketSpec{\n\t\t\t\tForProvider: v1beta1.BucketParameters{\n\t\t\t\t\t// Set the bucket's region to the value read from the XR.\n\t\t\t\t\tRegion: ptr.To[string](region),\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\t// Convert the bucket to the unstructured resource data format the SDK\n\t\t// uses to store desired composed resources.\n\t\tcd, err := composed.From(b)\n\t\tif err != nil {\n\t\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot convert %T to %T\", b, &composed.Unstructured{}))\n\t\t\treturn rsp, nil\n\t\t}\n\n\t\t// Add the bucket to the map of desired composed resources. It's\n\t\t// important that the function adds the same bucket every time it's\n\t\t// called. It's also important that the bucket is added with the same\n\t\t// resource.Name every time it's called. The function prefixes the name\n\t\t// with \"xbuckets-\" to avoid collisions with any other composed\n\t\t// resources that might be in the desired resources map.\n\t\tdesired[resource.Name(\"xbuckets-\"+name)] = &resource.DesiredComposed{Resource: cd}\n\t}\n\n\t// Finally, save the updated desired composed resources to the response.\n\tif err := response.SetDesiredComposedResources(rsp, desired); err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot set desired composed resources in %T\", rsp))\n\t\treturn rsp, nil\n\t}\n\n\t// Log what the function did. This will only appear in the function's pod\n\t// logs. A function can use response.Normal and response.Warning to emit\n\t// Kubernetes events associated with the XR it's operating on.\n\tlog.Info(\"Added desired buckets\", \"region\", region, \"count\", len(names))\n\n\t// You can set a custom status condition on the claim. This allows you\n\t// to communicate with the user.\n\tresponse.ConditionTrue(rsp, \"FunctionSuccess\", \"Success\").\n\t\tTargetCompositeAndClaim()\n\n\treturn rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claim with Secret Reference in YAML\nDESCRIPTION: Example of a Crossplane Claim configuration showing how to specify where connection secrets should be written using writeConnectionSecretToRef.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/connection-details.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: SecretTest\nmetadata:\n  name: test-secrets\n  namespace: default\nspec:\n  writeConnectionSecretToRef:\n    name: my-access-key-secret\n```\n\n----------------------------------------\n\nTITLE: Applying a Crossplane Composition\nDESCRIPTION: This YAML snippet defines a Crossplane Composition named `dynamo-with-bucket`. It specifies a pipeline with a `patch-and-transform` function to create an AWS S3 Bucket and a DynamoDB Table. The Composition takes a `location` input from the composite resource and uses it to set the `region` for both resources, with a transformation map to convert location codes to AWS region names.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dynamo-with-bucket\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: s3Bucket\n          base:\n            apiVersion: s3.aws.upbound.io/v1beta1\n            kind: Bucket\n            spec:\n              forProvider:\n                region: us-east-2\n              providerConfigRef:\n                name: default\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.region\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"eu-north-1\"\n                    US: \"us-east-2\"\n        - name: dynamoDB\n          base:\n            apiVersion: dynamodb.aws.upbound.io/v1beta1\n            kind: Table\n            spec:\n              forProvider:\n                region: \"us-east-2\"\n                writeCapacity: 1\n                readCapacity: 1\n                attribute:\n                  - name: S3ID\n                    type: S\n                hashKey: S3ID\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.region\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"eu-north-1\"\n                    US: \"us-east-2\"\n  compositeTypeRef:\n    apiVersion: database.example.com/v1alpha1\n    kind: NoSQL\n```\n\n----------------------------------------\n\nTITLE: Example Custom API Definition in Crossplane\nDESCRIPTION: An example YAML representation of a custom API in Crossplane, showing the API version, kind, and basic specification for a NoSQL database resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.example.com/v1alpha1\nkind: NoSQL\nmetadata:\n  name: my-nosql-database\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Basic Crossplane Composition Example with S3 Bucket\nDESCRIPTION: Example Composition that creates an Amazon S3 Bucket managed resource when an AcmeBucket composite resource is created.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: AcmeBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Resource Definition (XRD)\nDESCRIPTION: YAML configuration for defining the schema of the App composite resource including spec and status fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v2alpha1\nkind: CompositeResourceDefinition\nmetadata:\n  name: apps.example.crossplane.io\nspec:\n  scope: Namespaced\n  group: example.crossplane.io\n  names:\n    kind: App\n    plural: apps\n  versions:\n  - name: v1\n    served: true\n    referenceable: true\n    schema:\n     openAPIV3Schema:\n       type: object\n       properties:\n        spec:\n          type: object\n          properties:\n            image:\n              description: The app's OCI container image.\n              type: string\n          required:\n          - image\n        status:\n          type: object\n          properties:\n            replicas:\n              description: The number of available app replicas.\n              type: integer\n            address:\n              description: The app's IP address.\n              type: string\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Composition with Pipeline Mode in YAML\nDESCRIPTION: This snippet shows a basic Composition definition using the Pipeline mode. It uses the function-patch-and-transform to create an Amazon S3 Bucket resource when an AcmeBucket composite resource is created.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: AcmeBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret with AWS Credentials\nDESCRIPTION: Shell command to create a Kubernetes secret named 'aws-secret' in the crossplane-system namespace. The secret contains AWS credentials needed by Crossplane providers to authenticate with AWS.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric aws-secret \\\n-n crossplane-system \\\n--from-file=creds=./aws-credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Installation with kubectl\nDESCRIPTION: This command checks if the Crossplane pods are running correctly by listing all pods in the crossplane-system namespace. The output shows the two main components: the crossplane controller and the RBAC manager.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                      READY   STATUS    RESTARTS   AGE\ncrossplane-d4cd8d784-ldcgb                1/1     Running   0          54s\ncrossplane-rbac-manager-84769b574-6mw6f   1/1     Running   0          54s\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource Definition in YAML\nDESCRIPTION: YAML structure for a Crossplane Composite Resource Definition (XRD). It defines the custom API for Composite Resources and Claims, including the group, kind, versions, and schema for the spec section.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/introduction.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource Definition (XRD)\nspec:\n  group: test.example.org\n  names:\n    kind: MyComputeResource\n  versions:\n  - name: v1alpha1\n    schema:\n      # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Resource Composition Template in YAML\nDESCRIPTION: Defines a Crossplane Composition template that creates an AWS S3 bucket and DynamoDB table. The template uses patch-and-transform function to map user location inputs to AWS regions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dynamo-with-bucket\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: s3Bucket\n          base:\n            apiVersion: s3.aws.upbound.io/v1beta1\n            kind: Bucket\n            spec:\n              forProvider:\n                region: us-east-2\n              providerConfigRef:\n                name: default\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.region\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"eu-north-1\"\n                    US: \"us-east-2\"\n        - name: dynamoDB\n          base:\n            apiVersion: dynamodb.aws.upbound.io/v1beta1\n            kind: Table\n            spec:\n              forProvider:\n                region: \"us-east-2\"\n                writeCapacity: 1\n                readCapacity: 1\n                attribute:\n                  - name: S3ID\n                    type: S\n                hashKey: S3ID\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.region\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"eu-north-1\"\n                    US: \"us-east-2\"\n  compositeTypeRef:\n    apiVersion: database.example.com/v1alpha1\n    kind: NoSQL\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating a Crossplane Composition for AWS S3 and DynamoDB\nDESCRIPTION: A Crossplane Composition that defines a template for deploying an AWS S3 Bucket and DynamoDB Table. It uses the patch-and-transform function to map user-provided location values to AWS regions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dynamo-with-bucket\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: s3Bucket\n          base:\n            apiVersion: s3.aws.upbound.io/v1beta1\n            kind: Bucket\n            spec:\n              forProvider:\n                region: us-east-2\n              providerConfigRef:\n                name: default\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.region\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"eu-north-1\"\n                    US: \"us-east-2\"\n        - name: dynamoDB\n          base:\n            apiVersion: dynamodb.aws.upbound.io/v1beta1\n            kind: Table\n            spec:\n              forProvider:\n                region: \"us-east-2\"\n                writeCapacity: 1\n                readCapacity: 1\n                attribute:\n                  - name: S3ID\n                    type: S\n                hashKey: S3ID\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.region\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"eu-north-1\"\n                    US: \"us-east-2\"\n  compositeTypeRef:\n    apiVersion: database.example.com/v1alpha1\n    kind: NoSQL\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Bucket Resource in YAML\nDESCRIPTION: Example of a desired state definition for an AWS S3 bucket, showing minimal specification with only the fields the function cares about.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with AWS Provider Using Helm\nDESCRIPTION: This shell command installs Crossplane with the AWS Community Provider using Helm. It configures the provider.packages option to include the AWS provider package from the crossplane-contrib registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\n--set provider.packages='{xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0}'\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Helm Chart Repository\nDESCRIPTION: Commands to add the Crossplane Helm chart repository to your local Helm configuration and update the repository index to access the latest charts.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Helm Repository\nDESCRIPTION: Adds the Crossplane stable Helm repository to the local Helm installation. This step is necessary to access the Crossplane Helm chart.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\n```\n\n----------------------------------------\n\nTITLE: Creating Basic EnvironmentConfig in YAML\nDESCRIPTION: Example of creating an EnvironmentConfig resource with various data types including nested objects, arrays, and key-value pairs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/environment-configs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: EnvironmentConfig\nmetadata:\n  name: example-environment\ndata:\n  locations:\n    us: us-east-2\n    eu: eu-north-1\n  key1: value1\n  key2: value2\n  key3:\n    - item1\n    - item2\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket with User ProviderConfig in YAML\nDESCRIPTION: This snippet demonstrates creating an AWS S3 Bucket resource using the 'user-keys' ProviderConfig for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  name: user-bucket\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: user-keys\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Secret Keys in Crossplane XRD\nDESCRIPTION: YAML configuration showing how to specify which connection secret keys should be exposed to composite resources or claims. Demonstrates setting username, password and address as allowed keys.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  connectionSecretKeys:\n    - username\n    - password\n    - address\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Transforming Field Values in Crossplane Resources\nDESCRIPTION: Shows how to use transforms to map input values to specific outputs. Maps desiredRegion values to corresponding AWS regions using map transform type.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.desiredRegion\n      toFieldPath: spec.forProvider.region\n      transforms:\n        - type: map\n          map:\n            us: us-east-2\n            eu: eu-north-1\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Master Helm Chart\nDESCRIPTION: This command installs the Crossplane master Helm chart. It creates a new namespace 'crossplane-system' and installs Crossplane into it. The '--devel' flag is used to allow installation of pre-release versions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-master/crossplane \\\n--devel\n```\n\n----------------------------------------\n\nTITLE: Defining CompositeResourceDefinition in Crossplane\nDESCRIPTION: YAML configuration for creating a CompositeResourceDefinition (XRD) that defines a custom API endpoint for databases.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: xMyDatabase\n    plural: xmydatabases\n```\n\n----------------------------------------\n\nTITLE: Defining a basic Composite Resource Definition in YAML\nDESCRIPTION: This snippet shows the basic structure of a CompositeResourceDefinition, including the API group, name, and version. It creates a new API endpoint for 'XMyDatabase' resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMyDatabase\n    plural: xmydatabases\n  versions:\n  - name: v1alpha1\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Setting up a Composite Resource (XR) Using a Defined Schema\nDESCRIPTION: This YAML shows a Composite Resource that follows the schema defined in the Composite Resource Definition. It sets the storage parameter to 'large', demonstrating how users can configure resources within the constraints set by the platform team.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource (XR)\napiVersion: test.example.org/v1alpha1\nkind: MyComputeResource\nmetadata:\n  name: my-resource\nspec:\n  storage: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Composition with YAML\nDESCRIPTION: A Crossplane composition using the patch-and-transform function to create a Deployment and Service when an App XR is created. It maps fields from the composite resource to the composed resources and back, with readiness checks to verify successful deployment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: app-yaml\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: App\n  mode: Pipeline\n  pipeline:\n  - step: create-deployment-and-service\n    functionRef:\n      name: crossplane-contrib-function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: deployment\n        base:\n          apiVersion: apps/v1\n          kind: Deployment\n          spec:\n            replicas: 2\n            template:\n              spec:\n                containers:\n                - name: app\n                  ports:\n                  - containerPort: 80\n        patches:\n        - type: FromCompositeFieldPath\n          fromFieldPath: metadata.name\n          toFieldPath: metadata.labels[example.crossplane.io/app]\n        - type: FromCompositeFieldPath\n          fromFieldPath: metadata.name\n          toFieldPath: spec.selector.matchLabels[example.crossplane.io/app]\n        - type: FromCompositeFieldPath\n          fromFieldPath: metadata.name\n          toFieldPath: spec.template.metadata.labels[example.crossplane.io/app]\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.image\n          toFieldPath: spec.template.spec.containers[0].image\n        - type: ToCompositeFieldPath\n          fromFieldPath: status.availableReplicas\n          toFieldPath: status.replicas\n        readinessChecks:\n        - type: MatchCondition\n          matchCondition:\n            type: Available\n            status: \"True\"\n      - name: service\n        base:\n          apiVersion: v1\n          kind: Service\n          spec:\n            ports:\n            - protocol: TCP\n              port: 8080\n              targetPort: 80\n        patches:\n        - type: FromCompositeFieldPath\n          fromFieldPath: metadata.name\n          toFieldPath: metadata.labels[example.crossplane.io/app]\n        - type: FromCompositeFieldPath\n          fromFieldPath: metadata.name\n          toFieldPath: spec.selector[example.crossplane.io/app]\n        - type: ToCompositeFieldPath\n          fromFieldPath: spec.clusterIP\n          toFieldPath: status.address\n        readinessChecks:\n        - type: NonEmpty\n          fieldPath: spec.clusterIP\n```\n\n----------------------------------------\n\nTITLE: Creating AWS ProviderConfig\nDESCRIPTION: Kubernetes configuration to create a ProviderConfig resource that connects AWS credentials to the provider. Specifies the secret reference and credentials source.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Composition with Python\nDESCRIPTION: A Crossplane composition using the Python function to generate and manage Deployment and Service resources. The Python script programmatically creates the resources, maps values from the composite resource, and handles readiness states.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: app-python\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: App\n  mode: Pipeline\n  pipeline:\n  - step: create-deployment-and-service\n    functionRef:\n      name: crossplane-contrib-function-python\n    input:\n      apiVersion: python.fn.crossplane.io/v1beta1\n      kind: Script\n      script: |\n        def compose(req, rsp):\n            observed_xr = req.observed.composite.resource\n\n            rsp.desired.resources[\"deployment\"].resource.update({\n                \"apiVersion\": \"apps/v1\",\n                \"kind\": \"Deployment\",\n                \"metadata\": {\n                  \"labels\": {\"example.crossplane.io/app\": observed_xr[\"metadata\"][\"name\"]},\n                },\n                \"spec\": {\n                    \"replicas\": 2,\n                    \"selector\": {\"matchLabels\": {\"example.crossplane.io/app\": observed_xr[\"metadata\"][\"name\"]}},\n                    \"template\": {\n                      \"metadata\": {\n                        \"labels\": {\"example.crossplane.io/app\": observed_xr[\"metadata\"][\"name\"]},\n                      },\n                      \"spec\": {\n                        \"containers\": [{\n                          \"name\": \"app\",\n                          \"image\": observed_xr[\"spec\"][\"image\"],\n                          \"ports\": [{\"containerPort\": 80}]\n                        }],\n                      },\n                    },\n                },\n            })\n\n            observed_deployment = req.observed.resources[\"deployment\"].resource\n            if \"status\" in observed_deployment:\n              if \"availableReplicas\" in observed_deployment[\"status\"]:\n                rsp.desired.composite.resource.get_or_create_struct(\"status\")[\"replicas\"] = observed_deployment[\"status\"][\"availableReplicas\"]\n              if \"conditions\" in observed_deployment[\"status\"]:\n                for condition in observed_deployment[\"status\"][\"conditions\"]:\n                  if condition[\"type\"] == \"Available\" and condition[\"status\"] == \"True\":\n                    rsp.desired.resources[\"deployment\"].ready = True\n\n            rsp.desired.resources[\"service\"].resource.update({\n                \"apiVersion\": \"v1\",\n                \"kind\": \"Service\",\n                \"metadata\": {\n                  \"labels\": {\"example.crossplane.io/app\": observed_xr[\"metadata\"][\"name\"]},\n                },\n                \"spec\": {\n                  \"selector\": {\"example.crossplane.io/app\": observed_xr[\"metadata\"][\"name\"]},\n                  \"ports\": [{\"protocol\": \"TCP\", \"port\": 8080, \"targetPort\": 80}],\n                },\n            })\n\n            observed_service = req.observed.resources[\"service\"].resource\n            if \"spec\" in observed_service and \"clusterIP\" in observed_service[\"spec\"]:\n              rsp.desired.composite.resource.get_or_create_struct(\"status\")[\"address\"] = observed_service[\"spec\"][\"clusterIP\"]\n              rsp.desired.resources[\"service\"].ready = True\n```\n\n----------------------------------------\n\nTITLE: Defining a CompositeResourceDefinition (XRD) in Crossplane\nDESCRIPTION: This snippet shows how to create a CompositeResourceDefinition that defines a custom API endpoint (xmydatabases.example.org). The XRD specifies the group, kind, and plural name for the custom resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: xMyDatabase\n    plural: xmydatabases\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Checking Provider Health Status via kubectl\nDESCRIPTION: Shell command and output showing how to check the health status of installed providers using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\nNAME              INSTALLED   HEALTHY   PACKAGE                                           AGE\nprovider-aws-s3   True        False     xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1   12s\n```\n\n----------------------------------------\n\nTITLE: Describing Composite Resources in Shell\nDESCRIPTION: This command demonstrates how to view detailed information about a specific composite resource, including its linked Composition and managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe composite my-composite-resource\n```\n\n----------------------------------------\n\nTITLE: Defining Required Fields in Crossplane XRD Schema\nDESCRIPTION: Example showing how to specify required fields in a Crossplane Composite Resource Definition (XRD) schema. In this configuration, 'region' and 'size' are required parameters while 'name' is optional.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string \n              size:\n                type: string  \n              name:\n                type: string  \n            required: \n              - region \n              - size\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Helm Chart\nDESCRIPTION: Installs Crossplane using Helm into the crossplane-system namespace. This command creates the namespace if it doesn't exist and deploys the Crossplane components.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-stable/crossplane\n```\n\n----------------------------------------\n\nTITLE: Defining XRD Schema with OpenAPIv3 in YAML\nDESCRIPTION: This YAML snippet shows how to define a schema for an XRD using OpenAPIv3. It creates a custom API with a 'region' property of type string.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Composition for Azure VM Deployment\nDESCRIPTION: YAML configuration that defines a Crossplane Composition template for deploying Azure resources including Linux VM, Network Interface, Subnet, Virtual Network, and Resource Group. Uses patch-and-transform function to handle location mapping.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: crossplane-quickstart-vm-with-network\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: quickstart-vm\n          base:\n            apiVersion: compute.azure.upbound.io/v1beta1\n            kind: LinuxVirtualMachine\n            spec:\n              forProvider:\n                adminUsername: adminuser\n                adminSshKey:\n                  - publicKey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+wWK73dCr+jgQOAxNsHAnNNNMEMWOHYEccp6wJm2gotpr9katuF/ZAdou5AaW1C61slRkHRkpRRX9FA9CYBiitZgvCCz+3nWNN7l/Up54Zps/pHWGZLHNJZRYyAB6j5yVLMVHIHriY49d/GZTZVNB8GoJv9Gakwc/fuEZYYl4YDFiGMBP///TzlI4jhiJzjKnEvqPFki5p2ZRJqcbCiF4pJrxUQR/RXqVFQdbRLZgYfJ8xGB878RENq3yQ39d8dVOkq4edbkzwcUmwwwkYVPIoDGsYLaRHnG+To7FvMeyO7xDVQkMKzopTQV8AuKpyvpqu0a9pWOMaiCyDytO7GGN example@docs.crossplane.io\n                    username: adminuser\n                location: \"Central US\"\n                osDisk:\n                  - caching: ReadWrite\n                    storageAccountType: Standard_LRS\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n                size: Standard_B1ms\n                sourceImageReference:\n                  - offer: debian-11\n                    publisher: Debian\n                    sku: 11-backports-gen2\n                    version: latest\n                networkInterfaceIdsSelector:\n                  matchControllerRef: true\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n        - name: quickstart-nic\n          base:\n            apiVersion: network.azure.upbound.io/v1beta1\n            kind: NetworkInterface\n            spec:\n              forProvider:\n                ipConfiguration:\n                  - name: crossplane-quickstart-configuration\n                    privateIpAddressAllocation: Dynamic\n                    subnetIdSelector:\n                      matchControllerRef: true\n                location: \"Central US\"\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n        - name: quickstart-subnet\n          base:\n            apiVersion: network.azure.upbound.io/v1beta1\n            kind: Subnet\n            spec:\n              forProvider:\n                addressPrefixes:\n                  - 10.0.1.0/24\n                virtualNetworkNameSelector:\n                  matchControllerRef: true\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n        - name: quickstart-network\n          base:\n            apiVersion: network.azure.upbound.io/v1beta1\n            kind: VirtualNetwork\n            spec:\n              forProvider:\n                addressSpace:\n                  - 10.0.0.0/16\n                location: \"Central US\"\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n        - name: crossplane-resourcegroup\n          base:\n            apiVersion: azure.upbound.io/v1beta1\n            kind: ResourceGroup\n            spec:\n              forProvider:\n                location: Central US\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n  compositeTypeRef:\n    apiVersion: compute.example.com/v1alpha1\n    kind: VirtualMachine\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource\nDESCRIPTION: This snippet represents a Composite Resource, which uses a matching Composition template defined by the apiVersion and kind. It also sets specific user-defined parameters such as storage size.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: test.example.org/v1alpha1\nkind: MyComputeResource\nmetadata:\n  name: my-resource\nspec:\n  storage: \"large\"\n\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Preview Helm Repository\nDESCRIPTION: Command to add the Crossplane Preview repository to Helm for accessing upgrade charts.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/upgrade-crossplane.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-preview https://charts.crossplane.io/preview\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition in Crossplane YAML\nDESCRIPTION: This YAML snippet illustrates how to define a Composition in Crossplane, including the compositeTypeRef specifying which Composite Resource type can utilize this Composition. The apiVersion and kind are specified for Crossplane component types.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dynamodb-with-bucket\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: database\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Function Pipeline Composition\nDESCRIPTION: Advanced example showing a Composition with multiple functions in a pipeline. Uses CUE to create an S3 bucket and auto-ready function to handle readiness state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: cue-export-resources\n    functionRef:\n      name: function-cue\n    input:\n      apiVersion: cue.fn.crossplane.io/v1beta1\n      kind: CUEInput\n      name: storage-bucket\n      export:\n        target: Resources\n        value: |\n          apiVersion: \"s3.aws.upbound.io/v1beta1\"\n          kind: \"Bucket\"\n          spec: forProvider: region: \"us-east-2\"\n  - step: automatically-detect-readiness\n    functionRef:\n      name: function-auto-ready\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Multiple Command Line Parameters\nDESCRIPTION: Example demonstrating how to install Crossplane with multiple custom settings (image pull policy and replicas) using helm install command with comma-separated --set values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n--set image.pullPolicy=Always,replicas=2\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Installation with kubectl\nDESCRIPTION: Command to check if Crossplane pods are running correctly in the crossplane-system namespace after installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                      READY   STATUS    RESTARTS   AGE\ncrossplane-d4cd8d784-ldcgb                1/1     Running   0          54s\ncrossplane-rbac-manager-84769b574-6mw6f   1/1     Running   0          54s\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Pods\nDESCRIPTION: Command to view installed Crossplane pods and example output showing the running pods.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/install.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS    RESTARTS   AGE\ncrossplane-6d67f8cd9d-g2gjw                1/1     Running   0          26m\ncrossplane-rbac-manager-86d9b5cf9f-2vc4s   1/1     Running   0          26m\n```\n\n----------------------------------------\n\nTITLE: Selecting Composition Revisions Using Labels\nDESCRIPTION: This snippet demonstrates how to select a Composition revision based on labels using the compositionRevisionSelector field, allowing for selection of revisions based on characteristics like release channel.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionRevisionSelector:\n    matchLabels:\n      channel: dev\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider Credentials in Crossplane\nDESCRIPTION: Demonstrates how to set up a ProviderConfig for AWS credentials using a Kubernetes Secret reference. This configuration is used to authenticate AWS provider operations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/multi-tenant.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: cool-aws-creds\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Basic Crossplane Composition Example\nDESCRIPTION: Example of a basic Composition that creates an Amazon S3 Bucket when an AcmeBucket composite resource is created. Uses the patch-and-transform function to template the resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: AcmeBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.m.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Example Composite Resource Definition\nDESCRIPTION: YAML definition of a simple composite resource for a bucket, demonstrating the structure of observed state in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: Bucket\nmetadata:\n  name: example-render\nspec:\n  bucketRegion: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Configuring Combined Secret Storage in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set the writeConnectionSecretsToNamespace field in a Composition to specify where Crossplane should store the combined secret object for all resources inside the Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  writeConnectionSecretsToNamespace: my-namespace\n  resources:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating AWS ProviderConfig for Crossplane\nDESCRIPTION: Creates a ProviderConfig resource that configures the AWS provider to use the created secret for authentication. This establishes the connection between Crossplane and AWS using the provided credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: aws.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-secret\n      key: creds\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Runtime for Functions in YAML\nDESCRIPTION: This YAML snippet shows how to configure a Function to use the Development runtime for local testing, using the render.crossplane.io/runtime annotation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Composite Resource Definition in YAML\nDESCRIPTION: This snippet shows the basic structure of a CompositeResourceDefinition, including the API group, name, and version. It defines a custom API endpoint for 'mydatabases.example.org'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: mydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMyDatabase\n    plural: mydatabases\n  versions:\n  - name: v1alpha1\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with AWS Provider using Helm\nDESCRIPTION: This shell command installs Crossplane and the AWS Community Provider using Helm. It demonstrates how to include a provider package during the initial Crossplane installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\n--set provider.packages='{xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0}'\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Resource Definition for NoSQL API\nDESCRIPTION: Applies a CompositeResourceDefinition (XRD) to create the custom NoSQL API in the Kubernetes cluster, defining the API group, version, kind, and schema.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: nosqls.database.example.com\nspec:\n  group: database.example.com\n  names:\n    kind: NoSQL\n    plural: nosqls\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              location:\n                type: string\n                oneOf:\n                  - pattern: '^EU$'\n                  - pattern: '^US$'\n            required:\n              - location\n    served: true\n    referenceable: true\n  claimNames:\n    kind: NoSQLClaim\n    plural: nosqlclaim\n```\n\n----------------------------------------\n\nTITLE: Referencing Resources by Name Reference\nDESCRIPTION: This example demonstrates how to reference another managed resource using a nameRef, which uses the name of the managed resource in Kubernetes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.m.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcIdRef: \n      name: my-test-vpc\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal\nDESCRIPTION: Azure CLI command to create a service principal with Owner role for Crossplane authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\naz ad sp create-for-rbac \\\n--sdk-auth \\\n--role Owner \\\n--scopes /subscriptions/$@<subscription_id>$@\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Composition in YAML\nDESCRIPTION: This YAML snippet demonstrates the structure of a Crossplane Composition. It defines a Composition for an XPostgreSQLInstance, specifying resources to be created and their configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: xpostgresqlinstances.database.example.org\n  labels:\n    provider: aws\n    vpc: default\nspec:\n  writeConnectionSecretsToNamespace: crossplane-system\n  compositeTypeRef:\n    apiVersion: database.example.org/v1alpha1\n    kind: XPostgreSQLInstance\n  resources:\n    - name: rdsinstance\n      base:\n        apiVersion: database.aws.crossplane.io/v1beta1\n        kind: RDSInstance\n        spec:\n          forProvider:\n            region: us-east-1\n            dbInstanceClass: db.t2.small\n            masterUsername: masteruser\n            engine: postgres\n            engineVersion: \"12\"\n            skipFinalSnapshotBeforeDeletion: true\n            publiclyAccessible: true\n      patches:\n        - fromFieldPath: \"metadata.name\"\n          toFieldPath: \"metadata.name\"\n        - fromFieldPath: \"metadata.namespace\"\n          toFieldPath: \"spec.writeConnectionSecretToRef.namespace\"\n        - fromFieldPath: \"metadata.name\"\n          toFieldPath: \"spec.writeConnectionSecretToRef.name\"\n          transforms:\n            - type: string\n              string:\n                fmt: \"%s-postgresql\"\n        - fromFieldPath: \"spec.parameters.storageGB\"\n          toFieldPath: \"spec.forProvider.allocatedStorage\"\n```\n\n----------------------------------------\n\nTITLE: Referencing a ProviderConfig in Crossplane EC2 Instance\nDESCRIPTION: A YAML configuration showing how to reference a specific ProviderConfig in a managed resource. The EC2 Instance resource references a ProviderConfig named 'user-keys' for authentication with AWS.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n    # Removed for brevity\n  providerConfigRef: user-keys\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Provider in Crossplane\nDESCRIPTION: Provider configuration to install AWS S3 provider support in Crossplane using a specific package version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-managed-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: crossplane-contrib-provider-aws-s3\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.22.0-crossplane-v2-preview.0\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane CLI using curl\nDESCRIPTION: This command downloads and executes the Crossplane install script, which detects the CPU architecture and installs the latest stable release of the Crossplane CLI.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh\" | sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Composition with compositeTypeRef in Crossplane\nDESCRIPTION: This snippet demonstrates how to define a Composition that references a specific composite resource type. The compositeTypeRef field maps the Composition to XRD by matching the API version and kind.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: my-composition\nspec:\n  compositeTypeRef:\n    apiVersion: example.org/v1alpha1\n    kind: xMyDatabase\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Details in Crossplane Composition YAML\nDESCRIPTION: This example illustrates how to define connection details for a resource in a Crossplane Composition. It shows different types of secret key creation including FromConnectionSecretKey, FromFieldPath, and FromValue.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          # Removed for brevity\n          spec:\n            forProvider:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: my-username\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n          - name: my-field-secret\n            type: FromFieldPath\n            fromFieldPath: spec.forProvider.user\n          - name: my-status-secret\n            type: FromValue\n            value: \"docs.crossplane.io\"\n```\n\n----------------------------------------\n\nTITLE: Defining Required Fields in Crossplane XRD Schema\nDESCRIPTION: This example demonstrates how to specify required fields in a Crossplane XRD schema using the 'required' attribute. The XRD requires 'region' and 'size' fields while making 'name' optional.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string \n              size:\n                type: string  \n              name:\n                type: string  \n            required: \n              - region \n              - size\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining a Crossplane CompositeResourceDefinition for NoSQL Database\nDESCRIPTION: Kubernetes manifest that creates a CompositeResourceDefinition (XRD) for a NoSQL database API. This custom API allows users to request standardized NoSQL databases with simplified configuration options like location.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: nosqls.database.example.com\nspec:\n  group: database.example.com\n  names:\n    kind: NoSQL\n    plural: nosqls\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              location:\n                type: string\n                oneOf:\n                  - pattern: '^EU$'\n                  - pattern: '^US$'\n            required:\n              - location\n    served: true\n    referenceable: true\n  claimNames:\n    kind: NoSQLClaim\n    plural: nosqlclaim\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring writeConnectionSecretToRef in Crossplane RDS Instance\nDESCRIPTION: This YAML snippet demonstrates how to configure the writeConnectionSecretToRef field for an AWS RDS instance managed by Crossplane. It specifies where connection details should be stored as a Kubernetes Secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: my-rds-instance\nspec:\n  forProvider:\n  # Removed for brevity\n  writeConnectionSecretToRef:\n    name: rds-secret\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Deployments and Pods\nDESCRIPTION: Commands to verify the status of Crossplane deployments and pods in the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deployment -n crossplane-system\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition for Crossplane Function Testing\nDESCRIPTION: This YAML file defines a Crossplane Composition that references a function to create buckets. It uses the Pipeline mode to process the XBuckets composite resource and calls the function-xbuckets function as its only step.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: create-buckets\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBuckets\n  mode: Pipeline\n  pipeline:\n  - step: create-buckets\n    functionRef:\n      name: function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Connection Details in Crossplane YAML\nDESCRIPTION: Illustrates how to define connection details for a composite resource in Crossplane. It shows different types of secret key creation: FromConnectionSecretKey, FromFieldPath, and FromValue.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          # Removed for brevity\n          spec:\n            forProvider:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: my-username\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n          - name: my-field-secret\n            type: FromFieldPath\n            fromFieldPath: spec.forProvider.user\n          - name: my-status-secret\n            type: FromValue\n            value: \"docs.crossplane.io\"\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Definition (XRD)\nDESCRIPTION: Complete YAML configuration for creating a Composite Resource Definition in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: nosqls.database.example.com\nspec:\n  group: database.example.com\n  names:\n    kind: NoSQL\n    plural: nosqls\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              location:\n                type: string\n                oneOf:\n                  - pattern: '^EU$'\n                  - pattern: '^US$'\n            required:\n              - location\n    served: true\n    referenceable: true\n  claimNames:\n    kind: NoSQLClaim\n    plural: nosqlclaim\n```\n\n----------------------------------------\n\nTITLE: Defining XRD schema with OpenAPIv3 in YAML\nDESCRIPTION: This example demonstrates how to define a schema for an XRD using OpenAPIv3. It includes version specification and a simple property definition for a 'region' field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining XRD Schema with OpenAPIv3 Specification\nDESCRIPTION: Create a custom resource definition with a specific schema defining properties and data types for the resource\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string\n```\n\n----------------------------------------\n\nTITLE: Serving and Referencing a Crossplane XRD Schema\nDESCRIPTION: Configuration showing how to make a schema version served and referenceable in a Crossplane XRD. The 'served: true' allows composite resources to use this schema version, while 'referenceable: true' indicates which schema version Compositions use.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string            \n```\n\n----------------------------------------\n\nTITLE: Multi-Function Pipeline Composition\nDESCRIPTION: Example showing a Composition with multiple functions in its pipeline, combining CUE for resource creation and auto-ready function for status management.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: cue-export-resources\n    functionRef:\n      name: function-cue\n    input:\n      apiVersion: cue.fn.crossplane.io/v1beta1\n      kind: CUEInput\n      name: storage-bucket\n      export:\n        target: Resources\n        value: |\n          apiVersion: \"s3.aws.m.upbound.io/v1beta1\"\n          kind: \"Bucket\"\n          spec: forProvider: region: \"us-east-2\"\n  - step: automatically-detect-readiness\n    functionRef:\n      name: function-auto-ready\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Provider in Crossplane using YAML\nDESCRIPTION: This YAML snippet demonstrates how to install the AWS Community Provider in Crossplane using a Provider object. It specifies the package location and version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Definition (XRD)\nDESCRIPTION: Complete YAML definition for creating a custom PubSub API using Crossplane's XRD.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: pubsubs.queue.example.com\nspec:\n  group: queue.example.com\n  names:\n    kind: PubSub\n    plural: pubsubs\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              location:\n                type: string\n                oneOf:\n                  - pattern: '^EU$'\n                  - pattern: '^US$'\n            required:\n              - location\n    served: true\n    referenceable: true\n  claimNames:\n    kind: PubSubClaim\n    plural: pubsubclaims\n```\n\n----------------------------------------\n\nTITLE: Multi-Function Composition Pipeline\nDESCRIPTION: Example of a Composition using multiple functions in pipeline mode, combining CUE for resource creation and auto-ready detection.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: cue-export-resources\n    functionRef:\n      name: function-cue\n    input:\n      apiVersion: cue.fn.crossplane.io/v1beta1\n      kind: CUEInput\n      name: storage-bucket\n      export:\n        target: Resources\n        value: |\n          apiVersion: \"s3.aws.upbound.io/v1beta1\"\n          kind: \"Bucket\"\n          spec: forProvider: region: \"us-east-2\"\n  - step: automatically-detect-readiness\n    functionRef:\n      name: function-auto-ready\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider Credentials in Crossplane\nDESCRIPTION: Defines an AWS ProviderConfig that references a Kubernetes Secret containing AWS credentials. This configuration enables Crossplane AWS provider to authenticate with AWS services.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/multi-tenant.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: cool-aws-creds\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for AMD64 Platform\nDESCRIPTION: This command builds a Docker runtime image for the linux/amd64 platform and tags it as 'runtime-amd64'. The --quiet flag reduces output verbosity, returning only the image ID.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/amd64 --tag runtime-amd64\n```\n\n----------------------------------------\n\nTITLE: Returning Desired Resources in KCL\nDESCRIPTION: This snippet creates a list of all the desired resources (Deployment, Service, and updated XR) to be returned by the KCL function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_16\n\nLANGUAGE: kcl\nCODE:\n```\nitems = [_desired_deployment, _desired_service, _desired_xr]\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Installation\nDESCRIPTION: A command to verify that Crossplane has been installed correctly by listing the running pods in the crossplane-system namespace, showing both the main Crossplane pod and the RBAC manager pod.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                      READY   STATUS    RESTARTS   AGE\ncrossplane-d4cd8d784-ldcgb                1/1     Running   0          54s\ncrossplane-rbac-manager-84769b574-6mw6f   1/1     Running   0          54s\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane System Logs\nDESCRIPTION: Command to retrieve logs from the Crossplane pod running in the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system logs -lapp=crossplane\n```\n\n----------------------------------------\n\nTITLE: Defining a CompositeResourceDefinition (XRD) for MySQL Instances\nDESCRIPTION: This snippet demonstrates how to create a CompositeResourceDefinition that defines both cluster-scoped (XMySQLInstance) and namespace-scoped (MySQLInstance) custom resources for MySQL database provisioning in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/multi-tenant.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xmysqlinstances.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMySQLInstance\n    plural: xmysqlinstances\n  claimNames:\n    kind: MySQLInstance\n    plural: mysqlinstances\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Azure Credentials\nDESCRIPTION: kubectl command to create a secret in the crossplane-system namespace containing Azure service principal credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric azure-secret \\\n-n crossplane-system \\\n--from-file=creds=./azure-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Composition with Function Input Configuration in YAML\nDESCRIPTION: Example of a Crossplane Composition with a pipeline that includes input configuration for a patch-and-transform function. Shows how to configure the function to patch fields from the composite resource to a composed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-render\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n        patches:\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.bucketRegion\n          toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Patching Between Individual Resource and Environment\nDESCRIPTION: This code shows how to patch data between an individual managed resource and the in-memory environment using ToEnvironmentFieldPath and FromEnvironmentFieldPath.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: vpc\n  base:\n    apiVersion: ec2.aws.m.upbound.io/v1beta1\n    kind: VPC\n    spec:\n      forProvider:\n        cidrBlock: 172.16.0.0/16\n  patches:\n  - type: ToEnvironmentFieldPath\n    fromFieldPath: status.atProvider.id\n    toFieldPath: vpcId\n  - type: FromEnvironmentFieldPath\n    fromFieldPath: tags\n    toFieldPath: spec.forProvider.tags\n```\n\n----------------------------------------\n\nTITLE: Configuring forProvider Field in Crossplane Managed Resource\nDESCRIPTION: Example showing how to configure the spec.forProvider field in a Crossplane managed resource. This demonstrates setting AWS region and instance type parameters for an EC2 instance.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\n# Removed for brevity\nspec:\n  forProvider:\n    region: us-west-1\n    instanceType: t2.micro\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret from AWS Credentials\nDESCRIPTION: Shell command to create a Kubernetes secret that stores AWS credentials. This secret will be used by Crossplane providers to authenticate with AWS services.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric aws-secret \\\n-n crossplane-system \\\n--from-file=creds=./aws-credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Defining CompositeResourceDefinition for Claims in YAML\nDESCRIPTION: This YAML snippet defines a CompositeResourceDefinition (XRD) that creates a composite resource API endpoint and enables a Claim API endpoint. It specifies the group, names, and claim names for the custom API.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/claims.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMyDatabase\n    plural: xmydatabases\n  claimNames:\n    kind: Database\n    plural: databases\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Single Function Composition Pipeline\nDESCRIPTION: Example of a Composition using a single function in pipeline mode to create an S3 bucket using patch-and-transform.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Crossplane Composition for Azure Virtual Machine with Network Resources\nDESCRIPTION: YAML definition for a Crossplane Composition that templates the creation of an Azure Linux VM with associated network resources. It uses the Patch and Transform function to map user location inputs to Azure region configurations for each resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: crossplane-quickstart-vm-with-network\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: quickstart-vm\n          base:\n            apiVersion: compute.azure.upbound.io/v1beta1\n            kind: LinuxVirtualMachine\n            spec:\n              forProvider:\n                adminUsername: adminuser\n                adminSshKey:\n                  - publicKey: ssh-rsa\n                      AAAAB3NzaC1yc2EAAAADAQABAAABAQC+wWK73dCr+jgQOAxNsHAnNNNMEMWOHYEccp6wJm2gotpr9katuF/ZAdou5AaW1C61slRkHRkpRRX9FA9CYBiitZgvCCz+3nWNN7l/Up54Zps/pHWGZLHNJZRYyAB6j5yVLMVHIHriY49d/GZTZVNB8GoJv9Gakwc/fuEZYYl4YDFiGMBP///TzlI4jhiJzjKnEvqPFki5p2ZRJqcbCiF4pJrxUQR/RXqVFQdbRLZgYfJ8xGB878RENq3yQ39d8dVOkq4edbkzwcUmwwwkYVPIoDGsYLaRHnG+To7FvMeyO7xDVQkMKzopTQV8AuKpyvpqu0a9pWOMaiCyDytO7GGN\n                      example@docs.crossplane.io\n                    username: adminuser\n                location: \"Central US\"\n                osDisk:\n                  - caching: ReadWrite\n                    storageAccountType: Standard_LRS\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n                size: Standard_B1ms\n                sourceImageReference:\n                  - offer: debian-11\n                    publisher: Debian\n                    sku: 11-backports-gen2\n                    version: latest\n                networkInterfaceIdsSelector:\n                  matchControllerRef: true\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n        - name: quickstart-nic\n          base:\n            apiVersion: network.azure.upbound.io/v1beta1\n            kind: NetworkInterface\n            spec:\n              forProvider:\n                ipConfiguration:\n                  - name: crossplane-quickstart-configuration\n                    privateIpAddressAllocation: Dynamic\n                    subnetIdSelector:\n                      matchControllerRef: true\n                location: \"Central US\"\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n        - name: quickstart-subnet\n          base:\n            apiVersion: network.azure.upbound.io/v1beta1\n            kind: Subnet\n            spec:\n              forProvider:\n                addressPrefixes:\n                  - 10.0.1.0/24\n                virtualNetworkNameSelector:\n                  matchControllerRef: true\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n        - name: quickstart-network\n          base:\n            apiVersion: network.azure.upbound.io/v1beta1\n            kind: VirtualNetwork\n            spec:\n              forProvider:\n                addressSpace:\n                  - 10.0.0.0/16\n                location: \"Central US\"\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n        - name: crossplane-resourcegroup\n          base:\n            apiVersion: azure.upbound.io/v1beta1\n            kind: ResourceGroup\n            spec:\n              forProvider:\n                location: Central US\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n  compositeTypeRef:\n    apiVersion: compute.example.com/v1alpha1\n    kind: VirtualMachine\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining a ProviderConfig for AWS in YAML\nDESCRIPTION: This YAML configuration defines a ProviderConfig for AWS in Crossplane. It sets up a configuration named 'user-keys' which can be referenced by managed resources to specify the authentication method for interacting with AWS services.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: user-keys\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Initializing a Crossplane Package with xpkg init\nDESCRIPTION: Command for populating the current directory with files to build a Crossplane package based on a template. The name parameter is reserved for future use, while the template parameter specifies which template to use.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg init <name> <template>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider Authentication with ProviderConfig in YAML\nDESCRIPTION: This snippet shows how to configure basic key-pair authentication for the AWS provider using a ProviderConfig. It specifies the credentials source as a Kubernetes Secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: aws-provider\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Storage Bucket\nDESCRIPTION: YAML configuration to create a GCP storage bucket as a managed resource. Specifies bucket location and references the provider configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: storage.gcp.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  generateName: crossplane-bucket-\n  labels:\n    docs.crossplane.io/example: provider-gcp\nspec:\n  forProvider:\n    location: US\n  providerConfigRef:\n    name: default\n```\n\n----------------------------------------\n\nTITLE: Setting Default Composite Delete Policy in XRD\nDESCRIPTION: Configuration for setting the default composite delete policy to Foreground, which determines how associated resources are deleted when a claim is removed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositeDeletePolicy: Foreground\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Azure Credentials\nDESCRIPTION: Command to create a Kubernetes secret containing Azure service principal credentials for provider authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric azure-secret \\\n-n crossplane-system \\\n--from-file=creds=./azure-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Configuring CompositeTypeRef in Crossplane Composition\nDESCRIPTION: This YAML snippet shows how to define a Composition that enables a specific Composite Resource type to use the composition template. The compositeTypeRef field specifies the apiVersion and kind of Composite Resource that can use this Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dynamodb-with-bucket\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: database\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Secret Keys in a CompositeResourceDefinition\nDESCRIPTION: This YAML snippet shows how to configure connection secret keys in an XRD to control which connection details are exposed to composite resources or Claims. The example passes the username, password, and address keys.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  connectionSecretKeys:\n    - username\n    - password\n    - address\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring a Crossplane CompositeResourceDefinition with Connection Secret Keys\nDESCRIPTION: A YAML definition of a CompositeResourceDefinition that specifies which connection secret keys should be exposed from the managed resources to composite resources and claims.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/connection-details.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xsecrettests.example.org\nspec:\n  group: example.org\n  connectionSecretKeys:\n    - username\n    - password\n    - attribute.secret\n    - attribute.ses_smtp_password_v4\n    - key2-user\n    - key2-pass\n    - key2-secret\n    - key2-smtp\n  names:\n    kind: XSecretTest\n    plural: xsecrettests\n  claimNames:\n    kind: SecretTest\n    plural: secrettests\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket with Admin-Level Permissions in Crossplane\nDESCRIPTION: Defines an AWS S3 Bucket managed resource that references the 'admin-keys' ProviderConfig. This ensures the bucket is created using the admin-level credentials and permissions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  name: user-bucket\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: admin-keys\n```\n\n----------------------------------------\n\nTITLE: Implementing Unit Tests for Crossplane Composition Functions with Go\nDESCRIPTION: A complete example of a Go test file for a Crossplane composition function. The test verifies that the function correctly adds two S3 buckets to the desired composed resources based on input specifications.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\t\"github.com/google/go-cmp/cmp/cmpopts\"\n\t\"google.golang.org/protobuf/testing/protocmp\"\n\t\"google.golang.org/protobuf/types/known/durationpb\"\n\n\t\"github.com/crossplane/crossplane-runtime/pkg/logging\"\n\n\tfnv1 \"github.com/crossplane/function-sdk-go/proto/v1\"\n\t\"github.com/crossplane/function-sdk-go/resource\"\n)\n\nfunc TestRunFunction(t *testing.T) {\n\ttype args struct {\n\t\tctx context.Context\n\t\treq *fnv1.RunFunctionRequest\n\t}\n\ttype want struct {\n\t\trsp *fnv1.RunFunctionResponse\n\t\terr error\n\t}\n\n\tcases := map[string]struct {\n\t\treason string\n\t\targs   args\n\t\twant   want\n\t}{\n\t\t\"AddTwoBuckets\": {\n\t\t\treason: \"The Function should add two buckets to the desired composed resources\",\n\t\t\targs: args{\n\t\t\t\treq: &fnv1.RunFunctionRequest{\n\t\t\t\t\tObserved: &fnv1.State{\n\t\t\t\t\t\tComposite: &fnv1.Resource{\n\t\t\t\t\t\t\t// MustStructJSON is a handy way to provide mock\n\t\t\t\t\t\t\t// resources.\n\t\t\t\t\t\t\tResource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"example.crossplane.io/v1alpha1\",\n\t\t\t\t\t\t\t\t\"kind\": \"XBuckets\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"name\": \"test\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\t\t\t\t\t\"names\": [\n\t\t\t\t\t\t\t\t\t\t\"test-bucket-a\",\n\t\t\t\t\t\t\t\t\t\t\"test-bucket-b\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\twant: want{\n\t\t\t\trsp: &fnv1.RunFunctionResponse{\n\t\t\t\t\tMeta: &fnv1.ResponseMeta{Ttl: durationpb.New(60 * time.Second)},\n\t\t\t\t\tDesired: &fnv1.State{\n\t\t\t\t\t\tResources: map[string]*fnv1.Resource{\n\t\t\t\t\t\t\t\"xbuckets-test-bucket-a\": {Resource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n\t\t\t\t\t\t\t\t\"kind\": \"Bucket\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"annotations\": {\n\t\t\t\t\t\t\t\t\t\t\"crossplane.io/external-name\": \"test-bucket-a\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"forProvider\": {\n\t\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\"observedGeneration\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`)},\n\t\t\t\t\t\t\t\"xbuckets-test-bucket-b\": {Resource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n\t\t\t\t\t\t\t\t\"kind\": \"Bucket\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"annotations\": {\n\t\t\t\t\t\t\t\t\t\t\"crossplane.io/external-name\": \"test-bucket-b\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"forProvider\": {\n\t\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\"observedGeneration\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`)},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tConditions: []*fnv1.Condition{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tType:   \"FunctionSuccess\",\n\t\t\t\t\t\t\tStatus: fnv1.Status_STATUS_CONDITION_TRUE,\n\t\t\t\t\t\t\tReason: \"Success\",\n\t\t\t\t\t\t\tTarget: fnv1.Target_TARGET_COMPOSITE_AND_CLAIM.Enum(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tf := &Function{log: logging.NewNopLogger()}\n\t\t\trsp, err := f.RunFunction(tc.args.ctx, tc.args.req)\n\n\t\t\tif diff := cmp.Diff(tc.want.rsp, rsp, protocmp.Transform()); diff != \"\" {\n\t\t\t\tt.Errorf(\"%s\\nf.RunFunction(...): -want rsp, +got rsp:\\n%s\", tc.reason, diff)\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(tc.want.err, err, cmpopts.EquateErrors()); diff != \"\" {\n\t\t\t\tt.Errorf(\"%s\\nf.RunFunction(...): -want err, +got err:\\n%s\", tc.reason, diff)\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Required Fields in Nested Objects for Crossplane XRD\nDESCRIPTION: This YAML example illustrates how to configure multiple required fields in nested objects within a Crossplane XRD schema. It shows the structure for defining required fields at different levels of the object hierarchy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Removed for brevity\n- name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              size:\n                type: string  \n              name:\n                type: string \n              location:\n                type: object\n                properties:\n                  country: \n                    type: string \n                  zone:\n                    type: string\n                required:\n                  - country\n            required:  \n              - size\n              - location\n```\n\n----------------------------------------\n\nTITLE: Defining CompositeResourceDefinition in YAML\nDESCRIPTION: Creates a custom API endpoint for composite resources by defining a CompositeResourceDefinition (XRD).\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: xMyDatabase\n    plural: xmydatabases\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Schema Versions in Crossplane XRD\nDESCRIPTION: This example shows how to define multiple versions of an API in an XRD. The v1alpha1 version has only a 'region' field, while the v1 version adds a 'size' field, demonstrating non-breaking schema evolution.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string  \n  - name: v1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string \n              size:\n                type: string            \n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with External Secret Stores Enabled\nDESCRIPTION: Installs Crossplane using Helm with the External Secret Stores feature flag enabled.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install crossplane crossplane-stable/crossplane --namespace crossplane-system --create-namespace --set args='{--enable-external-secret-stores}'\n```\n\n----------------------------------------\n\nTITLE: Checking Provider Installation Progress\nDESCRIPTION: These shell commands demonstrate how to check the installation progress of a provider, showing its INSTALLED and HEALTHY status during and after installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Enabling Claim Creation with Composite Resource Definition\nDESCRIPTION: This YAML shows how to configure a Composite Resource Definition to enable Claims. The claimNames.kind field specifies the kind of Claims that developers can create, providing namespace-scoped access to resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/introduction.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource Definition (XRD)\nspec:\n  group: test.example.org\n  names:\n    kind: MyComputeResource\n  claimNames:\n    kind: computeClaim\n  # Removed for brevity \n```\n\n----------------------------------------\n\nTITLE: Defining a Composition for MyVPC Resource\nDESCRIPTION: This YAML snippet defines a Composition for a MyVPC resource, specifying the pipeline and resource configuration for creating a VPC in AWS.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  labels:\n    channel: dev\n  name: myvpcs.aws.example.upbound.io\nspec:\n  writeConnectionSecretsToNamespace: crossplane-system\n  compositeTypeRef:\n    apiVersion: aws.example.upbound.io/v1alpha1\n    kind: MyVPC\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: my-vpc\n        base:\n          apiVersion: ec2.aws.upbound.io/v1beta1\n          kind: VPC\n          spec:\n            forProvider:\n              region: us-west-1\n              cidrBlock: 192.168.0.0/16\n              enableDnsSupport: true\n              enableDnsHostnames: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CompositeResourceDefinition in YAML\nDESCRIPTION: This snippet shows the basic structure of a CompositeResourceDefinition (XRD) in Crossplane. It defines a custom API group, name, and version for a new XMyDatabase resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMyDatabase\n    plural: xmydatabases\n  versions:\n  - name: v1alpha1\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource Definition (XRD) with Schema Validation\nDESCRIPTION: This YAML defines a Composite Resource Definition that creates a custom API for compute resources. It specifies the parameters developers can use, restricting storage options to either 'small' or 'large' using OpenAPI validation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource Definition (XRD)\nspec:\n  group: test.example.org\n  names:\n    kind: MyComputeResource\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              storage:\n                type: string\n                oneOf:\n                  - pattern: '^small$'\n                  - pattern: '^large$'\n            required:\n            - storage  \n```\n\n----------------------------------------\n\nTITLE: Configuring XR Resource for Crossplane Function Testing\nDESCRIPTION: This YAML file defines a Crossplane XBuckets composite resource with a region and list of bucket names. This resource will be used to test the composition function that creates AWS S3 buckets based on these specifications.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Creating and Using PatchSets for Reusable Patches\nDESCRIPTION: Example of creating a PatchSet to define patches once and reuse them across multiple resources in the composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\npatchSets:\n- name: my-patchset\n  patches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: spec.forProvider.region\nresources:\n- name: bucket1\n  base:\n    # Removed for brevity\n  patches:\n    - type: PatchSet\n      patchSetName: my-patchset\n- name: bucket2\n  base:\n    # Removed for brevity\n  patches:\n    - type: PatchSet\n      patchSetName: my-patchset\n```\n\n----------------------------------------\n\nTITLE: Running Crossplane Helm Installation Dry-Run\nDESCRIPTION: This snippet demonstrates how to perform a dry-run installation of Crossplane using Helm, which shows all the components that would be installed without actually installing them.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--dry-run --debug \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Checking Provider Health Status with kubectl\nDESCRIPTION: This shell command shows how to list providers and check their installation and health status, useful for identifying providers with dependency issues.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Level AWS ProviderConfig in Crossplane\nDESCRIPTION: This YAML snippet shows how to create a user-level ProviderConfig for AWS that references credentials stored in a Kubernetes Secret named 'my-key'. This configuration would be used for resources that should be managed with user-level permissions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: user-keys\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: my-key\n      key: secret-key\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Azure Credentials\nDESCRIPTION: kubectl command to create a Kubernetes secret containing Azure service principal credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-azure.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric azure-secret \\\n-n crossplane-system \\\n--from-file=creds=./azure-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Implementing RunFunction for S3 Bucket Creation in Go\nDESCRIPTION: This snippet shows the implementation of the RunFunction method for a Crossplane composition function. It processes input parameters from a composite resource and generates desired S3 bucket resources based on those parameters.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n\trsp := response.To(req, response.DefaultTTL)\n\n\txr, err := request.GetObservedCompositeResource(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get observed composite resource from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\tregion, err := xr.Resource.GetString(\"spec.region\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.region field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\tnames, err := xr.Resource.GetStringArray(\"spec.names\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.names field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\tdesired, err := request.GetDesiredComposedResources(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get desired resources from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\t_ = v1beta1.AddToScheme(composed.Scheme)\n\n\tfor _, name := range names {\n\t\tb := &v1beta1.Bucket{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\tAnnotations: map[string]string{\n\t\t\t\t\t\"crossplane.io/external-name\": name,\n\t\t\t\t},\n\t\t\t},\n\t\t\tSpec: v1beta1.BucketSpec{\n\t\t\t\tForProvider: v1beta1.BucketParameters{\n\t\t\t\t\tRegion: ptr.To[string](region),\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\tcd, err := composed.From(b)\n\t\tif err != nil {\n\t\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot convert %T to %T\", b, &composed.Unstructured{}))\n\t\t\treturn rsp, nil\n\t\t}\n\n\t\tdesired[resource.Name(\"xbuckets-\"+name)] = &resource.DesiredComposed{Resource: cd}\n\t}\n\n\tif err := response.SetDesiredComposedResources(rsp, desired); err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot set desired composed resources in %T\", rsp))\n\t\treturn rsp, nil\n\t}\n\n\treturn rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Claim in YAML\nDESCRIPTION: Example of a Claim definition for a compute resource in Crossplane. Shows the basic structure including apiVersion, kind, metadata, and spec fields with size specification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/introduction.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Claim\napiVersion: test.example.org/v1alpha1\nkind: computeClaim\nmetadata:\n  name: myClaim\n  namespace: devGroup\nspec:\n  size: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket with User ProviderConfig in YAML\nDESCRIPTION: This snippet demonstrates creating an AWS S3 Bucket resource using the 'user-keys' ProviderConfig for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  name: user-bucket\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: user-keys\n```\n\n----------------------------------------\n\nTITLE: Basic Composition using Function Patch and Transform\nDESCRIPTION: An example Composition that uses Function Patch and Transform to create an Amazon S3 Bucket managed resource from an AcmeBucket XR, copying the desired region from the XR to the Bucket resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: AcmeBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n        patches:\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.desiredRegion\n          toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Creating User ProviderConfig for AWS in YAML\nDESCRIPTION: This snippet demonstrates creating a ProviderConfig named 'user-keys' for AWS, using a specific Kubernetes secret for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: user-keys\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: my-key\n      key: secret-key\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Patch and Transform Function\nDESCRIPTION: This YAML snippet installs the patch-and-transform function, which is required for the Composition to work. It defines a Crossplane Function resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Composition in Crossplane\nDESCRIPTION: Example of a basic Composition template definition that specifies the composite type reference for managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: test.example.org\nspec:\n  compositeTypeRef:\n    apiVersion: test.example.org/v1alpha1\n    kind: MyComputeResource\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating a Crossplane Claim with Connection Secret Reference\nDESCRIPTION: A YAML example of a Crossplane Claim that specifies where to write the connection secrets. The Claim references a secret name where Crossplane will store the connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/connection-details.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: SecretTest\nmetadata:\n  name: test-secrets\n  namespace: default\nspec:\n  writeConnectionSecretToRef:\n    name: my-access-key-secret\n```\n\n----------------------------------------\n\nTITLE: Creating a NoSQLClaim in a Namespace\nDESCRIPTION: Creates a NoSQLClaim in the crossplane-test namespace. Claims are namespace-scoped representations of Crossplane's custom APIs that allow namespace isolation for multi-tenancy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: database.example.com/v1alpha1\nkind: NoSQLClaim\nmetadata:\n  name: my-nosql-database\n  namespace: crossplane-test\nspec:\n  location: \"US\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource Definition (XRD) for MySQL\nDESCRIPTION: Creates a CompositeResourceDefinition that defines both cluster-scoped XMySQLInstance and namespace-scoped MySQLInstance resources. This enables platform builders to create abstractions that users can consume as claims in their namespaces.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/multi-tenant.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xmysqlinstances.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMySQLInstance\n    plural: xmysqlinstances\n  claimNames:\n    kind: MySQLInstance\n    plural: mysqlinstances\n...\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket with Generated Name\nDESCRIPTION: YAML definition for creating an S3 bucket with a randomly generated name to ensure global uniqueness.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-managed-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.m.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  namespace: default\n  generateName: crossplane-bucket-\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Displaying Crossplane Version Information (Shell)\nDESCRIPTION: The 'crossplane version' command returns the version of Crossplane CLI and the control plane. It shows both the client and server versions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane version\nClient Version: v1.17.0\nServer Version: v1.17.0\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket as Managed Resource\nDESCRIPTION: This YAML configuration creates an S3 bucket in AWS as a managed resource through Crossplane. It specifies the bucket name prefix, AWS region, and references the default provider configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  generateName: crossplane-bucket-\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: default\n```\n\n----------------------------------------\n\nTITLE: Installing a Crossplane Configuration Package\nDESCRIPTION: This YAML snippet demonstrates how to install a Crossplane Configuration package using a Configuration object. It specifies the package location and name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: configuration-quickstart\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Importing GCP Network with External Name Annotation\nDESCRIPTION: YAML configuration showing how to import an existing GCP Network using the crossplane.io/external-name annotation. The external name must match the network name in GCP.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/import-existing-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: compute.gcp.crossplane.io/v1beta1\nkind: Network\nmetadata:\n  annotations:\n    crossplane.io/external-name: my-existing-network\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket with Admin Credentials\nDESCRIPTION: Example of creating an AWS S3 bucket using the admin-level ProviderConfig credentials. Shows how to use different authentication contexts for the same resource type.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  name: user-bucket\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: admin-keys\n```\n\n----------------------------------------\n\nTITLE: Complete Python Crossplane Function Implementation\nDESCRIPTION: The full implementation of a Crossplane function in Python that creates AWS S3 buckets, including imports, class definition, and detailed comments explaining the function's logic.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"A Crossplane composition function.\"\"\"\n\nimport grpc\nfrom crossplane.function import logging, response\nfrom crossplane.function.proto.v1 import run_function_pb2 as fnv1\nfrom crossplane.function.proto.v1 import run_function_pb2_grpc as grpcv1\n\n\nclass FunctionRunner(grpcv1.FunctionRunnerService):\n    \"\"\"A FunctionRunner handles gRPC RunFunctionRequests.\"\"\"\n\n    def __init__(self):\n        \"\"\"Create a new FunctionRunner.\"\"\"\n        self.log = logging.get_logger()\n\n    async def RunFunction(\n        self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext\n    ) -> fnv1.RunFunctionResponse:\n        \"\"\"Run the function.\"\"\"\n        # Create a logger for this request.\n        log = self.log.bind(tag=req.meta.tag)\n        log.info(\"Running function\")\n\n        # Create a response to the request. This copies the desired state and\n        # pipeline context from the request to the response.\n        rsp = response.to(req)\n\n        # Get the region and a list of bucket names from the observed composite\n        # resource (XR). Crossplane represents resources using the Struct\n        # well-known protobuf type. The Struct Python object can be accessed\n        # like a dictionary.\n        region = req.observed.composite.resource[\"spec\"][\"region\"]\n        names = req.observed.composite.resource[\"spec\"][\"names\"]\n\n        # Add a desired S3 bucket for each name.\n        for name in names:\n            # Crossplane represents desired composed resources using a protobuf\n            # map of messages. This works a little like a Python defaultdict.\n            # Instead of assigning to a new key in the dict-like map, you access\n            # the key and mutate its value as if it did exist.\n            #\n            # The below code works because accessing the xbuckets-{name} key\n            # automatically creates a new, empty fnv1.Resource message. The\n            # Resource message has a resource field containing an empty Struct\n            # object that can be populated from a dictionary by calling update.\n            #\n            # https://protobuf.dev/reference/python/python-generated/#map-fields\n            rsp.desired.resources[f\"xbuckets-{name}\"].resource.update(\n                {\n                    \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                    \"kind\": \"Bucket\",\n                    \"metadata\": {\n                        \"annotations\": {\n                            \"crossplane.io/external-name\": name,\n                        },\n                    },\n                    \"spec\": {\n                        \"forProvider\": {\n                            \"region\": region,\n                        },\n                    },\n                }\n            )\n\n        # Log what the function did. This will only appear in the function's pod\n        # logs. A function can use response.normal() and response.warning() to\n        # emit Kubernetes events associated with the XR it's operating on.\n        log.info(\"Added desired buckets\", region=region, count=len(names))\n\n        return rsp\n```\n\n----------------------------------------\n\nTITLE: Defining Custom NoSQL API Schema\nDESCRIPTION: Defines a custom API schema for a NoSQL database resource, specifying the API version, kind, and allowed configuration options.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.example.com/v1alpha1\nkind: NoSQL\nmetadata:\n  name: my-nosql-database\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Provider with Kubernetes Provider Resource\nDESCRIPTION: Demonstrates how to install a Crossplane Provider using a Kubernetes Provider resource, specifying the package location and version\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Crossplane Composition Function in Go\nDESCRIPTION: This Go function demonstrates a simple 'Hello World' composition function that responds to a RunFunctionRequest with a greeting message.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n        rsp := response.To(req, response.DefaultTTL)\n        response.Normal(rsp, \"Hello world!\")\n        return rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition Update Policy in Crossplane XRD\nDESCRIPTION: This YAML snippet shows how to set the default Composition update policy to 'Manual' in an XRD. This prevents composite resources and Claims from automatically using new Composition revisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositionUpdatePolicy: Manual\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Schema for Resource Validation\nDESCRIPTION: Example of a Composite Resource Definition with OpenAPI schema validation defining allowed storage values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/introduction.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource Definition (XRD)\nspec:\n  group: test.example.org\n  names:\n    kind: MyComputeResource\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              storage:\n                type: string\n                oneOf:\n                  - pattern: '^small$'\n                  - pattern: '^large$'\n            required:\n            - storage\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Private Registry Authentication\nDESCRIPTION: Provider configuration demonstrating how to set packagePullSecrets for authenticating with private registries.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  packagePullSecrets: \n    - name: example-secret\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane API Resources\nDESCRIPTION: This command lists all the Kubernetes API resources that contain 'crossplane' in their name, showing the Custom Resource Definitions (CRDs) that Crossplane creates. It demonstrates the various API endpoints available for managing cloud infrastructure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources  | grep crossplane\ncompositeresourcedefinitions      xrd,xrds     apiextensions.crossplane.io/v1         false        CompositeResourceDefinition\ncompositionrevisions              comprev      apiextensions.crossplane.io/v1         false        CompositionRevision\ncompositions                      comp         apiextensions.crossplane.io/v1         false        Composition\nenvironmentconfigs                envcfg       apiextensions.crossplane.io/v1beta1    false        EnvironmentConfig\nusages                                         apiextensions.crossplane.io/v1alpha1   false        Usage\nconfigurationrevisions                         pkg.crossplane.io/v1                   false        ConfigurationRevision\nconfigurations                                 pkg.crossplane.io/v1                   false        Configuration\ncontrollerconfigs                              pkg.crossplane.io/v1alpha1             false        ControllerConfig\ndeploymentruntimeconfigs                       pkg.crossplane.io/v1beta1              false        DeploymentRuntimeConfig\nfunctionrevisions                              pkg.crossplane.io/v1beta1              false        FunctionRevision\nfunctions                                      pkg.crossplane.io/v1beta1              false        Function\nlocks                                          pkg.crossplane.io/v1beta1              false        Lock\nproviderrevisions                              pkg.crossplane.io/v1                   false        ProviderRevision\nproviders                                      pkg.crossplane.io/v1                   false        Provider\nstoreconfigs                                   secrets.crossplane.io/v1alpha1         false        StoreConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring External Secret Stores with StoreConfig in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to configure a Crossplane Composition to publish connection details to an external secret store like HashiCorp Vault using a StoreConfig reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: vault\n# Removed for brevity.\n---\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  publishConnectionDetailsWithStoreConfigRef: \n    name: vault\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing a Crossplane Configuration with Image Digest\nDESCRIPTION: This YAML snippet shows how to install a Crossplane Configuration package using an image digest instead of a tag for deterministic installations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: configuration-quickstart\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/configuration-quickstart@sha256:ef9795d146190637351a5c5848e0bab5e0c190fec7780f6c426fbffa0cb68358\n```\n\n----------------------------------------\n\nTITLE: Using initProvider in Crossplane NodeGroup Resource\nDESCRIPTION: A YAML configuration for an EKS NodeGroup that uses initProvider to set initial values that may change after creation. The example shows setting an initial desiredSize that an autoscaler might change later, while configuring managementPolicies to avoid late initialization conflicts.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: eks.aws.upbound.io/v1beta1\nkind: NodeGroup\nmetadata:\n  name: sample-eks-ng\nspec:\n  managementPolicies: [\"Observe\", \"Create\", \"Update\", \"Delete\"]\n  initProvider:\n    scalingConfig:\n      - desiredSize: 1\n  forProvider:\n    region: us-west-1\n    scalingConfig:\n      - maxSize: 4\n        minSize: 1\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane using Helm\nDESCRIPTION: Command to install Crossplane using Helm package manager. The command specifies the repository, namespace, and creates the namespace if it doesn't already exist.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Managing Nested Required Fields in Crossplane XRD\nDESCRIPTION: This XRD example demonstrates how to handle multiple required fields in nested objects. It requires 'size' and 'location' in the top-level spec, and within the 'location' object, requires 'country' while making 'zone' optional.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Removed for brevity\n- name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              size:\n                type: string  \n              name:\n                type: string \n              location:\n                type: object\n                properties:\n                  country: \n                    type: string \n                  zone:\n                    type: string\n                required:\n                  - country\n            required:  \n              - size\n              - location\n```\n\n----------------------------------------\n\nTITLE: Implementing S3 Bucket Creation Function in Go\nDESCRIPTION: This snippet demonstrates a more complex Crossplane composition function that creates S3 buckets based on input parameters. It shows how to read from the composite resource, create desired resources, and handle errors.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n\trsp := response.To(req, response.DefaultTTL)\n\n\txr, err := request.GetObservedCompositeResource(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get observed composite resource from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\tregion, err := xr.Resource.GetString(\"spec.region\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.region field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\tnames, err := xr.Resource.GetStringArray(\"spec.names\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.names field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\tdesired, err := request.GetDesiredComposedResources(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get desired resources from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\t_ = v1beta1.AddToScheme(composed.Scheme)\n\n\tfor _, name := range names {\n\t\tb := &v1beta1.Bucket{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\tAnnotations: map[string]string{\n\t\t\t\t\t\"crossplane.io/external-name\": name,\n\t\t\t\t},\n\t\t\t},\n\t\t\tSpec: v1beta1.BucketSpec{\n\t\t\t\tForProvider: v1beta1.BucketParameters{\n\t\t\t\t\tRegion: ptr.To[string](region),\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\tcd, err := composed.From(b)\n\t\tif err != nil {\n\t\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot convert %T to %T\", b, &composed.Unstructured{}))\n\t\t\treturn rsp, nil\n\t\t}\n\n\t\tdesired[resource.Name(\"xbuckets-\"+name)] = &resource.DesiredComposed{Resource: cd}\n\t}\n\n\tif err := response.SetDesiredComposedResources(rsp, desired); err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot set desired composed resources in %T\", rsp))\n\t\treturn rsp, nil\n\t}\n\n\treturn rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Secrets in Crossplane Composition\nDESCRIPTION: This snippet shows a Composition that defines two AccessKey resources, each with their own connection secret configuration. It demonstrates how to specify where connection secrets should be written using writeConnectionSecretsToNamespace and writeConnectionSecretToRef.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key1\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1-secret\n      - name: key2\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2-secret\n      # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Schema Versions in Crossplane XRD\nDESCRIPTION: Example showing how to define multiple API versions in a Crossplane XRD. The v1alpha1 version has only a 'region' field, while the newer v1 version expands the API to include both 'region' and 'size' fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string  \n  - name: v1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string \n              size:\n                type: string            \n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Multiple Custom Settings\nDESCRIPTION: Example of installing Crossplane with multiple customizations (pull policy and replicas) using comma-separated Helm arguments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n--set image.pullPolicy=Always,replicas=2\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Provider Settings\nDESCRIPTION: YAML configuration for GCP ProviderConfig that specifies project ID and credentials reference. This links the provider with the GCP credentials stored in the Kubernetes secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  projectID: $@<PROJECT_ID>$@\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: gcp-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource (XR) in Crossplane\nDESCRIPTION: A YAML example demonstrating a Composite Resource in Crossplane. Unlike Claims, Composite Resources are cluster-scoped and don't have a namespace specification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/introduction.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource (XR)\napiVersion: test.example.org/v1alpha1\nkind: MyComputeResource\nmetadata:\n  name: my-resource\nspec:\n  storage: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Manually Importing GCP Network Resource\nDESCRIPTION: Example of importing an existing GCP network by creating a managed resource with crossplane.io/external-name annotation\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/import-existing-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: compute.gcp.crossplane.io/v1beta1\nkind: Network\nmetadata:\n  name: imported-network\n  annotations:\n    crossplane.io/external-name: my-existing-network\nspec:\n  forProvider: {}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS RDS Instance with Crossplane\nDESCRIPTION: Demonstrates how to create an RDS instance using Crossplane's AWS provider, including instance configuration and credentials reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/multi-tenant.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: rdsmysql\nspec:\n  forProvider:\n    region: us-east-1\n    dbInstanceClass: db.t3.medium\n    masterUsername: masteruser\n    allocatedStorage: 20\n    engine: mysql\n    engineVersion: \"5.6.35\"\n    skipFinalSnapshotBeforeDeletion: true\n  providerConfigRef:\n    name: cool-aws-creds\n  writeConnectionSecretToRef:\n    namespace: crossplane-system\n    name: aws-rdsmysql-conn\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider Authentication with ProviderConfig in YAML\nDESCRIPTION: This snippet shows how to create a ProviderConfig for AWS authentication using a Kubernetes Secret. It specifies the credentials source and the secret reference details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: aws-provider\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Rendering Composition Output with Crossplane CLI\nDESCRIPTION: This shell command example shows how to use the Crossplane CLI to render resources from specified YAML files. The output includes the composite resource as well as the generated resources by the composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Composition in YAML for Crossplane\nDESCRIPTION: This YAML file defines a Composition for Crossplane, specifying how to compose the XBuckets resource using a pipeline with a function reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: create-buckets\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBuckets\n  mode: Pipeline\n  pipeline:\n  - step: create-buckets\n    functionRef:\n      name: function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: ToCompositeFieldPath Patch Example\nDESCRIPTION: Shows how to use ToCompositeFieldPath to write data from a composed resource back to the composite resource. The example demonstrates copying a hostedZoneId to a label in the composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: ToCompositeFieldPath\n      fromFieldPath: status.atProvider.hostedZoneId\n      toFieldPath: metadata.labels['ZoneID']\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Crossplane Version\nDESCRIPTION: Example command showing how to install a specific version of Crossplane using Helm.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-stable/crossplane \\\n--version 1.10.0\n```\n\n----------------------------------------\n\nTITLE: Pushing a Package to Registry with xpkg push\nDESCRIPTION: Command for pushing a Crossplane package file to a package registry. By default, it looks for a single .xpkg file in the current directory, but specific files can be specified with the -f flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push <package>\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection Details in Crossplane Composition\nDESCRIPTION: This YAML snippet shows how to specify connection details for an AccessKey resource in a Crossplane Composition. It defines which secret keys should be stored for the resource, including user, password, key, and SMTP details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n          - name: password\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: password\n          - name: key\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.secret\n          - name: smtp\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.ses_smtp_password_v4\n      # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining a Namespaced Composite Resource (XR) in Crossplane v2\nDESCRIPTION: YAML configuration for a namespaced App composite resource that demonstrates how XRs work in Crossplane v2, including the new spec.crossplane structure and references to composed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/whats-new/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: App\nmetadata:\n  namespace: default\n  name: my-app\nspec:\n  image: nginx\n  crossplane:\n    compositionRef:\n      name: app-kcl\n    compositionRevisionRef:\n      name: app-kcl-41b6efe\n    resourceRefs:\n    - apiVersion: apps/v1\n      kind: Deployment\n      name: my-app-9bj8j\n    - apiVersion: v1\n      kind: Service\n      name: my-app-bflc4\n```\n\n----------------------------------------\n\nTITLE: Creating Composition for GCP Service Account and Key in Crossplane\nDESCRIPTION: This YAML snippet defines a Composition to create a Service Account and Service Account Key in GCP. It uses the patch-and-transform function to generate resources and specifies connection details for secret storage in Vault.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: essinstances.ess.example.org\n  labels:\n    feature: ess\nspec:\n  publishConnectionDetailsWithStoreConfigRef: \n    name: vault\n  compositeTypeRef:\n    apiVersion: ess.example.org/v1alpha1\n    kind: CompositeESSInstance\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: serviceaccount\n          base:\n            apiVersion: iam.gcp.crossplane.io/v1alpha1\n            kind: ServiceAccount\n            metadata:\n              name: ess-test-sa\n            spec:\n              forProvider:\n                displayName: a service account to test ess\n        - name: serviceaccountkey\n          base:\n            apiVersion: iam.gcp.crossplane.io/v1alpha1\n            kind: ServiceAccountKey\n            spec:\n              forProvider:\n                serviceAccountSelector:\n                  matchControllerRef: true\n              publishConnectionDetailsTo:\n                name: ess-mr-conn\n                metadata:\n                  labels:\n                    environment: development\n                    team: backend\n                configRef:\n                  name: vault\n          connectionDetails:\n            - name: publicKey\n              type: FromConnectionSecretKey\n              fromConnectionSecretKey: publicKey\n            - name: publicKey\n              type: FromConnectionSecretKey\n              fromConnectionSecretKey: publicKeyType\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Crossplane Providers\nDESCRIPTION: Command to list all Crossplane providers installed in the Kubernetes cluster, showing their installation status and package references.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider Authentication with Secret Credentials in Crossplane\nDESCRIPTION: Defines a basic ProviderConfig for AWS that configures authentication using credentials stored in a Kubernetes Secret. The Provider pod will look for credentials in the 'aws-creds' Secret within the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: aws-provider\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Defining CEL Validation Rules in Crossplane XRD\nDESCRIPTION: Example of a Crossplane XRD (Composite Resource Definition) that implements CEL validation rules to ensure replica count stays within defined minimum and maximum bounds. The validation rule checks if replicas value is between minReplicas and maxReplicas.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: myXR.crossplane.io\nspec:\n# Removed for brevity\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              x-kubernetes-validations:\n              - rule: \"self.minReplicas <= self.replicas && self.replicas <= self.maxReplicas\"\n                message: \"replicas should be in between minReplicas and maxReplicas.\"\n              properties:\n                minReplicas:\n                  type: integer\n                maxReplicas:\n                  type: integer\n                replicas: \n                  type: integer\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Patching Between Resources\nDESCRIPTION: Example showing ToCompositeFieldPath and FromCompositeFieldPath patches between two S3 buckets where data is written to and read from the composite resource status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n  patches:\n    - type: ToCompositeFieldPath\n      fromFieldPath: metadata.name\n      toFieldPath: status.secondResource\n- name: bucket2\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: status.secondResource\n      toFieldPath: metadata.labels['secondResource']\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider with Credentials\nDESCRIPTION: Kubernetes manifest that creates a ProviderConfig resource that connects the AWS provider with the secret containing AWS credentials. This configuration enables the provider to authenticate with AWS.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane CRDs in Kubernetes\nDESCRIPTION: Command output showing the initial Custom Resource Definitions (CRDs) installed by Crossplane in a Kubernetes cluster. Demonstrates the core components available after installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n❯ kubectl get crd\nNAME                                                    \ncompositeresourcedefinitions.apiextensions.crossplane.io\ncompositionrevisions.apiextensions.crossplane.io        \ncompositions.apiextensions.crossplane.io                \nconfigurationrevisions.pkg.crossplane.io                \nconfigurations.pkg.crossplane.io                        \ncontrollerconfigs.pkg.crossplane.io                     \ndeploymentruntimeconfigs.pkg.crossplane.io              \nenvironmentconfigs.apiextensions.crossplane.io          \nfunctionrevisions.pkg.crossplane.io                     \nfunctions.pkg.crossplane.io                             \nlocks.pkg.crossplane.io                                 \nproviderrevisions.pkg.crossplane.io                     \nproviders.pkg.crossplane.io                             \nstoreconfigs.secrets.crossplane.io                      \nusages.apiextensions.crossplane.io\n```\n\n----------------------------------------\n\nTITLE: Creating a Claim with Connection Secret Reference\nDESCRIPTION: Example of a Claim resource that specifies where to write connection secrets using writeConnectionSecretToRef configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: SecretTest\nmetadata:\n  name: test-secrets\n  namespace: default\nspec:\n  writeConnectionSecretToRef:\n    name: my-access-key-secret\n```\n\n----------------------------------------\n\nTITLE: Pausing Reconciliation for EC2 Instance in AWS Provider\nDESCRIPTION: This YAML snippet demonstrates how to pause reconciliation of a managed resource by applying the 'crossplane.io/paused' annotation. It's useful when modifying providers or preventing race conditions during edits.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\nmetadata:\n  name: my-rds-instance\n  annotations:\n    crossplane.io/paused: \"true\"\nspec:\n  forProvider:\n    region: us-west-1\n    instanceType: t2.micro\n```\n\n----------------------------------------\n\nTITLE: Custom API Definition Example\nDESCRIPTION: Example YAML showing the structure of a custom NoSQL database API definition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.example.com/v1alpha1\nkind: NoSQL\nmetadata:\n  name: my-nosql-database\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin-Level AWS Provider Authentication in Crossplane\nDESCRIPTION: Defines an admin-level ProviderConfig for AWS named 'admin-keys' that references credentials stored in a Kubernetes Secret. This configuration would be used for resources that require elevated permissions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: admin-keys\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: admin-key\n      key: admin-secret-key\n```\n\n----------------------------------------\n\nTITLE: Provisioning S3 Bucket on AWS with Crossplane\nDESCRIPTION: Creates an S3 bucket on AWS using Crossplane's Bucket resource. Configures private access control, location constraint, public access block settings, and resource tagging.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: s3.aws.crossplane.io/v1beta1\nkind: Bucket\nmetadata:\n  name: s3-vault-demo\nspec:\n  forProvider:\n    acl: private\n    locationConstraint: us-east-1\n    publicAccessBlockConfiguration:\n      blockPublicPolicy: true\n    tagging:\n      tagSet:\n        - key: Name\n          value: s3-vault-demo\n  providerConfigRef:\n    name: default\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket Creation Function Implementation\nDESCRIPTION: Enhanced implementation of RunFunction that creates AWS S3 buckets based on specified region and bucket names from the composite resource specification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def RunFunction(self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext) -> fnv1.RunFunctionResponse:\n    log = self.log.bind(tag=req.meta.tag)\n    log.info(\"Running function\")\n\n    rsp = response.to(req)\n\n    region = req.observed.composite.resource[\"spec\"][\"region\"]\n    names = req.observed.composite.resource[\"spec\"][\"names\"]\n\n    for name in names:\n        rsp.desired.resources[f\"xbuckets-{name}\"].resource.update(\n            {\n                \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                \"kind\": \"Bucket\",\n                \"metadata\": {\n                    \"annotations\": {\n                        \"crossplane.io/external-name\": name,\n                    },\n                },\n                \"spec\": {\n                    \"forProvider\": {\n                        \"region\": region,\n                    },\n                },\n            }\n        )\n\n    log.info(\"Added desired buckets\", region=region, count=len(names))\n\n    return rsp\n```\n\n----------------------------------------\n\nTITLE: Applying Regular Expression Transform in Crossplane Composition YAML\nDESCRIPTION: This snippet demonstrates how to use a regular expression transform in a Crossplane Composition to extract a part of an input string matching a specific pattern. It uses the 'Regexp' type with a 'match' pattern and a 'group' selector.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"euRegion\"]\n    transforms:\n      - type: string\n        string:\n          type: Regexp\n          regexp:\n            match: '^eu-(.*)-'\n            group: 1\n```\n\n----------------------------------------\n\nTITLE: Basic Crossplane Function Implementation in Go\nDESCRIPTION: A simple 'hello world' implementation of a Crossplane composition function that processes RunFunctionRequest and returns RunFunctionResponse with basic input handling.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n\tf.log.Info(\"Running Function\", \"tag\", req.GetMeta().GetTag())\n\n\trsp := response.To(req, response.DefaultTTL)\n\n\tin := &v1beta1.Input{}\n\tif err := request.GetInput(req, in); err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get Function input from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\tresponse.Normalf(rsp, \"I was run with input %q\", in.Example)\n\treturn rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Composition Function in YAML\nDESCRIPTION: This snippet demonstrates how to install a composition function using a Crossplane Function object. It specifies the function package location and name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Creating a Claim in YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a Claim using the custom API defined in the CompositeResourceDefinition. It specifies the apiVersion, kind, and metadata for the Claim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/claims.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: database\nmetadata:\n  name: my-claimed-database\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Claim Connection Secrets\nDESCRIPTION: Example of configuring a Claim to write connection details to a Kubernetes secret in the same namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/claims.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: database\nmetadata:\n  name: my-claimed-database\nspec:\n  writeConnectionSecretToRef:\n    name: my-claim-secret\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket as Managed Resource\nDESCRIPTION: This YAML configuration creates an AWS S3 bucket as a managed resource in Crossplane. It specifies the bucket name prefix, AWS region, and references the default ProviderConfig for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  generateName: crossplane-bucket-\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: default\n```\n\n----------------------------------------\n\nTITLE: Defining a ProviderConfig in Crossplane for AWS\nDESCRIPTION: A YAML configuration for creating a ProviderConfig in Crossplane. This ProviderConfig named 'user-keys' would contain the authentication details needed for managed resources to connect to AWS.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: user-keys\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Referencing Resource by External Name in Crossplane\nDESCRIPTION: Example of referencing another resource by its external name in a Crossplane managed resource. This shows how to specify a VPC ID directly in an AWS Subnet resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcId: vpc-01353cfe93950a8ff\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane using Helm\nDESCRIPTION: This shell script demonstrates how to install Crossplane v1.11.0 or later using Helm. It includes creating a namespace, adding the Helm repo, and installing Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace crossplane-system\nhelm repo add crossplane-master https://charts.crossplane.io/master/\nhelm repo update\nhelm install crossplane --namespace crossplane-system crossplane-master/crossplane --devel --version 1.11.0-rc.0.108.g0521c32e\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Virtual Network Resource\nDESCRIPTION: YAML configuration to create an Azure Virtual Network as a managed resource through Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: network.azure.upbound.io/v1beta1\nkind: VirtualNetwork\nmetadata:\n  name: crossplane-quickstart-network\nspec:\n  forProvider:\n    addressSpace:\n      - 10.0.0.0/16\n    location: \"Sweden Central\"\n    resourceGroupName: docs\n```\n\n----------------------------------------\n\nTITLE: Defining CompositeResourceDefinition with Connection Secret Keys\nDESCRIPTION: CompositeResourceDefinition that specifies which connection secret keys should be exposed to Claims. This defines the contract for what secret data will be available to consumers.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xsecrettests.example.org\nspec:\n  group: example.org\n  connectionSecretKeys:\n    - username\n    - password\n    - attribute.secret\n    - attribute.ses_smtp_password_v4\n    - key2-user\n    - key2-pass\n    - key2-secret\n    - key2-smtp\n  names:\n    kind: XSecretTest\n    plural: xsecrettests\n  claimNames:\n    kind: SecretTest\n    plural: secrettests\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource Definition\nDESCRIPTION: Example of creating a CompositeResourceDefinition (XRD) that defines both cluster-scoped and namespace-scoped custom resources for MySQL instances.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/multi-tenant.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xmysqlinstances.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMySQLInstance\n    plural: xmysqlinstances\n  claimNames:\n    kind: MySQLInstance\n    plural: mysqlinstances\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Composition for Azure VM Deployment\nDESCRIPTION: This YAML snippet defines a Crossplane Composition that creates an Azure Linux Virtual Machine, Network Interface, Subnet, Virtual Network, and Resource Group. It uses the patch-and-transform function to map user inputs to resource templates.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: crossplane-quickstart-vm-with-network\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: quickstart-vm\n          base:\n            apiVersion: compute.azure.upbound.io/v1beta1\n            kind: LinuxVirtualMachine\n            spec:\n              forProvider:\n                adminUsername: adminuser\n                adminSshKey:\n                  - publicKey: ssh-rsa\n                      AAAAB3NzaC1yc2EAAAADAQABAAABAQC+wWK73dCr+jgQOAxNsHAnNNNMEMWOHYEccp6wJm2gotpr9katuF/ZAdou5AaW1C61slRkHRkpRRX9FA9CYBiitZgvCCz+3nWNN7l/Up54Zps/pHWGZLHNJZRYyAB6j5yVLMVHIHriY49d/GZTZVNB8GoJv9Gakwc/fuEZYYl4YDFiGMBP///TzlI4jhiJzjKnEvqPFki5p2ZRJqcbCiF4pJrxUQR/RXqVFQdbRLZgYfJ8xGB878RENq3yQ39d8dVOkq4edbkzwcUmwwwkYVPIoDGsYLaRHnG+To7FvMeyO7xDVQkMKzopTQV8AuKpyvpqu0a9pWOMaiCyDytO7GGN\n                      example@docs.crossplane.io\n                    username: adminuser\n                location: \"Central US\"\n                osDisk:\n                  - caching: ReadWrite\n                    storageAccountType: Standard_LRS\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n                size: Standard_B1ms\n                sourceImageReference:\n                  - offer: debian-11\n                    publisher: Debian\n                    sku: 11-backports-gen2\n                    version: latest\n                networkInterfaceIdsSelector:\n                  matchControllerRef: true\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n        - name: quickstart-nic\n          base:\n            apiVersion: network.azure.upbound.io/v1beta1\n            kind: NetworkInterface\n            spec:\n              forProvider:\n                ipConfiguration:\n                  - name: crossplane-quickstart-configuration\n                    privateIpAddressAllocation: Dynamic\n                    subnetIdSelector:\n                      matchControllerRef: true\n                location: \"Central US\"\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n        - name: quickstart-subnet\n          base:\n            apiVersion: network.azure.upbound.io/v1beta1\n            kind: Subnet\n            spec:\n              forProvider:\n                addressPrefixes:\n                  - 10.0.1.0/24\n                virtualNetworkNameSelector:\n                  matchControllerRef: true\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n        - name: quickstart-network\n          base:\n            apiVersion: network.azure.upbound.io/v1beta1\n            kind: VirtualNetwork\n            spec:\n              forProvider:\n                addressSpace:\n                  - 10.0.0.0/16\n                location: \"Central US\"\n                resourceGroupNameSelector:\n                  matchControllerRef: true\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n        - name: crossplane-resourcegroup\n          base:\n            apiVersion: azure.upbound.io/v1beta1\n            kind: ResourceGroup\n            spec:\n              forProvider:\n                location: Central US\n          patches:\n            - type: FromCompositeFieldPath\n              fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"Sweden Central\"\n                    US: \"Central US\"\n  compositeTypeRef:\n    apiVersion: compute.example.com/v1alpha1\n    kind: VirtualMachine\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Credentials File\nDESCRIPTION: This INI-formatted file contains AWS access key credentials. It includes placeholders for the AWS access key ID and secret access key, which should be replaced with actual values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = $@<aws_access_key>$@\naws_secret_access_key = $@<aws_secret_key>$@\n```\n\n----------------------------------------\n\nTITLE: Creating Namespaced PubSub Claim\nDESCRIPTION: Creates a namespace-scoped PubSub claim that provisions the same GCP resources but within a specific Kubernetes namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: queue.example.com/v1alpha1\nkind: PubSubClaim\nmetadata:\n  name: my-pubsub-queue\n  namespace: crossplane-test\nspec:\n  location: \"US\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Monitoring Provider Installation Status\nDESCRIPTION: Shell commands and output showing provider installation status checks at different stages.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\nNAME                              INSTALLED   HEALTHY   PACKAGE                                                   AGE\ncrossplane-contrib-provider-aws   True        Unknown   xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0   63s\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\nNAME                              INSTALLED   HEALTHY   PACKAGE                                                   AGE\ncrossplane-contrib-provider-aws   True        True      xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0   88s\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket with Admin-Level ProviderConfig in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to create an AWS S3 Bucket managed resource using the 'admin-keys' ProviderConfig. By referencing a different ProviderConfig, this bucket will be managed using the admin-level credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  name: user-bucket\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: admin-keys\n```\n\n----------------------------------------\n\nTITLE: Composition with Patch and Transform Example\nDESCRIPTION: Example Composition that uses Function Patch and Transform to create an Amazon S3 Bucket managed resource from an AcmeBucket XR, copying the region value from the XR to the managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: AcmeBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n        patches:\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.desiredRegion\n          toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Creating XBucket Composite Resource in YAML\nDESCRIPTION: Example of creating a composite resource that Crossplane observes and sends to the composition function as part of the observed state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBucket\nmetadata:\n  name: example-render\nspec:\n  bucketRegion: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Composition Configuration for XBuckets Function in Crossplane\nDESCRIPTION: YAML definition for a Crossplane Composition that uses a pipeline mode to process XBuckets resources through the function-xbuckets composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: create-buckets\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBuckets\n  mode: Pipeline\n  pipeline:\n  - step: create-buckets\n    functionRef:\n      name: function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Master Helm Repository\nDESCRIPTION: This snippet shows how to add the Crossplane master Helm repository and update the local Helm chart cache. This is necessary for installing pre-release versions of Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/install.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-master https://charts.crossplane.io/master/\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Provisioning CloudSQLInstance on GCP\nDESCRIPTION: This snippet demonstrates how to provision a CloudSQLInstance (PostgreSQL database) on GCP using the configured provider-gcp. It specifies database version, region, and other settings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: database.gcp.crossplane.io/v1beta1\nkind: CloudSQLInstance\nmetadata:\n  name: postgres-vault-demo\nspec:\n  forProvider:\n    databaseVersion: POSTGRES_12\n    region: us-central1\n    settings:\n      tier: db-custom-1-3840\n      dataDiskType: PD_SSD\n      dataDiskSizeGb: 10\n  writeConnectionSecretToRef:\n    namespace: crossplane-system\n    name: cloudsqlpostgresql-conn\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Creating an S3 Bucket as a Managed Resource\nDESCRIPTION: Creates an AWS S3 bucket as a managed resource using Crossplane. The configuration specifies the bucket name with a generated suffix, the AWS region, and references the default provider configuration for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl create -f -\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  generateName: crossplane-bucket-\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: default\nEOF\n```\n\n----------------------------------------\n\nTITLE: Verifying S3 Bucket Creation\nDESCRIPTION: Checks the status of the S3 bucket created by Crossplane to confirm it was successfully provisioned in AWS. When READY and SYNCED are both True, the bucket has been successfully created.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get buckets\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Resource with Connection Secrets in Crossplane\nDESCRIPTION: This YAML snippet creates an AWS IAM AccessKey resource and specifies where to write its connection secrets. It includes the resource definition and the reference to the Kubernetes secret where the connection details will be stored.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: iam.aws.upbound.io/v1beta1\nkind: AccessKey\nmetadata:\n    name: test-accesskey\nspec:\n    forProvider:\n        userSelector:\n            matchLabels:\n                docs.crossplane.io: user\n    writeConnectionSecretToRef:\n        namespace: default\n        name: my-accesskey-secret\n```\n\n----------------------------------------\n\nTITLE: Example Composition using Function Patch and Transform\nDESCRIPTION: A sample Composition that uses Function Patch and Transform to create an Amazon S3 Bucket managed resource from an AcmeBucket composite resource, patching the region value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: AcmeBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n        patches:\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.desiredRegion\n          toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider with Credentials\nDESCRIPTION: YAML definition for a ProviderConfig resource that configures how the AWS provider authenticates with AWS. It references the previously created secret containing AWS credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket Composition Function Implementation\nDESCRIPTION: Advanced implementation of a Crossplane composition function that creates S3 buckets based on composite resource specifications. Handles region and bucket name processing, resource conversion, and error management.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n\trsp := response.To(req, response.DefaultTTL)\n\n\txr, err := request.GetObservedCompositeResource(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get observed composite resource from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\tregion, err := xr.Resource.GetString(\"spec.region\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.region field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\tnames, err := xr.Resource.GetStringArray(\"spec.names\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.names field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\tdesired, err := request.GetDesiredComposedResources(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get desired resources from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\t_ = v1beta1.AddToScheme(composed.Scheme)\n\n\tfor _, name := range names {\n\t\tb := &v1beta1.Bucket{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\tAnnotations: map[string]string{\n\t\t\t\t\t\"crossplane.io/external-name\": name,\n\t\t\t\t},\n\t\t\t},\n\t\t\tSpec: v1beta1.BucketSpec{\n\t\t\t\tForProvider: v1beta1.BucketParameters{\n\t\t\t\t\tRegion: ptr.To[string](region),\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\tcd, err := composed.From(b)\n\t\tif err != nil {\n\t\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot convert %T to %T\", b, &composed.Unstructured{}))\n\t\t\treturn rsp, nil\n\t\t}\n\n\t\tdesired[resource.Name(\"xbuckets-\"+name)] = &resource.DesiredComposed{Resource: cd}\n\t}\n\n\tif err := response.SetDesiredComposedResources(rsp, desired); err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot set desired composed resources in %T\", rsp))\n\t\treturn rsp, nil\n\t}\n\n\treturn rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Composition with Connection Details\nDESCRIPTION: Sample Composition configuration that defines connection secret handling for AWS IAM resources, including AccessKeys and Users. Specifies how connection details are written to namespaces and transformed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: xsecrettest.example.org\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  compositeTypeRef:\n    apiVersion: example.org/v1alpha1\n    kind: XSecretTest\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              userSelector:\n                matchControllerRef: true\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n```\n\n----------------------------------------\n\nTITLE: Multiple Schema Versions in XRD\nDESCRIPTION: Shows how to define multiple versions of an XRD schema, expanding the API definition while maintaining backwards compatibility\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string  \n  - name: v1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string \n              size:\n                type: string\n```\n\n----------------------------------------\n\nTITLE: Defining XRD names and metadata in YAML\nDESCRIPTION: This snippet shows how to properly name an XRD, including the required metadata.name format and the specification of kind and plural names.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMyDatabase\n    plural: xmydatabases\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Verifying Composite Resource Definition Status in Crossplane\nDESCRIPTION: This YAML snippet shows the output of the 'kubectl get xrd' command, which displays the status of Composite Resource Definitions. It includes information about whether the XRD is established and if it offers a Claim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl get xrd                                \nNAME                                ESTABLISHED   OFFERED   AGE\nxdatabases.custom-api.example.org   True          True      22m\n```\n\n----------------------------------------\n\nTITLE: Understanding a Complete Go Test File for Crossplane Functions\nDESCRIPTION: This snippet shows a complete Go test file for testing a Crossplane composition function. It demonstrates how to set up test cases, mock resources, and validate function responses using Go's testing package and helper utilities from the Crossplane SDK.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\t\"github.com/google/go-cmp/cmp/cmpopts\"\n\t\"google.golang.org/protobuf/testing/protocmp\"\n\t\"google.golang.org/protobuf/types/known/durationpb\"\n\n\t\"github.com/crossplane/crossplane-runtime/pkg/logging\"\n\n\tfnv1 \"github.com/crossplane/function-sdk-go/proto/v1\"\n\t\"github.com/crossplane/function-sdk-go/resource\"\n)\n\nfunc TestRunFunction(t *testing.T) {\n\ttype args struct {\n\t\tctx context.Context\n\t\treq *fnv1.RunFunctionRequest\n\t}\n\ttype want struct {\n\t\trsp *fnv1.RunFunctionResponse\n\t\terr error\n\t}\n\n\tcases := map[string]struct {\n\t\treason string\n\t\targs   args\n\t\twant   want\n\t}{\n\t\t\"AddTwoBuckets\": {\n\t\t\treason: \"The Function should add two buckets to the desired composed resources\",\n\t\t\targs: args{\n\t\t\t\treq: &fnv1.RunFunctionRequest{\n\t\t\t\t\tObserved: &fnv1.State{\n\t\t\t\t\t\tComposite: &fnv1.Resource{\n\t\t\t\t\t\t\t// MustStructJSON is a handy way to provide mock\n\t\t\t\t\t\t\t// resources.\n\t\t\t\t\t\t\tResource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"example.crossplane.io/v1alpha1\",\n\t\t\t\t\t\t\t\t\"kind\": \"XBuckets\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"name\": \"test\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\t\t\t\t\t\"names\": [\n\t\t\t\t\t\t\t\t\t\t\"test-bucket-a\",\n\t\t\t\t\t\t\t\t\t\t\"test-bucket-b\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\twant: want{\n\t\t\t\trsp: &fnv1.RunFunctionResponse{\n\t\t\t\t\tMeta: &fnv1.ResponseMeta{Ttl: durationpb.New(60 * time.Second)},\n\t\t\t\t\tDesired: &fnv1.State{\n\t\t\t\t\t\tResources: map[string]*fnv1.Resource{\n\t\t\t\t\t\t\t\"xbuckets-test-bucket-a\": {Resource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n\t\t\t\t\t\t\t\t\"kind\": \"Bucket\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"annotations\": {\n\t\t\t\t\t\t\t\t\t\t\"crossplane.io/external-name\": \"test-bucket-a\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"forProvider\": {\n\t\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\"observedGeneration\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`)},\n\t\t\t\t\t\t\t\"xbuckets-test-bucket-b\": {Resource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n\t\t\t\t\t\t\t\t\"kind\": \"Bucket\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"annotations\": {\n\t\t\t\t\t\t\t\t\t\t\"crossplane.io/external-name\": \"test-bucket-b\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"forProvider\": {\n\t\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\"observedGeneration\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`)},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tConditions: []*fnv1.Condition{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tType:   \"FunctionSuccess\",\n\t\t\t\t\t\t\tStatus: fnv1.Status_STATUS_CONDITION_TRUE,\n\t\t\t\t\t\t\tReason: \"Success\",\n\t\t\t\t\t\t\tTarget: fnv1.Target_TARGET_COMPOSITE_AND_CLAIM.Enum(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tf := &Function{log: logging.NewNopLogger()}\n\t\t\trsp, err := f.RunFunction(tc.args.ctx, tc.args.req)\n\n\t\t\tif diff := cmp.Diff(tc.want.rsp, rsp, protocmp.Transform()); diff != \"\" {\n\t\t\t\tt.Errorf(\"%s\\nf.RunFunction(...): -want rsp, +got rsp:\\n%s\", tc.reason, diff)\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(tc.want.err, err, cmpopts.EquateErrors()); diff != \"\" {\n\t\t\t\tt.Errorf(\"%s\\nf.RunFunction(...): -want err, +got err:\\n%s\", tc.reason, diff)\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Provider with External Secret Store Support\nDESCRIPTION: Installs a GCP Provider with a reference to the ControllerConfig that enables external secret stores.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp:v0.23.0-rc.0.19.ge9b75ee5\n  controllerConfigRef:\n    name: vault-config\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Status Checks for Crossplane Resources\nDESCRIPTION: Implements custom health checks for Crossplane resources using Lua scripts, handling both upbound.io and crossplane.io resources with specific status conditions and health states\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n  application.resourceTrackingMethod: annotation\n  resource.customizations: |\n    \"*.upbound.io/*\":\n      health.lua: |\n        health_status = {\n          status = \"Progressing\",\n          message = \"Provisioning ...\"\n        }\n\n        local function contains (table, val)\n          for i, v in ipairs(table) do\n            if v == val then\n              return true\n            end\n          end\n          return false\n        end\n\n        local has_no_status = {\n          \"ProviderConfig\",\n          \"ProviderConfigUsage\"\n        }\n\n        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then\n          health_status.status = \"Healthy\"\n          health_status.message = \"Resource is up-to-date.\"\n          return health_status\n        end\n\n        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then\n          if obj.kind == \"ProviderConfig\" and obj.status.users ~= nil then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is in use.\"\n            return health_status\n          end\n          return health_status\n        end\n\n        for i, condition in ipairs(obj.status.conditions) do\n          if condition.type == \"LastAsyncOperation\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Synced\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Ready\" then\n            if condition.status == \"True\" then\n              health_status.status = \"Healthy\"\n              health_status.message = \"Resource is up-to-date.\"\n              return health_status\n            end\n          end\n        end\n\n        return health_status\n\n    \"*.crossplane.io/*\":\n      health.lua: |\n        health_status = {\n          status = \"Progressing\",\n          message = \"Provisioning ...\"\n        }\n\n        local function contains (table, val)\n          for i, v in ipairs(table) do\n            if v == val then\n              return true\n            end\n          end\n          return false\n        end\n\n        local has_no_status = {\n          \"Composition\",\n          \"CompositionRevision\",\n          \"ControllerConfig\",\n          \"DeploymentRuntimeConfig\",\n          \"ImageConfig\",\n          \"ProviderConfig\",\n          \"ProviderConfigUsage\"\n        }\n        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is up-to-date.\"\n          return health_status\n        end\n\n        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then\n          if obj.kind == \"ProviderConfig\" and obj.status.users ~= nil then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is in use.\"\n            return health_status\n          end\n          return health_status\n        end\n\n        for i, condition in ipairs(obj.status.conditions) do\n          if condition.type == \"LastAsyncOperation\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Synced\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if contains({\"Ready\", \"Healthy\", \"Offered\", \"Established\"}, condition.type) then\n            if condition.status == \"True\" then\n              health_status.status = \"Healthy\"\n              health_status.message = \"Resource is up-to-date.\"\n              return health_status\n            end\n          end\n        end\n\n        return health_status\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Composition with Function Patch and Transform\nDESCRIPTION: Example of a Composition that uses Function Patch and Transform to create an Amazon S3 Bucket managed resource from an AcmeBucket composite resource, copying the region value from the composite resource to the managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: AcmeBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.m.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n        patches:\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.desiredRegion\n          toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Configuring managementPolicies in Crossplane Subnet Resource\nDESCRIPTION: A YAML example showing how to configure managementPolicies for a Subnet resource. The example restricts Crossplane's permissions to only creating, deleting, and observing the resource without making updates to it.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  managementPolicies: [\"Create\", \"Delete\", \"Observe\"]\n  forProvider:\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Multiple Command Line Settings\nDESCRIPTION: Example of installing Crossplane with multiple custom settings (image pull policy and replicas) using helm install command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/install.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n--set image.pullPolicy=Always,replicas=2\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider Authentication with Basic Credentials\nDESCRIPTION: Example of a basic AWS ProviderConfig that uses secret-based authentication. Specifies how the provider should retrieve credentials from a Kubernetes Secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: aws-provider\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition Pipeline in Crossplane\nDESCRIPTION: YAML configuration for setting up a Composition pipeline with patch and transform functionality.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: my-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: database\n        base:\n        patches:\n        - fromFieldPath: metadata.annotations\n          toFieldPath: metadata.annotations\n```\n\n----------------------------------------\n\nTITLE: Testing a Composition with Crossplane CLI in Shell\nDESCRIPTION: This shell command shows how to use the Crossplane CLI to preview the output of a composition by providing a composite resource, composition, and composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition with Secret Management in YAML\nDESCRIPTION: Example of a Crossplane Composition configuration that demonstrates secret management for multiple resources. Shows how to define writeConnectionSecretToRef and connectionDetails for different AccessKey resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/connection-details.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n      - name: key2\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2\n        connectionDetails:\n          - name: key2-user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n```\n\n----------------------------------------\n\nTITLE: Defining CompositeResourceDefinition for Connection Details in Crossplane\nDESCRIPTION: This YAML snippet defines a CompositeResourceDefinition that specifies the structure of a composite resource and the connection secret keys it should manage. It includes the API group, versions, and schema for the composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xsecrettests.example.org\nspec:\n  group: example.org\n  connectionSecretKeys:\n    - username\n    - password\n    - attribute.secret\n    - attribute.ses_smtp_password_v4\n    - key2-user\n    - key2-pass\n    - key2-secret\n    - key2-smtp\n  names:\n    kind: XSecretTest\n    plural: xsecrettests\n  claimNames:\n    kind: SecretTest\n    plural: secrettests\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n```\n\n----------------------------------------\n\nTITLE: Setting Default Composite Delete Policy in Crossplane XRD\nDESCRIPTION: This YAML snippet shows how to set the default composite delete policy to 'Foreground' in an XRD. This affects how associated resources are deleted when a claim is deleted.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositeDeletePolicy: Foreground\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Setting Default Composition Reference in Crossplane XRD\nDESCRIPTION: This YAML snippet demonstrates how to set a default Composition reference in a Crossplane XRD using the 'defaultCompositionRef' field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositionRef: \n    name: myComposition\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource Definition (XRD) in YAML\nDESCRIPTION: This YAML snippet defines a CompositeResourceDefinition (XRD) that creates a custom API endpoint 'mydatabases.example.org'. It specifies the API group, kind, and plural name for the custom resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: mydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: MyDatabase\n    plural: mydatabases\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Provider in Kubernetes\nDESCRIPTION: This YAML configuration installs the AWS S3 provider into the Kubernetes cluster. It defines a Provider resource that specifies the package to be installed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-s3\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Viewing a Claim's Connection Secret with Restricted Keys\nDESCRIPTION: This shell command shows a Claim's connection secret, which only contains the keys allowed by the XRD's connectionSecretKeys configuration, demonstrating how XRDs can be used to control which secrets are exposed to Claim objects.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret my-access-key-secret\nName:         my-access-key-secret\n\nData\n====\nkey2-user:  20 bytes\npassword:   40 bytes\nusername:   20 bytes\n```\n\n----------------------------------------\n\nTITLE: Defining AWS EC2 Instance Resource with Group, Kind, and Version in Crossplane\nDESCRIPTION: Example of how to define the basic structure of an AWS EC2 Instance managed resource in Crossplane, specifying the API version and kind.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Crossplane Composition with S3 Bucket\nDESCRIPTION: Example of a basic Composition that creates an Amazon S3 Bucket managed resource when an AcmeBucket composite resource is created. Uses Pipeline mode with the patch-and-transform function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: AcmeBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Storage Bucket\nDESCRIPTION: YAML configuration for creating a GCP storage bucket as a managed resource through Crossplane, demonstrating the creation of cloud resources via Kubernetes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl create -f -\napiVersion: storage.gcp.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  generateName: crossplane-bucket-\n  labels:\n    docs.crossplane.io/example: provider-gcp\nspec:\n  forProvider:\n    location: US\n  providerConfigRef:\n    name: default\nEOF\n```\n\n----------------------------------------\n\nTITLE: Visualizing Combined Composition and Managed Resource Flow\nDESCRIPTION: This complex diagram illustrates how Composition and Managed Resources can work together in Crossplane. A user interacts with a custom App API, which triggers the Composition engine to create Deployment, Service, and RDS Instance resources. The Managed Resource Controller then creates the actual RDS Instance in AWS.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/whats-crossplane/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nuser(User)\n\nsubgraph control [Control Plane]\n  api(App API)\n\n  subgraph crossplane [Composition Engine]\n    fn(Python Function)\n  end\n\n  deployment(Deployment API)\n  service(Service API)\n  instance(RDS Instance API)\n\n  controller(Managed Resource Controller)\nend\n\nsubgraph aws [Amazon Web Services]\n  rds(RDS Instance)\nend\n\nuser -- create --> api\ncrossplane watch-apps@<-- watch --> api\ncrossplane -- create --> deployment\ncrossplane -- create --> service\ncrossplane -- create --> instance\n\ncontroller watch-rds@<-- watch --> instance\ncontroller -- create --> rds\n\nwatch-apps@{animate: true}\nwatch-rds@{animate: true}\n```\n\n----------------------------------------\n\nTITLE: Installing a Crossplane Function using YAML\nDESCRIPTION: This YAML snippet demonstrates how to install a Crossplane Function, specifically the patch and transform function. It uses the Function custom resource, specifying the package location.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/functions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: crossplane-contrib-function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Secret Keys in XRD\nDESCRIPTION: Example of configuring connectionSecretKeys in a CompositeResourceDefinition to specify which connection secrets should be passed to composite resources or Claims.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  connectionSecretKeys:\n    - username\n    - password\n    - address\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Retrieving Created S3 Buckets in Kubernetes\nDESCRIPTION: This shell command retrieves the list of S3 buckets created as managed resources in the Kubernetes cluster. It shows the status and external name of the created bucket.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get buckets\n```\n\n----------------------------------------\n\nTITLE: Referencing Resource by Selector in Crossplane\nDESCRIPTION: Example of referencing another resource using a label selector in Crossplane. This shows how to create a Subnet that matches a VPC with specific labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcIdSelector: \n      matchLabels:\n        my-label: label-value\n```\n\n----------------------------------------\n\nTITLE: Example S3 Bucket Desired State in YAML\nDESCRIPTION: An example of desired state for an S3 bucket resource that a function would add to its composed resources, focusing only on the fields it cares about.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace-Scoped VirtualMachineClaim in Crossplane\nDESCRIPTION: Creates a namespace-scoped Claim (VirtualMachineClaim) in the crossplane-test namespace. This demonstrates how to use Crossplane's custom API within Kubernetes namespaces for multi-tenant environments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: compute.example.com/v1alpha1\nkind: VirtualMachineClaim\nmetadata:\n  name: my-namespaced-vm\n  namespace: crossplane-test\nspec:\n  location: \"EU\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Published Connection Details\nDESCRIPTION: Example showing how to add labels and annotations to the Kubernetes secret created by publishConnectionDetailsTo.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rds.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n  # Removed for brevity\n  publishConnectionDetailsTo:\n    name: rds-kubernetes-secret\n    metadata:\n      labels:\n        label-tag: label-value\n      annotations:\n        annotation-tag: annotation-value\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Crossplane Function in Python\nDESCRIPTION: This snippet shows the basic structure of a Crossplane composition function in Python, including the RunFunction method that processes the input request and returns a response.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def RunFunction(self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext) -> fnv1.RunFunctionResponse:\n    log = self.log.bind(tag=req.meta.tag)\n    log.info(\"Running function\")\n\n    rsp = response.to(req)\n\n    example = \"\"\n    if \"example\" in req.input:\n        example = req.input[\"example\"]\n\n    # TODO: Add your function logic here!\n    response.normal(rsp, f\"I was run with input {example}!\")\n    log.info(\"I was run!\", input=example)\n\n    return rsp\n```\n\n----------------------------------------\n\nTITLE: Example Custom API Declaration for a Virtual Machine\nDESCRIPTION: Example YAML showing the structure of a custom VirtualMachine API. This demonstrates how users would interact with the abstracted API rather than directly with cloud provider resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: compute.example.com/v1alpha1\nkind: VirtualMachine\nmetadata:\n  name: my-vm\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Installing AWS DynamoDB Provider\nDESCRIPTION: YAML configuration to install the AWS DynamoDB Provider package into a Kubernetes cluster with Crossplane. This is required to deploy DynamoDB tables alongside S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-dynamodb\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-dynamodb:v1.21.1\nEOF\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for ARM64 Platform\nDESCRIPTION: Command to build a Crossplane package (.xpkg) for ARM64 platform using the Crossplane CLI. This embeds the runtime-arm64 image into the package and includes metadata from the crossplane.yaml file in the package directory.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-arm64 \\\n    --package-file=function-arm64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Pushing Multi-Platform Crossplane Package to Registry\nDESCRIPTION: Uses the Crossplane CLI to push both AMD64 and ARM64 package files to a registry. This creates a multi-platform package that can run on both linux/arm64 and linux/amd64 hosts. The package is pushed to the 'negz/function-xbuckets' repository with the 'v0.1.0' tag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg push \\\n  --package-files=function-amd64.xpkg,function-arm64.xpkg \\\n  negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Master Helm Repository\nDESCRIPTION: Commands to add the Crossplane master Helm repository and update the local Helm chart cache. This is used for installing pre-release versions of Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-master https://charts.crossplane.io/master/\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Running the Validation Command for AWS IAM AccessKey\nDESCRIPTION: Demonstrates executing the 'crossplane beta validate' command to validate an AWS IAM AccessKey managed resource against its provider schema, showing successful validation output.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta validate provider.yaml managedResource.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket with User Credentials\nDESCRIPTION: Example of creating an AWS S3 bucket using the user-level ProviderConfig credentials. Demonstrates how to reference a specific ProviderConfig in a managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  name: user-bucket\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: user-keys\n```\n\n----------------------------------------\n\nTITLE: Custom Naming of External Resources in Crossplane\nDESCRIPTION: This YAML configuration demonstrates how to use the crossplane.io/external-name annotation to specify a custom name for the external resource in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: my-rds-instance  \n  annotations: \n    crossplane.io/external-name: my-custom-name\n```\n\n----------------------------------------\n\nTITLE: Configuring CompositeResourceDefinition with Secret Keys\nDESCRIPTION: CompositeResourceDefinition that specifies the connection secret keys that should be exposed, including username, password, and various attributes for AWS IAM resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xsecrettests.example.org\nspec:\n  group: example.org\n  connectionSecretKeys:\n    - username\n    - password\n    - attribute.secret\n    - attribute.ses_smtp_password_v4\n    - key2-user\n    - key2-pass\n    - key2-secret\n    - key2-smtp\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket Creation Crossplane Function\nDESCRIPTION: Enhanced implementation that creates AWS S3 buckets based on specified region and names from the composite resource specification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def RunFunction(self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext) -> fnv1.RunFunctionResponse:\n    log = self.log.bind(tag=req.meta.tag)\n    log.info(\"Running function\")\n\n    rsp = response.to(req)\n\n    region = req.observed.composite.resource[\"spec\"][\"region\"]\n    names = req.observed.composite.resource[\"spec\"][\"names\"]\n\n    for name in names:\n        rsp.desired.resources[f\"xbuckets-{name}\"].resource.update(\n            {\n                \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                \"kind\": \"Bucket\",\n                \"metadata\": {\n                    \"annotations\": {\n                        \"crossplane.io/external-name\": name,\n                    },\n                },\n                \"spec\": {\n                    \"forProvider\": {\n                        \"region\": region,\n                    },\n                },\n            }\n        )\n\n    log.info(\"Added desired buckets\", region=region, count=len(names))\n\n    return rsp\n```\n\n----------------------------------------\n\nTITLE: Installing Provider with Image Digest\nDESCRIPTION: Demonstrates installing a Crossplane Provider using a specific image digest for deterministic and repeatable installations\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws@sha256:ee6bece46dbb54cc3f0233961f5baac317fa4e4a81b41198bdc72fc472d113d0\n```\n\n----------------------------------------\n\nTITLE: Implementing S3 Bucket Creation Function in Crossplane\nDESCRIPTION: This snippet demonstrates a more complex Crossplane function that creates S3 buckets based on input parameters. It processes the input request, extracts region and bucket names, and generates desired S3 bucket resources in the response.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def RunFunction(self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext) -> fnv1.RunFunctionResponse:\n    log = self.log.bind(tag=req.meta.tag)\n    log.info(\"Running function\")\n\n    rsp = response.to(req)\n\n    region = req.observed.composite.resource[\"spec\"][\"region\"]\n    names = req.observed.composite.resource[\"spec\"][\"names\"]\n\n    for name in names:\n        rsp.desired.resources[f\"xbuckets-{name}\"].resource.update(\n            {\n                \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                \"kind\": \"Bucket\",\n                \"metadata\": {\n                    \"annotations\": {\n                        \"crossplane.io/external-name\": name,\n                    },\n                },\n                \"spec\": {\n                    \"forProvider\": {\n                        \"region\": region,\n                    },\n                },\n            }\n        )\n\n    log.info(\"Added desired buckets\", region=region, count=len(names))\n\n    return rsp\n```\n\n----------------------------------------\n\nTITLE: Installing Provider from a Private Registry with Authentication\nDESCRIPTION: This YAML configures packagePullSecrets for a Provider installation, allowing Crossplane to authenticate with a private registry when downloading the Provider package using the specified Kubernetes secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  packagePullSecrets: \n    - name: example-secret\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider\nDESCRIPTION: YAML configuration for setting up AWS provider credentials in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin-Level AWS ProviderConfig in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to create an admin-level ProviderConfig for AWS that references credentials stored in a Kubernetes Secret named 'admin-key'. This configuration would be used for resources that require admin privileges.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: admin-keys\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: admin-key\n      key: admin-secret-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Admin Permissions\nDESCRIPTION: Defines detailed permissions for Crossplane administrators including access to events, secrets, namespaces, and core Crossplane resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane:aggregate-to-admin\nrules:\n- apiGroups: [\"\"]\n  resources: [events]\n  verbs: [get, list, watch]\n- apiGroups: [\"\"]\n  resources: [secrets, namespaces]\n  verbs: [\"*\"]\n```\n\n----------------------------------------\n\nTITLE: Installing GCP Provider in Kubernetes\nDESCRIPTION: Kubernetes manifest to install the GCP storage provider package into a cluster. This creates the necessary Custom Resource Definitions (CRDs) for managing GCP storage resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-storage\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-storage:v1.12.1\n```\n\n----------------------------------------\n\nTITLE: Querying Custom API Resources in Kubernetes\nDESCRIPTION: This shell command demonstrates how to list custom API resources created by an XRD in Kubernetes, showing the new xmydatabases.example.org resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources\nNAME                              SHORTNAMES   APIVERSION          NAMESPACED   KIND\nxmydatabases.example.org                       v1alpha1            false        xmydatabases\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Virtual Network Resource\nDESCRIPTION: YAML configuration to create an Azure Virtual Network as a managed resource through Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: network.azure.upbound.io/v1beta1\nkind: VirtualNetwork\nmetadata:\n  name: crossplane-quickstart-network\nspec:\n  forProvider:\n    addressSpace:\n      - 10.0.0.0/16\n    location: \"Sweden Central\"\n    resourceGroupName: docs\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Crossplane Function in Go\nDESCRIPTION: This snippet shows a basic 'hello world' implementation of a Crossplane composition function. It demonstrates how to handle function requests and responses using the Crossplane SDK.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n\tf.log.Info(\"Running Function\", \"tag\", req.GetMeta().GetTag())\n\n\trsp := response.To(req, response.DefaultTTL)\n\n\tin := &v1beta1.Input{}\n\tif err := request.GetInput(req, in); err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get Function input from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\tresponse.Normalf(rsp, \"I was run with input %q\", in.Example)\n\treturn rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Function Patch and Transform\nDESCRIPTION: Manifest to install the Function Patch and Transform package into a Crossplane installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Defining a Managed Resource in YAML\nDESCRIPTION: This snippet shows the basic structure of a managed resource definition in YAML, including the apiVersion and kind fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.m.upbound.io/v1beta1\nkind: Instance\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane Compositions using kubectl\nDESCRIPTION: Shows how to list all available Compositions using kubectl command, displaying XR-KIND and XR-APIVERSION for each Composition template.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\nNAME                                       XR-KIND        XR-APIVERSION                         AGE\nxapps.aws.platformref.upbound.io           XApp           aws.platformref.upbound.io/v1alpha1   123m\nxclusters.aws.platformref.upbound.io       XCluster       aws.platformref.upbound.io/v1alpha1   123m\nxeks.aws.platformref.upbound.io            XEKS           aws.platformref.upbound.io/v1alpha1   123m\nxnetworks.aws.platformref.upbound.io       XNetwork       aws.platformref.upbound.io/v1alpha1   123m\nxservices.aws.platformref.upbound.io       XServices      aws.platformref.upbound.io/v1alpha1   123m\nxsqlinstances.aws.platformref.upbound.io   XSQLInstance   aws.platformref.upbound.io/v1alpha1   123m\n```\n\n----------------------------------------\n\nTITLE: Using CombineToComposite Patch in Crossplane\nDESCRIPTION: This snippet demonstrates how to use CombineToComposite to combine multiple values from a composed resource and apply them to a composite resource. The example shows combining name and region to create a URL in the composite's status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineToComposite\n      combine:\n        variables:\n          - fromFieldPath: metadata.name\n          - fromFieldPath: spec.forProvider.region\n        strategy: string\n        string:\n          fmt: \"https://%s.%s.com\"\n      toFieldPath: status.url\n```\n\n----------------------------------------\n\nTITLE: Python Unit Test Implementation for Crossplane Composition Function\nDESCRIPTION: A comprehensive unit test for a Crossplane composition function using Python's unittest framework. The test verifies that the function correctly composes S3 buckets based on the input composite resource specification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dataclasses\nimport unittest\n\nfrom crossplane.function import logging, resource\nfrom crossplane.function.proto.v1 import run_function_pb2 as fnv1\nfrom google.protobuf import duration_pb2 as durationpb\nfrom google.protobuf import json_format\nfrom google.protobuf import struct_pb2 as structpb\n\nfrom function import fn\n\n\nclass TestFunctionRunner(unittest.IsolatedAsyncioTestCase):\n    def setUp(self) -> None:\n        logging.configure(level=logging.Level.DISABLED)\n        self.maxDiff = 2000\n\n    async def test_run_function(self) -> None:\n        @dataclasses.dataclass\n        class TestCase:\n            reason: str\n            req: fnv1.RunFunctionRequest\n            want: fnv1.RunFunctionResponse\n\n        cases = [\n            TestCase(\n                reason=\"The function should compose two S3 buckets.\",\n                req=fnv1.RunFunctionRequest(\n                    observed=fnv1.State(\n                        composite=fnv1.Resource(\n                            resource=resource.dict_to_struct(\n                                {\n                                    \"apiVersion\": \"example.crossplane.io/v1alpha1\",\n                                    \"kind\": \"XBuckets\",\n                                    \"metadata\": {\"name\": \"test\"},\n                                    \"spec\": {\n                                        \"region\": \"us-east-2\",\n                                        \"names\": [\"test-bucket-a\", \"test-bucket-b\"],\n                                    },\n                                }\n                            )\n                        )\n                    )\n                ),\n                want=fnv1.RunFunctionResponse(\n                    meta=fnv1.ResponseMeta(ttl=durationpb.Duration(seconds=60)),\n                    desired=fnv1.State(\n                        resources={\n                            \"xbuckets-test-bucket-a\": fnv1.Resource(\n                                resource=resource.dict_to_struct(\n                                    {\n                                        \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                                        \"kind\": \"Bucket\",\n                                        \"metadata\": {\n                                            \"annotations\": {\n                                                \"crossplane.io/external-name\": \"test-bucket-a\"\n                                            },\n                                        },\n                                        \"spec\": {\n                                            \"forProvider\": {\"region\": \"us-east-2\"}\n                                        },\n                                    }\n                                )\n                            ),\n                            \"xbuckets-test-bucket-b\": fnv1.Resource(\n                                resource=resource.dict_to_struct(\n                                    {\n                                        \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                                        \"kind\": \"Bucket\",\n                                        \"metadata\": {\n                                            \"annotations\": {\n                                                \"crossplane.io/external-name\": \"test-bucket-b\"\n                                            },\n                                        },\n                                        \"spec\": {\n                                            \"forProvider\": {\"region\": \"us-east-2\"}\n                                        },\n                                    }\n                                )\n                            ),\n                        },\n                    ),\n                    context=structpb.Struct(),\n                ),\n            ),\n        ]\n\n        runner = fn.FunctionRunner()\n\n        for case in cases:\n            got = await runner.RunFunction(case.req, None)\n            self.assertEqual(\n                json_format.MessageToDict(got),\n                json_format.MessageToDict(case.want),\n                \"-want, +got\",\n            )\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Resource Definition for MySQL\nDESCRIPTION: Example of creating a CompositeResourceDefinition (XRD) that defines both cluster-scoped and namespace-scoped MySQL instance types.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/multi-tenant.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xmysqlinstances.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMySQLInstance\n    plural: xmysqlinstances\n  claimNames:\n    kind: MySQLInstance\n    plural: mysqlinstances\n```\n\n----------------------------------------\n\nTITLE: Installing GCP Storage Provider in Kubernetes\nDESCRIPTION: Kubernetes manifest to install the GCP storage provider package into a cluster. This creates the necessary Custom Resource Definitions (CRDs) for managing GCP storage resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-storage\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-storage:v1.12.1\n```\n\n----------------------------------------\n\nTITLE: Testing Composition with Crossplane CLI\nDESCRIPTION: This shell command demonstrates how to use the Crossplane CLI to test and render a composition locally. It takes composite resource, composition, and function YAML files as input and outputs the rendered resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Discovering Composition Revisions using kubectl\nDESCRIPTION: This snippet shows how to use kubectl to find all revisions of a Composition named 'example'. It demonstrates how to list CompositionRevisions and understand their naming convention.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevision -l crossplane.io/composition-name=example\n```\n\n----------------------------------------\n\nTITLE: Running a Crossplane Function in Development Mode\nDESCRIPTION: Command to run a Crossplane function locally in development mode for testing purposes. This starts the function server that will respond to render requests.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nhatch run development\n```\n\n----------------------------------------\n\nTITLE: Viewing Secret with Renamed Keys\nDESCRIPTION: This shell output shows the result of describing a secret with renamed keys to handle conflicts. It displays both the original 'username' key and the renamed 'key2-user' key in the combined secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret -n other-namespace\nName:         b0dc71f8-2688-4ebc-818a-bbad6a2c4f9a\nNamespace:    other-namespace\n\nType:  connection.crossplane.io/v1alpha1\n\nData\n====\nusername:                        20 bytes\nkey2-user:                       20 bytes\n# Removed for brevity.\n```\n\n----------------------------------------\n\nTITLE: Setting Composition Update Policy in XRD\nDESCRIPTION: Configuration showing how to set the default composition update policy to Manual, controlling how composition revisions are applied to resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositionUpdatePolicy: Manual\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Retrieving Crossplane Logs\nDESCRIPTION: Command to fetch logs from the Crossplane pod in the crossplane-system namespace\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/troubleshoot-crossplane.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system logs -lapp=crossplane\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Community Provider with Crossplane Provider Resource\nDESCRIPTION: This YAML defines a Crossplane Provider installation for AWS. It specifies the package location using the crossplane-contrib registry at xpkg.crossplane.io and sets the version to v0.39.0.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0\n```\n\n----------------------------------------\n\nTITLE: Configuring External Secret Store in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use publishConnectionDetailsWithStoreConfigRef to specify an external secret store (like HashiCorp Vault) for storing connection details in a Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: vault\n# Removed for brevity.\n---\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  publishConnectionDetailsWithStoreConfigRef: \n    name: vault\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing a Configuration Package in Crossplane using YAML\nDESCRIPTION: YAML manifest for installing a Crossplane Configuration package using the pkg.crossplane.io/v1 API. This example installs the 'configuration-quickstart' package from the crossplane-contrib registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: configuration-quickstart\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal with CLI\nDESCRIPTION: Azure CLI command to create a service principal with Owner permissions on the specified subscription scope. This creates the credentials needed for Crossplane to authenticate with Azure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\naz ad sp create-for-rbac \\\n--sdk-auth \\\n--role Owner \\\n--scopes /subscriptions/$@<subscription_id>$@\n```\n\n----------------------------------------\n\nTITLE: Defining AWS ProviderConfig for Namespace-Specific Credentials in Crossplane\nDESCRIPTION: This YAML snippet defines a ProviderConfig for AWS in Crossplane, specifying credentials for a specific team namespace. It demonstrates how to set up namespace-specific infrastructure provisioning credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/multi-tenant.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: team-1\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: team-1-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Creating ESS Instance Claim for GCP Resources\nDESCRIPTION: Creates a Claim that triggers Crossplane to provision GCP resources using the defined Composition, with secrets published to Vault\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ess.example.org/v1alpha1\nkind: ESSInstance\nmetadata:\n  name: my-ess\n  namespace: default\nspec:\n  parameters:\n    serviceAccount: ess-test-sa\n  compositionSelector:\n    matchLabels:\n      feature: ess\n  publishConnectionDetailsTo:\n    name: ess-claim-conn\n    metadata:\n      labels:\n        environment: development\n        team: backend\n    configRef:\n      name: vault\n```\n\n----------------------------------------\n\nTITLE: Creating GCP StoreConfig for Vault Integration in Crossplane\nDESCRIPTION: This snippet creates a StoreConfig object in the GCP Provider's API group that configures how the Provider communicates with Vault. It specifies the plugin endpoint and references a VaultConfig resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: gcp.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: vault\nspec:\n  type: Plugin\n  defaultScope: crossplane-system\n  plugin:\n    endpoint: ess-plugin-vault.crossplane-system:4040\n    configRef:\n      apiVersion: secrets.crossplane.io/v1alpha1\n      kind: VaultConfig\n      name: vault-internal\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Composition for a Composite Resource\nDESCRIPTION: This YAML snippet shows how to explicitly select a specific Composition for a composite resource to use via the compositionRef field. The selected Composition must have a compatible compositeTypeRef.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionRef:\n    name: my-other-composition\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Azure Credentials\nDESCRIPTION: This shell command creates a Kubernetes secret named 'azure-secret' in the 'crossplane-system' namespace. It uses the contents of the 'azure-credentials.json' file as the secret data.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric azure-secret \\\n-n crossplane-system \\\n--from-file=creds=./azure-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Running Python Unit Tests with Hatch\nDESCRIPTION: Command to run unit tests for a Crossplane function using the Hatch build tool, which manages Python virtual environments and dependencies.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhatch run test:unit\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Service Account for Crossplane\nDESCRIPTION: Bash script to create a GCP service account with CloudSQL admin permissions and generate a keyfile for Crossplane to use.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-injection.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# replace this with your own gcp project id and the name of the service account\n# that will be created.\nPROJECT_ID=my-project\nNEW_SA_NAME=test-service-account-name\n\n# create service account\nSA=\"${NEW_SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com\"\ngcloud iam service-accounts create $NEW_SA_NAME --project $PROJECT_ID\n\n# enable cloud API\nSERVICE=\"sqladmin.googleapis.com\"\ngcloud services enable $SERVICE --project $PROJECT_ID\n\n# grant access to cloud API\nROLE=\"roles/cloudsql.admin\"\ngcloud projects add-iam-policy-binding --role=\"$ROLE\" $PROJECT_ID --member \"serviceAccount:$SA\"\n\n# create service account keyfile\ngcloud iam service-accounts keys create creds.json --project $PROJECT_ID --iam-account $SA\n```\n\n----------------------------------------\n\nTITLE: Upgrading Crossplane with Custom Registry\nDESCRIPTION: Example of how to upgrade Crossplane while overriding new defaults, specifically maintaining the original image registry instead of using the new default.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/upgrade.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade crossplane --namespace crossplane-system crossplane-stable/crossplane --set 'args={\"--registry=index.docker.io\"}'\n```\n\n----------------------------------------\n\nTITLE: Publishing Managed Resource Secrets to Kubernetes in Crossplane\nDESCRIPTION: This YAML snippet shows how to configure a Crossplane managed resource to publish its connection details as a Kubernetes Secret using the publishConnectionDetailsTo field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rds.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n  # Removed for brevity\n  publishConnectionDetailsTo:\n    name: rds-kubernetes-secret\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for AWS Credentials\nDESCRIPTION: Creates a Kubernetes Secret resource in the crossplane-system namespace that contains the AWS credentials from the previously created credentials file. This secret will be referenced by the ProviderConfig.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric aws-secret \\\n-n crossplane-system \\\n--from-file=creds=./aws-credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource Definition (XRD) for PubSub API\nDESCRIPTION: YAML manifest to create a Composite Resource Definition that establishes a custom PubSub API with location constraints, allowing both cluster-level and namespace-level resource management.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: pubsubs.queue.example.com\nspec:\n  group: queue.example.com\n  names:\n    kind: PubSub\n    plural: pubsubs\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              location:\n                type: string\n                oneOf:\n                  - pattern: '^EU$'\n                  - pattern: '^US$'\n            required:\n              - location\n    served: true\n    referenceable: true\n  claimNames:\n    kind: PubSubClaim\n    plural: pubsubclaims\nEOF\n```\n\n----------------------------------------\n\nTITLE: Patching between Composite Resource and Environment in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to patch between a Composite resource and the environment in Crossplane. It uses 'ToCompositeFieldPath' and 'FromCompositeFieldPath' patch types to copy data between the in-memory environment and the Composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/environment-configs.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  # Removed for Brevity\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      environment:\n        patches:\n        - type: ToCompositeFieldPath\n          fromFieldPath: tags\n          toFieldPath: metadata.labels[envTag]\n        - type: FromCompositeFieldPath\n          fromFieldPath: metadata.name\n          toFieldPath: newEnvironmentKey\n# Removed for Brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Reference with Development Runtime\nDESCRIPTION: This YAML file defines a Crossplane Function resource with the Development runtime annotation. This tells the Crossplane CLI to connect to a locally running function during testing instead of using a container image.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-xbuckets\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  # The CLI ignores this package when using the Development runtime.\n  # You can set it to any value.\n  package: xpkg.crossplane.io/negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring RDS Connection Secret Storage\nDESCRIPTION: Example showing how to configure an AWS RDS instance to store its connection details in a Kubernetes secret using writeConnectionSecretToRef.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: my-rds-instance\nspec:\n  forProvider:\n  # Removed for brevity\n  writeConnectionSecretToRef:\n    name: rds-secret\n```\n\n----------------------------------------\n\nTITLE: Defining an AWS AccessKey Managed Resource with Connection Secret\nDESCRIPTION: A YAML configuration for an AWS IAM AccessKey resource that writes its connection details to a specified Kubernetes secret. It demonstrates how to set up a managed resource to store its connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/connection-details.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: iam.aws.upbound.io/v1beta1\nkind: AccessKey\nmetadata:\n    name: test-accesskey\nspec:\n    forProvider:\n        userSelector:\n            matchLabels:\n                docs.crossplane.io: user\n    writeConnectionSecretToRef:\n        namespace: default\n        name: my-accesskey-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provider with Credentials\nDESCRIPTION: Kubernetes configuration to create a ProviderConfig that connects Azure credentials to the provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-azure.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: azure.upbound.io/v1beta1\nmetadata:\n  name: default\nkind: ProviderConfig\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: azure-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Package with xpkg install\nDESCRIPTION: The xpkg install command downloads and installs packages into Crossplane. It requires the package kind, registry URL, package name, and tag. Optionally, a name can be provided for the package inside Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg install <package-kind> <registry URL package name and tag> [<optional-name>]\n```\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg install provider xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Referencing Resources by Name Reference in Crossplane\nDESCRIPTION: Example of how to reference an existing AWS VPC resource by the managed resource name (not the external name) when creating a Subnet in Crossplane using the nameRef field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcIdRef: \n      name: my-test-vpc\n```\n\n----------------------------------------\n\nTITLE: Using External Secret Stores in Crossplane\nDESCRIPTION: This YAML snippet illustrates the configuration for Crossplane to use an external secret store, such as HashiCorp Vault. The publishConnectionDetailsWithStoreConfigRef specifies the StoreConfig to save connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: vault\n# Removed for brevity.\n---\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  publishConnectionDetailsWithStoreConfigRef:\n    name: vault\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Provider Configuration\nDESCRIPTION: YAML configuration to set up the AWS S3 provider in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-s3\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GCP Credentials\nDESCRIPTION: Shell command to create a Kubernetes secret containing GCP service account credentials, required for provider authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric gcp-secret \\\n-n crossplane-system \\\n--from-file=creds=./gcp-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Installing GCP Storage Provider in Kubernetes\nDESCRIPTION: Kubernetes configuration to install the GCP storage provider using a Provider custom resource. This allows creation and management of GCP storage resources through Kubernetes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-storage\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-storage:v1.12.1\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment and Service Resources\nDESCRIPTION: YAML configuration showing how Crossplane creates a Deployment and Service from an App resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: default\n  name: my-app-dhj3a\n  labels:\n    example.crossplane.io/app: my-app  # Copied from the App's name\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      example.crossplane.io/app: my-app  # Copied from the App's name\n  template:\n    metadata:\n      labels:\n        example.crossplane.io/app: my-app  # Copied from the App's name\n    spec:\n      containers:\n      - name: app\n        image: nginx  # Copied from the App's spec\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  namespace: default\n  name: my-app-03mda\n  labels:\n    example.crossplane.io/app: my-app  # Copied from the App's name\nspec:\n  selector:\n    example.crossplane.io/app: my-app  # Copied from the App's name\n  ports:\n  - protocol: TCP\n    port: 8080\n    targetPort: 80\n```\n\n----------------------------------------\n\nTITLE: Setting Composition Selector in YAML\nDESCRIPTION: Demonstrates how to select a composition based on labels instead of exact name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionSelector:\n    matchLabels:\n      environment: production\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Secrets for Individual Resources in Crossplane Composition\nDESCRIPTION: This YAML snippet shows how to configure connection secret references for individual resources in a Composition pipeline. Each resource can define its own writeConnectionSecretToRef with a namespace and name for its secrets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM AccessKey Resource\nDESCRIPTION: Managed resource configuration for an AWS IAM AccessKey that specifies where to write connection secrets in Kubernetes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: iam.aws.upbound.io/v1beta1\nkind: AccessKey\nmetadata:\n    name: test-accesskey\nspec:\n    forProvider:\n        userSelector:\n            matchLabels:\n                docs.crossplane.io: user\n    writeConnectionSecretToRef:\n        namespace: default\n        name: my-accesskey-secret\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Packages\nDESCRIPTION: The `crossplane xpkg install` command downloads and installs specific Crossplane packages. Users need to provide the `<package-kind>`, registry URL, and the package name and tag. The command looks at the Kubernetes configuration in `~/.kube/config` or a custom location specified by the `KUBECONFIG` variable. Additional flags allow customizing installation behavior and authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg install <package-kind> <registry URL package name and tag> [<optional-name>]\n```\n\n----------------------------------------\n\nTITLE: Custom Runtime Metadata Configuration YAML\nDESCRIPTION: YAML configuration example showing how to customize metadata for runtime resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: my-runtime-config\nspec:\n  deploymentTemplate:\n    metadata:\n      labels:\n        my-label: my-value\n  serviceAccountTemplate:\n    metadata:\n      name: my-service-account\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Metadata and Dependencies in YAML\nDESCRIPTION: This YAML file (crossplane.yaml) defines the metadata and dependencies for a Crossplane Configuration package. It specifies the Configuration name, required provider, and minimum Crossplane version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n$ cat crossplane.yaml\napiVersion: meta.pkg.crossplane.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: test-configuration\nspec:\n  dependsOn:\n    - apiVersion: pkg.crossplane.io/v1\n      kind: Provider\n      package: xpkg.crossplane.io/crossplane-contrib/provider-aws\n      version: \">=v0.36.0\"\n  crossplane:\n    version: \">=v1.12.1-0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Level AWS Provider Authentication\nDESCRIPTION: ProviderConfig for user-level access to AWS services using specific secret credentials stored in Kubernetes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: user-keys\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: my-key\n      key: secret-key\n```\n\n----------------------------------------\n\nTITLE: Composition Type Reference Configuration\nDESCRIPTION: Example showing how to configure which composite resource types can use a Composition through the compositeTypeRef specification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dynamodb-with-bucket\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: database\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Provider Settings\nDESCRIPTION: ProviderConfig manifest that configures the GCP provider with project ID and credentials reference. This links the provider with the GCP credentials stored in Kubernetes secrets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  projectID: $@<PROJECT_ID>$@\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: gcp-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Complete Function Implementation with Documentation\nDESCRIPTION: Full implementation including imports, class definition, and detailed documentation explaining the function's logic and SDK usage patterns.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"A Crossplane composition function.\"\"\"\n\nimport grpc\nfrom crossplane.function import logging, response\nfrom crossplane.function.proto.v1 import run_function_pb2 as fnv1\nfrom crossplane.function.proto.v1 import run_function_pb2_grpc as grpcv1\n\n\nclass FunctionRunner(grpcv1.FunctionRunnerService):\n    \"\"\"A FunctionRunner handles gRPC RunFunctionRequests.\"\"\"\n\n    def __init__(self):\n        \"\"\"Create a new FunctionRunner.\"\"\"\n        self.log = logging.get_logger()\n\n    async def RunFunction(\n        self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext\n    ) -> fnv1.RunFunctionResponse:\n        \"\"\"Run the function.\"\"\"\n        # Create a logger for this request.\n        log = self.log.bind(tag=req.meta.tag)\n        log.info(\"Running function\")\n\n        # Create a response to the request. This copies the desired state and\n        # pipeline context from the request to the response.\n        rsp = response.to(req)\n\n        # Get the region and a list of bucket names from the observed composite\n        # resource (XR). Crossplane represents resources using the Struct\n        # well-known protobuf type. The Struct Python object can be accessed\n        # like a dictionary.\n        region = req.observed.composite.resource[\"spec\"][\"region\"]\n        names = req.observed.composite.resource[\"spec\"][\"names\"]\n\n        # Add a desired S3 bucket for each name.\n        for name in names:\n            rsp.desired.resources[f\"xbuckets-{name}\"].resource.update(\n                {\n                    \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                    \"kind\": \"Bucket\",\n                    \"metadata\": {\n                        \"annotations\": {\n                            \"crossplane.io/external-name\": name,\n                        },\n                    },\n                    \"spec\": {\n                        \"forProvider\": {\n                            \"region\": region,\n                        },\n                    },\n                }\n            )\n\n        log.info(\"Added desired buckets\", region=region, count=len(names))\n\n        return rsp\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provider\nDESCRIPTION: YAML configuration to install the Azure Network provider in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-azure-network\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-azure-network:v1.11.2\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Package\nDESCRIPTION: Command to download and install packages into Crossplane. Requires package kind (configuration, function, or provider), registry URL with package name and tag, and an optional name to use inside Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg install <package-kind> <registry URL package name and tag> [<optional-name>]\n```\n\n----------------------------------------\n\nTITLE: Creating ControllerConfig for External Secret Stores\nDESCRIPTION: Creates a ControllerConfig object to enable external secret stores for Providers.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: pkg.crossplane.io/v1alpha1\nkind: ControllerConfig\nmetadata:\n  name: vault-config\nspec:\n  args:\n    - --enable-external-secret-stores\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Configuration with Helm\nDESCRIPTION: This shell command demonstrates how to install Crossplane and a Configuration package simultaneously using Helm, specifying the package in the configuration.packages parameter.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\n--set configuration.packages='{xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0}'\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition for MyVPC\nDESCRIPTION: This YAML snippet defines a Composition for a MyVPC resource, specifying the configuration for creating an AWS VPC using Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  labels:\n    channel: dev\n  name: myvpcs.aws.example.upbound.io\nspec:\n  writeConnectionSecretsToNamespace: crossplane-system\n  compositeTypeRef:\n    apiVersion: aws.example.upbound.io/v1alpha1\n    kind: MyVPC\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: my-vpc\n        base:\n          apiVersion: ec2.aws.upbound.io/v1beta1\n          kind: VPC\n          spec:\n            forProvider:\n              region: us-west-1\n              cidrBlock: 192.168.0.0/16\n              enableDnsSupport: true\n              enableDnsHostnames: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Mode for a Crossplane Provider\nDESCRIPTION: YAML configuration that creates a DeploymentRuntimeConfig to enable debug logging for a Crossplane provider. References the config from a Provider resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/troubleshoot-crossplane.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: debug-config\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      template:\n        spec:\n          containers:\n          - name: package-runtime\n            args: \n            - --debug\n---\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.33.0\n  runtimeConfigRef:\n    apiVersion: pkg.crossplane.io/v1beta1\n    kind: DeploymentRuntimeConfig\n    name: debug-config\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider Credentials in Crossplane\nDESCRIPTION: Example of setting up an AWS ProviderConfig that references credentials stored in a Kubernetes Secret for authenticating with AWS services.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/multi-tenant.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: cool-aws-creds\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Readiness Checks in Crossplane Composition YAML\nDESCRIPTION: This snippet demonstrates how to define custom readiness checks for a resource in a Crossplane Composition. It shows the structure for specifying readiness checks with a type and fieldPath.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: <match type>\n      fieldPath: <resource field>\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane Admin ClusterRole with Aggregation Rules\nDESCRIPTION: Defines the crossplane-admin ClusterRole that aggregates all roles with the label 'rbac.crossplane.io/aggregate-to-admin: true'. This role provides administrator-level access to Crossplane resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane-admin\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\naggregationRule:\n  clusterRoleSelectors:\n  - matchLabels:\n      rbac.crossplane.io/aggregate-to-admin: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane ClusterRoleBinding\nDESCRIPTION: Sets up the binding between the Crossplane ServiceAccount and its associated ClusterRole, granting the necessary permissions to the Crossplane service.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: crossplane\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: crossplane\nsubjects:\n- kind: ServiceAccount\n  name: crossplane\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Writing a Hello World Composition Function in Go\nDESCRIPTION: This Go code snippet demonstrates a simple 'Hello World' composition function. It implements the RunFunction method, which is called by Crossplane to execute the function logic.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n        rsp := response.To(req, response.DefaultTTL)\n        response.Normal(rsp, \"Hello world!\")\n        return rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using CombineFromComposite Patch in Crossplane\nDESCRIPTION: This snippet demonstrates how to use CombineFromComposite to combine multiple values from a composite resource and apply them to a composed resource. The example shows combining region and field2 values to create a resource name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineFromComposite\n      combine:\n        variables:\n          - fromFieldPath: spec.desiredRegion\n          - fromFieldPath: spec.field2\n        strategy: string\n        string:\n          fmt: \"my-resource-%s-%s\"\n      toFieldPath: metadata.name\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition Type Reference in Crossplane\nDESCRIPTION: YAML configuration showing how to set up a Composition with composite type reference matching the XRD.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: my-composition\nspec:\n  compositeTypeRef:\n    apiVersion: example.org/v1alpha1\n    kind: xMyDatabase\n```\n\n----------------------------------------\n\nTITLE: Creating CompositeResourceDefinition for ESS in Crossplane\nDESCRIPTION: This snippet creates a CompositeResourceDefinition that defines a custom API endpoint for ESS instances. It specifies the schema with required parameters and connection secret keys for integration with external services.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: compositeessinstances.ess.example.org\n  annotations:\n    feature: ess\nspec:\n  group: ess.example.org\n  names:\n    kind: CompositeESSInstance\n    plural: compositeessinstances\n  claimNames:\n    kind: ESSInstance\n    plural: essinstances\n  connectionSecretKeys:\n    - publicKey\n    - publicKeyType\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              parameters:\n                type: object\n                properties:\n                  serviceAccount:\n                    type: string\n                required:\n                  - serviceAccount\n            required:\n              - parameters\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GCP Credentials\nDESCRIPTION: Shell command to create a Kubernetes secret containing GCP service account credentials\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric gcp-secret \\\n-n crossplane-system \\\n--from-file=creds=./gcp-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Creating a Crossplane PubSub Resource\nDESCRIPTION: This YAML creates a PubSub resource using the custom API defined by the Composition. It specifies the location for the resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: queue.example.com/v1alpha1\nkind: PubSub\nmetadata:\n  name: my-pubsub-queue\nspec:\n  location: \"US\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Upgrading Crossplane Installation\nDESCRIPTION: Command to upgrade an existing Crossplane installation using Helm. This preserves original installation arguments and applies any new default behaviors.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/upgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade crossplane --namespace crossplane-system crossplane-stable/crossplane\n```\n\n----------------------------------------\n\nTITLE: Patching Between Composite and Managed Resources with YAML\nDESCRIPTION: This YAML snippet demonstrates how to use patches to sync data between composite and managed resources in Crossplane. It outlines setting up patches in resource configurations, primarily using `ToCompositeFieldPath` and `FromCompositeFieldPath` to move data between field paths. These patches allow seamless state management across resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    # Removed for brevity\n  patches:\n    - type: ToCompositeFieldPath\n      fromFieldPath: metadata.name\n      toFieldPath: status.secondResource\n- name: bucket2\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    # Removed for brevity\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: status.secondResource\n      toFieldPath: metadata.labels['secondResource']\n```\n\n----------------------------------------\n\nTITLE: Writing Composed Resource Data to Composite Resource in Crossplane (YAML)\nDESCRIPTION: This snippet shows the ToCompositeFieldPath patch, which writes data from an individual composed resource to the composite resource that created it. It demonstrates how to take the 'hostedZoneID' value from a managed resource and apply it as a 'label' in the composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: ToCompositeFieldPath\n      fromFieldPath: status.atProvider.hostedZoneId\n      toFieldPath: metadata.labels['ZoneID']\n```\n\n----------------------------------------\n\nTITLE: XBuckets Composite Resource Definition in YAML\nDESCRIPTION: YAML definition of an XBuckets composite resource that specifies a region and array of bucket names for AWS S3 bucket creation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Export in Crossplane Helm Chart\nDESCRIPTION: Configuration snippet to enable metrics export in the Crossplane Helm chart. This setting is necessary to expose Crossplane metrics for monitoring.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Installing a Composition Function in YAML\nDESCRIPTION: This snippet demonstrates how to install a Composition function using a Crossplane Function object. It specifically installs the function-patch-and-transform package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Creating a GCP ProviderConfig for Crossplane\nDESCRIPTION: YAML manifest that configures the GCP provider with project ID and credentials reference, enabling Crossplane to access GCP resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: gcp.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  projectID: $@<PROJECT_ID>$@\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: gcp-secret\n      key: creds\nEOF\n```\n\n----------------------------------------\n\nTITLE: Named Resource Import Configuration\nDESCRIPTION: Complete managed resource configuration showing both Kubernetes object name and external resource name for importing a GCP Network.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/import-existing-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: compute.gcp.crossplane.io/v1beta1\nkind: Network\nmetadata:\n  name: imported-network\n  annotations:\n    crossplane.io/external-name: my-existing-network\nspec:\n  forProvider: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring NonEmpty Readiness Check in Crossplane Resources\nDESCRIPTION: This YAML snippet demonstrates how to use the NonEmpty readiness check to verify that a field exists with a value in a composed resource. It checks that 'status.atProvider.state' is not empty.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: NonEmpty\n      fieldPath: status.atProvider.state\n```\n\n----------------------------------------\n\nTITLE: XRD Schema Definition Example\nDESCRIPTION: Shows how to define a schema in an XRD using OpenAPIv3Schema with custom properties.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing provider-aws with Vault Integration\nDESCRIPTION: This snippet demonstrates how to install provider-aws using a ControllerConfig that integrates with Vault for secure credential management. It sets up annotations for Vault injection and creates a Provider resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: pkg.crossplane.io/v1alpha1\nkind: ControllerConfig\nmetadata:\n  name: aws-vault-config\nspec:\n  args:\n    - --debug\n  metadata:\n    annotations:\n      vault.hashicorp.com/agent-inject: \\\"true\\\"\n      vault.hashicorp.com/role: \\\"crossplane-providers\\\"\n      vault.hashicorp.com/agent-inject-secret-creds.txt: \\\"secret/provider-creds/aws-default\\\"\n      vault.hashicorp.com/agent-inject-template-creds.txt: |\n        {{- with secret \\\"secret/provider-creds/aws-default\\\" -}}\n          [default]\n          aws_access_key_id=\\\"{{ .Data.data.access_key }}\\\"\n          aws_secret_access_key=\\\"{{ .Data.data.secret_key }}\\\"\n        {{- end -}}\n---\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.33.0\n  controllerConfigRef:\n    name: aws-vault-config\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Enabling Claims in Crossplane XRD\nDESCRIPTION: This YAML snippet shows how to enable claims for a Crossplane XRD by defining claimNames. It demonstrates setting the kind and plural names for claims, which must be unique and follow specific naming conventions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  claimNames:\n    kind: Database\n    plural: databases\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing Resource Status with kubectl describe\nDESCRIPTION: Shows how to check the status of a Crossplane resource using kubectl describe, which displays resource conditions including readiness state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe cloudsqlinstance my-db\n```\n\n----------------------------------------\n\nTITLE: Configuring forProvider in a Managed Resource\nDESCRIPTION: This example demonstrates how to configure the forProvider section of a managed resource, which maps to the parameters of the external resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.m.upbound.io/v1beta1\nkind: Instance\n# Removed for brevity\nspec:\n  forProvider:\n    region: us-west-1\n    instanceType: t2.micro\n```\n\n----------------------------------------\n\nTITLE: Installing provider-gcp with Vault Integration\nDESCRIPTION: This snippet demonstrates how to install provider-gcp using a ControllerConfig that integrates with Vault for secure credential management. It sets up annotations for Vault injection and creates a Provider resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: pkg.crossplane.io/v1alpha1\nkind: ControllerConfig\nmetadata:\n  name: vault-config\nspec:\n  metadata:\n    annotations:\n      vault.hashicorp.com/agent-inject: \\\"true\\\"\n      vault.hashicorp.com/role: \\\"crossplane-providers\\\"\n      vault.hashicorp.com/agent-inject-secret-creds.txt: \\\"secret/provider-creds/gcp-default\\\"\n      vault.hashicorp.com/agent-inject-template-creds.txt: |\n        {{- with secret \\\"secret/provider-creds/gcp-default\\\" -}}\n         {{ .Data.data | toJSON }}\n        {{- end -}}\n---\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp:v0.22.0\n  controllerConfigRef:\n    name: vault-config\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Verifying Composite Resource Revision Assignment in Crossplane\nDESCRIPTION: Displays the composite resources with their assigned composition revisions, update policies, and match labels. This command helps verify which revision each resource is using and whether the selector matching is working correctly.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite -o=\"custom-columns=NAME:.metadata.name,SYNCED:.status.conditions[0].status,REVISION:.spec.compositionRevisionRef.name,POLICY:.spec.compositionUpdatePolicy,MATCHLABEL:.spec.compositionRevisionSelector.matchLabels\"\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal\nDESCRIPTION: Azure CLI command to create a service principal with Owner role for Crossplane authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\naz ad sp create-for-rbac \\\n--sdk-auth \\\n--role Owner \\\n--scopes /subscriptions/$@<subscription_id>$@\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Manager Permissions in Kubernetes YAML\nDESCRIPTION: Defines the core RBAC permissions needed by the RBAC manager to handle ProviderRevisions and manage cluster roles. Includes permissions for CRDs, roles, and coordination resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- apiGroups:\n  - pkg.crossplane.io\n  resources:\n  - providerrevisions/finalizers\n  verbs:\n  - update\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - get\n  - list\n  - watch\n```\n\n----------------------------------------\n\nTITLE: Viewing Claims in Crossplane\nDESCRIPTION: This shell command retrieves and displays the claims created in the default namespace. It shows the claim name, readiness status, connection secret, and age.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n default get claim\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource with Default Update Policy\nDESCRIPTION: This YAML snippet creates a Composite Resource (XR) of type MyVPC without specifying a compositionUpdatePolicy, which defaults to Automatic.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  name: vpc-auto\nspec:\n  id: vpc-auto\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition for MyVPC Resource\nDESCRIPTION: This YAML snippet defines a Composition for a MyVPC resource. It specifies how Crossplane should reconcile the Composite Resource, including the creation of an AWS VPC with specific configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  labels:\n    channel: dev\n  name: myvpcs.aws.example.upbound.io\nspec:\n  writeConnectionSecretsToNamespace: crossplane-system\n  compositeTypeRef:\n    apiVersion: aws.example.upbound.io/v1alpha1\n    kind: MyVPC\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: my-vpc\n        base:\n          apiVersion: ec2.aws.upbound.io/v1beta1\n          kind: VPC\n          spec:\n            forProvider:\n              region: us-west-1\n              cidrBlock: 192.168.0.0/16\n              enableDnsSupport: true\n              enableDnsHostnames: true\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Resource Type in YAML\nDESCRIPTION: This YAML snippet shows how to define a Composition's compositeTypeRef, which specifies which Composite Resource type can use this Composition. It includes the apiVersion and kind of the allowed Composite Resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dynamodb-with-bucket\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: database\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Required Fields in Crossplane XRD Schema\nDESCRIPTION: This YAML snippet demonstrates how to define required fields in a Crossplane Composite Resource Definition (XRD) schema. It shows the structure for specifying mandatory parameters like 'region' and 'size', while keeping 'name' optional.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string \n              size:\n                type: string  \n              name:\n                type: string  \n            required: \n              - region \n              - size\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating GCP StoreConfig for Vault Integration in Crossplane\nDESCRIPTION: This YAML snippet creates a StoreConfig object for the GCP Provider to communicate with Vault for Managed Resources. It specifies the plugin endpoint and references a VaultConfig.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: vault\nspec:\n  type: Plugin\n  defaultScope: crossplane-system\n  plugin:\n    endpoint: ess-plugin-vault.crossplane-system:4040\n    configRef:\n      apiVersion: secrets.crossplane.io/v1alpha1\n      kind: VaultConfig\n      name: vault-internal\n```\n\n----------------------------------------\n\nTITLE: Setting Foreground Composite Delete Policy in XRD\nDESCRIPTION: This YAML snippet demonstrates how to set the defaultCompositeDeletePolicy to Foreground in an XRD. This changes how cascading deletion works when claims are deleted, causing Kubernetes to use foreground cascading deletion.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositeDeletePolicy: Foreground\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS EC2 Instance Provider Settings\nDESCRIPTION: Example demonstrating how to configure provider-specific settings using forProvider block.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\n# Removed for brevity\nspec:\n  forProvider:\n    region: us-west-1\n    instanceType: t2.micro\n```\n\n----------------------------------------\n\nTITLE: Testing Composition with Crossplane CLI in Shell\nDESCRIPTION: This shell command demonstrates how to use the Crossplane CLI to preview the output of a composition. It requires Docker and uses the 'crossplane render' command with composite resource, composition, and function YAML files as input.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Crossplane XBuckets Resource Configuration\nDESCRIPTION: YAML configuration for the XBuckets composite resource that defines multiple S3 buckets to be created in a specific region.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Details in a Crossplane Composition with Multiple AccessKey Resources\nDESCRIPTION: This YAML snippet demonstrates a Composition that defines two AWS IAM AccessKey resources, each writing connection secrets to separate locations. The composition also specifies a namespace for the combined connection secrets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key1\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1-secret\n      - name: key2\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2-secret\n      # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating a Claim in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to create a Claim in Crossplane. The Claim's apiVersion matches the XRD group, and the kind matches the XRD claimNames.kind. When created, Crossplane will automatically provision a corresponding composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/claims.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: database\nmetadata:\n  name: my-claimed-database\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple EnvironmentConfig Selection Results\nDESCRIPTION: YAML example showing how to manage the results of label selectors with different modes (Single or Multiple) to either return exactly one match or multiple matches of EnvironmentConfigs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/environment-configs.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n        - type: Selector\n          selector:\n            mode: Single\n            matchLabels:\n              - key: my-other-label-key\n                type: Value\n                value: my-other-label-value\n              - key: my-other-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition Using Crossplane Functions\nDESCRIPTION: YAML definition of a Crossplane Composition that uses a pipeline mode with a function to create S3 buckets. This connects the XR to the function that creates resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: create-buckets\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBuckets\n  mode: Pipeline\n  pipeline:\n  - step: create-buckets\n    functionRef:\n      name: function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: Creating AWS ProviderConfig in Kubernetes\nDESCRIPTION: This YAML configuration creates a ProviderConfig resource for AWS. It specifies the credentials source as a Secret and references the previously created 'aws-secret' in the 'crossplane-system' namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Creating Admin ProviderConfig for AWS in YAML\nDESCRIPTION: This snippet shows the creation of a ProviderConfig named 'admin-keys' for AWS, using a different Kubernetes secret for admin authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: admin-keys\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: admin-key\n      key: admin-secret-key\n```\n\n----------------------------------------\n\nTITLE: Implementing Usage in a Composition (YAML)\nDESCRIPTION: This example demonstrates how to use a Usage resource within a Composition to define deletion ordering between a Cluster and a Release resource, ensuring the Cluster is not deleted before the Release.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/usages.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: cluster\n          base:\n            apiVersion: container.gcp.upbound.io/v1beta1\n            kind: Cluster\n            # Removed for brevity\n        - name: release\n          base:\n            apiVersion: helm.crossplane.io/v1beta1\n            kind: Release\n            # Removed for brevity\n        - name: release-uses-cluster\n          base:\n            apiVersion: apiextensions.crossplane.io/v1alpha1\n            kind: Usage\n            spec:\n              replayDeletion: true\n              of:\n                apiVersion: container.gcp.upbound.io/v1beta1\n                kind: Cluster\n                resourceSelector:\n                  matchControllerRef: true\n              by:\n                apiVersion: helm.crossplane.io/v1beta1\n                kind: Release\n                resourceSelector:\n                  matchControllerRef: true\n```\n\n----------------------------------------\n\nTITLE: Pausing Crossplane Resource Reconciliation with Annotation\nDESCRIPTION: Example showing how to pause reconciliation of an AWS EC2 instance using the crossplane.io/paused annotation. The annotation must be set to 'true' to pause reconciliation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\nmetadata:\n  name: my-rds-instance\n  annotations:\n    crossplane.io/paused: \"true\"\nspec:\n  forProvider:\n    region: us-west-1\n    instanceType: t2.micro\n```\n\n----------------------------------------\n\nTITLE: Defining Resource-Specific Connection Secrets\nDESCRIPTION: This YAML snippet shows how to specify a secret for connection details at the resource level within a Composition. The writeConnectionSecretToRef indicates the namespace and name where the connection details will be stored.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Secret Writing for Composite Resources in YAML\nDESCRIPTION: This snippet demonstrates how to specify where a composite resource writes its connection secrets. It uses the writeConnectionSecretToRef field to save secrets in a Kubernetes secret object.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  writeConnectionSecretToRef:\n    name: my-secret\n    namespace: crossplane-system\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane Composition for GCP Resources\nDESCRIPTION: A Composition template that defines a GCP Storage Bucket and PubSub Topic with patch and transform functionality, supporting location-based resource configuration\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: topic-with-bucket\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: crossplane-quickstart-bucket\n          base:\n            apiVersion: storage.gcp.upbound.io/v1beta1\n            kind: Bucket\n            spec:\n              forProvider:\n                location: \"US\"\n          patches:\n            - fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"EU\"\n                    US: \"US\"\n        - name: crossplane-quickstart-topic\n          base:\n            apiVersion: pubsub.gcp.upbound.io/v1beta1\n            kind: Topic\n            spec:\n              forProvider:\n                messageStoragePolicy:\n                  - allowedPersistenceRegions:\n                    - \"us-central1\"\n          patches:\n            - fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.messageStoragePolicy[0].allowedPersistenceRegions[0]\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"europe-central2\"\n                    US: \"us-central1\"\n  compositeTypeRef:\n    apiVersion: queue.example.com/v1alpha1\n    kind: PubSub\n```\n\n----------------------------------------\n\nTITLE: Converting Composition to Pipeline Function in Crossplane\nDESCRIPTION: This command converts an old Composition using patch and transforms to a pipeline function, specifying input and output files and an optional function name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta convert pipeline-composition oldComposition.yaml -o newComposition.yaml -f patchFunctionName\n```\n\n----------------------------------------\n\nTITLE: Applying Map Transform in Crossplane Patch\nDESCRIPTION: Shows how to apply a map transform to a patch in Crossplane. This example maps the input 'spec.desiredRegion' to corresponding AWS regions for 'spec.forProvider.region'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.desiredRegion\n      toFieldPath: spec.forProvider.region\n      transforms:\n        - type: map\n          map:\n            us: us-east-2\n            eu: eu-north-1\n```\n\n----------------------------------------\n\nTITLE: Provider Package Definition Format Example\nDESCRIPTION: This YAML example shows the format for defining a Provider package using the meta.pkg.crossplane.io/v1 API group, which is used for creating Provider packages rather than installing them.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: meta.pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Trim Suffix Transformation in Crossplane\nDESCRIPTION: Demonstrates using TrimSuffix transformation to remove characters from the end of a line using Go's TrimSuffix functionality.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    transforms:\n      - type: string\n        string:\n          type: TrimSuffix\n          trim: `-north-1'\n```\n\n----------------------------------------\n\nTITLE: Creating a VirtualMachine Resource with YAML in Crossplane\nDESCRIPTION: This snippet demonstrates how to create a VirtualMachine resource using a YAML configuration in Crossplane. It specifies the API version, kind, metadata, and desired location for the virtual machine.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: compute.example.com/v1alpha1\nkind: VirtualMachine\nmetadata:\n  name: my-vm\nspec:\n  location: \"EU\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics in Crossplane Helm Chart\nDESCRIPTION: Configuration to enable metrics export in Crossplane using the helm chart configuration option.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource Definition (XRD)\nDESCRIPTION: YAML configuration that defines a custom API in Kubernetes using Crossplane's Composite Resource Definition. It specifies a NoSQL database API with a location field constrained to either 'EU' or 'US'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: nosqls.database.example.com\nspec:\n  group: database.example.com\n  names:\n    kind: NoSQL\n    plural: nosqls\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              location:\n                type: string\n                oneOf:\n                  - pattern: '^EU$'\n                  - pattern: '^US$'\n            required:\n              - location\n    served: true\n    referenceable: true\n  claimNames:\n    kind: NoSQLClaim\n    plural: nosqlclaim\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GCP Credentials\nDESCRIPTION: Shell command to create a Kubernetes secret containing GCP service account credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric gcp-secret \\\n-n crossplane-system \\\n--from-file=creds=./gcp-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource using Custom XRD Schema\nDESCRIPTION: Example of creating a composite resource that uses the previously defined custom resource definition\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: custom-api.example.org/v1alpha1\nkind: xDatabase\nmetadata:\n  name: my-composite-resource\nspec: \n  region: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Checking Field Existence with NonEmpty in Crossplane Resources\nDESCRIPTION: Demonstrates how to configure a NonEmpty readiness check that considers a resource ready when a specified field exists and has a value. This example checks that status.atProvider.state is not empty.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: NonEmpty\n      fieldPath: status.atProvider.state\n```\n\n----------------------------------------\n\nTITLE: AWS VPC and Internet Gateway with Controller Reference\nDESCRIPTION: Example showing how to use controller references to match resources within the same composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    name: my-vpc\n    spec:\n      forProvider:\n      # Removed for brevity\n- base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: InternetGateway\n    name: my-gateway\n    spec:\n      forProvider:\n        vpcIdSelector:\n          matchControllerRef: true\n```\n\n----------------------------------------\n\nTITLE: Deploying Crossplane RBAC Manager in Kubernetes\nDESCRIPTION: This YAML configuration defines a Kubernetes Deployment for the Crossplane RBAC manager. It specifies the container image, resource limits, security context, and environment variables for the deployment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: crossplane-rbac-manager\n  namespace: default\n  labels:\n    app: crossplane-rbac-manager\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: crossplane-rbac-manager\n      release: crossplane\n  strategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: crossplane-rbac-manager\n        release: crossplane\n        helm.sh/chart: crossplane-1.15.0\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: cloud-infrastructure-controller\n        app.kubernetes.io/part-of: crossplane\n        app.kubernetes.io/name: crossplane\n        app.kubernetes.io/instance: crossplane\n        app.kubernetes.io/version: \"1.15.0\"\n    spec:\n      serviceAccountName: rbac-manager\n      initContainers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - rbac\n        - init\n        imagePullPolicy: IfNotPresent\n        name: crossplane-init\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.cpu\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.memory\n      containers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - rbac\n        - start\n        - --provider-clusterrole=crossplane:allowed-provider-permissions\n        imagePullPolicy: IfNotPresent\n        name: crossplane\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.cpu\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.memory\n          - name: LEADER_ELECTION\n            value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Basic Hello World Crossplane Function Implementation\nDESCRIPTION: Simple implementation of RunFunction that demonstrates the basic structure of a Crossplane composition function, including request handling and response generation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def RunFunction(self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext) -> fnv1.RunFunctionResponse:\n    log = self.log.bind(tag=req.meta.tag)\n    log.info(\"Running function\")\n\n    rsp = response.to(req)\n\n    example = \"\"\n    if \"example\" in req.input:\n        example = req.input[\"example\"]\n\n    # TODO: Add your function logic here!\n    response.normal(rsp, f\"I was run with input {example}!\")\n    log.info(\"I was run!\", input=example)\n\n    return rsp\n```\n\n----------------------------------------\n\nTITLE: Serving and Referencing a Schema in Crossplane XRD\nDESCRIPTION: This example demonstrates how to mark a schema version as 'served' and 'referenceable' in an XRD. Setting 'served: true' allows composite resources to use the schema version, and 'referenceable: true' indicates which version of the schema Compositions use.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string            \n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane API Resources\nDESCRIPTION: This shell command uses kubectl and grep to list all the API resources created by Crossplane. It shows the new Kubernetes API endpoints available after Crossplane installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources  | grep crossplane\n```\n\n----------------------------------------\n\nTITLE: Referencing Resources by External Name in Crossplane\nDESCRIPTION: Example of how to reference an existing AWS VPC resource by its external name when creating a Subnet resource in Crossplane. The VPC is identified by its Provider-assigned ID.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcId: vpc-01353cfe93950a8ff\n```\n\n----------------------------------------\n\nTITLE: Defining a CompositeResourceDefinition for MyVPC\nDESCRIPTION: This YAML snippet defines a CompositeResourceDefinition (XRD) for the MyVPC resource, specifying its API group, version, and schema.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: myvpcs.aws.example.upbound.io\nspec:\n  group: aws.example.upbound.io\n  names:\n    kind: MyVPC\n    plural: myvpcs\n  versions:\n  - name: v1alpha1\n    served: true \n    referenceable: true \n    schema:\n      openAPIV3Schema:\n        type: object \n        properties:\n          spec:\n            type: object \n            properties:\n              id:\n                type: string \n                description: ID of this VPC that other objects will use to refer to it. \n            required:\n            - id\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Package Metadata and Dependencies\nDESCRIPTION: This YAML file (crossplane.yaml) defines the metadata and dependencies for a Configuration package, including required provider versions and Crossplane version constraints.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n$ cat crossplane.yaml\napiVersion: meta.pkg.crossplane.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: test-configuration\nspec:\n  dependsOn:\n    - apiVersion: pkg.crossplane.io/v1\n      kind: Provider\n      package: xpkg.crossplane.io/crossplane-contrib/provider-aws\n      version: \">=v0.36.0\"\n  crossplane:\n    version: \">=v1.12.1-0\"\n```\n\n----------------------------------------\n\nTITLE: Viewing CombineFromComposite Results in Managed Resource\nDESCRIPTION: This snippet shows the result of applying a CombineFromComposite patch, displaying the combined name in the managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl describe bucket\nName:         my-resource-eu-north-1-field2-text\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Pull Policy\nDESCRIPTION: Provider configuration showing how to set the packagePullPolicy to control when Provider packages are downloaded.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  packagePullPolicy: Always\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane ClusterRoleBinding\nDESCRIPTION: Binds the crossplane ClusterRole to the crossplane ServiceAccount in the default namespace. This grants the Crossplane service account the necessary permissions to function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: crossplane\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: crossplane\nsubjects:\n- kind: ServiceAccount\n  name: crossplane\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Enabling Claims for Crossplane XRD\nDESCRIPTION: Configuration showing how to enable claims for a Crossplane XRD by defining claimNames. This allows users to use the XRD API through claims with the specified kind (Database) and plural form (databases).\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  claimNames:\n    kind: Database\n    plural: databases\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Database Instance Import with External Name\nDESCRIPTION: YAML configuration for importing a GCP DatabaseInstance with external name annotation and Observe management policy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/import-existing-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"Observe\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Export in Crossplane Helm Chart\nDESCRIPTION: This YAML snippet shows the configuration option required to enable metrics export in the Crossplane helm chart. Setting 'metrics.enabled' to true enables the collection and exposure of Prometheus metrics.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Enforcing Specific Composition in Crossplane XRD\nDESCRIPTION: This YAML snippet demonstrates how to enforce a specific Composition for all composite resources and Claims using this XRD. It sets 'myComposition' as the enforced Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  enforcedCompositionRef: \n    name: myComposition\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Combined Secret Storage in YAML Composition\nDESCRIPTION: This YAML configuration demonstrates how to set up a Composition to store combined connection secrets in a specified namespace. It uses the writeConnectionSecretsToNamespace field to define where Crossplane should store the combined secret object.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  writeConnectionSecretsToNamespace: my-namespace\n  resources:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Admin ClusterRole\nDESCRIPTION: Defines the admin-level cluster role for Crossplane with aggregation rules. This role aggregates all permissions labeled with rbac.crossplane.io/aggregate-to-admin.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane-admin\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\naggregationRule:\n  clusterRoleSelectors:\n  - matchLabels:\n      rbac.crossplane.io/aggregate-to-admin: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Required FromFieldPath Policy Configuration\nDESCRIPTION: Shows how to configure a required fromFieldPath policy that ensures the source field exists in the data source resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    policy:\n      fromFieldPath: Required\n```\n\n----------------------------------------\n\nTITLE: Enabling Real-time Compositions in Crossplane Deployment\nDESCRIPTION: This YAML snippet shows how to edit the Crossplane deployment to enable real-time compositions. It adds the --enable-realtime-compositions flag to the container arguments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/pods.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --enable-realtime-compositions\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Virtual Network with Crossplane\nDESCRIPTION: This YAML snippet creates an Azure Virtual Network using Crossplane. It defines a VirtualNetwork custom resource with specifications for the network's address space, location, and resource group.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: network.azure.upbound.io/v1beta1\nkind: VirtualNetwork\nmetadata:\n  name: crossplane-quickstart-network\nspec:\n  forProvider:\n    addressSpace:\n      - 10.0.0.0/16\n    location: \"Sweden Central\"\n    resourceGroupName: docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition for Connection Details\nDESCRIPTION: Example Composition that configures two IAM Users and AccessKeys with connection details for each. The Composition specifies where secrets should be written and what keys should be exposed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: xsecrettest.example.org\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  compositeTypeRef:\n    apiVersion: example.org/v1alpha1\n    kind: XSecretTest\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              userSelector:\n                matchControllerRef: true\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n        - name: user\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: username\n        - name: password\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: password\n        - name: key\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: attribute.secret\n        - name: smtp\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: attribute.ses_smtp_password_v4\n        patches:\n          - fromFieldPath: \"metadata.uid\"\n            toFieldPath: \"spec.writeConnectionSecretToRef.name\"\n            transforms:\n              - type: string\n                string:\n                  type: Format\n                  fmt: \"%s-secret1\"\n      - name: user\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: User\n          spec:\n            forProvider: {}\n      - name: user2\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: User\n          metadata:\n            labels:\n              docs.crossplane.io: user\n          spec:\n            forProvider: {}\n      - name: key2\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              userSelector:\n                matchLabels:\n                  docs.crossplane.io: user\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2\n        connectionDetails:\n          - name: key2-user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n          - name: key2-password\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: password\n          - name: key2-secret\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.secret\n          - name: key2-smtp\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.ses_smtp_password_v4\n        patches:\n          - fromFieldPath: \"metadata.uid\"\n            toFieldPath: \"spec.writeConnectionSecretToRef.name\"\n            transforms:\n              - type: string\n                string:\n                  type: Format\n                  fmt: \"%s-secret2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Logs\nDESCRIPTION: Shows how to fetch logs from the Crossplane pod to investigate issues. Logs are filtered by the app label to target just Crossplane containers.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system logs -lapp=crossplane\n```\n\n----------------------------------------\n\nTITLE: Checking NonEmpty Field Existence in Crossplane Resources\nDESCRIPTION: This YAML snippet demonstrates how to check that a composed resource's field exists with a value using the NonEmpty readiness check type. It verifies the status.atProvider.state field isn't empty.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: NonEmpty\n      fieldPath: status.atProvider.state\n```\n\n----------------------------------------\n\nTITLE: Connection Details Configuration in Crossplane\nDESCRIPTION: Shows how to configure connection details for a composite resource including various secret types.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          spec:\n            forProvider:\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: my-username\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n          - name: my-field-secret\n            type: FromFieldPath\n            fromFieldPath: spec.forProvider.user\n          - name: my-status-secret\n            type: FromValue\n            value: \"docs.crossplane.io\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Composition Reference in XRD\nDESCRIPTION: This YAML snippet shows how to set a default Composition for an XRD using defaultCompositionRef. This defines which Composition should be used when multiple Compositions reference the same XRD and no specific selection is made.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositionRef: \n    name: myComposition\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining CompositeResourceDefinition with Schema in YAML\nDESCRIPTION: This YAML snippet demonstrates a CompositeResourceDefinition with a defined schema. It includes the API group, name, version, and a simple schema defining a 'region' property of type string.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for Runtime Resources in YAML\nDESCRIPTION: This snippet illustrates how to use DeploymentRuntimeConfig to customize metadata for runtime resources. It shows how to set custom labels for the Deployment and specify a custom name for the ServiceAccount.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: my-runtime-config\nspec:\n  deploymentTemplate:\n    metadata:\n      labels:\n        my-label: my-value\n  serviceAccountTemplate:\n    metadata:\n      name: my-service-account\n```\n\n----------------------------------------\n\nTITLE: Creating Composition for GCP Service Account Resources\nDESCRIPTION: Defines a Composition that creates a GCP Service Account and Service Account Key, with configuration for publishing connection details to Vault\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: essinstances.ess.example.org\n  labels:\n    feature: ess\nspec:\n  publishConnectionDetailsWithStoreConfigRef: \n    name: vault\n  compositeTypeRef:\n    apiVersion: ess.example.org/v1alpha1\n    kind: CompositeESSInstance\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: serviceaccount\n          base:\n            apiVersion: iam.gcp.crossplane.io/v1alpha1\n            kind: ServiceAccount\n            metadata:\n              name: ess-test-sa\n            spec:\n              forProvider:\n                displayName: a service account to test ess\n        - name: serviceaccountkey\n          base:\n            apiVersion: iam.gcp.crossplane.io/v1alpha1\n            kind: ServiceAccountKey\n            spec:\n              forProvider:\n                serviceAccountSelector:\n                  matchControllerRef: true\n              publishConnectionDetailsTo:\n                name: ess-mr-conn\n                metadata:\n                  labels:\n                    environment: development\n                    team: backend\n                configRef:\n                  name: vault\n          connectionDetails:\n            - name: publicKey\n              type: FromConnectionSecretKey\n              fromConnectionSecretKey: publicKey\n            - name: publicKey\n              type: FromConnectionSecretKey\n              fromConnectionSecretKey: publicKeyType\n```\n\n----------------------------------------\n\nTITLE: Restricting Secret Keys in CompositeResourceDefinition\nDESCRIPTION: This YAML snippet shows how to restrict which secret keys are included in the combined secret and provided to Claims using connectionSecretKeys in a CompositeResourceDefinition (XRD). Only keys listed will be included in the combined secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CompositeResourceDefinition\nspec:\n  # Removed for brevity.\n  connectionSecretKeys:\n    - username\n    - password\n    - key2-user\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Composite Resource in Crossplane using kubectl\nDESCRIPTION: This shell command shows how to inspect a Composite Resource using kubectl describe. The output shows the Claim Ref section that links back to the original claim, demonstrating the bidirectional relationship between Claims and Composite Resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/claims.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe xmydatabase.example.org/my-claimed-database-rr4ll\nName:         my-claimed-database-rr4ll\nAPI Version:  example.org/v1alpha1\nKind:         XMyDatabase\nSpec:\n  Claim Ref:\n    API Version:  example.org/v1alpha1\n    Kind:         database\n    Name:         my-claimed-database\n    Namespace:    default\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository\nDESCRIPTION: This command updates the local Crossplane Helm chart. It ensures that the latest version of the chart is available for the upgrade process.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition with Function Input\nDESCRIPTION: Example of a Composition configuration that includes function input for patch-and-transform operations on bucket resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-render\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n        patches:\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.bucketRegion\n          toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Writing Connection Secrets in Crossplane YAML Configuration\nDESCRIPTION: Example showing how to configure a composite resource to write connection secrets to a Kubernetes secret object with specified name and namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  writeConnectionSecretToRef:\n    name: my-secret\n    namespace: crossplane-system\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Setting Default Composition Reference in Crossplane XRD\nDESCRIPTION: This YAML snippet demonstrates how to set a default Composition reference in an XRD. It specifies which Composition should be used by default for composite resources or Claims using this XRD.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositionRef: \n    name: myComposition\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Package\nDESCRIPTION: Downloads and installs a Crossplane package. The command specifies the package kind, registry URL, package name, tag, and an optional name for the package within Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg install <package-kind> <registry URL package name and tag> [<optional-name>]\n```\n\n----------------------------------------\n\nTITLE: Defining a Crossplane Function Package using YAML\nDESCRIPTION: This YAML snippet shows the structure for defining a Crossplane Function package. It uses the meta.pkg.crossplane.io group and the Function kind. The actual specification details are omitted for brevity.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/functions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: meta.pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: provider-aws\nspec:\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Resource Readiness Check Configuration\nDESCRIPTION: Demonstrates how to configure custom readiness checks for resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n  readinessChecks:\n    - type: <match type>\n      fieldPath: <resource field>\n```\n\n----------------------------------------\n\nTITLE: Creating an RDS Instance with Crossplane\nDESCRIPTION: Shows how to define an AWS RDS instance using Crossplane's managed resources, including provider configuration reference and connection secret configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/multi-tenant.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: rdsmysql\nspec:\n  forProvider:\n    region: us-east-1\n    dbInstanceClass: db.t3.medium\n    masterUsername: masteruser\n    allocatedStorage: 20\n    engine: mysql\n    engineVersion: \"5.6.35\"\n    skipFinalSnapshotBeforeDeletion: true\n  providerConfigRef:\n    name: cool-aws-creds\n  writeConnectionSecretToRef:\n    namespace: crossplane-system\n    name: aws-rdsmysql-conn\n```\n\n----------------------------------------\n\nTITLE: Rendering Crossplane Compositions with the Crossplane CLI\nDESCRIPTION: This shell command demonstrates how to use the crossplane render command to preview the output of a composition. The command takes composite resource, composition, and functions YAML files as input and renders the resulting resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Configuration with Helm\nDESCRIPTION: This shell script demonstrates how to install a Crossplane Configuration using Helm during the initial Crossplane installation.  The `--set configuration.packages` argument is used to specify the packages to install, in this case, the Getting Started configuration. The configuration package location is set to `xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0`.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\n--set configuration.packages='{xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0}'\n```\n\n----------------------------------------\n\nTITLE: Deploying Crossplane Core Components\nDESCRIPTION: Deployment configuration for Crossplane core components including init containers, main container, volume mounts, and security contexts. Specifies resource limits, probes, and environment configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: crossplane\n  namespace: default\n  labels:\n    app: crossplane\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: crossplane\n      release: crossplane\n  strategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: crossplane\n        release: crossplane\n        helm.sh/chart: crossplane-1.15.0\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: cloud-infrastructure-controller\n        app.kubernetes.io/part-of: crossplane\n        app.kubernetes.io/name: crossplane\n        app.kubernetes.io/instance: crossplane\n        app.kubernetes.io/version: \"1.15.0\"\n    spec:\n      serviceAccountName: crossplane\n      hostNetwork: false\n      initContainers:\n        - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n          args:\n          - core\n          - init\n          imagePullPolicy: IfNotPresent\n          name: crossplane-init\n          resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n          env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.cpu\n                divisor: \"1\"\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.memory\n                divisor: \"1\"\n          - name: POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: POD_SERVICE_ACCOUNT\n            valueFrom:\n              fieldRef:\n                fieldPath: spec.serviceAccountName\n          - name: \"WEBHOOK_SERVICE_NAME\"\n            value: crossplane-webhooks\n          - name: \"WEBHOOK_SERVICE_NAMESPACE\"\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: \"WEBHOOK_SERVICE_PORT\"\n            value: \"9443\"\n          - name: \"TLS_CA_SECRET_NAME\"\n            value: crossplane-root-ca\n          - name: \"TLS_SERVER_SECRET_NAME\"\n            value: crossplane-tls-server\n          - name: \"TLS_CLIENT_SECRET_NAME\"\n            value: crossplane-tls-client\n      containers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - core\n        - start\n        imagePullPolicy: IfNotPresent\n        name: crossplane\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        startupProbe:\n          failureThreshold: 30\n          periodSeconds: 2\n          tcpSocket:\n            port: readyz\n        ports:\n        - name: readyz\n          containerPort: 8081\n        - name: webhooks\n          containerPort: 9443\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.cpu\n                divisor: \"1\"\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.memory\n                divisor: \"1\"\n          - name: POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: POD_SERVICE_ACCOUNT\n            valueFrom:\n              fieldRef:\n                fieldPath: spec.serviceAccountName\n          - name: LEADER_ELECTION\n            value: \"true\"\n          - name: \"TLS_SERVER_SECRET_NAME\"\n            value: crossplane-tls-server\n          - name: \"TLS_SERVER_CERTS_DIR\"\n            value: /tls/server\n          - name: \"TLS_CLIENT_SECRET_NAME\"\n            value: crossplane-tls-client\n          - name: \"TLS_CLIENT_CERTS_DIR\"\n            value: /tls/client\n        volumeMounts:\n          - mountPath: /cache\n            name: package-cache\n          - mountPath: /tls/server\n            name: tls-server-certs\n          - mountPath: /tls/client\n            name: tls-client-certs\n      volumes:\n      - name: package-cache\n        emptyDir:\n          medium:\n          sizeLimit: 20Mi\n      - name: tls-server-certs\n        secret:\n          secretName: crossplane-tls-server\n      - name: tls-client-certs\n        secret:\n          secretName: crossplane-tls-client\n```\n\n----------------------------------------\n\nTITLE: Applying Composite Resource Value to Composed Resource in Crossplane (YAML)\nDESCRIPTION: This snippet demonstrates the FromCompositeFieldPath patch, which takes a value from a composite resource and applies it to a field in the composed resource. It shows how to use the 'desiredRegion' value from a composite resource to set the 'region' in a managed resource's forProvider settings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.desiredRegion\n      toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: MergeObjectsAppendArrays toFieldPath Policy in Crossplane YAML\nDESCRIPTION: Shows how to use the MergeObjectsAppendArrays policy for toFieldPath in Crossplane patches. This policy merges objects and appends values to arrays instead of replacing them.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    policy:\n      toFieldPath: MergeObjectsAppendArrays\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Functions in a Composition Pipeline\nDESCRIPTION: This snippet demonstrates using multiple functions in a Composition's pipeline. It shows how to chain functions together, with the output of one function being passed to the next.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  # Removed for Brevity\n  mode: Pipeline\n  pipeline:\n  - step: cue-export-resources\n    functionRef:\n      name: function-cue\n    input:\n      apiVersion: cue.fn.crossplane.io/v1beta1\n      kind: CUEInput\n      name: storage-bucket\n      export:\n        target: Resources\n        value: |\n          apiVersion: \"s3.aws.upbound.io/v1beta1\"\n          kind: \"Bucket\"\n          spec: forProvider: region: \"us-east-2\"\n  - step: automatically-detect-readiness\n    functionRef:\n      name: function-auto-ready\n```\n\n----------------------------------------\n\nTITLE: Listing ProviderRevisions with kubectl\nDESCRIPTION: This shell command lists all ProviderRevisions, showing their health status, revision number, image, and state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providerrevisions\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Pod Status\nDESCRIPTION: Command and example output showing the status of Crossplane pods in the system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS    RESTARTS   AGE\ncrossplane-6d67f8cd9d-g2gjw                1/1     Running   0          26m\ncrossplane-rbac-manager-86d9b5cf9f-2vc4s   1/1     Running   0          26m\n```\n\n----------------------------------------\n\nTITLE: Writing Connection Secrets to a Reference in Crossplane\nDESCRIPTION: Example of configuring a composite resource to write connection secrets to a Kubernetes secret. This snippet shows how to specify the name and namespace where connection details should be stored.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  writeConnectionSecretToRef:\n    name: my-secret\n    namespace: crossplane-system\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating a Compute Claim in Crossplane\nDESCRIPTION: Defines a Crossplane compute claim with namespace and size specification. Claims are namespace-scoped Kubernetes resources that represent a request for infrastructure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/introduction.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: test.example.org/v1alpha1\\nkind: computeClaim\\nmetadata:\\n  name: myClaim\\n  namespace: devGroup\\nspec:\\n  size: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Checking Claim Status\nDESCRIPTION: Displays the status of the created VirtualMachineClaim in the specified namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get claim -n crossplane-test\nNAME               SYNCED   READY   CONNECTION-SECRET   AGE\nmy-namespaced-vm   True     True                        5m11s\n```\n\n----------------------------------------\n\nTITLE: Configuring initProvider for Node Group Creation in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the initProvider field to set initial values for a Node Group resource in Crossplane. It specifies management policies and sets an initial desired size, which Crossplane won't revert if changed by an autoscaler.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: eks.aws.upbound.io/v1beta1\nkind: NodeGroup\nmetadata:\n  name: sample-eks-ng\nspec:\n  managementPolicies: [\"Observe\", \"Create\", \"Update\", \"Delete\"]\n  initProvider:\n    scalingConfig:\n      - desiredSize: 1\n  forProvider:\n    region: us-west-1\n    scalingConfig:\n      - maxSize: 4\n        minSize: 1\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository Cache\nDESCRIPTION: Updates the local Helm chart repository cache to ensure the latest version of the Crossplane chart is available.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Level AWS Provider Authentication in Crossplane\nDESCRIPTION: Defines a user-level ProviderConfig for AWS named 'user-keys' that references credentials stored in a Kubernetes Secret. This configuration would be used for resources that should be created with standard user permissions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: user-keys\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: my-key\n      key: secret-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Package Pull Policy in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to configure the package pull policy for a Crossplane provider. It sets the policy to 'Always' to check for new packages every minute.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  packagePullPolicy: Always\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Provider with Helm\nDESCRIPTION: Helm command to install Crossplane with the AWS Provider package specified during installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\n--set provider.packages='{xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0}'\n```\n\n----------------------------------------\n\nTITLE: Importing GCP Network with External Name Annotation\nDESCRIPTION: Example of importing an existing GCP Network using the crossplane.io/external-name annotation to specify the target resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/import-existing-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: compute.gcp.crossplane.io/v1beta1\nkind: Network\nmetadata:\n  annotations:\n    crossplane.io/external-name: my-existing-network\n```\n\n----------------------------------------\n\nTITLE: Using a Single Function in a Composition Pipeline\nDESCRIPTION: This snippet shows how to use a single composition function in a Composition's pipeline. It demonstrates setting the mode to Pipeline, defining a step, and specifying the function reference and input.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  # Removed for Brevity\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Claims in XRD\nDESCRIPTION: Demonstrates how to configure claim names for an XRD, allowing Claims to use the XRD API with unique kind and plural names\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  claimNames:\n    kind: Database\n    plural: databases\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing specific Crossplane CLI version\nDESCRIPTION: This command demonstrates how to install a specific version of the Crossplane CLI (v1.14.0 in this example) by setting the XP_VERSION environment variable.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh\" | XP_VERSION=v1.14.0 sh\n```\n\n----------------------------------------\n\nTITLE: Example Custom API Definition\nDESCRIPTION: Sample YAML showing the structure of a custom API definition for a NoSQL database.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.example.com/v1alpha1\nkind: NoSQL\nmetadata:\n  name: my-nosql-database\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS RDS Instance with Crossplane\nDESCRIPTION: Defines an RDSInstance managed resource that specifies configuration for a MySQL database instance in AWS. The resource references a ProviderConfig for authentication and defines a connection secret for accessing the provisioned database.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/multi-tenant.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: rdsmysql\nspec:\n  forProvider:\n    region: us-east-1\n    dbInstanceClass: db.t3.medium\n    masterUsername: masteruser\n    allocatedStorage: 20\n    engine: mysql\n    engineVersion: \"5.6.35\"\n    skipFinalSnapshotBeforeDeletion: true\n  providerConfigRef:\n    name: cool-aws-creds # name of ProviderConfig above\n  writeConnectionSecretToRef:\n    namespace: crossplane-system\n    name: aws-rdsmysql-conn\n```\n\n----------------------------------------\n\nTITLE: Configuring initProvider in a Managed Resource\nDESCRIPTION: This example demonstrates the use of initProvider to set initial values for a managed resource that may change after creation, such as an auto-scaling group size.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: eks.aws.m.upbound.io/v1beta1\nkind: NodeGroup\nmetadata:\n  namespace: default\n  name: sample-eks-ng\nspec:\n  managementPolicies: [\"Observe\", \"Create\", \"Update\", \"Delete\"]\n  initProvider:\n    scalingConfig:\n      - desiredSize: 1\n  forProvider:\n    region: us-west-1\n    scalingConfig:\n      - maxSize: 4\n        minSize: 1\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Composition Revision for a Composite Resource\nDESCRIPTION: This YAML snippet demonstrates how to select a specific Composition revision by name using the compositionRevisionRef field, allowing fine-grained control over which version of a Composition a composite resource uses.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionUpdatePolicy: Manual\n  compositionRevisionRef:\n    name: my-composition-b5aa1eb\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Provider Installation with Digest\nDESCRIPTION: Example of installing a Provider using an image digest instead of a tag for deterministic installations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws@sha256:ee6bece46dbb54cc3f0233961f5baac317fa4e4a81b41198bdc72fc472d113d0\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition Schema Validation Mode\nDESCRIPTION: Example YAML configuration showing how to set the schema-aware validation mode for a Composition using metadata annotations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  annotations:\n    crossplane.io/composition-schema-aware-validation-mode: loose\n  # Removed for brevity\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Pausing a Composite Resource in Crossplane\nDESCRIPTION: Example showing how to pause a composite resource by applying the crossplane.io/paused annotation. When paused, Crossplane won't check or make changes to the external resources managed by this composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\n  annotations:\n    crossplane.io/paused: \"true\"\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Updating Composition Spec and Label\nDESCRIPTION: Updates Composition spec to disable DNS support and changes the channel label back to dev\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  labels:\n    channel: dev\n  name: myvpcs.aws.example.upbound.io\nspec:\n  writeConnectionSecretsToNamespace: crossplane-system\n  compositeTypeRef:\n    apiVersion: aws.example.upbound.io/v1alpha1\n    kind: MyVPC\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: my-vpc\n        base:\n          apiVersion: ec2.aws.upbound.io/v1beta1\n          kind: VPC\n          spec:\n            forProvider:\n              region: us-west-1\n              cidrBlock: 192.168.0.0/16\n              enableDnsSupport: false\n              enableDnsHostnames: true\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with Crossplane Usages\nDESCRIPTION: Usage definition that employs selectors instead of direct resource references. This example shows how to use label selectors and controller references to dynamically identify resources in a usage relationship.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/usages.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceSelector:\n      matchControllerRef: false # default, and could be omitted\n      matchLabels:\n        foo: bar\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceSelector:\n       matchLabels:\n          baz: qux\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket with Admin ProviderConfig in YAML\nDESCRIPTION: This snippet shows how to create an AWS S3 Bucket resource using the 'admin-keys' ProviderConfig for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  name: user-bucket\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: admin-keys\n```\n\n----------------------------------------\n\nTITLE: Composition with Function Input Configuration\nDESCRIPTION: YAML configuration showing how to specify input for a composition function in a Composition resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-render\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: Bucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.m.upbound.io/v1beta1\n          kind: Bucket\n        patches:\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.bucketRegion\n          toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Using ToCompositeFieldPath and FromCompositeFieldPath Patches in Crossplane\nDESCRIPTION: This code demonstrates how to use ToCompositeFieldPath to write data from a managed resource to a composite resource's status, and FromCompositeFieldPath to read that data and write it to another managed resource's label.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    # Removed for brevity\n  patches:\n    - type: ToCompositeFieldPath\n      fromFieldPath: metadata.name\n      toFieldPath: status.secondResource\n- name: bucket2\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    # Removed for brevity\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: status.secondResource\n      toFieldPath: metadata.labels['secondResource']\n```\n\n----------------------------------------\n\nTITLE: Installing Function Patch and Transform\nDESCRIPTION: Kubernetes manifest to install the Function Patch and Transform as a Crossplane Function resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Using FromEnvironmentFieldPath Patch in Crossplane\nDESCRIPTION: This snippet demonstrates how to use FromEnvironmentFieldPath to apply values from the environment to a composed resource. The example shows applying the environment's EU location as the region for a resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n    patches:\n    - type: FromEnvironmentFieldPath\n      fromFieldPath: locations.eu\n      toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Secrets in Crossplane Composition\nDESCRIPTION: This YAML snippet demonstrates how to define connection secrets for AccessKey resources in a Crossplane Composition. It specifies the namespace for writing connection secrets and defines two AccessKey resources with their respective secret configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key1\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1-secret\n      - name: key2\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2-secret\n      # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Browse RBAC Policy\nDESCRIPTION: Command to view the full RBAC policy for the crossplane-browse ClusterRole using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/pods.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-browse\n```\n\n----------------------------------------\n\nTITLE: Verifying GCP Credentials Injection in Crossplane Provider Pod\nDESCRIPTION: Checks if GCP credentials are correctly injected into the provider-gcp pod by first finding the pod and then displaying the content of the credentials file injected by Vault.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nPROVIDER_CONTROLLER_POD=$(kubectl -n crossplane-system get pod -l pkg.crossplane.io/provider=provider-gcp -o name --no-headers=true)\nkubectl -n crossplane-system exec -it $PROVIDER_CONTROLLER_POD -c provider-gcp -- cat /vault/secrets/creds.txt\n```\n\n----------------------------------------\n\nTITLE: Serving and Referencing a Schema in Crossplane XRD\nDESCRIPTION: This YAML snippet shows how to configure a schema version to be served and referenceable in a Crossplane XRD. It demonstrates setting 'served: true' and 'referenceable: true' for a specific version of the schema.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string            \n```\n\n----------------------------------------\n\nTITLE: Listing All Composite Resources with kubectl\nDESCRIPTION: Shell command to list all composite resources managed by Crossplane regardless of their custom resource type, showing their sync status, readiness, associated composition, and age.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\n```\n\n----------------------------------------\n\nTITLE: Regular Expression String Transform in Crossplane\nDESCRIPTION: Demonstrates how to use regular expressions to extract parts of input strings using Crossplane's string transforms. Uses capture groups to match specific patterns.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"euRegion\"]\n    transforms:\n      - type: string\n        string:\n          type: Regexp\n          regexp:\n            match: '^eu-(.*)-'\n            group: 1\n```\n\n----------------------------------------\n\nTITLE: Hello World Composition Function in Go\nDESCRIPTION: Simple example of a composition function written in Go that returns a hello world message.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n        rsp := response.To(req, response.DefaultTTL)\n        response.Normal(rsp, \"Hello world!\")\n        return rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Tracking Method in Argo CD ConfigMap\nDESCRIPTION: Configure Argo CD to use annotation-based resource tracking for Crossplane objects by modifying the argocd-cm ConfigMap.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n  application.resourceTrackingMethod: annotation\n```\n\n----------------------------------------\n\nTITLE: Accessing a Custom API\nDESCRIPTION: This YAML snippet shows how to access a custom API defined by a Crossplane Composite Resource Definition (XRD). It creates a `NoSQL` object, specifying the desired `location`. Crossplane will then use the corresponding Composition to provision the underlying cloud resources based on the user's input.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.example.com/v1alpha1\nkind: NoSQL\nmetadata:\n  name: my-nosql-database\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Getting NoSQL Resources\nDESCRIPTION: This shell command retrieves the list of `NoSQL` custom resources created via the custom API. It uses `kubectl get nosql` to display the names, sync status, ready status, composition used, and ages of the NoSQL resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nosql\n```\n\n----------------------------------------\n\nTITLE: CombineToComposite Patch Example\nDESCRIPTION: Shows how to use CombineToComposite to combine multiple fields from a composed resource into a single field in the composite resource. This example creates a URL from name and region values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineToComposite\n      combine:\n        variables:\n          - fromFieldPath: metadata.name\n          - fromFieldPath: spec.forProvider.region\n        strategy: string\n        string:\n          fmt: \"https://%s.%s.com\"\n      toFieldPath: status.url\n```\n\n----------------------------------------\n\nTITLE: ToEnvironmentFieldPath Patch in Crossplane YAML\nDESCRIPTION: Shows writing values from a composed resource to the in-memory environment using ToEnvironmentFieldPath patch. Demonstrates storing region value in environment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n    patches:\n    - type: ToEnvironmentFieldPath\n      fromFieldPath: spec.forProvider.region\n      toFieldPath: key1\n```\n\n----------------------------------------\n\nTITLE: Using Convert Transform in Crossplane Patch\nDESCRIPTION: Demonstrates the use of a convert transform in Crossplane to change the input data type. This example converts a number field to a string in a label.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n- type: FromCompositeFieldPath\n  fromFieldPath: spec.numberField\n  toFieldPath: metadata.label[\"numberToString\"]\n  transforms:\n    - type: convert\n      convert:\n        toType: string\n```\n\n----------------------------------------\n\nTITLE: Listing ProviderRevisions with kubectl\nDESCRIPTION: This shell command lists all ProviderRevisions, showing their health status, revision number, image, and state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providerrevisions\n```\n\n----------------------------------------\n\nTITLE: Inspecting Crossplane Provider Status\nDESCRIPTION: Commands to check the status of a Crossplane provider and view its details for troubleshooting.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe provider.pkg.crossplane.io provider-aws\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providerrevision provider-aws-a2e16ca2fc1a\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe providerrevision provider-aws-a2e16ca2fc1a\n```\n\n----------------------------------------\n\nTITLE: Pausing Crossplane Composite Resources\nDESCRIPTION: Example showing how to pause a composite resource using the crossplane.io/paused annotation to prevent checking or making changes to external resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\n  annotations:\n    crossplane.io/paused: \"true\"\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Installation with kubectl\nDESCRIPTION: This shell command uses kubectl to check the status of Crossplane pods in the crossplane-system namespace. It helps verify that the installation was successful.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Retrieving Crossplane Version\nDESCRIPTION: Command to display the client and server versions of Crossplane CLI. Provides version information for both local client and Crossplane control plane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane version\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Selector Labels in Crossplane Composition\nDESCRIPTION: This YAML snippet demonstrates how to configure optional selector labels in a Crossplane Composition. It uses the 'fromFieldPathPolicy: Optional' setting to ignore a field if it doesn't exist in the composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/environment-configs.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            maxMatch: 4\n            sortByFieldPath: metadata.annotations[sort.by/weight]\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n                fromFieldPathPolicy: Optional\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition Template in YAML\nDESCRIPTION: Example YAML snippet showing the structure of a Crossplane Composition, which defines a template for managed resources. It specifies the apiVersion, kind, and compositeTypeRef to indicate which Composite Resources can use this template.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: test.example.org\nspec:\n  compositeTypeRef:\n    apiVersion: test.example.org/v1alpha1\n    kind: MyComputeResource\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Upgrading Crossplane Installation\nDESCRIPTION: Performs the Crossplane upgrade in the specified namespace using Helm.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/upgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade crossplane --namespace crossplane-system crossplane-stable/crossplane\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Pull Policy for Crossplane Configuration\nDESCRIPTION: This YAML snippet shows how to set the package pull policy for a Crossplane Configuration, determining when to download the package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  packagePullPolicy: Always\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Managing Conflicting Secret Keys in Crossplane Composition\nDESCRIPTION: This YAML demonstrates how to handle conflicting secret keys by creating unique names with connection details. It shows two resources that would both generate a 'username' key, with the second one renamed to 'key2-user' to avoid conflict.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n      - name: key2\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2\n        connectionDetails:\n          - name: key2-user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n```\n\n----------------------------------------\n\nTITLE: Vault Plugin Annotations Configuration\nDESCRIPTION: YAML configuration for Vault plugin pod annotations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npodAnnotations:\n  vault.hashicorp.com/agent-inject: \"true\"\n  vault.hashicorp.com/agent-inject-token: \"true\"\n  vault.hashicorp.com/role: crossplane\n  vault.hashicorp.com/agent-run-as-user: \"65532\"\n```\n\n----------------------------------------\n\nTITLE: Checking for False Boolean Fields in Crossplane Resources\nDESCRIPTION: This YAML snippet demonstrates how to verify a boolean field is false using the MatchFalse readiness check type. It checks if the status.atProvider.manifest.status.pending field has a value of false.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchFalse\n      fieldPath: status.atProvider.manifest.status.pending\n```\n\n----------------------------------------\n\nTITLE: Checking for True Boolean Fields in Crossplane Resources\nDESCRIPTION: This YAML snippet shows how to verify a boolean field is true using the MatchTrue readiness check type. It checks if the status.atProvider.manifest.status.ready field has a value of true.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchTrue\n      fieldPath: status.atProvider.manifest.status.ready\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Helm\nDESCRIPTION: Command to install Crossplane using Helm chart into the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/install.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-stable/crossplane\n```\n\n----------------------------------------\n\nTITLE: Crossplane ReconcileSuccess Condition Example\nDESCRIPTION: Shows the condition structure when a provider has successfully created and is monitoring a managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Synced\n  Status:                True\n  Reason:                ReconcileSuccess\n```\n\n----------------------------------------\n\nTITLE: Crossplane Custom Values YAML Configuration\nDESCRIPTION: Example YAML configuration file for customizing Crossplane installation settings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nreplicas: 2\n\nimage:\n  pullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Resource Templates\nDESCRIPTION: An example of defining multiple resource templates in a Composition, including an S3 Bucket and an EC2 Instance with their provider-specific configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: storage-bucket\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: \"us-east-2\"\n- name: vm\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: Instance\n    spec:\n      forProvider:\n        ami: ami-0d9858aa3c6322f73\n        instanceType: t2.micro\n        region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Importing GCP DatabaseInstance Automatically in YAML\nDESCRIPTION: This snippet shows how to automatically import a GCP SQL DatabaseInstance using the 'Observe' management policy. It includes the necessary annotations and specifications for automatic import.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/import-existing-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"Observe\"]\n  forProvider:\n    region: \"us-central1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Secret with ImageConfig in Crossplane\nDESCRIPTION: A YAML example showing how to configure an ImageConfig resource to inject a pull secret for images with a specific registry prefix. The ImageConfig will apply the specified pull secret whenever Crossplane interacts with the matched registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/image-configs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: ImageConfig\nmetadata:\n  name: acme-packages\nspec:\n  matchImages:\n    - type: Prefix\n      prefix: registry1.com/acme-co/\n  registry:\n    authentication:\n      pullSecretRef:\n        name: acme-registry-credentials\n```\n\n----------------------------------------\n\nTITLE: Setting Provider Configuration Reference\nDESCRIPTION: Example showing how to reference a specific ProviderConfig in a managed resource and the corresponding ProviderConfig definition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.m.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n    # Removed for brevity\n  providerConfigRef: user-keys\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.m.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: user-keys\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Provider Settings\nDESCRIPTION: ProviderConfig manifest that connects GCP credentials and project settings to the provider. Specifies the project ID and references the credential secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  projectID: PROJECT_ID\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: gcp-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Creating an EnvironmentConfig in Crossplane\nDESCRIPTION: A YAML example showing how to create an EnvironmentConfig resource in Crossplane with various data types in the data field, including nested objects, key-value pairs, and arrays.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/environment-configs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: EnvironmentConfig\nmetadata:\n  name: example-environment\ndata:\n  locations:\n    us: us-east-2\n    eu: eu-north-1\n  key1: value1\n  key2: value2\n  key3:\n    - item1\n    - item2\n```\n\n----------------------------------------\n\nTITLE: Viewing Provider Logs\nDESCRIPTION: Demonstrates how to access logs from a specific Crossplane provider pod for troubleshooting provider-specific issues.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system logs <name-of-provider-pod>\n```\n\n----------------------------------------\n\nTITLE: Defining a Desired S3 Bucket in YAML\nDESCRIPTION: Example of a desired state resource that a function would add to compose an AWS S3 bucket in a specific region. Shows the minimal specification pattern where a function only includes fields it cares about.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Compute Provider for Crossplane\nDESCRIPTION: This YAML snippet installs the Azure Compute provider for Crossplane, which is required for deploying virtual machines.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-azure-compute\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-azure-compute:v1.11.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition for Namespace-Based Provider Selection\nDESCRIPTION: Defines a composition patch that maps the namespace of a Claim to the providerConfigRef of an RDSInstance, enabling namespace-specific provider configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/multi-tenant.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n...\nresources:\n- base:\n    apiVersion: database.aws.crossplane.io/v1beta1\n    kind: RDSInstance\n    spec:\n      forProvider:\n      ...\n  patches:\n  - fromFieldPath: spec.claimRef.namespace\n    toFieldPath: spec.providerConfigRef.name\n    policy:\n      fromFieldPath: Required\n```\n\n----------------------------------------\n\nTITLE: Creating a VirtualMachine Resource in Crossplane\nDESCRIPTION: Creates a VirtualMachine composite resource (XR) using Crossplane's custom API. This YAML defines a VM to be provisioned in the EU region, which will trigger the creation of all underlying cloud provider resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: compute.example.com/v1alpha1\nkind: VirtualMachine\nmetadata:\n  name: my-vm\nspec:\n  location: \"EU\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Crossplane Composition Configuration\nDESCRIPTION: YAML configuration for the Composition that defines how to compose the XBuckets resource using the function-xbuckets Function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: create-buckets\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBuckets\n  mode: Pipeline\n  pipeline:\n  - step: create-buckets\n    functionRef:\n      name: function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Details in a Crossplane Composition\nDESCRIPTION: This YAML snippet shows how to configure the connectionDetails object for an AccessKey resource in a Composition, specifying which keys from the resource's connection secret should be included in the combined secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n          - name: password\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: password\n          - name: key\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.secret\n          - name: smtp\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.ses_smtp_password_v4\n      # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane via Helm\nDESCRIPTION: Commands to add Crossplane Helm repository and install Crossplane in a Kubernetes cluster\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n&&\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Creating a Usage for Deletion Protection in Crossplane\nDESCRIPTION: Usage definition that prevents deletion of a database resource by rejecting any deletion request with a specific reason. This example protects an AWS RDS instance named 'my-database' from accidental deletion.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/usages.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  name: protect-production-database\nspec:\n  of:\n    apiVersion: rds.aws.upbound.io/v1beta1\n    kind: Instance\n    resourceRef:\n      name: my-database\n  reason: \"Production Database - should never be deleted!\"\n```\n\n----------------------------------------\n\nTITLE: Provider Debug Configuration\nDESCRIPTION: YAML configuration to enable debug logging for a Crossplane provider using DeploymentRuntimeConfig and Provider resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: debug-config\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      template:\n        spec:\n          containers:\n          - name: package-runtime\n            args: \n            - --debug\n---\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.33.0\n  runtimeConfigRef:\n    apiVersion: pkg.crossplane.io/v1beta1\n    kind: DeploymentRuntimeConfig\n    name: debug-config\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Resource Templates in Function Input\nDESCRIPTION: Example of defining multiple resource templates in the Function Patch and Transform input, including an S3 Bucket and EC2 Instance with their required provider configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: storage-bucket\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: \"us-east-2\"\n- name: vm\n  base:\n    apiVersion: ec2.aws.m.upbound.io/v1beta1\n    kind: Instance\n    spec:\n      forProvider:\n        ami: ami-0d9858aa3c6322f73\n        instanceType: t2.micro\n        region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Signature Verification with ImageConfig in Crossplane\nDESCRIPTION: A YAML configuration for enabling signature verification for specific Crossplane package images. This example uses Cosign as the verification provider and defines authorities with keyless verification and attestation requirements.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/image-configs.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: ImageConfig\nmetadata:\n  name: verify-acme-packages\nspec:\n  matchImages:\n    - type: Prefix\n      prefix: registry1.com/acme-co/configuration-foo\n    - type: Prefix\n      prefix: registry1.com/acme-co/configuration-bar\n  verification:\n    provider: Cosign\n    cosign:\n      authorities:\n        - name: verify acme packages\n          keyless:\n            identities:\n              - issuer: https://token.actions.githubusercontent.com\n                subject: https://github.com/acme-co/crossplane-packages/.github/workflows/supplychain.yml@refs/heads/main\n          attestations:\n            - name: verify attestations\n              predicateType: spdxjson\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition Schema-Aware Validation Mode in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set the schema-aware validation mode for a Composition using the 'crossplane.io/composition-schema-aware-validation-mode' annotation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  annotations:\n    crossplane.io/composition-schema-aware-validation-mode: loose\n  # Removed for brevity\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Provider with Runtime Configuration in YAML\nDESCRIPTION: Example YAML configuration for enabling external secret stores in a provider using DeploymentRuntimeConfig.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-iam\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-iam:v1\n  runtimeConfigRef:\n    name: enable-ess\n---\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: enable-ess\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      template:\n        spec:\n          containers:\n            - name: package-runtime\n              args:\n                - --enable-external-secret-stores\n```\n\n----------------------------------------\n\nTITLE: Creating a Patch with FromCompositeFieldPath\nDESCRIPTION: Example of a patch that copies a value from the composite resource's spec.field1 field to the composed Bucket's metadata labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: storage-bucket\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: \"us-east-2\"\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.field1\n      toFieldPath: metadata.labels[\"patchLabel\"]\n```\n\n----------------------------------------\n\nTITLE: Defining XBucket Composite Resource in Crossplane\nDESCRIPTION: Example of creating a composite resource (XBucket) that Crossplane observes and sends to composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBucket\nmetadata:\n  name: example-render\nspec:\n  bucketRegion: us-east-2\n```\n\n----------------------------------------\n\nTITLE: String Transform Basic Structure\nDESCRIPTION: Shows the basic structure of a string transform for string manipulation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"stringAnnotation\"]\n    transforms:\n      - type: string\n        string:\n          type: ...\n```\n\n----------------------------------------\n\nTITLE: Listing Compositions with kubectl\nDESCRIPTION: Shows how to list all available Compositions using kubectl, displaying their XR-KIND and XR-APIVERSION.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\nNAME                                       XR-KIND        XR-APIVERSION                         AGE\nxapps.aws.platformref.upbound.io           XApp           aws.platformref.upbound.io/v1alpha1   123m\nxclusters.aws.platformref.upbound.io       XCluster       aws.platformref.upbound.io/v1alpha1   123m\nxeks.aws.platformref.upbound.io            XEKS           aws.platformref.upbound.io/v1alpha1   123m\nxnetworks.aws.platformref.upbound.io       XNetwork       aws.platformref.upbound.io/v1alpha1   123m\nxservices.aws.platformref.upbound.io       XServices      aws.platformref.upbound.io/v1alpha1   123m\nxsqlinstances.aws.platformref.upbound.io   XSQLInstance   aws.platformref.upbound.io/v1alpha1   123m\n```\n\n----------------------------------------\n\nTITLE: Healthy Package Revision Status in YAML\nDESCRIPTION: YAML configuration showing the status of a fully installed and healthy provider package revision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: Healthy\nStatus: True\nReason: HealthyPackageRevision\n```\n\n----------------------------------------\n\nTITLE: Creating NoSQL Resource\nDESCRIPTION: Creates a NoSQL composite resource using the custom API to provision AWS resources defined in the Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: database.example.com/v1alpha1\nkind: NoSQL\nmetadata:\n  name: my-nosql-database\nspec:\n  location: \"US\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating a Crossplane NoSQL Resource\nDESCRIPTION: This YAML snippet creates a NoSQL resource using the custom API defined by the Composition. It specifies the location as 'US'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: database.example.com/v1alpha1\nkind: NoSQL\nmetadata:\n  name: my-nosql-database\nspec:\n  location: \"US\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource with Manual Update Policy\nDESCRIPTION: This YAML snippet defines a PlatformDB Composite Resource with a Manual composition update policy. It shows how to specify the compositionUpdatePolicy and reference a specific CompositionRevision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: PlatformDB\nmetadata:\n  name: example\nspec:\n  parameters:\n    storageGB: 20\n  compositionUpdatePolicy: Manual\n  compositionRef:\n    name: example\n  writeConnectionSecretToRef:\n    name: db-conn\n```\n\n----------------------------------------\n\nTITLE: Publishing Connection Details to External Secret Store in YAML\nDESCRIPTION: This snippet shows how to configure a composite resource to save connection secrets to an external secrets store using the publishConnectionDetailsTo field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  publishConnectionDetailsTo:\n    name: my-external-secret-store\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Secret Namespace in Crossplane Composition\nDESCRIPTION: This YAML snippet demonstrates how to set the namespace where Crossplane should store the combined connection secrets generated by resources inside a Composition using the writeConnectionSecretsToNamespace field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  writeConnectionSecretsToNamespace: my-namespace\n  resources:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Verifying Configuration Installation with kubectl in Shell\nDESCRIPTION: This shell command uses kubectl to get the status of installed Configuration packages. It shows how to check if a Configuration is installed and healthy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configuration\nNAME               INSTALLED   HEALTHY   PACKAGE                                           AGE\nplatform-ref-aws   True        True      xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0   54s\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GCP Credentials\nDESCRIPTION: Command to create a Kubernetes secret containing GCP service account credentials, used for authentication between Crossplane and GCP.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric gcp-secret \\\n-n crossplane-system \\\n--from-file=creds=./gcp-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Custom Resource Definitions\nDESCRIPTION: This shell command lists the Custom Resource Definitions (CRDs) installed by Crossplane in a Kubernetes cluster. It demonstrates the initial set of CRDs that Crossplane creates upon installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n❯ kubectl get crd\nNAME                                                    \ncompositeresourcedefinitions.apiextensions.crossplane.io\ncompositionrevisions.apiextensions.crossplane.io        \ncompositions.apiextensions.crossplane.io                \nconfigurationrevisions.pkg.crossplane.io                \nconfigurations.pkg.crossplane.io                        \ncontrollerconfigs.pkg.crossplane.io                     \ndeploymentruntimeconfigs.pkg.crossplane.io              \nenvironmentconfigs.apiextensions.crossplane.io          \nfunctionrevisions.pkg.crossplane.io                     \nfunctions.pkg.crossplane.io                             \nlocks.pkg.crossplane.io                                 \nproviderrevisions.pkg.crossplane.io                     \nproviders.pkg.crossplane.io                             \nstoreconfigs.secrets.crossplane.io                      \nusages.apiextensions.crossplane.io                                        \n```\n\n----------------------------------------\n\nTITLE: Configuring Composition for Namespace-Based Provider Selection in Crossplane\nDESCRIPTION: This YAML snippet shows a partial Composition configuration in Crossplane. It demonstrates how to patch the namespace of the Claim reference in the XR to the providerConfigRef of an RDSInstance, enabling namespace-based provider selection.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/multi-tenant.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n...\nresources:\n- base:\n    apiVersion: database.aws.crossplane.io/v1beta1\n    kind: RDSInstance\n    spec:\n      forProvider:\n      ...\n  patches:\n  - fromFieldPath: spec.claimRef.namespace\n    toFieldPath: spec.providerConfigRef.name\n    policy:\n      fromFieldPath: Required\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Configuration Package using Helm\nDESCRIPTION: This shell command installs Crossplane using Helm and includes a Configuration package during the installation process.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\n--set configuration.packages='{xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Pull Policy for Crossplane Configuration\nDESCRIPTION: This YAML snippet shows how to set the package pull policy for a Crossplane Configuration, determining when the package should be downloaded from the registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  packagePullPolicy: Always\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Patching Individual Resources in Crossplane Composition\nDESCRIPTION: This YAML snippet shows how to patch between individual resources and the in-memory environment in a Crossplane Composition. It uses 'ToEnvironmentFieldPath' and 'FromEnvironmentFieldPath' patch types to copy data between resources and the environment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/environment-configs.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  # Removed for Brevity\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      # Removed for Brevity\n      resources:\n        - name: vpc\n          base:\n            apiVersion: ec2.aws.upbound.io/v1beta1\n            kind: VPC\n            spec:\n              forProvider:\n                cidrBlock: 172.16.0.0/16\n          patches:\n            - type: ToEnvironmentFieldPath\n              fromFieldPath: status.atProvider.id\n              toFieldPath: vpcId\n            - type: FromEnvironmentFieldPath\n              fromFieldPath: tags\n              toFieldPath: spec.forProvider.tags\n```\n\n----------------------------------------\n\nTITLE: Upgrading Crossplane with Custom Registry\nDESCRIPTION: Upgrades Crossplane while overriding the default package registry setting to maintain the original Docker registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/upgrade.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade crossplane --namespace crossplane-system crossplane-stable/crossplane --set 'args={\"--registry=index.docker.io\"}'\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Crossplane Functions in Python\nDESCRIPTION: A comprehensive unit test for a Crossplane function that composes S3 buckets. The test validates that the function correctly processes the input request and generates the expected response with the desired S3 bucket resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport dataclasses\nimport unittest\n\nfrom crossplane.function import logging, resource\nfrom crossplane.function.proto.v1 import run_function_pb2 as fnv1\nfrom google.protobuf import duration_pb2 as durationpb\nfrom google.protobuf import json_format\nfrom google.protobuf import struct_pb2 as structpb\n\nfrom function import fn\n\n\nclass TestFunctionRunner(unittest.IsolatedAsyncioTestCase):\n    def setUp(self) -> None:\n        logging.configure(level=logging.Level.DISABLED)\n        self.maxDiff = 2000\n\n    async def test_run_function(self) -> None:\n        @dataclasses.dataclass\n        class TestCase:\n            reason: str\n            req: fnv1.RunFunctionRequest\n            want: fnv1.RunFunctionResponse\n\n        cases = [\n            TestCase(\n                reason=\"The function should compose two S3 buckets.\",\n                req=fnv1.RunFunctionRequest(\n                    observed=fnv1.State(\n                        composite=fnv1.Resource(\n                            resource=resource.dict_to_struct(\n                                {\n                                    \"apiVersion\": \"example.crossplane.io/v1alpha1\",\n                                    \"kind\": \"XBuckets\",\n                                    \"metadata\": {\"name\": \"test\"},\n                                    \"spec\": {\n                                        \"region\": \"us-east-2\",\n                                        \"names\": [\"test-bucket-a\", \"test-bucket-b\"],\n                                    },\n                                }\n                            )\n                        )\n                    )\n                ),\n                want=fnv1.RunFunctionResponse(\n                    meta=fnv1.ResponseMeta(ttl=durationpb.Duration(seconds=60)),\n                    desired=fnv1.State(\n                        resources={\n                            \"xbuckets-test-bucket-a\": fnv1.Resource(\n                                resource=resource.dict_to_struct(\n                                    {\n                                        \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                                        \"kind\": \"Bucket\",\n                                        \"metadata\": {\n                                            \"annotations\": {\n                                                \"crossplane.io/external-name\": \"test-bucket-a\"\n                                            },\n                                        },\n                                        \"spec\": {\n                                            \"forProvider\": {\"region\": \"us-east-2\"}\n                                        },\n                                    }\n                                )\n                            ),\n                            \"xbuckets-test-bucket-b\": fnv1.Resource(\n                                resource=resource.dict_to_struct(\n                                    {\n                                        \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                                        \"kind\": \"Bucket\",\n                                        \"metadata\": {\n                                            \"annotations\": {\n                                                \"crossplane.io/external-name\": \"test-bucket-b\"\n                                            },\n                                        },\n                                        \"spec\": {\n                                            \"forProvider\": {\"region\": \"us-east-2\"}\n                                        },\n                                    }\n                                )\n                            ),\n                        },\n                    ),\n                    context=structpb.Struct(),\n                ),\n            ),\n        ]\n\n        runner = fn.FunctionRunner()\n\n        for case in cases:\n            got = await runner.RunFunction(case.req, None)\n            self.assertEqual(\n                json_format.MessageToDict(got),\n                json_format.MessageToDict(case.want),\n                \"-want, +got\",\n            )\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Defining a StoreConfig for External Secret Store in Crossplane\nDESCRIPTION: This YAML configuration defines a StoreConfig object in Crossplane, which is used to configure an external secret store like HashiCorp Vault for storing managed resource details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: my-vault-storeconfig\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Hatch\nDESCRIPTION: Shell command demonstrating how to run the unit tests using Hatch, a Python build tool that manages virtual environments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhatch run test:unit\n.\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Enabling Claims for a Crossplane XRD\nDESCRIPTION: This example shows how to enable Claims in an XRD by defining 'claimNames'. The claimNames section defines a 'kind' and 'plural' that must be unique across all Claims and XRDs. Common convention is to use claimNames that match the XRD names but without the 'x' prefix.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  claimNames:\n    kind: Database\n    plural: databases\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Setting Management Policies for AWS Subnet in YAML\nDESCRIPTION: This YAML configuration shows how to set management policies for an AWS Subnet resource in Crossplane. It demonstrates giving Crossplane permission to create, delete, and observe the resource, but not make changes after creation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  managementPolicies: [\"Create\", \"Delete\", \"Observe\"]\n  forProvider:\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Network Provider in Kubernetes\nDESCRIPTION: YAML configuration to install the Azure Network provider package in Crossplane, which adds Azure networking service CRDs to the cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-azure-network\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-azure-network:v1.11.2\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Helm Repository\nDESCRIPTION: Adds the Crossplane stable Helm repository to the local Helm installation. This is required to install Crossplane using Helm.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for AMD64 Platform\nDESCRIPTION: This command uses the Crossplane CLI to build a package for the AMD64 platform. It specifies the package root directory, embeds the AMD64 runtime image, and outputs the package file as 'function-amd64.xpkg'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-amd64 \\\n    --package-file=function-amd64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider with DeploymentRuntimeConfig in YAML\nDESCRIPTION: This snippet demonstrates how to enable external secret stores for a Provider using DeploymentRuntimeConfig. It shows the Provider configuration referencing a runtime config, and the DeploymentRuntimeConfig that adds the necessary argument to the container.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-iam\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-iam:v1.12.1\n  runtimeConfigRef:\n    name: enable-ess\n---\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: enable-ess\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      template:\n        spec:\n          containers:\n            - name: package-runtime\n              args:\n                - --enable-external-secret-stores\n```\n\n----------------------------------------\n\nTITLE: Installing a Crossplane Configuration with Image Digest\nDESCRIPTION: This YAML snippet shows how to install a Crossplane Configuration using an image digest instead of a tag for deterministic installations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: configuration-quickstart\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/configuration-quickstart@sha256:ef9795d146190637351a5c5848e0bab5e0c190fec7780f6c426fbffa0cb68358\n```\n\n----------------------------------------\n\nTITLE: Managing Selector Results in EnvironmentConfig Selection\nDESCRIPTION: This snippet demonstrates how to manage selector results when selecting EnvironmentConfigs, including using Single and Multiple modes, and specifying match limits.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/environment-configs.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n        - type: Selector\n          selector:\n            mode: Single\n            matchLabels:\n              - key: my-other-label-key\n                type: Value\n                value: my-other-label-value\n              - key: my-other-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n```\n\n----------------------------------------\n\nTITLE: Visualizing Server-Side Apply Flow in Crossplane\nDESCRIPTION: Mermaid diagram showing the flow of server-side apply from claims to composite resources and then to composed resources. Illustrates how claims propagate through the system using server-side apply with composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/server-side-apply.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  A(Claim) -- claim server-side apply --> B(Composite Resource)\n  B -- function server-side apply --> C(Composed Resource)\n  B -- function server-side apply --> D(Composed Resource)\n  B -- function server-side apply --> E(Composed Resource)\n```\n\n----------------------------------------\n\nTITLE: Configuring External Name for Composite Resources in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to set a custom external name for managed resources created by a composite resource using the crossplane.io/external-name annotation, allowing for deterministic naming instead of using random suffixes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\n  annotations: \n    crossplane.io/external-name: my-custom-name\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Usage with Replay Deletion\nDESCRIPTION: YAML configuration demonstrating how to enable replay of blocked deletions using the replayDeletion field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/usages.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: protection.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  namespace: default\n  name: release-uses-cluster\nspec:\n  replayDeletion: true\n  of:\n    apiVersion: eks.m.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n      name: my-cluster\n  by:\n    apiVersion: helm.m.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n      name: my-prometheus-chart\n```\n\n----------------------------------------\n\nTITLE: Combining Controller Reference and Labels in Crossplane Compositions\nDESCRIPTION: Advanced example showing how to use both matchControllerRef and matchLabels to select a specific VPC within a composite resource when creating an InternetGateway in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-first-vpc\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    metadata:\n      labels:\n        type: backend\n    spec:\n      forProvider:\n      # Removed for brevity\n- name: my-second-vpc\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    metadata:\n      labels:\n        type: internet\n    spec:\n      forProvider:\n      # Removed for brevity\n- name: my-gateway\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: InternetGateway\n    spec:\n      forProvider:\n        vpcIdSelector:\n          matchControllerRef: true\n          matchLabels:\n            type: internet\n```\n\n----------------------------------------\n\nTITLE: Updating CompositionRevision Reference in a Composite Resource\nDESCRIPTION: This YAML snippet shows how to manually update the compositionRevisionRef field in a Composite Resource to use a different CompositionRevision when using the Manual update policy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: PlatformDB\nmetadata:\n  name: example\nspec:\n  parameters:\n    storageGB: 20\n  compositionUpdatePolicy: Manual\n  compositionRef:\n    name: example\n  # Update the referenced CompositionRevision if and when you are ready.\n  compositionRevisionRef:\n    name: example-18pdg\n  writeConnectionSecretToRef:\n    name: db-conn\n```\n\n----------------------------------------\n\nTITLE: Function Definition with Development Runtime Annotation\nDESCRIPTION: YAML definition for a Crossplane Function that references the local development version of the function-xbuckets package. The Development runtime annotation tells Crossplane to use the locally running function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-xbuckets\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  # The CLI ignores this package when using the Development runtime.\n  # You can set it to any value.\n  package: xpkg.crossplane.io/negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin-Level AWS Provider Authentication\nDESCRIPTION: ProviderConfig for admin-level access to AWS services using separate admin credentials stored in Kubernetes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: admin-keys\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: admin-key\n      key: admin-secret-key\n```\n\n----------------------------------------\n\nTITLE: Converting Field Types in Crossplane\nDESCRIPTION: Example of using convert transform to change data types. Converts a number field to string type for use in metadata labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n- type: FromCompositeFieldPath\n  fromFieldPath: spec.numberField\n  toFieldPath: metadata.label[\"numberToString\"]\n  transforms:\n    - type: convert\n      convert:\n        toType: string\n```\n\n----------------------------------------\n\nTITLE: Configuring forProvider Parameters for AWS EC2 Instance in Crossplane\nDESCRIPTION: Example showing how to configure the forProvider section of an AWS EC2 Instance, which maps to the parameters of the external resource. The example sets region and instance type parameters.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\n# Removed for brevity\nspec:\n  forProvider:\n    region: us-west-1\n    instanceType: t2.micro\n```\n\n----------------------------------------\n\nTITLE: Usage in Composition Pipeline\nDESCRIPTION: YAML configuration showing how to integrate Usage resources within a Composition to manage deletion ordering between cluster and release resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/usages.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: cluster\n          base:\n            apiVersion: container.gcp.upbound.io/v1beta1\n            kind: Cluster\n            # Removed for brevity\n        - name: release\n          base:\n            apiVersion: helm.crossplane.io/v1beta1\n            kind: Release\n            # Removed for brevity\n        - name: release-uses-cluster\n          base:\n            apiVersion: apiextensions.crossplane.io/v1alpha1\n            kind: Usage\n            spec:\n              replayDeletion: true\n              of:\n                apiVersion: container.gcp.upbound.io/v1beta1\n                kind: Cluster\n                resourceSelector:\n                  matchControllerRef: true\n              by:\n                apiVersion: helm.crossplane.io/v1beta1\n                kind: Release\n                resourceSelector:\n                  matchControllerRef: true\n```\n\n----------------------------------------\n\nTITLE: Updating AWS S3 Provider Package in Crossplane\nDESCRIPTION: This command updates the AWS S3 provider package to version v1.21.1 using the crossplane xpkg update command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg update provider xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Pushing Crossplane Package to Registry\nDESCRIPTION: The `crossplane xpkg push` command is used to upload a Crossplane package to a specified package registry. By default, it looks for a `.xpkg` file in the current directory. Users can specify a specific `.xpkg` file or multiple files using the `-f` flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg push -f my-package.xpkg crossplane-docs/my-package:v0.14.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource with Manual Update Policy\nDESCRIPTION: This YAML snippet creates a Composite Resource (XR) of kind MyVPC with a Manual compositionUpdatePolicy and a specific compositionRevisionRef. This XR will not automatically update to new CompositionRevisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  name: vpc-man\nspec:\n  id: vpc-man\n  compositionUpdatePolicy: Manual\n  compositionRevisionRef:\n    name: myvpcs.aws.example.upbound.io-ad265bc\n```\n\n----------------------------------------\n\nTITLE: Defining AWS EC2 Instance Resource in Crossplane\nDESCRIPTION: Example of defining a managed resource's group, kind, and version for an AWS EC2 Instance in Crossplane. This shows the basic structure of a managed resource's API endpoint identification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\n```\n\n----------------------------------------\n\nTITLE: Match Transform with Default Value\nDESCRIPTION: Shows how to set a default value when no match is found using fallbackTo: Value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n              literal: \"UnknownString\"\n              result: \"foundField1\"\n          fallbackTo: Value\n          fallbackValue: \"StringNotFound\"\n```\n\n----------------------------------------\n\nTITLE: Composition with Function Input Configuration in YAML\nDESCRIPTION: Example of a Composition resource that includes function input configuration for patch-and-transform functionality.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-render\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n        patches:\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.bucketRegion\n          toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Configuring ImageConfig with Pull Secret in Crossplane\nDESCRIPTION: Example YAML configuration showing how to set up an ImageConfig resource to inject pull secrets for specific image prefixes. This enables authentication when interacting with private registries.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/image-configs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: ImageConfig\nmetadata:\n  name: acme-packages\nspec:\n  matchImages:\n    - type: Prefix\n      prefix: registry1.com/acme-co/\n  registry:\n    authentication:\n      pullSecretRef:\n        name: acme-registry-credentials\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Composition Function in Go\nDESCRIPTION: This Go code snippet shows a basic implementation of a Crossplane composition function that returns a 'Hello world!' message in the response.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n        rsp := response.To(req, response.DefaultTTL)\n        response.Normal(rsp, \"Hello world!\")\n        return rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition with Function Pipeline\nDESCRIPTION: Composition YAML that references the xbuckets function in a pipeline step. This defines how the composite resource will be composed using the custom function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: create-buckets\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBuckets\n  mode: Pipeline\n  pipeline:\n  - step: create-buckets\n    functionRef:\n      name: function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: Reference CompositeResourceDefinition in Crossplane YAML\nDESCRIPTION: This YAML example provides a reference `CompositeResourceDefinition` indicating a structure for a crossplane resource with defined properties and fields, guiding the creation and configuration of a composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xexamples.example.org\nspec:\n  group: example.org\n  names:\n    kind: xExample\n    plural: xexamples\n  claimNames:\n    kind: ExampleClaim\n    plural: exampleclaims\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              field1:\n                type: string\n              field2:\n                type: string\n              field3:\n                type: string\n              desiredRegion:\n                type: string\n              boolField:\n                type: boolean\n              numberField:\n                type: integer\n          status:\n              type: object\n              properties:\n                url:\n                  type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Composite Resource in YAML\nDESCRIPTION: Example of a Composite Resource (XR) definition showing the structure similar to Claims but without namespace scoping. Demonstrates the relationship between Claims and XRs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/introduction.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource (XR)\napiVersion: test.example.org/v1alpha1\nkind: MyComputeResource\nmetadata:\n  name: my-resource\nspec:\n  storage: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Usage with Selectors\nDESCRIPTION: YAML configuration demonstrating how to use selectors with Usage resources to define relationships using labels and controller references.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/usages.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1alpha1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceSelector:\n      matchControllerRef: false\n      matchLabels:\n        foo: bar\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceSelector:\n       matchLabels:\n          baz: qux\n```\n\n----------------------------------------\n\nTITLE: Verifying XRD Status with kubectl\nDESCRIPTION: Command and output showing how to verify the status of a CompositeResourceDefinition using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl get xrd                                \nNAME                                ESTABLISHED   OFFERED   AGE\nxdatabases.custom-api.example.org   True          True      22m\n```\n\n----------------------------------------\n\nTITLE: Upgrading Crossplane with Helm\nDESCRIPTION: Command to upgrade an existing Crossplane installation in the crossplane-system namespace using the stable chart from the repository.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/upgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade crossplane --namespace crossplane-system crossplane-stable/crossplane\n```\n\n----------------------------------------\n\nTITLE: Installing a Crossplane Package with xpkg install\nDESCRIPTION: Command for downloading and installing packages into Crossplane. Requires specifying the package kind (configuration, function, or provider), the registry URL with package name and tag, and optionally a name to assign within Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg install <package-kind> <registry URL package name and tag> [<optional-name>]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Crossplane with Helm\nDESCRIPTION: This command upgrades Crossplane using Helm. It specifies the namespace where Crossplane is installed (default is crossplane-system) and uses the stable chart from the Crossplane repository.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/upgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade crossplane --namespace crossplane-system crossplane-stable/crossplane\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Master Helm Repository\nDESCRIPTION: This command adds the Crossplane master Helm repository to the local Helm installation. It's used for accessing pre-release versions of Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-master https://charts.crossplane.io/master/\n```\n\n----------------------------------------\n\nTITLE: Applying Environment Values to Composed Resource in Crossplane (YAML)\nDESCRIPTION: This snippet shows the FromEnvironmentFieldPath patch, which takes values from the in-memory environment and applies them to the composed resource. It demonstrates how to use the environment's 'locations.eu' value and apply it as the 'region' in a managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n    patches:\n    - type: FromEnvironmentFieldPath\n      fromFieldPath: locations.eu\n      toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Patching Between Composite Resource and Environment in Crossplane\nDESCRIPTION: Demonstrates how to patch data between the Composite resource and the in-memory environment using ToCompositeFieldPath and FromCompositeFieldPath patch types in the function-patch-and-transform function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/environment-configs.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  # Removed for Brevity\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      environment:\n        patches:\n        - type: ToCompositeFieldPath\n          fromFieldPath: tags\n          toFieldPath: metadata.labels[envTag]\n        - type: FromCompositeFieldPath\n          fromFieldPath: metadata.name\n          toFieldPath: newEnvironmentKey\n# Removed for Brevity\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Helm Repository\nDESCRIPTION: Command to add the Crossplane stable Helm repository to your local Helm configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\n```\n\n----------------------------------------\n\nTITLE: Configuring MergeObjectsAppendArrays Policy in Crossplane Composition YAML\nDESCRIPTION: This snippet shows how to use the 'MergeObjectsAppendArrays' policy for the 'toFieldPath' in a Crossplane Composition patch. This policy allows merging objects and appending to arrays instead of replacing them when applying patches.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    policy:\n      toFieldPath: MergeObjectsAppendArrays\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket with User-Level Permissions in Crossplane\nDESCRIPTION: Defines an AWS S3 Bucket managed resource that references the 'user-keys' ProviderConfig. This ensures the bucket is created using the user-level credentials and permissions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  name: user-bucket\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: user-keys\n```\n\n----------------------------------------\n\nTITLE: Ignoring Crossplane Version Constraints in Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure a Configuration package to ignore Crossplane version constraints using the 'ignoreCrossplaneConstraints' field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  ignoreCrossplaneConstraints: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Selecting EnvironmentConfigs in a Composition Pipeline\nDESCRIPTION: This snippet shows how to select EnvironmentConfigs in a Composition using function-environment-configs. It demonstrates selecting by both Reference and Selector methods.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/environment-configs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Reference\n          ref:\n            name: example-environment\n        - type: Selector\n          selector:\n            matchLabels:\n            # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Provisioning S3 Bucket on AWS\nDESCRIPTION: This snippet demonstrates how to provision an S3 Bucket on AWS using the configured provider-aws. It specifies bucket settings such as ACL, location constraint, and public access block configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: s3.aws.crossplane.io/v1beta1\nkind: Bucket\nmetadata:\n  name: s3-vault-demo\nspec:\n  forProvider:\n    acl: private\n    locationConstraint: us-east-1\n    publicAccessBlockConfiguration:\n      blockPublicPolicy: true\n    tagging:\n      tagSet:\n        - key: Name\n          value: s3-vault-demo\n  providerConfigRef:\n    name: default\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Configuration Status\nDESCRIPTION: Shows how to check the status of a Crossplane configuration using kubectl. The output displays installation and health status of the configuration package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configuration\nNAME               INSTALLED   HEALTHY   PACKAGE                                           AGE\nplatform-ref-aws   True        True      xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0   54s\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Pull Secrets for Crossplane Configuration\nDESCRIPTION: This YAML snippet shows how to configure package pull secrets for a Crossplane Configuration, allowing installation from private registries.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  packagePullSecrets: \n    - name: example-secret\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Restricting Connection Secret Keys in CompositeResourceDefinition\nDESCRIPTION: Shows how to limit which secret keys are exposed in the combined secret object using connectionSecretKeys in an XRD\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/connection-details.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CompositeResourceDefinition\nspec:\n  # Removed for brevity.\n  connectionSecretKeys:\n    - username\n    - password\n    - key2-user\n```\n\n----------------------------------------\n\nTITLE: Defining an XBuckets Composite Resource in YAML\nDESCRIPTION: Example YAML configuration for an XBuckets composite resource that specifies a region and an array of bucket names to be created as AWS S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Helm and Configuration Package\nDESCRIPTION: This snippet demonstrates how to install Crossplane using Helm and automatically install a Configuration package. The `configuration.packages` parameter specifies the OCI image containing the desired XRDs and Compositions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/multi-tenant.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```\nhelm install crossplane --namespace crossplane-system crossplane-stable/crossplane --set configuration.packages='{\"registry.upbound.io/xp/getting-started-with-aws:latest\"}'\n```\n```\n\n----------------------------------------\n\nTITLE: Installing provider-gcp with Vault Integration in Crossplane\nDESCRIPTION: Creates a ControllerConfig and Provider for GCP with Vault integration. The annotations configure the Vault agent to inject GCP credentials from a specific secret path into the provider's filesystem.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: pkg.crossplane.io/v1alpha1\nkind: ControllerConfig\nmetadata:\n  name: vault-config\nspec:\n  metadata:\n    annotations:\n      vault.hashicorp.com/agent-inject: \\\"true\\\"\n      vault.hashicorp.com/role: \\\"crossplane-providers\\\"\n      vault.hashicorp.com/agent-inject-secret-creds.txt: \\\"secret/provider-creds/gcp-default\\\"\n      vault.hashicorp.com/agent-inject-template-creds.txt: |\n        {{- with secret \\\"secret/provider-creds/gcp-default\\\" -}}\n         {{ .Data.data | toJSON }}\n        {{- end -}}\n---\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp:v0.22.0\n  controllerConfigRef:\n    name: vault-config\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Selector Labels in Crossplane Composition (YAML)\nDESCRIPTION: This snippet demonstrates how to configure optional selector labels in a Crossplane Composition. It uses the 'fromFieldPathPolicy: Optional' setting to ignore a field if it doesn't exist in the composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/environment-configs.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            maxMatch: 4\n            sortByFieldPath: metadata.annotations[sort.by/weight]\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n                fromFieldPathPolicy: Optional\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Generating S3 Buckets Dynamically from Composite Resource\nDESCRIPTION: Advanced implementation of RunFunction that reads region and bucket names from a composite resource and creates corresponding S3 bucket resources dynamically\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n\trsp := response.To(req, response.DefaultTTL)\n\n\txr, err := request.GetObservedCompositeResource(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get observed composite resource from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\tregion, err := xr.Resource.GetString(\"spec.region\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.region field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\tnames, err := xr.Resource.GetStringArray(\"spec.names\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.names field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\tdesired, err := request.GetDesiredComposedResources(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get desired resources from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\t_ = v1beta1.AddToScheme(composed.Scheme)\n\n\tfor _, name := range names {\n\t\tb := &v1beta1.Bucket{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\tAnnotations: map[string]string{\n\t\t\t\t\t\"crossplane.io/external-name\": name,\n\t\t\t\t},\n\t\t\t},\n\t\t\tSpec: v1beta1.BucketSpec{\n\t\t\t\tForProvider: v1beta1.BucketParameters{\n\t\t\t\t\tRegion: ptr.To[string](region),\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\tcd, err := composed.From(b)\n\t\tif err != nil {\n\t\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot convert %T to %T\", b, &composed.Unstructured{}))\n\t\t\treturn rsp, nil\n\t\t}\n\n\t\tdesired[resource.Name(\"xbuckets-\"+name)] = &resource.DesiredComposed{Resource: cd}\n\t}\n\n\tif err := response.SetDesiredComposedResources(rsp, desired); err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot set desired composed resources in %T\", rsp))\n\t\treturn rsp, nil\n\t}\n\n\treturn rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Management in Crossplane Composition\nDESCRIPTION: This YAML snippet demonstrates how to configure secret management in a Crossplane Composition. It shows the use of writeConnectionSecretsToNamespace for the combined secret and writeConnectionSecretToRef for individual resource secrets. The composition also includes connection details for each resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n      - name: key2\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2\n        connectionDetails:\n          - name: key2-user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n```\n\n----------------------------------------\n\nTITLE: Creating CompositeResourceDefinition for ESS Instance\nDESCRIPTION: Defines a custom API endpoint and resource schema for managing ESS (Example Service) instances with specific properties and versions\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: compositeessinstances.ess.example.org\n  annotations:\n    feature: ess\nspec:\n  group: ess.example.org\n  names:\n    kind: CompositeESSInstance\n    plural: compositeessinstances\n  claimNames:\n    kind: ESSInstance\n    plural: essinstances\n  connectionSecretKeys:\n    - publicKey\n    - publicKeyType\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              parameters:\n                type: object\n                properties:\n                  serviceAccount:\n                    type: string\n                required:\n                  - serviceAccount\n            required:\n              - parameters\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Patch-and-Transform Function\nDESCRIPTION: This YAML snippet installs the patch-and-transform function, which is required for the Composition to work. It defines a Function resource with the specified package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Map Transform Configuration in Crossplane\nDESCRIPTION: Demonstrates how to configure a map transform to convert field values using key-value pairs. Used for translating values like region names to provider-specific values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: map\n        map:\n          \"field1-text\": \"firstField\"\n          \"field2-text\": \"secondField\"\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Bucket Creation with Python Crossplane Function\nDESCRIPTION: An implementation of RunFunction that creates AWS S3 buckets based on the region and bucket names specified in the composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def RunFunction(self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext) -> fnv1.RunFunctionResponse:\n    log = self.log.bind(tag=req.meta.tag)\n    log.info(\"Running function\")\n\n    rsp = response.to(req)\n\n    region = req.observed.composite.resource[\"spec\"][\"region\"]\n    names = req.observed.composite.resource[\"spec\"][\"names\"]\n\n    for name in names:\n        rsp.desired.resources[f\"xbuckets-{name}\"].resource.update(\n            {\n                \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                \"kind\": \"Bucket\",\n                \"metadata\": {\n                    \"annotations\": {\n                        \"crossplane.io/external-name\": name,\n                    },\n                },\n                \"spec\": {\n                    \"forProvider\": {\n                        \"region\": region,\n                    },\n                },\n            }\n        )\n\n    log.info(\"Added desired buckets\", region=region, count=len(names))\n\n    return rsp\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provider in Crossplane\nDESCRIPTION: YAML configuration to create a ProviderConfig that references the Azure credentials secret, enabling Crossplane to authenticate with Azure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: azure.upbound.io/v1beta1\nmetadata:\n  name: default\nkind: ProviderConfig\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: azure-secret\n      key: creds\nEOF\n```\n\n----------------------------------------\n\nTITLE: Verifying CompositionRevision Creation\nDESCRIPTION: This console snippet shows how to verify that Crossplane created a CompositionRevision for the applied Composition, displaying the revision number and channel.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nkubectl get compositionrevisions -o=\"custom-columns=NAME:.metadata.name,REVISION:.spec.revision,CHANNEL:.metadata.labels.channel\"\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret in Shell\nDESCRIPTION: Command to create a Kubernetes docker-registry secret for authentication with a private registry. This secret is referenced by the ImageConfig for pull authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/image-configs.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system create secret docker-registry acme-registry-credentials --docker-server=registry1.com --docker-username=<user> --docker-password=<password>\n```\n\n----------------------------------------\n\nTITLE: Writing Connection Secrets to Kubernetes Secret - YAML\nDESCRIPTION: This YAML snippet defines the specification for a composite resource that writes connection secrets to a Kubernetes secret named 'my-secret' in the 'crossplane-system' namespace. This operation relies on the 'writeConnectionSecretToRef' field within the resource's specification to define where the secrets should be stored.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  writeConnectionSecretToRef:\n    name: my-secret\n    namespace: crossplane-system\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Selecting EnvironmentConfig by Label in a Composition\nDESCRIPTION: This snippet shows how to select EnvironmentConfigs using label selectors in a Composition pipeline, including both Value and FromCompositeFieldPath types.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/environment-configs.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector: \n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Provider with Ignored Version Constraints in YAML\nDESCRIPTION: Example of installing a provider package while ignoring Crossplane version constraints using the ignoreCrossplaneConstraints field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  ignoreCrossplaneConstraints: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Signature Verification with ImageConfig in YAML\nDESCRIPTION: Example of setting up signature verification for package images using Cosign provider. This configuration includes authority settings and attestation requirements for specific image prefixes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/image-configs.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: ImageConfig\nmetadata:\n  name: verify-acme-packages\nspec:\n  matchImages:\n    - type: Prefix\n      prefix: registry1.com/acme-co/configuration-foo\n    - type: Prefix\n      prefix: registry1.com/acme-co/configuration-bar\n  verification:\n    provider: Cosign\n    cosign:\n      authorities:\n        - name: verify acme packages\n          keyless:\n            identities:\n              - issuer: https://token.actions.githubusercontent.com\n                subject: https://github.com/acme-co/crossplane-packages/.github/workflows/supplychain.yml@refs/heads/main\n          attestations:\n            - name: verify attestations\n              predicateType: spdxjson\n```\n\n----------------------------------------\n\nTITLE: Example XR (Composite Resource) Definition for Crossplane Functions\nDESCRIPTION: YAML definition of a Composite Resource (XBuckets) that specifies AWS S3 buckets to be created in a specific region.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Patching Between Resources in Crossplane YAML\nDESCRIPTION: This snippet demonstrates how to use ToCompositeFieldPath and FromCompositeFieldPath patches to transfer data between resources in a Crossplane Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    # Removed for brevity\n  patches:\n    - type: ToCompositeFieldPath\n      fromFieldPath: metadata.name\n      toFieldPath: status.secondResource\n- name: bucket2\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    # Removed for brevity\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: status.secondResource\n      toFieldPath: metadata.labels['secondResource']\n```\n\n----------------------------------------\n\nTITLE: Checking Service Status in KCL\nDESCRIPTION: This snippet checks the status of the observed Service and sets a 'ready' annotation if the Service has a cluster IP assigned.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_14\n\nLANGUAGE: kcl\nCODE:\n```\nobserved_service = option(\"params\").ocds[\"service\"]?.Resource\nif observed_service?.spec?.clusterIP:\n  _desired_service.metadata.annotations[\"krm.kcl.dev/ready\"] = \"True\"\n```\n\n----------------------------------------\n\nTITLE: Running Crossplane Function in Development Mode\nDESCRIPTION: Command to run a Crossplane composition function locally for development and testing purposes. This runs without encryption or authentication and should only be used during development.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nhatch run development\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Package Registry\nDESCRIPTION: Logs in to a registry hosting Crossplane packages. The command supports authentication using username/password or token, with options for specifying an Upbound organization.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg login\n```\n\n----------------------------------------\n\nTITLE: Example XBuckets Resource Configuration for Crossplane\nDESCRIPTION: YAML definition for a composite resource (XR) that specifies S3 buckets to be created in a specific AWS region. This is used as input for testing Crossplane composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Manager ClusterRoleBinding for Crossplane\nDESCRIPTION: Defines RBAC configuration that binds the crossplane-rbac-manager ClusterRole to the rbac-manager ServiceAccount in the default namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: crossplane-rbac-manager\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: crossplane-rbac-manager\nsubjects:\n- kind: ServiceAccount\n  name: rbac-manager\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Configs in Crossplane Composition\nDESCRIPTION: This code shows how to configure EnvironmentConfigs in a Composition using a reference to identify which configs to use.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  environment:\n    environmentConfigs:\n      - ref:\n          name: example-environment\n  # Removed for Brevity\n```\n\n----------------------------------------\n\nTITLE: Using Usage in a Composition for Deletion Ordering\nDESCRIPTION: This example demonstrates how to include a Usage resource within a Composition to define deletion ordering between resources, using controller reference matching to ensure proper resource selection.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/usages.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: cluster\n          base:\n            apiVersion: container.gcp.upbound.io/v1beta1\n            kind: Cluster\n            # Removed for brevity\n        - name: release\n          base:\n            apiVersion: helm.crossplane.io/v1beta1\n            kind: Release\n            # Removed for brevity\n        - name: release-uses-cluster\n          base:\n            apiVersion: apiextensions.crossplane.io/v1beta1\n            kind: Usage\n            spec:\n              replayDeletion: true\n              of:\n                apiVersion: container.gcp.upbound.io/v1beta1\n                kind: Cluster\n                resourceSelector:\n                  matchControllerRef: true\n              by:\n                apiVersion: helm.crossplane.io/v1beta1\n                kind: Release\n                resourceSelector:\n                  matchControllerRef: true\n```\n\n----------------------------------------\n\nTITLE: Defining Observed Resources in YAML\nDESCRIPTION: An example of defining observed resources for the 'crossplane render' command, including apiVersion, kind, metadata, and spec fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: ComposedResource\nmetadata:\n  name: test-render-b\n  annotations:\n    crossplane.io/composition-resource-name: resource-b\nspec:\n  coolerField: \"I'm cooler!\"\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Provider Credentials Policy\nDESCRIPTION: Command to create a Vault policy for reading provider credentials\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nvault policy write provider-creds - <<EOF\npath \"secret/data/provider-creds/*\" {\n    capabilities = [\"read\", \"list\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Installing Provider via Helm Command\nDESCRIPTION: Helm command to install Crossplane with the AWS Provider package included during installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\n--set provider.packages='{xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0}'\n```\n\n----------------------------------------\n\nTITLE: Pushing Crossplane Package to Registry\nDESCRIPTION: Command to push a Crossplane package file to a package registry. By default, looks for a single .xpkg file in the current directory.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push <package>\n```\n\n----------------------------------------\n\nTITLE: Transitioning Imported GCP DatabaseInstance to Full Management in YAML\nDESCRIPTION: This snippet illustrates how to transition an imported GCP DatabaseInstance from observe-only to full management by Crossplane. It shows the changes in management policies and the copying of required parameters from status to spec.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/import-existing-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"*\"]\n  forProvider:\n    databaseVersion: POSTGRES_14\n    region: us-central1\n    settings:\n    - diskSize: 100\n      tier: db-custom-4-26624\nstatus:\n  atProvider:\n    databaseVersion: POSTGRES_14\n    region: us-central1\n    # Removed for brevity\n    settings:\n    - diskSize: 100\n      tier: db-custom-4-26624\n      # Removed for brevity\n  conditions:\n    - lastTransitionTime: \"2023-02-22T07:16:51Z\"\n      reason: Available\n      status: \"True\"\n      type: Ready\n    - lastTransitionTime: \"2023-02-22T11:16:45Z\"\n      reason: ReconcileSuccess\n      status: \"True\"\n      type: Synced\n```\n\n----------------------------------------\n\nTITLE: Matching Condition in Crossplane Composition (YAML)\nDESCRIPTION: This snippet demonstrates the MatchCondition readiness check, which considers the resource ready when a specific condition type with an expected status is found in the resource's status.conditions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchCondition\n      matchCondition:\n        type: MyType\n        status: Success\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket with Admin ProviderConfig in YAML\nDESCRIPTION: This snippet shows the creation of an AWS S3 Bucket resource using the 'admin-keys' ProviderConfig for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  name: user-bucket\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: admin-keys\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Custom Values File\nDESCRIPTION: Example showing how to install Crossplane using a custom values file with the helm install command and -f flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n-f settings.yaml\n```\n\n----------------------------------------\n\nTITLE: Converting String to Float64 with Quantity Format in Crossplane\nDESCRIPTION: Shows how to use the convert transform with a quantity format to convert string representations of sizes (e.g., '1M' for 1 megabyte) to float64 values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: float64\n   format: quantity\n```\n\n----------------------------------------\n\nTITLE: Creating a VirtualMachineClaim in a Namespace with YAML in Crossplane\nDESCRIPTION: This snippet demonstrates how to create a VirtualMachineClaim in a specific namespace using a YAML configuration in Crossplane. It specifies the API version, kind, metadata (including namespace), and desired location for the virtual machine claim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: compute.example.com/v1alpha1\nkind: VirtualMachineClaim\nmetadata:\n  name: my-namespaced-vm\n  namespace: crossplane-test\nspec:\n  location: \"EU\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Function Template\nDESCRIPTION: Shell command and output showing initialization of a new Crossplane function using the crossplane CLI, creating a function template from the Go template repository.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg init function-xbuckets function-template-go -d function-xbuckets \nInitialized package \"function-xbuckets\" in directory \"/home/negz/control/negz/function-xbuckets\" from https://github.com/crossplane/function-template-go/tree/91a1a5eed21964ff98966d72cc6db6f089ad63f4 (main)\n\nTo get started:\n\n1. Replace `function-template-go` with your function in `go.mod`,\n   `package/crossplane.yaml`, and any Go imports. (You can also do this\n   automatically by running the `./init.sh <function-name>` script.)\n2. Update `input/v1beta1/` to reflect your desired input (and run `go generate`)\n3. Add your logic to `RunFunction` in `fn.go`\n4. Add tests for your logic in `fn_test.go`\n5. Update `README.md`, to be about your function!\n\nFound init.sh script!\nDo you want to run it? [y]es/[n]o/[v]iew: y\nFunction function-xbuckets has been initialised successfully\n```\n\n----------------------------------------\n\nTITLE: Managing Selector Results for EnvironmentConfigs in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to manage selector results when selecting EnvironmentConfigs by labels. It shows the use of 'mode' to control the number of returned environments and how to handle multiple matches.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/environment-configs.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n        - type: Selector\n          selector:\n            mode: Single\n            matchLabels:\n              - key: my-other-label-key\n                type: Value\n                value: my-other-label-value\n              - key: my-other-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provider with Credentials\nDESCRIPTION: YAML configuration to create a ProviderConfig resource linking Azure credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: azure.upbound.io/v1beta1\nmetadata:\n  name: default\nkind: ProviderConfig\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: azure-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane StoreConfig\nDESCRIPTION: Creates a StoreConfig object for Crossplane to connect to the Vault plugin service.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: secrets.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: vault\nspec:\n  type: Plugin\n  defaultScope: crossplane-system\n  plugin:\n    endpoint: ess-plugin-vault.crossplane-system:4040\n    configRef:\n      apiVersion: secrets.crossplane.io/v1alpha1\n      kind: VaultConfig\n      name: vault-internal\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Selecting EnvironmentConfig by Label Matching\nDESCRIPTION: Example showing how to select EnvironmentConfigs using label selectors with both static values and dynamic field paths.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/environment-configs.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector: \n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n```\n\n----------------------------------------\n\nTITLE: String Transform with Format\nDESCRIPTION: Example of string transform using format to apply Go string formatting.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"stringAnnotation\"]\n    transforms:\n      - type: string\n        string:\n          type: Format\n          fmt: \"the-field-%s\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Crossplane Function from Template\nDESCRIPTION: This command initializes a new Crossplane function using the Python function template from GitHub. It creates a directory structure with necessary files for a Python-based composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg init function-xbuckets https://github.com/crossplane/function-template-python -d function-xbuckets\nInitialized package \"function-xbuckets\" in directory \"/home/negz/control/negz/function-xbuckets\" from https://github.com/crossplane/function-template-python/tree/bfed6923ab4c8e7adeed70f41138645fc7d38111 (main)\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Authentication in Vault\nDESCRIPTION: Commands to enable and configure Kubernetes authentication method in Vault, allowing authentication based on Kubernetes service accounts.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-injection.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncat cluster-keys.json | jq -r \".root_token\" # get root token\n\nkubectl exec -it vault-0 -- /bin/sh\nvault login # use root token from above\nvault auth enable kubernetes\n\nvault write auth/kubernetes/config \\\n        token_reviewer_jwt=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\n        kubernetes_host=\"https://$KUBERNETES_PORT_443_TCP_ADDR:443\" \\\n        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Creating a crossplane.yaml Configuration Metadata File\nDESCRIPTION: Example crossplane.yaml file that defines a Configuration package with dependencies on other packages and version requirements for both dependencies and Crossplane itself.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n$ cat crossplane.yaml\napiVersion: meta.pkg.crossplane.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: test-configuration\nspec:\n  dependsOn:\n    - provider: xpkg.crossplane.io/crossplane-contrib/provider-aws\n      version: \">=v0.36.0\"\n  crossplane:\n    version: \">=v1.12.1-0\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Crossplane Composition for GCP Storage Bucket and PubSub Topic\nDESCRIPTION: This YAML defines a Crossplane Composition that creates a GCP Storage Bucket and PubSub Topic. It uses the patch-and-transform function to map user inputs to resource templates.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: topic-with-bucket\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: crossplane-quickstart-bucket\n          base:\n            apiVersion: storage.gcp.upbound.io/v1beta1\n            kind: Bucket\n            spec:\n              forProvider:\n                location: \"US\"\n          patches:\n            - fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"EU\"\n                    US: \"US\"\n        - name: crossplane-quickstart-topic\n          base:\n            apiVersion: pubsub.gcp.upbound.io/v1beta1\n            kind: Topic\n            spec:\n              forProvider:\n                messageStoragePolicy:\n                  - allowedPersistenceRegions:\n                    - \"us-central1\"\n          patches:\n            - fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.messageStoragePolicy[0].allowedPersistenceRegions[0]\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"europe-central2\"\n                    US: \"us-central1\"\n  compositeTypeRef:\n    apiVersion: queue.example.com/v1alpha1\n    kind: PubSub\nEOF\n```\n\n----------------------------------------\n\nTITLE: Viewing Composed Resource Secrets in Kubernetes\nDESCRIPTION: This shell command shows how to view the secrets created by Crossplane for composed resources. The output displays a secret named 'key1' in the 'docs' namespace with connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secrets -n docs\nNAME   TYPE                                DATA   AGE\nkey1   connection.crossplane.io/v1alpha1   4      4m30s\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for AMD64 Platform\nDESCRIPTION: This command builds a Crossplane package for the AMD64 platform. It specifies the package root directory, embeds the AMD64 runtime image, and outputs the package file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-amd64 \\\n    --package-file=function-amd64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Setting Management Policies for AWS Subnet\nDESCRIPTION: Example showing how to configure management policies for an AWS Subnet resource, specifically allowing creation, deletion, and observation while preventing updates.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  managementPolicies: [\"Create\", \"Delete\", \"Observe\"]\n  forProvider:\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Verifying Composite Resources - Shell\nDESCRIPTION: This shell command retrieves all composite resources managed by Crossplane. The command 'kubectl get composite' lists essential details including their synchronization status and age, providing a straightforward view of the managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\nNAME                    SYNCED   READY   COMPOSITION         AGE\nmy-composite-resource   True     True    my-composition      4s\n```\n\n----------------------------------------\n\nTITLE: Updated RunFunction Method for S3 Bucket Creation in Go\nDESCRIPTION: This snippet shows the updated RunFunction method that creates S3 buckets based on the input specifications. It demonstrates parsing the composite resource, creating bucket resources, and setting the desired state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n\trsp := response.To(req, response.DefaultTTL)\n\n\txr, err := request.GetObservedCompositeResource(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get observed composite resource from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\tregion, err := xr.Resource.GetString(\"spec.region\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.region field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\tnames, err := xr.Resource.GetStringArray(\"spec.names\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.names field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\tdesired, err := request.GetDesiredComposedResources(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get desired resources from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\t_ = v1beta1.AddToScheme(composed.Scheme)\n\n\tfor _, name := range names {\n\t\tb := &v1beta1.Bucket{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\tAnnotations: map[string]string{\n\t\t\t\t\t\"crossplane.io/external-name\": name,\n\t\t\t\t},\n\t\t\t},\n\t\t\tSpec: v1beta1.BucketSpec{\n\t\t\t\tForProvider: v1beta1.BucketParameters{\n\t\t\t\t\tRegion: ptr.To[string](region),\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\tcd, err := composed.From(b)\n\t\tif err != nil {\n\t\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot convert %T to %T\", b, &composed.Unstructured{}))\n\t\t\treturn rsp, nil\n\t\t}\n\n\t\tdesired[resource.Name(\"xbuckets-\"+name)] = &resource.DesiredComposed{Resource: cd}\n\t}\n\n\tif err := response.SetDesiredComposedResources(rsp, desired); err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot set desired composed resources in %T\", rsp))\n\t\treturn rsp, nil\n\t}\n\n\treturn rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: External Resource Naming Example\nDESCRIPTION: Example showing how to use the crossplane.io/external-name annotation to specify a custom name for the external resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: my-rds-instance  \n  annotations: \n    crossplane.io/external-name: my-custom-name\n```\n\n----------------------------------------\n\nTITLE: Referencing Resources by External Name\nDESCRIPTION: This snippet shows how to reference another managed resource by its external name in the provider's environment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.m.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcId: vpc-01353cfe93950a8ff\n```\n\n----------------------------------------\n\nTITLE: Installing Provider with SHA256 Digest for Deterministic Installation\nDESCRIPTION: This YAML demonstrates how to install a Provider using a SHA256 digest hash instead of a version tag, ensuring deterministic and repeatable installations by referencing the exact package content.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws@sha256:ee6bece46dbb54cc3f0233961f5baac317fa4e4a81b41198bdc72fc472d113d0\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for AMD64 Platform\nDESCRIPTION: Uses the Crossplane CLI to build a package for the AMD64 platform. It specifies the package root directory, embeds the AMD64 runtime image, and outputs the package file as 'function-amd64.xpkg'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-amd64 \\\n    --package-file=function-amd64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Running a Crossplane Function Locally for Development\nDESCRIPTION: This shell command runs a Crossplane composition function locally in insecure debug mode for development and testing purposes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngo run . --insecure --debug\n```\n\n----------------------------------------\n\nTITLE: Publishing Secrets to External Store in Crossplane\nDESCRIPTION: Configuration example for publishing connection secrets to an external secret store like HashiCorp Vault using the publishConnectionDetailsTo field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  publishConnectionDetailsTo:\n    name: my-external-secret-store\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing Provider Logs\nDESCRIPTION: Command to view logs from a specific provider pod\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/troubleshoot-crossplane.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system logs <name-of-provider-pod>\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider with DeploymentRuntimeConfig for External Secret Stores\nDESCRIPTION: Example configuration for enabling external secret stores in a Provider using DeploymentRuntimeConfig. Shows how to reference a runtime config and set container arguments for the provider deployment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-iam\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-iam:v1\n  runtimeConfigRef:\n    name: enable-ess\n---\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: enable-ess\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      template:\n        spec:\n          containers:\n            - name: package-runtime\n              args:\n                - --enable-external-secret-stores\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource Definition (XRD) in YAML\nDESCRIPTION: Define a custom API group, name, and version for a new Crossplane resource type with basic configuration\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMyDatabase\n    plural: xmydatabases\n  versions:\n  - name: v1alpha1\n```\n\n----------------------------------------\n\nTITLE: Installing GCP PubSub Provider\nDESCRIPTION: YAML configuration to install the GCP PubSub Provider in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-pubsub\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-pubsub:v1.12.1\n```\n\n----------------------------------------\n\nTITLE: ClusterUsage for Cluster-Scoped Resources\nDESCRIPTION: YAML configuration showing how to protect cluster-scoped resources using ClusterUsage.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/usages.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: protection.crossplane.io/v1beta1\nkind: ClusterUsage\nmetadata:\n  name: protect-important-crd\nspec:\n  of:\n    apiVersion: apiextensions.k8s.io/v1\n    kind: CustomResourceDefinition\n    resourceRef:\n      name: importantresources.example.crossplane.io\n  reason: \"Very important CRD - should never be deleted!\"\n```\n\n----------------------------------------\n\nTITLE: Complete Function Implementation with Full Context\nDESCRIPTION: Complete implementation including imports, class definition, and detailed commentary explaining the function's operation and interaction with Crossplane's protobuf types.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"A Crossplane composition function.\"\"\"\n\nimport grpc\nfrom crossplane.function import logging, response\nfrom crossplane.function.proto.v1 import run_function_pb2 as fnv1\nfrom crossplane.function.proto.v1 import run_function_pb2_grpc as grpcv1\n\n\nclass FunctionRunner(grpcv1.FunctionRunnerService):\n    \"\"\"A FunctionRunner handles gRPC RunFunctionRequests.\"\"\"\n\n    def __init__(self):\n        \"\"\"Create a new FunctionRunner.\"\"\"\n        self.log = logging.get_logger()\n\n    async def RunFunction(\n        self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext\n    ) -> fnv1.RunFunctionResponse:\n        \"\"\"Run the function.\"\"\"\n        # Create a logger for this request.\n        log = self.log.bind(tag=req.meta.tag)\n        log.info(\"Running function\")\n\n        # Create a response to the request. This copies the desired state and\n        # pipeline context from the request to the response.\n        rsp = response.to(req)\n\n        # Get the region and a list of bucket names from the observed composite\n        # resource (XR). Crossplane represents resources using the Struct\n        # well-known protobuf type. The Struct Python object can be accessed\n        # like a dictionary.\n        region = req.observed.composite.resource[\"spec\"][\"region\"]\n        names = req.observed.composite.resource[\"spec\"][\"names\"]\n\n        # Add a desired S3 bucket for each name.\n        for name in names:\n            # Crossplane represents desired composed resources using a protobuf\n            # map of messages. This works a little like a Python defaultdict.\n            # Instead of assigning to a new key in the dict-like map, you access\n            # the key and mutate its value as if it did exist.\n            #\n            # The below code works because accessing the xbuckets-{name} key\n            # automatically creates a new, empty fnv1.Resource message. The\n            # Resource message has a resource field containing an empty Struct\n            # object that can be populated from a dictionary by calling update.\n            #\n            # https://protobuf.dev/reference/python/python-generated/#map-fields\n            rsp.desired.resources[f\"xbuckets-{name}\"].resource.update(\n                {\n                    \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                    \"kind\": \"Bucket\",\n                    \"metadata\": {\n                        \"annotations\": {\n                            \"crossplane.io/external-name\": name,\n                        },\n                    },\n                    \"spec\": {\n                        \"forProvider\": {\n                            \"region\": region,\n                        },\n                    },\n                }\n            )\n\n        # Log what the function did. This will only appear in the function's pod\n        # logs. A function can use response.normal() and response.warning() to\n        # emit Kubernetes events associated with the XR it's operating on.\n        log.info(\"Added desired buckets\", region=region, count=len(names))\n\n        return rsp\n```\n\n----------------------------------------\n\nTITLE: Defining an XBuckets Composite Resource in YAML\nDESCRIPTION: YAML definition of an XBuckets composite resource that specifies an AWS region and an array of bucket names to be created as S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Defining an XBuckets Composite Resource in YAML\nDESCRIPTION: This YAML defines an XBuckets composite resource with a specified region and an array of bucket names. This resource will be used as input for the Python composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Publishing Secrets to External Store\nDESCRIPTION: Example showing how to configure publishing secrets to an external store like HashiCorp Vault using StoreConfig.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rds.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n  # Removed for brevity\n  publishConnectionDetailsTo:\n    name: rds-kubernetes-secret\n    configRef: \n      name: my-vault-storeconfig\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with Usage Resource (YAML)\nDESCRIPTION: This snippet demonstrates how to use selectors in a Usage resource to define resources based on labels or controller references instead of specific resource names.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/usages.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1alpha1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceSelector:\n      matchControllerRef: false # default, and could be omitted\n      matchLabels:\n        foo: bar\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceSelector:\n       matchLabels:\n          baz: qux\n```\n\n----------------------------------------\n\nTITLE: CombineFromComposite Patch in Crossplane YAML\nDESCRIPTION: Demonstrates combining multiple values from a composite resource into a single value in the composed resource using CombineFromComposite patch. Shows creating a resource name from region and field2 values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineFromComposite\n      combine:\n        variables:\n          - fromFieldPath: spec.desiredRegion\n          - fromFieldPath: spec.field2\n        strategy: string\n        string:\n          fmt: \"my-resource-%s-%s\"\n      toFieldPath: metadata.name\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Provider with Crossplane\nDESCRIPTION: Kubernetes manifest that deploys the AWS S3 provider package to a Crossplane-enabled cluster. This provider allows Crossplane to manage AWS S3 resources through Kubernetes APIs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-s3\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Claiming Existing Composite Resources in YAML\nDESCRIPTION: This YAML snippet shows how to create a Claim that links to an existing composite resource by specifying the resourceRef in the Claim's spec.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/claims.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: database\nmetadata:\n  name: my-claimed-database\nspec:\n  resourceRef:\n    apiVersion: example.org/v1alpha1\n    kind: XMyDatabase\n    name: my-pre-created-xr\n```\n\n----------------------------------------\n\nTITLE: Installing Function Patch and Transform\nDESCRIPTION: YAML manifest to install the Function Patch and Transform package in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Monitoring Crossplane Resources with Beta Top Command\nDESCRIPTION: Example output of the crossplane beta top command showing CPU and memory usage of Crossplane-related pods.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta top \nTYPE         NAMESPACE   NAME                                                                  CPU(cores)   MEMORY\ncrossplane   default     crossplane-f98f9ddfd-tnm46                                            4m           32Mi\ncrossplane   default     crossplane-rbac-manager-74ff459b88-94p8p                              4m           14Mi\nprovider     default     provider-aws-s3-1f1a3fb08cbc-5c49d84447-sggrq                         3m           108Mi\nprovider     default     crossplane-contrib-provider-family-aws-48b3b5ccf964-76c9686b6-bgg65   2m           89Mi\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Based on XRD in YAML\nDESCRIPTION: Example YAML for a Composite Resource that follows the structure defined by a Composite Resource Definition. It demonstrates how the apiVersion, kind, and spec are derived from the XRD.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/introduction.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource (XR)\napiVersion: test.example.org/v1alpha1\nkind: MyComputeResource\nmetadata:\n  name: my-resource\nspec:\n  storage: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane ESS Plugin for Vault\nDESCRIPTION: Installs the Crossplane External Secret Store plugin for Vault with the necessary annotations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install ess-plugin-vault oci://xpkg.crossplane.io/crossplane-contrib/ess-plugin-vault --namespace crossplane-system -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Editing Kubernetes Deployment for Real-Time Compositions Support\nDESCRIPTION: Modifies the Crossplane deployment to support real-time compositions using the --enable-realtime-compositions argument. This YAML example requires access to Kubernetes cluster with edit permissions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/pods.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --enable-realtime-compositions\n```\n\n----------------------------------------\n\nTITLE: Retrieving VirtualMachine Resources with kubectl in Crossplane\nDESCRIPTION: This command retrieves the VirtualMachine resources created in Crossplane using kubectl. It displays the name, sync status, ready status, composition, and age of the resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get VirtualMachine\n```\n\n----------------------------------------\n\nTITLE: Listing Installed XRDs\nDESCRIPTION: Command to view installed Composite Resource Definitions (XRDs) in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd\nNAME                                  ESTABLISHED   OFFERED   AGE\nvirtualmachines.compute.example.com   True          True      43s\n```\n\n----------------------------------------\n\nTITLE: Selecting a Composition Using Label Selectors in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to select a Composition based on labels using compositionSelector and matchLabels fields, allowing for more flexible selection criteria compared to direct name references.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionSelector:\n    matchLabels:\n      environment: production\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Visualizing End-to-End Server-Side Apply Flow in Crossplane\nDESCRIPTION: This diagram illustrates the server-side apply flow from claims to composite resources to composed resources. It shows how server-side apply is used at each step of the resource management process in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/server-side-apply.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  A(Claim) -- claim server-side apply --> B(Composite Resource)\n  B -- function server-side apply --> C(Composed Resource)\n  B -- function server-side apply --> D(Composed Resource)\n  B -- function server-side apply --> E(Composed Resource)\n```\n\n----------------------------------------\n\nTITLE: Serving and Referencing a Schema in Crossplane XRD\nDESCRIPTION: This YAML snippet demonstrates how to serve and reference a schema in a Crossplane XRD. It shows the use of 'served: true' and 'referenceable: true' fields to make the schema version available for use.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string\n```\n\n----------------------------------------\n\nTITLE: Creating a Patch\nDESCRIPTION: Example of creating a patch to copy a value from the composite resource to a managed resource's labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: storage-bucket\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: \"us-east-2\"\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.field1\n      toFieldPath: metadata.labels[\"patchLabel\"]\n```\n\n----------------------------------------\n\nTITLE: Creating AWS ProviderConfig in Kubernetes\nDESCRIPTION: This YAML configuration creates a ProviderConfig resource for AWS. It specifies the credentials source as a Kubernetes secret and references the previously created aws-secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provider Connection in Crossplane\nDESCRIPTION: YAML manifest to create a ProviderConfig that references the Azure credentials secret. This configuration tells Crossplane how to authenticate with Azure when provisioning resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: azure.upbound.io/v1beta1\nmetadata:\n  name: default\nkind: ProviderConfig\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: azure-secret\n      key: creds\nEOF\n```\n\n----------------------------------------\n\nTITLE: Initializing a Crossplane Function from Template with CLI\nDESCRIPTION: Command to initialize a new function project from a template using the Crossplane CLI. This creates the basic structure of a Go-based composition function project.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg init function-xbuckets function-template-go -d function-xbuckets \nInitialized package \"function-xbuckets\" in directory \"/home/negz/control/negz/function-xbuckets\" from https://github.com/crossplane/function-template-go/tree/91a1a5eed21964ff98966d72cc6db6f089ad63f4 (main)\n\nTo get started:\n\n1. Replace `function-template-go` with your function in `go.mod`,\n   `package/crossplane.yaml`, and any Go imports. (You can also do this\n   automatically by running the `./init.sh <function-name>` script.)\n2. Update `input/v1beta1/` to reflect your desired input (and run `go generate`)\n3. Add your logic to `RunFunction` in `fn.go`\n4. Add tests for your logic in `fn_test.go`\n5. Update `README.md`, to be about your function!\n\nFound init.sh script!\nDo you want to run it? [y]es/[n]o/[v]iew: y\nFunction function-xbuckets has been initialised successfully\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Export in Crossplane Helm Chart\nDESCRIPTION: Configuration snippet for enabling metrics export in the Crossplane Helm chart using the metrics.enabled parameter.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Secret from GCP Credentials\nDESCRIPTION: Command to create a Kubernetes secret using a GCP service account JSON credentials file, which Crossplane will use to authenticate with GCP.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric gcp-secret \\\n-n crossplane-system \\\n--from-file=creds=./gcp-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Configuring provider-aws with ProviderConfig\nDESCRIPTION: This snippet shows how to create a ProviderConfig for provider-aws, specifying the credentials source as the filesystem path where Vault injects the secrets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Filesystem\n    fs:\n      path: /vault/secrets/creds.txt\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Enabling Real-time Compositions Feature in Crossplane\nDESCRIPTION: YAML configuration showing how to modify the Crossplane deployment to enable the real-time compositions feature by adding the appropriate feature flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/pods.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --enable-realtime-compositions\n```\n\n----------------------------------------\n\nTITLE: Selecting Composition Revisions Using Label Selectors in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to select Composition revisions based on labels using compositionRevisionSelector and matchLabels fields, allowing for more flexible selection criteria compared to direct name references.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionRevisionSelector:\n    matchLabels:\n      channel: dev\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Pushing Specific Package File Example\nDESCRIPTION: Example command showing how to push a specific package file to a registry with organization and version tag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push -f my-package.xpkg crossplane-docs/my-package:v0.14.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Reference in Crossplane Claim\nDESCRIPTION: This YAML snippet shows how to configure a secret reference in a Crossplane Claim. It demonstrates the use of writeConnectionSecretToRef to specify the name and location of the secret that will be created for the Claim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: SecretTest\nmetadata:\n  name: test-secrets\n  namespace: default\nspec:\n  writeConnectionSecretToRef:\n    name: my-access-key-secret\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMap for CA Bundle\nDESCRIPTION: Command to create a Kubernetes ConfigMap in the Crossplane system namespace containing the CA bundle configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/self-signed-ca-certs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n [Crossplane system namespace] create cm ca-bundle-config \\\n--from-file=ca-bundle=./[yourdomain].ca-bundle\n```\n\n----------------------------------------\n\nTITLE: Using FromCompositeFieldPath Patch in Crossplane\nDESCRIPTION: This snippet demonstrates how to use the FromCompositeFieldPath patch to apply values from a composite resource to a composed resource. The example shows applying a 'desiredRegion' value to a managed resource's region field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.desiredRegion\n      toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Validation Mode in Composition\nDESCRIPTION: Example of setting the schema-aware validation mode to 'loose' using a Composition annotation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  annotations:\n    crossplane.io/composition-schema-aware-validation-mode: loose\n  # Removed for brevity\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Referencing Resources by Selector\nDESCRIPTION: This snippet shows how to use a selector to reference another managed resource based on its labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.m.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcIdSelector: \n      matchLabels:\n        my-label: label-value\n```\n\n----------------------------------------\n\nTITLE: Selecting EnvironmentConfigs in Crossplane Composition\nDESCRIPTION: This YAML snippet shows how to select EnvironmentConfigs in a Crossplane Composition using function-environment-configs. It demonstrates selecting by reference and by selector with labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/environment-configs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Reference\n          ref:\n            name: example-environment\n        - type: Selector\n          selector:\n            matchLabels:\n            # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Rendering Composite Resource with Composition Function\nDESCRIPTION: Command to preview the output of a composite resource after applying composition functions. Requires Docker and uses local composition function rendering.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml function.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap for CA Bundle in Kubernetes\nDESCRIPTION: This command creates a Kubernetes ConfigMap in the Crossplane system namespace, containing the CA bundle file. The ConfigMap is named 'ca-bundle-config' and the key for the bundle is 'ca-bundle'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/self-signed-ca-certs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n [Crossplane system namespace] create cm ca-bundle-config \\\n--from-file=ca-bundle=./[yourdomain].ca-bundle\n```\n\n----------------------------------------\n\nTITLE: Describing a Composite Resource in Crossplane\nDESCRIPTION: Shell command to view detailed information about a composite resource, including its composition reference and the managed resources it has created. This helps understand the relationship between compositions and their managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe composite my-composite-resource\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for AMD64 Platform\nDESCRIPTION: This command builds a Docker runtime image for the linux/amd64 platform and tags it as 'runtime-amd64'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/amd64 --tag runtime-amd64\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Status Checks for Crossplane Resources\nDESCRIPTION: Comprehensive ConfigMap configuration that defines health status checks for both upbound.io and crossplane.io resources, including custom Lua health check logic.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n  application.resourceTrackingMethod: annotation\n  resource.customizations: |\n    \"*.upbound.io/*\":\n      health.lua: |\n        health_status = {\n          status = \"Progressing\",\n          message = \"Provisioning ...\"\n        }\n\n        local function contains (table, val)\n          for i, v in ipairs(table) do\n            if v == val then\n              return true\n            end\n          end\n          return false\n        end\n\n        local has_no_status = {\n          \"ProviderConfig\",\n          \"ProviderConfigUsage\"\n        }\n\n        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then\n          health_status.status = \"Healthy\"\n          health_status.message = \"Resource is up-to-date.\"\n          return health_status\n        end\n\n        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then\n          if obj.kind == \"ProviderConfig\" and obj.status.users ~= nil then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is in use.\"\n            return health_status\n          end\n          return health_status\n        end\n\n        for i, condition in ipairs(obj.status.conditions) do\n          if condition.type == \"LastAsyncOperation\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Synced\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Ready\" then\n            if condition.status == \"True\" then\n              health_status.status = \"Healthy\"\n              health_status.message = \"Resource is up-to-date.\"\n              return health_status\n            end\n          end\n        end\n\n        return health_status\n\n    \"*.crossplane.io/*\":\n      health.lua: |\n        health_status = {\n          status = \"Progressing\",\n          message = \"Provisioning ...\"\n        }\n\n        local function contains (table, val)\n          for i, v in ipairs(table) do\n            if v == val then\n              return true\n            end\n          end\n          return false\n        end\n\n        local has_no_status = {\n          \"Composition\",\n          \"CompositionRevision\",\n          \"DeploymentRuntimeConfig\",\n          \"ControllerConfig\",\n          \"ProviderConfig\",\n          \"ProviderConfigUsage\"\n        }\n        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is up-to-date.\"\n          return health_status\n        end\n\n        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then\n          if obj.kind == \"ProviderConfig\" and obj.status.users ~= nil then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is in use.\"\n            return health_status\n          end\n          return health_status\n        end\n\n        for i, condition in ipairs(obj.status.conditions) do\n          if condition.type == \"LastAsyncOperation\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Synced\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if contains({\"Ready\", \"Healthy\", \"Offered\", \"Established\"}, condition.type) then\n            if condition.status == \"True\" then\n              health_status.status = \"Healthy\"\n              health_status.message = \"Resource is up-to-date.\"\n              return health_status\n            end\n          end\n        end\n\n        return health_status\n```\n\n----------------------------------------\n\nTITLE: Applying Azure Provider to Crossplane\nDESCRIPTION: YAML configuration to install the Azure Network provider in Crossplane, which enables provisioning Azure networking resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-azure-network\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-azure-network:v1.11.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Installing GCP PubSub Provider\nDESCRIPTION: YAML configuration to install the GCP PubSub provider in Crossplane\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-pubsub\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-pubsub:v1.12.1\n```\n\n----------------------------------------\n\nTITLE: Provider Package Metadata Definition\nDESCRIPTION: Example of Provider package metadata definition using the meta.pkg.crossplane.io API group.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: meta.pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating a Claim with Connection Secret Reference\nDESCRIPTION: Example Claim that references a Composite Resource and specifies where to write connection secrets. This is how consumers request the resource and access its connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: SecretTest\nmetadata:\n  name: test-secrets\n  namespace: default\nspec:\n  writeConnectionSecretToRef:\n    name: my-access-key-secret\n```\n\n----------------------------------------\n\nTITLE: Listing Composite Resources in Crossplane\nDESCRIPTION: Shell command to list composite resources and their status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\nNAME                    SYNCED   READY   COMPOSITION         AGE\nmy-composite-resource   True     True    my-composition      4s\n```\n\n----------------------------------------\n\nTITLE: Implementing Usage in a Crossplane Composition\nDESCRIPTION: Example of a Composition that incorporates a Usage resource to define deletion ordering between a GCP Cluster and a Helm Release. The Usage ensures the cluster won't be deleted until the dependent release is removed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/usages.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: cluster\n          base:\n            apiVersion: container.gcp.upbound.io/v1beta1\n            kind: Cluster\n            # Removed for brevity\n        - name: release\n          base:\n            apiVersion: helm.crossplane.io/v1beta1\n            kind: Release\n            # Removed for brevity\n        - name: release-uses-cluster\n          base:\n            apiVersion: apiextensions.crossplane.io/v1beta1\n            kind: Usage\n            spec:\n              replayDeletion: true\n              of:\n                apiVersion: container.gcp.upbound.io/v1beta1\n                kind: Cluster\n                resourceSelector:\n                  matchControllerRef: true\n              by:\n                apiVersion: helm.crossplane.io/v1beta1\n                kind: Release\n                resourceSelector:\n                  matchControllerRef: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Status Checks for Crossplane Resources\nDESCRIPTION: Implements custom health checks for Crossplane resources in Argo CD, including status monitoring for both upbound.io and crossplane.io resources using Lua scripts.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n  application.resourceTrackingMethod: annotation\n  resource.customizations: |\n    \"*.upbound.io/*\":\n      health.lua: |\n        health_status = {\n          status = \"Progressing\",\n          message = \"Provisioning ...\"\n        }\n\n        local function contains (table, val)\n          for i, v in ipairs(table) do\n            if v == val then\n              return true\n            end\n          end\n          return false\n        end\n\n        local has_no_status = {\n          \"ProviderConfig\",\n          \"ProviderConfigUsage\"\n        }\n\n        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then\n          health_status.status = \"Healthy\"\n          health_status.message = \"Resource is up-to-date.\"\n          return health_status\n        end\n\n        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then\n          if obj.kind == \"ProviderConfig\" and obj.status.users ~= nil then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is in use.\"\n            return health_status\n          end\n          return health_status\n        end\n\n        for i, condition in ipairs(obj.status.conditions) do\n          if condition.type == \"LastAsyncOperation\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Synced\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Ready\" then\n            if condition.status == \"True\" then\n              health_status.status = \"Healthy\"\n              health_status.message = \"Resource is up-to-date.\"\n              return health_status\n            end\n          end\n        end\n\n        return health_status\n\n    \"*.crossplane.io/*\":\n      health.lua: |\n        health_status = {\n          status = \"Progressing\",\n          message = \"Provisioning ...\"\n        }\n\n        local function contains (table, val)\n          for i, v in ipairs(table) do\n            if v == val then\n              return true\n            end\n          end\n          return false\n        end\n\n        local has_no_status = {\n          \"Composition\",\n          \"CompositionRevision\",\n          \"DeploymentRuntimeConfig\",\n          \"ControllerConfig\",\n          \"ProviderConfig\",\n          \"ProviderConfigUsage\"\n        }\n        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is up-to-date.\"\n          return health_status\n        end\n\n        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then\n          if obj.kind == \"ProviderConfig\" and obj.status.users ~= nil then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is in use.\"\n            return health_status\n          end\n          return health_status\n        end\n\n        for i, condition in ipairs(obj.status.conditions) do\n          if condition.type == \"LastAsyncOperation\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Synced\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if contains({\"Ready\", \"Healthy\", \"Offered\", \"Established\"}, condition.type) then\n            if condition.status == \"True\" then\n              health_status.status = \"Healthy\"\n              health_status.message = \"Resource is up-to-date.\"\n              return health_status\n            end\n          end\n        end\n\n        return health_status\n```\n\n----------------------------------------\n\nTITLE: Monitoring CloudSQLInstance Provisioning in Crossplane\nDESCRIPTION: Watches the CloudSQLInstance resource to monitor its provisioning progress. The -w flag enables continuous monitoring of the resource status as it changes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nkubectl get cloudsqlinstance -w\n```\n\n----------------------------------------\n\nTITLE: Applying GCP Storage Provider in Crossplane\nDESCRIPTION: YAML manifest to apply the GCP Storage Provider to a Crossplane installation, specifying the provider package to use.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-storage\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-storage:v1.12.1\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Revision History Limit\nDESCRIPTION: This YAML sets the revisionHistoryLimit to 10 for a Provider, instructing Crossplane to maintain up to 10 inactive revisions of the Provider package instead of the default of 1.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  revisionHistoryLimit: 10\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane View ClusterRole with Aggregation Rules\nDESCRIPTION: Defines the crossplane-view ClusterRole that aggregates all roles with the label 'rbac.crossplane.io/aggregate-to-view: true'. This role provides read-only access to Crossplane resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane-view\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\naggregationRule:\n  clusterRoleSelectors:\n  - matchLabels:\n      rbac.crossplane.io/aggregate-to-view: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Combining Environment Values in Crossplane\nDESCRIPTION: Example of using CombineFromEnvironment patch to combine multiple environment values into a single annotation in a composed resource. Shows how to format combined strings using Go string formatting.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineFromEnvironment\n      combine:\n        strategy: string\n        variables:\n        - fromFieldPath: key1\n        - fromFieldPath: key2\n        string:\n          fmt: \"%s-%s\"\n      toFieldPath: metadata.annotations[EnvironmentPatch]\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Mode for Providers using DeploymentRuntimeConfig\nDESCRIPTION: Shows how to enable debug logging in Crossplane providers by creating a DeploymentRuntimeConfig that sets the --debug flag and referencing it from the Provider resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: debug-config\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      template:\n        spec:\n          containers:\n          - name: package-runtime\n            args: \n            - --debug\n---\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.33.0\n  runtimeConfigRef:\n    apiVersion: pkg.crossplane.io/v1beta1\n    kind: DeploymentRuntimeConfig\n    name: debug-config\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Runtime for a Function\nDESCRIPTION: This YAML snippet configures a Function in Crossplane to run in Development mode, allowing easier testing of composition functions without Docker. The annotation specifies this mode.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Provider Dependency Resolution Configuration\nDESCRIPTION: Configuration example showing how to disable automatic dependency resolution for a Provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  skipDependencyResolution: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Validating an AWS IAM AccessKey Resource Against Provider Schema\nDESCRIPTION: Shows how to validate a managed resource against a provider schema using the 'crossplane beta validate' command. This example validates an AWS IAM AccessKey resource against the provider-aws-iam schema.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-iam\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-iam:v1.21.1\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: iam.aws.upbound.io/v1beta1\nkind: AccessKey\nmetadata:\n  name: sample-access-key-0\nspec:\n  forProvider:\n    userSelector:\n      matchLabels:\n        example-name: test-user-0\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket Resource\nDESCRIPTION: Kubernetes configuration to create an AWS S3 bucket as a managed resource. Specifies the bucket name generation pattern, AWS region, and provider configuration reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  generateName: crossplane-bucket-\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: default\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Providers Role\nDESCRIPTION: Command to create a Kubernetes authentication role for Crossplane providers\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nvault write auth/kubernetes/role/crossplane-providers \\\n        bound_service_account_names=\"*\" \\\n        bound_service_account_namespaces=crossplane-system \\\n        policies=provider-creds \\\n        ttl=24h\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Function from Template\nDESCRIPTION: Shell command and output showing how to initialize a new Crossplane function using the crossplane CLI tool with the Go template.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg init function-xbuckets function-template-go -d function-xbuckets \nInitialized package \"function-xbuckets\" in directory \"/home/negz/control/negz/function-xbuckets\" from https://github.com/crossplane/function-template-go/tree/91a1a5eed21964ff98966d72cc6db6f089ad63f4 (main)\n\nTo get started:\n\n1. Replace `function-template-go` with your function in `go.mod`,\n   `package/crossplane.yaml`, and any Go imports. (You can also do this\n   automatically by running the `./init.sh <function-name>` script.)\n2. Update `input/v1beta1/` to reflect your desired input (and run `go generate`)\n3. Add your logic to `RunFunction` in `fn.go`\n4. Add tests for your logic in `fn_test.go`\n5. Update `README.md`, to be about your function!\n\nFound init.sh script!\nDo you want to run it? [y]es/[n]o/[v]iew: y\nFunction function-xbuckets has been initialised successfully\n```\n\n----------------------------------------\n\nTITLE: Viewing Configuration Revisions in Crossplane\nDESCRIPTION: Shell command to list all Configuration revisions with their status, showing active and inactive revisions. This helps track the history and current state of installed Configuration packages.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configurationrevisions\nNAME                            HEALTHY   REVISION   IMAGE                                             STATE      DEP-FOUND   DEP-INSTALLED   AGE\nplatform-ref-aws-1735d56cd88d   True      2          xpkg.crossplane.io/crossplane-contrib/platform-ref-aws:v0.5.0   Active     2           2               46s\nplatform-ref-aws-3ac761211893   True      1          xpkg.crossplane.io/crossplane-contrib/platform-ref-aws:v0.4.1   Inactive                               5m13s\n```\n\n----------------------------------------\n\nTITLE: Deleting Crossplane PubSub Resources\nDESCRIPTION: This shell command deletes a PubSub resource, which also deletes all associated managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete pubsub my-pubsub-queue\n```\n\n----------------------------------------\n\nTITLE: Referencing a Specific Composition Revision\nDESCRIPTION: This example demonstrates how to reference a specific Composition revision by name using the compositionRevisionRef field, which provides control over which exact version of a Composition is used.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionUpdatePolicy: Manual\n  compositionRevisionRef:\n    name: my-composition-b5aa1eb\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane using Helm\nDESCRIPTION: This shell command installs Crossplane using Helm. It specifies the Helm chart repository, namespace, and creates the namespace if it doesn't exist.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Edit ClusterRole\nDESCRIPTION: This command shows the full RBAC policy for the crossplane-edit ClusterRole, which has full access to Crossplane types and secrets, and read-only access to namespaces and events.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/pods.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-edit\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Composition Function\nDESCRIPTION: Example showing how to install a Crossplane composition function using a Function object. Specifically installs the function-patch-and-transform package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Example Virtual Machine API Definition\nDESCRIPTION: Example YAML showing a custom API for a virtual machine with a configurable location parameter.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: compute.example.com/v1alpha1\nkind: VirtualMachine\nmetadata:\n  name: my-vm\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Crossplane Providers\nDESCRIPTION: Shell command that retrieves and displays all installed Crossplane providers in the cluster, showing their installation status, health, and package information.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Provider Revision History Limit Configuration\nDESCRIPTION: Configuration example showing how to set the number of Provider revisions to maintain.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  revisionHistoryLimit: 10\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Complete Network Import Configuration\nDESCRIPTION: Complete YAML configuration for importing a GCP Network, including empty forProvider field to allow Crossplane to import existing settings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/import-existing-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: compute.gcp.crossplane.io/v1beta1\nkind: Network\nmetadata:\n  name: imported-network\n  annotations:\n    crossplane.io/external-name: my-existing-network\nspec:\n  forProvider: {}\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane Browse ClusterRole with Aggregation Rules\nDESCRIPTION: Defines the crossplane-browse ClusterRole that aggregates all roles with the label 'rbac.crossplane.io/aggregate-to-browse: true'. This role provides limited browse-level access to Crossplane resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane-browse\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\naggregationRule:\n  clusterRoleSelectors:\n  - matchLabels:\n      rbac.crossplane.io/aggregate-to-browse: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Defining Composition Type References for Template Usage\nDESCRIPTION: This YAML snippet shows a Composition's compositeTypeRef section which specifies which types of Composite Resources can use this Composition as a template, defining the apiVersion and kind that must match.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/introduction.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: test.example.org\nspec:\n  compositeTypeRef:\n    apiVersion: test.example.org/v1alpha1\n    kind: MyComputeResource\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing External Resource Names with kubectl\nDESCRIPTION: Command output showing how the external-name matches the Kubernetes resource name by default when listing managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get rdsinstance\nNAME                 READY   SYNCED   EXTERNAL-NAME        AGE\nmy-rds-instance      True    True     my-rds-instance      11m\n```\n\n----------------------------------------\n\nTITLE: Storing Connection Details in Kubernetes Secrets\nDESCRIPTION: This YAML snippet is used to define where to store combined connection details from managed resources in Kubernetes. The writeConnectionSecretsToNamespace specifies the namespace for the combined secret object.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  writeConnectionSecretsToNamespace: my-namespace\n  resources:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Crossplane StoreConfig Configuration\nDESCRIPTION: YAML configuration for Crossplane StoreConfig to connect to Vault plugin service.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: vault\nspec:\n  type: Plugin\n  defaultScope: crossplane-system\n  plugin:\n    endpoint: ess-plugin-vault.crossplane-system:4040\n    configRef:\n      apiVersion: secrets.crossplane.io/v1alpha1\n      kind: VaultConfig\n      name: vault-internal\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Storage in Crossplane Composition (YAML)\nDESCRIPTION: This YAML snippet defines a Crossplane Composition that specifies how and where connection secrets should be stored. It includes two resources, each with their own connection secret configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n      - name: key2\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2\n        connectionDetails:\n          - name: key2-user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Storage in Crossplane Composition\nDESCRIPTION: This YAML snippet demonstrates how to configure secret storage in a Crossplane Composition. It specifies the namespace for combined secrets and individual resource secret locations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n      - name: key2\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2\n        connectionDetails:\n          - name: key2-user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Function from Template\nDESCRIPTION: Shell command to initialize a new Crossplane function using the function-template-go template, with example output showing the initialization process.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg init function-xbuckets function-template-go -d function-xbuckets \nInitialized package \"function-xbuckets\" in directory \"/home/negz/control/negz/function-xbuckets\" from https://github.com/crossplane/function-template-go/tree/91a1a5eed21964ff98966d72cc6db6f089ad63f4 (main)\n\nTo get started:\n\n1. Replace `function-template-go` with your function in `go.mod`,\n   `package/crossplane.yaml`, and any Go imports. (You can also do this\n   automatically by running the `./init.sh <function-name>` script.)\n2. Update `input/v1beta1/` to reflect your desired input (and run `go generate`)\n3. Add your logic to `RunFunction` in `fn.go`\n4. Add tests for your logic in `fn_test.go`\n5. Update `README.md`, to be about your function!\n\nFound init.sh script!\nDo you want to run it? [y]es/[n]o/[v]iew: y\nFunction function-xbuckets has been initialised successfully\n```\n\n----------------------------------------\n\nTITLE: Specifying Composition Reference in YAML\nDESCRIPTION: Shows how to explicitly reference a specific composition for a composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionRef:\n    name: my-other-composition\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Describing Composite Resource - YAML\nDESCRIPTION: This YAML snippet provides an example of describing a composite resource with 'kubectl describe composite'. It highlights key specifications, including 'Composition Ref' and 'Resource Refs', showcasing the relationships and details of the composite resource along with its managed components.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe composite my-composite-resource\nName:         my-composite-resource\nAPI Version:  example.org/v1alpha1\nKind:         xMyDatabase\nSpec:\n  Composition Ref:\n    Name:  my-composition\n  Composition Revision Ref:\n    Name:                     my-composition-cf2d3a7\n  Composition Update Policy:  Automatic\n  Resource Refs:\n    API Version:  s3.aws.upbound.io/v1beta1\n    Kind:         Bucket\n    Name:         my-composite-resource-fmrks\n    API Version:  dynamodb.aws.upbound.io/v1beta1\n    Kind:         Table\n    Name:         my-composite-resource-wnr9t\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane StoreConfig for Vault Integration\nDESCRIPTION: Creates a StoreConfig resource that connects Crossplane to the Vault plugin using the VaultConfig.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: secrets.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: vault\nspec:\n  type: Plugin\n  defaultScope: crossplane-system\n  plugin:\n    endpoint: ess-plugin-vault.crossplane-system:4040\n    configRef:\n      apiVersion: secrets.crossplane.io/v1alpha1\n      kind: VaultConfig\n      name: vault-internal\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace-Scoped NoSQL Claim\nDESCRIPTION: Creates a namespace-scoped NoSQL claim that automatically creates the corresponding composite and managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: database.example.com/v1alpha1\nkind: NoSQLClaim\nmetadata:\n  name: my-nosql-database\n  namespace: crossplane-test\nspec:\n  location: \"US\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Installing a Crossplane Configuration Package\nDESCRIPTION: This YAML snippet demonstrates how to install a Crossplane Configuration package using a Configuration object. It specifies the package location and name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: configuration-quickstart\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Custom Values File\nDESCRIPTION: Example of using helm install command with a custom values file to apply customized settings for Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n-f settings.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Provider Revisions in Crossplane\nDESCRIPTION: This shell command lists all provider revisions in the cluster, showing their health status, revision numbers, container images, and activation states for version management.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providerrevisions\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package Command Example\nDESCRIPTION: Demonstrates the directory structure after building a Crossplane package using the CLI.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nls -1 ./\ntest-directory\ntest-package.xpkg\n```\n\n----------------------------------------\n\nTITLE: Listing Composition Revisions in Shell\nDESCRIPTION: This shell command lists all Composition revisions, showing their name, revision number, XR kind, XR API version, and age.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevision\n```\n\n----------------------------------------\n\nTITLE: Setting Composition Update Policy to Manual\nDESCRIPTION: This snippet shows how to set the compositionUpdatePolicy to Manual to prevent a composite resource from automatically using new Composition revisions when they become available.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionUpdatePolicy: Manual\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Patch and Transform Function in a Composition\nDESCRIPTION: This snippet demonstrates how to use the function-patch-and-transform in a Composition pipeline to patch annotations from the composite resource to the managed resources, enabling custom external naming.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: my-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: database\n        base:\n          # Removed for brevity\n        patches:\n        - fromFieldPath: metadata.annotations\n          toFieldPath: metadata.annotations\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Role for Crossplane Providers\nDESCRIPTION: Command to create a Vault role for Crossplane provider pods with appropriate permissions\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nvault write auth/kubernetes/role/crossplane-providers \\\n        bound_service_account_names=\"*\" \\\n        bound_service_account_namespaces=crossplane-system \\\n        policies=provider-creds \\\n        ttl=24h\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Provider with Kubernetes Configuration\nDESCRIPTION: Applies a Provider resource to install the AWS S3 provider into the Kubernetes cluster. This installs the necessary Custom Resource Definitions (CRDs) to manage AWS S3 resources directly from Kubernetes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-s3\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring External Secret Store for Crossplane Managed Resources\nDESCRIPTION: This YAML snippet shows how to configure a Crossplane managed resource to publish its connection details to an external secret store like HashiCorp Vault using the publishConnectionDetailsTo field with a configRef.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rds.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n  # Removed for brevity\n  publishConnectionDetailsTo:\n    name: rds-kubernetes-secret\n    configRef: \n      name: my-vault-storeconfig\n```\n\n----------------------------------------\n\nTITLE: Creating a Crossplane PubSub Resource\nDESCRIPTION: This YAML snippet creates a PubSub resource using the custom API defined in the Composition. It specifies the location for the resources to be created.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: queue.example.com/v1alpha1\nkind: PubSub\nmetadata:\n  name: my-pubsub-queue\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Configuration Package\nDESCRIPTION: Helm command to install Crossplane with an automatic configuration package installation, demonstrating how to reproduce platform configurations across clusters.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/multi-tenant.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install crossplane --namespace crossplane-system crossplane-stable/crossplane --set configuration.packages='{\"registry.upbound.io/xp/getting-started-with-aws:latest\"}'\n```\n\n----------------------------------------\n\nTITLE: Viewing Composite Resources with kubectl\nDESCRIPTION: Command output showing how to list and view composite resources using kubectl get composite command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\nNAME                    SYNCED   READY   COMPOSITION         AGE\nmy-composite-resource   True     True    my-composition      4s\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provider Authentication\nDESCRIPTION: YAML configuration to create a ProviderConfig that connects Azure credentials with the Crossplane provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: azure.upbound.io/v1beta1\nmetadata:\n  name: default\nkind: ProviderConfig\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: azure-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Validating Resources Against Provider Schema\nDESCRIPTION: This command validates a managed resource against a provider's schema by specifying both the provider definition and the managed resource YAML files as input.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta validate provider.yaml managedResource.yaml\n```\n\n----------------------------------------\n\nTITLE: Investigating Configuration Dependency Issues with kubectl\nDESCRIPTION: Command and output showing how to use kubectl describe to troubleshoot Configuration package dependency issues, displaying events and warning messages.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe configurationrevision\nName:         platform-ref-aws-a30ad655c769\nAPI Version:  pkg.crossplane.io/v1\nKind:         ConfigurationRevision\n# Removed for brevity\nSpec:\n  Desired State:                  Active\n  Image:                          xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0\n  Revision:                       1\nStatus:\n  Conditions:\n    Last Transition Time:  2023-10-06T20:08:14Z\n    Reason:                UnhealthyPackageRevision\n    Status:                False\n    Type:                  Healthy\n  Controller Ref:\n    Name:\nEvents:\n  Type     Reason       Age                From                                              Message\n  ----     ------       ----               ----                                              -------\n  Warning  LintPackage  29s (x2 over 29s)  packages/configurationrevision.pkg.crossplane.io  incompatible Crossplane version: package isn't compatible with Crossplane version (v1.12.0)\n```\n\n----------------------------------------\n\nTITLE: Provisioning PostgreSQL CloudSQLInstance on GCP with Crossplane\nDESCRIPTION: Creates a PostgreSQL database instance on GCP Cloud SQL using Crossplane's CloudSQLInstance resource. Specifies database version, region, instance tier, and disk configuration, and sets up a connection secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: database.gcp.crossplane.io/v1beta1\nkind: CloudSQLInstance\nmetadata:\n  name: postgres-vault-demo\nspec:\n  forProvider:\n    databaseVersion: POSTGRES_12\n    region: us-central1\n    settings:\n      tier: db-custom-1-3840\n      dataDiskType: PD_SSD\n      dataDiskSizeGb: 10\n  writeConnectionSecretToRef:\n    namespace: crossplane-system\n    name: cloudsqlpostgresql-conn\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Using MatchInteger Readiness Check in Crossplane Composition YAML\nDESCRIPTION: This snippet illustrates how to use the 'MatchInteger' type for a readiness check in a Crossplane Composition. It verifies if a specific field in the resource matches an exact integer value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchInteger\n      fieldPath: status.atProvider.state\n      matchInteger: 4\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Pod Status During Initialization\nDESCRIPTION: Shell command to check the status of Crossplane pods in the crossplane-system namespace during the initialization phase, showing the Init container running.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/pods.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS     RESTARTS   AGE\ncrossplane-9f6d5cd7b-r9j8w                 0/1     Init:0/1   0          6s\n```\n\n----------------------------------------\n\nTITLE: Checking Configuration Health Status\nDESCRIPTION: This shell command demonstrates how to check the health status of a Configuration using kubectl. It shows an example where the Configuration is installed but not healthy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configuration\nNAME               INSTALLED   HEALTHY   PACKAGE                                           AGE\nplatform-ref-aws   True        False     xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0   71s\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Resolution for Provider Installation\nDESCRIPTION: This YAML enables the skipDependencyResolution option for a Provider, instructing Crossplane to ignore any dependencies listed in the Provider package during installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  skipDependencyResolution: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: INI format configuration file containing AWS access credentials for provider authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-managed-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = $@<aws_access_key>$@\naws_secret_access_key = $@<aws_secret_key>$@\n```\n\n----------------------------------------\n\nTITLE: Enabling Real-Time Compositions in Crossplane Deployment\nDESCRIPTION: YAML configuration for editing the Crossplane deployment to enable real-time compositions, an alpha feature that watches composed resources via Kubernetes watches instead of polling.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/pods.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --enable-realtime-compositions\n```\n\n----------------------------------------\n\nTITLE: Checking Configuration Health Status\nDESCRIPTION: This shell command demonstrates how to check the health status of a Configuration package. It shows an example where the HEALTHY status is False.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configuration\nNAME               INSTALLED   HEALTHY   PACKAGE                                           AGE\nplatform-ref-aws   True        False     xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0   71s\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Secrets for Composed Resources in YAML\nDESCRIPTION: This YAML snippet shows how to configure connection secret storage for individual composed resources within a Composition. It uses the writeConnectionSecretToRef field to specify the namespace and name for the secret object of each resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Patch and Transform Function\nDESCRIPTION: This YAML snippet installs the patch-and-transform function required for the Composition. It defines a Crossplane Function resource that references the function package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane CRDs in Kubernetes\nDESCRIPTION: Shell command and output showing the Custom Resource Definitions (CRDs) installed by Crossplane in a Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n❯ kubectl get crd\nNAME                                                    \ncompositeresourcedefinitions.apiextensions.crossplane.io\ncompositionrevisions.apiextensions.crossplane.io        \ncompositions.apiextensions.crossplane.io                \nconfigurationrevisions.pkg.crossplane.io                \nconfigurations.pkg.crossplane.io                        \ncontrollerconfigs.pkg.crossplane.io                     \ndeploymentruntimeconfigs.pkg.crossplane.io              \nenvironmentconfigs.apiextensions.crossplane.io          \nfunctionrevisions.pkg.crossplane.io                     \nfunctions.pkg.crossplane.io                             \nlocks.pkg.crossplane.io                                 \nproviderrevisions.pkg.crossplane.io                     \nproviders.pkg.crossplane.io                             \nstoreconfigs.secrets.crossplane.io                      \nusages.apiextensions.crossplane.io\n```\n\n----------------------------------------\n\nTITLE: FromEnvironmentFieldPath Patch Example\nDESCRIPTION: Demonstrates using FromEnvironmentFieldPath to apply values from the environment to a composed resource. This example shows applying an environment location value as the region.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n    patches:\n    - type: FromEnvironmentFieldPath\n      fromFieldPath: locations.eu\n      toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Deleting the Managed S3 Bucket Resource\nDESCRIPTION: Removes the S3 bucket that was created by Crossplane. This ensures cleanup of AWS resources before shutting down the Kubernetes cluster to prevent lingering resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete bucket crossplane-bucket-hhdzh\n```\n\n----------------------------------------\n\nTITLE: Using PatchSets to Reuse Patches\nDESCRIPTION: Example of defining and using a PatchSet to apply the same patch to multiple resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\npatchSets:\n- name: my-patchset\n  patches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: spec.forProvider.region\nresources:\n- name: bucket1\n  base:\n    # Removed for brevity\n  patches:\n    - type: PatchSet\n      patchSetName: my-patchset\n- name: bucket2\n  base:\n    # Removed for brevity\n  patches:\n    - type: PatchSet\n      patchSetName: my-patchset\n```\n\n----------------------------------------\n\nTITLE: Verifying S3 Bucket Creation with kubectl\nDESCRIPTION: This shell command checks the status of S3 buckets created through Crossplane in the Kubernetes cluster. It displays the bucket names, readiness status, and synchronization status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get buckets\n```\n\n----------------------------------------\n\nTITLE: Example XBucket Composite Resource in YAML\nDESCRIPTION: An example of a composite resource (XBucket) that Crossplane observes and sends to composition functions as part of the observed state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBucket\nmetadata:\n  name: example-render\nspec:\n  bucketRegion: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane Webhooks Service in Kubernetes YAML\nDESCRIPTION: This snippet defines a Kubernetes Service for Crossplane webhooks. It exposes port 9443 for TCP traffic and selects pods with the 'app: crossplane' and 'release: crossplane' labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: crossplane-webhooks\n  namespace: default\n  labels:\n    app: crossplane\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  selector:\n    app: crossplane\n    release: crossplane\n  ports:\n  - protocol: TCP\n    port: 9443\n    targetPort: 9443\n```\n\n----------------------------------------\n\nTITLE: Selecting Composition Revision by Labels in Crossplane\nDESCRIPTION: YAML configuration showing how to select Composition revisions using label matching.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionRevisionSelector:\n    matchLabels:\n      channel: dev\n```\n\n----------------------------------------\n\nTITLE: Describing CompositeResourceDefinition Status in Crossplane\nDESCRIPTION: Uses kubectl to describe a CompositeResourceDefinition, with focus on viewing its status conditions that indicate the current state of the XRD.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe xrd\nName:         xpostgresqlinstances.database.starter.org\nAPI Version:  apiextensions.crossplane.io/v1\nKind:         CompositeResourceDefinition\n# Removed for brevity\nStatus:\n  Conditions:\n    Reason:                WatchingCompositeResource\n    Status:                True\n    Type:                  Established\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Details for Resource Secrets\nDESCRIPTION: Shows how to specify which connection secret keys should be included in the composite resource secret using connectionDetails\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/connection-details.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n          - name: password\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: password\n          - name: key\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.secret\n          - name: smtp\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.ses_smtp_password_v4\n```\n\n----------------------------------------\n\nTITLE: Converting Composition to Pipeline Function with Crossplane beta convert\nDESCRIPTION: Example of using the crossplane beta convert command to convert an old Composition to a new pipeline function Composition, specifying input, output, and function name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta convert pipeline-composition oldComposition.yaml -o newComposition.yaml -f patchFunctionName\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Composition Function in Go\nDESCRIPTION: Defines the basic structure of a Crossplane composition function with a RunFunction method that processes an input request and generates S3 bucket resources\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n\tf.log.Info(\"Running Function\", \"tag\", req.GetMeta().GetTag())\n\n\trsp := response.To(req, response.DefaultTTL)\n\n\tin := &v1beta1.Input{}\n\tif err := request.GetInput(req, in); err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get Function input from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\tresponse.Normalf(rsp, \"I was run with input %q\", in.Example)\n\treturn rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Composition Reference for a Composite Resource\nDESCRIPTION: This example shows how to explicitly specify which Composition a composite resource should use by setting the compositionRef field with the name of the desired Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionRef:\n    name: my-other-composition\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Verifying Composition Revisions in Crossplane\nDESCRIPTION: Lists all CompositionRevisions showing their revision numbers and channel labels. This helps track which revisions exist and what environment they're associated with.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevisions -o=\"custom-columns=NAME:.metadata.name,REVISION:.spec.revision,CHANNEL:.metadata.labels.channel\"\n```\n\n----------------------------------------\n\nTITLE: Defining Composition Type Reference in YAML\nDESCRIPTION: Specifies the composition type reference that matches with the XRD group and kind.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: my-composition\nspec:\n  compositeTypeRef:\n    apiVersion: example.org/v1alpha1\n    kind: xMyDatabase\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Pausing Composite Resources in YAML\nDESCRIPTION: This snippet demonstrates how to pause a composite resource by applying the crossplane.io/paused annotation. A paused resource doesn't check or make changes to its external resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\n  annotations:\n    crossplane.io/paused: \"true\"\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret from Azure Credentials\nDESCRIPTION: Command to create a Kubernetes secret containing Azure service principal credentials. This secret will be referenced by the ProviderConfig to authenticate with Azure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric azure-secret \\\n-n crossplane-system \\\n--from-file=creds=./azure-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Defining a Function for Composition Rendering in YAML\nDESCRIPTION: This YAML snippet defines a Function in Crossplane that is referenced in the Composition pipeline. This Function is essential for transforming resources during the composition process.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Viewing Managed Resources Created by a Claim\nDESCRIPTION: Lists all the managed resources that were created as a result of the namespace-scoped Claim, showing the full resource hierarchy from Claim to underlying cloud resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\nNAME                                                          READY   SYNCED   EXTERNAL-NAME                  AGE\nresourcegroup.azure.upbound.io/my-namespaced-vm-r7gdr-cvzw6   True    True     my-namespaced-vm-r7gdr-cvzw6   5m51s\n\nNAME                                                                        READY   SYNCED   EXTERNAL-NAME                  AGE\nlinuxvirtualmachine.compute.azure.upbound.io/my-namespaced-vm-r7gdr-vrbgb   True    True     my-namespaced-vm-r7gdr-vrbgb   5m51s\n\nNAME                                                                     READY   SYNCED   EXTERNAL-NAME                  AGE\nnetworkinterface.network.azure.upbound.io/my-namespaced-vm-r7gdr-hwrb8   True    True     my-namespaced-vm-r7gdr-hwrb8   5m51s\n\nNAME                                                           READY   SYNCED   EXTERNAL-NAME                  AGE\nsubnet.network.azure.upbound.io/my-namespaced-vm-r7gdr-gh468   True    True     my-namespaced-vm-r7gdr-gh468   5m51s\n\nNAME                                                                   READY   SYNCED   EXTERNAL-NAME                  AGE\nvirtualnetwork.network.azure.upbound.io/my-namespaced-vm-r7gdr-5qhz7   True    True     my-namespaced-vm-r7gdr-5qhz7   5m51s\n```\n\n----------------------------------------\n\nTITLE: Publishing Connection Details to External Secret Store - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a composite resource to publish connection secrets to an external secrets store by setting the 'publishConnectionDetailsTo' attribute. The resource is identified as 'my-external-secret-store'. The alpha feature allows integration with external systems for secret management.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  publishConnectionDetailsTo:\n    name: my-external-secret-store\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Listing Provider Revisions Status\nDESCRIPTION: Shell command and output showing how to list all provider revisions with their current status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providerrevisions\nNAME                                       HEALTHY   REVISION   IMAGE                                                    STATE      DEP-FOUND   DEP-INSTALLED   AGE\nprovider-aws-s3-dbc7f981d81f               True      1          xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1           Active     1           1               10d\nprovider-nop-552a394a8acc                  True      2          xpkg.crossplane.io/crossplane-contrib/provider-nop:v0.3.0   Active                                 11d\nprovider-nop-7e62d2a1a709                  True      1          xpkg.crossplane.io/crossplane-contrib/provider-nop:v0.2.0   Inactive                               13d\ncrossplane-contrib-provider-family-aws-710d8cfe9f53   True      1          xpkg.crossplane.io/crossplane-contrib/provider-family-aws:v1.21.1        Active                                 10d\n```\n\n----------------------------------------\n\nTITLE: Sample Configuration Package Structure\nDESCRIPTION: Shows the basic structure of a configuration package definition file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: meta.pkg.crossplane.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: test-configuration\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Validating Against Schema Directory\nDESCRIPTION: Example of validating resources against a directory of schemas using the crossplane beta validate command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta validate schema resources.yaml\n[x] schema validation error example.crossplane.io/v1beta1, Kind=XR, example : status.conditions[0].lastTransitionTime: Invalid value: \"null\": status.conditions[0].lastTransitionTime in body must be of type string: \"null\"\n[x] CEL validation error example.crossplane.io/v1beta1, Kind=XR, example : spec: Invalid value: \"object\": no such key: minReplicas evaluating rule: replicas should be greater than or equal to minReplicas.\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-1 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-1 validated successfully\nTotal 5 resources: 0 missing schemas, 4 success cases, 1 failure cases\n```\n\n----------------------------------------\n\nTITLE: Setting Composition Update Policy in Crossplane\nDESCRIPTION: YAML configuration showing how to set a manual composition update policy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionUpdatePolicy: Manual\n```\n\n----------------------------------------\n\nTITLE: Visualizing End-to-End Server-Side Apply Flow in Crossplane\nDESCRIPTION: A Mermaid diagram showing how server-side apply propagates changes from claims through composite resources to composed resources, illustrating the end-to-end flow of field updates when using both claim server-side apply and composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/server-side-apply.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  A(Claim) -- claim server-side apply --> B(Composite Resource)\n  B -- function server-side apply --> C(Composed Resource)\n  B -- function server-side apply --> D(Composed Resource)\n  B -- function server-side apply --> E(Composed Resource)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vault Root Token\nDESCRIPTION: Extracts the root token from the cluster keys file for initial Vault authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncat cluster-keys.json | jq -r \".root_token\"\n```\n\n----------------------------------------\n\nTITLE: Multi-Replica Runtime Configuration YAML\nDESCRIPTION: YAML configuration example showing how to configure multiple replicas using DeploymentRuntimeConfig.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: multi-replicas\nspec:\n  deploymentTemplate:\n    spec:\n      replicas: 2\n      selector: {}\n      template: {}\n```\n\n----------------------------------------\n\nTITLE: Replaying Blocked Deletion with Usage (YAML)\nDESCRIPTION: This snippet shows how to configure a Usage resource to replay a blocked deletion attempt by setting the replayDeletion field to true.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/usages.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1alpha1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  replayDeletion: true\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n      name: my-cluster\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n      name: my-prometheus-chart\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider with DeploymentRuntimeConfig in YAML\nDESCRIPTION: Demonstrates how to configure a Crossplane Provider using DeploymentRuntimeConfig to enable the external secret stores alpha feature. This example adds the '--enable-external-secret-stores' argument to the controller.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-iam\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-iam:v1.12.1\n  runtimeConfigRef:\n    name: enable-ess\n---\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: enable-ess\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      template:\n        spec:\n          containers:\n            - name: package-runtime\n              args:\n                - --enable-external-secret-stores\n```\n\n----------------------------------------\n\nTITLE: Creating an EnvironmentConfig in YAML\nDESCRIPTION: This snippet demonstrates how to create an EnvironmentConfig with various data types in its 'data' field, including nested structures and lists.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/environment-configs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: EnvironmentConfig\nmetadata:\n  name: example-environment\ndata:\n  locations:\n    us: us-east-2\n    eu: eu-north-1\n  key1: value1\n  key2: value2\n  key3:\n    - item1\n    - item2\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Composite Resources\nDESCRIPTION: This shell command retrieves and displays the list of Crossplane composite resources created by Claims.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Registry Authentication for Configuration Packages\nDESCRIPTION: YAML configuration for specifying package pull secrets to authenticate with a private registry when downloading a Crossplane Configuration package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  packagePullSecrets: \n    - name: example-secret\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Usage for Deletion Ordering\nDESCRIPTION: YAML configuration demonstrating how to ensure proper deletion ordering between cluster and Prometheus chart resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/usages.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: protection.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  namespace: default\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.m.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n      name: my-cluster\n  by:\n    apiVersion: helm.m.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n      name: my-prometheus-chart\n```\n\n----------------------------------------\n\nTITLE: Viewing Kubernetes Secrets After Applying a Claim\nDESCRIPTION: This shell command shows how to view the Kubernetes secrets created after applying a Claim. It displays three secret objects: two from individual resources and one composite secret created by Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secrets -A\nNAMESPACE           NAME                                   TYPE                                DATA   AGE\ndocs                key1-secret                            connection.crossplane.io/v1alpha1   4      4s\ndocs                key2-secret                            connection.crossplane.io/v1alpha1   4      4s\nother-namespace     70975471-c44f-4f6d-bde6-6bbdc9de1eb8   connection.crossplane.io/v1alpha1   0      6s\n```\n\n----------------------------------------\n\nTITLE: Publishing Secrets to External Store with configRef\nDESCRIPTION: Example of configuring a managed resource to publish connection details to an external secrets store like HashiCorp Vault using a StoreConfig reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rds.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n  # Removed for brevity\n  publishConnectionDetailsTo:\n    name: rds-kubernetes-secret\n    configRef: \n      name: my-vault-storeconfig\n```\n\n----------------------------------------\n\nTITLE: Setting None Readiness Check in Crossplane Resources\nDESCRIPTION: This YAML snippet shows how to use the None readiness check type, which considers a composed resource ready as soon as it's created without waiting for any other conditions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: None\n```\n\n----------------------------------------\n\nTITLE: Updating AWS S3 Provider with xpkg update in Crossplane CLI\nDESCRIPTION: Example of using the crossplane xpkg update command to update the AWS S3 provider package to a specific version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg update provider xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Defining Function in YAML for Crossplane\nDESCRIPTION: This YAML file defines a Function for Crossplane, specifying the function to be used in the Composition's pipeline, with a development runtime annotation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-xbuckets\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  # The CLI ignores this package when using the Development runtime.\n  # You can set it to any value.\n  package: xpkg.crossplane.io/negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Installing Provider with Ignored Crossplane Constraints in YAML\nDESCRIPTION: This YAML snippet demonstrates how to install a Provider package into an unsupported Crossplane version by setting 'ignoreCrossplaneConstraints: true' in the Provider spec.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  ignoreCrossplaneConstraints: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Restricting Secret Keys in Composite Resource Definition\nDESCRIPTION: This YAML snippet demonstrates how to restrict which secret keys are included in the combined secret and provided to a Claim using a Composite Resource Definition (XRD). It specifies a list of allowed connection secret keys.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CompositeResourceDefinition\nspec:\n  # Removed for brevity.\n  connectionSecretKeys:\n    - username\n    - password\n    - key2-user\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Crossplane via Helm\nDESCRIPTION: Command to uninstall the Crossplane Helm release from the cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/uninstall.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhelm uninstall crossplane --namespace crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Chart Values for CA Bundle\nDESCRIPTION: This YAML snippet shows an example of how to set the registryCaBundleConfig parameters in a Helm values override file. It specifies the name of the ConfigMap and the key containing the CA bundle.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/self-signed-ca-certs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nregistryCaBundleConfig:\n  name: ca-bundle-config\n  key: ca-bundle\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Runtime for Crossplane Functions\nDESCRIPTION: This YAML snippet demonstrates how to configure a Function to use the Development runtime by adding the render.crossplane.io/runtime annotation. This allows testing locally developed functions without using Docker.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Listing Composite Resources with kubectl\nDESCRIPTION: This shell command shows how to list all composite resources in the cluster, displaying their sync status, readiness, associated composition, and age.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\nNAME                    SYNCED   READY   COMPOSITION         AGE\nmy-composite-resource   True     True    my-composition      4s\n```\n\n----------------------------------------\n\nTITLE: Installing AWS DynamoDB Provider Package\nDESCRIPTION: Kubernetes manifest that installs the AWS DynamoDB provider package in Crossplane. This provider enables Crossplane to create and manage DynamoDB tables through Kubernetes APIs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-dynamodb\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-dynamodb:v1.21.1\nEOF\n```\n\n----------------------------------------\n\nTITLE: Limiting and Sorting EnvironmentConfig Selection Results\nDESCRIPTION: YAML configuration showing how to limit the number of returned EnvironmentConfigs with maxMatch and sort them using sortByFieldPath in a Multiple mode selector.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/environment-configs.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            maxMatch: 4\n            sortByFieldPath: metadata.annotations[sort.by/weight]\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Provider with Ignored Crossplane Constraints in YAML\nDESCRIPTION: This YAML snippet demonstrates how to install a Provider package while ignoring Crossplane version constraints. It sets the 'ignoreCrossplaneConstraints' field to true in the Provider spec.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  ignoreCrossplaneConstraints: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Go Composition Function\nDESCRIPTION: This code snippet shows a unit test for a Crossplane composition function written in Go. It tests the function's ability to add two S3 buckets to the desired composed resources based on input from a composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\t\"github.com/google/go-cmp/cmp/cmpopts\"\n\t\"google.golang.org/protobuf/testing/protocmp\"\n\t\"google.golang.org/protobuf/types/known/durationpb\"\n\n\t\"github.com/crossplane/crossplane-runtime/pkg/logging\"\n\n\tfnv1 \"github.com/crossplane/function-sdk-go/proto/v1\"\n\t\"github.com/crossplane/function-sdk-go/resource\"\n)\n\nfunc TestRunFunction(t *testing.T) {\n\ttype args struct {\n\t\tctx context.Context\n\t\treq *fnv1.RunFunctionRequest\n\t}\n\ttype want struct {\n\t\trsp *fnv1.RunFunctionResponse\n\t\terr error\n\t}\n\n\tcases := map[string]struct {\n\t\treason string\n\t\targs   args\n\t\twant   want\n\t}{\n\t\t\"AddTwoBuckets\": {\n\t\t\treason: \"The Function should add two buckets to the desired composed resources\",\n\t\t\targs: args{\n\t\t\t\treq: &fnv1.RunFunctionRequest{\n\t\t\t\t\tObserved: &fnv1.State{\n\t\t\t\t\t\tComposite: &fnv1.Resource{\n\t\t\t\t\t\t\t// MustStructJSON is a handy way to provide mock\n\t\t\t\t\t\t\t// resources.\n\t\t\t\t\t\t\tResource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"example.crossplane.io/v1alpha1\",\n\t\t\t\t\t\t\t\t\"kind\": \"XBuckets\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"name\": \"test\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\t\t\t\t\t\"names\": [\n\t\t\t\t\t\t\t\t\t\t\"test-bucket-a\",\n\t\t\t\t\t\t\t\t\t\t\"test-bucket-b\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\twant: want{\n\t\t\t\trsp: &fnv1.RunFunctionResponse{\n\t\t\t\t\tMeta: &fnv1.ResponseMeta{Ttl: durationpb.New(60 * time.Second)},\n\t\t\t\t\tDesired: &fnv1.State{\n\t\t\t\t\t\tResources: map[string]*fnv1.Resource{\n\t\t\t\t\t\t\t\"xbuckets-test-bucket-a\": {Resource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n\t\t\t\t\t\t\t\t\"kind\": \"Bucket\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"annotations\": {\n\t\t\t\t\t\t\t\t\t\t\"crossplane.io/external-name\": \"test-bucket-a\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"forProvider\": {\n\t\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\"observedGeneration\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`)},\n\t\t\t\t\t\t\t\"xbuckets-test-bucket-b\": {Resource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n\t\t\t\t\t\t\t\t\"kind\": \"Bucket\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"annotations\": {\n\t\t\t\t\t\t\t\t\t\t\"crossplane.io/external-name\": \"test-bucket-b\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"forProvider\": {\n\t\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\"observedGeneration\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`)},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tConditions: []*fnv1.Condition{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tType:   \"FunctionSuccess\",\n\t\t\t\t\t\t\tStatus: fnv1.Status_STATUS_CONDITION_TRUE,\n\t\t\t\t\t\t\tReason: \"Success\",\n\t\t\t\t\t\t\tTarget: fnv1.Target_TARGET_COMPOSITE.Enum(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tf := &Function{log: logging.NewNopLogger()}\n\t\t\trsp, err := f.RunFunction(tc.args.ctx, tc.args.req)\n\n\t\t\tif diff := cmp.Diff(tc.want.rsp, rsp, protocmp.Transform()); diff != \"\" {\n\t\t\t\tt.Errorf(\"%s\\nf.RunFunction(...): -want rsp, +got rsp:\\n%s\", tc.reason, diff)\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(tc.want.err, err, cmpopts.EquateErrors()); diff != \"\" {\n\t\t\t\tt.Errorf(\"%s\\nf.RunFunction(...): -want err, +got err:\\n%s\", tc.reason, diff)\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Composition Revision Reference in YAML\nDESCRIPTION: Demonstrates how to reference a specific composition revision by name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionUpdatePolicy: Manual\n  compositionRevisionRef:\n    name: my-composition-b5aa1eb\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Managing Conflicting Secret Keys in Composition\nDESCRIPTION: Demonstrates how to handle resources with potentially conflicting secret keys by using unique connection detail names\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/connection-details.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n      - name: key2\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2\n        connectionDetails:\n          - name: key2-user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n```\n\n----------------------------------------\n\nTITLE: Defining Claim for Connection Details in Crossplane\nDESCRIPTION: This YAML snippet defines a Claim that requests an instance of the composite resource and specifies where to write the connection secret. It includes the API version, kind, and the name of the secret to be created.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: SecretTest\nmetadata:\n  name: test-secrets\n  namespace: default\nspec:\n  writeConnectionSecretToRef:\n    name: my-access-key-secret\n```\n\n----------------------------------------\n\nTITLE: Creating XR with Composition Revision Selector for Staging Channel\nDESCRIPTION: Defines a MyVPC Composite Resource with a composition revision selector targeting the staging channel\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  name: vpc-staging\nspec:\n  id: vpc-staging\n  compositionRevisionSelector:\n    matchLabels:\n      channel: staging\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Storage Bucket Resource\nDESCRIPTION: Manifest for creating a GCP storage bucket as a managed resource through Crossplane. Specifies bucket configuration including location and provider reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: storage.gcp.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  generateName: crossplane-bucket-\n  labels:\n    docs.crossplane.io/example: provider-gcp\nspec:\n  forProvider:\n    location: US\n  providerConfigRef:\n    name: default\n```\n\n----------------------------------------\n\nTITLE: Crossplane ReconcilePaused Condition Example\nDESCRIPTION: Shows the condition structure when a managed resource has been paused via annotation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Synced\n  Status:                False\n  Reason:                ReconcilePaused\n```\n\n----------------------------------------\n\nTITLE: Setting Composition Update Policy\nDESCRIPTION: Example of setting the defaultCompositionUpdatePolicy to Manual in an XRD to control how composition revisions are handled.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositionUpdatePolicy: Manual\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane ESS Plugin for Vault\nDESCRIPTION: Installs the Crossplane ESS Plugin for Vault using Helm with the configured annotations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install ess-plugin-vault oci://xpkg.crossplane.io/crossplane-contrib/ess-plugin-vault --namespace crossplane-system -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Composition with Function Input Configuration in YAML\nDESCRIPTION: An example Composition resource showing how input can be provided to a function in the pipeline. This example configures the patch-and-transform function with resources and patch rules.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-render\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n        patches:\n        - type: FromCompositeFieldPath\n          fromFieldPath: spec.bucketRegion\n          toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Pull Secrets for Crossplane Provider\nDESCRIPTION: This YAML snippet shows how to configure package pull secrets for a Crossplane provider to authenticate with a private registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  packagePullSecrets: \n    - name: example-secret\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Provider Installation Status Check\nDESCRIPTION: Examples showing provider status during and after installation completion.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\nNAME                              INSTALLED   HEALTHY   PACKAGE                                                   AGE\ncrossplane-contrib-provider-aws   True        Unknown   xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0   63s\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\nNAME                              INSTALLED   HEALTHY   PACKAGE                                                   AGE\ncrossplane-contrib-provider-aws   True        True      xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0   88s\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Machine Resource with Custom API\nDESCRIPTION: Creates a VirtualMachine resource using Crossplane's custom API with specified location in EU.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: compute.example.com/v1alpha1\nkind: VirtualMachine\nmetadata:\n  name: my-vm\nspec:\n  location: \"EU\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Configuration Metadata\nDESCRIPTION: Example of a crossplane.yaml file that defines configuration metadata, dependencies, and version requirements.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n$ cat crossplane.yaml\napiVersion: meta.pkg.crossplane.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: test-configuration\nspec:\n  dependsOn:\n    - provider: xpkg.crossplane.io/crossplane-contrib/provider-aws\n      version: \">=v0.36.0\"\n  crossplane:\n    version: \">=v1.12.1-0\"\n```\n\n----------------------------------------\n\nTITLE: Converting Composition to Pipeline Function\nDESCRIPTION: Command to convert an old Composition using patch and transforms to a pipeline function-based Composition with a custom function name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta convert pipeline-composition oldComposition.yaml -o newComposition.yaml -f patchFunctionName\n```\n\n----------------------------------------\n\nTITLE: Checking for False Boolean Values with MatchFalse in Crossplane\nDESCRIPTION: Demonstrates how to use MatchFalse to consider a resource ready when a specified field's value is false. This example checks if status.atProvider.manifest.status.pending is false.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchFalse\n      fieldPath: status.atProvider.manifest.status.pending\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane RBAC Manager Deployment in Kubernetes YAML\nDESCRIPTION: A Kubernetes Deployment manifest that deploys the Crossplane RBAC Manager. The deployment includes init containers and main containers with security context settings and resource limitations. This is part of the core Crossplane infrastructure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: crossplane/templates/rbac-manager-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: crossplane-rbac-manager\n  namespace: default\n  labels:\n    app: crossplane-rbac-manager\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: crossplane-rbac-manager\n      release: crossplane\n  strategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: crossplane-rbac-manager\n        release: crossplane\n        helm.sh/chart: crossplane-1.15.0\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: cloud-infrastructure-controller\n        app.kubernetes.io/part-of: crossplane\n        app.kubernetes.io/name: crossplane\n        app.kubernetes.io/instance: crossplane\n        app.kubernetes.io/version: \"1.15.0\"\n    spec:\n      serviceAccountName: rbac-manager\n      initContainers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - rbac\n        - init\n        imagePullPolicy: IfNotPresent\n        name: crossplane-init\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.cpu\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.memory\n      containers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - rbac\n        - start\n        - --provider-clusterrole=crossplane:allowed-provider-permissions\n        imagePullPolicy: IfNotPresent\n        name: crossplane\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.cpu\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.memory\n          - name: LEADER_ELECTION\n            value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Transformation in Crossplane\nDESCRIPTION: Demonstrates how to use regular expression type transformation to extract parts of input matching a regex pattern. Uses group matching to capture specific parts of the match.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"euRegion\"]\n    transforms:\n      - type: string\n        string:\n          type: Regexp\n          regexp:\n            match: '^eu-(.*)-'\n            group: 1\n```\n\n----------------------------------------\n\nTITLE: Checking Status of NoSQL Resource\nDESCRIPTION: A shell command to verify that the NoSQL resource has been successfully created and is ready. The SYNCED and READY columns indicate the provisioning status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nosql\nNAME                SYNCED   READY   COMPOSITION          AGE\nmy-nosql-database   True     True    dynamo-with-bucket   14s\n```\n\n----------------------------------------\n\nTITLE: Sample XR Resource with Invalid Replica Configuration\nDESCRIPTION: Example of an XR resource that violates the CEL validation rules by specifying a replicas value outside the allowed range.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1beta1\nkind: XR\nmetadata:\n  name: example\nspec:\n  replicas: 49\n  minReplicas: 1\n  maxReplicas: 30\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Configuration Revisions\nDESCRIPTION: This shell command shows how to list and view Crossplane Configuration revisions using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configurationrevisions\n```\n\n----------------------------------------\n\nTITLE: Viewing Managed Resources Created by the Claim\nDESCRIPTION: A shell command to view the managed resources (AWS resources) that were created as a result of the NoSQLClaim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\nNAME                                                          READY   SYNCED   EXTERNAL-NAME                   AGE\ntable.dynamodb.aws.upbound.io/my-nosql-database-t9qrw-dcpwv   True    True     my-nosql-database-t9qrw-dcpwv   116s\n\nNAME                                                     READY   SYNCED   EXTERNAL-NAME                   AGE\nbucket.s3.aws.upbound.io/my-nosql-database-t9qrw-g98lv   True    True     my-nosql-database-t9qrw-g98lv   117s\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Claim in Crossplane using kubectl\nDESCRIPTION: This shell command shows how to inspect a Claim using kubectl describe. The output reveals the automatically created composite resource reference that Crossplane has linked to this Claim, found in the Resource Ref section.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/claims.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe database.example.org/my-claimed-database\nName:         my-claimed-database\nAPI Version:  example.org/v1alpha1\nKind:         database\nSpec:\n  Resource Ref:\n    API Version:  example.org/v1alpha1\n    Kind:         XMyDatabase\n    Name:         my-claimed-database-rr4ll\n# Removed for brevity.\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource Definition Schema\nDESCRIPTION: Example of a Composite Resource Definition that specifies the API group, kind, and schema validation for custom resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/introduction.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource Definition (XRD)\nspec:\n  group: test.example.org\n  names:\n    kind: MyComputeResource\n  versions:\n  - name: v1alpha1\n    schema:\n      # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: StoreConfig for External Secret Stores\nDESCRIPTION: Basic structure of a StoreConfig resource used to configure an external secrets store like HashiCorp Vault for storing connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: my-vault-storeconfig\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Service Account\nDESCRIPTION: Script to create and configure a GCP service account with CloudSQL admin permissions\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nPROJECT_ID=my-project\nNEW_SA_NAME=test-service-account-name\n\nSA=\"${NEW_SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com\"\ngcloud iam service-accounts create $NEW_SA_NAME --project $PROJECT_ID\n\nSERVICE=\"sqladmin.googleapis.com\"\ngcloud services enable $SERVICE --project $PROJECT_ID\n\nROLE=\"roles/cloudsql.admin\"\ngcloud projects add-iam-policy-binding --role=\"$ROLE\" $PROJECT_ID --member \"serviceAccount:$SA\"\n\ngcloud iam service-accounts keys create creds.json --project $PROJECT_ID --iam-account $SA\n```\n\n----------------------------------------\n\nTITLE: Defining Composition for Connection Details in Crossplane\nDESCRIPTION: This YAML snippet defines a Composition that creates AWS IAM resources and specifies how to handle their connection details. It includes creating AccessKeys and Users, and defines how to map and transform connection secret keys.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: xsecrettest.example.org\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  compositeTypeRef:\n    apiVersion: example.org/v1alpha1\n    kind: XSecretTest\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              userSelector:\n                matchControllerRef: true\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n        - name: user\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: username\n        - name: password\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: password\n        - name: key\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: attribute.secret\n        - name: smtp\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: attribute.ses_smtp_password_v4\n        patches:\n          - fromFieldPath: \"metadata.uid\"\n            toFieldPath: \"spec.writeConnectionSecretToRef.name\"\n            transforms:\n              - type: string\n                string:\n                  type: Format\n                  fmt: \"%s-secret1\"\n      - name: user\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: User\n          spec:\n            forProvider: {}\n      - name: user2\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: User\n          metadata:\n            labels:\n              docs.crossplane.io: user\n          spec:\n            forProvider: {}\n      - name: key2\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              userSelector:\n                matchLabels:\n                  docs.crossplane.io: user\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2\n        connectionDetails:\n          - name: key2-user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n          - name: key2-password\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: password\n          - name: key2-secret\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.secret\n          - name: key2-smtp\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.ses_smtp_password_v4\n        patches:\n          - fromFieldPath: \"metadata.uid\"\n            toFieldPath: \"spec.writeConnectionSecretToRef.name\"\n            transforms:\n              - type: string\n                string:\n                  type: Format\n                  fmt: \"%s-secret2\"\n```\n\n----------------------------------------\n\nTITLE: Adding Labels and Annotations to Crossplane-generated Kubernetes Secrets\nDESCRIPTION: This YAML configuration demonstrates how to add custom labels and annotations to the Kubernetes Secret created by Crossplane for storing managed resource details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rds.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n  # Removed for brevity\n  publishConnectionDetailsTo:\n    name: rds-kubernetes-secret\n    metadata:\n      labels:\n        label-tag: label-value\n      annotations:\n        annotation-tag: annotation-value\n```\n\n----------------------------------------\n\nTITLE: Always Ready Resource in Crossplane Composition (YAML)\nDESCRIPTION: This snippet shows how to use the None readiness check type, which considers the composed resource ready as soon as it's created, without waiting for any other conditions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: None\n```\n\n----------------------------------------\n\nTITLE: Verifying Managed Resources in Crossplane\nDESCRIPTION: This shell command checks the status of managed resources created by Crossplane. It displays the readiness and synchronization status of Service Accounts and Service Account Keys.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Resource in YAML for Crossplane\nDESCRIPTION: This YAML file defines a composite resource (XR) for Crossplane, specifying an XBuckets resource with a region and multiple bucket names.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Tracking Method in Argo CD ConfigMap\nDESCRIPTION: Configures Argo CD to use annotation-based resource tracking for Crossplane objects by modifying the argocd-cm ConfigMap.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n  application.resourceTrackingMethod: annotation\n```\n\n----------------------------------------\n\nTITLE: Viewing a Secret with Renamed Keys to Avoid Conflicts\nDESCRIPTION: This shell command displays a connection secret with renamed keys to avoid conflicts, showing how both the original 'username' key and the renamed 'key2-user' key are included in the combined secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret -n other-namespace\nName:         b0dc71f8-2688-4ebc-818a-bbad6a2c4f9a\nNamespace:    other-namespace\n\nType:  connection.crossplane.io/v1alpha1\n\nData\n====\nusername:                        20 bytes\nkey2-user:                       20 bytes\n# Removed for brevity.\n```\n\n----------------------------------------\n\nTITLE: Checking for True Boolean Values with MatchTrue in Crossplane\nDESCRIPTION: Shows how to use MatchTrue to consider a resource ready when a specified field's value is true. This example checks if status.atProvider.manifest.status.ready is true.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchTrue\n      fieldPath: status.atProvider.manifest.status.ready\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane CLI via installation script\nDESCRIPTION: A shell command that downloads and executes the Crossplane installation script to automatically detect CPU architecture and install the latest stable release of the Crossplane CLI.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh\" | sh\n```\n\n----------------------------------------\n\nTITLE: ToCompositeFieldPath Patch in Crossplane YAML\nDESCRIPTION: Shows how to write data from a composed resource back to the composite resource using ToCompositeFieldPath patch. Example demonstrates copying a hostedZoneID to a label in the composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: ToCompositeFieldPath\n      fromFieldPath: status.atProvider.hostedZoneId\n      toFieldPath: metadata.labels['ZoneID']\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Helm\nDESCRIPTION: Commands to add the Crossplane Helm repository and install Crossplane in a dedicated namespace. This creates the foundation for building custom APIs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n&&\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Virtual Network\nDESCRIPTION: Kubernetes configuration to create an Azure Virtual Network as a managed resource using Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-azure.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: network.azure.upbound.io/v1beta1\nkind: VirtualNetwork\nmetadata:\n  name: crossplane-quickstart-network\nspec:\n  forProvider:\n    addressSpace:\n      - 10.0.0.0/16\n    location: \"Sweden Central\"\n    resourceGroupName: docs\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Resource Definition (XRD)\nDESCRIPTION: Complete YAML definition for creating a custom VirtualMachine API using Crossplane XRD.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: virtualmachines.compute.example.com\nspec:\n  group: compute.example.com\n  names:\n    kind: VirtualMachine\n    plural: virtualmachines\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              location:\n                type: string\n                oneOf:\n                  - pattern: '^EU$'\n                  - pattern: '^US$'\n            required:\n              - location\n    served: true\n    referenceable: true\n  claimNames:\n    kind: VirtualMachineClaim\n    plural: virtualmachineclaims\n```\n\n----------------------------------------\n\nTITLE: Checking Status of the NoSQLClaim\nDESCRIPTION: A shell command to verify that the NoSQLClaim has been successfully created in the specified namespace and is ready.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get claim -n crossplane-test\nNAME                SYNCED   READY   CONNECTION-SECRET   AGE\nmy-nosql-database   True     True                        17s\n```\n\n----------------------------------------\n\nTITLE: Selecting EnvironmentConfigs by Label in Crossplane\nDESCRIPTION: YAML configuration demonstrating how to select EnvironmentConfigs by label selectors, including static values and dynamic values retrieved from the composite resource fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/environment-configs.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector: \n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating PubSub Resource Using Custom API\nDESCRIPTION: Creates a cluster-scoped PubSub resource using the custom API to provision GCP resources defined in the Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: queue.example.com/v1alpha1\nkind: PubSub\nmetadata:\n  name: my-pubsub-queue\nspec:\n  location: \"US\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating an XR with Staging Channel Selector in Crossplane\nDESCRIPTION: Creates a Composite Resource (XR) called 'vpc-staging' with a compositionRevisionSelector that matches the label 'channel: staging'. This allows targeting a different composition revision for staging environments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  name: vpc-staging\nspec:\n  id: vpc-staging\n  compositionRevisionSelector:\n    matchLabels:\n      channel: staging\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Storage Provider\nDESCRIPTION: YAML configuration to install the GCP Storage provider in Crossplane\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-storage\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-storage:v1.12.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Secret with ImageConfig in YAML\nDESCRIPTION: Example of configuring an ImageConfig resource to inject pull secrets for registry authentication. This configuration applies to images with a specific registry prefix and references a Kubernetes secret for credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/image-configs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: ImageConfig\nmetadata:\n  name: acme-packages\nspec:\n  matchImages:\n    - type: Prefix\n      prefix: registry1.com/acme-co/\n  registry:\n    authentication:\n      pullSecretRef:\n        name: acme-registry-credentials\n```\n\n----------------------------------------\n\nTITLE: Listing Composite Resources with Kubectl Custom Columns\nDESCRIPTION: Retrieves composite resources with custom column output showing revision, sync status, and selector labels\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite -o=\"custom-columns=NAME:.metadata.name,SYNCED:.status.conditions[0].status,REVISION:.spec.compositionRevisionRef.name,POLICY:.spec.compositionUpdatePolicy,MATCHLABEL:.spec.compositionRevisionSelector.matchLabels\"\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Composition for a Composite Resource in YAML\nDESCRIPTION: This YAML snippet shows how to select a specific Composition for a composite resource to use by specifying the compositionRef in the resource's spec.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: MyDatabase\nmetadata:\n  namespace: default\n  name: my-composite-resource\nspec:\n  crossplane:\n    compositionRef:\n      name: my-other-composition\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Pushing Crossplane Package to Registry\nDESCRIPTION: Pushes a Crossplane package file to a package registry. The command allows specifying the organization, package name, and tag for the package being pushed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push <package>\n```\n\n----------------------------------------\n\nTITLE: Defining a Crossplane Composition with Connection Details\nDESCRIPTION: A YAML example of a Crossplane Composition that defines connection details for multiple resources. It specifies which secret keys to expose and how to generate secret names for AWS IAM resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/connection-details.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: xsecrettest.example.org\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  compositeTypeRef:\n    apiVersion: example.org/v1alpha1\n    kind: XSecretTest\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              userSelector:\n                matchControllerRef: true\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n        - name: user\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: username\n        - name: password\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: password\n        - name: key\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: attribute.secret\n        - name: smtp\n          type: FromConnectionSecretKey\n          fromConnectionSecretKey: attribute.ses_smtp_password_v4\n        patches:\n          - fromFieldPath: \"metadata.uid\"\n            toFieldPath: \"spec.writeConnectionSecretToRef.name\"\n            transforms:\n              - type: string\n                string:\n                  type: Format\n                  fmt: \"%s-secret1\"\n      - name: user\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: User\n          spec:\n            forProvider: {}\n      - name: user2\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: User\n          metadata:\n            labels:\n              docs.crossplane.io: user\n          spec:\n            forProvider: {}\n      - name: key2\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              userSelector:\n                matchLabels:\n                  docs.crossplane.io: user\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2\n        connectionDetails:\n          - name: key2-user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n          - name: key2-password\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: password\n          - name: key2-secret\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.secret\n          - name: key2-smtp\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.ses_smtp_password_v4\n        patches:\n          - fromFieldPath: \"metadata.uid\"\n            toFieldPath: \"spec.writeConnectionSecretToRef.name\"\n            transforms:\n              - type: string\n                string:\n                  type: Format\n                  fmt: \"%s-secret2\"\n```\n\n----------------------------------------\n\nTITLE: Multi-Replica Runtime Configuration in YAML\nDESCRIPTION: Example YAML configuration for setting multiple replicas in a DeploymentRuntimeConfig.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: multi-replicas\nspec:\n  deploymentTemplate:\n    spec:\n      replicas: 2\n      selector: {}\n      template: {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource with Default Update Policy\nDESCRIPTION: This YAML snippet creates a Composite Resource (XR) of kind MyVPC without specifying a compositionUpdatePolicy, which defaults to Automatic. This means the XR will automatically use the latest CompositionRevision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  name: vpc-auto\nspec:\n  id: vpc-auto\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Optional Labels in Crossplane Composition\nDESCRIPTION: This YAML snippet shows how to set default values for optional labels in a Crossplane Composition. It defines a default value first using a 'Value' selector, then defines an 'Optional' 'FromCompositeFieldPath' selector.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/environment-configs.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n          - type: Selector\n            selector:\n              matchLabels:\n                - key: my-first-label-key\n                  type: Value\n                  value: my-label-value\n                - key: my-second-label-key\n                  type: Value\n                  value: my-default-value\n                - key: my-second-label-key\n                  type: FromCompositeFieldPath\n                  valueFromFieldPath: spec.parameters.deploy\n                  fromFieldPathPolicy: Optional\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Checking Resource Location in Azure\nDESCRIPTION: Uses kubectl to describe the Linux virtual machine resource and grep for the location field, verifying that the resource was created in the specified location.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe linuxvirtualmachine | grep Location\n    Location:                         Sweden Central\n    Location:                         swedencentral\n```\n\n----------------------------------------\n\nTITLE: Installing the Crossplane Patch-and-Transform Function\nDESCRIPTION: Installs the function-patch-and-transform package which is required for the Composition to work. This function allows mapping values from a custom API to resource templates.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Resource Metadata\nDESCRIPTION: Example showing how to configure custom metadata for runtime resources including custom ServiceAccount name and Deployment labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: my-runtime-config\nspec:\n  deploymentTemplate:\n    metadata:\n      labels:\n        my-label: my-value\n  serviceAccountTemplate:\n    metadata:\n      name: my-service-account\n```\n\n----------------------------------------\n\nTITLE: Creating Claim for GCP Resource Creation in Crossplane\nDESCRIPTION: This YAML snippet creates a Claim to trigger Crossplane to create GCP resources and associated secrets. It specifies the service account name and uses publishConnectionDetailsTo to connect to Vault for secret storage.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ess.example.org/v1alpha1\nkind: ESSInstance\nmetadata:\n  name: my-ess\n  namespace: default\nspec:\n  parameters:\n    serviceAccount: ess-test-sa\n  compositionSelector:\n    matchLabels:\n      feature: ess\n  publishConnectionDetailsTo:\n    name: ess-claim-conn\n    metadata:\n      labels:\n        environment: development\n        team: backend\n    configRef:\n      name: vault\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource with Manual Update Policy\nDESCRIPTION: This YAML snippet defines a Composite Resource (XR) of kind PlatformDB with a Manual composition update policy. It demonstrates how to specify the update policy and reference a specific CompositionRevision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: PlatformDB\nmetadata:\n  name: example\nspec:\n  parameters:\n    storageGB: 20\n  # The Manual policy specifies that you don't want this XR to update to the\n  # latest CompositionRevision automatically.\n  compositionUpdatePolicy: Manual\n  compositionRef:\n    name: example\n  writeConnectionSecretToRef:\n    name: db-conn\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Details in Crossplane Composition\nDESCRIPTION: This YAML shows a Composition with connectionDetails configuration that specifies which secret keys from a resource should be included in the combined connection secret. It maps keys from the resource's connection secret to the combined secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n          - name: password\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: password\n          - name: key\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.secret\n          - name: smtp\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: attribute.ses_smtp_password_v4\n      # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Combining Environment Values in Crossplane CombineFromEnvironment Patch\nDESCRIPTION: Demonstrates using the CombineFromEnvironment patch to combine multiple values from the in-memory environment and apply them to a composed resource. It creates a unique annotation by combining two environment variables.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineFromEnvironment\n      combine:\n        strategy: string\n        variables:\n        - fromFieldPath: key1\n        - fromFieldPath: key2\n        string:\n          fmt: \"%s-%s\"\n      toFieldPath: metadata.annotations[EnvironmentPatch]\n```\n\n----------------------------------------\n\nTITLE: XRD with Claim Definition in YAML\nDESCRIPTION: YAML snippet of a Composite Resource Definition that includes a claimNames section, enabling the creation of namespace-scoped Claims based on this XRD.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/introduction.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource Definition (XRD)\nspec:\n  group: test.example.org\n  names:\n    kind: MyComputeResource\n  claimNames:\n    kind: computeClaim\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Package with CLI\nDESCRIPTION: The `crossplane xpkg init` command sets up the current directory with files necessary to create a Crossplane package. The user can specify a `<template>` from well-known templates or a git repository URL. This process configures Crossplane to begin package development.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg init <name> <template>\n```\n\n----------------------------------------\n\nTITLE: Full Database Instance Status Example\nDESCRIPTION: Complete YAML showing the status fields populated after importing a GCP DatabaseInstance.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/import-existing-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"Observe\"]\n  forProvider:\n    region: us-central1\nstatus:\n  atProvider:\n    connectionName: crossplane-playground:us-central1:my-external-database\n    databaseVersion: POSTGRES_14\n    deletionProtection: true\n    firstIpAddress: 35.184.74.79\n    id: my-external-database\n    publicIpAddress: 35.184.74.79\n    region: us-central1\n    settings:\n    - activationPolicy: ALWAYS\n      availabilityType: REGIONAL\n      diskSize: 100\n      pricingPlan: PER_USE\n      tier: db-custom-4-26624\n      version: 4\n  conditions:\n  - lastTransitionTime: \"2023-02-22T07:16:51Z\"\n    reason: Available\n    status: \"True\"\n    type: Ready\n  - lastTransitionTime: \"2023-02-22T07:16:51Z\"\n    reason: ReconcileSuccess\n    status: \"True\"\n    type: Synced\n```\n\n----------------------------------------\n\nTITLE: Defining CEL Validation Rules in Crossplane XRD\nDESCRIPTION: Example of implementing CEL validation rules in a Crossplane XRD to enforce constraints on replica counts. The rule ensures the replicas value falls between minReplicas and maxReplicas.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: myXR.crossplane.io\nspec:\n# Removed for brevity\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              x-kubernetes-validations:\n              - rule: \"self.minReplicas <= self.replicas && self.replicas <= self.maxReplicas\"\n                message: \"replicas should be in between minReplicas and maxReplicas.\"\n              properties:\n                minReplicas:\n                  type: integer\n                maxReplicas:\n                  type: integer\n                replicas: \n                  type: integer\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating a Patch from Composite Resource to Managed Resource\nDESCRIPTION: Example of a patch that copies a value from the composite resource's spec.field1 field to a label on the managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: storage-bucket\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: \"us-east-2\"\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.field1\n      toFieldPath: metadata.labels[\"patchLabel\"]\n```\n\n----------------------------------------\n\nTITLE: Patching Individual Resource with EnvironmentConfigs in Crossplane YAML\nDESCRIPTION: This snippet shows how to patch an individual resource using ToEnvironmentFieldPath and FromEnvironmentFieldPath to interact with the in-memory environment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: vpc\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    spec:\n      forProvider:\n        cidrBlock: 172.16.0.0/16\n  patches:\n  - type: ToEnvironmentFieldPath\n    fromFieldPath: status.atProvider.id\n    toFieldPath: vpcId\n  - type: FromEnvironmentFieldPath\n    fromFieldPath: tags\n    toFieldPath: spec.forProvider.tags\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource using custom XRD API in YAML\nDESCRIPTION: This snippet shows how to create a Composite Resource (XR) using the custom API defined by an XRD. It specifies the API version, kind, and uses the 'region' field defined in the schema.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: custom-api.example.org/v1alpha1\nkind: xDatabase\nmetadata:\n  name: my-composite-resource\nspec: \n  region: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets in All Namespaces to View Composition-Generated Secrets\nDESCRIPTION: This shell command shows the result of listing secrets across all namespaces after applying a Claim, revealing three secret objects: individual secrets for each AccessKey resource in the docs namespace and a combined secret in the other-namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secrets -A\nNAMESPACE           NAME                                   TYPE                                DATA   AGE\ndocs                key1-secret                            connection.crossplane.io/v1alpha1   4      4s\ndocs                key2-secret                            connection.crossplane.io/v1alpha1   4      4s\nother-namespace     70975471-c44f-4f6d-bde6-6bbdc9de1eb8   connection.crossplane.io/v1alpha1   0      6s\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Provider Settings\nDESCRIPTION: YAML configuration for GCP ProviderConfig including project ID and credentials\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  projectID: $@<PROJECT_ID>$@\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: gcp-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Detailed Composite Resource Definition Schema in YAML\nDESCRIPTION: Extended YAML example of a Composite Resource Definition, showcasing the schema definition for the spec section. It includes OpenAPI v3 schema to define allowed values for the 'storage' field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/introduction.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource Definition (XRD)\nspec:\n  group: test.example.org\n  names:\n    kind: MyComputeResource\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              storage:\n                type: string\n                oneOf:\n                  - pattern: '^small$'\n                  - pattern: '^large$'\n            required:\n            - storage\n```\n\n----------------------------------------\n\nTITLE: Converting Observe-Only to Fully Managed Resource\nDESCRIPTION: YAML configuration showing how to convert an observe-only imported resource to a fully managed resource by updating management policies and required provider fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/import-existing-resources.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"*\"]\n  forProvider:\n    databaseVersion: POSTGRES_14\n    region: us-central1\n    settings:\n    - diskSize: 100\n      tier: db-custom-4-26624\nstatus:\n  atProvider:\n    databaseVersion: POSTGRES_14\n    region: us-central1\n    settings:\n    - diskSize: 100\n      tier: db-custom-4-26624\n  conditions:\n    - lastTransitionTime: \"2023-02-22T07:16:51Z\"\n      reason: Available\n      status: \"True\"\n      type: Ready\n    - lastTransitionTime: \"2023-02-22T11:16:45Z\"\n      reason: ReconcileSuccess\n      status: \"True\"\n      type: Synced\n```\n\n----------------------------------------\n\nTITLE: Partial CompositeResourceDefinition with Custom Status Field\nDESCRIPTION: Partial example of a CompositeResourceDefinition that includes a custom status field to enable patching between resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CompositeResourceDefinition\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Managed Resources\nDESCRIPTION: This shell command lists all managed resources created by Crossplane, including individual GCP resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Pushing a Package to DockerHub Registry\nDESCRIPTION: Example command for pushing a package to DockerHub registry by providing the full URL along with the package name. Demonstrates how to specify an alternative registry besides the default Crossplane registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push -f my-package.xpkg index.docker.io/crossplane-docs/my-package:v0.14.0\n```\n\n----------------------------------------\n\nTITLE: Individual Resource Environment Patching in Crossplane\nDESCRIPTION: Shows how to patch between individual resources and the in-memory environment using ToEnvironmentFieldPath and FromEnvironmentFieldPath patch types.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/environment-configs.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: vpc\n          base:\n            apiVersion: ec2.aws.m.upbound.io/v1beta1\n            kind: VPC\n            spec:\n              forProvider:\n                cidrBlock: 172.16.0.0/16\n          patches:\n            - type: ToEnvironmentFieldPath\n              fromFieldPath: status.atProvider.id\n              toFieldPath: vpcId\n            - type: FromEnvironmentFieldPath\n              fromFieldPath: tags\n              toFieldPath: spec.forProvider.tags\n```\n\n----------------------------------------\n\nTITLE: Patching Between Composite Resource and Environment in Crossplane (YAML)\nDESCRIPTION: This snippet demonstrates how to patch data between a Composite resource and the in-memory environment in Crossplane. It uses 'ToCompositeFieldPath' and 'FromCompositeFieldPath' patch types to copy data between the environment and the Composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/environment-configs.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  # Removed for Brevity\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      environment:\n        patches:\n        - type: ToCompositeFieldPath\n          fromFieldPath: tags\n          toFieldPath: metadata.labels[envTag]\n        - type: FromCompositeFieldPath\n          fromFieldPath: metadata.name\n          toFieldPath: newEnvironmentKey\n# Removed for Brevity\n```\n\n----------------------------------------\n\nTITLE: Setting Required FromFieldPath Policy in Crossplane Composition YAML\nDESCRIPTION: This example demonstrates how to set a 'Required' policy for the 'fromFieldPath' in a Crossplane Composition patch. This ensures that the patch will only be applied if the specified field exists in the source resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    policy:\n      fromFieldPath: Required\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Deployments and Pods in Shell\nDESCRIPTION: Shows how to list Crossplane-related deployments and pods in the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deployment -n crossplane-system\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Using Crossplane Render Command for Function Testing\nDESCRIPTION: Shell command to test a Crossplane function by rendering the output of a Composition with specified XR, composition, and function YAML files.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Example VPC Composition Configuration\nDESCRIPTION: YAML configuration for a VPC Composition defining the structure and settings for creating AWS VPCs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composition-revisions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  labels:\n    channel: dev\n  name: myvpcs.aws.example.upbound.io\nspec:\n  compositeTypeRef:\n    apiVersion: aws.example.upbound.io/v1alpha1\n    kind: MyVPC\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: my-vpc\n        base:\n          apiVersion: ec2.aws.m.upbound.io/v1beta1\n          kind: VPC\n          spec:\n            forProvider:\n              region: us-west-1\n              cidrBlock: 192.168.0.0/16\n              enableDnsSupport: true\n              enableDnsHostnames: true\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Pod Logs\nDESCRIPTION: Command to retrieve logs from the Crossplane controller pod running in the crossplane-system namespace. Useful for investigating Crossplane controller issues.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/troubleshoot-crossplane.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system logs -lapp=crossplane\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Helm Repository\nDESCRIPTION: Commands to add the Crossplane stable Helm repository and update the local chart cache.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Checking for Resource Leak Events\nDESCRIPTION: Command to describe a managed resource to view events that might indicate a potential resource leak, which occurs when a provider creates a resource but fails to record its external name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe queue my-sqs-queue\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Provider Settings\nDESCRIPTION: YAML configuration for creating a ProviderConfig resource that connects GCP credentials and project settings to the Crossplane provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: gcp.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  projectID: $@<PROJECT_ID>$@\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: gcp-secret\n      key: creds\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining Desired Service in KCL\nDESCRIPTION: This snippet defines the desired state of a Kubernetes Service using KCL. It sets up the service to select the pods created by the Deployment and exposes port 8080.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_13\n\nLANGUAGE: kcl\nCODE:\n```\n_desired_service = {\n  apiVersion = \"v1\"\n  kind = \"Service\"\n  metadata = {\n    annotations = {\n      \"krm.kcl.dev/composition-resource-name\" = \"service\"\n    }\n    labels = {\"example.crossplane.io/app\" = observed_xr.metadata.name}\n  }\n  spec = {\n    selector = {\"example.crossplane.io/app\" = observed_xr.metadata.name}\n    ports = [{protocol = \"TCP\", port = 8080, targetPort = 80}]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Match Transform Base Configuration\nDESCRIPTION: Shows the basic structure of a match transform configuration that supports both literal strings and regular expressions for pattern matching.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n            - type: regexp\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Composition Revision in YAML\nDESCRIPTION: This YAML snippet demonstrates how to select a specific Composition revision for a composite resource using the compositionRevisionRef field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: MyDatabase\nmetadata:\n  namespace: default\n  name: my-composite-resource\nspec:\n  crossplane:\n    compositionUpdatePolicy: Manual\n    compositionRevisionRef:\n      name: my-composition-b5aa1eb\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Default Naming of External Resources in Crossplane\nDESCRIPTION: This YAML snippet demonstrates the default naming behavior for external resources in Crossplane, where the external resource name matches the Kubernetes object name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: my-rds-instance\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Pull Secrets for Private Registry\nDESCRIPTION: This YAML snippet shows how to configure package pull secrets for a Crossplane Configuration, allowing installation from a private registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  packagePullSecrets: \n    - name: example-secret\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Package from Template\nDESCRIPTION: Command to initialize a new Crossplane package from a template. Requires a name (reserved for future use) and template type, with optional flags for branch selection and directory specification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg init <name> <template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Usage for Deletion Ordering\nDESCRIPTION: This example creates a Usage resource that prevents deletion of a cluster until a Prometheus chart is deleted first, enforcing a specific deletion order.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/usages.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n      name: my-cluster\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n      name: my-prometheus-chart\n```\n\n----------------------------------------\n\nTITLE: Updating Composite Resource to Reference Specific CompositionRevision\nDESCRIPTION: This YAML snippet shows how to update a PlatformDB Composite Resource to reference a specific CompositionRevision when using the Manual update policy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: PlatformDB\nmetadata:\n  name: example\nspec:\n  parameters:\n    storageGB: 20\n  compositionUpdatePolicy: Manual\n  compositionRef:\n    name: example\n  compositionRevisionRef:\n    name: example-18pdg\n  writeConnectionSecretToRef:\n    name: db-conn\n```\n\n----------------------------------------\n\nTITLE: Selecting EnvironmentConfig by Name in a Composition\nDESCRIPTION: This snippet demonstrates how to select an EnvironmentConfig by its exact name using the Reference type in a Composition pipeline.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/environment-configs.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Reference\n          ref:\n            name: example-environment\n```\n\n----------------------------------------\n\nTITLE: Showing All Package Revisions with Beta Trace\nDESCRIPTION: This command displays both active and inactive package revisions when tracing a configuration, providing a complete view of the package revision history.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-revisions all\n```\n\n----------------------------------------\n\nTITLE: Custom Readiness Check with MatchInteger in Crossplane YAML\nDESCRIPTION: Shows how to define a custom readiness check for a resource using MatchInteger. It checks if a specific field in the resource matches a given integer value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchInteger\n      fieldPath: status.atProvider.state\n      matchInteger: 4\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider in Crossplane with Vault-injected Credentials\nDESCRIPTION: Creates a ProviderConfig for AWS that specifies how to use the credentials injected by Vault. It references the filesystem path where Vault injects the AWS credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Filesystem\n    fs:\n      path: /vault/secrets/creds.txt\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane GCP StoreConfig\nDESCRIPTION: Configures a StoreConfig for connecting Crossplane Provider with Vault for managing secret storage and communication\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: vault\nspec:\n  type: Plugin\n  defaultScope: crossplane-system\n  plugin:\n    endpoint: ess-plugin-vault.crossplane-system:4040\n    configRef:\n      apiVersion: secrets.crossplane.io/v1alpha1\n      kind: VaultConfig\n      name: vault-internal\n```\n\n----------------------------------------\n\nTITLE: Creating XR with Dev Channel Selector in YAML\nDESCRIPTION: Creates an XR (Crossplane Resource) with a compositionRevisionSelector set to the 'dev' channel. This demonstrates how to specify a particular revision channel for a resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind:  MyVPC\nmetadata:\n  name: vpc-dev\nspec:\n  id: vpc-dev\n  compositionRevisionSelector:\n    matchLabels:\n      channel: dev\n```\n\n----------------------------------------\n\nTITLE: Viewing Individual Resource Secret\nDESCRIPTION: This shell output shows the result of describing an individual resource's secret, which contains all the connection details defined in the Composition, not limited by the XRD's connectionSecretKeys.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret key1 -n docs\nName:         key1\nNamespace:    docs\n\nData\n====\npassword:                        40 bytes\nusername:                        20 bytes\nattribute.secret:                40 bytes\nattribute.ses_smtp_password_v4:  44 bytes\n```\n\n----------------------------------------\n\nTITLE: Field Path Selection Example\nDESCRIPTION: Example showing the structure of a composite resource object and how field paths can be used to select elements.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: XExample\nmetadata:\n  labels:\n    crossplane.io/claim-name: my-example-claim\n    crossplane.io/claim-namespace: default\n    crossplane.io/composite: my-example-claim-978mh\nspec:\n  desiredRegion: eu-north-1\n  field1: field1-text\n  resourceRefs:\n  - apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    name: my-example-claim-978mh-r6z64\n  - apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    name: my-example-claim-978mh-cnlhj\n  - apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    name: my-example-claim-978mh-rv5nm\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource in Crossplane\nDESCRIPTION: Defines a Crossplane Composite Resource (XR) with storage specification. Composite Resources represent the actual infrastructure and can have a different kind from Claims.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/introduction.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: test.example.org/v1alpha1\\nkind: MyComputeResource\\nmetadata:\\n  name: my-resource\\nspec:\\n  storage: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Validating Crossplane Resources Against Schema Directory (Shell)\nDESCRIPTION: This shell command demonstrates how to use the 'crossplane beta validate' command to validate Crossplane resources against a directory of schemas. It shows the command syntax and an example of the output, including successful and failed validations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta validate schema resources.yaml\n[x] schema validation error example.crossplane.io/v1beta1, Kind=XR, example : status.conditions[0].lastTransitionTime: Invalid value: \"null\": status.conditions[0].lastTransitionTime in body must be of type string: \"null\"\n[x] CEL validation error example.crossplane.io/v1beta1, Kind=XR, example : spec: Invalid value: \"object\": no such key: minReplicas evaluating rule: replicas should be greater than or equal to minReplicas.\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-1 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-1 validated successfully\nTotal 5 resources: 0 missing schemas, 4 success cases, 1 failure cases\n```\n\n----------------------------------------\n\nTITLE: Validating Render Command Output with crossplane beta validate\nDESCRIPTION: Shows how to pipe the output of 'crossplane render' into 'crossplane beta validate' to validate complete Crossplane resource pipelines, including XRs, compositions and composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml function.yaml --include-full-xr | crossplane beta validate schemas.yaml -\n```\n\n----------------------------------------\n\nTITLE: Crossplane Deleting Condition Example\nDESCRIPTION: Shows the condition structure when a provider is attempting to delete a managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Ready\n  Status:                False\n  Reason:                Deleting\n```\n\n----------------------------------------\n\nTITLE: Rendering Composite Resource Output in YAML\nDESCRIPTION: An example output of the 'crossplane render' command, showing the original composite resource and generated managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: nopexample.org/v1\nkind: XBucket\nmetadata:\n  name: test-xrender\nstatus:\n  bucketRegion: us-east-2\n---\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  annotations:\n    crossplane.io/composition-resource-name: my-bucket\n  generateName: test-xrender-\n  labels:\n    crossplane.io/composite: test-xrender\n  ownerReferences:\n  - apiVersion: nopexample.org/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: XBucket\n    name: test-xrender\n    uid: \"\"\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Provider with External Secret Stores Configuration YAML\nDESCRIPTION: YAML configuration example showing how to enable external secret stores for a Provider using DeploymentRuntimeConfig.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-iam\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-iam:v1.12.1\n  runtimeConfigRef:\n    name: enable-ess\n---\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: enable-ess\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      template:\n        spec:\n          containers:\n            - name: package-runtime\n              args:\n                - --enable-external-secret-stores\n```\n\n----------------------------------------\n\nTITLE: Named Database Instance Import Configuration\nDESCRIPTION: YAML configuration showing how to import a GCP DatabaseInstance with a custom Kubernetes object name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/import-existing-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"Observe\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Pull Secret with ImageConfig in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to create an ImageConfig resource to inject a pull secret when Crossplane interacts with a specific registry prefix. It configures authentication for any image with the prefix 'registry1.com/acme-co/'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/image-configs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: ImageConfig\nmetadata:\n  name: acme-packages\nspec:\n  matchImages:\n    - type: Prefix\n      prefix: registry1.com/acme-co/\n  registry:\n    authentication:\n      pullSecretRef:\n        name: acme-registry-credentials\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Package Registry with Organization\nDESCRIPTION: Example command for authenticating to a registered organization in the Upbound Marketplace using the xpkg login command with account, username, and password parameters. The password is read from stdin.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg login --account=Upbound --username=my-user --password -\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Revision Activation Policy\nDESCRIPTION: Demonstrates setting the revisionActivationPolicy to control automatic or manual Provider upgrades\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  revisionActivationPolicy: Manual\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Provider Settings\nDESCRIPTION: YAML configuration for GCP ProviderConfig including project ID and credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  projectID: $@<PROJECT_ID>$@\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: gcp-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Converting Crossplane Resources with Beta Convert\nDESCRIPTION: Commands demonstrating how to convert Crossplane resources between different versions using the beta convert command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta convert deployment-runtime controllerConfig.yaml -o deploymentConfig.yaml\ncrossplane beta convert pipeline-composition oldComposition.yaml -o newComposition.yaml -f patchFunctionName\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource Using Custom API in YAML\nDESCRIPTION: This YAML snippet shows how to create a composite resource using the custom API defined by the XRD. It references the group/version and kind, and includes the 'region' property in the spec.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: custom-api.example.org/v1alpha1\nkind: xDatabase\nmetadata:\n  name: my-composite-resource\nspec: \n  region: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Example Output of Crossplane Render Command\nDESCRIPTION: This YAML output shows the result of running the crossplane render command. It displays the original composite resource (XBucket) followed by the managed resource (S3 Bucket) that would be created by the composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: example.crossplane.io/v1\nkind: XBucket\nmetadata:\n  name: example-render\n---\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  annotations:\n    crossplane.io/composition-resource-name: storage-bucket\n  generateName: example-render-\n  labels:\n    crossplane.io/composite: example-render\n  ownerReferences:\n  - apiVersion: example.crossplane.io/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: XBucket\n    name: example-render\n    uid: \"\"\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Applying Map Transform in Crossplane Patch\nDESCRIPTION: Illustrates how to use a map transform in a Crossplane patch. This example maps the input from spec.desiredRegion to corresponding AWS regions for the spec.forProvider.region value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.desiredRegion\n      toFieldPath: spec.forProvider.region\n      transforms:\n        - type: map\n          map:\n            us: us-east-2\n            eu: eu-north-1\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for ARM64 Platform\nDESCRIPTION: Uses Docker to build a runtime image for the linux/arm64 platform. The --quiet flag is used to suppress build output, and the resulting image is tagged as 'runtime-arm64'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/arm64 --tag runtime-arm64\n```\n\n----------------------------------------\n\nTITLE: VPC CompositeResourceDefinition\nDESCRIPTION: YAML configuration for a CompositeResourceDefinition (XRD) that defines the MyVPC custom resource type.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composition-revisions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: myvpcs.aws.example.upbound.io\nspec:\n  group: aws.example.upbound.io\n  names:\n    kind: MyVPC\n    plural: myvpcs\n  versions:\n  - name: v1alpha1\n    served: true \n    referenceable: true \n    schema:\n      openAPIV3Schema:\n        type: object \n        properties:\n          spec:\n            type: object \n            properties:\n              id:\n                type: string \n                description: ID of this VPC that other objects will use to refer to it. \n            required:\n            - id\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Composite Resources\nDESCRIPTION: This shell command retrieves the list of composite resources created by Crossplane, showing their sync and ready status, as well as the associated Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\n```\n\n----------------------------------------\n\nTITLE: TrimSuffix String Transform in Crossplane\nDESCRIPTION: Demonstrates removing characters from the end of a string using Crossplane's TrimSuffix transformation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    transforms:\n      - type: string\n        string:\n          type: TrimSuffix\n          trim: `-north-1'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Authentication for Vault\nDESCRIPTION: Commands to enable and configure Kubernetes authentication method in Vault\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nvault write auth/kubernetes/config \\\n        token_reviewer_jwt=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\n        kubernetes_host=\"https://$KUBERNETES_PORT_443_TCP_ADDR:443\" \\\n        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Composition in Crossplane\nDESCRIPTION: YAML configuration showing how to select a specific Composition using compositionRef.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionRef:\n    name: my-other-composition\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource (XR) for Crossplane Testing\nDESCRIPTION: YAML definition of a XBuckets custom resource that specifies AWS S3 buckets to be created in a specific region. Used for testing the composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Configuration Dependencies with All Details\nDESCRIPTION: This command traces all dependencies of a Crossplane configuration package named 'platform-ref-aws', showing every package requiring the same dependency with the '--show-package-dependencies all' flag. The output displays a hierarchical tree of all the configurations, providers, and functions that the main configuration depends on, along with their versions and health status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-dependencies all\n```\n\n----------------------------------------\n\nTITLE: Viewing Provider Pod Logs\nDESCRIPTION: Command to retrieve logs from a specific provider pod in the crossplane-system namespace. Used to debug provider-specific issues.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/troubleshoot-crossplane.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system logs <name-of-provider-pod>\n```\n\n----------------------------------------\n\nTITLE: Discovering Composition Revisions using kubectl\nDESCRIPTION: This snippet shows how to use kubectl to find all revisions of a Composition named 'example'. It demonstrates how to list CompositionRevisions and view their revision numbers and ages.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nkubectl get compositionrevision -l crossplane.io/composition-name=example\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource with Manual Update Policy\nDESCRIPTION: This YAML snippet creates a Composite Resource (XR) of type MyVPC with a Manual compositionUpdatePolicy and a specific compositionRevisionRef.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  name: vpc-man\nspec:\n  id: vpc-man\n  compositionUpdatePolicy: Manual\n  compositionRevisionRef:\n    name: myvpcs.aws.example.upbound.io-ad265bc\n```\n\n----------------------------------------\n\nTITLE: Defining XBuckets Composite Resource in YAML\nDESCRIPTION: YAML definition of an XBuckets composite resource (XR) that specifies a region and an array of bucket names for AWS S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Installing provider-aws with Vault Integration in Crossplane\nDESCRIPTION: Creates a ControllerConfig and Provider for AWS with Vault integration. The annotations configure the Vault agent to inject AWS credentials from a specific secret path into the provider's filesystem in AWS credentials format.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: pkg.crossplane.io/v1alpha1\nkind: ControllerConfig\nmetadata:\n  name: aws-vault-config\nspec:\n  args:\n    - --debug\n  metadata:\n    annotations:\n      vault.hashicorp.com/agent-inject: \\\"true\\\"\n      vault.hashicorp.com/role: \\\"crossplane-providers\\\"\n      vault.hashicorp.com/agent-inject-secret-creds.txt: \\\"secret/provider-creds/aws-default\\\"\n      vault.hashicorp.com/agent-inject-template-creds.txt: |\n        {{- with secret \\\"secret/provider-creds/aws-default\\\" -}}\n          [default]\n          aws_access_key_id=\\\"{{ .Data.data.access_key }}\\\"\n          aws_secret_access_key=\\\"{{ .Data.data.secret_key }}\\\"\n        {{- end -}}\n---\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.33.0\n  controllerConfigRef:\n    name: aws-vault-config\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Unknown Provider Condition Example in YAML\nDESCRIPTION: Shows the format of the 'Unknown' condition type which indicates the Provider has an unexpected error with the managed resource. The conditions.message would provide more details on what went wrong.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Unknown\n  Status:                False\n  Reason:                Unknown\n```\n\n----------------------------------------\n\nTITLE: Setting Revision History Limit for Crossplane Configuration\nDESCRIPTION: This YAML snippet demonstrates how to set the revision history limit for a Crossplane Configuration package, controlling how many revisions are stored.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  revisionHistoryLimit: 10\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: ToEnvironmentFieldPath Patch Example\nDESCRIPTION: Shows how to use ToEnvironmentFieldPath to write values from a composed resource to the in-memory environment. This example writes the region value to an environment key.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n    patches:\n    - type: ToEnvironmentFieldPath\n      fromFieldPath: spec.forProvider.region\n      toFieldPath: key1\n```\n\n----------------------------------------\n\nTITLE: Configuring Signature Verification with ImageConfig in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to create an ImageConfig resource that enables signature verification for specific Crossplane package images. It configures Cosign as the verification provider with keyless authentication and attestation requirements.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/image-configs.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1alpha1\nkind: ImageConfig\nmetadata:\n  name: verify-acme-packages\nspec:\n  matchImages:\n    - type: Prefix\n      prefix: registry1.com/acme-co/configuration-foo\n    - type: Prefix\n      prefix: registry1.com/acme-co/configuration-bar\n  verification:\n    provider: Cosign\n    cosign:\n      authorities:\n        - name: verify acme packages\n          keyless:\n            url: https://fulcio.sigstore.dev\n            identities:\n              - issuer: https://token.actions.githubusercontent.com\n                subjectRegExp: https://github.com/acme-co/crossplane-packages/*\n          attestations:\n            - name: verify attestations\n              predicateType: spdxjson\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Pod Arguments\nDESCRIPTION: Example YAML snippet showing how to add pod arguments to the Crossplane deployment, specifically setting the sync-interval.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/pods.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --sync-interval=30m\n```\n\n----------------------------------------\n\nTITLE: Region-Specific Database Instance Import\nDESCRIPTION: YAML configuration for importing a GCP DatabaseInstance from a specific region using forProvider field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/import-existing-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"Observe\"]\n  forProvider:\n    region: \"us-central1\"\n```\n\n----------------------------------------\n\nTITLE: Using PatchSets for Reusing Patches\nDESCRIPTION: Example of creating a PatchSet to define a set of patches once and apply them to multiple resources in a Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\npatchSets:\n- name: my-patchset\n  patches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: spec.forProvider.region\nresources:\n- name: bucket1\n  base:\n    # Removed for brevity\n  patches:\n    - type: PatchSet\n      patchSetName: my-patchset\n- name: bucket2\n  base:\n    # Removed for brevity\n  patches:\n    - type: PatchSet\n      patchSetName: my-patchset\n```\n\n----------------------------------------\n\nTITLE: Configuring MatchCondition Readiness Check in Crossplane Resources\nDESCRIPTION: This YAML snippet demonstrates the MatchCondition readiness check, which verifies that a specific condition type with an expected status exists in the resource's status.conditions array.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchCondition\n      matchCondition:\n        type: MyType\n        status: Success\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Transform in Crossplane\nDESCRIPTION: Demonstrates how to use map transform to translate values from composite to managed resources. Maps input values from spec.field1 to specific annotation values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: map\n        map:\n          \"field1-text\": \"firstField\"\n          \"field2-text\": \"secondField\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Connection Details to Kubernetes Secret\nDESCRIPTION: Example showing how to publish managed resource connection details to a Kubernetes secret using publishConnectionDetailsTo.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rds.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n  # Removed for brevity\n  publishConnectionDetailsTo:\n    name: rds-kubernetes-secret\n```\n\n----------------------------------------\n\nTITLE: Defining a Crossplane Function with Development Runtime\nDESCRIPTION: YAML definition of a Crossplane Function resource with Development runtime annotation. This configuration tells Crossplane to use a locally running function instead of pulling a container.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-xbuckets\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  # The CLI ignores this package when using the Development runtime.\n  # You can set it to any value.\n  package: xpkg.crossplane.io/negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Managing External Resource Names\nDESCRIPTION: Examples showing default external naming and custom external naming using annotations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.m.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  namespace: default\n  name: my-rds-instance\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get rdsinstance\nNAME                 READY   SYNCED   EXTERNAL-NAME        AGE\nmy-rds-instance      True    True     my-rds-instance      11m\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.m.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  namespace: default\n  name: my-rds-instance  \n  annotations: \n    crossplane.io/external-name: my-custom-name\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get rdsinstance\nNAME                 READY   SYNCED   EXTERNAL-NAME        AGE\nmy-rds-instance      True    True     my-custom-name       11m\n```\n\n----------------------------------------\n\nTITLE: Configuring InitProvider in EKS NodeGroup\nDESCRIPTION: Example of using initProvider to set initial values for an EKS NodeGroup that may be changed by an autoscaler, demonstrating how to set initial desired size while allowing external modifications.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: eks.aws.upbound.io/v1beta1\nkind: NodeGroup\nmetadata:\n  name: sample-eks-ng\nspec:\n  managementPolicies: [\"Observe\", \"Create\", \"Update\", \"Delete\"]\n  initProvider:\n    scalingConfig:\n      - desiredSize: 1\n  forProvider:\n    region: us-west-1\n    scalingConfig:\n      - maxSize: 4\n        minSize: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider for Namespace-Specific Credentials\nDESCRIPTION: Defines a ProviderConfig resource that specifies AWS credentials to be used for a specific namespace (team-1). The credentials are stored in a Kubernetes secret within the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/multi-tenant.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: team-1\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: team-1-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret from Azure Credentials\nDESCRIPTION: kubectl command to create a secret containing Azure credentials for Crossplane to authenticate with Azure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric azure-secret \\\n-n crossplane-system \\\n--from-file=creds=./azure-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Defining a CompositeResourceDefinition for MyVPC\nDESCRIPTION: This YAML snippet defines a CompositeResourceDefinition (XRD) for the MyVPC resource, specifying its API group, version, and schema.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: myvpcs.aws.example.upbound.io\nspec:\n  group: aws.example.upbound.io\n  names:\n    kind: MyVPC\n    plural: myvpcs\n  versions:\n  - name: v1alpha1\n    served: true \n    referenceable: true \n    schema:\n      openAPIV3Schema:\n        type: object \n        properties:\n          spec:\n            type: object \n            properties:\n              id:\n                type: string \n                description: ID of this VPC that other objects will use to refer to it. \n            required:\n            - id\n```\n\n----------------------------------------\n\nTITLE: Listing Built Package File in Shell\nDESCRIPTION: This shell command shows how to list the contents of the current directory after building a Crossplane package, confirming the creation of the package file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nls -1 ./\ntest-directory\ntest-package.xpkg\n```\n\n----------------------------------------\n\nTITLE: Using ToEnvironmentFieldPath Patch in Crossplane\nDESCRIPTION: This snippet demonstrates how to use ToEnvironmentFieldPath to apply values from a composed resource to the environment. The example shows writing the region value to an environment key for use by other patches.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n    patches:\n    - type: ToEnvironmentFieldPath\n      fromFieldPath: spec.forProvider.region\n      toFieldPath: key1\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Composite Resource (XR)\nDESCRIPTION: Example of a Composite Resource (XR) definition showing cluster-scoped resource structure. Demonstrates the parallel structure to Claims but with different kind value and no namespace specification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/introduction.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource (XR)\napiVersion: test.example.org/v1alpha1\nkind: MyComputeResource\nmetadata:\n  name: my-resource\nspec:\n  storage: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Composite Resource Output (YAML)\nDESCRIPTION: An example output of the 'crossplane render' command, showing the original composite resource and the generated managed resources. This demonstrates how composition functions transform the input.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: nopexample.org/v1\nkind: XBucket\nmetadata:\n  name: test-xrender\nstatus:\n  bucketRegion: us-east-2\n---\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  annotations:\n    crossplane.io/composition-resource-name: my-bucket\n  generateName: test-xrender-\n  labels:\n    crossplane.io/composite: test-xrender\n  ownerReferences:\n  - apiVersion: nopexample.org/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: XBucket\n    name: test-xrender\n    uid: \"\"\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Listing Composition Revisions with kubectl\nDESCRIPTION: This shell command shows how to list all Composition revisions in the cluster, displaying their revision number, target XR kind, API version, and age.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevision\nNAME                         REVISION   XR-KIND        XR-APIVERSION            AGE\nmy-composition-5c976ad       1          xmydatabases   example.org/v1alpha1     65m\nmy-composition-b5aa1eb       2          xmydatabases   example.org/v1alpha1     64m\n```\n\n----------------------------------------\n\nTITLE: Removing Finalizer from a CloudSQLInstance in Shell\nDESCRIPTION: Shows a specific example of removing a finalizer from a CloudSQLInstance managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl patch cloudsqlinstance my-db -p '{\"metadata\":{\"finalizers\": []}}' --type=merge\n```\n\n----------------------------------------\n\nTITLE: Customizing Health Checks for Crossplane Resources (YAML, Lua)\nDESCRIPTION: This snippet customizes the health checks for Crossplane resources within Argo CD. It edits the `argocd-cm` ConfigMap to include Lua scripts that define the health status based on the resource's conditions. This allows Argo CD to accurately determine the health of Crossplane managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\nkind: ConfigMap\ndata:\n  application.resourceTrackingMethod: annotation\n  resource.customizations: |\n    \\\"*.upbound.io/*\\\":\n      health.lua: |\n        health_status = {\n          status = \\\"Progressing\\\",\n          message = \\\"Provisioning ...\\\"\n        }\n\n        local function contains (table, val)\n          for i, v in ipairs(table) do\n            if v == val then\n              return true\n            end\n          end\n          return false\n        end\n\n        local has_no_status = {\n          \\\"ProviderConfig\\\",\n          \\\"ProviderConfigUsage\\\"\n        }\n\n        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then\n          health_status.status = \\\"Healthy\\\"\n          health_status.message = \\\"Resource is up-to-date.\\\"\n          return health_status\n        end\n\n        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then\n          if obj.kind == \\\"ProviderConfig\\\" and obj.status.users ~= nil then\n            health_status.status = \\\"Healthy\\\"\n            health_status.message = \\\"Resource is in use.\\\"\n            return health_status\n          end\n          return health_status\n        end\n\n        for i, condition in ipairs(obj.status.conditions) do\n          if condition.type == \\\"LastAsyncOperation\\\" then\n            if condition.status == \\\"False\\\" then\n              health_status.status = \\\"Degraded\\\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \\\"Synced\\\" then\n            if condition.status == \\\"False\\\" then\n              health_status.status = \\\"Degraded\\\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \\\"Ready\\\" then\n            if condition.status == \\\"True\\\" then\n              health_status.status = \\\"Healthy\\\"\n              health_status.message = \\\"Resource is up-to-date.\\\"\n              return health_status\n            end\n          end\n        end\n\n        return health_status\n\n    \\\"*.crossplane.io/*\\\":\n      health.lua: |\n        health_status = {\n          status = \\\"Progressing\\\",\n          message = \\\"Provisioning ...\\\"\n        }\n\n        local function contains (table, val)\n          for i, v in ipairs(table) do\n            if v == val then\n              return true\n            end\n          end\n          return false\n        end\n\n        local has_no_status = {\n          \\\"Composition\\\",\n          \\\"CompositionRevision\\\",\n          \\\"DeploymentRuntimeConfig\\\",\n          \\\"ControllerConfig\\\",\n          \\\"ProviderConfig\\\",\n          \\\"ProviderConfigUsage\\\"\n        }\n        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then\n            health_status.status = \\\"Healthy\\\"\n            health_status.message = \\\"Resource is up-to-date.\\\"\n          return health_status\n        end\n\n        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then\n          if obj.kind == \\\"ProviderConfig\\\" and obj.status.users ~= nil then\n            health_status.status = \\\"Healthy\\\"\n            health_status.message = \\\"Resource is in use.\\\"\n            return health_status\n          end\n          return health_status\n        end\n\n        for i, condition in ipairs(obj.status.conditions) do\n          if condition.type == \\\"LastAsyncOperation\\\" then\n            if condition.status == \\\"False\\\" then\n              health_status.status = \\\"Degraded\\\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \\\"Synced\\\" then\n            if condition.status == \\\"False\\\" then\n              health_status.status = \\\"Degraded\\\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if contains({\\\"Ready\\\", \\\"Healthy\\\", \\\"Offered\\\", \\\"Established\\\"}, condition.type) then\n            if condition.status == \\\"True\\\" then\n              health_status.status = \\\"Healthy\\\"\n              health_status.message = \\\"Resource is up-to-date.\\\"\n              return health_status\n            end\n          end\n        end\n\n        return health_status\"\n```\n\n----------------------------------------\n\nTITLE: Installing GCP PubSub Provider in Crossplane\nDESCRIPTION: YAML manifest to add the GCP PubSub Provider to a Crossplane installation, enabling Crossplane to manage PubSub resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-pubsub\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-pubsub:v1.12.1\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Credentials File for Authentication\nDESCRIPTION: Creates a text file with AWS access key credentials needed for Crossplane to authenticate with AWS. The file contains the AWS access key ID and secret access key in INI format.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = $@<aws_access_key>$@\naws_secret_access_key = $@<aws_secret_key>$@\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Revision History Limit\nDESCRIPTION: Shows how to set the revisionHistoryLimit to control the number of Provider package revisions maintained\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  revisionHistoryLimit: 10\n```\n\n----------------------------------------\n\nTITLE: Example Custom API Definition\nDESCRIPTION: Sample YAML showing the structure of a custom NoSQL database API.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.example.com/v1alpha1\nkind: NoSQL\nmetadata:\n  name: my-nosql-database\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Defining Composition with Multiple Access Keys and Connection Secrets\nDESCRIPTION: Demonstrates creating a Composition with multiple AWS IAM AccessKey resources, each writing connection secrets to specific namespaces\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/connection-details.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key1\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1-secret\n      - name: key2\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n              # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2-secret\n```\n\n----------------------------------------\n\nTITLE: Setting Default Composition Update Policy in Crossplane XRD\nDESCRIPTION: This YAML snippet shows how to set the default Composition update policy to 'Manual' in a Crossplane XRD using the 'defaultCompositionUpdatePolicy' field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositionUpdatePolicy: Manual\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Provider Conditions Status\nDESCRIPTION: Example output showing provider conditions and status details using kubectl describe.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe provider\nName:         my-provider\nAPI Version:  pkg.crossplane.io/v1\nKind:         Provider\n# Removed for brevity\nStatus:\n  Conditions:\n    Reason:      HealthyPackageRevision\n    Status:      True\n    Type:        Healthy\n    Reason:      ActivePackageRevision\n    Status:      True\n    Type:        Installed\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Describing Provider Revision in Shell\nDESCRIPTION: Demonstrates how to get detailed information about a provider revision, including managed CRDs and events.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe providerrevision provider-aws-a2e16ca2fc1a\n```\n\n----------------------------------------\n\nTITLE: Running Crossplane Function Unit Tests with Hatch\nDESCRIPTION: Command to run unit tests for a Crossplane function using Hatch as the Python build tool and virtual environment manager. The output shows a successful test run.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nhatch run test:unit\n.\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GCP Credentials\nDESCRIPTION: Shell command to create a Kubernetes secret containing GCP service account credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric gcp-secret \\\n-n crossplane-system \\\n--from-file=creds=./gcp-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Viewing External Resource Names in Crossplane\nDESCRIPTION: This shell command shows how to view the external names of managed resources in Crossplane using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get rdsinstance\nNAME                 READY   SYNCED   EXTERNAL-NAME        AGE\nmy-rds-instance      True    True     my-rds-instance      11m\n```\n\n----------------------------------------\n\nTITLE: String Transform with Join\nDESCRIPTION: Example of string transform using join to combine array elements.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.parameters.inputList\n    toFieldPath: spec.targetJoined\n    transforms:\n      - type: string\n        string:\n          type: Join\n          join:\n            separator: \",\"\n```\n\n----------------------------------------\n\nTITLE: Installing Vault using Helm\nDESCRIPTION: Commands to add Hashicorp Helm repo and install Vault\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add hashicorp https://helm.releases.hashicorp.com\nhelm install vault hashicorp/vault\n```\n\n----------------------------------------\n\nTITLE: Viewing Composite Resources in Crossplane\nDESCRIPTION: This shell command retrieves and displays the composite resources created by Crossplane. It shows the resource name, readiness status, associated composition, and age.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Crossplane Version\nDESCRIPTION: Demonstrates how to install a specific version of Crossplane (1.10.0 in this example) using the Helm chart.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-stable/crossplane \\\n--version 1.10.0\n```\n\n----------------------------------------\n\nTITLE: Viewing Created Connection Secrets in Kubernetes\nDESCRIPTION: This shell command shows the output of listing secrets across namespaces, displaying the three secrets created: two from individual resources (key1-secret and key2-secret) and one combined secret created by Crossplane in the specified namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secrets -A\nNAMESPACE           NAME                                   TYPE                                DATA   AGE\ndocs                key1-secret                            connection.crossplane.io/v1alpha1   4      4s\ndocs                key2-secret                            connection.crossplane.io/v1alpha1   4      4s\nother-namespace     70975471-c44f-4f6d-bde6-6bbdc9de1eb8   connection.crossplane.io/v1alpha1   0      6s\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane using Helm\nDESCRIPTION: This console snippet demonstrates how to install Crossplane v1.11.0 or later using Helm and verify the installation by checking the running pods.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nkubectl create namespace crossplane-system\nhelm repo add crossplane-master https://charts.crossplane.io/master/\nhelm repo update\nhelm install crossplane --namespace crossplane-system crossplane-master/crossplane --devel --version 1.11.0-rc.0.108.g0521c32e\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Referencing Resource by Name Reference in Crossplane\nDESCRIPTION: Example of referencing another resource by its Kubernetes resource name using nameRef in Crossplane. This demonstrates how to reference a VPC by its managed resource name instead of external ID.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcIdRef: \n      name: my-test-vpc\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Pull Secrets\nDESCRIPTION: This YAML snippet demonstrates how to configure `packagePullSecrets` for a Crossplane Configuration.  `packagePullSecrets` are used to authenticate with private container registries when pulling configuration packages.  The `name` field specifies the name of the Kubernetes secret containing the registry credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  packagePullSecrets: \n    - name: example-secret\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for AMD64 Platform\nDESCRIPTION: Command to build a Crossplane function runtime OCI image for the linux/amd64 platform using Docker. The image is tagged as 'runtime-amd64' and will be used as the runtime for the function package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/amd64 --tag runtime-amd64\n```\n\n----------------------------------------\n\nTITLE: Patching Custom Object Keys in Crossplane\nDESCRIPTION: Example of adding a tag with a custom key to a resource using string formatting and object conversion.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.clusterName\n      toFieldPath: spec.forProvider.tags\n      transforms:\n      - type: string\n        string:\n          type: Format\n          fmt: '{\"kubernetes.io/cluster/%s\": \"true\"}'\n      - type: convert\n        convert:\n          toType: object\n          format: json\n```\n\n----------------------------------------\n\nTITLE: Installing Configuration Package with Ignored Crossplane Constraints in YAML\nDESCRIPTION: This YAML snippet demonstrates how to install a Configuration package while ignoring Crossplane version constraints. It uses the 'ignoreCrossplaneConstraints' field set to true in the Configuration spec.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  ignoreCrossplaneConstraints: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Configuration Package with CLI\nDESCRIPTION: This shell command demonstrates how to build a Crossplane Configuration package using the Crossplane CLI, specifying the package root directory and output file name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build --package-root=test-directory --package-file=test-package.xpkg\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Composition Function\nDESCRIPTION: Example showing how to install a Crossplane Function package for patch-and-transform functionality.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Resolution for Configuration Packages\nDESCRIPTION: YAML configuration for disabling automatic dependency resolution when installing a Crossplane Configuration package. This requires manual installation of any dependent Providers.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  skipDependencyResolution: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Patching Individual Resource with EnvironmentConfig in YAML\nDESCRIPTION: This snippet describes how to implement in-memory environment patching for individual resources in Crossplane using YAML. It outlines how to transfer data between a resource and its environment using `ToEnvironmentFieldPath` and `FromEnvironmentFieldPath`. This allows resources to interact with pre-defined environment data effectively.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: vpc\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    spec:\n      forProvider:\n        cidrBlock: 172.16.0.0/16\n  patches:\n  - type: ToEnvironmentFieldPath\n    fromFieldPath: status.atProvider.id\n    toFieldPath: vpcId\n  - type: FromEnvironmentFieldPath\n    fromFieldPath: tags\n    toFieldPath: spec.forProvider.tags\n```\n\n----------------------------------------\n\nTITLE: Listing Composition Revisions in Shell\nDESCRIPTION: Shows how to list available composition revisions using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevision\nNAME                         REVISION   XR-KIND        XR-APIVERSION            AGE\nmy-composition-5c976ad       1          xmydatabases   example.org/v1alpha1     65m\nmy-composition-b5aa1eb       2          xmydatabases   example.org/v1alpha1     64m\n```\n\n----------------------------------------\n\nTITLE: FromCompositeFieldPath Patch Example\nDESCRIPTION: Demonstrates how to use FromCompositeFieldPath patch to apply values from a composite resource to a composed resource. This example shows applying a region value from the composite to the managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.desiredRegion\n      toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Selecting a Composition Based on Labels in YAML\nDESCRIPTION: This YAML snippet demonstrates how to select a Composition for a composite resource based on labels using the compositionSelector field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: MyDatabase\nmetadata:\n  namespace: default\n  name: my-composite-resource\nspec:\n  crossplane:\n    compositionSelector:\n      matchLabels:\n        environment: production\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing Managed Resource with Labels from Patch\nDESCRIPTION: This code shows the output of describing a bucket resource to see the secondResource label that was set by the FromCompositeFieldPath patch.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl describe bucket\nkubectl describe bucket my-example-jp7rx-fttpj\nName:         my-example-jp7rx-fttpj\nLabels:       crossplane.io/composite=my-example-jp7rx\n              secondResource=my-example-jp7rx-gfg4m\n```\n\n----------------------------------------\n\nTITLE: Setting Package Pull Policy for Configuration Packages\nDESCRIPTION: YAML configuration for specifying the package pull policy for a Crossplane Configuration. This example sets the policy to 'Always' to check for new packages every minute.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  packagePullPolicy: Always\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with External Secret Stores Enabled\nDESCRIPTION: Installs Crossplane using Helm with the External Secret Stores feature enabled.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install crossplane crossplane-stable/crossplane --namespace crossplane-system --create-namespace --set args='{--enable-external-secret-stores}'\n```\n\n----------------------------------------\n\nTITLE: Describing a Composite Resource in Shell\nDESCRIPTION: This shell command describes a specific composite resource, showing details such as the linked Composition, Composition revision, update policy, and created resource references.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe composite my-composite-resource\n```\n\n----------------------------------------\n\nTITLE: Inspecting Creation Annotations on a Managed Resource\nDESCRIPTION: Example of using kubectl to view the creation-related annotations on a managed resource, showing when the provider created the external resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl get -o yaml vpc my-vpc\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: VPC\nmetadata:\n  name: my-vpc\n  annotations:\n    crossplane.io/external-name: vpc-1234567890abcdef0\n    crossplane.io/external-create-pending: \"2023-12-18T21:48:06Z\"\n    crossplane.io/external-create-succeeded: \"2023-12-18T21:48:40Z\"\n```\n\n----------------------------------------\n\nTITLE: Combining Resource Values to Environment in Crossplane Patch\nDESCRIPTION: Shows how to use the CombineToEnvironment patch to combine multiple values from a composed resource and apply them to the in-memory EnvironmentConfig environment. This example combines the resource Kind and region to create a unique string in the environment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineToEnvironment\n      combine:\n        strategy: string\n        variables:\n        - fromFieldPath: kind\n        - fromFieldPath: spec.forProvider.region\n        string:\n          fmt: \"%s.%s\"\n      toFieldPath: key2\n```\n\n----------------------------------------\n\nTITLE: Optional Selector Labels in Crossplane Environment Configurations\nDESCRIPTION: Demonstrates how to use fromFieldPathPolicy: Optional to handle cases where the specified valueFromFieldPath field doesn't exist in the composite resource. This prevents errors when the field is missing.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/environment-configs.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            maxMatch: 4\n            sortByFieldPath: metadata.annotations[sort.by/weight]\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n                fromFieldPathPolicy: Optional\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Validating Crossplane Resources with CEL Rules (Shell)\nDESCRIPTION: This shell command demonstrates how to use the 'crossplane beta validate' command to validate Crossplane resources against CEL rules defined in XRDs. It shows the command syntax and an example of the output, including validation errors.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n`crossplane beta validate xrd.yaml xr.yaml\n[x] CEL validation error example.crossplane.io/v1beta1, Kind=XR, example : spec: Invalid value: \"object\": replicas should be in between minReplicas and maxReplicas.\nTotal 1 resources: 0 missing schemas, 0 success cases, 1 failure cases\n```\n\n----------------------------------------\n\nTITLE: Viewing XRD Conditions\nDESCRIPTION: Example output showing the conditions of an XRD, including its Established and Offered status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe xrd\nName:         xpostgresqlinstances.database.starter.org\nAPI Version:  apiextensions.crossplane.io/v1\nKind:         CompositeResourceDefinition\n# Removed for brevity\nStatus:\n  Conditions:\n    Reason:                WatchingCompositeResource\n    Status:                True\n    Type:                  Established\n    Reason:                WatchingCompositeResourceClaim\n    Status:                True\n    Type:                  Offered\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Describing Provider Conditions with kubectl\nDESCRIPTION: This YAML snippet shows the output of describing a Provider, focusing on the Status and Conditions fields which indicate the health and installation status of the Provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe provider\nName:         my-provider\nAPI Version:  pkg.crossplane.io/v1\nKind:         Provider\n# Removed for brevity\nStatus:\n  Conditions:\n    Reason:      HealthyPackageRevision\n    Status:      True\n    Type:        Healthy\n    Reason:      ActivePackageRevision\n    Status:      True\n    Type:        Installed\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Active Package Revision Status YAML\nDESCRIPTION: YAML configuration showing the status of an active but not yet fully installed Provider Package Revision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nType: Installed\nStatus: True\nReason: ActivePackageRevision\n```\n\n----------------------------------------\n\nTITLE: Custom Readiness Check with MatchString in Crossplane YAML\nDESCRIPTION: Demonstrates how to define a custom readiness check for a resource using MatchString. It checks if a specific field in the resource matches a given string value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchString\n      fieldPath: status.atProvider.state\n      matchString: \"Online\"\n```\n\n----------------------------------------\n\nTITLE: Updating Composition Spec and Label in Crossplane\nDESCRIPTION: Updates both the Composition specification (disabling DNS support) and changing the label back to 'dev'. This creates a new revision that will be used by resources with matching selectors, demonstrating how to roll out changes to specific environments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  labels:\n    channel: dev\n  name: myvpcs.aws.example.upbound.io\nspec:\n  writeConnectionSecretsToNamespace: crossplane-system\n  compositeTypeRef:\n    apiVersion: aws.example.upbound.io/v1alpha1\n    kind: MyVPC\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: my-vpc\n        base:\n          apiVersion: ec2.aws.upbound.io/v1beta1\n          kind: VPC\n          spec:\n            forProvider:\n              region: us-west-1\n              cidrBlock: 192.168.0.0/16\n              enableDnsSupport: false\n              enableDnsHostnames: true\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Claim's Resource Reference\nDESCRIPTION: Demonstrates how to check which cluster-scoped XR a claim is referencing, an important step in troubleshooting the composition hierarchy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get exampleapp example-application -o=jsonpath='{.spec.resourceRef}{\" \"}{.spec.resourceRefs}' | jq\n```\n\n----------------------------------------\n\nTITLE: Verifying Composite Resource Revisions in Shell\nDESCRIPTION: Uses kubectl to get and display Composite Resources, showing their names, sync status, revision, update policy, and match labels. This command helps verify the assignment of resources to different revisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite -o=\"custom-columns=NAME:.metadata.name,SYNCED:.status.conditions[0].status,REVISION:.spec.compositionRevisionRef.name,POLICY:.spec.compositionUpdatePolicy,MATCHLABEL:.spec.compositionRevisionSelector.matchLabels\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Storage Provider\nDESCRIPTION: YAML configuration to install the GCP Storage provider in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-storage\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-storage:v1.12.1\n```\n\n----------------------------------------\n\nTITLE: Verifying Resource Deletion in Crossplane\nDESCRIPTION: Checks that all managed resources have been successfully deleted by Crossplane after removing the VirtualMachine resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\nNo resources found\n```\n\n----------------------------------------\n\nTITLE: TerminatingCompositeResource Condition in Crossplane XRDs\nDESCRIPTION: Shows the condition format when a CompositeResourceDefinition is being terminated, with Crossplane deleting the related custom resource definitions and stopping the composite resource controller.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nType: Established\nStatus: False\nReason: TerminatingCompositeResource\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane NoSQL Resources\nDESCRIPTION: This shell command retrieves and displays the list of NoSQL resources created using the custom API.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nosql\n```\n\n----------------------------------------\n\nTITLE: Crossplane ReconcilePaused Condition Status\nDESCRIPTION: Example of the ReconcilePaused condition status showing a paused managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Synced\n  Status:                False\n  Reason:                ReconcilePaused\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Manager Base Permissions in Kubernetes YAML\nDESCRIPTION: Defines the base RBAC permissions needed by the RBAC manager to handle ProviderRevisions and manage cluster roles. Includes permissions for customresourcedefinitions, clusterroles, and coordination resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- apiGroups:\n  - pkg.crossplane.io\n  resources:\n  - providerrevisions/finalizers\n  verbs:\n  - update\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - get\n  - list\n  - watch\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret for Crossplane\nDESCRIPTION: A shell command to create a Docker registry secret that can be referenced by an ImageConfig resource. The secret must be created in the Crossplane installation namespace, typically crossplane-system.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/image-configs.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system create secret docker-registry acme-registry-credentials --docker-server=registry1.com --docker-username=<user> --docker-password=<password>\n```\n\n----------------------------------------\n\nTITLE: Math Transform with ClampMax\nDESCRIPTION: Example of math transform using clampMax to ensure a maximum value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.numberField\n    toFieldPath: metadata.annotations[\"mathAnnotation\"]\n    transforms:\n      - type: math\n        math:\n          type: clampMax\n          clampMax: 5\n```\n\n----------------------------------------\n\nTITLE: Integer Matching Readiness Check\nDESCRIPTION: Demonstrates how to configure a readiness check that matches a specific integer value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n  readinessChecks:\n    - type: MatchInteger\n      fieldPath: status.atProvider.state\n      matchInteger: 4\n```\n\n----------------------------------------\n\nTITLE: Defining App Custom Resource Structure\nDESCRIPTION: Example structure of an App custom resource showing the expected apiVersion, metadata, spec, and status fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: App\nmetadata:\n  namespace: default\n  name: my-app\nspec:\n  image: nginx\nstatus:\n  replicas: 2  # Copied from the Deployment's status\n  address: 10.0.0.1  # Copied from the Service's status\n```\n\n----------------------------------------\n\nTITLE: Setting Provider Revision Activation Policy\nDESCRIPTION: Provider configuration demonstrating how to set the revisionActivationPolicy to control Provider upgrade behavior.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  revisionActivationPolicy: Manual\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Policy for Crossplane\nDESCRIPTION: Defines a Vault policy that grants Crossplane permissions to create, read, update, and delete secrets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -i vault-0 -- vault policy write crossplane - <<EOF\npath \"secret/data/*\" {\n    capabilities = [\"create\", \"read\", \"update\", \"delete\"]\n}\npath \"secret/metadata/*\" {\n    capabilities = [\"create\", \"read\", \"update\", \"delete\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane Secrets in Shell\nDESCRIPTION: Shell command output showing the resulting secrets created by Crossplane across different namespaces, including claim secrets and resource secrets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/connection-details.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secret -A\nNAMESPACE           NAME                                   TYPE                                DATA   AGE\ndefault             my-access-key-secret                   connection.crossplane.io/v1alpha1   8      29m\ndocs                key1                                   connection.crossplane.io/v1alpha1   4      31m\ndocs                key2                                   connection.crossplane.io/v1alpha1   4      31m\nother-namespace     b0dc71f8-2688-4ebc-818a-bbad6a2c4f9a   connection.crossplane.io/v1alpha1   8      31m\n```\n\n----------------------------------------\n\nTITLE: Updating Composition Label in Shell\nDESCRIPTION: Updates the label of a Composition to 'channel: staging' using kubectl. This demonstrates how to change the channel of a Composition, which triggers the creation of a new revision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label composition myvpcs.aws.example.upbound.io channel=staging --overwrite\n```\n\n----------------------------------------\n\nTITLE: Always Ready Resources with None Type Check in Crossplane\nDESCRIPTION: This YAML snippet shows how to configure a resource to be considered ready as soon as it's created using the None readiness check type. Crossplane won't wait for any conditions before declaring the resource ready.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: None\n```\n\n----------------------------------------\n\nTITLE: Defining a Claim Resource in Crossplane\nDESCRIPTION: A YAML example showing how to define a Claim in Crossplane. The Claim is namespaced (in 'devGroup') and specifies a 'large' size in its spec.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/introduction.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Claim\napiVersion: test.example.org/v1alpha1\nkind: computeClaim\nmetadata:\n  name: myClaim\n  namespace: devGroup\nspec:\n  size: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Describing a Claim using kubectl\nDESCRIPTION: This shell command uses kubectl to describe a Claim, showing its details including the associated composite resource reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/claims.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe database.example.org/my-claimed-database\nName:         my-claimed-database\nAPI Version:  example.org/v1alpha1\nKind:         database\nSpec:\n  Resource Ref:\n    API Version:  example.org/v1alpha1\n    Kind:         XMyDatabase\n    Name:         my-claimed-database-rr4ll\n# Removed for brevity.\n```\n\n----------------------------------------\n\nTITLE: Installing Provider with ControllerConfig\nDESCRIPTION: Installs a Provider (GCP in this example) and applies the ControllerConfig for external secret stores.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp:v0.23.0-rc.0.19.ge9b75ee5\n  controllerConfigRef:\n    name: vault-config\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Applying Azure Network Provider in Crossplane\nDESCRIPTION: YAML manifest to install the Azure Network provider package in Crossplane. This provider enables Crossplane to provision and manage Azure networking resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-azure-network\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-azure-network:v1.11.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Enforcing Specific Composition in Crossplane XRD\nDESCRIPTION: This YAML snippet demonstrates how to enforce a specific Composition for all composite resources using this XRD by setting the 'enforcedCompositionRef' field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  enforcedCompositionRef: \n    name: myComposition\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Values File\nDESCRIPTION: Example of installing Crossplane using a custom values file with helm install command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/install.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n-f settings.yaml\n```\n\n----------------------------------------\n\nTITLE: Hiding Package Dependencies in CLI Output\nDESCRIPTION: This command demonstrates how to hide all package dependencies when using the beta trace command, resulting in a cleaner output that only shows the main configuration package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-dependencies none\n```\n\n----------------------------------------\n\nTITLE: Describing Composite Resource Definition in Shell\nDESCRIPTION: Shows how to get detailed information about a Composite Resource Definition (XRD), including events, using kubectl describe.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe xrd testing.awsblueprints.io\n```\n\n----------------------------------------\n\nTITLE: Matching Resources by Controller Reference in Crossplane Composition\nDESCRIPTION: Example of using matchControllerRef to ensure resources are part of the same composite resource in Crossplane. This demonstrates linking an Internet Gateway to a VPC within the same composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    name: my-vpc\n    spec:\n      forProvider:\n      # Removed for brevity\n- base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: InternetGateway\n    name: my-gateway\n    spec:\n      forProvider:\n        vpcIdSelector:\n          matchControllerRef: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Reference in Crossplane Claim\nDESCRIPTION: This YAML snippet shows how to configure a secret reference in a Crossplane Claim. It specifies the name of the secret to be created in the Claim's namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: SecretTest\nmetadata:\n  name: test-secrets\n  namespace: default\nspec:\n  writeConnectionSecretToRef:\n    name: my-access-key-secret\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Claim Resource\nDESCRIPTION: Example of a Claim resource definition showing namespace-scoped resource with size specification. Demonstrates the basic structure of a Claim including apiVersion, kind, metadata, and spec fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/introduction.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Claim\napiVersion: test.example.org/v1alpha1\nkind: computeClaim\nmetadata:\n  name: myClaim\n  namespace: devGroup\nspec:\n  size: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane Deployments\nDESCRIPTION: Retrieves and displays the Kubernetes deployments created by Crossplane in the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deployments -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Unsealing Vault Instance\nDESCRIPTION: Commands to unseal the Vault instance in Kubernetes, which is necessary for accessing encrypted data.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-injection.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nkubectl exec vault-0 -- vault operator init -key-shares=1 -key-threshold=1 -format=json > cluster-keys.json\nVAULT_UNSEAL_KEY=$(cat cluster-keys.json | jq -r \".unseal_keys_b64[]\")\nkubectl exec vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane-Generated Secrets (Shell)\nDESCRIPTION: This shell command lists all secrets across all namespaces, showing the results of applying the Composition and Claim. It displays the various secrets created by Crossplane, including individual resource secrets and the combined secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n kubectl get secret -A\nNAMESPACE           NAME                                   TYPE                                DATA   AGE\ndefault             my-access-key-secret                   connection.crossplane.io/v1alpha1   8      29m\ndocs                key1                                   connection.crossplane.io/v1alpha1   4      31m\ndocs                key2                                   connection.crossplane.io/v1alpha1   4      31m\nother-namespace     b0dc71f8-2688-4ebc-818a-bbad6a2c4f9a   connection.crossplane.io/v1alpha1   8      31m\n```\n\n----------------------------------------\n\nTITLE: Creating Usage for Deletion Protection\nDESCRIPTION: YAML configuration showing how to protect a database resource from deletion using Usage resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/usages.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: protection.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  namespace: default\n  name: protect-production-database\nspec:\n  of:\n    apiVersion: rds.m.aws.m.upbound.io/v1beta1\n    kind: Instance\n    resourceRef:\n      name: my-database\n  reason: \"Production Database - should never be deleted!\"\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Role for Crossplane Provider Pods\nDESCRIPTION: Command to create a Vault role bound to the provider-creds policy and associated with Crossplane provider service accounts.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-injection.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nvault write auth/kubernetes/role/crossplane-providers \\\n        bound_service_account_names=\"*\" \\\n        bound_service_account_namespaces=crossplane-system \\\n        policies=provider-creds \\\n        ttl=24h\n```\n\n----------------------------------------\n\nTITLE: Listing Composite Resources in Shell\nDESCRIPTION: This command shows how to list all composite resources created by Crossplane using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\n```\n\n----------------------------------------\n\nTITLE: Viewing Custom External Resource Names\nDESCRIPTION: Command output showing how the external-name reflects the custom name specified in the annotation rather than the Kubernetes resource name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get rdsinstance\nNAME                 READY   SYNCED   EXTERNAL-NAME        AGE\nmy-rds-instance      True    True     my-custom-name       11m\n```\n\n----------------------------------------\n\nTITLE: Composing RDSInstance with Namespace-Based Provider Configuration\nDESCRIPTION: Composition configuration that patches the namespace of the Claim reference to the providerConfigRef of an RDSInstance. This enables namespace-specific provider configurations for database instances.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/multi-tenant.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n...\nresources:\n- base:\n    apiVersion: database.aws.crossplane.io/v1beta1\n    kind: RDSInstance\n    spec:\n      forProvider:\n      ...\n  patches:\n  - fromFieldPath: spec.claimRef.namespace\n    toFieldPath: spec.providerConfigRef.name\n    policy:\n      fromFieldPath: Required\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Reference in Crossplane Claim (YAML)\nDESCRIPTION: This YAML snippet shows a Crossplane Claim that specifies where its connection secret should be written. It defines the name and namespace for the secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: SecretTest\nmetadata:\n  name: test-secrets\n  namespace: default\nspec:\n  writeConnectionSecretToRef:\n    name: my-access-key-secret\n```\n\n----------------------------------------\n\nTITLE: Defining CEL Validation Rules in XRD\nDESCRIPTION: Example of implementing CEL validation rules in a Crossplane XRD to validate that replica count stays within minimum and maximum bounds.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: myXR.crossplane.io\nspec:\n# Removed for brevity\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              x-kubernetes-validations:\n              - rule: \"self.minReplicas <= self.replicas && self.replicas <= self.maxReplicas\"\n                message: \"replicas should be in between minReplicas and maxReplicas.\"\n              properties:\n                minReplicas:\n                  type: integer\n                maxReplicas:\n                  type: integer\n                replicas: \n                  type: integer\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Checking XR Subresources\nDESCRIPTION: Shows how to retrieve all the composed resources created by a composite resource (XR), which helps identify issues with specific composed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xexampleapp example-application-xqlsz -o=jsonpath='{.spec.resourceRef}{\" \"}{.spec.resourceRefs}' | jq\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for AWS Credentials\nDESCRIPTION: Creates a Kubernetes secret containing AWS credentials for Crossplane to use.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric aws-secret \\\n-n crossplane-system \\\n--from-file=creds=./aws-credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Converting String to Float64 with Quantity Format in Crossplane\nDESCRIPTION: Shows how to use the convert transform with a quantity format to convert string representations of sizes (e.g., 'M' for megabyte) to float64 values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: float64\n   format: quantity\n```\n\n----------------------------------------\n\nTITLE: Healthy Package Revision Status YAML\nDESCRIPTION: YAML configuration indicating a fully installed and healthy Provider Package Revision status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nType: Healthy\nStatus: True\nReason: HealthyPackageRevision\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Pod Removal\nDESCRIPTION: Command to check that all Crossplane pods have been removed from the crossplane-system namespace after uninstallation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/uninstall.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Updating Composition Label to Staging Channel\nDESCRIPTION: Labels the Composition with the staging channel to trigger a new CompositionRevision\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label composition myvpcs.aws.example.upbound.io channel=staging --overwrite\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane CLI using curl script\nDESCRIPTION: This command downloads and executes a script to install the latest version of the Crossplane CLI for the user's CPU architecture. It uses the 'preview' channel for installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh\" | XP_CHANNEL=preview sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provider Authentication\nDESCRIPTION: YAML configuration to set up the Azure ProviderConfig with credentials reference for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: azure.upbound.io/v1beta1\nmetadata:\n  name: default\nkind: ProviderConfig\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: azure-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Selecting Composition Revisions Based on Labels in YAML\nDESCRIPTION: This YAML snippet shows how to select Composition revisions for a composite resource based on labels using the compositionRevisionSelector field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: MyDatabase\nmetadata:\n  namespace: default\n  name: my-composite-resource\nspec:\n  crossplane:\n    compositionRevisionSelector:\n      matchLabels:\n        channel: dev\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane PubSub Resources\nDESCRIPTION: This shell command retrieves the list of PubSub resources in the cluster, showing their sync and ready status, as well as the associated Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pubsub\n```\n\n----------------------------------------\n\nTITLE: Converting ControllerConfig to DeploymentRuntimeConfig in Crossplane\nDESCRIPTION: This command converts a ControllerConfig to a DeploymentRuntimeConfig using the crossplane beta convert command, specifying input and output files.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta convert deployment-runtime controllerConfig.yaml -o deploymentConfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Optional Labels in Crossplane Composition (YAML)\nDESCRIPTION: This snippet shows how to set default values for optional labels in a Crossplane Composition. It defines a default value using a 'Value' selector, followed by an 'Optional' 'FromCompositeFieldPath' selector.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/environment-configs.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n          - type: Selector\n            selector:\n              matchLabels:\n                - key: my-first-label-key\n                  type: Value\n                  value: my-label-value\n                - key: my-second-label-key\n                  type: Value\n                  value: my-default-value\n                - key: my-second-label-key\n                  type: FromCompositeFieldPath\n                  valueFromFieldPath: spec.parameters.deploy\n                  fromFieldPathPolicy: Optional\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with Usage Resource\nDESCRIPTION: YAML configuration showing how to use selectors with labels and controller references in Usage resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/usages.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: protection.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  namespace: default\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.m.upbound.io/v1beta1\n    kind: Cluster\n    resourceSelector:\n      matchControllerRef: false\n      matchLabels:\n        foo: bar\n  by:\n    apiVersion: helm.m.crossplane.io/v1beta1\n    kind: Release\n    resourceSelector:\n       matchLabels:\n          baz: qux\n```\n\n----------------------------------------\n\nTITLE: Monitoring S3 Bucket Provisioning in Crossplane\nDESCRIPTION: Watches the Bucket resource to monitor its provisioning progress. The -w flag enables continuous monitoring of the resource status as it changes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nkubectl get bucket -w\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Templates\nDESCRIPTION: Example of defining resource templates for an S3 Bucket and EC2 Instance in the function input.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: storage-bucket\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: \"us-east-2\"\n- name: vm\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: Instance\n    spec:\n      forProvider:\n        ami: ami-0d9858aa3c6322f73\n        instanceType: t2.micro\n        region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Managed Resources\nDESCRIPTION: This shell command retrieves the list of managed resources created by Crossplane, showing individual GCP resources like Topics and Buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Editing Crossplane Deployment Configuration\nDESCRIPTION: YAML example showing how to edit the Crossplane deployment to modify pod arguments like sync-interval.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/pods.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --sync-interval=30m\n```\n\n----------------------------------------\n\nTITLE: Converting Field Types in Crossplane\nDESCRIPTION: Shows how to use the convert transform to change a number field to a string when applying patches.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n- type: FromCompositeFieldPath\n  fromFieldPath: spec.numberField\n  toFieldPath: metadata.label[\"numberToString\"]\n  transforms:\n    - type: convert\n      convert:\n        toType: string\n```\n\n----------------------------------------\n\nTITLE: Running Crossplane Beta Trace Command for AWS Platform Reference\nDESCRIPTION: This snippet demonstrates the default output of the 'crossplane beta trace' command for a 'cluster' claim from the AWS reference platform. It shows the hierarchy of resources, their versions, installation status, health, and state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace cluster.aws.platformref.upbound.io platform-ref-aws\n```\n\n----------------------------------------\n\nTITLE: Converting with Quantity Format in Crossplane\nDESCRIPTION: Shows how to use quantity format when converting strings to float64, useful for handling size suffixes like M for megabyte.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: float64\n   format: quantity\n```\n\n----------------------------------------\n\nTITLE: Required Field Path Policy in Crossplane\nDESCRIPTION: Shows how to configure a required fromFieldPath policy that ensures the source field exists.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    policy:\n      fromFieldPath: Required\n```\n\n----------------------------------------\n\nTITLE: Validating Resources Against Provider Schema\nDESCRIPTION: Example of using the 'crossplane beta validate' command to validate a managed resource against a provider's schema.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta validate provider.yaml managedResource.yaml\n```\n\n----------------------------------------\n\nTITLE: Default External Resource Naming\nDESCRIPTION: Example showing how managed resources by default use the same name in the external provider as their Kubernetes object name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: my-rds-instance\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider with Version Constraints\nDESCRIPTION: Example of installing a Provider package while ignoring Crossplane version constraints using the ignoreCrossplaneConstraints field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  ignoreCrossplaneConstraints: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Master Helm Chart\nDESCRIPTION: This snippet demonstrates how to install the Crossplane master Helm chart. It creates a new namespace 'crossplane-system' and installs Crossplane into it using the master channel, which may contain unstable, pre-release versions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/install.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-master/crossplane \\\n--devel\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Secret Keys in a Composite Resource Definition\nDESCRIPTION: This YAML snippet shows how to restrict which secret keys are passed to Claims by configuring the connectionSecretKeys list in a CompositeResourceDefinition, limiting the exposed keys to only those specifically listed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CompositeResourceDefinition\nspec:\n  # Removed for brevity.\n  connectionSecretKeys:\n    - username\n    - password\n    - key2-user\n```\n\n----------------------------------------\n\nTITLE: Printing Package Revisions with Crossplane CLI\nDESCRIPTION: Example of using the 'crossplane beta trace' command to show all package revisions, including active and inactive ones, using the '--show-package-revisions all' flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-revisions all\n```\n\n----------------------------------------\n\nTITLE: Configuring Deletion Ordering Usage\nDESCRIPTION: YAML configuration for managing deletion order between cluster and prometheus chart resources using a Usage resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/usages.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1alpha1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n      name: my-cluster\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n      name: my-prometheus-chart\n```\n\n----------------------------------------\n\nTITLE: Configuring EnvironmentConfig Match Limits\nDESCRIPTION: Example showing how to configure maximum matches and sorting options for EnvironmentConfig selection.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/environment-configs.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            maxMatch: 4\n            sortByFieldPath: metadata.annotations[sort.by/weight]\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Webhooks Service\nDESCRIPTION: Defines a Kubernetes Service for Crossplane webhooks that listens on port 9443 and routes traffic to matching pods.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: crossplane-webhooks\n  namespace: default\n  labels:\n    app: crossplane\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  selector:\n    app: crossplane\n    release: crossplane\n  ports:\n  - protocol: TCP\n    port: 9443\n    targetPort: 9443\n```\n\n----------------------------------------\n\nTITLE: Selecting EnvironmentConfig by Label in Crossplane Composition\nDESCRIPTION: This YAML snippet shows how to select an EnvironmentConfig by labels in a Crossplane Composition. It demonstrates using both 'Value' and 'FromCompositeFieldPath' types for label matching.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/environment-configs.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector: \n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: LastAsyncOperation Success Condition Example in YAML\nDESCRIPTION: Shows the format of a 'LastAsyncOperation' condition with 'Success' reason, indicating the Provider successfully created the managed resource asynchronously.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  LastAsyncOperation\n  Status:                True\n  Reason:                Success\n```\n\n----------------------------------------\n\nTITLE: Creating AWS AccessKey Managed Resource with Connection Secret\nDESCRIPTION: Example of creating an individual AWS IAM AccessKey managed resource that writes connection secrets to a Kubernetes secret. This shows the direct approach without using Compositions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: iam.aws.upbound.io/v1beta1\nkind: AccessKey\nmetadata:\n    name: test-accesskey\nspec:\n    forProvider:\n        userSelector:\n            matchLabels:\n                docs.crossplane.io: user\n    writeConnectionSecretToRef:\n        namespace: default\n        name: my-accesskey-secret\n```\n\n----------------------------------------\n\nTITLE: Patching Composition in Kubernetes YAML\nDESCRIPTION: This snippet defines a `Composition` resource in Kubernetes YAML. It patches the `providerConfigRef.name` field of an `RDSInstance` to match the namespace of the claim, ensuring that resources created in a specific namespace use the corresponding `ProviderConfig`.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/multi-tenant.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n...\nresources:\n- base:\n    apiVersion: database.aws.crossplane.io/v1beta1\n    kind: RDSInstance\n    spec:\n      forProvider:\n      ...\n  patches:\n  - fromFieldPath: spec.claimRef.namespace\n    toFieldPath: spec.providerConfigRef.name\n    policy:\n      fromFieldPath: Required\n```\n```\n\n----------------------------------------\n\nTITLE: Inspecting Composite Resource Details\nDESCRIPTION: Shell command and output showing how to view composite resource details including the Claim reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/claims.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe xmydatabase.example.org/my-claimed-database-rr4ll\nName:         my-claimed-database-rr4ll\nAPI Version:  example.org/v1alpha1\nKind:         XMyDatabase\nSpec:\n  Claim Ref:\n    API Version:  example.org/v1alpha1\n    Kind:         database\n    Name:         my-claimed-database\n    Namespace:    default\n```\n\n----------------------------------------\n\nTITLE: Crossplane Available Condition Example\nDESCRIPTION: Shows the condition structure when a managed resource is available and ready for use.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Ready\n  Status:                True\n  Reason:                Available\n```\n\n----------------------------------------\n\nTITLE: Mock Observed Resource for Crossplane Render\nDESCRIPTION: An example YAML file that can be used with the '--observed-resources' flag to provide mock data for a managed resource during local rendering of composite resources with composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: ComposedResource\nmetadata:\n  name: test-render-b\n  annotations:\n    crossplane.io/composition-resource-name: resource-b\nspec:\n  coolerField: \"I'm cooler!\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Empty Connection Secret\nDESCRIPTION: This shows the result of describing a Crossplane-generated connection secret that doesn't contain any data because no connection details were specified in the Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe secret 70975471-c44f-4f6d-bde6-6bbdc9de1eb8 -n other-namespace\nName:         70975471-c44f-4f6d-bde6-6bbdc9de1eb8\nNamespace:    other-namespace\n\nType:  connection.crossplane.io/v1alpha1\n\nData\n====\n```\n\n----------------------------------------\n\nTITLE: AWS IAM AccessKey Managed Resource Definition\nDESCRIPTION: This YAML file defines an AWS IAM AccessKey managed resource that can be validated against the provider schema using the beta validate command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: iam.aws.upbound.io/v1beta1\nkind: AccessKey\nmetadata:\n  name: sample-access-key-0\nspec:\n  forProvider:\n    userSelector:\n      matchLabels:\n        example-name: test-user-0\n```\n\n----------------------------------------\n\nTITLE: Describing a PostgreSQL Instance Claim in Crossplane\nDESCRIPTION: This command uses kubectl to describe a PostgreSQL instance claim named 'my-db', which is the starting point for debugging Crossplane resources. The output provides information about the claim's status and a reference to its underlying XR (composite resource).\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# Describe the PostgreSQLInstance claim named my-db\nkubectl describe postgresqlinstance.database.example.org my-db\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Package with xpkg init\nDESCRIPTION: The xpkg init command populates the current directory with files to build a package. It requires a name and template as inputs. The template can be one of the well-known templates or a git repository URL.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg init <name> <template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Pull Policy for Provider Installation\nDESCRIPTION: This YAML snippet configures the packagePullPolicy to 'Always' for a Provider, forcing Crossplane to check for new packages every minute and download any matching package that isn't in the cache.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  packagePullPolicy: Always\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Claim Names in XRD\nDESCRIPTION: Example showing how to configure claim names in a Composite Resource Definition to enable claim creation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/introduction.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource Definition (XRD)\nspec:\n  group: test.example.org\n  names:\n    kind: MyComputeResource\n  claimNames:\n    kind: computeClaim\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Using Crossplane Render Command for End-to-End Testing\nDESCRIPTION: This command uses the Crossplane CLI's render command to test a function end-to-end by providing the composite resource, composition, and function YAML files. It calls the locally running function and displays the resulting resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository Cache\nDESCRIPTION: Updates the local Helm chart cache to ensure access to the latest Crossplane versions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Definition in Crossplane\nDESCRIPTION: This YAML snippet shows a Composite Resource Definition, which outlines the apiVersion, kind, and schema for a Composite Resource. The schema details possible storage size options enforced by OpenAPI.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/introduction.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  group: test.example.org\n  names:\n    kind: MyComputeResource\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              storage:\n                type: string\n                oneOf:\n                  - pattern: '^small$'\n                  - pattern: '^large$'\n            required:\n            - storage\n\n```\n\n----------------------------------------\n\nTITLE: Setting External Resource Names in Crossplane\nDESCRIPTION: YAML configuration showing how to set custom external names for resources using annotations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\n  annotations: \n    crossplane.io/external-name: my-custom-name\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Claims\nDESCRIPTION: This shell command retrieves and displays the list of Crossplane Claims in the crossplane-test namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get claim -n crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Listing Vault Secrets in Default Namespace\nDESCRIPTION: Lists the secrets stored in Vault's default namespace, showing the claim connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -i vault-0 -- vault kv list /secret/default\n```\n\n----------------------------------------\n\nTITLE: Verifying CompositeResourceDefinition Status with kubectl\nDESCRIPTION: This command demonstrates how to verify the status of a CompositeResourceDefinition (XRD) using kubectl. The output shows the ESTABLISHED and OFFERED status flags that indicate whether the XRD and its Claims are properly installed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl get xrd                                \nNAME                                ESTABLISHED   OFFERED   AGE\nxdatabases.custom-api.example.org   True          True      22m\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Plugin Pod Annotations\nDESCRIPTION: Creates a values.yaml file with annotations for the Vault plugin pod.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncat > values.yaml <<EOF\npodAnnotations:\n  vault.hashicorp.com/agent-inject: \"true\"\n  vault.hashicorp.com/agent-inject-token: \"true\"\n  vault.hashicorp.com/role: crossplane\n  vault.hashicorp.com/agent-run-as-user: \"65532\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Deleting Crossplane Claims\nDESCRIPTION: This shell command deletes a Crossplane claim from a specific namespace, which also deletes associated composite and managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete pubsubclaim my-pubsub-queue -n crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Individual Resource Environment Patches\nDESCRIPTION: Example showing how to patch between an individual resource and the in-memory environment using ToEnvironmentFieldPath and FromEnvironmentFieldPath.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: vpc\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    spec:\n      forProvider:\n        cidrBlock: 172.16.0.0/16\n  patches:\n  - type: ToEnvironmentFieldPath\n    fromFieldPath: status.atProvider.id\n    toFieldPath: vpcId\n  - type: FromEnvironmentFieldPath\n    fromFieldPath: tags\n    toFieldPath: spec.forProvider.tags\n```\n\n----------------------------------------\n\nTITLE: XBuckets Composite Resource Definition in YAML\nDESCRIPTION: A YAML definition of an XBuckets custom resource that specifies a region and an array of bucket names. This resource will be processed by the Python composition function to create multiple AWS S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Selecting a Composition Using Labels in Crossplane\nDESCRIPTION: This snippet demonstrates how to select a Composition based on labels using the compositionSelector field, which allows for more flexible Composition selection based on environment or other characteristics.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionSelector:\n    matchLabels:\n      environment: production\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating XR with Staging Channel Selector in YAML\nDESCRIPTION: Creates an XR (Crossplane Resource) with a compositionRevisionSelector set to the 'staging' channel. This shows how to target a different revision channel for another resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  name: vpc-staging\nspec:\n  id: vpc-staging\n  compositionRevisionSelector:\n    matchLabels:\n      channel: staging\n```\n\n----------------------------------------\n\nTITLE: Rendering Crossplane Composition Resources with CLI\nDESCRIPTION: Command to use the Crossplane CLI to render resources using a local composition function, showing how end-to-end testing works.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Printing Connection Secrets with Crossplane Beta Trace\nDESCRIPTION: This snippet shows how to use the '-s' option to include connection secret names in the output. It displays the secret names along with their namespaces, without revealing the actual secret values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws -s\n```\n\n----------------------------------------\n\nTITLE: Viewing Composite Resource with Applied ToCompositeFieldPath Patch\nDESCRIPTION: This snippet demonstrates the result of applying a ToCompositeFieldPath patch, showing the label that has been added to the composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl describe composite\nName:         my-example-claim-p5pxf\nLabels:       ZoneID=Z2O1EMRO9K5GLX\n```\n\n----------------------------------------\n\nTITLE: Math Transform Base Configuration\nDESCRIPTION: Basic structure for math transformations that support integer operations like multiplication and value clamping.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.numberField\n    toFieldPath: metadata.annotations[\"mathAnnotation\"]\n    transforms:\n      - type: math\n        math:\n          ...\n```\n\n----------------------------------------\n\nTITLE: Creating User ProviderConfig for AWS in YAML\nDESCRIPTION: This snippet demonstrates creating a ProviderConfig named 'user-keys' for AWS, using a specific Kubernetes secret for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: user-keys\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: my-key\n      key: secret-key\n```\n\n----------------------------------------\n\nTITLE: Match Transform Pattern Structure\nDESCRIPTION: Shows the basic structure of a match transform with patterns support.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n```\n\n----------------------------------------\n\nTITLE: Using Convert Transform in Crossplane Patch\nDESCRIPTION: Demonstrates the usage of a convert transform in a Crossplane patch. This example converts a number field to a string and applies it as a label.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n- type: FromCompositeFieldPath\n  fromFieldPath: spec.numberField\n  toFieldPath: metadata.label[\"numberToString\"]\n  transforms:\n    - type: convert\n      convert:\n        toType: string\n```\n\n----------------------------------------\n\nTITLE: Validating CEL Rules with Crossplane CLI\nDESCRIPTION: This snippet shows the command and output when using 'crossplane beta validate' to validate an XR against CEL rules defined in an XRD. The validation fails because the replicas value exceeds maxReplicas as per the CEL rule.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n`crossplane beta validate xrd.yaml xr.yaml\n[x] CEL validation error example.crossplane.io/v1beta1, Kind=XR, example : spec: Invalid value: \"object\": replicas should be in between minReplicas and maxReplicas.\nTotal 1 resources: 0 missing schemas, 0 success cases, 1 failure cases\n```\n\n----------------------------------------\n\nTITLE: Crossplane Deleting Condition Status\nDESCRIPTION: Example of the Deleting condition status indicating a resource is being deleted.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Ready\n  Status:                False\n  Reason:                Deleting\n```\n\n----------------------------------------\n\nTITLE: Upgrading Crossplane Installation\nDESCRIPTION: Command to upgrade Crossplane in the crossplane-system namespace using the preview chart.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/upgrade-crossplane.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade crossplane --namespace crossplane-system crossplane-preview/crossplane --devel\n```\n\n----------------------------------------\n\nTITLE: Defining Composed Resource Secrets in YAML\nDESCRIPTION: This YAML snippet shows how to define writeConnectionSecretToRef for a composed resource within a Composition. It specifies the namespace and name for the secret object of an individual resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          apiVersion: iam.aws.upbound.io/v1beta1\n          kind: AccessKey\n          spec:\n            forProvider:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n```\n\n----------------------------------------\n\nTITLE: Using Crossplane xpkg update Command\nDESCRIPTION: Command to update an existing Crossplane package with a newer version. Example shows updating the AWS S3 provider package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg update provider xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket Resource Definition\nDESCRIPTION: YAML definition for creating an S3 bucket managed resource in Crossplane, specifying the bucket location in us-east-2 region.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-managed-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.m.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  namespace: default\n  name: crossplane-bucket-example\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Resolution for Crossplane Configuration\nDESCRIPTION: This YAML snippet demonstrates how to disable dependency resolution for a Crossplane Configuration package, ignoring listed dependencies.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  skipDependencyResolution: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMap for CA Bundle\nDESCRIPTION: Command to create a Kubernetes ConfigMap in the Crossplane system namespace containing the CA bundle configuration file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/self-signed-ca-certs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n [Crossplane system namespace] create cm ca-bundle-config \\\n--from-file=ca-bundle=./[yourdomain].ca-bundle\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provider with ProviderConfig\nDESCRIPTION: This YAML snippet creates a ProviderConfig custom resource for the Azure provider. It specifies the credentials to be used, referencing the previously created Kubernetes secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: azure.upbound.io/v1beta1\nmetadata:\n  name: default\nkind: ProviderConfig\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: azure-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane RBAC Manager Deployment in Kubernetes\nDESCRIPTION: This YAML manifest defines the Deployment for Crossplane's RBAC manager component. It specifies container configurations, resource limits, security contexts, and environmental variables for proper operation within a Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: crossplane/templates/rbac-manager-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: crossplane-rbac-manager\n  namespace: default\n  labels:\n    app: crossplane-rbac-manager\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: crossplane-rbac-manager\n      release: crossplane\n  strategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: crossplane-rbac-manager\n        release: crossplane\n        helm.sh/chart: crossplane-1.15.0\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: cloud-infrastructure-controller\n        app.kubernetes.io/part-of: crossplane\n        app.kubernetes.io/name: crossplane\n        app.kubernetes.io/instance: crossplane\n        app.kubernetes.io/version: \"1.15.0\"\n    spec:\n      serviceAccountName: rbac-manager\n      initContainers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - rbac\n        - init\n        imagePullPolicy: IfNotPresent\n        name: crossplane-init\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.cpu\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.memory\n      containers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - rbac\n        - start\n        - --provider-clusterrole=crossplane:allowed-provider-permissions\n        imagePullPolicy: IfNotPresent\n        name: crossplane\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.cpu\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.memory\n          - name: LEADER_ELECTION\n            value: \"true\"\n\nNOTES:\nRelease: crossplane\n\nChart Name: crossplane\nChart Description: Crossplane is an open source Kubernetes add-on that enables platform teams to assemble infrastructure from multiple vendors, and expose higher level self-service APIs for application teams to consume.\nChart Version: 1.15.0\nChart Application Version: 1.15.0\n\nKube Version: v1.27.3\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for AMD64 Platform\nDESCRIPTION: This command builds a Crossplane package for AMD64 architecture by embedding the previously built runtime image. It specifies the package root directory containing crossplane.yaml metadata and outputs the result to function-amd64.xpkg.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-amd64 \\\n    --package-file=function-amd64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Crossplane Unavailable Condition Example\nDESCRIPTION: Shows the condition structure when a managed resource is expected to be available but the provider reports it as unhealthy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Ready\n  Status:                False\n  Reason:                Unavailable\n```\n\n----------------------------------------\n\nTITLE: Checking Provider Status in Crossplane\nDESCRIPTION: A shell command to verify that the GCP Provider has been properly installed and is in a healthy state within Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\nNAME           INSTALLED   HEALTHY   PACKAGE                                                                     AGE\nprovider-gcp   True        True      xpkg.crossplane.io/crossplane-contrib/provider-gcp:v0.23.0-rc.0.19.ge9b75ee5   10m\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Using Helm\nDESCRIPTION: Command to install Crossplane using Helm, creating it in the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-stable/crossplane\n```\n\n----------------------------------------\n\nTITLE: Examining an Empty Crossplane Connection Secret\nDESCRIPTION: This YAML snippet shows the result of examining a Crossplane-generated connection secret that doesn't have any data, demonstrating that by default Crossplane creates a secret object but doesn't populate it with data.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe secret 70975471-c44f-4f6d-bde6-6bbdc9de1eb8 -n other-namespace\nName:         70975471-c44f-4f6d-bde6-6bbdc9de1eb8\nNamespace:    other-namespace\n\nType:  connection.crossplane.io/v1alpha1\n\nData\n====\n```\n\n----------------------------------------\n\nTITLE: Crossplane Available Condition Status\nDESCRIPTION: Example of the Available condition status indicating a successfully created and ready managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Ready\n  Status:                True\n  Reason:                Available\n```\n\n----------------------------------------\n\nTITLE: Creating Patch Configuration in Composition for External Names\nDESCRIPTION: This YAML snippet shows how to configure a Composition using function-patch-and-transform to copy annotations from the composite resource to the managed resource, allowing external names to be propagated correctly.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: my-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: database\n        base:\n          # Removed for brevity\n        patches:\n        - fromFieldPath: metadata.annotations\n          toFieldPath: metadata.annotations\n```\n\n----------------------------------------\n\nTITLE: Viewing Claim Secret with Restricted Keys\nDESCRIPTION: This shell output shows the result of describing a Claim's secret, which only contains the keys allowed by the XRD's connectionSecretKeys configuration, filtering out other keys that might be available in the individual resource secrets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret my-access-key-secret\nName:         my-access-key-secret\n\nData\n====\nkey2-user:  20 bytes\npassword:   40 bytes\nusername:   20 bytes\n```\n\n----------------------------------------\n\nTITLE: Installing specific Crossplane CLI version\nDESCRIPTION: This command demonstrates how to install a specific version (v1.14.0) of the Crossplane CLI using the installation script. It uses the XP_VERSION environment variable to specify the desired version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh\" | XP_VERSION=v1.14.0 sh\n```\n\n----------------------------------------\n\nTITLE: Viewing Configuration Revisions\nDESCRIPTION: This shell command shows how to view configuration revisions using `kubectl`. This allows you to see the history of installed configuration packages, including their health, revision number, image location, state, and dependency information.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configurationrevisions\n```\n\n----------------------------------------\n\nTITLE: Updating the Helm Chart Repository Cache\nDESCRIPTION: Command to update the local Helm chart cache after adding the Crossplane repository.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Skipping Provider Package Dependency Resolution\nDESCRIPTION: Shows how to disable automatic dependency resolution for a Crossplane Provider package\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  skipDependencyResolution: true\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Pod Removal\nDESCRIPTION: This command checks if there are any remaining Crossplane pods in the crossplane-system namespace after uninstallation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/uninstall.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Checking Composite Resource Definition Status\nDESCRIPTION: Command to verify that the Composite Resource Definition (XRD) for the PubSub API has been established in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd\n```\n\n----------------------------------------\n\nTITLE: Composition Function Workflow Diagram\nDESCRIPTION: Mermaid sequence diagram showing the interaction flow between User, API Server, Crossplane Pod, and Function Pod during composition function execution.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    User->>+API Server: Create composite resource\n    Crossplane Pod->>+API Server: Observe composite resource\n    Crossplane Pod->>+Function Pod: gRPC RunFunctionRequest\n    Function Pod->>+Crossplane Pod: gRPC RunFunctionResponse\n    loop Extra resources needed?\n      Crossplane Pod->>+API Server: Get Extra resources\n      Crossplane Pod->>+Function Pod: gRPC RunFunctionRequest\n      Function Pod->>+Crossplane Pod: gRPC RunFunctionResponse\n    end\n    Crossplane Pod->>+API Server: Apply desired composed resources\n```\n\n----------------------------------------\n\nTITLE: Creating ESS Claim in Crossplane\nDESCRIPTION: This snippet creates a Claim resource that references the composition to create GCP resources. It includes parameters for the service account and configures connection details to be published to Vault using the specified StoreConfig.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: ess.example.org/v1alpha1\nkind: ESSInstance\nmetadata:\n  name: my-ess\n  namespace: default\nspec:\n  parameters:\n    serviceAccount: ess-test-sa\n  compositionSelector:\n    matchLabels:\n      feature: ess\n  publishConnectionDetailsTo:\n    name: ess-claim-conn\n    metadata:\n      labels:\n        environment: development\n        team: backend\n    configRef:\n      name: vault\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Customizing Crossplane Upgrade with Helm\nDESCRIPTION: This command demonstrates how to customize the Crossplane upgrade process. In this example, it overrides the default image registry to maintain the original setting when upgrading from a version before v1.20.0.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/upgrade.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade crossplane --namespace crossplane-system crossplane-stable/crossplane --set 'args={\"--registry=index.docker.io\"}'\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Definition Allowing Claims\nDESCRIPTION: This snippet from a Composite Resource Definition includes claimNames to allow developers to create Claims, which facilitates namespace-scoped resource creation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/introduction.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  group: test.example.org\n  names:\n    kind: MyComputeResource\n  claimNames:\n    kind: computeClaim\n  # Removed for brevity\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Composition by Labels in Crossplane\nDESCRIPTION: YAML configuration demonstrating how to select a Composition using label matching.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionSelector:\n    matchLabels:\n      environment: production\n```\n\n----------------------------------------\n\nTITLE: Monitoring S3 Bucket Provisioning\nDESCRIPTION: This command allows monitoring the progress of the S3 Bucket provisioning by watching the resource status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nkubectl get bucket -w\n```\n\n----------------------------------------\n\nTITLE: Enabling Real-time Compositions in Crossplane Deployment\nDESCRIPTION: This YAML snippet demonstrates how to edit the Crossplane deployment to enable real-time compositions by adding the --enable-realtime-compositions flag to the container arguments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/pods.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --enable-realtime-compositions\n```\n\n----------------------------------------\n\nTITLE: Retrieving Composite Resources with kubectl in Crossplane\nDESCRIPTION: This command retrieves the composite resources created by Crossplane using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\n```\n\n----------------------------------------\n\nTITLE: Checking Provider Installation Status\nDESCRIPTION: Shell command and output showing the status of installed Azure providers in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\nNAME                                       INSTALLED   HEALTHY   PACKAGE                                                                AGE\ncrossplane-contrib-provider-family-azure   True        True      xpkg.crossplane.io/crossplane-contrib/provider-family-azure:v1.11.2    2m18s\nprovider-azure-network                     True        True      xpkg.crossplane.io/crossplane-contrib/provider-azure-network:v1.11.2   2m23s\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Policy for Crossplane\nDESCRIPTION: Creates a Vault policy to allow Crossplane to read and write data.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -i vault-0 -- vault policy write crossplane - <<EOF\npath \"secret/data/*\" {\n    capabilities = [\"create\", \"read\", \"update\", \"delete\"]\n}\npath \"secret/metadata/*\" {\n    capabilities = [\"create\", \"read\", \"update\", \"delete\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating CompositeResourceDefinition for Custom API Endpoint in Crossplane\nDESCRIPTION: This YAML snippet defines a CompositeResourceDefinition to create a custom API endpoint for ESS instances. It specifies the API group, resource names, claim names, and schema for the custom resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: compositeessinstances.ess.example.org\n  annotations:\n    feature: ess\nspec:\n  group: ess.example.org\n  names:\n    kind: CompositeESSInstance\n    plural: compositeessinstances\n  claimNames:\n    kind: ESSInstance\n    plural: essinstances\n  connectionSecretKeys:\n    - publicKey\n    - publicKeyType\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              parameters:\n                type: object\n                properties:\n                  serviceAccount:\n                    type: string\n                required:\n                  - serviceAccount\n            required:\n              - parameters\n```\n\n----------------------------------------\n\nTITLE: Updating Composition Spec and Label in YAML\nDESCRIPTION: Updates both the specification and label of a Composition. This YAML snippet disables DNS support in the VPC and changes the label back to 'dev', demonstrating how to make multiple changes in one update.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  labels:\n    channel: dev\n  name: myvpcs.aws.example.upbound.io\nspec:\n  writeConnectionSecretsToNamespace: crossplane-system\n  compositeTypeRef:\n    apiVersion: aws.example.upbound.io/v1alpha1\n    kind: MyVPC\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: my-vpc\n        base:\n          apiVersion: ec2.aws.upbound.io/v1beta1\n          kind: VPC\n          spec:\n            forProvider:\n              region: us-west-1\n              cidrBlock: 192.168.0.0/16\n              enableDnsSupport: false\n              enableDnsHostnames: true\n```\n\n----------------------------------------\n\nTITLE: Viewing Composed Secrets in Shell\nDESCRIPTION: This shell command shows how to view the secrets created by Crossplane for composed resources in a specific namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secrets -n docs\n```\n\n----------------------------------------\n\nTITLE: Pushing Multi-Platform Package to Registry\nDESCRIPTION: Command to push both AMD64 and ARM64 package files to a registry using the Crossplane CLI. This creates a multi-platform package that can run on both linux/arm64 and linux/amd64 hosts under a single tag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg push \\\n  --package-files=function-amd64.xpkg,function-arm64.xpkg \\\n  negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Compositions\nDESCRIPTION: This shell command lists all Crossplane Compositions in the cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\n```\n\n----------------------------------------\n\nTITLE: Match Transform with Default Value\nDESCRIPTION: Shows how to configure a fallback value when no patterns match in a match transform.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n              literal: \"UnknownString\"\n              result: \"foundField1\"\n          fallbackTo: Value\n          fallbackValue: \"StringNotFound\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Provider Installation with kubectl\nDESCRIPTION: Retrieves all installed Providers to verify successful installation of the AWS S3 provider and the AWS family provider that manages authentication across AWS providers.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Example Composite Resource Render Output\nDESCRIPTION: Sample YAML output showing a rendered composite resource with managed resources generated by a composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: nopexample.org/v1\nkind: XBucket\nmetadata:\n  name: test-xrender\nstatus:\n  bucketRegion: us-east-2\n---\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  annotations:\n    crossplane.io/composition-resource-name: my-bucket\n  generateName: test-xrender-\n  labels:\n    crossplane.io/composite: test-xrender\n  ownerReferences:\n  - apiVersion: nopexample.org/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: XBucket\n    name: test-xrender\n    uid: \"\"\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Status for Patching Between Resources\nDESCRIPTION: Partial example of defining a custom status field in a CompositeResourceDefinition for patching between resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CompositeResourceDefinition\n```\n\n----------------------------------------\n\nTITLE: Creating a Usage for Deletion Ordering in Crossplane\nDESCRIPTION: Usage definition that establishes a deletion order between resources. This example prevents deletion of an EKS cluster until a Helm release that depends on it is deleted first.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/usages.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n      name: my-cluster\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n      name: my-prometheus-chart\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane CLI using curl\nDESCRIPTION: Downloads and installs the latest version of Crossplane CLI using a shell script that automatically detects CPU architecture.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh\" | sh\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Provider in Kubernetes\nDESCRIPTION: YAML configuration to install the AWS S3 Provider package into a Kubernetes cluster with Crossplane. This defines the provider package source and version to be used.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-s3\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Schema Validation\nDESCRIPTION: Example directory structure for Crossplane schema validation. This shows how to organize XRD and Provider schemas in a directory structure that can be used with the 'crossplane beta validate' command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ntree\nschemas\n|-- platform-ref-aws.yaml\n|-- providers\n|   |-- a.txt\n|   `-- provider-aws-iam.yaml\n`-- xrds\n    `-- xrd.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository Cache\nDESCRIPTION: Updates the local Helm chart repository cache to ensure the latest Crossplane chart information is available.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Installing a Crossplane Configuration with Image Digest\nDESCRIPTION: This YAML snippet shows how to install a Crossplane Configuration package using an image digest for deterministic installations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: configuration-quickstart\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/configuration-quickstart@sha256:ef9795d146190637351a5c5848e0bab5e0c190fec7780f6c426fbffa0cb68358\n```\n\n----------------------------------------\n\nTITLE: Tracing with Secret Names\nDESCRIPTION: Shows how to trace configuration including connection secret names and their namespaces using the -s flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws -s\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Metadata and Dependencies in YAML\nDESCRIPTION: This YAML file (crossplane.yaml) defines the metadata and dependencies for a Crossplane Configuration package. It specifies the package name, required provider, and minimum Crossplane version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n$ cat crossplane.yaml\napiVersion: meta.pkg.crossplane.io/v1alpha1\nkind: Configuration\nmetadata:\n  name: test-configuration\nspec:\n  dependsOn:\n    - apiVersion: pkg.crossplane.io/v1\n      kind: Provider\n      package: xpkg.crossplane.io/crossplane-contrib/provider-aws\n      version: \">=v0.36.0\"\n  crossplane:\n    version: \">=v1.12.1-0\"\n```\n\n----------------------------------------\n\nTITLE: Upjet AsyncOperation Finished Condition Example\nDESCRIPTION: Shows the condition structure when an asynchronous operation has completed successfully in an Upjet-based provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  AsyncOperation\n  Status:                True\n  Reason:                Finished\n```\n\n----------------------------------------\n\nTITLE: AWS Subnet Resource with Label Selector\nDESCRIPTION: Example showing how to reference another resource using label selectors.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcIdSelector: \n      matchLabels:\n        my-label: label-value\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Helm\nDESCRIPTION: Commands to add Crossplane Helm repository and install Crossplane in a Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Dependency Resolution\nDESCRIPTION: Provider configuration showing how to disable automatic dependency resolution using skipDependencyResolution.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  skipDependencyResolution: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Crossplane Unknown Condition Status\nDESCRIPTION: Example of the Unknown condition status showing an unexpected provider error.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Unknown\n  Status:                False\n  Reason:                Unknown\n```\n\n----------------------------------------\n\nTITLE: Single Function Pipeline Composition\nDESCRIPTION: Example of a Composition using a single function in its pipeline, demonstrating the patch-and-transform function to create an S3 bucket resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.m.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Provider Conditions via kubectl\nDESCRIPTION: YAML output showing provider conditions and status details using kubectl describe.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe provider\nName:         my-provider\nAPI Version:  pkg.crossplane.io/v1\nKind:         Provider\n# Removed for brevity\nStatus:\n  Conditions:\n    Reason:      HealthyPackageRevision\n    Status:      True\n    Type:        Healthy\n    Reason:      ActivePackageRevision\n    Status:      True\n    Type:        Installed\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Required Objects in Crossplane XRD Schema\nDESCRIPTION: This YAML snippet shows how to define multiple required objects in a Crossplane XRD schema. It includes a top-level 'spec' object and a nested 'location' object, each with their own required fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              size:\n                type: string  \n              name:\n                type: string \n              location:\n                type: object\n                properties:\n                  country: \n                    type: string \n                  zone:\n                    type: string\n                required:\n                  - country\n            required:  \n              - size\n              - location\n```\n\n----------------------------------------\n\nTITLE: Checking Provider Status with kubectl\nDESCRIPTION: This shell command retrieves the status of installed providers, showing their installation and health status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Using Wide Output Option in Crossplane Beta Trace\nDESCRIPTION: These snippets show how to use the '--output=wide' option to display full 'Ready' and 'Status' messages without truncation. It compares the default output with the wide output for better visibility of long status messages.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane trace cluster.aws.platformref.upbound.io platform-ref-aws\n```\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane trace cluster.aws.platformref.upbound.io platform-ref-aws --output=wide\n```\n\n----------------------------------------\n\nTITLE: Listing Composite Resource Definitions (XRDs) in Kubernetes\nDESCRIPTION: Command to view installed composite resource definitions (XRDs) which define the custom resources managed by Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/uninstall-crossplane.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd\n```\n\n----------------------------------------\n\nTITLE: Viewing Custom API Resources in Kubernetes\nDESCRIPTION: Command to list the newly created custom API resources for the PubSub API, showing both the cluster-scoped and namespace-scoped endpoints.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources | grep queue.example\n```\n\n----------------------------------------\n\nTITLE: Pushing Crossplane Package with xpkg push\nDESCRIPTION: The xpkg push command pushes a Crossplane package file to a package registry. It requires specifying the organization, package name, and tag. Authentication may be required using xpkg login before pushing.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push <package>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push -f my-package.xpkg crossplane-docs/my-package:v0.14.0\n```\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push -f my-package.xpkg index.docker.io/crossplane-docs/my-package:v0.14.0\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Status in KCL\nDESCRIPTION: This snippet checks the status of the observed Deployment and sets a 'ready' annotation if the Deployment is available.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_12\n\nLANGUAGE: kcl\nCODE:\n```\nobserved_deployment = option(\"params\").ocds[\"deployment\"]?.Resource\nif any_true([c.type == \"Available\" and c.status == \"True\" for c in observed_deployment?.status?.conditions or []]):\n  _desired_deployment.metadata.annotations[\"krm.kcl.dev/ready\"] = \"True\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Discovered GCP DatabaseInstance in YAML\nDESCRIPTION: This snippet demonstrates the structure of a discovered and populated GCP DatabaseInstance resource in Crossplane. It shows the 'status.atProvider' field populated with values from the external resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/import-existing-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"Observe\"]\n  forProvider:\n    region: us-central1\nstatus:\n  atProvider:\n    connectionName: crossplane-playground:us-central1:my-external-database\n    databaseVersion: POSTGRES_14\n    deletionProtection: true\n    firstIpAddress: 35.184.74.79\n    id: my-external-database\n    publicIpAddress: 35.184.74.79\n    region: us-central1\n    # Removed for brevity\n    settings:\n    - activationPolicy: ALWAYS\n      availabilityType: REGIONAL\n      diskSize: 100\n      # Removed for brevity\n      pricingPlan: PER_USE\n      tier: db-custom-4-26624\n      version: 4\n  conditions:\n  - lastTransitionTime: \"2023-02-22T07:16:51Z\"\n    reason: Available\n    status: \"True\"\n    type: Ready\n  - lastTransitionTime: \"2023-02-22T07:16:51Z\"\n    reason: ReconcileSuccess\n    status: \"True\"\n    type: Synced\n```\n\n----------------------------------------\n\nTITLE: Ignoring Crossplane Version Constraints in Provider Installation\nDESCRIPTION: This YAML snippet demonstrates how to install a Provider package into an unsupported Crossplane version by setting ignoreCrossplaneConstraints to true in the Provider spec.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  ignoreCrossplaneConstraints: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Setting External Resource Names in YAML\nDESCRIPTION: Demonstrates how to set custom external names for resources using annotations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\n  annotations: \n    crossplane.io/external-name: my-custom-name\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Listing Composition Revisions in Crossplane\nDESCRIPTION: Shell command to list all Composition revisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevision\nNAME                         REVISION   XR-KIND        XR-APIVERSION            AGE\nmy-composition-5c976ad       1          xmydatabases   example.org/v1alpha1     65m\nmy-composition-b5aa1eb       2          xmydatabases   example.org/v1alpha1     64m\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource with Manual Update Policy\nDESCRIPTION: This YAML snippet defines a Composite Resource (XR) of type PlatformDB with a Manual composition update policy. It specifies that the XR should not automatically update to the latest CompositionRevision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: PlatformDB\nmetadata:\n  name: example\nspec:\n  parameters:\n    storageGB: 20\n  # The Manual policy specifies that you don't want this XR to update to the\n  # latest CompositionRevision automatically.\n  compositionUpdatePolicy: Manual\n  compositionRef:\n    name: example\n  writeConnectionSecretToRef:\n    name: db-conn\n```\n\n----------------------------------------\n\nTITLE: Matching Condition Type and Status in Crossplane Resources\nDESCRIPTION: This YAML snippet demonstrates how to check for a specific condition type and status in a resource's status.conditions using the MatchCondition readiness check type. It looks for a condition of type 'MyType' with status 'Success'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchCondition\n      matchCondition:\n        type: MyType\n        status: Success\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Compositions\nDESCRIPTION: This shell command retrieves the list of Compositions in the cluster, showing the name, XR-KIND, and XR-APIVERSION for each Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\n```\n\n----------------------------------------\n\nTITLE: Visualizing Composition with Any Kubernetes Resource in Crossplane v2\nDESCRIPTION: A flowchart showing how users can create composite resources that compose any Kubernetes resource, including a Deployment, Service, and third-party CloudNativePG Cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/whats-new/_index.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  user(User)\n\n  subgraph ns [my-namespace]\n    direction LR\n    xr(\"App (XR)\")\n  \tdply(\"Deployment\")\n    svc(\"Service\")\n    pg(\"CloudNativePG Cluster\")\n  end\n\n  user --create-->xr\n  xr compose-dply@--compose--> dply\n  xr compose-svc@--compose--> svc\n  xr compose-pg@--compose--> pg\ncompose-dply@{animate: true}\n\ncompose-dply@{animate: true}\ncompose-svc@{animate: true}\ncompose-pg@{animate: true}\n```\n\n----------------------------------------\n\nTITLE: Creating Composition for GCP Service Account and Key in Crossplane\nDESCRIPTION: This snippet creates a Composition that defines how to create GCP Service Account and Service Account Key resources. It configures the pipeline to use the patch-and-transform function and specifies connection details that will be stored in Vault.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: essinstances.ess.example.org\n  labels:\n    feature: ess\nspec:\n  publishConnectionDetailsWithStoreConfigRef: \n    name: vault\n  compositeTypeRef:\n    apiVersion: ess.example.org/v1alpha1\n    kind: CompositeESSInstance\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: serviceaccount\n          base:\n            apiVersion: iam.gcp.crossplane.io/v1alpha1\n            kind: ServiceAccount\n            metadata:\n              name: ess-test-sa\n            spec:\n              forProvider:\n                displayName: a service account to test ess\n        - name: serviceaccountkey\n          base:\n            apiVersion: iam.gcp.crossplane.io/v1alpha1\n            kind: ServiceAccountKey\n            spec:\n              forProvider:\n                serviceAccountSelector:\n                  matchControllerRef: true\n              publishConnectionDetailsTo:\n                name: ess-mr-conn\n                metadata:\n                  labels:\n                    environment: development\n                    team: backend\n                configRef:\n                  name: vault\n          connectionDetails:\n            - name: publicKey\n              type: FromConnectionSecretKey\n              fromConnectionSecretKey: publicKey\n            - name: publicKey\n              type: FromConnectionSecretKey\n              fromConnectionSecretKey: publicKeyType\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Manual CompositionRevision Reference\nDESCRIPTION: YAML configuration showing how to manually specify a CompositionRevision reference in an XR configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composition-revisions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: PlatformDB\nmetadata:\n  name: example\nspec:\n  storageGB: 20\n  crossplane:\n    compositionUpdatePolicy: Manual\n    compositionRef:\n      name: example\n    compositionRevisionRef:\n      name: example-18pdg\n```\n\n----------------------------------------\n\nTITLE: Environment Config Selection\nDESCRIPTION: Example showing how to specify which EnvironmentConfigs to use in a Composition through reference or selector.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  environment:\n    environmentConfigs:\n      - ref:\n          name: example-environment\n```\n\n----------------------------------------\n\nTITLE: Verifying XRD Status\nDESCRIPTION: Command to verify the status of a CompositeResourceDefinition using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl get xrd                                \nNAME                                ESTABLISHED   OFFERED   AGE\nxdatabases.custom-api.example.org   True          True      22m\n```\n\n----------------------------------------\n\nTITLE: Updating Composition Label in Crossplane\nDESCRIPTION: Updates the label of a Composition to 'channel: staging', which creates a new CompositionRevision. This demonstrates how to create new revisions without changing the actual composition specification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label composition myvpcs.aws.example.upbound.io channel=staging --overwrite\n```\n\n----------------------------------------\n\nTITLE: Retrieving Installed Providers in Kubernetes\nDESCRIPTION: This shell command retrieves the list of installed providers in the Kubernetes cluster. It shows the status of the AWS S3 provider and the AWS family provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Validating Render Command Output\nDESCRIPTION: Example of piping the output of 'crossplane render' into 'crossplane beta validate' to validate complete Crossplane resource pipelines.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml function.yaml --include-full-xr | crossplane beta validate schemas.yaml -\n```\n\n----------------------------------------\n\nTITLE: Configuring ProviderConfigRef for AWS EC2 Instance in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the providerConfigRef field in a managed resource to specify which ProviderConfig to use for authentication. It references a ProviderConfig named 'user-keys' for an AWS EC2 Instance resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n    # Removed for brevity\n  providerConfigRef: user-keys\n```\n\n----------------------------------------\n\nTITLE: FromCompositeFieldPath Patch in Crossplane YAML\nDESCRIPTION: Demonstrates how to apply a value from a composite resource to a composed resource using FromCompositeFieldPath patch. Example shows setting a region value from a user-provided desiredRegion field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.desiredRegion\n      toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Validating Crossplane Render Output Using Pipeline\nDESCRIPTION: This snippet demonstrates how to pipe the output of 'crossplane render' into 'crossplane beta validate' to validate complete Crossplane resource pipelines. The example shows validation of XRs, compositions, and functions with corresponding success and error messages.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml function.yaml --include-full-xr | crossplane beta validate schemas.yaml -\n[x] schema validation error example.crossplane.io/v1beta1, Kind=XR, example : status.conditions[0].lastTransitionTime: Invalid value: \"null\": status.conditions[0].lastTransitionTime in body must be of type string: \"null\"\n[x] schema validation error example.crossplane.io/v1beta1, Kind=XR, example : spec: Required value\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-1 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-1 validated successfully\nTotal 5 resources: 0 missing schemas, 4 success cases, 1 failure cases\n```\n\n----------------------------------------\n\nTITLE: Displaying All Package Revisions in Trace Output\nDESCRIPTION: Shows how to display both active and inactive package revisions using the 'crossplane beta trace' command with the '--show-package-revisions all' flag, allowing users to see the history of package updates.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-revisions all\n```\n\n----------------------------------------\n\nTITLE: Creating a Usage for Deletion Protection\nDESCRIPTION: This snippet demonstrates creating a Usage resource to protect a database from accidental deletion by providing a reason that will be displayed when deletion is attempted.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/usages.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  name: protect-production-database\nspec:\n  of:\n    apiVersion: rds.aws.upbound.io/v1beta1\n    kind: Instance\n    resourceRef:\n      name: my-database\n  reason: \"Production Database - should never be deleted!\"\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Provider Package Example\nDESCRIPTION: Example command showing how to install the AWS S3 provider package from the Crossplane package registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg install provider xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Applying TrimSuffix Transform in Crossplane Composition YAML\nDESCRIPTION: This snippet illustrates the use of the 'TrimSuffix' transform in a Crossplane Composition to remove characters from the end of a string. It uses Go's TrimSuffix function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    transforms:\n      - type: string\n        string:\n          type: TrimSuffix\n          trim: `-north-1'\n```\n\n----------------------------------------\n\nTITLE: Viewing Claim Connection Secret Details\nDESCRIPTION: Retrieves and displays the contents of the claim connection secret, including the public key and metadata.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -i vault-0 -- vault kv get /secret/default/ess-claim-conn\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Deployment in Kubernetes YAML\nDESCRIPTION: This snippet defines a Deployment for Crossplane. It includes an init container and main container, sets up volume mounts for caches and TLS certificates, and configures various environment variables and resource limits.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: crossplane\n  namespace: default\n  labels:\n    app: crossplane\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: crossplane\n      release: crossplane\n  strategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: crossplane\n        release: crossplane\n        helm.sh/chart: crossplane-1.15.0\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: cloud-infrastructure-controller\n        app.kubernetes.io/part-of: crossplane\n        app.kubernetes.io/name: crossplane\n        app.kubernetes.io/instance: crossplane\n        app.kubernetes.io/version: \"1.15.0\"\n    spec:\n      serviceAccountName: crossplane\n      hostNetwork: false\n      initContainers:\n        - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n          args:\n          - core\n          - init\n          imagePullPolicy: IfNotPresent\n          name: crossplane-init\n          resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n          env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.cpu\n                divisor: \"1\"\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.memory\n                divisor: \"1\"\n          - name: POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: POD_SERVICE_ACCOUNT\n            valueFrom:\n              fieldRef:\n                fieldPath: spec.serviceAccountName\n          - name: \"WEBHOOK_SERVICE_NAME\"\n            value: crossplane-webhooks\n          - name: \"WEBHOOK_SERVICE_NAMESPACE\"\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: \"WEBHOOK_SERVICE_PORT\"\n            value: \"9443\"\n          - name: \"TLS_CA_SECRET_NAME\"\n            value: crossplane-root-ca\n          - name: \"TLS_SERVER_SECRET_NAME\"\n            value: crossplane-tls-server\n          - name: \"TLS_CLIENT_SECRET_NAME\"\n            value: crossplane-tls-client\n      containers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - core\n        - start\n        imagePullPolicy: IfNotPresent\n        name: crossplane\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        startupProbe:\n          failureThreshold: 30\n          periodSeconds: 2\n          tcpSocket:\n            port: readyz\n        ports:\n        - name: readyz\n          containerPort: 8081\n        - name: webhooks\n          containerPort: 9443\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.cpu\n                divisor: \"1\"\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.memory\n                divisor: \"1\"\n          - name: POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: POD_SERVICE_ACCOUNT\n            valueFrom:\n              fieldRef:\n                fieldPath: spec.serviceAccountName\n          - name: LEADER_ELECTION\n            value: \"true\"\n          - name: \"TLS_SERVER_SECRET_NAME\"\n            value: crossplane-tls-server\n          - name: \"TLS_SERVER_CERTS_DIR\"\n            value: /tls/server\n          - name: \"TLS_CLIENT_SECRET_NAME\"\n            value: crossplane-tls-client\n          - name: \"TLS_CLIENT_CERTS_DIR\"\n            value: /tls/client\n        volumeMounts:\n          - mountPath: /cache\n            name: package-cache\n          - mountPath: /tls/server\n            name: tls-server-certs\n          - mountPath: /tls/client\n            name: tls-client-certs\n      volumes:\n      - name: package-cache\n        emptyDir:\n          medium:\n          sizeLimit: 20Mi\n      - name: tls-server-certs\n        secret:\n          secretName: crossplane-tls-server\n      - name: tls-client-certs\n        secret:\n          secretName: crossplane-tls-client\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for ARM64 Platform\nDESCRIPTION: Uses Docker to build a runtime image for the linux/arm64 platform. Similar to the AMD64 build, but targets a different architecture.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/arm64 --tag runtime-arm64\n```\n\n----------------------------------------\n\nTITLE: Viewing Composite Resource Definitions\nDESCRIPTION: Command to list all composite resource definitions (XRDs) in the cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/uninstall.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd\n```\n\n----------------------------------------\n\nTITLE: Describing Configuration Revision for Dependency Information\nDESCRIPTION: This YAML output shows the result of describing a ConfigurationRevision to get more information about why a Configuration isn't healthy, including dependency and compatibility issues.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe configurationrevision\nName:         platform-ref-aws-a30ad655c769\nAPI Version:  pkg.crossplane.io/v1\nKind:         ConfigurationRevision\n# Removed for brevity\nSpec:\n  Desired State:                  Active\n  Image:                          xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0\n  Revision:                       1\nStatus:\n  Conditions:\n    Last Transition Time:  2023-10-06T20:08:14Z\n    Reason:                UnhealthyPackageRevision\n    Status:                False\n    Type:                  Healthy\n  Controller Ref:\n    Name:\nEvents:\n  Type     Reason       Age                From                                              Message\n  ----     ------       ----               ----                                              -------\n  Warning  LintPackage  29s (x2 over 29s)  packages/configurationrevision.pkg.crossplane.io  incompatible Crossplane version: package isn't compatible with Crossplane version (v1.12.0)\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Crossplane Package Registry\nDESCRIPTION: Command to authenticate to registries hosting Crossplane packages. Supports username/password or token authentication with options for organization specification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg login\n```\n\n----------------------------------------\n\nTITLE: Configuring Default DeploymentRuntimeConfig in YAML\nDESCRIPTION: This example shows how to configure a DeploymentRuntimeConfig with minimal settings to change the number of replicas. It demonstrates the need to include empty objects for selector and template to pass schema validation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: multi-replicas\nspec:\n  deploymentTemplate:\n    spec:\n      replicas: 2\n      selector: {}\n      template: {}\n```\n\n----------------------------------------\n\nTITLE: Checking Resource Status with kubectl describe\nDESCRIPTION: Command to check the status and conditions of a Crossplane CloudSQLInstance resource using kubectl describe.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe cloudsqlinstance my-db\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Manager Permissions in Kubernetes YAML\nDESCRIPTION: Defines the basic RBAC permissions needed by the RBAC manager to handle ProviderRevisions and create associated roles. Includes permissions for CRDs, roles, and core Kubernetes resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- apiGroups:\n  - pkg.crossplane.io\n  resources:\n  - providerrevisions/finalizers\n  verbs:\n  - update\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - get\n  - list\n  - watch\n```\n\n----------------------------------------\n\nTITLE: Setting up Admin ClusterRoleBinding for Crossplane\nDESCRIPTION: Creates a ClusterRoleBinding that grants crossplane-admin permissions to the crossplane:masters group.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: crossplane-admin\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: crossplane-admin\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: crossplane:masters\n```\n\n----------------------------------------\n\nTITLE: Provider Package Definition Schema\nDESCRIPTION: Example of a Provider package definition using the meta.pkg.crossplane.io API group for creating Provider packages.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: meta.pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Upjet AsyncOperation Ongoing Condition Example\nDESCRIPTION: Shows the condition structure when an asynchronous operation is still in progress in an Upjet-based provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  AsyncOperation\n  Status:                True\n  Reason:                Ongoing\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition with Pipeline Mode in YAML\nDESCRIPTION: This snippet shows an example Composition that uses the Pipeline mode to create an Amazon S3 Bucket managed resource when an AcmeBucket composite resource is created. It demonstrates the basic structure of a Composition and how to reference a composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: AcmeBucket\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: storage-bucket\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Checking Provider Status\nDESCRIPTION: Command and output showing how to check the status of installed providers using kubectl, displaying installation and health status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\nNAME              INSTALLED   HEALTHY   PACKAGE                                           AGE\nprovider-aws-s3   True        False     xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1   12s\n```\n\n----------------------------------------\n\nTITLE: Visualizing Managed Resource Flow\nDESCRIPTION: This diagram demonstrates how Crossplane's Managed Resources work. A user interacts with a custom RDS Instance API, and the Managed Resource Controller watches for changes and creates the corresponding RDS Instance in Amazon Web Services.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/whats-crossplane/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nuser(User)\n\nsubgraph control [Control Plane]\n  instance(RDS Instance API)\n  controller(Managed Resource Controller)\nend\n\nsubgraph aws [Amazon Web Services]\n  rds(RDS Instance)\nend\n\nuser -- create --> instance\ncontroller watch-rds@<-- watch --> instance\ncontroller -- create --> rds\n\nwatch-rds@{animate: true}\n```\n\n----------------------------------------\n\nTITLE: Tracing Package Dependencies with crossplane beta trace\nDESCRIPTION: Shows how to use the 'crossplane beta trace' command to display package relationships in a hierarchical format. This command reveals dependencies between packages, showing which packages depend on others.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-dependencies none\n```\n\n----------------------------------------\n\nTITLE: Exploring the Generated Function Directory Structure\nDESCRIPTION: Shell command to list the contents of the newly created function directory, showing the basic structure created from the template including the Dockerfile, function code directory, and package metadata.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: Merge Objects Policy in Crossplane\nDESCRIPTION: Demonstrates how to configure object merging policy for patches to combine arrays and objects.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    policy:\n      toFieldPath: MergeObjectsAppendArrays\n```\n\n----------------------------------------\n\nTITLE: Ignoring Crossplane Version Constraints in YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure a Configuration package to ignore Crossplane version constraints. It sets the 'ignoreCrossplaneConstraints' field to true in the Configuration spec.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  ignoreCrossplaneConstraints: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for ARM64 Platform\nDESCRIPTION: This command uses the Crossplane CLI to build a package file for the ARM64 platform. It embeds the previously built ARM64 runtime image, references the package metadata from the package directory, and outputs a function-arm64.xpkg file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-arm64 \\\n    --package-file=function-arm64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Combining Controller Reference and Labels for Resource Matching in Crossplane\nDESCRIPTION: Example of using both matchControllerRef and matchLabels to target a specific resource within a composite resource. This demonstrates how to select one specific VPC among multiple VPCs in a composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-first-vpc\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    metadata:\n      labels:\n        type: backend\n    spec:\n      forProvider:\n      # Removed for brevity\n- name: my-second-vpc\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    metadata:\n      labels:\n        type: internet\n    spec:\n      forProvider:\n      # Removed for brevity\n- name: my-gateway\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: InternetGateway\n    spec:\n      forProvider:\n        vpcIdSelector:\n          matchControllerRef: true\n          matchLabels:\n            type: internet\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Policy for Provider Credentials\nDESCRIPTION: Command to create a Vault policy allowing read and list access to provider credentials\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nvault policy write provider-creds - <<EOF\npath \"secret/data/provider-creds/*\" {\n    capabilities = [\"read\", \"list\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Resource Creation Error Detection Command\nDESCRIPTION: Shell command to describe a managed resource and view its events, particularly for detecting resource creation issues.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe queue my-sqs-queue\n```\n\n----------------------------------------\n\nTITLE: Provider Pull Policy Configuration\nDESCRIPTION: Configuration example showing how to set the packagePullPolicy for controlling package downloads.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  packagePullPolicy: Always\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Claiming Existing Composite Resources in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to claim an existing composite resource instead of creating a new one. This is done by setting the resourceRef field to match the pre-existing composite resource name, useful for pre-provisioned resources to avoid waiting for resource creation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/claims.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: database\nmetadata:\n  name: my-claimed-database\nspec:\n  resourceRef:\n    apiVersion: example.org/v1alpha1\n    kind: XMyDatabase\n    name: my-pre-created-xr\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Manifest for Validation\nDESCRIPTION: Example of a provider manifest file used for validating resources against a provider schema, specifically for AWS IAM resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-iam\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-iam:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Ignoring Crossplane Version Constraints for Configuration Packages\nDESCRIPTION: YAML configuration for ignoring Crossplane version constraints when installing a Configuration package. This allows installation on potentially incompatible Crossplane versions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  ignoreCrossplaneConstraints: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Compositions\nDESCRIPTION: This shell command retrieves and displays the list of Crossplane Compositions in the cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Function from Template\nDESCRIPTION: Shell command to initialize a new Crossplane function using the function-template-go template, creating a new project structure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg init function-xbuckets function-template-go -d function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: Managing Conflicting Secret Keys in Crossplane Composition\nDESCRIPTION: This YAML snippet illustrates how to manage conflicting secret keys in a Crossplane Composition by creating unique names for connection details. It defines two AccessKey resources with different names for the username key.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n      - name: key2\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2\n        connectionDetails:\n          - name: key2-user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Compute Provider\nDESCRIPTION: YAML configuration for installing the Azure Compute provider, which is required for VM deployments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-azure-compute\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-azure-compute:v1.11.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Unknown Package Revision Status in YAML\nDESCRIPTION: YAML configuration showing an unknown status for a provider package revision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nType: Healthy\nStatus: Unknown\nReason: UnknownPackageRevisionHealth\n```\n\n----------------------------------------\n\nTITLE: Setting Composition Update Policy to Manual in YAML\nDESCRIPTION: This YAML snippet shows how to set the compositionUpdatePolicy to Manual for a composite resource, preventing automatic upgrades to newer Composition revisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: MyDatabase\nmetadata:\n  namespace: default\n  name: my-composite-resource\nspec:\n  crossplane:\n    compositionUpdatePolicy: Manual\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource with Default Update Policy\nDESCRIPTION: This YAML snippet demonstrates creating a MyVPC Composite Resource without specifying a compositionUpdatePolicy, which defaults to Automatic.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  name: vpc-auto\nspec:\n  id: vpc-auto\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of Composition Function Flow\nDESCRIPTION: Mermaid sequence diagram showing the interaction flow between User, API Server, Crossplane Pod, and Function Pod during composite resource creation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    User->>+API Server: Create composite resource\n    Crossplane Pod->>+API Server: Observe composite resource\n    Crossplane Pod->>+Function Pod: gRPC RunFunctionRequest\n    Function Pod->>+Crossplane Pod: gRPC RunFunctionResponse\n    loop Extra resources needed?\n      Crossplane Pod->>+API Server: Get Extra resources\n      Crossplane Pod->>+Function Pod: gRPC RunFunctionRequest\n      Function Pod->>+Crossplane Pod: gRPC RunFunctionResponse\n    end\n    Crossplane Pod->>+API Server: Apply desired composed resources\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Multiple Custom Settings\nDESCRIPTION: Example of using helm install command to set multiple custom settings for Crossplane, including image pull policy and number of replicas.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n--set image.pullPolicy=Always,replicas=2\n```\n\n----------------------------------------\n\nTITLE: Viewing Composite Resource Status with Patch Results\nDESCRIPTION: This code shows the output of describing a composite resource to view the status.secondResource value that was set by the ToCompositeFieldPath patch.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl describe composite\nName:         my-example-jp7rx\nSpec:\n  # Removed for brevity\n  Resource Refs:\n    Name:         my-example-jp7rx-gfg4m\n    # Removed for brevity\n    Name:         my-example-jp7rx-fttpj\nStatus:\n  # Removed for brevity\n  Second Resource:         my-example-jp7rx-gfg4m\n```\n\n----------------------------------------\n\nTITLE: Cross-Namespace Usage Configuration\nDESCRIPTION: YAML showing how to configure Usage across different namespaces by specifying namespace in resourceRef.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/usages.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: protection.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  namespace: default\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.m.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n      namespace: cluster-infra\n      name: my-cluster\n  by:\n    apiVersion: helm.m.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n      name: my-prometheus-chart\n```\n\n----------------------------------------\n\nTITLE: Importing GCP Network Manually in YAML\nDESCRIPTION: This snippet demonstrates how to manually import an existing GCP Network into Crossplane using the 'crossplane.io/external-name' annotation. It shows the basic structure of the managed resource YAML file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/import-existing-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: compute.gcp.crossplane.io/v1beta1\nkind: Network\nmetadata:\n  name: imported-network\n  annotations:\n    crossplane.io/external-name: my-existing-network\nspec:\n  forProvider: {}\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Resources in Kubernetes\nDESCRIPTION: Shows how to list all managed resources in the cluster using kubectl, displaying various AWS resources like security groups, routes, and VPCs that are managed by Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/uninstall.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Registry During Upgrade\nDESCRIPTION: Example command showing how to override the default image registry when upgrading Crossplane, useful for maintaining compatibility with previous configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/upgrade.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade crossplane --namespace crossplane-system crossplane-stable/crossplane --set 'args={\"--registry=index.docker.io\"}'\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Package Registry with xpkg login\nDESCRIPTION: The xpkg login command authenticates to registries that host Crossplane packages. It can use a username and password or an Upbound API token for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg login --username=<username> --password=<password>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg login --token=<token string>\n```\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg login --account=Upbound --username=my-user --password -\n```\n\n----------------------------------------\n\nTITLE: Viewing Composed Kubernetes Secrets\nDESCRIPTION: This shell command demonstrates how to retrieve the secrets in the specified namespace using kubectl, allowing verification of the connection data generated by the Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secrets -n docs\nNAME   TYPE                                DATA   AGE\nkey1   connection.crossplane.io/v1alpha1   4      4m30s\n```\n\n----------------------------------------\n\nTITLE: Verifying Managed Resources\nDESCRIPTION: Shell commands to verify the status of managed resources, claims, and composite resources created by Crossplane\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\nkubectl -n default get claim\nkubectl get composite\n```\n\n----------------------------------------\n\nTITLE: Combining Composed Resource Values to Composite in Crossplane (YAML)\nDESCRIPTION: This snippet demonstrates the CombineToComposite patch, which takes values from the composed resource, combines them, and applies them to the composite resource. It shows how to use the managed resource 'name' and 'region' to generate a custom 'url' field in the composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineToComposite\n      combine:\n        variables:\n          - fromFieldPath: metadata.name\n          - fromFieldPath: spec.forProvider.region\n        strategy: string\n        string:\n          fmt: \"https://%s.%s.com\"\n      toFieldPath: status.url\n```\n\n----------------------------------------\n\nTITLE: Listing Provider Revisions\nDESCRIPTION: Command output showing multiple provider revisions with their health status, revision numbers, and states.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providerrevisions\nNAME                                       HEALTHY   REVISION   IMAGE                                                    STATE      DEP-FOUND   DEP-INSTALLED   AGE\nprovider-aws-s3-dbc7f981d81f               True      1          xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1           Active     1           1               10d\nprovider-nop-552a394a8acc                  True      2          xpkg.crossplane.io/crossplane-contrib/provider-nop:v0.3.0   Active                                 11d\nprovider-nop-7e62d2a1a709                  True      1          xpkg.crossplane.io/crossplane-contrib/provider-nop:v0.2.0   Inactive                               13d\ncrossplane-contrib-provider-family-aws-710d8cfe9f53   True      1          xpkg.crossplane.io/crossplane-contrib/provider-family-aws:v1.21.1        Active                                 10d\n```\n\n----------------------------------------\n\nTITLE: Defining AWS IAM AccessKey Managed Resource\nDESCRIPTION: Example of an AWS IAM AccessKey managed resource definition to be validated against the provider schema.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: iam.aws.upbound.io/v1beta1\nkind: AccessKey\nmetadata:\n  name: sample-access-key-0\nspec:\n  forProvider:\n    userSelector:\n      matchLabels:\n        example-name: test-user-0\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tag to Resource in Crossplane\nDESCRIPTION: Demonstrates how to add a tag with a customized key to a resource using a combination of string and convert transforms in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.clusterName\n      toFieldPath: spec.forProvider.tags\n      transforms:\n      - type: string\n        string:\n          type: Format\n          fmt: '{\"kubernetes.io/cluster/%s\": \"true\"}'\n      - type: convert\n        convert:\n          toType: object\n          format: json\n```\n\n----------------------------------------\n\nTITLE: Selecting EnvironmentConfig by Name in Crossplane Composition\nDESCRIPTION: This YAML snippet demonstrates how to select an EnvironmentConfig by name in a Crossplane Composition using function-environment-configs. It uses the 'Reference' type to specify the exact name of the environment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/environment-configs.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Reference\n          ref:\n            name: example-environment\n```\n\n----------------------------------------\n\nTITLE: Hiding Package Dependencies in Trace Output\nDESCRIPTION: Demonstrates how to hide all package dependencies when using the 'crossplane beta trace' command with the '--show-package-dependencies none' flag, providing a cleaner output that focuses only on top-level packages.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-dependencies none\n```\n\n----------------------------------------\n\nTITLE: Installing a Crossplane Function\nDESCRIPTION: This YAML snippet defines a Crossplane Function to install `function-patch-and-transform`. This function is required by the Composition to apply patches and transformations to the resource templates. It specifies the package to install from `xpkg.crossplane.io`.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Skipping Dependency Resolution\nDESCRIPTION: This YAML snippet shows how to disable dependency resolution for a Crossplane Configuration using `skipDependencyResolution`. When set to `true`, Crossplane will not automatically install the dependencies listed in the Configuration package. Manual installation of required Providers will then be necessary.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  skipDependencyResolution: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: AsyncOperation Finished Condition Example in YAML\nDESCRIPTION: Shows the format of an 'AsyncOperation' condition with 'Finished' reason, indicating that the asynchronous operation on a managed resource has completed successfully.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  AsyncOperation\n  Status:                True\n  Reason:                Finished\n```\n\n----------------------------------------\n\nTITLE: Checking Custom Resource API Endpoints with kubectl\nDESCRIPTION: Demonstrate how an XRD creates a new custom resource API endpoint visible through kubectl api-resources command\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources\nNAME                              SHORTNAMES   APIVERSION          NAMESPACED   KIND\nxmydatabases.example.org                       v1alpha1            false        xmydatabases\n```\n\n----------------------------------------\n\nTITLE: Listing Composition Revisions in Crossplane\nDESCRIPTION: This shell command lists all Composition revisions in the cluster, showing their name, revision number, associated XR kind, API version, and age. This information is useful for selecting specific revisions for composite resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevision\nNAME                         REVISION   XR-KIND        XR-APIVERSION            AGE\nmy-composition-5c976ad       1          xmydatabases   example.org/v1alpha1     65m\nmy-composition-b5aa1eb       2          xmydatabases   example.org/v1alpha1     64m\n```\n\n----------------------------------------\n\nTITLE: Math Transform Basic Structure\nDESCRIPTION: Shows the basic structure of a math transform for numeric operations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.numberField\n    toFieldPath: metadata.annotations[\"mathAnnotation\"]\n    transforms:\n      - type: math\n        math:\n          ...\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Configuration Resources with Secret Names in Shell\nDESCRIPTION: Example of using the 'crossplane beta trace' command with the '-s' flag to display a resource hierarchy including connection secret names and their namespaces. The output shows the structure of a platform-ref-aws configuration with various resources and their associated secrets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws -s\nNAME                                                                        SYNCED   READY   STATUS\nCluster/platform-ref-aws (default)                                          True     True    Available\n└─ XCluster/platform-ref-aws-mlnwb                                          True     True    Available\n   ├─ XNetwork/platform-ref-aws-mlnwb-6nvkx                                 True     True    Available\n   │  ├─ SecurityGroupRule/platform-ref-aws-mlnwb-szgxp                     True     True    Available\n   │  └─ Secret/3f11c30b-dd94-4f5b-aff7-10fe4318ab1f (upbound-system)       -        -\n   ├─ XEKS/platform-ref-aws-mlnwb-fqjzz                                     True     True    Available\n   │  ├─ OpenIDConnectProvider/platform-ref-aws-mlnwb-h26xx                 True     True    Available\n   │  └─ Secret/9666eccd-929c-4452-8658-c8c881aee137-eks (upbound-system)   -        -\n   ├─ XServices/platform-ref-aws-mlnwb-bgndx                                True     True    Available\n   │  ├─ Release/platform-ref-aws-mlnwb-7hfkv                               True     True    Available\n   │  └─ Secret/d0955929-892d-40c3-b0e0-a8cabda55895 (upbound-system)       -        -\n   └─ Secret/9666eccd-929c-4452-8658-c8c881aee137 (upbound-system)          -        -\n```\n\n----------------------------------------\n\nTITLE: Pushing Multi-Platform Crossplane Package to Registry\nDESCRIPTION: This command pushes both AMD64 and ARM64 package files to a registry, creating a multi-platform package. It specifies the package files and the destination tag in the registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg push \\\n  --package-files=function-amd64.xpkg,function-arm64.xpkg \\\n  negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Combining Resource Values in Crossplane CombineToEnvironment Patch\nDESCRIPTION: Illustrates the use of CombineToEnvironment patch to combine multiple values from a composed resource and apply them to the in-memory EnvironmentConfig environment. It combines the managed resource Kind and region to create a unique string.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineToEnvironment\n      combine:\n        strategy: string\n        variables:\n        - fromFieldPath: kind\n        - fromFieldPath: spec.forProvider.region\n        string:\n          fmt: \"%s.%s\"\n      toFieldPath: key2\n```\n\n----------------------------------------\n\nTITLE: Patching Composite Resource with EnvironmentConfigs in Crossplane YAML\nDESCRIPTION: This snippet demonstrates how to patch between the composite resource and the in-memory environment using ToCompositeFieldPath and FromCompositeFieldPath.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nenvironment:\n  patches:\n  - type: ToCompositeFieldPath\n    fromFieldPath: tags\n    toFieldPath: metadata.labels[envTag]\n  - type: FromCompositeFieldPath\n    fromFieldPath: metadata.name\n    toFieldPath: newEnvironmentKey\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for AMD64 Platform\nDESCRIPTION: Uses the Crossplane CLI to build a package for the AMD64 platform. It specifies the package root directory, embeds the AMD64 runtime image, and outputs the package file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-amd64 \\\n    --package-file=function-amd64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Advanced S3 Bucket Creation RunFunction Implementation\nDESCRIPTION: Enhanced implementation that creates AWS S3 buckets based on specified region and names from the composite resource request.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def RunFunction(self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext) -> fnv1.RunFunctionResponse:\n    log = self.log.bind(tag=req.meta.tag)\n    log.info(\"Running function\")\n\n    rsp = response.to(req)\n\n    region = req.observed.composite.resource[\"spec\"][\"region\"]\n    names = req.observed.composite.resource[\"spec\"][\"names\"]\n\n    for name in names:\n        rsp.desired.resources[f\"xbuckets-{name}\"].resource.update(\n            {\n                \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                \"kind\": \"Bucket\",\n                \"metadata\": {\n                    \"annotations\": {\n                        \"crossplane.io/external-name\": name,\n                    },\n                },\n                \"spec\": {\n                    \"forProvider\": {\n                        \"region\": region,\n                    },\n                },\n            }\n        )\n\n    log.info(\"Added desired buckets\", region=region, count=len(names))\n\n    return rsp\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane Admin Aggregate Permissions\nDESCRIPTION: Defines the detailed permissions for Crossplane administrators, including access to events, secrets, namespaces, and core Crossplane resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane:aggregate-to-admin\nrules:\n- apiGroups: [\"\"]\n  resources: [events]\n  verbs: [get, list, watch]\n- apiGroups: [\"\"]\n  resources: [secrets, namespaces]\n  verbs: [\"*\"]\n```\n\n----------------------------------------\n\nTITLE: Paused Resource Configuration Example\nDESCRIPTION: Example of a managed resource configuration with the crossplane.io/paused annotation to stop reconciliation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.m.upbound.io/v1beta1\nkind: Instance\nmetadata:\n  namespace: default\n  name: my-rds-instance\n  annotations:\n    crossplane.io/paused: \"true\"\nspec:\n  forProvider:\n    region: us-west-1\n    instanceType: t2.micro\n```\n\n----------------------------------------\n\nTITLE: Fully Controlling Imported Observe-Only Resource\nDESCRIPTION: Example of transitioning an observe-only imported resource to full management by updating management policies and copying status values\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/import-existing-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"*\"]\n  forProvider:\n    databaseVersion: POSTGRES_14\n    region: us-central1\n    settings:\n    - diskSize: 100\n      tier: db-custom-4-26624\n```\n\n----------------------------------------\n\nTITLE: Claiming Existing Composite Resources\nDESCRIPTION: Example of a Claim configuration that references an existing composite resource instead of creating a new one.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/claims.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: database\nmetadata:\n  name: my-claimed-database\nspec:\n  resourceRef:\n    apiVersion: example.org/v1alpha1\n    kind: XMyDatabase\n    name: my-pre-created-xr\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Credentials Secret\nDESCRIPTION: Commands to create a Kubernetes secret containing AWS credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric aws-secret \\\n-n crossplane-system \\\n--from-file=creds=./aws-credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Crossplane Creating Condition Example\nDESCRIPTION: Shows the condition structure when a provider is attempting to create a managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Ready\n  Status:                False\n  Reason:                Creating\n```\n\n----------------------------------------\n\nTITLE: Viewing Populated Connection Secret Data\nDESCRIPTION: This shell command shows the result of describing a connection secret with data from the connectionDetails configuration. It displays the secret keys that were specified in the connectionDetails section of the Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/connection-details.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret -n other-namespace\nName:         b0dc71f8-2688-4ebc-818a-bbad6a2c4f9a\nNamespace:    other-namespace\n\nType:  connection.crossplane.io/v1alpha1\n\nData\n====\nusername:                        20 bytes\nattribute.secret:                40 bytes\nattribute.ses_smtp_password_v4:  44 bytes\npassword:                        40 bytes\n```\n\n----------------------------------------\n\nTITLE: Basic RunFunction Implementation in Python\nDESCRIPTION: Initial 'hello world' implementation of the RunFunction method that demonstrates basic request handling and response generation in a Crossplane function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def RunFunction(self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext) -> fnv1.RunFunctionResponse:\n    log = self.log.bind(tag=req.meta.tag)\n    log.info(\"Running function\")\n\n    rsp = response.to(req)\n\n    example = \"\"\n    if \"example\" in req.input:\n        example = req.input[\"example\"]\n\n    # TODO: Add your function logic here!\n    response.normal(rsp, f\"I was run with input {example}!\")\n    log.info(\"I was run!\", input=example)\n\n    return rsp\n```\n\n----------------------------------------\n\nTITLE: Viewing Secret with Managed Conflicting Keys\nDESCRIPTION: This shell command shows how to view the secret object containing both the original and renamed keys after managing conflicting secret keys in a Crossplane Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret -n other-namespace\nName:         b0dc71f8-2688-4ebc-818a-bbad6a2c4f9a\nNamespace:    other-namespace\n\nType:  connection.crossplane.io/v1alpha1\n\nData\n====\nusername:                        20 bytes\nkey2-user:                       20 bytes\n# Removed for brevity.\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for AMD64 Platform\nDESCRIPTION: Uses Docker to build a runtime image for the linux/amd64 platform. The --quiet flag reduces output, --platform specifies the target platform, and --tag assigns a name to the built image.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/amd64 --tag runtime-amd64\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tag to Resource in Crossplane Patch\nDESCRIPTION: Demonstrates how to add a tag with a customized key to a resource using string formatting and object conversion in a Crossplane patch.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.clusterName\n      toFieldPath: spec.forProvider.tags\n      transforms:\n      - type: string\n        string:\n          type: Format\n          fmt: '{\"kubernetes.io/cluster/%s\": \"true\"}'\n      - type: convert\n        convert:\n          toType: object\n          format: json\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Revision History Limit\nDESCRIPTION: Provider configuration showing how to set the revisionHistoryLimit to control how many previous revisions are retained.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  revisionHistoryLimit: 10\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Updating Composition with Modified Spec and Label\nDESCRIPTION: Updates the Composition configuration to disable DNS support in the VPC and changes the channel label from staging to dev.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composition-revisions.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  labels:\n    channel: dev\n  name: myvpcs.aws.example.upbound.io\nspec:\n  compositeTypeRef:\n    apiVersion: aws.example.upbound.io/v1alpha1\n    kind: MyVPC\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: my-vpc\n        base:\n          apiVersion: ec2.aws.m.upbound.io/v1beta1\n          kind: VPC\n          spec:\n            forProvider:\n              region: us-west-1\n              cidrBlock: 192.168.0.0/16\n              enableDnsSupport: false\n              enableDnsHostnames: true\n```\n\n----------------------------------------\n\nTITLE: Example Desired State Resource\nDESCRIPTION: YAML example showing how to specify desired state for an S3 bucket resource in a composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.m.upbound.io/v1beta1\nkind: Bucket\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Custom Pull Policy\nDESCRIPTION: Example of installing Crossplane with a custom image pull policy using Helm command line arguments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n--set image.pullPolicy=Always\n```\n\n----------------------------------------\n\nTITLE: Tracing Package Dependencies with Crossplane CLI\nDESCRIPTION: Example of using the 'crossplane beta trace' command to show package dependencies for a configuration. It demonstrates hiding all dependencies using the '--show-package-dependencies none' flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-dependencies none\n```\n\n----------------------------------------\n\nTITLE: Combining Environment Values in Crossplane Patch\nDESCRIPTION: Demonstrates how to use the CombineFromEnvironment patch to combine multiple values from the in-memory environment and apply them to a composed resource. This example creates a unique annotation by combining two environment values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineFromEnvironment\n      combine:\n        strategy: string\n        variables:\n        - fromFieldPath: key1\n        - fromFieldPath: key2\n        string:\n          fmt: \"%s-%s\"\n      toFieldPath: metadata.annotations[EnvironmentPatch]\n```\n\n----------------------------------------\n\nTITLE: Checking Provider Status with kubectl\nDESCRIPTION: This shell command retrieves the status of installed Providers using kubectl. It shows the INSTALLED and HEALTHY status of each Provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Viewing Claim Secret with Restricted Keys\nDESCRIPTION: This shell command demonstrates how to view the Claim's secret, which only contains the keys allowed by the XRD connectionSecretKeys fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret my-access-key-secret\nName:         my-access-key-secret\n\nData\n====\nkey2-user:  20 bytes\npassword:   40 bytes\nusername:   20 bytes\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Admin ClusterRoleBinding\nDESCRIPTION: Creates RBAC configuration binding the crossplane-admin role to the crossplane:masters group.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: crossplane-admin\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: crossplane-admin\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: crossplane:masters\n```\n\n----------------------------------------\n\nTITLE: Describing PostgreSQL Instance Claim in Kubernetes\nDESCRIPTION: Command to inspect the details of a PostgreSQL instance claim named 'my-db' using kubectl. This helps in identifying the current state and potential issues with the database instance claim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/troubleshoot-crossplane.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe postgresqlinstance.database.example.org my-db\n```\n\n----------------------------------------\n\nTITLE: Organization Authentication Example\nDESCRIPTION: Example command showing how to authenticate to a registered Upbound organization with a username and password from stdin.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg login --account=Upbound --username=my-user --password -\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane-Generated Secrets\nDESCRIPTION: This shell command lists all secrets across all namespaces, showing the secrets created by Crossplane for the Composition and Claim. It demonstrates the naming and location of various secret objects.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secret -A\nNAMESPACE           NAME                                   TYPE                                DATA   AGE\ndefault             my-access-key-secret                   connection.crossplane.io/v1alpha1   8      29m\ndocs                key1                                   connection.crossplane.io/v1alpha1   4      31m\ndocs                key2                                   connection.crossplane.io/v1alpha1   4      31m\nother-namespace     b0dc71f8-2688-4ebc-818a-bbad6a2c4f9a   connection.crossplane.io/v1alpha1   8      31m\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Provider Installation\nDESCRIPTION: Shell command to check the installation status of Crossplane GCP Provider and its health\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Verifying Created Package Files with ls\nDESCRIPTION: Shell command output showing the resulting files after building a Crossplane Configuration package, displaying both the source directory and the generated package file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nls -1 ./\ntest-directory\ntest-package.xpkg\n```\n\n----------------------------------------\n\nTITLE: Match Transform with Regular Expression\nDESCRIPTION: Configuration for a match transform using regular expressions to match and transform field values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: regexp\n              regexp: '^field1.*'\n              result: \"foundField1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Composite Resource Based on XRD\nDESCRIPTION: Example showing how a Composite Resource implements the schema defined in a Composite Resource Definition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/introduction.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Composite Resource (XR)\napiVersion: test.example.org/v1alpha1\nkind: MyComputeResource\nmetadata:\n  name: my-resource\nspec:\n  storage: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Claim\nDESCRIPTION: This shell command deletes a Crossplane Claim, which triggers the deletion of the associated composite resource and managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete claim -n crossplane-test my-nosql-database\n```\n\n----------------------------------------\n\nTITLE: Defining Provider for Validation\nDESCRIPTION: This YAML file defines a provider manifest for AWS IAM that can be used with the beta validate command to validate IAM resources against the provider's schema.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-iam\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-iam:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Composite Resource - Shell\nDESCRIPTION: This shell command fetches specific custom API endpoint resources by using 'kubectl get' for the 'xMyDatabase' resource type. This command allows users to view the synchronization status and details of a particular composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xMyDatabase.example.org\nNAME                    SYNCED   READY   COMPOSITION        AGE\nmy-composite-resource   True     True    my-composition     12m\n```\n\n----------------------------------------\n\nTITLE: Verifying CompositionRevision Creation\nDESCRIPTION: This shell command checks if Crossplane has created a CompositionRevision for the applied Composition. It displays the revision number and channel label of the created CompositionRevision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevisions -o=\"custom-columns=NAME:.metadata.name,REVISION:.spec.revision,CHANNEL:.metadata.labels.channel\"\n```\n\n----------------------------------------\n\nTITLE: Private Registry Authentication Configuration\nDESCRIPTION: Example showing how to configure package pull secrets for private registry authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  packagePullSecrets: \n    - name: example-secret\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane View ClusterRole\nDESCRIPTION: This command displays the full RBAC policy for the crossplane-view ClusterRole, which has read-only access to all Crossplane types, namespaces, and events.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/pods.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-view\n```\n\n----------------------------------------\n\nTITLE: Checking Unhealthy Configuration Status\nDESCRIPTION: Demonstrates how to view an unhealthy configuration status, showing a configuration that failed its health check.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configuration\nNAME               INSTALLED   HEALTHY   PACKAGE                                           AGE\nplatform-ref-aws   True        False     xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0   71s\n```\n\n----------------------------------------\n\nTITLE: Referencing Resources by Label Selector in Crossplane\nDESCRIPTION: Example of how to reference an existing AWS VPC resource using a label selector when creating a Subnet in Crossplane. This method provides flexible matching based on resource labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcIdSelector: \n      matchLabels:\n        my-label: label-value\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane PubSub Resources\nDESCRIPTION: This shell command lists all PubSub resources created using the custom API.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pubsub\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GCP Credentials\nDESCRIPTION: Shell command to create a Kubernetes secret containing GCP service account credentials, necessary for provider authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric gcp-secret \\\n-n crossplane-system \\\n--from-file=creds=./gcp-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Match Transform with Literal Pattern\nDESCRIPTION: Example of match transform using literal pattern matching for exact string comparison.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n              literal: \"field1-text\"\n              result: \"matchedLiteral\"\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Resource Relationships\nDESCRIPTION: Commands to visualize relationships between Crossplane objects using the beta trace command with different resource specification formats.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace example.crossplane.io my-claim\n```\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace example.crossplane.io/my-claim\n```\n\n----------------------------------------\n\nTITLE: Verifying Custom API Resources\nDESCRIPTION: Command to check that the custom VirtualMachine API endpoints are available in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources | grep VirtualMachine\nvirtualmachineclaims              compute.example.com/v1alpha1           true         VirtualMachineClaim\nvirtualmachines                   compute.example.com/v1alpha1           false        VirtualMachine\n```\n\n----------------------------------------\n\nTITLE: Tracing Package Dependencies with Crossplane Beta Trace\nDESCRIPTION: This command shows a tree view of package dependencies for a given package, in this case displaying the dependencies of the 'platform-ref-aws' configuration including providers, functions, and configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-dependencies none\n```\n\n----------------------------------------\n\nTITLE: Integer Matching Readiness Check\nDESCRIPTION: Shows how to configure an integer matching readiness check for a resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n  readinessChecks:\n    - type: MatchInteger\n      fieldPath: status.atProvider.state\n      matchInteger: 4\n```\n\n----------------------------------------\n\nTITLE: Deploying Crossplane Controller\nDESCRIPTION: Deployment configuration for Crossplane controller including init containers, main container, volumes, and security settings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: crossplane\n  namespace: default\n  labels:\n    app: crossplane\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: crossplane\n      release: crossplane\n  strategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: crossplane\n        release: crossplane\n        helm.sh/chart: crossplane-1.15.0\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: cloud-infrastructure-controller\n        app.kubernetes.io/part-of: crossplane\n        app.kubernetes.io/name: crossplane\n        app.kubernetes.io/instance: crossplane\n        app.kubernetes.io/version: \"1.15.0\"\n    spec:\n      serviceAccountName: crossplane\n      hostNetwork: false\n      initContainers:\n        - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n          args:\n          - core\n          - init\n          imagePullPolicy: IfNotPresent\n          name: crossplane-init\n          resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n          env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.cpu\n                divisor: \"1\"\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.memory\n                divisor: \"1\"\n          - name: POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: POD_SERVICE_ACCOUNT\n            valueFrom:\n              fieldRef:\n                fieldPath: spec.serviceAccountName\n          - name: \"WEBHOOK_SERVICE_NAME\"\n            value: crossplane-webhooks\n          - name: \"WEBHOOK_SERVICE_NAMESPACE\"\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: \"WEBHOOK_SERVICE_PORT\"\n            value: \"9443\"\n          - name: \"TLS_CA_SECRET_NAME\"\n            value: crossplane-root-ca\n          - name: \"TLS_SERVER_SECRET_NAME\"\n            value: crossplane-tls-server\n          - name: \"TLS_CLIENT_SECRET_NAME\"\n            value: crossplane-tls-client\n      containers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - core\n        - start\n        imagePullPolicy: IfNotPresent\n        name: crossplane\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        startupProbe:\n          failureThreshold: 30\n          periodSeconds: 2\n          tcpSocket:\n            port: readyz\n        ports:\n        - name: readyz\n          containerPort: 8081\n        - name: webhooks\n          containerPort: 9443\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.cpu\n                divisor: \"1\"\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.memory\n                divisor: \"1\"\n          - name: POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: POD_SERVICE_ACCOUNT\n            valueFrom:\n              fieldRef:\n                fieldPath: spec.serviceAccountName\n          - name: LEADER_ELECTION\n            value: \"true\"\n          - name: \"TLS_SERVER_SECRET_NAME\"\n            value: crossplane-tls-server\n          - name: \"TLS_SERVER_CERTS_DIR\"\n            value: /tls/server\n          - name: \"TLS_CLIENT_SECRET_NAME\"\n            value: crossplane-tls-client\n          - name: \"TLS_CLIENT_CERTS_DIR\"\n            value: /tls/client\n        volumeMounts:\n          - mountPath: /cache\n            name: package-cache\n          - mountPath: /tls/server\n            name: tls-server-certs\n          - mountPath: /tls/client\n            name: tls-client-certs\n      volumes:\n      - name: package-cache\n        emptyDir:\n          medium:\n          sizeLimit: 20Mi\n      - name: tls-server-certs\n        secret:\n          secretName: crossplane-tls-server\n      - name: tls-client-certs\n        secret:\n          secretName: crossplane-tls-client\n```\n\n----------------------------------------\n\nTITLE: Usage with Resolved Selectors\nDESCRIPTION: This example shows a Usage resource after selectors have been resolved, with the selected resource names persisted in the resourceRef.name fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/usages.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n       name: my-cluster\n    resourceSelector:\n      matchLabels:\n        foo: bar\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n       name: my-cluster\n    resourceSelector:\n       matchLabels:\n          baz: qux\n```\n\n----------------------------------------\n\nTITLE: Pausing a Composite Resource in YAML\nDESCRIPTION: This YAML snippet demonstrates how to pause a composite resource by applying the crossplane.io/paused annotation, preventing checks and changes on its external resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: MyDatabase\nmetadata:\n  namespace: default\n  name: my-composite-resource\n  annotations:\n    crossplane.io/paused: \"true\"\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining Claim Connection Secrets in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a writeConnectionSecretToRef object in a Claim to specify where Crossplane should save connection details as a Kubernetes secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/claims.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: database\nmetadata:\n  name: my-claimed-database\nspec:\n  writeConnectionSecretToRef:\n    name: my-claim-secret\n```\n\n----------------------------------------\n\nTITLE: Validating Render Command Output with Piping\nDESCRIPTION: This command demonstrates how to pipe the output of crossplane render into the beta validate command to validate complete Crossplane resource pipelines including XRs, compositions, and composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml function.yaml --include-full-xr | crossplane beta validate schemas.yaml -\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Composition with KCL\nDESCRIPTION: A partial Crossplane composition using the KCL function to create resources for an App XR. The KCL script is incomplete but shows the beginning structure for defining a Deployment with labels and containers.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: app-kcl\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: App\n  mode: Pipeline\n  pipeline:\n  - step: create-deployment-and-service\n    functionRef:\n      name: crossplane-contrib-function-kcl\n    input:\n      apiVersion: krm.kcl.dev/v1alpha1\n      kind: KCLInput\n      spec:\n        source: |\n          observed_xr = option(\"params\").oxr\n\n          _desired_deployment = {\n            apiVersion = \"apps/v1\"\n            kind = \"Deployment\"\n            metadata = {\n              annotations = {\n                \"krm.kcl.dev/composition-resource-name\" = \"deployment\"\n              }\n              labels = {\"example.crossplane.io/app\" = observed_xr.metadata.name}\n            }\n            spec = {\n              replicas = 2\n              selector.matchLabels = {\"example.crossplane.io/app\" = observed_xr.metadata.name}\n              template = {\n                metadata.labels = {\"example.crossplane.io/app\" = observed_xr.metadata.name}\n                spec.containers = [{\n```\n\n----------------------------------------\n\nTITLE: Editing Crossplane Deployment for Pod Configuration\nDESCRIPTION: This YAML snippet demonstrates how to edit the Crossplane deployment to change pod settings, specifically adding a 'sync-interval' argument to the pod configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/pods.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --sync-interval=30m\n```\n\n----------------------------------------\n\nTITLE: Verifying AWS Credentials Injection\nDESCRIPTION: This command verifies that the AWS credentials are being correctly injected into the provider-aws container by displaying the contents of the credentials file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nPROVIDER_CONTROLLER_POD=$(kubectl -n crossplane-system get pod -l pkg.crossplane.io/provider=provider-aws -o name --no-headers=true)\nkubectl -n crossplane-system exec -it $PROVIDER_CONTROLLER_POD -c provider-aws -- cat /vault/secrets/creds.txt\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Configuration Dependencies with All Details\nDESCRIPTION: This command uses 'crossplane beta trace' to show all package dependencies for the 'platform-ref-aws' configuration. It includes every instance of a package being required, even if it's repeated.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-dependencies all\n```\n\n----------------------------------------\n\nTITLE: Go Unit Test Implementation for Crossplane Function\nDESCRIPTION: Complete unit test implementation for a Crossplane function that creates S3 buckets. Uses Go's testing package and google/go-cmp for comparisons. Tests the RunFunction method with mock resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\t\"github.com/google/go-cmp/cmp/cmpopts\"\n\t\"google.golang.org/protobuf/testing/protocmp\"\n\t\"google.golang.org/protobuf/types/known/durationpb\"\n\n\t\"github.com/crossplane/crossplane-runtime/pkg/logging\"\n\n\tfnv1 \"github.com/crossplane/function-sdk-go/proto/v1\"\n\t\"github.com/crossplane/function-sdk-go/resource\"\n)\n\nfunc TestRunFunction(t *testing.T) {\n\ttype args struct {\n\t\tctx context.Context\n\t\treq *fnv1.RunFunctionRequest\n\t}\n\ttype want struct {\n\t\trsp *fnv1.RunFunctionResponse\n\t\terr error\n\t}\n\n\tcases := map[string]struct {\n\t\treason string\n\t\targs   args\n\t\twant   want\n\t}{\n\t\t\"AddTwoBuckets\": {\n\t\t\treason: \"The Function should add two buckets to the desired composed resources\",\n\t\t\targs: args{\n\t\t\t\treq: &fnv1.RunFunctionRequest{\n\t\t\t\t\tObserved: &fnv1.State{\n\t\t\t\t\t\tComposite: &fnv1.Resource{\n\t\t\t\t\t\t\tResource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"example.crossplane.io/v1alpha1\",\n\t\t\t\t\t\t\t\t\"kind\": \"XBuckets\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"name\": \"test\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\t\t\t\t\t\"names\": [\n\t\t\t\t\t\t\t\t\t\t\"test-bucket-a\",\n\t\t\t\t\t\t\t\t\t\t\"test-bucket-b\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\twant: want{\n\t\t\t\trsp: &fnv1.RunFunctionResponse{\n\t\t\t\t\tMeta: &fnv1.ResponseMeta{Ttl: durationpb.New(60 * time.Second)},\n\t\t\t\t\tDesired: &fnv1.State{\n\t\t\t\t\t\tResources: map[string]*fnv1.Resource{\n\t\t\t\t\t\t\t\"xbuckets-test-bucket-a\": {Resource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n\t\t\t\t\t\t\t\t\"kind\": \"Bucket\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"annotations\": {\n\t\t\t\t\t\t\t\t\t\t\"crossplane.io/external-name\": \"test-bucket-a\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"forProvider\": {\n\t\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\"observedGeneration\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`)},\n\t\t\t\t\t\t\t\"xbuckets-test-bucket-b\": {Resource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n\t\t\t\t\t\t\t\t\"kind\": \"Bucket\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"annotations\": {\n\t\t\t\t\t\t\t\t\t\t\"crossplane.io/external-name\": \"test-bucket-b\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"forProvider\": {\n\t\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\"observedGeneration\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`)},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tConditions: []*fnv1.Condition{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tType:   \"FunctionSuccess\",\n\t\t\t\t\t\t\tStatus: fnv1.Status_STATUS_CONDITION_TRUE,\n\t\t\t\t\t\t\tReason: \"Success\",\n\t\t\t\t\t\t\tTarget: fnv1.Target_TARGET_COMPOSITE_AND_CLAIM.Enum(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tf := &Function{log: logging.NewNopLogger()}\n\t\t\trsp, err := f.RunFunction(tc.args.ctx, tc.args.req)\n\n\t\t\tif diff := cmp.Diff(tc.want.rsp, rsp, protocmp.Transform()); diff != \"\" {\n\t\t\t\tt.Errorf(\"%s\\nf.RunFunction(...): -want rsp, +got rsp:\\n%s\", tc.reason, diff)\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(tc.want.err, err, cmpopts.EquateErrors()); diff != \"\" {\n\t\t\t\tt.Errorf(\"%s\\nf.RunFunction(...): -want err, +got err:\\n%s\", tc.reason, diff)\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JSON String to Array in Crossplane Patch\nDESCRIPTION: Shows how to convert a JSON string to an array using the convert transform in a Crossplane patch.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: array\n   format: json\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Composition Function\nDESCRIPTION: Example showing how to install a Crossplane composition function using a Function resource. Specifies the function package location and name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Replaying Blocked Deletion with Usage\nDESCRIPTION: This snippet shows how to configure a Usage resource to automatically replay blocked deletion attempts by setting the replayDeletion field to true.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/usages.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  replayDeletion: true\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n      name: my-cluster\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n      name: my-prometheus-chart\n```\n\n----------------------------------------\n\nTITLE: Limiting and Sorting EnvironmentConfig Selections in Crossplane\nDESCRIPTION: This YAML snippet shows how to limit the number of returned EnvironmentConfigs and sort them based on a specific field. It demonstrates the use of 'maxMatch' and 'sortByFieldPath' in the selector configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/environment-configs.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            maxMatch: 4\n            sortByFieldPath: metadata.annotations[sort.by/weight]\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Single Command Line Setting\nDESCRIPTION: Example of installing Crossplane with a custom image pull policy setting using helm install command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/install.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n--set image.pullPolicy=Always\n```\n\n----------------------------------------\n\nTITLE: Tracing Package Dependencies with Crossplane Beta Command\nDESCRIPTION: This command demonstrates using the `crossplane beta trace` with the `--show-package-dependencies all` flag to show a detailed tree view of all package dependencies for a configuration, including each package requiring the same dependency.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-dependencies all\n```\n\n----------------------------------------\n\nTITLE: Pushing Multi-Platform Crossplane Package to Registry\nDESCRIPTION: This command pushes both AMD64 and ARM64 package files to a registry, creating a multi-platform package. It specifies the package files and the destination tag in the registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg push \\\n  --package-files=function-amd64.xpkg,function-arm64.xpkg \\\n  negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests for Crossplane Functions\nDESCRIPTION: This command runs the Go tests for a Crossplane function with verbose output and coverage reporting. It executes all test functions defined in the test files within the current directory.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v -cover .\n=== RUN   TestRunFunction\n=== RUN   TestRunFunction/AddTwoBuckets\n--- PASS: TestRunFunction (0.00s)\n    --- PASS: TestRunFunction/AddTwoBuckets (0.00s)\nPASS\ncoverage: 52.6% of statements\nok      github.com/negz/function-xbuckets       0.016s  coverage: 52.6% of statements\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Crossplane Version\nDESCRIPTION: Demonstrates how to install a specific version of Crossplane using the --version flag with Helm. This example installs version 1.10.0.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-stable/crossplane \\\n--version 1.10.0\n```\n\n----------------------------------------\n\nTITLE: Deleting Managed S3 Bucket Resource\nDESCRIPTION: This shell command deletes the previously created S3 bucket managed resource from the Kubernetes cluster. It uses the bucket name to identify and remove the specific resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete bucket crossplane-bucket-hhdzh\n```\n\n----------------------------------------\n\nTITLE: Pushing Package to DockerHub Registry\nDESCRIPTION: Example of pushing a Crossplane package to a DockerHub registry, specifying the full URL along with the package details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push -f my-package.xpkg index.docker.io/crossplane-docs/my-package:v0.14.0\n```\n\n----------------------------------------\n\nTITLE: Viewing a Resource's Individual Connection Secret\nDESCRIPTION: This shell command shows the content of an individual resource's connection secret, which contains all keys defined in the Composition's connectionDetails for that resource, including keys that may not be exposed to Claims.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret key1 -n docs\nName:         key1\nNamespace:    docs\n\nData\n====\npassword:                        40 bytes\nusername:                        20 bytes\nattribute.secret:                40 bytes\nattribute.ses_smtp_password_v4:  44 bytes\n```\n\n----------------------------------------\n\nTITLE: Viewing FromEnvironmentFieldPath Results in Managed Resource\nDESCRIPTION: This snippet shows the result of applying a FromEnvironmentFieldPath patch, displaying the updated region from the environment in the managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe bucket\nName:         my-example-claim-8vrvc-xx5sr\nLabels:       crossplane.io/claim-name=my-example-claim\n# Removed for brevity\nSpec:\n  For Provider:\n    Region:  eu-north-1\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Unsealing Vault\nDESCRIPTION: Uses the unseal key to unseal Vault, making it operational for secret storage.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Resource Metadata in YAML\nDESCRIPTION: Demonstrates how to configure metadata for runtime resources in Crossplane, including setting custom labels for the Deployment and a custom name for the ServiceAccount.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: my-runtime-config\nspec:\n  deploymentTemplate:\n    metadata:\n      labels:\n        my-label: my-value\n  serviceAccountTemplate:\n    metadata:\n      name: my-service-account\n```\n\n----------------------------------------\n\nTITLE: Generating Graphviz Dot Output with Crossplane Beta Trace\nDESCRIPTION: This snippet demonstrates how to use the '--output=dot' option to generate a Graphviz dot file output. It also shows how to pipe the output directly to the 'dot' command to render an image file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace cluster.aws.platformref.upbound.io platform-ref-aws -o dot | dot -Tpng -o graph.png\n```\n\n----------------------------------------\n\nTITLE: TrimPrefix String Transform in Crossplane\nDESCRIPTION: Shows how to remove characters from the beginning of a string using Crossplane's TrimPrefix transformation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"north-1\"]\n    transforms:\n      - type: string\n        string:\n          type: TrimPrefix\n          trim: `eu-\n```\n\n----------------------------------------\n\nTITLE: Default Values for Optional Labels in Crossplane\nDESCRIPTION: Shows how to set default values for optional labels in a Crossplane Composition. Demonstrates combining Value and FromCompositeFieldPath selectors to implement fallback values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/environment-configs.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n          - type: Selector\n            selector:\n              matchLabels:\n                - key: my-first-label-key\n                  type: Value\n                  value: my-label-value\n                - key: my-second-label-key\n                  type: Value\n                  value: my-default-value\n                - key: my-second-label-key\n                  type: FromCompositeFieldPath\n                  valueFromFieldPath: spec.parameters.deploy\n                  fromFieldPathPolicy: Optional\n```\n\n----------------------------------------\n\nTITLE: Rendered Composition Output in YAML\nDESCRIPTION: This YAML output shows the result of rendering a composition using the Crossplane CLI. It includes the composite resource and the resources created by the composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/compositions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: example.crossplane.io/v1\nkind: XBucket\nmetadata:\n  name: example-render\n---\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  annotations:\n    crossplane.io/composition-resource-name: storage-bucket\n  generateName: example-render-\n  labels:\n    crossplane.io/composite: example-render\n  ownerReferences:\n  - apiVersion: example.crossplane.io/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: XBucket\n    name: example-render\n    uid: \"\"\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane View Role\nDESCRIPTION: Command to view the full RBAC policy for the crossplane-view ClusterRole which has read-only access to Crossplane types and cluster resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/pods.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-view\n```\n\n----------------------------------------\n\nTITLE: Inspecting Example Application Status\nDESCRIPTION: Shell commands to inspect the status of an example application and its resources\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/troubleshoot-crossplane.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe exampleapp example-application\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get exampleapp example-application -o=jsonpath='{.spec.resourceRef}{\" \"}{.spec.resourceRefs}' | jq\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe xexampleapp example-application-xqlsz\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xexampleapp example-application-xqlsz -o=jsonpath='{.spec.resourceRef}{\" \"}{.spec.resourceRefs}' | jq\n```\n\n----------------------------------------\n\nTITLE: Matching Resources by Controller Reference in Crossplane Compositions\nDESCRIPTION: Example showing how to match resources by controller reference in a Crossplane Composition. This ensures the InternetGateway matches only the VPC created in the same composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    name: my-vpc\n    spec:\n      forProvider:\n      # Removed for brevity\n- base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: InternetGateway\n    name: my-gateway\n    spec:\n      forProvider:\n        vpcIdSelector:\n          matchControllerRef: true\n```\n\n----------------------------------------\n\nTITLE: Listing Vault Secrets in Crossplane System Namespace\nDESCRIPTION: Lists the secrets stored in Vault's crossplane-system namespace, showing managed resource connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -i vault-0 -- vault kv list /secret/crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Authentication in Vault\nDESCRIPTION: Configures Vault to use Kubernetes service account tokens for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nvault auth enable kubernetes\n```\n\n----------------------------------------\n\nTITLE: Match Transform with Regex Pattern\nDESCRIPTION: Demonstrates using regular expressions in a match transform for pattern matching.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: regexp\n              regexp: '^field1.*'\n              result: \"foundField1\"\n```\n\n----------------------------------------\n\nTITLE: Basic Crossplane Trace Command Output\nDESCRIPTION: Demonstrates the default output of crossplane beta trace command showing configuration hierarchy, versions, and health status of AWS platform resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace cluster.aws.platformref.upbound.io platform-ref-aws\n```\n\n----------------------------------------\n\nTITLE: Debug Configuration for Crossplane Provider\nDESCRIPTION: YAML configuration to enable debug logging for a Crossplane provider using DeploymentRuntimeConfig\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/troubleshoot-crossplane.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: debug-config\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      template:\n        spec:\n          containers:\n          - name: package-runtime\n            args: \n            - --debug\n---\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.33.0\n  runtimeConfigRef:\n    apiVersion: pkg.crossplane.io/v1beta1\n    kind: DeploymentRuntimeConfig\n    name: debug-config\n```\n\n----------------------------------------\n\nTITLE: Multiple Object Required Fields in XRD\nDESCRIPTION: Illustrates defining required fields for multiple nested objects within an XRD schema, showing how to specify requirements for different levels of the resource specification\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              size:\n                type: string  \n              name:\n                type: string \n              location:\n                type: object\n                properties:\n                  country: \n                    type: string \n                  zone:\n                    type: string\n                required:\n                  - country\n            required:  \n              - size\n              - location\n```\n\n----------------------------------------\n\nTITLE: Initial RunFunction Method Implementation in Go\nDESCRIPTION: This snippet shows the initial 'hello world' implementation of the RunFunction method, which is the entry point for Crossplane composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n\tf.log.Info(\"Running Function\", \"tag\", req.GetMeta().GetTag())\n\n\trsp := response.To(req, response.DefaultTTL)\n\n\tin := &v1beta1.Input{}\n\tif err := request.GetInput(req, in); err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get Function input from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\tresponse.Normalf(rsp, \"I was run with input %q\", in.Example)\n\treturn rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: FromEnvironmentFieldPath Patch in Crossplane YAML\nDESCRIPTION: Demonstrates applying values from the in-memory environment to a composed resource using FromEnvironmentFieldPath patch. Shows setting region from environment location.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n    patches:\n    - type: FromEnvironmentFieldPath\n      fromFieldPath: locations.eu\n      toFieldPath: spec.forProvider.region\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal\nDESCRIPTION: Azure CLI command to create a service principal with Owner role for authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-azure.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naz ad sp create-for-rbac \\\n--sdk-auth \\\n--role Owner \\\n--scopes /subscriptions/$@<subscription_id>$@\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for ARM64\nDESCRIPTION: Creates a Crossplane package (.xpkg) for ARM64 platform by embedding the runtime image. Specifies package root directory, runtime image, and output file location.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-arm64 \\\n    --package-file=function-arm64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for AMD64 Platform\nDESCRIPTION: This command builds a Docker runtime image for the linux/amd64 platform and tags it as 'runtime-amd64'. The --quiet flag is used to suppress verbose output.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/amd64 --tag runtime-amd64\n```\n\n----------------------------------------\n\nTITLE: Reference EnvironmentConfig in Crossplane YAML\nDESCRIPTION: This YAML shows a reference environment configuration used in Crossplane for in-memory data operations. It defines static environment data applicable across resource patches and manipulations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: EnvironmentConfig\nmetadata:\n  name: example-environment\ndata:\n  locations:\n    us: us-east-2\n    eu: eu-north-1\n  key1: value1\n  key2: value2\n```\n\n----------------------------------------\n\nTITLE: Combining Composite Resource Values in Crossplane (YAML)\nDESCRIPTION: This snippet illustrates the CombineFromComposite patch, which takes values from the composite resource, combines them, and applies them to the composed resource. It shows how to use the 'desiredRegion' and 'field2' values to generate the managed resource's 'name'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineFromComposite\n      combine:\n        variables:\n          - fromFieldPath: spec.desiredRegion\n          - fromFieldPath: spec.field2\n        strategy: string\n        string:\n          fmt: \"my-resource-%s-%s\"\n      toFieldPath: metadata.name\n```\n\n----------------------------------------\n\nTITLE: Generating Graphviz Visualization from Crossplane Trace\nDESCRIPTION: Using 'crossplane beta trace' with '-o dot' option and piping to Graphviz dot command to generate a visual representation of resource relationships as a PNG image.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace cluster.aws.platformref.upbound.io platform-ref-aws -o dot | dot -Tpng -o graph.png\n```\n\n----------------------------------------\n\nTITLE: Examining the Function Source Code Files\nDESCRIPTION: Shell command to list the Python source files inside the function directory. These files contain the actual function implementation that will be customized to handle XBuckets resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nls function/\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for AWS Credentials\nDESCRIPTION: This shell command creates a Kubernetes secret named 'aws-secret' in the crossplane-system namespace. It uses the contents of the aws-credentials.txt file to populate the secret data.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric aws-secret \\\n-n crossplane-system \\\n--from-file=creds=./aws-credentials.txt\n```\n\n----------------------------------------\n\nTITLE: Viewing the Managed AWS Resources\nDESCRIPTION: A shell command to view the actual AWS resources (called managed resources in Crossplane) that have been provisioned as a result of creating the NoSQL resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\nNAME                                                    READY   SYNCED   EXTERNAL-NAME             AGE\ntable.dynamodb.aws.upbound.io/my-nosql-database-t5wtx   True    True     my-nosql-database-t5wtx   33s\n\nNAME                                               READY   SYNCED   EXTERNAL-NAME             AGE\nbucket.s3.aws.upbound.io/my-nosql-database-xtzph   True    True     my-nosql-database-xtzph   33s\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Helm Repository\nDESCRIPTION: Adds the Crossplane stable repository to Helm's repository list.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\n```\n\n----------------------------------------\n\nTITLE: Configuring a Crossplane Function for Development Testing\nDESCRIPTION: YAML definition for a Crossplane Function resource that uses the Development runtime annotation, allowing local testing without packaging the function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-xbuckets\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  # The CLI ignores this package when using the Development runtime.\n  # You can set it to any value.\n  package: xpkg.crossplane.io/negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Creating ControllerConfig for Provider External Secret Store Support\nDESCRIPTION: Creates a ControllerConfig resource to enable external secret stores in Provider controllers.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: pkg.crossplane.io/v1alpha1\nkind: ControllerConfig\nmetadata:\n  name: vault-config\nspec:\n  args:\n    - --enable-external-secret-stores\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Automatically Importing Resource with Observe Management Policy\nDESCRIPTION: Demonstration of automatically importing a GCP SQL DatabaseInstance using the Observe management policy and external-name annotation\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/import-existing-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"Observe\"]\n  forProvider:\n    region: \"us-central1\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Custom API Resources in Kubernetes\nDESCRIPTION: Command to check that both the cluster-scoped VirtualMachine and namespace-scoped VirtualMachineClaim API resources are available in the Kubernetes API server.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources | grep VirtualMachine\nvirtualmachineclaims              compute.example.com/v1alpha1           true         VirtualMachineClaim\nvirtualmachines                   compute.example.com/v1alpha1           false        VirtualMachine\n```\n\n----------------------------------------\n\nTITLE: AsyncOperation Ongoing Condition Example in YAML\nDESCRIPTION: Shows the format of an 'AsyncOperation' condition with 'Ongoing' reason, indicating that the managed resource operation is still in progress.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  AsyncOperation\n  Status:                True\n  Reason:                Ongoing\n```\n\n----------------------------------------\n\nTITLE: Running Crossplane Function Locally with Hatch\nDESCRIPTION: This command runs the Crossplane function locally using Hatch, enabling testing and development without encryption or authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nhatch run development\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane Edit ClusterRole with Aggregation Rules\nDESCRIPTION: Defines the crossplane-edit ClusterRole that aggregates all roles with the label 'rbac.crossplane.io/aggregate-to-edit: true'. This role provides edit-level access to Crossplane resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane-edit\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\naggregationRule:\n  clusterRoleSelectors:\n  - matchLabels:\n      rbac.crossplane.io/aggregate-to-edit: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Installing Patch-and-Transform Function\nDESCRIPTION: YAML configuration for installing the patch-and-transform function required by the Composition template. Specifies the function package and version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Provider Installation Status\nDESCRIPTION: This shell command checks if the Crossplane Provider for GCP is installed and healthy. It displays the provider name, installation status, health status, package information, and age.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Provider for Validation\nDESCRIPTION: YAML manifest for defining an AWS IAM provider to be used in validation with the 'crossplane beta validate' command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-iam\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-iam:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Visualizing Namespace-based Composition in Crossplane v2 with Mermaid\nDESCRIPTION: A flowchart showing how users can create composite resources that compose various resources within a namespace, including Deployments, Services, and RDSInstances (managed resources).\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/whats-new/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  user(User)\n\n  subgraph ns [my-namespace]\n    direction LR\n    xr(\"App (XR)\")\n  \tdply(\"Deployment\")\n    svc(\"Service\")\n    rds(\"RDSInstance (MR)\")\n  end\n\n  user --create-->xr\n  xr compose-dply@--compose--> dply\n  xr compose-svc@--compose--> svc\n  xr compose-rds@--compose--> rds\ncompose-dply@{animate: true}\n\ncompose-dply@{animate: true}\ncompose-svc@{animate: true}\ncompose-rds@{animate: true}\n```\n\n----------------------------------------\n\nTITLE: Pushing Multi-Platform Crossplane Package to Registry\nDESCRIPTION: This command pushes both AMD64 and ARM64 package files to a registry as a multi-platform package. It specifies both .xpkg files and pushes them to the 'negz/function-xbuckets:v0.1.0' tag in the registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg push \\\n  --package-files=function-amd64.xpkg,function-arm64.xpkg \\\n  negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Verifying Composite Resource Deletion\nDESCRIPTION: Confirms that all composite resources have been deleted after removing the namespace-scoped Claim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\nNo resources found\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for AMD64 Platform\nDESCRIPTION: Command to build a Crossplane package (.xpkg) for AMD64 platform using the Crossplane CLI. This embeds the runtime-amd64 image into the package and includes metadata from the crossplane.yaml file in the package directory.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-amd64 \\\n    --package-file=function-amd64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Viewing Installed Crossplane Providers\nDESCRIPTION: This shell command lists all installed Crossplane providers in the Kubernetes cluster using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Upjet Success Condition Example\nDESCRIPTION: Shows the condition structure when an Upjet-based provider successfully creates a managed resource asynchronously.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  LastAsyncOperation\n  Status:                True\n  Reason:                Success\n```\n\n----------------------------------------\n\nTITLE: Converting Quantity Format in Crossplane\nDESCRIPTION: Example of using convert transform with quantity format to handle size suffix conversions to float64 values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: float64\n   format: quantity\n```\n\n----------------------------------------\n\nTITLE: Verifying Composite Resource Deletion\nDESCRIPTION: A shell command to verify that the composite resource has been successfully deleted following the deletion of the NoSQLClaim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\nNo resources found\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Crossplane Providers\nDESCRIPTION: Shell command to list all installed Crossplane providers in the cluster, showing their installation status, health, and package information.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Creating a Crossplane PubSubClaim in a Namespace\nDESCRIPTION: This YAML snippet creates a PubSubClaim in a specific namespace, demonstrating how to use the custom API with namespace isolation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: queue.example.com/v1alpha1\nkind: PubSubClaim\nmetadata:\n  name: my-pubsub-queue\n  namespace: crossplane-test\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Front Matter for Changed Page Titles in Crossplane Documentation\nDESCRIPTION: YAML front matter example showing how to handle page title changes using the matchTitle field. This ensures correct linking between different versions of the same page.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/contribute.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: New Title\nmatchTitle: Original Title\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Administrator Permissions\nDESCRIPTION: ClusterRole for Crossplane administrators that grants full access to Crossplane resources, including viewing events, managing secrets, namespaces, and RBAC permissions. This role is aggregated to the crossplane-admin role.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane:aggregate-to-admin\n  labels:\n    rbac.crossplane.io/aggregate-to-admin: \"true\"\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nrules:\n# Crossplane administrators have access to view events.\n- apiGroups: [\"\"]\n  resources: [events]\n  verbs: [get, list, watch]\n# Crossplane administrators must create provider credential secrets, and may\n# need to read or otherwise interact with connection secrets. They may also need\n# to create or annotate namespaces.\n- apiGroups: [\"\"]\n  resources: [secrets, namespaces]\n  verbs: [\"*\"]\n# Crossplane administrators have access to view the roles that they may be able\n# to grant to other subjects.\n- apiGroups: [rbac.authorization.k8s.io]\n  resources: [clusterroles, roles]\n  verbs: [get, list, watch]\n# Crossplane administrators have access to grant the access they have to other\n# subjects.\n- apiGroups: [rbac.authorization.k8s.io]\n  resources: [clusterrolebindings, rolebindings]\n  verbs: [\"*\"]\n# Crossplane administrators have full access to built in Crossplane types.\n- apiGroups:\n  - apiextensions.crossplane.io\n  resources: [\"*\"]\n  verbs: [\"*\"]\n- apiGroups:\n  - pkg.crossplane.io\n  resources: [\"*\"]\n  verbs: [\"*\"]\n# Crossplane administrators have access to view CRDs in order to debug XRDs.\n- apiGroups: [apiextensions.k8s.io]\n  resources: [customresourcedefinitions]\n  verbs: [get, list, watch]\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Secret References\nDESCRIPTION: Example of configuring connection secret references for an AWS RDS instance and viewing the resulting secret data.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.m.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: my-rds-instance\nspec:\n  forProvider:\n  # Removed for brevity\n  writeConnectionSecretToRef:\n    name: rds-secret\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret rds-secret\nName:         rds-secret\n# Removed for brevity\nData\n====\nport:      4 bytes\nusername:  10 bytes\nendpoint:  54 bytes\npassword:  27 bytes\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Pod Status During Initialization\nDESCRIPTION: Command to check the status of pods in the crossplane-system namespace, showing the init container running.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/pods.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS     RESTARTS   AGE\ncrossplane-9f6d5cd7b-r9j8w                 0/1     Init:0/1   0          6s\n```\n\n----------------------------------------\n\nTITLE: Checking XRD Status in Kubernetes\nDESCRIPTION: Commands to check the status of a Composite Resource Definition (XRD) and view its events for debugging purposes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd testing.awsblueprints.io\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe xrd testing.awsblueprints.io\n```\n\n----------------------------------------\n\nTITLE: Configuring writeConnectionSecretToRef in AWS RDSInstance\nDESCRIPTION: Example of configuring an AWS RDSInstance managed resource with writeConnectionSecretToRef to store connection details in a Kubernetes Secret named rds-secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: my-rds-instance\nspec:\n  forProvider:\n  # Removed for brevity\n  writeConnectionSecretToRef:\n    name: rds-secret\n```\n\n----------------------------------------\n\nTITLE: Creating an XR with Development Channel Selector in Crossplane\nDESCRIPTION: Creates a Composite Resource (XR) called 'vpc-dev' with a compositionRevisionSelector that matches the label 'channel: dev'. This ensures the resource uses a specific composition revision labeled for development.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind:  MyVPC\nmetadata:\n  name: vpc-dev\nspec:\n  id: vpc-dev\n  compositionRevisionSelector:\n    matchLabels:\n      channel: dev\n```\n\n----------------------------------------\n\nTITLE: Enabling Vault KV Secrets Engine\nDESCRIPTION: Enables the KV version 2 secrets engine at the path 'secret/' for storing Crossplane secrets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -it vault-0 -- vault secrets enable -path=secret kv-v2\n```\n\n----------------------------------------\n\nTITLE: Partial XRD with Custom Status Field\nDESCRIPTION: Partial example of a CompositeResourceDefinition showing how to define a custom status field for inter-resource patching.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CompositeResourceDefinition\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Resource Relationships with beta trace\nDESCRIPTION: Example of using the crossplane beta trace command to display relationships of Crossplane objects for a specific resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace example.crossplane.io my-claim\n```\n\n----------------------------------------\n\nTITLE: String Transform Example\nDESCRIPTION: Shows how to configure string transformations for formatting and manipulating string values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"stringAnnotation\"]\n    transforms:\n      - type: string\n        string:\n          type: ...\n```\n\n----------------------------------------\n\nTITLE: Verifying Composition Revisions in Shell\nDESCRIPTION: Uses kubectl to list CompositionRevisions, displaying their names, revision numbers, and channel labels. This helps in verifying the creation of new revisions after updates.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevisions -o=\"custom-columns=NAME:.metadata.name,REVISION:.spec.revision,CHANNEL:.metadata.labels.channel\"\n```\n\n----------------------------------------\n\nTITLE: Usage with Resolved Selectors (YAML)\nDESCRIPTION: This example shows a Usage resource after the selectors have been resolved, with the resourceRef.name field populated with the selected resource name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/usages.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1alpha1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n       name: my-cluster\n    resourceSelector:\n      matchLabels:\n        foo: bar\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n       name: my-cluster\n    resourceSelector:\n       matchLabels:\n          baz: qux\n```\n\n----------------------------------------\n\nTITLE: Deleting a VirtualMachine Resource with kubectl in Crossplane\nDESCRIPTION: This command deletes a VirtualMachine resource named 'my-vm' using kubectl in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete VirtualMachine my-vm\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Provider Package Example\nDESCRIPTION: Example command for installing the AWS S3 provider package from the Crossplane registry. Demonstrates the proper syntax for the xpkg install command with a specific version tag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg install provider xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for ARM64 Platform\nDESCRIPTION: This command uses the Crossplane CLI to build a package for the ARM64 platform. It specifies the package root directory, embeds the ARM64 runtime image, and outputs the package file as 'function-arm64.xpkg'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-arm64 \\\n    --package-file=function-arm64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Literal String Matching in Crossplane Match Transform\nDESCRIPTION: Demonstrates how to match an exact string using the match transform with a literal pattern type. On successful match, the specified result value is provided to the target field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n              literal: \"field1-text\"\n              result: \"matchedLiteral\"\n```\n\n----------------------------------------\n\nTITLE: String Transform with Convert\nDESCRIPTION: Example of string transform using convert to change string case.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"FIELD1-TEXT\"]\n    transforms:\n      - type: string\n        string:\n          type: Convert\n          convert: \"ToUpper\"\n```\n\n----------------------------------------\n\nTITLE: Removing Finalizer from a Resource in Shell\nDESCRIPTION: Demonstrates how to remove a finalizer from a Kubernetes resource using kubectl patch, allowing it to be deleted when stuck.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl patch <resource-type> <resource-name> -p '{\"metadata\":{\"finalizers\": []}}' --type=merge\n```\n\n----------------------------------------\n\nTITLE: Viewing a Populated Crossplane Connection Secret\nDESCRIPTION: This shell command shows the result of examining a Crossplane connection secret after properly configuring connectionDetails in the Composition, displaying the keys that have been included from the composed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret -n other-namespace\nName:         b0dc71f8-2688-4ebc-818a-bbad6a2c4f9a\nNamespace:    other-namespace\n\nType:  connection.crossplane.io/v1alpha1\n\nData\n====\nusername:                        20 bytes\nattribute.secret:                40 bytes\nattribute.ses_smtp_password_v4:  44 bytes\npassword:                        40 bytes\n```\n\n----------------------------------------\n\nTITLE: Defining CEL Validation Rules in Crossplane XRD (YAML)\nDESCRIPTION: This snippet demonstrates how to define Common Expression Language (CEL) validation rules in a Crossplane Composite Resource Definition (XRD). It includes a rule to ensure that the 'replicas' field value is between 'minReplicas' and 'maxReplicas'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: myXR.crossplane.io\nspec:\n# Removed for brevity\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              x-kubernetes-validations:\n              - rule: \"self.minReplicas <= self.replicas && self.replicas <= self.maxReplicas\"\n                message: \"replicas should be in between minReplicas and maxReplicas.\"\n              properties:\n                minReplicas:\n                  type: integer\n                maxReplicas:\n                  type: integer\n                replicas: \n                  type: integer\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Converting ControllerConfig to DeploymentRuntimeConfig with Crossplane beta convert\nDESCRIPTION: Example of using the crossplane beta convert command to convert a ControllerConfig to a DeploymentRuntimeConfig, specifying input and output files.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta convert deployment-runtime controllerConfig.yaml -o deploymentConfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Kubernetes Authentication\nDESCRIPTION: Sets up Vault to communicate with the Kubernetes API for service account validation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/kubernetes/config \\\n        token_reviewer_jwt=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\n        kubernetes_host=\"https://$KUBERNETES_PORT_443_TCP_ADDR:443\" \\\n        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Listing Generated Function Files\nDESCRIPTION: Shell command showing the files and directories created by the function template initialization process.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls function-xbuckets\nDockerfile    LICENSE       NOTES.txt     README.md     example       fn.go         fn_test.go    go.mod        go.sum        init.sh       input         main.go       package       renovate.json\n```\n\n----------------------------------------\n\nTITLE: Applying GCP Provider Configuration\nDESCRIPTION: YAML configuration to install the GCP Storage Provider in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-storage\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-storage:v1.12.1\n```\n\n----------------------------------------\n\nTITLE: Updating the Crossplane Helm Repository\nDESCRIPTION: Command to update the local Helm chart repository cache, ensuring you have the latest version of the Crossplane chart before upgrading.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: LastAsyncOperation DestroyFailure Condition Example in YAML\nDESCRIPTION: Shows the format of a 'LastAsyncOperation' condition with 'DestroyFailure' reason, indicating the Provider failed to delete the managed resource. The conditions.message would provide more details on what went wrong.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  LastAsyncOperation\n  Status:                False\n  Reason:                DestroyFailure\n```\n\n----------------------------------------\n\nTITLE: Directory-based Schema Validation Output\nDESCRIPTION: Example output of running the 'crossplane beta validate' command against a directory of schema files, showing multiple validation results including both successes and failures.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta validate schema resources.yaml\n[x] schema validation error example.crossplane.io/v1beta1, Kind=XR, example : status.conditions[0].lastTransitionTime: Invalid value: \"null\": status.conditions[0].lastTransitionTime in body must be of type string: \"null\"\n[x] CEL validation error example.crossplane.io/v1beta1, Kind=XR, example : spec: Invalid value: \"object\": no such key: minReplicas evaluating rule: replicas should be greater than or equal to minReplicas.\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-1 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-1 validated successfully\nTotal 5 resources: 0 missing schemas, 4 success cases, 1 failure cases\n```\n\n----------------------------------------\n\nTITLE: Installing KCL Composition Function\nDESCRIPTION: Configuration for installing the KCL composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: crossplane-contrib-function-kcl\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-kcl:v0.11.2\n```\n\n----------------------------------------\n\nTITLE: Viewing Claims in Crossplane\nDESCRIPTION: A shell command to view the created ESS claims in the default namespace and verify they are in a ready state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n default get claim\nNAME     READY   CONNECTION-SECRET   AGE\nmy-ess   True                        19s\n```\n\n----------------------------------------\n\nTITLE: Using ToCompositeFieldPath Patch in Crossplane\nDESCRIPTION: This snippet demonstrates how to use ToCompositeFieldPath to write data from a composed resource back to its composite parent. The example shows taking a hosted zone ID and applying it as a label in the composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: ToCompositeFieldPath\n      fromFieldPath: status.atProvider.hostedZoneId\n      toFieldPath: metadata.labels['ZoneID']\n```\n\n----------------------------------------\n\nTITLE: Displaying Connection Secrets in Crossplane Trace\nDESCRIPTION: Using the '-s' flag with 'crossplane beta trace' to include connection secret names (but not values) in the output, showing both secret names and their namespaces.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws -s\n```\n\n----------------------------------------\n\nTITLE: Creating a Crossplane NoSQL Claim\nDESCRIPTION: This YAML snippet creates a NoSQLClaim in the crossplane-test namespace. Claims are namespace-scoped versions of the custom API.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: database.example.com/v1alpha1\nkind: NoSQLClaim\nmetadata:\n  name: my-nosql-database\n  namespace: crossplane-test\nspec:\n  location: \"US\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Crossplane Providers\nDESCRIPTION: Command to view all Crossplane providers currently installed in the cluster. These providers need to be removed after managed resources are deleted.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/uninstall.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace for Crossplane Claims\nDESCRIPTION: Creates a Kubernetes namespace to test namespace-scoped Crossplane resources (Claims).\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Upjet ApplyFailure Status\nDESCRIPTION: Example of the ApplyFailure status indicating failed resource configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  LastAsyncOperation\n  Status:                False\n  Reason:                ApplyFailure\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Configuration Revisions\nDESCRIPTION: This shell command shows how to list the Configuration revisions in a Crossplane installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configurationrevisions\n```\n\n----------------------------------------\n\nTITLE: Getting Resource References from a Composite Resource\nDESCRIPTION: Shows how to retrieve references to sub-resources of a Composite Resource using kubectl and jq, which is useful for troubleshooting composition relationships.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get <KIND> <NAME> -o=jsonpath='{.spec.resourceRef}{\" \"}{.spec.resourceRefs}' | jq\n```\n\n----------------------------------------\n\nTITLE: Creating a Crossplane Claim in a Namespace\nDESCRIPTION: This YAML creates a PubSubClaim in a specific namespace, demonstrating how to use Crossplane's custom API with namespaces.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: queue.example.com/v1alpha1\nkind: PubSubClaim\nmetadata:\n  name: my-pubsub-queue\n  namespace: crossplane-test\nspec:\n  location: \"US\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Using Input as Fallback in Crossplane Match Transform\nDESCRIPTION: Shows how to use the original input value as the fallback when no patterns match in a match transform. This preserves the original value when no matches are found.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n              literal: \"UnknownString\"\n              result: \"foundField1\"\n          fallbackTo: Input\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Editor Permissions\nDESCRIPTION: ClusterRole for Crossplane editors that grants edit access to Crossplane resources, including viewing events, managing secrets, and viewing namespaces. This role is aggregated to the crossplane-edit role.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane:aggregate-to-edit\n  labels:\n    rbac.crossplane.io/aggregate-to-edit: \"true\"\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nrules:\n# Crossplane editors have access to view events.\n- apiGroups: [\"\"]\n  resources: [events]\n  verbs: [get, list, watch]\n# Crossplane editors must create provider credential secrets, and may need to\n# read or otherwise interact with connection secrets.\n- apiGroups: [\"\"]\n  resources: [secrets]\n  verbs: [\"*\"]\n# Crossplane editors may see which namespaces exist, but not edit them.\n- apiGroups: [\"\"]\n  resources: [namespaces]\n  verbs: [get, list, watch]\n# Crossplane editors have full access to built in Crossplane types.\n- apiGroups:\n  - apiextensions.crossplane.io\n  resources: [\"*\"]\n  verbs: [\"*\"]\n- apiGroups:\n  - pkg.crossplane.io\n  resources: [\"*\"]\n  verbs: [\"*\"]\n```\n\n----------------------------------------\n\nTITLE: Resource Templates Example\nDESCRIPTION: Example showing how to define multiple resource templates (S3 Bucket and EC2 Instance) in a composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: storage-bucket\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: \"us-east-2\"\n- name: vm\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: Instance\n    spec:\n      forProvider:\n        ami: ami-0d9858aa3c6322f73\n        instanceType: t2.micro\n        region: \"us-east-2\"\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Pod Status After Initialization\nDESCRIPTION: Shell command to verify the Crossplane pod has completed initialization and is now running with the core container active.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/pods.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS    RESTARTS   AGE\ncrossplane-9f6d5cd7b-r9j8w                 1/1     Running   0          15s\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Resources in Kubernetes with kubectl\nDESCRIPTION: Command to list all managed resources in the Kubernetes cluster. This helps identify all external resources managed by Crossplane that might need to be tracked during uninstallation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/uninstall-crossplane.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Publishing Secrets to Kubernetes with publishConnectionDetailsTo\nDESCRIPTION: Example of using publishConnectionDetailsTo to store AWS RDS instance connection details in a Kubernetes Secret, which expands on writeConnectionSecretToRef functionality.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rds.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n  # Removed for brevity\n  publishConnectionDetailsTo:\n    name: rds-kubernetes-secret\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Admin ClusterRoleBinding in Kubernetes YAML\nDESCRIPTION: This snippet creates a ClusterRoleBinding for Crossplane admin access. It binds the 'crossplane-admin' ClusterRole to the 'crossplane:masters' Group.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: crossplane-admin\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: crossplane-admin\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: crossplane:masters\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Pod Status in Kubernetes\nDESCRIPTION: This shell command checks the status of Crossplane pods in the crossplane-system namespace. It shows the pod in the Init state, indicating the init container is running.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/pods.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS     RESTARTS   AGE\ncrossplane-9f6d5cd7b-r9j8w                 0/1     Init:0/1   0          6s\n```\n\n----------------------------------------\n\nTITLE: Getting Managed Resources\nDESCRIPTION: This shell command retrieves the list of managed resources created by Crossplane. These resources represent the actual cloud infrastructure (e.g., AWS S3 Buckets, DynamoDB Tables) provisioned by Crossplane based on the Composition template.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Admin Role\nDESCRIPTION: Command to view the full RBAC policy for the crossplane-admin ClusterRole which has full access to Crossplane types and cluster resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/pods.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Registry Package Pull Secrets\nDESCRIPTION: Demonstrates how to use packagePullSecrets to authenticate and download Provider packages from a private registry\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  packagePullSecrets: \n    - name: example-secret\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Event Examples\nDESCRIPTION: Example output of Crossplane events showing provider connection errors\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/troubleshoot-crossplane.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nEvents:\n  Type     Reason                   Age                From                                                   Message\n  ----     ------                   ----               ----                                                   -------\n  Warning  CannotConnectToProvider  16s (x4 over 46s)  managed/postgresqlserver.database.azure.crossplane.io  cannot get referenced ProviderConfig: ProviderConfig.azure.crossplane.io \"default\" not found\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Provider Package\nDESCRIPTION: Example of installing the latest version of the AWS S3 provider package in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg install provider xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Example Crossplane Resources Configuration\nDESCRIPTION: YAML configuration files for testing the Crossplane function, including XBuckets composite resource definition, composition configuration, and function definition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: create-buckets\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBuckets\n  mode: Pipeline\n  pipeline:\n  - step: create-buckets\n    functionRef:\n      name: function-xbuckets\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-xbuckets\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  package: xpkg.crossplane.io/negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Composition Update Policy in XRD\nDESCRIPTION: This YAML snippet demonstrates how to set the defaultCompositionUpdatePolicy to Manual in an XRD. This prevents composite resources and Claims from automatically using new Composition revisions when changes are made to a Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositionUpdatePolicy: Manual\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Pushing Multi-Platform Crossplane Package to Registry\nDESCRIPTION: Pushes both AMD64 and ARM64 package files to a registry using the Crossplane CLI. This creates a multi-platform package that can run on both linux/arm64 and linux/amd64 hosts.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg push \\\n  --package-files=function-amd64.xpkg,function-arm64.xpkg \\\n  negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Using Default Values in Crossplane Match Transform\nDESCRIPTION: Demonstrates how to specify a fallback value when no patterns match in a match transform. This example uses a specific fallback value when the input doesn't match any patterns.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n              literal: \"UnknownString\"\n              result: \"foundField1\"\n          fallbackTo: Value\n          fallbackValue: \"StringNotFound\"\n```\n\n----------------------------------------\n\nTITLE: Applying EnvironmentConfig in Crossplane with YAML\nDESCRIPTION: This YAML configuration shows how to define and utilize `EnvironmentConfig` in Crossplane for patching. It includes setting up references or selectors for environments and demonstrates patching using environment fields with types like `ToCompositeFieldPath` and `FromCompositeFieldPath` to manage data flows between composite resources and the environment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  environment:\n    environmentConfigs:\n      - ref:\n          name: example-environment\n  # Removed for Brevity\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nenvironment:\n  patches:\n  - type: ToCompositeFieldPath\n    fromFieldPath: tags\n    toFieldPath: metadata.labels[envTag]\n  - type: FromCompositeFieldPath\n    fromFieldPath: metadata.name\n    toFieldPath: newEnvironmentKey\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Resource Usage with Beta Top Command\nDESCRIPTION: Example output of the crossplane beta top command which shows CPU and memory usage of Crossplane related pods.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta top \nTYPE         NAMESPACE   NAME                                                                  CPU(cores)   MEMORY\ncrossplane   default     crossplane-f98f9ddfd-tnm46                                            4m           32Mi\ncrossplane   default     crossplane-rbac-manager-74ff459b88-94p8p                              4m           14Mi\nprovider     default     provider-aws-s3-1f1a3fb08cbc-5c49d84447-sggrq                         3m           108Mi\nprovider     default     crossplane-contrib-provider-family-aws-48b3b5ccf964-76c9686b6-bgg65   2m           89Mi\n```\n\n----------------------------------------\n\nTITLE: Installing Patch-and-Transform Function\nDESCRIPTION: Installs the function-patch-and-transform Crossplane function which enables patch and transform functionality in Compositions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating VaultConfig for Crossplane Plugin\nDESCRIPTION: Creates a VaultConfig resource to connect the Crossplane plugin to the Vault service.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: secrets.crossplane.io/v1alpha1\nkind: VaultConfig\nmetadata:\n  name: vault-internal\nspec:\n  server: http://vault.vault-system:8200\n  mountPath: secret/\n  version: v2\n  auth:\n    method: Token\n    token:\n      source: Filesystem\n      fs:\n        path: /vault/secrets/token\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Crossplane Validation Command Output\nDESCRIPTION: Example output of running the 'crossplane beta validate' command showing validation errors when checking XRD rules against an XR instance.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta validate xrd.yaml xr.yaml\n[x] CEL validation error example.crossplane.io/v1beta1, Kind=XR, example : spec: Invalid value: \"object\": replicas should be in between minReplicas and maxReplicas.\nTotal 1 resources: 0 missing schemas, 0 success cases, 1 failure cases\n```\n\n----------------------------------------\n\nTITLE: Converting JSON String to Object in Crossplane\nDESCRIPTION: Illustrates how to convert a JSON string to an object using the convert transform in Crossplane. This is useful for patching keys in an object.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: object\n   format: json\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Service for Crossplane Webhooks in YAML\nDESCRIPTION: This snippet defines a Kubernetes Service for Crossplane webhooks. It exposes port 9443 for TCP traffic and selects pods with the 'app: crossplane' and 'release: crossplane' labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: crossplane-webhooks\n  namespace: default\n  labels:\n    app: crossplane\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  selector:\n    app: crossplane\n    release: crossplane\n  ports:\n  - protocol: TCP\n    port: 9443\n    targetPort: 9443\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Function Project\nDESCRIPTION: Shell command to initialize a new Crossplane function project from a template repository and its output showing successful creation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg init function-xbuckets https://github.com/crossplane/function-template-python -d function-xbuckets\nInitialized package \"function-xbuckets\" in directory \"/home/negz/control/negz/function-xbuckets\" from https://github.com/crossplane/function-template-python/tree/bfed6923ab4c8e7adeed70f41138645fc7d38111 (main)\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Revision Activation Policy for Provider Upgrades\nDESCRIPTION: This YAML configures a Provider with a 'Manual' revisionActivationPolicy, which prevents automatic activation of newly installed Provider versions, requiring manual activation for upgrades.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  revisionActivationPolicy: Manual\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Checking Provider Status\nDESCRIPTION: Shell command to view the status of installed Azure providers in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Unhealthy Package Revision Status in YAML\nDESCRIPTION: YAML configuration showing the status of a failed provider package revision installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nType: Healthy\nStatus: False\nReason: UnhealthyPackageRevision\n```\n\n----------------------------------------\n\nTITLE: Editing Crossplane Deployment in Kubernetes\nDESCRIPTION: This YAML snippet demonstrates how to edit the Crossplane deployment to change pod settings, specifically adding a sync-interval argument. It includes the command to edit the deployment and the relevant YAML structure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/pods.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl edit deployment crossplane --namespace crossplane-system\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --sync-interval=30m\n```\n\n----------------------------------------\n\nTITLE: Installing Python Composition Function\nDESCRIPTION: Configuration for installing the Python composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: crossplane-contrib-function-python\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-python:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Pushing Multi-Platform Package to Registry\nDESCRIPTION: Pushes both AMD64 and ARM64 package files to a registry tag, creating a multi-platform package that supports both architectures.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg push \\\n  --package-files=function-amd64.xpkg,function-arm64.xpkg \\\n  negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Schema Validation\nDESCRIPTION: Example directory structure showing organization of XRD and Provider schema files for validation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\ntree\nschemas\n|-- platform-ref-aws.yaml\n|-- providers\n|   |-- a.txt\n|   `-- provider-aws-iam.yaml\n`-- xrds\n    `-- xrd.yaml\n```\n\n----------------------------------------\n\nTITLE: Removing Finalizers from a CloudSQLInstance Resource\nDESCRIPTION: Specific kubectl patch command to remove finalizers from a GCP CloudSQLInstance managed resource, allowing it to be deleted when stuck.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/troubleshoot-crossplane.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl patch cloudsqlinstance my-db -p '{\"metadata\":{\"finalizers\": []}}' --type=merge\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for AMD64\nDESCRIPTION: Creates a Crossplane package (.xpkg) for AMD64 platform by embedding the runtime image. Specifies package root directory, runtime image, and output file location.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-amd64 \\\n    --package-file=function-amd64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package with CLI in Shell\nDESCRIPTION: This shell command demonstrates how to build a Crossplane package using the Crossplane CLI. It specifies the package root directory and output file name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build --package-root=test-directory --package-file=test-package.xpkg\n```\n\n----------------------------------------\n\nTITLE: Deleting a Crossplane Provider\nDESCRIPTION: Command to remove a specific Crossplane provider from the Kubernetes cluster after all resources managed by that provider have been deleted.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/uninstall.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete provider crossplane-contrib-provider-aws\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Configuration Revisions\nDESCRIPTION: This shell command shows how to list and view the revisions of installed Crossplane Configuration packages using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configurationrevisions\n```\n\n----------------------------------------\n\nTITLE: Upjet Success Status\nDESCRIPTION: Example of the Success status for successful asynchronous resource creation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  LastAsyncOperation\n  Status:                True\n  Reason:                Success\n```\n\n----------------------------------------\n\nTITLE: Configuring External Secret Store in YAML\nDESCRIPTION: This YAML configuration shows how to set up an external secret store (e.g., HashiCorp Vault) for storing connection details in Crossplane. It uses a StoreConfig and a Composition referencing the StoreConfig.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.crossplane.io/v1alpha1\nkind: StoreConfig\nmetadata:\n  name: vault\n# Removed for brevity.\n---\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  publishConnectionDetailsWithStoreConfigRef: \n    name: vault\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Math Transform with ClampMin\nDESCRIPTION: Example of math transform using clampMin to ensure a minimum value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.numberField\n    toFieldPath: metadata.annotations[\"mathAnnotation\"]\n    transforms:\n      - type: math\n        math:\n          type: clampMin\n          clampMin: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Chart Parameters for CA Bundle\nDESCRIPTION: YAML configuration block for setting registry CA bundle parameters in Helm chart override values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/self-signed-ca-certs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  registryCaBundleConfig:\n    name: ca-bundle-config\n    key: ca-bundle\n```\n\n----------------------------------------\n\nTITLE: Resource Event Example\nDESCRIPTION: Example output showing events associated with a Crossplane resource, demonstrating provider connection issues.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nEvents:\n  Type     Reason                   Age                From                                                   Message\n  ----     ------                   ----               ----                                                   -------\n  Warning  CannotConnectToProvider  16s (x4 over 46s)  managed/postgresqlserver.database.azure.crossplane.io  cannot get referenced ProviderConfig: ProviderConfig.azure.crossplane.io \"default\" not found\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Composition\nDESCRIPTION: This shell command retrieves the list of Compositions in the Kubernetes cluster using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\n```\n\n----------------------------------------\n\nTITLE: String Transform Example\nDESCRIPTION: Basic structure for string transforms that handle string manipulation operations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"stringAnnotation\"]\n    transforms:\n      - type: string\n        string:\n          type: ...\n```\n\n----------------------------------------\n\nTITLE: Example Composite Resource for Field Selection\nDESCRIPTION: Sample composite resource YAML showing various fields that can be selected using field paths.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl get composite -o yaml\napiVersion: example.org/v1alpha1\nkind: XExample\nmetadata:\n  # Removed for brevity\n  labels:\n    crossplane.io/claim-name: my-example-claim\n    crossplane.io/claim-namespace: default\n    crossplane.io/composite: my-example-claim-978mh\nspec:\n  desiredRegion: eu-north-1\n  field1: field1-text\n  resourceRefs:\n  - apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    name: my-example-claim-978mh-r6z64\n  - apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    name: my-example-claim-978mh-cnlhj\n  - apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    name: my-example-claim-978mh-rv5nm\n```\n\n----------------------------------------\n\nTITLE: Kubernetes API Resources Output\nDESCRIPTION: Shows how the XRD appears in the Kubernetes API resources list after creation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources\nNAME                              SHORTNAMES   APIVERSION          NAMESPACED   KIND\nxmydatabases.example.org                       v1alpha1            false        xmydatabases\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Checking Composition Status\nDESCRIPTION: Shell command to view the status of installed Compositions in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane Providers\nDESCRIPTION: This command lists all installed Crossplane providers in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/uninstall.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Adding Labels and Annotations to Published Secrets\nDESCRIPTION: Example showing how to add custom labels and annotations to Kubernetes secrets created by publishConnectionDetailsTo, providing additional metadata for secret objects.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rds.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n  # Removed for brevity\n  publishConnectionDetailsTo:\n    name: rds-kubernetes-secret\n    metadata:\n      labels:\n        label-tag: label-value\n      annotations:\n        annotation-tag: annotation-value\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource in YAML\nDESCRIPTION: Example YAML for a Crossplane Composite Resource that uses a Composition template. It specifies the apiVersion and kind to match the Composition's compositeTypeRef, and includes a spec section for user-defined settings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: test.example.org/v1alpha1\nkind: MyComputeResource\nmetadata:\n  name: my-resource\nspec:\n  storage: \"large\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Managed Resources\nDESCRIPTION: This shell command retrieves and displays the list of managed resources created by Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Claims in a Namespace\nDESCRIPTION: This shell command retrieves the list of Claims in a specific namespace, showing their sync and ready status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get claim -n crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Automatic Configuration Package in Helm\nDESCRIPTION: This command demonstrates how to install Crossplane using Helm, with an automatic installation of a Configuration package. It shows how to reproduce a platform configuration across multiple clusters.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/multi-tenant.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install crossplane --namespace crossplane-system crossplane-stable/crossplane --set configuration.packages='{\"registry.upbound.io/xp/getting-started-with-aws:latest\"}'\n```\n\n----------------------------------------\n\nTITLE: Listing Files in the Generated Function Directory\nDESCRIPTION: Command to view the files created by the initialization process, showing the structure of the function project directory.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls function-xbuckets\nDockerfile    LICENSE       NOTES.txt     README.md     example       fn.go         fn_test.go    go.mod        go.sum        init.sh       input         main.go       package       renovate.json\n```\n\n----------------------------------------\n\nTITLE: Resolved Selectors in a Crossplane Usage Resource\nDESCRIPTION: Example showing how a Usage resource appears after selectors have been resolved. The resource names are persisted in the resourceRef.name fields while the original selectors are retained.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/usages.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n       name: my-cluster\n    resourceSelector:\n      matchLabels:\n        foo: bar\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n       name: my-cluster\n    resourceSelector:\n       matchLabels:\n          baz: qux\n```\n\n----------------------------------------\n\nTITLE: Modifying Sync Interval in Crossplane Deployment YAML\nDESCRIPTION: This YAML snippet demonstrates how to modify the `sync-interval` argument of the Crossplane pod within the deployment. This change affects how frequently Crossplane synchronizes its state. Ensure proper indentation and placement within the `spec.template.spec.containers[].args` section of the deployment YAML.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/pods.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"kubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --sync-interval=30m\"\n```\n\n----------------------------------------\n\nTITLE: Listing Compositions in Crossplane using kubectl\nDESCRIPTION: This shell command lists all available Compositions in Crossplane, showing their names, XR-KIND, and XR-APIVERSION.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\n```\n\n----------------------------------------\n\nTITLE: Describing a PostgreSQLInstance Claim in Crossplane\nDESCRIPTION: Command to describe a PostgreSQL instance claim named 'my-db' using kubectl, which is the starting point for debugging Crossplane resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe postgresqlinstance.database.example.org my-db\n```\n\n----------------------------------------\n\nTITLE: Enabling Usage Feature in Crossplane Deployment (YAML)\nDESCRIPTION: This snippet shows how to enable the Usage feature in Crossplane by editing the deployment and adding the --enable-usages argument.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/usages.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --enable-usages\n```\n\n----------------------------------------\n\nTITLE: Basic Hello World RunFunction Implementation\nDESCRIPTION: Simple implementation of the RunFunction method that demonstrates basic request handling and response generation with a hello world example.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def RunFunction(self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext) -> fnv1.RunFunctionResponse:\n    log = self.log.bind(tag=req.meta.tag)\n    log.info(\"Running function\")\n\n    rsp = response.to(req)\n\n    example = \"\"\n    if \"example\" in req.input:\n        example = req.input[\"example\"]\n\n    # TODO: Add your function logic here!\n    response.normal(rsp, f\"I was run with input {example}!\")\n    log.info(\"I was run!\", input=example)\n\n    return rsp\n```\n\n----------------------------------------\n\nTITLE: Custom Tag Addition in Crossplane Resources\nDESCRIPTION: Shows how to add a custom tag to a resource by combining string formatting and object conversion.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.clusterName\n      toFieldPath: spec.forProvider.tags\n      transforms:\n      - type: string\n        string:\n          type: Format\n          fmt: '{\"kubernetes.io/cluster/%s\": \"true\"}'\n      - type: convert\n        convert:\n          toType: object\n          format: json\n```\n\n----------------------------------------\n\nTITLE: Using ClampMax in Crossplane Math Transform\nDESCRIPTION: Shows how to set a maximum threshold for numeric values using the clampMax math transform. If the input exceeds the specified maximum, the maximum value is used instead.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.numberField\n    toFieldPath: metadata.annotations[\"mathAnnotation\"]\n    transforms:\n      - type: math\n        math:\n          type: clampMax\n          clampMax: 5\n```\n\n----------------------------------------\n\nTITLE: Upjet DestroyFailure Status\nDESCRIPTION: Example of the DestroyFailure status showing failed resource deletion.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  LastAsyncOperation\n  Status:                False\n  Reason:                DestroyFailure\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Helm\nDESCRIPTION: Commands to install Crossplane in a Kubernetes cluster using Helm.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-injection.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nkubectl create namespace crossplane-system\n\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n\nhelm install crossplane --namespace crossplane-system crossplane-stable/crossplane\n```\n\n----------------------------------------\n\nTITLE: Listing Function Template Directory Contents\nDESCRIPTION: Command to list the directory structure created by the template initialization process, showing the basic scaffolding for a Crossplane function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls function-xbuckets\nDockerfile  example/  function/  LICENSE  package/  pyproject.toml  README.md  renovate.json  tests/\n```\n\n----------------------------------------\n\nTITLE: Removing Finalizers from Crossplane Resources\nDESCRIPTION: Command to remove finalizers from a Crossplane-managed resource when it's stuck in deletion, using kubectl patch.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl patch <resource-type> <resource-name> -p '{\"metadata\":{\"finalizers\": []}}' --type=merge\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl patch cloudsqlinstance my-db -p '{\"metadata\":{\"finalizers\": []}}' --type=merge\n```\n\n----------------------------------------\n\nTITLE: Running Crossplane Function Tests\nDESCRIPTION: Shell commands for running unit tests and the local function server for end-to-end testing with crossplane render\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v -cover .\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo run . --insecure --debug\n```\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Customizing Crossplane Registry During Upgrade\nDESCRIPTION: Example command showing how to override the default image registry during upgrade by setting custom arguments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/upgrade-crossplane.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade crossplane --namespace crossplane-system crossplane-preview/crossplane --set 'args={\"--registry=index.docker.io\"}'\n```\n\n----------------------------------------\n\nTITLE: Listing Function Source Code Directory Contents\nDESCRIPTION: Shell command to list the Python source code files in the function directory, showing the main files where the function logic is implemented.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nls function/\n__version__.py  fn.py  main.py\n```\n\n----------------------------------------\n\nTITLE: Listing Custom Resource Definitions in Kubernetes\nDESCRIPTION: Shell command to check if the NoSQL Composite Resource Definition was successfully created in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd\n```\n\n----------------------------------------\n\nTITLE: Setting Manual Composition Update Policy for Composite Resources\nDESCRIPTION: This YAML snippet shows how to set a Manual compositionUpdatePolicy on a composite resource, preventing it from automatically upgrading to use newer Composition revisions when they become available.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionUpdatePolicy: Manual\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Pod Status During Initialization\nDESCRIPTION: This command shows how to check the status of Crossplane pods in the crossplane-system namespace while the init container is running.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/pods.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS     RESTARTS   AGE\ncrossplane-9f6d5cd7b-r9j8w                 0/1     Init:0/1   0          6s\n```\n\n----------------------------------------\n\nTITLE: Configuring Revision History Limit for Configuration Packages\nDESCRIPTION: YAML configuration for setting the revision history limit in a Crossplane Configuration. This example increases the stored revision history to 10 (default is 1).\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  revisionHistoryLimit: 10\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal\nDESCRIPTION: Azure CLI command to create a service principal with Owner role for Crossplane authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\naz ad sp create-for-rbac \\\n--sdk-auth \\\n--role Owner \\\n--scopes /subscriptions/$@<subscription_id>$@\n```\n\n----------------------------------------\n\nTITLE: Viewing Managed Resource with Hosted Zone ID\nDESCRIPTION: This snippet shows the result of a managed resource with the Hosted Zone ID that will be used in a ToCompositeFieldPath patch.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl describe bucket\nName:         my-example-claim-p5pxf-5vnp8\n# Removed for brevity\nStatus:\n  At Provider:\n    Hosted Zone Id:       Z2O1EMRO9K5GLX\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Schema Validation\nDESCRIPTION: Example directory structure containing XRD and Provider schemas for validation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\ntree\nschemas\n|-- platform-ref-aws.yaml\n|-- providers\n|   |-- a.txt\n|   `-- provider-aws-iam.yaml\n`-- xrds\n    `-- xrd.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests for a Crossplane Function\nDESCRIPTION: This shell command runs the unit tests for a Crossplane composition function written in Go, including verbose output and coverage information.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v -cover .\n```\n\n----------------------------------------\n\nTITLE: Viewing Composite Resource Definitions\nDESCRIPTION: Command to list all installed composite resource definitions (XRDs) in the cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/uninstall.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Edit Role\nDESCRIPTION: Command to view the full RBAC policy for the crossplane-edit ClusterRole which has full access to Crossplane types and secrets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/pods.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-edit\n```\n\n----------------------------------------\n\nTITLE: WatchingCompositeResource Condition in Crossplane XRDs\nDESCRIPTION: Shows the condition format when a CompositeResourceDefinition is successfully established and Crossplane is watching for new composite resources to be created.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: Established\nStatus: True\nReason: WatchingCompositeResource\n```\n\n----------------------------------------\n\nTITLE: Removing Finalizers from a Resource\nDESCRIPTION: Generic kubectl patch command to remove finalizers from a resource that is stuck in a deletion state, allowing the resource to be completely removed from Kubernetes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/troubleshoot-crossplane.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl patch <resource-type> <resource-name> -p '{\"metadata\":{\"finalizers\": []}}' --type=merge\n```\n\n----------------------------------------\n\nTITLE: Verifying Managed Resources in Crossplane\nDESCRIPTION: A shell command to verify that the managed resources (Service Account and Service Account Key) were successfully created and are in a ready and synced state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\nNAME                                                      READY   SYNCED   DISPLAYNAME                     EMAIL                                                            DISABLED\nserviceaccount.iam.gcp.crossplane.io/my-ess-zvmkz-vhklg   True    True     a service account to test ess   my-ess-zvmkz-vhklg@testingforbugbounty.iam.gserviceaccount.com\n\nNAME                                                         READY   SYNCED   KEY_ID                                     CREATED_AT             EXPIRES_AT\nserviceaccountkey.iam.gcp.crossplane.io/my-ess-zvmkz-bq8pz   True    True     5cda49b7c32393254b5abb121b4adc07e140502c   2022-03-23T10:54:50Z\n```\n\n----------------------------------------\n\nTITLE: Creating a Composite Resource with Manual Update Policy\nDESCRIPTION: This YAML snippet shows how to create a MyVPC Composite Resource with a Manual compositionUpdatePolicy and a specific compositionRevisionRef.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composition-revisions.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  name: vpc-man\nspec:\n  id: vpc-man\n  compositionUpdatePolicy: Manual\n  compositionRevisionRef:\n    name: myvpcs.aws.example.upbound.io-ad265bc\n```\n\n----------------------------------------\n\nTITLE: Validating Resources with Crossplane CLI\nDESCRIPTION: Example of using the crossplane beta validate command to check resources against CEL validation rules.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\n`crossplane beta validate xrd.yaml xr.yaml\n[x] CEL validation error example.crossplane.io/v1beta1, Kind=XR, example : spec: Invalid value: \"object\": replicas should be in between minReplicas and maxReplicas.\nTotal 1 resources: 0 missing schemas, 0 success cases, 1 failure cases\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Objects in Crossplane\nDESCRIPTION: Shows how to convert JSON strings to objects using the convert transform with json format.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: object\n   format: json\n```\n\n----------------------------------------\n\nTITLE: Describing a LinuxVirtualMachine Resource in Crossplane\nDESCRIPTION: This command describes a LinuxVirtualMachine resource in Crossplane, specifically grep'ing for the Location field to verify the deployment location.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe linuxvirtualmachine | grep Location\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Deployments\nDESCRIPTION: Command to view Crossplane deployments and example output showing deployment status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/install.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deployments -n crossplane-system\nNAME                      READY   UP-TO-DATE   AVAILABLE   AGE\ncrossplane                1/1     1            1           8m13s\ncrossplane-rbac-manager   1/1     1            1           8m13s\n```\n\n----------------------------------------\n\nTITLE: Listing Composite Resources Created by Claims\nDESCRIPTION: Shows the composite resources (XRs) that were automatically created by Crossplane Claims. Each Claim creates a corresponding composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\nNAME                     SYNCED   READY   COMPOSITION                             AGE\nmy-namespaced-vm-r7gdr   True     True    crossplane-quickstart-vm-with-network   5m33s\n```\n\n----------------------------------------\n\nTITLE: Configuring Management Policies in AWS EC2 Subnet\nDESCRIPTION: Example of setting management policies on an AWS EC2 subnet managed resource to control Crossplane's permissions for creating, deleting, and observing the resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.m.upbound.io/v1beta1\nkind: Subnet\nspec:\n  managementPolicies: [\"Create\", \"Delete\", \"Observe\"]\n  forProvider:\n    # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Deleting a Crossplane NoSQL Resource\nDESCRIPTION: This shell command deletes a NoSQL resource, which in turn deletes all associated managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete nosql my-nosql-database\n```\n\n----------------------------------------\n\nTITLE: Python Unit Tests for Crossplane Function\nDESCRIPTION: Unit test implementation for a Crossplane function that composes S3 buckets. Uses Python's unittest module and includes test cases for verifying function behavior with mock requests and expected responses.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dataclasses\nimport unittest\n\nfrom crossplane.function import logging, resource\nfrom crossplane.function.proto.v1 import run_function_pb2 as fnv1\nfrom google.protobuf import duration_pb2 as durationpb\nfrom google.protobuf import json_format\nfrom google.protobuf import struct_pb2 as structpb\n\nfrom function import fn\n\n\nclass TestFunctionRunner(unittest.IsolatedAsyncioTestCase):\n    def setUp(self) -> None:\n        logging.configure(level=logging.Level.DISABLED)\n        self.maxDiff = 2000\n\n    async def test_run_function(self) -> None:\n        @dataclasses.dataclass\n        class TestCase:\n            reason: str\n            req: fnv1.RunFunctionRequest\n            want: fnv1.RunFunctionResponse\n\n        cases = [\n            TestCase(\n                reason=\"The function should compose two S3 buckets.\",\n                req=fnv1.RunFunctionRequest(\n                    observed=fnv1.State(\n                        composite=fnv1.Resource(\n                            resource=resource.dict_to_struct(\n                                {\n                                    \"apiVersion\": \"example.crossplane.io/v1alpha1\",\n                                    \"kind\": \"XBuckets\",\n                                    \"metadata\": {\"name\": \"test\"},\n                                    \"spec\": {\n                                        \"region\": \"us-east-2\",\n                                        \"names\": [\"test-bucket-a\", \"test-bucket-b\"],\n                                    },\n                                }\n                            )\n                        )\n                    )\n                ),\n                want=fnv1.RunFunctionResponse(\n                    meta=fnv1.ResponseMeta(ttl=durationpb.Duration(seconds=60)),\n                    desired=fnv1.State(\n                        resources={\n                            \"xbuckets-test-bucket-a\": fnv1.Resource(\n                                resource=resource.dict_to_struct(\n                                    {\n                                        \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                                        \"kind\": \"Bucket\",\n                                        \"metadata\": {\n                                            \"annotations\": {\n                                                \"crossplane.io/external-name\": \"test-bucket-a\"\n                                            },\n                                        },\n                                        \"spec\": {\n                                            \"forProvider\": {\"region\": \"us-east-2\"}\n                                        },\n                                    }\n                                )\n                            ),\n                            \"xbuckets-test-bucket-b\": fnv1.Resource(\n                                resource=resource.dict_to_struct(\n                                    {\n                                        \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                                        \"kind\": \"Bucket\",\n                                        \"metadata\": {\n                                            \"annotations\": {\n                                                \"crossplane.io/external-name\": \"test-bucket-b\"\n                                            },\n                                        },\n                                        \"spec\": {\n                                            \"forProvider\": {\"region\": \"us-east-2\"}\n                                        },\n                                    }\n                                )\n                            ),\n                        },\n                    ),\n                    context=structpb.Struct(),\n                ),\n            ),\n        ]\n\n        runner = fn.FunctionRunner()\n\n        for case in cases:\n            got = await runner.RunFunction(case.req, None)\n            self.assertEqual(\n                json_format.MessageToDict(got),\n                json_format.MessageToDict(case.want),\n                \"-want, +got\",\n            )\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for ARM64\nDESCRIPTION: Creates a Crossplane package (.xpkg) for ARM64 platform by embedding the runtime image. Uses package-root for metadata and configuration from crossplane.yaml.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-arm64 \\\n    --package-file=function-arm64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Math Transform Structure in Crossplane\nDESCRIPTION: Shows the basic structure of a math transform, which can be used to perform mathematical operations on integer inputs such as multiplication or applying minimums and maximums.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.numberField\n    toFieldPath: metadata.annotations[\"mathAnnotation\"]\n    transforms:\n      - type: math\n        math:\n          ...\n```\n\n----------------------------------------\n\nTITLE: CombineFromComposite Patch Example\nDESCRIPTION: Illustrates using CombineFromComposite to combine multiple values from the composite resource into a single string. This example combines region and field2 values to create a resource name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineFromComposite\n      combine:\n        variables:\n          - fromFieldPath: spec.desiredRegion\n          - fromFieldPath: spec.field2\n        strategy: string\n        string:\n          fmt: \"my-resource-%s-%s\"\n      toFieldPath: metadata.name\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Configuration Dependencies\nDESCRIPTION: Shows how to use the crossplane beta trace command to view configuration dependencies, with options to hide package dependencies and revisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-dependencies none\n```\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-revisions all\n```\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-revisions none\n```\n\n----------------------------------------\n\nTITLE: Deleting a VirtualMachine Resource in Crossplane\nDESCRIPTION: Demonstrates how to delete a VirtualMachine composite resource, which will trigger Crossplane to delete all the underlying managed resources that were created for this VM.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete VirtualMachine my-vm\nvirtualmachine.compute.example.com \"my-vm\" deleted\n```\n\n----------------------------------------\n\nTITLE: Creating Usage for Deletion Ordering (YAML)\nDESCRIPTION: This example shows how to create a Usage resource to prevent the deletion of a cluster resource before the deletion of a related Prometheus chart resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/usages.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1alpha1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n      name: my-cluster\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n      name: my-prometheus-chart\n```\n\n----------------------------------------\n\nTITLE: Tracing AWS Platform Reference Resources in Crossplane\nDESCRIPTION: Example of default 'crossplane beta trace' command output showing the resource hierarchy of a platform-ref-aws cluster. This displays the Configuration, ProviderRevision, and other resources that make up the AWS reference platform with limited status message length.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace cluster.aws.platformref.upbound.io platform-ref-aws\n```\n\n----------------------------------------\n\nTITLE: String Matching Readiness Check\nDESCRIPTION: Demonstrates how to configure a string matching readiness check for a resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n  readinessChecks:\n    - type: MatchString\n      fieldPath: status.atProvider.state\n      matchString: \"Online\"\n```\n\n----------------------------------------\n\nTITLE: Match Transform Basic Structure\nDESCRIPTION: Shows the basic structure of a match transform that supports both literal and regex pattern matching.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret in Kubernetes\nDESCRIPTION: Shell command to create a Docker registry secret in the Crossplane system namespace for authentication with private registries.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/image-configs.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system create secret docker-registry acme-registry-credentials --docker-server=registry1.com --docker-username=<user> --docker-password=<password>\n```\n\n----------------------------------------\n\nTITLE: Selecting EnvironmentConfigs in Crossplane Composition YAML\nDESCRIPTION: This snippet shows how to define which EnvironmentConfigs to use in a Crossplane Composition using a reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\n# Removed for Brevity\nspec:\n  environment:\n    environmentConfigs:\n      - ref:\n          name: example-environment\n  # Removed for Brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Pods\nDESCRIPTION: Retrieves and displays the status of Crossplane pods in the crossplane-system namespace after installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Examining CloudSQLInstance Resource Status with kubectl\nDESCRIPTION: This command uses kubectl describe to check the status and conditions of a GCP CloudSQLInstance managed resource, which helps diagnose issues with the resource provisioning or configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/troubleshoot-crossplane.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe cloudsqlinstance my-db\n```\n\n----------------------------------------\n\nTITLE: Initializing a Function from a Template using Crossplane CLI\nDESCRIPTION: Shell command that initializes a new Crossplane composition function using a GitHub template repository. This creates the directory structure for developing the function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg init function-xbuckets https://github.com/crossplane/function-template-python -d function-xbuckets\nInitialized package \"function-xbuckets\" in directory \"/home/negz/control/negz/function-xbuckets\" from https://github.com/crossplane/function-template-python/tree/bfed6923ab4c8e7adeed70f41138645fc7d38111 (main)\n```\n\n----------------------------------------\n\nTITLE: Installing Function Patch and Transform\nDESCRIPTION: Manifest to install the Function Patch and Transform package as a Function resource in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Example Render Output for XBucket Resource\nDESCRIPTION: Sample output from crossplane render command showing a composite XBucket resource and its corresponding AWS S3 bucket managed resource\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: nopexample.org/v1\nkind: XBucket\nmetadata:\n  name: test-xrender\nstatus:\n  bucketRegion: us-east-2\n---\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  annotations:\n    crossplane.io/composition-resource-name: my-bucket\n  generateName: test-xrender-\n  labels:\n    crossplane.io/composite: test-xrender\n  ownerReferences:\n  - apiVersion: nopexample.org/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: XBucket\n    name: test-xrender\n    uid: \"\"\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Pull Secrets for Private Registry\nDESCRIPTION: This YAML snippet shows how to specify package pull secrets for installing a Crossplane Configuration from a private registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  packagePullSecrets: \n    - name: example-secret\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane using Helm\nDESCRIPTION: Commands to create Crossplane namespace and install Crossplane using Helm chart\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nkubectl create namespace crossplane-system\n\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n\nhelm install crossplane --namespace crossplane-system crossplane-stable/crossplane\n```\n\n----------------------------------------\n\nTITLE: Listing Composite Resources in Crossplane\nDESCRIPTION: This shell command lists all composite resources in the cluster, showing their name, sync status, readiness status, associated composition, and age.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\nNAME                    SYNCED   READY   COMPOSITION         AGE\nmy-composite-resource   True     True    my-composition      4s\n```\n\n----------------------------------------\n\nTITLE: Configuring a Function for Local Development\nDESCRIPTION: Function YAML definition that uses the Development runtime annotation, allowing the use of a locally running function instance for testing rather than a containerized version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-xbuckets\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  # The CLI ignores this package when using the Development runtime.\n  # You can set it to any value.\n  package: xpkg.crossplane.io/negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Initializing a Python Composition Function Project\nDESCRIPTION: Shell command using the Crossplane CLI to initialize a new composition function project from a GitHub template repository. This creates the foundation for developing a Python-based composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg init function-xbuckets https://github.com/crossplane/function-template-python -d function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: Using Crossplane Render Command for Function Testing\nDESCRIPTION: Command to use the Crossplane CLI's render feature to test a function against the specified resources. This simulates how the function would behave in a live Crossplane environment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining CEL Validation Rules in Crossplane XRD\nDESCRIPTION: An example of how to define validation rules using Common Expression Language (CEL) in a Crossplane Composite Resource Definition (XRD). This snippet shows how to configure the x-kubernetes-validations key to validate that a 'replicas' field is between 'minReplicas' and 'maxReplicas'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: myXR.crossplane.io\nspec:\n# Removed for brevity\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              x-kubernetes-validations:\n              - rule: \"self.minReplicas <= self.replicas && self.replicas <= self.maxReplicas\"\n                message: \"replicas should be in between minReplicas and maxReplicas.\"\n              properties:\n                minReplicas:\n                  type: integer\n                maxReplicas:\n                  type: integer\n                replicas: \n                  type: integer\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Wide Format Cluster Trace\nDESCRIPTION: Demonstrates the wide output format showing complete status messages without truncation using --output=wide flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane trace cluster.aws.platformref.upbound.io platform-ref-aws --output=wide\n```\n\n----------------------------------------\n\nTITLE: Describing Configuration Revision Details\nDESCRIPTION: Shows how to get detailed information about a configuration revision, including health status and compatibility issues.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe configurationrevision\nName:         platform-ref-aws-a30ad655c769\nAPI Version:  pkg.crossplane.io/v1\nKind:         ConfigurationRevision\n# Removed for brevity\nSpec:\n  Desired State:                  Active\n  Image:                          xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0\n  Revision:                       1\nStatus:\n  Conditions:\n    Last Transition Time:  2023-10-06T20:08:14Z\n    Reason:                UnhealthyPackageRevision\n    Status:                False\n    Type:                  Healthy\n  Controller Ref:\n    Name:\nEvents:\n  Type     Reason       Age                From                                              Message\n  ----     ------       ----               ----                                              -------\n  Warning  LintPackage  29s (x2 over 29s)  packages/configurationrevision.pkg.crossplane.io  incompatible Crossplane version: package is not compatible with Crossplane version (v1.12.0)\n```\n\n----------------------------------------\n\nTITLE: Listing API Resources in Kubernetes Including Custom XRD\nDESCRIPTION: This shell command lists API resources in Kubernetes, including the custom resource definition created by the XRD 'mydatabases.example.org'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources\nNAME                              SHORTNAMES   APIVERSION          NAMESPACED   KIND\nmydatabases.example.org                        v1alpha1            true         mydatabases\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Describing Provider Status in Shell\nDESCRIPTION: Illustrates how to check the status of a Crossplane provider using kubectl describe.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe provider.pkg.crossplane.io provider-aws\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Edit RBAC Policy\nDESCRIPTION: Command to view the full RBAC policy for the crossplane-edit ClusterRole using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/pods.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-edit\n```\n\n----------------------------------------\n\nTITLE: Listing API resources in Kubernetes after XRD creation\nDESCRIPTION: This shell command demonstrates how to list API resources in Kubernetes, showing the newly created custom resource 'xmydatabases.example.org' after applying the XRD.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resource-definitions.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources\nNAME                              SHORTNAMES   APIVERSION          NAMESPACED   KIND\nxmydatabases.example.org                       v1alpha1            false        xmydatabases\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status in Kubernetes Shell\nDESCRIPTION: Displays the status of pods within the crossplane-system namespace using kubectl. This example highlights the Init stage of the Crossplane pod life cycle. It requires Kubernetes CLI tools to execute.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/pods.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS     RESTARTS   AGE\ncrossplane-9f6d5cd7b-r9j8w                 0/1     Init:0/1   0          6s\n```\n\n----------------------------------------\n\nTITLE: Installing Templated YAML Function\nDESCRIPTION: Configuration for installing the Go templating composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: crossplane-contrib-function-go-templating\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-go-templating:v0.9.2\n```\n\n----------------------------------------\n\nTITLE: Listing Vault Secrets in Default Namespace\nDESCRIPTION: Lists the secrets stored in Vault under the default namespace path, showing the claim connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -i vault-0 -- vault kv list /secret/default\n```\n\n----------------------------------------\n\nTITLE: Manual Update Policy XR Configuration\nDESCRIPTION: YAML configuration for a PlatformDB XR using manual composition update policy, showing how to configure an XR to require manual updates to new CompositionRevisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composition-revisions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: PlatformDB\nmetadata:\n  name: example\nspec:\n  storageGB: 20\n  crossplane:\n    compositionUpdatePolicy: Manual\n    compositionRef:\n      name: example\n```\n\n----------------------------------------\n\nTITLE: Automatic Update Policy VPC Configuration\nDESCRIPTION: YAML configuration for a VPC with default automatic update policy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composition-revisions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  namespace: default\n  name: vpc-auto\nspec:\n  id: vpc-auto\n```\n\n----------------------------------------\n\nTITLE: Converting JSON String to Array in Crossplane\nDESCRIPTION: Shows how to convert a JSON string to an array using the convert transform in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: array\n   format: json\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Composite Resources\nDESCRIPTION: This shell command lists all Crossplane composite resources, which are created automatically from claims.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\n```\n\n----------------------------------------\n\nTITLE: Adding the Crossplane Helm Repository\nDESCRIPTION: Command to add the Crossplane stable repository to your Helm configuration, which is required before updating or upgrading Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\n```\n\n----------------------------------------\n\nTITLE: Confirming All Managed Resources Are Deleted\nDESCRIPTION: Verifies that all managed resources created by the Claim have been successfully deleted by Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\nNo resources found\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package with CLI\nDESCRIPTION: This shell command demonstrates how to build a Crossplane package using the Crossplane CLI. It specifies the package root directory and the output file name for the generated package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build --package-root=test-directory --package-file=test-package.xpkg\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Resources with kubectl in Crossplane\nDESCRIPTION: This command lists all managed resources created by Crossplane using kubectl. It shows various resource types including ResourceGroup, LinuxVirtualMachine, NetworkInterface, Subnet, and VirtualNetwork.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for AMD64 Platform\nDESCRIPTION: Uses Docker to build a runtime image for the linux/amd64 platform. The --quiet flag is used to suppress build output, and the resulting image is tagged as 'runtime-amd64'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/amd64 --tag runtime-amd64\n```\n\n----------------------------------------\n\nTITLE: Listing Function Code Directory Contents\nDESCRIPTION: Command to view the Python files that make up the core of the composition function implementation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nls function/\n__version__.py  fn.py  main.py\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Crossplane Documentation\nDESCRIPTION: YAML frontmatter metadata for a documentation page that defines the title, weight (for ordering), and description of the getting started guide.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Get Started\nweight: 40\ndescription: Get started with Crossplane.\n---\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Browse Role\nDESCRIPTION: Command to view the full RBAC policy for the crossplane-browse ClusterRole which has read-only access to Crossplane compositions and XRDs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/pods.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-browse\n```\n\n----------------------------------------\n\nTITLE: Map Transform Configuration in YAML\nDESCRIPTION: Demonstrates how to configure map transforms to translate values from one field to another using exact string matches.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: map\n        map:\n          \"field1-text\": \"firstField\"\n          \"field2-text\": \"secondField\"\n```\n\n----------------------------------------\n\nTITLE: Basic Cluster Trace Output\nDESCRIPTION: Shows truncated status message output in the default format with 64-character limit.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane trace cluster.aws.platformref.upbound.io platform-ref-aws\n```\n\n----------------------------------------\n\nTITLE: Secret Names Display Command\nDESCRIPTION: Shows how to display connection secret names and their namespaces using the -s flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws -s\n```\n\n----------------------------------------\n\nTITLE: Deleting the NoSQL Resource\nDESCRIPTION: A shell command to delete the NoSQL resource, which will trigger the deletion of all associated managed resources (AWS S3 Bucket and DynamoDB Table).\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete nosql my-nosql-database\nnosql.database.example.com \"my-nosql-database\" deleted\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Crossplane with Helm\nDESCRIPTION: Command to uninstall the Crossplane deployment from the Kubernetes cluster using Helm, removing the controllers and related components.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/uninstall-crossplane.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nhelm uninstall crossplane --namespace crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Implementing MatchFalse Readiness Check in Crossplane Resources\nDESCRIPTION: This YAML snippet demonstrates the MatchFalse readiness check, which considers a resource ready when a specified field has a value of 'false'. It checks the 'status.atProvider.manifest.status.pending' field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchFalse\n      fieldPath: status.atProvider.manifest.status.pending\n```\n\n----------------------------------------\n\nTITLE: Required fromFieldPath Policy in Crossplane YAML\nDESCRIPTION: Demonstrates how to use the Required policy for fromFieldPath in Crossplane patches. This ensures that the specified fromFieldPath must exist in the data source resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    policy:\n      fromFieldPath: Required\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Hatch for Crossplane Function\nDESCRIPTION: Command to run unit tests for a Crossplane composition function using Hatch, which manages Python virtual environments and dependencies.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhatch run test:unit\n.\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Examining the Function Source Files\nDESCRIPTION: This command lists the Python source files created in the function directory. The main implementation will be added to fn.py while main.py handles the function runtime interface.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nls function/\n__version__.py  fn.py  main.py\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository Cache\nDESCRIPTION: This command updates the local Helm chart cache to ensure the latest chart information is available.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Package Pull Policy\nDESCRIPTION: Shows how to configure the packagePullPolicy to control when Crossplane downloads Provider packages\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  packagePullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: String Matching Readiness Check\nDESCRIPTION: Shows how to configure a readiness check that matches a specific string value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n  readinessChecks:\n    - type: MatchString\n      fieldPath: status.atProvider.state\n      matchString: \"Online\"\n```\n\n----------------------------------------\n\nTITLE: Sample Crossplane XR Resource Definition\nDESCRIPTION: Example of a Crossplane XR (Composite Resource) instance that will be validated against the CEL rules. This example intentionally sets invalid values to demonstrate validation failure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1beta1\nkind: XR\nmetadata:\n  name: example\nspec:\n  replicas: 49\n  minReplicas: 1\n  maxReplicas: 30\n```\n\n----------------------------------------\n\nTITLE: Example XR with CEL Validation Fields\nDESCRIPTION: Sample Crossplane Composite Resource (XR) that will be validated against CEL rules. This example sets replicas to 49, with minReplicas of 1 and maxReplicas of 30, which will trigger a validation error as replicas exceeds maxReplicas.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1beta1\nkind: XR\nmetadata:\n  name: example\nspec:\n  replicas: 49\n  minReplicas: 1\n  maxReplicas: 30\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Admin ClusterRole\nDESCRIPTION: This command displays the full RBAC policy for the crossplane-admin ClusterRole, which has full access to Crossplane types, secrets, namespaces, and limited access to cluster RBAC roles.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/pods.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-admin\n```\n\n----------------------------------------\n\nTITLE: Converting Crossplane Resources with Beta Convert Command\nDESCRIPTION: Examples of using the crossplane beta convert command to convert between different resource types.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta convert deployment-runtime controllerConfig.yaml -o deploymentConfig.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta convert pipeline-composition oldComposition.yaml -o newComposition.yaml -f patchFunctionName\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository\nDESCRIPTION: Command to update the local Helm chart repository to ensure you have the latest version information.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Crossplane Function Development Configuration\nDESCRIPTION: YAML configuration for the Function resource that specifies the development runtime for local testing.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-xbuckets\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  package: xpkg.crossplane.io/negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Resolved Selector Usage Configuration\nDESCRIPTION: YAML showing a Usage resource after selector resolution where resource references are populated with actual resource names.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/usages.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1alpha1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n       name: my-cluster\n    resourceSelector:\n      matchLabels:\n        foo: bar\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n       name: my-cluster\n    resourceSelector:\n       matchLabels:\n          baz: qux\n```\n\n----------------------------------------\n\nTITLE: XRD Status Field Example\nDESCRIPTION: Example showing how to define a custom status field in a Composite Resource Definition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CompositeResourceDefinition\n```\n\n----------------------------------------\n\nTITLE: Deleting the NoSQLClaim\nDESCRIPTION: A shell command to delete the NoSQLClaim, which will trigger the deletion of the composite resource and all associated managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete claim -n crossplane-test my-nosql-database\nnosqlclaim.database.example.com \"my-nosql-database\" deleted\n```\n\n----------------------------------------\n\nTITLE: Verifying GCP Credentials Injection\nDESCRIPTION: This command verifies that the GCP credentials are being correctly injected into the provider-gcp container by displaying the contents of the credentials file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nPROVIDER_CONTROLLER_POD=$(kubectl -n crossplane-system get pod -l pkg.crossplane.io/provider=provider-gcp -o name --no-headers=true)\nkubectl -n crossplane-system exec -it $PROVIDER_CONTROLLER_POD -c provider-gcp -- cat /vault/secrets/creds.txt\n```\n\n----------------------------------------\n\nTITLE: Crossplane Unavailable Condition Status\nDESCRIPTION: Example of the Unavailable condition status indicating an unhealthy resource state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Ready\n  Status:                False\n  Reason:                Unavailable\n```\n\n----------------------------------------\n\nTITLE: Viewing Truncated Trace Output in Crossplane\nDESCRIPTION: Example of truncated status message in the default 'crossplane trace' output where messages longer than 64 characters are cut off with ellipsis.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane trace cluster.aws.platformref.upbound.io platform-ref-aws\n```\n\n----------------------------------------\n\nTITLE: Listing Generated Crossplane Package\nDESCRIPTION: This shell command lists the contents of the current directory after building a Crossplane package, showing the original directory and the newly created package file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nls -1 ./\ntest-directory\ntest-package.xpkg\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Configuration Packages using Helm\nDESCRIPTION: Shell command for installing Crossplane using Helm with a Configuration package specified via the configuration.packages parameter. This installs the 'configuration-quickstart' package during Crossplane installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\n--set configuration.packages='{xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0}'\n```\n\n----------------------------------------\n\nTITLE: Installing YAML Composition Function\nDESCRIPTION: Configuration for installing the YAML patch-and-transform composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: crossplane-contrib-function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Viewing Installed Crossplane Compositions\nDESCRIPTION: Shell command to verify the installation of the Crossplane Composition for the Azure virtual machine with network infrastructure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\n```\n\n----------------------------------------\n\nTITLE: Setting Default Composite Delete Policy\nDESCRIPTION: Demonstrates setting the defaultCompositeDeletePolicy to Foreground in an XRD to control how composite resources are deleted.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositeDeletePolicy: Foreground\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Displaying Resource Usage with Crossplane beta top\nDESCRIPTION: Example output of the crossplane beta top command, showing CPU and memory usage of Crossplane-related pods.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta top \nTYPE         NAMESPACE   NAME                                                                  CPU(cores)   MEMORY\ncrossplane   default     crossplane-f98f9ddfd-tnm46                                            4m           32Mi\ncrossplane   default     crossplane-rbac-manager-74ff459b88-94p8p                              4m           14Mi\nprovider     default     provider-aws-s3-1f1a3fb08cbc-5c49d84447-sggrq                         3m           108Mi\nprovider     default     crossplane-contrib-provider-family-aws-48b3b5ccf964-76c9686b6-bgg65   2m           89Mi\n```\n\n----------------------------------------\n\nTITLE: Match Transform Pattern Structure in Crossplane\nDESCRIPTION: Shows the basic structure of a match transform with patterns. Match transforms extend map transforms by supporting both exact string matching and regular expressions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n              # Removed for brevity\n            - type: regexp\n              # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Crossplane Providers\nDESCRIPTION: Command to list all installed Crossplane providers, which are used to interface with external cloud APIs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/uninstall-crossplane.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Crossplane Schema Directory Structure\nDESCRIPTION: Example directory structure showing the organization of Crossplane schema files for validation, including XRDs and Provider schemas.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ntree\nschemas\n|-- platform-ref-aws.yaml\n|-- providers\n|   |-- a.txt\n|   `-- provider-aws-iam.yaml\n`-- xrds\n    `-- xrd.yaml\n```\n\n----------------------------------------\n\nTITLE: Verifying Resource Deletion\nDESCRIPTION: A shell command to verify that all managed resources have been successfully deleted following the deletion of the NoSQL resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\nNo resources found\n```\n\n----------------------------------------\n\nTITLE: Setting Revision Activation Policy for Crossplane Configuration\nDESCRIPTION: This YAML snippet demonstrates how to set the revision activation policy for a Crossplane Configuration, controlling how new revisions are activated.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  revisionActivationPolicy: Manual\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating Namespaced Virtual Machine Claim\nDESCRIPTION: Creates a VirtualMachineClaim in a specific namespace using Crossplane's custom API.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: compute.example.com/v1alpha1\nkind: VirtualMachineClaim\nmetadata:\n  name: my-namespaced-vm\n  namespace: crossplane-test\nspec:\n  location: \"EU\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Sample XR Resource with Invalid Replica Configuration\nDESCRIPTION: Example of an XR resource that violates the CEL validation rules by setting replicas outside the allowed range.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1beta1\nkind: XR\nmetadata:\n  name: example\nspec:\n  replicas: 49\n  minReplicas: 1\n  maxReplicas: 30\n```\n\n----------------------------------------\n\nTITLE: Logging Out from Package Registry\nDESCRIPTION: Command to invalidate the current login session by removing the session from the configuration file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg logout\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for ARM64 Platform\nDESCRIPTION: This command builds a Docker runtime image for the linux/arm64 platform and tags it as 'runtime-arm64'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/arm64 --tag runtime-arm64\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Deployments\nDESCRIPTION: Retrieves and displays the Kubernetes deployments created by Crossplane in the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deployments -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Browse ClusterRole\nDESCRIPTION: This command shows the full RBAC policy for the crossplane-browse ClusterRole, which has read-only access to Crossplane compositions and XRDs for resource claim creators.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/pods.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-browse\n```\n\n----------------------------------------\n\nTITLE: Creating Usage for Deletion Protection (YAML)\nDESCRIPTION: This example demonstrates how to create a Usage resource to prevent the deletion of a specific database resource by providing a reason for protection.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/usages.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1alpha1\nkind: Usage\nmetadata:\n  name: protect-production-database\nspec:\n  of:\n    apiVersion: rds.aws.upbound.io/v1beta1\n    kind: Instance\n    resourceRef:\n      name: my-database\n  reason: \"Production Database - should never be deleted!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Runtime for Function Testing\nDESCRIPTION: This YAML snippet shows how to configure a Function to use the Development runtime for local testing. It uses the render.crossplane.io/runtime annotation to specify the runtime type.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Replica DeploymentRuntimeConfig in YAML\nDESCRIPTION: Shows how to create a DeploymentRuntimeConfig to set multiple replicas for a Crossplane Provider. This example sets the number of replicas to 2 while bypassing schema validation for other fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: multi-replicas\nspec:\n  deploymentTemplate:\n    spec:\n      replicas: 2\n      selector: {}\n      template: {}\n```\n\n----------------------------------------\n\nTITLE: Listing Function Directory Contents\nDESCRIPTION: Shell command to list the contents of the newly created function directory, showing the initial file structure created from the template.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls function-xbuckets\nDockerfile  example/  function/  LICENSE  package/  pyproject.toml  README.md  renovate.json  tests/\n```\n\n----------------------------------------\n\nTITLE: Describing Composite Resource in Crossplane YAML\nDESCRIPTION: This snippet shows the output of describing a composite resource, displaying the resources and the status.secondResource value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl describe composite\nName:         my-example-claim-jp7rx\nSpec:\n  # Removed for brevity\n  Resource Refs:\n    Name:         my-example-claim-jp7rx-gfg4m\n    # Removed for brevity\n    Name:         my-example-claim-jp7rx-fttpj\nStatus:\n  # Removed for brevity\n  Second Resource:         my-example-claim-jp7rx-gfg4m\n```\n\n----------------------------------------\n\nTITLE: Managing Conflicting Secret Keys in a Crossplane Composition\nDESCRIPTION: This YAML snippet demonstrates how to avoid conflicting secret keys when multiple resources produce the same key by using unique names in the connectionDetails configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/connection-details.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n      - name: key2\n        base:\n          kind: AccessKey\n          spec:\n            # Removed for brevity\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key2\n        connectionDetails:\n          - name: key2-user\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n```\n\n----------------------------------------\n\nTITLE: Unsealing Vault Instance\nDESCRIPTION: Commands to initialize and unseal the Vault instance using operator commands\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nkubectl exec vault-0 -- vault operator init -key-shares=1 -key-threshold=1 -format=json > cluster-keys.json\nVAULT_UNSEAL_KEY=$(cat cluster-keys.json | jq -r \".unseal_keys_b64[]\")\nkubectl exec vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY\n```\n\n----------------------------------------\n\nTITLE: Pushing Multi-platform Crossplane Function Package to Registry\nDESCRIPTION: This command pushes both the AMD64 and ARM64 package files to a registry as a multi-platform package. The --package-files flag specifies comma-separated package files to push, creating a single tag 'negz/function-xbuckets:v0.1.0' that supports both platforms.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg push \\\n  --package-files=function-amd64.xpkg,function-arm64.xpkg \\\n  negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Hiding Package Revisions in Trace Output\nDESCRIPTION: Demonstrates how to hide all package revisions when using the 'crossplane beta trace' command with the '--show-package-revisions none' flag, which simplifies the output by showing only the package hierarchy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-revisions none\n```\n\n----------------------------------------\n\nTITLE: Displaying HealthyPackageRevision Status in YAML\nDESCRIPTION: Demonstrates the YAML representation of a HealthyPackageRevision status for a Crossplane Provider Package. This indicates that the Provider is fully installed and ready for use.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nType: Healthy\nStatus: True\nReason: HealthyPackageRevision\n```\n\n----------------------------------------\n\nTITLE: TrimPrefix String Transformation in Crossplane YAML\nDESCRIPTION: Shows how to use the TrimPrefix transformation to remove characters from the beginning of a string value in Crossplane patches. It uses Go's TrimPrefix function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"north-1\"]\n    transforms:\n      - type: string\n        string:\n          type: TrimPrefix\n          trim: `eu-\n```\n\n----------------------------------------\n\nTITLE: Installing Vault via Helm\nDESCRIPTION: Command to install Vault using Helm in the vault-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm -n vault-system upgrade --install vault hashicorp/vault --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Logging into Crossplane Package Registry\nDESCRIPTION: Use `xpkg login` to authenticate against registries that host Crossplane packages. Users can login using a username and password, or an Upbound API token. The command writes to a configuration for caching account information but does not store passwords.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg login --account=Upbound --username=my-user --password -\n```\n\n----------------------------------------\n\nTITLE: Updating XR Status in KCL\nDESCRIPTION: This snippet updates the status of the App custom resource (XR) with the cluster IP of the Service and the number of available replicas from the Deployment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_15\n\nLANGUAGE: kcl\nCODE:\n```\n_desired_xr = {\n  **option(\"params\").dxr\n\n  status.address = observed_service?.spec?.clusterIP or \"\"\n  status.replicas = observed_deployment?.status?.availableReplicas or 0\n}\n```\n\n----------------------------------------\n\nTITLE: Complete RunFunction Implementation with Error Handling and Logging in Go\nDESCRIPTION: This snippet shows the full implementation of the RunFunction method, including imports, error handling, logging, and detailed comments explaining the function's logic for creating S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/utils/ptr\"\n\n\t\"github.com/upbound/provider-aws/apis/s3/v1beta1\"\n\n\t\"github.com/crossplane/function-sdk-go/errors\"\n\t\"github.com/crossplane/function-sdk-go/logging\"\n\tfnv1 \"github.com/crossplane/function-sdk-go/proto/v1\"\n\t\"github.com/crossplane/function-sdk-go/request\"\n\t\"github.com/crossplane/function-sdk-go/resource\"\n\t\"github.com/crossplane/function-sdk-go/resource/composed\"\n\t\"github.com/crossplane/function-sdk-go/response\"\n)\n\n// Function returns whatever response you ask it to.\ntype Function struct {\n\tfnv1.UnimplementedFunctionRunnerServiceServer\n\n\tlog logging.Logger\n}\n\n// RunFunction observes an XBuckets composite resource (XR). It adds an S3\n// bucket to the desired state for every entry in the XR's spec.names array.\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n\tf.log.Info(\"Running Function\", \"tag\", req.GetMeta().GetTag())\n\n\t// Create a response to the request. This copies the desired state and\n\t// pipeline context from the request to the response.\n\trsp := response.To(req, response.DefaultTTL)\n\n\t// Read the observed XR from the request. Most functions use the observed XR\n\t// to add desired managed resources.\n\txr, err := request.GetObservedCompositeResource(req)\n\tif err != nil {\n\t\t// You can set a custom status condition on the claim. This\n\t\t// allows you to communicate with the user.\n\t\tresponse.ConditionFalse(rsp, \"FunctionSuccess\", \"InternalError\").\n\t\t\tWithMessage(\"Something went wrong.\").\n\t\t\tTargetCompositeAndClaim()\n\n\t\t// You can emit an event regarding the claim. This allows you to\n\t\t// communicate with the user. Note that events should be used \n\t\t// sparingly and are subject to throttling\n\t\tresponse.Warning(rsp, errors.New(\"something went wrong\")).\n\t\t\tTargetCompositeAndClaim()\n\n\t\t// If the function can't read the XR, the request is malformed. This\n\t\t// should never happen. The function returns a fatal result. This tells\n\t\t// Crossplane to stop running functions and return an error.\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get observed composite resource from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\t// Create an updated logger with useful information about the XR.\n\tlog := f.log.WithValues(\n\t\t\"xr-version\", xr.Resource.GetAPIVersion(),\n\t\t\"xr-kind\", xr.Resource.GetKind(),\n\t\t\"xr-name\", xr.Resource.GetName(),\n\t)\n\n\t// Get the region from the XR. The XR has getter methods like GetString,\n\t// GetBool, etc. You can use them to get values by their field path.\n\tregion, err := xr.Resource.GetString(\"spec.region\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.region field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\t// Get the array of bucket names from the XR.\n\tnames, err := xr.Resource.GetStringArray(\"spec.names\")\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot read spec.names field of %s\", xr.Resource.GetKind()))\n\t\treturn rsp, nil\n\t}\n\n\t// Get all desired composed resources from the request. The function will\n\t// update this map of resources, then save it. This get, update, set pattern\n\t// ensures the function keeps any resources added by other functions.\n\tdesired, err := request.GetDesiredComposedResources(req)\n\tif err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot get desired resources from %T\", req))\n\t\treturn rsp, nil\n\t}\n\n\t// Add v1beta1 types (including Bucket) to the composed resource scheme.\n\t// composed.From uses this to automatically set apiVersion and kind.\n\t_ = v1beta1.AddToScheme(composed.Scheme)\n\n\t// Add a desired S3 bucket for each name.\n\tfor _, name := range names {\n\t\t// One advantage of writing a function in Go is strong typing. The\n\t\t// function can import and use managed resource types from the provider.\n\t\tb := &v1beta1.Bucket{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\t// Set the external name annotation to the desired bucket name.\n\t\t\t\t// This controls what the bucket will be named in AWS.\n\t\t\t\tAnnotations: map[string]string{\n\t\t\t\t\t\"crossplane.io/external-name\": name,\n\t\t\t\t},\n\t\t\t},\n\t\t\tSpec: v1beta1.BucketSpec{\n\t\t\t\tForProvider: v1beta1.BucketParameters{\n\t\t\t\t\t// Set the bucket's region to the value read from the XR.\n\t\t\t\t\tRegion: ptr.To[string](region),\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\t// Convert the bucket to the unstructured resource data format the SDK\n\t\t// uses to store desired composed resources.\n\t\tcd, err := composed.From(b)\n\t\tif err != nil {\n\t\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot convert %T to %T\", b, &composed.Unstructured{}))\n\t\t\treturn rsp, nil\n\t\t}\n\n\t\t// Add the bucket to the map of desired composed resources. It's\n\t\t// important that the function adds the same bucket every time it's\n\t\t// called. It's also important that the bucket is added with the same\n\t\t// resource.Name every time it's called. The function prefixes the name\n\t\t// with \"xbuckets-\" to avoid collisions with any other composed\n\t\t// resources that might be in the desired resources map.\n\t\tdesired[resource.Name(\"xbuckets-\"+name)] = &resource.DesiredComposed{Resource: cd}\n\t}\n\n\t// Finally, save the updated desired composed resources to the response.\n\tif err := response.SetDesiredComposedResources(rsp, desired); err != nil {\n\t\tresponse.Fatal(rsp, errors.Wrapf(err, \"cannot set desired composed resources in %T\", rsp))\n\t\treturn rsp, nil\n\t}\n\n\t// Log what the function did. This will only appear in the function's pod\n\t// logs. A function can use response.Normal and response.Warning to emit\n\t// Kubernetes events associated with the XR it's operating on.\n\tlog.Info(\"Added desired buckets\", \"region\", region, \"count\", len(names))\n\n\t// You can set a custom status condition on the claim. This allows you\n\t// to communicate with the user.\n\tresponse.ConditionTrue(rsp, \"FunctionSuccess\", \"Success\").\n\t\tTargetCompositeAndClaim()\n\n\treturn rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a NoSQL Resource\nDESCRIPTION: This shell command deletes a `NoSQL` custom resource, which triggers Crossplane to delete the associated managed resources defined in the Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete nosql my-nosql-database\n```\n\n----------------------------------------\n\nTITLE: Viewing ImageConfig Selection Events\nDESCRIPTION: Shell command demonstrating how to inspect events related to ImageConfig selection for a Crossplane configuration package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/image-configs.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl describe configuration acme-configuration-foo\n...\nEvents:\n  Type     Reason                Age                From                                              Message\n  ----     ------                ----               ----                                              -------\n  Normal   ImageConfigSelection  45s                packages/configuration.pkg.crossplane.io          Selected pullSecret \"acme-registry-credentials\" from ImageConfig \"acme-packages\" for registry authentication\n```\n\n----------------------------------------\n\nTITLE: Unsealing Vault\nDESCRIPTION: Uses the retrieved unseal key to unseal Vault.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Network Provider in Kubernetes\nDESCRIPTION: This YAML snippet installs the Azure Network resource provider into the Kubernetes cluster. It defines a Provider custom resource that specifies the package to be installed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-azure-network\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-azure-network:v1.11.2\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane Compositions using kubectl\nDESCRIPTION: This command lists all available Compositions in the Kubernetes cluster, showing their names, XR-KIND, and XR-APIVERSION.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\n```\n\n----------------------------------------\n\nTITLE: Describing Provider Conditions with kubectl\nDESCRIPTION: This YAML output shows the conditions of a provider, including its health and installation status, as retrieved by the 'kubectl describe provider' command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe provider\nName:         my-provider\nAPI Version:  pkg.crossplane.io/v1\nKind:         Provider\n# Removed for brevity\nStatus:\n  Conditions:\n    Reason:      HealthyPackageRevision\n    Status:      True\n    Type:        Healthy\n    Reason:      ActivePackageRevision\n    Status:      True\n    Type:        Installed\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Monitoring Resources with Beta Top Command\nDESCRIPTION: Example output of the crossplane beta top command showing CPU and memory usage of Crossplane-related pods.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta top \nTYPE         NAMESPACE   NAME                                                                  CPU(cores)   MEMORY\ncrossplane   default     crossplane-f98f9ddfd-tnm46                                            4m           32Mi\ncrossplane   default     crossplane-rbac-manager-74ff459b88-94p8p                              4m           14Mi\nprovider     default     provider-aws-s3-1f1a3fb08cbc-5c49d84447-sggrq                         3m           108Mi\nprovider     default     crossplane-contrib-provider-family-aws-48b3b5ccf964-76c9686b6-bgg65   2m           89Mi\n```\n\n----------------------------------------\n\nTITLE: Ignoring Dependencies for Crossplane Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure a Crossplane Configuration to ignore its dependencies during installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  skipDependencyResolution: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Configuration Status with kubectl\nDESCRIPTION: Command to check the status of installed Crossplane Configurations, showing whether they are properly installed and healthy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configuration\nNAME               INSTALLED   HEALTHY   PACKAGE                                           AGE\nplatform-ref-aws   True        True      xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0   54s\n```\n\n----------------------------------------\n\nTITLE: Installing GCP Provider in Kubernetes\nDESCRIPTION: Kubernetes configuration to install the GCP storage provider into the cluster. This creates necessary Custom Resource Definitions (CRDs) for managing GCP storage services.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-storage\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-storage:v1.12.1\n```\n\n----------------------------------------\n\nTITLE: Monitoring CloudSQLInstance Provisioning\nDESCRIPTION: This command allows monitoring the progress of the CloudSQLInstance provisioning by watching the resource status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nkubectl get cloudsqlinstance -w\n```\n\n----------------------------------------\n\nTITLE: Converting ControllerConfig to DeploymentRuntimeConfig\nDESCRIPTION: Command to convert a ControllerConfig resource to a DeploymentRuntimeConfig, writing the output to a specified file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta convert deployment-runtime controllerConfig.yaml -o deploymentConfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting a Composite Resource Definition\nDESCRIPTION: Command to delete a specific composite resource definition. This removes the XRD and its associated composite resources and managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/uninstall.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete xrd compositepostgresqlinstances.database.example.org\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Hatch in Shell\nDESCRIPTION: This command demonstrates how to run unit tests for a Crossplane function using Hatch, a Python build tool that manages virtual environments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhatch run test:unit\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Matching in Crossplane Match Transform\nDESCRIPTION: Shows how to use regular expressions in a match transform to pattern match input values. When the regex pattern matches, the result value is applied to the target field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: regexp\n              regexp: '^field1.*'\n              result: \"foundField1\"\n```\n\n----------------------------------------\n\nTITLE: Deleting S3 Bucket Managed Resource\nDESCRIPTION: This shell command deletes the S3 bucket managed resource from the Kubernetes cluster, which in turn removes the actual S3 bucket from AWS.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete bucket crossplane-bucket-hhdzh\n```\n\n----------------------------------------\n\nTITLE: Example Composite Resource for Field Path Selection\nDESCRIPTION: Example of a composite resource object showing different fields that can be selected using field paths in patches.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl get composite -o yaml\napiVersion: example.org/v1alpha1\nkind: Example\nmetadata:\n  # Removed for brevity\n  labels:\n    crossplane.io/composite: my-example-978mh\nspec:\n  desiredRegion: eu-north-1\n  field1: field1-text\n  crossplane:\n    resourceRefs:\n    - apiVersion: s3.aws.m.upbound.io/v1beta1\n      kind: Bucket\n      name: my-example-978mh-r6z64\n    - apiVersion: s3.aws.m.upbound.io/v1beta1\n      kind: Bucket\n      name: my-example-978mh-cnlhj\n    - apiVersion: s3.aws.m.upbound.io/v1beta1\n      kind: Bucket\n      name: my-example-978mh-rv5nm\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS RDS MySQL Instance with Crossplane\nDESCRIPTION: This snippet shows how to define an RDSInstance managed resource in Crossplane that references a ProviderConfig for authentication. It specifies MySQL database configuration including instance class, storage, and engine version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/multi-tenant.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: rdsmysql\nspec:\n  forProvider:\n    region: us-east-1\n    dbInstanceClass: db.t3.medium\n    masterUsername: masteruser\n    allocatedStorage: 20\n    engine: mysql\n    engineVersion: \"5.6.35\"\n    skipFinalSnapshotBeforeDeletion: true\n  providerConfigRef:\n    name: cool-aws-creds # name of ProviderConfig above\n  writeConnectionSecretToRef:\n    namespace: crossplane-system\n    name: aws-rdsmysql-conn\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Chart Parameters for CA Bundle\nDESCRIPTION: Example YAML configuration block for a Helm override file that sets the registry CA bundle configuration parameters. This specifies the ConfigMap name and key containing the CA bundle.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/self-signed-ca-certs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  registryCaBundleConfig:\n    name: ca-bundle-config\n    key: ca-bundle\n```\n\n----------------------------------------\n\nTITLE: Generating Graphviz Visualization\nDESCRIPTION: Command to generate a PNG visualization of the trace output using Graphviz dot format.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace cluster.aws.platformref.upbound.io platform-ref-aws -o dot | dot -Tpng -o graph.png\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Admin ClusterRole\nDESCRIPTION: Creates the crossplane-admin ClusterRole with aggregation rules to collect permissions from roles labeled with rbac.crossplane.io/aggregate-to-admin.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane-admin\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\naggregationRule:\n  clusterRoleSelectors:\n  - matchLabels:\n      rbac.crossplane.io/aggregate-to-admin: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Exclusion for ProviderConfigUsage\nDESCRIPTION: Sets up resource exclusion in Argo CD to hide ProviderConfigUsage resources from the UI for better performance\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n    resource.exclusions: |\n      - apiGroups:\n        - \"*\"\n        kinds:\n        - ProviderConfigUsage\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Tracking Method in Argo CD ConfigMap\nDESCRIPTION: Configuration to set Argo CD's resource tracking method to annotation-based tracking for Crossplane compatibility.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n  application.resourceTrackingMethod: annotation\n```\n\n----------------------------------------\n\nTITLE: Viewing Secret Contents with kubectl\nDESCRIPTION: Command to inspect the content of an RDS connection secret, showing stored database connection parameters including port, username, endpoint, and password.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe secret rds-secret\nName:         rds-secret\n# Removed for brevity\nData\n====\nport:      4 bytes\nusername:  10 bytes\nendpoint:  54 bytes\npassword:  27 bytes\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Admin RBAC Policy\nDESCRIPTION: Command to view the full RBAC policy for the crossplane-admin ClusterRole using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/pods.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-admin\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Configuration Package via Helm\nDESCRIPTION: This shell command demonstrates how to install Crossplane using Helm while also installing a Configuration package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\n--set configuration.packages='{xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0}'\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane Providers\nDESCRIPTION: Command to view all installed Crossplane providers in the cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/uninstall.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Viewing Custom External Resource Names in Crossplane\nDESCRIPTION: This shell command shows how to view custom external names of managed resources in Crossplane using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get rdsinstance\nNAME                 READY   SYNCED   EXTERNAL-NAME        AGE\nmy-rds-instance      True    True     my-custom-name       11m\n```\n\n----------------------------------------\n\nTITLE: Viewing Composed Resource Secrets using kubectl\nDESCRIPTION: This shell command demonstrates how to view the secrets generated by composed resources in a specific namespace using kubectl. It lists all secrets in the 'docs' namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secrets -n docs\n```\n\n----------------------------------------\n\nTITLE: Tracing Package Dependencies with Crossplane CLI\nDESCRIPTION: This command uses the 'crossplane beta trace' feature to display all package dependencies for the 'platform-ref-aws' configuration. It includes detailed information about each package, its version, installation status, and health.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-dependencies all\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for ARM64 Platform\nDESCRIPTION: This command builds a Docker container image for the ARM64 platform that will serve as the runtime for a Crossplane function. The --quiet flag reduces output, and the result is a container image tagged as 'runtime-arm64'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/arm64 --tag runtime-arm64\n```\n\n----------------------------------------\n\nTITLE: Inspecting Claim Details\nDESCRIPTION: Shell command and output showing how to view Claim details including the related composite resource reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/claims.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe database.example.org/my-claimed-database\nName:         my-claimed-database\nAPI Version:  example.org/v1alpha1\nKind:         database\nSpec:\n  Resource Ref:\n    API Version:  example.org/v1alpha1\n    Kind:         XMyDatabase\n    Name:         my-claimed-database-rr4ll\n# Removed for brevity.\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Policy for Provider Credentials\nDESCRIPTION: Command to create a Vault policy allowing read and list access to provider credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-injection.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nvault policy write provider-creds - <<EOF\npath \"secret/data/provider-creds/*\" {\n    capabilities = [\"read\", \"list\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Describing Composite Resources Details\nDESCRIPTION: Detailed output of a composite resource showing its composition reference and managed resource references using kubectl describe.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe composite my-composite-resource\nName:         my-composite-resource\nAPI Version:  example.org/v1alpha1\nKind:         xMyDatabase\nSpec:\n  Composition Ref:\n    Name:  my-composition\n  Composition Revision Ref:\n    Name:                     my-composition-cf2d3a7\n  Composition Update Policy:  Automatic\n  Resource Refs:\n    API Version:  s3.aws.upbound.io/v1beta1\n    Kind:         Bucket\n    Name:         my-composite-resource-fmrks\n    API Version:  dynamodb.aws.upbound.io/v1beta1\n    Kind:         Table\n    Name:         my-composite-resource-wnr9t\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Arrays in Crossplane\nDESCRIPTION: Shows how to convert JSON strings to arrays using the convert transform with json format.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: array\n   format: json\n```\n\n----------------------------------------\n\nTITLE: Listing Built Configuration Package\nDESCRIPTION: This shell command shows how to list the contents of the current directory after building a Configuration package, displaying the package file alongside the source directory.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nls -1 ./\ntest-directory\ntest-package.xpkg\n```\n\n----------------------------------------\n\nTITLE: Displaying UnhealthyPackageRevision Status in YAML\nDESCRIPTION: Shows the YAML representation of an UnhealthyPackageRevision status for a Crossplane Provider Package. This indicates an error occurred during Package Revision installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nType: Healthy\nStatus: False\nReason: UnhealthyPackageRevision\n```\n\n----------------------------------------\n\nTITLE: Viewing Composite Resource Labels in Shell\nDESCRIPTION: This command shows how to inspect the labels of a composite resource, which include information about its relationship to other Crossplane components.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe xmydatabase.example.org/my-claimed-database-x9rx9\n```\n\n----------------------------------------\n\nTITLE: Using Wide Output Format for Crossplane Trace\nDESCRIPTION: Using the '--output=wide' flag to show full status messages in the 'crossplane trace' command without truncation, allowing visibility of complete message text.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane trace cluster.aws.platformref.upbound.io platform-ref-aws --output=wide\n```\n\n----------------------------------------\n\nTITLE: Final Verification of Managed Resource Deletion\nDESCRIPTION: A shell command to verify that all managed resources have been successfully deleted following the deletion of the NoSQLClaim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\nNo resources found\n```\n\n----------------------------------------\n\nTITLE: Listing Generated Function Directory Structure\nDESCRIPTION: Shell command showing the directory structure created by the function template initialization process.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: Deleting a Namespace-Scoped Claim in Crossplane\nDESCRIPTION: Demonstrates how to delete a namespace-scoped Claim, which triggers the deletion of the composite resource and all underlying managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete claim -n crossplane-test my-namespaced-vm\nvirtualmachineclaim.compute.example.com \"my-namespaced-vm\" deleted\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Resources with Beta Trace\nDESCRIPTION: Examples of using the beta trace command to display relationships between Crossplane objects.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace example.crossplane.io my-claim\ncrossplane beta trace example.crossplane.io/my-claim\n```\n\n----------------------------------------\n\nTITLE: Mock Managed Resource Example\nDESCRIPTION: Example YAML for a mock managed resource that can be used with the crossplane render command to provide artificial resource data for composition functions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: ComposedResource\nmetadata:\n  name: test-render-b\n  annotations:\n    crossplane.io/composition-resource-name: resource-b\nspec:\n  coolerField: \"I'm cooler!\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Pods\nDESCRIPTION: Retrieves and displays the status of Crossplane pods in the crossplane-system namespace after installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Installing a Configuration with a Digest\nDESCRIPTION: This YAML snippet demonstrates how to install a Crossplane Configuration using an image digest instead of a tag. Using digests ensures deterministic and repeatable installations by specifying the exact version of the package. The `@sha256` syntax is used to indicate the digest.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: configuration-quickstart\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/configuration-quickstart@sha256:ef9795d146190637351a5c5848e0bab5e0c190fec7780f6c426fbffa0cb68358\n```\n\n----------------------------------------\n\nTITLE: Displaying Crossplane CLI Version Information\nDESCRIPTION: The 'crossplane version' command displays both the client and server versions of Crossplane, showing the version compatibility between your CLI tool and the control plane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane version\nClient Version: v1.17.0\nServer Version: v1.17.0\n```\n\n----------------------------------------\n\nTITLE: Listing CompositeResourceDefinitions with kubectl in Crossplane\nDESCRIPTION: Uses kubectl to get a list of all CompositeResourceDefinitions (XRDs) in the cluster, showing their established and offered status along with age.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl get xrd                                \nNAME                                ESTABLISHED   OFFERED   AGE\nxdatabases.custom-api.example.org   True          True      22m\n```\n\n----------------------------------------\n\nTITLE: Setting Revision Activation Policy for Crossplane Configuration\nDESCRIPTION: This YAML snippet demonstrates how to set the revision activation policy for a Crossplane Configuration to control upgrade behavior.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  revisionActivationPolicy: Manual\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing Managed Resource Connection Secret Details\nDESCRIPTION: Retrieves and displays the contents of the managed resource's connection secret, including private key and credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -i vault-0 -- vault kv get /secret/crossplane-system/ess-mr-conn\n```\n\n----------------------------------------\n\nTITLE: Pushing Package to DockerHub Example\nDESCRIPTION: Example command showing how to push a package to DockerHub by specifying the full registry URL along with the package name and version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push -f my-package.xpkg index.docker.io/crossplane-docs/my-package:v0.14.0\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specific Managed Resource\nDESCRIPTION: Command to delete an individual managed resource that was manually created. This example shows removing an S3 bucket resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/uninstall.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete bucket.s3.aws.upbound.io/crossplane-bucket-867737b10\n```\n\n----------------------------------------\n\nTITLE: Complex AWS VPC and Gateway Configuration\nDESCRIPTION: Advanced example showing multiple VPCs with labels and controller references for specific matching.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-first-vpc\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    metadata:\n      labels:\n        type: backend\n    spec:\n      forProvider:\n      # Removed for brevity\n- name: my-second-vpc\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: VPC\n    metadata:\n      labels:\n        type: internet\n    spec:\n      forProvider:\n      # Removed for brevity\n- name: my-gateway\n  base:\n    apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: InternetGateway\n    spec:\n      forProvider:\n        vpcIdSelector:\n          matchControllerRef: true\n          matchLabels:\n            type: internet\n```\n\n----------------------------------------\n\nTITLE: Join Array Values in Crossplane String Transform\nDESCRIPTION: Demonstrates how to join array values into a single string with a specified separator using the Join string transform. This transform only works with array inputs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.parameters.inputList\n    toFieldPath: spec.targetJoined\n    transforms:\n      - type: string\n        string:\n          type: Join\n          join:\n            separator: \",\"\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Resources in Kubernetes with kubectl\nDESCRIPTION: Command to retrieve all managed resources in the Kubernetes cluster that were created by Crossplane. This helps create an inventory of external resources before uninstallation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/uninstall.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Match Transform with Regex Pattern\nDESCRIPTION: Example of match transform using regular expression pattern matching.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: regexp\n              regexp: '^field1.*'\n              result: \"foundField1\"\n```\n\n----------------------------------------\n\nTITLE: Example XBucket Composite Resource in YAML\nDESCRIPTION: Example of a composite resource (XBucket) that Crossplane observes and sends to the composition function as part of the observed state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBucket\nmetadata:\n  name: example-render\nspec:\n  bucketRegion: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Setting Package Pull Policy\nDESCRIPTION: This YAML snippet demonstrates how to configure the `packagePullPolicy` for a Crossplane Configuration. The `packagePullPolicy` determines when Crossplane downloads the configuration package. Options include `IfNotPresent` (default), `Always`, and `Never`.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  packagePullPolicy: Always\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Running a Crossplane Composition Function Locally\nDESCRIPTION: Command to run a Crossplane composition function locally in development mode with insecure and debug flags for testing purposes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo run . --insecure --debug\n```\n\n----------------------------------------\n\nTITLE: View Secret Details in Crossplane\nDESCRIPTION: Shows the output of describing a Kubernetes secret with connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret\nName:         my-access-key-secret\nNamespace:    default\nLabels:       <none>\nAnnotations:  <none>\n\nType:  connection.crossplane.io/v1alpha1\n\nData\n====\nmyUsername:      20 bytes\nmyFieldSecret:   24 bytes\nmyStaticSecret:  18 bytes\n```\n\n----------------------------------------\n\nTITLE: Pausing and Unpausing Crossplane\nDESCRIPTION: Commands to pause Crossplane by scaling down its deployment to 0 replicas, and unpause it by scaling back up to 1 replica.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/troubleshoot-crossplane.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system scale --replicas=0 deployment/crossplane\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system scale --replicas=1 deployment/crossplane\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Resources in Kubernetes\nDESCRIPTION: Command to view all managed resources in the cluster, providing visibility into cloud resources managed by Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/uninstall.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Selecting an EnvironmentConfig by Name in Crossplane\nDESCRIPTION: A complete YAML example showing how to select an EnvironmentConfig by its exact name using the Reference type in a Composition pipeline with function-environment-configs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/environment-configs.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Reference\n          ref:\n            name: example-environment\n```\n\n----------------------------------------\n\nTITLE: Observe Management Policy Configuration\nDESCRIPTION: Basic YAML configuration for setting up Observe management policy on a GCP DatabaseInstance resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/import-existing-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nspec:\n  managementPolicies: [\"Observe\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Azure Credentials\nDESCRIPTION: Command to create a Kubernetes secret containing Azure service principal credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret \\\ngeneric azure-secret \\\n-n crossplane-system \\\n--from-file=creds=./azure-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Verifying Namespace Removal\nDESCRIPTION: Command to confirm that the crossplane-system namespace has been successfully removed from the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/uninstall.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get namespace\n```\n\n----------------------------------------\n\nTITLE: Installing Vault with Helm\nDESCRIPTION: Command to install Vault in a Kubernetes cluster using Helm.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-injection.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add hashicorp https://helm.releases.hashicorp.com\nhelm install vault hashicorp/vault\n```\n\n----------------------------------------\n\nTITLE: Installing GCP PubSub Provider\nDESCRIPTION: YAML configuration to install the GCP PubSub provider in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-gcp-pubsub\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-gcp-pubsub:v1.12.1\n```\n\n----------------------------------------\n\nTITLE: Graphviz Integration Command\nDESCRIPTION: Example of generating a Graphviz dot file and converting it to PNG format.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace cluster.aws.platformref.upbound.io platform-ref-aws -o dot | dot -Tpng -o graph.png\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Crossplane via Helm\nDESCRIPTION: Command to uninstall the Crossplane deployment using Helm.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/uninstall.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm uninstall crossplane --namespace crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Configuring provider-gcp with ProviderConfig\nDESCRIPTION: This snippet shows how to create a ProviderConfig for provider-gcp, specifying the credentials source as the filesystem path where Vault injects the secrets. It uses the default project ID from an environment variable.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: gcp.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  projectID: ${PROJECT_ID}\n  credentials:\n    source: Filesystem\n    fs:\n      path: /vault/secrets/creds.txt\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Prometheus Annotations for Metrics Exposure\nDESCRIPTION: These Prometheus annotations are used to configure how metrics are exposed. They define the metrics endpoint path, port, and enable scraping for Prometheus to collect the metrics from Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.io/path: /metrics\nprometheus.io/port: \"8080\"\nprometheus.io/scrape: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Composite Resource with Claim Name Label\nDESCRIPTION: Shell command showing how to inspect a composite resource that was created from a claim, displaying the crossplane.io/claim-name label that indicates which claim created this composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe xmydatabase.example.org/my-claimed-database-x9rx9\n```\n\n----------------------------------------\n\nTITLE: Building a Crossplane Configuration Package with CLI\nDESCRIPTION: Shell command example showing how to build a Crossplane Configuration package from a directory using the Crossplane CLI, with custom output file specification.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build --package-root=test-directory --package-file=test-package.xpkg\n```\n\n----------------------------------------\n\nTITLE: Selecting Composition Revision in Crossplane\nDESCRIPTION: YAML configuration for selecting a specific Composition revision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resources.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionUpdatePolicy: Manual\n  compositionRevisionRef:\n    name: my-composition-b5aa1eb\n```\n\n----------------------------------------\n\nTITLE: Setting Revision History Limit\nDESCRIPTION: This YAML snippet demonstrates how to configure the `revisionHistoryLimit` for a Crossplane Configuration. The `revisionHistoryLimit` field controls the number of inactive revisions that Crossplane will retain. Setting it to `10` will store the last 10 revisions, while setting it to `0` will disable storing revisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  revisionHistoryLimit: 10\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Checking CloudSQL Instance Status in Crossplane\nDESCRIPTION: Command to inspect the status and conditions of a CloudSQL Instance managed resource using kubectl describe\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/troubleshoot-crossplane.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe cloudsqlinstance my-db\n```\n\n----------------------------------------\n\nTITLE: Ignoring Dependencies for Crossplane Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure a Crossplane Configuration to ignore package dependencies during installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  skipDependencyResolution: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing Composite Resources in Crossplane\nDESCRIPTION: A shell command to view the composite resources created by the ESS claim and verify they are ready and associated with the correct composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\nNAME           READY   COMPOSITION                    AGE\nmy-ess-zvmkz   True    essinstances.ess.example.org   32s\n```\n\n----------------------------------------\n\nTITLE: Running a Crossplane Function Locally for Development\nDESCRIPTION: Shell command to run a Crossplane function locally with insecure mode and debug logging enabled for development and testing purposes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngo run . --insecure --debug\n```\n\n----------------------------------------\n\nTITLE: Listing Function Template Files\nDESCRIPTION: Shell command showing the directory structure created by the function template initialization.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls function-xbuckets\nDockerfile    LICENSE       NOTES.txt     README.md     example       fn.go         fn_test.go    go.mod        go.sum        init.sh       input         main.go       package       renovate.json\n```\n\n----------------------------------------\n\nTITLE: Disabling Usage Support in Crossplane Deployment\nDESCRIPTION: This code snippet shows how to disable the Usage feature by editing the Crossplane deployment and setting the --enable-usages flag to false.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/usages.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --enable-usages=false\n```\n\n----------------------------------------\n\nTITLE: Checking Virtual Machine Status\nDESCRIPTION: Displays the status of the created VirtualMachine resource showing sync state, readiness, and composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get VirtualMachine\nNAME    SYNCED   READY   COMPOSITION                             AGE\nmy-vm   True     True    crossplane-quickstart-vm-with-network   3m3s\n```\n\n----------------------------------------\n\nTITLE: Viewing Individual Resource Secret\nDESCRIPTION: This shell command shows how to view the secret from an individual resource, which contains all the details specified in the Composition's connectionDetails.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret key1 -n docs\nName:         key1\nNamespace:    docs\n\nData\n====\npassword:                        40 bytes\nusername:                        20 bytes\nattribute.secret:                40 bytes\nattribute.ses_smtp_password_v4:  44 bytes\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Helm\nDESCRIPTION: Commands to add Crossplane Helm repository and install Crossplane in a Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n&&\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with Usage Resources\nDESCRIPTION: This snippet shows how to use label selectors or controller reference matching instead of explicit resource names to identify resources in Usage relationships.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/usages.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceSelector:\n      matchControllerRef: false # default, and could be omitted\n      matchLabels:\n        foo: bar\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceSelector:\n       matchLabels:\n          baz: qux\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Provider in Kubernetes\nDESCRIPTION: This YAML configuration installs the AWS S3 provider into the Kubernetes cluster. It defines a Provider resource that specifies the package to be installed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-s3\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Installing Patch-and-Transform Function\nDESCRIPTION: Installs the function-patch-and-transform package required for the Composition template to work.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Installing a Crossplane Configuration Package\nDESCRIPTION: This YAML snippet demonstrates how to install a Crossplane Configuration package by creating a Configuration object with the package location specified.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: configuration-quickstart\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Setting Revision Activation Policy\nDESCRIPTION: This YAML snippet demonstrates how to configure the `revisionActivationPolicy` for a Crossplane Configuration.  The `revisionActivationPolicy` controls how new revisions are activated. Options are `Automatic` (default) and `Manual`. Setting it to `Manual` requires manual activation of new revisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  revisionActivationPolicy: Manual\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Unknown Package Revision Status YAML\nDESCRIPTION: YAML configuration showing an unknown status of a Provider Package Revision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nType: Healthy\nStatus: Unknown\nReason: UnknownPackageRevisionHealth\n```\n\n----------------------------------------\n\nTITLE: Pushing Specific Package File to Registry\nDESCRIPTION: Example of pushing a specific Crossplane package file to a registry, specifying the file name, organization, package name, and version tag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push -f my-package.xpkg crossplane-docs/my-package:v0.14.0\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Helm Repository\nDESCRIPTION: This command adds the Crossplane stable repository to Helm. It's a prerequisite step for upgrading Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\n```\n\n----------------------------------------\n\nTITLE: Setting Revision History Limit for Crossplane Configuration\nDESCRIPTION: This YAML snippet demonstrates how to set the revision history limit for a Crossplane Configuration package, controlling how many revisions are maintained.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  revisionHistoryLimit: 10\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Using TrimPrefix Transform in Crossplane Composition YAML\nDESCRIPTION: This example shows how to use the 'TrimPrefix' transform in a Crossplane Composition to remove characters from the beginning of a string. It utilizes Go's TrimPrefix function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"north-1\"]\n    transforms:\n      - type: string\n        string:\n          type: TrimPrefix\n          trim: `eu-\n```\n\n----------------------------------------\n\nTITLE: Observe-Only Database Import Configuration\nDESCRIPTION: Configuration for importing a GCP SQL DatabaseInstance with observe-only management policy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/import-existing-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"Observe\"]\n  forProvider:\n    region: \"us-central1\"\n```\n\n----------------------------------------\n\nTITLE: Checking Non-Empty Field in Crossplane Composition (YAML)\nDESCRIPTION: This snippet demonstrates how to use the NonEmpty readiness check to ensure a specific field in the composed resource's status is not empty. It checks the status.atProvider.state field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: NonEmpty\n      fieldPath: status.atProvider.state\n```\n\n----------------------------------------\n\nTITLE: Setting Composition Revision Selector in YAML\nDESCRIPTION: Shows how to select composition revisions based on labels instead of exact name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionRevisionSelector:\n    matchLabels:\n      channel: dev\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Pausing Composite Resources - YAML\nDESCRIPTION: This YAML snippet shows how to pause a composite resource by applying the 'crossplane.io/paused' annotation set to 'true'. This annotation halts any ongoing changes or checks against its managed resources, effectively putting the composite in a non-active state.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\n  annotations:\n    crossplane.io/paused: \"true\"\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Deleting Composite Resource Definition\nDESCRIPTION: Command to remove a specific composite resource definition for PostgreSQL instances.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/uninstall.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete xrd compositepostgresqlinstances.database.example.org\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Plugin Pod Annotations Configuration\nDESCRIPTION: Creates a values.yaml file with the required annotations for Vault Agent Sidecar Injection in the ESS Plugin pod.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncat > values.yaml <<EOF\npodAnnotations:\n  vault.hashicorp.com/agent-inject: \"true\"\n  vault.hashicorp.com/agent-inject-token: \"true\"\n  vault.hashicorp.com/role: crossplane\n  vault.hashicorp.com/agent-run-as-user: \"65532\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Pausing Crossplane in Shell\nDESCRIPTION: Demonstrates how to pause Crossplane by scaling down its deployment to 0 replicas.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system scale --replicas=0 deployment/crossplane\n```\n\n----------------------------------------\n\nTITLE: Listing CompositionRevisions with Custom Columns\nDESCRIPTION: Retrieves CompositionRevisions with details about revision number and channel label\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevisions -o=\"custom-columns=NAME:.metadata.name,REVISION:.spec.revision,CHANNEL:.metadata.labels.channel\"\n```\n\n----------------------------------------\n\nTITLE: Crossplane ReconcileError Condition Example\nDESCRIPTION: Shows the condition structure when Crossplane encounters an error while reconciling a managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Synced\n  Status:                False\n  Reason:                ReconcileError\n```\n\n----------------------------------------\n\nTITLE: Optional Selector Labels Configuration in Crossplane\nDESCRIPTION: Demonstrates how to configure optional selector labels in a Crossplane Composition using fromFieldPathPolicy. Shows setting up environment configs with optional field paths and multiple match labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/environment-configs.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            maxMatch: 4\n            sortByFieldPath: metadata.annotations[sort.by/weight]\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n                fromFieldPathPolicy: Optional\n```\n\n----------------------------------------\n\nTITLE: Applying Vault Policy to Kubernetes Service Accounts\nDESCRIPTION: Associates the Crossplane policy with Kubernetes service accounts in the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -it vault-0 -- vault write auth/kubernetes/role/crossplane \\\n    bound_service_account_names=\"*\" \\\n    bound_service_account_namespaces=crossplane-system \\\n    policies=crossplane \\\n    ttl=24h\n```\n\n----------------------------------------\n\nTITLE: Upjet ApplyFailure Condition Example\nDESCRIPTION: Shows the condition structure when an Upjet-based provider fails to apply settings to a managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  LastAsyncOperation\n  Status:                False\n  Reason:                ApplyFailure\n```\n\n----------------------------------------\n\nTITLE: AWS VPC Resource Creation Annotations Example\nDESCRIPTION: Example showing creation annotations on an AWS VPC managed resource, including external-name, external-create-pending, and external-create-succeeded timestamps.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl get -o yaml vpc my-vpc\napiVersion: ec2.aws.m.upbound.io/v1beta1\nkind: VPC\nmetadata:\n  namespace: default\n  name: my-vpc\n  annotations:\n    crossplane.io/external-name: vpc-1234567890abcdef0\n    crossplane.io/external-create-pending: \"2023-12-18T21:48:06Z\"\n    crossplane.io/external-create-succeeded: \"2023-12-18T21:48:40Z\"\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane Custom Resource (XR)\nDESCRIPTION: A PubSub custom resource that demonstrates how to create cloud resources using a Crossplane Composition template with a specified location\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: queue.example.com/v1alpha1\nkind: PubSub\nmetadata:\n  name: my-pubsub-queue\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Logging out of Crossplane Package Registry\nDESCRIPTION: The `crossplane xpkg logout` command invalidates the current login session by removing the session cookie identifier from `.crossplane/config.json`, though it doesn't remove the configuration file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg logout\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane RBAC Manager ClusterRoleBinding in Kubernetes YAML\nDESCRIPTION: This snippet defines a ClusterRoleBinding for the Crossplane RBAC manager. It binds the 'crossplane-rbac-manager' ClusterRole to the 'rbac-manager' ServiceAccount in the default namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: crossplane-rbac-manager\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: crossplane-rbac-manager\nsubjects:\n- kind: ServiceAccount\n  name: rbac-manager\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Regular Expression String Transformation in Crossplane YAML\nDESCRIPTION: Demonstrates how to use regular expressions to transform string values in Crossplane patches. It extracts a part of the input matching a specified regular expression, optionally using a capture group.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"euRegion\"]\n    transforms:\n      - type: string\n        string:\n          type: Regexp\n          regexp:\n            match: '^eu-(.*)-'\n            group: 1\n```\n\n----------------------------------------\n\nTITLE: Patching Individual Resources with Environment Data in Crossplane\nDESCRIPTION: Shows how to patch data between individual resources and the in-memory environment using ToEnvironmentFieldPath and FromEnvironmentFieldPath patch types, enabling resource-specific data exchange.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/environment-configs.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  # Removed for Brevity\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      # Removed for Brevity\n      resources:\n        - name: vpc\n          base:\n            apiVersion: ec2.aws.upbound.io/v1beta1\n            kind: VPC\n            spec:\n              forProvider:\n                cidrBlock: 172.16.0.0/16\n          patches:\n            - type: ToEnvironmentFieldPath\n              fromFieldPath: status.atProvider.id\n              toFieldPath: vpcId\n            - type: FromEnvironmentFieldPath\n              fromFieldPath: tags\n              toFieldPath: spec.forProvider.tags\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane CRDs in Kubernetes\nDESCRIPTION: Shell command output showing the Custom Resource Definitions (CRDs) installed by Crossplane in a Kubernetes cluster. Demonstrates the initial CRDs created for core Crossplane functionality.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n❯ kubectl get crd\nNAME                                                    \ncompositeresourcedefinitions.apiextensions.crossplane.io\ncompositionrevisions.apiextensions.crossplane.io        \ncompositions.apiextensions.crossplane.io                \nconfigurationrevisions.pkg.crossplane.io                \nconfigurations.pkg.crossplane.io                        \ncontrollerconfigs.pkg.crossplane.io                     \ndeploymentruntimeconfigs.pkg.crossplane.io              \nenvironmentconfigs.apiextensions.crossplane.io          \nfunctionrevisions.pkg.crossplane.io                     \nfunctions.pkg.crossplane.io                             \nlocks.pkg.crossplane.io                                 \nproviderrevisions.pkg.crossplane.io                     \nproviders.pkg.crossplane.io                             \nstoreconfigs.secrets.crossplane.io                      \nusages.apiextensions.crossplane.io\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Crossplane with Helm\nDESCRIPTION: Command to uninstall the Crossplane deployment using Helm. This removes the Crossplane components from the specified namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/uninstall.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm uninstall crossplane --namespace crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Resources in Kubernetes\nDESCRIPTION: This command retrieves all managed resources in the Kubernetes cluster. It's useful for creating an inventory of external resources before uninstalling Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/uninstall.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Connection Details Configuration\nDESCRIPTION: Shows how to configure connection details for a composite resource, including different secret types and key configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Composition\nspec:\n  writeConnectionSecretsToNamespace: other-namespace\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: key\n        base:\n          spec:\n            forProvider:\n            writeConnectionSecretToRef:\n              namespace: docs\n              name: key1\n        connectionDetails:\n          - name: my-username\n            type: FromConnectionSecretKey\n            fromConnectionSecretKey: username\n          - name: my-field-secret\n            type: FromFieldPath\n            fromFieldPath: spec.forProvider.user\n          - name: my-status-secret\n            type: FromValue\n            value: \"docs.crossplane.io\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Crossplane Schema Validation (Shell)\nDESCRIPTION: This shell snippet shows the directory structure used for validating Crossplane resources against a directory of schemas. It includes XRD and Provider schemas in separate subdirectories.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ntree\nschemas\n|-- platform-ref-aws.yaml\n|-- providers\n|   |-- a.txt\n|   `-- provider-aws-iam.yaml\n`-- xrds\n    `-- xrd.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting Crossplane PubSub Resources\nDESCRIPTION: This shell command deletes a PubSub resource, which triggers the deletion of all associated managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete pubsub my-pubsub-queue\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition with Function Pipeline for Crossplane\nDESCRIPTION: YAML definition of a Crossplane Composition that uses a pipeline mode with a reference to a function. This composition is used to process the XBuckets resource and create S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: create-buckets\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBuckets\n  mode: Pipeline\n  pipeline:\n  - step: create-buckets\n    functionRef:\n      name: function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: Viewing Claim Connection Secret Details\nDESCRIPTION: Retrieves and displays the contents of the claim's connection secret, including metadata and public key information.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -i vault-0 -- vault kv get /secret/default/ess-claim-conn\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace for Crossplane Testing\nDESCRIPTION: This shell command creates a new Kubernetes namespace for testing Crossplane Claims.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Provider with Image Digest\nDESCRIPTION: This YAML snippet shows how to install a Crossplane provider using an image digest instead of a tag for deterministic installations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws@sha256:ee6bece46dbb54cc3f0233961f5baac317fa4e4a81b41198bdc72fc472d113d0\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider for Namespace-Specific Credentials\nDESCRIPTION: Defines a ProviderConfig resource that specifies AWS credentials for a specific namespace team-1, allowing for namespace-scoped access control.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/multi-tenant.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: team-1\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: team-1-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition Pipeline in YAML\nDESCRIPTION: Defines a composition pipeline with patch-and-transform function to handle resource annotations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: my-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: database\n        base:\n          # Removed for brevity\n        patches:\n        - fromFieldPath: metadata.annotations\n          toFieldPath: metadata.annotations\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Provider for S3\nDESCRIPTION: Applies a Kubernetes manifest to install the AWS Provider for S3 using Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-s3\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Deleting a Composite Resource Definition\nDESCRIPTION: Command to delete a specific composite resource definition, which will also remove any composite resources it defined and the managed resources created by those composite resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/uninstall-crossplane.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete xrd compositepostgresqlinstances.database.example.org\n```\n\n----------------------------------------\n\nTITLE: Creating a Claim Resource\nDESCRIPTION: Example of creating a Claim resource that matches the XRD's API endpoint specifications.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/claims.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: database\nmetadata:\n  name: my-claimed-database\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring Replay Deletion in Crossplane Usage\nDESCRIPTION: Usage definition with the replayDeletion field set to true, which triggers the deletion of the protected resource when the Usage resource is deleted. This is useful for ensuring resources are cleaned up promptly.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/usages.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  replayDeletion: true\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n      name: my-cluster\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n      name: my-prometheus-chart\n```\n\n----------------------------------------\n\nTITLE: Deleting the Crossplane Namespace\nDESCRIPTION: Command to manually delete the crossplane-system namespace, which is created by Helm during installation but not removed during uninstallation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/uninstall-crossplane.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete namespace crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Helm Repository\nDESCRIPTION: This snippet shows how to add the Crossplane Helm chart repository and update the local Helm cache.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Detailed Crossplane Helm Dry-Run Output\nDESCRIPTION: This snippet shows the complete output of the Helm dry-run command, including computed values, hooks, and the full Kubernetes manifest that would be applied during installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/install-crossplane-include.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--dry-run --debug \\\n--namespace crossplane-system \\\n--create-namespace\ninstall.go:214: [debug] Original chart version: \"\"\ninstall.go:216: [debug] setting version to >0.0.0-0\ninstall.go:231: [debug] CHART PATH: /Users/plumbis/Library/Caches/helm/repository/crossplane-1.15.0.tgz\n\nNAME: crossplane\nLAST DEPLOYED: Mon Feb 12 14:46:15 2024\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\n{}\n\nCOMPUTED VALUES:\naffinity: {}\nargs: []\nconfiguration:\n  packages: []\ncustomAnnotations: {}\ncustomLabels: {}\ndeploymentStrategy: RollingUpdate\nextraEnvVarsCrossplane: {}\nextraEnvVarsRBACManager: {}\nextraObjects: []\nextraVolumeMountsCrossplane: {}\nextraVolumesCrossplane: {}\nfunction:\n  packages: []\nhostNetwork: false\nimage:\n  pullPolicy: IfNotPresent\n  repository: xpkg.crossplane.io/crossplane/crossplane\n  tag: \"\"\nimagePullSecrets: {}\nleaderElection: true\nmetrics:\n  enabled: false\nnodeSelector: {}\npackageCache:\n  configMap: \"\"\n  medium: \"\"\n  pvc: \"\"\n  sizeLimit: 20Mi\npodSecurityContextCrossplane: {}\npodSecurityContextRBACManager: {}\npriorityClassName: \"\"\nprovider:\n  packages: []\nrbacManager:\n  affinity: {}\n  args: []\n  deploy: true\n  leaderElection: true\n  nodeSelector: {}\n  replicas: 1\n  skipAggregatedClusterRoles: false\n  tolerations: []\nregistryCaBundleConfig:\n  key: \"\"\n  name: \"\"\nreplicas: 1\nresourcesCrossplane:\n  limits:\n    cpu: 100m\n    memory: 512Mi\n  requests:\n    cpu: 100m\n    memory: 256Mi\nresourcesRBACManager:\n  limits:\n    cpu: 100m\n    memory: 512Mi\n  requests:\n    cpu: 100m\n    memory: 256Mi\nsecurityContextCrossplane:\n  allowPrivilegeEscalation: false\n  readOnlyRootFilesystem: true\n  runAsGroup: 65532\n  runAsUser: 65532\nsecurityContextRBACManager:\n  allowPrivilegeEscalation: false\n  readOnlyRootFilesystem: true\n  runAsGroup: 65532\n  runAsUser: 65532\nserviceAccount:\n  customAnnotations: {}\ntolerations: []\nwebhooks:\n  enabled: true\n\nHOOKS:\nMANIFEST:\n---\n# Source: crossplane/templates/rbac-manager-serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: rbac-manager\n  namespace: default\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\n---\n# Source: crossplane/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: crossplane\n  namespace: default\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\n---\n# Source: crossplane/templates/secret.yaml\n# The reason this is created empty and filled by the init container is we want\n# to manage the lifecycle of the secret via Helm. This way whenever Crossplane\n# is deleted, the secret is deleted as well.\napiVersion: v1\nkind: Secret\nmetadata:\n  name: crossplane-root-ca\n  namespace: default\ntype: Opaque\n---\n# Source: crossplane/templates/secret.yaml\n# The reason this is created empty and filled by the init container is we want\n# to manage the lifecycle of the secret via Helm. This way whenever Crossplane\n# is deleted, the secret is deleted as well.\napiVersion: v1\nkind: Secret\nmetadata:\n  name: crossplane-tls-server\n  namespace: default\ntype: Opaque\n---\n# Source: crossplane/templates/secret.yaml\n# The reason this is created empty and filled by the init container is we want\n# to manage the lifecycle of the secret via Helm. This way whenever Crossplane\n# is deleted, the secret is deleted as well.\napiVersion: v1\nkind: Secret\nmetadata:\n  name: crossplane-tls-client\n  namespace: default\ntype: Opaque\n---\n# Source: crossplane/templates/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\naggregationRule:\n  clusterRoleSelectors:\n  - matchLabels:\n      rbac.crossplane.io/aggregate-to-crossplane: \"true\"\n---\n# Source: crossplane/templates/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane:system:aggregate-to-crossplane\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\n    crossplane.io/scope: \"system\"\n    rbac.crossplane.io/aggregate-to-crossplane: \"true\"\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - events\n  verbs:\n  - create\n  - update\n  - patch\n  - delete\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  - customresourcedefinitions/status\n  verbs:\n  - \"*\"\n- apiGroups:\n  - \"\"\n  resources:\n  - secrets\n  verbs:\n  - get\n  - list\n  - watch\n  - create\n  - update\n  - patch\n  - delete\n- apiGroups:\n  - \"\"\n  resources:\n  - serviceaccounts\n  - services\n  verbs:\n  - \"*\"\n- apiGroups:\n  - apiextensions.crossplane.io\n  - pkg.crossplane.io\n  - secrets.crossplane.io\n  resources:\n  - \"*\"\n  verbs:\n  - \"*\"\n- apiGroups:\n  - extensions\n  - apps\n  resources:\n  - deployments\n  verbs:\n  - get\n  - list\n  - create\n  - update\n  - patch\n  - delete\n  - watch\n- apiGroups:\n  - \"\"\n  - coordination.k8s.io\n  resources:\n  - configmaps\n  - leases\n  verbs:\n  - get\n  - list\n  - create\n  - update\n  - patch\n  - watch\n  - delete\n- apiGroups:\n  - admissionregistration.k8s.io\n  resources:\n  - validatingwebhookconfigurations\n  - mutatingwebhookconfigurations\n  verbs:\n  - get\n  - list\n  - create\n  - update\n  - patch\n  - watch\n  - delete\n---\n# Source: crossplane/templates/rbac-manager-allowed-provider-permissions.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane:allowed-provider-permissions\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\naggregationRule:\n  clusterRoleSelectors:\n  - matchLabels:\n      rbac.crossplane.io/aggregate-to-allowed-provider-permissions: \"true\"\n---\n# Source: crossplane/templates/rbac-manager-clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane-rbac-manager\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - events\n  verbs:\n  - create\n  - update\n  - patch\n  - delete\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n    - apps\n  resources:\n    - deployments\n  verbs:\n    - get\n    - list\n    - watch\n# The RBAC manager creates a series of RBAC roles for each namespace it sees.\n# These RBAC roles are controlled (in the owner reference sense) by the namespace.\n# The RBAC manager needs permission to set finalizers on Namespaces in order to\n# create resources that block their deletion when the\n# OwnerReferencesPermissionEnforcement admission controller is enabled.\n# See https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement\n- apiGroups:\n  - \"\"\n  resources:\n  - namespaces/finalizers\n  verbs:\n  - update\n- apiGroups:\n  - apiextensions.crossplane.io\n  resources:\n  - compositeresourcedefinitions\n  verbs:\n  - get\n  - list\n  - watch\n# The RBAC manager creates a series of RBAC cluster roles for each XRD it sees.\n# These cluster roles are controlled (in the owner reference sense) by the XRD.\n# The RBAC manager needs permission to set finalizers on XRDs in order to\n# create resources that block their deletion when the\n# OwnerReferencesPermissionEnforcement admission controller is enabled.\n# See https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement\n- apiGroups:\n  - apiextensions.crossplane.io\n  resources:\n  - compositeresourcedefinitions/finalizers\n  verbs:\n  - update\n- apiGroups:\n  - pkg.crossplane.io\n  resources:\n  - providerrevisions\n  verbs:\n  - get\n  - list\n  - watch\n```\n\n----------------------------------------\n\nTITLE: Setting Revision History Limit for Crossplane Configuration\nDESCRIPTION: This YAML snippet demonstrates how to set the revision history limit for a Crossplane Configuration package to control the number of revisions maintained.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  revisionHistoryLimit: 10\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Listing Claims in a Namespace\nDESCRIPTION: Lists all Crossplane Claims in a specific namespace, showing their synchronization and readiness status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get claim -n crossplane-test\nNAME               SYNCED   READY   CONNECTION-SECRET   AGE\nmy-namespaced-vm   True     True                        5m11s\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Admin ClusterRole Details\nDESCRIPTION: This command shows how to view the full RBAC policy details for the crossplane-admin ClusterRole, which has extensive permissions for managing Crossplane resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/pods.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-admin\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Environment Patches\nDESCRIPTION: Example demonstrating how to patch between the composite resource and in-memory environment using ToCompositeFieldPath and FromCompositeFieldPath.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nenvironment:\n  patches:\n  - type: ToCompositeFieldPath\n    fromFieldPath: tags\n    toFieldPath: metadata.labels[envTag]\n  - type: FromCompositeFieldPath\n    fromFieldPath: metadata.name\n    toFieldPath: newEnvironmentKey\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider Authentication with ProviderConfig in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to define a basic AWS ProviderConfig that references credentials stored in a Kubernetes Secret. The ProviderConfig specifies the source of credentials as a Secret and provides the namespace, name, and key within the Secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: aws-provider\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Using MatchTrue Readiness Check in Crossplane Resources\nDESCRIPTION: This YAML snippet shows how to configure the MatchTrue readiness check, which considers a resource ready when a specified field has a value of 'true'. It checks the 'status.atProvider.manifest.status.ready' field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchTrue\n      fieldPath: status.atProvider.manifest.status.ready\n```\n\n----------------------------------------\n\nTITLE: Editing Crossplane Deployment Configuration\nDESCRIPTION: Command to edit the Crossplane deployment in the crossplane-system namespace using kubectl edit.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/pods.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl edit deployment crossplane --namespace crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Setting Up Crossplane View Permissions\nDESCRIPTION: Configures read-only access for Crossplane viewers to events, namespaces, and core Crossplane resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane:aggregate-to-view\nrules:\n- apiGroups: [\"\"]\n  resources: [events]\n  verbs: [get, list, watch]\n- apiGroups: [\"\"]\n  resources: [namespaces]\n  verbs: [get, list, watch]\n```\n\n----------------------------------------\n\nTITLE: Deleting Managed Resources\nDESCRIPTION: This command demonstrates how to delete a specific managed resource, in this case an S3 bucket.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/uninstall.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete bucket.s3.aws.upbound.io/crossplane-bucket-867737b10\n```\n\n----------------------------------------\n\nTITLE: Viewing Creation Annotations on Crossplane Managed Resources\nDESCRIPTION: This shell command demonstrates how to view the creation annotations on a Crossplane managed resource using kubectl get with YAML output.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl get -o yaml vpc my-vpc\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: VPC\nmetadata:\n  name: my-vpc\n  annotations:\n    crossplane.io/external-name: vpc-1234567890abcdef0\n    crossplane.io/external-create-pending: \"2023-12-18T21:48:06Z\"\n    crossplane.io/external-create-succeeded: \"2023-12-18T21:48:40Z\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EnvironmentConfig Selection Mode\nDESCRIPTION: Example demonstrating how to configure selection modes (Single/Multiple) and handle multiple matches in EnvironmentConfig selection.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/environment-configs.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n        - type: Selector\n          selector:\n            mode: Single\n            matchLabels:\n              - key: my-other-label-key\n                type: Value\n                value: my-other-label-value\n              - key: my-other-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n```\n\n----------------------------------------\n\nTITLE: Listing Custom API Resources Defined by Crossplane\nDESCRIPTION: Shell command that filters Kubernetes API resources to show only the newly created NoSQL-related endpoints, confirming that both the cluster-scoped and namespace-scoped versions of the API are available.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources | grep nosql\n```\n\n----------------------------------------\n\nTITLE: Pausing Providers with DeploymentRuntimeConfig in YAML\nDESCRIPTION: Illustrates how to pause a Crossplane provider by creating a DeploymentRuntimeConfig with 0 replicas and referencing it in the Provider resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: scale-config\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      replicas: 0\n      template: {}\n---\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.33.0\n  runtimeConfigRef:\n    apiVersion: pkg.crossplane.io/v1beta1\n    kind: DeploymentRuntimeConfig\n    name: scale-config\n```\n\n----------------------------------------\n\nTITLE: Prometheus Annotations for Crossplane Metrics Exposure\nDESCRIPTION: YAML configuration showing the Prometheus annotations used to expose Crossplane metrics. These annotations specify the metrics path, port, and enable scraping.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.io/path: /metrics\nprometheus.io/port: \"8080\"\nprometheus.io/scrape: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Checking Provider Installation Status\nDESCRIPTION: Shell command and output showing how to verify the successful installation of GCP providers in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\nNAME                                     INSTALLED   HEALTHY   PACKAGE                                                              AGE\ncrossplane-contrib-provider-family-gcp   True        True      xpkg.crossplane.io/crossplane-contrib/provider-family-gcp:v1.12.1    33s\nprovider-gcp-storage                     True        True      xpkg.crossplane.io/crossplane-contrib/provider-gcp-storage:v1.12.1   37s\n```\n\n----------------------------------------\n\nTITLE: Retrieving Composite Resource Definition Status in Shell\nDESCRIPTION: Demonstrates how to get the status of a Composite Resource Definition (XRD) using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd testing.awsblueprints.io\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Crossplane Guides Page in Markdown\nDESCRIPTION: YAML frontmatter that configures metadata for a Markdown documentation page about Crossplane guides. It specifies the title as 'Guides', sets the weight to 100 (which affects the ordering in navigation), and provides a description indicating this section contains Crossplane integrations and detailed examples.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Guides\nweight: 100\ndescription: Crossplane integrations and detailed examples.\n---\n```\n\n----------------------------------------\n\nTITLE: Serving and Referencing XRD Schema\nDESCRIPTION: Demonstrates how to configure an XRD schema to be served and referenceable, which is crucial for making the schema usable in Crossplane resource definitions\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string\n```\n\n----------------------------------------\n\nTITLE: Usage with Replay Deletion Configuration\nDESCRIPTION: YAML configuration for a Usage resource with replay deletion enabled to trigger deletion of the used resource when the Usage is deleted.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/usages.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1alpha1\nkind: Usage\nmetadata:\n  name: release-uses-cluster\nspec:\n  replayDeletion: true\n  of:\n    apiVersion: eks.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n      name: my-cluster\n  by:\n    apiVersion: helm.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n      name: my-prometheus-chart\n```\n\n----------------------------------------\n\nTITLE: Displaying ActivePackageRevision Status in YAML\nDESCRIPTION: Shows the YAML representation of an ActivePackageRevision status for a Crossplane Provider Package. This indicates that the Package Revision is current but not yet fully installed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: Installed\nStatus: True\nReason: ActivePackageRevision\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Pod Status After Initialization\nDESCRIPTION: This command shows how to check the status of Crossplane pods in the crossplane-system namespace after the init container has completed and the core container is running.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/pods.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS    RESTARTS   AGE\ncrossplane-9f6d5cd7b-r9j8w                 1/1     Running   0          15s\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane View ClusterRole in Kubernetes\nDESCRIPTION: This command shows the full RBAC policy for the crossplane-view ClusterRole, which has read-only access to all Crossplane types, namespaces, and events.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/pods.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-view\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Pull Policy for Crossplane Configuration\nDESCRIPTION: This YAML snippet shows how to set the package pull policy for a Crossplane Configuration to control when packages are downloaded.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  packagePullPolicy: Always\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Service Account\nDESCRIPTION: Script to create and configure a GCP service account with CloudSQL admin permissions\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nPROJECT_ID=my-project\nNEW_SA_NAME=test-service-account-name\n\nSA=\"${NEW_SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com\"\ngcloud iam service-accounts create $NEW_SA_NAME --project $PROJECT_ID\n\nSERVICE=\"sqladmin.googleapis.com\"\ngcloud services enable $SERVICE --project $PROJECT_ID\n\nROLE=\"roles/cloudsql.admin\"\ngcloud projects add-iam-policy-binding --role=\"$ROLE\" $PROJECT_ID --member \"serviceAccount:$SA\"\n\ngcloud iam service-accounts keys create creds.json --project $PROJECT_ID --iam-account $SA\n```\n\n----------------------------------------\n\nTITLE: Describing Configuration Revision Details with kubectl in YAML\nDESCRIPTION: This YAML output shows the result of describing a ConfigurationRevision using kubectl. It provides detailed information about the Configuration's status, including any health issues or incompatibilities.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe configurationrevision\nName:         platform-ref-aws-a30ad655c769\nAPI Version:  pkg.crossplane.io/v1\nKind:         ConfigurationRevision\n# Removed for brevity\nSpec:\n  Desired State:                  Active\n  Image:                          xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0\n  Revision:                       1\nStatus:\n  Conditions:\n    Last Transition Time:  2023-10-06T20:08:14Z\n    Reason:                UnhealthyPackageRevision\n    Status:                False\n    Type:                  Healthy\n  Controller Ref:\n    Name:\nEvents:\n  Type     Reason       Age                From                                              Message\n  ----     ------       ----               ----                                              -------\n  Warning  LintPackage  29s (x2 over 29s)  packages/configurationrevision.pkg.crossplane.io  incompatible Crossplane version: package isn't compatible with Crossplane version (v1.12.0)\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Provider Dependency\nDESCRIPTION: Shell command to add the required AWS Provider Go module dependency for accessing the v1beta1.Bucket type.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/upbound/provider-aws@v1.14.0\n```\n\n----------------------------------------\n\nTITLE: Using Map Transform in Crossplane\nDESCRIPTION: Demonstrates how to use the map transform to convert values from one field to another by direct mapping of specific values. Useful for translating generic names to provider-specific names.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: map\n        map:\n          \"field1-text\": \"firstField\"\n          \"field2-text\": \"secondField\"\n```\n\n----------------------------------------\n\nTITLE: Installing specific version of Crossplane CLI\nDESCRIPTION: A shell command that downloads and installs a specific version (v1.14.0) of the Crossplane CLI by setting the XP_VERSION environment variable when executing the install script.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh\" | XP_VERSION=v1.14.0 sh\n```\n\n----------------------------------------\n\nTITLE: Discovering Composition Revisions Using kubectl\nDESCRIPTION: Shell command to list all revisions of a Composition named 'example' using kubectl, demonstrating how to find existing CompositionRevisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composition-revisions.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevision -l crossplane.io/composition-name=example\n```\n\n----------------------------------------\n\nTITLE: Enabling Usage Feature in Crossplane Deployment\nDESCRIPTION: YAML configuration to enable the Usage feature flag in Crossplane deployment by adding the --enable-usages argument.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/usages.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --enable-usages\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Helm\nDESCRIPTION: Command to install Crossplane using Helm package manager, specifying the namespace and creating it if it doesn't exist.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Combining Resource Values to Environment\nDESCRIPTION: Demonstrates using CombineToEnvironment patch to combine managed resource values and store them in the environment config. Combines resource Kind and region into a single environment variable.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineToEnvironment\n      combine:\n        strategy: string\n        variables:\n        - fromFieldPath: kind\n        - fromFieldPath: spec.forProvider.region\n        string:\n          fmt: \"%s.%s\"\n      toFieldPath: key2\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Helm Repository\nDESCRIPTION: Commands to add the Crossplane stable Helm chart repository and update the local repository cache.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Defining Required Fields in Crossplane XRD Schema\nDESCRIPTION: This YAML snippet demonstrates how to define required fields in a Crossplane CompositeResourceDefinition (XRD) schema. It shows an example where 'region' and 'size' are required, while 'name' is optional.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string \n              size:\n                type: string  \n              name:\n                type: string  \n            required: \n              - region \n              - size\n```\n\n----------------------------------------\n\nTITLE: Generating Input Files\nDESCRIPTION: Shell command to generate updated input files after making changes to the input directory structure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Verifying Configuration Installation with kubectl\nDESCRIPTION: This shell command shows how to verify the installation status of a Configuration package using kubectl. It displays the INSTALLED and HEALTHY status of the configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configuration\nNAME               INSTALLED   HEALTHY   PACKAGE                                           AGE\nplatform-ref-aws   True        True      xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0   54s\n```\n\n----------------------------------------\n\nTITLE: Configuring Match Limits and Sorting in EnvironmentConfig Selection\nDESCRIPTION: This snippet shows how to configure match limits (maxMatch) and custom sorting (sortByFieldPath) when selecting multiple EnvironmentConfigs in a Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/environment-configs.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Selector\n          selector:\n            mode: Multiple\n            maxMatch: 4\n            sortByFieldPath: metadata.annotations[sort.by/weight]\n            matchLabels:\n              - key: my-label-key\n                type: Value\n                value: my-label-value\n              - key: my-label-key\n                type: FromCompositeFieldPath\n                valueFromFieldPath: spec.parameters.deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hello World Composition Function in Go\nDESCRIPTION: Simple example of a Composition Function implementation in Go that returns a hello world message.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Function) RunFunction(_ context.Context, req *fnv1.RunFunctionRequest) (*fnv1.RunFunctionResponse, error) {\n        rsp := response.To(req, response.DefaultTTL)\n        response.Normal(rsp, \"Hello world!\")\n        return rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for ARM64 Platform\nDESCRIPTION: This command builds a Crossplane package for the ARM64 platform. It specifies the package root directory, embeds the ARM64 runtime image, and outputs the package file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-arm64 \\\n    --package-file=function-arm64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Patch Example\nDESCRIPTION: Example showing how to create a patch that copies a value from the composite resource to a composed resource's labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: storage-bucket\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: \"us-east-2\"\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.field1\n      toFieldPath: metadata.labels[\"patchLabel\"]\n```\n\n----------------------------------------\n\nTITLE: Exploring Crossplane API Resources with kubectl\nDESCRIPTION: Command to list all Crossplane-related API resources that were created after installation, showing the various Custom Resource Definitions available for use.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources  | grep crossplane\ncompositeresourcedefinitions      xrd,xrds     apiextensions.crossplane.io/v1         false        CompositeResourceDefinition\ncompositionrevisions              comprev      apiextensions.crossplane.io/v1         false        CompositionRevision\ncompositions                      comp         apiextensions.crossplane.io/v1         false        Composition\nenvironmentconfigs                envcfg       apiextensions.crossplane.io/v1alpha1   false        EnvironmentConfig\nusages                                         apiextensions.crossplane.io/v1alpha1   false        Usage\nconfigurationrevisions                         pkg.crossplane.io/v1                   false        ConfigurationRevision\nconfigurations                                 pkg.crossplane.io/v1                   false        Configuration\ncontrollerconfigs                              pkg.crossplane.io/v1alpha1             false        ControllerConfig\ndeploymentruntimeconfigs                       pkg.crossplane.io/v1beta1              false        DeploymentRuntimeConfig\nfunctionrevisions                              pkg.crossplane.io/v1beta1              false        FunctionRevision\nfunctions                                      pkg.crossplane.io/v1beta1              false        Function\nlocks                                          pkg.crossplane.io/v1beta1              false        Lock\nproviderrevisions                              pkg.crossplane.io/v1                   false        ProviderRevision\nproviders                                      pkg.crossplane.io/v1                   false        Provider\nstoreconfigs                                   secrets.crossplane.io/v1alpha1         false        StoreConfig\n```\n\n----------------------------------------\n\nTITLE: Listing Composite Resources in Shell\nDESCRIPTION: Shows how to list composite resources using kubectl command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\nNAME                    SYNCED   READY   COMPOSITION         AGE\nmy-composite-resource   True     True    my-composition      4s\n```\n\n----------------------------------------\n\nTITLE: Excluding ProviderConfigUsage Resources from Argo CD UI (YAML)\nDESCRIPTION: This snippet shows how to exclude `ProviderConfigUsage` resources from the Argo CD UI. This improves the UI's reactivity by reducing the number of resources it has to manage. It involves modifying the `argocd-cm` ConfigMap to include a `resource.exclusions` section.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\nkind: ConfigMap\ndata:\n    resource.exclusions: |\n      - apiGroups:\n        - \\\"*\\\"\n        kinds:\n        - ProviderConfigUsage\"\n```\n\n----------------------------------------\n\nTITLE: LastAsyncOperation ApplyFailure Condition Example in YAML\nDESCRIPTION: Shows the format of a 'LastAsyncOperation' condition with 'ApplyFailure' reason, indicating the Provider failed to apply a setting to the managed resource. The conditions.message would provide more details on what went wrong.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/managed-resources.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  LastAsyncOperation\n  Status:                False\n  Reason:                ApplyFailure\n```\n\n----------------------------------------\n\nTITLE: Vault Kubernetes Auth Configuration\nDESCRIPTION: Commands to configure Kubernetes authentication in Vault, including setting up the auth method and required configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/kubernetes/config \\\n        token_reviewer_jwt=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\n        kubernetes_host=\"https://$KUBERNETES_PORT_443_TCP_ADDR:443\" \\\n        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Describing Destination Managed Resource in Crossplane YAML\nDESCRIPTION: This snippet demonstrates the output of describing a destination managed resource, showing the label secondResource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl describe bucket\nkubectl describe bucket my-example-claim-jp7rx-fttpj\nName:         my-example-claim-jp7rx-fttpj\nLabels:       crossplane.io/composite=my-example-claim-jp7rx\n              secondResource=my-example-claim-jp7rx-gfg4m\n```\n\n----------------------------------------\n\nTITLE: Creating an EnvironmentConfig in Crossplane\nDESCRIPTION: This YAML snippet demonstrates how to create an EnvironmentConfig in Crossplane. It includes the apiVersion, kind, metadata, and data fields, showing various data types that can be stored.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/environment-configs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1beta1\nkind: EnvironmentConfig\nmetadata:\n  name: example-environment\ndata:\n  locations:\n    us: us-east-2\n    eu: eu-north-1\n  key1: value1\n  key2: value2\n  key3:\n    - item1\n    - item2\n```\n\n----------------------------------------\n\nTITLE: Creating Hint Boxes in Hugo\nDESCRIPTION: Demonstrates how to create hint boxes for notes, tips, important messages, and warnings using Hugo shortcodes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/features.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{</* hint \"note\" */>}}\nYour box content. This hint box is a note.\n{{</* /hint */>}}\n```\n\n----------------------------------------\n\nTITLE: Discovering Composition Revisions using kubectl\nDESCRIPTION: This snippet shows how to use kubectl to find all revisions of a Composition named 'example'. It demonstrates listing CompositionRevisions and their details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevision -l crossplane.io/composition-name=example\n```\n\n----------------------------------------\n\nTITLE: Performing Crossplane Helm Installation Dry Run\nDESCRIPTION: Command to perform a dry run of the Crossplane installation using Helm, showing all resources that would be created without actually installing them. This creates the resources in the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--dry-run --debug \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Exclusion for ProviderConfigUsage\nDESCRIPTION: ConfigMap configuration to exclude ProviderConfigUsage resources from Argo CD UI to improve performance.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n    resource.exclusions: |\n      - apiGroups:\n        - \"*\"\n        kinds:\n        - ProviderConfigUsage\n```\n\n----------------------------------------\n\nTITLE: Crossplane Unknown Condition Example\nDESCRIPTION: Shows the condition structure when a provider encounters an unexpected error with a managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Unknown\n  Status:                False\n  Reason:                Unknown\n```\n\n----------------------------------------\n\nTITLE: Setting External Resource Names with Annotations in Crossplane\nDESCRIPTION: This example shows how to use the crossplane.io/external-name annotation on a composite resource to specify a custom name for the external resources instead of using the default random suffix naming.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\n  annotations: \n    crossplane.io/external-name: my-custom-name\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for ARM64\nDESCRIPTION: Builds a Docker runtime image for the linux/arm64 platform using the Dockerfile in the current directory. The image is tagged as runtime-arm64.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/arm64 --tag runtime-arm64\n```\n\n----------------------------------------\n\nTITLE: Validating Resources Against Schema Directory\nDESCRIPTION: This snippet demonstrates how to use 'crossplane beta validate' with a directory of schemas to validate resources. The command processes all YAML files in the directory and validates the specified resources against them.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta validate schema resources.yaml\n[x] schema validation error example.crossplane.io/v1beta1, Kind=XR, example : status.conditions[0].lastTransitionTime: Invalid value: \"null\": status.conditions[0].lastTransitionTime in body must be of type string: \"null\"\n[x] CEL validation error example.crossplane.io/v1beta1, Kind=XR, example : spec: Invalid value: \"object\": no such key: minReplicas evaluating rule: replicas should be greater than or equal to minReplicas.\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-1 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-1 validated successfully\nTotal 5 resources: 0 missing schemas, 4 success cases, 1 failure cases\n```\n\n----------------------------------------\n\nTITLE: Prometheus Annotations for Metrics Exposure\nDESCRIPTION: Kubernetes deployment annotations that expose Crossplane metrics for Prometheus scraping. These annotations specify the metrics path, port, and enable scraping.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.io/path: /metrics\nprometheus.io/port: \"8080\"\nprometheus.io/scrape: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Basic DeploymentRuntimeConfig with Multiple Replicas\nDESCRIPTION: Minimal example showing how to configure multiple replicas for a deployment while satisfying schema validation requirements by including empty selector and template objects.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: multi-replicas\nspec:\n  deploymentTemplate:\n    spec:\n      replicas: 2\n      selector: {}\n      template: {}\n```\n\n----------------------------------------\n\nTITLE: Verifying Configuration Status with kubectl\nDESCRIPTION: This shell command uses kubectl to get the status of installed Configurations. It displays whether the Configuration is installed, healthy, and provides package information.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configuration\nNAME               INSTALLED   HEALTHY   PACKAGE                                           AGE\nplatform-ref-aws   True        True      xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0   54s\n```\n\n----------------------------------------\n\nTITLE: Example Custom API Definition\nDESCRIPTION: Sample YAML showing the structure of a custom NoSQL database API\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.example.com/v1alpha1\nkind: NoSQL\nmetadata:\n  name: my-nosql-database\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Installing DynamoDB Provider\nDESCRIPTION: YAML configuration to install the AWS DynamoDB provider in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-dynamodb\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-dynamodb:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Creating a ConfigMap from CA Bundle for Crossplane\nDESCRIPTION: Command to create a Kubernetes ConfigMap containing the CA bundle certificate file in the Crossplane system namespace. This ConfigMap will be referenced in the Helm chart installation parameters.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/self-signed-ca-certs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n [Crossplane system namespace] create cm ca-bundle-config \\\n--from-file=ca-bundle=./[yourdomain].ca-bundle\n```\n\n----------------------------------------\n\nTITLE: Deleting Composite Resource Definitions\nDESCRIPTION: This command deletes a specific composite resource definition, which will also remove associated composite resources and managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/uninstall.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete xrd compositepostgresqlinstances.database.example.org\n```\n\n----------------------------------------\n\nTITLE: Updating AWS S3 Provider Package in Crossplane\nDESCRIPTION: Command to update an existing AWS S3 provider package to a specific version using the crossplane xpkg update command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg update provider xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Installing the Patch and Transform Function for Crossplane Compositions\nDESCRIPTION: YAML definition to install the function-patch-and-transform package, which is required for the Composition to use the Patch and Transform functionality to map user inputs to resource configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Listing Composite Resources in Shell\nDESCRIPTION: This shell command lists all composite resources created by Crossplane, showing their name, sync status, readiness, associated composition, and age.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\n```\n\n----------------------------------------\n\nTITLE: Trim Prefix Transformation in Crossplane\nDESCRIPTION: Shows how to use TrimPrefix transformation to remove characters from the beginning of a line using Go's TrimPrefix functionality.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"north-1\"]\n    transforms:\n      - type: string\n        string:\n          type: TrimPrefix\n          trim: `eu-\n```\n\n----------------------------------------\n\nTITLE: Match Transform with Literal Pattern\nDESCRIPTION: Example of a match transform using literal string matching to transform field values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n              literal: \"field1-text\"\n              result: \"matchedLiteral\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Composite Resource Definitions\nDESCRIPTION: Command to remove a specific composite resource definition and its associated resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/uninstall.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete xrd compositepostgresqlinstances.database.example.org\n```\n\n----------------------------------------\n\nTITLE: Checking XRD Status in Kubernetes\nDESCRIPTION: Command to verify that the Composite Resource Definition (XRD) has been established and is available in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd\nNAME                                  ESTABLISHED   OFFERED   AGE\nvirtualmachines.compute.example.com   True          True      43s\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Version Requirements in Configuration Package\nDESCRIPTION: Example YAML configuration showing how to use the ignoreCrossplaneConstraints option to bypass Crossplane version requirements when installing a Configuration package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  ignoreCrossplaneConstraints: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider Authentication with ProviderConfig in Crossplane\nDESCRIPTION: This snippet demonstrates how to set up a ProviderConfig for AWS in Crossplane, pointing to a Kubernetes Secret containing AWS credentials. This is used to authenticate provider requests to AWS services.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/multi-tenant.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: cool-aws-creds\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-creds\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Crossplane Custom Settings YAML\nDESCRIPTION: Example YAML file containing custom settings for Crossplane Helm chart installation, including number of replicas and image pull policy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nreplicas: 2\n\nimage:\n  pullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Creating Admin ProviderConfig for AWS in YAML\nDESCRIPTION: This snippet shows how to create a ProviderConfig named 'admin-keys' for AWS, using a different Kubernetes secret for admin authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: admin-keys\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: admin-key\n      key: admin-secret-key\n```\n\n----------------------------------------\n\nTITLE: Basic RunFunction Implementation in Python Crossplane Function\nDESCRIPTION: The initial hello-world template for the RunFunction method that processes a RunFunctionRequest and returns a RunFunctionResponse with a simple message.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def RunFunction(self, req: fnv1.RunFunctionRequest, _: grpc.aio.ServicerContext) -> fnv1.RunFunctionResponse:\n    log = self.log.bind(tag=req.meta.tag)\n    log.info(\"Running function\")\n\n    rsp = response.to(req)\n\n    example = \"\"\n    if \"example\" in req.input:\n        example = req.input[\"example\"]\n\n    # TODO: Add your function logic here!\n    response.normal(rsp, f\"I was run with input {example}!\")\n    log.info(\"I was run!\", input=example)\n\n    return rsp\n```\n\n----------------------------------------\n\nTITLE: Custom Runtime Metadata Configuration in YAML\nDESCRIPTION: Example YAML configuration for customizing metadata of runtime resources including ServiceAccount and Deployment labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: my-runtime-config\nspec:\n  deploymentTemplate:\n    metadata:\n      labels:\n        my-label: my-value\n  serviceAccountTemplate:\n    metadata:\n      name: my-service-account\n```\n\n----------------------------------------\n\nTITLE: Listing Function Project Directory Structure\nDESCRIPTION: Shell commands showing the directory structure of the newly created function project, including the main project directory and function subdirectory.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls function-xbuckets\nDockerfile  example/  function/  LICENSE  package/  pyproject.toml  README.md  renovate.json  tests/\n```\n\nLANGUAGE: shell\nCODE:\n```\nls function/\n__version__.py  fn.py  main.py\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for ARM64 Platform\nDESCRIPTION: Command to build a Crossplane function runtime OCI image for the linux/arm64 platform using Docker. The image is tagged as 'runtime-arm64' and will be used as the runtime for the function package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/arm64 --tag runtime-arm64\n```\n\n----------------------------------------\n\nTITLE: String Transform in Crossplane\nDESCRIPTION: Shows the basic structure of a string transform, which can manipulate string inputs through various operations like format, convert, join, regexp, trimPrefix, and trimSuffix.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"stringAnnotation\"]\n    transforms:\n      - type: string\n        string:\n          type: ...\n```\n\n----------------------------------------\n\nTITLE: Describing ProviderRevisions with kubectl\nDESCRIPTION: This shell command describes the ProviderRevisions, providing detailed information about the revision status, including health, compatibility, and events.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe providerrevisions\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Manager Deployment in Kubernetes YAML\nDESCRIPTION: Kubernetes manifest for the Crossplane RBAC Manager deployment that includes configuration for containers, security contexts, resource limits, and environment variables.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Source: crossplane/templates/rbac-manager-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: crossplane-rbac-manager\n  namespace: default\n  labels:\n    app: crossplane-rbac-manager\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: crossplane-rbac-manager\n      release: crossplane\n  strategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: crossplane-rbac-manager\n        release: crossplane\n        helm.sh/chart: crossplane-1.15.0\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: cloud-infrastructure-controller\n        app.kubernetes.io/part-of: crossplane\n        app.kubernetes.io/name: crossplane\n        app.kubernetes.io/instance: crossplane\n        app.kubernetes.io/version: \"1.15.0\"\n    spec:\n      serviceAccountName: rbac-manager\n      initContainers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - rbac\n        - init\n        imagePullPolicy: IfNotPresent\n        name: crossplane-init\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.cpu\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.memory\n      containers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - rbac\n        - start\n        - --provider-clusterrole=crossplane:allowed-provider-permissions\n        imagePullPolicy: IfNotPresent\n        name: crossplane\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.cpu\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.memory\n          - name: LEADER_ELECTION\n            value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Status Checks for Crossplane Resources\nDESCRIPTION: Define custom health checks for Crossplane resources in Argo CD by modifying the argocd-cm ConfigMap. This includes checks for both upbound.io and crossplane.io resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n  application.resourceTrackingMethod: annotation\n  resource.customizations: |\n    \"*.upbound.io/*\":\n      health.lua: |\n        health_status = {\n          status = \"Progressing\",\n          message = \"Provisioning ...\"\n        }\n\n        local function contains (table, val)\n          for i, v in ipairs(table) do\n            if v == val then\n              return true\n            end\n          end\n          return false\n        end\n\n        local has_no_status = {\n          \"ProviderConfig\",\n          \"ProviderConfigUsage\"\n        }\n\n        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then\n          health_status.status = \"Healthy\"\n          health_status.message = \"Resource is up-to-date.\"\n          return health_status\n        end\n\n        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then\n          if obj.kind == \"ProviderConfig\" and obj.status.users ~= nil then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is in use.\"\n            return health_status\n          end\n          return health_status\n        end\n\n        for i, condition in ipairs(obj.status.conditions) do\n          if condition.type == \"LastAsyncOperation\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Synced\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Ready\" then\n            if condition.status == \"True\" then\n              health_status.status = \"Healthy\"\n              health_status.message = \"Resource is up-to-date.\"\n              return health_status\n            end\n          end\n        end\n\n        return health_status\n\n    \"*.crossplane.io/*\":\n      health.lua: |\n        health_status = {\n          status = \"Progressing\",\n          message = \"Provisioning ...\"\n        }\n\n        local function contains (table, val)\n          for i, v in ipairs(table) do\n            if v == val then\n              return true\n            end\n          end\n          return false\n        end\n\n        local has_no_status = {\n          \"Composition\",\n          \"CompositionRevision\",\n          \"DeploymentRuntimeConfig\",\n          \"ProviderConfig\",\n          \"ProviderConfigUsage\"\n        }\n        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is up-to-date.\"\n          return health_status\n        end\n\n        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then\n          if obj.kind == \"ProviderConfig\" and obj.status.users ~= nil then\n            health_status.status = \"Healthy\"\n            health_status.message = \"Resource is in use.\"\n            return health_status\n          end\n          return health_status\n        end\n\n        for i, condition in ipairs(obj.status.conditions) do\n          if condition.type == \"LastAsyncOperation\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if condition.type == \"Synced\" then\n            if condition.status == \"False\" then\n              health_status.status = \"Degraded\"\n              health_status.message = condition.message\n              return health_status\n            end\n          end\n\n          if contains({\"Ready\", \"Healthy\", \"Offered\", \"Established\"}, condition.type) then\n            if condition.status == \"True\" then\n              health_status.status = \"Healthy\"\n              health_status.message = \"Resource is up-to-date.\"\n              return health_status\n            end\n          end\n        end\n\n        return health_status\n```\n\n----------------------------------------\n\nTITLE: Pausing Crossplane Controller\nDESCRIPTION: Command to scale down the Crossplane deployment to zero replicas, effectively pausing Crossplane operations without deleting resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/troubleshoot-crossplane.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system scale --replicas=0 deployment/crossplane\n```\n\n----------------------------------------\n\nTITLE: Verifying Namespace Removal\nDESCRIPTION: This command lists all namespaces to verify that the crossplane-system namespace has been removed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/uninstall.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get namespace\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Crossplane Guides Documentation\nDESCRIPTION: YAML frontmatter block that defines metadata for the Crossplane guides documentation section, including title, weight for ordering, and description.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Guides\nweight: 100\ndescription: Crossplane integrations and detailed examples.\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal\nDESCRIPTION: Azure CLI command to create a service principal with Owner role for authenticating Crossplane with Azure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\naz ad sp create-for-rbac \\\n--sdk-auth \\\n--role Owner \\\n--scopes /subscriptions/$@<subscription_id>$@\n```\n\n----------------------------------------\n\nTITLE: Reference Composition in Crossplane YAML\nDESCRIPTION: This YAML snippet presents a reference composition configuration in Crossplane that includes the definition of resources and their environments, including their base configurations and key specifications related to patching and transformations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  compositeTypeRef:\n    apiVersion: example.org/v1alpha1\n    kind: xExample\n  environment:\n    environmentConfigs:\n    - ref:\n        name: example-environment\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n      - name: bucket1\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: us-east-2\n      - name: bucket2\n        base:\n          apiVersion: s3.aws.upbound.io/v1beta1\n          kind: Bucket\n          spec:\n            forProvider:\n              region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Cloning the Crossplane Documentation Repository\nDESCRIPTION: Command to clone the Crossplane documentation repository from GitHub to your local machine for development and testing.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/contribute.md#2025-04-21_snippet_0\n\nLANGUAGE: command\nCODE:\n```\ngit clone https://github.com/crossplane/docs.git\n```\n\n----------------------------------------\n\nTITLE: YAML Code Block With Language Hint\nDESCRIPTION: Demonstrates a YAML code block with the `yaml` language hint, ensuring correct syntax highlighting and improved readability. All code blocks should include a language definition on the same line as the backticks.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xpostgresqlinstances.database.example.org\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Composite Resource Definitions\nDESCRIPTION: This command lists all installed composite resource definitions (XRDs) in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/uninstall.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Helm\nDESCRIPTION: Commands to create Crossplane namespace and install Crossplane using Helm chart\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nkubectl create namespace crossplane-system\n\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n\nhelm install crossplane --namespace crossplane-system crossplane-stable/crossplane\n```\n\n----------------------------------------\n\nTITLE: Verifying Namespace Removal\nDESCRIPTION: Command to verify that the Crossplane namespace has been successfully removed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/uninstall.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get namespace\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Crossplane Guides Page in Markdown\nDESCRIPTION: This code snippet defines the frontmatter for a markdown file, specifying the title, weight, and description for a page about Crossplane guides. The frontmatter is used by static site generators to set page metadata.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Guides\nweight: 100\ndescription: Crossplane integrations and detailed examples.\n---\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Pod Removal\nDESCRIPTION: Command to verify that all Crossplane pods have been removed from the crossplane-system namespace after Helm uninstallation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/uninstall-crossplane.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Viewing Managed Resource Connection Secret Details\nDESCRIPTION: Retrieves and displays the contents of the managed resource connection secret, including private key, public key, and service account details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -i vault-0 -- vault kv get /secret/crossplane-system/ess-mr-conn\n```\n\n----------------------------------------\n\nTITLE: Logging out from Package Registry with xpkg logout\nDESCRIPTION: The xpkg logout command invalidates the current xpkg login session by removing the session from the configuration file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg logout\n```\n\n----------------------------------------\n\nTITLE: Viewing Composite Resource Secret After Applying a Claim\nDESCRIPTION: This shell command demonstrates how to view the composite resource secret object created after applying a Claim. It shows the secret keys stored based on the connectionDetails specified in the Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret -n other-namespace\nName:         b0dc71f8-2688-4ebc-818a-bbad6a2c4f9a\nNamespace:    other-namespace\n\nType:  connection.crossplane.io/v1alpha1\n\nData\n====\nusername:                        20 bytes\nattribute.secret:                40 bytes\nattribute.ses_smtp_password_v4:  44 bytes\npassword:                        40 bytes\n```\n\n----------------------------------------\n\nTITLE: Describing Crossplane ClusterRole with Kubectl\nDESCRIPTION: This command is used to view the full RBAC policy of a Crossplane ClusterRole. Replace `crossplane-admin`, `crossplane-edit`, `crossplane-view` or `crossplane-browse` with the desired ClusterRole to inspect.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/pods.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"kubectl describe clusterrole crossplane-admin\"\n```\n\n----------------------------------------\n\nTITLE: Example Virtual Machine API Definition\nDESCRIPTION: Sample YAML showing the structure of a custom Virtual Machine API.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: compute.example.com/v1alpha1\nkind: VirtualMachine\nmetadata:\n  name: my-vm\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Getting a Claim\nDESCRIPTION: This shell command retrieves the list of Claims within a specified namespace (crossplane-test in this case). It displays the names, sync status, ready status, and connection secret associated with the Claims.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get claim -n crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Running a Crossplane Function in Development Mode\nDESCRIPTION: Command to run a Crossplane function locally in development mode using Hatch. This allows testing the function without deploying it to a Crossplane control plane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nhatch run development\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Admin Permissions\nDESCRIPTION: Specifies the detailed permissions for Crossplane administrators, including access to events, secrets, namespaces, and core Crossplane resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane:aggregate-to-admin\nrules:\n- apiGroups: [\"\"]\n  resources: [events]\n  verbs: [get, list, watch]\n- apiGroups: [\"\"]\n  resources: [secrets, namespaces]\n  verbs: [\"*\"]\n```\n\n----------------------------------------\n\nTITLE: Match Transform with Input Fallback\nDESCRIPTION: Demonstrates using the original input as fallback when no match is found.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n              literal: \"UnknownString\"\n              result: \"foundField1\"\n          fallbackTo: Input\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition Schema Aware Validation Mode in YAML\nDESCRIPTION: This YAML snippet shows how to set the schema aware validation mode for a Composition using the 'crossplane.io/composition-schema-aware-validation-mode' annotation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/compositions.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  annotations:\n    crossplane.io/composition-schema-aware-validation-mode: loose\n  # Removed for brevity\nspec:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Matching False Boolean in Crossplane Composition (YAML)\nDESCRIPTION: This snippet demonstrates the MatchFalse readiness check, which considers the resource ready when a specified field in the resource has a value of false. It checks the status.atProvider.manifest.status.pending field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchFalse\n      fieldPath: status.atProvider.manifest.status.pending\n```\n\n----------------------------------------\n\nTITLE: Defining a Crossplane Function for Development\nDESCRIPTION: This YAML snippet defines a Crossplane Function for use with the development runtime, allowing local testing with the Crossplane CLI.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-xbuckets\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  # The CLI ignores this package when using the Development runtime.\n  # You can set it to any value.\n  package: xpkg.crossplane.io/negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining XBuckets Composite Resource in YAML\nDESCRIPTION: YAML definition of an XBuckets composite resource (XR) that specifies a region and an array of bucket names for AWS S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Math Transform Basic Structure\nDESCRIPTION: Basic structure for math transforms that support integer operations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.numberField\n    toFieldPath: metadata.annotations[\"mathAnnotation\"]\n    transforms:\n      - type: math\n        math:\n          ...\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Pod Removal\nDESCRIPTION: Command to verify that all Crossplane pods have been removed from the system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/uninstall.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Listing the Generated Function Directory Contents\nDESCRIPTION: This command shows the directory structure created by the template initialization process, including the main function files, Docker configuration, and package metadata.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls function-xbuckets\nDockerfile  example/  function/  LICENSE  package/  pyproject.toml  README.md  renovate.json  tests/\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Custom Image Pull Policy\nDESCRIPTION: Example of using helm install command to set a custom image pull policy for Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n--set image.pullPolicy=Always\n```\n\n----------------------------------------\n\nTITLE: Defining a Namespaced Managed Resource (MR) in Crossplane v2\nDESCRIPTION: YAML configuration for a namespaced AWS S3 Bucket managed resource, showing how namespaced MRs work in Crossplane v2 with generateName for unique resource naming.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/whats-new/_index.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.m.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  namespace: default\n  generateName: my-bucket\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Provider Settings\nDESCRIPTION: YAML configuration for setting up GCP provider with project ID and credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gcp.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  projectID: $@<PROJECT_ID>$@\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: gcp-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Usage with Resolved Selectors\nDESCRIPTION: YAML showing the state of Usage resource after selectors have been resolved to specific resource references.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/usages.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: protection.crossplane.io/v1beta1\nkind: Usage\nmetadata:\n  namespace: default\n  name: release-uses-cluster\nspec:\n  of:\n    apiVersion: eks.m.upbound.io/v1beta1\n    kind: Cluster\n    resourceRef:\n       name: my-cluster\n    resourceSelector:\n      matchLabels:\n        foo: bar\n  by:\n    apiVersion: helm.m.crossplane.io/v1beta1\n    kind: Release\n    resourceRef:\n       name: my-cluster\n    resourceSelector:\n       matchLabels:\n          baz: qux\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Labels - Shell\nDESCRIPTION: This shell command example shows how Crossplane adds the 'crossplane.io/composite' label to composite resources, illustrating the relationships with the owned managed resources. It demonstrates how to describe a claimed composite resource to view its labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe xmydatabase.example.org/my-claimed-database-x9rx9\nName:         my-claimed-database2-x9rx9\nNamespace:\nLabels:       crossplane.io/composite=my-claimed-database-x9rx9\n```\n\n----------------------------------------\n\nTITLE: Logging into Vault CLI\nDESCRIPTION: Authenticates to the Vault CLI using the root token from initialization.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nvault login # use the root token from above\n```\n\n----------------------------------------\n\nTITLE: Creating XR with Composition Revision Selector for Dev Channel\nDESCRIPTION: Defines a MyVPC Composite Resource with a composition revision selector targeting the dev channel\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind:  MyVPC\nmetadata:\n  name: vpc-dev\nspec:\n  id: vpc-dev\n  compositionRevisionSelector:\n    matchLabels:\n      channel: dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Unit Tests for Crossplane Function in Python\nDESCRIPTION: This code snippet shows the implementation of unit tests for a Crossplane function using Python's unittest module. It includes a test case for composing two S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dataclasses\nimport unittest\n\nfrom crossplane.function import logging, resource\nfrom crossplane.function.proto.v1 import run_function_pb2 as fnv1\nfrom google.protobuf import duration_pb2 as durationpb\nfrom google.protobuf import json_format\nfrom google.protobuf import struct_pb2 as structpb\n\nfrom function import fn\n\n\nclass TestFunctionRunner(unittest.IsolatedAsyncioTestCase):\n    def setUp(self) -> None:\n        logging.configure(level=logging.Level.DISABLED)\n        self.maxDiff = 2000\n\n    async def test_run_function(self) -> None:\n        @dataclasses.dataclass\n        class TestCase:\n            reason: str\n            req: fnv1.RunFunctionRequest\n            want: fnv1.RunFunctionResponse\n\n        cases = [\n            TestCase(\n                reason=\"The function should compose two S3 buckets.\",\n                req=fnv1.RunFunctionRequest(\n                    observed=fnv1.State(\n                        composite=fnv1.Resource(\n                            resource=resource.dict_to_struct(\n                                {\n                                    \"apiVersion\": \"example.crossplane.io/v1alpha1\",\n                                    \"kind\": \"XBuckets\",\n                                    \"metadata\": {\"name\": \"test\"},\n                                    \"spec\": {\n                                        \"region\": \"us-east-2\",\n                                        \"names\": [\"test-bucket-a\", \"test-bucket-b\"],\n                                    },\n                                }\n                            )\n                        )\n                    )\n                ),\n                want=fnv1.RunFunctionResponse(\n                    meta=fnv1.ResponseMeta(ttl=durationpb.Duration(seconds=60)),\n                    desired=fnv1.State(\n                        resources={\n                            \"xbuckets-test-bucket-a\": fnv1.Resource(\n                                resource=resource.dict_to_struct(\n                                    {\n                                        \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                                        \"kind\": \"Bucket\",\n                                        \"metadata\": {\n                                            \"annotations\": {\n                                                \"crossplane.io/external-name\": \"test-bucket-a\"\n                                            },\n                                        },\n                                        \"spec\": {\n                                            \"forProvider\": {\"region\": \"us-east-2\"}\n                                        },\n                                    }\n                                )\n                            ),\n                            \"xbuckets-test-bucket-b\": fnv1.Resource(\n                                resource=resource.dict_to_struct(\n                                    {\n                                        \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                                        \"kind\": \"Bucket\",\n                                        \"metadata\": {\n                                            \"annotations\": {\n                                                \"crossplane.io/external-name\": \"test-bucket-b\"\n                                            },\n                                        },\n                                        \"spec\": {\n                                            \"forProvider\": {\"region\": \"us-east-2\"}\n                                        },\n                                    }\n                                )\n                            ),\n                        },\n                    ),\n                    context=structpb.Struct(),\n                ),\n            ),\n        ]\n\n        runner = fn.FunctionRunner()\n\n        for case in cases:\n            got = await runner.RunFunction(case.req, None)\n            self.assertEqual(\n                json_format.MessageToDict(got),\n                json_format.MessageToDict(case.want),\n                \"-want, +got\",\n            )\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Composition Function Communication Flow Diagram\nDESCRIPTION: Mermaid sequence diagram showing the communication flow between User, API Server, Crossplane Pod, and Function Pod during composition function execution.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/compositions.md#2025-04-21_snippet_15\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    User->>+API Server: Create composite resource\n    Crossplane Pod->>+API Server: Observe composite resource\n    Crossplane Pod->>+Function Pod: gRPC RunFunctionRequest\n    Function Pod->>+Crossplane Pod: gRPC RunFunctionResponse\n    loop Extra resources needed?\n      Crossplane Pod->>+API Server: Get Extra resources\n      Crossplane Pod->>+Function Pod: gRPC RunFunctionRequest\n      Function Pod->>+Crossplane Pod: gRPC RunFunctionResponse\n    end\n    Crossplane Pod->>+API Server: Apply desired composed resources\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane RBAC Manager ClusterRoleBinding\nDESCRIPTION: Defines RBAC configuration binding the crossplane-rbac-manager role to the rbac-manager service account.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: crossplane-rbac-manager\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: crossplane-rbac-manager\nsubjects:\n- kind: ServiceAccount\n  name: rbac-manager\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Configuring ClusterRoleBinding for Crossplane RBAC Manager in Kubernetes YAML\nDESCRIPTION: This snippet defines a ClusterRoleBinding for the Crossplane RBAC manager. It binds the 'crossplane-rbac-manager' ClusterRole to the 'rbac-manager' ServiceAccount in the default namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: crossplane-rbac-manager\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: crossplane-rbac-manager\nsubjects:\n- kind: ServiceAccount\n  name: rbac-manager\n  namespace: default\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Configuration for CA Bundle\nDESCRIPTION: YAML configuration block showing how to set registry CA bundle configuration parameters in a Helm override file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/self-signed-ca-certs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  registryCaBundleConfig:\n    name: ca-bundle-config\n    key: ca-bundle\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane View RBAC Policy\nDESCRIPTION: Command to view the full RBAC policy for the crossplane-view ClusterRole using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/pods.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-view\n```\n\n----------------------------------------\n\nTITLE: Unsealing Vault Instance\nDESCRIPTION: Commands to initialize and unseal the Vault instance using operator commands\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nkubectl exec vault-0 -- vault operator init -key-shares=1 -key-threshold=1 -format=json > cluster-keys.json\nVAULT_UNSEAL_KEY=$(cat cluster-keys.json | jq -r \".unseal_keys_b64[]\")\nkubectl exec vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY\n```\n\n----------------------------------------\n\nTITLE: Initializing a Python Function Template for Crossplane\nDESCRIPTION: Command to initialize a new composition function using the Crossplane CLI, which creates a template from a GitHub repository.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg init function-xbuckets https://github.com/crossplane/function-template-python -d function-xbuckets\nInitialized package \"function-xbuckets\" in directory \"/home/negz/control/negz/function-xbuckets\" from https://github.com/crossplane/function-template-python/tree/bfed6923ab4c8e7adeed70f41138645fc7d38111 (main)\n```\n\n----------------------------------------\n\nTITLE: String Convert Transform in Crossplane\nDESCRIPTION: Demonstrates how to convert strings using operations like ToUpper, ToLower, ToBase64, FromBase64, ToJson, and various hash functions in Crossplane's string transform.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"FIELD1-TEXT\"]\n    transforms:\n      - type: string\n        string:\n          type: Convert\n          convert: \"ToUpper\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Secrets for Claims in Crossplane\nDESCRIPTION: This YAML snippet shows how to configure a Claim to write connection secrets to a specified Kubernetes Secret. The writeConnectionSecretToRef field defines the name of the secret object where Crossplane will save the connection details in the same namespace as the Claim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/claims.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: database\nmetadata:\n  name: my-claimed-database\nspec:\n  writeConnectionSecretToRef:\n    name: my-claim-secret\n```\n\n----------------------------------------\n\nTITLE: Go Editable Fields Shortcode\nDESCRIPTION: Illustrates wrapping a code block in the `editCode` shortcode to enable editable fields.  Any element wrapped in `$@` markers becomes editable.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n{{</* editCode */>}}\n```ini {copy-lines=\"all\"}\n[default]\naws_access_key_id = $@<aws_access_key>$@\naws_secret_access_key = $@<aws_secret_key>$@\n```\n{{</* /editCode */>}}\n```\n\n----------------------------------------\n\nTITLE: Viewing Remaining Managed Resources\nDESCRIPTION: Command to check for any remaining managed resources after XRD deletion.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/uninstall.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete bucket.s3.aws.upbound.io/crossplane-bucket-867737b10\n```\n\n----------------------------------------\n\nTITLE: Installing Vault with Helm\nDESCRIPTION: Commands to add Hashicorp Helm repo and install Vault\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add hashicorp https://helm.releases.hashicorp.com\nhelm install vault hashicorp/vault\n```\n\n----------------------------------------\n\nTITLE: Verifying Provider Installation Status\nDESCRIPTION: Shell command and output showing the status of installed Azure providers in the Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\nNAME                                       INSTALLED   HEALTHY   PACKAGE                                                                AGE\ncrossplane-contrib-provider-family-azure   True        True      xpkg.crossplane.io/crossplane-contrib/provider-family-azure:v1.11.2    2m18s\nprovider-azure-network                     True        True      xpkg.crossplane.io/crossplane-contrib/provider-azure-network:v1.11.2   2m23s\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for ARM64 Platform\nDESCRIPTION: This command builds a Docker runtime image for the linux/arm64 platform and tags it as 'runtime-arm64'. The --quiet flag reduces output verbosity, returning only the image ID.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/arm64 --tag runtime-arm64\n```\n\n----------------------------------------\n\nTITLE: Installing Vault with Helm\nDESCRIPTION: Installs Vault in the vault-system namespace using Helm.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm -n vault-system upgrade --install vault hashicorp/vault --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Network Provider in Kubernetes\nDESCRIPTION: Kubernetes configuration to install the Azure Network resource provider using Crossplane Provider custom resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-azure.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-azure-network\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-azure-network:v1.11.2\n```\n\n----------------------------------------\n\nTITLE: Listing Crossplane-Generated Secrets\nDESCRIPTION: This shell command lists all secrets across all namespaces, showing the results of Crossplane's secret creation process. It displays the Claim's secret, individual resource secrets, and the combined secret in their respective namespaces.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/connection-details.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n kubectl get secret -A\nNAMESPACE           NAME                                   TYPE                                DATA   AGE\ndefault             my-access-key-secret                   connection.crossplane.io/v1alpha1   8      29m\ndocs                key1                                   connection.crossplane.io/v1alpha1   4      31m\ndocs                key2                                   connection.crossplane.io/v1alpha1   4      31m\nother-namespace     b0dc71f8-2688-4ebc-818a-bbad6a2c4f9a   connection.crossplane.io/v1alpha1   8      31m\n```\n\n----------------------------------------\n\nTITLE: Example Front Matter for Crossplane Documentation Pages\nDESCRIPTION: YAML front matter example for Crossplane documentation pages. The front matter defines metadata like title and weight, which determines the page's position in the table of contents.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/contribute.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"A New Page\"\nweight: 610\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Crossplane Providers\nDESCRIPTION: Shell command to verify the installation of all required Azure providers, including the family provider, compute provider, and network provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Defining AWS IAM AccessKey for Validation\nDESCRIPTION: YAML definition of an AWS IAM AccessKey managed resource to be validated against the provider schema.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: iam.aws.upbound.io/v1beta1\nkind: AccessKey\nmetadata:\n  name: sample-access-key-0\nspec:\n  forProvider:\n    userSelector:\n      matchLabels:\n        example-name: test-user-0\n```\n\n----------------------------------------\n\nTITLE: Configuring Deletion Protection Usage\nDESCRIPTION: YAML configuration for protecting a database resource from deletion using a Usage resource with a reason field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/usages.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1alpha1\nkind: Usage\nmetadata:\n  name: protect-production-database\nspec:\n  of:\n    apiVersion: rds.aws.upbound.io/v1beta1\n    kind: Instance\n    resourceRef:\n      name: my-database\n  reason: \"Production Database - should never be deleted!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Deployment in Kubernetes YAML\nDESCRIPTION: This snippet defines the main Deployment for Crossplane. It includes init containers, main container configuration, volume mounts, and various environment variables for Crossplane operation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: crossplane\n  namespace: default\n  labels:\n    app: crossplane\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: crossplane\n      release: crossplane\n  strategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: crossplane\n        release: crossplane\n        helm.sh/chart: crossplane-1.15.0\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: cloud-infrastructure-controller\n        app.kubernetes.io/part-of: crossplane\n        app.kubernetes.io/name: crossplane\n        app.kubernetes.io/instance: crossplane\n        app.kubernetes.io/version: \"1.15.0\"\n    spec:\n      serviceAccountName: crossplane\n      hostNetwork: false\n      initContainers:\n        - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n          args:\n          - core\n          - init\n          imagePullPolicy: IfNotPresent\n          name: crossplane-init\n          resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n          env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.cpu\n                divisor: \"1\"\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane-init\n                resource: limits.memory\n                divisor: \"1\"\n          - name: POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: POD_SERVICE_ACCOUNT\n            valueFrom:\n              fieldRef:\n                fieldPath: spec.serviceAccountName\n          - name: \"WEBHOOK_SERVICE_NAME\"\n            value: crossplane-webhooks\n          - name: \"WEBHOOK_SERVICE_NAMESPACE\"\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: \"WEBHOOK_SERVICE_PORT\"\n            value: \"9443\"\n          - name: \"TLS_CA_SECRET_NAME\"\n            value: crossplane-root-ca\n          - name: \"TLS_SERVER_SECRET_NAME\"\n            value: crossplane-tls-server\n          - name: \"TLS_CLIENT_SECRET_NAME\"\n            value: crossplane-tls-client\n      containers:\n      - image: \"xpkg.crossplane.io/crossplane/crossplane:v1.15.0\"\n        args:\n        - core\n        - start\n        imagePullPolicy: IfNotPresent\n        name: crossplane\n        resources:\n            limits:\n              cpu: 100m\n              memory: 512Mi\n            requests:\n              cpu: 100m\n              memory: 256Mi\n        startupProbe:\n          failureThreshold: 30\n          periodSeconds: 2\n          tcpSocket:\n            port: readyz\n        ports:\n        - name: readyz\n          containerPort: 8081\n        - name: webhooks\n          containerPort: 9443\n        securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsGroup: 65532\n            runAsUser: 65532\n        env:\n          - name: GOMAXPROCS\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.cpu\n                divisor: \"1\"\n          - name: GOMEMLIMIT\n            valueFrom:\n              resourceFieldRef:\n                containerName: crossplane\n                resource: limits.memory\n                divisor: \"1\"\n          - name: POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: POD_SERVICE_ACCOUNT\n            valueFrom:\n              fieldRef:\n                fieldPath: spec.serviceAccountName\n          - name: LEADER_ELECTION\n            value: \"true\"\n          - name: \"TLS_SERVER_SECRET_NAME\"\n            value: crossplane-tls-server\n          - name: \"TLS_SERVER_CERTS_DIR\"\n            value: /tls/server\n          - name: \"TLS_CLIENT_SECRET_NAME\"\n            value: crossplane-tls-client\n          - name: \"TLS_CLIENT_CERTS_DIR\"\n            value: /tls/client\n        volumeMounts:\n          - mountPath: /cache\n            name: package-cache\n          - mountPath: /tls/server\n            name: tls-server-certs\n          - mountPath: /tls/client\n            name: tls-client-certs\n      volumes:\n      - name: package-cache\n        emptyDir:\n          medium:\n          sizeLimit: 20Mi\n      - name: tls-server-certs\n        secret:\n          secretName: crossplane-tls-server\n      - name: tls-client-certs\n        secret:\n          secretName: crossplane-tls-client\n```\n\n----------------------------------------\n\nTITLE: Adding Vault Helm Repository\nDESCRIPTION: Adds the Hashicorp Helm repository to install Vault from official sources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add hashicorp https://helm.releases.hashicorp.com --force-update\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Provider in Crossplane with Vault-injected Credentials\nDESCRIPTION: Creates a ProviderConfig for GCP that specifies how to use the credentials injected by Vault. It references the filesystem path where Vault injects the credentials and specifies the GCP project ID.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\necho \"apiVersion: gcp.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  projectID: ${PROJECT_ID}\n  credentials:\n    source: Filesystem\n    fs:\n      path: /vault/secrets/creds.txt\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Multiplication in Crossplane Math Transform\nDESCRIPTION: Demonstrates how to multiply a numeric input value by a specified factor using the multiply math transform. This example multiplies the input by 2.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.numberField\n    toFieldPath: metadata.annotations[\"mathAnnotation\"]\n    transforms:\n      - type: math\n        math:\n          type: multiply\n          multiply: 2\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Webhooks Service\nDESCRIPTION: Kubernetes service definition for Crossplane webhooks exposing port 9443.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: crossplane-webhooks\n  namespace: default\n  labels:\n    app: crossplane\n    release: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nspec:\n  selector:\n    app: crossplane\n    release: crossplane\n  ports:\n  - protocol: TCP\n    port: 9443\n    targetPort: 9443\n```\n\n----------------------------------------\n\nTITLE: Deleting the Crossplane Namespace\nDESCRIPTION: Command to remove the crossplane-system namespace after Crossplane has been uninstalled. This is necessary because Helm doesn't automatically remove the namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/uninstall.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete namespace crossplane-system\n```\n\n----------------------------------------\n\nTITLE: YAML Static Line Highlighting with Range\nDESCRIPTION: Shows how to highlight a continuous block of lines in a YAML code block using a range in quotes with the `hl_lines` parameter. This example highlights lines 1 to 4.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {hl_lines=1}\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: aProvider\n```\n```\n\n----------------------------------------\n\nTITLE: Unhealthy Package Revision Status YAML\nDESCRIPTION: YAML configuration showing the status of a failed Provider Package Revision installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: Healthy\nStatus: False\nReason: UnhealthyPackageRevision\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vault Unseal Key\nDESCRIPTION: Initializes Vault and retrieves the unseal key.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec vault-0 -- vault operator init -key-shares=1 -key-threshold=1 -format=json > cluster-keys.json\nVAULT_UNSEAL_KEY=$(cat cluster-keys.json | jq -r \".unseal_keys_b64[]\")\n```\n\n----------------------------------------\n\nTITLE: Adding Vault Helm Repository\nDESCRIPTION: Adds the Hashicorp Helm repository to install Vault.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add hashicorp https://helm.releases.hashicorp.com --force-update\n```\n\n----------------------------------------\n\nTITLE: Installing a Crossplane Configuration\nDESCRIPTION: This YAML snippet demonstrates how to install a Crossplane Configuration using the `Configuration` object. The `spec.package` field specifies the location of the configuration package in a container registry. The example shows installing the `configuration-quickstart` package from `xpkg.crossplane.io`.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: configuration-quickstart\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Visualizing Traditional Kubernetes Controller Flow\nDESCRIPTION: This diagram illustrates the traditional flow of a custom Kubernetes controller, where a user interacts with a custom API, and the controller watches for changes and creates corresponding Deployment and Service resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/whats-crossplane/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nuser(User)\n\nsubgraph control [Control Plane]\n  api(App API)\n  controller[Your App Controller]\n  deployment(Deployment API)\n  service(Service API)\nend\n\nuser -- create --> api\ncontroller watch@<-- watch --> api\ncontroller -- create --> deployment\ncontroller -- create --> service\n\nwatch@{animate: true}\n```\n\n----------------------------------------\n\nTITLE: Upjet AsyncOperation Finished Status\nDESCRIPTION: Example of the Finished status for completed asynchronous operations in Upjet-based providers.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  AsyncOperation\n  Status:                True\n  Reason:                Finished\n```\n\n----------------------------------------\n\nTITLE: Displaying UnknownPackageRevisionHealth Status in YAML\nDESCRIPTION: Illustrates the YAML representation of an UnknownPackageRevisionHealth status for a Crossplane Provider Package. This indicates an unknown status, possibly during installation or due to an issue.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: Healthy\nStatus: Unknown\nReason: UnknownPackageRevisionHealth\n```\n\n----------------------------------------\n\nTITLE: Querying Crossplane Composite Resource Labels in Shell\nDESCRIPTION: Demonstrates how to inspect a Crossplane composite resource using kubectl to view the automatically applied crossplane.io/composite label that links composed resources to their parent composite.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe mydatabase.example.org/my-database-x9rx9\nName:         my-database2-x9rx9\nNamespace:    default\nLabels:       crossplane.io/composite=my-database-x9rx9\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests for Crossplane Functions\nDESCRIPTION: Shell command to run unit tests for a Crossplane composition function with verbose output and coverage reporting.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v -cover .\n=== RUN   TestRunFunction\n=== RUN   TestRunFunction/AddTwoBuckets\n--- PASS: TestRunFunction (0.00s)\n    --- PASS: TestRunFunction/AddTwoBuckets (0.00s)\nPASS\ncoverage: 52.6% of statements\nok      github.com/negz/function-xbuckets       0.016s  coverage: 52.6% of statements\n```\n\n----------------------------------------\n\nTITLE: Using None Type for Immediate Resource Readiness in Crossplane\nDESCRIPTION: Shows how to use the None readiness check type, which considers a composed resource ready as soon as it's created without waiting for any other conditions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: None\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Tracking Method in Argo CD ConfigMap\nDESCRIPTION: Configures Argo CD to use annotation-based resource tracking for Crossplane compatibility\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n  application.resourceTrackingMethod: annotation\n```\n\n----------------------------------------\n\nTITLE: Listing Generated Function Files\nDESCRIPTION: Shell command showing the directory structure created by the function template initialization.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nls function-xbuckets\nDockerfile    LICENSE       NOTES.txt     README.md     example       fn.go         fn_test.go    go.mod        go.sum        init.sh       input         main.go       package       renovate.json\n```\n\n----------------------------------------\n\nTITLE: Editing Crossplane Deployment with Kubectl\nDESCRIPTION: This command is used to edit the Crossplane deployment in the `crossplane-system` namespace. Editing the deployment allows for changing pod settings such as arguments and environment variables. Updating the deployment triggers a restart of the Crossplane pod.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/pods.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"kubectl edit deployment crossplane --namespace crossplane-system\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Crossplane Claim\nDESCRIPTION: Removes the Crossplane claim which automatically deletes associated managed resources and Vault secrets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete claim my-ess\n```\n\n----------------------------------------\n\nTITLE: Selecting EnvironmentConfig by Name Reference\nDESCRIPTION: Example of selecting an EnvironmentConfig by exact name using Reference type.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/environment-configs.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Reference\n          ref:\n            name: example-environment\n```\n\n----------------------------------------\n\nTITLE: Implementing MatchString Readiness Check in Crossplane Composition YAML\nDESCRIPTION: This example shows how to use the 'MatchString' type for a readiness check in a Crossplane Composition. It checks if a specific field in the resource matches an exact string value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchString\n      fieldPath: status.atProvider.state\n      matchString: \"Online\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Exclusion in Argo CD\nDESCRIPTION: Sets up resource exclusion in Argo CD to hide ProviderConfigUsage resources from the UI, improving performance and reducing clutter.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n    resource.exclusions: |\n      - apiGroups:\n        - \"*\"\n        kinds:\n        - ProviderConfigUsage\n```\n\n----------------------------------------\n\nTITLE: Markdown Fenced Code Block Example\nDESCRIPTION: Demonstrates the basic structure of a fenced code block in Markdown using three backticks. Fenced code blocks are used for command examples and outputs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nthis is a code block\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying Namespace Removal\nDESCRIPTION: Command to verify that the crossplane-system namespace has been successfully removed, completing the Crossplane uninstallation process.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/uninstall-crossplane.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get namespace\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Crossplane with Helm\nDESCRIPTION: This command uninstalls the Crossplane deployment using Helm.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/uninstall.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm uninstall crossplane --namespace crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Rendering Composition Output with Crossplane CLI\nDESCRIPTION: Command to preview the output of a Composition using the Crossplane CLI's render command. This calls the locally running function and displays the resulting resource definitions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Hiding Package Revisions in CLI Output\nDESCRIPTION: This command demonstrates how to hide all package revisions when using the beta trace command, showing only the main packages without their revision details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-revisions none\n```\n\n----------------------------------------\n\nTITLE: Creating Expandable Content Block in Hugo\nDESCRIPTION: Shows how to create expandable content sections using Hugo's expand shortcode to hide verbose content.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/features.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{</* expand \"A large XRD\" */>}}\n```yaml\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xpostgresqlinstances.database.example.org\n```\n{{</* /expand */>}}\n```\n\n----------------------------------------\n\nTITLE: Storing GCP Credentials in Vault\nDESCRIPTION: Commands to copy GCP credentials into the Vault container, enable the KV secrets engine, and store the credentials in Vault.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-injection.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nkubectl cp creds.json vault-0:/tmp/creds.json\n\nkubectl exec -it vault-0 -- /bin/sh\n\nvault secrets enable -path=secret kv-v2\n\nvault kv put secret/provider-creds/gcp-default @tmp/creds.json\n\nrm tmp/creds.json\n```\n\n----------------------------------------\n\nTITLE: Merge Policy Configuration for ToFieldPath\nDESCRIPTION: Demonstrates how to configure merge policies for toFieldPath to control how arrays and objects are merged during patching.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    policy:\n      toFieldPath: MergeObjectsAppendArrays\n```\n\n----------------------------------------\n\nTITLE: Listing Vault Secrets in Crossplane System Namespace\nDESCRIPTION: Lists the secrets stored in Vault under the crossplane-system namespace path, showing managed resource connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -i vault-0 -- vault kv list /secret/crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Building JavaScript with NPM\nDESCRIPTION: This snippet details how to build the JavaScript files using NPM. It offers two build options: `npm run dev` for development and `npm run prod` for production. The production build optimizes the JavaScript for performance.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/infrastructure.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run prod\n\n> prod\n> webpack --mode=production\n\nassets by status 80.9 KiB [cached] 1 asset\nasset ../../data/assets.json 158 bytes [compared for emit]\norphan modules 180 KiB [orphan] 81 modules\nruntime modules 670 bytes 3 modules\ncacheable modules 223 KiB\n  modules by path ./src/js/*.js 186 KiB\n    ./src/js/globalScripts.js + 81 modules 181 KiB [built] [code generated]\n    ./src/js/colorMode.js 2.69 KiB [built] [code generated]\n    ./src/js/tabDeepAnchor.js 2.31 KiB [built] [code generated]\n  modules by path ./node_modules/ 37.6 KiB\n    ./node_modules/instant.page/instantpage.js 11.4 KiB [built] [code generated]\n    ./node_modules/clipboard/dist/clipboard.js 26.2 KiB [built] [code generated]\nwebpack 5.89.0 compiled successfully in 1248 ms\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Resources in Crossplane\nDESCRIPTION: Displays all the underlying cloud provider resources that Crossplane has created and is managing. This shows the resource group, virtual machine, network interface, subnet, and virtual network created in Azure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\nNAME                                         READY   SYNCED   EXTERNAL-NAME   AGE\nresourcegroup.azure.upbound.io/my-vm-7jb4n   True    True     my-vm-7jb4n     3m43s\n\nNAME                                                       READY   SYNCED   EXTERNAL-NAME   AGE\nlinuxvirtualmachine.compute.azure.upbound.io/my-vm-5h7p4   True    True     my-vm-5h7p4     3m43s\n\nNAME                                                    READY   SYNCED   EXTERNAL-NAME   AGE\nnetworkinterface.network.azure.upbound.io/my-vm-j7fpx   True    True     my-vm-j7fpx     3m43s\n\nNAME                                          READY   SYNCED   EXTERNAL-NAME   AGE\nsubnet.network.azure.upbound.io/my-vm-b2dqt   True    True     my-vm-b2dqt     3m43s\n\nNAME                                                  READY   SYNCED   EXTERNAL-NAME   AGE\nvirtualnetwork.network.azure.upbound.io/my-vm-pd2sw   True    True     my-vm-pd2sw     3m43s\n```\n\n----------------------------------------\n\nTITLE: Checking Unhealthy Crossplane Configuration Status\nDESCRIPTION: Example output showing an unhealthy Crossplane Configuration, where the installed package reports False for the HEALTHY status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/packages.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configuration\nNAME               INSTALLED   HEALTHY   PACKAGE                                           AGE\nplatform-ref-aws   True        False     xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0   71s\n```\n\n----------------------------------------\n\nTITLE: Logging out from Package Registry\nDESCRIPTION: Invalidates the current Crossplane xpkg login session, removing the session from the configuration file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg logout\n```\n\n----------------------------------------\n\nTITLE: Building Linux/ARM64 Docker Runtime Image for Crossplane Function\nDESCRIPTION: Builds a Docker runtime image for the linux/arm64 platform and tags it as runtime-arm64. The command uses the quiet flag to reduce output, showing only the resulting image SHA.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/arm64 --tag runtime-arm64\n```\n\n----------------------------------------\n\nTITLE: Building AMD64 Crossplane Function Package from Runtime Image\nDESCRIPTION: Creates a Crossplane package file (.xpkg) for the AMD64 platform by embedding the previously built runtime image. The command specifies the package root directory, the runtime image to embed, and the output package filename.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-amd64 \\\n    --package-file=function-amd64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure Compute Provider for Crossplane\nDESCRIPTION: YAML definition to install the Azure Compute provider, which is required for deploying virtual machines alongside the previously installed Azure Network provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-azure-compute\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-azure-compute:v1.11.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Revision History Limit for Crossplane Provider\nDESCRIPTION: This YAML snippet demonstrates how to configure the revision history limit for a Crossplane provider. It sets the limit to 10 revisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  revisionHistoryLimit: 10\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Package with Template\nDESCRIPTION: Creates a new Crossplane package using a specified template. The command populates the current directory with files to build a package based on the provided template.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg init <name> <template>\n```\n\n----------------------------------------\n\nTITLE: Creating XR with Dev Channel Selector\nDESCRIPTION: Creates a Crossplane XR (Composite Resource) with a composition revision selector targeting the dev channel.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composition-revisions.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind:  MyVPC\nmetadata:\n  namespace: default\n  name: vpc-dev\nspec:\n  id: vpc-dev\n  crossplane:\n    compositionRevisionSelector:\n      matchLabels:\n        channel: dev\n```\n\n----------------------------------------\n\nTITLE: Crossplane Provider Controller Configuration\nDESCRIPTION: YAML configuration to enable external secret stores in Crossplane Provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1alpha1\nkind: ControllerConfig\nmetadata:\n  name: vault-config\nspec:\n  args:\n    - --enable-external-secret-stores\n```\n\n----------------------------------------\n\nTITLE: Viewing Installed Composite Resource Definitions\nDESCRIPTION: Command to list all composite resource definitions (XRDs) installed in the Kubernetes cluster. These definitions need to be removed first during Crossplane uninstallation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/uninstall.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd\n```\n\n----------------------------------------\n\nTITLE: YAML Dynamic Line Highlighting\nDESCRIPTION: Demonstrates dynamic line highlighting in a YAML code block using the `label` parameter.  The line is highlighted when a reader hovers over a specific word with a matching label.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {label=example1}\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: aProvider\n```\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for AMD64\nDESCRIPTION: Builds a Docker runtime image for linux/amd64 platform with a quiet output flag. The resulting image is tagged as runtime-amd64.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/amd64 --tag runtime-amd64\n```\n\n----------------------------------------\n\nTITLE: Full Control Resource Configuration\nDESCRIPTION: Configuration showing transition from observe-only to full control of an imported database instance with required provider parameters.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/import-existing-resources.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"*\"]\n  forProvider:\n    databaseVersion: POSTGRES_14\n    region: us-central1\n    settings:\n    - diskSize: 100\n      tier: db-custom-4-26624\nstatus:\n  atProvider:\n    databaseVersion: POSTGRES_14\n    region: us-central1\n    settings:\n    - diskSize: 100\n      tier: db-custom-4-26624\n  conditions:\n    - lastTransitionTime: \"2023-02-22T07:16:51Z\"\n      reason: Available\n      status: \"True\"\n      type: Ready\n    - lastTransitionTime: \"2023-02-22T11:16:45Z\"\n      reason: ReconcileSuccess\n      status: \"True\"\n      type: Synced\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace for Testing Claims in Crossplane\nDESCRIPTION: This command creates a new namespace called 'crossplane-test' for testing Crossplane claims.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Crossplane Helm Installation Dry-Run\nDESCRIPTION: Command to perform a dry-run installation of Crossplane using Helm, showing all components that would be installed without actually installing them.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--dry-run --debug \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Defining a Crossplane Composition for GCP Resources\nDESCRIPTION: This YAML snippet defines a Composition that creates a GCP Storage Bucket and a PubSub Topic. It uses the patch-and-transform function to map user inputs to resource templates.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: topic-with-bucket\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      resources:\n        - name: crossplane-quickstart-bucket\n          base:\n            apiVersion: storage.gcp.upbound.io/v1beta1\n            kind: Bucket\n            spec:\n              forProvider:\n                location: \"US\"\n          patches:\n            - fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.location\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"EU\"\n                    US: \"US\"\n        - name: crossplane-quickstart-topic\n          base:\n            apiVersion: pubsub.gcp.upbound.io/v1beta1\n            kind: Topic\n            spec:\n              forProvider:\n                messageStoragePolicy:\n                  - allowedPersistenceRegions:\n                    - \"us-central1\"\n          patches:\n            - fromFieldPath: \"spec.location\"\n              toFieldPath: \"spec.forProvider.messageStoragePolicy[0].allowedPersistenceRegions[0]\"\n              transforms:\n                - type: map\n                  map:\n                    EU: \"europe-central2\"\n                    US: \"us-central1\"\n  compositeTypeRef:\n    apiVersion: queue.example.com/v1alpha1\n    kind: PubSub\n```\n\n----------------------------------------\n\nTITLE: Testing Go Functions with TestRunFunction in Crossplane\nDESCRIPTION: A comprehensive test file for a Crossplane composition function that creates S3 buckets. It includes a test case that verifies the function correctly adds two S3 buckets to the desired composed resources based on input specifications.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\t\"github.com/google/go-cmp/cmp/cmpopts\"\n\t\"google.golang.org/protobuf/testing/protocmp\"\n\t\"google.golang.org/protobuf/types/known/durationpb\"\n\n\t\"github.com/crossplane/crossplane-runtime/pkg/logging\"\n\n\tfnv1 \"github.com/crossplane/function-sdk-go/proto/v1\"\n\t\"github.com/crossplane/function-sdk-go/resource\"\n)\n\nfunc TestRunFunction(t *testing.T) {\n\ttype args struct {\n\t\tctx context.Context\n\t\treq *fnv1.RunFunctionRequest\n\t}\n\ttype want struct {\n\t\trsp *fnv1.RunFunctionResponse\n\t\terr error\n\t}\n\n\tcases := map[string]struct {\n\t\treason string\n\t\targs   args\n\t\twant   want\n\t}{\n\t\t\"AddTwoBuckets\": {\n\t\t\treason: \"The Function should add two buckets to the desired composed resources\",\n\t\t\targs: args{\n\t\t\t\treq: &fnv1.RunFunctionRequest{\n\t\t\t\t\tObserved: &fnv1.State{\n\t\t\t\t\t\tComposite: &fnv1.Resource{\n\t\t\t\t\t\t\t// MustStructJSON is a handy way to provide mock\n\t\t\t\t\t\t\t// resources.\n\t\t\t\t\t\t\tResource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"example.crossplane.io/v1alpha1\",\n\t\t\t\t\t\t\t\t\"kind\": \"XBuckets\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"name\": \"test\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\",\n\t\t\t\t\t\t\t\t\t\"names\": [\n\t\t\t\t\t\t\t\t\t\t\"test-bucket-a\",\n\t\t\t\t\t\t\t\t\t\t\"test-bucket-b\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\twant: want{\n\t\t\t\trsp: &fnv1.RunFunctionResponse{\n\t\t\t\t\tMeta: &fnv1.ResponseMeta{Ttl: durationpb.New(60 * time.Second)},\n\t\t\t\t\tDesired: &fnv1.State{\n\t\t\t\t\t\tResources: map[string]*fnv1.Resource{\n\t\t\t\t\t\t\t\"xbuckets-test-bucket-a\": {Resource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n\t\t\t\t\t\t\t\t\"kind\": \"Bucket\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"annotations\": {\n\t\t\t\t\t\t\t\t\t\t\"crossplane.io/external-name\": \"test-bucket-a\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"forProvider\": {\n\t\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\"observedGeneration\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`)},\n\t\t\t\t\t\t\t\"xbuckets-test-bucket-b\": {Resource: resource.MustStructJSON(`{\n\t\t\t\t\t\t\t\t\"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n\t\t\t\t\t\t\t\t\"kind\": \"Bucket\",\n\t\t\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\t\t\"annotations\": {\n\t\t\t\t\t\t\t\t\t\t\"crossplane.io/external-name\": \"test-bucket-b\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"spec\": {\n\t\t\t\t\t\t\t\t\t\"forProvider\": {\n\t\t\t\t\t\t\t\t\t\t\"region\": \"us-east-2\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\t\t\t\"observedGeneration\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}`)},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tConditions: []*fnv1.Condition{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tType:   \"FunctionSuccess\",\n\t\t\t\t\t\t\tStatus: fnv1.Status_STATUS_CONDITION_TRUE,\n\t\t\t\t\t\t\tReason: \"Success\",\n\t\t\t\t\t\t\tTarget: fnv1.Target_TARGET_COMPOSITE_AND_CLAIM.Enum(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tf := &Function{log: logging.NewNopLogger()}\n\t\t\trsp, err := f.RunFunction(tc.args.ctx, tc.args.req)\n\n\t\t\tif diff := cmp.Diff(tc.want.rsp, rsp, protocmp.Transform()); diff != \"\" {\n\t\t\t\tt.Errorf(\"%s\\nf.RunFunction(...): -want rsp, +got rsp:\\n%s\", tc.reason, diff)\n\t\t\t}\n\n\t\t\tif diff := cmp.Diff(tc.want.err, err, cmpopts.EquateErrors()); diff != \"\" {\n\t\t\t\tt.Errorf(\"%s\\nf.RunFunction(...): -want err, +got err:\\n%s\", tc.reason, diff)\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Claim in a Namespace with kubectl in Crossplane\nDESCRIPTION: This command deletes a claim named 'my-namespaced-vm' in the 'crossplane-test' namespace using kubectl in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete claim -n crossplane-test my-namespaced-vm\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Resources\nDESCRIPTION: Shows all managed resources created by Crossplane including resource group, VM, network interface, subnet, and virtual network.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\nNAME                                         READY   SYNCED   EXTERNAL-NAME   AGE\nresourcegroup.azure.upbound.io/my-vm-7jb4n   True    True     my-vm-7jb4n     3m43s\n\nNAME                                                       READY   SYNCED   EXTERNAL-NAME   AGE\nlinuxvirtualmachine.compute.azure.upbound.io/my-vm-5h7p4   True    True     my-vm-5h7p4     3m43s\n\nNAME                                                    READY   SYNCED   EXTERNAL-NAME   AGE\nnetworkinterface.network.azure.upbound.io/my-vm-j7fpx   True    True     my-vm-j7fpx     3m43s\n\nNAME                                          READY   SYNCED   EXTERNAL-NAME   AGE\nsubnet.network.azure.upbound.io/my-vm-b2dqt   True    True     my-vm-b2dqt     3m43s\n\nNAME                                                  READY   SYNCED   EXTERNAL-NAME   AGE\nvirtualnetwork.network.azure.upbound.io/my-vm-pd2sw   True    True     my-vm-pd2sw     3m43s\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane using Helm\nDESCRIPTION: This shell script installs Crossplane v1.11.0 or later using Helm and verifies the installation by checking the status of Crossplane pods.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace crossplane-system\nhelm repo add crossplane-master https://charts.crossplane.io/master/\nhelm repo update\nhelm install crossplane --namespace crossplane-system crossplane-master/crossplane --devel --version 1.11.0-rc.0.108.g0521c32e\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Unpausing Crossplane in Shell\nDESCRIPTION: Shows how to unpause Crossplane by scaling its deployment back up to 1 replica.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system scale --replicas=1 deployment/crossplane\n```\n\n----------------------------------------\n\nTITLE: Transforming Patch Values in Crossplane\nDESCRIPTION: Example of applying a map transform to convert region codes to full AWS region names when patching values from composite to composed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.m.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: FromCompositeFieldPath\n      fromFieldPath: spec.desiredRegion\n      toFieldPath: spec.forProvider.region\n      transforms:\n        - type: map\n          map:\n            us: us-east-2\n            eu: eu-north-1\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Patch and Transform Function\nDESCRIPTION: This YAML installs the function-patch-and-transform Function, which is required for using the patch-and-transform step in Compositions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\nEOF\n```\n\n----------------------------------------\n\nTITLE: Adding Crossplane Helm Repository\nDESCRIPTION: Commands to add the Crossplane Helm repository and update the local Helm chart cache.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/install.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-stable https://charts.crossplane.io/stable\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vault Initialization Keys\nDESCRIPTION: Extracts the Vault unseal key from initialization output and saves it to a file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec vault-0 -- vault operator init -key-shares=1 -key-threshold=1 -format=json > cluster-keys.json\nVAULT_UNSEAL_KEY=$(cat cluster-keys.json | jq -r \".unseal_keys_b64[]\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Pod Status Post Initialization\nDESCRIPTION: Shows the transition of the Crossplane pod to a Running state. Vital for ensuring the init container has completed successfully. Requires Kubernetes installed and properly configured.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/pods.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS    RESTARTS   AGE\ncrossplane-9f6d5cd7b-r9j8w                 1/1     Running   0          15s\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace for Testing Claims\nDESCRIPTION: Creates a Kubernetes namespace for testing Crossplane Claims, which are namespace-scoped representations of the custom API.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Pushing Multi-Platform Crossplane Function Packages to Registry\nDESCRIPTION: Pushes both AMD64 and ARM64 package files to a registry under a single tag, creating a multi-platform package that can run on both linux/arm64 and linux/amd64 hosts. The command specifies the package files to push and the destination tag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg push \\\n  --package-files=function-amd64.xpkg,function-arm64.xpkg \\\n  negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for ARM64 Platform\nDESCRIPTION: This command builds a Docker runtime image for the linux/arm64 platform and tags it as 'runtime-arm64'. The --quiet flag is used to suppress verbose output.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/arm64 --tag runtime-arm64\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Providers\nDESCRIPTION: Command to list all installed Crossplane providers in the cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/uninstall.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete provider crossplane-contrib-provider-aws\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Resource Relationships\nDESCRIPTION: This command displays a visual relationship of Crossplane objects for a specific resource using the crossplane beta trace command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace example.crossplane.io my-claim\n```\n\n----------------------------------------\n\nTITLE: Creating Crossplane Claim in Namespace\nDESCRIPTION: A PubSub Claim in a specific namespace, showing how to create resources with namespace-level isolation using Crossplane\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: queue.example.com/v1alpha1\nkind: PubSubClaim\nmetadata:\n  name: my-pubsub-queue\n  namespace: crossplane-test\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Tables in Hugo\nDESCRIPTION: Demonstrates how to create styled tables using the table shortcode with Bootstrap classes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/features.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{{</* table */>}}\n| Title | A Column | Another Column |\n| ---- | ---- | ---- | \n| Content | more content | even more content | \n| A Row | more of the row | another column in the row | \n{{</* /table */>}}\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for ARM64 Platform\nDESCRIPTION: Uses the Crossplane CLI to build a package for the ARM64 platform. Similar to the AMD64 package build, but uses the ARM64 runtime image.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-arm64 \\\n    --package-file=function-arm64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Resolution for Crossplane Provider\nDESCRIPTION: This YAML snippet demonstrates how to disable dependency resolution for a Crossplane provider package.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  skipDependencyResolution: true\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Crossplane Function in Python\nDESCRIPTION: A complete test file for a Crossplane function showing how to use unittest to verify function behavior. The test cases define expected input and output for a function that composes S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport dataclasses\nimport unittest\n\nfrom crossplane.function import logging, resource\nfrom crossplane.function.proto.v1 import run_function_pb2 as fnv1\nfrom google.protobuf import duration_pb2 as durationpb\nfrom google.protobuf import json_format\nfrom google.protobuf import struct_pb2 as structpb\n\nfrom function import fn\n\n\nclass TestFunctionRunner(unittest.IsolatedAsyncioTestCase):\n    def setUp(self) -> None:\n        logging.configure(level=logging.Level.DISABLED)\n        self.maxDiff = 2000\n\n    async def test_run_function(self) -> None:\n        @dataclasses.dataclass\n        class TestCase:\n            reason: str\n            req: fnv1.RunFunctionRequest\n            want: fnv1.RunFunctionResponse\n\n        cases = [\n            TestCase(\n                reason=\"The function should compose two S3 buckets.\",\n                req=fnv1.RunFunctionRequest(\n                    observed=fnv1.State(\n                        composite=fnv1.Resource(\n                            resource=resource.dict_to_struct(\n                                {\n                                    \"apiVersion\": \"example.crossplane.io/v1alpha1\",\n                                    \"kind\": \"XBuckets\",\n                                    \"metadata\": {\"name\": \"test\"},\n                                    \"spec\": {\n                                        \"region\": \"us-east-2\",\n                                        \"names\": [\"test-bucket-a\", \"test-bucket-b\"],\n                                    },\n                                }\n                            )\n                        )\n                    )\n                ),\n                want=fnv1.RunFunctionResponse(\n                    meta=fnv1.ResponseMeta(ttl=durationpb.Duration(seconds=60)),\n                    desired=fnv1.State(\n                        resources={\n                            \"xbuckets-test-bucket-a\": fnv1.Resource(\n                                resource=resource.dict_to_struct(\n                                    {\n                                        \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                                        \"kind\": \"Bucket\",\n                                        \"metadata\": {\n                                            \"annotations\": {\n                                                \"crossplane.io/external-name\": \"test-bucket-a\"\n                                            },\n                                        },\n                                        \"spec\": {\n                                            \"forProvider\": {\"region\": \"us-east-2\"}\n                                        },\n                                    }\n                                )\n                            ),\n                            \"xbuckets-test-bucket-b\": fnv1.Resource(\n                                resource=resource.dict_to_struct(\n                                    {\n                                        \"apiVersion\": \"s3.aws.upbound.io/v1beta1\",\n                                        \"kind\": \"Bucket\",\n                                        \"metadata\": {\n                                            \"annotations\": {\n                                                \"crossplane.io/external-name\": \"test-bucket-b\"\n                                            },\n                                        },\n                                        \"spec\": {\n                                            \"forProvider\": {\"region\": \"us-east-2\"}\n                                        },\n                                    }\n                                )\n                            ),\n                        },\n                    ),\n                    context=structpb.Struct(),\n                ),\n            ),\n        ]\n\n        runner = fn.FunctionRunner()\n\n        for case in cases:\n            got = await runner.RunFunction(case.req, None)\n            self.assertEqual(\n                json_format.MessageToDict(got),\n                json_format.MessageToDict(case.want),\n                \"-want, +got\",\n            )\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: YAML Language Hint Example for Readability\nDESCRIPTION: Demonstrates the use of the `yaml` language hint for improved readability. Using the appropriate language hint enhances the visual presentation of code snippets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ncat test.yaml\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: aProvider\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Claims in a Namespace with kubectl in Crossplane\nDESCRIPTION: This command retrieves the claims in the 'crossplane-test' namespace using kubectl in Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure-part-2.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get claim -n crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Chart Values for CA Bundle\nDESCRIPTION: YAML configuration block for setting registry CA bundle parameters in Helm chart override values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/self-signed-ca-certs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  registryCaBundleConfig:\n    name: ca-bundle-config\n    key: ca-bundle\n```\n\n----------------------------------------\n\nTITLE: Crossplane Custom Values YAML Configuration\nDESCRIPTION: Example YAML configuration file showing how to define custom settings for Crossplane installation, including replica count and image pull policy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nreplicas: 2\n\nimage:\n  pullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for ARM64 Platform\nDESCRIPTION: Uses the Crossplane CLI to build a package for the ARM64 platform. It specifies the package root directory, embeds the ARM64 runtime image, and outputs the package file as 'function-arm64.xpkg'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-arm64 \\\n    --package-file=function-arm64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Helm in GCP Environment\nDESCRIPTION: Commands to add the Crossplane Helm repository and install Crossplane in a Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n&&\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Revision Activation Policy for Crossplane Provider\nDESCRIPTION: This YAML snippet shows how to set the revision activation policy for a Crossplane provider. It sets the policy to 'Manual' to require manual upgrades.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/providers.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  revisionActivationPolicy: Manual\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Verifying Namespace Removal\nDESCRIPTION: Command to verify that the Crossplane namespace has been successfully removed.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/uninstall.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get namespace\n```\n\n----------------------------------------\n\nTITLE: Math Transform with Multiply\nDESCRIPTION: Example of math transform using multiply to scale numeric values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.numberField\n    toFieldPath: metadata.annotations[\"mathAnnotation\"]\n    transforms:\n      - type: math\n        math:\n          type: multiply\n          multiply: 2\n```\n\n----------------------------------------\n\nTITLE: Adding the Crossplane Master Helm Repository\nDESCRIPTION: Command to add the Crossplane master Helm repository for installing pre-release versions. This is needed before installing from the master channel.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add crossplane-master https://charts.crossplane.io/master/\n```\n\n----------------------------------------\n\nTITLE: Running Vale on Documentation - Shell\nDESCRIPTION: This command runs Vale on all documentation using a specified configuration file. It helps ensure compliance with style guidelines.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/vale.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvale --config=\"utils/vale/.vale.ini\" content/\n```\n\n----------------------------------------\n\nTITLE: Building Linux/AMD64 Docker Runtime Image for Crossplane Function\nDESCRIPTION: Builds a Docker runtime image for the linux/amd64 platform and tags it as runtime-amd64. The command uses the quiet flag to reduce output, showing only the resulting image SHA.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/amd64 --tag runtime-amd64\n```\n\n----------------------------------------\n\nTITLE: Installing Vault using Helm\nDESCRIPTION: Installs Vault in the vault-system namespace using Helm.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm -n vault-system upgrade --install vault hashicorp/vault --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Master Helm Chart\nDESCRIPTION: Command to install the Crossplane master Helm chart. This installs a pre-release version of Crossplane into the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/install.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-master/crossplane \\\n--devel\n```\n\n----------------------------------------\n\nTITLE: Defining ProviderConfig in Kubernetes YAML\nDESCRIPTION: This snippet defines a `ProviderConfig` resource in Kubernetes YAML. The `ProviderConfig` specifies the credentials to be used for provisioning resources in the `team-1` namespace, referencing a secret containing the AWS credentials.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/multi-tenant.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: team-1\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: team-1-creds\n      key: creds\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace\nDESCRIPTION: This shell command creates a new Kubernetes namespace named `crossplane-test`. Namespaces are used to isolate resources within a cluster, allowing for multi-tenancy and improved organization.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Setting Revision Activation Policy for Crossplane Configuration\nDESCRIPTION: This YAML snippet demonstrates how to set the revision activation policy for a Crossplane Configuration, controlling automatic or manual upgrades.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/packages.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  revisionActivationPolicy: Manual\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Viewing FromCompositeFieldPath Results in Managed Resource\nDESCRIPTION: This snippet shows the result of applying a FromCompositeFieldPath patch, displaying how the region field has been updated in the managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl describe bucket\nName:         my-example-claim-qlr68-29nqf\n# Removed for brevity\nSpec:\n  For Provider:\n    Region:  eu-north-1\n```\n\n----------------------------------------\n\nTITLE: Example Crossplane XR Resource for CEL Validation (YAML)\nDESCRIPTION: This YAML snippet shows an example of a Crossplane Composite Resource (XR) that will be validated against the CEL rules defined in the XRD. It includes 'replicas', 'minReplicas', and 'maxReplicas' fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1beta1\nkind: XR\nmetadata:\n  name: example\nspec:\n  replicas: 49\n  minReplicas: 1\n  maxReplicas: 30\n```\n\n----------------------------------------\n\nTITLE: Populated Database Resource Status\nDESCRIPTION: Example of a discovered and populated database instance showing the status.atProvider fields with values from the external resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/import-existing-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: sql.gcp.upbound.io/v1beta1\nkind: DatabaseInstance\nmetadata:\n  name: my-imported-database\n  annotations:\n    crossplane.io/external-name: my-external-database\nspec:\n  managementPolicies: [\"Observe\"]\n  forProvider:\n    region: us-central1\nstatus:\n  atProvider:\n    connectionName: crossplane-playground:us-central1:my-external-database\n    databaseVersion: POSTGRES_14\n    deletionProtection: true\n    firstIpAddress: 35.184.74.79\n    id: my-external-database\n    publicIpAddress: 35.184.74.79\n    region: us-central1\n    settings:\n    - activationPolicy: ALWAYS\n      availabilityType: REGIONAL\n      diskSize: 100\n      pricingPlan: PER_USE\n      tier: db-custom-4-26624\n      version: 4\n  conditions:\n  - lastTransitionTime: \"2023-02-22T07:16:51Z\"\n    reason: Available\n    status: \"True\"\n    type: Ready\n  - lastTransitionTime: \"2023-02-22T07:16:51Z\"\n    reason: ReconcileSuccess\n    status: \"True\"\n    type: Synced\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret for Crossplane Authentication\nDESCRIPTION: This shell command creates a Kubernetes Docker registry secret in the Crossplane namespace that can be referenced by an ImageConfig. The secret provides authentication credentials for accessing a private registry.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/image-configs.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system create secret docker-registry acme-registry-credentials --docker-server=registry1.com --docker-username=<user> --docker-password=<password>\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests for Crossplane Composition Functions\nDESCRIPTION: Shell command to run the Go unit tests with verbosity and coverage reporting for a Crossplane composition function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v -cover .\n```\n\n----------------------------------------\n\nTITLE: Front Matter for Beta Features in Crossplane Documentation\nDESCRIPTION: YAML front matter example for beta features in Crossplane documentation. This includes both the alpha and beta versions that introduced and graduated the feature.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/contribute.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Composition Revisions\nstate: beta\nalphaVersion: \"1.4\"\nbetaVersion: \"1.11\"\n---\n```\n\n----------------------------------------\n\nTITLE: Building ARM64 Crossplane Function Package from Runtime Image\nDESCRIPTION: Creates a Crossplane package file (.xpkg) for the ARM64 platform by embedding the previously built runtime image. The command specifies the package root directory, the runtime image to embed, and the output package filename.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-arm64 \\\n    --package-file=function-arm64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Panels in Hugo\nDESCRIPTION: Shows how to create tabbed content panels using Hugo tabs shortcode for organizing related content.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/features.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{{</* tabs */>}}\n\n{{</* tab \"First tab title\" */>}}\nAn example tab. Place anything inside a tab.\n{{</* /tab */>}}\n\n{{</* tab \"Second tab title\" */>}}\nA second example tab. \n{{</* /tab */>}}\n\n{{</* /tabs */>}}\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Resources with Beta Trace Command\nDESCRIPTION: Examples of using the crossplane beta trace command to visualize resource relationships.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace example.crossplane.io my-xr\n```\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace cluster.aws.platformref.upbound.io platform-ref-aws --output=wide\n```\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace cluster.aws.platformref.upbound.io platform-ref-aws -o dot | dot -Tpng -o graph.png\n```\n\n----------------------------------------\n\nTITLE: Installing specific Crossplane CLI version\nDESCRIPTION: A shell command that downloads and executes the Crossplane installation script with the XP_VERSION environment variable to install a specific version (v1.14.0) of the Crossplane CLI.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh\" | XP_VERSION=v1.14.0 sh\n```\n\n----------------------------------------\n\nTITLE: Retrieving VirtualMachine Resources in Crossplane\nDESCRIPTION: Lists all VirtualMachine resources created through Crossplane's custom API, showing their synchronization and readiness status along with the associated composition template.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-azure-part-2.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get VirtualMachine\nNAME    SYNCED   READY   COMPOSITION                             AGE\nmy-vm   True     True    crossplane-quickstart-vm-with-network   3m3s\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License Text for write-good Project\nDESCRIPTION: This snippet shows the full text of the MIT License as applied to the write-good project. It grants permission to use, modify, and distribute the software under certain conditions, while disclaiming warranties and limiting liability.\nSOURCE: https://github.com/crossplane/docs/blob/master/utils/vale/styles/write-good/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2014 Brian Ford\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: YAML Static Line Highlighting\nDESCRIPTION: Illustrates static line highlighting in a YAML code block using the `hl_lines` parameter. This highlighting is always on and draws attention to specific lines.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {hl_lines=\"1-3\"}\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: aProvider\n```\n```\n\n----------------------------------------\n\nTITLE: AWS Subnet Resource with Name Reference\nDESCRIPTION: Example showing how to reference another resource by its managed resource name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcIdRef: \n      name: my-test-vpc\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for API Reference Page\nDESCRIPTION: YAML front matter configuration for the API reference documentation page, specifying title, weight, description and cascade settings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/api/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API Reference\nweight: 400\ndescription: \"API details for Crossplane's core types\"\ncascade: \n    product: crds\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Required Fields in XRD Schema\nDESCRIPTION: Demonstrates how to specify required fields in a Crossplane Composite Resource Definition using the OpenAPIv3 schema specification, with examples of defining required fields at different object levels\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string \n              size:\n                type: string  \n              name:\n                type: string  \n            required: \n              - region \n              - size\n```\n\n----------------------------------------\n\nTITLE: Shell Language Hint Example\nDESCRIPTION: Shows an example of using the `shell` language hint, though the `yaml` language hint may provide better readability in some cases. The language definition should optimize for display.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ncat test.yaml\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: aProvider\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane CompositeResourceDefinition Status\nDESCRIPTION: Shell command to verify that the NoSQL custom API has been successfully established in the Kubernetes cluster by checking the XRD status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-aws-part-2.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get xrd\n```\n\n----------------------------------------\n\nTITLE: Tracing AWS Platform Reference Cluster\nDESCRIPTION: Demonstrates the default output format of crossplane beta trace command showing configuration hierarchy, versions, and health status of various components.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace cluster.aws.platformref.upbound.io platform-ref-aws\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Objects in Crossplane\nDESCRIPTION: Demonstrates converting JSON strings to objects using the json format in convert transform.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: object\n   format: json\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Arrays in Crossplane\nDESCRIPTION: Shows how to convert JSON strings to arrays using the json format in convert transform.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: array\n   format: json\n```\n\n----------------------------------------\n\nTITLE: Resuming Crossplane Controller\nDESCRIPTION: Command to scale up the Crossplane deployment back to one replica, resuming normal Crossplane operations after pausing.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/troubleshoot-crossplane.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n crossplane-system scale --replicas=1 deployment/crossplane\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Credentials in Ini Format\nDESCRIPTION: This snippet illustrates how to define AWS credentials in INI format, specifying access keys for authentication. The placeholders are clearly marked for users to enter their specific values. The required dependencies include an AWS account with access keys available.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/writing-style-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[default]\\naws_access_key_id = <aws_access_key>\\naws_secret_access_key = <aws_secret_key>\n```\n\n----------------------------------------\n\nTITLE: Example Render Output from Crossplane CLI\nDESCRIPTION: This shows the output of the 'crossplane render' command, displaying a composite resource (XBucket) and its rendered managed resource (AWS S3 Bucket) with the appropriate metadata and references.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: nopexample.org/v1\nkind: XBucket\nmetadata:\n  name: test-xrender\nstatus:\n  bucketRegion: us-east-2\n---\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  annotations:\n    crossplane.io/composition-resource-name: my-bucket\n  generateName: test-xrender-\n  labels:\n    crossplane.io/composite: test-xrender\n  ownerReferences:\n  - apiVersion: nopexample.org/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: XBucket\n    name: test-xrender\n    uid: \"\"\nspec:\n  forProvider:\n    region: us-east-2\n```\n\n----------------------------------------\n\nTITLE: Verifying AWS Credentials Injection in Crossplane Provider Pod\nDESCRIPTION: Checks if AWS credentials are correctly injected into the provider-aws pod by first finding the pod and then displaying the content of the credentials file injected by Vault.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/vault-injection.md#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nPROVIDER_CONTROLLER_POD=$(kubectl -n crossplane-system get pod -l pkg.crossplane.io/provider=provider-aws -o name --no-headers=true)\nkubectl -n crossplane-system exec -it $PROVIDER_CONTROLLER_POD -c provider-aws -- cat /vault/secrets/creds.txt\n```\n\n----------------------------------------\n\nTITLE: Deleting a Managed Resource Manually\nDESCRIPTION: Command to delete a specific managed resource that wasn't automatically removed by deleting composite resource definitions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/uninstall-crossplane.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete bucket.s3.aws.upbound.io/crossplane-bucket-867737b10\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMap for CA Bundle\nDESCRIPTION: Command to create a Kubernetes ConfigMap in the Crossplane system namespace containing the CA bundle configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/self-signed-ca-certs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n [Crossplane system namespace] create cm ca-bundle-config \\\n--from-file=ca-bundle=./[yourdomain].ca-bundle\n```\n\n----------------------------------------\n\nTITLE: Ignoring Vale Rules for Specific Example - HTML\nDESCRIPTION: This HTML comment demonstrates how to ignore Vale rules for a particular section of text. It's important to note that rules must be re-enabled afterward.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/vale.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- vale off -->\n<!-- turn off vale checking for this example -->\nThe following example will use passive voice and lowercase crossplane. Do not do this.\n<!-- vale on -->\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for AMD64 Platform\nDESCRIPTION: This command builds a Docker container image for the AMD64 platform that will serve as the runtime for a Crossplane function. The --quiet flag reduces output, and the result is a container image tagged as 'runtime-amd64'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/amd64 --tag runtime-amd64\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Schema Versions in Crossplane XRD\nDESCRIPTION: This YAML snippet shows how to define multiple schema versions in a Crossplane XRD. It includes two versions: 'v1alpha1' with only a 'region' field, and 'v1' with both 'region' and 'size' fields.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resource-definitions.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  group: custom-api.example.org\n  names:\n    kind: xDatabase\n    plural: xdatabases\n  versions:\n  - name: v1alpha1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string  \n  - name: v1\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              region:\n                type: string \n              size:\n                type: string\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Helm\nDESCRIPTION: Commands to add Crossplane Helm repository and install Crossplane in a Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-azure-part-2.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n&&\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane-generated Secret Data in Kubernetes\nDESCRIPTION: This shell command shows how to view the contents of a Kubernetes Secret created by Crossplane for storing managed resource connection details.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret rds-secret\nName:         rds-secret\n# Removed for brevity\nData\n====\nport:      4 bytes\nusername:  10 bytes\nendpoint:  54 bytes\npassword:  27 bytes\n```\n\n----------------------------------------\n\nTITLE: Disabling Usage Feature in Crossplane Deployment\nDESCRIPTION: YAML configuration to disable Usage feature by modifying the Crossplane deployment arguments.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/managed-resources/usages.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --enable-usages=false\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Resource Definition (XRD) with Namespaced Scope\nDESCRIPTION: YAML configuration for defining an XRD in Crossplane v2 with the new scope field that defaults to Namespaced in the v2alpha1 API version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/whats-new/_index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v2alpha1\nkind: CompositeResourceDefinition\nmetadata:\n  name: apps.example.crossplane.io\nspec:\n  scope: Namespaced\n  group: example.crossplane.io\n  names:\n    kind: App\n    plural: apps\n  versions:\n  - name: v1\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Updating CompositionRevision Reference in a Composite Resource\nDESCRIPTION: This YAML snippet shows how to manually update the compositionRevisionRef in a Composite Resource with a Manual update policy. It demonstrates the process of switching to a different CompositionRevision.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: PlatformDB\nmetadata:\n  name: example\nspec:\n  parameters:\n    storageGB: 20\n  compositionUpdatePolicy: Manual\n  compositionRef:\n    name: example\n  # Update the referenced CompositionRevision if and when you are ready.\n  compositionRevisionRef:\n    name: example-18pdg\n  writeConnectionSecretToRef:\n    name: db-conn\n```\n\n----------------------------------------\n\nTITLE: Wide Output Format Command\nDESCRIPTION: Demonstrates using --output=wide flag to display full status messages without truncation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane trace cluster.aws.platformref.upbound.io platform-ref-aws --output=wide\n```\n\n----------------------------------------\n\nTITLE: Publishing Connection Details to External Secret Store in Crossplane\nDESCRIPTION: Example of configuring a composite resource to publish connection details to an external secret store like HashiCorp Vault. This is an alpha feature in Crossplane that allows storing secrets outside of Kubernetes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resources.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  publishConnectionDetailsTo:\n    name: my-external-secret-store\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Kind Definition in YAML Format\nDESCRIPTION: This YAML snippet shows how to define a Kubernetes object kind using upper camel case. It specifies the group and name fields, ensuring proper capitalization and structure according to Crossplane styling rules. The expected input is the kind name and group, while the output will be a properly formatted Kubernetes resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/writing-style-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\\n  group: test.example.org\\n  names:\\n    kind: MyComputeResource\n```\n\n----------------------------------------\n\nTITLE: Upjet AsyncOperation Ongoing Status\nDESCRIPTION: Example of the Ongoing status for in-progress asynchronous operations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  AsyncOperation\n  Status:                True\n  Reason:                Ongoing\n```\n\n----------------------------------------\n\nTITLE: Adding Responsive Images in Hugo\nDESCRIPTION: Shows how to use the img shortcode to add responsive images with automatic webp conversion and size options.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/features.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{{</* img src=\"/media/banner.png\" alt=\"Crossplane Popsicle Truck\" size=\"small\" */>}}\n```\n\n----------------------------------------\n\nTITLE: YAML Code Block Without Language Hint\nDESCRIPTION: Illustrates a YAML code block without a language hint, which may result in suboptimal styling.  Specifying the language helps with proper syntax highlighting.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xpostgresqlinstances.database.example.org\n```\n\n----------------------------------------\n\nTITLE: Defining CompositeResourceDefinition with Claims\nDESCRIPTION: Example of a CompositeResourceDefinition (XRD) that creates a composite resource API endpoint and enables a Claim API endpoint.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/claims.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMyDatabase\n    plural: xmydatabases\n  claimNames:\n    kind: Database\n    plural: databases\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Truncated Status Output Example\nDESCRIPTION: Shows how status messages are truncated in default output mode when they exceed 64 characters.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/cli/command-reference.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane trace cluster.aws.platformref.upbound.io platform-ref-aws\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Style Sheets in Crossplane Docs\nDESCRIPTION: Example showing how to exclude style sheets from PurgeCSS optimization in the Crossplane documentation using special comment markers. This is important for dynamically created styles like color modes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/infrastructure.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* purgecss start ignore */\n@import \"color-modes\";\n/* purgecss end ignore */\n```\n\n----------------------------------------\n\nTITLE: Crossplane Helm Dry-Run Output\nDESCRIPTION: Complete output of the Helm dry-run command showing all Kubernetes resources that would be created including service accounts, secrets, and RBAC configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--dry-run --debug \\\n--namespace crossplane-system \\\n--create-namespace\ninstall.go:214: [debug] Original chart version: \"\"\ninstall.go:216: [debug] setting version to >0.0.0-0\ninstall.go:231: [debug] CHART PATH: /Users/plumbis/Library/Caches/helm/repository/crossplane-1.15.0.tgz\n\nNAME: crossplane\nLAST DEPLOYED: Mon Feb 12 14:46:15 2024\nNAMEPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\n{}\n\nCOMPUTED VALUES:\naffinity: {}\nargs: []\nconfiguration:\n  packages: []\ncustomAnnotations: {}\ncustomLabels: {}\ndeploymentStrategy: RollingUpdate\nextraEnvVarsCrossplane: {}\nextraEnvVarsRBACManager: {}\nextraObjects: []\nextraVolumeMountsCrossplane: {}\nextraVolumesCrossplane: {}\nfunction:\n  packages: []\nhostNetwork: false\nimage:\n  pullPolicy: IfNotPresent\n  repository: xpkg.crossplane.io/crossplane/crossplane\n  tag: \"\"\nimagePullSecrets: {}\nleaderElection: true\nmetrics:\n  enabled: false\nnodeSelector: {}\npackageCache:\n  configMap: \"\"\n  medium: \"\"\n  pvc: \"\"\n  sizeLimit: 20Mi\npodSecurityContextCrossplane: {}\npodSecurityContextRBACManager: {}\npriorityClassName: \"\"\nprovider:\n  packages: []\nrbacManager:\n  affinity: {}\n  args: []\n  deploy: true\n  leaderElection: true\n  nodeSelector: {}\n  replicas: 1\n  skipAggregatedClusterRoles: false\n  tolerations: []\nregistryCaBundleConfig:\n  key: \"\"\n  name: \"\"\nreplicas: 1\nresourcesCrossplane:\n  limits:\n    cpu: 100m\n    memory: 512Mi\n  requests:\n    cpu: 100m\n    memory: 256Mi\nresourcesRBACManager:\n  limits:\n    cpu: 100m\n    memory: 512Mi\n  requests:\n    cpu: 100m\n    memory: 256Mi\nsecurityContextCrossplane:\n  allowPrivilegeEscalation: false\n  readOnlyRootFilesystem: true\n  runAsGroup: 65532\n  runAsUser: 65532\nsecurityContextRBACManager:\n  allowPrivilegeEscalation: false\n  readOnlyRootFilesystem: true\n  runAsGroup: 65532\n  runAsUser: 65532\nserviceAccount:\n  customAnnotations: {}\ntolerations: []\nwebhooks:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Converting JSON String to Object in Crossplane Patch\nDESCRIPTION: Illustrates how to convert a JSON string to an object using the convert transform in a Crossplane patch.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n- type: convert\n  convert:\n   toType: object\n   format: json\n```\n\n----------------------------------------\n\nTITLE: YAML Disable Code Box Copy Button\nDESCRIPTION: Illustrates how to disable the copy button on a code box using the `{copy-lines=\"none\"}` parameter.  This is useful when copying the code is not desired.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {copy-lines=\"none\"}\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: aProvider\n```\n```\n\n----------------------------------------\n\nTITLE: Viewing the Composite Resource Created by the Claim\nDESCRIPTION: A shell command to view the Composite Resource that was automatically created by the NoSQLClaim. Claims create CompositeResources which in turn create managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\nNAME                      SYNCED   READY   COMPOSITION          AGE\nmy-nosql-database-t9qrw   True     True    dynamo-with-bucket   77s\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Exclusion for ProviderConfigUsage\nDESCRIPTION: Configure Argo CD to exclude ProviderConfigUsage resources from its UI by modifying the argocd-cm ConfigMap. This helps maintain UI responsiveness as the number of resources grows.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\ndata:\n    resource.exclusions: |\n      - apiGroups:\n        - \"*\"\n        kinds:\n        - ProviderConfigUsage\n```\n\n----------------------------------------\n\nTITLE: Creating AWS IAM User\nDESCRIPTION: Script to create an AWS IAM user with S3 full access permissions and generate access keys\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-injection.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nIAM_USER=test-user\naws iam create-user --user-name $IAM_USER\n\naws iam attach-user-policy --user-name $IAM_USER --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess\n\naws iam create-access-key --user-name $IAM_USER > creds.json\nACCESS_KEY_ID=$(jq -r .AccessKey.AccessKeyId creds.json)\nAWS_SECRET_ACCESS_KEY=$(jq -r .AccessKey.SecretAccessKey creds.json)\n```\n\n----------------------------------------\n\nTITLE: Visualizing End-to-End Server-Side Apply Flow in Crossplane\nDESCRIPTION: This diagram illustrates the flow of server-side apply in Crossplane from claim to composite resource to composed resources. It shows how claim server-side apply connects claims to composite resources, and function server-side apply connects composite resources to multiple composed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/server-side-apply.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  A(Claim) -- claim server-side apply --> B(Composite Resource)\n  B -- function server-side apply --> C(Composed Resource)\n  B -- function server-side apply --> D(Composed Resource)\n  B -- function server-side apply --> E(Composed Resource)\n```\n\n----------------------------------------\n\nTITLE: Deleting Crossplane Namespace\nDESCRIPTION: Command to remove the Crossplane system namespace after uninstallation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/uninstall.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete namespace crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Pod Removal\nDESCRIPTION: Command to verify that all Crossplane pods have been removed from the cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/software/uninstall.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Reference Claim in Crossplane YAML\nDESCRIPTION: This YAML illustrates a reference claim in Crossplane by specifying resource names and properties for a composite resource, details like fields and configuration data are included for defining claims in the resource system.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: ExampleClaim\nmetadata:\n  name: my-example-claim\nspec:\n  field1: \"field1-text\"\n  field2: \"field2-text\"\n  desiredRegion: \"eu-north-1\"\n  boolField: false\n  numberField: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider with Credentials\nDESCRIPTION: Applies a ProviderConfig to configure the AWS Provider with the credentials stored in the Kubernetes secret.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.upbound.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: default\nspec:\n  credentials:\n    source: Secret\n    secretRef:\n      namespace: crossplane-system\n      name: aws-secret\n      key: creds\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Browser Permissions\nDESCRIPTION: ClusterRole for Crossplane browsers that grants minimal read-only access to view events and specifically to browse compositions and XRDs. This allows users to discover and select compositions when creating resource claims.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane:aggregate-to-browse\n  labels:\n    rbac.crossplane.io/aggregate-to-browse: \"true\"\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nrules:\n# Crossplane browsers have access to view events.\n- apiGroups: [\"\"]\n  resources: [events]\n  verbs: [get, list, watch]\n# Crossplane browsers have read-only access to compositions and XRDs. This\n# allows them to discover and select an appropriate composition when creating a\n# resource claim.\n- apiGroups:\n  - apiextensions.crossplane.io\n  resources: [\"*\"]\n  verbs: [get, list, watch]\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition Update Policy in YAML\nDESCRIPTION: Shows how to set the composition update policy to manual to prevent automatic upgrades.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resources.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: xMyDatabase\nmetadata:\n  name: my-composite-resource\nspec:\n  compositionUpdatePolicy: Manual\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Getting Composition\nDESCRIPTION: This shell command retrieves the list of Crossplane Compositions deployed in the cluster. It uses `kubectl get composition` to display the names, kinds, API versions, and ages of available Compositions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\n```\n\n----------------------------------------\n\nTITLE: Patching Between Composite Resource and Environment\nDESCRIPTION: This code demonstrates how to patch data between a composite resource and the in-memory environment using ToCompositeFieldPath and FromCompositeFieldPath.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nenvironment:\n  patches:\n  - type: ToCompositeFieldPath\n    fromFieldPath: tags\n    toFieldPath: metadata.labels[envTag]\n  - type: FromCompositeFieldPath\n    fromFieldPath: metadata.name\n    toFieldPath: newEnvironmentKey\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for ARM64 Platform\nDESCRIPTION: This command builds a Crossplane package for ARM64 architecture by embedding the previously built runtime image. It specifies the package root directory containing crossplane.yaml metadata and outputs the result to function-arm64.xpkg.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-arm64 \\\n    --package-file=function-arm64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Vale Rule - Plaintext\nDESCRIPTION: This plaintext snippet shows how to ignore a specific rule related to contractions in Vale, and how to turn it back on afterward.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/vale.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n<!-- vale Microsoft.Contractions = NO -->\n<!-- turn off contractions for the example -->\nDo not turn off rules without good reasons.\n<!-- vale Microsoft.Contractions = YES -->\n```\n\n----------------------------------------\n\nTITLE: Crossplane Helm Installation Dry-Run\nDESCRIPTION: Command to perform a dry-run installation of Crossplane using Helm, showing all components that would be installed without actually applying them.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--dry-run --debug \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Combining Environment Values in Crossplane Resources\nDESCRIPTION: Example showing how to use CombineFromEnvironment patch to combine multiple environment values into a single annotation in a composed resource. Uses string strategy to format values from key1 and key2.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineFromEnvironment\n      combine:\n        strategy: string\n        variables:\n        - fromFieldPath: key1\n        - fromFieldPath: key2\n        string:\n          fmt: \"%s-%s\"\n      toFieldPath: metadata.annotations[EnvironmentPatch]\n```\n\n----------------------------------------\n\nTITLE: YAML Dynamic Line Highlighting Configuration\nDESCRIPTION: Illustrates how to apply a label to the code fence for dynamic highlighting, enabling the association between hover events and code block highlighting.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {label=example}\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: aProvider\n```\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Name Definition in YAML Format\nDESCRIPTION: This YAML snippet provides guidelines on defining names for Kubernetes objects using snake case, ensuring all lowercase letters and proper separation with dashes. This style improves readability and adherence to the naming conventions required by Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/writing-style-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: test.example.org/v1alpha1\\nkind: MyComputeResource\\nmetadata:\\n  name: my-resource\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Provider with Helm\nDESCRIPTION: Shows how to install a Crossplane Provider during Helm installation using the provider.packages argument\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\n--set provider.packages='{xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.39.0}'\n```\n\n----------------------------------------\n\nTITLE: Deleting Crossplane Namespace\nDESCRIPTION: This command manually deletes the crossplane-system namespace, which is not removed by Helm during uninstallation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/uninstall.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete namespace crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Removing Crossplane Provider\nDESCRIPTION: Command to remove a specific Crossplane provider from the cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/uninstall.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete provider crossplane-contrib-provider-aws\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane via Helm\nDESCRIPTION: Commands to add Crossplane Helm repository and install Crossplane in a Kubernetes cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add \\\ncrossplane-stable https://charts.crossplane.io/stable\nhelm repo update\n&&\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Displaying Crossplane CLI Version\nDESCRIPTION: The 'crossplane version' command returns the version of Crossplane CLI and the control plane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane version\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Viewer Permissions\nDESCRIPTION: ClusterRole for Crossplane viewers that grants read-only access to Crossplane resources. This role allows viewing events, namespaces, and Crossplane resources but does not allow making changes. This role is aggregated to the crossplane-view role.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane:aggregate-to-view\n  labels:\n    rbac.crossplane.io/aggregate-to-view: \"true\"\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nrules:\n# Crossplane viewers have access to view events.\n- apiGroups: [\"\"]\n  resources: [events]\n  verbs: [get, list, watch]\n# Crossplane viewers may see which namespaces exist.\n- apiGroups: [\"\"]\n  resources: [namespaces]\n  verbs: [get, list, watch]\n# Crossplane viewers have read-only access to built in Crossplane types.\n- apiGroups:\n  - apiextensions.crossplane.io\n  resources: [\"*\"]\n  verbs: [get, list, watch]\n- apiGroups:\n  - pkg.crossplane.io\n  resources: [\"*\"]\n  verbs: [get, list, watch]\n```\n\n----------------------------------------\n\nTITLE: Adding Vault Helm Repository\nDESCRIPTION: Command to add HashiCorp's Helm repository for Vault installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add hashicorp https://helm.releases.hashicorp.com --force-update\n```\n\n----------------------------------------\n\nTITLE: String Format Transform in Crossplane\nDESCRIPTION: Shows how to format strings using Go's string formatting syntax in Crossplane's string transform. This allows for insertion of input values into template strings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"stringAnnotation\"]\n    transforms:\n      - type: string\n        string:\n          type: Format\n          fmt: \"the-field-%s\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Composition Reference\nDESCRIPTION: Shows how to set a default Composition reference in an XRD when multiple Compositions reference the same XRD.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositionRef: \n    name: myComposition\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Tracking Method in Argo CD ConfigMap (YAML)\nDESCRIPTION: This snippet shows how to configure Argo CD to use annotation-based resource tracking, which is necessary for properly tracking Crossplane resources.  It involves editing the `argocd-cm` ConfigMap within the `argocd` namespace. This configuration enables Argo CD to accurately monitor and manage Crossplane-related objects.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/crossplane-with-argo-cd.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiVersion: v1\nkind: ConfigMap\ndata:\n  application.resourceTrackingMethod: annotation\"\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, setting the title, weight for ordering, and version cascade settings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Welcome\"\nweight: -1\ncascade:\n    version: \"2.0-preview\"\n---\n```\n\n----------------------------------------\n\nTITLE: Describing ConfigurationRevision for Dependency Issues\nDESCRIPTION: This YAML output shows the result of describing a ConfigurationRevision using kubectl. It provides detailed information about the Configuration's status, including any health issues or dependency problems.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/configurations.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe configurationrevision\nName:         platform-ref-aws-a30ad655c769\nAPI Version:  pkg.crossplane.io/v1\nKind:         ConfigurationRevision\n# Removed for brevity\nSpec:\n  Desired State:                  Active\n  Image:                          xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0\n  Revision:                       1\nStatus:\n  Conditions:\n    Last Transition Time:  2023-10-06T20:08:14Z\n    Reason:                UnhealthyPackageRevision\n    Status:                False\n    Type:                  Healthy\n  Controller Ref:\n    Name:\nEvents:\n  Type     Reason       Age                From                                              Message\n  ----     ------       ----               ----                                              -------\n  Warning  LintPackage  29s (x2 over 29s)  packages/configurationrevision.pkg.crossplane.io  incompatible Crossplane version: package isn't compatible with Crossplane version (v1.12.0)\n```\n\n----------------------------------------\n\nTITLE: Removing Resources and Cleanup\nDESCRIPTION: Deletes the claim and associated managed resources, which also removes the corresponding keys from Vault.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete claim my-ess\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Deployments\nDESCRIPTION: Command and example output to verify the Crossplane deployments in the system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deployments -n crossplane-system\nNAME                      READY   UP-TO-DATE   AVAILABLE   AGE\ncrossplane                1/1     1            1           8m13s\ncrossplane-rbac-manager   1/1     1            1           8m13s\n```\n\n----------------------------------------\n\nTITLE: Checking Remaining Managed Resources After XRD Deletion\nDESCRIPTION: Command to view any remaining managed resources after deleting composite resource definitions, which may include resources created manually outside composite resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/uninstall-crossplane.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Example Composition Definition for Crossplane Functions\nDESCRIPTION: YAML definition of a Crossplane Composition that uses a pipeline with a function-xbuckets step to compose XBuckets resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: create-buckets\nspec:\n  compositeTypeRef:\n    apiVersion: example.crossplane.io/v1\n    kind: XBuckets\n  mode: Pipeline\n  pipeline:\n  - step: create-buckets\n    functionRef:\n      name: function-xbuckets\n```\n\n----------------------------------------\n\nTITLE: Visualizing Crossplane Composition Flow\nDESCRIPTION: This diagram shows how Crossplane's Composition engine replaces the need for a custom controller. The user interacts with a custom API, and Crossplane's Composition engine, using a Python function, creates the necessary Deployment and Service resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/whats-crossplane/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nuser(User)\n\nsubgraph control [Control Plane]\n  api(App API)\n\n  subgraph crossplane [Composition Engine]\n    fn(Python Function)\n  end\n\n  deployment(Deployment API)\n  service(Service API)\nend\n\nuser -- create --> api\ncrossplane watch@<-- watch --> api\ncrossplane -- create --> deployment\ncrossplane -- create --> service\n\nwatch@{animate: true}\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for AMD64\nDESCRIPTION: Creates a Crossplane package (.xpkg) for AMD64 platform by embedding the runtime image. Uses package-root for metadata and configuration from crossplane.yaml.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-amd64 \\\n    --package-file=function-amd64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Front Matter with Description for Crossplane Documentation\nDESCRIPTION: YAML front matter example that includes a description field for SEO purposes. The description is used for webpage metadata and is not displayed in the documentation itself.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/contribute.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Compositions\nweight: 30\naliases: \n  - composition\ndescription: \"Compositions are a template for creating Crossplane resources\"\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Version\nDESCRIPTION: Command to display both client and server versions of Crossplane\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane version\nClient Version: v1.17.0\nServer Version: v1.17.0\n```\n\n----------------------------------------\n\nTITLE: Install NodeJS Dependencies with NPM\nDESCRIPTION: This snippet shows how to install NodeJS dependencies using NPM. It navigates to the `/utils/webpack` directory and runs `npm install` to install the dependencies specified in `package.json`.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/infrastructure.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd utils/webpack\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Crossplane Custom Values YAML Configuration\nDESCRIPTION: Example YAML configuration file defining custom settings for Crossplane installation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/install.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nreplicas: 2\n\nimage:\n  pullPolicy: Always\n```\n\n----------------------------------------\n\nTITLE: Field Path Selection Example\nDESCRIPTION: An example composite resource YAML showing how field paths can be used to select different elements in the resource structure.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl get composite -o yaml\napiVersion: example.org/v1alpha1\nkind: XExample\nmetadata:\n  # Removed for brevity\n  labels:\n    crossplane.io/claim-name: my-example-claim\n    crossplane.io/claim-namespace: default\n    crossplane.io/composite: my-example-claim-978mh\nspec:\n  desiredRegion: eu-north-1\n  field1: field1-text\n  resourceRefs:\n  - apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    name: my-example-claim-978mh-r6z64\n  - apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    name: my-example-claim-978mh-cnlhj\n  - apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    name: my-example-claim-978mh-rv5nm\n```\n\n----------------------------------------\n\nTITLE: Pushing Multi-Platform Package to Registry\nDESCRIPTION: Pushes both AMD64 and ARM64 package files to a registry under a single tag, creating a multi-platform package that supports both architectures.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg push \\\n  --package-files=function-amd64.xpkg,function-arm64.xpkg \\\n  negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Active Package Revision Status in YAML\nDESCRIPTION: YAML configuration showing the status of an active package revision that is still being installed by Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nType: Installed\nStatus: True\nReason: ActivePackageRevision\n```\n\n----------------------------------------\n\nTITLE: Patching Individual Resources in Crossplane Composition (YAML)\nDESCRIPTION: This snippet shows how to patch data between individual resources and the in-memory environment in a Crossplane Composition. It uses 'ToEnvironmentFieldPath' and 'FromEnvironmentFieldPath' patch types to copy data between the resource and the environment.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/environment-configs.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  # Removed for Brevity\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      # Removed for Brevity\n      resources:\n        - name: vpc\n          base:\n            apiVersion: ec2.aws.upbound.io/v1beta1\n            kind: VPC\n            spec:\n              forProvider:\n                cidrBlock: 172.16.0.0/16\n          patches:\n            - type: ToEnvironmentFieldPath\n              fromFieldPath: status.atProvider.id\n              toFieldPath: vpcId\n            - type: FromEnvironmentFieldPath\n              fromFieldPath: tags\n              toFieldPath: spec.forProvider.tags\n```\n\n----------------------------------------\n\nTITLE: Building Crossplane Package for AMD64 Platform\nDESCRIPTION: This command uses the Crossplane CLI to build a package file for the AMD64 platform. It embeds the previously built AMD64 runtime image, references the package metadata from the package directory, and outputs a function-amd64.xpkg file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane xpkg build \\\n    --package-root=package \\\n    --embed-runtime-image=runtime-amd64 \\\n    --package-file=function-amd64.xpkg\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Manager Permissions in Kubernetes for Crossplane\nDESCRIPTION: RBAC permissions required by the Crossplane RBAC manager to manage ProviderRevisions, CustomResourceDefinitions, and create cluster roles. The manager needs specific permissions to set finalizers on ProviderRevisions and manage RBAC resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/install-crossplane-include.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- apiGroups:\n  - pkg.crossplane.io\n  resources:\n  - providerrevisions/finalizers\n  verbs:\n  - update\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - rbac.authorization.k8s.io\n  resources:\n  - clusterroles\n  - roles\n  verbs:\n  - get\n  - list\n  - watch\n  - create\n  - update\n  - patch\n  # The RBAC manager may grant access it does not have.\n  - escalate\n- apiGroups:\n  - rbac.authorization.k8s.io\n  resources:\n  - clusterroles\n  verbs:\n  - bind\n- apiGroups:\n  - rbac.authorization.k8s.io\n  resources:\n  - clusterrolebindings\n  verbs:\n  - \"*\"\n- apiGroups:\n  - \"\"\n  - coordination.k8s.io\n  resources:\n  - configmaps\n  - leases\n  verbs:\n  - get\n  - list\n  - create\n  - update\n  - patch\n  - watch\n  - delete\n```\n\n----------------------------------------\n\nTITLE: CNCF Code of Conduct Quote in Markdown\nDESCRIPTION: A direct quote from the CNCF Code of Conduct describing the commitment to fostering an open and welcoming community.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n>As contributors and maintainers in the CNCF community, and in the interest of\\nfostering an open and welcoming community, we pledge to respect all people who\\ncontribute through reporting issues, posting feature requests, updating\\ndocumentation, submitting pull requests or patches, and other activities.\\n>  \\n>We are committed to making participation in the CNCF community a\\nharassment-free experience for everyone, regardless of level of experience,\\ngender, gender identity and expression, sexual orientation, disability,\\npersonal appearance, body size, race, ethnicity, age, religion, or nationality.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Provider Revision Status in Shell\nDESCRIPTION: Shows how to get the status of a specific provider revision using kubectl.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/troubleshoot-crossplane.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providerrevision provider-aws-a2e16ca2fc1a\n```\n\n----------------------------------------\n\nTITLE: Example Function Configuration for Crossplane Development Runtime\nDESCRIPTION: YAML definition of a Crossplane Function using the Development runtime annotation, which tells the CLI to connect to a locally running function instead of using Docker.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-xbuckets\n  annotations:\n    render.crossplane.io/runtime: Development\nspec:\n  # The CLI ignores this package when using the Development runtime.\n  # You can set it to any value.\n  package: xpkg.crossplane.io/negz/function-xbuckets:v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Verifying Composition Revision Creation\nDESCRIPTION: This shell command lists the created CompositionRevisions, showing their names, revision numbers, and channel labels.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composition-revisions.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get compositionrevisions -o=\"custom-columns=NAME:.metadata.name,REVISION:.spec.revision,CHANNEL:.metadata.labels.channel\"\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License for Alex Project\nDESCRIPTION: This code block contains the full text of the MIT License applied to the Alex project. It outlines the permissions, conditions, and disclaimers associated with the use and distribution of the software.\nSOURCE: https://github.com/crossplane/docs/blob/master/utils/vale/styles/alex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n(The MIT License)\n\nCopyright (c) 2015 Titus Wormer <tituswormer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Verifying Compositions with kubectl in Shell\nDESCRIPTION: This shell command shows how to list all available Compositions using kubectl. It displays the Composition name, XR-KIND, and XR-APIVERSION for each Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\n```\n\n----------------------------------------\n\nTITLE: Rendering Composite Resources with Crossplane CLI\nDESCRIPTION: Command to use the crossplane render tool to test a function by providing the XR, composition, and function YAML files. This simulates how Crossplane would process the composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating VaultConfig for Crossplane-Vault Integration\nDESCRIPTION: Creates a VaultConfig resource that specifies how to connect to the Vault server using token authentication.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\necho \"apiVersion: secrets.crossplane.io/v1alpha1\nkind: VaultConfig\nmetadata:\n  name: vault-internal\nspec:\n  server: http://vault.vault-system:8200\n  mountPath: secret/\n  version: v2\n  auth:\n    method: Token\n    token:\n      source: Filesystem\n      fs:\n        path: /vault/secrets/token\" | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Checking Configuration Health Status with kubectl in Shell\nDESCRIPTION: This shell command demonstrates how to check the health status of a Configuration package using kubectl. It shows an example where the Configuration is installed but not healthy.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/packages.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configuration\nNAME               INSTALLED   HEALTHY   PACKAGE                                           AGE\nplatform-ref-aws   True        False     xpkg.crossplane.io/crossplane-contrib/configuration-quickstart:v0.1.0   71s\n```\n\n----------------------------------------\n\nTITLE: Enabling Vault KV Secrets Engine\nDESCRIPTION: Enables the KV Secrets Engine version 2 in Vault.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -it vault-0 -- vault secrets enable -path=secret kv-v2\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Authentication in Vault\nDESCRIPTION: Enables and configures Kubernetes authentication method in Vault.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nvault auth enable kubernetes\n```\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/kubernetes/config \\\n        token_reviewer_jwt=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\n        kubernetes_host=\"https://$KUBERNETES_PORT_443_TCP_ADDR:443\" \\\n        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Crossplane Validation Command Output\nDESCRIPTION: Example output from running the crossplane beta validate command, showing validation results for multiple resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta validate schema resources.yaml\n[x] schema validation error example.crossplane.io/v1beta1, Kind=XR, example : status.conditions[0].lastTransitionTime: Invalid value: \"null\": status.conditions[0].lastTransitionTime in body must be of type string: \"null\"\n[x] CEL validation error example.crossplane.io/v1beta1, Kind=XR, example : spec: Invalid value: \"object\": no such key: minReplicas evaluating rule: replicas should be greater than or equal to minReplicas.\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=AccessKey, sample-access-key-1 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-0 validated successfully\n[✓] iam.aws.upbound.io/v1beta1, Kind=User, test-user-1 validated successfully\nTotal 5 resources: 0 missing schemas, 4 success cases, 1 failure cases\n```\n\n----------------------------------------\n\nTITLE: Directory Tree Structure\nDESCRIPTION: This provides a tree view of the Crossplane documentation website repository. It shows the file organization and highlights key files and directories, such as `config.yaml`, `content`, `themes`, and `utils`.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/infrastructure.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n├── config.yaml    # Hugo configuration file\n├── content        # Root for all page content\n│   ├── contribute\n│   ├── master\n│   ├── media      # Images used in docs pages\n│   ├── v1.13\n│   ├── v1.14\n│   └── v1.15\n├── hugo_stats.json   # Generated by Hugo writeStats for PurgeCSS\n├── netlify.toml      # Netlify configuration\n├── netlify_build.sh  # Custom build script for Netlify\n├── package-lock.json # NodeJS dependency version lock\n├── package.json      # NodeJS dependencies\n├── postcss.config.js # PostCSS configuration\n├── static            # Legacy docs site images\n├── themes    \n│   └── geekboot      # The Hugo theme used by Crossplane\n│       ├── LICENSE-bootstrap\n│       ├── LICENSE-geekdoc\n│       ├── assets\n│       │   ├── js    # Compiled JavaScript\n│       │   └── scss  # Sytlesheets\n│       │       └── bootstrap # Unmodified Bootstrap 5.2 SCSS\n│       ├── data      # Hugo mapping for JavaScript files. Autogenerated.\n│       ├── layouts   # HTML template pages\n│       │   ├── 404.html  # 404 page template\n│       │   ├── _default\n│       │   │   ├── _markup/ # Templates for rendering specific style components\n│       │   │   ├── baseof.html        # Entrypoint template for all pages\n│       │   │   ├── list.html          # List type pages, see partials/single-list.html\n│       │   │   ├── redirect.html      # Provides HTML redirect functions\n│       │   │   ├── section.rss.xml    # RSS feed template\n│       │   │   ├── single.html        # Single type pages, see partials/single-list.html\n│       │   │   └── sitemap.xml        # Sitemap template\n│       │   ├── partials  # Template includes\n│       │   │   ├── analytics.html  # Analytics and trackers\n│       │   │   ├── crds.html       # Entrypoint for API documentation\n│       │   │   ├── docs-navbar.html  # Top header links\n│       │   │   ├── docs-sidebar.html # left-side navigation menu\n│       │   │   ├── favicons.html     # Favicons\n│       │   │   ├── feature-state-alert.html  # Alert box for alpha/beta features\n│       │   │   ├── footer.html       # Footer copyright and links\n│       │   │   ├── ga-tag.html       # Google Analytics\n│       │   │   ├── google-analytics.html # Notice for GA release version\n│       │   │   ├── header.html       # <head></head> content\n│       │   │   ├── icons             # Icons from fontawesome and Crossplane specific\n│       │   │   ├── icons.html        # SVG includes common enough to be on every page\n│       │   │   ├── left-nav.html     # Left-hand navigation\n│       │   │   ├── master-version-alert.html   # Alert box for the master version\n│       │   │   ├── mermaid.html      # Styling and JavaScript for mermaid diagrams\n│       │   │   ├── meta-common.html  # <meta> tags used on all pages\n│       │   │   ├── ms-clarity.html   # Microsoft Clarity tags\n│       │   │   ├── old-version-alert.html  # Alert box for versions that aren't the latest\n│       │   │   ├── preview-version-alert.html  # Alert box for preview versions\n│       │   │   ├── redirect.html     # HTML meta redirect\n│       │   │   ├── release-notes.html  # Release note summary page generator\n│       │   │   ├── rollworks.html    # Rollworks analytics tags\n│       │   │   ├── scripts.html      # Global JavaScript includes\n│       │   │   ├── search-button.html  # Algolia search button\n│       │   │   ├── sidebar           # Static links in the left-side nav\n│       │   │   ├── single-list.html  # Template used by all single and list type pages\n│       │   │   ├── skippy.html       # Shift the page when the target is an anchor link\n│       │   │   ├── social.html       # Social media data includes\n│       │   │   ├── stylesheet-cached.html  # Static CSS that never changes\n│       │   │   ├── stylesheet-dynamic.html # Dynamic CSS that may change between pages\n│       │   │   ├── toc.html          # Table of contents modifications\n│       │   │   ├── utils             # Utils imported from Geekdoc theme\n│       │   │   └── version-dropdown-menu.html  # Version dropdown menu\n│       │   └── shortcodes\n│       │       ├── check.html        # Produce and style a Checkmark\n│       │       ├── editCode.html     # Code box with editable field\n│       │       ├── expand.html       # Expand button\n│       │       ├── getCRDs.html      # Generate API pages\n│       │       ├── hint.html         # Hint boxes\n│       │       ├── hover.html        # Hover to highlight \n│       │       ├── img.html          # Image optimizer\n│       │       ├── include.html      # Include an external file\n│       │       ├── markdown.html     # Run content through the markdown engine again\n│       │       ├── param.html        # Import from Bootstrap theme\n│       │       ├── partial.html      # Import from Bootstrap theme\n│       │       ├── placeholder.html  # Import from Bootstrap theme\n│       │       ├── propertylist.html # Import from Bootstrap theme\n│       │       ├── tab.html          # Individual Tab. Related to tabs.html\n│       │       ├── table.html        # Apply bootstrap styles to markdown tables\n│       │       ├── tabs.html         # Tab builder, related to tab.html\n│       │       ├── url.html          # Create a download link to a file. Used by the APIs\n│       │       └── year.html         # Print the current year\n│       └── static       # Static global image files\n└── utils   # Scripts and tools related to the docs\n    ├── htmltest  # htmltest link checker\n    ├── vale      # Vale linter\n    │   └── styles\n    │       ├── Crossplane  # Crossplane spelling exceptions\n    │       ├── Google      # Google's Vale rules\n    │       ├── Microsoft   # Microsoft's Vale rules\n    │       ├── alex        # Write inclusive language\n    │       ├── gitlab      # Gitlab's Vale rules\n    │       ├── proselint   # Write better\n    │       └── write-good  # Write better\n    └── webpack   # JavaScript tools\n        ├── package-lock.json # NodeJS dependency version lock\n        ├── package.json      # NodeJS dependencies\n        ├── src \n        │   └── js\n        │       ├── bootstrap/          # Unmodified Bootstrap JavaScript\n        │       ├── colorMode.js        # Color mode switcher\n        │       ├── customClipboard.js  # Custom copy-to-clipboard tool\n        │       ├── globalScripts.js    # Point of entry for all scripts compiled by Webpack\n        │       ├── hoverHighlight.js   # Hover to highlight \n        │       ├── slackNotify.js      # \\\"Join Crossplane Slack\\\" bubble\n        │       └── tabDeepAnchor.js    # Link inside a tab\n        └── webpack.config.js\n```\n\n----------------------------------------\n\nTITLE: Deleting a Crossplane Provider\nDESCRIPTION: Command to remove an installed Crossplane provider after ensuring all managed resources using that provider have been deleted.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/uninstall-crossplane.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete provider crossplane-contrib-provider-aws\n```\n\n----------------------------------------\n\nTITLE: Defining Desired Deployment in KCL\nDESCRIPTION: This snippet defines the desired state of a Kubernetes Deployment using KCL. It sets up the deployment with the image specified in the App custom resource and configures a container port.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/get-started/get-started-with-composition.md#2025-04-21_snippet_11\n\nLANGUAGE: kcl\nCODE:\n```\n_desired_deployment = {\n  apiVersion = \"apps/v1\"\n  kind = \"Deployment\"\n  metadata = {\n    annotations = {\n      \"krm.kcl.dev/composition-resource-name\" = \"deployment\"\n    }\n    labels = {\"example.crossplane.io/app\" = observed_xr.metadata.name}\n  }\n  spec = {\n    selector.matchLabels = {\"example.crossplane.io/app\" = observed_xr.metadata.name}\n    template = {\n      metadata.labels = {\"example.crossplane.io/app\" = observed_xr.metadata.name}\n      spec.containers = [{\n        name = \"app\"\n        image = observed_xr.spec.image\n        ports = [{containerPort = 80}]\n      }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing a Specific Package File to a Registry\nDESCRIPTION: Example command for pushing a specific package file to a registry with organization and version tag. This shows how to use the -f flag to specify a particular .xpkg file.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncrossplane xpkg push -f my-package.xpkg crossplane-docs/my-package:v0.14.0\n```\n\n----------------------------------------\n\nTITLE: Rendering Crossplane Resources with a Local Function\nDESCRIPTION: This shell command uses the Crossplane CLI to render resources using a locally running composition function, demonstrating end-to-end testing.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Writing Composed Resource Values to Environment in Crossplane (YAML)\nDESCRIPTION: This snippet illustrates the ToEnvironmentFieldPath patch, which takes a value from the composed resource and applies it to the in-memory environment. It shows how to use the desired 'region' value and apply it as the environment's 'key1'.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n    patches:\n    - type: ToEnvironmentFieldPath\n      fromFieldPath: spec.forProvider.region\n      toFieldPath: key1\n```\n\n----------------------------------------\n\nTITLE: Defining a CompositeResourceDefinition with Claim Support in Crossplane\nDESCRIPTION: This YAML snippet shows a CompositeResourceDefinition (XRD) that creates a composite resource API endpoint 'xmydatabases.example.org' and enables a Claim API endpoint 'database.example.org'. The XRD defines the structure and naming for both the composite resource and its claim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/claims.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: XMyDatabase\n    plural: xmydatabases\n  claimNames:\n    kind: Database\n    plural: databases\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: CombineToComposite Patch in Crossplane YAML\nDESCRIPTION: Shows combining multiple values from a composed resource into a single value in the composite resource using CombineToComposite patch. Creates a URL from name and region values.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineToComposite\n      combine:\n        variables:\n          - fromFieldPath: metadata.name\n          - fromFieldPath: spec.forProvider.region\n        strategy: string\n        string:\n          fmt: \"https://%s.%s.com\"\n      toFieldPath: status.url\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Switch Library Header for Crossplane Docs\nDESCRIPTION: License and attribution header for the Dark Mode Switch library v1.0.1, which enables dark mode functionality. The library is licensed under MIT and authored by C.Oliff.\nSOURCE: https://github.com/crossplane/docs/blob/master/themes/geekboot/assets/js/main-727bf178.bundle.min.js.LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*!\n * Dark Mode Switch v1.0.1 (https://github.com/coliff/dark-mode-switch)\n * Copyright 2021 C.Oliff\n * Licensed under MIT (https://github.com/coliff/dark-mode-switch/blob/main/LICENSE)\n */\n```\n\n----------------------------------------\n\nTITLE: Selecting an EnvironmentConfig in a Composition Pipeline\nDESCRIPTION: YAML configuration showing how to select EnvironmentConfigs in a Composition using the function-environment-configs Function. Demonstrates how to reference EnvironmentConfigs by name or selector in a pipeline step.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/environment-configs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Reference\n          ref:\n            name: example-environment\n        - type: Selector\n          selector:\n            matchLabels:\n            # Removed for brevity\n    # the environment will be passed to the next function in the pipeline\n    # as part of the context\n\n# Next step consuming the merged environment removed for brevity...\n```\n\n----------------------------------------\n\nTITLE: INI Editable Fields Example\nDESCRIPTION: Demonstrates the use of the `editCode` shortcode to make specific fields editable within a code block.  Editable fields allow users to input their own values and copy the modified code.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = $@<aws_access_key>$@\naws_secret_access_key = $@<aws_secret_key>$@\n```\n\n----------------------------------------\n\nTITLE: Disabling Vale Sentence Length Check - HTML\nDESCRIPTION: This HTML snippet demonstrates how to disable the Vale sentence length check for a specific sentence to avoid errors due to URLs.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/vale.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- vale gitlab.SentenceLength = NO -->\nThe XRD `version` is like the \n[API versioning used by Kubernetes](https://kubernetes.io/docs/reference/using-api/#api-versioning).\nThe version shows how mature or stable the API is and increments when changing,\nadding or removing fields in the API.\n<!-- vale gitlab.SentenceLength = YES -->\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 Bucket with User-Level ProviderConfig in Crossplane\nDESCRIPTION: This YAML snippet shows how to create an AWS S3 Bucket managed resource using the 'user-keys' ProviderConfig. The providerConfigRef field specifies which ProviderConfig to use for authenticating with AWS when managing this resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: s3.aws.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  name: user-bucket\nspec:\n  forProvider:\n    region: us-east-2\n  providerConfigRef:\n    name: user-keys\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterRoleBinding for Crossplane Admin in Kubernetes YAML\nDESCRIPTION: This snippet creates a ClusterRoleBinding for Crossplane admin access. It binds the 'crossplane-admin' ClusterRole to the 'crossplane:masters' Group.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: crossplane-admin\n  labels:\n    app: crossplane\n    helm.sh/chart: crossplane-1.15.0\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: cloud-infrastructure-controller\n    app.kubernetes.io/part-of: crossplane\n    app.kubernetes.io/name: crossplane\n    app.kubernetes.io/instance: crossplane\n    app.kubernetes.io/version: \"1.15.0\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: crossplane-admin\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: Group\n  name: crossplane:masters\n```\n\n----------------------------------------\n\nTITLE: Mocking Managed Resources for Render Command (YAML)\nDESCRIPTION: An example of a YAML file used with the '--observed-resources' flag in the 'crossplane render' command. It demonstrates how to mock a managed resource for testing or development purposes.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: ComposedResource\nmetadata:\n  name: test-render-b\n  annotations:\n    crossplane.io/composition-resource-name: resource-b\nspec:\n  coolerField: \"I'm cooler!\"\n```\n\n----------------------------------------\n\nTITLE: Scaling Down a Provider with DeploymentRuntimeConfig\nDESCRIPTION: YAML configuration to create a DeploymentRuntimeConfig that scales a provider to zero replicas, pausing its operations while troubleshooting or during migrations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/troubleshoot-crossplane.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: scale-config\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      replicas: 0\n      template: {}\n---\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws:v0.33.0\n  runtimeConfigRef:\n    apiVersion: pkg.crossplane.io/v1beta1\n    kind: DeploymentRuntimeConfig\n    name: scale-config\n```\n\n----------------------------------------\n\nTITLE: Creation Annotations Example\nDESCRIPTION: Example showing creation tracking annotations on a VPC resource to help detect and prevent leaked resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: VPC\nmetadata:\n  name: my-vpc\n  annotations:\n    crossplane.io/external-name: vpc-1234567890abcdef0\n    crossplane.io/external-create-pending: \"2023-12-18T21:48:06Z\"\n    crossplane.io/external-create-succeeded: \"2023-12-18T21:48:40Z\"\n```\n\n----------------------------------------\n\nTITLE: Defining a CompositeResourceDefinition for MyVPC\nDESCRIPTION: This YAML snippet defines a CompositeResourceDefinition (XRD) for the MyVPC resource. It specifies the API group, kind, and schema for the MyVPC Composite Resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composition-revisions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: myvpcs.aws.example.upbound.io\nspec:\n  group: aws.example.upbound.io\n  names:\n    kind: MyVPC\n    plural: myvpcs\n  versions:\n  - name: v1alpha1\n    served: true \n    referenceable: true \n    schema:\n      openAPIV3Schema:\n        type: object \n        properties:\n          spec:\n            type: object \n            properties:\n              id:\n                type: string \n                description: ID of this VPC that other objects will use to refer to it. \n            required:\n            - id\n```\n\n----------------------------------------\n\nTITLE: Describing Provider Revision Details\nDESCRIPTION: YAML output showing detailed provider revision information including health status and events.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/providers.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe providerrevisions\nName:         provider-aws-s3-92206523fff4\nAPI Version:  pkg.crossplane.io/v1\nKind:         ProviderRevision\nSpec:\n  Desired State:                  Active\n  Image:                          xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n  Revision:                       1\nStatus:\n  Conditions:\n    Last Transition Time:  2023-10-10T21:06:39Z\n    Reason:                UnhealthyPackageRevision\n    Status:                False\n    Type:                  Healthy\n  Controller Ref:\n    Name:\nEvents:\n  Type     Reason             Age                From                                         Message\n  ----     ------             ----               ----                                         -------\n  Warning  LintPackage        41s (x3 over 47s)  packages/providerrevision.pkg.crossplane.io  incompatible Crossplane version: package isn't compatible with Crossplane version (v1.10.0)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Specific Composition Reference in XRD\nDESCRIPTION: This YAML snippet demonstrates how to enforce a specific Composition for all composite resources and Claims using an XRD. The enforcedCompositionRef setting requires all resources to use the specified Composition.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/composite-resource-definitions.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  enforcedCompositionRef: \n    name: myComposition\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Defining a CompositeResourceDefinition (XRD) for Custom API in Crossplane\nDESCRIPTION: This YAML snippet defines a CompositeResourceDefinition that creates a custom API endpoint xmydatabases.example.org. The XRD specifies the API group, kind, and plural name that will be used to create composite resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata: \n  name: xmydatabases.example.org\nspec:\n  group: example.org\n  names:\n    kind: xMyDatabase\n    plural: xmydatabases\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Listing Custom API Resources\nDESCRIPTION: Shell command that filters the available API resources to show only those related to the newly created NoSQL custom API.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl api-resources | grep nosql\n```\n\n----------------------------------------\n\nTITLE: Running Vale on Single File - Shell\nDESCRIPTION: This command runs Vale on a specific markdown file with a configuration file. Useful for checking individual documents for style compliance.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/vale.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvale --config=\"utils/vale/.vale.ini\" content/contribute/writing-style-guide.md\n```\n\n----------------------------------------\n\nTITLE: Using ClampMin in Crossplane Math Transform\nDESCRIPTION: Demonstrates how to set a minimum threshold for numeric values using the clampMin math transform. If the input is less than the specified minimum, the minimum value is used instead.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.numberField\n    toFieldPath: metadata.annotations[\"mathAnnotation\"]\n    transforms:\n      - type: math\n        math:\n          type: clampMin\n          clampMin: 20\n```\n\n----------------------------------------\n\nTITLE: Crossplane ReconcileError Condition Status\nDESCRIPTION: Example of the ReconcileError condition status indicating an error during reconciliation.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Synced\n  Status:                False\n  Reason:                ReconcileError\n```\n\n----------------------------------------\n\nTITLE: Matching Conditions for Resource Readiness in Crossplane\nDESCRIPTION: Illustrates how to use MatchCondition to check for a specific condition type and status in a resource's status.conditions. This example checks for a condition of type MyType with a status of Success.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchCondition\n      matchCondition:\n        type: MyType\n        status: Success\n```\n\n----------------------------------------\n\nTITLE: Defining an XBuckets Composite Resource (XR) in YAML\nDESCRIPTION: Example YAML definition of an XBuckets composite resource that specifies a region and an array of bucket names. The composition function will create an AWS S3 bucket for each name in the array.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Deployment to Disable Usages Feature\nDESCRIPTION: Example showing how to disable the Usages feature by editing the Crossplane deployment and setting the --enable-usages flag to false. This requires modifying the deployment in the crossplane-system namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/usages.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl edit deployment crossplane --namespace crossplane-system\napiVersion: apps/v1\nkind: Deployment\nspec:\n# Removed for brevity\n  template:\n    spec:\n      containers:\n      - args:\n        - core\n        - start\n        - --enable-usages=false\n```\n\n----------------------------------------\n\nTITLE: Creating an XR YAML for Testing Crossplane Functions\nDESCRIPTION: Example XBuckets custom resource definition for testing the function. This defines the composite resource that the function will process, specifying region and bucket names.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Applying a Crossplane Claim\nDESCRIPTION: This YAML snippet defines a Crossplane Claim named `my-nosql-database` within the `crossplane-test` namespace. A Claim is a namespaced version of the custom API, allowing users to provision resources within their assigned namespaces.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.example.com/v1alpha1\nkind: NoSQLClaim\nmetadata:\n  name: my-nosql-database\n  namespace: crossplane-test\nspec:\n  location: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Granting Access to CloudNativePG Resources in YAML\nDESCRIPTION: This YAML snippet defines a ClusterRole that grants Crossplane access to manage CloudNativePG PostgreSQL clusters. It uses ClusterRole aggregation to add these permissions to Crossplane's primary ClusterRole.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/compositions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cnpg:aggregate-to-crossplane\n  labels:\n    rbac.crossplane.io/aggregate-to-crossplane: \"true\"\nrules:\n- apiGroups:\n  - postgresql.cnpg.io\n  resources:\n  - clusters\n  verbs:\n  - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Describing Provider Revisions\nDESCRIPTION: Detailed output from describing provider revisions, showing health status, conditions, and events including compatibility warnings.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/providers.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl describe providerrevisions\nName:         provider-aws-s3-92206523fff4\nAPI Version:  pkg.crossplane.io/v1\nKind:         ProviderRevision\nSpec:\n  Desired State:                  Active\n  Image:                          xpkg.crossplane.io/crossplane-contrib/provider-aws-s3:v1.21.1\n  Revision:                       1\nStatus:\n  Conditions:\n    Last Transition Time:  2023-10-10T21:06:39Z\n    Reason:                UnhealthyPackageRevision\n    Status:                False\n    Type:                  Healthy\n  Controller Ref:\n    Name:\nEvents:\n  Type     Reason             Age                From                                         Message\n  ----     ------             ----               ----                                         -------\n  Warning  LintPackage        41s (x3 over 47s)  packages/providerrevision.pkg.crossplane.io  incompatible Crossplane version: package isn't compatible with Crossplane version (v1.10.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Optional Labels in Crossplane\nDESCRIPTION: Shows how to set default values for optional labels by defining a Value selector first, then an Optional FromCompositeFieldPath selector. This allows fallback to a default value when the field is missing in the composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/environment-configs.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n          - type: Selector\n            selector:\n              matchLabels:\n                - key: my-first-label-key\n                  type: Value\n                  value: my-label-value\n                - key: my-second-label-key\n                  type: Value\n                  value: my-default-value\n                - key: my-second-label-key\n                  type: FromCompositeFieldPath\n                  valueFromFieldPath: spec.parameters.deploy\n                  fromFieldPathPolicy: Optional\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Crossplane ReconcileSuccess Condition Status\nDESCRIPTION: Example of the ReconcileSuccess condition status showing successful resource monitoring.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Synced\n  Status:                True\n  Reason:                ReconcileSuccess\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition with CompositeTypeRef in Crossplane\nDESCRIPTION: This YAML snippet shows a Composition definition with a compositeTypeRef that specifies which CompositeResourceDefinition it applies to. The compositeTypeRef links the Composition to the corresponding XRD via apiVersion and kind.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/composite-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: my-composition\nspec:\n  compositeTypeRef:\n    apiVersion: example.org/v1alpha1\n    kind: xMyDatabase\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: YAML Combining Copy and Highlight\nDESCRIPTION: Shows how to combine copying and highlighting options in a single annotation using comma-separated values.  The example copies lines 2-5 and highlights lines 2-3.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {copy-lines=\"2-5\", hl_lines=\"2-3\"}\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: aProvider\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Resource Type in YAML Composition\nDESCRIPTION: This YAML snippet shows how to define a Composition that allows a specific Composite Resource type to use the template. It specifies the apiVersion and kind of the Composite Resource in the compositeTypeRef field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/compositions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: dynamodb-with-bucket\nspec:\n  compositeTypeRef:\n    apiVersion: custom-api.example.org/v1alpha1\n    kind: database\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Instant.page Library Header for Crossplane Docs\nDESCRIPTION: License and attribution header for instant.page v5.2.0, a library that preloads pages on hover for faster navigation. The library is authored by Alexandre Dieulot and has its own license.\nSOURCE: https://github.com/crossplane/docs/blob/master/themes/geekboot/assets/js/main-727bf178.bundle.min.js.LICENSE.txt#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*! instant.page v5.2.0 - (C) 2019-2023 Alexandre Dieulot - https://instant.page/license */\n```\n\n----------------------------------------\n\nTITLE: Running a Crossplane Function Locally for Testing\nDESCRIPTION: This command runs a Crossplane function locally in insecure and debug mode for development testing. The insecure flag disables encryption and authentication, which should only be used during testing and development.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngo run . --insecure --debug\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Claims in a Namespace\nDESCRIPTION: This shell command lists all Crossplane claims in a specific namespace.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get claim -n crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane Pod Status After Initialization\nDESCRIPTION: Command to check the status of pods after the initialization is complete, showing the main Crossplane container running.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/pods.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS    RESTARTS   AGE\ncrossplane-9f6d5cd7b-r9j8w                 1/1     Running   0          15s\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Composition Reference in XRD\nDESCRIPTION: YAML configuration demonstrating how to set a default Composition reference for an XRD when multiple Compositions are available.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xdatabases.custom-api.example.org\nspec:\n  defaultCompositionRef: \n    name: myComposition\n  group: custom-api.example.org\n  names:\n  # Removed for brevity\n  versions:\n  # Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Installing Patch and Transform Function\nDESCRIPTION: A Kubernetes manifest to install the function-patch-and-transform package, which is required for using patch and transform functionality in Crossplane Compositions\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Function\nmetadata:\n  name: function-patch-and-transform\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/function-patch-and-transform:v0.8.2\n```\n\n----------------------------------------\n\nTITLE: YAML Custom Code Box Copy Lines\nDESCRIPTION: Demonstrates customizing the lines copied by the code box copy button using the `copy-lines` parameter. This allows specifying a range of lines to be copied, excluding the code fence itself.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {copy-lines=\"2-5\"}\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: aProvider\n```\n```\n\n----------------------------------------\n\nTITLE: Using a Custom XRD-defined Resource in YAML\nDESCRIPTION: This YAML example shows how to use a custom resource defined by an XRD. It creates an xDatabase resource with a 'region' specified in the spec.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/composite-resource-definitions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: custom-api.example.org/v1alpha1\nkind: xDatabase\nmetadata:\n  name: my-composite-resource\nspec: \n  region: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Network Provider in Kubernetes\nDESCRIPTION: Kubernetes configuration to install the Azure Network provider package into the cluster. This creates the necessary Custom Resource Definitions for managing Azure networking resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-azure.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-azure-network\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-azure-network:v1.11.2\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Edit ClusterRole in Kubernetes\nDESCRIPTION: This command displays the full RBAC policy for the crossplane-edit ClusterRole, which has full access to all Crossplane types, secrets, and read-only access to namespaces and events.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/pods.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe clusterrole crossplane-edit\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Storage Bucket Resource\nDESCRIPTION: Manifest for creating a managed GCP storage bucket resource through Crossplane. Specifies the bucket configuration including location and provider reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: storage.gcp.upbound.io/v1beta1\nkind: Bucket\nmetadata:\n  generateName: crossplane-bucket-\n  labels:\n    docs.crossplane.io/example: provider-gcp\nspec:\n  forProvider:\n    location: US\n  providerConfigRef:\n    name: default\n```\n\n----------------------------------------\n\nTITLE: Configuring ProviderConfigRef for AWS EC2 Instance\nDESCRIPTION: Demonstration of how to reference a specific ProviderConfig for an AWS EC2 Instance, showing the connection between managed resource and provider configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\nspec:\n  forProvider:\n    # Removed for brevity\n  providerConfigRef: user-keys\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.crossplane.io/v1beta1\nkind: ProviderConfig\nmetadata:\n  name: user-keys\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Verifying Provider Installation with kubectl\nDESCRIPTION: This shell command checks the status of installed providers in the Kubernetes cluster using kubectl. It displays the provider names, installation status, health, and package information.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get providers\n```\n\n----------------------------------------\n\nTITLE: Verifying Crossplane Pod Running Status\nDESCRIPTION: This shell command checks the status of Crossplane pods after the init container completes. It shows the pod in the Running state, indicating the core container is now active.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/pods.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n crossplane-system\nNAME                                       READY   STATUS    RESTARTS   AGE\ncrossplane-9f6d5cd7b-r9j8w                 1/1     Running   0          15s\n```\n\n----------------------------------------\n\nTITLE: Selecting EnvironmentConfigs in Composition Pipeline\nDESCRIPTION: Example showing how to select EnvironmentConfigs using function-environment-configs in a Composition pipeline.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/environment-configs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: environmentConfigs\n    functionRef:\n      name: function-environment-configs\n    input:\n      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1\n      kind: Input\n      spec:\n        environmentConfigs:\n        - type: Reference\n          ref:\n            name: example-environment\n        - type: Selector\n          selector:\n            matchLabels:\n```\n\n----------------------------------------\n\nTITLE: Deleting Crossplane Claims in a Namespace\nDESCRIPTION: This shell command deletes a Claim in a specific namespace, which triggers the deletion of all associated composite and managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/getting-started/provider-gcp-part-2.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete pubsubclaim my-pubsub-queue -n crossplane-test\n```\n\n----------------------------------------\n\nTITLE: Getting Composite Resources\nDESCRIPTION: This shell command retrieves the list of Crossplane composite resources. These are the top-level resources representing the entire set of infrastructure defined by a Composition and provisioned by a Claim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/provider-aws-part-2.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composite\n```\n\n----------------------------------------\n\nTITLE: Manual Update Policy VPC Configuration\nDESCRIPTION: YAML configuration for a VPC with manual update policy and specific composition revision reference.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composition-revisions.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  namespace: default\n  name: vpc-man\nspec:\n  id: vpc-man\n  crossplane:\n    compositionUpdatePolicy: Manual\n    compositionRevisionRef:\n      name: myvpcs.aws.example.upbound.io-ad265bc\n```\n\n----------------------------------------\n\nTITLE: Clipboard.js Library Header for Crossplane Docs\nDESCRIPTION: License and attribution header for clipboard.js v2.0.11, a library for copy-to-clipboard functionality. The library is licensed under MIT and authored by Zeno Rocha.\nSOURCE: https://github.com/crossplane/docs/blob/master/themes/geekboot/assets/js/main-727bf178.bundle.min.js.LICENSE.txt#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*!\n * clipboard.js v2.0.11\n * https://clipboardjs.com/\n *\n * Licensed MIT © Zeno Rocha\n */\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Credentials File\nDESCRIPTION: This INI-formatted file contains AWS access key credentials. It includes the aws_access_key_id and aws_secret_access_key for authenticating with AWS services.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = $@<aws_access_key>$@\naws_secret_access_key = $@<aws_secret_key>$@\n```\n\n----------------------------------------\n\nTITLE: Prometheus Annotations for Exposing Crossplane Metrics\nDESCRIPTION: Kubernetes deployment annotations that configure Prometheus scraping for Crossplane metrics. These annotations specify the scrape path, port, and enable scraping.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.io/path: /metrics\nprometheus.io/port: \"8080\"\nprometheus.io/scrape: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Configuration Package\nDESCRIPTION: Helm command to install Crossplane with an automatic configuration package installation. This enables reproducible platform deployments across multiple clusters.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/multi-tenant.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install crossplane --namespace crossplane-system crossplane-stable/crossplane --set configuration.packages='{\"registry.upbound.io/xp/getting-started-with-aws:latest\"}'\n```\n\n----------------------------------------\n\nTITLE: Viewing Full Helm Dry Run Output\nDESCRIPTION: Example of executing a Helm dry-run installation of Crossplane, showing the complete manifest output including all Kubernetes resources that would be created, such as ServiceAccounts, Secrets, ClusterRoles, and RBAC configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/install-crossplane-include.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--dry-run --debug \\\n--namespace crossplane-system \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Deleting a Crossplane Claim\nDESCRIPTION: This shell command deletes a Crossplane Claim, which in turn deletes all associated composite and managed resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/getting-started/provider-aws-part-2.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete claim -n crossplane-test my-nosql-database\n```\n\n----------------------------------------\n\nTITLE: Custom External Resource Naming with Annotations\nDESCRIPTION: Example of using the crossplane.io/external-name annotation to specify a custom name for the external resource that differs from the Kubernetes object name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/managed-resources.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: database.aws.crossplane.io/v1beta1\nkind: RDSInstance\nmetadata:\n  name: my-rds-instance  \n  annotations: \n    crossplane.io/external-name: my-custom-name\n```\n\n----------------------------------------\n\nTITLE: Creating XR with Staging Channel Selector\nDESCRIPTION: Creates a Crossplane XR with a composition revision selector targeting the staging channel.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composition-revisions.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: aws.example.upbound.io/v1alpha1\nkind: MyVPC\nmetadata:\n  namespace: default\n  name: vpc-staging\nspec:\n  id: vpc-staging\n  crossplane:\n    compositionRevisionSelector:\n      matchLabels:\n        channel: staging\n```\n\n----------------------------------------\n\nTITLE: Rendering Crossplane Resources with CLI\nDESCRIPTION: This command uses the Crossplane CLI to render the desired resources based on the provided XR, Composition, and Function YAML files.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane render xr.yaml composition.yaml functions.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane Helm Chart\nDESCRIPTION: Installs Crossplane using Helm into the crossplane-system namespace. This command creates the namespace if it doesn't exist and installs the latest version of Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/install.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace crossplane-stable/crossplane\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for ARM64\nDESCRIPTION: Builds a Docker runtime image for linux/arm64 platform with a quiet output flag. The resulting image is tagged as runtime-arm64.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/arm64 --tag runtime-arm64\n```\n\n----------------------------------------\n\nTITLE: Front Matter for Alpha Features in Crossplane Documentation\nDESCRIPTION: YAML front matter example for alpha features in Crossplane documentation. This includes the alpha state designation and the version that introduced the feature.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/contribute.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Composition Functions\nstate: alpha\nalphaVersion: \"1.11\"\n---\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Provider for DynamoDB\nDESCRIPTION: Applies a Kubernetes manifest to install the AWS Provider for DynamoDB using Crossplane.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws-dynamodb\nspec:\n  package: xpkg.crossplane.io/crossplane-contrib/provider-aws-dynamodb:v1.21.1\n```\n\n----------------------------------------\n\nTITLE: Building Docker Runtime Image for AMD64\nDESCRIPTION: Builds a Docker runtime image for the linux/amd64 platform using the Dockerfile in the current directory. The image is tagged as runtime-amd64.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --quiet --platform=linux/amd64 --tag runtime-amd64\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Revision Activation Policy\nDESCRIPTION: YAML configuration for setting the revision activation policy to 'Manual' for a Crossplane Configuration. This prevents automatic activation of new configuration revisions.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/packages.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Configuration\nmetadata:\n  name: platform-ref-aws\nspec:\n  revisionActivationPolicy: Manual\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: AWS Subnet Resource with External VPC Reference\nDESCRIPTION: Example showing how to reference another resource by its external name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Subnet\nspec:\n  forProvider:\n    # Removed for brevity\n    vpcId: vpc-01353cfe93950a8ff\n```\n\n----------------------------------------\n\nTITLE: Describing ProviderRevisions with kubectl\nDESCRIPTION: This shell command provides detailed information about ProviderRevisions, including health status, events, and compatibility issues.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/providers.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe providerrevisions\n```\n\n----------------------------------------\n\nTITLE: Provider Revision Activation Policy\nDESCRIPTION: Example showing how to configure the revision activation policy for controlling Provider upgrades.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: provider-aws\nspec:\n  revisionActivationPolicy: Manual\n# Removed for brevity\n```\n\n----------------------------------------\n\nTITLE: Crossplane Creating Condition Status\nDESCRIPTION: Example of the Creating condition status showing a resource in the process of being created.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  Ready\n  Status:                False\n  Reason:                Creating\n```\n\n----------------------------------------\n\nTITLE: Viewing CombineToComposite Results in Composite Resource\nDESCRIPTION: This snippet shows the result of applying a CombineToComposite patch, displaying the combined URL in the composite resource's status.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl describe composite\nName:         my-example-claim-bjdjw\nAPI Version:  example.org/v1alpha1\nKind:         xExample\n# Removed for brevity\nStatus:\n  # Removed for brevity\n  URL:                     https://my-example-claim-bjdjw-r6ncd.us-east-2.com\n```\n\n----------------------------------------\n\nTITLE: Managed Resource with Map Transform Result\nDESCRIPTION: Displays the resulting managed resource with the transformed annotation value.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl describe bucket\nName:         my-example-claim-twx7n-ndb2f\nAnnotations:  crossplane.io/composition-resource-name: bucket1\n              myAnnotation: firstField\n# Removed for brevity.\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Example with Map Transform\nDESCRIPTION: Shows the structure of a composite resource using the map transform with field1 value set.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n$ kubectl describe composite\nName:         my-example-claim-twx7n\nSpec:\n  # Removed for brevity\n  field1:         field1-text\n```\n\n----------------------------------------\n\nTITLE: Vault Configuration for Crossplane Plugin\nDESCRIPTION: YAML configuration for connecting Crossplane plugin to Vault service.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.crossplane.io/v1alpha1\nkind: VaultConfig\nmetadata:\n  name: vault-internal\nspec:\n  server: http://vault.vault-system:8200\n  mountPath: secret/\n  version: v2\n  auth:\n    method: Token\n    token:\n      source: Filesystem\n      fs:\n        path: /vault/secrets/token\n```\n\n----------------------------------------\n\nTITLE: Defining AWS EC2 Instance Resource in YAML\nDESCRIPTION: Example showing the basic structure of defining a managed resource with group, kind and version.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\n```\n\n----------------------------------------\n\nTITLE: Applying Vault Policy to Kubernetes Role\nDESCRIPTION: Applies the Crossplane policy to a Kubernetes role in Vault.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/vault-as-secret-store.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -it vault-0 -- vault write auth/kubernetes/role/crossplane \\\n    bound_service_account_names=\"*\" \\\n    bound_service_account_namespaces=crossplane-system \\\n    policies=crossplane \\\n    ttl=24h\n```\n\n----------------------------------------\n\nTITLE: Displaying Resource Usage of Crossplane Pods\nDESCRIPTION: This command shows CPU and memory usage of Crossplane-related pods using the crossplane beta top command.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta top\n```\n\n----------------------------------------\n\nTITLE: Examining Provider Dependency Issues with kubectl describe\nDESCRIPTION: This command examines the detailed status of provider revisions to troubleshoot dependency or compatibility issues, providing information about warnings and errors.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/providers.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe providerrevisions\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Example\nDESCRIPTION: Demonstrates how to use the defined XRD schema in a composite resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/concepts/composite-resource-definitions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: custom-api.example.org/v1alpha1\nkind: xDatabase\nmetadata:\n  name: my-composite-resource\nspec: \n  region: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Match Transform with Literal Pattern\nDESCRIPTION: Example of a match transform using literal string matching to transform field values based on exact matches.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/function-patch-and-transform.md#2025-04-21_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.field1\n    toFieldPath: metadata.annotations[\"myAnnotation\"]\n    transforms:\n      - type: match\n        match:\n          patterns:\n            - type: literal\n              literal: \"field1-text\"\n              result: \"matchedLiteral\"\n```\n\n----------------------------------------\n\nTITLE: Upjet DestroyFailure Condition Example\nDESCRIPTION: Shows the condition structure when an Upjet-based provider fails to delete a managed resource.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/concepts/managed-resources.md#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nConditions:\n  Type:                  LastAsyncOperation\n  Status:                False\n  Reason:                DestroyFailure\n```\n\n----------------------------------------\n\nTITLE: Validating Managed Resource Against Provider Schema\nDESCRIPTION: Demonstrates how to use the crossplane beta validate command to validate a managed resource against a provider schema.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/command-reference.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta validate provider.yaml managedResource.yaml\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics in Crossplane Helm Chart\nDESCRIPTION: Configuration snippet for enabling metrics export in the Crossplane Helm chart. Set metrics.enabled to true to activate metrics collection.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Composition in Crossplane\nDESCRIPTION: This YAML snippet defines a Composition in Crossplane, specifying the apiVersion and kind as well as the compositeTypeRef that dictates which Composite Resources can use this Composition template.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/getting-started/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: test.example.org\nspec:\n  compositeTypeRef:\n    apiVersion: test.example.org/v1alpha1\n    kind: MyComputeResource\n    # Removed for brevity\n\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository\nDESCRIPTION: Command to update the local Helm chart repository to ensure latest versions are available.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/upgrade-crossplane.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: PatchSet Example\nDESCRIPTION: Example showing how to create and reuse a PatchSet across multiple resources.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\npatchSets:\n- name: my-patchset\n  patches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: spec.forProvider.region\nresources:\n- name: bucket1\n  base:\n  patches:\n    - type: PatchSet\n      patchSetName: my-patchset\n- name: bucket2\n  base:\n  patches:\n    - type: PatchSet\n      patchSetName: my-patchset\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane with Values File\nDESCRIPTION: Example of installing Crossplane using a custom values file for configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/software/install.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\n--namespace crossplane-system \\\n--create-namespace \\\ncrossplane-stable/crossplane \\\n-f settings.yaml\n```\n\n----------------------------------------\n\nTITLE: Prometheus Annotations for Metrics Exposure\nDESCRIPTION: Kubernetes deployment annotations required to expose Crossplane metrics to Prometheus for scraping.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus.io/path: /metrics\nprometheus.io/port: \"8080\"\nprometheus.io/scrape: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Crossplane Packages Documentation\nDESCRIPTION: YAML frontmatter used to define metadata for a documentation page about Crossplane packages. It specifies the title, weight (for ordering in navigation), and a brief description of the content.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/packages/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Packages\nweight: 53\ndescription: Understand Crossplane's core components\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Composition Status via kubectl\nDESCRIPTION: A shell command to verify the Composition has been correctly applied to the cluster. This shows the relationship between the Composition and the custom API it implements.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/provider-aws-part-2.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get composition\nNAME                 XR-KIND   XR-APIVERSION                   AGE\ndynamo-with-bucket   NoSQL     database.example.com/v1alpha1   3s\n```\n\n----------------------------------------\n\nTITLE: Listing Custom API Resources in Shell\nDESCRIPTION: This shell command lists resources of a specific custom API type (mydatabases in this example), showing their name, sync status, readiness, associated composition, and age.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/composite-resources.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get mydatabases\n```\n\n----------------------------------------\n\nTITLE: Deleting Crossplane Providers\nDESCRIPTION: This command demonstrates how to delete a specific Crossplane provider.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/software/uninstall.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete provider crossplane-contrib-provider-aws\n```\n\n----------------------------------------\n\nTITLE: Mock Resource Configuration Example\nDESCRIPTION: Example YAML configuration for mocking a composed resource when using the render command with observed-resources option\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/cli/command-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.org/v1alpha1\nkind: ComposedResource\nmetadata:\n  name: test-render-b\n  annotations:\n    crossplane.io/composition-resource-name: resource-b\nspec:\n  coolerField: \"I'm cooler!\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Vault Shell\nDESCRIPTION: Opens a shell inside the Vault pod for configuration.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/vault-as-secret-store.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -it vault-0 -- /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Installing specific Crossplane CLI version\nDESCRIPTION: Downloads and installs a specific version (v1.14.0) of the Crossplane CLI using environment variables with the installation script.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/cli/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL \"https://raw.githubusercontent.com/crossplane/crossplane/main/install.sh\" | XP_VERSION=v1.14.0 sh\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Object Name for Imported Resource\nDESCRIPTION: YAML configuration demonstrating how to set the Kubernetes object name for an imported resource, which can be different from the external resource name.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/import-existing-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: compute.gcp.crossplane.io/v1beta1\nkind: Network\nmetadata:\n  name: imported-network\n  annotations:\n    crossplane.io/external-name: my-existing-network\n```\n\n----------------------------------------\n\nTITLE: Defining XBuckets Composite Resource in YAML\nDESCRIPTION: YAML definition of an XBuckets composite resource (XR) that specifies a region and array of bucket names for AWS S3 buckets.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/write-a-composition-function-in-go.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Pausing Crossplane Resource Reconciliation with YAML\nDESCRIPTION: Example showing how to pause reconciliation of a Crossplane managed resource by adding the crossplane.io/paused annotation. Used to prevent race conditions or when modifying providers.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/concepts/managed-resources.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: ec2.aws.upbound.io/v1beta1\nkind: Instance\nmetadata:\n  name: my-rds-instance\n  annotations:\n    crossplane.io/paused: \"true\"\nspec:\n  forProvider:\n    region: us-west-1\n    instanceType: t2.micro\n```\n\n----------------------------------------\n\nTITLE: Secret Description Command\nDESCRIPTION: Shows the kubectl command to view secret keys inside a secret object.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe secret\n```\n\n----------------------------------------\n\nTITLE: Describing a Composite Resource using kubectl\nDESCRIPTION: This shell command uses kubectl to describe a Composite Resource, showing its details including the reference to the original Claim.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/concepts/claims.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe xmydatabase.example.org/my-claimed-database-rr4ll\nName:         my-claimed-database-rr4ll\nAPI Version:  example.org/v1alpha1\nKind:         XMyDatabase\nSpec:\n  Claim Ref:\n    API Version:  example.org/v1alpha1\n    Kind:         database\n    Name:         my-claimed-database\n    Namespace:    default\n```\n\n----------------------------------------\n\nTITLE: Hiding Package Revisions with Crossplane CLI\nDESCRIPTION: Example of using the 'crossplane beta trace' command to hide all package revisions using the '--show-package-revisions none' flag.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/cli/command-reference.md#2025-04-21_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-revisions none\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Document Links\nDESCRIPTION: Example of creating internal document links using Hugo ref shortcode for better link management.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/features.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[master branch documentation]({{</* ref \"master/_index.md\" */>}})\n```\n\n----------------------------------------\n\nTITLE: Combining Resource Values to Environment in Crossplane\nDESCRIPTION: Demonstrates CombineToEnvironment patch usage to combine resource kind and region into a environment variable. Uses string formatting to combine values into key2 environment variable.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/function-patch-and-transform.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: bucket1\n  base:\n    apiVersion: s3.aws.upbound.io/v1beta1\n    kind: Bucket\n    spec:\n      forProvider:\n        region: us-east-2\n  patches:\n    - type: CombineToEnvironment\n      combine:\n        strategy: string\n        variables:\n        - fromFieldPath: kind\n        - fromFieldPath: spec.forProvider.region\n        string:\n          fmt: \"%s.%s\"\n      toFieldPath: key2\n```\n\n----------------------------------------\n\nTITLE: Matching True Boolean in Crossplane Composition (YAML)\nDESCRIPTION: This snippet shows the MatchTrue readiness check, which considers the resource ready when a specified field in the resource has a value of true. It checks the status.atProvider.manifest.status.ready field.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/function-patch-and-transform.md#2025-04-21_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: pt.fn.crossplane.io/v1beta1\nkind: Resources\nresources:\n- name: my-resource\n  base:\n    # Removed for brevity\n  readinessChecks:\n    - type: MatchTrue\n      fieldPath: status.atProvider.manifest.status.ready\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Policy for Crossplane\nDESCRIPTION: Commands to create and apply Vault policies for Crossplane access.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/master/guides/vault-as-secret-store.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n vault-system exec -i vault-0 -- vault policy write crossplane - <<EOF\npath \"secret/data/*\" {\n    capabilities = [\"create\", \"read\", \"update\", \"delete\"]\n}\npath \"secret/metadata/*\" {\n    capabilities = [\"create\", \"read\", \"update\", \"delete\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Deleting Crossplane Namespace\nDESCRIPTION: Command to remove the Crossplane system namespace from the cluster.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/software/uninstall.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete namespace crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Environment Patching in Crossplane\nDESCRIPTION: Demonstrates patching between Composite resource and environment using function-patch-and-transform. Shows ToCompositeFieldPath and FromCompositeFieldPath patch types.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/composition/environment-configs.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: example-composition\nspec:\n  mode: Pipeline\n  pipeline:\n  - step: patch-and-transform\n    functionRef:\n      name: function-patch-and-transform\n    input:\n      apiVersion: pt.fn.crossplane.io/v1beta1\n      kind: Resources\n      environment:\n        patches:\n        - type: ToCompositeFieldPath\n          fromFieldPath: tags\n          toFieldPath: metadata.labels[envTag]\n        - type: FromCompositeFieldPath\n          fromFieldPath: metadata.name\n          toFieldPath: newEnvironmentKey\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Package Dependencies\nDESCRIPTION: Shows the complete dependency tree for a Crossplane configuration package using the beta trace command with --show-package-dependencies flag set to 'all'. The output displays package names, versions, installation status, health status, and hierarchical relationships.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/cli/command-reference.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace configuration platform-ref-aws --show-package-dependencies all\n```\n\n----------------------------------------\n\nTITLE: HTML Hover Shortcode Example\nDESCRIPTION: Shows the HTML shortcode used to trigger dynamic line highlighting, linking a label and line number to a specific word. The `hover` shortcode is used to define the interactive element.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/contribute/code-style-guide.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{{</* hover label=\"example\" line=\"2\" */>}}commmand{{</* /hover */>}}\n```\n\n----------------------------------------\n\nTITLE: Defining XBuckets Custom Resource in YAML\nDESCRIPTION: YAML definition of an XBuckets composite resource (XR) that specifies region and bucket names for AWS S3 buckets to be created.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.18/guides/write-a-composition-function-in-python.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: example.crossplane.io/v1\nkind: XBuckets\nmetadata:\n  name: example-buckets\nspec:\n  region: us-east-2\n  names:\n  - crossplane-functions-example-a\n  - crossplane-functions-example-b\n  - crossplane-functions-example-c\n```\n\n----------------------------------------\n\nTITLE: Crossplane Helm Installation Manifest\nDESCRIPTION: Detailed Kubernetes manifest output from the Helm dry-run showing all resources that would be created including ServiceAccounts, Secrets, ClusterRoles, and RBAC configurations.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.17/getting-started/install-crossplane-include.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install crossplane \\\ncrossplane-stable/crossplane \\\n--dry-run --debug \\\n--namespace crossplane-system \\\n--create-namespace\ninstall.go:214: [debug] Original chart version: \"\"\ninstall.go:216: [debug] setting version to >0.0.0-0\ninstall.go:231: [debug] CHART PATH: /Users/plumbis/Library/Caches/helm/repository/crossplane-1.15.0.tgz\n\nNAME: crossplane\nLAST DEPLOYED: Mon Feb 12 14:46:15 2024\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\n{}\n\nCOMPUTED VALUES:\naffinity: {}\nargs: []\nconfiguration:\n  packages: []\ncustomAnnotations: {}\ncustomLabels: {}\ndeploymentStrategy: RollingUpdate\nextraEnvVarsCrossplane: {}\nextraEnvVarsRBACManager: {}\nextraObjects: []\nextraVolumeMountsCrossplane: {}\nextraVolumesCrossplane: {}\nfunction:\n  packages: []\nhostNetwork: false\nimage:\n  pullPolicy: IfNotPresent\n  repository: xpkg.crossplane.io/crossplane/crossplane\n  tag: \"\"\nimagePullSecrets: {}\nleaderElection: true\nmetrics:\n  enabled: false\nnodeSelector: {}\npackageCache:\n  configMap: \"\"\n  medium: \"\"\n  pvc: \"\"\n  sizeLimit: 20Mi\npodSecurityContextCrossplane: {}\npodSecurityContextRBACManager: {}\npriorityClassName: \"\"\nprovider:\n  packages: []\nrbacManager:\n  affinity: {}\n  args: []\n  deploy: true\n  leaderElection: true\n  nodeSelector: {}\n  replicas: 1\n  skipAggregatedClusterRoles: false\n  tolerations: []\nregistryCaBundleConfig:\n  key: \"\"\n  name: \"\"\nreplicas: 1\nresourcesCrossplane:\n  limits:\n    cpu: 100m\n    memory: 512Mi\n  requests:\n    cpu: 100m\n    memory: 256Mi\nresourcesRBACManager:\n  limits:\n    cpu: 100m\n    memory: 512Mi\n  requests:\n    cpu: 100m\n    memory: 256Mi\nsecurityContextCrossplane:\n  allowPrivilegeEscalation: false\n  readOnlyRootFilesystem: true\n  runAsGroup: 65532\n  runAsUser: 65532\nsecurityContextRBACManager:\n  allowPrivilegeEscalation: false\n  readOnlyRootFilesystem: true\n  runAsGroup: 65532\n  runAsUser: 65532\nserviceAccount:\n  customAnnotations: {}\ntolerations: []\nwebhooks:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: TrimSuffix String Transformation in Crossplane YAML\nDESCRIPTION: Illustrates the use of TrimSuffix transformation to remove characters from the end of a string value in Crossplane patches. It uses Go's TrimSuffix function.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v2.0-preview/guides/function-patch-and-transform.md#2025-04-21_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n  - type: FromCompositeFieldPath\n    fromFieldPath: spec.desiredRegion\n    toFieldPath: metadata.annotations[\"eu\"]\n    transforms:\n      - type: string\n        string:\n          type: TrimSuffix\n          trim: `-north-1'\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Crossplane Guide Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for a documentation page about Crossplane guides. Sets the title, weight for navigation ordering, and provides a description of the content.\nSOURCE: https://github.com/crossplane/docs/blob/master/content/v1.19/guides/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Guides\nweight: 100\ndescription: Crossplane integrations and detailed examples.\n---\n```"
  }
]