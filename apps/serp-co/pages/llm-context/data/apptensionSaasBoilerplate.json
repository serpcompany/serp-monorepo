[
  {
    "owner": "apptension",
    "repo": "saas-boilerplate",
    "content": "TITLE: Starting Backend Services in SaaS Boilerplate\nDESCRIPTION: This command starts all backend services, initializing the backend environment for the SaaS Boilerplate project.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas backend up\n\nDESCRIPTION\n  Starts all backend services\n\nEXAMPLES\n  $ saas backend up\n```\n\n----------------------------------------\n\nTITLE: Starting Backend and Frontend Command\nDESCRIPTION: Command for starting both backend and frontend services simultaneously.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas up\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Payment Confirmation Hook in TypeScript\nDESCRIPTION: This React hook uses the Stripe Elements and Stripe.js libraries to confirm a payment. It collects card information and confirms the payment using the provided payment intent.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/payments/one-time-payment-form.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StripePaymentIntentType } from '@sb/webapp-api-client/graphql';\nimport {\n  CardNumberElement,\n  useElements,\n  useStripe,\n} from '@stripe/react-stripe-js';\n\nexport const useStripePayment = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const confirmPayment = async (paymentIntent: StripePaymentIntentType) => {\n    if (!stripe) return null;\n\n    const card = elements?.getElement(CardNumberElement) ?? null;\n    if (!card) return null;\n\n    return await stripe.confirmCardPayment(paymentIntent.clientSecret, {\n      payment_method: {\n        card,\n      },\n    });\n  };\n\n  return { confirmPayment };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic React Component Structure\nDESCRIPTION: Main component file implementing a basic React component with internationalization support using react-intl.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/create-react-component.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FormattedMessage } from 'react-intl';\n\nimport { Container } from './example.styles';\n\nexport const ExampleComponent = () => {\n  return (\n    <Container>\n      <h1>\n        <FormattedMessage defaultMessage=\"Example component message\" id=\"ExampleComponent / Header message\" />\n      </h1>\n    </Container>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing User Signup and Sending Activation Email in Python\nDESCRIPTION: This snippet demonstrates the process of user signup and sending an activation email. It includes creating a user, generating JWT tokens, and sending an account activation email using the custom AccountActivationEmail class. The code is part of a Django REST Framework serializer.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/emails/send-email.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import auth as dj_auth\nfrom django.contrib.auth.models import update_last_login\nfrom rest_framework import serializers\nfrom rest_framework_simplejwt import tokens as jwt_tokens\nfrom rest_framework_simplejwt.settings import api_settings as jwt_api_settings\n\nfrom . import tokens, notifications\n\n\nclass UserSignupSerializer(serializers.ModelSerializer):\n    # ...\n\n    def create(self, validated_data):\n        user = dj_auth.get_user_model().objects.create_user(\n            validated_data[\"email\"],\n            validated_data[\"password\"],\n        )\n\n        refresh = jwt_tokens.RefreshToken.for_user(user)\n\n        if jwt_api_settings.UPDATE_LAST_LOGIN:\n            update_last_login(None, user)\n\n        notifications.AccountActivationEmail(\n            user=user, data={'user_id': user.id.hashid, 'token': tokens.account_activation_token.make_token(user)}\n        ).send()\n\n        return {'id': user.id, 'email': user.email, 'access': str(refresh.access_token), 'refresh': str(refresh)}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Model\nDESCRIPTION: Definition of a Product model with HashidAutoField and CharField\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/backend/backend-model.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport hashid_field\nfrom django.db import models\n\n\nclass Product(models.Model):\n  id = hashid_field.HashidAutoField(primary_key=True)\n  name = models.CharField(max_length=255)\n```\n\n----------------------------------------\n\nTITLE: Installing SaaS Boilerplate using yarn\nDESCRIPTION: Command to set up a new SaaS Boilerplate project using yarn in a specified directory.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create saas-boilerplate PATH\n```\n\n----------------------------------------\n\nTITLE: Testing React Component with Apollo Query and Loading State\nDESCRIPTION: Implements a test for the ExampleComponent, verifying both the loading state and successful data rendering using mocked Apollo query results.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/component-with-query.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { composeMockedQueryResult } from '@sb/webapp-api-client/tests/utils';\nimport { screen } from '@testing-library/react';\nimport { append } from 'ramda';\n\nimport { render } from '../../../../tests/utils/rendering';\nimport { ExampleComponent } from '../example.component';\n\ndescribe('ExampleComponent: Component', () => {\n  const Component = () => <ExampleComponent />;\n\n  it('should render user name', async () => {\n    const todo = { id: 1, name: 'Todo' };\n    const loadingText = 'Loading...';\n\n    render(<Component />, { apolloMocks: append(composeMockedQueryResult({\n      data: {\n        todo\n      }\n    }))});\n\n    expect(await screen.findByText(loadingText)).toBeInTheDocument();\n\n    expect(await screen.findByText(firstName)).toBeInTheDocument();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Intent GraphQL Mutation in Python\nDESCRIPTION: This snippet shows how to create a GraphQL mutation for the Payment Intent creation. It uses the previously defined serializer to handle the creation process.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/payments/one-time-payment-form.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom djstripe import models as djstripe_models\n\nfrom common.graphql import mutations\nfrom . import serializers\n\nclass CreatePaymentIntentMutation(mutations.CreateModelMutation):\n    class Meta:\n        model = djstripe_models.PaymentIntent\n        serializer_class = serializers.PaymentIntentSerializer\n\n\nclass Mutation(graphene.ObjectType):\n    create_payment_intent = CreatePaymentIntentMutation.Field()\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Type and Connection for Product in Python\nDESCRIPTION: Creates GraphQL types and connections for the Product model using Graphene Django, enabling automatic schema generation.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/adding-new-mutation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom graphene import relay\nfrom graphene_django import DjangoObjectType\n\nfrom . import models\n\nclass ProductType(DjangoObjectType):\n    class Meta:\n        model = models.Product\n        interfaces = (relay.Node,)\n        fields = \"__all__\"\n\n\nclass ProductConnection(graphene.Connection):\n    class Meta:\n        node = ProductType\n```\n\n----------------------------------------\n\nTITLE: Testing React Component with Todo Collection and Loading State\nDESCRIPTION: Implements a test for the ExampleComponent that verifies the rendering of a todo collection, including the loading state and successful data display.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/component-with-query.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { composeMockedListQueryResult } from '@sb/webapp-api-client/tests/utils';\nimport { screen } from '@testing-library/react';\nimport { append } from 'ramda';\n\nimport { render } from '../../../../tests/utils/rendering';\nimport { ExampleComponent } from '../example.component';\n\ndescribe('ExampleComponent: Component', () => {\n  const Component = () => <ExampleComponent />;\n\n  it('should render list', async () => {\n    const todos = [{ id: 1, name: 'Todo 1' }, { id: 2, name: 'Todo 2' }];\n    const loadingText = 'Loading...';\n\n    render(<Component />, {\n      apolloMocks: append(\n        composeMockedListQueryResult(todosQuery, 'todos', 'todosQuery', { data: todos })\n      ),\n    });\n\n    expect(await screen.findByText(loadingText)).toBeInTheDocument();\n\n    expect(await screen.findByText(todos[0].name)).toBeInTheDocument();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Django Migration for New User Role (Python)\nDESCRIPTION: This migration file defines functions to create and remove the new Support role. It uses RunPython operation to apply these functions during migration.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/create-role.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\nfrom common.acl.helpers import CommonGroups\n\n\ndef create_support_role(apps, schema_editor):\n    db_alias = schema_editor.connection.alias\n\n    Group = apps.get_model(\"auth\", \"Group\")\n    Group.objects.using(db_alias).create(name=CommonGroups.Support)\n\n\ndef remove_support_role(apps, schema_editor):\n    Group = apps.get_model(\"auth\", \"Group\")\n    Group.objects.filter(name=CommonGroups.Support).delete()\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('users', '0006_case_insensitive_collation'),\n    ]\n\n    operations = [\n        migrations.RunPython(create_support_role, remove_support_role),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Adding Form Control to React Component\nDESCRIPTION: Enhances the form component by adding an input field for the product name, including validation and internationalization.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/form-with-mutation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Input } from '@sb/webapp-core/components/forms';\nimport { Button } from '@sb/webapp-core/components/buttons';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { useCreateProductForm } from './productForm.hooks'\n\nexport const ProductForm = () => {\n  const intl = useIntl();\n  const {\n    form: {\n      register,\n      formState: { errors, isSubmitting },\n    },\n    handleSubmit,\n  } = useCreateProductForm();\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        {...register('name', {\n          required: {\n            value: true,\n            message: intl.formatMessage({\n              defaultMessage: 'Name is required',\n              id: 'Product form / Name required',\n            }),\n          },\n        })}\n        label={intl.formatMessage({\n          defaultMessage: 'Name:',\n          id: 'Product Form / Name label',\n        })}\n        placeholder={intl.formatMessage({\n          defaultMessage: 'Name',\n          id: 'Product form / Name placeholder',\n        })}\n        error={errors.name?.message}\n      />\n\n      <Button type=\"submit\" disabled={isSubmitting}>\n        <FormattedMessage defaultMessage=\"Submit\" id=\"Product form / Submit button\" />\n      </Button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Intent Serializer in Python\nDESCRIPTION: This code defines a Django REST Framework serializer for creating a Stripe Payment Intent. It handles the creation of a customer and a payment intent for a fixed amount of $15.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/payments/one-time-payment-form.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom djstripe import models as djstripe_models\nfrom rest_framework import serializers, exceptions\n\n\nclass PaymentIntentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = djstripe_models.PaymentIntent\n        fields = ('id', 'amount', 'currency', 'client_secret')\n        read_only_fields = ('id', 'amount', 'currency', 'client_secret')\n\n    def create(self, validated_data):\n        request = self.context['request']\n\n        (customer, _) = djstripe_models.Customer.get_or_create(request.user)\n        payment_intent_response = djstripe_models.PaymentIntent._api_create(\n            amount=15*100, # $15\n            currency=\"usd\",\n            customer=customer.id,\n            setup_future_usage=\"off_session\",\n        )\n        return djstripe_models.PaymentIntent.sync_from_stripe_data(payment_intent_response)\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Product Mutation in Python\nDESCRIPTION: Defines an UpdateModelMutation for updating existing Product objects, using the ProductSerializer and ProductConnection.Edge.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/adding-new-mutation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateProductMutation(mutations.UpdateModelMutation):\n    class Meta:\n        serializer_class = serializers.ProductSerializer\n        edge_class = ProductConnection.Edge\n```\n\n----------------------------------------\n\nTITLE: Testing Components with Apollo Query Mocks\nDESCRIPTION: Shows how to test components that depend on GraphQL queries using Apollo mocks and custom user factories.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/webapp.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { currentUserFactory, fillCommonQueryWithUser } from '@sb/webapp-api-client/tests/factories';\nimport { Role } from '../../../../../modules/auth/auth.types';\nimport { render } from '../../../../../tests/utils/rendering';\n\n//...\nit('should render ', async () => {\n  const apolloMocks = [\n    fillCommonQueryWithUser(\n      currentUserFactory({\n        roles: [Role.ADMIN],\n      })\n    )\n  ];\n  const { waitForApolloMocks } = render(<Component />, {\n    apolloMocks,\n  });\n\n  await waitForApolloMocks();\n\n  expect(screen.getByText('Rendered')).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Updating UserProfileSerializer for New Field in Django\nDESCRIPTION: This snippet updates the UserProfileSerializer to include the new phone_number field. It modifies the Meta class to add the new field to the list of updatable fields.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/create-profile-field.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\nfrom . import models\n\n\nclass UserProfileSerializer(serializers.ModelSerializer):\n    # ...\n\n    class Meta:\n        model = models.UserProfile\n        fields = (\n            # ...\n            \"phone_number\"\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Task Class in Python\nDESCRIPTION: Demonstrates how to create a custom task class that inherits from LambdaTask. This example shows the dynamic import of the base task handler and implementation of a basic task class with name and source configuration.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/run-async-job-lambda.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport importlib\nfrom django.conf import settings\n\nmodule_name, package = settings.LAMBDA_TASKS_BASE_HANDLER.rsplit(\".\", maxsplit=1)\nLambdaTask = getattr(importlib.import_module(module_name), package)\n\n\nclass ExampleTask(LambdaTask):\n    def __init__(self):\n        super().__init__(name=\"example_task\", source='backend.example_task')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Email Classes for User Notifications in Python\nDESCRIPTION: This code defines custom email classes for sending user notifications. It includes a base UserEmail class and a specific AccountActivationEmail class that inherits from it. These classes utilize the common.emails.Email base class and specify serializers for email data.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/emails/send-email.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom common import emails\nfrom . import email_serializers\n\n\nclass UserEmail(emails.Email):\n    def __init__(self, user, data=None):\n        super().__init__(to=user.email, data=data)\n\n\nclass AccountActivationEmail(UserEmail):\n    name = 'ACCOUNT_ACTIVATION'\n    serializer_class = email_serializers.AccountActivationEmailSerializer\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Product Mutation in Python\nDESCRIPTION: Defines a DeleteModelMutation for removing Product objects from the database, specifying the Product model in the Meta class.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/adding-new-mutation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass DeleteProductMutation(mutations.DeleteModelMutation):\n    class Meta:\n        model = models.Product\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Payment Intent Hook in TypeScript\nDESCRIPTION: This React hook uses Apollo Client to create a Stripe Payment Intent. It wraps the GraphQL mutation and provides a simple interface for creating payment intents.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/payments/one-time-payment-form.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMutation } from '@apollo/client';\nimport { StripePaymentIntentType, gql } from '@sb/webapp-api-client/graphql';\nimport { GraphQLError } from 'graphql';\n\nexport const stripeCreatePaymentIntentMutation = gql(/* GraphQL */ `\n  mutation stripeCreatePaymentIntentMutation_(\n    $input: CreatePaymentIntentMutationInput!\n  ) {\n    createPaymentIntent(input: $input) {\n      paymentIntent {\n        id\n        amount\n        clientSecret\n        currency\n        pk\n      }\n    }\n  }\n`);\n\nexport const useStripePaymentIntent = () => {\n  const [commitCreatePaymentIntentMutation, { loading }] = useMutation(\n    stripeCreatePaymentIntentMutation\n  );\n\n  const createPaymentIntent = async (): Promise<{\n    errors?: readonly GraphQLError[];\n    paymentIntent?: StripePaymentIntentType | null;\n  }> => {\n    const { data, errors } = await commitCreatePaymentIntentMutation({});\n\n    if (errors) return { errors };\n\n    return { paymentIntent: data?.createPaymentIntent?.paymentIntent };\n  };\n\n  return { createPaymentIntent, loading };\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Store Schema to Root GraphQL Schema in Python\nDESCRIPTION: Incorporates the store schema into the root GraphQL schema, enabling access to Product-related queries and mutations.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/adding-new-mutation.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom apps.store import schema as store_schema\n\n# ...\n\nschema = graphene.Schema(\n    query=graphql_query([\n        # ...\n        store_schema.Query,\n    ]),\n    mutation=graphql_mutation(\n        [\n            # ...\n            store_schema.Mutation,\n        ]\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Fragment in Query\nDESCRIPTION: Shows how to use a fragment within a GraphQL query using the spread operator syntax.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/use-fragments.mdx#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPerson {\n  people(id: \"7\") {\n    ...NameParts\n    avatar(size: LARGE)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CurrentUserType for New Field in GraphQL Schema\nDESCRIPTION: This code updates the CurrentUserType class in the GraphQL schema to include the new phone_number field. It adds the field to the DjangoObjectType and provides a resolver method.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/create-profile-field.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport graphene\nfrom graphene_django import DjangoObjectType\n\nfrom . import models\nfrom .services.users import get_user_from_resolver\n\n\nclass CurrentUserType(DjangoObjectType):\n    phone_number = graphene.String()\n\n    class Meta:\n        model = models.User\n        fields = (\n          \"id\",\n          # ...\n          \"phone_number\"\n        )\n\n    @staticmethod\n    def resolve_phone_number(parent, info):\n        return get_user_from_resolver(info).profile.phone_number\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component with Apollo useQuery Hook\nDESCRIPTION: Modifies a React component to use the Apollo useQuery hook for fetching todo data and displaying it, including a loading state.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/component-with-query.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useQuery } from '@apollo/client';\nimport { FormattedMessage } from 'react-intl';\n\nimport { todoQuery } from './example.graphql';\nimport { Container } from './example.styles';\n\nexport const ExampleComponent = () => {\n  const { loading, data } = useQuery(todoQuery);\n  return (\n    <Container>\n      {!loading && data ? (\n        `Fetched todo: ${data.todo?.id} ${data.todo?.name}`\n      ) : (\n        <FormattedMessage defaultMessage=\"Loading...\" id=\"ExampleComponent / loading\" />\n      )}\n    </Container>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema\nDESCRIPTION: GraphQL schema definition with ProductType, ProductConnection, and Query classes for handling product queries.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport graphene\nfrom graphene_django import DjangoObjectType\n\nfrom . import models\n\n\nclass ProductType(DjangoObjectType):\n    class Meta:\n        model = models.Product\n        interfaces = (graphene.relay.Node,)\n        fields = \"__all__\"\n\n\nclass ProductConnection(graphene.Connection):\n    class Meta:\n        node = ProductType\n\n\nclass Query(graphene.ObjectType):\n    product = graphene.Field(ProductType)\n    all_products = graphene.relay.ConnectionField(ProductConnection)\n\n    @staticmethod\n    def resolve_all_products(root, info, **kwargs):\n        return models.Product.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Schema with Product Mutations\nDESCRIPTION: Defines the GraphQL schema with product-related types and mutations for creating, updating, and deleting products.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport graphene\nfrom graphene_django import DjangoObjectType\nfrom common.graphql import mutations\nfrom . import models, serializers\n\n\nclass ProductType(DjangoObjectType):\n    class Meta:\n        model = models.Product\n        interfaces = (graphene.relay.Node,)\n        fields = \"__all__\"\n\n\nclass ProductConnection(graphene.Connection):\n    class Meta:\n        node = ProductType\n\n\nclass CreateProductMutation(mutations.CreateModelMutation):\n    class Meta:\n        serializer_class = serializers.ProductSerializer\n        edge_class = ProductConnection.Edge\n\n\nclass UpdateProductMutation(mutations.UpdateModelMutation):\n    class Meta:\n        serializer_class = serializers.ProductSerializer\n        edge_class = ProductConnection.Edge\n\n\nclass DeleteProductMutation(mutations.DeleteModelMutation):\n    class Meta:\n        model = models.Product\n\n\nclass Mutation(graphene.ObjectType):\n    create_product = CreateProductMutation.Field()\n    update_product = UpdateProductMutation.Field()\n    delete_product = DeleteProductMutation.Field()\n```\n\n----------------------------------------\n\nTITLE: Testing Create Product Mutation\nDESCRIPTION: Test case for creating a new product via GraphQL mutation, verifying the response and database state.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom graphql_relay import from_global_id\nfrom .. import models\n\npytestmark = pytest.mark.django_db\n\n\nclass TestCreateProductMutation:\n    CREATE_MUTATION = \"\"\"\n        mutation($input: CreateProductMutationInput!)  {\n          createProduct(input: $input) {\n            product {\n              id\n              name\n            }\n          }\n        }\n    \"\"\"\n\n    def test_create_new_product(self, graphene_client, user):\n        input_data = {\"name\": \"Product\"}\n\n        graphene_client.force_authenticate(user)\n        executed = graphene_client.mutate(\n            self.CREATE_MUTATION,\n            variable_values={\"input\": input_data},\n        )\n\n        assert executed[\"data\"][\"createProduct\"]\n        assert executed[\"data\"][\"createProduct\"][\"product\"]\n        assert executed[\"data\"][\"createProduct\"][\"product\"][\"name\"] == input_data[\"name\"]\n\n        product_global_id = executed[\"data\"][\"createCrudDemoItem\"][\"crudDemoItem\"][\"id\"]\n        _, pk = from_global_id(product_global_id)\n        product = models.Product.objects.get(pk=pk)\n\n        assert product.name == input_data[\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Product Serializer for GraphQL Mutations\nDESCRIPTION: Creates a ProductSerializer class that handles the serialization of Product model data with HashID field support.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom hashid_field import rest as hidrest\nfrom rest_framework import serializers\n\n\nclass ProductSerializer(serializers.ModelSerializer):\n    id = hidrest.HashidSerializerCharField(source_field=\"store.Product.id\", read_only=True)\n\n    class Meta:\n        model = models.Product\n        fields = ('id', 'name',)\n```\n\n----------------------------------------\n\nTITLE: Defining a Shared Task in Celery using Python\nDESCRIPTION: This snippet demonstrates how to define a shared task in Celery using Python. It uses the @shared_task decorator to create a task named 'example_task' that takes two parameters: a string and a dictionary.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/run-async-job-celery.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom celery import shared_task\n\n@shared_task()\ndef example_task(arg1: str, arg2: dict):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Django Model Factory\nDESCRIPTION: Factory Boy implementation for generating test data for the Product model using fake data generators.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport factory\nfrom ..models import Product\n\n\nclass ProductFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = Product\n\n    name = factory.Faker('name')\n```\n\n----------------------------------------\n\nTITLE: Defining Email Serializer for Account Activation in Python\nDESCRIPTION: This snippet shows how to create an email serializer using Django REST Framework. The AccountActivationEmailSerializer defines fields for user_id and token, which are used for serializing account activation email data.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/emails/send-email.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\n\n\nclass AccountActivationEmailSerializer(serializers.Serializer):\n    user_id = serializers.CharField()\n    token = serializers.CharField()\n```\n\n----------------------------------------\n\nTITLE: Defining Form Fields Type in TypeScript\nDESCRIPTION: Creates a type to describe the data collected by the form, defining the structure of the form fields.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/form-with-mutation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ProductFormFields = {\n  name: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Invoking an Asynchronous Celery Task in Python\nDESCRIPTION: This code snippet shows how to invoke the previously defined 'example_task' asynchronously in Celery. It uses the apply_async method to queue the task with specific arguments.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/run-async-job-celery.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nexample_task.apply_async(('arg1-value', { 'arg2-field': 'arg2-field-value' }))\n```\n\n----------------------------------------\n\nTITLE: Testing Single Product Query\nDESCRIPTION: Test implementation for GraphQL query fetching a single product by ID with authentication.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom graphql_relay import to_global_id\n\n\npytestmark = pytest.mark.django_db\n\n\nclass TestProductQuery:\n    PRODUCT_QUERY = \"\"\"\n        query($id: ID!)  {\n          product(id: $id) {\n            id\n            name\n          }\n        }\n    \"\"\"\n\n    def test_return_product(self, graphene_client, product, user):\n        product_global_id = to_global_id(\"ProductType\", str(product.id))\n\n        graphene_client.force_authenticate(user)\n        executed = graphene_client.query(\n            self.PRODUCT_QUERY,\n            variable_values={\"id\": product_global_id},\n        )\n\n        assert executed == {\n            \"data\": {\n                \"product\": {\n                    \"id\": product_global_id,\n                    \"name\": product.name,\n                }\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Adding Field-Level Validation to ProductSerializer\nDESCRIPTION: Implements a custom validation method for the 'name' field in ProductSerializer to disallow special characters.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/working-with-serializers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom hashid_field import rest as hidrest\nfrom rest_framework import serializers\nfrom .models import Product, Customer\n\n\nclass ProductSerializer(serializers.ModelSerializer):\n    id = hidrest.HashidSerializerCharField(source_field=\"store.Product.id\", read_only=True)\n    customer = serializers.PrimaryKeyRelatedField(\n      queryset=Customer.objects.all(),\n      pk_field=rest.HashidSerializerCharField(),\n      write_only=True,\n    )\n\n    class Meta:\n        model = Product\n        fields = ('id', 'name', 'price', 'customer')\n\n    def validate_name(self, value):\n      \"\"\"\n      Check that the name field does not contain special characters.\n      \"\"\"\n      special_chars = \"!@#$%^&*()-+?_=,<>/\"\n      if any(char in special_chars for char in value):\n          raise serializers.ValidationError(\"Product name cannot contain special characters.\")\n\n      return value\n```\n\n----------------------------------------\n\nTITLE: Deploying Backend Components\nDESCRIPTION: Command to deploy the complete backend stack including admin-panel, API, and database migrations.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/backend/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsaas backend deploy\n```\n\n----------------------------------------\n\nTITLE: Testing All Products Query\nDESCRIPTION: Test implementation for GraphQL query fetching all products with pagination support.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom graphql_relay import to_global_id\n\npytestmark = pytest.mark.django_db\n\n\nclass TestAllProductsQuery:\n    ALL_PRODUCTS_QUERY = \"\"\"\n        query  {\n          allProducts {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n    \"\"\"\n\n    def test_return_all_products(self, graphene_client, product_factory, user):\n        products = product_factory.create_batch(3)\n\n        graphene_client.force_authenticate(user)\n        executed = graphene_client.query(self.ALL_PRODUCTS_QUERY)\n\n        assert executed == {\n            \"data\": {\n                \"allProducts\": {\n                    \"edges\": [\n                        {\n                            \"node\": {\n                                \"id\": to_global_id(\"ProductType\", str(product.id)),\n                                \"name\": product.name,\n                            }\n                        }\n                        for product in products\n                    ]\n                }\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model for Product in Python\nDESCRIPTION: Creates a Django model for a Product with a HashidAutoField as the primary key and a CharField for the name.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/adding-new-mutation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport hashid_field\nfrom django.db import models\n\n\nclass Product(models.Model):\n    id = hashid_field.HashidAutoField(primary_key=True)\n    name = models.CharField(max_length=255)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Route Component in React\nDESCRIPTION: Demonstrates how to create a basic route component using React and react-intl for internationalization.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/new-route.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormattedMessage } from 'react-intl';\n\nexport const Example = () => {\n  return (\n    <h1>\n      <FormattedMessage defaultMessage=\"Example component message\" id=\"Example / Header message\" />\n    </h1>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component to Display Todo Collection\nDESCRIPTION: Updates the React component to fetch and display a collection of todo items using the Apollo useQuery hook and mapConnection helper.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/component-with-query.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useQuery } from '@apollo/client';\nimport { mapConnection } from '@sb/webapp-core/utils/graphql';\nimport { FormattedMessage } from 'react-intl';\n\nimport { todosQuery } from './example.graphql';\nimport { Container } from './example.styles';\n\nexport const ExampleComponent = () => {\n  const { loading, data } = useQuery(todosQuery);\n  return (\n    <Container>\n      {!loading && data ? (\n        mapConnection((node) => <div key={node?.id}>{node?.name}</div>, data.todos)\n      ) : (\n        <FormattedMessage defaultMessage=\"Loading...\" id=\"ExampleComponent / loading\" />\n      )}\n    </Container>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductSerializer with Custom Fields\nDESCRIPTION: Creates a Django Rest Framework serializer for the Product model, using custom fields for hashed IDs and related objects.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/working-with-serializers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hashid_field import rest as hidrest\nfrom rest_framework import serializers\nfrom .models import Product, Customer\n\n\nclass ProductSerializer(serializers.ModelSerializer):\n    id = hidrest.HashidSerializerCharField(source_field=\"store.Product.id\", read_only=True)\n    customer = serializers.PrimaryKeyRelatedField(\n        queryset=Customer.objects.all(),\n        pk_field=rest.HashidSerializerCharField(),\n        write_only=True,\n    )\n\n    class Meta:\n        model = Product\n        fields = ('id', 'name', 'price', 'customer')\n```\n\n----------------------------------------\n\nTITLE: Updating UserSignupSerializer for New Field in Django\nDESCRIPTION: This snippet updates the UserSignupSerializer to include the new phone_number field. It modifies the Meta class and the create method to handle the new field during user signup.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/create-profile-field.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import auth as dj_auth\nfrom django.contrib.auth.models import update_last_login\nfrom rest_framework import serializers\nfrom rest_framework_simplejwt import  tokens as jwt_tokens\nfrom rest_framework_simplejwt.settings import api_settings as jwt_api_settings\n\nfrom . import  tokens,  notifications\n\n\nclass UserSignupSerializer(serializers.ModelSerializer):\n  # ...\n\n  class Meta:\n      model = dj_auth.get_user_model()\n      fields = (\n          \"id\",\n          # ...\n          \"phone_number\"\n      )\n\n  def create(self, validated_data):\n      user = dj_auth.get_user_model().objects.create_user(\n          email=validated_data[\"email\"],\n          password=validated_data[\"password\"],\n          phone_number=validated_data[\"phone_number\"]\n      )\n\n      refresh = jwt_tokens.RefreshToken.for_user(user)\n\n      if jwt_api_settings.UPDATE_LAST_LOGIN:\n          update_last_login(None, user)\n\n      notifications.AccountActivationEmail(\n          user=user, data={'user_id': user.id.hashid, 'token': tokens.account_activation_token.make_token(user)}\n      ).send()\n\n      return {\n        'id': user.id,\n        'email': user.email,\n        'access': str(refresh.access_token),\n        'refresh': str(refresh),\n        'phone_number': user.profile.phone_number\n      }\n```\n\n----------------------------------------\n\nTITLE: Starting Database Shell in SaaS Boilerplate\nDESCRIPTION: This command starts a psql client shell in the local 'db' container, allowing execution of raw SQL queries when needed.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas db shell\n\nDESCRIPTION\n  Start a psql client shell in local `db` container. It allows you to run some raw queries when needed.\n\nEXAMPLES\n  $ saas db shell\n```\n\n----------------------------------------\n\nTITLE: Defining Current User Fragment\nDESCRIPTION: Creates a TypeScript fragment definition for current user data using gql template literal.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/use-fragments.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { gql } from '@sb/webapp-api-client/graphql';\n\nexport const currentUserFragment = gql(/* GraphQL */ `\n  fragment currentUserFragment on CurrentUserType {\n    id\n    email\n    firstName\n    lastName\n  }\n`);\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Fields in GraphQL Schema for Product Operations\nDESCRIPTION: Combines all Product-related mutations into a single Mutation object and adds them to the GraphQL schema.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/adding-new-mutation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport graphene\nfrom common.graphql import mutations\nfrom . import models, serializers\n\n\nclass CreateProductMutation(mutations.CreateModelMutation):\n    class Meta:\n        serializer_class = serializers.ProductSerializer\n        edge_class = ProductConnection.Edge\n\n\nclass UpdateProductMutation(mutations.UpdateModelMutation):\n    class Meta:\n        serializer_class = serializers.ProductSerializer\n        edge_class = ProductConnection.Edge\n\n\nclass DeleteProductMutation(mutations.DeleteModelMutation):\n    class Meta:\n        model = models.Product\n\n\nclass Mutation(graphene.ObjectType):\n    create_product = CreateProductMutation.Field()\n    update_product = UpdateProductMutation.Field()\n    delete_product = DeleteProductMutation.Field()\n```\n\n----------------------------------------\n\nTITLE: Deploying SaaS Boilerplate to AWS\nDESCRIPTION: This command deploys all previously built artifacts to AWS. It includes an optional dry run flag to list changes without applying them.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas deploy [--diff]\n\nFLAGS\n  --diff  Perform a dry run and list all changes that would be applied in AWS account\n\nDESCRIPTION\n  Deploy all previously built artifacts to AWS\n\nEXAMPLES\n  $ saas deploy\n```\n\n----------------------------------------\n\nTITLE: Adding Phone Number Field to UserProfile Model in Django\nDESCRIPTION: This snippet shows how to add a new field (phone_number) to the UserProfile model in Django. It demonstrates the modification of the model class to include the new field.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/create-profile-field.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import AbstractBaseUser, PermissionsMixin\nfrom django.db import models\n\n\nclass User(AbstractBaseUser, PermissionsMixin):\n    # ...\n\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\"profile\")\n    # ...\n    phone_number = models.CharField(max_length=20, blank=True, default='')  # New field\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login Buttons Component in React\nDESCRIPTION: React component implementation for social login buttons including Facebook and custom provider integration.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/create-oauth-method.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport const SocialLoginButtons = ({ variant, ...props }: SocialLoginButtonsProps) => {\n  const oAuthLogin = useOAuthLogin();\n  const handleFacebookLogin = () => oAuthLogin(OAuthProvider.Facebook);\n  const handleCustomLogin = () => oAuthLogin(OAuthProvider.CustomOAuth);\n\n  return (\n    <Container {...props}>\n      <FacebookButton onClick={handleFacebookLogin}>\n        {variant === SignupButtonsVariant.LOGIN ? (\n          <FormattedMessage defaultMessage=\"Log in with Facebook\" id=\"Auth / Login / Facebook login button\" />\n        ) : (\n          <FormattedMessage defaultMessage=\"Sign up with Facebook\" id=\"Auth / Signup / Facebook signup button\" />\n        )}\n      </FacebookButton>\n\n      <CustomButton onClick={handleCustomLogin}>\n        {variant === SignupButtonsVariant.LOGIN ? (\n          <FormattedMessage defaultMessage=\"Log in with Custom provider\" id=\"Auth / Login / Custom login button\" />\n        ) : (\n          <FormattedMessage defaultMessage=\"Sign up with Custom provider\" id=\"Auth / Signup / Custom signup button\" />\n        )}\n      </CustomButton>\n    </Container>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Admin Full Access Policy in Python\nDESCRIPTION: Creates an access policy class that grants full access to administrators using the Django REST - Access Policy library.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/admin-page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_access_policy import AccessPolicy\nfrom .helpers import make_statement, Action, Effect, Principal, CommonGroups\n\n\nclass AdminFullAccess(AccessPolicy):\n    statements = [\n        make_statement(principal=Principal.group(CommonGroups.Admin), action=Action.Any, effect=Effect.Allow)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Starting webapp only\nDESCRIPTION: Command to start only the webapp component of the SaaS Boilerplate.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas webapp up\n```\n\n----------------------------------------\n\nTITLE: Defining Basic GraphQL Fragment\nDESCRIPTION: Demonstrates how to declare a basic GraphQL fragment for a Person type that includes firstName and lastName fields.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/use-fragments.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment NameParts on Person {\n  firstName\n  lastName\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Product Mutation in Python\nDESCRIPTION: Defines a CreateModelMutation for creating new Product objects, utilizing the ProductSerializer and ProductConnection.Edge.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/adding-new-mutation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom common.graphql import mutations\nfrom . import models, serializers\n\n\nclass CreateProductMutation(mutations.CreateModelMutation):\n    class Meta:\n        serializer_class = serializers.ProductSerializer\n        edge_class = ProductConnection.Edge\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Infrastructure for SaaS Boilerplate\nDESCRIPTION: This command bootstraps the infrastructure in an AWS account by creating resources necessary to start working with the SaaS Boilerplate.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas infra bootstrap\n\nDESCRIPTION\n  Bootstrap infrastructure in AWS account by creating resources necessary to start working with SaaS Boilerplate\n\nEXAMPLES\n  $ saas infra bootstrap\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query for Todo Item in TypeScript\nDESCRIPTION: Creates a GraphQL query to fetch a single todo item with id and name fields using the gql tag from the generated API client.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/component-with-query.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { gql } from '@sb/webapp-api-client/graphql';\n\nexport const todoQuery = gql(/* GraphQL */ `\n  query todoQuery {\n    todo {\n      id\n      name\n    }\n  }\n`);\n```\n\n----------------------------------------\n\nTITLE: Testing Update Product Mutation\nDESCRIPTION: Test case for updating an existing product via GraphQL mutation, verifying the response and database state.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom graphql_relay import to_global_id\n\npytestmark = pytest.mark.django_db\n\n\nclass TestUpdateProductMutation:\n    UPDATE_MUTATION = \"\"\"\n        mutation($input: UpdateProductMutationInput!)  {\n          updateProduct(input: $input) {\n            product {\n              id\n              name\n            }\n          }\n        }\n    \"\"\"\n\n    def test_update_product(self, graphene_client, user, product):\n        input_data = {\n            \"id\": to_global_id(\"ProductType\", str(product.id)),\n            \"name\": \"New item name\",\n        }\n\n        graphene_client.force_authenticate(user)\n        executed = graphene_client.mutate(\n            self.UPDATE_MUTATION,\n            variable_values={\"input\": input_data},\n        )\n        product.refresh_from_db()\n\n        assert executed[\"data\"][\"updateProduct\"]\n        assert executed[\"data\"][\"createProduct\"][\"product\"]\n        assert executed[\"data\"][\"updateProduct\"][\"product\"][\"name\"] == input_data[\"name\"]\n        assert product.name == input_data[\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Testing Delete Product Mutation\nDESCRIPTION: Test case for deleting a product via GraphQL mutation, verifying the response and database state.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom graphql_relay import to_global_id\nfrom .. import models\n\npytestmark = pytest.mark.django_db\n\n\nclass TestDeleteProductMutation:\n    DELETE_MUTATION = \"\"\"\n        mutation($input: DeleteProductMutationInput!) {\n          deleteProduct(input: $input) {\n            deletedIds\n          }\n        }\n    \"\"\"\n\n    def test_delete_product(self, graphene_client, user, product):\n        product_global_id = to_global_id(\"ProductType\", str(product.id))\n\n        graphene_client.force_authenticate(user)\n        executed = graphene_client.mutate(\n            self.DELETE_MUTATION,\n            variable_values={\"input\": {\"id\": product_global_id}},\n        )\n\n        assert executed == {\"data\": {\"deleteProduct\": {\"deletedIds\": [product_global_id]}}}\n        assert not models.Product.objects.filter(id=product.id).exists()\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query in TypeScript\nDESCRIPTION: Example of defining a GraphQL query to fetch posts data using the gql tag from the webapp-api-client.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/update-schema.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { gql } from '@sb/webapp-api-client/graphql';\n\nexport const getPostsQuery = gql(/* GraphQL */`\n  query getPostsQuery() {\n    posts {\n      id\n      title\n    }\n  }\n`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Route\nDESCRIPTION: Demonstrates how to implement a route that is only accessible to authenticated users.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/new-route.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Route, Routes } from 'react-router-dom';\n\nimport { AuthRoute } from '../shared/components/routes/authRoute';\nimport { Example } from './asyncComponents';\nimport { LANG_PREFIX } from './config/routes';\nimport { ValidRoutesProviders } from './providers';\n\nexport const App = () => {\n  return (\n    <Routes>\n      <Route element={<ValidRoutesProviders />}>\n        <Route path={LANG_PREFIX} element={<AuthRoute />}>\n          <Route index element={<Example />} />\n          { /* other routes here */ }\n        </Route>\n      </Route>\n    </Routes>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing DRF Serializer for Product in Python\nDESCRIPTION: Defines a Django Rest Framework serializer for the Product model, including a custom HashidSerializerCharField for the id field.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/adding-new-mutation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hashid_field import rest as hidrest\nfrom rest_framework import serializers\n\n\nclass ProductSerializer(serializers.ModelSerializer):\n    id = hidrest.HashidSerializerCharField(source_field=\"store.Product.id\", read_only=True)\n\n    class Meta:\n        model = models.Product\n        fields = ('id', 'name',)\n```\n\n----------------------------------------\n\nTITLE: Setting Webapp Secrets in SaaS Boilerplate\nDESCRIPTION: This command opens a JSON file containing webapp secrets for editing. After saving, the secrets are uploaded to AWS Systems Manager Parameter Store.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-runtime-env-vars.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas webapp secrets\n```\n\n----------------------------------------\n\nTITLE: React Component Test Implementation\nDESCRIPTION: Basic test suite for the component using React Testing Library to verify rendering.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/create-react-component.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from '../../../../tests/utils/rendering';\nimport { ExampleComponent } from '../exampleComponent.component';\n\ndescribe('ExampleComponent: Component', () => {\n  const Component = () => <ExampleComponent />;\n\n  it('should render without errors', () => {\n    render(<Component />);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining User Roles in CommonGroups Class (Python)\nDESCRIPTION: This snippet shows how to add a new user role to the CommonGroups class in the common.acl module. The class defines different user roles as string constants.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/create-role.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CommonGroups:\n    User = 'user'\n    Admin = 'admin'\n    Support = 'support'\n```\n\n----------------------------------------\n\nTITLE: Configuring Regular Route Path\nDESCRIPTION: Demonstrates how to define a regular route path in the routes configuration object.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/new-route.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const RoutesConfig = {\n  // existing routes here ...\n  example: 'example'\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Anonymous Route\nDESCRIPTION: Shows how to implement a route that is only accessible to anonymous (non-authenticated) users.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/new-route.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Route, Routes } from 'react-router-dom';\n\nimport { AnonymousRoute } from '../shared/components/routes/anonymousRoute';\nimport { Example } from './asyncComponents';\nimport { LANG_PREFIX, RoutesConfig } from './config/routes';\nimport { ValidRoutesProviders } from './providers';\n\nexport const App = () => {\n  return (\n    <Routes>\n      <Route element={<ValidRoutesProviders />}>\n        <Route path={LANG_PREFIX} element={<AnonymousRoute />}>\n          <Route path={RoutesConfig.example} element={<Example />} />\n           { /* other routes here */ }\n        </Route>\n      </Route>\n    </Routes>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Applying Access Policy to GraphQL Mutation in Python\nDESCRIPTION: Demonstrates how to apply the AdminFullAccess policy to a GraphQL mutation using the @permission_classes decorator.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/admin-page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport graphene\nfrom common.acl import policies\nfrom common.graphql.acl.decorators import permission_classes\n\n\n@permission_classes(policies.AdminFullAccess)\nclass AdminMutation(graphene.ObjectType):\n    example_admin_mutation = ExampleAdminMutation.Field()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hook for Form State Management in React\nDESCRIPTION: Implements a custom hook to manage form state using useApiForm, handling form submission and mutation execution.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/form-with-mutation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useCreateProductForm = () => {\n  const form = useApiForm<ProductFields>();\n\n const handleSubmit = form.handleSubmit(async (data: ProductFields) => {\n   // You'll commit mutation here\n });\n\n return { form, handleSubmit };\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Backend Secrets in SaaS Boilerplate\nDESCRIPTION: This command opens a JSON file containing backend secrets for editing. After saving, the secrets are uploaded to AWS Systems Manager Parameter Store.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-runtime-env-vars.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas backend secrets\n```\n\n----------------------------------------\n\nTITLE: Registering Factory Boy Fixtures\nDESCRIPTION: Registration of ProductFactory as a pytest fixture for use in tests.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytest_factoryboy\nfrom . import factories\n\n\npytest_factoryboy.register(factories.ProductFactory)\n```\n\n----------------------------------------\n\nTITLE: Committing Mutation in React Form Hook\nDESCRIPTION: Updates the custom hook to commit the GraphQL mutation when the form is submitted, handling errors and form state.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/form-with-mutation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMutation } from '@apollo/client';\n\nimport { createProductMutation } from './productForm.graphql'\n\nexport const useCreateProductForm = () => {\n  const form = useApiForm<ProductFields>();\n\n  const [commitMutation] = useMutation(createProductMutation, {\n    onError: (error) => {\n      form.setApolloGraphQLResponseErrors(error.graphQLErrors);\n    }\n  });\n\n const handleSubmit = form.handleSubmit(async (data: ProductFields) => {\n   await commitMutation({ variables: { input: data } });\n });\n\n return { form, handleSubmit };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for React Component with Apollo Mocks\nDESCRIPTION: Updates the Storybook configuration to provide mocked Apollo query results for the ExampleComponent, enabling proper rendering in isolation.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/component-with-query.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { composeMockedQueryResult } from '@sb/webapp-api-client/tests/utils';\nimport { Story } from '@storybook/react';\nimport { append } from 'ramda';\n\nimport { withProviders } from '../../utils/storybook';\nimport { ExampleComponent } from './example.component';\nimport { todoQuery } from './example.graphql';\n\nconst Template: Story = () => {\n  return <ExampleComponent />;\n};\n\nconst todo = { id: 1, name: 'Todo' };\n\nexport default {\n  title: 'Shared/ExampleComponent',\n  component: ExampleComponent,\n  decorators: [\n    withProviders({\n      apolloMocks: append(\n        composeMockedQueryResult(todoQuery, {\n          data: {\n            todo\n          }\n        })\n      ),\n    }),\n  ],\n};\n\nexport const Default = Template.bind({});\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from GraphQL Schema\nDESCRIPTION: Command to generate TypeScript types from a GraphQL schema within the webapp-api-client package context.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-api-client/commands.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run webapp-api-client:graphql:generate-types\n```\n\n----------------------------------------\n\nTITLE: Integrating Component in Home Page\nDESCRIPTION: Example of component integration into the application's home page component.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/create-react-component.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n...\nimport { ExampleComponent } from '../../shared/components/exampleComponent';\n...\nreturn (\n    <Container>\n        ...\n        <typography.H1>\n            <FormattedMessage defaultMessage=\"Welcome!\" id=\"Home / title\" />\n        </typography.H1>\n\n        // highlight-next-line\n        <ExampleComponent />\n    <Container />\n);\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty Form Component in React\nDESCRIPTION: Creates a basic form component with a submit button, using the custom hook for form handling.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/form-with-mutation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@sb/webapp-core/components/buttons';\nimport { FormattedMessage } from 'react-intl';\n\nimport { useCreateProductForm } from './productForm.hooks'\n\nexport const ProductForm = () => {\n  const { handleSubmit } = useCreateProductForm();\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Button type=\"submit\">\n        <FormattedMessage defaultMessage=\"Submit\" id=\"Product form / Submit button\" />\n      </Button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Running Backend Tests\nDESCRIPTION: Command to execute tests and linters within a Docker container for the backend application.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/backend/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsaas backend test\n```\n\n----------------------------------------\n\nTITLE: Deploying SaaS Artifacts to AWS\nDESCRIPTION: Command to deploy the built artifacts to AWS services and make them available under configured domains\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/run-deployment-commands.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas deploy\n```\n\n----------------------------------------\n\nTITLE: Email Template Body Component Implementation\nDESCRIPTION: React component implementation for email template body with layout, formatting, and button integration\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/emails/create-email-template.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useGenerateAbsoluteLocalePath } from '@sb/webapp-core/hooks';\nimport { RoutesConfig } from '@sb/webapp-core/config/routes';\nimport { FormattedMessage } from 'react-intl';\n\nimport { EmailComponentProps } from '../../types';\nimport { Button, Layout } from '../../base';\n\n\nexport type MyEmailNameProps = EmailComponentProps & {\n    // props passed from backend\n};\n\nexport const Template = ({}: MyEmailNameProps) => {\n  const generateLocalePath = useGenerateAbsoluteLocalePath();\n  const url = generateLocalePath(RoutesConfig.home);\n\n  return (\n    <Layout\n      title={<FormattedMessage defaultMessage=\"Title\" id=\"Email / MyEmailName / Title\" />}\n      text={<FormattedMessage defaultMessage=\"Text\" id=\"Email / MyEmailName / Text\" />}\n    >\n      <Button linkTo={url}>\n        <FormattedMessage defaultMessage=\"Button\" id=\"Email / MyEmailName / Link label\" />\n      </Button>\n    </Layout>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Storybook Configuration for Component\nDESCRIPTION: Storybook setup file for component documentation and visual testing.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/create-react-component.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Story } from '@storybook/react';\nimport { ExampleComponent } from './example.component';\n\nconst Template: Story = () => {\n  return <ExampleComponent />;\n};\n\nexport default {\n  title: 'Shared/ExampleComponent',\n  component: ExampleComponent,\n};\n\nexport const Default = Template.bind({});\n```\n\n----------------------------------------\n\nTITLE: Object Validation Error Response Format in GraphQL\nDESCRIPTION: Shows the JSON format of an error response when object-level validation fails in a GraphQL API.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/working-with-serializers.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"GraphQlValidationError\",\n  \"locations\": [{\"line\": 3, \"column\": 11}],\n  \"path\": [\"createProduct\"],\n  \"extensions\": {\n    \"non_field_errors\": [\n        {\"message\": \"Price must be greater than zero.\", \"code\": \"invalid_price\"},\n        {\"message\": \"Product name can only contain letters and numbers.\", \"code\": \"invalid_product_name\"}\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fill Method Definition for Apollo Mocks\nDESCRIPTION: Example of creating a fill method for generating mock GraphQL query results.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/webapp.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { composeMockedListQueryResult } from '@sb/webapp-api-client/tests/utils';\nimport { times } from 'ramda';\n\nimport { documentsListQuery } from '../../routes/documents/documents.graphql';\n//...\nexport const fillDocumentsListQuery = (data = times(() => documentFactory(), 3)) => {\n  return composeMockedListQueryResult(documentsListQuery, 'allDocumentDemoItems', 'DocumentDemoItemType', { data });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Mutation in TypeScript\nDESCRIPTION: Creates a GraphQL mutation for creating a product, using the gql helper function from the API client package.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/form-with-mutation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { gql } from '@sb/webapp-api-client/graphql';\n\nexport const createProductMutation = gql(/* GraphQL */ `\n  mutation createProductMutation($input: CreateProductMutationInput!) {\n    createProduct(input: $input) {\n      productEdge {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`);\n```\n\n----------------------------------------\n\nTITLE: Deploying Workers to AWS\nDESCRIPTION: Command to deploy worker components to AWS infrastructure using Serverless Framework\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/workers/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas workers deploy\n```\n\n----------------------------------------\n\nTITLE: Building SaaS Application Artifacts\nDESCRIPTION: Command to build deployment artifacts from local machine code for all services or individual components\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/run-deployment-commands.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas build\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Lambda Handler in Python\nDESCRIPTION: Creates an example_task_handler() function to log incoming events. This handler can be triggered by AWS Lambda events and logs the event information.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/create-workers-module.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\ndef example_task_handler(event, context):\n    logger.info(event)\n```\n\n----------------------------------------\n\nTITLE: Combining Payment Intent Creation and Confirmation in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the previously defined hooks to create a payment intent and confirm it within a form submission handler.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/payments/one-time-payment-form.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { createPaymentIntent } = useStripePaymentIntent();\nconst { confirmPayment } = useStripePayment();\n\nconst handleSubmit = form.handleSubmit(async () => {\n  const { paymentIntent, errors } = await createPaymentIntent();\n  if (!errors) {\n    confirmPayment(paymentIntent);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Field Validator Error Response Format in GraphQL\nDESCRIPTION: Demonstrates the JSON format of an error response when a field-level validation fails in a GraphQL API.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/working-with-serializers.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"GraphQlValidationError\",\n  \"locations\": [{\"line\": 3, \"column\": 11}],\n  \"path\": [\"createProduct\"],\n  \"extensions\": {\n    \"name\": [{\"message\": \"Product name cannot contain special characters.\", \"code\": \"invalid\"}]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Data Type (TypeScript)\nDESCRIPTION: Example of defining the data structure for a custom notification type in TypeScript. This code defines the props for an 'ItemAdded' notification, including user and itemId fields.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/notifications/create-notification.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype ItemAddedProps = NotificationType<{\n  user: string | null;\n  itemId: number;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Object-Level Validation in ProductSerializer\nDESCRIPTION: Overrides the validate method in ProductSerializer to perform custom validations on multiple fields simultaneously.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/working-with-serializers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom hashid_field import rest as hidrest\nfrom rest_framework import serializers\nfrom .models import Product, Customer\n\n\nclass ProductSerializer(serializers.ModelSerializer):\n    id = hidrest.HashidSerializerCharField(source_field=\"store.Product.id\", read_only=True)\n    customer = serializers.PrimaryKeyRelatedField(\n      queryset=Customer.objects.all(),\n      pk_field=rest.HashidSerializerCharField(),\n      write_only=True,\n    )\n\n    class Meta:\n        model = Product\n        fields = ('id', 'name', 'price', 'customer')\n\n    def validate(self, data):\n        \"\"\"\n        Check that the price is greater than zero and the name only contains letters and numbers.\n        \"\"\"\n        if data['price'] <= 0:\n            raise serializers.ValidationError(\"Price must be greater than zero.\", code=\"invalid_price\")\n\n        if not data['name'].isalnum():\n            raise serializers.ValidationError(\"Product name can only contain letters and numbers.\", code=\"invalid_product_name\")\n\n        return data\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Vault Base Profile\nDESCRIPTION: Command to create a basic AWS profile in aws-vault for storing credentials securely.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/configure-aws-credentials.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naws-vault add my-profile\n```\n\n----------------------------------------\n\nTITLE: Configuring Black in pyproject.toml\nDESCRIPTION: Configuration settings for Black in the backend package's pyproject.toml file. These settings define line length, string normalization behavior, excluded directories, and target Python version for the formatter.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/coding-standards/formatters/black.mdx#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nline-length = 120\nskip-string-normalization = true\nexclude = \"/(.git|.tox|migrations|libs|docs|data)/\"\ntarget-versions = \"py311\"\n```\n\n----------------------------------------\n\nTITLE: Basic Component Testing with Custom Render Method\nDESCRIPTION: Demonstrates how to use the custom render method to test React components with the testing library setup.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/webapp.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from '../../../../../tests/utils/rendering';\n\n//...\nit('should render ', async () => {\n  render(<Component />);\n\n  expect(screen.getByText('Rendered')).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Email Subject Component Implementation\nDESCRIPTION: React component for email subject line with internationalization support\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/emails/create-email-template.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Subject = ({}: MyEmailNameProps) => <FormattedMessage defaultMessage=\"Subject\" id=\"Email / MyEmailName / Subject\" />\n```\n\n----------------------------------------\n\nTITLE: Watching and Generating TypeScript Types from GraphQL Schema\nDESCRIPTION: Command to continuously watch for changes and generate TypeScript types from a GraphQL schema in watch mode.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-api-client/commands.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run webapp-api-client:graphql:generate-types:watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Django App Settings\nDESCRIPTION: Configuration of the Django app name in the apps.py file\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/backend/backend-model.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.apps import AppConfig\n\n\nclass StoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.store'\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models for Customer and Product\nDESCRIPTION: Creates Customer and Product models with HashidAutoField for primary keys and establishes a foreign key relationship between them.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/backend/working-with-serializers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport hashid_field\nfrom django.db import models\n\n\nclass Customer(models.Model):\n    id = hashid_field.HashidAutoField(primary_key=True)\n    email = models.EmailField()\n\n\nclass Product(models.Model):\n    id = hashid_field.HashidAutoField(primary_key=True)\n    name = models.CharField(max_length=255)\n    price = models.DecimalField(max_digits=8, decimal_places=2)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name='products')\n```\n\n----------------------------------------\n\nTITLE: Linting Command\nDESCRIPTION: Command to run ESLint and StyleLint for code quality checks in the webapp package.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp/commands.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from GraphQL Schemas in Bash\nDESCRIPTION: Command to generate TypeScript types based on the downloaded GraphQL schemas using graphql-codegen tool. The types are generated in a specific directory.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/update-schema.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run webapp:graphql:generate-types\n```\n\n----------------------------------------\n\nTITLE: Using Fragment in React Component\nDESCRIPTION: Demonstrates how to use fragments in a React component with Apollo Client and TypeScript, including proper fragment data access.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/use-fragments.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery } from '@apollo/client';\nimport { getFragmentData } from '@sb/webapp-api-client/graphql';\n\nconst UserProfile = () => {\n  const { data } = useQuery(currentUserQuery, {\n    nextFetchPolicy: 'network-only',\n  });\n  const profile = getFragmentData(currentUserFragment, data?.currentUser);\n\n  return (\n    <span>\n      {profile.firstName} {profile.lastName}\n    </span>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook OAuth Settings in Django\nDESCRIPTION: Django settings configuration for Facebook OAuth2 authentication including app credentials and permission scopes.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/create-oauth-method.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSOCIAL_AUTH_FACEBOOK_KEY = ''\nSOCIAL_AUTH_FACEBOOK_SECRET = ''\nSOCIAL_AUTH_FACEBOOK_SCOPE = ['email']\n```\n\n----------------------------------------\n\nTITLE: Downloading GraphQL Schemas in Bash\nDESCRIPTION: Command to download GraphQL schemas for the main back-end API and Contentful API. The schemas are saved to specific files in the project structure.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/update-schema.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run webapp:graphql:download-schema\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Filtering (Python)\nDESCRIPTION: Optional method for custom notification strategies to determine if a specific user should receive a notification of a particular type. This method can be used to implement user-specific notification filtering.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/notifications/create-notification.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef should_send_notification(user: str, type: str):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types in React Component with Apollo Client\nDESCRIPTION: Example React component demonstrating the usage of generated types with Apollo Client's useQuery hook to fetch and display posts data.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/update-schema.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from '@apollo/client';\nimport { getPostsQuery } from './posts.graphql';\n\nfunction Posts() {\n  const { loading, error, data } = useQuery(getPostsQuery);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <ul>\n      {data?.posts.map(post => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests for webapp Package\nDESCRIPTION: Executes Jest test runner for the webapp package to run all unit and integration tests.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-tenants/commands.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Syncing Stripe models\nDESCRIPTION: Runs the Django command to synchronize Stripe models inside the backend container.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas backend stripe sync\n```\n\n----------------------------------------\n\nTITLE: Querying User Roles in GraphQL\nDESCRIPTION: GraphQL query to fetch the current user's roles, which is used for client-side role-based access control.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/admin-page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery currentUserQuery {\n    currentUser {\n        roles\n        id\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking AWS Lambda Task in Python\nDESCRIPTION: Shows how to instantiate and execute an async Lambda task by calling the apply() method with task-specific data. The task execution is handled through Amazon EventBridge integration.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/run-async-job-lambda.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = {\n    # ...\n}\ntask = ExampleTask()\ntask.apply(data=data)\n```\n\n----------------------------------------\n\nTITLE: Importing Newly Added Shadcn/ui Component in React/TypeScript\nDESCRIPTION: Shows how to import a newly added Shadcn/ui component (Calendar) from the webapp-core package in a React/TypeScript file.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/shadcn.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Calendar } from '@sb/webapp-core/components/ui/calendar';\n```\n\n----------------------------------------\n\nTITLE: Factory Definition for Mock Data\nDESCRIPTION: Example of creating a factory function for generating mock document data using createDeepFactory.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/webapp.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocumentDemoItemType } from '@sb/webapp-api-client/graphql';\nimport {\n  createDeepFactory,\n  makeId,\n} from '@sb/webapp-api-client/tests/utils';\n//...\nexport const documentFactory = createDeepFactory<Partial<DocumentDemoItemType>>(() => ({\n  id: makeId(32),\n  createdAt: new Date().toISOString(),\n  file: {\n    name: `${makeId(32)}.png`,\n    url: `http://localhost/image/${makeId(32)}.png`,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query for Todo Collection in TypeScript\nDESCRIPTION: Creates a GraphQL query to fetch a collection of todo items, each with id and name fields, using the connection pattern.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/component-with-query.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { gql } from '@sb/webapp-api-client/graphql';\n\nexport const todosQuery = gql(/* GraphQL */ `\n  query todosQuery {\n    todos {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`);\n```\n\n----------------------------------------\n\nTITLE: Registering Lambda Handler in serverless.yml\nDESCRIPTION: Adds the example_task_handler to the serverless.yml file, configuring it to be triggered by an EventBridge event with a specific source pattern.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/create-workers-module.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  ExampleTaskHandler:\n    handler: example.handlers.example_task_handler\n    environment: ${self:custom.conf.ExampleTaskHandler.environment}\n    events:\n      - eventBridge:\n          eventBus: \"event-bus-arn\"\n          pattern:\n            source:\n              - backend.example_task\n```\n\n----------------------------------------\n\nTITLE: Deploying backend migrations with NX\nDESCRIPTION: Performs database migrations in the remote environment and updates the backend service version number.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run backend:deploy:migrations\n```\n\n----------------------------------------\n\nTITLE: AWS Environment Setup Command\nDESCRIPTION: CLI command to set up AWS environment variables using aws-vault.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/configure-aws-credentials.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas aws set-env [STAGE_NAME]\n```\n\n----------------------------------------\n\nTITLE: Deploying SaaS Boilerplate Infrastructure with pnpm\nDESCRIPTION: This command deploys all environment-specific infrastructure components using CDK. It sets up resources like databases and CI/CD pipelines on AWS according to the previously set environment stage.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/deploy-infrastructure.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas infra deploy\n```\n\n----------------------------------------\n\nTITLE: Adding New Shadcn/ui Component Using CLI\nDESCRIPTION: Illustrates the command to add a new Shadcn/ui component (calendar) using the shadcn CLI version 2.1.6, which is required for compatibility reasons.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/shadcn.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx shadcn@2.1.6 add calendar\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Services with Docker Compose\nDESCRIPTION: This command starts all backend services using Docker Compose in detached mode. It runs containers for various backend components of the SaaS Boilerplate.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/_start-app.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run core:docker-compose:up\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading for Route Component\nDESCRIPTION: Shows how to implement lazy loading for route components using the asyncComponent helper function.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/new-route.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { asyncComponent } from '@sb/webapp-core/utils/asyncComponent';\n\nexport const Example = asyncComponent(() => import('../routes/example'));\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in workers.conf.yml\nDESCRIPTION: Configures environment variables for the ExampleTaskHandler, retrieving the HASHID_SALT value from AWS Systems Manager Parameter Store.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/create-workers-module.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nExampleTaskHandler:\n  environment:\n    HASHID_SALT: ${ssm:/${self:custom.ssmService}/HASHID_SALT}\n```\n\n----------------------------------------\n\nTITLE: Deploying backend API with NX\nDESCRIPTION: Deploys the backend API to the remote environment and updates the API service version.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run backend:deploy:api\n```\n\n----------------------------------------\n\nTITLE: Building Webapp Command\nDESCRIPTION: Command for building webapp artifacts ready for AWS deployment.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas webapp build\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping CDK for Infrastructure Deployment in SaaS Boilerplate\nDESCRIPTION: Initializes AWS CDK to create necessary infrastructure components including a KMS key with the 'parameter_store_key' alias that chamber uses for managing secure values.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-env-stage-in-repo.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas infra bootstrap\n```\n\n----------------------------------------\n\nTITLE: Testing Commands\nDESCRIPTION: Commands to run Jest tests in normal and watch mode for the webapp package.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp/commands.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test:watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Pytest Plugins\nDESCRIPTION: Global pytest configuration to make fixtures available across all test modules.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npytest_plugins = [\n    # ...\n    'apps.store.tests.fixtures',\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Route Protection in React\nDESCRIPTION: Shows how to use the AuthRoute component to restrict access to a specific route based on user roles in a React application.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/admin-page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n//...\nimport { Role } from '../modules/auth/auth.types';\nimport { AuthRoute } from '../shared/components/routes/authRoute';\n//...\n<Route element={<AuthRoute allowedRoles={Role.ADMIN} />}>\n  <Route\n    path={\"...\"}\n    element={\n      <span>\n        Page that only Admins shoudl see\n      </span>\n    }\n  />\n</Route>\n//...\n```\n\n----------------------------------------\n\nTITLE: Building Backend Docker Images\nDESCRIPTION: Command to build and push Docker images to AWS ECR repository. Requires prior AWS environment configuration using saas aws set-env.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/backend/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsaas backend build\n```\n\n----------------------------------------\n\nTITLE: Custom Apollo Mocks Configuration\nDESCRIPTION: Example of how to modify default Apollo mocks by passing a function to apolloMocks prop.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/webapp.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nrender(<Component />, {\n    apolloMocks: (defaultApolloMocks) => defaultApolloMocks.concat(customMock),\n});\n```\n\n----------------------------------------\n\nTITLE: Building Deployable Artifacts in SaaS Boilerplate\nDESCRIPTION: This command builds all deployable artifacts for the SaaS Boilerplate project, preparing them for deployment.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas build\n\nDESCRIPTION\n  Build all deployable artifacts\n\nEXAMPLES\n  $ saas build\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Environment for a Specific Stage in SaaS Boilerplate\nDESCRIPTION: Opens a shell terminal with proper AWS credentials for a specific environment stage, allowing for environment variable configuration.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-env-stage-in-repo.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas aws set-env [STAGE_NAME]\n```\n\n----------------------------------------\n\nTITLE: Running Backend Tests in SaaS Boilerplate\nDESCRIPTION: Command for running tests for the backend part of the SaaS Boilerplate project to ensure backend functionality works correctly.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx run backend:test\n```\n\n----------------------------------------\n\nTITLE: Component Barrel Export File\nDESCRIPTION: Index file for exporting the component, following the barrel exports pattern.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/create-react-component.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport { ExampleComponent } from './example.component';\n```\n\n----------------------------------------\n\nTITLE: Updating UserManager to Handle New Field in Django User Creation\nDESCRIPTION: This code updates the UserManager class to include the new phone_number field when creating a user. It modifies the create_user method to accept and store the phone number.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/create-profile-field.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.contrib.auth.models import BaseUserManager, Group, AbstractBaseUser, PermissionsMixin\nfrom common.acl.helpers import CommonGroups\n\n\nclass UserManager(BaseUserManager):\n    def create_user(self, email, password=None, phone_number=''):\n        if not email:\n            raise ValueError(\"Users must have an email address\")\n\n        user = self.model(\n            email=self.normalize_email(email),\n        )\n        user.set_password(password)\n        user_group = Group.objects.get(name=CommonGroups.User)\n        user.save(using=self._db)\n\n        user.groups.add(user_group)\n\n        UserProfile.objects.create(user=user, phone_number=phone_number)\n\n        return user\n\n    # ...\n\n\nclass User(AbstractBaseUser, PermissionsMixin):\n    # ...\n\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\"profile\")\n    # ...\n    phone_number = models.CharField(max_length=20, blank=True, default='')  # New field\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Django Migration (Shell)\nDESCRIPTION: This command creates an empty Django migration file in the users app. It's used to prepare for adding the new user role to the database.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/create-role.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py makemigrations --empty users\n```\n\n----------------------------------------\n\nTITLE: Factory Usage Example\nDESCRIPTION: Shows how to use the created document factory in tests or storybook.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/webapp.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { documentFactory } from '@sb/webapp-documents/src/tests/factories/document'\n//...\nconst document = documentFactory();\n// or\nconst document = documentFactory({ file: { name: 'image.png', url: 'http://example/image.png' } })\n```\n\n----------------------------------------\n\nTITLE: Building backend Docker image using NX\nDESCRIPTION: Builds a backend Docker image by running the docker compose build command for the backend service.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run backend:compose-build-image\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name Variable in AWS Parameter Store\nDESCRIPTION: Sets the PROJECT_NAME environment variable in AWS Systems Manager Parameter Store using chamber via the SaaS Boilerplate CLI.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-env-stage-in-repo.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas aws set-var PROJECT_NAME saas\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Variables in AWS Parameter Store\nDESCRIPTION: Sets all required domain-related environment variables including hosted zone details and domain names for different components of the application.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-env-stage-in-repo.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas aws set-var SB_HOSTED_ZONE_ID XYZ\npnpm saas aws set-var SB_HOSTED_ZONE_NAME example.com\npnpm saas aws set-var SB_DOMAIN_ADMIN_PANEL admin.qa.example.com\npnpm saas aws set-var SB_DOMAIN_FLOWER flower.qa.example.com\npnpm saas aws set-var SB_DOMAIN_API api.qa.example.com\npnpm saas aws set-var SB_DOMAIN_CDN cdn.qa.example.com\npnpm saas aws set-var SB_DOMAIN_DOCS docs.qa.example.com\npnpm saas aws set-var SB_DOMAIN_WEB_APP app.qa.example.com\n```\n\n----------------------------------------\n\nTITLE: Creating Django migrations\nDESCRIPTION: Runs the Django makemigrations command inside the backend container to create database migrations.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas backend makemigrations\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Strategy (Python)\nDESCRIPTION: Code snippet showing the required method to implement when creating a custom notification strategy in the backend. The send_notification method must be implemented in classes extending BaseNotificationStrategy.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/notifications/create-notification.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef send_notification(user: str, type: str, data: dict):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing CLI Plugins Command\nDESCRIPTION: Command for installing plugins into the CLI. Can install from npm or git URL. User-installed plugins override core plugins.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas plugins:install PLUGIN...\n\nARGUMENTS\n  PLUGIN  Plugin to install.\n\nFLAGS\n  -f, --force    Run yarn install with force flag.\n  -h, --help     Show CLI help.\n  -v, --verbose\n```\n\n----------------------------------------\n\nTITLE: Creating New Django App\nDESCRIPTION: Commands to start a shell and create a new Django app named 'store'\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/backend/backend-model.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas backend shell\ncd apps && django-admin startapp store\n```\n\n----------------------------------------\n\nTITLE: Running Django migrations\nDESCRIPTION: Executes the Django migrate command inside the backend container to apply database migrations.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas backend migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Matrix Tools for Deployment Tracking\nDESCRIPTION: Sets up environment variables for the 'tools' package which tracks and displays information about deployed application versions in the version matrix dashboard.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-env-stage-in-repo.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas aws set-var SB_TOOLS_ENABLED <true/false>\npnpm saas aws set-var SB_TOOLS_BASIC_AUTH username:password\npnpm saas aws set-var SB_TOOLS_HOSTED_ZONE_ID XYZ\npnpm saas aws set-var SB_TOOLS_HOSTED_ZONE_NAME example.com\npnpm saas aws set-var SB_TOOLS_DOMAIN_VERSION_MATRIX status.example.com\n```\n\n----------------------------------------\n\nTITLE: Setting Workers Secrets in SaaS Boilerplate\nDESCRIPTION: This command opens a JSON file containing workers secrets for editing. After saving, the secrets are uploaded to AWS Systems Manager Parameter Store.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-runtime-env-vars.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas workers secrets\n```\n\n----------------------------------------\n\nTITLE: Type Checking Command\nDESCRIPTION: Command to run TypeScript compilation for type checking without emitting files.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp/commands.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run type-check\n```\n\n----------------------------------------\n\nTITLE: Defining Django Product Model\nDESCRIPTION: Basic Django model definition for a Product with HashidAutoField as primary key and a name field.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/backend.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport hashid_field\nfrom django.db import models\n\n\nclass Product(models.Model):\n    id = hashid_field.HashidAutoField(primary_key=True)\n    name = models.CharField(max_length=255)\n```\n\n----------------------------------------\n\nTITLE: Linking CLI Plugins Command\nDESCRIPTION: Command for linking plugins into the CLI for development purposes. Linked plugins override user-installed or core plugins.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas plugins:link PLUGIN\n\nARGUMENTS\n  PATH  [default: .] path to plugin\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: Command to apply migrations to the database\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/backend/backend-model.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas backend migrate\n```\n\n----------------------------------------\n\nTITLE: Running Backend Tests in SaaS Boilerplate\nDESCRIPTION: This command runs all backend tests within a Docker container, ensuring a consistent testing environment.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas backend test\n\nDESCRIPTION\n  Runs all backend tests in docker container\n\nEXAMPLES\n  $ saas backend test\n```\n\n----------------------------------------\n\nTITLE: Setting the Environment Stage for SaaS Boilerplate in Shell\nDESCRIPTION: This command switches the context to a specific environment stage before deployment. The STAGE_NAME parameter should be replaced with your target environment (e.g., dev, staging, prod).\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/deploy-infrastructure.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsaas aws set-env [STAGE_NAME]\n```\n\n----------------------------------------\n\nTITLE: Required Email Environment Variables\nDESCRIPTION: Essential environment variable needed for basic email functionality. Sets the from address that will be visible to end users in sent emails.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_backend_email.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nEMAIL_FROM_ADDRESS=from@example.org\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Environment Stage\nDESCRIPTION: Command to switch the AWS context to a specific environment stage before deployment\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/run-deployment-commands.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsaas aws set-env [STAGE_NAME]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Settings in serverless.yml\nDESCRIPTION: Sets up custom configuration for AWS Lambda functions, including SSM parameter naming and configuration file selection based on deployment stage.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/create-workers-module.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n  ssmService: env-${env:PROJECT_NAME}-${self:provider.stage}-workers\n  conf: ${file(./${self:custom.confFile.${self:provider.stage}})}\n  confFile:\n    local: workers.conf.local.yml\n    dev: workers.conf.yml\n    qa: workers.conf.yml\n    prod: workers.conf.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Route Paths\nDESCRIPTION: Shows how to configure nested route paths using the nestedPath helper function.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/new-route.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { nestedPath } from '@sb/webapp-core/utils';\n\nexport const RoutesConfig = {\n  example: nestedPath('example', {\n    list: '',\n    details: ':id',\n    edit: ':id/edit',\n    add: 'add',\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Generate Email Template using Plop\nDESCRIPTION: Command to generate email template files using plop generator in the webapp directory\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/emails/create-email-template.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplop email MyEmailName\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server Command\nDESCRIPTION: Command to start the Vite development server along with GraphQL type generation watch mode.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp/commands.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Deploying Webapp Command\nDESCRIPTION: Command for deploying webapp to AWS using previously built artifacts. Includes dry-run option.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas webapp deploy [--diff]\n\nFLAGS\n  --diff  Perform a dry run and list all changes that would be applied in AWS account\n```\n\n----------------------------------------\n\nTITLE: Switching Environment Context in SaaS Boilerplate\nDESCRIPTION: This command switches the context to a specific environment stage in the SaaS Boilerplate project. It's used before setting environment variables to ensure they are applied to the correct stage.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-runtime-env-vars.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsaas aws set-env [STAGE_NAME]\n```\n\n----------------------------------------\n\nTITLE: Building Version Matrix Service\nDESCRIPTION: Command to build the Version Matrix service before deployment. This step is necessary to prepare the service for AWS deployment.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/dev-tools/version-matrix.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx run status-dashboard:build\n```\n\n----------------------------------------\n\nTITLE: Email Template Type Definition\nDESCRIPTION: TypeScript enum definition for email template types used by backend for template selection\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/emails/create-email-template.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum EmailTemplateType {\n  MY_EMAIL_NAME = 'MY_EMAIL_NAME',\n  //<-- INJECT EMAIL TYPE -->\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Role Permissions Configuration\nDESCRIPTION: JSON configuration for creating an IAM role with full administrative access permissions.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/configure-aws-credentials.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"*\",\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating New Notification in Webapp (Shell)\nDESCRIPTION: Command to generate a new notification component and story files in the webapp package. The <type> parameter is used as the notification identifier and name.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/notifications/create-notification.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn plop notification <type>\n```\n\n----------------------------------------\n\nTITLE: Starting the Web Application\nDESCRIPTION: This command starts the local development web server for the SaaS Boilerplate web application. It runs the webapp on http://localhost:3000.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/_start-app.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx start webapp\n```\n\n----------------------------------------\n\nTITLE: Creating CI/CD Credentials for SaaS Boilerplate\nDESCRIPTION: This command creates CI/CD repository credentials that can be used in various version control systems to push code changes to CodeCommit.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas ci create-credentials\n\nDESCRIPTION\n  Create CI/CD repository credentials. They can be used in Bitbucket, Github, Gitlab, etc to push code changes to\n  CodeCommit\n\nEXAMPLES\n  $ saas ci create-credentials\n```\n\n----------------------------------------\n\nTITLE: MFA Configuration in AWS Config\nDESCRIPTION: Example configuration for adding MFA serial number to AWS profile in config file.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/configure-aws-credentials.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n[profile saas]\nsource_profile = your-personal-user-name\nrole_arn = arn:aws:iam::123456789:role/SaaSBoilerplateAdminRole\nmfa_serial=arn:aws:iam::123456789:mfa/someone@example.com\n```\n\n----------------------------------------\n\nTITLE: Storybook Command\nDESCRIPTION: Command to start Storybook server with email template pre-building functionality.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp/commands.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Shadcn/ui Component in React/TypeScript\nDESCRIPTION: Demonstrates how to import an existing Shadcn/ui component (Button) from the webapp-core package in a React/TypeScript file.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/shadcn.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@sb/webapp-core/components/ui/button';\n```\n\n----------------------------------------\n\nTITLE: Configure TypeScript Paths\nDESCRIPTION: TypeScript configuration to add library paths in tsconfig.base.json for proper module resolution\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/project-structure/create-web-lib.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@sb/webapp-libs-mylib/*\": [\n        \"packages/webapp-libs/mylib/src/*\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Email Secrets in SaaS Boilerplate\nDESCRIPTION: This command runs an ssm-editor helper tool in a Docker container to set runtime environmental variables for the webapp service, using chamber to fetch and set variables in AWS SSM Parameter Store.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas emails secrets\n\nDESCRIPTION\n  Runs an ssm-editor helper tool in docker container to set runtime environmental variables of webapp service.\n  Underneath it uses chamber to both fetch and set those variables in AWS SSM Parameter Store\n\nEXAMPLES\n  $ saas emails secrets\n```\n\n----------------------------------------\n\nTITLE: Building Email Templates for SaaS Boilerplate\nDESCRIPTION: This command builds the email artifact and places it in the workers package of the SaaS Boilerplate project.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas emails build\n\nDESCRIPTION\n  Build emails artifact and place it in workers package\n\nEXAMPLES\n  $ saas emails build\n```\n\n----------------------------------------\n\nTITLE: Deploying Infrastructure for SaaS Boilerplate\nDESCRIPTION: This command deploys the infrastructure of a currently selected environment stage to an AWS account. It can deploy specific stacks or all stacks, with an optional dry run flag.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas infra deploy [STACKNAME] [--diff]\n\nARGUMENTS\n  STACKNAME  (global|main|db|functions|ci|components) Name of the stack to deploy. If not specified all will be deployed\n\nFLAGS\n  --diff  Perform a dry run and list all changes that would be applied\n\nDESCRIPTION\n  Deploy infrastructure of a currently selected environment stage to AWS account\n\nEXAMPLES\n  $ saas infra deploy\n```\n\n----------------------------------------\n\nTITLE: IAM Role Trust Policy Configuration\nDESCRIPTION: JSON configuration for the trust relationship policy of the IAM role.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/configure-aws-credentials.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::<AWS_ACCOUNT_ID>:root\"\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Command for Starting Backend Services\nDESCRIPTION: A shorter version of the command to start backend services using Docker Compose. This command achieves the same result as the longer version.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/_start-app.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas up\n```\n\n----------------------------------------\n\nTITLE: Installing and Using SaaS Boilerplate CLI\nDESCRIPTION: Basic usage instructions for installing and running the SaaS CLI tool. Shows version checking and help command usage.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh-session\nCODE:\n```\n$ pnpm i -w\n$ saas COMMAND\nrunning command...\n$ saas (--version)\n@sb/cli/2.0.3 darwin-arm64 node-v18.15.0\n$ saas --help [COMMAND]\nUSAGE\n  $ saas COMMAND\n...\n```\n\n----------------------------------------\n\nTITLE: AWS Config File Setup\nDESCRIPTION: Configuration for ~/.aws/config file to set up the base and project-specific profiles with region settings.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/configure-aws-credentials.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n[profile my-profile]\nregion=eu-west-1\n\n[profile saas]\nsource_profile = my-profile\nrole_arn = arn:aws:iam::<AWS_ACCOUNT_ID>:role/SaaSBoilerplateAdminRole\nregion=eu-west-1\n```\n\n----------------------------------------\n\nTITLE: Installing Plugins for SaaS Boilerplate CLI\nDESCRIPTION: This command installs plugins into the SaaS Boilerplate CLI. Plugins can be installed from npm or a git URL, with options for force installation and verbose output.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas plugins:install PLUGIN...\n\nARGUMENTS\n  PLUGIN  Plugin to install.\n\nFLAGS\n  -f, --force    Run yarn install with force flag.\n  -h, --help     Show CLI help.\n  -v, --verbose\n\nDESCRIPTION\n  Installs a plugin into the CLI.\n  Can be installed from npm or a git url.\n\n  Installation of a user-installed plugin will override a core plugin.\n\n  e.g. If you have a core plugin that has a 'hello' command, installing a user-installed plugin with a 'hello' command\n  will override the core plugin implementation. This is useful if a user needs to update core plugin functionality in\n  the CLI without the need to patch and update the whole CLI.\n\n\nALIASES\n  $ saas plugins add\n\nEXAMPLES\n  $ saas plugins:install myplugin\n\n  $ saas plugins:install https://github.com/someuser/someplugin\n\n  $ saas plugins:install someuser/someplugin\n```\n\n----------------------------------------\n\nTITLE: Linting All Projects in SaaS Boilerplate\nDESCRIPTION: This command runs linting checks on all projects within the SaaS Boilerplate.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas lint\n\nDESCRIPTION\n  Lint all projects\n\nEXAMPLES\n  $ saas lint\n```\n\n----------------------------------------\n\nTITLE: Uploading New Environment Version in JavaScript\nDESCRIPTION: This script uploads new version information for an environment. It uses ENV_STAGE for the environment name, VERSION for the current version being deployed, and allows additional key-value pairs to be passed as arguments. The script uploads a versions.json file to the project's status dashboard S3 bucket.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/status-dashboard/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnode upload-version.js <serviceName1, ..serviceNameN> [key=value, keyN=valueN, ...]\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Environment variables configuration for the project's .env file to specify AWS profile settings.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/configure-aws-credentials.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dotenv\nCODE:\n```\nPROJECT_NAME=saas\nAWS_VAULT_PROFILE=saas\n...\n```\n\n----------------------------------------\n\nTITLE: Secrets Management Command\nDESCRIPTION: Command to manage AWS environment variables for the webapp service using secrets-editor.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp/commands.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas webapp secrets\n```\n\n----------------------------------------\n\nTITLE: Updating CLI Plugins Command\nDESCRIPTION: Command for updating installed plugins in the CLI system.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas plugins update [-h] [-v]\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Environment Variables for Backend Integration\nDESCRIPTION: This table outlines the essential environment variables needed to set up Stripe integration in the backend. It includes variables for test and live secret keys, webhook secret, and a mode toggle between live and test environments.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_backend_stripe.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Description                                                                                             | Example                 |\n| ------------------------- | ------------------------------------------------------------------------------------------------------- | ----------------------- |\n| `STRIPE_TEST_SECRET_KEY`  | Use this one for Stripe test mode. [docs](https://stripe.com/docs/keys)                                 | `sk_test_4dEFRCLCgCb`   |\n| `STRIPE_LIVE_SECRET_KEY`  | Use this one for Stripe live mode. [docs](https://stripe.com/docs/keys)                                 | `sk_4dEFRCLCgCbMy6O4FX` |\n| `DJSTRIPE_WEBHOOK_SECRET` | [docs](https://stripe.com/docs/webhooks/best-practices#endpoint-secrets)                                | `whsec_12345`           |\n| `STRIPE_LIVE_MODE`        | (bool) Set `true` or `false` to toggle between `live` and `test` Stripe mode. By default set to `False` | `true`                  |\n```\n\n----------------------------------------\n\nTITLE: Running Email Tests in SaaS Boilerplate\nDESCRIPTION: This command runs all email-related tests for the SaaS Boilerplate project.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas emails test\n\nDESCRIPTION\n  Runs all emails tests\n\nEXAMPLES\n  $ saas emails test\n```\n\n----------------------------------------\n\nTITLE: Configuring Contentful Environment Variables\nDESCRIPTION: Environment variable configuration required for Contentful migrations. These variables should be set in the packages/contentful/.env file and include space ID, access token, and environment settings.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/contentful/sync-data.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCONTENTFUL_SPACE_ID=<CHANGE_ME>\nCONTENTFUL_ACCESS_TOKEN=<CHANGE_ME>\nCONTENTFUL_ENVIRONMENT=<CHANGE_ME>\n```\n\n----------------------------------------\n\nTITLE: Uploading Individual Service Version in JavaScript\nDESCRIPTION: This script is used to upload version information for a specific service. It requires the service name and version as arguments, and allows additional key-value pairs to be passed. This script is useful for updating version information for individual services within the project.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/status-dashboard/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnode upload-service-version.js <name> <version> [key=value, keyN=valueN, ...]\n```\n\n----------------------------------------\n\nTITLE: Setting CI Mode for AWS CodePipeline in SaaS Boilerplate\nDESCRIPTION: Configures the CI execution mode to either 'parallel' (default) or 'simple' to handle AWS CodeBuild concurrent build limits, especially important for new AWS accounts.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-env-stage-in-repo.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas aws set-var SB_CI_MODE <parallel/simple>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm in SaaS Boilerplate\nDESCRIPTION: This command installs the node_modules for all packages in the repository using pnpm workspaces. It simplifies the dependency management process by allowing a single command to handle installations across multiple packages.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/_install-deps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Backend Shell in SaaS Boilerplate\nDESCRIPTION: This command runs an interactive bash shell inside the backend Docker container, allowing direct interaction with the backend environment.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas backend shell\n\nDESCRIPTION\n  Runs interactive bash shell inside backend docker container\n\nEXAMPLES\n  $ saas backend shell\n```\n\n----------------------------------------\n\nTITLE: Configuring Contentful Environment Variables for Web App\nDESCRIPTION: Required environment variables for Contentful integration in a web application using Vite. These variables establish the connection to a specific Contentful space and environment with proper authentication.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_webapp_contentful.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                  | Description                 |\n| --------------------- | --------------------------- |\n| VITE_CONTENTFUL_SPACE | Contentful Space ID         |\n| VITE_CONTENTFUL_TOKEN | Contentful API access token |\n| VITE_CONTENTFUL_ENV   | Contentful environment name |\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for SaaS Boilerplate CLI\nDESCRIPTION: This command displays help information for the SaaS Boilerplate CLI, including details about specific commands if specified.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas help [COMMANDS] [-n]\n\nARGUMENTS\n  COMMANDS  Command to show help for.\n\nFLAGS\n  -n, --nested-commands  Include all nested commands in the output.\n\nDESCRIPTION\n  Display help for saas.\n```\n\n----------------------------------------\n\nTITLE: Accessing Task Results on Localhost\nDESCRIPTION: URL to access the list of Celery task results in Django Admin on localhost. This uses the django-db backend for storing task results.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/debug-async-job-celery.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[http://admin.localhost:5001/django_celery_results/taskresult/](http://admin.localhost:5001/django_celery_results/taskresult/)\n```\n\n----------------------------------------\n\nTITLE: Advanced Component Testing with Routing and Queries\nDESCRIPTION: Complex example showing how to test components with routing structure, GraphQL queries, and mutations.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/webapp.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLocalePath } from '@sb/webapp-core/utils';\nimport { currentUserFactory, fillCommonQueryWithUser } from '@sb/webapp-api-client/tests/factories';\nimport { composeMockedQueryResult } from '@sb/webapp-api-client/tests/utils';\n\nimport { RoutesConfig } from '../../../../app/config/routes';\nimport { Role } from '../../../../modules/auth/auth.types';\nimport { createMockRouterProps, render } from '../../../../tests/utils/rendering';\nimport { authConfirmUserEmailMutation } from '../confirmEmail.graphql';\n\n//...\ndescribe('ConfirmEmail: Component', () => {\n    const user = 'user_id';\n    const token = 'token';\n\n    const Component = () => (\n        <Routes>\n          <Route path={getLocalePath(RoutesConfig.confirmEmail)} element={<ConfirmEmail />} />\n          <Route path={getLocalePath(RoutesConfig.login)} element={<span>Login page mock</span>} />\n        </Routes>\n    );\n\n    it('should show success message and redirect to login ', async () => {\n        const apolloMocks = [\n          fillCommonQueryWithUser(\n            currentUserFactory({\n              roles: [Role.ADMIN],\n            })\n          ),\n          composeMockedQueryResult(authConfirmUserEmailMutation, {\n            variables: {\n              input: { user, token },\n            },\n            data: {\n              confirm: {\n                ok: true,\n              },\n            },\n          }),\n        ];\n        const routerProps = createMockRouterProps(RoutesConfig.confirmEmail, { user, token });\n\n        const { waitForApolloMocks } = render(<Component />, {\n          routerProps,\n          apolloMocks,\n        });\n\n        await waitForApolloMocks();\n\n        expect(screen.getByText('Login page mock')).toBeInTheDocument();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Domain Certificate in AWS\nDESCRIPTION: Sets the SB_CERTIFICATE_DOMAIN variable to override the default wildcard certificate behavior for production environments, enabling top-level domains like 'app.example.com'.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-env-stage-in-repo.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas aws set-var SB_CERTIFICATE_DOMAIN example.com\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with pnpm\nDESCRIPTION: Command to install node_modules for all packages in the repository using pnpm workspaces.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Backend Secrets Management in SaaS Boilerplate\nDESCRIPTION: This command runs an ssm-editor helper tool in a Docker container to set runtime environmental variables for the backend service. It uses chamber to fetch and set variables in AWS SSM Parameter Store.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas backend secrets\n\nDESCRIPTION\n  Runs an ssm-editor helper tool in docker container to set runtime environmental variables of backend service.\n  Underneath it uses chamber to both fetch and set those variables in AWS SSM Parameter Store\n\nEXAMPLES\n  $ saas backend secrets\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests in Watch Mode\nDESCRIPTION: Executes Jest test runner with the --watch flag, which is useful for development as it automatically reruns tests when files change.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-tenants/commands.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test:watch\n```\n\n----------------------------------------\n\nTITLE: Internationalization Extraction Command\nDESCRIPTION: Command to extract FormatJS messages from webapp and webapp-libs packages into a translation file.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp/commands.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run extract-intl\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema and Types Commands\nDESCRIPTION: Commands for downloading GraphQL schemas and generating TypeScript types.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp/commands.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run webapp:graphql:download-schema\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run webapp:graphql:generate-types\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run webapp:graphql:generate-types:watch\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration Table\nDESCRIPTION: Markdown table defining optional environment variables for the web application, including API URL, Stripe key, Sentry DSN, and Google Analytics tracking ID.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_webapp_optional.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                              | Description                                                               |        |\n|-----------------------------------|---------------------------------------------------------------------------|--------|\n| VITE_BASE_API_URL                 | Path to access backend API. Set if you want to override default behaviour | `/api` |\n| VITE_STRIPE_PUBLISHABLE_KEY       | Stripe Publishable key                                                    |        |\n| VITE_SENTRY_DSN                   | [Sentry](https://sentry.io/) client key                                   |        |\n| VITE_GOOGLE_ANALYTICS_TRACKING_ID | Google Analytics 4 GTM ID                                                 |        |\n```\n\n----------------------------------------\n\nTITLE: Connecting to remote backend shell\nDESCRIPTION: Connects to the ECS backend task and starts an interactive shell session. Should be called after setting the environment stage.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas backend remote-shell\n```\n\n----------------------------------------\n\nTITLE: Installing SaaS Boilerplate with PNPM\nDESCRIPTION: Command to initialize a new SaaS Boilerplate project using PNPM in an empty directory. The PATH parameter specifies the directory name where the project will be created.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/run-new-project.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm create saas-boilerplate PATH\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for SaaS Boilerplate\nDESCRIPTION: This command builds the documentation artifact for the SaaS Boilerplate project.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas docs build\n\nDESCRIPTION\n  Build docs artifact\n\nEXAMPLES\n  $ saas docs build\n```\n\n----------------------------------------\n\nTITLE: Running Linters for webapp-emails Package\nDESCRIPTION: This command runs eslint and stylelint for the webapp-emails package to ensure code quality and style consistency.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-emails/commands.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Running backend tests using SaaS command\nDESCRIPTION: An alias command for pnpm nx test that executes backend tests.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas backend test\n```\n\n----------------------------------------\n\nTITLE: Deploying Version Matrix to AWS\nDESCRIPTION: Command to deploy the Version Matrix service to AWS. This should be run after the build step and after setting the environment stage using the 'saas aws set-env' command.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/dev-tools/version-matrix.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx run status-dashboard:deploy\n```\n\n----------------------------------------\n\nTITLE: Executing Interactive Shell in AWS ECS Container\nDESCRIPTION: Command to establish an interactive shell session with a container running in AWS ECS using aws-vault and AWS CLI. Requires specification of AWS profile, cluster name, region, task ID, and container name.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/dev-tools/ssh-into-container.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naws-vault exec <SELECTED_AWS_VAULT_PROFILE> -- aws ecs execute-command --cluster <CLUSTER_NAME> --region <REGION> --task <TASK_ID> --container <CONTAINER_NAME> --command \"/bin/bash\" --interactive\n```\n\n----------------------------------------\n\nTITLE: Running Black code formatter\nDESCRIPTION: Runs the Black Python code formatter inside the backend container.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas backend black\n```\n\n----------------------------------------\n\nTITLE: Installing SaaS Boilerplate with Yarn\nDESCRIPTION: Command to initialize a new SaaS Boilerplate project using Yarn in an empty directory. The PATH parameter specifies the directory name where the project will be created.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/run-new-project.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create saas-boilerplate PATH\n```\n\n----------------------------------------\n\nTITLE: Deploying Documentation for SaaS Boilerplate\nDESCRIPTION: This command deploys the previously built documentation artifact to AWS. It includes an optional dry run flag to list changes without applying them.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas docs deploy [--diff]\n\nFLAGS\n  --diff  Perform a dry run and list all changes that would be applied in AWS account\n\nDESCRIPTION\n  Deploys docs to AWS using previously built artifact\n\nEXAMPLES\n  $ saas docs deploy\n```\n\n----------------------------------------\n\nTITLE: Performing Type Checking for webapp-emails Package\nDESCRIPTION: This command runs TypeScript compilation (tsc) with disabled file emission to check for type errors in the codebase.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-emails/commands.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run type-check\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Backend Environment Variables in Markdown\nDESCRIPTION: This snippet presents a table of optional backend environment variables, including their names, descriptions, and examples. It covers various configuration options such as Sentry integration, social authentication, and subscription settings.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_backend_optional.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n##### Other optional backend vars:\n\n| Name                                 | Description                                                                                                                                                                                                              | Example                                      |\n| ------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------- |\n| `SENTRY_DSN`                         | [Sentry](https://sentry.io/) client key                                                                                                                                                                                  | `https://(...)@(...).ingest.sentry.io/(...)` |\n| `SOCIAL_AUTH_ALLOWED_REDIRECT_HOSTS` | Allowed hosts for OAuth redirection. Check [Python Social Auth](https://python-social-auth.readthedocs.io/en/latest/configuration/settings.html#processing-redirects-and-urlopen) package documentation for more details | `app.demo.saas.apptoku.com`                  |\n| `SOCIAL_AUTH_FACEBOOK_KEY`           | Client key for Facebook OAuth integration                                                                                                                                                                                |                                              |\n| `SOCIAL_AUTH_FACEBOOK_SECRET`        | Client secret for Facebook OAuth integration                                                                                                                                                                             |                                              |\n| `SOCIAL_AUTH_GOOGLE_OAUTH2_KEY`      | Client key for Google OAuth integration                                                                                                                                                                                  |                                              |\n| `SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET`   | Client secret for Google OAuth integration                                                                                                                                                                               |                                              |\n| `SUBSCRIPTION_TRIAL_PERIOD_DAYS`     | Number of days for subscription trial. By default set to `7`                                                                                                                                                             | `1`                                          |\n| `OPENAI_API_KEY`                     | OpenAI API for generative AI module                                                                                                                                                                                      |                                              |\n| `VITE_WEB_APP_URL`                   | Absolute URL to web application. By default it's the value kept in global environment setting `SB_DOMAIN_WEB_APP`                                                                                                        | `https://app.demo.saas.apptoku.com`          |\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode for webapp-emails Package\nDESCRIPTION: This command runs Jest tests with the --watch flag, which is useful for development as it re-runs tests on file changes.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-emails/commands.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test:watch\n```\n\n----------------------------------------\n\nTITLE: Generating Webapp Library Structure in SaaS Boilerplate\nDESCRIPTION: This command generates a project structure for a new webapp library that can be imported from other webapp libraries or the webapp package. It uses the NX generator within the SaaS Boilerplate tools package.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/tools/commands.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx g @sb/tools:webapp-lib --directory webapp-libs mylib\n```\n\n----------------------------------------\n\nTITLE: Equivalent Query Without Fragment\nDESCRIPTION: Demonstrates the expanded version of the query showing the fields that would be included from the fragment.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/use-fragments.mdx#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPerson {\n  people(id: \"7\") {\n    firstName\n    lastName\n    avatar(size: LARGE)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SaaS Boilerplate with NPM\nDESCRIPTION: Command to initialize a new SaaS Boilerplate project using NPM in an empty directory. The PATH parameter specifies the directory name where the project will be created.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/run-new-project.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init saas-boilerplate PATH\n```\n\n----------------------------------------\n\nTITLE: Uploading Version Information for a Single Service in SaaS Boilerplate\nDESCRIPTION: This command is executed at the end of an application service deployment. It collects and saves deployment information such as service name, version, and build time to an S3 bucket for use by the Version matrix tool. It can also include additional deployment data.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/tools/commands.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run tools:upload-service-version workers\n```\n\n----------------------------------------\n\nTITLE: Building webapp-emails Package in CI Environment\nDESCRIPTION: This command is used in the CI pipeline to build the webapp-emails package within the correct environment context using chamber.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-emails/commands.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx run webapp-emails:build-for-env\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Dependencies with PDM\nDESCRIPTION: Command to install backend dependencies using PDM package manager in the backend packages directory.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/_requirements.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npdm install\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Server\nDESCRIPTION: This command launches a local documentation instance based on Docusaurus. It provides easy access to the SaaS Boilerplate documentation while working on the project.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/_start-app.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx start docs\n```\n\n----------------------------------------\n\nTITLE: Running backend tests with NX\nDESCRIPTION: Executes tests by running the run_tests.sh script inside a Docker container using docker compose.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run backend:test\n```\n\n----------------------------------------\n\nTITLE: Import Library in TypeScript\nDESCRIPTION: Example of importing the newly created library in a TypeScript file\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/project-structure/create-web-lib.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as mylib from '@sb/webapp-libs-mylib';\n```\n\n----------------------------------------\n\nTITLE: Checking pnpm Version with Command Line\nDESCRIPTION: Command to verify the installed pnpm version, which should be version 8.6 or above for this project.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/_requirements.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm --version\n```\n\n----------------------------------------\n\nTITLE: Uploading Version Information for Multiple Services in SaaS Boilerplate\nDESCRIPTION: This command is run during the 'upload version' deployment pipeline step. It collects and saves deployment information such as environment name, version, and build time for specified services to an S3 bucket for use by the Version matrix tool.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/tools/commands.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run tools:upload-version migrations,api,workers,webapp\n```\n\n----------------------------------------\n\nTITLE: Building Worker Artifacts\nDESCRIPTION: Command to run tests and build necessary artifacts required by Serverless Framework\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/workers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas workers build\n```\n\n----------------------------------------\n\nTITLE: Checking PDM Version with Command Line\nDESCRIPTION: Command to verify the installed PDM version, which should be version 2.3 or above for this project.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/_requirements.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npdm --version\n```\n\n----------------------------------------\n\nTITLE: Inspecting Plugins in SaaS Boilerplate CLI\nDESCRIPTION: This command displays installation properties of a plugin in the SaaS Boilerplate CLI, with options for verbose output and JSON formatting.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas plugins:inspect PLUGIN...\n\nARGUMENTS\n  PLUGIN  [default: .] Plugin to inspect.\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  Displays installation properties of a plugin.\n\nEXAMPLES\n  $ saas plugins:inspect myplugin\n```\n\n----------------------------------------\n\nTITLE: Running Ruff code linter\nDESCRIPTION: Executes the Ruff Python code linter inside the backend container.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas backend ruff\n```\n\n----------------------------------------\n\nTITLE: Adding App to Local Apps Setting\nDESCRIPTION: Adding the new store app to the LOCAL_APPS list in Django settings\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/backend/backend-model.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLOCAL_APPS = [\n    \"apps.content\",\n    ...\n    \"apps.store\",\n]\n```\n\n----------------------------------------\n\nTITLE: Starting Local Docusaurus Server for SaaS Boilerplate\nDESCRIPTION: This command starts a local Docusaurus server for the SaaS Boilerplate project documentation.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas docs up\n\nDESCRIPTION\n  Starts local docusaurus server\n\nEXAMPLES\n  $ saas docs up\n```\n\n----------------------------------------\n\nTITLE: Build Command\nDESCRIPTION: Command to build the web application using Vite after regenerating GraphQL types.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp/commands.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run webapp:build\n```\n\n----------------------------------------\n\nTITLE: Syncing Stripe Data in SaaS Boilerplate Backend\nDESCRIPTION: This command runs a Stripe synchronization command inside the backend Docker container. It requires environmental variables with Stripe credentials to be set beforehand.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas backend stripe sync\n\nDESCRIPTION\n  Run stripe synchronisation command inside backend docker container. Requires environmental variables with stripe\n  credentials to be set.\n\nEXAMPLES\n  $ saas backend stripe sync\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version with Command Line\nDESCRIPTION: Command to verify the installed Node.js version, which should be version 18 or above for this project.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/_requirements.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS Secrets Editor\nDESCRIPTION: Command to start the SSM editor tool for setting AWS variables\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/dev-tools/sentry.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas backend secrets\n```\n\n----------------------------------------\n\nTITLE: Plop Generator Command\nDESCRIPTION: Command to run the Plop code generator for scaffolding new components and features.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp/commands.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run plop\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry DSN in AWS\nDESCRIPTION: JSON configuration for setting the Sentry DSN variable in AWS environment\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/dev-tools/sentry.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SENTRY_DSN\": \"<YOUR_SENTRY_DSN>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Webapp-core Package in Bash\nDESCRIPTION: Shows the bash command to navigate to the webapp-core package directory where Shadcn/ui components are managed.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/shadcn.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/webapp-core\n```\n\n----------------------------------------\n\nTITLE: Building backend with NX\nDESCRIPTION: Runs the build.sh script. This command depends on the backend:test command to run first.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm nx run backend:build\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins in SaaS Boilerplate CLI\nDESCRIPTION: This command lists all installed plugins for the SaaS Boilerplate CLI, with options to show core plugins and format output as JSON.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas plugins [--json] [--core]\n\nFLAGS\n  --core  Show core plugins.\n\nGLOBAL FLAGS\n  --json  Format output as json.\n\nDESCRIPTION\n  List installed plugins.\n\nEXAMPLES\n  $ saas plugins\n```\n\n----------------------------------------\n\nTITLE: Executing Interactive Shell in AWS ECS Container using AWS Exec\nDESCRIPTION: Command to establish an interactive shell session with a running container in AWS ECS. This requires specifying the AWS profile via aws-vault, along with the cluster name, region, task ID, and container name parameters.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/guides/aws-exec.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naws-vault exec <SELECTED_AWS_VAULT_PROFILE> -- aws ecs execute-command --cluster <CLUSTER_NAME> --region <REGION> --task <TASK_ID> --container <CONTAINER_NAME> --command \"/bin/bash\" --interactive\n```\n\n----------------------------------------\n\nTITLE: Running Contentful Migration Script\nDESCRIPTION: Shell commands to navigate to the contentful package directory and execute the migration script for synchronizing data models.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/contentful/sync-data.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/contentful\nnode scripts/run_migrations.js\n```\n\n----------------------------------------\n\nTITLE: Running Tests for webapp-emails Package\nDESCRIPTION: This command executes Jest tests for the webapp-emails package to ensure functionality and catch regressions.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-emails/commands.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Stopping Backend and Frontend in SaaS Boilerplate\nDESCRIPTION: This command stops both the backend and frontend services of the SaaS Boilerplate project.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas down\n\nDESCRIPTION\n  Starts both backend and frontend\n\nEXAMPLES\n  $ saas down\n```\n\n----------------------------------------\n\nTITLE: Accessing Flower in Deployed Environment\nDESCRIPTION: URL pattern to access the Flower monitoring tool for Celery in a deployed environment. Replace 'your-stage-domain' with the actual domain of your deployment.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/debug-async-job-celery.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`http://flower.<your-stage-domain>`\n```\n\n----------------------------------------\n\nTITLE: Building backend using SaaS command\nDESCRIPTION: An alias command for pnpm nx build that builds the backend.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas backend build\n```\n\n----------------------------------------\n\nTITLE: Updating Storybook for React Component with Todo Collection\nDESCRIPTION: Modifies the Storybook configuration to provide mocked Apollo query results for a collection of todo items in the ExampleComponent.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/component-with-query.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { composeMockedListQueryResult } from '@sb/webapp-api-client/tests/utils';\nimport { Story } from '@storybook/react';\nimport { append } from 'ramda';\n\nimport { withProviders } from '../../utils/storybook';\nimport { ExampleComponent } from './example.component';\nimport { todosQuery } from './example.graphql';\n\nconst Template: Story = () => {\n  return <ExampleComponent />;\n};\n\nconst todos = [{ id: 1, name: 'Todo 1' }, { id: 2, name: 'Todo 2' }];\n\nexport default {\n  title: 'Shared/ExampleComponent',\n  component: ExampleComponent,\n  decorators: [\n    withProviders({\n      apolloMocks: append(\n        composeMockedListQueryResult(todosQuery,\n        'todos',\n        'todosQuery',\n        {\n          data: todos\n        })\n      ),\n    }),\n  ],\n};\n\nexport const Default = Template.bind({});\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Environment Stage\nDESCRIPTION: Command to select the proper environment stage for AWS configuration\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/dev-tools/sentry.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas aws set-env qa\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version with Command Line\nDESCRIPTION: Command to verify the installed Python version, which should be version 3.11 for this project.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/getting-started/run-project/_requirements.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -v\n```\n\n----------------------------------------\n\nTITLE: Navigating to Backend Directory\nDESCRIPTION: Command to change directory to the backend package location\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/backend/backend-model.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/backend\n```\n\n----------------------------------------\n\nTITLE: Running Linters in webapp Package\nDESCRIPTION: Executes eslint and stylelint for the webapp package to ensure code quality and style consistency.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-tenants/commands.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Command Usage\nDESCRIPTION: Example usage of the autocomplete command for shell integration, including options for different shell types and cache refresh.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh-session\nCODE:\n```\nUSAGE\n  $ saas autocomplete [SHELL] [-r]\n\nARGUMENTS\n  SHELL  (zsh|bash|powershell) Shell type\n\nFLAGS\n  -r, --refresh-cache  Refresh cache (ignores displaying instructions)\n\nDESCRIPTION\n  display autocomplete installation instructions\n\nEXAMPLES\n  $ saas autocomplete\n\n  $ saas autocomplete bash\n\n  $ saas autocomplete zsh\n\n  $ saas autocomplete powershell\n\n  $ saas autocomplete --refresh-cache\n```\n\n----------------------------------------\n\nTITLE: Starting backend shell\nDESCRIPTION: Runs a bash shell inside the backend container using docker compose.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas backend shell\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Authentication for Non-Production Environments\nDESCRIPTION: Sets up HTTP Basic Authentication to protect non-production environments from unauthorized access by configuring a username and password combination.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/create-env-stage-in-repo.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas aws set-var SB_BASIC_AUTH username:password\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Docusaurus Website\nDESCRIPTION: Generates static website content in the build directory using NX. The resulting files can be deployed to any static hosting service.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npnpm nx run docs:build\n```\n\n----------------------------------------\n\nTITLE: Field Validation Error Response Format in GraphQL\nDESCRIPTION: Demonstrates the structure of a field-specific validation error response. The response includes error location, path, and field-specific validation details in the extensions object.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/conventions/errors-format.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"GraphQlValidationError\",\n  \"locations\": [{\"line\": 3, \"column\": 11}],\n  \"path\": [\"createProduct\"],\n  \"extensions\": {\n    \"name\": [{\"message\": \"Product name cannot contain special characters.\", \"code\": \"invalid\"}]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migrations\nDESCRIPTION: Command to create migrations for the new model\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/backend/backend-model.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas backend makemigrations\n```\n\n----------------------------------------\n\nTITLE: Performing Type Check with TypeScript\nDESCRIPTION: Runs TypeScript compiler (tsc) to check for type errors without emitting files. This helps catch type-related issues early in development.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-tenants/commands.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run type-check\n```\n\n----------------------------------------\n\nTITLE: Running Local Documentation Server with PNPM\nDESCRIPTION: Command to start the local documentation server that matches the codebase version using pnpm package manager.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/_local-use-info.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas docs up\n```\n\n----------------------------------------\n\nTITLE: Managing backend secrets\nDESCRIPTION: Starts the secrets-editor tool with the backend context to help set up environment variables for AWS. Should be called after setting the environment stage.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/commands.mdx#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas backend secrets\n```\n\n----------------------------------------\n\nTITLE: Email Template Storybook Configuration\nDESCRIPTION: Storybook story configuration for email template preview and testing\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/emails/create-email-template.mdx#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StoryFn } from '@storybook/react';\n\nimport { EmailTemplateType } from '../../types';\nimport { EmailStory } from '../../emailStory/emailStory.component';\nimport {\n  Template as MyEmailNameEmail,\n  Subject as MyEmailNameSubject,\n  MyEmailNameProps,\n} from './myEmailName.component';\n\nconst Template: StoryFn<MyEmailNameProps> = (args) => (\n  <EmailStory type={EmailTemplateType.MY_EMAIL_NAME} subject={<MyEmailNameSubject />} emailData={args}>\n    <MyEmailNameEmail {...args} />\n  </EmailStory>\n);\n\nexport default {\n  title: 'Emails/MyEmailName',\n  component: MyEmailNameEmail,\n};\n\nexport const Primary = Template.bind({});\nPrimary.args = {};\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Server for Docusaurus Website\nDESCRIPTION: Starts a local development server for the documentation website using NX. This opens a browser window and supports live reloading of changes.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npnpm nx run docs:start\n```\n\n----------------------------------------\n\nTITLE: Including Fragment in GraphQL Query\nDESCRIPTION: Shows how to include a fragment in a GraphQL query definition using TypeScript.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/web-app/use-fragments.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { gql } from '@sb/webapp-api-client/graphql';\n\nexport const currentUserQuery = gql(/* GraphQL */ `\n  query currentUserQuery {\n    currentUser {\n      id\n      ...currentUserFragment\n    }\n  }\n`);\n```\n\n----------------------------------------\n\nTITLE: Running Webapp Tests in SaaS Boilerplate\nDESCRIPTION: Command examples for running linting, type-checking and tests for webapp packages that have been modified. These commands help ensure code quality before submitting contributions.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx run webapp:lint\nnx run webapp:type-check\nnx run webapp:test\n```\n\n----------------------------------------\n\nTITLE: Building webapp-emails Package\nDESCRIPTION: This command uses nx to run vite build with the correct configuration, generating a production-ready build of the web application.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-emails/commands.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx webapp-emails:build\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList Component in JSX\nDESCRIPTION: This code imports the DocCardList component from the theme and renders it on the page. The component is used to automatically display a list of document cards related to AWS documentation.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Starting backend only\nDESCRIPTION: Command to start only the backend component of the SaaS Boilerplate.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas backend up\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Hub Credentials in AWS Secrets Manager for SaaS Boilerplate\nDESCRIPTION: JSON structure for adding Docker Hub authentication credentials to AWS Secrets Manager's GlobalBuildSecrets. These credentials enable reliable access to Docker Hub images during the build process, avoiding rate limits imposed on unauthenticated requests.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/cicd/setup-docker-hub.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{\n  \"DOCKER_USERNAME\": \"example@email.com\",\n  \"DOCKER_PASSWORD\": \"password123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Email Template Barrel Export\nDESCRIPTION: Export statement for email template components\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/emails/create-email-template.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport * from './myEmailName.component';\n```\n\n----------------------------------------\n\nTITLE: Installing SaaS Boilerplate using npm\nDESCRIPTION: Command to initialize a new SaaS Boilerplate project using npm in a specified directory.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init saas-boilerplate PATH\n```\n\n----------------------------------------\n\nTITLE: Accessing Task Results in Deployed Environment\nDESCRIPTION: URL pattern to access the list of Celery task results in Django Admin in a deployed environment. Replace 'your-stage-domain' with the actual domain of your deployment.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/debug-async-job-celery.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`https://flower.<your-stage-domain>/django_celery_results/taskresult/`\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: Imports and renders the DocCardList component to display API reference documentation cards. This is a common pattern in documentation systems like Docusaurus to automatically generate a list of documentation pages.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Accessing Flower on Localhost\nDESCRIPTION: URL to access the Flower monitoring tool for Celery on localhost. Flower provides real-time information about the status of Celery workers and tasks.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/async-workers/debug-async-job-celery.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[http://localhost:5555/](http://localhost:5555/)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList Component in JSX\nDESCRIPTION: Sets up a documentation page that uses the DocCardList component from the theme to display architecture documentation cards\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/architecture/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format - Markdown\nDESCRIPTION: Standard format for changelog entries showing fixes and features with issue/PR references and commit hashes\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- [#293](https://github.com/apptension/aws-boilerplate/issues/293) Fix different avatars of one user in the notification widget ([#375](https://github.com/apptension/aws-boilerplate/issues/375)) ([8972594](https://github.com/apptension/aws-boilerplate/commit/897259404b8a6baabd0c67d03a5c9dda3d279858))\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Provider Enum in TypeScript\nDESCRIPTION: TypeScript enum definition for supported OAuth providers including custom provider addition.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/users/create-oauth-method.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum OAuthProvider {\n  Google = 'google-oauth2',\n  Facebook = 'facebook',\n  CustomOAuth = 'custom',\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SaaS Boilerplate using pnpm\nDESCRIPTION: Command to create a new SaaS Boilerplate project using pnpm in a specified directory.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm create saas-boilerplate PATH\n```\n\n----------------------------------------\n\nTITLE: Email Template Configuration Integration\nDESCRIPTION: Configuration setup to register the email template in the application\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/emails/create-email-template.mdx#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EmailTemplateDefinition, EmailTemplateType } from '../types';\nimport * as MyEmailName from './myEmailName';\n//<-- INJECT EMAIL TEMPLATE IMPORT -->\n\nexport const templates: Record<EmailTemplateType, EmailTemplateDefinition> = {\n  [EmailTemplateType.MY_EMAIL_NAME]: MyEmailName,\n  //<-- INJECT EMAIL TEMPLATE -->\n};\n```\n\n----------------------------------------\n\nTITLE: React Documentation Component Import and Usage\nDESCRIPTION: Imports and renders a DocCardList component for displaying documentation cards in a React-based documentation system.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/coding-standards/linters/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Certificate Domain in SaaS Boilerplate\nDESCRIPTION: Command to override the default wildcard certificate domain pattern with a custom domain name using the SaaS CLI tool. This is useful when you need to use a different domain pattern than the default *.production.example.com format.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/troubleshooting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas aws set-var SB_CERTIFICATE_DOMAIN example.com\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Documentation Components in JSX\nDESCRIPTION: This snippet imports the DocCardList component from the Docusaurus theme and a custom FreshAWSAccountInfo component. It then renders these components within the JSX structure of the page.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport FreshAWSAccountInfo from '../../shared/partials/_freash-aws-account-info.mdx';\n\n<FreshAWSAccountInfo />\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: This code snippet renders the DocCardList component, which will display a list of documentation cards or links based on the current documentation structure.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Fill Method Usage in Unit Test\nDESCRIPTION: Demonstrates how to use the defined fill method in a component test with Apollo mocks.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/tests/webapp.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { times } from 'ramda';\nimport { documentFactory, fillDocumentsListQuery } from '../../../tests/factories';\nimport { render } from '../../../tests/utils/rendering';\n\n//...\ndescribe('Documents: Component', () => {\n  it('should render maximum size state', async () => {\n    const documentsLength = 3;\n    const generatedDocs = times(() => documentFactory(), documentsLength);\n\n    const mockRequest = fillDocumentsListQuery(generatedDocs);\n    render(<Documents />, { apolloMocks: (defaultMocks) => defaultMocks.concat(mockRequest) });\n\n    expect(await screen.findAllByRole('link')).toHaveLength(documentsLength);\n    expect(screen.getAllByRole('listitem')).toHaveLength(documentsLength);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting both backend and webapp\nDESCRIPTION: Command to start both the backend and webapp components of the SaaS Boilerplate.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas up\n```\n\n----------------------------------------\n\nTITLE: Importing Optional Backend Variables in Markdown\nDESCRIPTION: This code snippet demonstrates how to conditionally import and render optional backend variables using MDX syntax. It uses a props.optional flag to determine whether to include the optional variables section.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_backend.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport OptionalVars from './_backend_optional.mdx';\n\n<>{props.optional ? <OptionalVars /> : null}</>\n```\n\n----------------------------------------\n\nTITLE: Conditional MDX Component Import and Render in React\nDESCRIPTION: Imports an optional MDX component and renders it conditionally based on the optional prop value. Uses JSX syntax with fragment wrapper.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_webapp.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport OptionalVars from './_webapp_optional.mdx';\n\n<>{props.optional ? <OptionalVars /> : null}</>\n```\n\n----------------------------------------\n\nTITLE: Generate Webapp Library Package using nx\nDESCRIPTION: Command to generate a basic scaffold for a new webapp library using nx generator\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/project-structure/create-web-lib.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm nx g @sb/tools:webapp-lib --directory webapp-libs mylib\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering System Architecture Component in MDX\nDESCRIPTION: Imports a shared system architecture component from a relative path and renders it using MDX JSX syntax. Demonstrates the pattern of reusing documentation components across the codebase.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/architecture/system-architecture.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport SystemArchitecture from '../../shared/partials/architecture/_system_architecture.mdx';\n\n<SystemArchitecture />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList Component in JSX\nDESCRIPTION: This snippet demonstrates how to import and use the DocCardList component from the @theme/DocCardList package. The component is used to display a list of documentation cards related to the SaaS Boilerplate coding standards.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/coding-standards/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Route\nDESCRIPTION: Shows how to implement a public route that is accessible to all users.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/new-route.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Route, Routes } from 'react-router-dom';\n\nimport { Example } from './asyncComponents';\nimport { LANG_PREFIX, RoutesConfig } from './config/routes';\nimport { ValidRoutesProviders } from './providers';\n\nexport const App = () => {\n  return (\n    <Routes>\n      <Route element={<ValidRoutesProviders />}>\n        <Route path={LANG_PREFIX}>\n          <Route path={RoutesConfig.example} element={<Example />} />\n          { /* other routes here */ }\n        </Route>\n      </Route>\n    </Routes>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Telemetry in SaaS Boilerplate CLI\nDESCRIPTION: This command shows how to opt-out of telemetry data collection in the SaaS Boilerplate CLI. By setting the SB_TELEMETRY_DISABLED environment variable to 1, users can prevent the CLI from collecting any telemetry data during their sessions.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/dev-tools/telemetry.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSB_TELEMETRY_DISABLED=1 pnpm saas [some-command]\n```\n\n----------------------------------------\n\nTITLE: Rendering Themed System Diagram Component\nDESCRIPTION: JSX component that renders a system architecture diagram with different versions for light and dark themes, centered on the page.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/architecture/_system_architecture.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<p align=\"center\">\n  <ImgThemed srcDark={useBaseUrl(\"img/system-diagram-v4-dark.png\")} src={useBaseUrl(\"img/system-diagram-v4.png\")} alt=\"System Diagram\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Importing and Conditionally Rendering Optional Variables in JSX\nDESCRIPTION: This code snippet imports a component for optional variables and conditionally renders it based on a prop. It demonstrates how to dynamically include additional content in the documentation.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_workers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport OptionalVars from './_workers_optional.mdx';\n\n<>{props.optional ? <OptionalVars /> : null}</>\n```\n\n----------------------------------------\n\nTITLE: Add Library Dependency to Webapp Package.json\nDESCRIPTION: Package.json configuration to add the new library as a dependency in the webapp package\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/project-structure/create-web-lib.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@sb/webapp-libs-mylib\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running local documentation server\nDESCRIPTION: Command to start a local documentation server for the SaaS Boilerplate.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas docs up\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for SaaS Boilerplate Documentation\nDESCRIPTION: MDX import statements for documentation components including DocCardList and a shared description partial. Sets up the page title and navigation structure.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: What is SaaS Boilerplate?\npagination_next: null\n---\n\nimport DocCardList from '@theme/DocCardList';\nimport SBDescriptionPartial from '../shared/partials/_sb_description.mdx';\n\n<SBDescriptionPartial />\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Styling React Component with Styled Components\nDESCRIPTION: Component styles file using styled-components with typography from the webapp-core theme.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/guides/web-app/create-react-component.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { typography } from '@sb/webapp-core/theme';\nimport styled from 'styled-components';\n\nexport const Container = styled.div`\n  ${typography.heading5};\n`;\n```\n\n----------------------------------------\n\nTITLE: Uninstalling CLI Plugins Command\nDESCRIPTION: Command for removing plugins from the CLI. Includes aliases for unlink and remove operations.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/cli/README.md#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  $ saas plugins:uninstall PLUGIN...\n\nARGUMENTS\n  PLUGIN  plugin to uninstall\n\nFLAGS\n  -h, --help     Show CLI help.\n  -v, --verbose\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList Component in JSX\nDESCRIPTION: Imports the DocCardList component from the theme and renders it in JSX format for displaying continuous integration documentation cards.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/cicd/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Importing WebApp Contentful Component in MDX\nDESCRIPTION: Imports and renders a Contentful-related component for webapp documentation.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_webapp_optional.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport WebappContentful from './_webapp_contentful.mdx';\n\n<WebappContentful />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Docusaurus Website\nDESCRIPTION: Installs all required dependencies for the website using pnpm workspace flag.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npnpm i -w\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus URL and Theme Components\nDESCRIPTION: Imports required components for handling themed images and base URL resolution in Docusaurus documentation.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/architecture/_system_architecture.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\nimport ImgThemed from '../../components/ImgThemed.component';\n```\n\n----------------------------------------\n\nTITLE: Importing Backend Email and Stripe Components in Markdown\nDESCRIPTION: This snippet imports and renders backend email and Stripe configuration components in MDX format.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_backend_optional.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport BackendEmail from './_backend_email.mdx';\nimport BackendStripe from './_backend_stripe.mdx';\n\n<BackendEmail />\n\n<BackendStripe />\n```\n\n----------------------------------------\n\nTITLE: Rendering Themed CI/CD Diagram Component\nDESCRIPTION: JSX markup for rendering a centered, theme-aware CI/CD diagram using the ImgThemed component. Implements dark and light theme variants of the diagram using useBaseUrl for asset path resolution.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/architecture/_cicd_architecture.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<p align=\"center\">\n  <ImgThemed srcDark={useBaseUrl(\"img/cicd-diagram-v4-dark.png\")} src={useBaseUrl(\"img/cicd-diagram-v4.png\")} alt=\"CI/CD Diagram\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Sentry Configuration Import\nDESCRIPTION: Python import statement for Sentry monitoring configuration that needs to be removed during feature removal\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/dev-tools/sentry.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom . import monitoring\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation List in JSX\nDESCRIPTION: This snippet shows how to import and use the DocCardList component to display API reference documentation cards on a page. The component is imported from the theme package and used without any parameters.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation Page\nDESCRIPTION: Imports several React components used in the documentation page including DocCardList for displaying documentation cards, ProjectName for consistent project name references, and components related to displaying local use information.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport ProjectName from './shared/components/ProjectName.component';\nimport DisplayLocalUseInfo from './shared/components/DisplayLocalUseInfo.component';\nimport LocalUseInfo from './shared/partials/_local-use-info.mdx'\n```\n\n----------------------------------------\n\nTITLE: Running Plop Generator in webapp Package\nDESCRIPTION: Command to execute the plop tool from the packages/webapp directory to generate project files and components.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/dev-tools/plop.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run plop\n```\n\n----------------------------------------\n\nTITLE: Retrieving Artifacts Bucket Name in Shell\nDESCRIPTION: This command retrieves the name of the S3 bucket used for storing deployment artifacts in the SaaS Boilerplate project. It's essential for setting up the CI/CD pipeline.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/cicd/auto-deploy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm saas ci get-artifacts-bucket\n```\n\n----------------------------------------\n\nTITLE: Optional Email Configuration Variables\nDESCRIPTION: Additional environment variables for advanced email configuration including SMTP settings, email backend selection, asset URLs, and reply address configuration.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_backend_email.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nVITE_EMAIL_ASSETS_URL=https://app.demo.saas.apptoku.com/email-assets\nEMAIL_BACKEND=django_ses.SESBackend\nEMAIL_HOST=mailcatcher\nEMAIL_PORT=1025\nEMAIL_HOST_USER=user\nEMAIL_HOST_PASSWORD=password\nEMAIL_REPLY_ADDRESS=smtp\n```\n\n----------------------------------------\n\nTITLE: Importing Image Components for Documentation\nDESCRIPTION: React/Docusaurus imports for handling themed image components used in documentation. Uses useBaseUrl for managing documentation asset URLs and a custom ImgThemed component for theme-aware image rendering.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/architecture/_cicd_architecture.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\nimport ImgThemed from '../../components/ImgThemed.component';\n```\n\n----------------------------------------\n\nTITLE: Documentation Info Box - Markdown\nDESCRIPTION: Information box markup using markdown syntax to provide prerequisite context about React component creation\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/_component-structure.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::info\nThis part of the documentation assumes that you have already created the basic component structure. If you don't have\nany React component created, please follow the\n[Example React component guide](/working-with-sb/guides/web-app/create-react-component) and create it.\n:::\n```\n\n----------------------------------------\n\nTITLE: Generating Security Patch File using Git\nDESCRIPTION: Command to create a patch file from the most recent commit on a forked repository. The patch should be emailed privately instead of submitting a pull request for security-sensitive fixes.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit format-patch HEAD~1..HEAD --stdout > patch.txt\n```\n\n----------------------------------------\n\nTITLE: Importing Base URL Handler in JSX\nDESCRIPTION: Import statement for handling base URLs in documentation using Docusaurus.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/features/payments.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\nimport ProjectName from '../../shared/components/ProjectName.component';\n```\n\n----------------------------------------\n\nTITLE: Inspecting Telemetry Data in SaaS Boilerplate CLI\nDESCRIPTION: This command demonstrates how to enable debug mode for telemetry data collection in the SaaS Boilerplate CLI. It sets the SB_TELEMETRY_DEBUG environment variable to 1, allowing users to inspect the data being collected during that CLI session.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/dev-tools/telemetry.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSB_TELEMETRY_DEBUG=1 pnpm saas [some-command]\n```\n\n----------------------------------------\n\nTITLE: AWS Configuration Update\nDESCRIPTION: Fixed AWS endpoint configuration for local development environment.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ENDPOINT_URL\n```\n\n----------------------------------------\n\nTITLE: Importing WebappContentful Component in MDX\nDESCRIPTION: This snippet imports a WebappContentful component and renders it within an MDX file. It's likely used to include Contentful-related documentation or configuration details.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/env-vars/_webapp_stripe.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport WebappContentful from './_webapp_contentful.mdx';\n\n<WebappContentful />\n```\n\n----------------------------------------\n\nTITLE: Displaying Images with useBaseUrl in JSX\nDESCRIPTION: This code snippet demonstrates how to use the useBaseUrl function to display images in a JSX component. It shows two images side by side, representing the upload file form and an uploaded file in the Documents page of SaaS Boilerplate.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/features/assets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<p align=\"center\">\n  <img src={useBaseUrl(\"img/features/assets/upload-form.png\")} alt=\"Upload file form\" />\n  <img src={useBaseUrl(\"img/features/assets/file.png\")} alt=\"Uploaded file\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Object Validation Error Response Format in GraphQL\nDESCRIPTION: Shows the format of object-level validation errors that are not specific to individual fields. Contains multiple validation messages and error codes in the non_field_errors array.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/graphql/conventions/errors-format.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"GraphQlValidationError\",\n  \"locations\": [{\"line\": 3, \"column\": 11}],\n  \"path\": [\"createProduct\"],\n  \"extensions\": {\n    \"non_field_errors\": [\n        {\"message\": \"Price must be greater than zero.\", \"code\": \"invalid_price\"},\n        {\"message\": \"Product name can only contain letters and numbers.\", \"code\": \"invalid_product_name\"}\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Version 4.1.0\nDESCRIPTION: Details features and bug fixes for version 4.1.0 released on 2024-09-20, including AWS CodeCommit removal and Docker Compose updates\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [4.1.0](https://github.com/apptension/saas-boilerplate/compare/4.0.0...4.1.0) (2024-09-20)\n\n### Features\n\n- [#611](https://github.com/apptension/saas-boilerplate/issues/611) Remove AWS CodeCommit from stack ([#619](https://github.com/apptension/saas-boilerplate/issues/619)) ([751bb99](https://github.com/apptension/saas-boilerplate/commit/751bb99a9e7fc6111130991d1775e5142004863e))\n\n### Bug Fixes\n\n- [#601](https://github.com/apptension/saas-boilerplate/issues/601) Fix copy inconsistency ([#609](https://github.com/apptension/saas-boilerplate/issues/609)) ([d34eab4](https://github.com/apptension/saas-boilerplate/commit/d34eab413f3be03ceb6ac7843b7c3c363562b282))\n- [#604](https://github.com/apptension/saas-boilerplate/issues/604) Fix user export ([#606](https://github.com/apptension/saas-boilerplate/issues/606)) ([8725584](https://github.com/apptension/saas-boilerplate/commit/8725584e0cb9dcf9b8255b597a5c72a1f1096bdc))\n- Change `docker-compose` calls to `docker compose` ([#613](https://github.com/apptension/saas-boilerplate/issues/613)) ([26e3cf5](https://github.com/apptension/saas-boilerplate/commit/26e3cf558a1b58514dd29cab18ed6be0c7a0d155))\n- Fix invalid docs formatting ([#614](https://github.com/apptension/saas-boilerplate/issues/614)) ([cf0e826](https://github.com/apptension/saas-boilerplate/commit/cf0e8262398d8f26509d413217c72a4c694c8907))\n```\n\n----------------------------------------\n\nTITLE: Importing Base URL Configuration in JSX\nDESCRIPTION: Demonstrates the import of useBaseUrl hook from Docusaurus for handling base URL configuration in documentation.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/features/openai.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Version 4.1.1\nDESCRIPTION: Details bug fix for Redis cache deployment issue in version 4.1.1 released on 2024-09-27\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [4.1.1](https://github.com/apptension/saas-boilerplate/compare/4.1.0...4.1.1) (2024-09-27)\n\n### Bug Fixes\n\n- [#621](https://github.com/apptension/saas-boilerplate/issues/621) Redis cache deployment issue ([#622](https://github.com/apptension/saas-boilerplate/issues/622)) ([73115ee](https://github.com/apptension/saas-boilerplate/commit/73115ee76da730fe57640e39998a0d5f1090f86f))\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in React/JSX\nDESCRIPTION: Imports required components for rendering the documentation page, including DocCardList for navigation and a custom ProjectName component.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/payments/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport ProjectName from '../../shared/components/ProjectName.component';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList Component in JSX\nDESCRIPTION: Imports the DocCardList component from the theme and renders it to display a list of documentation cards.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/features/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: MDX Page Structure with React Components Import\nDESCRIPTION: MDX file structure showing imports of React components and partials for system and CI/CD architecture documentation.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/architecture.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n---\ntitle: Architecture\ndescription: System architecture description\n---\n\nimport ProjectName from '../shared/components/ProjectName.component';\nimport SystemArchitecture from '../shared/partials/architecture/_system_architecture.mdx';\nimport CiCdArchitecture from '../shared/partials/architecture/_cicd_architecture.mdx';\n\n## Services included in <ProjectName/>\n\n<ProjectName/> comes with a set of pre-configured services that are ready to be deployed on\n[AWS](https://aws.amazon.com/) cloud infrastructure.\n\nThe project follows a monorepo repository layout and utilizes the [NX](https://nx.dev/) build system. A CLI is\nalso included with predefined commands, which should not be changed unless you know what you are doing. Most of these\ncommands are used in CodeBuild jobs in the CI pipeline.\n\nAll services are located in the `packages` directory at the root of the repository. Standard installation of the\n<ProjectName/> contains following services:\n\n- React web application\n- Django backend and admin panel\n- Serverless asynchronous workers\n\n<SystemArchitecture />\n\n<CiCdArchitecture />\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Renaming\nDESCRIPTION: Migration of environment variables from REACT_APP prefix to VITE_ prefix for Vite compatibility.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nREACT_APP_* -> VITE_*\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Multitenancy Documentation\nDESCRIPTION: Import statements for the documentation page components, including useBaseUrl from Docusaurus and a custom ProjectName component.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/features/multi-tenancy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\nimport ProjectName from '../../shared/components/ProjectName.component';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList Component in React\nDESCRIPTION: Imports and renders a DocCardList component from the theme to display API documentation cards.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/tools/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: Defines the page metadata including title and URL slug for the documentation system.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/payments/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Payments (Stripe integration)\nslug: /working-with-sb/payments\n---\n```\n\n----------------------------------------\n\nTITLE: Using ProjectName Component in Documentation Text\nDESCRIPTION: Demonstrates how to embed the ProjectName component within markdown text to ensure consistent project name references throughout the documentation.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ProjectName/>\n```\n\n----------------------------------------\n\nTITLE: Importing BaseUrl Utility in JSX\nDESCRIPTION: Import statement for the useBaseUrl utility from Docusaurus and a custom ProjectName component.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/features/crud.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\nimport ProjectName from '../../shared/components/ProjectName.component';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering CI/CD Architecture Component in MDX\nDESCRIPTION: This code imports a shared MDX component that contains the CI/CD architecture documentation and renders it within the current page. The component is imported from a shared partials directory and then rendered within the document.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/architecture/cicd-architecture.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CiCdArchitecture from '../../shared/partials/architecture/_cicd_architecture.mdx';\n\n<CiCdArchitecture />\n```\n\n----------------------------------------\n\nTITLE: Importing ProjectName Component in React\nDESCRIPTION: Import statement for the ProjectName component from a relative path in a React application.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/shared/partials/_freash-aws-account-info.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ProjectName from '../components/ProjectName.component';\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JSX\nDESCRIPTION: This code snippet imports the DocCardList component from the Docusaurus theme, which is typically used to generate a list of documentation cards or links.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Image Display Component in JSX\nDESCRIPTION: JSX markup for displaying CRUD interface screenshots using aligned image elements with useBaseUrl for path resolution.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/features/crud.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<p align=\"center\">\n  <img src={useBaseUrl(\"img/features/crud/list.png\")} alt=\"Items list\" />\n  <img src={useBaseUrl(\"img/features/crud/form.png\")} alt=\"New item form\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Structure for Multitenancy Documentation\nDESCRIPTION: Frontmatter metadata for the documentation page defining the title and description of the multitenancy feature.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/features/multi-tenancy.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Multitenancy\ndescription: Managing multiple tenants within a single account\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: This code snippet shows how to import and use the DocCardList component from the theme to display a list of documentation cards on a guides page.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/guides/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Defines the basic structure of a documentation page for in-app notifications, including title, slug, and component imports.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/working-with-sb/notifications/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: In-app notification module\nslug: /working-with-sb/notifications\n---\n\nimport DocCardList from '@theme/DocCardList';\nimport ProjectName from '../../shared/components/ProjectName.component';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList Component in JSX\nDESCRIPTION: This code imports the DocCardList component from the theme and renders it. The DocCardList component is typically used to automatically display a list of documentation cards for the current section.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/backend/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Importing useBaseUrl Function in JSX\nDESCRIPTION: This code snippet imports the useBaseUrl function from the @docusaurus/useBaseUrl package. This function is commonly used in Docusaurus projects to handle base URL paths for assets and links.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/features/assets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList in Formatters Documentation\nDESCRIPTION: This snippet shows how to import and use the DocCardList component from the theme to display a list of documentation cards on the formatters page.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/introduction/coding-standards/formatters/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List\nDESCRIPTION: Uses the DocCardList component to automatically render a list of documentation category cards that link to different sections of the documentation.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Rendering Local Use Information Component\nDESCRIPTION: Shows how to use the DisplayLocalUseInfo component to conditionally render local use information by embedding the LocalUseInfo component as its child.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<DisplayLocalUseInfo>\n    <LocalUseInfo />\n</DisplayLocalUseInfo>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in Robots.txt\nDESCRIPTION: Basic robots.txt configuration that allows unrestricted access to all web crawlers. Uses standard syntax with User-agent and Disallow directives.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/status-dashboard/src/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Version Configuration Fix\nDESCRIPTION: Fixed invalid version configuration file used for release management.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n.versionrc.js\n```\n\n----------------------------------------\n\nTITLE: Running AWS Login Command for SaaS Boilerplate\nDESCRIPTION: Command to log into the AWS web panel using the SaaS Boilerplate CLI if aws-vault is configured. This allows users to access their hosted zone information.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/aws/deploy-to-aws/configure-hosted-zone.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas aws login\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JSX Documentation\nDESCRIPTION: Simple React/JSX import statement and component usage for displaying API documentation cards using the DocCardList theme component.\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/internal/docs/docs/api-reference/webapp-emails/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Running Worker Tests\nDESCRIPTION: Command to execute tests and linters for worker components\nSOURCE: https://github.com/apptension/saas-boilerplate/blob/master/packages/workers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm saas workers test\n```"
  }
]