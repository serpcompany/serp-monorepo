[
  {
    "owner": "prettier",
    "repo": "eslint-config-prettier",
    "content": "TITLE: ESLint Flat Config with Prettier\nDESCRIPTION: JavaScript configuration example showing how to use eslint-config-prettier with the new flat config format.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport someConfig from \"some-other-config-you-use\";\nimport eslintConfigPrettier from \"eslint-config-prettier/flat\";\n\nexport default [\n  someConfig,\n  eslintConfigPrettier,\n];\n```\n\n----------------------------------------\n\nTITLE: Installing eslint-config-prettier Package\nDESCRIPTION: Various package manager commands to install eslint-config-prettier as a dev dependency.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D eslint-config-prettier\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D eslint-config-prettier\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D eslint-config-prettier\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add -D eslint-config-prettier\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with Prettier (eslintrc)\nDESCRIPTION: JSON configuration example showing how to extend eslint-config-prettier in traditional eslintrc format.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\n    \"some-other-config-you-use\",\n    \"prettier\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ESLint Config Prettier in TypeScript\nDESCRIPTION: Example showing migration from default import to using the new /flat entry point for flat config users, which adds name property for config-inspector.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nimport eslintConfigPrettier from \"eslint-config-prettier\";\n\n// after\nimport eslintConfigPrettier from \"eslint-config-prettier/flat\";\n```\n\n----------------------------------------\n\nTITLE: ESLint Config with Prettier Extension\nDESCRIPTION: Example of ESLint configuration JSON showing how to extend Prettier config after version 8.0.0 changes.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\n    \"some-other-config-you-use\",\n    \"prettier\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Config with Prettier Plugin\nDESCRIPTION: Example of ESLint configuration using eslint-plugin-prettier with the recommended config.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\n    \"some-other-config-you-use\",\n    \"plugin:prettier/recommended\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Curly Brace Rule in ESLint with Prettier\nDESCRIPTION: This snippet shows how to configure the curly brace rule in ESLint to ensure that certain statements are mandated to use curly braces. It also notes potential conflicts with Prettier if the 'multi-line' or 'multi-or-nest' options are used.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"curly\": [\"error\", \"all\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration - Double Quotes\nDESCRIPTION: This JSON snippet configures ESLint to enforce the use of double quotes, avoid escaping, and disallow unnecessary template literals. This ensures consistency with Prettier when Prettier is configured to use double quotes.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"quotes\": [\n      \"error\",\n      \"double\",\n      { \"avoidEscape\": true, \"allowTemplateLiterals\": false }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration - Single Quotes\nDESCRIPTION: This JSON snippet configures ESLint to enforce the use of single quotes, avoid escaping, and disallow unnecessary template literals. This setting needs to be consistent with Prettier's singleQuote option.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"quotes\": [\n      \"error\",\n      \"single\",\n      { \"avoidEscape\": true, \"allowTemplateLiterals\": false }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prettier Configuration - Double Quotes (Default)\nDESCRIPTION: This JSON snippet configures Prettier to use double quotes, which is the default behavior. While explicitly defining this is not required, it's shown here for completeness and clarity, especially when coordinating with ESLint rules.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"singleQuote\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Prettier Configuration - Single Quotes\nDESCRIPTION: This JSON snippet configures Prettier to use single quotes. This configuration should be used in conjunction with the corresponding ESLint rule to ensure consistent code formatting.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"singleQuote\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Mixed Operators in ESLint\nDESCRIPTION: This snippet demonstrates the ESLint configuration for the no-mixed-operators rule, which prevents mixing certain operators, and provides guidance on using it with Prettier.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"no-mixed-operators\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Confusing Arrow Functions in ESLint\nDESCRIPTION: This snippet configures ESLint to prevent the use of confusing arrow functions. It addresses potential issues with Prettierâ€™s formatting and provides an example configuration.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"no-confusing-arrow\": [\"error\", { \"allowParens\": false }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Maximum Line Length in ESLint\nDESCRIPTION: This configuration sets a maximum line length rule in ESLint to complement Prettier and discusses the need to synchronize options for consistent formatting.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"max-len\": [\"error\", {\"code\": 80, \"ignoreUrls\": true}]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration - vue/html-self-closing\nDESCRIPTION: This JSON snippet configures the `vue/html-self-closing` ESLint rule to work with Prettier.  Setting `html.void` to \"any\" ensures consistency by allowing any self-closing style for HTML elements.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"vue/html-self-closing\": [\n      \"error\",\n      {\n        \"html\": {\n          \"void\": \"any\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration - unicorn/template-indent\nDESCRIPTION: This JSON snippet configures the `unicorn/template-indent` ESLint rule to avoid conflicts with Prettier. By specifying which tags, functions, selectors, and comments the rule should apply to, it prevents Prettier from formatting the same templates.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"unicorn/template-indent\": [\n      \"error\",\n      {\n        \"tags\": [\n          \"outdent\",\n          \"dedent\",\n          \"sql\",\n          \"styled\"\n        ],\n        \"functions\": [\n          \"dedent\",\n          \"stripIndent\"\n        ],\n        \"selectors\": [],\n        \"comments\": [\n          \"indent\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration - no-restricted-syntax\nDESCRIPTION: This JSON snippet configures the `no-restricted-syntax` ESLint rule to completely forbid sequence expressions (comma operator).  This is an alternative to `no-sequences` to prevent accidental usage of the comma operator.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"no-restricted-syntax\": [\"error\", \"SequenceExpression\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration - no-restricted-syntax with Message\nDESCRIPTION: This JSON snippet configures the `no-restricted-syntax` ESLint rule to forbid sequence expressions and provides a custom error message. This helps developers understand why the comma operator is disallowed.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"no-restricted-syntax\": [\n      \"error\",\n      {\n        \"selector\": \"SequenceExpression\",\n        \"message\": \"The comma operator is confusing and a common mistake. Donâ€™t use it!\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Tab Characters in ESLint\nDESCRIPTION: This configuration sets the no-tabs rule in ESLint to forbid tab characters while allowing flexibility for indentation managed by Prettier.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"no-tabs\": [\"error\", {\"allowIndentationTabs\": true}]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Unexpected Multiline Expressions in ESLint\nDESCRIPTION: This snippet sets up the no-unexpected-multiline rule in ESLint to catch potential mistakes in multiline expressions and discusses compatibility with Prettier formatting.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"no-unexpected-multiline\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lines Around Comment Rule in ESLint\nDESCRIPTION: This snippet illustrates the ESLint configuration for the lines-around-comment rule, which enforces blank lines around comments. It includes considerations for compatibility with Prettierâ€™s formatting.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"lines-around-comment\": [\n      \"error\",\n      {\n        \"beforeBlockComment\": true,\n        \"afterBlockComment\": true,\n        \"beforeLineComment\": true,\n        \"afterLineComment\": true,\n        \"allowBlockStart\": true,\n        \"allowBlockEnd\": true,\n        \"allowObjectStart\": true,\n        \"allowObjectEnd\": true,\n        \"allowArrayStart\": true,\n        \"allowArrayEnd\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Quote Styles in ESLint\nDESCRIPTION: This configuration for the quotes rule in ESLint allows for enforcing the use of backticks for strings. It also includes an example of the ESLint configuration to achieve this.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"quotes\": [\"error\", \"backtick\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue HTML Self-Closing Example\nDESCRIPTION: This Vue.js code snippet illustrates how Prettier handles self-closing tags. Prettier preserves the original style for regular components but always uses the self-closing style for known void HTML elements.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<div />\n<div></div>\n<MyComponent />\n<MyComponent></MyComponent>\n<svg><path d=\"\" /></svg>\n<svg><path d=\"\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Flat Config Plugin Example\nDESCRIPTION: Example showing plugin naming in flat config format and potential pitfalls with non-standard names.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport typescriptEslint from \"@typescript-eslint/eslint-plugin\";\nimport eslintConfigPrettier from \"eslint-config-prettier/flat\";\n\nexport default [\n  {\n    plugins: {\n      ts: typescriptEslint, \n    },\n    rules: {\n      \"ts/indent\": \"error\",\n    },\n  },\n  eslintConfigPrettier,\n];\n```\n\n----------------------------------------\n\nTITLE: JavaScript Test File Example for Contributing\nDESCRIPTION: This JavaScript snippet demonstrates the structure of a test file (`test-lint/foobar.js`) for contributing to `eslint-config-prettier`. The test should fail when eslint-plugin-foobar and eslint-plugin-prettier are used together, until `eslint-config-prettier` is added to the ESLint config.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_26\n\nLANGUAGE: js\nCODE:\n```\n/* eslint-disable quotes */\n\"use strict\";\n\n// Prettier does not want spaces before the parentheses, but\n// `plugin:foobar/recommended` wants one.\nconsole.log();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example for Contributing - ESLint Rule Off\nDESCRIPTION: This JavaScript snippet demonstrates how to disable a specific ESLint rule (e.g., `foobar/some-rule`) in `index.js` when contributing to `eslint-config-prettier`. Setting the rule to \"off\" ensures that Prettier's formatting is not overridden by the ESLint plugin.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_25\n\nLANGUAGE: js\nCODE:\n```\n\"foobar/some-rule\": \"off\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Array Example\nDESCRIPTION: This example demonstrates how ESLint and Prettier interact with backticks in JavaScript arrays. The first element illustrates where quotes could be used instead of backticks, while the remaining elements show valid use cases for backticks.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst strings = [\n  `could have been a regular string`,\n  `\n    multiple\n    lines\n  `,\n  `uses ${interpolation}`,\n  String.raw`\\tagged/`,\n];\n```\n\n----------------------------------------\n\nTITLE: JavaScript Ternary Example with HTML\nDESCRIPTION: This JavaScript snippet demonstrates a ternary expression containing an HTML template literal. It highlights potential conflicts between Prettier and `unicorn/template-indent` regarding indentation within template literals.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: js\nCODE:\n```\ncondition\n  ? null\n  : html`\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam in dui\n        mauris.\n      </p>\n    `;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Matrix Example with Parentheses\nDESCRIPTION: This JavaScript snippet demonstrates how Prettier automatically adds parentheses to sequence expressions, making them explicit. This example uses the comma operator (sequence expression).\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nmatrix[(4, 7)];\n```\n\n----------------------------------------\n\nTITLE: JavaScript Matrix Example\nDESCRIPTION: This JavaScript snippet shows an example of using the comma operator (sequence expression) which can be confusing. Prettier adds parentheses to clarify its use.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nmatrix[4, 7];\n```\n\n----------------------------------------\n\nTITLE: Configuring no-confusing-arrow Rule in ESLint\nDESCRIPTION: Example showing how to configure the no-confusing-arrow rule in ESLint to work with Prettier v6.0.0 and above by explicitly setting allowParens to false.\nSOURCE: https://github.com/prettier/eslint-config-prettier/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"no-confusing-arrow\": [\"error\"]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"no-confusing-arrow\": [\"error\", { \"allowParens\": false }]\n  }\n}\n```"
  }
]