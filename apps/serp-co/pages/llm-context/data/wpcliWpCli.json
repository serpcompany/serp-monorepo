[
  {
    "owner": "wp-cli",
    "repo": "wp-cli",
    "content": "TITLE: Installing and activating WordPress plugins using WP-CLI\nDESCRIPTION: This command demonstrates how to install and activate a WordPress plugin (User Switching) using the WP-CLI command line interface. It downloads the plugin from WordPress.org, unpacks it, installs it, and then activates it.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wp plugin install user-switching --activate\nInstalling User Switching (1.0.9)\nDownloading installation package from https://downloads.wordpress.org/plugin/user-switching.1.0.9.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nActivating 'user-switching'...\nPlugin 'user-switching' activated.\nSuccess: Installed 1 of 1 plugins.\n```\n\n----------------------------------------\n\nTITLE: Downloading WP-CLI using curl\nDESCRIPTION: This command downloads the WP-CLI Phar file from the official GitHub repository using curl. This is the recommended installation method for most users.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n```\n\n----------------------------------------\n\nTITLE: Verifying WP-CLI installation\nDESCRIPTION: This command checks if the downloaded WP-CLI Phar file is working correctly by displaying information about it. This should be run after downloading the file to ensure it functions properly.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp wp-cli.phar --info\n```\n\n----------------------------------------\n\nTITLE: Making WP-CLI executable and moving to PATH\nDESCRIPTION: These commands make the WP-CLI Phar file executable and move it to a directory in the system PATH for easier access. This allows users to run WP-CLI by simply typing 'wp' instead of 'php wp-cli.phar'.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n```\n\n----------------------------------------\n\nTITLE: Displaying WP-CLI information\nDESCRIPTION: This command shows detailed information about the WP-CLI installation, including OS, shell, PHP version, MySQL version, and WP-CLI version. It's useful for verifying that WP-CLI is properly installed and configured.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ wp --info\nOS:     Linux 5.10.60.1-microsoft-standard-WSL2 #1 SMP Wed Aug 25 23:20:18 UTC 2021 x86_64\nShell:  /usr/bin/zsh\nPHP binary:     /usr/bin/php8.1\nPHP version:    8.1.0\nphp.ini used:   /etc/php/8.1/cli/php.ini\nMySQL binary:   /usr/bin/mysql\nMySQL version:  mysql  Ver 8.0.27-0ubuntu0.20.04.1 for Linux on x86_64 ((Ubuntu))\nSQL modes:\nWP-CLI root dir:        /home/wp-cli/\nWP-CLI vendor dir:      /home/wp-cli/vendor\nWP_CLI phar path:\nWP-CLI packages dir:    /home/wp-cli/.wp-cli/packages/\nWP-CLI global config:\nWP-CLI project config:  /home/wp-cli/wp-cli.yml\nWP-CLI version: 2.11.0\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP GET Request with Authentication in PHP\nDESCRIPTION: Demonstrates how to make a GET request to GitHub's API with custom headers and basic authentication, then access the response data including status code, headers, and body.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$headers = array('Accept' => 'application/json');\n$options = array('auth' => array('user', 'pass'));\n$request = WpOrg\\Requests\\Requests::get('https://api.github.com/gists', $headers, $options);\n\nvar_dump($request->status_code);\n// int(200)\n\nvar_dump($request->headers['content-type']);\n// string(31) \"application/json; charset=utf-8\"\n\nvar_dump($request->body);\n// string(26891) \"[...]\"\n```\n\n----------------------------------------\n\nTITLE: Deleting all transients using WP-CLI\nDESCRIPTION: This command shows how to delete all transients from the WordPress database using WP-CLI. Transients are temporary options stored in the WordPress database with an expiration time.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wp transient delete --all\nSuccess: 34 transients deleted from the database.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom WP-CLI Option Delete Command in PHP\nDESCRIPTION: Example of registering a custom WP-CLI command that deletes options from the WordPress database. The command uses PHPdoc for usage documentation and demonstrates proper error handling and success messaging.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Delete an option from the database.\n *\n * Returns an error if the option didn't exist.\n *\n * ## OPTIONS\n *\n * <key>\n * : Key for the option.\n *\n * ## EXAMPLES\n *\n *     $ wp option delete my_option\n *     Success: Deleted 'my_option' option.\n */\n$delete_option_cmd = function( $args ) {\n\tlist( $key ) = $args;\n\n\tif ( ! delete_option( $key ) ) {\n\t\tWP_CLI::error( \"Could not delete '$key' option. Does it exist?\" );\n\t} else {\n\t\tWP_CLI::success( \"Deleted '$key' option.\" );\n\t}\n};\nWP_CLI::add_command( 'option delete', $delete_option_cmd );\n```\n\n----------------------------------------\n\nTITLE: Setting up bash completion for WP-CLI\nDESCRIPTION: This command sources the WP-CLI tab completion script for Bash. This enables command tab completion when using WP-CLI, making it easier to work with the various commands and options.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsource /FULL/PATH/TO/wp-completion.bash\n```\n\n----------------------------------------\n\nTITLE: Setting up zsh completion for WP-CLI\nDESCRIPTION: These commands configure tab completion for WP-CLI in the Z shell (zsh). It loads and initializes the bash completion functionality before sourcing the WP-CLI completion script.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nautoload bashcompinit\nbashcompinit\nsource /FULL/PATH/TO/wp-completion.bash\n```\n\n----------------------------------------\n\nTITLE: Installing Requests with Composer in Shell\nDESCRIPTION: Command for installing the Requests library using Composer dependency manager.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require rmccue/requests\n```\n\n----------------------------------------\n\nTITLE: Composer JSON Configuration for Requests\nDESCRIPTION: JSON configuration for including Requests library as a dependency in a Composer-managed project, specifying version 2.0 or higher.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"rmccue/requests\": \"^2.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Requests from Archive in Bash\nDESCRIPTION: Commands for downloading and extracting the Requests library from either a tarball or zipball using curl or wget.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -L https://github.com/WordPress/Requests/tarball/stable | tar xzv\n(or)\n$ wget https://github.com/WordPress/Requests/tarball/stable -O - | tar xzv\n```\n\n----------------------------------------\n\nTITLE: Installing Requests from GitHub Source in Bash\nDESCRIPTION: Command for cloning the Requests library directly from its GitHub repository using git.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git://github.com/WordPress/Requests.git\n```\n\n----------------------------------------\n\nTITLE: Including Requests Autoloader in PHP\nDESCRIPTION: Code for including the Requests autoloader file in PHP scripts to enable class loading.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once '/path/to/Requests/src/Autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Registering Requests Autoloader in PHP\nDESCRIPTION: Code for registering the Requests autoloader to handle class loading automatically.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nWpOrg\\Requests\\Autoload::register();\n```\n\n----------------------------------------\n\nTITLE: Configuring PSR-4 Class Loader for Requests in PHP\nDESCRIPTION: Example of setting up a PSR-4 compatible class loader for the Requests library, showing namespace configuration and registration.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/README.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$loader = new Psr4ClassLoader();\n$loader->addPrefix('WpOrg\\\\Requests\\\\', 'path/to/vendor/Requests/src');\n$loader->register();\n```\n\n----------------------------------------\n\nTITLE: Running Requests Test Suite in Bash\nDESCRIPTION: Command for running the complete PHPUnit test suite for the Requests library.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ phpunit\n```\n\n----------------------------------------\n\nTITLE: Running Specific Requests Tests in Bash\nDESCRIPTION: Command for running a specific set of tests for the Requests library, in this case the cURL transport tests.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ phpunit Transport/cURL\n```\n\n----------------------------------------\n\nTITLE: Initializing Requests Autoloader in PHP with Before/After Examples\nDESCRIPTION: Code comparison showing how to initialize the Requests autoloader in version 1.x versus the new namespaced approach in version 2.x. The new implementation uses the WpOrg\\Requests namespace with an updated file path.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// OLD: Using the custom autoloader in Requests 1.x.\nrequire_once 'path/to/Requests/library/Requests.php';\nRequests::register_autoloader();\n\n// NEW: Using the custom autoloader in Requests 2.x.\nrequire_once 'path/to/Requests/src/Autoload.php';\nWpOrg\\Requests\\Autoload::register();\n```\n\n----------------------------------------\n\nTITLE: RFC2616 Reference for Content-Length Header Implementation in HTTP Requests\nDESCRIPTION: Sample from RFC2616 Section 14.13 referenced in the changelog that explains why Content-Length headers should be included in POST requests, even when empty.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/bundle/rmccue/requests/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nContent-Length header \"SHOULD\" be included. In practice, it is not\nused for GET nor HEAD requests, but is expected for POST requests.\n```\n\n----------------------------------------\n\nTITLE: PHP Binary Path Patterns for MAMP and XAMPP\nDESCRIPTION: File path patterns showing common locations of PHP binary executables in MAMP and XAMPP server installations. Includes patterns for PHP 5.x versions and different installation directories.\nSOURCE: https://github.com/wp-cli/wp-cli/blob/main/utils/amp-paths.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/Applications/MAMP/bin/php/php5.3*/bin/php\n/Applications/MAMP/bin/php5*/bin/php\n/Applications/MAMP/bin/php/php5.[34]*/bin/php\n/Applications/xampp/xamppfiles/bin/php;\n/opt/lampp/bin/php\n```"
  }
]