[
  {
    "owner": "sipsorcery-org",
    "repo": "sipsorcery",
    "content": "TITLE: SDP Manipulation for Audio Track in FFmpegListener (C#)\nDESCRIPTION: This snippet demonstrates how to parse an SDP file containing both audio and video tracks, remove the video track announcement, and use the modified SDP for setting the remote description of the audio RTP session. This is crucial because FFmpeg generates a single SDP file for both audio and video when demuxing RTSP streams, but WebRTC RTPSession requires separate SDP descriptions for each track.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/RtspToWebRTCAudioAndVideo/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar sdpAudio = SDP.ParseSDPDescription(File.ReadAllText(_dc.sdpPath));\nvar videoAnn = sdpAudio.Media.Find(x => x.Media == SDPMediaTypesEnum.video);\nvar audioAnn = sdpAudio.Media.Find(x => x.Media == SDPMediaTypesEnum.audio);\nsdpAudio.Media.Remove(videoAnn);\n\n_audioRTP.SetRemoteDescription(SIPSorcery.SIP.App.SdpType.answer, sdpAudio);\n```\n\n----------------------------------------\n\nTITLE: FFmpeg Test Pattern Streaming\nDESCRIPTION: Executes FFmpeg to generate and stream a test pattern video.  This command uses `testsrc` as input, encodes it as H.264 with YUV420p pixel format, and streams it to the specified RTP address. It also generates an SDP file for WebRTC connection.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/FfmpegToWebRTC/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nffmpeg -re -f lavfi -i testsrc=size=640x480:rate=10 -vcodec h264 -pix_fmt yuv420p -strict experimental -g 1 -f rtp rtp://127.0.0.1:5020 -sdp_file ffmpeg.sdp\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command (Host Alias)\nDESCRIPTION: This command runs the 'webrtcgetstarted' Docker image, mapping TCP port 8080 and UDP port 50042 of the host to the container, and adds a host alias.  It sets the ASPNETCORE_URLS and BIND_PORT environment variables.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCFFmpegGetStarted/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -p 8080:8080 -p 50042:50042/udp --add-host=host.docker.internal:host-gateway -e ASPNETCORE_URLS=\"http://0.0.0.0:8080\" -e BIND_PORT=\"50042\" webrtcgetstarted\n```\n\n----------------------------------------\n\nTITLE: Running the .NET Core Application\nDESCRIPTION: Executes the .NET Core application to start the WebRTC video streaming server.  The command outputs the required FFmpeg command line to the console. The application waits for the `ffmpeg.sdp` file to appear.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/FfmpegToWebRTC/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: WebRTC Server: Initialize WebSocket and Peer Connection C#\nDESCRIPTION: This C# code sets up a WebSocket server to handle WebRTC connections. It creates an RTCPeerConnection, adds a video track with a test pattern source, and manages connection state changes. The server listens on port 8081 and uses the SIPSorcery library for WebRTC functionality.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/README.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Linq;\nusing System.Net;\nusing System.Threading.Tasks;\nusing SIPSorcery.Media;\nusing SIPSorcery.Net;\nusing SIPSorceryMedia.Encoders;\nusing WebSocketSharp.Server;\n\nnamespace demo\n{\n    class Program\n    {\n        private const int WEBSOCKET_PORT = 8081;\n\n        static void Main()\n        {\n            Console.WriteLine(\"WebRTC Get Started\");\n\n            // Start web socket.\n            Console.WriteLine(\"Starting web socket server...\");\n            var webSocketServer = new WebSocketServer(IPAddress.Any, WEBSOCKET_PORT);\n            webSocketServer.AddWebSocketService<WebRTCWebSocketPeer>(\"/\", (peer) => peer.CreatePeerConnection = () => CreatePeerConnection());\n            webSocketServer.Start();\n\n            Console.WriteLine($\"Waiting for web socket connections on {webSocketServer.Address}:{webSocketServer.Port}...\");\n            \n            Console.WriteLine(\"Press any key exit.\");\n            Console.ReadLine();\n        }\n\n        private static Task<RTCPeerConnection> CreatePeerConnection()\n        {\n            var pc = new RTCPeerConnection(null);\n\n            var testPatternSource = new VideoTestPatternSource(new VpxVideoEncoder());\n\n            MediaStreamTrack videoTrack = new MediaStreamTrack(testPatternSource.GetVideoSourceFormats(), MediaStreamStatusEnum.SendOnly);\n            pc.addTrack(videoTrack);\n\n            testPatternSource.OnVideoSourceEncodedSample += pc.SendVideo;\n            pc.OnVideoFormatsNegotiated += (formats) => testPatternSource.SetVideoSourceFormat(formats.First());\n\n            pc.onconnectionstatechange += async (state) =>\n            {\n                Console.WriteLine($\"Peer connection state change to {state}.\");\n\n                switch(state)\n                {\n                    case RTCPeerConnectionState.connected:\n                        await testPatternSource.StartVideo();\n                        break;\n                    case RTCPeerConnectionState.failed:\n                        pc.Close(\"ice disconnection\");\n                        break;\n                    case RTCPeerConnectionState.closed:\n                        await testPatternSource.CloseVideo();\n                        testPatternSource.Dispose();\n                        break;\n                }\n            };\n\n            return Task.FromResult(pc);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WebRTC Client: Establish Connection and Display Video HTML/JavaScript\nDESCRIPTION: This HTML and JavaScript code creates a WebRTC client that connects to the WebSocket server. It initializes an RTCPeerConnection, handles ICE candidates and SDP offers/answers, and displays the video stream in a video element. The client uses the provided WebSocket URL to connect to the server.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/README.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<head>\n    <script type=\"text/javascript\">\n        const WEBSOCKET_URL = \"ws://127.0.0.1:8081/\"\n\n        var pc, ws;\n\n        async function start() {\n            pc = new RTCPeerConnection();\n\n            pc.ontrack = evt => document.querySelector('#videoCtl').srcObject = evt.streams[0];\n            pc.onicecandidate = evt => evt.candidate && ws.send(JSON.stringify(evt.candidate));\n\n            ws = new WebSocket(document.querySelector('#websockurl').value, []);\n            ws.onmessage = async function (evt) {\n                var obj = JSON.parse(evt.data);\n                if (obj?.candidate) {\n                    pc.addIceCandidate(obj);\n                }\n                else if (obj?.sdp) {\n                    await pc.setRemoteDescription(new RTCSessionDescription(obj));\n                    pc.createAnswer()\n                        .then((answer) => pc.setLocalDescription(answer))\n                        .then(() => ws.send(JSON.stringify(pc.localDescription)));\n                }\n            };\n        };\n\n        async function closePeer() {\n            await pc?.close();\n            await ws?.close();\n        };\n\n    </script>\n</head>\n<body>\n\n    <video controls autoplay=\"autoplay\" id=\"videoCtl\" width=\"640\" height=\"480\"></video>\n\n    <div>\n        <input type=\"text\" id=\"websockurl\" size=\"40\" />\n        <button type=\"button\" class=\"btn btn-success\" onclick=\"start();\">Start</button>\n        <button type=\"button\" class=\"btn btn-success\" onclick=\"closePeer();\">Close</button>\n    </div>\n\n</body>\n\n<script>\n    document.querySelector('#websockurl').value = WEBSOCKET_URL;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Generating SDP Offer (.NET)\nDESCRIPTION: This command starts the application in offer mode.  It generates a base64 encoded SDP offer that can be copied and pasted into another WebRTC peer for testing. This allows testing without WebSockets.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/webrtccmdline/README.md#_snippet_1\n\nLANGUAGE: .NET\nCODE:\n```\ndotnet run -- --offer\n```\n\n----------------------------------------\n\nTITLE: Start sngrep for SIP trace\nDESCRIPTION: This command starts `sngrep` to capture and display a live SIP trace on port 5060 using the loopback interface. `sngrep` is an optional tool used for debugging and monitoring SIP traffic during the load test. The `-r` option enables live capture, and `-d lo` specifies the loopback interface.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/LoadTestScenario/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo sngrep -r -d lo port 5060\n```\n\n----------------------------------------\n\nTITLE: SIPSorcery Registration with C#\nDESCRIPTION: This snippet demonstrates how to register with a SIP server using the SIPSorcery library in C#. It configures a SIP transport, creates a SIP registration user agent with username, password, domain, and expiry, and attaches event handlers for different registration outcomes.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/notebooks/Register.ipynb#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n#r \"nuget:SIPSorcery, 4.0.13-pre\"\n\nconst string USERNAME = \"softphonesample\";\nconst string PASSWORD = \"password\";\nconst string DOMAIN = \"sipsorcery.com\";\nconst int EXPIRY = 120;\n\nConsole.WriteLine(\"SIPSorcery Registration Demo\");\n\nvar sipTransport = new SIPTransport();\nvar regUserAgent = new SIPRegistrationUserAgent(sipTransport, USERNAME, PASSWORD, DOMAIN, EXPIRY);\n\n// Event handlers for the different stages of the registration.\nregUserAgent.RegistrationFailed += (uri, err) => Console.WriteLine($\"{uri.ToString()}: {err}\");\nregUserAgent.RegistrationTemporaryFailure += (uri, msg) => Console.WriteLine($\"{uri.ToString()}: {msg}\");\nregUserAgent.RegistrationRemoved += (uri) => Console.WriteLine($\"{uri.ToString()} registration failed.\");\nregUserAgent.RegistrationSuccessful += (uri) => Console.WriteLine($\"{uri.ToString()} registration succeeded.\");\n\n// Start the thread to perform the initial registration and then periodically resend it.\nregUserAgent.Start();\n\nConsole.WriteLine(\"Waiting 10s for registration to complete...\");\nawait Task.Delay(10000);\n\nConsole.WriteLine(\"Finished.\");\n```\n\n----------------------------------------\n\nTITLE: Initiating an Authenticated SIP Call as UAC (Example 3)\nDESCRIPTION: This command initiates an authenticated SIP call acting as a User Agent Client (UAC). It includes the destination SIP URI, role (UAC), verbosity, username (7004), and password for authentication.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/sipcmdline/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run -- -d 100@192.168.0.48 -s uac -v -u 7004 --password password\n```\n\n----------------------------------------\n\nTITLE: Placing an Audio-Only SIP Call using SIPSorcery\nDESCRIPTION: This C# code snippet demonstrates how to place an audio-only SIP call using the SIPSorcery library. It relies on the `SIPSorceryMedia.Windows` library for audio capture and playback, and will only work on Windows.  It utilizes the `SIPUserAgent` and `WindowsAudioEndPoint` classes.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/README.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstring DESTINATION = \"music@iptel.org\";\n        \nConsole.WriteLine(\"SIP Get Started\");\n\nvar userAgent = new SIPSorcery.SIP.App.SIPUserAgent();\nvar winAudio = new SIPSorceryMedia.Windows.WindowsAudioEndPoint(new SIPSorcery.Media.AudioEncoder());\nvar voipMediaSession = new SIPSorcery.Media.VoIPMediaSession(winAudio.ToMediaEndPoints());\n\n// Place the call and wait for the result.\nbool callResult = await userAgent.Call(DESTINATION, null, null, voipMediaSession);\nConsole.WriteLine($\"Call result {(callResult ? \"success\" : \"failure\")}.\");\n\nConsole.WriteLine(\"Press any key to hangup and exit.\");\nConsole.ReadLine();\n```\n\n----------------------------------------\n\nTITLE: Creating a New VoIP Console Application with SIPSorcery and SIPSorceryMedia.Windows\nDESCRIPTION: This set of commands creates a new console application, navigates into the created directory, adds the SIPSorcery and SIPSorceryMedia.Windows NuGet packages, pastes example code into Program.cs, and then runs the application. This is the getting started guide for VoIP.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet new console --name SIPGetStarted --framework net8.0 --target-framework-override net8.0-windows10.0.17763.0\ncd SIPGetStarted\ndotnet add package SIPSorcery\ndotnet add package SIPSorceryMedia.Windows\n# Paste the code below into Program.cs.\ndotnet run\n# If successful you will hear a \"Hello World\" announcement.\n```\n\n----------------------------------------\n\nTITLE: R Class Structure Example in Android\nDESCRIPTION: This code snippet demonstrates the structure of the R class generated by the Android build system. It contains nested classes (drawable, layout, strings) each containing integer constants representing resource IDs.  These IDs are used to reference resources within the application instead of directly using filenames.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPExamples/AndroidSIPGetStarted/Resources/AboutResources.txt#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class R {\n    public class drawable {\n        public const int icon = 0x123;\n    }\n\n    public class layout {\n        public const int main = 0x456;\n    }\n\n    public class strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ffplay SDP file content\nDESCRIPTION: This SDP file configures ffplay to receive an audio and video stream over RTP.  It specifies the IP address, port numbers, and codecs used for the stream. The audio uses the opus codec with a 48000 Hz sample rate while the video uses VP8.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCtoFfplay/README.md#_snippet_1\n\nLANGUAGE: sdp\nCODE:\n```\nv=0\no=- 1474529382 0 IN IP4 127.0.0.1\ns=-\nc=IN IP4 127.0.0.1\nt=0 0\nm=audio 5016 RTP/AVP 111\na=rtpmap:111 opus/48000/2\na=fmtp:111 minptime=10;useinbandfec=1\na=sendrecv\nm=video 5018 RTP/AVP 98\na=rtpmap:98 VP8/90000\na=sendrecv\n```\n\n----------------------------------------\n\nTITLE: Running the .Net Core Application\nDESCRIPTION: This command is used to start the .Net Core application that generates and sends the sine wave audio signal. It assumes that the .Net Core SDK is installed and configured correctly. The `webrtc.html` file needs to be opened in a browser to establish the WebRTC connection.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCSendAudio/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: AppSettings JSON Configuration\nDESCRIPTION: This JSON configuration file specifies the LND connection settings, including the URL, Macaroon path, and certificate path. These settings are necessary for the demo application to communicate with the LND node and process Lightning payments. Adjustments are necessary based on your environment.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCLightningExamples/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"LndSettings\": {\n    \"Url\": \"localhost:10009\",\n    \"MacaroonPath\": \"../lnd-data/data/chain/bitcoin/signet/admin.macaroon\",\n    \"CertificatePath\": \"../lnd-data/tls.cert\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting sngrep with filters (SIP)\nDESCRIPTION: This command starts sngrep to capture and display a live SIP trace. It filters traffic on the loopback interface (`lo`) within specified port ranges (6070-6072 and 49000-65535). The `-r` flag enables real-time capture and the `-d` flag specifies the interface.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/BlindTransferScenario/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo sngrep -r -d lo portrange 6070-6072 or portrange 49000-65535\n```\n\n----------------------------------------\n\nTITLE: Running sngrep for SIP Trace\nDESCRIPTION: This command is used to run sngrep, a tool for capturing and analyzing SIP traffic.  It filters traffic on specific ports to provide a live SIP trace of the Attended Transfer test, aiding in debugging and verification. Requires root privileges to capture network traffic.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/AttendedTransferScenario/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo sngrep -r -d lo portrange 6070-6072 or portrange 49000-65535\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command (ICE Gathering)\nDESCRIPTION: This command runs the 'webrtcgetstarted' Docker image, mapping port 8080 and enabling the application to wait for ICE gathering before sending the offer by setting the environment variable `WAIT_FOR_ICE_GATHERING_TO_SEND_OFFER` to \"True\".\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCFFmpegGetStarted/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -p 8080:8080 -e ASPNETCORE_URLS=\"http://0.0.0.0:8080\" -e WAIT_FOR_ICE_GATHERING_TO_SEND_OFFER=\"True\" webrtcgetstarted\n```\n\n----------------------------------------\n\nTITLE: Creating a New WebRTC Console Application with SIPSorcery and SIPSorceryMedia.Encoders\nDESCRIPTION: This set of commands creates a new console application, navigates into the created directory, and adds the SIPSorcery and SIPSorceryMedia.Encoders NuGet packages. This is part of the getting started guide for WebRTC.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet new console --name WebRTCGetStarted\ncd WebRTCGetStarted\ndotnet add package SIPSorcery\ndotnet add package SIPSorceryMedia.Encoders\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command (STUN Server)\nDESCRIPTION: This command runs the 'webrtcgetstarted' Docker image, mapping port 8080, waiting for ICE gathering and sets a STUN server using the `STUN_URL` environment variable.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCFFmpegGetStarted/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -p 8080:8080 -e ASPNETCORE_URLS=\"http://0.0.0.0:8080\" -e WAIT_FOR_ICE_GATHERING_TO_SEND_OFFER=\"True\" -e STUN_URL=\"stun:stun.cloudflare.com\" webrtcgetstarted\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command (UDP Port Mapping)\nDESCRIPTION: This command runs the 'webrtcgetstarted' Docker image, mapping TCP port 8080 and UDP port 50042 of the host to the container. It sets the ASPNETCORE_URLS and BIND_PORT environment variables.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCFFmpegGetStarted/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -p 8080:8080 -p 50042:50042/udp -e ASPNETCORE_URLS=\"http://0.0.0.0:8080\" -e BIND_PORT=\"50042\" webrtcgetstarted\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command (Troubleshooting)\nDESCRIPTION: This command runs the 'webrtcgetstarted' Docker image and overrides the default entrypoint to start a bash shell for troubleshooting purposes, mapping port 8080 and setting the ASPNETCORE_URLS environment variable.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCFFmpegGetStarted/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -p 8080:8080 -e ASPNETCORE_URLS=\"http://0.0.0.0:8080\" --entrypoint \"/bin/bash\" webrtcgetstarted\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command (Port Mapping)\nDESCRIPTION: This command runs the 'webrtcgetstarted' Docker image, mapping port 8080 of the host to port 8080 of the container. It sets the ASPNETCORE_URLS environment variable to allow the application to listen on all interfaces.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCFFmpegGetStarted/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -p 8080:8080 -e ASPNETCORE_URLS=\"http://0.0.0.0:8080\" webrtcgetstarted\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers\nDESCRIPTION: This command uses Docker Compose to start the Bitcoin Signet node, LND (Lightning Network Daemon), and RTL (Ride the Lightning) services in detached mode. These services are essential for the demo to function.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCLightningExamples/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Initiating an Authenticated SIP Call as UAC (Example 2)\nDESCRIPTION: This command initiates an authenticated SIP call acting as a User Agent Client (UAC). It includes the destination SIP URI, role (UAC), verbosity, username (1000), and password for authentication.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/sipcmdline/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run -- -d 9170@192.168.0.47 -s uac -v -u 1000 --password password\n```\n\n----------------------------------------\n\nTITLE: Start sngrep for SIP Tracing\nDESCRIPTION: This command starts sngrep, a tool for capturing and displaying SIP traffic. The command filters traffic on the loopback interface (lo) and specified port ranges for SIP and RTP communication during the On Hold test scenario.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/OnHoldScenario/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo sngrep -r -d lo portrange 6070-6071 or portrange 49000-65535\n```\n\n----------------------------------------\n\nTITLE: Connecting to Echo Server (.NET)\nDESCRIPTION: This command starts the .NET application and instructs it to connect to a specified echo server. The URL points to the echo server's endpoint to receive offers and send back answers. This allows for a simple test of WebRTC connectivity.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/webrtccmdline/README.md#_snippet_3\n\nLANGUAGE: .NET\nCODE:\n```\ndotnet run -- --echo http://localhost:8080/offer\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command (Host Network)\nDESCRIPTION: This command runs the 'webrtcgetstarted' Docker image using the host network. It also maps port 8080 of the host to port 8080 of the container and sets the ASPNETCORE_URLS environment variable.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCFFmpegGetStarted/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it --network=host -p 8080:8080 -e ASPNETCORE_URLS=\"http://0.0.0.0:8080\" webrtcgetstarted\n```\n\n----------------------------------------\n\nTITLE: Installing SIPSorcery NuGet Package using dotnet CLI\nDESCRIPTION: This command adds the SIPSorcery NuGet package to your project using the dotnet command-line interface.  This is required to use the core SIPSorcery library in a .NET project. This assumes you already have a .NET project created.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet add package SIPSorcery\n```\n\n----------------------------------------\n\nTITLE: Installing SIPSorcery NuGet Package using Package Manager Console\nDESCRIPTION: This command installs the SIPSorcery NuGet package to your project using the Visual Studio Package Manager Console. This requires the NuGet Package Manager to be installed in Visual Studio. It assumes you already have a .NET project open in Visual Studio.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/README.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package SIPSorcery\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository\nDESCRIPTION: This command clones the sipsorcery repository from GitHub and navigates to the specific directory for the WebRTC Lightning Get Started example. This is the first step in setting up the demo environment.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCLightningExamples/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:sipsorcery-org/sipsorcery.git\ncd sipsorcery/examples/WebRTCLightningExamples/WebRTCLightningGetStarted\n```\n\n----------------------------------------\n\nTITLE: Starting ffplay with SDP file\nDESCRIPTION: This command starts ffplay with the generated SDP file as input. It specifies the protocol whitelist to allow ffplay to read the SDP file and receive RTP/UDP streams. The probesize is reduced to 32 to speed up initial stream acquisition.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCtoFfplay/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nffplay -probesize 32 -protocol_whitelist \"file,rtp,udp\" -i ffplay.sdp\n```\n\n----------------------------------------\n\nTITLE: Initiating an Authenticated SIP Call as UAC (Example 1)\nDESCRIPTION: This command initiates an authenticated SIP call acting as a User Agent Client (UAC). It includes the destination SIP URI, role (UAC), verbosity, username, and password for authentication.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/sipcmdline/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run -- -d 100@sipprovider.cloud -s uac -v -u user --password password\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command (DockerHub Image)\nDESCRIPTION: This command runs the 'sipsorcery/webrtcgetstarted' Docker image from DockerHub, mapping port 8080 of the host to the container and setting the ASPNETCORE_URLS environment variable.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCFFmpegGetStarted/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -p 8080:8080 -e ASPNETCORE_URLS=\"http://0.0.0.0:8080\" sipsorcery/webrtcgetstarted\n```\n\n----------------------------------------\n\nTITLE: Monitoring LND Logs\nDESCRIPTION: This command streams the logs of the LND container, allowing you to monitor the progress of the LND node syncing with the Bitcoin Signet network. This is crucial for ensuring that the LND node is ready for use.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCLightningExamples/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f lnd\n```\n\n----------------------------------------\n\nTITLE: Run LoadServer with dotnet\nDESCRIPTION: This command executes the `LoadServer` program using the .Net Core runtime.  It assumes the current directory is `LoadServer`.  Prerequisites are that .Net Core is installed and the `LoadServer` project is built.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/LoadTestScenario/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nLoadServer$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Run LoadClient with dotnet\nDESCRIPTION: This command executes the `LoadClient` program using the .Net Core runtime. It assumes the current directory is `LoadClient`. Prerequisites are that .Net Core is installed and the `LoadClient` project is built.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/LoadTestScenario/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nLoadClient$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Transferee Application\nDESCRIPTION: This command starts the Transferee application, another component in the SIP Attended Transfer test.  It relies on the .Net Core runtime to execute the Transferee program.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/AttendedTransferScenario/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTransferee$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Starting the .Net Core application\nDESCRIPTION: This command starts the .Net Core test application, which is responsible for handling the WebRTC connection and generating the SDP file for ffplay. It assumes that the necessary .Net Core runtime is installed and configured.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCtoFfplay/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Echo Server (Docker)\nDESCRIPTION: This command runs a WebRTC echo server using Docker. The server listens on port 8080 and echoes back any data sent to it via WebRTC. This command assumes Docker is installed.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/webrtccmdline/README.md#_snippet_2\n\nLANGUAGE: Docker\nCODE:\n```\ndocker run -it --rm --init -p 8080:8080 ghcr.io/sipsorcery/aiortc-webrtc-echo\n```\n\n----------------------------------------\n\nTITLE: Loading Font Asset in C#\nDESCRIPTION: This code demonstrates how to automatically load an asset file, specifically a font file (fonts/samplefont.ttf), using the Typeface.CreateFromAsset function in C#. This is useful for directly loading assets required by Android UI elements.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPExamples/AndroidSIPGetStarted/Assets/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nTypeface tf = Typeface.CreateFromAsset (Context.Assets, \"fonts/samplefont.ttf\");\n```\n\n----------------------------------------\n\nTITLE: Monitoring Bitcoin Signet Logs\nDESCRIPTION: This command streams the logs of the bitcoind (Bitcoin Signet) container, allowing you to monitor the progress of the Bitcoin node syncing. Useful for troubleshooting LND syncing issues.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCLightningExamples/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f bitcoind\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Containers\nDESCRIPTION: This command stops and removes the Docker containers created by Docker Compose, effectively shutting down the demo environment. It gracefully shuts down the Bitcoin Signet node, LND, and RTL services.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCLightningExamples/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Options with dotnet run\nDESCRIPTION: This command is used to display the available options and help information for the SIP testing tool. It provides a list of all supported parameters and their usage.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/sipcmdline/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run -- --help\n```\n\n----------------------------------------\n\nTITLE: Running the .NET Core Application with Codec Options\nDESCRIPTION: Executes the .NET Core application and specifies the video codec to use (VP8, VP9, or H264). The application then outputs the required FFmpeg command to the console.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/FfmpegToWebRTC/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run -- <vp8|vp9|h264>\n```\n\n----------------------------------------\n\nTITLE: Command Line for Video Call to Softphone\nDESCRIPTION: This command line instruction is used to initiate a video call to the softphone application using the VideoPhoneCmdLine example from the SIPSorcery examples. It specifies the destination and transport protocol.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/Softphone/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run --dst=127.0.0.1:5060 --tp\n```\n\n----------------------------------------\n\nTITLE: Initiating a Simple SIP Call as UAC\nDESCRIPTION: This command initiates a simple SIP call acting as a User Agent Client (UAC). It specifies the destination SIP URI and sets the verbosity level to verbose.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/sipcmdline/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run -- -d music@iptel.org -s uac -v\n```\n\n----------------------------------------\n\nTITLE: Reading Asset with AssetManager in C#\nDESCRIPTION: This code snippet shows how to access an asset file (my_asset.txt) deployed with an Android application using the AssetManager in C#. It opens the asset as an InputStream.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPExamples/AndroidSIPGetStarted/Assets/AboutAssets.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReadAsset : Activity\n{\n    protected override void OnCreate (Bundle bundle)\n    {\n        base.OnCreate (bundle);\n\n        InputStream input = Assets.Open (\"my_asset.txt\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Transferee Program (.Net Core)\nDESCRIPTION: This command is used to execute the Transferee program using the .Net Core runtime. It assumes that the current directory is the Transferee project directory.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/BlindTransferScenario/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTransferee$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Transferor Program (.Net Core)\nDESCRIPTION: This command is used to execute the Transferor program using the .Net Core runtime. It assumes that the current directory is the Transferor project directory.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/BlindTransferScenario/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTransferor$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Target Program (.Net Core)\nDESCRIPTION: This command is used to execute the Target program using the .Net Core runtime. It assumes that the current directory is the Target project directory.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/BlindTransferScenario/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTarget$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Caller Program\nDESCRIPTION: This command starts the caller program using the .Net Core runtime environment. The caller program participates in the SIP On Hold test scenario by initiating and managing calls.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/OnHoldScenario/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nCaller$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Running with WebSocket Signaling (.NET)\nDESCRIPTION: This command starts the application with WebSocket support, enabling connectivity testing via a web browser. The application listens for WebSocket connections to establish WebRTC signaling.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/webrtccmdline/README.md#_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\ndotnet run -- --ws\n```\n\n----------------------------------------\n\nTITLE: Running Transferor Application\nDESCRIPTION: This command is used to execute the Transferor application using the .Net Core runtime. It starts the Transferor program, which is a key component of the SIP Attended Transfer test scenario.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/AttendedTransferScenario/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTransferor$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Callee Program\nDESCRIPTION: This command starts the callee program using the .Net Core runtime environment. The callee program participates in the SIP On Hold test scenario by receiving calls and sending DTMF sequences.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/OnHoldScenario/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCallee$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Target Application\nDESCRIPTION: This command is used to start the Target application, the final component of the Attended Transfer test scenario. The .Net Core runtime is needed to execute this program.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/SIPScenarios/AttendedTransferScenario/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nTarget$ dotnet run\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command\nDESCRIPTION: This command builds a Docker image named 'webrtcgetstarted' from the Dockerfile in the current directory, using plain progress output.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCFFmpegGetStarted/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t webrtcgetstarted --progress=plain -f Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Running the Demo Application\nDESCRIPTION: This command starts the demo application using the .NET CLI. The application is responsible for managing the WebRTC video stream and processing Lightning payments to update the video source.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCLightningExamples/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Printing Hello World in C#\nDESCRIPTION: This snippet demonstrates a simple \"Hello World\" program in C#. It uses the `Console.WriteLine` method to print the string \"Hello World\" to the console.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/notebooks/Register.ipynb#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nConsole.WriteLine(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Running the .Net Core test application\nDESCRIPTION: This command starts the .Net Core test application. This assumes the application is correctly configured and built.\nSOURCE: https://github.com/sipsorcery-org/sipsorcery/blob/master/examples/WebRTCExamples/WebRTCTestPatternServer/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet run\n```"
  }
]