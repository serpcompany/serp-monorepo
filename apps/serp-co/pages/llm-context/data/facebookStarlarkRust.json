[
  {
    "owner": "facebook",
    "repo": "starlark-rust",
    "content": "TITLE: Managing Heap References for FrozenValues in Rust\nDESCRIPTION: Demonstrates the proper pattern for creating a FrozenHeap, allocating values on it, converting it to a FrozenHeapRef, and then safely referencing those frozen values from another heap.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/heaps.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet h1 = FrozenHeap::new();\nlet s = \"test\".alloc(h1);\nlet h1 : FrozenHeapRef = h1.into_ref();\n\nlet h2 = Heap::new();\nh2.add_reference(h1);\nvec![s].alloc(h2);\n```\n\n----------------------------------------\n\nTITLE: Defining an Enumeration Type in Starlark Python\nDESCRIPTION: Shows how to define a finite set of valid values using the `enum` constructor, creating an enumeration type with named options. This snippet explains runtime validation when creating enum instances, retrieval of underlying values and indices, and enumeration introspection methods such as `.values()`, iteration, indexing, and length.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/types.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMyEnum = enum(\"option1\", \"option2\", \"option3\")\n```\n\n----------------------------------------\n\nTITLE: Using OwnedFrozenValue Between Modules in Rust\nDESCRIPTION: Shows how to safely move a value from a FrozenModule to a regular Module using OwnedFrozenValue, ensuring proper heap reference management.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/heaps.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn move<'v>(from: &FrozenModule, to: &'v Module) {\n    let x : OwnedFrozenValue = from.get(\"value\").unwrap();\n    let v : Value<'v> = x.owned_value(&to);\n    to.set(\"value\", v);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Record Type in Starlark Python\nDESCRIPTION: Demonstrates defining a record type with named fields and associated types using the `record` constructor. Each field is explicitly assigned a type such as `str` or `int`, enabling both runtime type-checking when creating instances and attribute access with type guarantees. The snippet highlights the usage of `field` function to specify default values as well, allowing for optional fields with defaults.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/types.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMyRecord = record(host=str, port=int)\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Value Representation Enums in Rust\nDESCRIPTION: These Rust enums define the internal representation of Starlark values, incorporating concepts like frozen/unfrozen states, sharing (`Arc`, `Rc`), and mutability (`RefCell`). `FrozenValue` represents globally shared, immutable values using `Arc` for thread-safe reference counting. `Value` represents local values which can be `Immutable` (referencing a `FrozenValue`), `Pseudo` (immutable containers of mutable data using `Rc`), or `Mutable` (using `Rc<RefCell<Mutable>>`). The `Mutable` enum distinguishes between fully mutable and 'thaw-on-write' values. `StarlarkValue` and `ComplexValue` are traits defining value-like methods.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/values.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nenum FrozenValue {\n    None(NoneType),\n    Bool(bool),\n    Int(i64),\n    Obj(Arc<dyn StarlarkValue>),\n}\n\nenum Value {\n    Immutable(FrozenValue),\n    Pseudo(Rc<dyn ComplexValue>)\n    Mutable(Rc<RefCell<Mutable>>),\n}\n\nenum Mutable {\n    Mutable(Box<dyn ComplexValue>),\n    ThawOnWrite(Arc<dyn StarlarkValue>),\n}\n```\n\n----------------------------------------\n\nTITLE: Rust Context Definition\nDESCRIPTION: Defines the `Context` struct in Rust, which encapsulates the `Names` and `Slots` data structures. This `Context` is passed around during runtime to allow modules and functions to have access to both their names and slot information (variable values). The `Slots` for the innermost scope should always be mutable. The outer scopes may be frozen.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/environment.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nstruct Context {\n    names: Names,\n    slots: Vec<Slots>,\n}\n```\n\n----------------------------------------\n\nTITLE: Rust FrozenContext Definition\nDESCRIPTION: Defines the `FrozenContext` struct, representing the context in a frozen module. It contains `FrozenNames` and a vector of `FrozenSlots`, representing immutable versions of the name-to-slot mappings and the slot values. The structure is used when a function value is captured in a frozen module.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/environment.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nstruct FrozenContext {\n    names: FrozenNames,\n    slots: Vec<FrozenSlots>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Type Annotations in Starlark Python\nDESCRIPTION: Illustrates how to add type annotations to function parameters and return types in Starlark, serving as a basic example of the experimental type extension. This snippet assumes the Starlark runtime supports the type syntax similar to Python's standard typing module.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/types.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef fib(i: int) -> int:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Rust Enum Names Definition\nDESCRIPTION: Defines the `Names` data type in Rust. This data type tracks the mapping of variable names to slot indices in the `Slots` structure. It uses an enum to represent frozen and mutable names and uses `Rc`/`RefCell` or `Arc` for sharing/mutability.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/environment.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nenum Names {\n    Frozen(FrozenNames),\n    Names(Rc<RefCell<HashMap<String, usize>>>),\n}\nstruct FrozenNames(Arc<HashMap<String, usize>>);\n```\n\n----------------------------------------\n\nTITLE: Defining the Magic Function in Starlark (Python)\nDESCRIPTION: This snippet defines a function called Magic with required and optional positional parameters in Python, designed for use within Starlark Rust's test suite. The function accepts two required integer arguments (a1, a2 with a default) and an optional step parameter with a default value of 1. All arguments must be provided positionally, as indicated by the forward slash (/). The function returns a string. Dependencies include the Python runtime and integration with the Starlark framework. Inputs must be integers, with a1 mandatory, a2 optionally provided, and step defaulting to 1. Returns a string value determined by the function's implementation.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/Magic.golden.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef Magic(a1: int, a2: int = ..., step: int = 1, /) -> str\n```\n\n----------------------------------------\n\nTITLE: Rust Enum Slots Definition\nDESCRIPTION: Defines the `Slots` data type in Rust, used to store variables in Starlark. It uses an enum to represent both mutable and frozen slots, using `Rc<RefCell<Vec<Option<Value>>>>` for mutable slots to allow modification, and `Arc<Vec<Option<FrozenValue>>>` for frozen slots that are shared, and therefore immutable.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/environment.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nenum Slots {\n    Frozen(FrozenSlots),\n    Slots(Rc<RefCell<Vec<Option<Value>>>>),\n}\n\nstruct FrozenSlots(Arc<Vec<Option<FrozenValue>>>);\n```\n\n----------------------------------------\n\nTITLE: Creating a Record Type with Default Field Values in Starlark Python\nDESCRIPTION: Shows how to create a record type with fields that have default values using the `field` function. This enables omission of some parameters during record construction, as demonstrated by `port` defaulting to 80 if not provided, which supports flexible yet type-safe record instantiation.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/types.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMyRecord = record(host=str, port=field(int, 80))\n```\n\n----------------------------------------\n\nTITLE: Defining a Starlark Function with Nested Scope\nDESCRIPTION: This Python code defines a Starlark function `foo` nested inside `bar`. It illustrates the concept of nested scopes in Starlark.  The `x` variable is defined in the module environment, `y` is defined in the scope of `foo` and `z` in the scope of `bar`, and `list.append` is in the global scope.  This code defines the environments that will be used by the starlark runtime to look up variables.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/environment.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nx = []\ndef foo():\n    y = True\n    def bar():\n        z = 1\n        list.append(x, 1)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Function Returning List Literal\nDESCRIPTION: This Python function `my_list` takes an argument `x` and returns a tuple containing a list literal `[1,2,3]` and the argument `x`. The returned list is initially unfrozen, illustrating a common pattern optimized by the 'thaw-on-write' technique in the interpreter implementation.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/values.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef my_list(x):\n   return ([1,2,3], x)\n```\n\n----------------------------------------\n\nTITLE: Defining Function func1 (Python)\nDESCRIPTION: Defines a function `func1` that accepts one string parameter `foo` and returns the literal string 'func1'. Documentation for the parameter `foo` is provided.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/globals.golden.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef func1(foo: str) -> str\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Function pos_either_named (Starlark)\nDESCRIPTION: Defines a Starlark function 'pos_either_named' illustrating various argument types: 'a' is positional-only ('/'), 'b' can be positional or keyword, and 'c' is keyword-only ('*'). The function is expected to return a value of type 'magic'.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/native.golden.md#_snippet_5\n\nLANGUAGE: Starlark\nCODE:\n```\ndef pos_either_named(a: int, /, b: int, *, c: int) -> magic\n```\n\n----------------------------------------\n\nTITLE: Defining Magic Function with Positional Arguments in Starlark (Python)\nDESCRIPTION: Defines the function 'Magic' in Python, requiring at least one positional integer argument 'a1', an optional 'a2' integer with a default value, and a 'step' integer defaulting to 1. All parameters are positional-only, as indicated by '/', enforcing argument order and prohibiting keyword usage. The function returns a string and is designed to restrict argument passing strictly to position, making API usage explicit.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/Magic.golden.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef Magic(a1: int, a2: int = ..., step: int = 1, /) -> str\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Function with_defaults (Starlark)\nDESCRIPTION: Defines a Starlark function 'with_defaults' showcasing parameters with default values. 'explicit_default' defaults to an empty list, 'hidden_default' uses ellipsis ('...') implying a special default managed by the implementation, and 'string_default' defaults to the string \"my_default\". The function returns None.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/native.golden.md#_snippet_6\n\nLANGUAGE: Starlark\nCODE:\n```\ndef with_defaults(\n    explicit_default: list[str] = [],\n    hidden_default: list[str] = ...,\n    string_default: str = \"my_default\",\n) -> None\n```\n\n----------------------------------------\n\nTITLE: Defining `name.func1` Starlark Function - Python\nDESCRIPTION: This snippet defines a function named `func1` within the `name` module. It takes a string argument `foo` and returns a string value. This demonstrates the typical way to define functions within a Starlark module that accept parameters. The function is intended to return the string literal 'func1'.\n\nDependencies: None.\n\nParameters:\n* `foo`: A string input for the function\n\nReturns: The string 'func1'\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/object.golden.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef name.func1(foo: str) -> str\n```\n\n----------------------------------------\n\nTITLE: Defining Function pos_either_named (Python)\nDESCRIPTION: Defines a function `pos_either_named` demonstrating different parameter kinds: `a` is positional-only, `b` is positional or keyword, and `c` is keyword-only. All parameters are integers. The function returns an object of type `magic`.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/globals.golden.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef pos_either_named(\n    a: int,\n    /,\n    b: int,\n    *,\n    c: int,\n) -> magic\n```\n\n----------------------------------------\n\nTITLE: Defining function signature with defaults Python\nDESCRIPTION: Defines the function signature for `with_defaults`, demonstrating arguments with default values. `explicit_default` defaults to an empty list, `hidden_default` uses the ellipsis `...`, and `string_default` defaults to the string \"my_default\". The function returns `None`.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/globals.golden.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef with_defaults(\n    explicit_default: list[str] = [],\n    hidden_default: list[str] = ...,\n    string_default: str = \"my_default\",\n) -> None\n```\n\n----------------------------------------\n\nTITLE: Defining Function func1 with String Parameter on Obj in Python\nDESCRIPTION: Defines a function 'func1' on Obj that accepts a single string parameter 'foo' and returns a string. The parameter 'foo' is documented with additional description, and the function returns the string literal 'func1'. This snippet outlines a typical method signature with parameter and return details for Obj.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/Obj.golden.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef Obj.func1(foo: str) -> str\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Function func1 (Starlark)\nDESCRIPTION: Defines a Starlark function named 'func1'. It accepts one positional argument 'foo' which is expected to be a string, and it returns a string. The documentation specifies the parameter and return value.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/native.golden.md#_snippet_3\n\nLANGUAGE: Starlark\nCODE:\n```\ndef func1(foo: str) -> str\n```\n\n----------------------------------------\n\nTITLE: Implementing Obj.func1 method in Starlark\nDESCRIPTION: A function that takes a string parameter 'foo' and returns a string value 'func1'. Includes detailed parameter documentation.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/Obj.golden.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef Obj.func1(foo: str) -> str\n```\n\n----------------------------------------\n\nTITLE: Defining starlark_kwargs Function with Variable Keyword Arguments in Python\nDESCRIPTION: Defines a function named starlark_kwargs that accepts an arbitrary number of keyword arguments where each value is an integer. The function returns None. This signature is used for testing handling of dynamic keyword arguments in the starlark-rust context.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/submod.golden.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef starlark_kwargs(**kwargs: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Creating a new object instance in Python for Rust integration\nDESCRIPTION: Defines a function 'new_obj' that returns a new 'obj' instance, potentially serving as a factory function for object creation within the project. It depends on the '/path/to/Obj' class or module. This helper simplifies object instantiation for later use.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/submod.golden.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef new_obj() -> <a to=\"/path/to/Obj\">obj</a>\n```\n\n----------------------------------------\n\nTITLE: Defining starlark_args Function with Variable Positional Arguments in Python\nDESCRIPTION: Defines a function named starlark_args that accepts an arbitrary number of positional string arguments via *args. The return type is None, indicating no return value. This pattern demonstrates handling of variable arguments for Starlark-Rust testing scenarios.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/submod.golden.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef starlark_args(*args: str) -> None\n```\n\n----------------------------------------\n\nTITLE: Processing positional string arguments in Python\nDESCRIPTION: Defines 'starlark_args' to accept a variable number of string arguments. This function may collect or process positional args for use in Starlark interactions from Python, facilitating flexible argument passing.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/submod.golden.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef starlark_args(*args: str) -> None\n```\n\n----------------------------------------\n\nTITLE: Defining f1 Function in Python\nDESCRIPTION: This Python code defines a function named `f1`. The function `f1` accepts multiple arguments, including positional, keyword-only, and keyword arguments. It includes type hints for improved readability and maintainability.  The function's parameters consist of `a`, a required argument; `b`, a required string argument; `c`, an integer argument with a default value of 5; `d`, a keyword-only string argument with a default value; and `**kwargs`, a dictionary for additional keyword arguments. The expected output is a string representation of the arguments.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/starlark.golden.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef f1(\n    a,\n    b: str,\n    c: int = 5,\n    *,\n    d: str = \"some string\",\n    **kwargs,\n) -> list[str]\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Function func2 (Starlark)\nDESCRIPTION: Defines a Starlark function named 'func2'. This function takes no arguments and is expected to return a string.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/native.golden.md#_snippet_4\n\nLANGUAGE: Starlark\nCODE:\n```\ndef func2() -> str\n```\n\n----------------------------------------\n\nTITLE: Implementing Obj.func2 method in Starlark\nDESCRIPTION: A function that takes no parameters and returns a string value. No specific documentation is provided for this function.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/Obj.golden.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef Obj.func2() -> str\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterless Function func2 on Obj in Python\nDESCRIPTION: Defines a parameterless function 'func2' on Obj that returns a string. This snippet shows a simple method signature without parameters which is expected to return a string value when called.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/Obj.golden.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef Obj.func2() -> str\n```\n\n----------------------------------------\n\nTITLE: Defining `name.attr1` String Attribute - Python\nDESCRIPTION: This snippet defines an attribute named `attr1` for a Starlark module's `name` namespace, specifying its type as a string (`str`).  Attributes like `attr1` are accessed directly via the module, providing a simple way to represent data.  This snippet only defines the type of the attribute; no initial value is provided.\n\nDependencies: None.\n\nOutput: The attribute `attr1` with the type string.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/object.golden.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nname.attr1: str\n```\n\n----------------------------------------\n\nTITLE: Using the Magic Function in Starlark (Python)\nDESCRIPTION: This snippet demonstrates the invocation of the Magic function with a single integer parameter. It serves as a usage example for test or documentation purposes within the Starlark Rust project. Only the required positional argument is supplied, while default values are used for a2 and step, showcasing default parameter handling and positional-only signature enforcement. Input value is 1; output is a string as specified by the function. Assumes prior definition of Magic and that the environment supports its signature and default values.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/Magic.golden.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nMagic(1)\n```\n\n----------------------------------------\n\nTITLE: Defining function signature with special args Python\nDESCRIPTION: Defines the function signature for `pos_either_named`, showcasing special argument handling. Argument `a` is positional-only (`/`), `b` can be positional or keyword, and `c` is keyword-only (`*`). The function is noted to return a type `magic`.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/globals.golden.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef pos_either_named(a: int, /, b: int, *, c: int) -> magic\n```\n\n----------------------------------------\n\nTITLE: Declaration of Obj.attr1 string attribute in Starlark\nDESCRIPTION: A string attribute of the Obj module. Includes documentation for attr1.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/Obj.golden.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nObj.attr1: str\n```\n\n----------------------------------------\n\nTITLE: Defining String Attribute attr1 on Obj in Python\nDESCRIPTION: Documents the attribute 'attr1' on the Obj class as a string property. It is a simple attribute holding string data. The snippet implies reading or usage of Obj.attr1 as a string value with no additional parameters or methods.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/Obj.golden.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nObj.attr1: str\n```\n\n----------------------------------------\n\nTITLE: Defining f2 Function in Python\nDESCRIPTION: This Python code defines a function named `f2` that accepts a variable number of positional arguments using `*args`.  The function `f2` takes a positional argument `a` and a variable number of string arguments in `*args`. There is no explicit return type declared. The function is designed to accept and process a dynamic number of arguments.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/starlark.golden.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef f2(a, *args: list[str])\n```\n\n----------------------------------------\n\nTITLE: Defining f4 Function in Python\nDESCRIPTION: This Python code defines a simple function `f4`. The function `f4` accepts a single string argument `a` and returns a string.  This showcases a function definition with no explicit docstring.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/starlark.golden.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef f4(a: str) -> str\n```\n\n----------------------------------------\n\nTITLE: Defining function signature func2 Python\nDESCRIPTION: Defines the function signature for `func2`. It indicates that `func2` accepts no arguments and returns a value of type `str`.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/globals.golden.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef func2() -> str\n```\n\n----------------------------------------\n\nTITLE: Defining Function func2 (Python)\nDESCRIPTION: Defines a function `func2` that takes no arguments and returns a string.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/globals.golden.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef func2() -> str\n```\n\n----------------------------------------\n\nTITLE: Defining Starlark Constant MAGIC (Starlark)\nDESCRIPTION: Defines a constant named 'MAGIC' within the Starlark module, indicating its expected integer type.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/native.golden.md#_snippet_0\n\nLANGUAGE: Starlark\nCODE:\n```\nMAGIC: int\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Variable MAGIC (Python)\nDESCRIPTION: Declares a global variable named `MAGIC` with an integer type annotation.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/globals.golden.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMAGIC: int\n```\n\n----------------------------------------\n\nTITLE: Defining function signature func1 Python\nDESCRIPTION: Defines the function signature for `func1`. It specifies that `func1` accepts one required positional argument `foo` of type `str` and returns a value of type `str`. The surrounding text provides documentation for the function and its parameter.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/globals.golden.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef func1(foo: str) -> str\n```\n\n----------------------------------------\n\nTITLE: Defining global variable type MAGIC Python\nDESCRIPTION: Defines the type hint for a global variable named `MAGIC`. The hint indicates that `MAGIC` is expected to be an integer.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/globals.golden.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMAGIC: int\n```\n\n----------------------------------------\n\nTITLE: Exposing Starlark Type Magic (Starlark)\nDESCRIPTION: Exposes a type named 'Magic' within the Starlark module. It is associated with a type named 'magic', presumably a corresponding Rust type or alias.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/native.golden.md#_snippet_1\n\nLANGUAGE: Starlark\nCODE:\n```\nMagic: magic\n```\n\n----------------------------------------\n\nTITLE: Handling keyword arguments as integers in Python\nDESCRIPTION: Defines 'starlark_kwargs' to accept arbitrary keyword arguments with integer values. It supports processing key-value pairs, enabling named argument passing, useful for configuring or customizing behavior in Starlark integrations.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/submod.golden.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef starlark_kwargs(**kwargs: int) -> None\n```\n\n----------------------------------------\n\nTITLE: Exposing Starlark Type Obj (Starlark)\nDESCRIPTION: Exposes a type named 'Obj' within the Starlark module, associated with a type named 'obj'. The surrounding text indicates this is where module-level documentation for this object would be placed.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/native.golden.md#_snippet_2\n\nLANGUAGE: Starlark\nCODE:\n```\nObj: obj\n```\n\n----------------------------------------\n\nTITLE: Defining String Attribute attr2 on Obj in Python\nDESCRIPTION: Documents the attribute 'attr2' on the Obj class as a string property. Similar to attr1, it is a string attribute that can be accessed directly on instances of Obj or the class itself.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/Obj.golden.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nObj.attr2: str\n```\n\n----------------------------------------\n\nTITLE: Handling types in Python\nDESCRIPTION: Defines the 'notypes' function which accepts a parameter 'a' without specifying its type. It likely performs an operation related to ignoring type information or processing 'a' generically, used in scenarios requiring dynamic type handling.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/submod.golden.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef notypes(a)\n```\n\n----------------------------------------\n\nTITLE: Defining `name.__exported__` Starlark Function - Python\nDESCRIPTION: This snippet defines a function named `__exported__` within a Starlark module's `name` namespace. The function is declared with the `def` keyword and indicates it doesn't return any value, indicated by `-> None`. This type of function would typically be intended for actions that have side effects or no direct return value. It's intended to be exported as part of the module's public API. No parameters are expected.\n\nDependencies: None.\n\nOutput: None\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/object.golden.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef name.__exported__() -> None\n```\n\n----------------------------------------\n\nTITLE: Defining f3 Function in Python\nDESCRIPTION: This Python code defines a simple function `f3`.  The function takes a string `a` as input and returns a string. This illustrates a basic function definition with type hinting for both the input and the output.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/starlark.golden.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef f3(a: str) -> str\n```\n\n----------------------------------------\n\nTITLE: Defining Exported Method on Obj in Python\nDESCRIPTION: Defines a parameterless method __exported__ on the Obj class that returns None. This method likely marks which members of Obj should be exported or is used for module documentation purposes. It requires standard Python function declaration syntax and is intended to be invoked without parameters.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/Obj.golden.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef Obj.__exported__() -> None\n```\n\n----------------------------------------\n\nTITLE: Python Conditional Variable Assignment\nDESCRIPTION: Demonstrates a scenario in Python where a variable is declared in an outer scope but assigned in a conditional block within a function.  This can lead to errors where the variable is referenced before assignment if the conditional is not met, due to Python's scope rules.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/environment.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = 1\ndef f():\n    print(x)\n    if False:\n        x = 2\n```\n\n----------------------------------------\n\nTITLE: Python List Comprehension Example\nDESCRIPTION: Illustrates a Python list comprehension.  It demonstrates how the `x` defined within the comprehension shadows other variables of the same name defined in the outer scopes, and is not added to the `Names` map even when the comprehension is defined in the root of a module.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/docs/environment.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n[x for x in [1,2,3]]\n```\n\n----------------------------------------\n\nTITLE: Reporting Invalid Format Error in Starlark String Formatting - Starlark\nDESCRIPTION: This code snippet demonstrates a Starlark assertion using an f-string with an unmatched '{', causing a string formatting error. The expected input is a format string, but due to the missing closing bracket, the code results in 'Invalid format: Unmatched \\'{\\'''. No dependencies are required, but care must be taken with format string syntax. The output is an error message describing the syntax problem encountered during parsing.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/tests/fstring/golden/invalid_format.err.golden.md#_snippet_0\n\nLANGUAGE: Starlark\nCODE:\n```\nf'foo {bar'\n```\n\n----------------------------------------\n\nTITLE: Starlark Error: Undefined Variable in F-String\nDESCRIPTION: Illustrates a runtime error in Starlark encountered in `assert.bzl` at line 1, column 8. The error 'Variable `bar` not found' occurs because the variable `bar` is referenced within an f-string (`f'foo {bar}'`) but has not been defined in the current scope. The interpreter suggests `chr` as a potential typo correction.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/tests/fstring/golden/undeclared_variable.err.golden.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nerror: Variable `bar` not found, did you mean `chr`?\n --> assert.bzl:1:8\n  |\n1 | f'foo {bar}'\n  |        ^^^\n  |\n```\n\n----------------------------------------\n\nTITLE: Starlark Test Failure: Invalid Identifier\nDESCRIPTION: This snippet details a Starlark syntax error. The error message points to an invalid identifier within a bzl file. The specific error indicates that `bar baz` is not a valid identifier in Starlark. This suggests an issue with the syntax of an expression or variable declaration.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/tests/fstring/golden/invalid_identifier_raw.err.golden.md#_snippet_0\n\nLANGUAGE: Starlark\nCODE:\n```\nfr'foo {bar baz}'\n```\n\n----------------------------------------\n\nTITLE: Defining Function with_defaults (Python)\nDESCRIPTION: Defines a function `with_defaults` that accepts three arguments with default values: `explicit_default` (a list of strings defaulting to empty), `hidden_default` (a list of strings with an ellipsis default, potentially meaning implementation-defined), and `string_default` (a string defaulting to \"my_default\"). The function returns `None`.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/globals.golden.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef with_defaults(\n    explicit_default: list[str] = [],\n    hidden_default: list[str] = ...,\n    string_default: str = \"my_default\",\n) -> None\n```\n\n----------------------------------------\n\nTITLE: Building and Running Starlark JS WebAssembly Example\nDESCRIPTION: A series of commands to compile the Rust project to WebAssembly, copy the compiled .wasm file to the current directory, and serve it using Python's built-in HTTP server. After execution, the example can be accessed through a web browser at localhost:8000.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark_js_example/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrustup target add wasm32-unknown-unknown\ncargo build --target wasm32-unknown-unknown --release\ncp ../target/wasm32-unknown-unknown/release/starlark_js.wasm .\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Installing Starlark LSP Extension\nDESCRIPTION: Commands for installing the Starlark LSP extension using npm and vsce. This process packages the extension as a VSIX file that can be installed in Visual Studio Code.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/vscode/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vsce\nnpm exec vsce package\n```\n\n----------------------------------------\n\nTITLE: Defining new_obj Function Signature in Python\nDESCRIPTION: Defines a function named new_obj that returns an object. It has no input parameters and specifies the return type as obj, likely serving as a factory or constructor stub in the testing context.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/submod.golden.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef new_obj() -> obj\n```\n\n----------------------------------------\n\nTITLE: Asserting Equality in Rust for Starlark Tests\nDESCRIPTION: This Rust snippet checks for basic equality and is representative of the assertion style used in Starlark Rust's test suite to validate outputs or behaviors. By testing that 1 equals 1, this assertion ensures the basic mechanics of the test harness function as expected. There are no dependencies aside from Rust standard libraries, and it requires a valid test context if used within a function. The result is a boolean; if assertion support is added, it would cause test failure on inequality.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/Magic.golden.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n1 == 1\n```\n\n----------------------------------------\n\nTITLE: Defining `name.func2` Starlark Function - Python\nDESCRIPTION: This snippet defines a function named `func2` within the `name` module. It's a function that takes no parameters and returns a string value. It's a simple example of a function that performs an operation and provides a return value.\n\nDependencies: None.\n\nOutput: The return value of the function is a string\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/object.golden.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef name.func2() -> str\n```\n\n----------------------------------------\n\nTITLE: Calling Magic with a Single Argument in Starlark (Python)\nDESCRIPTION: Demonstrates usage of the 'Magic' function by passing only the required positional argument 'a1' with the value 1. This usage relies on default values for the remaining parameters. This example serves as a functional test or concise usage reference.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/Magic.golden.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nMagic(1)\n```\n\n----------------------------------------\n\nTITLE: Defining Obj.__exported__ method in Starlark\nDESCRIPTION: Method that appears to be used for module export functionality. It returns None and needs to be escaped when rendered in markdown.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/Obj.golden.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef Obj.__exported__() -> None\n```\n\n----------------------------------------\n\nTITLE: Regenerating Starlark Rust Test Golden Files\nDESCRIPTION: Provides the shell command used to regenerate the golden test files for the `starlark` crate. Setting the `STARLARK_RUST_REGENERATE_GOLDEN_TESTS` environment variable triggers the regeneration process when running the specified cargo test.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/tests/fstring/golden/escape.err.golden.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nSTARLARK_RUST_REGENERATE_GOLDEN_TESTS=1 cargo test -p starlark --lib\n```\n\n----------------------------------------\n\nTITLE: Defining notypes Function Signature in Python\nDESCRIPTION: Defines a function named notypes that accepts a single positional argument a with no type annotation and does not specify a return type. The function likely serves for testing or demonstration of untyped parameters.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage/submod.golden.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef notypes(a)\n```\n\n----------------------------------------\n\nTITLE: Starlark Invalid Identifier Error in f-string\nDESCRIPTION: Shows the specific line of Starlark code that triggers a parsing error. The error occurs because the expression `bar baz` inside the f-string's curly braces is not a valid identifier or simple expression according to Starlark syntax rules.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/tests/fstring/golden/escape.err.golden.md#_snippet_1\n\nLANGUAGE: Starlark\nCODE:\n```\nf'foo \\n {bar baz}'\n```\n\n----------------------------------------\n\nTITLE: Declaration of Obj.attr2 string attribute in Starlark\nDESCRIPTION: A string attribute of the Obj module. No specific documentation is provided for this attribute.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/Obj.golden.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nObj.attr2: str\n```\n\n----------------------------------------\n\nTITLE: Defining `name.attr2` String Attribute - Python\nDESCRIPTION: Similar to `name.attr1`, this defines a string attribute named `attr2`. It mirrors the previous attribute definition, indicating that the `name` module also has an attribute called `attr2` that is of type string. This attribute is not defined with an initial value, it only specifies the type.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/object.golden.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nname.attr2: str\n```\n\n----------------------------------------\n\nTITLE: Adding Starlark Binary to PATH\nDESCRIPTION: Command to copy the Starlark binary to your PATH after building it with Cargo. Makes the binary accessible for the extension without additional configuration.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/vscode/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp $CARGO_TARGET_DIR/debug/starlark ~/.cargo/bin/starlark\n```\n\n----------------------------------------\n\nTITLE: Updating Extension Dependencies\nDESCRIPTION: Commands for maintaining the extension's dependencies and addressing security advisories. Identifies vulnerabilities, applies fixes, and rebuilds the package.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/vscode/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm audit\nnpm audit fix\nnpm update\nnpm exec vsce package\n```\n\n----------------------------------------\n\nTITLE: Regenerating Starlark Golden Tests via Cargo\nDESCRIPTION: A shell command using Cargo to regenerate golden tests for the `starlark` Rust crate. This is typically used when the expected output of Starlark code execution (like error messages) changes.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/tests/fstring/golden/undeclared_variable.err.golden.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSTARLARK_RUST_REGENERATE_GOLDEN_TESTS=1 cargo test -p starlark --lib\n```\n\n----------------------------------------\n\nTITLE: Validating Equality Assertion in Rust\nDESCRIPTION: Shows a basic Rust assertion that checks if 1 is equal to 1, typically used as a trivial passing test. Assumes access to Rust's test facilities, such as 'assert_eq!' macro or equivalent. Primarily serves as a placeholder or smoke test for build/test infrastructure integration.\nSOURCE: https://github.com/facebook/starlark-rust/blob/main/starlark/src/docs/tests/golden/multipage_linked_type/Magic.golden.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n1 == 1\n```"
  }
]