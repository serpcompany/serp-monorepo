[
  {
    "owner": "unjs",
    "repo": "unstorage",
    "content": "TITLE: Initializing Basic Storage in JavaScript\nDESCRIPTION: Creates a basic storage instance using the default memory driver\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/1.guide/1.index.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\n\nconst storage = createStorage(/* opts */);\n\nawait storage.getItem(\"foo:bar\"); // or storage.getItem('/foo/bar')\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Unstorage\nDESCRIPTION: A basic example showing how to create a storage instance and retrieve an item using the unstorage API.\nSOURCE: https://github.com/unjs/unstorage/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\n\nconst storage = createStorage(/* opts */);\n\nawait storage.getItem(\"foo:bar\"); // or storage.getItem('/foo/bar')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Storage Driver for unstorage in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and use a custom storage driver with unstorage. It shows the structure of a driver definition with all required methods including hasItem, getItem, setItem, removeItem, getKeys, clear, dispose, and watch. The driver is then used to create a storage instance.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/1.guide/4.custom-driver.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage, defineDriver } from \"unstorage\";\n\nconst myStorageDriver = defineDriver((options) => {\n  return {\n    name: \"my-custom-driver\",\n    options,\n    async hasItem(key, _opts) {},\n    async getItem(key, _opts) {},\n    async setItem(key, value, _opts) {},\n    async removeItem(key, _opts) {},\n    async getKeys(base, _opts) {},\n    async clear(base, _opts) {},\n    async dispose() {},\n    async watch(callback) {},\n  };\n});\n\nconst storage = createStorage({\n  driver: myStorageDriver(),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-layer Storage with Overlay Driver in JavaScript\nDESCRIPTION: This example demonstrates how to create an in-memory overlay on top of a filesystem storage. Changes will only be written to the memory layer and not persisted to disk when setting new keys. The overlay driver manages the hierarchy of storage layers.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/overlay.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport overlay from \"unstorage/drivers/overlay\";\nimport memory from \"unstorage/drivers/memory\";\nimport fs from \"unstorage/drivers/fs\";\n\nconst storage = createStorage({\n  driver: overlay({\n    layers: [memory(), fs({ base: \"./data\" })],\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Server for Unstorage in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an HTTP server that exposes methods to communicate with an Unstorage instance. It includes authorization logic to protect private resources and uses listhen for HTTP listening.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/1.guide/3.http-server.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { listen } from \"listhen\";\nimport { createStorage } from \"unstorage\";\nimport { createStorageServer } from \"unstorage/server\";\n\nconst storage = createStorage();\nconst storageServer = createStorageServer(storage, {\n  authorize(req) {\n    // req: { key, type, event }\n    if (req.type === \"read\" && req.key.startsWith(\"private:\")) {\n      throw new Error(\"Unauthorized Read\");\n    }\n  },\n});\n\n// Alternatively we can use `storageServer.handle` as a middleware\nawait listen(storageServer.handle);\n```\n\n----------------------------------------\n\nTITLE: Mounting File System Storage\nDESCRIPTION: Example of mounting a filesystem driver to a specific mountpoint in the storage system\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/1.guide/1.index.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport fsDriver from \"unstorage/drivers/fs\";\n\n// Create a storage container with default memory storage\nconst storage = createStorage({});\n\nstorage.mount(\"/output\", fsDriver({ base: \"./output\" }));\n\n//  Writes to ./output/test file\nawait storage.setItem(\"/output/test\", \"works\");\n\n// Adds value to in-memory storage\nawait storage.setItem(\"/foo\", \"bar\");\n```\n\n----------------------------------------\n\nTITLE: Creating Namespaced Storage with prefixStorage in TypeScript\nDESCRIPTION: Creates a namespaced instance of the main storage where all operations are virtually prefixed. This is useful for creating shortcuts and limiting access to specific sections of storage.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/1.guide/2.utils.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage, prefixStorage } from \"unstorage\";\n\nconst storage = createStorage();\nconst assetsStorage = prefixStorage(storage, \"assets\");\n\n// Same as storage.setItem('assets:x', 'hello!')\nawait assetsStorage.setItem(\"x\", \"hello!\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Standard Filesystem Driver in Unstorage for Node.js\nDESCRIPTION: Sets up a storage instance using the filesystem driver with a base directory. This driver supports file watching via chokidar and provides metadata like modification time, access time, and file size.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/fs.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport fsDriver from \"unstorage/drivers/fs\";\n\nconst storage = createStorage({\n  driver: fsDriver({ base: \"./tmp\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Unstorage with Redis Single Instance\nDESCRIPTION: Example showing how to create an Unstorage instance with a Redis driver connected to a single Redis instance. This configuration includes host, port, TLS, and authentication settings.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport redisDriver from \"unstorage/drivers/redis\";\n\nconst storage = createStorage({\n  driver: redisDriver({\n    base: \"unstorage\",\n    host: 'HOSTNAME',\n    tls: true as any,\n    port: 6380,\n    password: 'REDIS_PASSWORD'\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing S3 Driver with Unstorage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up Unstorage with the S3 driver. It requires providing the Access Key ID, Secret Access Key, endpoint URL, bucket name, and region to connect to an S3-compatible storage provider.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/s3.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport s3Driver from \"unstorage/drivers/s3\";\n\nconst storage = createStorage({\n  driver: s3Driver({\n    accessKeyId: \"\", // Access Key ID\n    secretAccessKey: \"\", // Secret Access Key\n    endpoint: \"\",\n    bucket: \"\",\n    region: \"\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Driver for Unstorage in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a storage instance using the MongoDB driver for Unstorage. It requires the 'mongodb' package to be installed and configures the driver with a connection string, database name, and collection name.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/mongodb.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport mongodbDriver from \"unstorage/drivers/mongodb\";\n\nconst storage = createStorage({\n  driver: mongodbDriver({\n    connectionString: \"CONNECTION_STRING\",\n    databaseName: \"test\",\n    collectionName: \"test\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Taking Storage Snapshots in JavaScript\nDESCRIPTION: Takes a snapshot from all keys in the specified base and stores them in a plain JavaScript object (string: string). The base prefix is removed from the keys in the resulting snapshot object.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/1.guide/2.utils.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { snapshot } from \"unstorage\";\n\nconst data = await snapshot(storage, \"/etc\");\n```\n\n----------------------------------------\n\nTITLE: Restoring Storage Snapshots in JavaScript\nDESCRIPTION: Restores a snapshot previously created by the snapshot() function. This allows you to save and restore storage state across different instances or sessions.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/1.guide/2.utils.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait restoreSnapshot(storage, { \"foo:bar\": \"baz\" }, \"/etc2\");\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Database Driver for Unstorage using db0\nDESCRIPTION: This snippet demonstrates how to set up the SQL database driver for Unstorage using db0. It shows the process of creating a database connection, configuring the driver, and initializing the storage instance.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/database.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDatabase } from \"db0\";\nimport { createStorage } from \"unstorage\";\nimport dbDriver from \"unstorage/drivers/db0\";\nimport sqlite from \"db0/connectors/better-sqlite3\";\n\n// Learn more: https://db0.unjs.io\nconst database = createDatabase(\n  sqlite({\n    /* db0 connector options */\n  })\n);\n\nconst storage = createStorage({\n  driver: dbDriver({\n    database,\n    table: \"custom_table_name\", // Default is \"unstorage\"\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloudflare KV Binding Driver with Unstorage\nDESCRIPTION: This snippet demonstrates various ways to initialize the unstorage library with the cloudflare-kv-binding driver. This approach works directly within Cloudflare Workers environments for optimal performance.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/cloudflare.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport cloudflareKVBindingDriver from \"unstorage/drivers/cloudflare-kv-binding\";\n\n// Directly setting binding\nconst storage = createStorage({\n  driver: cloudflareKVBindingDriver({ binding: \"STORAGE\" }),\n});\n\n// Using binding name to be picked from globalThis\nconst storage = createStorage({\n  driver: cloudflareKVBindingDriver({ binding: globalThis.STORAGE }),\n});\n\n// Using from Durable Objects and Workers using Modules Syntax\nconst storage = createStorage({\n  driver: cloudflareKVBindingDriver({ binding: this.env.STORAGE }),\n});\n\n// Using outside of Cloudflare Workers (like Node.js)\n// Use cloudflare-kv-http\n```\n\n----------------------------------------\n\nTITLE: Initializing Unstorage with Memory Driver in JavaScript\nDESCRIPTION: This code demonstrates how to explicitly create an unstorage instance with the memory driver. The memory driver keeps data in memory using JavaScript's Map object and is the default storage driver for unstorage, so this explicit configuration is usually unnecessary.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/memory.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport memoryDriver from \"unstorage/drivers/memory\";\n\nconst storage = createStorage({\n  driver: memoryDriver(),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Lite Filesystem Driver in Unstorage for Node.js\nDESCRIPTION: Creates a storage instance using the lite filesystem driver that relies only on Node.js API without external dependencies. Configures the driver with a base directory for storage operations.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/fs.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport fsLiteDriver from \"unstorage/drivers/fs-lite\";\n\nconst storage = createStorage({\n  driver: fsLiteDriver({ base: \"./tmp\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Unstorage with Redis Cluster\nDESCRIPTION: Example showing how to create an Unstorage instance with a Redis driver connected to a Redis cluster. This configuration uses hashtags for preventing CROSSSLOT errors and includes cluster nodes and authentication options.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst storage = createStorage({\n  driver: redisDriver({\n    base: \"{unstorage}\",\n    cluster: [\n      {\n        port: 6380,\n        host: \"HOSTNAME\",\n      },\n    ],\n    clusterOptions: {\n      redisOptions: {\n        tls: { servername: \"HOSTNAME\" },\n        password: \"REDIS_PASSWORD\",\n      },\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Blob Storage Driver for Unstorage\nDESCRIPTION: Creates a storage instance using Azure Blob Storage. Each key-value entry is stored in a separate blob with the key as the blob name and the value as blob content. Requires '@azure/storage-blob' and '@azure/identity' packages.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/azure.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport azureStorageBlobDriver from \"unstorage/drivers/azure-storage-blob\";\n\nconst storage = createStorage({\n  driver: azureStorageBlobDriver({\n    accountName: \"myazurestorageaccount\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing localStorage/sessionStorage Driver with Unstorage\nDESCRIPTION: Creates a storage instance using the localStorage driver with a base prefix to avoid key collisions. The driver supports options for specifying the base prefix, custom storage object, window key selection, and window reference.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/browser.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport localStorageDriver from \"unstorage/drivers/localstorage\";\n\nconst storage = createStorage({\n  driver: localStorageDriver({ base: \"app:\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing IndexedDB Driver with Unstorage\nDESCRIPTION: Creates a storage instance using the IndexedDB driver with a base prefix. This implementation requires the external dependency 'idb-keyval'. The driver supports configuration options for the base prefix, database name, and store name.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/browser.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport indexedDbDriver from \"unstorage/drivers/indexedb\";\n\nconst storage = createStorage({\n  driver: indexedDbDriver({ base: \"app:\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Upstash Redis Driver with Unstorage\nDESCRIPTION: This code demonstrates how to create a storage instance using the Upstash Redis driver. It shows the basic configuration including the base prefix for keys and optional URL and token parameters which can also be provided via environment variables.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/upstash.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport upstashDriver from \"unstorage/drivers/upstash\";\n\nconst storage = createStorage({\n  driver: upstashDriver({\n    base: \"unstorage\",\n    // url: \"\", // or set UPSTASH_REDIS_REST_URL env\n    // token: \"\", // or set UPSTASH_REDIS_REST_TOKEN env\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloudflare KV HTTP Driver with Unstorage\nDESCRIPTION: This snippet demonstrates various authentication methods for initializing the unstorage library with the cloudflare-kv-http driver. This approach works universally including outside of Cloudflare Workers environments.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/cloudflare.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport cloudflareKVHTTPDriver from \"unstorage/drivers/cloudflare-kv-http\";\n\n// Using `apiToken`\nconst storage = createStorage({\n  driver: cloudflareKVHTTPDriver({\n    accountId: \"my-account-id\",\n    namespaceId: \"my-kv-namespace-id\",\n    apiToken: \"supersecret-api-token\",\n  }),\n});\n\n// Using `email` and `apiKey`\nconst storage = createStorage({\n  driver: cloudflareKVHTTPDriver({\n    accountId: \"my-account-id\",\n    namespaceId: \"my-kv-namespace-id\",\n    email: \"me@example.com\",\n    apiKey: \"my-api-key\",\n  }),\n});\n\n// Using `userServiceKey`\nconst storage = createStorage({\n  driver: cloudflareKVHTTPDriver({\n    accountId: \"my-account-id\",\n    namespaceId: \"my-kv-namespace-id\",\n    userServiceKey: \"v1.0-my-service-key\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloudflare R2 Binding Driver with Unstorage\nDESCRIPTION: This snippet demonstrates different ways to initialize the unstorage library with the experimental cloudflare-r2-binding driver. This approach only works within Cloudflare Workers environments for accessing R2 buckets.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/cloudflare.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport cloudflareR2BindingDriver from \"unstorage/drivers/cloudflare-r2-binding\";\n\n// Using binding name to be picked from globalThis\nconst storage = createStorage({\n  driver: cloudflareR2BindingDriver({ binding: \"BUCKET\" }),\n});\n\n// Directly setting binding\nconst storage = createStorage({\n  driver: cloudflareR2BindingDriver({ binding: globalThis.BUCKET }),\n});\n\n// Using from Durable Objects and Workers using Modules Syntax\nconst storage = createStorage({\n  driver: cloudflareR2BindingDriver({ binding: this.env.BUCKET }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Unstorage with Capacitor Preferences Driver in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an Unstorage instance using the Capacitor Preferences driver. It imports the necessary dependencies, creates a storage instance, and configures it with the capacitor-preferences driver with a base prefix to avoid key collisions.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/capacitor-preferences.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport capacitorPreferences from \"unstorage/drivers/capacitor-preferences\";\n\nconst storage = createStorage({\n  driver: capacitorPreferences({\n    base: \"test\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LRU Cache Storage with Unstorage in JavaScript\nDESCRIPTION: Demonstrates how to create a storage instance using the LRU Cache driver from unstorage. The driver maintains cached data in memory using LRU Cache with a default maximum of 1000 items and includes automatic size calculation based on key and value buffer sizes.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/lru-cache.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport lruCacheDriver from \"unstorage/drivers/lru-cache\";\n\nconst storage = createStorage({\n  driver: lruCacheDriver(),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Netlify Blobs Storage with Basic Configuration\nDESCRIPTION: Creates a new storage instance using the Netlify Blobs driver with a named store configuration.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/netlify.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport netlifyBlobsDriver from \"unstorage/drivers/netlify-blobs\";\n\nconst storage = createStorage({\n  driver: netlifyBlobsDriver({\n    name: \"blob-store-name\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deploy-Scoped Netlify Blobs Storage\nDESCRIPTION: Creates a deploy-scoped storage instance using the Netlify Blobs driver, which limits access to the current deploy and supports deploy previews and rollbacks.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/netlify.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport netlifyBlobsDriver from \"unstorage/drivers/netlify-blobs\";\n\nconst storage = createStorage({\n  driver: netlifyBlobsDriver({\n    deployScoped: true,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Driver for Unstorage in JavaScript\nDESCRIPTION: Example of creating a storage instance using the HTTP driver with a base URL. The driver connects to a remote HTTP endpoint for data storage and retrieval operations.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/http.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport httpDriver from \"unstorage/drivers/http\";\n\nconst storage = createStorage({\n  driver: httpDriver({ base: \"http://cdn.com\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring UploadThing Driver with Unstorage in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Unstorage storage system with the UploadThing driver. It shows the basic configuration including an optional token parameter that defaults to the UPLOADTHING_SECRET environment variable if not provided.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/uploadthing.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport uploadthingDriver from \"unstorage/drivers/uploadthing\";\n\nconst storage = createStorage({\n  driver: uploadthingDriver({\n    // token: \"<your token>\", // UPLOADTHING_SECRET environment variable will be used if not provided.\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure App Configuration Driver for Unstorage\nDESCRIPTION: Creates a storage instance using the Azure App Configuration driver. It stores data in Azure's key-value store with optional label and prefix parameters to organize data across environments and applications. Requires '@azure/app-configuration' and '@azure/identity' packages.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/azure.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport azureAppConfiguration from \"unstorage/drivers/azure-app-configuration\";\n\nconst storage = createStorage({\n  driver: azureAppConfiguration({\n    appConfigName: \"unstoragetest\",\n    label: \"dev\",\n    prefix: \"app01\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Cosmos DB Driver for Unstorage\nDESCRIPTION: Creates a storage instance using Azure Cosmos DB NoSQL API for document storage. It uses the 'id' field as the key and adds 'value' and 'modified' fields to each document. Requires '@azure/cosmos' and '@azure/identity' packages.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/azure.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport azureCosmos from \"unstorage/drivers/azure-cosmos\";\n\nconst storage = createStorage({\n  driver: azureCosmos({\n    endpoint: \"ENDPOINT\",\n    accountKey: \"ACCOUNT_KEY\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Key Vault Driver for Unstorage\nDESCRIPTION: Creates a storage instance using Azure Key Vault for secret storage. It uses the key as the secret ID and value as secret content. Note that keys are encoded to meet Key Vault naming requirements. Requires '@azure/keyvault-secrets' and '@azure/identity' packages.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/azure.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport azureKeyVault from \"unstorage/drivers/azure-key-vault\";\n\nconst storage = createStorage({\n  driver: azureKeyVault({\n    vaultName: \"testunstoragevault\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Storage Table Driver with Unstorage\nDESCRIPTION: Example of how to create an Unstorage instance using the Azure Storage Table driver. This snippet demonstrates basic setup with an account name. The driver stores key-value data in Azure Table Storage using a consistent partition key.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/azure.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport azureStorageTableDriver from \"unstorage/drivers/azure-storage-table\";\n\nconst storage = createStorage({\n  driver: azureStorageTableDriver({\n    accountName: \"myazurestorageaccount\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Generic Storage Implementation\nDESCRIPTION: Demonstrates TypeScript generic type usage with storage operations\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/1.guide/1.index.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst storage = createStorage<string>();\n\nawait storage.getItem(\"k\"); // => <string>\n\nstorage.setItem(\"k\", \"val\"); // Check ok\nstorage.setItem(\"k\", 123); // TS error\n```\n\n----------------------------------------\n\nTITLE: TypeScript Prefix Storage Implementation\nDESCRIPTION: Shows how to create typed sub-storages using prefixStorage\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/1.guide/1.index.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst storage = createStorage();\n\nconst htmlStorage = prefixStorage<string>(storage, \"assets:html\");\n\nawait htmlStorage.getItem(\"foo.html\"); // => <string>\n\ntype Post = {\n  title: string;\n  content: string;\n};\n\nconst postStorage = prefixStorage<Post>(storage, \"assets:posts\");\n\nawait postStorage.getItem(\"foo.json\"); // => <Post>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Storage Definition with Namespace\nDESCRIPTION: Example of using TypeScript with defined storage schema and type checking\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/1.guide/1.index.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype StorageDefinition = {\n  items: {\n    foo: string;\n    baz: number;\n  };\n};\n\nconst storage = createStorage<StorageDefinition>();\nawait storage.has(\"foo\"); // Ts will prompt you that there are two optional keys: \"foo\" or \"baz\"\nawait storage.getItem(\"baz\"); // => string\nawait storage.setItem(\"foo\", 12); // TS error: <number> is not compatible with <string>\nawait storage.setItem(\"foo\", \"val\"); // Check ok\nawait storage.remove(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Unstorage with Deno KV Driver in Deno Environment\nDESCRIPTION: Creates a storage instance using the Deno KV driver. Optional configuration includes specifying a storage path (with support for in-memory storage) and a base prefix for all keys. This code requires Deno deploy or Deno runtime with the --unstable-kv flag.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/deno.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport denoKVdriver from \"unstorage/drivers/deno-kv\";\n\nconst storage = createStorage({\n  driver: denoKVdriver({\n    // path: \":memory:\",\n    // base: \"\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Unstorage with Deno KV Driver in Node.js Environment\nDESCRIPTION: Creates a storage instance using the Deno KV Node.js driver. This implementation utilizes the @deno/kv package which provides Node.js compatibility with Deno KV. Supports remote Deno Deploy databases, local SQLite-backed databases, and in-memory instances for testing.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/deno.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport denoKVNodedriver from \"unstorage/drivers/deno-kv-node\";\n\nconst storage = createStorage({\n  driver: denoKVNodedriver({\n    // path: \":memory:\",\n    // base: \"\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Vercel KV Storage with Unstorage in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a storage instance using the Vercel KV driver in Unstorage. It includes configuration options for the REST API URL, token, base prefix, environment variables, and TTL.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/vercel.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport vercelKVDriver from \"unstorage/drivers/vercel-kv\";\n\nconst storage = createStorage({\n  driver: vercelKVDriver({\n    // url: \"https://<your-project-slug>.kv.vercel-storage.com\", // KV_REST_API_URL\n    // token: \"<your secret token>\", // KV_REST_API_TOKEN\n    // base: \"test\",\n    // env: \"KV\",\n    // ttl: 60, // in seconds\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Vercel Blob Storage with Unstorage in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a storage instance using the Vercel Blob driver in Unstorage. It includes configuration options for public access, token, base prefix, and environment variable prefix.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/vercel.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport vercelBlobDriver from \"unstorage/drivers/vercel-blob\";\n\nconst storage = createStorage({\n  driver: vercelBlobDriver({\n    access: \"public\", // Required! Beware that stored data is publicly accessible.\n    // token: \"<your secret token>\", // or set BLOB_READ_WRITE_TOKEN\n    // base: \"unstorage\",\n    // envPrefix: \"BLOB\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing GitHub Driver in Unstorage (JavaScript)\nDESCRIPTION: Example of how to create a storage instance using the GitHub driver to access files from a remote GitHub repository. This setup maps files from the '/docs' directory in the 'nuxt/nuxt' repository's main branch.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/github.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport githubDriver from \"unstorage/drivers/github\";\n\nconst storage = createStorage({\n  driver: githubDriver({\n    repo: \"nuxt/nuxt\",\n    branch: \"main\",\n    dir: \"/docs\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PlanetScale Driver for Unstorage\nDESCRIPTION: JavaScript code to initialize and configure the Unstorage PlanetScale driver. This includes setting up the database connection URL and optional parameters like table name and boost cache settings.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/planetscale.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport planetscaleDriver from \"unstorage/drivers/planetscale\";\n\nconst storage = createStorage({\n  driver: planetscaleDriver({\n    // This should certainly not be inlined in your code but loaded via runtime config\n    // or environment variables depending on your framework/project.\n    url: \"mysql://xxxxxxxxx:************@xxxxxxxxxx.us-east-3.psdb.cloud/my-database?sslaccept=strict\",\n    // table: 'storage'\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Unstorage HTTP Client in TypeScript\nDESCRIPTION: This snippet shows how to create a client to connect to an Unstorage HTTP server using the HTTP driver. It demonstrates initializing the client with a server endpoint and retrieving available keys.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/1.guide/3.http-server.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport httpDriver from \"unstorage/drivers/http\";\n\nconst client = createStorage({\n  driver: httpDriver({\n    base: \"SERVER_ENDPOINT\",\n  }),\n});\nconst keys = await client.getKeys();\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table Schema for PlanetScale\nDESCRIPTION: SQL statement to create the necessary table structure for storing key-value data in PlanetScale. The table includes columns for ID, value content, and timestamps for creation and updates.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/planetscale.md#2025-04-12_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table <storage> (\n id varchar(255) not null primary key,\n value longtext,\n created_at timestamp default current_timestamp,\n updated_at timestamp default current_timestamp on update current_timestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Null Driver with Unstorage in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a storage instance using the null driver from Unstorage. The null driver discards all data written to it and always returns null, similar to /dev/null.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/null.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"unstorage\";\nimport nullDriver from \"unstorage/drivers/null\";\n\nconst storage = createStorage({\n  driver: nullDriver(),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Unstorage with package managers\nDESCRIPTION: Commands for installing the unstorage package using different package managers (yarn, npm, and pnpm).\nSOURCE: https://github.com/unjs/unstorage/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# yarn\nyarn add unstorage\n\n# npm\nnpm install unstorage\n\n# pnpm\npnpm add unstorage\n```\n\n----------------------------------------\n\nTITLE: Initializing Netlify Blobs in Edge Functions\nDESCRIPTION: Example of using Netlify Blobs storage driver in Netlify edge functions using URL imports.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/netlify.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStorage } from \"https://esm.sh/unstorage\";\nimport netlifyBlobsDriver from \"https://esm.sh/unstorage/drivers/netlify-blobs\";\n\nexport default async function handler(request: Request) {\n\n  const storage = createStorage({\n    driver: netlifyBlobsDriver({\n      name: \"blob-store-name\",\n    }),\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PlanetScale Database Dependency\nDESCRIPTION: Add the PlanetScale database package as a dependency in your project's package.json file. This package is required to connect to PlanetScale's MySQL-compatible database service.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/planetscale.md#2025-04-12_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@planetscale/database\": \"^1.5.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @vercel/kv Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the @vercel/kv dependency to your project's package.json file, which is required for using the Vercel KV driver.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/vercel.md#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@vercel/kv\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Configuration for Netlify Blobs\nDESCRIPTION: Required package.json configuration showing the dependency on @netlify/blobs package.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/netlify.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@netlify/blobs\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the nightly release channel with direct dependency\nDESCRIPTION: JSON configuration example showing how to use the nightly release channel of unstorage as a direct dependency in a project.\nSOURCE: https://github.com/unjs/unstorage/blob/main/README.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"unstorage\": \"npm:unstorage-nightly\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the nightly release channel with resolutions\nDESCRIPTION: JSON configuration example showing how to use the nightly release channel of unstorage via the resolutions field when using it through another tool.\nSOURCE: https://github.com/unjs/unstorage/blob/main/README.md#2025-04-12_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"unstorage\": \"npm:unstorage-nightly\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Netlify Blobs Beta Stores\nDESCRIPTION: CLI command for migrating stores from Netlify Blobs beta to the current version.\nSOURCE: https://github.com/unjs/unstorage/blob/main/docs/2.drivers/netlify.md#2025-04-12_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnetlify recipes blobs-migrate <name of store>\n```"
  }
]