[
  {
    "owner": "deepgram",
    "repo": "deepgram-python-sdk",
    "content": "TITLE: Pre-Recorded Audio Transcription with Deepgram Python SDK\nDESCRIPTION: Sample code demonstrating how to transcribe pre-recorded audio using the Deepgram Python SDK. This example shows how to create a client and transcribe audio from a URL.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAUDIO_URL = {\n    \"url\": \"https://static.deepgram.com/examples/Bueller-Life-moves-pretty-fast.wav\"\n}\n\n## STEP 1 Create a Deepgram client using the API key from environment variables\ndeepgram: DeepgramClient = DeepgramClient(\"\", ClientOptionsFromEnv())\n\n## STEP 2 Call the transcribe_url method on the prerecorded class\noptions: PrerecordedOptions = PrerecordedOptions(\n    model=\"nova-3\",\n    smart_format=True,\n)\nresponse = deepgram.listen.rest.v(\"1\").transcribe_url(AUDIO_URL, options)\nprint(f\"response: {response}\\n\\n\")\n```\n\n----------------------------------------\n\nTITLE: Live Audio Transcription with Deepgram Python SDK\nDESCRIPTION: Sample code demonstrating how to transcribe live audio using the Deepgram Python SDK. This example shows how to set up event handlers for WebSocket connections and process real-time audio from a microphone.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndeepgram: DeepgramClient = DeepgramClient()\n\ndg_connection = deepgram.listen.websocket.v(\"1\")\n\ndef on_open(self, open, **kwargs):\n    print(f\"\\n\\n{open}\\n\\n\")\n\ndef on_message(self, result, **kwargs):\n    sentence = result.channel.alternatives[0].transcript\n    if len(sentence) == 0:\n        return\n    print(f\"speaker: {sentence}\")\n\ndef on_metadata(self, metadata, **kwargs):\n    print(f\"\\n\\n{metadata}\\n\\n\")\n\ndef on_speech_started(self, speech_started, **kwargs):\n    print(f\"\\n\\n{speech_started}\\n\\n\")\n\ndef on_utterance_end(self, utterance_end, **kwargs):\n    print(f\"\\n\\n{utterance_end}\\n\\n\")\n\ndef on_error(self, error, **kwargs):\n    print(f\"\\n\\n{error}\\n\\n\")\n\ndef on_close(self, close, **kwargs):\n    print(f\"\\n\\n{close}\\n\\n\")\n\ndg_connection.on(LiveTranscriptionEvents.Open, on_open)\ndg_connection.on(LiveTranscriptionEvents.Transcript, on_message)\ndg_connection.on(LiveTranscriptionEvents.Metadata, on_metadata)\ndg_connection.on(LiveTranscriptionEvents.SpeechStarted, on_speech_started)\ndg_connection.on(LiveTranscriptionEvents.UtteranceEnd, on_utterance_end)\ndg_connection.on(LiveTranscriptionEvents.Error, on_error)\ndg_connection.on(LiveTranscriptionEvents.Close, on_close)\n\noptions: LiveOptions = LiveOptions(\n    model=\"nova-3\",\n    punctuate=True,\n    language=\"en-US\",\n    encoding=\"linear16\",\n    channels=1,\n    sample_rate=16000,\n    ## To get UtteranceEnd, the following must be set:\n    interim_results=True,\n    utterance_end_ms=\"1000\",\n    vad_events=True,\n)\ndg_connection.start(options)\n\n## create microphone\nmicrophone = Microphone(dg_connection.send)\n\n## start microphone\nmicrophone.start()\n\n## wait until finished\ninput(\"Press Enter to stop recording...\\n\\n\")\n\n## Wait for the microphone to close\nmicrophone.finish()\n\n## Indicate that we've finished\ndg_connection.finish()\n\nprint(\"Finished\")\n```\n\n----------------------------------------\n\nTITLE: Installing Deepgram Python SDK\nDESCRIPTION: Commands for installing the Deepgram Python SDK using pip, with guidance on version pinning for stability.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install deepgram-sdk\n```\n\nLANGUAGE: sh\nCODE:\n```\ndeepgram-sdk==2.*\n```\n\nLANGUAGE: sh\nCODE:\n```\npip install deepgram-sdk==2.*\n```\n\nLANGUAGE: sh\nCODE:\n```\ndeepgram-sdk==2.12.0\n```\n\nLANGUAGE: sh\nCODE:\n```\npip install deepgram-sdk==2.12.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Deepgram Client with Default Logging in Python\nDESCRIPTION: This snippet demonstrates how to initialize the Deepgram client with default logging settings. It creates a DeepgramClient instance without specifying any additional options.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndeepgram: DeepgramClient = DeepgramClient()\n```\n\n----------------------------------------\n\nTITLE: Configuring Deepgram Client with Debug Logging in Python\nDESCRIPTION: This code shows how to initialize the Deepgram client with debug-level logging. It creates a DeepgramClientOptions instance with verbose logging set to DEBUG level, then uses it to initialize the DeepgramClient.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfig: DeepgramClientOptions = DeepgramClientOptions(\n    verbose=logging.DEBUG,\n)\ndeepgram: DeepgramClient = DeepgramClient(\"\", config)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Deepgram Python SDK Examples\nDESCRIPTION: Requirements file that specifies the dependencies needed to run examples from the Deepgram Python SDK. It includes general utilities like python-dotenv for environment variable management, and audio-related libraries that support streaming functionality such as pyaudio, playsound3, sounddevice, and numpy.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/examples/requirements-examples.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# pip install -r requirements-examples.txt\n\n# general\npython-dotenv\n\n# streaming libs\npyaudio\nplaysound3==2.2.1\nsounddevice==0.4.7\nnumpy==2.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Deepgram SDK\nDESCRIPTION: A requirements.txt file listing all the dependencies needed for the Deepgram Python SDK. It includes websockets, httpx, dataclasses-json, and other standard libraries, as well as async functionality packages like aiohttp and aiofiles with version constraints.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n# pip install -r requirements.txt\n\n# standard libs\nwebsockets>=12.0\nhttpx==0.*\ndataclasses-json==0.*\ndataclasses==0.*\ntyping_extensions==4.*\naenum==3.*\ndeprecation==2.*\n\n# Async functionality, likely to be already installed\naiohttp==3.*\naiofiles==23.*\n```\n\n----------------------------------------\n\nTITLE: Installing Example Dependencies with Pip\nDESCRIPTION: Command to install required dependencies for running example projects from requirements-examples.txt file\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements-examples.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Deepgram SDK Dependencies in Bash\nDESCRIPTION: This bash script uninstalls any previous installation of the Deepgram SDK, installs the dependencies from requirements.txt, and then installs the SDK locally for development purposes.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall deepgram-sdk\npip install -r requirements.txt\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Setting Deepgram API Key Environment Variable in Bash\nDESCRIPTION: Sets the DEEPGRAM_API_KEY environment variable which is required for authentication with the Deepgram API. This variable should be set to your unique API key which can be obtained from the Deepgram Console.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/examples/speech-to-text/websocket/async_microphone/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DEEPGRAM_API_KEY=YOUR-APP-KEY-HERE\n```\n\n----------------------------------------\n\nTITLE: Setting Deepgram API Key in Bash\nDESCRIPTION: This command sets the DEEPGRAM_API_KEY environment variable, which is required for authenticating with the Deepgram API. Replace 'YOUR-APP-KEY-HERE' with your actual Deepgram API key obtained from the Deepgram Console.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/examples/speech-to-text/websocket/microphone/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DEEPGRAM_API_KEY=YOUR-APP-KEY-HERE\n```\n\n----------------------------------------\n\nTITLE: Setting Deepgram API Key Environment Variable\nDESCRIPTION: Sets up the DEEPGRAM_API_KEY environment variable required for SDK authentication. This key can be obtained from the Deepgram Console and needs to be configured before using the SDK.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/examples/advanced/websocket/microphone_inheritance/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DEEPGRAM_API_KEY=YOUR-APP-KEY-HERE\n```\n\n----------------------------------------\n\nTITLE: Setting Deepgram API Key Environment Variable\nDESCRIPTION: Configures the required Deepgram API key as an environment variable for authentication.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/examples/speech-to-text/rest/callback/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport DEEPGRAM_API_KEY=YOUR-APP-KEY-HERE\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary API Key and Running Python Script\nDESCRIPTION: Command to set a temporary Deepgram API key environment variable and execute a Python script in one line\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/examples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDEEPGRAM_API_KEY=\"YOUR_DEEPGRAM_API_KEY\" python main.py\n```\n\n----------------------------------------\n\nTITLE: Setting Deepgram API Key in Bash Profile\nDESCRIPTION: Command to set the Deepgram API key as an environment variable in .bash_profile for persistent storage\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/examples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DEEPGRAM_API_KEY = \"YOUR_DEEPGRAM_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Running Example Python Script\nDESCRIPTION: Command to execute the main Python script in an example project directory\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/examples/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Deepgram SDK\nDESCRIPTION: Lists required Python packages with specific version constraints for both production and development environments. Includes audio processing libraries (soundfile, numpy), WebSocket functionality, code quality tools (black, pylint, mypy), type stubs, and testing frameworks (pytest).\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# pip install -r requirements.txt\n\n# additional requirements for development\nsoundfile==0.12.1\nnumpy==2.0.1\nwebsocket-server==0.6.4\n\n# lint, static, etc\nblack==24.*\npylint==3.*\nmypy==1.*\n\n# static check types\ntypes-pyaudio\ntypes-aiofiles\n\n# Testing\npytest\npytest-asyncio\nfuzzywuzzy\npytest-cov\n```\n\n----------------------------------------\n\nTITLE: Installing Example Dependencies for Deepgram Python SDK\nDESCRIPTION: Command to install the required dependencies for running the Deepgram SDK examples, which should be executed before running any of the example code.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -r examples/requirements-examples.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL in Python\nDESCRIPTION: Sets the callback URL endpoint where Deepgram will send transcription results. This must be replaced with a public-facing endpoint URL.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/examples/speech-to-text/rest/callback/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCALL_BACK_URL = (\n    \"https://127.0.0.1:8000\"  # TODO: MUST REPLACE WITH YOUR OWN CALLBACK ENDPOINT\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Deepgram SDK Development Dependencies in Bash\nDESCRIPTION: This bash command installs the development dependencies required for running and contributing to the daily and unit tests of the Deepgram SDK.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Running Deepgram SDK Daily Tests in Bash\nDESCRIPTION: This bash command runs the daily tests for the Deepgram SDK. These tests check against the actual API endpoint and require a DEEPGRAM_API_KEY environment variable to be set.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake daily-test\n```\n\n----------------------------------------\n\nTITLE: Running Deepgram SDK Unit Tests in Bash\nDESCRIPTION: This bash command runs the unit tests for the Deepgram SDK. These tests use mock endpoints and saved responses, simulating API interactions without actually reaching out to the server.\nSOURCE: https://github.com/deepgram/deepgram-python-sdk/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake unit-test\n```"
  }
]