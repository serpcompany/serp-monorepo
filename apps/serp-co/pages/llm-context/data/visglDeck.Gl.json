[
  {
    "owner": "visgl",
    "repo": "deck.gl",
    "content": "TITLE: Initializing deck.gl ScatterplotLayer with Data Filter Props in JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a ScatterplotLayer in deck.gl with new data filtering props 'getFilterValue' and 'filterRange'. It enables filtering the displayed data based on a dynamic time window, avoiding the need to regenerate layer attributes each animation frame. The 'getFilterValue' prop is a function that extracts a filter value (e.g., time) from each data object, and 'filterRange' defines the inclusive range for visibility.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/data-filter-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ScatterplotLayer({\n    ...\n    getFilterValue: d => d.time,\n    filterRange: [currentTime, currentTime + 1000] // currentTime is a number updated per animation frame\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering ScatterplotLayer with GoogleMapsOverlay in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize and configure a Google Map using the Google Maps JavaScript API and apply a deck.gl ScatterplotLayer overlay using the GoogleMapsOverlay class in TypeScript. Dependencies include @googlemaps/js-api-loader, @deck.gl/google-maps, and @deck.gl/layers. You must provide a valid Google Maps API key and mapId. The code creates a map, constructs a deck.gl overlay with sample data, and adds it to the map via overlay.setMap(map). The overlay expects layer definitions, and the main output is an interactive visualization overlaid on Google Maps.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/google-maps/google-maps-overlay.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Loader} from '@googlemaps/js-api-loader';\nimport {GoogleMapsOverlay} from '@deck.gl/google-maps';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst loader = new Loader({apiKey: '<google_maps_api_key>'});\nconst googlemaps = await loader.importLibrary('maps');\n\nconst map = new googlemaps.Map(document.getElementById('map'), {\n  center: {lat: 51.47, lng: 0.45},\n  zoom: 11,\n  mapId: '<google_map_id>'\n});\n\nconst overlay = new GoogleMapsOverlay({\n  layers: [\n    new ScatterplotLayer({\n      id: 'deckgl-circle',\n      data: [\n        {position: [0.45, 51.47]}\n      ],\n      getPosition: d => d.position,\n      getFillColor: [255, 0, 0, 100],\n      getRadius: 1000\n    })\n  ]\n});\n\noverlay.setMap(map);\n```\n\n----------------------------------------\n\nTITLE: Rendering GeoJsonLayer with DeckGL in a React Application (TypeScript + JSX)\nDESCRIPTION: This React component demonstrates integrating GeoJsonLayer with DeckGL in a functional React application written in TypeScript. It sets up strongly-typed GeoJSON property access, configures visual and interactive options, and provides live tooltips on feature hover. Inputs are the remote GeoJSON URL, type-safe accessors, and initial map view state. Dependencies include 'react', '@deck.gl/react', '@deck.gl/layers', and 'geojson' types. The snippet outputs a fully interactive DeckGL map embedded in the React component tree. The approach allows tight integration with React lifecycles and composition.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_2\n\nLANGUAGE: React\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport type {Feature, Geometry} from 'geojson';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype PropertiesType = {\n  name: string;\n  color: string;\n};\n\nfunction App() {\n  const layer = new GeoJsonLayer<PropertiesType>({\n    id: 'GeoJsonLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart.geo.json',\n\n    stroked: false,\n    filled: true,\n    pointType: 'circle+text',\n    pickable: true,\n\n    getFillColor: [160, 160, 180, 200],\n    getLineColor: (f: Feature<Geometry, PropertiesType>) => {\n      const hex = f.properties.color;\n      // convert to RGB\n      return hex ? hex.match(/[0-9a-f]{2}/g).map(x => parseInt(x, 16)) : [0, 0, 0];\n    },\n    getText: (f: Feature<Geometry, PropertiesType>) => f.properties.name,\n    getLineWidth: 20,\n    getPointRadius: 4,\n    getTextSize: 12\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<Feature<Geometry, PropertiesType>>) => object && object.properties.name}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BoundaryTableSourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `BoundaryTableSourceOptions` type, used by the `boundaryTableSource` function.  This type contains `tilesetTableName`, `columns`, and `propertiesTableName` options. It is used to fetch boundary data, specifying the names of the tables for the tileset and associated properties.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\ntype BoundaryTableSourceOptions = {\n  tilesetTableName: string;\n  columns?: string[];\n  propertiesTableName: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with Multiple Views (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing a deck.gl instance with multiple views. It creates two `MapView` instances and explicitly types the `Deck`. It synchronizes their view states.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, MapView} from '@deck.gl/core';\n\nconst deckInstance = new Deck<[MapView, MapView]>({  \n  views: [\n    new MapView({id: 'left', x: 0, width: '50%', controller: true}),\n    new MapView({id: 'right', x: '50%', width: '50%', controller: true})\n  ],\n  viewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  onViewStateChange: ({viewState}) => {\n    deckInstance.setProps({viewState});\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing GeoJSON and BinaryPointFeature (TypeScript)\nDESCRIPTION: This code snippet provides a comparison between a GeoJSON structure and its binary representation within deck.gl. It showcases the structure of a `FeatureCollection` (GeoJSON) with a single `Point` feature. It then depicts the equivalent `BinaryPointFeature` structure, which deck.gl uses for optimized rendering. The output illustrates the transformation and optimization process, including data type conversions and the storage of properties and numericProps.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {FeatureCollection} from 'geojson';\nimport type {BinaryPointFeature} from '@loaders.gl/schema';\n\nconst geojson: FeatureCollection = {\n  type: 'FeatureCollection',\n  features: [\n    {\n      id: 123,\n      type: 'Feature',\n      properties: {name: 'London', population: 10000000},\n      geometry: {coordinates: [1.23, 4.56], type: 'Point'}\n    }\n  ]\n};\n\nconst binary: BinaryPointFeature = {\n  shape: 'binary-feature-collection',\n  points: {\n    positions: {value: Float32Array([1,23, 4.56]), size: 2},\n    properties: [{name: 'London'}],\n    numericProps: {\n      population: {value: Float32Array([10000000], size: 1}\n    },\n    featureIds: {value: Uint16Array([0]), size: 1},\n    globalFeatureIds: {value: Uint16Array([0]), size: 1},\n    fields: [{id: 123}]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using JSX Syntax for deck.gl Layers, Views, and Widgets in React (JavaScript/JSX)\nDESCRIPTION: Shows how to use deck.gl components and layers declaratively with JSX syntax in a React component. This approach nests LineLayer, MapView, Map, FirstPersonView, and ZoomWidget as children to the DeckGL component, enabling a React-like style of coding layers and views. The snippet requires React, @deck.gl/react, @deck.gl/core, @deck.gl/layers, react-map-gl, and @deck.gl/react for widgets. Inputs include initial view state and data paths; outputs are rendered deck.gl layers alongside React Map and interactive widgets. Unlike ES6 layer instance approach, this method emphasizes JSX readability without performance benefits.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-with-react.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapViewState} from '@deck.gl/core';\nimport {LineLayer} from '@deck.gl/layers';\nimport {ZoomWidget} from '@deck.gl/react';\nimport {Map} from 'react-map-gl';\n\nconst INITIAL_VIEW_STATE: MapViewState = {\n  longitude: -122.41669,\n  latitude: 37.7853,\n  zoom: 13\n};\n\nfunction App() {\n  return (\n    <DeckGL\n      initialViewState={INITIAL_VIEW_STATE}\n      controller\n    >\n      <LineLayer\n        id=\"line-layer\"\n        data=\"/path/to/data.json\"\n        getSourcePosition={d => d.from}\n        getTargetPosition={d => d.to} />\n\n      <MapView id=\"map\" width=\"50%\" controller >\n        <Map mapStyle=\"mapbox://styles/mapbox/light-v9\" />\n      </MapView>\n\n      <FirstPersonView width=\"50%\" x=\"50%\" fovy={50} />\n\n      <ZoomWidget/>\n    </DeckGL>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering HeatmapTileLayer in deck.gl React App (TypeScript/TSX)\nDESCRIPTION: Demonstrates importing DeckGL and HeatmapTileLayer from the @deck.gl packages to render a heatmap from a Quadbin-based data source in a React application. Dependencies include @deck.gl/react and @deck.gl/carto. The App component initializes data by calling quadbinTableSource with authentication and table details, creates a HeatmapTileLayer with custom settings (such as radiusPixels, intensity, colorDomain), and renders it using DeckGL. Expected input is a viewState prop and valid CARTO API credentials; outputs a deck.gl visualization. Requires React 16+, deck.gl 9+, and proper authentication. Large data or high radiusPixels values may affect performance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/heatmap-tile-layer.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {HeatmapTileLayer, quadbinTableSource} from '@deck.gl/carto';\n\nfunction App({viewState}) {\n  const data = quadbinTableSource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    tableName: 'carto-demo-data.demo_tables.quadbin'\n  });\n\n  const layer = new HeatmapTileLayer({\n    data,\n    getWeight: d => d.properties.count,\n    // Customize appearance\n    radiusPixels: 30,\n    intensity: 1.5,\n    colorDomain: [0, 2],\n    // Optional: Track density changes\n    onMaxDensityChange: (density) => console.log('Max density:', density)\n  })\n\n  return <DeckGL viewState={viewState} layers={[layer]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Deck.gl GreatCircleLayer in React with TypeScript\nDESCRIPTION: Provides a React functional component example using Deck.gl's DeckGL React wrapper to render great circle arcs between airport pairs. The component imports React, DeckGL, GreatCircleLayer, and relevant types. It defines a Flight type matching the data structure. Inside the component, a GreatCircleLayer is created with typed data accessors, color, width, and pickability as before. The component returns a DeckGL element with initial view state, controller enabled, tooltip callback typed with PickingInfo, and the layer array passed as a prop for rendering. Dependencies include React, @deck.gl/react, @deck.gl/core, and @deck.gl/geo-layers with TypeScript typings.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/great-circle-layer.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {GreatCircleLayer} from '@deck.gl/geo-layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype Flight = {\n  from: {\n    name: string;\n    coordinates: [longitude: number, latitude: number];\n  };\n  to: {\n    name: string;\n    coordinates: [longitude: number, latitude: number];\n  };\n};\n\nfunction App() {\n  const layer = new GreatCircleLayer<Flight>({\n    id: 'GreatCircleLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/flights.json',\n    \n    getSourcePosition: (d: Flight) => d.from.coordinates,\n    getTargetPosition: (d: Flight) => d.to.coordinates,\n    getSourceColor: [64, 255, 0],\n    getTargetColor: [0, 128, 200],\n    getWidth: 5,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<Flight>) => object && `${object.from.name} to ${object.to.name}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HexagonLayer with deck.gl in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates creating a typed HexagonLayer for aggregating bike rack data into hexagonal bins. It defines a BikeRack type and configures the layer to perform GPU aggregation with extruded hexagons. Custom accessor functions retrieve coordinates and weights for color and elevation calculations with type safety. Deck is instantiated with an initial camera view and tooltip support that utilizes typed picking information. Required dependencies include TypeScript definitions from @deck.gl/core and @deck.gl/aggregation-layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/hexagon-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {HexagonLayer, HexagonLayerPickingInfo} from '@deck.gl/aggregation-layers';\n\ntype BikeRack = {\n  ADDRESS: string;\n  SPACES: number;\n  COORDINATES: [longitude: number, latitude: number];\n};\n\nconst layer = new HexagonLayer<BikeRack>({\n  id: 'HexagonLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n  gpuAggregation: true,\n  extruded: true,\n  getPosition: (d: BikeRack) => d.COORDINATES,\n  getColorWeight: (d: BikeRack) => d.SPACES,\n  getElevationWeight: (d: BikeRack) => d.SPACES,\n  elevationScale: 4,\n  radius: 200,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: HexagonLayerPickingInfo<BikeRack>) => object && `Count: ${object.elevationValue}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Basic DeckGL Usage with ScatterplotLayer\nDESCRIPTION: This snippet demonstrates the basic usage of the `DeckGL` component. It imports `DeckGL` and `ScatterplotLayer` from their respective modules.  It then defines an `App` component that renders a `DeckGL` component.  The `DeckGL` component is configured with longitude, latitude, zoom, and layers, which includes a `ScatterplotLayer` using the supplied data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/deckgl.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Basic usage\nimport {DeckGL} from '@deck.gl/react';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst App = (data) => (\n  <DeckGL\n    longitude={-122.45}\n    latitude={37.78}\n    zoom={12}\n    layers={[new ScatterplotLayer({data})]} />\n);\n\n```\n\n----------------------------------------\n\nTITLE: Initializing DeckGL Component for Map Rendering (React JSX)\nDESCRIPTION: This snippet demonstrates how to import and render the <DeckGL> React component from '@deck.gl/react'. It initializes the component with an initialViewState specifying geographic coordinates (longitude and latitude) and zoom level, setting the map viewport. This is a foundational example for embedding deck.gl visualizations within React applications.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/overview.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\n\n<DeckGL initialViewState={{longitude: -122.45, latitude: 37.78, zoom: 12}}/>\n```\n\n----------------------------------------\n\nTITLE: Using Binary Data for ScatterplotLayer (Efficient)\nDESCRIPTION: This shows how to directly supply binary data to a `ScatterplotLayer`, without converting it to a JavaScript array. The accessors read from the binary data source using the `index` and `data` arguments, allowing for much more efficient data handling and avoiding the overhead of creating an intermediate array. The use of `subarray` reduces object creation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Note: binaryData.length does not equal the number of items,\n// which is why we need to wrap it in an object that contains a custom `length` field\nconst DATA = {src: binaryData, length: binaryData.length / 6}\n\nconst layer = new ScatterplotLayer({\n  data: DATA,\n  getPosition: (_, {index, data}) => {\n    return data.src.subarray(index * 6, index * 6 + 2);\n  },\n  getRadius: (_, {index, data}) => {\n    return data.src[index * 6 + 2];\n  },\n  getFillColor: (_, {index, data, target}) => {\n    return data.src.subarray(index * 6 + 3, index * 6 + 6);\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: DeckGL with Views Prop Override\nDESCRIPTION: This snippet explores how JSX views and the `views` prop interact within the `DeckGL` component. It shows how the view instance in the `views` prop takes precedence if the view ID is used in both JSX views and the `views` prop. It uses `MapView` and `FirstPersonView` defined with the views prop. A `<View>` with the ID \"map\" which is also defined in the `views` prop is then rendered.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/deckgl.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n  const views = [\n    new MapView({id: 'map', width: '50%', controller: true}),\n    new FirstPersonView({width: '50%', x: '50%', fovy: 50})\n  ];\n\n  <DeckGL initialViewState={...viewState} layers={layers} views={views} >\n    <View id=\"map\">\n      <Map mapStyle=\"https://basemaps.cartocdn.com/gl/positron-gl-style/style.json\" />\n    </View>\n  <DeckGL />\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with Layer Filter and Views - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize a Deck instance with multiple views (FirstPersonView and MapView) and a layerFilter to control layer visibility.  It creates a layerFilter that hides the 'car' layer in the 'first-person' view.  It depends on @deck.gl/core, @deck.gl/mesh-layers, and @deck.gl/geo-layers.  The `updateCar` function updates the Deck's layers and viewState based on the car's position.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck, FirstPersonView, MapView} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {MVTLayer} from '@deck.gl/geo-layers';\n\nconst deckInstance = new Deck({\n  views: [\n    new FirstPersonView({id: 'first-person'}),\n    new MapView({id: 'minimap', x: 10, y: 10, width: '20%', height: '20%'})\n  ],\n  layerFilter: ({layer, viewport}) => {\n    if (viewport.id === 'first-person' && layer.id === 'car') {\n      // Do not draw the car layer in the first person view\n      return false;\n    }\n    return true;\n  }\n});\n\n/** Called periodically to update the map with the car's latest position */\nfunction updateCar(carPose) {\n  deckInstance.setProps({\n    layers: [\n      new MVTLayer({\n        id: 'base-map',\n        // ...\n      }),\n      new SimpleMeshLayer({\n        id: 'car',\n        mesh: '/path/to/model.obj',\n        data: [carPose],\n        getPosition: d => [d.longitude, d.latitude, 0],\n        getOrientation: d => [0, -d.heading * Math.PI / 180, 0]\n      })\n    ],\n    viewState: {\n      'first-person': {\n        longitude: carPos.longitude,\n        latitude: carPos.latitude,\n        bearing: carPos.heading,\n        position: [0, 0, 2]\n      },\n      minimap: {\n        longitude: carPos.longitude,\n        latitude: carPos.latitude,\n        zoom: 10\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CARTO Source and Vector Tile Layer in JavaScript\nDESCRIPTION: Demonstrates how to import CARTO source and vector tile layer classes from '@deck.gl/carto' and compose them for data loading and rendering in deck.gl. The snippet merges global and table-specific options into a single options object, calls the CartoVectorTableSource function which returns a Promise resolving to a TileJSON payload, and then constructs a VectorTileLayer using that data. This usage pattern isolates data loading and styling and underscores async data handling.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/carto-v9-rfc.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {CartoVectorTableSource, VectorTileLayer} from '@deck.gl/carto';\n\nconst globalOptions = {\n  accessToken: 'XXX',\n  connectionName: 'my-connection',\n}\n\n// All options in one place\nconst options = {\n  tableName: 'carto.example.table',\n  columns: ['column1', 'column2']\n}\n\n// Returns a Promise which resolves to TileJSON payload. Can optionally await if needed\nconst data = CartoVectorTableSource({...globalOptions, ...options});\n\nconst layer = new VectorTileLayer({\n  data,\n\n  // ...style props\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ScatterplotLayer Accessors deck.gl TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates configuring a deck.gl ScatterplotLayer where the `getFillColor` accessor depends on external variables (`maleColor`, `femaleColor`). Without `updateTriggers`, attribute updates triggered by changes to these variables will not occur if the `data` prop itself does not change.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck, Color} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [x: number, y: number];\n  gender: 'M'|'F';\n};\nconst data: DataType[] = [...];\nconst deckInstance = new Deck({...});\n\nfunction render({maleColor, femaleColor}: {\n  maleColor: Color;\n  femaleColor: Color;\n}) {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      getPosition: (d: DataType) => d.position;\n      getFillColor: (d: DataType) => d.gender === 'M' ? maleColor : femaleColor\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: DOM Event Handling via EventManager Class for React-independent Event Registration\nDESCRIPTION: This class encapsulates the logic for wiring DOM events, including touch, mouse, scroll wheel, and gestures, in a platform-agnostic manner. It normalizes event parameters, supports different input types, and facilitates reusable event registration for multiple frameworks. The implementation aims to minimize code duplication and enhance flexibility in event handling across deck.gl, react-map-gl, and luma.gl components.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v4.1/event-handling-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class EventManager {\n  constructor(canvas, {\n    onMouseMove = noop,\n    onMouseClick = noop,\n    onMouseDown = noop,\n    onMouseUp = noop,\n    onMouseRotate = noop,\n    onMouseDrag = noop,\n    onTouchStart = noop,\n    onTouchRotate = noop,\n    onTouchDrag = noop,\n    onTouchEnd = noop,\n    onTouchTap = noop,\n    onZoom = noop,\n    onZoomEnd = noop,\n    mapTouchToMouse = true,\n    pressKeyToRotate = false\n  } = {}) {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HexagonLayer with deck.gl in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates creating a HexagonLayer to aggregate geographic bike rack data into a hexagon-based heatmap on a map using deck.gl. It configures GPU-based aggregation, extrusion for 3D effects, custom position and weight accessors, and interactive tooltip display. The snippet initializes a Deck instance with initial view parameters and controller enabled for map navigation. Dependencies include @deck.gl/core and @deck.gl/aggregation-layers libraries.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/hexagon-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\n\nconst layer = new HexagonLayer({\n  id: 'HexagonLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n  gpuAggregation: true,\n  extruded: true,\n  getPosition: d => d.COORDINATES,\n  getColorWeight: d => d.SPACES,\n  getElevationWeight: d => d.SPACES,\n  elevationScale: 4,\n  radius: 200,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `Count: ${object.elevationValue}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck.gl Deck Instance in JavaScript\nDESCRIPTION: Demonstrates basic standalone usage of the Deck class from '@deck.gl/core' to create a Deck instance initialized with a default geographic view state, enabling user interaction controller, and rendering a single ScatterplotLayer. Requires importing Deck and a Layer class (ScatterplotLayer) and providing data for the layer. The snippet illustrates setting longitude, latitude, and zoom for initialViewState and passing an array of layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Basic standalone use\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst deck = new Deck({\n  initialViewState: {\n    longitude: -122.45,\n    latitude: 37.78,\n    zoom: 12\n  },\n  controller: true,\n  layers: [\n    new ScatterplotLayer({data})\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example: Creating and Visualizing a LineLayer with deck.js\nDESCRIPTION: This snippet demonstrates how to instantiate a LineLayer in JavaScript, set up a deck.gl Deck instance with initial view state, tooltip, and layer configuration. It requires importing Deck and LineLayer from deck.gl core and layers packages respectively, and provides an interactive visualization displaying flight or transportation routes based on fetched GeoJSON data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/line-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {LineLayer} from '@deck.gl/layers';\n\nconst layer = new LineLayer({\n  id: 'LineLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-segments.json',\n  getColor: d => [Math.sqrt(d.inbound + d.outbound), 140, 0],\n  getSourcePosition: d => d.from.coordinates,\n  getTargetPosition: d => d.to.coordinates,\n  getWidth: 12,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `${object.from.name} to ${object.to.name}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating deck.gl with Google Maps (Interleaved/Overlaid) - TypeScript\nDESCRIPTION: This snippet demonstrates how to integrate deck.gl with Google Maps using TypeScript. It initializes the Google Maps JavaScript API using the @googlemaps/js-api-loader, creates a Google Map instance, and adds a deck.gl ScatterplotLayer as an overlay using GoogleMapsOverlay.  It requires a valid Google Maps API key and a Google Map ID.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/base-maps/using-with-google-maps.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {Loader} from '@googlemaps/js-api-loader';\nimport {GoogleMapsOverlay} from '@deck.gl/google-maps';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst loader = new Loader({apiKey: '<google_maps_api_key>'});\nconst googlemaps = await loader.importLibrary('maps');\n\nconst map = new googlemaps.Map(document.getElementById('map'), {\n  center: {lat: 51.47, lng: 0.45},\n  zoom: 11,\n  mapId: '<google_map_id>'\n});\n\nconst overlay = new GoogleMapsOverlay({\n  layers: [\n    new ScatterplotLayer({\n      id: 'deckgl-circle',\n      data: [\n        {position: [0.45, 51.47]}\n      ],\n      getPosition: d => d.position,\n      getFillColor: [255, 0, 0, 100],\n      getRadius: 1000\n    })\n  ]\n});\n\noverlay.setMap(map);\n```\n\n----------------------------------------\n\nTITLE: Filtering Layers for Rendering and Picking - React\nDESCRIPTION: This React code snippet demonstrates how to use the `layerFilter` prop, managed with `useCallback`, to control both rendering and picking behavior in multiple viewports. It prevents rendering the 'car' layer in the 'first-person' view and disables picking in the 'minimap'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nconst layerFilter: DeckProps[\"layerFilter\"] = useCallback(({layer, viewport, isPicking}) => {\n  if (viewport.id === 'first-person' && layer.id === 'car') {\n    // Do not draw the car layer in the first person view\n    return false;\n  }\n  if (isPicking && viewport.id === 'minimap') {\n    // Do not pick anything in the minimap\n    return false;\n  }\n  return true;\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Rendering Tile Maps in Multiple Views - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates rendering tile maps in multiple views using separate MVTLayer instances for each view.  A `layerFilter` ensures each layer is rendered only in its designated viewport. This approach is recommended for layers with expensive operations like data fetching or aggregation. It depends on @deck.gl/core and @deck.gl/geo-layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck, MapView} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\n\nconst deck = new Deck({\n  // ...\n  views: [\n    new MapView({id: 'main', controller: true}),\n    new MapView({id: 'minimap', x: 10, y: 10, width: 300, height: 200})\n  ],\n  layers: [\n    new MVTLayer({\n      id: 'tiles-for-main',\n      // ...\n    }),\n    new MVTLayer({\n      id: 'tiles-for-minimap',\n      // ...\n    })\n  ],\n  layerFilter: ({layer, viewport}) => {\n    return layer.id === `tiles-for-${viewport.id}`;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Web Fonts in React for deck.gl TextLayer (TSX)\nDESCRIPTION: Illustrates loading a web font within a React component using the `FontFace` API and `useEffect` hook. It asynchronously loads the font, adds it to `document.fonts`, and updates component state (`fontLoaded`). The `TextLayer` is conditionally created and passed to `DeckGL` only after the font has been successfully loaded, preventing rendering issues. Requires `react`, `@deck.gl/react`, and `@deck.gl/layers`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState, useEffect} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {TextLayer} from '@deck.gl/layers';\n\nfunction App() {\n  const [fontLoaded, setFontLoaded] = useState<boolean>(false);\n\n  useEffect(() => {\n    (async () => {\n      const font = new FontFace('Material Icons', 'url(https://fonts.gstatic.com/s/materialicons/v90/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2)');\n      // wait for font to be loaded\n      await font.load();\n      // add font to document\n      document.fonts.add(font);\n      setFontLoaded(true);\n    })();\n  }, []);\n\n  const textLayer = fontLoaded && new TextLayer({\n    fontFamily: 'Material Icons',\n    // ...\n  });\n\n  return <DeckGL\n    // ...\n    layers={[textLayer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring and Interpolation Transitions (TypeScript)\nDESCRIPTION: Illustrates configuring different transition types for a `ScatterplotLayer` in TypeScript. Sets a 'spring' transition for `getPosition` and an 'interpolation' transition for `getFillColor` with custom duration, easing function, and an `enter` callback for attribute backfilling (fade-in effect). Requires `@deck.gl/layers` and `@deck.gl/core`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport type {Color} from '@deck.gl/core';\n\nnew ScatterplotLayer({\n  // ...\n  transitions: {\n    getPosition: {\n      type: 'spring',\n      damping: 0.2\n    },\n    getFillColor: {\n      duration: 600,\n      easing: (x: number) => -(Math.cos(Math.PI * x) - 1) / 2, // ease-in-out-sine\n      entry: ([r, g, b]: Color) => [r, g, b, 0]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing deck.gl modules with TypeScript types (v9+)\nDESCRIPTION: This snippet demonstrates how to import modules from deck.gl and @deck.gl/layers, including their TypeScript types, starting from deck.gl version 9.0.  It shows how to import both values and types, as well as types only.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-with-typescript.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Values and types.\nimport {DeckGL} from '@deck.gl/react';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\n// Types only.\nimport type {DeckGLRef} from '@deck.gl/react';\nimport type {GeoJsonLayerProps} from '@deck.gl/layers';\n```\n\n----------------------------------------\n\nTITLE: Fitting Viewport in a React DeckGL App using WebMercatorViewport (TSX/TypeScript React)\nDESCRIPTION: This snippet provides a React functional component that uses DeckGL and WebMercatorViewport to adjust map view after a layer loads, utilizing fitBounds for bounding box fitting. Dependencies: @deck.gl/react, @deck.gl/core, @deck.gl/layers, React. State is managed using useState hooks for view and load status. After the ScatterplotLayer loads, the code retrieves its bounding box and invokes fitBounds to determine new longitude, latitude, and zoom parameters; these are used to update the view state, re-centering the map. Inputs include deck.gl layers and the bounding box, output is a dynamically fit map viewport.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/web-mercator-viewport.md#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nimport React, {useState, useEffect} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {WebMercatorViewport, MapViewState} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nfunction App() {\n  const [initialViewState, setInitialViewState] = useState<MapViewState>({\n    longitude: -100,\n    latitude: 40,\n    zoom: 4\n  });\n  const [hasLoaded, setHasLoaded] = useState<boolean>(false);\n\n  const layer = new ScatterplotLayer({...});\n\n  const onAfterRender = () => {\n    if (!hasLoaded && layer.isLoaded) {\n      setHasLoaded(true);\n\n      const viewport = layer.context.viewport as WebMercatorViewport;\n      const {longitude, latitude, zoom} = viewport.fitBounds(layer.getBounds());\n      setInitialViewState({longitude, latitude, zoom});\n    }\n  };\n\n  return <DeckGL\n    initialViewState={initialViewState}\n    controller\n    layers={[layer]}\n    onAfterRender\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating deck.gl with Google Maps (Interleaved/Overlaid) - React\nDESCRIPTION: This snippet demonstrates how to integrate deck.gl with Google Maps in a React application using @vis.gl/react-google-maps and @deck.gl/google-maps. It defines a DeckGLOverlay component that creates a GoogleMapsOverlay and sets it on the map. The App component renders the Map component provided by @vis.gl/react-google-maps and passes a ScatterplotLayer to the DeckGLOverlay. It requires a Google Maps API key and map ID. The GoogleMapsOverlay is managed using the `useMemo` and `useEffect` hooks to ensure proper initialization and cleanup.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/base-maps/using-with-google-maps.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useMemo, useEffect} from 'react';\nimport {APIProvider, Map, useMap} from '@vis.gl/react-google-maps';\nimport {DeckProps} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {GoogleMapsOverlay} from '@deck.gl/google-maps';\n\nfunction DeckGLOverlay(props: DeckProps) {\n  const map = useMap();\n  const overlay = useMemo(() => new GoogleMapsOverlay(props), []);\n\n  useEffect(() => {\n    overlay.setMap(map);\n    return () => overlay.setMap(null);\n  }, [map])\n\n  overlay.setProps(props);\n  return null;\n}\n\nfunction App() {\n  const layers = [\n    new ScatterplotLayer({\n      id: 'deckgl-circle',\n      data: [\n        {position: [0.45, 51.47]}\n      ],\n      getPosition: d => d.position,\n      getFillColor: [255, 0, 0, 100],\n      getRadius: 1000\n    })\n  ];\n\n  return <APIProvider apiKey=\"<google_maps_api_key>\">\n    <Map\n      defaultCenter={{lat: 51.47, lng: 0.45}}\n      defaultZoom={11}\n      mapId=\"<google_maps_id>\" >\n      <DeckGLOverlay layers={layers} />\n    </Map>\n  </APIProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mapbox and deck.gl Overlay (TypeScript)\nDESCRIPTION: This code snippet demonstrates initializing Mapbox GL JS and integrating deck.gl layers using the `MapboxOverlay` class in TypeScript. It creates a Mapbox map instance, sets the access token, and adds a `ScatterplotLayer` to the deck.gl overlay. The `interleaved` option is set to `true` for mixing deck.gl and Mapbox layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/base-maps/using-with-mapbox.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MapboxOverlay} from '@deck.gl/mapbox';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nconst map = new mapboxgl.Map({\n  container: 'map',\n  style: 'mapbox://styles/mapbox/light-v9',\n  accessToken: '<mapbox_access_token>',\n  center: [0.45, 51.47],\n  zoom: 11\n});\n\nmap.once('load', () => {\n  const deckOverlay = new MapboxOverlay({\n    interleaved: true,\n    layers: [\n      new ScatterplotLayer({\n        id: 'deckgl-circle',\n        data: [\n          {position: [0.45, 51.47]}\n        ],\n        getPosition: d => d.position,\n        getFillColor: [255, 0, 0, 100],\n        getRadius: 1000,\n        beforeId: 'waterway-label' // In interleaved mode render the layer under map labels\n      })\n    ]\n  });\n\n  map.addControl(deckOverlay);\n});\n```\n\n----------------------------------------\n\nTITLE: Animating TripsLayer currentTime prop using popmotion in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to animate the `currentTime` prop of a `TripsLayer` in deck.gl using the `popmotion` library. It initializes a `Deck` instance and defines an animation that updates the layer's `currentTime` property, triggering a layer update on each frame. The animation ranges from 0 to 1800 over 5 seconds, repeating indefinitely. Requires `@deck.gl/core`, `@deck.gl/geo-layers`, and `popmotion`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {TripsLayer} from '@deck.gl/geo-layers';\nimport {animate} from \"popmotion\";\n\nconst currentTimeAnimation = animate({\n  from: 0, // currentTime min value\n  to: 1800, // currentTime max value\n  duration: 5000, // over the course of 5 seconds\n  repeat: Infinity,\n  onUpdate: updateLayers\n});\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  controller: true\n});\n\nfunction updateLayers(currentTime) {\n  const layers = [\n    new TripsLayer({\n      id: 'TripsLayer',\n      data: '/path/to/data.json',\n      getPath: d => d.waypoints.map(p => p.coordinates),\n      getTimestamps: d => d.waypoints.map(p => p.timestamp),\n      getColor: [253, 128, 93],\n      getWidth: 50,\n\n      currentTime,\n      trailLength: 600\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Encode Feature Index into Picking Color\nDESCRIPTION: Converts a non-negative integer index into a `[r, g, b]` color array suitable for picking. Each color uniquely represents a sub-feature, enabling precise interaction detection. Indices greater than or equal to 0 are supported, up to 16 million.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction encodePickingColor(index: number): number[] {\n  // Implementation encodes index into color array\n}\n```\n\n----------------------------------------\n\nTITLE: World to clipspace position transformation in GLSL using 'project' module\nDESCRIPTION: This GLSL code snippet demonstrates how to project instanced geometry's position data from world space to clipspace for rendering. It utilizes the 'project_position', 'project_size', and 'project_common_position_to_clipspace' functions provided by the 'project' shader module to compute 'gl_Position'. The code ensures correct positioning of geometries in a 3D scene with support for various projection modes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/project.md#_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\n// instanced geometry\nin vec3 positions;\n// instance attributes\nin vec3 instanceCenter;\nin float instanceSize;\n\nvoid main(void) {\n  vec3 center = project_position(instanceCenter);\n  vec3 vertex = positions * project_size(instanceSize);\n  gl_Position = project_common_position_to_clipspace(center + vertex);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling 64-bit Precision with `Fp64Extension` (New Syntax)\nDESCRIPTION: Shows the current method (deck.gl v7.2+) for enabling 64-bit precision. Import `Fp64Extension` from `@deck.gl/extensions` and add an instance of it to the layer's `extensions` array. This replaces the deprecated `fp64` prop.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/// new\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {Fp64Extension} from '@deck.gl/extensions';\n\nnew ScatterplotLayer({\n  coordinateSystem: COORDINATE_SYSTEM.LNGLAT_DEPRECATED,\n  extensions: [new Fp64Extension()],\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Tiled Map Data with TileLayer in deck.gl (React/TypeScript)\nDESCRIPTION: This React component (written in TypeScript with JSX) demonstrates how to use DeckGL and TileLayer to render tiled map imagery in a React environment. Dependencies are 'react', '@deck.gl/react', '@deck.gl/geo-layers', and '@deck.gl/layers'. The App function configures the TileLayer with a BitmapLayer for each tile, and returns a DeckGL component with interactive viewport controls, initial state, and dynamic tooltips per tile. The 'layers' prop receives the TileLayer instance, and 'getTooltip' returns details about the hovered tile. Component expects TileLayerPickingInfo for hover callbacks. Suitable for use within a React application with Map and tile datasets.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-layer.md#_snippet_2\n\nLANGUAGE: React\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {TileLayer} from '@deck.gl/geo-layers';\nimport {BitmapLayer} from '@deck.gl/layers';\nimport type {TileLayerPickingInfo} from '@deck.gl/geo-layers';\n\nfunction App() {\n  const layer = new TileLayer({\n    id: 'TileLayer',\n    data: 'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    maxZoom: 19,\n    minZoom: 0,\n\n    renderSubLayers: props => {\n      const {boundingBox} = props.tile;\n\n      return new BitmapLayer(props, {\n        data: null,\n        image: props.data,\n        bounds: [boundingBox[0][0], boundingBox[0][1], boundingBox[1][0], boundingBox[1][1]]\n      });\n    },\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({tile}: TileLayerPickingInfo) => tile && `x:${tile.index.x}, y:${tile.index.y}, z:${tile.index.z}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck and ScatterplotLayer in TypeScript\nDESCRIPTION: TypeScript example initializing a Deck with typed initial view state and data structures. Defines a DataType interface to type-check layer data attributes such as position (longitude and latitude tuple), color (RGB), and radius. The ScatterplotLayer uses typed accessor functions for safe extraction of rendering properties from the input data. Controller and viewport parameters are similar to the JavaScript example.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-standalone.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck, MapViewState} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst INITIAL_VIEW_STATE: MapViewState = {\n  latitude: 37.8,\n  longitude: -122.45,\n  zoom: 15\n};\n\ntype DataType = {\n  position: [longitude: number, latitude: number];\n  color: [r: number, g: number, b: number];\n  radius: number;\n};\n\nconst deckInstance = new Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: true,\n  layers: [\n    new ScatterplotLayer<DataType>({\n      data: [\n        {position: [-122.45, 37.8], color: [255, 0, 0], radius: 100}\n      ],\n      getPosition: (d: DataType) => d.position,\n      getFillColor: (d: DataType) => d.color,\n      getRadius: (d: DataType) => d.radius\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Layers with DeckGL Component in React\nDESCRIPTION: This React code shows how to update deck.gl layers using the `DeckGL` component and React hooks (`useState`, `useEffect`). It uses `ScatterplotLayer` and `TextLayer` to render flight data obtained from a hypothetical server.  The `useEffect` hook fetches the data and updates the `flights` state, triggering a re-render of the `DeckGL` component with new layer instances.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-layers.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState, useEffect} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {LayersList} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype Flight = {\n  callSign: string;\n  lon: number;\n  lat: number;\n  alt: number;\n};\n\nfunction App() {\n  const [flights, setFlights] = useState<Flight[]>([]);\n\n  useEffect(() => {\n    const update = async () => {\n      // `queryServer` is a hypothetical function that contacts a server to fetch a list of flight locations\n      const newFlights: Flight[] = await queryServer({time: Date.now()});\n      setFlight(newFlights);\n      // refresh again after 60 seconds\n      setTimeout(update, 60000);\n    };\n\n    update();\n  }, []);\n\n  const layers: LayersList = [\n    new ScatterplotLayer<Flight>({\n      id: 'circles',\n      data: flights,\n      getPosition:  (d: Flight) => [d.lng, d.lat, d.alt],\n      getFillColor: [255, 0, 0],\n      getRadius: 3,\n      radiusUnits: 'pixels'\n    }),\n    new TextLayer<Flight>({\n      id: 'labels',\n      data: flights,\n      getText: (d: Flight) => d.callSign,\n      getPosition: (d: Flight) => [d.lng, d.lat, d.alt],\n      getSize: 12\n    })\n  ];\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.8,\n      zoom: 8\n    }}\n    controller\n    layers={layers} />\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PathLayer and Deck in TypeScript with Typed Data\nDESCRIPTION: Shows setting up a strongly-typed PathLayer in TypeScript using a custom data interface BartLine describing properties name, color, and geographic path coordinates. It implements color extraction from hex strings and path retrieval with defined accessor functions. The Deck instance is created with typed picking info for the getTooltip function, ensuring safe access to object properties. The example leverages '@deck.gl/core' and '@deck.gl/layers' for type imports and layer creation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/path-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {PathLayer} from '@deck.gl/layers';\n\ntype BartLine = {\n  name: string;\n  color: string;\n  path: [longitude: number, latitude: number][];\n};\n\nconst layer = new PathLayer<BartLine>({\n  id: 'PathLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-lines.json',\n\n  getColor: (d: BartLine) => {\n    const hex = d.color;\n    // convert to RGB\n    return hex.match(/[0-9a-f]{2}/g).map(x => parseInt(x, 16));\n  },\n  getPath: (d: BartLine) => d.path,\n  getWidth: 100,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<BartLine>) => object && object.name,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Create custom deck.gl layers connected to CARTO datasource using vectorQuerySource\nDESCRIPTION: This snippet shows how to define a React component that uses carto's vectorQuerySource to fetch data from a CARTO database, then visualizes it with a VectorTileLayer in deck.gl. It requires parameters like accessToken, connectionName, and SQL query for data retrieval. The layer properties control visual aspects such as point size and colors. Dependencies include '@deck.gl/react', '@deck.gl/carto', and '@deck.gl/layers'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/overview.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {VectorTileLayer, vectorQuerySource} from '@deck.gl/carto';\n\nfunction App() {\n  const data = vectorQuerySource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    sqlQuery: 'SELECT * FROM cartobq.testtables.points_10k',\n  });\n\n  const layer = new VectorTileLayer({\n    data,\n    pointRadiusMinPixels: 2,\n    getLineColor: [0, 0, 0, 200],\n    getFillColor: [238, 77, 90],\n    lineWidthMinPixels: 1\n  });\n\n  return <DeckGL layers={[layer]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating attributes in AttributeManager in JavaScript\nDESCRIPTION: Shows how to trigger updates for all registered attributes, specifying data source, instance count, transitions, and other parameters needed for the update process.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/attribute-manager.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nattributeManager.update({\n    data,\n    numInstances,\n    transitions,\n    startIndex,\n    endIndex,\n    props = {},\n    buffers = {},\n    context = {},\n    ignoreUnknownAttributes = false\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ScreenGridLayer with deck.gl and React\nDESCRIPTION: This code demonstrates how to use `ScreenGridLayer` with deck.gl in a React application. It defines a functional React component `App` that renders a `DeckGL` component. It uses the `@deck.gl/react` component, which provides a React-friendly interface for deck.gl. It defines a `BikeRack` type for data and initializes a `ScreenGridLayer` with properties like `data`, `cellSizePixels`, and `colorRange`, and accessors. The example uses `initialViewState`, controller, and `getTooltip` within the `DeckGL` component and showcases how deck.gl can be integrated seamlessly with React.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/screen-grid-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {ScreenGridLayer, ScreenGridLayerPickingInfo} from '@deck.gl/aggregation-layers';\n\ntype BikeRack = {\n  ADDRESS: string;\n  SPACES: number;\n  COORDINATES: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const layer = new ScreenGridLayer<BikeRack>({\n    id: 'ScreenGridLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n    gpuAggregation: true,\n    cellSizePixels: 50,\n    colorRange: [\n      [0, 25, 0, 25],\n      [0, 85, 0, 85],\n      [0, 127, 0, 127],\n      [0, 170, 0, 170],\n      [0, 190, 0, 190],\n      [0, 255, 0, 255]\n    ],\n    getPosition: (d: BikeRack) => d.COORDINATES,\n    getWeight: (d: BikeRack) => d.SPACES,\n    opacity: 0.8\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: ScreenGridLayerPickingInfo<BikeRack>) => object && `Count: ${object.value}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Light Sources in deck.gl with JavaScript\nDESCRIPTION: This code snippet demonstrates how to create directional and point light sources using the `DirectionalLight` and `PointLight` classes. It initializes the light sources with specified colors, intensities, and positions or directions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.0/phong-lighting-rfc.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst directionalLight = new DirectionalLight( 0xffffff, 0.5, [1, 0, 0]);\nconst pointLight = new PointLight( 0xffffff, 0.5, [0, 0, 0]);\n```\n\n----------------------------------------\n\nTITLE: React Example: Interactive LineLayer in React using deck.gl React Components\nDESCRIPTION: This React example demonstrates integrating a LineLayer within a functional component utilizing the DeckGL React component. It defines the types for data, configures the layer with accessor functions, and renders the visualization with interactive tooltips and viewport controls, leveraging React hooks for state management if necessary.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/line-layer.md#_snippet_2\n\nLANGUAGE: TypeScript/JSX\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {LineLayer} from '@deck.gl/layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype BartSegment = {\n  inbound: number;\n  outbound: number;\n  from: {\n    name: string;\n    coordinate: [longitude: number, latitude: number];\n  };\n  to: {\n    name: string;\n    coordinate: [longitude: number, latitude: number];\n  };\n};\n\nfunction App() {\n  const layer = new LineLayer<BartSegment>({\n    id: 'LineLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-segments.json',\n    getColor: (d: BartSegment) => [Math.sqrt(d.inbound + d.outbound), 140, 0],\n    getSourcePosition: (d: BartSegment) => d.from.coordinates,\n    getTargetPosition: (d: BartSegment) => d.to.coordinates,\n    getWidth: 12,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<BartSegment>) => object && `${object.from.name} to ${object.to.name}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and Required Dependencies - Bash\nDESCRIPTION: Command-line instructions for installing deck.gl packages required to use the Fp64Extension. Supports installing the aggregated deck.gl package or the split core, layers, and extensions modules via NPM. These dependencies are prerequisites for any JavaScript usage of the Fp64Extension and related layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fp64-extension.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/extensions\n```\n\n----------------------------------------\n\nTITLE: Adding Deck.gl Layers to Mapbox GL JS Map with MapboxOverlay (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing a Mapbox map, creating a MapboxOverlay configured with deck.gl layers (specifically a ScatterplotLayer), and adding the overlay as a control. Required dependencies include '@deck.gl/mapbox', '@deck.gl/layers', and 'mapbox-gl' with corresponding CSS. The overlay is created with interleaved rendering enabled, and the beforeId property is used to control layer stacking order relative to Mapbox layers. Inputs include configuration objects for mapboxgl.Map and MapboxOverlay; outputs are base map and Deck.gl layers rendered in sync.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mapbox/mapbox-overlay.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MapboxOverlay} from '@deck.gl/mapbox';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nconst map = new mapboxgl.Map({\n  container: 'map',\n  style: 'mapbox://styles/mapbox/light-v9',\n  accessToken: '<mapbox_access_token>',\n  center: [0.45, 51.47],\n  zoom: 11\n});\n\nmap.once('load', () => {\n  const deckOverlay = new MapboxOverlay({\n    interleaved: true,\n    layers: [\n      new ScatterplotLayer({\n        id: 'deckgl-circle',\n        data: [\n          {position: [0.45, 51.47]}\n        ],\n        getPosition: d => d.position,\n        getFillColor: [255, 0, 0, 100],\n        getRadius: 1000,\n        beforeId: 'waterway-label' // In interleaved mode render the layer under map labels. Replace with `slot: 'bottom'` if using Mapbox v3 Standard Style.\n      })\n    ]\n  });\n\n  map.addControl(deckOverlay);\n});\n```\n\n----------------------------------------\n\nTITLE: Optimized Accessor Update with updateTriggers (React/TSX)\nDESCRIPTION: Demonstrates the optimal way to handle accessor updates based on props in React using `updateTriggers`. The original `DATA` is passed to `ScatterplotLayer`, and `updateTriggers: { getRadius: year }` ensures only the radius calculation is redone when `year` changes, maximizing performance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App({year}: {\n  year: number;\n}) {\n  const layers = [\n    new ScatterplotLayer<CensusTract>({\n      // `data` never changes\n      data: DATA,\n      getPosition: (d: CensusTract) => d.centroid,\n      // radius depends on `year`\n      getRadius: (d: CensusTract) => Math.sqrt(d.populationsByYear[year]),\n      updateTriggers: {\n        // This tells deck.gl to recalculate radius when `year` changes\n        getRadius: year\n      }\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating GridLayer and Deck in TypeScript\nDESCRIPTION: This TypeScript example shows how to define a type for the input data (`BikeRack`) and use it with the GridLayer. It instantiates a GridLayer and a Deck instance, similar to the JavaScript example, demonstrating type-safe property definitions and tooltip handling.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {GridLayer, GridLayerPickingInfo} from '@deck.gl/aggregation-layers';\n\ntype BikeRack = {\n  ADDRESS: string;\n  SPACES: number;\n  COORDINATES: [longitude: number, latitude: number];\n};\n\nconst layer = new GridLayer<BikeRack>({\n  id: 'GridLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n  gpuAggregation: true,\n  extruded: true,\n  getPosition: (d: BikeRack) => d.COORDINATES,\n  getColorWeight: (d: BikeRack) => d.SPACES,\n  getElevationWeight: (d: BikeRack) => d.SPACES,\n  elevationScale: 4,\n  cellSize: 200,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: GridLayerPickingInfo<BikeRack>) => object && `Count: ${object.elevationValue}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding ScatterplotLayer with Mapbox - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a `MapboxLayer` instance and add it to a Mapbox map. It uses a `ScatterplotLayer` from deck.gl to visualize data on the map. It waits for the map to load before adding the layer, ensuring the map is ready.  The example includes setting layer properties such as ID, type, data, and visual attributes (e.g., position, radius, color).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mapbox/mapbox-layer.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {MapboxLayer} from '@deck.gl/mapbox';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst map = new mapboxgl.Map({...});\n\nconst myScatterplotLayer = new MapboxLayer({\n  id: 'my-scatterplot',\n  type: ScatterplotLayer,\n  data: [\n      {position: [-74.5, 40], size: 100}\n  ],\n  getPosition: d => d.position,\n  getRadius: d => d.size,\n  getColor: [255, 0, 0]\n});\n\n// wait for map to be ready\nmap.on('load', () => {\n  // insert before the mapbox layer \"waterway_label\"\n  map.addLayer(myScatterplotLayer, 'waterway_label');\n\n  // update the layer\n  myScatterplotLayer.setProps({\n    getColor: [0, 0, 255]\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with Built-in Tooltip (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a deck.gl instance with a ScatterplotLayer and a `getTooltip` callback to render a built-in tooltip. The tooltip displays the 'message' property of the hovered object. The `pickable` property must be set to true on the layer to enable picking.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\n// Callback to populate the default tooltip with content\nfunction getTooltip({object}) {\n  return object && object.message;\n}\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.45,\n    latitude: 37.78,\n    zoom: 12\n  },\n  controller: true,\n  layers: [\n    new ScatterplotLayer({\n      data: [\n        {position: [-122.45, 37.78], message: 'Hover over me'}\n      ],\n      getPosition: d => d.position,\n      getRadius: 1000,\n      getFillColor: [255, 255, 0],\n      // Required to enable picking\n      pickable: true\n    })\n  ],\n  getTooltip\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with Built-in Tooltip (React)\nDESCRIPTION: This snippet demonstrates how to initialize a deck.gl instance within a React component, utilizing the `DeckGL` component, a ScatterplotLayer, and a `getTooltip` callback with `useCallback` hook for memoization to render a built-in tooltip. The tooltip displays the 'message' property of the hovered object. The `pickable` property must be set to true on the layer to enable picking.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_22\n\nLANGUAGE: react\nCODE:\n```\nimport React, {useCallback} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {PickingInfo} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [longitude: number, latitude: number];\n  message: string;\n};\n\nfunction App() {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      data: [\n        {position: [-122.45, 37.78], message: 'Hover over me'}\n      ],\n      getPosition: (d: DataType) => d.position,\n      getRadius: 1000,\n      getFillColor: [255, 255, 0],\n      // Required to enable picking\n      pickable: true\n    })\n  ];\n\n  // Callback to populate the default tooltip with content\n  const getTooltip = useCallback(({object}: PickingInfo<DataType>) => {\n    return object && object.message;\n  }, []);\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.45,\n      latitude: 37.78,\n      zoom: 12\n    }}\n    controller\n    layers={layers}\n    getTooltip={getTooltip}\n  />\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding deck.gl with React (JavaScript)\nDESCRIPTION: Provides example code to integrate deck.gl into a React component by rendering a DeckGL element with specified width, height, viewport parameters, and layers array. Assumes layers are pre-defined, such as the scatterplotLayer created earlier. Enables interactive and responsive visualization in React applications.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/modules/main/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<DeckGL width=\"100%\" height=\"100%\" longitude={-122.4} latitude={37.78} zoom={8} controller={true} layers={[scatterplotLayer]} />\n```\n\n----------------------------------------\n\nTITLE: Efficient Layer Visibility Toggle - React\nDESCRIPTION: This React component implements an efficient way to toggle layer visibility in deck.gl by utilizing the `visible` prop. Instead of removing and re-adding layers, this approach simply hides or shows them, retaining their internal states and preventing unnecessary resource regeneration for smoother performance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App({layerVisibility}: {\n  layerVisibility: {\n    circles: boolean;\n    labels: boolean;\n  }\n}) {\n  const layers = [\n    // when visibility is off, this layer's internal states will be retained in memory, making turning it back on instant\n    new ScatterplotLayer({\n      id: 'circles',\n      visible: layerVisibility.circles,\n      // ...\n    }),\n    new TextLayer({\n      id: 'labels',\n      visible: layerVisibility.labels,\n      // ...\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Top-Level BinaryFeatureCollection Structure in TypeScript\nDESCRIPTION: Defines the basic TypeScript structure for a `BinaryFeatureCollection` used with `deck.gl`'s `GeoJsonLayer` when providing optimized binary data. This structure groups features by geometry type (points, lines, polygons) and requires the `@loaders.gl/schema` types.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {BinaryFeatureCollection} from '@loaders.gl/schema';\n\nconst data: BinaryFeatureCollection = {\n  shape: 'binary-feature-collection',\n  // points,\n  // lines,\n  // polygons\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing MVTLayer with React in deck.gl\nDESCRIPTION: React component implementation using MVTLayer to render vector tiles with TypeScript types for feature properties and picking info, wrapped in a DeckGL component.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/mvt-layer.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport type {MVTLayerPickingInfo} from '@deck.gl/geo-layers';\nimport type {Feature, Geometry} from 'geojson';\n\ntype PropertiesType = {\n  name?: string;\n  rank: number;\n  layerName: string;\n  class: string;\n};\n\nfunction App() {\n  const layer = new MVTLayer<PropertiesType>({\n    id: 'MVTLayer',\n    data: [\n      'https://tiles-a.basemaps.cartocdn.com/vectortiles/carto.streets/v1/{z}/{x}/{y}.mvt'\n    ],\n    minZoom: 0,\n    maxZoom: 14,\n    getFillColor: (f: Feature<Geometry, PropertiesType>) => {\n      switch (f.properties.layerName) {\n        case 'poi':\n          return [255, 0, 0];\n        case 'water':\n          return [120, 150, 180];\n        case 'building':\n          return [218, 218, 218];\n        default:\n          return [240, 240, 240];\n      }\n    },\n    getLineWidth: (f: Feature<Geometry, PropertiesType>) => {\n      switch (f.properties.class) {\n        case 'street':\n          return 6;\n        case 'motorway':\n          return 10;\n        default:\n          return 1;\n      }\n    },\n    getLineColor: [192, 192, 192],\n    getPointRadius: 2,\n    pointRadiusUnits: 'pixels',\n    stroked: false,\n    picking: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: MVTLayerPickingInfo<PropertiesType>) => object && (object.properties.name || object.properties.layerName)}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using updateTriggers in deck.gl Layers\nDESCRIPTION: Demonstrates the proper way to specify updateTriggers in a deck.gl layer, showing both the recommended approach that matches accessor names and the deprecated backwards-compatible approach.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/deckgl-api-guidelines.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew Layer({\n  updateTriggers: {\n    getColor: {...},\n    instanceColors: {...}  // deprecated, backwards compatibility\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating deck.gl with Google Maps (Reverse Controlled) - React\nDESCRIPTION: This snippet demonstrates how to integrate deck.gl with Google Maps in reverse-controlled mode using React and the @visgl/react-google-maps library. The DeckGL component acts as the root, and the Map component from @visgl/react-google-maps is a child. DeckGL controls the map's size and camera. It requires a Google Maps API key and map ID. The map automatically interprets the deck.gl view state.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/base-maps/using-with-google-maps.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {APIProvider, Map} from '@vis.gl/react-google-maps';\nimport {DeckGL} from '@deck.gl/react';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nfunction App() {\n  const layers = [\n    new ScatterplotLayer({\n      id: 'deckgl-circle',\n      data: [\n        {position: [0.45, 51.47]}\n      ],\n      getPosition: d => d.position,\n      getFillColor: [255, 0, 0, 100],\n      getRadius: 1000\n    })\n  ];\n\n  return <APIProvider apiKey=\"<google_maps_api_key>\">\n    <DeckGL\n      initialViewState={{\n        longitude: 0.45,\n        latitude: 51.47,\n        zoom: 11\n      }}\n      controller\n      layers={layers}\n    >\n      <Map mapId=\"<google_maps_id>\" />\n    </DeckGL>\n  </APIProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Binary Data for Point Geometries in TypeScript\nDESCRIPTION: Demonstrates the TypeScript structure (`BinaryPointFeature`) for representing Point and MultiPoint geometries in the flat binary format for `deck.gl`. It includes a flat `positions` array (interleaved coordinates) and associated feature properties, requiring types from `@loaders.gl/schema`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {BinaryPointFeature} from '@loaders.gl/schema';\n\ndata.points = {\n  type: 'Point',\n  positions: {value: Float32Array([x0, y0, x1, y1, x2, y2, ...]), size: 2}, // Use size=2 for xy and size=3 for xyz\n  // featureIds\n  // globalFeatureIds\n  // numericProps\n  // properties\n} as BinaryPointFeature\n```\n\n----------------------------------------\n\nTITLE: Populating the Custom Picking Color Attribute in a deck.gl Layer (JS)\nDESCRIPTION: This snippet demonstrates the `calculatePickingColors` update function for the custom picking attribute. It iterates through the layer's `data` prop, encodes a unique picking color for each object using `this.encodePickingColor(index)`, and populates the attribute's `value` buffer with the R, G, B components of the color.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/picking.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLayer extends Layer {\n\n  ...\n\n  calculatePickingColors(attribute) {\n      const {data} = this.props;\n      const {value} = attribute;\n\n      let i = 0;\n      for (const object of data) {\n        const pickingColor = this.encodePickingColor(i);\n        value[i * 3] = pickingColor[0];\n        value[i * 3 + 1] = pickingColor[1];\n        value[i * 3 + 2] = pickingColor[2];\n        i++;\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FillStyleExtension with GeoJsonLayer in JavaScript\nDESCRIPTION: Demonstrates importing and applying the FillStyleExtension to a GeoJsonLayer. It configures standard layer props alongside extension-specific props like `fillPatternAtlas`, `fillPatternMapping`, `getFillPattern`, `getFillPatternScale`, and `getFillPatternOffset` to enable pattern fills. Requires `@deck.gl/layers` and `@deck.gl/extensions` dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fill-style-extension.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {FillStyleExtension} from '@deck.gl/extensions';\n\nconst layer = new GeoJsonLayer({\n  id: 'geojson-layer',\n  data: GEOJSON,\n\n  // props from GeoJsonLayer\n  getFillColor: [255, 0, 0],\n  getLineColor: [0, 0, 0],\n  getLineWidth: 10,\n\n  // props added by FillStyleExtension\n  fillPatternAtlas: './pattern.png',\n  fillPatternMapping: './pattern.json',\n  getFillPattern: f => 'hatch',\n  getFillPatternScale: 1,\n  getFillPatternOffset: [0, 0],\n\n  // Define extensions\n  extensions: [new FillStyleExtension({pattern: true})]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing QuadbinTileLayer in a React App (TSX)\nDESCRIPTION: Demonstrates how to use QuadbinTileLayer within a DeckGL React component. It shows importing necessary components, fetching data using `quadbinTilesetSource` with CARTO credentials, creating a layer instance with data and a fill color accessor, and rendering it.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/quadbin-tile-layer.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {QuadbinTileLayer, quadbinTilesetSource} from '@deck.gl/carto';\n\nfunction App({viewState}) {\n  const data = quadbinTilesetSource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    tableName: 'carto-demo-data.demo_tilesets.quadbin'\n  });\n\n  const layer = new QuadbinTileLayer({\n    data,\n    getFillColor: d => d.properties.color\n  })\n\n  return <DeckGL viewState={viewState} layers={[layer]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deck.gl GreatCircleLayer with TypeScript Types\nDESCRIPTION: Illustrates the use of TypeScript with Deck.gl's GreatCircleLayer to create strongly typed flight route visualizations. Defines a Flight type specifying the structure of source and target points with names and coordinates as longitude-latitude tuples. The GreatCircleLayer is instantiated with this type parameter, ensuring typed access to data attributes in accessor functions. The layer configuration mirrors the JavaScript example including colors, line width, data source URL, and interaction. A Deck instance is created similarly with initial view parameters, controller, and typed tooltip function receiving PickingInfo for type safety. Requires installation of @deck.gl/core and @deck.gl/geo-layers with TypeScript support.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/great-circle-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {GreatCircleLayer} from '@deck.gl/geo-layers';\n\ntype Flight = {\n  from: {\n    name: string;\n    coordinates: [longitude: number, latitude: number];\n  };\n  to: {\n    name: string;\n    coordinates: [longitude: number, latitude: number];\n  };\n};\n\nconst layer = new GreatCircleLayer<Flight>({\n  id: 'GreatCircleLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/flights.json',\n  \n  getSourcePosition: (d: Flight) => d.from.coordinates,\n  getTargetPosition: (d: Flight) => d.to.coordinates,\n  getSourceColor: [64, 255, 0],\n  getTargetColor: [0, 128, 200],\n  getWidth: 5,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<Flight>) => object && `${object.from.name} to ${object.to.name}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TileLayer and BitmapLayer for Tiled Rendering in deck.gl (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up a TileLayer in deck.gl to fetch and render tiled raster data from a URL template, specifically targeting OpenStreetMap tiles. Dependencies are '@deck.gl/core', '@deck.gl/geo-layers', and '@deck.gl/layers'. The 'renderSubLayers' function uses BitmapLayer to render each tile's image, with bounds calculated from each tile's bounding box. The Deck object is then initialized to display the map at a specified position with interactive controls and custom per-tile tooltips. Expects string tile URLs, supports configuration for zoom and viewport. Each layer must be added to the Deck layers array, and 'pickable' enables tile inspection.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {TileLayer} from '@deck.gl/geo-layers';\nimport {BitmapLayer} from '@deck.gl/layers';\n\nconst layer = new TileLayer({\n  id: 'TileLayer',\n  data: 'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',\n  maxZoom: 19,\n  minZoom: 0,\n\n  renderSubLayers: props => {\n    const {boundingBox} = props.tile;\n\n    return new BitmapLayer(props, {\n      data: null,\n      image: props.data,\n      bounds: [boundingBox[0][0], boundingBox[0][1], boundingBox[1][0], boundingBox[1][1]]\n    });\n  },\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({tile}) => tile && `x:${tile.index.x}, y:${tile.index.y}, z:${tile.index.z}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Directional Light Shadows using LightingEffect in deck.gl\nDESCRIPTION: This JavaScript snippet demonstrates how to configure ambient and directional lights for shadow casting, group them within a `LightingEffect`, and apply this effect to a deck.gl instance along with enabling shadow casting/receiving on layers using the `shadowEnabled` prop. It requires deck.gl core components like `AmbientLight`, `DirectionalLight`, `LightingEffect`, `Deck`, and relevant layers like `SolidPolygonLayer`. The `_shadow: true` flag on `DirectionalLight` instances enables shadow casting for that light, while `shadowEnabled: true` on a layer makes it participate in shadow rendering (casting and receiving).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/shadow-for-directional-lights.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n\nconst dirLight0 = new DirectionalLight({\n  color: [255, 255, 255],\n  intensity: 1.0,\n  direction: [10, -20, -30],\n  _shadow: true\n});\n\nconst dirLight1 = new DirectionalLight({\n  color: [255, 255, 255],\n  intensity: 1.0,\n  direction: [-10, -20, -30],\n  _shadow: true\n});\n\nconst lightingEffect = new LightingEffect({\n  ambientLight,\n  dirLight0,\n  dirLight1\n});\nconst deckgl = new Deck({\n  canvas: 'my-deck-canvas',\n  effects: [lightingEffect],\n  layers: [\n    // building layer\n    new SolidPolygonLayer({\n      shadowEnabled: true,\n      ...\n    }),\n    // ground layer\n    new SolidPolygonLayer({\n      shadowEnabled: true,\n      ...\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ColumnLayer JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a `ColumnLayer` in JavaScript using deck.gl. It sets up the necessary imports, defines layer properties (id, data source, disk resolution, extrusion, radius, elevation scale, color, position, and picking capability) and initializes a deck with view state, controller and tooltips. Dependencies: @deck.gl/core, @deck.gl/layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/column-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\nconst layer = new ColumnLayer({\n  id: 'ColumnLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/hexagons.json',\n  diskResolution: 12,\n  extruded: true,\n  radius: 250,\n  elevationScale: 5000,\n  getElevation: d => d.value,\n  getFillColor: d => [48, 128, d.value * 255, 255],\n  getPosition: d => d.centroid,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `height: ${object.value * 5000}m`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering PathLayer in React using deck.gl with TypeScript Types\nDESCRIPTION: Illustrates a React functional component that renders a DeckGL map with a PathLayer showing extruded polylines. It uses deck.gl's React bindings and types for PickingInfo. The data and accessors are similarly defined with a typed BartLine interface, converting hex colors to RGB and extracting paths. The component returns DeckGL with initial viewport parameters, interactive controller, tooltip configuration, and the PathLayer instance in layers. This example requires React, @deck.gl/react, @deck.gl/core, and @deck.gl/layers packages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/path-layer.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {PathLayer} from '@deck.gl/layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype BartLine = {\n  name: string;\n  color: string;\n  path: [longitude: number, latitude: number][];\n};\n\nfunction App() {\n  const layer = new PathLayer<BartLine>({\n    id: 'PathLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-lines.json',\n\n    getColor: (d: BartLine) => {\n      const hex = d.color;\n      // convert to RGB\n      return hex.match(/[0-9a-f]{2}/g).map(x => parseInt(x, 16));\n    },\n    getPath: (d: BartLine) => d.path,\n    getWidth: 100,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<BartLine>) => object && object.name}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: React example: overlaying deck.gl with MapLibre in TypeScript/JSX\nDESCRIPTION: This React snippet shows how to overlay deck.gl layers on a MapLibre map using 'react-map-gl' and '@deck.gl/mapbox' with an interleaved layer. It defines a React component that manages the overlay and map, rendering a scatterplot layer. Requires dependencies '@deck.gl/mapbox', '@deck.gl/layers', 'react-map-gl/maplibre'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/base-maps/using-with-maplibre.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport {Map, useControl} from 'react-map-gl/maplibre';\nimport {MapboxOverlay} from '@deck.gl/mapbox';\nimport {DeckProps} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction DeckGLOverlay(props: DeckProps) {\n  const overlay = useControl<MapboxOverlay>(() => new MapboxOverlay(props));\n  overlay.setProps(props);\n  return null;\n}\n\nfunction App() {\n  const layers = [\n    new ScatterplotLayer({\n      id: 'deckgl-circle',\n      data: [{position: [0.45, 51.47]}],\n      getPosition: d => d.position,\n      getFillColor: [255, 0, 0, 100],\n      getRadius: 1000,\n      beforeId: 'watername_ocean'\n    })\n  ];\n\n  return (\n    <Map\n      initialViewState={{\n        longitude: 0.45,\n        latitude: 51.47,\n        zoom: 11\n      }}\n      mapStyle=\"https://basemaps.cartocdn.com/gl/positron-gl-style/style.json\"\n    >\n      <DeckGLOverlay layers={layers} interleaved />\n    </Map>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl with Layers - TypeScript\nDESCRIPTION: This TypeScript code initializes a deck.gl instance and imports ScatterplotLayer and TextLayer from deck.gl/layers, serving as the setup for demonstrating best practices in managing layer visibility.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer, TextLayer} from '@deck.gl/layers';\n\nconst deckInstance = new Deck({...});\n```\n\n----------------------------------------\n\nTITLE: Initializing H3HexagonLayer JavaScript\nDESCRIPTION: This snippet demonstrates initializing and configuring an H3HexagonLayer within a Deck instance in JavaScript.  It sets properties such as `id`, `data`, `extruded`, accessor functions for color and elevation, and interaction options. It requires deck.gl and @deck.gl/geo-layers to be installed.  The example also sets up a Deck instance with initial view state and a tooltip.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-hexagon-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {H3HexagonLayer} from '@deck.gl/geo-layers';\n\nconst layer = new H3HexagonLayer({\n  id: 'H3HexagonLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.h3cells.json',\n\n  extruded: true,\n  getHexagon: d => d.hex,\n  getFillColor: d => [255, (1 - d.count / 500) * 255, 0],\n  getElevation: d => d.count,\n  elevationScale: 20,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `${object.hex} count: ${object.count}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing PathLayer and Deck in JavaScript\nDESCRIPTION: Demonstrates creating a PathLayer instance in JavaScript with data loaded from a remote JSON containing line paths. The snippet converts hex color strings to RGB arrays for coloring paths, defines path data access, sets a constant width, and enables picking for interaction. It then initializes a Deck instance with view parameters centered around coordinates in San Francisco, enabling controller for user interaction, a tooltip function displaying the name of the hovered path object, and adds the created PathLayer. The code depends on @deck.gl/core and @deck.gl/layers packages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/path-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {PathLayer} from '@deck.gl/layers';\n\nconst layer = new PathLayer({\n  id: 'PathLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-lines.json',\n\n  getColor: d => {\n    const hex = d.color;\n    // convert to RGB\n    return hex.match(/[0-9a-f]{2}/g).map(x => parseInt(x, 16));\n  },\n  getPath: d => d.path,\n  getWidth: 100,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && object.name,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl via Script Tags\nDESCRIPTION: Demonstrates how to include pre-bundled deck.gl library files directly in an HTML file using `<script>` tags. It shows options for including the full bundle or separate core and layers bundles from the unpkg CDN.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using ScenegraphLayer with DeckGL in React\nDESCRIPTION: This snippet illustrates how to integrate the ScenegraphLayer into a React application using the @deck.gl/react component. It defines a functional component that creates the layer and renders it within the DeckGL component, demonstrating layer instantiation and view state management in a React context.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/scenegraph-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype BartStation = {\n  name: string;\n  coordinates: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const layer = new ScenegraphLayer<BartStation>({\n    id: 'ScenegraphLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-stations.json',\n    \n    getPosition: (d: BartStation) => d.coordinates,\n    getOrientation: (d: BartStation) => [0, Math.random() * 180, 90],\n    scenegraph: 'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/BoxAnimated/glTF-Binary/BoxAnimated.glb',\n    sizeScale: 500,\n    _animations: {\n      '*': {speed: 5}\n    },\n    _lighting: 'pbr',\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<BartStation>) => object && object.name}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: This snippet defines the Python package dependencies for the project. It specifies the required packages and their minimum versions. This ensures that the project has the necessary libraries to function correctly.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/requirements/requirements.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nipykernel>=5.1.2;python_version>=\"3.4\"\nJinja2>=2.10.1\nnumpy>=1.16.4\n```\n\n----------------------------------------\n\nTITLE: Rendering multiple layers with deck.gl in JavaScript\nDESCRIPTION: This code demonstrates rendering multiple geographic data layers (ScatterplotLayer and TextLayer) using deck.gl's core Deck class. It shows how to compose visualizations by providing an array of layers with their respective data sources and accessor functions, and initializing the view state.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-layers.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer, TextLayer} from '@deck.gl/layers';\n\n// a JSON file of flight locations in the shape of [{lon: -122.39, lat: 37.62, alt: 1800, callSign: 'SKW 3342'}, ...]\nconst flights = '/path/to/data.json';\n\nconst layers = [\n  new ScatterplotLayer({\n    id: 'circles',\n    data: flights,\n    getPosition: d => [d.lon, d.lat, d.alt],\n    getFillColor: [255, 255, 255],\n    getRadius: 3,\n    radiusUnits: 'pixels'\n  }),\n  new TextLayer({\n    id: 'labels',\n    data: flights,\n    getText: d => d.callSign,\n    getPosition: d => [d.lon, d.lat, d.alt],\n    getSize: 12\n  })\n];\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 8\n  },\n  controller: true,\n  layers\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing glTF binary with loaders.gl parse utility for ScenegraphLayer in TypeScript\nDESCRIPTION: This example shows how to directly parse a glTF binary ArrayBuffer into a scenegraph object using the 'parse' function from '@loaders.gl/core' with the 'GLTFLoader' from '@loaders.gl/gltf', both dependencies of deck.gl. The parse function returns a promise resolving to the parsed glTF data, which is passed as the 'scenegraph' property to a ScenegraphLayer instance. Inputs are the binary ArrayBuffer and the GLTFLoader module; output is a ScenegraphLayer capable of rendering the asynchronous parsed model. This method avoids creating a blob URL and allows use of the loader's parsing capabilities directly.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parse} from '@loaders.gl/core';\nimport {GLTFLoader} from '@loaders.gl/gltf';\n\nconst layer = new ScenegraphLayer({\n  scenegraph: parse(arraybuffer, GLTFLoader)\n})\n```\n\n----------------------------------------\n\nTITLE: Project Map Coordinates to World Space in Deck.gl\nDESCRIPTION: Transforms geographic or layer-specific coordinates `[x, y, z]` into world space using viewport and projection parameters. Useful for determining positions in the scene from geographic data, with optional override parameters for viewport, model matrix, and coordinate origins.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction projectPosition(coordinates: number[], params?: object): number[] {\n  // Implementation projects geographic coordinates into world space\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ScenegraphLayer with blob URL from ArrayBuffer in TypeScript\nDESCRIPTION: This snippet demonstrates how to load a glTF model from an ArrayBuffer by first creating a Blob object and then generating a URL from the blob. The resulting blob URL is used as the scenegraph source for a ScenegraphLayer in deck.gl. It requires access to the Web APIs 'Blob' and 'URL.createObjectURL'. The input is an ArrayBuffer representing the binary glTF data, and the output is a configured ScenegraphLayer instance ready to render the model. This approach is straightforward but involves creating an intermediate blob URL to reference the binary data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst blob = new Blob([arraybuffer]);\nconst objectURL = URL.createObjectURL(blob);\n\nconst layer = new ScenegraphLayer({\n  scenegraph: objectURL\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Credentials in deck.gl - TypeScript\nDESCRIPTION: Demonstrates how to load secure API data in deck.gl by customizing fetch options within the loadOptions prop. This example shows setting HTTP method POST, sending a JSON request body, and including an Authorization header with a bearer token. This enables secure data fetching for layers that require authentication.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ScatterplotLayer({\n  data: 'https://secure-server.com/userActivity',\n  loadOptions: {\n    fetch: {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using DataFilterExtension with filterSize 1 (JavaScript)\nDESCRIPTION: Example demonstrating filtering a `ScatterplotLayer` based on a single numeric property (`timestamp`). It uses `getFilterValue` to extract the value, `filterRange` to define the bounds, and sets `filterSize: 1` in the `DataFilterExtension` constructor.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnew ScatterplotLayer({\n  data,\n  getPosition: d => d.coordinates,\n  getFilterValue: d => d.timestamp,\n  filterRange: [0, 1],\n  extensions: [new DataFilterExtension({filterSize: 1})]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating SolidPolygonLayer with TypeScript Types (deck.gl, TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to type polygon data and picking info for a SolidPolygonLayer in deck.gl, ensuring stronger type safety in applications. It defines a ZipCode interface describing the expected data, sets all critical layer properties using type-safe accessor functions, and initializes a Deck instance with typed getTooltip callbacks. Required dependencies are @deck.gl/core and @deck.gl/layers, and TypeScript types like PickingInfo are imported for strict type checks. Input data must match the ZipCode type signature for polygon geometry, population, and area.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/solid-polygon-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {SolidPolygonLayer} from '@deck.gl/layers';\n\ntype ZipCode = {\n  zipcode: number;\n  population: number;\n  area: number;\n  contour: [longitude: number, latitude: number][];\n};\n\nconst layer = new SolidPolygonLayer<ZipCode>({\n  id: 'SolidPolygonLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-zipcodes.json',\n\n  extruded: true,\n  wireframe: true,\n  getPolygon: (d: ZipCode) => d.contour,\n  getElevation: (d: ZipCode) => d.population / d.area / 10,\n  getFillColor: (d: ZipCode) => [d.population / d.area / 60, 140, 0],\n  getLineColor: [80, 80, 80],\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<ZipCode>) => object && `${object.zipcode}\\nPopulation: ${object.population}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Deck Properties with setProps (JavaScript)\nDESCRIPTION: Updates one or more properties of the Deck instance. This method allows for partial updates without recreating the entire instance. The snippet shows the basic syntax for calling `setProps` with an object containing the properties to update.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeck.setProps({...});\n```\n\n----------------------------------------\n\nTITLE: Optimized Accessor Update with updateTriggers (TypeScript)\nDESCRIPTION: Illustrates the efficient use of `updateTriggers` in deck.gl. Instead of remapping the data, the original `DATA` is passed, and `updateTriggers: { getRadius: year }` tells the layer to only recalculate the radius when the `year` prop changes, significantly improving performance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction render(year: number) {\n  const layers = [\n    new ScatterplotLayer<CensusTract>({\n      // `data` never changes\n      data: DATA,\n      getPosition: (d: CensusTract) => d.centroid,\n      // radius depends on `year`\n      getRadius: (d: CensusTract) => Math.sqrt(d.populationsByYear[year]),\n      updateTriggers: {\n        // This tells deck.gl to recalculate radius when `year` changes\n        getRadius: year\n      }\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: React component rendering layers with deck.gl in TypeScript\nDESCRIPTION: This React example demonstrates how to encapsulate multiple layers within a functional component using @deck.gl/react. It sets up flight data, creates layered visualizations, and renders a DeckGL component with initial view state and interactivity enabled.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-layers.md#_snippet_4\n\nLANGUAGE: React\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {LayersList} from '@deck.gl/core';\nimport {ScatterplotLayer, TextLayer} from '@deck.gl/layers';\n\ntype Flight = {\n  callSign: string;\n  lon: number;\n  lat: number;\n  alt: number;\n};\n\nfunction App() {\n  // a JSON file of flight locations in the shape of Flight[]\n  const flights = '/path/to/data.json';\n\n  const layers: LayersList = [\n    new ScatterplotLayer<Flight>({\n      id: 'circles',\n      data: flights,\n      getPosition:  (d: Flight) => [d.lng, d.lat, d.alt],\n      getFillColor: [255, 255, 255],\n      getRadius: 3,\n      radiusUnits: 'pixels'\n    }),\n    new TextLayer<Flight>({\n      id: 'labels',\n      data: flights,\n      getText: (d: Flight) => d.callSign,\n      getPosition: (d: Flight) => [d.lng, d.lat, d.alt],\n      getSize: 12\n    })\n  ];\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.8,\n      zoom: 8\n    }}\n    controller\n    layers={layers} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using TextLayer with React (TypeScript)\nDESCRIPTION: Illustrates integrating `TextLayer` within a React application using the `@deck.gl/react` wrapper component (`DeckGL`). It defines the data type (`BartStation`), creates the `TextLayer` instance with typed accessors and configuration, and renders it using the `DeckGL` component, including tooltip setup via `getTooltip` prop.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {} from '@deck.gl/layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype BartStation = {\n  name: string;\n  coordinates: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const layer = new TextLayer<BartStation>({\n    id: 'TextLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-stations.json',\n\n    getPosition: (d: BartStation) => d.coordinates,\n    getText: (d: BartStation) => d.name,\n    getAlignmentBaseline: 'center',\n    getColor: [255, 128, 0],\n    getSize: 16,\n    getTextAnchor: 'middle',\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<BartStation>) => object && object.name}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using VectorTileLayer in a React application with deck.gl\nDESCRIPTION: This React code demonstrates how to import, instantiate, and render a VectorTileLayer within a DeckGL component, configured to visualize specific vector data from CARTO. It requires dependencies: deck.gl and @deck.gl/carto, and showcases property settings like point radius, line color, fill color, and line width.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/vector-tile-layer.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {VectorTileLayer, vectorTableSource} from '@deck.gl/carto';\n\nfunction App({viewState}) {\n  const data = vectorTableSource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    tableName: 'carto-demo-data.demo_tables.chicago_crime_sample',\n  });\n\n  const layer = new VectorTileLayer({\n    data,\n    pointRadiusMinPixels: 2,\n    getLineColor: [0, 0, 0, 200],\n    getFillColor: [238, 77, 90],\n    lineWidthMinPixels: 1\n  });\n\n  return <DeckGL viewState={viewState} layers={[layer]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing S2Layer - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to initialize an S2Layer in a deck.gl application, including type definitions. The code sets up an S2Layer to render S2 cell data, specifying data source, styling, and interaction properties. The example uses the Deck and S2Layer classes from deck.gl and defines a custom data type.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/s2-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {S2Layer} from '@deck.gl/geo-layers';\n\ntype DataType = {\n  token: string;\n  value: number;\n};\n\nconst layer = new S2Layer<DataType>({\n  id: 'S2Layer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.s2cells.json',\n  \n  extruded: true,\n  getS2Token: (d: DataType) => d.token,\n  getFillColor: (d: DataType) => [d.value * 255, (1 - d.value) * 255, (1 - d.value) * 128],\n  getElevation: (d: DataType) => d.value,\n  elevationScale: 1000,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<DataType>) => object && `${object.token} value: ${object.value}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck.gl for Accessor Updates (TypeScript)\nDESCRIPTION: Provides the setup for examples demonstrating `updateTriggers`. It includes imports, type definitions (`CensusTract`), placeholder data (`DATA`), and a `Deck` instance, focusing on scenarios where only specific accessors need updating.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype CensusTract = {\n  centroid: [longitude: number, latitude: number];\n  populationsByYear: {[year: number]: number};\n};\nconst DATA: CensusTract[] = [...];\n\nconst deckInstance = new Deck({...});\n```\n\n----------------------------------------\n\nTITLE: Constructing a MapboxOverlay Instance (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates the construction of a new MapboxOverlay instance with props. The overlay is compatible with most Deck props, except for context creation and camera state options, which are managed internally. Dependencies include '@deck.gl/mapbox' and a correct MapboxOverlayProps object. When passing interleaved: true, deck.gl layers can be interleaved with Mapbox base map layers. Input is a MapboxOverlayProps object, and output is an overlay object ready to be used with map.addControl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mapbox/mapbox-overlay.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MapboxOverlay} from '@deck.gl/mapbox';\nimport type {MapboxOverlayProps} from '@deck.gl/mapbox';\n\nnew MapboxOverlay(props: MapboxOverlayProps);\n```\n\n----------------------------------------\n\nTITLE: Initializing ScenegraphLayer and Deck in TypeScript\nDESCRIPTION: This snippet shows the TypeScript implementation for initializing the ScenegraphLayer and a deck.gl instance. It includes type definitions for the data objects (BartStation) and picking information (PickingInfo), demonstrating type-safe usage of accessors and event handlers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/scenegraph-layer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\n\ntype BartStation = {\n  name: string;\n  coordinates: [longitude: number, latitude: number];\n};\n\nconst layer = new ScenegraphLayer<BartStation>({\n  id: 'ScenegraphLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-stations.json',\n  \n  getPosition: (d: BartStation) => d.coordinates,\n  getOrientation: (d: BartStation) => [0, Math.random() * 180, 90],\n  scenegraph: 'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/BoxAnimated/glTF-Binary/BoxAnimated.glb',\n  sizeScale: 500,\n  _animations: {\n    '*': {speed: 5}\n  },\n  _lighting: 'pbr',\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<BartStation>) => object && object.name,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies via npm\nDESCRIPTION: Provides the necessary npm commands to install deck.gl. Users can either install the main `deck.gl` package or install the core, layers, and extensions packages individually.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/brushing-extension.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/extensions\n```\n\n----------------------------------------\n\nTITLE: Animating Data with pydeck in Python\nDESCRIPTION: This snippet animates the scatterplot over time by iterating through years and updating the data displayed by the ScatterplotLayer. It filters the DataFrame based on the 'opening_date' column, updating the displayed data each loop.  It uses IPython.display and ipywidgets for the header to display the current year. It introduces a `time.sleep(0.2)` for the animation delay.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/02 - Scatterplots.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfor y in range(1971, 2020):\n    scatterplot.data = df[df['opening_date'] <= str(y)]\n    year = y\n    # Reset the header to display the year\n    display_el.value = '<h1>{}</h1>'.format(year)\n    r.update()\n    time.sleep(0.2)\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies - npm\nDESCRIPTION: This snippet shows how to install the necessary dependencies for deck.gl using npm. The command `npm install deck.gl` installs the main deck.gl package.  Alternatively, `npm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers` allows for the installation of specific core modules.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/s2-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing FlyToInterpolator in deck.gl - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the FlyToInterpolator class from the @deck.gl/core package and instantiate it with a configuration object. The options parameter controls aspects of the animation, including 'curve', 'speed', 'screenSpeed', and 'maxDuration'; these affect how the camera transitions between view states. The resulting instance is used as a transition interpolator in deck.gl layers or views to create smooth geographic fly-to animations. Requires deck.gl core module to be installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/fly-to-interpolator.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {FlyToInterpolator} from '@deck.gl/core';\n\nnew FlyToInterpolator({speed: 2});\n```\n\n----------------------------------------\n\nTITLE: Rendering a BitmapLayer with deck.gl (JavaScript)\nDESCRIPTION: This snippet demonstrates how to render a BitmapLayer using deck.gl with JavaScript. It initializes a Deck instance with a BitmapLayer, specifying the image URL, bounds, and pickable property. The snippet also sets the initial view state, enables the controller, and defines a tooltip that displays the pixel information.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/bitmap-layer.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {BitmapLayer} from '@deck.gl/layers';\n\nconst layer = new BitmapLayer({\n  id: 'BitmapLayer',\n  bounds: [-122.519, 37.7045, -122.355, 37.829],\n  image: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-districts.png',\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({bitmap}) => bitmap && `${bitmap.pixel}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: PolygonLayer Initialization with TypeScript\nDESCRIPTION: This TypeScript code snippet illustrates creating a PolygonLayer in deck.gl using type definitions for data.  It sets up the layer with a remote data source, accessors for polygon coordinates, elevation, and colors, with the goal of visualizing polygons with elevation and customized styling. Additionally, it uses a PickingInfo object for the getTooltip prop.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/polygon-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\ntype ZipCode = {\n  zipcode: number;\n  population: number;\n  area: number;\n  contour: [longitude: number, latitude: number][];\n};\n\nconst layer = new PolygonLayer<ZipCode>({\n  id: 'PolygonLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-zipcodes.json',\n\n  getPolygon: (d: ZipCode) => d.contour,\n  getElevation: (d: ZipCode) => d.population / d.area / 10,\n  getFillColor: (d: ZipCode) => [d.population / d.area / 60, 140, 0],\n  getLineColor: [255, 255, 255],\n  getLineWidth: 20,\n  lineWidthMinPixels: 1,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<ZipCode>) => object && `${object.zipcode}\\nPopulation: ${object.population}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Efficient Incremental Data Loading - TypeScript\nDESCRIPTION: This TypeScript code provides an efficient approach to incremental data loading in deck.gl. Instead of concatenating data, it creates a new layer for each chunk. This way, only the new layer's buffers need to be generated when new data arrives, preventing unnecessary recalculations and improving performance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nlet dataChunks: DataType[][] = [];\nlet chunk: DataType[];\nwhile (chunk = await fetchNextChunk()) {\n  dataChunks.push(chunk);\n  render();\n}\n\nfunction render() {\n  const layers = dataChunks.map((chunk: DataType[], chunkIndex: number) =>\n    new ScatterplotLayer<DataType>({\n      // Important: each layer must have a consistent & unique id\n      id: `points-${chunkIndex}`,\n      // If we have 10 100,000-row chunks already loaded and a new one arrive,\n      // the first 10 layers will see no prop change\n      // only the 11th layer's buffers need to be generated\n      data: chunk,\n      getPosition: (d: DataType) => d.position\n    });\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ColumnLayer TypeScript\nDESCRIPTION: This code snippet shows how to create a `ColumnLayer` using TypeScript in deck.gl. It defines a `DataType` type, declares the `ColumnLayer` and configures its properties. It imports necessary modules from `@deck.gl/core` and `@deck.gl/layers`. Includes deck initialization with initial view state, controller, and tooltip. Dependencies: @deck.gl/core, @deck.gl/layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/column-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  value: number;\n  centroid: [longitude: number, latitude: number];\n};\n\nconst layer = new ColumnLayer<DataType>({\n  id: 'ColumnLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/hexagons.json',\n  diskResolution: 12,\n  extruded: true,\n  radius: 250,\n  elevationScale: 5000,\n  getElevation: (d: DataType) => d.value,\n  getFillColor: (d: DataType) => [48, 128, d.value * 255, 255],\n  getPosition: (d: DataType) => d.centroid,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<DataType>) => object && `height: ${object.value * 5000}m`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing a ScatterplotLayer in JavaScript\nDESCRIPTION: This snippet demonstrates creating a deck.gl ScatterplotLayer instance in JavaScript to visualize geographical points with custom properties such as position, color, and radius. It highlights the key properties needed to configure the layer, including data source and accessor functions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-layers.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst layer = new ScatterplotLayer({\n  id: 'bart-stations',\n  data: [\n    {name: 'Colma', passengers: 4214, coordinates: [-122.466233, 37.684638]},\n    {name: 'Civic Center', passengers: 24798, coordinates: [-122.413756,37.779528]},\n    // ...\n  ],\n  stroked: false,\n  filled: true,\n  getPosition: d => d.coordinates,\n  getRadius: d => Math.sqrt(d.passengers),\n  getFillColor: [255, 200, 0]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing GeoJsonLayer with DataFilterExtension (JavaScript)\nDESCRIPTION: Demonstrates how to apply the DataFilterExtension to a GeoJsonLayer in JavaScript. It shows importing necessary modules, configuring standard layer props alongside extension-specific props (`getFilterValue`, `filterRange`), and adding the extension instance to the layer's `extensions` array. This example filters features based on the `timeOfDay` property within the range 12:00 to 13:00 (represented in seconds).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {DataFilterExtension} from '@deck.gl/extensions';\n\nconst layer = new GeoJsonLayer({\n  id: 'geojson-layer',\n  data: GEOJSON,\n\n  // props from GeoJsonLayer\n  getFillColor: [160, 160, 180],\n  getLineColor: [0, 0, 0],\n  getLineWidth: 10,\n\n  // props added by DataFilterExtension\n  getFilterValue: f => f.properties.timeOfDay,  // in seconds\n  filterRange: [43200, 46800],  // 12:00 - 13:00\n\n  // Define extensions\n  extensions: [new DataFilterExtension({filterSize: 1})]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Layers with Deck.setProps in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to update deck.gl layers using a Deck instance and updating its props with new layer instances. It utilizes `ScatterplotLayer` and `TextLayer` to represent flight data fetched from a hypothetical server, with explicit type definitions for the flight data. The `update` function, called with `setTimeout`, simulates real-time data updates.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-layers.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck, LayersList} from '@deck.gl/core';\nimport {ScatterplotLayer, TextLayer} from '@deck.gl/layers';\n\ntype Flight = {\n  callSign: string;\n  lon: number;\n  lat: number;\n  alt: number;\n};\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 8\n  },\n  controller: true\n});\n\nupdate();\n\nasync function update() {\n  // `queryServer` is a hypothetical function that contacts a server to fetch a list of flight locations\n  const flights: Flight[] = await queryServer({time: Date.now()});\n\n  deckInstance.setProps({\n    layers: [\n      new ScatterplotLayer<Flight>({\n        id: 'circles',\n        data: flights,\n        getPosition: (d: Flight) => [d.lng, d.lat, d.alt],\n        getFillColor: [255, 0, 0],\n        getRadius: 3,\n        radiusUnits: 'pixels'\n      }),\n      new TextLayer<Flight>({\n        id: 'labels',\n        data: flights,\n        getText: (d: Flight) => d.callSign,\n        getPosition: (d: Flight) => [d.lng, d.lat, d.alt],\n        getSize: 12\n      })\n    ]\n  });\n\n  // refresh again after 60 seconds\n  setTimeout(update, 60000);\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example: Type-Safe LineLayer Configuration in TypeScript\nDESCRIPTION: This snippet illustrates how to configure a LineLayer in TypeScript using type definitions for data objects, enhancing code safety and autocompletion. It defines a BartSegment type, assigns data from a URL, and sets accessor functions with explicit types for color, source, and target positions, along with layer initialization within a Deck instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/line-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {LineLayer} from '@deck.gl/layers';\n\ntype BartSegment = {\n  inbound: number;\n  outbound: number;\n  from: {\n    name: string;\n    coordinate: [longitude: number, latitude: number];\n  };\n  to: {\n    name: string;\n    coordinate: [longitude: number, latitude: number];\n  };\n};\n\nconst layer = new LineLayer<BartSegment>({\n  id: 'LineLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-segments.json',\n  getColor: (d: BartSegment) => [Math.sqrt(d.inbound + d.outbound), 140, 0],\n  getSourcePosition: (d: BartSegment) => d.from.coordinates,\n  getTargetPosition: (d: BartSegment) => d.to.coordinates,\n  getWidth: 12,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<BartSegment>) => object && `${object.from.name} to ${object.to.name}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DeckRenderer with Scatterplot Layer (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a DeckRenderer instance and integrate it into an ArcGIS SceneView. It configures the SceneView, creates a DeckRenderer with a ScatterplotLayer, and adds the renderer to the SceneView using the ArcGIS API.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/arcgis/deck-renderer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {DeckRenderer} from '@deck.gl/arcgis';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport ArcGISMap from '@arcgis/core/Map';\nimport SceneView from '@arcgis/core/views/SceneView';\nimport * as externalRenderers from '@arcgis/core/views/3d/externalRenderers';\n\nconst sceneView = new SceneView({\n  container: 'viewDiv',\n  map: new ArcGISMap({\n    basemap: 'dark-gray-vector'\n  }),\n  camera: {\n    position: {x: -74, y: 40.65, z: 5000},\n    heading: 180,\n    tilt: 30\n  },\n  viewingMode: 'local'\n});\n\nconst renderer = new DeckRenderer(sceneView, {\n  layers: [\n    new ScatterplotLayer({\n      data: [\n        {position: [0.119, 52.205]}\n      ],\n      getPosition: d => d.position,\n      getColor: [255, 0, 0],\n      radiusMinPixels: 20\n    })\n  ]\n});\n\nexternalRenderers.add(sceneView, renderer);\n```\n\n----------------------------------------\n\nTITLE: Initializing ColumnLayer React\nDESCRIPTION: This code snippet demonstrates using `ColumnLayer` within a React component using the `DeckGL` component provided by deck.gl. The `DataType` type is defined to specify the data structure. It sets up the layer and configures its properties. Includes initial view state, a controller and tooltip. Dependencies: react, @deck.gl/react, @deck.gl/layers, @deck.gl/core,  and the associated typings.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/column-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {ColumnLayer} from '@deck.gl/layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype DataType = {\n  value: number;\n  centroid: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const layer = new ColumnLayer<DataType>({\n    id: 'ColumnLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/hexagons.json',\n    diskResolution: 12,\n    extruded: true,\n    radius: 250,\n    elevationScale: 5000,\n    getElevation: (d: DataType) => d.value,\n    getFillColor: (d: DataType) => [48, 128, d.value * 255, 255],\n    getPosition: (d: DataType) => d.centroid,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<DataType>) => object && `height: ${object.value * 5000}m`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring getPath Accessor with XY Coordinate Format in TypeScript\nDESCRIPTION: Shows setting a custom getPath accessor returning a flat typed array of vertex coordinates, specifying the positionFormat prop as 'XY' to inform the PathLayer that each vertex contains only x and y components. This example applies to performance-sensitive or preprocessed data scenarios requiring precise path coordinate input formats. It depends on TypeScript and PathLayerProps.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/path-layer.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew PathLayer<{vertices: Float32Array}>({\n  getPath: d => d.vertices, // [x0, y0, x1, y1, x2, y2, ...]\n  positionFormat: 'XY'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating H3TileLayer Instance via deck.carto Namespace in JavaScript\nDESCRIPTION: Illustrates instantiating an H3TileLayer object from the globally loaded deck.gl carto module. This snippet is relevant when including deck.gl via CDN scripts and using the global namespace rather than ES module imports.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/h3-tile-layer.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nnew deck.carto.H3TileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Constructing a deck.gl View instance\nDESCRIPTION: Creates a new 'View' object with optional parameters such as position, size, controller, view state, and clear options. Used to define how a particular view of data should be rendered and interacted with.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/view.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst view = new View({id, x, y, width, height, ...});\n```\n\n----------------------------------------\n\nTITLE: Rendering Tile Maps in Multiple Views - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates rendering tile maps in multiple views using separate MVTLayer instances for each view.  A `layerFilter` ensures each layer is rendered only in its designated viewport. This approach is recommended for layers with expensive operations like data fetching or aggregation. It depends on @deck.gl/core and @deck.gl/geo-layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, MapView} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\n\nconst deck = new Deck<[MapView, MapView]>({\n  // ...\n  views: [\n    new MapView({id: 'main', controller: true}),\n    new MapView({id: 'minimap', x: 10, y: 10, width: 300, height: 200})\n  ],\n  layers: [\n    new MVTLayer({\n      id: 'tiles-for-main',\n      // ...\n    }),\n    new MVTLayer({\n      id: 'tiles-for-minimap',\n      // ...\n    })\n  ],\n  layerFilter: ({layer, viewport}) => {\n    return layer.id === `tiles-for-${viewport.id}`;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Color Aggregation Options in HexagonLayer Using TypeScript\nDESCRIPTION: This TypeScript snippet provides two alternative approaches for customizing color aggregation in HexagonLayer instances. The first example uses a CPU-only getColorValue function to define custom aggregation logic operating on an array of points. The second example demonstrates GPU-compatible methods by specifying getColorWeight per data object along with a predefined aggregation operation such as COUNT or MEAN. Proper choice depends on the aggregation needs and performance considerations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/hexagon-layer.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Option A: use getColorValue (CPU only)\nconst layer = new HexagonLayer<BikeRack>({\n  //...\n  getColorValue: (points: BikeRack[]) => points.length\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Option B: use getColorWeight and colorAggregation (CPU or GPU)\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getColorWeight: 1,\n  colorAggregation: 'COUNT'\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Option A: use getColorValue (CPU only)\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getColorValue: (points: BikeRack[]) => {\n    // Calculate mean value\n    return points.reduce((sum: number, p: BikeRack) => sum += p.SPACES, 0) / points.length;\n  }\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Option B: use getColorWeight and colorAggregation (CPU or GPU)\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getColorWeight: (point: BikeRack) => point.SPACES,\n  colorAggregation: 'MEAN'\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Tooltip (JavaScript)\nDESCRIPTION: This snippet demonstrates rendering a custom tooltip in JavaScript by creating a DOM element, positioning it based on mouse coordinates, and updating its content on hover.  It involves creating a `tooltip` div element, setting its style properties (position, zIndex, pointerEvents), and appending it to the document body.  The `updateTooltip` function is called on the `onHover` event of the ScatterplotLayer to update the tooltip's position and text content.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst tooltip = document.createElement('div');\ntooltip.style.position = 'absolute';\ntooltip.style.zIndex = 1;\ntooltip.style.pointerEvents = 'none';\ndocument.body.append(tooltip);\n\nfunction updateTooltip({object, x, y}) {\n  if (object) {\n    tooltip.style.display = 'block';\n    tooltip.style.left = `${x}px`;\n    tooltip.style.top = `${y}px`;\n    tooltip.innerText = object.message;\n  } else {\n    tooltip.style.display = 'none';\n  }\n}\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.45,\n    latitude: 37.78,\n    zoom: 12\n  },\n  controller: true,\n  layers: [\n    new ScatterplotLayer({\n      data: [\n        {position: [-122.45, 37.78], message: 'Hover over me'}\n      ],\n      getPosition: d => d.position,\n      getRadius: 1000,\n      getFillColor: [255, 255, 0],\n      // Required to enable picking\n      pickable: true,\n      // Update tooltip position and content\n      onHover: updateTooltip\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and Importing Tile3DLayer - Bash and TypeScript\nDESCRIPTION: Provides installation instructions and minimal usage examples for deck.gl and Tile3DLayer via npm and script tags in HTML. The snippet includes shell commands to install the deck.gl library or its modules individually and usage examples to instantiate Tile3DLayer using TypeScript and standard JavaScript globals in browser environments.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-3d-layer.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/mesh-layers @deck.gl/geo-layers\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\nimport type {Tile3DLayerProps} from '@deck.gl/geo-layers';\n\nnew Tile3DLayer<TileDataT>(...props: Tile3DLayerProps<TileDataT>[]);\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/mesh-layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.Tile3DLayer({});\n```\n\n----------------------------------------\n\nTITLE: Using ClipExtension with GeoJsonLayer - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the ClipExtension with a GeoJsonLayer in deck.gl. It imports the necessary modules, creates a GeoJsonLayer instance, and applies the ClipExtension with specified clipBounds to limit the rendered area.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/clip-extension.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {ClipExtension} from '@deck.gl/extensions';\n\nconst layer = new GeoJsonLayer({\n  // Natural Earth countries dataset includes Antarctica, which renders stretched further to south in MapView with viewState normalization disabled\n  data: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_admin_0_countries.geojson',\n  // clip rendered layer by Mercator bounds\n  extensions: [new ClipExtension()],\n  clipBounds: [-180, -85.051129, 180, 85.051129],\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Data Filter Visibility in deck.gl Vertex Shader with GLSL\nDESCRIPTION: This GLSL vertex shader snippet illustrates how to use the new 'filter' shader module's function 'filter_setVisibility' with the vertex attribute 'instanceFilterValue'. It sets the visibility state of each vertex based on the filtered value, enabling the GPU to efficiently cull or display vertices according to filter criteria passed from the layer props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/data-filter-rfc.md#_snippet_2\n\nLANGUAGE: GLSL\nCODE:\n```\nattribute float instanceFilterValue;\n\nvoid main() {\n    ...\n    filter_setVisibility(instanceFilterValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Selective control feature enabling in deck.gl (TypeScript)\nDESCRIPTION: Configures specific control features with type safety, disabling double-click zoom and enabling touch rotate in TypeScript. Dependencies include '@deck.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst deckInstance = new Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: {doubleClickZoom: false, touchRotate: true}\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Objects with Deck.pickMultipleObjects (React)\nDESCRIPTION: This snippet demonstrates how to directly call the picking engine using `deckRef.current?.pickMultipleObjects` within a React component to query multiple overlapping objects under the mouse pointer. It makes use of a ref to access the DeckGL instance. The `onClick` event handler retrieves the x and y coordinates of the click event relative to the container and passes them to `pickMultipleObjects` along with a radius and depth to control the picking area and the number of objects to retrieve. The results, which are an array of `PickingInfo` objects, are then logged to the console.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_31\n\nLANGUAGE: react\nCODE:\n```\nimport React, {useRef, useCallback} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {PickingInfo} from '@deck.gl/core';\n\nfunction App() {\n  const deckRef = useRef<DeckGL>();\n\n  const onClick = useCallback((evt: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Get mouse position relative to the containing div\n    const containerRect = evt.currentTarget.getBoundingClientRect();\n    const x = evt.clientX - containerRect.left;\n    const y = evt.clientY = containerRect.top;\n    // Query up to 5 overlapping objects under the pointer\n    const pickInfos: PickingInfo[] = deckRef.current?.pickMultipleObjects({x, y, radius: 1, depth: 5});\n    console.log(pickInfo);\n  }, [])\n\n  return <div onClick={onClick}>\n    <DeckGL ref={deckRef} ... />\n  </div>;\n```\n\n----------------------------------------\n\nTITLE: Loading deck.gl Pre-bundled Scripts in HTML\nDESCRIPTION: This snippet contains HTML script tags for loading deck.gl and its modules from the unpkg CDN. Users can choose to load the entire deck.gl bundle or selected submodules for finer control and reduced payload. No dependencies except internet connection and a compliant browser. Useful for integrating deck.gl without a build process or in demo/standalone single-page apps.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-layer.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing GeoJsonLayer with DataFilterExtension (TypeScript)\nDESCRIPTION: Provides a TypeScript example for applying the DataFilterExtension to a GeoJsonLayer. It includes type definitions (`PropertiesType`) and uses generics for the layer and extension props (`DataFilterExtensionProps`). It demonstrates importing modules, configuring layer and extension props (`getFilterValue`, `filterRange`), and adding the extension. This example filters features based on the `timeOfDay` property.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {DataFilterExtension, DataFilterExtensionProps} from '@deck.gl/extensions';\nimport type {Feature, Geometry} from 'geojson';\n\ntype PropertiesType = {\n  timeOfDay: number;\n};\n\nconst layer = new GeoJsonLayer<\n  PropertiesType,\n  DataFilterExtensionProps<Feature<Geometry, PropertiesType>>\n>({\n  id: 'geojson-layer',\n  data: GEOJSON,\n\n  // props from GeoJsonLayer\n  getFillColor: [160, 160, 180],\n  getLineColor: [0, 0, 0],\n  getLineWidth: 10,\n\n  // props added by DataFilterExtension\n  getFilterValue: (f: Feature<Geometry, PropertiesType>) => f.properties.timeOfDay, // in seconds\n  filterRange: [43200, 46800], // 12:00 - 13:00\n\n  // Define extensions\n  extensions: [new DataFilterExtension({filterSize: 1})]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleMapsOverlay with deck.gl and Google Maps API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a Google Map instance and integrate deck.gl visualizations via the GoogleMapsOverlay class from the @deck.gl/google-maps module. It shows importing dependencies, creating a map with specific options (mapTypeId, center, zoom, tilt), instantiating GoogleMapsOverlay with a GeoJsonLayer, and attaching the overlay to the Google Map. This snippet requires the Google Maps JavaScript API and deck.gl libraries, and illustrates the primary usage pattern for adding data visualization layers on top of Google Maps.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.0/google-maps-integration.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {GoogleMapsOverlay} from '@deck.gl/google-maps';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\n// Create map\nconst map = new google.maps.Map(document.getElementById('map'), {\n  mapTypeId: 'hybrid',\n  center: { lat: 40, lng: -100 },\n  zoom: 5,\n  tilt: 0\n});\n\n// Create overlay instance\nconst overlay = new GoogleMapsOverlay({\n  layers: [\n    new GeoJsonLayer({\n      ...\n    })\n  ]\n});\n// Add overlay to map\noverlay.setMap(map);\n```\n\n----------------------------------------\n\nTITLE: Creating HeatmapLayer and Deck instance in TypeScript\nDESCRIPTION: This snippet shows how to create a HeatmapLayer and initialize a deck.gl instance using TypeScript. It includes a type definition for the data objects (`BikeRack`) to ensure type safety for data accessors.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/heatmap-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {HeatmapLayer} from '@deck.gl/aggregation-layers';\n\ntype BikeRack = {\n  ADDRESS: string;\n  SPACES: number;\n  COORDINATES: [longitude: number, latitude: number];\n};\n\nconst layer = new HeatmapLayer<BikeRack>({\n  id: 'HeatmapLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n  aggregation: 'SUM',\n  getPosition: (d: BikeRack) => d.COORDINATES,\n  getWeight: (d: BikeRack) => d.SPACES,\n  radiusPixels: 25\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a HexagonLayer Visualization with pydeck in Python\nDESCRIPTION: This code snippet demonstrates how to create and render a spatial hexagon layer visualization using pydeck in Python. It loads UK car accident data from a CSV URL, defines a HexagonLayer with specific visual parameters, sets the initial view state for the map, and renders the visualization to an HTML file. Dependencies include the pydeck library and deck.gl as the underlying visualization framework.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pydeck as pdk\n\n# 2014 locations of car accidents in the UK\nUK_ACCIDENTS_DATA = ('https://raw.githubusercontent.com/uber-common/'\n                     'deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv')\n\n# Define a layer to display on a map\nlayer = pdk.Layer(\n    'HexagonLayer',\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,                 \n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Render\nr = pdk.Deck(layers=[layer], initial_view_state=view_state)\nr.to_html('demo.html')\n\n```\n\nLANGUAGE: Python\nCODE:\n```\nr.to_html('demo.html', notebook_display=False)\n```\n\n----------------------------------------\n\nTITLE: Managing view state externally in TypeScript\nDESCRIPTION: Demonstrates maintaining view state with TypeScript type safety, passing it into deck.gl and updating on view change events, supporting external state management approaches. Dependencies include '@deck.gl/core' and '@deck.gl/react'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\n\nconst deckInstance = new Deck({\n  viewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  controller: true,\n  onViewStateChange: ({viewState}) => {\n    deckInstance.setProps({viewState})\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl with camera controls in JavaScript\nDESCRIPTION: Sets up a deck.gl instance with an initial camera position and enables viewport controls for pan, zoom, and rotate, using the controller prop set to true. Dependencies include '@deck.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12,\n  pitch: 0,\n  bearing: 0\n};\n\nconst deckInstance = new Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TileLayer and BitmapLayer for Tiled Rendering in deck.gl (TypeScript)\nDESCRIPTION: This TypeScript example sets up a TileLayer in deck.gl for displaying tiled raster imagery, with type checking for additional safety. It depends on '@deck.gl/core', '@deck.gl/geo-layers', and '@deck.gl/layers', and uses type imports. The TileLayer configuration matches the JavaScript version, with renderSubLayers using BitmapLayer and typed bounds. The Deck instance uses Deck options and appropriately typed getTooltip. All input types are specified, ensuring consistency and error prevention in type-safe development. The code expects string-based tile URLs, numeric zooms, and structured Layer properties.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {TileLayer, TileLayerPickingInfo} from '@deck.gl/geo-layers';\nimport {BitmapLayer} from '@deck.gl/layers';\n\nconst layer = new TileLayer({\n  id: 'TileLayer',\n  data: 'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',\n  maxZoom: 19,\n  minZoom: 0,\n\n  renderSubLayers: props => {\n    const {boundingBox} = props.tile;\n\n    return new BitmapLayer(props, {\n      data: null,\n      image: props.data,\n      bounds: [boundingBox[0][0], boundingBox[0][1], boundingBox[1][0], boundingBox[1][1]]\n    });\n  },\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({tile}: TileLayerPickingInfo) => tile && `x:${tile.index.x}, y:${tile.index.y}, z:${tile.index.z}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting App with Vite - Bash\nDESCRIPTION: This snippet provides the necessary bash commands to install project dependencies using npm or yarn and then start the application using Vite. It outlines the standard development workflow for this example project.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/3d-tiles/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Instantiating deck.gl Layers using `@@type` (JSON)\nDESCRIPTION: Demonstrates a JSON configuration defining a `ScatterplotLayer`. The `@@type` key signals the `JSONConverter` to look up \"ScatterplotLayer\" in its registered `classes` and instantiate it with the provided props (`data`, `getColor`, `getRadius`).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"layers\": [\n    {\n      \"@@type\": \"ScatterplotLayer\",\n      \"data\": ...,\n      \"getColor\": [0, 128, 255],\n      \"getRadius\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing pydeck and pydeck_carto Libraries\nDESCRIPTION: Imports the necessary Python libraries for visualization and CartoLayer support. 'pydeck' is used for visualization, while 'pydeck_carto' adds CartoLayer capabilities. Ensures dependencies are installed before executing.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/hello_world.ipynb#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pydeck as pdk\nimport pydeck_carto as pdkc\n```\n\n----------------------------------------\n\nTITLE: Defining Point Properties (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to store the `properties` field for each feature. It shows how to define a `properties` array. It requires the `BinaryPointFeature` type. It defines properties that can be attached to a point. The output will be a `BinaryPointFeature` object. The properties are defined per-feature.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ndata.points = {\n  type: 'Point',\n  // positions\n  // featureIds\n  // globalFeatureIds\n  // numericProps\n  properties: [{name: 'A'}, {name: 'B'}, ...]\n} as BinaryPointFeature\n```\n\n----------------------------------------\n\nTITLE: Aggregating by Count using getColorValue (HexagonLayer Example)\nDESCRIPTION: This TypeScript snippet, presented within the GridLayer documentation but showing HexagonLayer code, illustrates how to calculate the color value of a cell based on the count of points within it using the `getColorValue` prop. This method requires CPU aggregation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst layer = new HexagonLayer<BikeRack>({\n  //...\n  getColorValue: (points: BikeRack[]) => points.length\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Server Side Rendering with Next.js Dynamic Imports for deck.gl (React JSX)\nDESCRIPTION: Provides a minimal example of isolating deck.gl imports from server-side rendering in Next.js using dynamic import with SSR disabled. The first snippet shows a React component that imports and renders deck.gl's DeckGL with a TextLayer. The second snippet demonstrates how to dynamically import this map component in a Next.js page with `ssr: false` to prevent SSR-related errors caused by ESM modules. Dependencies include Next.js, React, @deck.gl/react, and @deck.gl/layers. Input is the dynamic import configuration; output is a React application that avoids SSR issues while using deck.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-with-react.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {TextLayer} from '@deck.gl/layers';\n\nexport default function Map() {\n  const layers = [\n    new TextLayer({...})\n  ];\n\n  return <DeckGL layers={layers} />\n}\n\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport dynamic from 'next/dynamic';\nconst Map = dynamic(() => import('../components/map'), {ssr: false});\n\nexport default function App() {\n  return <Map />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a pydeck Map with Layers, ViewState, and Widgets in Python\nDESCRIPTION: Configures and renders a complete pydeck map. It defines a `HexagonLayer`, sets up a `ViewState` to control the initial camera position (longitude, latitude, zoom, pitch, bearing) and zoom constraints, adds interactive UI widgets (`CompassWidget`, `ZoomWidget`) with specified placements, and combines these elements into a `pdk.Deck` object (`r`). Finally, it displays the interactive map, typically within a Jupyter environment, using `r.show()`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/01 - Introduction.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlayer = pdk.Layer(\n    'HexagonLayer',\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,                 \n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Add a compass and zoom control\ncompass_widget = pdk.Widget('CompassWidget', placement='top-right')\nzoom_widget = pdk.Widget('ZoomWidget', placement='top-right')\n\n# Combined all of it and render a viewport\nr = pdk.Deck(layers=[layer], initial_view_state=view_state, widgets=[compass_widget, zoom_widget])\nr.show()\n```\n\n----------------------------------------\n\nTITLE: Structure of Pydeck `on_view_state_change` Event Payload in Python\nDESCRIPTION: Defines the dictionary structure returned as the payload when the map's view state (pan, zoom, pitch, bearing) changes. Contains information about the new viewport dimensions (`width`, `height`), center coordinates (`latitude`, `longitude`), zoom level, pitch, bearing, altitude, zoom/pitch constraints, and the coordinates of the northwest (`nw`) and southeast (`se`) corners.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/event_handling.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\n    'type': 'deck-view-state-change-event',\n    'data': {\n        'width': int,\n        'height': int,\n        'latitude': float,\n        'longitude': float,\n        'zoom': float,\n        'bearing': float,\n        'pitch': float,\n        'altitude': float,\n        'maxZoom': float,\n        'minZoom': float\n        'maxPitch': float,\n        'minPitch': float,\n        'nw': [float, float],\n        'se': [float, float]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Layer Visibility Toggle - TypeScript\nDESCRIPTION: This TypeScript code implements an efficient approach for toggling layer visibility in deck.gl. It uses the `visible` prop to show or hide layers without removing them from the scene. The layers' internal states are retained in memory, allowing for instant re-rendering when visibility is toggled back on.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nfunction render(layerVisibility: {\n  circles: boolean;\n  labels: boolean;\n}) {\n  const layers = [\n    // when visibility is off, this layer's internal states will be retained in memory, making turning it back on instant\n    new ScatterplotLayer({\n      id: 'circles',\n      visible: layerVisibility.circles,\n      // ...\n    }),\n    new TextLayer({\n      id: 'labels',\n      visible: layerVisibility.labels,\n      // ...\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck.gl GreatCircleLayer in JavaScript\nDESCRIPTION: Demonstrates creating a GreatCircleLayer instance using JavaScript to render flight routes as great circle arcs on a map. The snippet imports necessary Deck.gl modules, defines the data source from a remote JSON file, specifies how to extract source and target positions from each data object, sets source and target colors, line width, and enables interaction via pickable property. It then initializes a Deck instance with an initial camera view, enables controller for user interaction, sets a tooltip to display route information on hover, and attaches the layer. Prerequisites include installing Deck.gl core and geo-layers packages and a compatible environment supporting ES modules.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/great-circle-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {GreatCircleLayer} from '@deck.gl/geo-layers';\n\nconst layer = new GreatCircleLayer({\n  id: 'GreatCircleLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/flights.json',\n  \n  getSourcePosition: d => d.from.coordinates,\n  getTargetPosition: d => d.to.coordinates,\n  getSourceColor: [64, 255, 0],\n  getTargetColor: [0, 128, 200],\n  getWidth: 5,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `${object.from.name} to ${object.to.name}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl React Modules with npm (bash)\nDESCRIPTION: This snippet shows the commands to install deck.gl's React integration via npm. It provides two installation options: the all-in-one deck.gl package or separate core and React packages. These command lines are prerequisites for using deck.gl React components in a project environment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/react\n```\n\n----------------------------------------\n\nTITLE: Finalizing Deck Instance (JavaScript)\nDESCRIPTION: Frees all WebGL and internal resources associated with the Deck instance. This method should be called when the Deck instance is no longer needed to prevent memory leaks. The snippet shows the simple method call.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeck.finalize()\n```\n\n----------------------------------------\n\nTITLE: Enabling Picking with ScatterplotLayer (TypeScript)\nDESCRIPTION: This snippet shows how to enable picking for a ScatterplotLayer in TypeScript. It includes type definitions for the data and the picking info. The `pickable` prop is set to `true` and `onHover` and `onClick` callbacks are specified to handle hover and click events, logging the picking info and event details.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {PickingInfo} from '@deck.gl/core';\nimport {MjolnirEvent} from 'mjolnir.js';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [longitude: number, latitude: number];\n};\n\nconst layer = new ScatterplotLayer<DataType>({\n  data: [\n    {position: [-122.45, 37.78]}\n  ],\n  getPosition: (d: DataType) => d.position,\n  getRadius: 1000,\n  getFillColor: [255, 255, 0],\n  // Required to enable picking\n  pickable: true\n  // Callback when the pointer enters or leaves an object\n  onHover: (info: PickingInfo<DataType>, event: MjolnirEvent) => console.log('Hovered:', info, event),\n  // Callback when the pointer clicks on an object\n  onClick: (info: PickingInfo<DataType>, event: MjolnirEvent) => console.log('Clicked:', info, event)\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with Multiple Views (React)\nDESCRIPTION: This React snippet shows how to initialize a DeckGL component with multiple views using the `views` prop. It uses two `MapView` instances positioned side-by-side, and uses the useState hook to manage view state and the onViewStateChange callback to synchronize camera movement.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapView, MapViewState} from '@deck.gl/core';\n\nfunction App() {\n  const [viewState, setViewState] = useState<MapViewState>({\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  });\n\n  return <DeckGL\n    views={[\n      new MapView({id: 'left', x: 0, width: '50%', controller: true}),\n      new MapView({id: 'right', x: '50%', width: '50%', controller: true})\n    ]}\n    viewState={viewState}\n    onViewStateChange={evt => setViewState(evt.viewState)}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using BrushingExtension with ScatterplotLayer in JavaScript\nDESCRIPTION: Demonstrates how to import `ScatterplotLayer` and `BrushingExtension`, then configure a `ScatterplotLayer` instance to use the extension. It shows setting brushing-specific props (`brushingEnabled`, `brushingRadius`) and adding the extension instance to the layer's `extensions` array.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/brushing-extension.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {BrushingExtension} from '@deck.gl/extensions';\n\nconst layer = new ScatterplotLayer({\n  id: 'points',\n  data: POINTS,\n\n  // props from ScatterplotLayer\n  getPosition: d => d.position,\n  getRadius: d => d.radius,\n\n  // props added by BrushingExtension\n  brushingEnabled: true,\n  brushingRadius: 100000,\n\n  // Define extensions\n  extensions: [new BrushingExtension()]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating GeoJsonLayer in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates importing GeoJsonLayer and its props interface, then instantiating a typed GeoJsonLayer with custom properties. This sets up the pattern for statically typed usage, showing how to configure properties using GeoJsonLayerProps and generics. Dependencies include '@deck.gl/layers' and appropriate generics for GeoJSON feature typing. Intended for use in a TypeScript environment or when extending/customizing layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport type {GeoJsonLayerProps} from '@deck.gl/layers';\n\nnew GeoJsonLayer<FeaturePropertiesT>(...props: GeoJsonLayerProps<FeaturePropertiesT>[]);\n```\n\n----------------------------------------\n\nTITLE: Using TerrainLayer with Pre-bundled deck.gl Scripts in HTML\nDESCRIPTION: HTML script tags for loading pre-bundled deck.gl dependencies from CDN, and JavaScript code for creating a TerrainLayer without module imports.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/terrain-layer.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/mesh-layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.TerrainLayer({});\n```\n\n----------------------------------------\n\nTITLE: Rendering a BitmapLayer with deck.gl (TypeScript)\nDESCRIPTION: This snippet demonstrates how to render a BitmapLayer using deck.gl with TypeScript. It initializes a Deck instance with a BitmapLayer, specifying the image URL, bounds, and pickable property. The snippet also sets the initial view state, enables the controller, and defines a tooltip that displays the pixel information, including type definitions for the picking info.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/bitmap-layer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {BitmapLayer, BitmapLayerPickingInfo} from '@deck.gl/layers';\n\nconst layer = new BitmapLayer({\n  id: 'BitmapLayer',\n  bounds: [-122.519, 37.7045, -122.355, 37.829],\n  image: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-districts.png',\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({bitmap}: BitmapLayerPickingInfo) => bitmap && `${bitmap.pixel}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl ScatterplotLayer with Custom Filter Logic in JavaScript\nDESCRIPTION: This snippet shows how to use the 'getFilterValue' prop in a ScatterplotLayer to apply a custom visibility filter without modifying the original data. The function returns 1 if the item should be visible and 0 otherwise, effectively toggling the display state. This approach bypasses the need to recompute all layer attributes, improving performance when filtering data dynamically.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/data-filter-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ScatterplotLayer({\n    ...\n    getFilterValue: d => isVisible(d) ? 1 : 0\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing LightingEffect in deck.gl (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to create a `LightingEffect` in deck.gl. It involves creating ambient and directional lights, configuring their properties, and then adding the effect to the `Deck` instance's `effects` array. This setup allows the visualization to render 3D geometries with lighting.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-effects.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, AmbientLight, SunLight, LightingEffect} from '@deck.gl/core';\n\n// create an ambient light\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n// create directional light from the sun\nconst directionalLight = new SunLight({\n  timestamp: Date.UTC(2024, 7, 1, 22),\n  color: [255, 255, 255],\n  intensity: 1.0,\n});\n// create lighting effect with light sources\nconst lightingEffect = new LightingEffect({ambientLight, directionalLight});\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 11,\n    pitch: 45\n  },\n  controller: true,\n  // Add lighting effect to deck\n  effects: [lightingEffect]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Pre-Bundled Deck.gl Geo Layers via CDN Scripts in HTML\nDESCRIPTION: Shows how to include Deck.gl's core and geo layers in a web page by linking pre-built UMD bundles from the UNPKG content delivery network. These <script> tags allow quick usage of the GreatCircleLayer and related modules without a build step. The snippet mentions the option to use the combined deck.gl bundle or separate core, layers, and geo-layers scripts, supporting various deployment scenarios. Users can instantiate GreatCircleLayer with the global 'deck' object once the scripts are loaded.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/great-circle-layer.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Transforming Data with getSubLayerRow in a Composite Layer\nDESCRIPTION: Demonstrates how to transform user data for sublayers while maintaining references to the original data using getSubLayerRow method.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/composite-layers.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nclass MyCompositeLayer extends CompositeLayer {\n  updateState({props, changeFlags}) {\n    if (changeFlags.dataChanged) {\n      // data to pass to the sublayer\n      const subLayerData = [];\n      /*\n       * input data format:\n         [\n           {position: [-122.45, 37.78], timestamps: [0, 1, 4, 7, 8]},\n           {position: [-122.43, 38.01], timestamps: [2, 4]},\n           ...\n         ]\n       * data format to pass to sublayer:\n         [\n           {timestamp: 0},\n           {timestamp: 1},\n           {timestamp: 4},\n           {timestamp: 7},\n           ...\n         ]\n       */\n      props.data.forEach((object, index) => {\n        for (const timestamp of object.timestamps) {\n          // `getSubLayerRow` decorates each data row for the sub layer with a reference to the original object and index\n          subLayerData.push(this.getSubLayerRow({\n            timestamp\n          }, object, index));\n        }\n      });\n\n      this.setState({subLayerData});\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sublayers rendered by TextLayer in deck.gl\nDESCRIPTION: Details the sublayers that the TextLayer renders, including the character icons and optional background for text blocks, and explains their roles.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nThe TextLayer renders the following sublayers:\n\n* `characters` - an `IconLayer` rendering all the characters.\n* `background` - the background for each text block, if `background: true`.\n```\n\n----------------------------------------\n\nTITLE: Advanced Styling of ClusterTileLayer Clusters in TypeScript\nDESCRIPTION: Provides a TypeScript example demonstrating how to style clusters dynamically. It defines a type for the expected properties within each quadbin cell, sets clustering options (`getWeight`, `getPosition`), and uses `GeoJsonLayer` accessors (`pointType`, `getIcon`, `getIconSize`) to customize the appearance based on aggregated data (`longitude_count`) and global statistics (`stats`). Features conditional icon logic based on cluster point count.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/cluster-tile-layer.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Data present in quadbin cell\ntype PropertiesType = {\n  longitude_count: number; // count of points in cell\n  longitude_average: number;\n  latitude_average: number;\n  icon_any: string;\n};\n\nconst layer = new ClusterTileLayer<PropertiesType>({\n  data, // Defined using `quadbinTableSource` or similar\n\n  // Clustering props\n  getWeight: d => d.properties.longitude_count,\n  getPosition: d => [d.properties.longitude_average, d.properties.latitude_average];\n  \n  // Style\n  pointType: 'icon',\n  iconAtlas,\n  iconMapping,\n  getIcon: d => d.longitude_count > 1 ? 'cluster' : d.icon_any,\n  getIconSize: d => 20 + 80 * d.properties.longitude_count / d.properties.stats.longitude_count\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Data Loaders deck.gl JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `loaders` prop to enable support for custom data formats. It shows importing `CSVLoader` from `@loaders.gl/csv` and providing it in an array to the `loaders` prop when instantiating a layer (`HexagonLayer` in this example), allowing deck.gl to load and parse data from a CSV file URL.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {CSVLoader} from '@loaders.gl/csv';\n\nconst layer = new HexagonLayer({\n  data: './data.csv',\n  loaders: [CSVLoader]\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Camera Transition with FlyToInterpolator React\nDESCRIPTION: This React example implements the same camera transition functionality as the JavaScript and TypeScript examples using `@deck.gl/react` and `@deck.gl/core`.  It uses the `useState` hook to manage the `initialViewState` and the `useCallback` hook to define the `flyToCity` function. The `flyToCity` function updates the state with `transitionInterpolator` and `transitionDuration` to smoothly transition to the selected city on button clicks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapViewState, FlyToInterpolator} from '@deck.gl/core';\n\nconst CITIES: {[name: string]: MapViewState} = {\n  SF: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 10\n  },\n  NYC: {\n    longitude: -74.0,\n    latitude: 40.7,\n    zoom: 10\n  }\n}\n\nfunction App() {\n  const [initialViewState, setInitialViewState] = useState<MapViewState>(CITIES.SF);\n\n  const flyToCity = useCallback(evt => {\n    setInitialViewState({\n      ...CITIES[evt.target.id],\n      transitionInterpolator: new FlyToInterpolator({speed: 2}),\n      transitionDuration: 'auto'\n    });\n  }, [])\n\n  return <>\n    <DeckGL\n      initialViewState={initialViewState}\n      controller\n    />;\n    {Object.keys(CITIES).map(name => <button id={name} onClick={flyToCity}>{name}</button>)}\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fitting Viewport to Data Layer Bounds using WebMercatorViewport (TypeScript)\nDESCRIPTION: Illustrates how to use WebMercatorViewport's fitBounds method in a TypeScript deck.gl application to automatically adjust the view state to fit a data layer's geographic extent after the layer has loaded. Dependencies include @deck.gl/core, @deck.gl/layers, and Deck from deck.gl. Parameters: ScatterplotLayer for data, and Deck instance for state management. The code checks for layer readiness on render, computes new bounding box view parameters using fitBounds, and updates the deck instance to center the map. Inputs are layer data and deck instance, output is a modified map view after layer load.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/web-mercator-viewport.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, WebMercatorViewport} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst layer = new ScatterplotLayer({...});\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -100,\n    latitude: 40,\n    zoom: 4\n  },\n  controller: true,\n  layers: [layer],\n  onAfterRender\n});\n\nlet hasLoaded = false;\nfunction onAfterRender() {\n  if (!hasLoaded && layer.isLoaded) {\n    hasLoaded = true;\n\n    const viewport = layer.context.viewport as WebMercatorViewport;\n    const {longitude, latitude, zoom} = viewport.fitBounds(layer.getBounds());\n    deckInstance.setProps({\n      initialViewState: {longitude, latitude, zoom}\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TerrainLayer with a Single Elevation Image in TypeScript\nDESCRIPTION: TypeScript implementation of creating a TerrainLayer with a single elevation image. Uses the same configuration as the JavaScript example but with proper type definitions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/terrain-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {TerrainLayer} from '@deck.gl/geo-layers';\n\nconst layer = new TerrainLayer({\n  elevationDecoder: {\n    rScaler: 2,\n    gScaler: 0,\n    bScaler: 0,\n    offset: 0\n  },\n  // Digital elevation model from https://www.usgs.gov/\n  elevationData: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/terrain.png',\n  texture: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/terrain-mask.png',\n  bounds: [-122.5233, 37.6493, -122.3566, 37.8159],\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from CARTO with vectorTableSource\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch data from a data warehouse table using the `vectorTableSource` function from the `@deck.gl/carto` module. It requires an access token, connection name, and table name as parameters. The function returns a Promise that resolves to the requested data. The fetched data can be used with deck.gl layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {vectorTableSource} from '@deck.gl/carto';\nconst data = vectorTableSource({\n  accessToken: 'XXX',\n  connectionName: 'carto_dw',\n  tableName: 'carto-demo-data.demo_tables.chicago_crime_sample'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using yarn (bash)\nDESCRIPTION: This bash snippet provides the command to install project dependencies using yarn. This command downloads and installs all required packages, similar to npm, using the yarn package manager. This step ensures all project dependencies, including those for deck.gl and Mapbox, are present.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/mapbox/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Rendering a BitmapLayer with deck.gl (React)\nDESCRIPTION: This snippet demonstrates how to render a BitmapLayer using deck.gl with React. It defines a functional component that initializes a BitmapLayer and renders it using the DeckGL component. The snippet also sets the initial view state, enables the controller, and defines a tooltip that displays the pixel information, including type definitions for the picking info.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/bitmap-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {BitmapLayer} from '@deck.gl/layers';\nimport type {BitmapLayerPickingInfo} from '@deck.gl/layers';\n\nfunction App() {\n  const layer = new BitmapLayer({\n    id: 'BitmapLayer',\n    bounds: [-122.519, 37.7045, -122.355, 37.829],\n    image: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-districts.png',\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({bitmap}: BitmapLayerPickingInfo) => bitmap && `${bitmap.pixel}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Package with NPM\nDESCRIPTION: This command installs the complete deck.gl package using npm. It includes all deck.gl features and their dependencies. The --save flag adds deck.gl as a dependency to your project's package.json file.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl --save\n```\n\n----------------------------------------\n\nTITLE: Adding the Picking Shader Module to a luma.gl Model (JS)\nDESCRIPTION: This snippet shows how to enable the built-in picking functionality when creating a custom luma.gl `Model` within a deck.gl layer. The `picking` shader module from `@deck.gl/core` must be included in the `modules` array passed to the `Model` constructor. This injects the necessary GLSL uniforms and functions for color picking.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/picking.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Model} from '@luma.gl/core';\nimport {picking} from '@deck.gl/core';\n\nnew Model(gl, {\n  ...\n  vs: CUSTOM_VS,\n  fs: CUSTOM_FS,\n  modules: [picking]\n});\n```\n\n----------------------------------------\n\nTITLE: Preloading Web Fonts for deck.gl TextLayer (HTML)\nDESCRIPTION: Demonstrates how to preload a specific web font resource using the `<link rel=\"preload\">` tag and define its properties using the `@font-face` CSS rule. This technique helps ensure the font is downloaded early, making it available when the deck.gl TextLayer attempts to render, thus avoiding fallback to default system fonts due to lazy loading.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" href=\"https://fonts.gstatic.com/s/materialicons/v90/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2\" as=\"font\" crossorigin=\"anonymous\" type=\"font/woff2\" />\n<style>\n  @font-face {\n    font-family: 'Material Icons';\n    font-style: normal;\n    font-weight: 400;\n    src: url(https://fonts.gstatic.com/s/materialicons/v90/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2) format('woff2');\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Querying Objects with Deck.pickMultipleObjects (JavaScript)\nDESCRIPTION: This snippet demonstrates how to directly call the picking engine using `deckInstance.pickMultipleObjects` in JavaScript to query multiple overlapping objects under the mouse pointer.  The `onClick` event handler retrieves the x and y coordinates of the click event and passes them to `pickMultipleObjects` along with a radius and depth to control the picking area and the number of objects to retrieve.  The results are then logged to the console.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\n\nconst deckInstance = new Deck({\n  // ...\n  onClick: ({x, y}) => {\n    // Query up to 5 overlapping objects under the pointer\n    const pickInfos = deckInstance.pickMultipleObjects({x, y, radius: 1, depth: 5});\n    console.log(pickInfo);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating HeatmapLayer and Deck instance in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a HeatmapLayer and initialize a deck.gl instance in plain JavaScript. It fetches data from a URL, specifies data accessors for position and weight, and sets rendering options like `radiusPixels`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/heatmap-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {HeatmapLayer} from '@deck.gl/aggregation-layers';\n\nconst layer = new HeatmapLayer({\n  id: 'HeatmapLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n  aggregation: 'SUM',\n  getPosition: d => d.COORDINATES,\n  getWeight: d => d.SPACES,\n  radiusPixels: 25\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing PointCloudLayer in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the initialization and usage of PointCloudLayer with type definitions for data accessors. It defines a `DataType` interface and uses it to strongly type the layer's properties, enhancing code safety and maintainability. It imports necessary modules from deck.gl and specifies the type of data being visualized.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/point-cloud-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, COORDINATE_SYSTEM, PickingInfo} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [x: number, y: number, z: number];\n  normal: [nx: number, ny: number, nz: number];\n  color: [r: number, g: number, b: number];\n};\n\nconst layer = new PointCloudLayer<DataType>({\n  id: 'PointCloudLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/pointcloud.json',\n  \n  getColor: (d: DataType) => d.color,\n  getNormal: (d: DataType) => d.normal,\n  getPosition: (d: DataType) => d.position,\n  pointSize: 2,\n  coordinateOrigin: [-122.4, 37.74],\n  coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<DataType>) => object && object.position.join(', '),\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing deck.gl via Pre-Bundled Scripts (HTML)\nDESCRIPTION: This snippet shows script tag inclusions to import deck.gl and its sub-packages from CDN, enabling usage in plain HTML environments without a bundler. It includes versioned URLs for main, core, and layers packages. To initialize a GeoJsonLayer, a new instance is created via the global deck namespace. Dependencies are the CDN-provided scripts, usable in standalone HTML files. There are no explicit inputs or outputs; behavior is determined by script usage. Limitations: browser environment required, and the global 'deck' symbol must be used.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.GeoJsonLayer({});\n```\n\n----------------------------------------\n\nTITLE: DeckGL Render Callback Example\nDESCRIPTION: Demonstrates using a render callback function as a child of `DeckGL`. The callback receives `x`, `y`, `width`, `height`, `viewState`, and `viewport` arguments. The code uses the `viewport.project` method to project a `Marker` component.  The function renders a `Marker` component at a given longitude and latitude based on the viewport.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/deckgl.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n  <DeckGL {...viewState}>\n    {({x, y, width, height, viewState, viewport}) => (\n      <Marker\n        project={viewport.project}\n        longitude={-122.45}\n        latitude={37.8}\n        width={24}\n        height={24} />\n    )}\n  <DeckGL />\n```\n\n----------------------------------------\n\nTITLE: DeckGL and React-Map-GL ContextProvider\nDESCRIPTION: This snippet illustrates the use of `ContextProvider` within `DeckGL` for integration with `react-map-gl`. It imports `DeckGL`, and other necessary components from `react-map-gl`.  The code demonstrates the use of `MapContext.Provider` as `ContextProvider` to pass context values to the children.  Inside `DeckGL` a `NavigationControl` is also placed which relies on the `MapContext` context being present.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/deckgl.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/// Example using react-map-gl v6 controls with deck.gl\n/// To use react-map-gl v7, see https://deck.gl/docs/api-reference/mapbox/mapbox-overlay\nimport {DeckGL} from '@deck.gl/react';\nimport {_MapContext as MapContext, NavigationControl} from 'react-map-gl';\n\n<DeckGL ... ContextProvider={MapContext.Provider}>\n  <div style={NAVIGATION_CONTROL_STYLES}>\n    <NavigationControl />\n  </div>\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Combining Layers, View State, and Custom Tooltip in pydeck - Python\nDESCRIPTION: This comprehensive example demonstrates creating a pydeck visualization with a HexagonLayer, configuring the initial view state and an advanced tooltip using HTML and custom CSS. Dependencies include the pydeck package, a dataset (UK_ACCIDENTS_DATA), and knowledge of the data's structure to use correct template variable names. The workflow builds the layer, viewport, and Deck object, finally rendering the interactive map as HTML with the customized tooltip enabled.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/tooltip.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck as pdk\n\nlayer = pdk.Layer(\n    'HexagonLayer',\n    UK_ACCIDENTS_DATA,\n    get_position='[lng, lat]',\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,\n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Combined all of it and render a viewport\nr = pdk.Deck(\n    layers=[layer],\n    initial_view_state=view_state,\n    tooltip={\n        'html': '<b>Elevation Value:</b> {elevationValue}',\n        'style': {\n            'color': 'white'\n        }\n    }\n)\nr.to_html()\n\n```\n\n----------------------------------------\n\nTITLE: Implementing data accessors in deck.gl GPU Aggregation Layer\nDESCRIPTION: Data accessors determine how the layer extracts position and weight values from input data objects. These functions control how data objects are aggregated and visualized in the cells.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of implementing data accessors\nnew GPUGridLayer({\n  getPosition: d => d.coordinates,  // Get position from each data point\n  getColorWeight: d => d.population, // Use population for color\n  getElevationWeight: d => d.value,  // Use value for elevation\n  // Custom aggregation function for color\n  getColorValue: (objects, {indices, data}) => {\n    return objects.reduce((sum, obj) => sum + obj.value, 0) / objects.length;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Loading deck.gl via Script Tag in HTML\nDESCRIPTION: This snippet shows how to include deck.gl directly in a web page by referencing its bundled JavaScript file from a CDN using a script tag. This method requires only a browser-capable environment and does not require additional build or package management tools. It is suitable for standalone or prototyping scenarios where rapid setup is desired. No advanced configuration or input parameters are necessary; the deck.gl API becomes globally accessible after inclusion.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@latest/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing TileLayer from the Global deck Object (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to create a new TileLayer using the global deck object, which is available when using the browser CDN scripts. No explicit dependencies except the proper script tags. This syntax is used in environments where ES modules or bundlers are not present, allowing TileLayer creation and configuration procedurally in the browser.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-layer.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.TileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Configuring elevation properties in deck.gl GPU Aggregation Layer\nDESCRIPTION: The elevation properties control the 3D extrusion of cells. elevationScaleType determines how values map to height, elevationDomain defines the input range, and elevationRange defines the output height range in meters.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of configuring elevation properties\nnew GPUGridLayer({\n  elevationScaleType: 'linear', // Default value, also supports 'quantile'\n  elevationDomain: [0, 100],    // Min and max values (null = auto)\n  elevationRange: [0, 1000],    // Output range in meters (default)\n  elevationScale: 1,           // Multiplier for elevation values\n  material: {\n    ambient: 0.35,\n    diffuse: 0.6,\n    shininess: 32,\n    specularColor: [30, 30, 30]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: ClipExtension Constructor - JavaScript\nDESCRIPTION: This snippet shows the basic constructor call for the ClipExtension.  It can be directly instantiated with no arguments. Configuration occurs when adding it to a layer's extensions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/clip-extension.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew ClipExtension();\n```\n\n----------------------------------------\n\nTITLE: Initializing LightingEffect in deck.gl (React)\nDESCRIPTION: This React code example shows how to integrate `LightingEffect` within a `DeckGL` component.  It creates ambient and directional lights, constructs a `LightingEffect` with these lights, and passes the effect to the `effects` prop of the `DeckGL` component.  This enables lighting within the deck.gl visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-effects.md#_snippet_1\n\nLANGUAGE: React\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {AmbientLight, SunLight, LightingEffect} from '@deck.gl/core';\n\n// create an ambient light\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\n// create directional light from the sun\nconst directionalLight = new SunLight({\n  timestamp: Date.UTC(2024, 7, 1, 22),\n  color: [255, 255, 255],\n  intensity: 1.0,\n});\n// create lighting effect with light sources\nconst lightingEffect = new LightingEffect({ambientLight, directionalLight});\n\nconst INITIAL_VIEW_STATE: MapViewState = {\n  longitude: -122.4,\n  latitude: 27.8,\n  zoom: 11,\n  pitch: 45\n};\n\nfunction App() {\n  return <DeckGL\n    initialViewState={INITIAL_VIEW_STATE}\n    controller\n    effects={[lightingEffect]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MapView with Repeat Option for Continuous Maps\nDESCRIPTION: Example of how to configure a Deck instance with MapView's repeat option to create a horizontally continuous map with multiple copies of the world, replacing the previous wrapLongitude functionality.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Deck({\n  views: new MapView({repeat: true}),\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies Using npm\nDESCRIPTION: This bash code snippet provides commands for installing deck.gl and its aggregation and core layers packages via npm. It includes both a simple deck.gl package installation and installation of the split scoped packages separately for modular usage. Dependencies installed enable use of HexagonLayer and related layers in JavaScript or TypeScript projects.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/hexagon-layer.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/aggregation-layers\n```\n\n----------------------------------------\n\nTITLE: Using getFrustumPlanes for Culling in deck.gl with JavaScript\nDESCRIPTION: This code snippet shows how to use `getFrustumPlanes` method of a deck.gl `Viewport` to perform view frustum culling. It projects a 3D point to the common space, extracts the frustum planes from the viewport, and checks the point's position against each plane to determine visibility. It relies on `@math.gl/core` for vector operations and the viewport's `projectPosition` method to get coordinates in the common space.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/viewport.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {Vector3} from '@math.gl/core';\n\n// Culling tests must be done in common space\nconst commonPosition = new Vector3(viewport.projectPosition(point));\n\n// Extract frustum planes based on current view.\nconst frustumPlanes = viewport.getFrustumPlanes();\nlet outDir = null;\n\n// Check position against each plane\nfor (const dir in frustumPlanes) {\n  const plane = frustumPlanes[dir];\n  if (commonPosition.dot(plane.normal) > plane.distance) {\n    outDir = dir;\n    break;\n  }\n}\nif (outDir) {\n  console.log(`Point is outside of the ${outDir} plane`);\n} else {\n  console.log('Point is visible');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @deck.gl/widgets from NPM\nDESCRIPTION: Instructions for installing the deck.gl or @deck.gl/widgets package using npm. This allows importing and using the widgets in a deck.gl application.  Run either command to install the necessary packages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/widgets\n```\n\n----------------------------------------\n\nTITLE: Configuring Layer with Worker Data\nDESCRIPTION: This TypeScript snippet demonstrates how to configure a `PointCloudLayer` in the main thread to use attributes generated by a web worker.  It utilizes the data received from the worker, including the point count, positions, and colors, by setting them as attributes. This approach avoids CPU-bound attribute generation and improves performance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n// `data` is received from the worker\nconst layer = new PointCloudLayer({\n  data: {\n    // this is required so that the layer knows how many points to draw\n    length: data.pointCount,\n    attributes: {\n      getPosition: {value: data.positions, size: 3},\n      getColor: {value: data.colors, size: 3},\n    }\n  },\n  // constant accessor works without raw data\n  getNormal: [0, 0, 1]\n});\n```\n\n----------------------------------------\n\nTITLE: React external view state management\nDESCRIPTION: Uses React's useState hook to control view state externally, synchronizing it with deck.gl via props, enabling reactive and external control of camera position. Dependencies include '@deck.gl/react'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapViewState} from '@deck.gl/core';\n\nfunction App() {\n  const [viewState, setViewState] = useState<MapViewState>({\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  });\n\n  return <DeckGL\n    viewState={viewState}\n    controller\n    onViewStateChange={e => setViewState(e.viewState)}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl with camera controls in TypeScript\nDESCRIPTION: Configures a deck.gl instance in TypeScript with strong typing for view state, setting initial camera parameters and enabling the controller for interactivity. Dependencies include '@deck.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, MapViewState} from '@deck.gl/core';\n\nconst INITIAL_VIEW_STATE: MapViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12,\n  pitch: 0,\n  bearing: 0\n};\n\nconst deckInstance = new Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: true\n});\n```\n\n----------------------------------------\n\nTITLE: Static Display of CARTO Map with fetchMap (JavaScript)\nDESCRIPTION: Demonstrates how to fetch a CARTO map by its ID and display it using deck.gl.  It imports the necessary modules from deck.gl and deck.gl/carto, then calls `fetchMap` with the `cartoMapId`. The returned map configuration is then used to instantiate a new `Deck` instance.  Dependencies: `@deck.gl/core`, `@deck.gl/carto`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/fetch-map.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {fetchMap} from '@deck.gl/carto';\n\nconst cartoMapId = 'ff6ac53f-741a-49fb-b615-d040bc5a96b8';\nfetchMap({cartoMapId}).then(map => new Deck(map));\n```\n\n----------------------------------------\n\nTITLE: Installing pydeck for Python\nDESCRIPTION: This command allows users to install the pydeck package, which is a Python binding for deck.gl, using pip. The target environment must have Python and pip available. After installation, pydeck can be imported and used within Python scripts or Jupyter notebooks to build visualizations using deck.gl capabilities. No special environment variables or parameters are required for basic installation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install pydeck\n```\n\n----------------------------------------\n\nTITLE: Installing pydeck using pip (Bash)\nDESCRIPTION: This snippet installs the pydeck Python library via the pip package manager, recommended to be run inside a Python virtual environment for dependency isolation and management. It ensures pydeck is available system-wide or in the current environment for visualization tasks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/installation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pydeck\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Layer Properties in JavaScript\nDESCRIPTION: Defining the default properties for a composite LabeledIconLayer, including shared accessors and specific properties for both icon and text rendering.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/composite-layers.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nLabeledIconLayer.defaultProps = {\n  // Shared accessors\n  getPosition: {type: 'accessor', value: x => x.position},\n  // Icon properties\n  iconAtlas: null,\n  iconMapping: {type: 'object', value: {}, async: true},\n  // Icon accessors\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getIconSize: {type: 'accessor', value: 20},\n  getIconColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  // Text properties\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  // Text accessors\n  getText: {type: 'accessor', value: x => x.text},\n  getTextSize: {type: 'accessor', value: 12}\n  getTextColor: {type: 'accessor', value: [0, 0, 0, 255]}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Views with View States in React\nDESCRIPTION: React implementation of a deck.gl application with multiple views using React hooks. This example uses useState and useCallback to manage view state changes and synchronization between the main view and minimap, with proper TypeScript typing.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_14\n\nLANGUAGE: React\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapView, MapViewState} from '@deck.gl/core';\n\nfunction App() {\n  const [viewStates, setViewStates] = useState<{\n    main: MapViewState;\n    minimap: MapViewState\n  }>({\n    main: {\n      longitude: -122.4,\n      latitude: 37.8,\n      pitch: 30,\n      zoom: 12,\n    },\n    minimap: {\n      longitude: -122.4,\n      latitude: 37.8,\n      zoom: 8\n    }\n  });\n\n  const onViewStateChange = useCallback(({viewId, viewState}: {\n    viewId: 'main' | 'minimap';\n    viewState: MapViewState;\n  }) => {\n    if (viewId === 'main') {\n      // When user moves the camera in the first-person view, the minimap should follow\n      setViewStates(currentViewStates => ({\n        main: viewState,\n        minimap: {\n          ...currentViewStates.minimap,\n          longitude: viewState.longitude,\n          latitude: viewState.latitude\n        }\n      }));\n    } else {\n      // Only allow the user to change the zoom in the minimap\n      setViewStates(currentViewStates => ({\n        main: currentViewStates.main,\n        minimap: {\n          ...currentViewStates.minimap,\n          zoom: viewState.zoom\n        }\n      }));\n    }\n  }, []);\n\n  render() {\n    return <DeckGL\n      views={[\n        new MapView({id: 'main', controller: true}),\n        new MapView({id: 'minimap', x: 10, y: 10, width: 300, height: 200, controller: true})\n      ]}\n      viewState={viewStates}\n      onViewStateChange={onViewStateChange}\n    />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck.gl with SimpleMeshLayer and OBJ Mesh (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create and add a SimpleMeshLayer to a deck.gl instance using pure JavaScript. It loads BART station data and an OBJ mesh from URLs, configuring the layer with accessors for position, color, and orientation. It also sets up basic view state and a tooltip.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/simple-mesh-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {OBJLoader} from '@deck.gl/obj';\n\nconst layer = new SimpleMeshLayer({\n  id: 'SimpleMeshLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-stations.json',\n  \n  getColor: d => [Math.sqrt(d.exits), 140, 0],\n  getOrientation: d => [0, Math.random() * 180, 0],\n  getPosition: d => d.coordinates,\n  mesh: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/humanoid_quad.obj',\n  sizeScale: 30,\n  pickable: true,\n  loaders: [OBJLoader]\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && object.name,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing WMSLayer with Deck in TypeScript\nDESCRIPTION: Shows how to create a WMSLayer instance using a WMS service URL and layer names, and integrate it with a Deck instance in TypeScript. This example highlights the type-safe usage by importing classes from @deck.gl/core and @deck.gl/geo-layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/wms-layer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {_WMSLayer as WMSLayer} from '@deck.gl/geo-layers';\n\nconst layer = new WMSLayer({\n  data: 'https://ows.terrestris.de/osm/service',\n  serviceType: 'wms',\n  layers: ['OSM-WMS']\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 9\n  },\n  controller: true,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Using `@@function` to Call Registered Functions (JSON)\nDESCRIPTION: Shows a JSON configuration where the `getRadius` accessor for a `ScatterplotLayer` uses `@@function` to invoke the registered `calculateRadius` function. Arguments (`base`, `exponent`) for the function are provided within the same JSON object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"layers\": [\n    {\n      \"@@type\": \"ScatterplotLayer\",\n      \"data\": ...,\n      \"getColor\": [0, 128, 255],\n      \"getRadius\": {\n        \"@@function\": \"calculateRadius\",\n        \"base\": 2,\n        \"exponent\": 3\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Instanced Model - JavaScript\nDESCRIPTION: This code shows how to create an instanced model using luma.gl's Model and CubeGeometry classes.  The geometry will be rendered multiple times, making this suitable for drawing large numbers of similar objects. This is done using `isInstanced: true`. It requires importing Model and CubeGeometry from '@luma.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/primitive-layers.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Model, CubeGeometry} from '@luma.gl/core';\n\nexport default class CubeLayer extends Layer {\n  ...\n  _getModel(gl) {\n    return new Model(gl, Object.assign({}, this.getShaders(), {\n      id: this.props.id,\n      geometry: new CubeGeometry(),\n      isInstanced: true\n    }));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiate TerrainExtension (deck.gl)\nDESCRIPTION: This JavaScript code snippet shows the basic instantiation of the TerrainExtension.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/terrain-extension.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew TerrainExtension();\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for deck.gl Example using npm\nDESCRIPTION: This bash snippet demonstrates how to install the necessary dependencies for the deck.gl example project using the npm package manager.  It's crucial to run this command within the project's root directory to install all required packages. The command downloads and installs dependencies specified in the project's `package.json` file.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/heatmap/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing GeoJsonLayer and Deck in deck.gl (TypeScript)\nDESCRIPTION: This TypeScript example defines typed properties for GeoJSON features and demonstrates advanced type safety when configuring GeoJsonLayer. The snippet imports types from both 'geojson' and deck.gl, and builds accessors with explicit type annotations to leverage strong typing for property access and tooltip generation. Inputs are a remote GeoJSON file, typed accessor functions, and map view state, producing a styled, interactive map. Required dependencies include '@deck.gl/core', '@deck.gl/layers', and 'geojson' types. Limitations involve the need for correct typing; improper type definition may result in type errors.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport type {Feature, Geometry} from 'geojson';\n\ntype PropertiesType = {\n  name: string;\n  color: string;\n};\n\nconst layer = new GeoJsonLayer<PropertiesType>({\n  id: 'GeoJsonLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart.geo.json',\n\n  stroked: false,\n  filled: true,\n  pointType: 'circle+text',\n  pickable: true,\n\n  getFillColor: [160, 160, 180, 200],\n  getLineColor: (f: Feature<Geometry, PropertiesType>) => {\n    const hex = f.properties.color;\n    // convert to RGB\n    return hex ? hex.match(/[0-9a-f]{2}/g).map(x => parseInt(x, 16)) : [0, 0, 0];\n  },\n  getText: (f: Feature<Geometry, PropertiesType>) => f.properties.name,\n  getLineWidth: 20,\n  getPointRadius: 4,\n  getTextSize: 12\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<Feature<Geometry, PropertiesType>>) => object && object.properties.name,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Automatically create deck.gl layers configured in CARTO Builder using fetchMap\nDESCRIPTION: This snippet demonstrates how to initialize deck.gl's Deck component with a map fetched from the CARTO platform using its map ID. The fetchMap function retrieves map configuration data, enabling quick setup of CARTO-based visualizations in web applications. Dependencies include '@deck.gl/core' and '@deck.gl/carto'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/overview.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {fetchMap} from '@deck.gl/carto';\n\nconst cartoMapId = 'ff6ac53f-741a-49fb-b615-d040bc5a96b8';\nfetchMap({cartoMapId}).then(map => new Deck(map));\n```\n\n----------------------------------------\n\nTITLE: DirectionalLight Constructor Example - JavaScript\nDESCRIPTION: Example usage of the DirectionalLight constructor, demonstrating how to instantiate the class with color, intensity, and direction parameters. These parameters control the appearance of the light source in the rendered scene.  It relies on the `DirectionalLight` class from the deck.gl library.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/directional-light.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst directionalLight = new DirectionalLight({color, intensity, direction});\n```\n\n----------------------------------------\n\nTITLE: Defining BoundaryQuerySourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `BoundaryQuerySourceOptions` type, used by the `boundaryQuerySource` function.  It includes `tilesetTableName`, `propertiesSqlQuery`, and `queryParameters`. This is used to fetch boundary data by executing SQL queries to fetch the necessary data, including the tileset table name.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\ntype BoundaryQuerySourceOptions = {\n  tilesetTableName: string;\n  propertiesSqlQuery: string;\n  queryParameters?: QueryParameters;\n};\n```\n\n----------------------------------------\n\nTITLE: Result of Constant Resolution using `@@#` (JavaScript)\nDESCRIPTION: Shows the JavaScript object after the `JSONConverter` resolves the `@@#MapController` string. The `controller` property now holds a direct reference to the imported `MapController` class.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  controller: MapController, // MapController class from '@deck.gl/core'\n  layers: [\n    new ScatterplotLayer({\n      data: ...,\n      ...\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Attributes in Web Worker\nDESCRIPTION: This TypeScript code snippet shows how to prepare attributes for a `PointCloudLayer` within a web worker. It flattens the position and color data from `POINT_CLOUD_DATA` into typed arrays suitable for direct use by the GPU. The worker then sends the processed data back to the main thread via `postMessage`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\n// positions can be sent as either float32 or float64, depending on precision requirements\n// point[0].x, point[0].y, point[0].z, point[1].x, point[1].y, point[1].z, ...\nconst positions = new Float64Array(POINT_CLOUD_DATA.flatMap((d: DataType) => d.position));\n// point[0].r, point[0].g, point[0].b, point[1].r, point[1].g, point[1].b, ...\nconst colors = new Uint8Array(POINT_CLOUD_DATA.flatMap((d: DataType) => d.color));\n\n// send back to main thread\npostMessage({pointCount: POINT_CLOUD_DATA.length, positions, colors}, [positions.buffer, colors.buffer]);\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating HeatmapLayer in TypeScript\nDESCRIPTION: This snippet shows the TypeScript import statements and the constructor signature for creating a HeatmapLayer instance, illustrating how to use type hints for layer properties.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/heatmap-layer.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {HeatmapLayer} from '@deck.gl/aggregation-layers';\nimport type {HeatmapLayerProps} from '@deck.gl/aggregation-layers';\n\nnew HeatmapLayer<DataT>(...props: HeatmapLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Optimized Data Filtering with useMemo (React/TSX)\nDESCRIPTION: Presents an optimized React approach using the `useMemo` hook to filter data for `ScatterplotLayer`. The `filteredData` is memoized and only recomputed when the specified dependencies (`settings.minTime`, `settings.maxTime`) change, avoiding unnecessary layer updates.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App({settings}: {\n  settings: Settings;\n}) {\n  const filteredData = React.useMemo(() => {\n    return DATA.filter(d => d.time >= settings.minTime && d.time <= settings.maxTime);\n  }, [settings.minTime, settings.maxTime]);\n\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      data: filteredData,\n      getPosition: (d: DataType) => d.position,\n      getRadius: settings.radius\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Including @deck.gl/widgets as a standalone bundle\nDESCRIPTION: Example shows how to include the deck.gl library and the necessary CSS file directly in an HTML page. This avoids the need for a build system.  Links to CDN hosted files.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/overview.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<link href=\"https://unpkg.com/deck.gl@^9.0.0/dist/stylesheet.css\" rel='stylesheet' />\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/widgets@^9.0.0/dist.min.js\"></script>\n<link href=\"https://unpkg.com/@deck.gl/widgets@^9.0.0/dist/stylesheet.css\" rel='stylesheet' />\n```\n\n----------------------------------------\n\nTITLE: Configuring fetchMap Parameters (JavaScript)\nDESCRIPTION: Shows how to configure the `fetchMap` function using its parameters. It highlights the use of `cartoMapId`, `credentials`, `autoRefresh`, and `onNewData` to customize the map fetching behavior. This snippet doesn't execute anything but demonstrates a configuration pattern. No dependencies are needed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/fetch-map.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = await fetchMap({cartoMapId, credentials, autoRefresh, onNewData});\n```\n\n----------------------------------------\n\nTITLE: Creating a ScatterplotLayer Map with pydeck in Python\nDESCRIPTION: Shows how to change the layer type to `ScatterplotLayer` for the same UK accident data URL used previously. It configures point radius (`get_radius` in meters) and fill color (`get_fill_color` using a Python list representing RGBA values), while retaining other common settings like `get_position` and `auto_highlight`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/layer.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlayer = pdk.Layer(\n    'ScatterplotLayer',     # Change the `type` positional argument here\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    get_radius=1000,          # Radius is given in meters\n    get_fill_color=[180, 0, 200, 140],  # Set an RGBA value for fill\n    pickable=True)\n```\n\n----------------------------------------\n\nTITLE: Reset camera position in JavaScript using FlyToInterpolator\nDESCRIPTION: Provides a mechanism to programmatically change camera position with smooth transition between predefined locations using FlyToInterpolator. Uses '@deck.gl/core' and creates a new view state for camera animation. Dependencies include '@deck.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck, FlyToInterpolator} from '@deck.gl/core';\n\nconst CITIES = {\n  SF: {longitude: -122.4, latitude: 37.8, zoom: 10},\n  NYC: {longitude: -74.0, latitude: 40.7, zoom: 10}\n};\n\nconst deckInstance = new Deck({\n  initialViewState: CITIES.SF,\n  controller: true\n});\n\nfor (const button of document.querySelectorAll('button')) {\n  button.onclick = () => flyToCity(button.id);\n}\n\nfunction flyToCity(name) {\n  deckInstance.setProps({\n    initialViewState: {\n      ...CITIES[name],\n      transitionInterpolator: new FlyToInterpolator({speed: 2}),\n      transitionDuration: 'auto'\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Managing viewState prop and onViewStateChange (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates managing the view state outside of deck.gl, explicitly typing the `INITIAL_VIEW_STATE` as `OrthographicViewState` and specifying the generic type for `Deck`. It uses `viewState` and `onViewStateChange` to create a stateless component. It includes a reset button implementation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, OrthographicView, OrthographicViewState} from '@deck.gl/core';\n\nconst INITIAL_VIEW_STATE: OrthographicViewState = {\n  target: [0, 0, 0],\n  zoom: 1\n};\n\nconst deckInstance = new Deck<OrthographicView>({\n  viewState: INITIAL_VIEW_STATE,\n  controller: true,\n  onViewStateChange: e => {\n    deckInstance.setProps({\n      viewState: e.viewState\n    });\n  }\n});\n\ndocument.getElementById('reset-btn').onclick = () => {\n  deckInstance.setProps({\n    viewState: INITIAL_VIEW_STATE\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: React ScatterplotLayer with radiusScale (Efficient)\nDESCRIPTION: This code renders a `ScatterplotLayer` more efficiently by using `radiusScale` to apply the `radius`. This simplifies the layer's update process and improves performance compared to using a callback in the `getRadius` accessor.  The animation updates `radius` state.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      data,\n      getPosition: (d: DataType) => d.position,\n      getRadius: (d: DataType) => d.size,\n      // This has virtually no cost to update, easily getting 60fps animation\n      radiusScale: radius\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Token Directly in Application Code\nDESCRIPTION: Alternative method for configuring the Mapbox access token by directly setting it in the app.jsx file instead of using environment variables.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/terrain-extension/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Using deck.gl Overlay with react-map-gl (React)\nDESCRIPTION: This React snippet illustrates using the `MapboxOverlay` with the `react-map-gl` library for integrated Mapbox and deck.gl rendering. It uses the `useControl` hook to instantiate the overlay and adds a `ScatterplotLayer`. The `interleaved` prop in the `DeckGLOverlay` component controls the integration mode and is set to `true` in this example. This requires a valid Mapbox access token and a container to render in.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/base-maps/using-with-mapbox.md#_snippet_1\n\nLANGUAGE: React\nCODE:\n```\nimport React from 'react';\nimport {Map, useControl} from 'react-map-gl';\nimport {MapboxOverlay} from '@deck.gl/mapbox';\nimport {DeckProps} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction DeckGLOverlay(props: DeckProps) {\n  const overlay = useControl<MapboxOverlay>(() => new MapboxOverlay(props));\n  overlay.setProps(props);\n  return null;\n}\n\nfunction App() {\n  const layers: [\n    new ScatterplotLayer({\n      id: 'deckgl-circle',\n      data: [\n        {position: [0.45, 51.47]}\n      ],\n      getPosition: d => d.position,\n      getFillColor: [255, 0, 0, 100],\n      getRadius: 1000,\n      beforeId: 'waterway-label' // In interleaved mode render the layer under map labels\n    })\n  ];\n\n  return (\n    <Map\n      initialViewState={{\n        longitude: 0.45,\n        latitude: 51.47,\n        zoom: 11\n      }}\n      mapStyle=\"mapbox://styles/mapbox/light-v9\"\n      mapboxAccessToken=\"<mapbox_access_token>\"\n    >\n      <DeckGLOverlay layers={layers} interleaved />\n    </Map>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using getSubLayerAccessor to Wrap User-Provided Accessors\nDESCRIPTION: Shows how to use getSubLayerAccessor to properly access original data objects when using transformed data in sublayers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/composite-layers.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n  renderLayers() {\n    const {subLayerData} = this.state;\n    const {getPosition, getRadius, getFillColor, getLineColor, getLineWidth, updateTriggers} = this.props;\n\n    return new ScatterplotLayer(props, this.getSubLayerProps({\n      id: 'scatterplot',\n      updateTriggers,\n\n      data: this.state.subLayerData,\n      getPosition: this.getSubLayerAccessor(getPosition),\n      getRadius: this.getSubLayerAccessor(getRadius),\n      getFillColor: this.getSubLayerAccessor(getFillColor),\n      getLineColor: this.getSubLayerAccessor(getLineColor),\n      getLineWidth: this.getSubLayerAccessor(getLineWidth)\n    }));\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies via npm\nDESCRIPTION: Provides the npm commands to install the necessary deck.gl packages. You can either install the monolithic `deck.gl` package or install the scoped packages `@deck.gl/core`, `@deck.gl/layers`, and `@deck.gl/geo-layers` individually.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/wms-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers\n```\n\n----------------------------------------\n\nTITLE: Camera Transition with FlyToInterpolator JavaScript\nDESCRIPTION: This snippet demonstrates how to transition the camera smoothly to different cities using the `FlyToInterpolator`.  It requires `@deck.gl/core`. The `flyToCity` function updates `initialViewState` with transition parameters like `transitionInterpolator` and `transitionDuration` to create a smooth 'fly to' effect.  Uses button click events to trigger the camera transitions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck, FlyToInterpolator} from '@deck.gl/core';\n\nconst CITIES = {\n  SF: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 10\n  },\n  NYC: {\n    longitude: -74.0,\n    latitude: 40.7,\n    zoom: 10\n  }\n}\n\nconst deckInstance = new Deck({\n  initialViewState: CITIES.SF,\n  controller: true\n});\n\nfor (const button of document.querySelectorAll('button')) {\n  button.onclick = () => flyToCity(button.id);\n}\n\nfunction flyToCity(name) {\n  deckInstance.setProps({\n    initialViewState: {\n      ...CITIES[name],\n      transitionInterpolator: new FlyToInterpolator({speed: 2}),\n      transitionDuration: 'auto'\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSONConverter in deck.gl with JavaScript\nDESCRIPTION: Demonstrates how to import and use the JSONConverter class to convert a JSON description into properties for a Deck instance. The example shows importing the component, loading JSON data, configuring the converter with deck.gl layers, and applying the converted properties to a Deck instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/json-converter.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {JSONConverter} from '@deck.gl/json';\n\nimport json from './us-map.json';\n\nconst configuration = {\n  layers: require('@deck.gl/layers')\n};\n\nconst new jsonConverter = new JSONConverter({configuration});\n\nconst deck = new Deck({\n  canvas: 'deck-canvas',\n  json\n});\n\ndeck.setProps(jsonConverter.convert(json));\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for CARTO Source Options\nDESCRIPTION: Defines TypeScript types for configuring CARTO source classes. The base CartoSourceOptions includes required authentication and connection parameters. Specialized option types extend or refine this base to specify parameters for SQL queries, tables, tilesets, and aggregation-level settings. These typings enforce correct parameter passing to CARTO API helper functions and improve developer experience with strong type checking.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/carto-v9-rfc.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CartoSourceOptions = {\n  accessToken: string;\n  apiBaseUrl?: string;\n  clientId?: string;\n  connectionName: string;\n  format?: Format;\n  formatTiles?: TileFormat;\n  headers?: Record<string, string>;\n  mapsUrl?: string;\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CartoQuerySourceOptions = {\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters?: QueryParameters;\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CartoTableSourceOptions = {\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype CartoTilesetSourceOptions = CartoSourceOptions & {\n  tableName: string\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype CartoAggregationOptions = {\n  aggregationExp?: string,\n  aggregationResLevel?: number\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Picking Color in a Custom Vertex Shader (GLSL)\nDESCRIPTION: This GLSL vertex shader snippet demonstrates how to pass the picking color to the fragment shader when using custom shaders with deck.gl's picking system. It declares the `customPickingColors` attribute (populated by the layer's attribute manager) and uses the `picking_setPickingColor` function (provided by the `picking` shader module) to set the color for the current vertex.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/picking.md#_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\nattribute vec3 customPickingColors;\n\nvoid main(void) {\n  ...\n\n  picking_setPickingColor(customPickingColors);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and Extensions Using npm - Bash\nDESCRIPTION: This Bash snippet shows how to install the core deck.gl library and its optional extensions via npm. The first command installs deck.gl as a whole, while the second demonstrates granular installation of the core, layers, and extensions packages for optimized bundle size. Requires Node.js and npm to be available.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/extensions\n```\n\n----------------------------------------\n\nTITLE: Animating LIDAR Frames in Pydeck Using Python\nDESCRIPTION: This snippet animates the LIDAR point cloud visualization by looping through a predefined deque of frame identifiers. In each iteration, it filters the full dataset to the current frame, updates the PointCloudLayer's data, and adjusts the position attribute with an expression to scale and transform the points. The visualization is updated and refreshed every 0.5 seconds, enabling dynamic playback of moving LIDAR frames. Dependencies include pydeck, pandas, time, and collections.deque. The user interaction is limited to using the stop icon to exit the infinite loop.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/04 - Plotting massive data sets.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom collections import deque\n\n# Choose a handful of frames to loop through\nframe_buffer = deque([42, 56, 81, 95])\nprint('Press the stop icon to exit')\nwhile True:\n    current_frame = frame_buffer[0]\n    lidar = all_lidar[all_lidar['source'] == current_frame]\n    r.layers[0].get_position = '@@=[x / 10000, y / 10000, z * 10]'\n    r.layers[0].data = lidar.to_dict(orient='records')\n    frame_buffer.rotate()\n    r.update()\n    time.sleep(0.5)\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with Layer Filter and Views - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to initialize a Deck instance with multiple views (FirstPersonView and MapView) and a layerFilter to control layer visibility.  It creates a layerFilter that hides the 'car' layer in the 'first-person' view. Type definitions for `CarPose` are included.  It depends on @deck.gl/core, @deck.gl/mesh-layers, and @deck.gl/geo-layers.  The `updateCar` function updates the Deck's layers and viewState based on the car's position.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, FirstPersonView, MapView} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {MVTLayer} from '@deck.gl/geo-layers';\n\ntype CarPose = {\n  longitude: number;\n  latitude: number;\n  heading: number;\n};\n\nconst deckInstance = new Deck<[FirstPersonView, MapView]>({\n  views: [\n    new FirstPersonView({id: 'first-person'}),\n    new MapView({id: 'minimap', x: 10, y: 10, width: '20%', height: '20%'})\n  ],\n  layerFilter: ({layer, viewport}) => {\n    if (viewport.id === 'first-person' && layer.id === 'car') {\n      // Do not draw the car layer in the first person view\n      return false;\n    }\n    return true;\n  }\n});\n\n/** Called periodically to update the map with the car's latest position */\nfunction updateCar(carPose: CarPos) {\n  deckInstance.setProps({\n    layers: [\n      new MVTLayer({\n        id: 'base-map',\n        // ...\n      }),\n      new SimpleMeshLayer<CarPose>({\n        id: 'car',\n        mesh: '/path/to/model.obj',\n        data: [carPose],\n        getPosition: (d: CarPose) => [d.longitude, d.latitude, 0],\n        getOrientation: (d: CarPos) => [0, -d.heading * Math.PI / 180, 0]\n      })\n    ],\n    viewState: {\n      'first-person': {\n        longitude: carPos.longitude,\n        latitude: carPos.latitude,\n        bearing: carPos.heading,\n        position: [0, 0, 2]\n      },\n      minimap: {\n        longitude: carPos.longitude,\n        latitude: carPos.latitude,\n        zoom: 10\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using pre-bundled deck.gl scripts in HTML\nDESCRIPTION: Example of including pre-bundled deck.gl scripts in HTML and creating a GridCellLayer instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/grid-cell-layer.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.GridCellLayer({});\n```\n\n----------------------------------------\n\nTITLE: Camera Transition with FlyToInterpolator TypeScript\nDESCRIPTION: This TypeScript snippet mirrors the JavaScript example, providing the same functionality of camera transitions between cities using the `FlyToInterpolator`.  It requires `@deck.gl/core`. The `flyToCity` function, triggered by button clicks, sets the `initialViewState` with transition settings. It's specifically designed for geospatial views to facilitate a 'fly to' camera movement.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, MapViewState, FlyToInterpolator} from '@deck.gl/core';\n\nconst CITIES: {[name: string]: MapViewState} = {\n  SF: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 10\n  },\n  NYC: {\n    longitude: -74.0,\n    latitude: 40.7,\n    zoom: 10\n  }\n}\n\nconst deckInstance = new Deck({\n  initialViewState: CITIES.SF,\n  controller: true\n});\n\nfor (const button of document.querySelectorAll('button')) {\n  (button as HTMLButtonElement).onclick = () => flyToCity(button.id);\n}\n\nfunction flyToCity(name: string) {\n  deckInstance.setProps({\n    initialViewState: {\n      ...CITIES[name],\n      transitionInterpolator: new FlyToInterpolator({speed: 2}),\n      transitionDuration: 'auto'\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Continuous Camera Rotation JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates continuous camera rotation using `LinearInterpolator`. It requires `@deck.gl/core`. The `rotateCamera` function updates `initialViewState`'s bearing and sets `transitionDuration`, `transitionInterpolator` and `onTransitionEnd`. It continuously rotates the camera by incrementing the bearing after each transition ends.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck, LinearInterpolator} from '@deck.gl/core';\n\nlet initialViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12\n};\n\nconst deckInstance = new Deck({\n  initialViewState,\n  controller: true,\n  onLoad: rotateCamera\n});\n\nfunction rotateCamera() {\n  initialViewState = {\n    ...initialViewState,\n    bearing: initialViewState.bearing + 120,\n    transitionDuration: 1000,\n    transitionInterpolator: new LinearInterpolator(['bearing']),\n    onTransitionEnd: rotateCamera\n  };\n  deckInstance.setProps({initialViewState});\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Views for Multi-View Hierarchies in DeckGL - React JSX\nDESCRIPTION: Introduces JSX-based views inside a DeckGL component to simplify multi-view application structure. It shows a MapView component with initialViewState, controller, and an onViewStateChange handler that logs changes. Nested within MapView is a render callback rendering a StaticMap using the provided viewport size and viewState, facilitating encapsulated and composable view management. A separate FirstPersonView component is also included demonstrating multiple independent views. Dependencies include React, deck.gl, MapView and FirstPersonView components, StaticMap from react-map-gl, and controllers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/react-api-rfc.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DeckGL\n  layers={layers}\n>\n  <MapView \n    initialViewState={INITIAL_MAP_VIEW_STATE}\n    onViewStateChange={console.log}\n    controller={MapController}\n  >\n    {({width, height, viewState}) => <StaticMap\n      width={width}\n      height={height}\n      viewState={viewState}\n      mapStyle={mapStyle}\n      mapboxApiAccessToken={mapboxApiAccessToken}\n    />}\n  </MapView>\n\n  <FirstPersonView \n    initialViewState={INITIAL_FIRST_PERSON_VIEW_STATE}\n    onViewStateChange={console.log}\n    controller={FirstPersonController} />\n\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Implementing project_position_fp64 to Compute 64-bit Projected Positions\nDESCRIPTION: This GLSL snippet provides functions for computing the projected position in clip space using 64-bit precision by combining high and low parts of vertex positions. It accepts either a single vec4 or separate vec2 components for position and its low part, outputting an array of two vec2 values representing the high and low components of the projection. Essential for precise projection calculations in high-precision shaders.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/project64.md#_snippet_1\n\nLANGUAGE: GLSL\nCODE:\n```\nvoid project_position_fp64(vec4 position_fp64, out vec2 out_val[2])\nvoid project_position_fp64(vec2 position, vec2 position64Low, out vec2 out_val[2])\n```\n\n----------------------------------------\n\nTITLE: Aggregating Elevation by Max using getElevationWeight and elevationAggregation (HexagonLayer Example)\nDESCRIPTION: This TypeScript snippet, also presented within the GridLayer documentation but showing HexagonLayer code, demonstrates how to calculate the elevation value of a cell based on the maximum of the 'SPACES' field using `getElevationWeight` and setting `elevationAggregation` to 'MAX'. This method can leverage both CPU and GPU aggregation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getElevationWeight: (point: BikeRack) => point.SPACES,\n  elevationAggregation: 'MAX'\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing HeatmapTileLayer via ES Module Import (JavaScript)\nDESCRIPTION: Shows how to import HeatmapTileLayer from @deck.gl/carto and instantiate a new layer using the class constructor. Assumes the environment supports ES Modules or is running in a build system like Webpack. Requires @deck.gl/carto in node_modules. Takes an options object (empty in this example) allowing for customization via properties such as data, getWeight, radiusPixels, etc. Outputs an instance of HeatmapTileLayer for use in deck.gl layers array.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/heatmap-tile-layer.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {HeatmapTileLayer} from '@deck.gl/carto';\nnew HeatmapTileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Initializing TerrainLayer with a Single Elevation Image in JavaScript\nDESCRIPTION: Example of creating a TerrainLayer with a single elevation image and texture overlay. The elevationDecoder is configured for a grayscale heightmap, and bounds are specified to position the terrain in world space.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/terrain-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {TerrainLayer} from '@deck.gl/geo-layers';\n\nconst layer = new TerrainLayer({\n  elevationDecoder: {\n    rScaler: 2,\n    gScaler: 0,\n    bScaler: 0,\n    offset: 0\n  },\n  // Digital elevation model from https://www.usgs.gov/\n  elevationData: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/terrain.png',\n  texture: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/terrain-mask.png',\n  bounds: [-122.5233, 37.6493, -122.3566, 37.8159],\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Structure of Pydeck `on_click` Event Payload in Python\nDESCRIPTION: Defines the dictionary structure returned as the payload when an `on_click` event occurs on a pydeck visualization. Includes details like click coordinates (`x`, `y`, `pixel`, `coordinate`, `lngLat`), the layer clicked (`layer`), the index of the picked object (`index`), and potentially metadata from the object itself (`object`). The `on_hover` payload is nearly identical but has `type: 'deck-hover-event'`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/event_handling.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    'type': 'deck-click-event',\n    'data': {\n       'color': {\n           '0': int,\n           '1': int,\n           '2': int,\n           '3': int\n       },\n       'layer': str,  # The layer ID, which you can specify by passing `id=...` to a Layer; `None` if no layer is picked\n       'index': int,  # The serial index of the clicked point in the data set; -1 if no layer is picked\n       'picked': bool,\n       'x': float,  # X coordinate of pixel on click\n       'y': float,  # Y coordinate of pixel on click\n       'pixel': [float, float],  # Pixel coordinate pair\n       'coordinate': [float, float],  # Lat/lon coordinate pair\n       'lngLat': [float, float],  # Duplicated information in 'coordinate'\n       'devicePixel': [int, int],  # Pixel coordinate pair on device screen\n       'pixelRatio': int,\n       'object': {\n           # Metadata from selected clicked object which varies by layer\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Remote Data with dataTransform\nDESCRIPTION: The `dataTransform` callback manipulates data fetched from remote sources, applied to strings, Promises, or async iterables. It receives the fetched data and previous data (for iterables) and returns a processed data object. This enables preprocessing, filtering, or shaping data before it is used in layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n`dataTransform` receives `data` and `previousData` for asynchronous data sources, returning a processed dataset or iterable. Useful for customizing remote data handling in layers.\n```\n\n----------------------------------------\n\nTITLE: Combining PolygonLayer and GeoJsonLayer in pydeck (Python)\nDESCRIPTION: Example of creating a multi-layer map visualizing Vancouver property values using pydeck. It defines a `PolygonLayer` using hardcoded LAND_COVER data (using `get_polygon='-'` for flat coordinate pairs) and a `GeoJsonLayer` loading data from a URL. The GeoJsonLayer uses expression strings for dynamic elevation (`get_elevation`) and fill color (`get_fill_color`) based on properties within the GeoJSON data. The map includes an initial `ViewState` and is rendered using `pdk.Deck`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/layer.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck\n\nDATA_URL = \"https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/geojson/vancouver-blocks.json\"\nLAND_COVER = [[[-123.0, 49.196], [-123.0, 49.324], [-123.306, 49.324], [-123.306, 49.196]]]\n\nINITIAL_VIEW_STATE = pydeck.ViewState(\n  latitude=49.254,\n  longitude=-123.13,\n  zoom=11,\n  max_zoom=16,\n  pitch=45,\n  bearing=0\n)\n\npolygon = pydeck.Layer(\n    'PolygonLayer',\n    LAND_COVER,\n    stroked=False,\n    # processes the data as a flat longitude-latitude pair\n    get_polygon='-',\n    get_fill_color=[0, 0, 0, 20]\n)\n\ngeojson = pydeck.Layer(\n    'GeoJsonLayer',\n    DATA_URL,\n    opacity=0.8,\n    stroked=False,\n    filled=True,\n    extruded=True,\n    wireframe=True,\n    get_elevation='properties.valuePerSqm / 20',\n    get_fill_color='[255, 255, properties.growth * 255]',\n    get_line_color=[255, 255, 255],\n    pickable=True\n)\n\nr = pydeck.Deck(\n    layers=[polygon, geojson],\n    initial_view_state=INITIAL_VIEW_STATE)\n\nr.to_html()\n```\n\n----------------------------------------\n\nTITLE: Loading and Cleaning LIDAR Data with Pandas in Python\nDESCRIPTION: This snippet imports LIDAR coordinate data from multiple remote CSV files, concatenates them into a single DataFrame, and filters it to a specific time frame represented by one 'source' value. It also scales the 'x' and 'y' point coordinates down by dividing by 10,000 to approximate location coordinates near (0, 0) for visualization purposes. The snippet depends on the pandas library and assumes network access to fetch the CSVs.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/04 - Plotting massive data sets.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nall_lidar = pd.concat([\n    pd.read_csv('https://raw.githubusercontent.com/ajduberstein/kitti_subset/master/kitti_1.csv'),\n    pd.read_csv('https://raw.githubusercontent.com/ajduberstein/kitti_subset/master/kitti_2.csv'),\n    pd.read_csv('https://raw.githubusercontent.com/ajduberstein/kitti_subset/master/kitti_3.csv'),\n    pd.read_csv('https://raw.githubusercontent.com/ajduberstein/kitti_subset/master/kitti_4.csv'),\n])\n\n# Filter to one frame of data\nlidar = all_lidar[all_lidar['source'] == 136]\nlidar.loc[: , ['x', 'y']] = lidar[['x', 'y']] / 10000\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Access Token via Environment Variable (bash)\nDESCRIPTION: This bash snippet demonstrates how to set the Mapbox access token as an environment variable. This variable is used to authenticate with Mapbox services.  The command `export MapboxAccessToken=<mapbox_access_token>` sets the environment variable. Replace `<mapbox_access_token>` with your actual token.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/mapbox/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MapboxAccessToken=<mapbox_access_token>\n```\n\n----------------------------------------\n\nTITLE: Integrating deck.gl Overlays into Google Maps in React\nDESCRIPTION: This React example showcases the integration of deck.gl layers into Google Maps using @vis.gl/react-google-maps and GoogleMapsOverlay. The DeckGLOverlay component attaches a deck.gl overlay to the map and syncs props using useEffect and useMemo. Dependencies include React, @vis.gl/react-google-maps, @deck.gl/core, @deck.gl/layers, and @deck.gl/google-maps. Required parameters are a valid Google Maps API key, mapId, and layer configurations. The expected output is an interactive React app with a deck.gl ScatterplotLayer shown on a Google Map.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/google-maps/google-maps-overlay.md#_snippet_1\n\nLANGUAGE: React\nCODE:\n```\nimport React, {useMemo, useEffect} from 'react';\nimport {APIProvider, Map, useMap} from '@vis.gl/react-google-maps';\nimport {DeckProps} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {GoogleMapsOverlay} from '@deck.gl/google-maps';\n\nfunction DeckGLOverlay(props: DeckProps) {\n  const map = useMap();\n  const overlay = useMemo(() => new GoogleMapsOverlay(props));\n\n  useEffect(() => {\n    overlay.setMap(map);\n    return () => overlay.setMap(null);\n  }, [map])\n\n  overlay.setProps(props);\n  return null;\n}\n\nfunction App() {\n  const layers = [\n    new ScatterplotLayer({\n      id: 'deckgl-circle',\n      data: [\n        {position: [0.45, 51.47]}\n      ],\n      getPosition: d => d.position,\n      getFillColor: [255, 0, 0, 100],\n      getRadius: 1000\n    })\n  ];\n\n  return <APIProvider apiKey=\"<google_maps_api_key>\">\n    <Map\n      defaultCenter={{lat: 51.47, lng: 0.45}}\n      defaultZoom={11}\n      mapId=\"<google_maps_id>\" >\n      <DeckGLOverlay layers={layers} />\n    </Map>\n  </APIProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning a Layer with Optional Prop Overrides in JavaScript\nDESCRIPTION: Illustrates the usage of the `clone` method available on deck.gl layer instances. This method creates a copy of the layer, optionally allowing specific properties to be overridden by passing an `overrideProps` object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst updatedLayer = layer.clone(overrideProps);\n```\n\n----------------------------------------\n\nTITLE: Periodically Refreshing Data By Changing URL Query Parameter in deck.gl - JavaScript\nDESCRIPTION: Provides a JavaScript example to force periodic data refresh in deck.gl ScatterplotLayer by appending a changing version query parameter to the data URL. The update function sets new layers with an incremented dataVersion every five minutes, ensuring the layer reloads data even if the base URL remains constant.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 27.8,\n    zoom: 8\n  },\n  controller: true\n});\n\nlet dataVersion = 0;\nfunction update() {\n  const layers = [\n    new ScatterplotLayer({\n      data: `path/to/data.json?v=${++dataVersion}`,\n      getPosition: d => d.position\n    })\n  ];\n\n  deckInstance.setProps({layers});\n\n  // Refresh after 5 minutes\n  return setTimeout(update, 5 * 60 * 1000);\n};\n\nupdate();\n```\n\n----------------------------------------\n\nTITLE: Rendering GeohashLayer in React with deck.gl\nDESCRIPTION: This React example uses the DeckGL component to integrate a GeohashLayer, managing the layer's properties through React state and props. It showcases interaction capabilities and dynamic rendering of geohash polygons with tooltips in a React application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/geohash-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {GeohashLayer} from '@deck.gl/geo-layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype DataType = {\n  geohash: string;\n  value: number;\n};\n\nfunction App() {\n  const layer = new GeohashLayer<DataType>({\n    id: 'GeohashLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.geohashes.json',\n    extruded: true,\n    getGeohash: (d: DataType) => d.geohash,\n    getElevation: (d: DataType) => d.value,\n    getFillColor: (d: DataType) => [d.value * 255, (1 - d.value) * 128, (1 - d.value) * 255],\n    elevationScale: 1000,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<DataType>) => object && `${object.geohash} value: ${object.value}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PostProcessEffect in deck.gl (JavaScript)\nDESCRIPTION: This JavaScript code creates and applies a `PostProcessEffect` to a deck.gl visualization. It utilizes a shader module from `@luma.gl/effects` (specifically `brightnessContrast`) and sets the `brightness` and `contrast` properties. The effect is added to the `Deck`'s `effects` array to manipulate pixel colors post-rendering.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-effects.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {brightnessContrast} from '@luma.gl/effects';\nimport {Deck, PostProcessEffect} from '@deck.gl/core';\n\nconst postProcessEffect = new PostProcessEffect(brightnessContrast, {\n  brightness: 1.0,\n  contrast: 1.0\n});\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 11\n  },\n  controller: true,\n  // add post-processing effect to deck\n  effects: [postProcessEffect]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring outline properties for TextLayer in deck.gl (JavaScript/TypeScript)\nDESCRIPTION: Defines optional properties `outlineWidth` and `outlineColor` to customize the outline around text labels, including default values and effect conditions, such as `fontSettings.sdf` being true.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n#### `outlineWidth` (number, optional) {#outlinewidth}\n\n* Default: `0`\n\nWidth of outline around the text, relative to the font size. Only effective if `fontSettings.sdf` is `true`.\n\n#### `outlineColor` (Color, optional) {#outlinecolor}\n\n* Default: `[0, 0, 0, 255]`\n\nColor of outline around the text, in `[r, g, b, [a]]`. Each channel is a number between 0-255 and `a` is 255 if not supplied.\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl via Pre-bundled Scripts in HTML\nDESCRIPTION: Demonstrates how to include deck.gl and the required carto module using `<script>` tags with pre-bundled JavaScript files from a CDN (unpkg). Provides two alternative sets of scripts depending on whether other deck.gl modules are needed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/cluster-tile-layer.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Aggregating Elevation by Max using getElevationValue (HexagonLayer Example)\nDESCRIPTION: This TypeScript snippet, presented within the GridLayer documentation but showing HexagonLayer code, shows how to calculate the elevation value of a cell based on the maximum of the 'SPACES' field of points within it using the `getElevationValue` prop. This method requires CPU aggregation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getElevationValue: (points: BikeRack[]) => {\n    // Calculate max value\n    return points.reduce((max: number, p: BikeRack) => p.SPACES > max ? p.SPACES : max, -Infinity);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Managing viewState prop and onViewStateChange (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates managing the view state outside of deck.gl using the `viewState` prop and the `onViewStateChange` callback, creating a stateless component. The `onViewStateChange` callback updates the `viewState` object. It includes a reset button implementation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck, OrthographicView} from '@deck.gl/core';\n\nconst INITIAL_VIEW_STATE = {\n  target: [0, 0, 0],\n  zoom: 1\n};\n\nconst deckInstance = new Deck({\n  viewState: INITIAL_VIEW_STATE,\n  controller: true,\n  onViewStateChange: e => {\n    deckInstance.setProps({\n      viewState: e.viewState\n    });\n  }\n});\n\ndocument.getElementById('reset-btn').onclick = () => {\n  deckInstance.setProps({\n    viewState: INITIAL_VIEW_STATE\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Global Picking Events in React (TypeScript)\nDESCRIPTION: This React component example demonstrates setting up global event handlers for picking events, using the `DeckGL` component. It defines `onHover` and `onClick` callbacks using `useCallback` for efficiency. These callbacks receive `PickingInfo` and `MjolnirEvent` as parameters, and logs details of hovered/clicked objects.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, {useCallback} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {MjolnirEvent} from 'mjolnir.js';\n\nfunction App() {\n  // Callback when the pointer enters or leaves an object in any pickable layer\n  const onHover = useCallback((info: PickingInfo, event: MjolnirEvent) => {\n    console.log('Hovered:', info, event);\n  }, []);\n  // Callback when the pointer clicks on an object in any pickable layer\n  const onClick = useCallback((info: PickingInfo, event: MjolnirEvent) => {\n    console.log('Clicked:', info, event);\n  }, []);\n\n  return <DeckGL\n    // ...\n    onHover={onHover}\n    onClick={onClick}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GridCellLayer in TypeScript\nDESCRIPTION: TypeScript implementation of GridCellLayer with proper type definitions for the data and picking info.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/grid-cell-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {GridCellLayer} from '@deck.gl/layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype DataType = {\n  value: number;\n  centroid: [longitude: number, latitude: number];\n};\n\nconst layer = new GridCellLayer<DataType>({\n  id: 'GridCellLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/hexagons.json',\n\n  cellSize: 200,\n  extruded: true,\n  elevationScale: 5000,\n  getElevation: (d: DataType) => d.value,\n  getFillColor: (d: DataType) => [48, 128, d.value * 255, 255],\n  getPosition: (d: DataType) => d.centroid,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<DataType>) => object && `height: ${object.value * 5000}m`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Using DataFilterExtension with categorySize 1 (JavaScript)\nDESCRIPTION: Example showing how to filter a `ScatterplotLayer` based on a single categorical property (`industry`). It uses `getFilterCategory` to extract the category and `filterCategories` (an array of strings) to specify which categories to display. `categorySize: 1` is set in the extension constructor.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nnew ScatterplotLayer({\n  data,\n  getPosition: d => d.coordinates,\n  getFilterCategory: d => d.industry,\n  filterCategories: ['retail', 'health'],\n  extensions: [new DataFilterExtension({categorySize: 1})]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Layer Property Transitions in TypeScript\nDESCRIPTION: Demonstrates how to configure the `transitions` prop on a deck.gl layer (e.g., ScatterplotLayer) to enable smooth animations when properties update. Shows examples of setting transition duration directly (shorthand), configuring interpolation with duration, easing, and enter functions, and setting up spring physics-based transitions with stiffness and damping.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nnew ScatterplotLayer({\n  // ...\n  transitions: {\n    getPosition: 600,\n    getFillColor: {\n      duration: 300,\n      easing: d3.easeCubicInOut,\n      enter: ([r, g, b]) => [r, g, b, 0] // fade in\n    },\n    radiusScale: {\n      type: 'spring',\n      stiffness: 0.01,\n      damping: 0.15\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Point Coloring with pydeck Expression Parser in Python\nDESCRIPTION: Demonstrates a more advanced use of the expression parser for dynamic styling within a ScatterplotLayer. The `get_fill_color` argument uses a list containing a mix of constants and a string expression. This expression accesses the 'lng' property from the data for each point and uses conditional logic (`lng > 0 ? ... : ...`) to calculate the green color component based on the longitude value.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/layer.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlayer = pdk.Layer(\n    'ScatterplotLayer',\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    get_radius=1000,\n    get_fill_color=[255, 'lng > 0 ? 200 * lng : -200 * lng', 'lng', 140],\n    pickable=True)\n```\n\n----------------------------------------\n\nTITLE: Install deck.gl Dependencies using npm\nDESCRIPTION: These bash commands install the deck.gl library or its core and extensions packages using npm.  These commands are required to use the library in a JavaScript project.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/terrain-extension.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/extensions\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm/yarn in Bash\nDESCRIPTION: This snippet shows how to install the necessary dependencies for the project using either npm or yarn.  It assumes a `package.json` file is present in the current directory, listing the project's dependencies. Running either command downloads and installs these dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/apple-maps/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with npm or yarn\nDESCRIPTION: This code snippet shows how to install the necessary project dependencies using npm or yarn. It prepares the environment for development and production builds, ensuring all required packages are available.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/arcgis/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Creating SolidPolygonLayer and Deck Scene (deck.gl, JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the initialization of a SolidPolygonLayer in deck.gl to render extruded polygons from GeoJSON data. It showcases the configuration of layer properties such as extrusion, wireframe, color calculation, elevation, and line color, and adds it to a Deck instance configured with a specific view state and tooltips. Dependencies include @deck.gl/core and @deck.gl/layers, the data must conform to the expected format, and all layer properties (like pickable, getPolygon, getElevation, etc.) are illustrated. The layer is added atop a map view, expecting a collection of objects with contour and population fields.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/solid-polygon-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {SolidPolygonLayer} from '@deck.gl/layers';\n\nconst layer = new SolidPolygonLayer({\n  id: 'SolidPolygonLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-zipcodes.json',\n\n  extruded: true,\n  wireframe: true,\n  getPolygon: d => d.contour,\n  getElevation: d => d.population / d.area / 10,\n  getFillColor: d => [d.population / d.area / 60, 140, 0],\n  getLineColor: [80, 80, 80],\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `${object.zipcode}\\nPopulation: ${object.population}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Accessor and data update issue in JavaScript\nDESCRIPTION: This JavaScript example showcases how updates to data that are used within an accessor will not trigger an attribute update if the accessor function itself does not change. You must configure the `updateTriggers` property to inform deck.gl about dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-layers.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst DATA = [...];\n\nfunction setPillColor(index, color) {\n  DATA[index].pill = color;\n  render();\n}\n\nfunction render() {\n  const layer = new ScatterplotLayer({\n    data: DATA,\n    ...\n    getColor: object => object.pill === 'red' ? [255, 0, 0] : [0, 0, 255], // Does not trigger an attribute update!\n  });\n  deck.setProps([layer]);\n}\n```\n\n----------------------------------------\n\nTITLE: DeckGL with JSX MapView and FirstPersonView\nDESCRIPTION: This snippet demonstrates defining views with JSX syntax as children of the `DeckGL` component, instead of using the `views` prop. It imports `DeckGL`, and assumes the import of `MapView` and `FirstPersonView`. It sets initial view state and then defines a `MapView` and a `FirstPersonView` inside the `DeckGL` component. A `Map` component is placed within the `MapView`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/deckgl.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n  <DeckGL initialViewState={...viewState} layers={layers} >\n    <MapView id=\"map\" width=\"50%\" controller={true} >\n      <Map mapStyle=\"https://basemaps.cartocdn.com/gl/positron-gl-style/style.json\" />\n    </MapView>\n    <FirstPersonView width=\"50%\" x=\"50%\" fovy={50} />\n  <DeckGL />\n```\n\n----------------------------------------\n\nTITLE: Integrating Orthographic View in deck.gl using React - TSX\nDESCRIPTION: This TSX code snippet showcases how to render a deck.gl scene inside a React application by initializing the DeckGL React component and passing an OrthographicView as the view. Dependencies include @deck.gl/core and @deck.gl/react. Place this App function component in your React project, adding any required layers or data providers in the DeckGL props. The 'views' prop takes an OrthographicView instance to establish a fixed top-down camera. Returns a rendered DeckGL component in a React app, suitable for info-vis (2D) purposes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {OrthographicView} from '@deck.gl/core';\n\nfunction App() {\n  return <DeckGL\n    // ...\n    views={new OrthographicView()}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Attribute Class from deck.gl (JavaScript)\nDESCRIPTION: Imports the `Attribute` class from the `@deck.gl/core` module. This is the first step required to use the class for defining geometry attributes within a deck.gl/luma.gl context.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/attribute.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Attribute} from '@deck.gl/core';\n```\n\n----------------------------------------\n\nTITLE: Initializing OrbitView in JavaScript\nDESCRIPTION: Demonstrates how to import the OrbitView class from the '@deck.gl/core' package and create a new instance. An 'id' is required, along with optional parameters inherited from the base View class and specific OrbitView parameters like 'orbitAxis' or projection settings.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/orbit-view.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {OrbitView} from '@deck.gl/core';\nconst view = new OrbitView({id, ...});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value Domain for an Aggregation Channel\nDESCRIPTION: Gets the minimum and maximum values of the aggregated results for a specific channel.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/aggregator.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst [min, max] = aggregator.getResultDomain(0);\n```\n\n----------------------------------------\n\nTITLE: Initializing GlobeView\nDESCRIPTION: This code snippet demonstrates how to import and initialize a GlobeView instance in JavaScript. It imports the `GlobeView` class from the `@deck.gl/core` module and creates a new `GlobeView` object. The `id` property and other view parameters can be passed during initialization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/globe-view.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {_GlobeView as GlobeView} from '@deck.gl/core';\nconst view = new GlobeView({id, ...});\n```\n\n----------------------------------------\n\nTITLE: Using Index-Based Accessors with Binary Data (JavaScript)\nDESCRIPTION: This code demonstrates how to use index-based accessors with binary data in deck.gl. It involves defining accessors that read data from a binary blob based on the object index. This approach populates an internal buffer by calling the accessor for each instance, offering performance comparable to using plain JavaScript array data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/binary-support-improvements-rfc.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n    // binaryData is packed on the server, in the format of [x, y, r, g, b, a]\n    const DATA = {src: binaryData, length: binaryData.length / 6};\n\n    new ScatterplotLayer({\n      data: DATA,\n      getPosition: (object, {index, data, target}) => {\n        target[0] = data.src[index * 6];\n        target[1] = data.src[index * 6 + 1];\n        target[2] = 0;\n        return target;\n      },\n      getColor: (object, {index, data, target}) => {\n        target[0] = data.src[index * 6 + 2] * 255;\n        target[1] = data.src[index * 6 + 3] * 255;\n        target[2] = data.src[index * 6 + 4] * 255;\n        target[3] = data.src[index * 6 + 5] * 255;\n        return target;\n      },\n      ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This code snippet shows how to install project dependencies using Yarn, another popular package manager for JavaScript projects. The command functions identically to `npm install`, downloading and installing the necessary packages and their dependencies to build and run the application successfully. It relies on a yarn.lock file or a package.json file to manage project dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/image-tile/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Creating Attribute and Rendering with Model (JavaScript)\nDESCRIPTION: Demonstrates instantiating the `Attribute` class with geometric data. It then shows how to assign this attribute to a luma.gl `Model` using `setAttributes` and trigger rendering with `draw`, integrating the attribute into the graphics pipeline.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/attribute.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// construct the model.\nconst positions = new Attribute({\n  id: 'vertexPositions',\n  size: 3,\n  value: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0])\n});\n\n// and on each frame update any uniforms (typically matrices) and call render.\nmodel.setAttributes({positions});\nmodel.draw();\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ContourLayer Demo in React - JavaScript/JSX\nDESCRIPTION: This snippet imports the Demo component, which contains a demonstration of the ContourLayer functionality, and renders it within a React file using JSX syntax. The only dependency is that the 'contour-layer' demo must exist as a valid module and the environment must support JSX/React. No additional parameters are required; the component renders its default content, with no inputs or outputs beyond the visual demo itself. This approach assumes an ES6-compatible build setup such as Create React App or Storybook.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/contour-layer.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './contour-layer';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Implementing getTileData with Fetch and AbortSignal in TileLayer (TypeScript)\nDESCRIPTION: This TypeScript example implements a getTileData function for custom tile data fetching in the TileLayer. It takes a tile object with 'url' and 'signal' properties, executes a fetch request passing the AbortSignal, and checks if the fetch or computation was aborted. The function should return either the fetched data or null if aborted, preventing caching incomplete data. Requires deck.gl with support for AbortSignal and TypeScript for type safety. Demonstrates integration of async data loading and abortable fetch logic inside a Layer custom property.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-layer.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTileData: ({url, signal}) => {\n  const data = fetch(url, {signal});\n\n  if (signal.aborted) {\n    return null;\n  }\n  // Expensive computation on returned data\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch with Headers (JavaScript)\nDESCRIPTION: This example shows how to use the `fetch` prop in a deck.gl layer to add custom headers to the HTTP request. It fetches data from `INTERNAL_DATA_URL` and includes a `Company-Access-Token` header.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/data-loading-rfc.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nSomeLayer({\n    data: INTERNAL_DATA_URL,\n    fetch: url => fetch(url, {headers: {'Company-Access-Token': 'Secret-Value'}})\n  })\n```\n\n----------------------------------------\n\nTITLE: Default Texture Parameters for IconLayer in TypeScript\nDESCRIPTION: Specifies the default WebGL texture parameters (`minFilter`, `magFilter`, `mipmapFilter`, `addressModeU`, `addressModeV`) used by the deck.gl IconLayer to create a linearly smoothed texture from the `iconAtlas` when no custom `textureParameters` are provided. These settings control how the texture is sampled and filtered to achieve smooth scaling and prevent wrapping artifacts.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/icon-layer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  minFilter: 'linear',\n  magFilter: 'linear',\n  mipmapFilter: 'linear',\n  addressModeU: 'clamp-to-edge',\n  addressModeV: 'clamp-to-edge'\n}\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl Dependencies via Script Tags in HTML\nDESCRIPTION: Demonstrates how to include pre-bundled deck.gl scripts from the unpkg CDN using HTML `<script>` tags. This method is suitable for projects not using a module bundler.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/brushing-extension.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/extensions@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing H3ClusterLayer and defining props TypeScript example\nDESCRIPTION: Shows how to import the H3ClusterLayer class and its props type definition in TypeScript for advanced usage and type checking when creating layers. This snippet is useful for library users who want to strongly type their layer props using the provided H3ClusterLayerProps generic interface. It assumes installed @deck.gl/geo-layers typings and package.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-cluster-layer.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {H3ClusterLayer} from '@deck.gl/geo-layers';\nimport type {H3ClusterLayerProps} from '@deck.gl/geo-layers';\n\nnew H3ClusterLayer<DataT>(...props: H3ClusterLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Handling Global Picking Events (JavaScript)\nDESCRIPTION: This snippet demonstrates handling picking events globally by setting `onHover` and `onClick` props on the `Deck` component in JavaScript. This will register callbacks for all pickable layers, centralizing event handling. The callbacks log the picking information and the event.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\n\nnew Deck({\n  // ...\n  // Callback when the pointer enters or leaves an object in any pickable layer\n  onHover: (info, event) => console.log('Hovered:', info, event),\n  // Callback when the pointer clicks on an object in any pickable layer\n  onClick: (info, event) => console.log('Clicked:', info, event)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl Deck with MapController options in JavaScript\nDESCRIPTION: Demonstrates how to create a new Deck instance from the deck.gl core module with a controller object specifying interaction options like disabling doubleClickZoom and enabling inertia. Includes setting an initial view state. This snippet shows the shorthand usage without explicitly specifying views, relying on MapController as default.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/map-controller.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\n\nnew Deck({\n  controller: {doubleClickZoom: false, inertia: true},\n  initialViewState: viewState\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Typed Initialization of TripsLayer with Deck.gl\nDESCRIPTION: This snippet shows a TypeScript variant of initializing the TripsLayer with explicit data types for waypoints, including coordinate tuples and timestamps. It provides type-safe accessor functions for path and timestamps, as well as similar animation and styling parameters. The example demonstrates usage patterns with strong typings enhancing code maintainability and correctness. It requires @deck.gl/core and @deck.gl/geo-layers packages with TypeScript support.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/trips-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {TripsLayer} from '@deck.gl/geo-layers';\n\ntype DataType = {\n  waypoints: {\n    coordinates: [longitude: number, latitude: number];\n    timestamp: number;\n  }[]\n};\n\nconst layer = new TripsLayer<DataType>({\n  id: 'TripsLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.trips.json',\n  \n  getPath: (d: DataType) => d.waypoints.map(p => p.coordinates),\n  // Timestamp is stored as float32, do not return a long int as it will cause precision loss\n  getTimestamps: (d: DataType) => d.waypoints.map(p => p.timestamp - 1554772579000),\n  getColor: [253, 128, 93],\n  currentTime: 500,\n  trailLength: 600,\n  capRounded: true,\n  jointRounded: true,\n  widthMinPixels: 8\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Aggregating Elevation by Count using getElevationValue (HexagonLayer Example)\nDESCRIPTION: This TypeScript snippet, presented within the GridLayer documentation but showing HexagonLayer code, illustrates how to calculate the elevation value of a cell based on the count of points within it using the `getElevationValue` prop. This method requires CPU aggregation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getElevationValue: (points: BikeRack[]) => points.length\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating FillStyleExtension in JavaScript (Browser/CDN)\nDESCRIPTION: Shows how to instantiate `FillStyleExtension` when using the pre-bundled scripts included via CDN. The extension class is accessed through the global `deck` object provided by the included scripts.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fill-style-extension.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.FillStyleExtension({});\n```\n\n----------------------------------------\n\nTITLE: Referencing Enumerations using `@@#` Prefix (JSON)\nDESCRIPTION: Demonstrates referencing enumeration values within JSON using the `@@#<enum-name>.<enum-value>` syntax (e.g., `\"@@#COORDINATE_SYSTEM.METER_OFFSETS\"`). The `JSONConverter` resolves these strings to their corresponding numeric values based on the registered enumerations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"layers\": [\n    {\n      \"@@type\": \"ScatterplotLayer\",\n      \"data\": ...,\n      \"coordinateSystem\": \"@@#COORDINATE_SYSTEM.METER_OFFSETS\",\n      \"parameters\": {\n        \"blend\": true,\n        \"blendFunc\": [\"@@#GL.ONE\", \"@@#GL.ZERO\", \"@@#GL.SRC_ALPHA\", \"@@#GL.DST_ALPHA\"]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GridCellLayer in React\nDESCRIPTION: React implementation of GridCellLayer using DeckGL component with typed properties and tooltip functionality.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/grid-cell-layer.md#_snippet_2\n\nLANGUAGE: TypeScript React\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {GridCellLayer} from '@deck.gl/layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype DataType = {\n  value: number;\n  centroid: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const layer = new GridCellLayer<DataType>({\n    id: 'GridCellLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/hexagons.json',\n\n    cellSize: 200,\n    extruded: true,\n    elevationScale: 5000,\n    getElevation: (d: DataType) => d.value,\n    getFillColor: (d: DataType) => [48, 128, d.value * 255, 255],\n    getPosition: (d: DataType) => d.centroid,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<DataType>) => object && `height: ${object.value * 5000}m`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ScreenGridLayer with Deck.gl - JavaScript\nDESCRIPTION: This code snippet demonstrates the basic usage of the `ScreenGridLayer` within a `Deck` component in JavaScript. It defines the layer's properties such as `id`, `data`, `cellSizePixels`, `colorRange`, and accessors for position (`getPosition`) and weight (`getWeight`). It also sets up the `initialViewState`, controller, and a tooltip.  It relies on the `@deck.gl/core` and `@deck.gl/aggregation-layers` modules for core functionalities and aggregation features, respectively. The example uses a sample dataset for bike parking locations, showcasing how to render aggregated data effectively.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/screen-grid-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScreenGridLayer} from '@deck.gl/aggregation-layers';\n\nconst layer = new ScreenGridLayer({\n  id: 'ScreenGridLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n  gpuAggregation: true,\n  cellSizePixels: 50,\n  colorRange: [\n    [0, 25, 0, 25],\n    [0, 85, 0, 85],\n    [0, 127, 0, 127],\n    [0, 170, 0, 170],\n    [0, 190, 0, 190],\n    [0, 255, 0, 255]\n  ],\n  getPosition: d => d.COORDINATES,\n  getWeight: d => d.SPACES,\n  opacity: 0.8\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `Count: ${object.value}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Using HeatmapLayer with DeckGL component in React/TypeScript\nDESCRIPTION: This snippet illustrates how to use the HeatmapLayer within a React application using the @deck.gl/react `DeckGL` component. It defines a functional component `App` that creates the layer and renders it using `DeckGL`, including a type definition for data objects.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/heatmap-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {HeatmapLayer} from '@deck.gl/aggregation-layers';\n\ntype BikeRack = {\n  ADDRESS: string;\n  SPACES: number;\n  COORDINATES: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const layer = new HeatmapLayer<BikeRack>({\n    id: 'HeatmapLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n    aggregation: 'SUM',\n    getPosition: (d: BikeRack) => d.COORDINATES,\n    getWeight: (d: BikeRack) => d.SPACES,\n    radiusPixels: 25\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Data and PyDeck\nDESCRIPTION: This snippet imports necessary libraries like `pydeck` for visualization and defines constants for data URL and color ranges.  It sets up the foundational elements needed to fetch and represent the taxi location data from the Singapore government API. The `COLOR_RANGE` variable is a list of RGBA color values used for the screen grid.  The main dependencies include `pydeck` and `requests`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/03 - Event handlers and data selection in pydeck.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck as pdk\n\nDATA_URL = 'https://api.data.gov.sg/v1/transport/taxi-availability'\nCOLOR_RANGE = [\n  [255, 255, 178, 25],\n  [254, 217, 118, 85],\n  [254, 178, 76, 127],\n  [253, 141, 60, 170],\n  [240, 59, 32, 212],\n  [189, 0, 38, 255]\n]\n```\n\n----------------------------------------\n\nTITLE: Model Matrix for Local Coordinate Transformations\nDESCRIPTION: The `modelMatrix` property allows applying a custom 4x4 transformation matrix to the layer, enabling local coordinate system adjustments and compositing data from different sources with varying coordinate frameworks. It is applied after projection calculations and is particularly useful with non-mercator or meter-offset layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n`modelMatrix` accepts a 16-element array representing a 4x4 transformation matrix. It influences how layer data is positioned and oriented in the scene, useful for local transformations and complex positioning scenarios.\n```\n\n----------------------------------------\n\nTITLE: Instantiating deck.gl with JSONConverter for JSON Layer Conversion in JavaScript\nDESCRIPTION: Demonstrates how to instantiate the JSONConverter class from the @deck.gl/json module to convert JSON descriptions of layers and views into deck.gl props. It imports the necessary dependencies including Deck from @deck.gl/core and mapbox-gl for optional mapbox integration. The snippet configures JSONConverter with a catalog of available layers, creates a Deck instance with canvas and map containers, and uses JSONConverter's convert method to set properties on the Deck instance. This pattern enables backend-generated JSON visualization specifications to be rendered in deck.gl. Dependencies include the @deck.gl/json and @deck.gl/core packages, mapbox-gl, and a JSON file describing the map data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.1/json-layers-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {JSONConverter} from '@deck.gl/json';\nimport {Deck} from '@deck.gl/core';\nimport mapboxgl from 'mapbox-gl';\n\nimport JSON from './us-map.json';\n\nconst jsonConverter = new JSONConverter({\n  configuration: {\n    layers: require('@deck.gl/layers')\n  }\n});\n\nexport const deckgl = new Deck({\n  canvas: 'deck-canvas',\n  mapContainer: 'map',\n  mapboxgl\n});\n\ndeckgl.setProps(jsonConverter.convert(JSON))\n```\n\n----------------------------------------\n\nTITLE: Integrating Deck.gl Layers as Overlay Component in React with MapboxOverlay (TSX)\nDESCRIPTION: This React (TSX) snippet shows how to use MapboxOverlay with react-map-gl's Map and useControl hook to overlay deck.gl layers on a Mapbox map. The DeckGLOverlay component creates and updates the MapboxOverlay instance, passing DeckProps such as layers and interleaved property. All required dependencies such as 'react-map-gl', '@deck.gl/mapbox', '@deck.gl/core', '@deck.gl/layers', and 'mapbox-gl/dist/mapbox-gl.css' must be installed. Input consists of DeckProps (notably layers), and output is the synchronized rendering of deck.gl and base map layers within a React Map component. Only one interactive MapView is supported when using multiple views.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mapbox/mapbox-overlay.md#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\nimport {Map, useControl} from 'react-map-gl';\nimport {MapboxOverlay} from '@deck.gl/mapbox';\nimport {DeckProps} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction DeckGLOverlay(props: DeckProps) {\n  const overlay = useControl<MapboxOverlay>(() => new MapboxOverlay(props));\n  overlay.setProps(props);\n  return null;\n}\n\nfunction App() {\n  const layers: [\n    new ScatterplotLayer({\n      id: 'deckgl-circle',\n      data: [\n        {position: [0.45, 51.47]}\n      ],\n      getPosition: d => d.position,\n      getFillColor: [255, 0, 0, 100],\n      getRadius: 1000,\n      beforeId: 'waterway-label' // In interleaved mode render the layer under map labels. Replace with `slot: 'bottom'` if using Mapbox v3 Standard Style.\n    })\n  ];\n\n  return (\n    <Map\n      initialViewState={{\n        longitude: 0.45,\n        latitude: 51.47,\n        zoom: 11\n      }}\n      mapStyle=\"mapbox://styles/mapbox/light-v9\"\n      mapboxAccessToken=\"<mapbox_access_token>\"\n    >\n      <DeckGLOverlay layers={layers} interleaved />\n    </Map>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using callback functions in deck.gl GPU Aggregation Layer\nDESCRIPTION: Callback functions like onSetColorDomain and onSetElevationDomain are triggered when the layer calculates domain values. These are useful for synchronizing with external components or saving calculated domains.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of using callbacks\nnew GPUGridLayer({\n  onSetColorDomain: ([min, max]) => {\n    // Update external components with the calculated domain\n    console.log('Color domain:', min, max);\n    updateLegend(min, max);\n  },\n  onSetElevationDomain: ([min, max]) => {\n    console.log('Elevation domain:', min, max);\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Import JSONConverter in JavaScript\nDESCRIPTION: This snippet shows how to import the JSONConverter class from the @deck.gl/json module in a JavaScript file using ES6 module syntax. This requires deck.gl to be installed as a dependency using npm or yarn.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/overview.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {JSONConverter} from '@deck.gl/json';\n```\n\n----------------------------------------\n\nTITLE: Initializing CompassWidget with deck.gl in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and initialize the CompassWidget within a deck.gl application using TypeScript. It creates a new Deck instance and adds a CompassWidget to its widgets array. This allows the CompassWidget to interact with the deck.gl scene.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/compass-widget.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {CompassWidget} from '@deck.gl/widgets';\nimport {Deck} from '@deck.gl/core';\n\nconst deck = new Deck({\n  widgets: [new CompassWidget()]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing HexagonLayer in React with deck.gl and TypeScript\nDESCRIPTION: This React TypeScript code snippet shows how to embed a HexagonLayer inside a functional component using the DeckGL React wrapper. It defines a typed BikeRack data structure, sets up the HexagonLayer with GPU aggregation and extruded hexagons, and returns the DeckGL component with initial camera settings and tooltip handling. This integration allows use of deck.gl visualizations within React applications, leveraging typed props and modular UI rendering. It requires @deck.gl/react and related deck.gl aggregation layers packages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/hexagon-layer.md#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {HexagonLayer, HexagonLayerPickingInfo} from '@deck.gl/aggregation-layers';\n\ntype BikeRack = {\n  ADDRESS: string;\n  SPACES: number;\n  COORDINATES: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const layer = new HexagonLayer<BikeRack>({\n    id: 'HexagonLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n    gpuAggregation: true,\n    extruded: true,\n    getPosition: (d: BikeRack) => d.COORDINATES,\n    getColorWeight: (d: BikeRack) => d.SPACES,\n    getElevationWeight: (d: BikeRack) => d.SPACES,\n    elevationScale: 4,\n    radius: 200,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: HexagonLayerPickingInfo<BikeRack>) => object && `Count: ${object.elevationValue}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of importing shader modules and creating a deck.gl Model with modules\nDESCRIPTION: Demonstrates importing shader modules from '@deck.gl/core' and integrating them into a Model instance using the 'modules' array. This setup allows for custom shader functionality via included modules like picking, project32, and gouraudLighting.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/writing-shaders.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {picking, project32, gouraudLighting} from '@deck.gl/core';\n\nconst model = new Model(gl, {\n  vs: '// vertex shader GLSL source',\n  fs: '// fragment shader GLSL source',\n  modules: [picking, project32, gouraudLighting] // list of optional module names\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment with Yarn and Git\nDESCRIPTION: This script checks out the master branch, installs dependencies with yarn, and runs tests for local development. It also includes commands to start the layer browser application locally.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\n yarn bootstrap\n yarn test\n```\n\n----------------------------------------\n\nTITLE: Initializing AmbientLight with Custom Parameters in deck.gl (JavaScript)\nDESCRIPTION: This snippet shows the initialization of an AmbientLight object in deck.gl using the constructor with customizable parameters for color and intensity. The AmbientLight constructor expects an options object with 'color', a number array of length three representing RGB values (default: [255, 255, 255]), and 'intensity', a number indicating light strength (default: 1.0). This code is intended for integration with deck.gl's lighting system and produces an AmbientLight object suitable for equal illumination in rendered scenes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/ambient-light.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ambientLight = new AmbientLight({color, intensity});\n```\n\n----------------------------------------\n\nTITLE: Modifications to DeckGL Class Properties for Multi-View Support\nDESCRIPTION: The DeckGL class undergoes API changes introducing a `views` property to support multiple views, replacing the previous `viewports` or `viewport` properties. The `layerFilter` method signature is updated to accept a view parameter, enhancing flexibility for multi-view configurations. These modifications facilitate rendering multiple viewports simultaneously and manage their respective layer filters.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/view-class-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n> Change signature `layerFilter({layer, view, isPicking})` instead of `layerFilter({layer, viewport, isPicking})`\n\nWe could still provide the derived viewport instance, but it may no longer have the `id` property the app most likely is looking for.\n\n| Old Method            | New Method        | Comment |\n| ---                   | ---               | ---     |\n| `viewports`         | `views`      | `viewports` was an experimental prop |\n| `viewport`          | `views`      | |\n```\n\n----------------------------------------\n\nTITLE: Highlight and AutoHighlight Configuration Properties\nDESCRIPTION: Properties `highlightColor`, `highlightedObjectIndex`, and `autoHighlight` control the visual highlighting of objects in deck.gl layers. They enable static or dynamic coloring of highlighted objects based on user interaction, with configurable colors, indices, and automatic hover-based highlighting. `pickable` must be true for highlighting to work.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n`highlightColor` specifies the RGBA color or function for highlighted objects, defaulting to `[0, 0, 128, 128]`.\n\n`highlightedObjectIndex` explicitly sets an object to highlight by index, overriding `autoHighlight`.\n\n`autoHighlight` toggles automatic highlighting of objects on hover, requiring `pickable: true`.\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with initialViewState (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to initialize a deck.gl instance with an `initialViewState` in TypeScript. It explicitly types `INITIAL_VIEW_STATE` as `MapViewState`. This is a stateful component approach where deck.gl manages the view state.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, MapViewState} from '@deck.gl/core';\n\nconst INITIAL_VIEW_STATE: MapViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12,\n  pitch: 0,\n  bearing: 0\n};\n\nconst deckInstance = new Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: true\n});\n```\n\n----------------------------------------\n\nTITLE: Using Binary Attributes with PathLayer (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use binary attributes with deck.gl's PathLayer for optimized performance. It shows how to flatten path data into binary buffers (positions, colors, and start indices) and provide them to the PathLayer. The `_pathType` prop is set to 'open' to skip normalization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/path-layer.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Flatten PATH_DATA into several binary buffers. This is typically done on the server or in a worker\n// [-122.4, 37.7, -122.5, 37.8, -122.6, 37.85, ...]\nconst positions = new Float64Array(PATH_DATA.map(d => d.path).flat(2));\n// The color attribute must supply one color for each vertex\n// [255, 0, 0, 255, 0, 0, 255, 0, 0, ...]\nconst colors = new Uint8Array(PATH_DATA.map(d => d.path.map(_ => d.color)).flat(2));\n// The \"layout\" that tells PathLayer where each path starts\nconst startIndices = new Uint16Array(PATH_DATA.reduce((acc, d) => {\n  const lastIndex = acc[acc.length - 1];\n  acc.push(lastIndex + d.path.length);\n  return acc;\n}, [0]));\n\nnew PathLayer({\n  data: {\n    length: PATH_DATA.length,\n    startIndices: startIndices, // this is required to render the paths correctly!\n    attributes: {\n      getPath: {value: positions, size: 2},\n      getColor: {value: colors, size: 3}\n    }\n  },\n  _pathType: 'open' // this instructs the layer to skip normalization and use the binary as-is\n})\n```\n\n----------------------------------------\n\nTITLE: Instance-specific Styling with TypeScript\nDESCRIPTION: This snippet describes applying styles to a single instance of a widget using inline styles in TypeScript.  It sets the `style` property of the `FullscreenWidget` and defines a `--button-size` variable as '48px'.  It also mentions that to style hyphenated CSS properties you should use the camelCase equivalent (e.g., `backgroundColor`).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/styling.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nnew FullscreenWidget({ style: {'--button-size': '48px'}})\n```\n\n----------------------------------------\n\nTITLE: Accessing Selected Data\nDESCRIPTION: This snippet illustrates how to access the selected data from a pydeck visualization. The `r.selected_data` attribute holds the data selected by the user through interactions.  It allows the user to obtain the selected data after interacting with the plot, which can be useful for filtering and analysis.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/03 - Event handlers and data selection in pydeck.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nr.selected_data\n```\n\n----------------------------------------\n\nTITLE: Instantiating GridLayer and Deck in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and configure a GridLayer instance with sample data and initialize a deck.gl Deck instance with this layer and initial view state in plain JavaScript. It shows setting various GridLayer properties like data source, aggregation options, and rendering styles.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {GridLayer} from '@deck.gl/aggregation-layers';\n\nconst layer = new GridLayer({\n  id: 'GridLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n  gpuAggregation: true,\n  extruded: true,\n  getPosition: d => d.COORDINATES,\n  getColorWeight: d => d.SPACES,\n  getElevationWeight: d => d.SPACES,\n  elevationScale: 4,\n  cellSize: 200,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `Count: ${object.elevationValue}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing deck.gl modules with TypeScript types (v8.8)\nDESCRIPTION: This snippet demonstrates how to import modules from deck.gl and @deck.gl/layers with TypeScript types in deck.gl version 8.8 using the `/typed` entry point. It also shows how to import additional type definitions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-with-typescript.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport DeckGL from '@deck.gl/react/typed';\nimport {GeoJsonLayer} from '@deck.gl/layers/typed';\n\nimport type {DeckGLRef} from '@deck.gl/react/typed';\nimport type {GeoJsonLayerProps} from '@deck.gl/layers/typed';\n```\n\n----------------------------------------\n\nTITLE: Filtering Layers for Rendering and Picking - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `layerFilter` prop to control both rendering and picking behavior in multiple viewports. It prevents rendering the 'car' layer in the 'first-person' view and disables picking in the 'minimap'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nconst layerFilter: DeckProps[\"layerFilter\"] = ({layer, viewport, isPicking}) => {\n  if (viewport.id === 'first-person' && layer.id === 'car') {\n    // Do not draw the car layer in the first person view\n    return false;\n  }\n  if (isPicking && viewport.id === 'minimap') {\n    // Do not pick anything in the minimap\n    return false;\n  }\n  return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Inefficient Accessors for ScatterplotLayer (TypeScript)\nDESCRIPTION: This TypeScript snippet shows a `ScatterplotLayer` where the `getFillColor` and `getRadius` accessors contain logic that creates new arrays or performs calculations for each data object during rendering.  This can be very costly in garbage collection and performance, especially if the number of data objects is large. It defines a `CensusTract` type and sample data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CensusTract = {\n  centroid: [longitude: number, latitude: number];\n  populationsByYear: {[year: number]: number};\n};\n\nconst DATA: CensusTract[] = [...];\n\nconst layer = new ScatterplotLayer<CensusTract>{\n  data: DATA,\n  getPosition: (d: CensusTract) => d.centroid,\n  getFillColor: (d: CensusTract) => {\n    // This line creates a new values array from each object\n    // which can incur significant cost in garbage collection\n    const maxPopulation = Math.max.apply(null, Object.values(d.populationsByYear));\n    // This switch case creates a new color array for each object\n    // which can also incur significant cost in garbage collection\n    if (maxPopulation > 1000000) {\n      return [255, 0, 0];\n    } else if (maxPopulation > 100000) {\n      return [0, 255, 0];\n    } else {\n      return [0, 0, 255];\n    }\n  },\n  getRadius: (d: CensusTract) => {\n    // This line duplicates what's done in `getFillColor` and doubles the cost\n    const maxPopulation = Math.max.apply(null, Object.values(d.populationsByYear));\n    return Math.sqrt(maxPopulation);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Local Layer Browser with Yarn\nDESCRIPTION: This sequence of commands navigates to the layer-browser example directory, installs dependencies, and starts the local development server for the layer browser application, facilitating local testing and development.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/layer-browser\n yarn\n yarn start-local\n```\n\n----------------------------------------\n\nTITLE: Override fetch per async prop (JavaScript)\nDESCRIPTION: This code demonstrates how to override the `fetch` function for different asynchronous properties (data and bitmap) in a deck.gl layer. Each property can have its own custom fetch logic with specific headers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/data-loading-rfc.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nSomeBitmapLayer({\n    data: DATA_URL,\n    bitmap: BITMAP_URL,\n    fetch: {\n      data: url => fetch(url, {headers: {...}})\n      bitmap: url => fetch(url, {headers: {...}})\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl and CARTO Module via Script Tags (HTML)\nDESCRIPTION: Illustrates how to include the pre-bundled deck.gl libraries (core, layers, geo-layers, and carto) directly in an HTML file using script tags pointing to the unpkg CDN.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/quadbin-tile-layer.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing GeoJsonLayer and Deck in deck.gl (JavaScript)\nDESCRIPTION: This snippet shows how to import and configure a GeoJsonLayer with deck.gl in plain JavaScript. It demonstrates fetching remote GeoJSON data and customizing visual properties, such as fill color, line color (computed from feature properties), line width, and labeling. The code sets up interactivity with getTooltip and integrates the configured layer into a new Deck instance. Required dependencies are '@deck.gl/core' and '@deck.gl/layers'; the input GeoJSON is expected via URL. Inputs include map view parameters and layer accessors, producing an interactive, styled map. Limitations include static property values, with some customization via functions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nconst layer = new GeoJsonLayer({\n  id: 'GeoJsonLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart.geo.json',\n\n  stroked: false,\n  filled: true,\n  pointType: 'circle+text',\n  pickable: true,\n\n  getFillColor: [160, 160, 180, 200],\n  getLineColor: f => {\n    const hex = f.properties.color;\n    // convert to RGB\n    return hex ? hex.match(/[0-9a-f]{2}/g).map(x => parseInt(x, 16)) : [0, 0, 0];\n  },\n  getLineWidth: 20,\n  getPointRadius: 4,\n  getText: f => f.properties.name,\n  getTextSize: 12\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && object.properties.name,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Example usage of defaultProps with property types in deck.gl layers\nDESCRIPTION: This snippet illustrates how layer defaultProps can be extended to include property types, values, and constraints such as min/max ranges, deprecation, or removal. It demonstrates defining property types inline within defaultProps to enable type auto-deduction, validation, and advanced behaviors like dynamic limits and deprecations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.3/prop-types-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst defaultProps = {\n  radiusScale: {value: 1, min: 0}, // {type: 'number'} inferred. No max value.\n  highlightedObjectIndex: {value: -1, type: 'integer', min: -1},\n  drawOutline: false, // {type: 'boolean' , value: false} inf\n  getRadius: ..., // {type: 'function'} inferred\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Geometry Model - JavaScript\nDESCRIPTION: This snippet illustrates creating a model with dynamic geometry. This is suitable for rendering unique geometries such as polygons. The topology is set to 'line-list' and vertexCount needs to be properly set based on your data. It requires importing Model and Geometry from '@luma.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/primitive-layers.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Model, Geometry} from '@luma.gl/core';\n\nexport default class MyLayer extends Layer {\n  ...\n  _getModel(gl) {\n    return new Model(gl, Object.assign({}, this.getShaders(), {\n      id: this.props.id,\n      geometry: new Geometry({\n        id: this.props.id,\n        topology: 'line-list',\n      }),\n      vertexCount: 0,\n      isIndexed: true\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GoogleMapsOverlay to a Map in TypeScript\nDESCRIPTION: This snippet describes how to attach or detach a GoogleMapsOverlay instance to a map object using the setMap method in TypeScript. The method takes a map instance or null to toggle overlay visibility without destroying its rendering context. This is essential for dynamically managing overlays' presence on Google Maps during interaction or navigation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/google-maps/google-maps-overlay.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\noverlay.setMap(map);\n```\n\n----------------------------------------\n\nTITLE: Creating AmbientLight Instance in deck.gl (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create an AmbientLight instance in deck.gl by specifying the color as an RGB array and intensity as a number. It requires the deck.gl library to be installed and imported, and assumes that AmbientLight is available from the deck.gl lighting modules. The color parameter is an array of three numbers representing RGB values (e.g., [128, 128, 0]), and intensity sets the strength of the light (e.g., 2.0). The output is a configured AmbientLight object for use in deck.gl scenes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/ambient-light.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ambientLight= new AmbientLight({\n  color: [128, 128, 0],\n  intensity: 2.0\n});\n```\n\n----------------------------------------\n\nTITLE: Supporting CSV/TSV Data Loading in deck.gl Using CSVLoader - TypeScript\nDESCRIPTION: Illustrates how to add CSVLoader from loaders.gl to a HexagonLayer to enable parsing of CSV or TSV formatted files. loadOptions customize parsing behavior including delimiter, dynamicTyping, and skipping empty lines. This extends deck.gl's data support beyond default JSON and image formats.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {CSVLoader} from '@loaders.gl/csv';\n\nnew HexagonLayer({\n  data: '/path/to/data.tsv',\n  loaders: [CSVLoader],\n  loadOptions: {\n    csv: {\n      delimiter: '\\t',\n      dynamicTyping: true,\n      skipEmptyLines: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: PolygonLayer Instantiation (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to instantiate a PolygonLayer after importing it from a CDN.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/polygon-layer.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nnew deck.PolygonLayer({});\n```\n\n----------------------------------------\n\nTITLE: Overriding Attribute Calculation in PathLayer - JavaScript\nDESCRIPTION: This snippet demonstrates how to override the attribute calculation in a `PathLayer` to add per-segment color. It extends the `PathLayer` and adds an `instanceColors` attribute.  The `calculateColors` method is overridden to populate the `instanceColors` attribute based on the `getColor` prop, handling both single colors and arrays of colors per segment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/subclassed-layers.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example to add per-segment color to PathLayer\nimport {PathLayer} from '@deck.gl/layers';\n\n// Allow accessor: `getColor` (Function, optional)\n// Returns an color (array of numbers, RGBA) or array of colors (array of arrays).\nexport default class MultiColorPathLayer extends PathLayer {\n  initializeState() {\n    super.initializeState();\n    this.getAttributeManager().addInstanced({\n      instanceColors: {\n        size: 4,\n        type: \"unorm8\",\n        normalized: true,\n        update: this.calculateColors\n      }\n    })\n  }\n\n  calculateColors(attribute) {\n    const {data, getPath, getColor} = this.props;\n    const {value} = attribute;\n\n    let i = 0;\n\n    for (const object of data) {\n      const path = getPath(object);\n      const color = getColor(object);\n      if (Array.isArray(color[0])) {\n        if (color.length !== path.length) {\n          throw new Error(`PathLayer getColor() returned a color array, but the number of\n           colors returned doesn't match the number of segments in the path`);\n        }\n        color.forEach((segmentColor) => {\n          value[i++] = segmentColor[0];\n          value[i++] = segmentColor[1];\n          value[i++] = segmentColor[2];\n          value[i++] = isNaN(segmentColor[3]) ? 255 : segmentColor[3];\n        });\n      } else {\n        for (let ptIndex = 1; ptIndex < path.length; ptIndex++) {\n          value[i++] = color[0];\n          value[i++] = color[1];\n          value[i++] = color[2];\n          value[i++] = isNaN(color[3]) ? 255 : color[3];\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MaskExtension with Pre-bundled Scripts\nDESCRIPTION: Example showing how to include MaskExtension using pre-bundled scripts from a CDN. Demonstrates both the full deck.gl bundle and individual module imports via script tags.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/mask-extension.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/extensions@^9.0.0/dist.min.js\"></script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.MaskExtension();\n```\n\n----------------------------------------\n\nTITLE: Configuring SolidPolygonLayer with Binary Attributes\nDESCRIPTION: This code shows how to supply attributes directly to a `SolidPolygonLayer` using binary data for performance. It involves creating `Float64Array` for positions, `Uint8Array` for elevations, and `Uint16Array` for start indices. The `data` prop is structured to include these attributes. The `_normalize: false` prop is used to instruct the layer to skip normalization. The snippet showcases a more performant way of rendering the same data as the example before.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/solid-polygon-layer.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Flatten the polygon vertices\n// [-122.4, 37.7, -122.4, 37.8, -122.5, 37.8, -122.5, 37.7, -122.4, 37.7, ...]\nconst positions = new Float64Array(POLYGON_DATA.map(d => d.contour).flat(2));\n// The color attribute must supply one color for each vertex\n// [255, 0, 0, 255, 0, 0, 255, 0, 0, ...]\nconst elevations = new Uint8Array(POLYGON_DATA.map(d => d.contour.map(_ => d.population)).flat());\n// The \"layout\" that tells PathLayer where each path starts\nconst startIndices = new Uint16Array(POLYGON_DATA.reduce((acc, d) => {\n  const lastIndex = acc[acc.length - 1];\n  acc.push(lastIndex + d.contour.length);\n  return acc;\n}, [0]));\n\nnew SolidPolygonLayer({\n  data: {\n    length: POLYGON_DATA.length,\n    startIndices: startIndices, // this is required to render the paths correctly!\n    attributes: {\n      getPolygon: {value: positions, size: 2},\n      getElevation: {value: elevations, size: 1}\n    }\n  },\n  _normalize: false, // this instructs the layer to skip normalization and use the binary as-is\n  getFillColor: [0, 100, 60, 160]\n})\n```\n\n----------------------------------------\n\nTITLE: Starting the Example with NPM\nDESCRIPTION: This command starts the example application using the script defined in the package.json file (typically the \"start\" script).  It generally runs a development server to serve the example in a web browser.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Use deck.gl with CARTO data source query to visualize data with GeoJsonLayer\nDESCRIPTION: This example illustrates fetching data directly using the CARTO SQL API through the query function, then transforming and visualizing this data with a GeoJsonLayer in deck.gl. It requires configuring accessToken, connectionName, and SQL query parameters. The layer visually represents geospatial points with positions and radii, enabling detailed spatial analysis. Dependencies include '@deck.gl/react', '@deck.gl/layers', and '@deck.gl/carto'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/overview.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {query} from '@deck.gl/carto';\n\nfunction App() {\n  const data = query({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    sqlQuery: 'SELECT * FROM cartobq.testtables.points_10k',\n  });\n\n  const layer = new GeoJsonLayer({\n    data,\n    dataTransform: data => data.rows,\n    getPosition: d => d.geom.coordinates,\n    getRadius: d => d.size\n  });\n\n  return <DeckGL layers={[layer]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Higher-Order Layers with Extensions in deck.gl Using JavaScript\nDESCRIPTION: This snippet demonstrates an alternative approach to layer extensions by applying higher-order functions that wrap base layers with additional behavior. Functions like `brushing` and `filterable` take a layer class (e.g., ScatterplotLayer) and return an enhanced class implementing the requested extension. This pattern allows the extension system to be implemented independently of the core but introduces complexity in managing composite layers and debugging due to nested wrapping. It requires accessing @deck.gl/core, @deck.gl/layers, and @deck.gl/layer-extensions packages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-extension-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {brushing, filterable} from '@deck.gl/layer-extensions';\n\nconst BrushingFiterableScatterplotLayer = brushing(filterable(ScatterplotLayer, {size: 2}));\n\nnew Deck({\n  layers: [\n    new BrushingFiterableScatterplotLayer({\n      // props for brushing\n      enableBrush: false,\n      // props for filtering\n      getFilterValue: d => [d.time, d.count],\n      filterRange: [1545000000, 1545002000, 10, 20],\n      ...\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck.gl GlobeView with GlobeController (JavaScript)\nDESCRIPTION: Demonstrates how to initialize a deck.gl instance using GlobeView and configure the GlobeController. It shows two equivalent methods for setting controller options: either directly on the Deck instance's controller prop or on the GlobeView instance's controller prop.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/globe-controller.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck, _GlobeView as GlobeView} from '@deck.gl/core';\n\nnew Deck({\n  views: new GlobeView(),\n  controller: {keyboard: false, inertia: true},\n  initialViewState: viewState\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck, _GlobeView as GlobeView} from '@deck.gl/core';\n\nnew Deck({\n  views: new GlobeView({\n    controller: {keyboard: false, inertia: true}\n  }),\n  initialViewState: viewState\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Pydeck Event Handling with on_click in Python\nDESCRIPTION: Demonstrates attaching a Python function (`filter_by_viewport`) to the `on_click` event of a `pdk.Deck` widget. The handler function attempts to filter a pandas DataFrame based on viewport coordinates extracted from the event payload (though click payloads typically contain different data structures, this example specifically extracts 'nw' and 'se' keys which are characteristic of `on_view_state_change`) and updates an `ipywidgets.HTML` display with the count of filtered points. Requires `pydeck`, `pandas` (for `df`), and `ipywidgets`. Note the function logic aligns more closely with handling view state changes rather than simple clicks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/event_handling.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import HTML\n\ntext = HTML(value='Move the viewport')\nlayer = pdk.Layer(\n    'ScatterplotLayer',\n    df,\n    pickable=True,\n    get_position=['lng', 'lat'],\n    get_fill_color=[255, 0, 0],\n    get_radius=100\n)\nr = pdk.Deck(layer, initial_view_state=viewport)\n\ndef filter_by_bbox(row, west_lng, east_lng, north_lat, south_lat):\n    return west_lng < row['lng'] < east_lng and south_lat < row['lat'] < north_lat\n\ndef filter_by_viewport(widget_instance, payload):\n    try:\n        west_lng, north_lat = payload['data']['nw']\n        east_lng, south_lat = payload['data']['se']\n        filtered_df = df[df.apply(lambda row: filter_by_bbox(row, west_lng, east_lng, north_lat, south_lat), axis=1)]\n        text.value = 'Points in viewport: %s' % int(filtered_df.count()['lng'])\n    except Exception as e:\n        text.value = 'Error: %s' % e\n\n\nr.deck_widget.on_click(filter_by_viewport)\ndisplay(text)\nr.show()\n```\n\n----------------------------------------\n\nTITLE: Setting DeckGL Width and Height with CSS\nDESCRIPTION: This code snippet shows how to specify the width and height of a DeckGL component using CSS descriptors. It sets both width and height to 100%, allowing the component to fill its container. This eliminates the need for manual resize handling.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<DeckGL width='100%' height='100%'/>\n```\n\n----------------------------------------\n\nTITLE: Updating GoogleMapsOverlay Properties in TypeScript\nDESCRIPTION: This snippet illustrates updating the properties of an existing GoogleMapsOverlay instance via setProps, passing in partial or full property sets. It enables runtime configuration changes to overlay appearance or behavior, such as modifying layers, without recreating the overlay object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/google-maps/google-maps-overlay.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\noverlay.setProps(props);\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with FullscreenWidget in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to import the `FullscreenWidget` from `@deck.gl/widgets` and the `Deck` class from `@deck.gl/core`. It then shows instantiating a `Deck` object and adding a new instance of `FullscreenWidget` to its `widgets` array, enabling the fullscreen functionality for the deck.gl visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/fullscreen-widget.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FullscreenWidget} from '@deck.gl/widgets';\nimport {Deck} from '@deck.gl/core';\n\nconst deck = new Deck({\n  widgets: [new FullscreenWidget()]\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU Debug Mode in Deck.gl Deck Class with JavaScript\nDESCRIPTION: Provides an example of how to enable GPU debug mode in a Deck instance, which enables synchronous GPU operations to track GPU state for debugging purposes. Requires importing '@luma.gl/debug' for debug utilities. This mode is slower and should be used only for troubleshooting GPU-related issues.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '@luma.gl/debug';\nimport {Deck} from '@deck.gl/core';\n\nnew Deck({\n  // ...\n  debug: true\n})\n```\n\n----------------------------------------\n\nTITLE: Periodically Refreshing Data By Changing URL Query Parameter in deck.gl - TypeScript\nDESCRIPTION: Shows a TypeScript implementation that refreshes data by incrementing a version parameter in the data URL for a typed ScatterplotLayer. This ensures data reload occurs every five minutes while using typed data with position coordinates. It exemplifies integration of typed layers with dynamic data management.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [longitude: number, latitude: number];\n};\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 27.8,\n    zoom: 8\n  },\n  controller: true\n});\n\nlet dataVersion: number = 0;\nfunction update() {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      data: `path/to/data.json?v=${++dataVersion}`,\n      getPosition: (d: DataType) => d.position\n    })\n  ];\n\n  deckInstance.setProps({layers});\n\n  // Refresh after 5 minutes\n  return setTimeout(update, 5 * 60 * 1000);\n};\n\nupdate();\n```\n\n----------------------------------------\n\nTITLE: Data Transformation with pandas\nDESCRIPTION: This code transforms the data by creating a 'position' column as a list of x, y, and z coordinates.  It then removes the original x, y, and z columns and prints the first few rows of the updated DataFrame.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/07 - Binary Transport.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnodes[\"position\"] = nodes.apply(lambda row: [row[\"x\"], row[\"y\"], row[\"z\"]], axis=1)\n\n# Remove all unused columns\ndel nodes[\"x\"]\ndel nodes[\"y\"]\ndel nodes[\"z\"]\nnodes.head()\n```\n\n----------------------------------------\n\nTITLE: Using pydeck-carto for visualization\nDESCRIPTION: This code snippet demonstrates how to use pydeck-carto to create a geospatial visualization using data from CARTO. It authenticates with CARTO, registers the necessary layer types, creates a CARTO data source, renders the CARTO layer in pydeck, and displays the visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck as pdk\nimport pydeck_carto as pdkc\nfrom carto_auth import CartoAuth\n\n# Authentication with CARTO\ncarto_auth = CartoAuth.from_oauth()\n\n# Register new layer types in pydeck\npdkc.register_layers()\n\n# Create CARTO data source\ndata = pdkc.sources.vector_query_source(\n    access_token=carto_auth.get_access_token(),\n    api_base_url=carto_auth.get_api_base_url(),\n    connection_name=\"carto_dw\",\n    sql_query=\"SELECT geom, name FROM carto-demo-data.demo_tables.world_airports\",\n)\n\n# Render CARTO layer in pydeck\nlayer = pdk.Layer(\n    \"VectorTileLayer\",\n    data=data,\n    get_fill_color=[238, 77, 90],\n    point_radius_min_pixels=2.5,\n    pickable=True,\n)\nview_state = pdk.ViewState(latitude=0, longitude=0, zoom=1)\npdk.Deck(layer, map_style=pdk.map_styles.ROAD, initial_view_state=view_state)\n```\n\n----------------------------------------\n\nTITLE: Initializing H3TileLayer with CARTO Data Source in React (TypeScript/TSX)\nDESCRIPTION: Demonstrates how to use the H3TileLayer inside a React application with deck.gl and Cartesian data sources. It imports DeckGL components and the H3TileLayer along with h3QuerySource from @deck.gl/carto, sets up a data source querying CARTO with an access token and SQL query, and creates a layer applying fill colors from data properties. The snippet assumes a valid viewState object for controlling the viewport.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/h3-tile-layer.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {H3TileLayer, h3QuerySource} from '@deck.gl/carto';\n\nfunction App({viewState}) {\n  const data = h3QuerySource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    sqlQuery: 'select * from carto-demo-data.demo_tables.chicago_crime_sample',\n  });\n\n  const layer = new H3TileLayer({\n    data,\n    getFillColor: d => d.properties.color\n  })\n\n  return <DeckGL viewState={viewState} layers={[layer]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ScreenGridLayer with Deck.gl - TypeScript\nDESCRIPTION: This code demonstrates the usage of `ScreenGridLayer` in TypeScript, including type definitions for the dataset. The example uses a `BikeRack` type to define the structure of the data. It initializes `ScreenGridLayer` with specific properties, including `data`, `cellSizePixels`, `colorRange`, and accessors using TypeScript generics. It leverages the `@deck.gl/core` and `@deck.gl/aggregation-layers` modules. It also uses the `ScreenGridLayerPickingInfo` type for tooltip information and sets up the `initialViewState` and controller. This example showcases how to integrate TypeScript typing with deck.gl layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/screen-grid-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScreenGridLayer, ScreenGridLayerPickingInfo} from '@deck.gl/aggregation-layers';\n\ntype BikeRack = {\n  ADDRESS: string;\n  SPACES: number;\n  COORDINATES: [longitude: number, latitude: number];\n};\n\nconst layer = new ScreenGridLayer<BikeRack>({\n  id: 'ScreenGridLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n  gpuAggregation: true,\n  cellSizePixels: 50,\n  colorRange: [\n    [0, 25, 0, 25],\n    [0, 85, 0, 85],\n    [0, 127, 0, 127],\n    [0, 170, 0, 170],\n    [0, 190, 0, 190],\n    [0, 255, 0, 255]\n  ],\n  getPosition: (d: BikeRack) => d.COORDINATES,\n  getWeight: (d: BikeRack) => d.SPACES,\n  opacity: 0.8\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: ScreenGridLayerPickingInfo<BikeRack>) => object && `Count: ${object.value}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Forcing Deck Redraw (JavaScript)\nDESCRIPTION: Attempts to redraw the canvas immediately, bypassing the default animation frame cycle. This can be useful when synchronous updates are required, but should be used sparingly due to potential performance issues. The snippet shows calling `redraw` with `true` to force the redraw regardless of changes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeck.redraw(true);\n```\n\n----------------------------------------\n\nTITLE: PointCloudLayer with Binary Data (JavaScript)\nDESCRIPTION: This example demonstrates how to use binary data with the PointCloudLayer in deck.gl. The binary data is assumed to be packed on the server.  The data object defines the length and attributes (getPosition, getColor, getNormal).  The attributes specify the value (binaryData), size, stride, offset, and normalization properties for each attribute.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/binary-support-improvements-rfc.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// EXAMPLE 1 - PointCloudLayer\n/*\n   binaryData is packed on the server:\n   original data: [\n     {x, y, r, g, b}, // d0\n     {x, y, r, g, b}, // d1\n     ...\n   ]\n   binary data: {\n     positionsAndColors: [d0x, d0y, d0r, d0g, d0b, d0a, d1x, d1y, ...]\n   }\n*/\nnew PointCloudLayer({\n  data: {\n    length: binaryData.length / 6,\n    attributes: {\n      getPosition: {value: binaryData, size: 2, stride: 24, offset: 0},\n      getColor: {value: binaryData, size: 4, stride: 24, offset: 8, normalized: true},\n      getNormal: {value: [0, 0, 0], constant: true}\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing WebMercatorViewport and Projecting Coordinates (JavaScript)\nDESCRIPTION: Demonstrates how to import WebMercatorViewport from @deck.gl/core and instantiate it with viewport options such as width, height, longitude, latitude, zoom, pitch, and bearing. The snippet further shows projecting a geographic coordinate (longitude/latitude) into screen pixel coordinates using the .project() method. Dependencies: @deck.gl/core. Expected input parameters match the constructor documentation. The method outputs the on-screen pixel position corresponding to the input world coordinate.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/web-mercator-viewport.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {WebMercatorViewport} from '@deck.gl/core';\n\nconst viewport = new WebMercatorViewport({\n  width: 600,\n  height: 400,\n  longitude: -122.45,\n  latitude: 37.78,\n  zoom: 12,\n  pitch: 30,\n  bearing: 15\n});\n\nviewport.project([-122.45, 37.78]);\n// [300,200]\n```\n\n----------------------------------------\n\nTITLE: Accessor Issue Example in JavaScript\nDESCRIPTION: This JavaScript code shows a common issue with accessors in deck.gl.  It demonstrates that changing the function identity of an accessor (e.g., using an arrow function or `bind`) without updating `updateTriggers` will not trigger an attribute update, even if the accessor's execution result changes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-layers.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction render() {\n  const layer = new ScatterplotLayer({\n    ...\n    getColor: x => x.color, // this creates a new function every render\n    getRadius: this._getRadius.bind(this) // bind generates a new function every render\n  });\n  deck.setProps([layer]);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch override with objects (JavaScript)\nDESCRIPTION: This snippet shows an alternative design where asynchronous props are objects containing properties like `url`, `fetch`, and `parse`. The `data` property is defined as an object that specifies the URL, a custom `fetch` function, and potentially a `parse` function.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/data-loading-rfc.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nSomeBitmapLayer({\n    data: {\n      url: DATA_URL,\n      fetch: url => fetch(url, {headers: {...}}),\n      parse: ...\n    },\n    bitmap: BITMAP_URL,\n  })\n```\n\n----------------------------------------\n\nTITLE: Loading deck.gl Scripts via HTML\nDESCRIPTION: This snippet demonstrates how to load deck.gl scripts directly using `<script>` tags in HTML, providing alternatives for loading the entire library or individual modules, suitable for use in environments without module bundlers. Dependencies: deck.gl or its individual modules, loaded via CDN.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/column-layer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and CARTO Modules (Bash)\nDESCRIPTION: Provides shell commands to install deck.gl and its submodules using npm. Users can choose to install the umbrella package deck.gl, or specific submodules @deck.gl/core, @deck.gl/layers, and @deck.gl/carto for more granular dependency management. Should be run in a Node.js project directory with npm initialized. No parameters or outputs beyond installed modules.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/heatmap-tile-layer.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/carto\n```\n\n----------------------------------------\n\nTITLE: Defining H3QuerySourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `H3QuerySourceOptions` type, used by the `h3QuerySource` function. It specifies options such as `aggregationExp`, `aggregationResLevel`, `spatialDataColumn`, `sqlQuery`, and `queryParameters`. These options enable querying and aggregating H3 data using a custom SQL query.  The parameters are used for SQL query parametrization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ntype H3QuerySourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm or yarn - Bash\nDESCRIPTION: This snippet provides commands to install the necessary dependencies for the deck.gl GeoJsonLayer example. It utilizes either npm or yarn as package managers.\n\nDependencies: npm or yarn, Node.js\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/geojson/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with initialViewState (React)\nDESCRIPTION: This React code snippet shows how to initialize a DeckGL component with an `initialViewState`. It defines a functional component that renders the DeckGL element, passing the initial view state.  This is a stateful component approach.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapViewState} from '@deck.gl/core';\n\nconst INITIAL_VIEW_STATE: MapViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12,\n  pitch: 0,\n  bearing: 0\n};\n\nfunction App() {\n  return <DeckGL\n    initialViewState={INITIAL_VIEW_STATE}\n    controller\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Extending the Layer Class in JavaScript\nDESCRIPTION: Shows how to import the base Layer class from deck.gl and create a new layer class by extending it. This is the fundamental first step in creating any custom layer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layer} from 'deck.gl';\n\nclass AwesomeLayer extends Layer {...}\n```\n\n----------------------------------------\n\nTITLE: Creating deck.gl Visualization\nDESCRIPTION: This code creates a deck.gl visualization using the PointCloudLayer. It sets the initial view state, specifies the data, and configures the layer to use binary transport.  A Deck object is instantiated with the layer and view state and calls `.show()` to render the viz. Crucially, `use_binary_transport` is set to `True`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/07 - Binary Transport.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nview_state = pdk.ViewState(\n    offset=[0, 0],\n    latitude=None,\n    longitude=None,\n    bearing=None,\n    pitch=None,\n    zoom=10\n)\nviews = [pdk.View(type=\"OrbitView\", controller=True)]\n\nnodes_layer = pdk.Layer(\n    \"PointCloudLayer\",\n    nodes,\n    id=\"binary-points\",\n    use_binary_transport=True,\n    get_position=\"position\",\n    get_normal=[10, 100, 10],\n    get_color=\"color\",\n    pickable=True,\n    auto_highlight=True,\n    highlight_color=[255, 255, 0],\n    radius=50,\n)\n\npdk.Deck(layers=[nodes_layer], initial_view_state=view_state, views=views, map_provider=None).show()\n```\n\n----------------------------------------\n\nTITLE: Configuration of GeoJsonLayer with pointType property\nDESCRIPTION: This code demonstrates the creation of a GeoJsonLayer with the new 'pointType' property set to 'circle+text', enabling rendering point features as both circles and labels. The 'getText' and 'getTextSize' functions specify label content and size respectively, improving point feature visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew GeoJsonLayer({\n  ...\n  pointType: 'circle+text',\n  getText: f => f.properties.name,\n  getTextSize: 12\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Widgets into a Deck instance (TypeScript)\nDESCRIPTION: Example demonstrates how to integrate multiple widgets (CompassWidget, ZoomWidget, FullscreenWidget, ScreenshotWidget) into a Deck instance.  It imports required widgets, configures the Deck class and instantiates specified widgets.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/overview.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {\n  CompassWidget,\n  ZoomWidget,\n  FullscreenWidget,\n  ScreenshotWidget,\n} from '@deck.gl/widgets';\nimport '@deck.gl/widgets/stylesheet.css';\n\nnew Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: true,\n  layers: [\n    ...\n  ],\n  widgets: [\n    new ZoomWidget(),\n    new CompassWidget(),\n    new FullscreenWidget(),\n    new ScreenshotWidget()\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating MapboxLayer Properties - JavaScript\nDESCRIPTION: This snippet demonstrates how to update the properties of a `MapboxLayer` after it has been added to the map. It uses the `setProps` method to modify the layer's configuration, such as changing the `radiusScale` of a scatterplot layer. This method has no effect if a `props.deck` instance is provided during instantiation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mapbox/mapbox-layer.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst layer = new MapboxLayer({\n    id: 'my-scatterplot',\n    type: ScatterplotLayer,\n    ...\n});\n\nmap.addLayer(layer);\n\nlayer.setProps({\n    radiusScale: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering ExamplesIndex with Custom Thumbnail Function (React/JSX)\nDESCRIPTION: This snippet imports the `ExamplesIndex` component and renders it. It configures the component using the `getThumbnail` prop, providing an arrow function to dynamically construct the URL for each item's thumbnail image. The URL is based on the item's `docId` or lowercase `label`, pointing to the `/images/examples/` directory. Requires the `ExamplesIndex` component from `../components`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ExamplesIndex} from '../components';\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<ExamplesIndex getThumbnail={item => `/images/examples/${item.docId || item.label.toLowerCase()}.jpg`} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the deck.gl GlobeView Example (Bash)\nDESCRIPTION: This script provides commands to install project dependencies using either npm or yarn, and then bundles and serves the application using Vite via the 'npm start' command. It assumes Node.js and npm/yarn are installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/globe/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Aggregation API: Feeding Results to Layers\nDESCRIPTION: This snippet shows how the results of the aggregator can be fed into one or more layers. It shows properties that utilize the result.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.1/gpu-grid-layer.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n   color: aggregator.COUNT_SUM,\n   colorScale: ..., // Some format that can be GLSL compiled\n   elevation: aggregator.VALUE_MIN,\n   ...\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering GeoJsonLayer Polygon Demo in React\nDESCRIPTION: A simple React component import and rendering pattern for displaying a GeoJsonLayer polygon visualization demo. The code imports a demo component and renders it directly within the page.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/geojson-layer-polygons.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Demo from './geojson-layer-polygons';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting App with npm/yarn (bash)\nDESCRIPTION: Provides instructions for setting up and running the deck.gl example project. Use `npm install` or `yarn` to fetch necessary packages defined in the project's `package.json`. Then, use `npm start` to execute the script configured to build and serve the application, typically using Vite.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/plot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: ImageSource Interface and WMS Implementation in TypeScript\nDESCRIPTION: Defines an ImageSource interface and implements a WMSDataSource class that handles different WMS requests like GetCapabilities, GetMap, GetLegendImage, and GetFeatureInfo using loaders.gl functionality.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.9/wms-layer-rfc.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ImageSource {\n  getCapabilities(): Promise<ImageDataSourceCapabilities>;\n  getImage({boundingBox, width, height, layers, parameters}): Promise<Image>;\n  getLegendImage({layers, parameters}): Promise<Image>;\n  getFeatureInfo({layers, parameters}): Promise<ImageFeatureInfo>;\n  getLayerInfo({layers, parameters}): Promise<ImageDataSourceLayerInfo>\n}\n\nimport {load, LoaderOptions} from '@loaders.gl/core';\nimport {WMSCapabilitiesLoader, WMSFeatureInfoLoader} from '@loaders.gl/wms';\nimport {ImageLoader} from '@loaders.gl/images';\n\nclass WMSDataSource implements ImageDataSource {\n  url: string;\n  loadOptions: LoaderOptions = {};\n\n  constructor({url, loadOptions: LoaderOptions}) {\n    this.url = url;\n    this.loadOptions = loadOptions;\n  }\n\n  getCapabilities(): Promise<ImageDataSourceCapabilities> {\n    const url = this._getUrl({request: 'GetCapabilities', layers, parameters});\n    return load(url, WMSCapabilitiesLoader, this.loadOptions);\n  }\n\n  getImage({boundingBox, width, height, layers: string[], parameters: Record<string, unknown>}): Promise<Image> {\n    const url = this._getUrl({request: 'GetMap', layers, parameters});\n    return load(url, ImageLoader, this.loadOptions);\n  }\n\n  getLegendImage(options: {layers: string[], parameters: Record<string, unknown>}): Promise<Image> {\n    const url = this._getUrl({request: 'GetLegendImage', layers, parameters});\n    return load(url + '?REQUEST=GetCapabilities', WMSCapabilitiesLoader, this.loadOptions);\n  }\n\n  getFeatureInfo({layers: string[], parameters: Record<string, unknown>}): Promise<ImageFeatureInfo> {\n    const url = this._getUrl({request: 'GetFeatureInfo', layers, parameters});\n    return load(url + '?REQUEST=GetCapabilities', ImageLoader, this.loadOptions);\n  }\n\n  getLayerInfo({layers: string[], parameters: Record<string, unknown>}): Promise<ImageDataSourceLayerInfo> {\n    const url = this._getUrl({request: 'GetLayerInfo', layers, parameters})\n    return load(url + '?REQUEST=GetLayerInfo', WMSLayerInfoLoader, this.loadOptions);\n  }\n\n  /**\n   * @note protected, since perhaps getUrl may need to be overridden to handle certain backends?\n   * @note if override is common, maybe add a callback prop?\n   * */\n  protected getUrl(options: {request: string; layers: string[], parameters: Record<string, unknown>}): string {\n    let url = `${this.url}?REQUEST=${options.request}`;\n    if (options.layers.length) {\n      url += `&LAYERS=[${options.layers.join(',')}]`;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm - bash\nDESCRIPTION: Installs project dependencies using the npm package manager. This command reads the `package.json` file and downloads necessary packages into the `node_modules` directory. It is a prerequisite for running the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/google-3d-tiles/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering FirstPersonView Demo in React - JavaScript\nDESCRIPTION: This code snippet imports a Demo component, presumed to encapsulate the first-person view demonstration, from a local file and renders it as part of the React element tree. No additional dependencies besides React and the local Demo module are required. The input is implicit as the component props, and the output is the rendered UI representing the demo; the snippet assumes the Demo component to be correctly implemented and exported.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/first-person-view.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './first-person-view';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Uniforms in ScatterplotLayer - JavaScript\nDESCRIPTION: This snippet shows how to define additional uniforms for a custom shader in a `ScatterplotLayer`. It extends the `ScatterplotLayer`, overrides the `draw()` method to pass the `cornerRadius` prop as a uniform to the shader. It also overrides the `getShaders()` method to inject a custom fragment shader.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/subclassed-layers.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/// rounded-rectangle-layer.js\n// Example to draw rounded rectangles instead of circles in ScatterplotLayer\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport customFragmentShader from './rounded-rectangle-layer-fragment';\n\nexport default RoundedRectangleLayer extends ScatterplotLayer {\n\n  draw({uniforms}) {\n    super.draw({\n      uniforms:\n        {\n        ...uniforms,\n        cornerRadius: this.props.cornerRadius\n        }\n    })\n  }\n\n  getShaders() {\n    // use object.assign to make sure we don't overwrite existing fields like `vs`, `modules`...\n    return Object.assign({}, super.getShaders(), {\n      fs: customFragmentShader\n    });\n  }\n}\n\nRoundedRectangleLayer.defaultProps = {\n  // cornerRadius: the amount of rounding at the rectangle corners\n  // 0 - rectangle. 1 - circle.\n  cornerRadius: 0.1\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Accessors using Cached Data (TypeScript)\nDESCRIPTION: This code optimizes the `ScatterplotLayer` by pre-calculating and caching derived data (like maximum populations) and using constants to avoid creating new color arrays for each object.  It greatly improves performance by reducing computations. It also utilizes the `{index}` and the pre-calculated data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Color} from '@deck.gl/core';\n\n// Calculate max population once and cache it\nconst maxPopulations: number[] = Data.map((d: CensusTract) => {\n  // Use a for loop to avoid creating new objects\n  let maxPopulation = 0;\n  for (const year in populationsByYear) {\n    const population = populationsByYear[year];\n    if (population > maxPopulation) {\n      maxPopulation = population;\n    }\n  }\n  return maxPopulation;\n});\n\n// Use constant color values to avoid generating new arrays\nconst COLORS: {[name: string]: Color} = {\n  ONE_MILLION: [255, 0, 0],\n  HUNDRED_THOUSAND: [0, 255, 0],\n  OTHER: [0, 0, 255]\n};\n\nconst layer = new ScatterplotLayer<CensusTract>{\n  data: DATA,\n  getPosition: (d: CensusTract) => d.centroid,\n  getFillColor: (d: CensusTract, {index}) => {\n    const maxPopulation = maxPopulations[index];\n    if (maxPopulation > 1000000) {\n      return COLORS.ONE_MILLION;\n    } else if (maxPopulation > 100000) {\n      return COLORS.HUNDRED_THOUSAND;\n    } else {\n      return COLORS.OTHER;\n    }\n  },\n  getRadius: (d: CensusTract, {index}) => Math.sqrt(maxPopulations[index]),\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from MapboxLayer to MapboxOverlay - Typescript\nDESCRIPTION: This example demonstrates how to replace `MapboxLayer` with `MapboxOverlay` in deck.gl v9. It illustrates the change in API from adding a layer directly to the map to using `MapboxOverlay` as a control and passing the deck.gl layers within it.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// deck.gl v9\nimport {MapboxOverlay} from '@deck.gl/mapbox'\nmap.addControl(new MapboxOverlay({\n  interleaved: true,\n  layers: [new ArcLayer({...})] \n}))\n// deck.gl v8\nimport {MapboxLayer} from '@deck.gl/mapbox'\nmap.addLayer(new MapboxLayer({type: ArcLayer, ...}))\n```\n\n----------------------------------------\n\nTITLE: Setting Google Maps API Credentials via Environment Variables (Bash)\nDESCRIPTION: Sets the required Google Maps API Key and Map ID as environment variables using the `export` command in a Bash shell. This is one method to provide necessary credentials to the deck.gl React application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/google-maps/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GoogleMapsAPIKey=<google_maps_api_key>\nexport GoogleMapsMapId=<google_maps_map_id>\n```\n\n----------------------------------------\n\nTITLE: Using accessor props for optimized vertex attributes\nDESCRIPTION: This example illustrates defining accessor properties with specified return types, such as 'vector4', allowing for either per-vertex functions or uniform values that enhance rendering performance. It supports setting accessors to constant values for optimization, or functions for dynamic per-vertex calculation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.3/prop-types-rfc.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst defaultProps = {\n  getColor: {type: 'accessor', returns: 'vector4', ... }\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Layer({getColor: x => [255, 0, 0]}) // per vertex function\nnew Layer({getColor: [255, 0, 0]}) // shared constant value\n```\n\n----------------------------------------\n\nTITLE: Initializing TerrainLayer with a Single Elevation Image in React\nDESCRIPTION: React component implementation that creates a DeckGL instance with a TerrainLayer. Demonstrates how to integrate the TerrainLayer within a React application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/terrain-layer.md#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {TerrainLayer} from '@deck.gl/geo-layers';\n\nfunction App() {\n  const layer = new TerrainLayer({\n    elevationDecoder: {\n      rScaler: 2,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    },\n    // Digital elevation model from https://www.usgs.gov/\n    elevationData: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/terrain.png',\n    texture: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/terrain-mask.png',\n    bounds: [-122.5233, 37.6493, -122.3566, 37.8159],\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TextLayer Font Atlas Cache Limit (TypeScript)\nDESCRIPTION: Demonstrates how to override the default cache limit for font atlases within the deck.gl `TextLayer`. Increasing this limit via the static property `TextLayer.fontAtlasCacheLimit` can mitigate performance issues caused by frequent eviction and recreation of font atlases when using numerous different fonts or font styles simultaneously. It's recommended to set this value once at application startup. Requires `@deck.gl/layers`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TextLayer} from '@deck.gl/layers';\n\nTextLayer.fontAtlasCacheLimit = 10;\n\n// ... rest of the application\n```\n\n----------------------------------------\n\nTITLE: Exporting a pydeck Map to HTML in Python\nDESCRIPTION: Exports the configured pydeck map visualization (`r`) to a standalone HTML file. Calling the `to_html()` method on the `pdk.Deck` instance generates the necessary HTML, JavaScript, and data embedding (or linking) to render the map interactively in a web browser, independent of the Python or Jupyter environment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/01 - Introduction.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nr.to_html()\n```\n\n----------------------------------------\n\nTITLE: Using binary attributes with TextLayer in deck.gl\nDESCRIPTION: Explains how to supply text and related attributes directly via buffers for optimized performance, including handling `startIndices` for variable-length strings, and optional background attributes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nBecause each text string has a different number of characters, when `data.attributes.getText` is supplied, the layer also requires an array `data.startIndices` that describes the character index at the start of each text object. For example, if there are 3 text objects of 2, 3, and 4 characters each, `startIndices` should be `[0, 2, 5, 9]`.\n\nAdditionally, all other attributes (`getColor`, `getWidth`, etc.), if supplied, must contain the same layout (number of characters) as the `getText` buffer.\n\nExample use case:\n\n```ts title=\"Use plain JSON array\"\nconst TEXT_DATA = [\n  {\n    text: 'Hello',\n    position: [-122.4, 37.7],\n    color: [255, 0, 0]\n  },\n  {\n    text: 'World',\n    position: [-122.5, 37.8],\n    color: [0, 0, 255]\n  },\n  // ...\n];\n\nnew TextLayer({\n  data: TEXT_DATA,\n  getText: d => d.text,\n  getPosition: d => d.position,\n  getColor: d => d.color\n})\n```\n\nThe equivalent binary attributes could be:\n\n```ts title=\"Use binary attributes\"\n// USE BINARY\n// Flatten the text by converting to unicode value\n// Non-Latin characters may require Uint16Array\n// [72, 101, 108, 108, 111, ...]\nconst texts = new Uint8Array(TEXT_DATA.map(d => Array.from(d.text).map(char => char.charCodeAt(0))).flat());\n// The position attribute must supply one position for each character\n// [-122.4, 37.7, -122.4, 37.7, -122.4, 37.7, ...]\nconst positions = new Float64Array(TEXT_DATA.map(d => Array.from(d.text).map(_ => d.position)).flat(2));\n// The color attribute must supply one color for each character\n// [255, 0, 0, 255, 0, 0, 255, 0, 0, ...]\nconst colors = new Uint8Array(TEXT_DATA.map(d => Array.from(d.text).map(_ => d.color)).flat(2));\n\n// The \"layout\" that tells TextLayer where each string starts\nconst startIndices = new Uint16Array(TEXT_DATA.reduce((acc, d) => {\n  const lastIndex = acc[acc.length - 1];\n  acc.push(lastIndex + d.text.length);\n  return acc;\n}, [0]));\n\nnew TextLayer({\n  data: {\n    length: TEXT_DATA.length,\n    startIndices: startIndices, // this is required to render the texts correctly!\n    attributes: {\n      getText: {value: texts},\n      getPosition: {value: positions, size: 2},\n      getColor: {value: colors, size: 3}\n    }\n  }\n})\n```\n\n### Use binary attributes with background\n\nTo use `background: true` with binary data, the background attributes must be supplied separately via `data.attributes.background`. Each attribute is packed with *one vertex* per object.\n\n`data.attributes.background` may contain the following keys:\n\n- `getPosition`: corresponds to the `getPosition` accessor\n- `getAngle`: corresponds to the `getAngle` accessor\n- `getSize`: corresponds to the `getSize` accessor\n- `getPixelOffset`: corresponds to the `getPixelOffset` accessor\n- `getFillColor`: corresponds to the `getBackgroundColor` accessor\n- `getLineColor`: corresponds to the `getBorderColor` accessor\n- `getLineWidth`: corresponds to the `getBorderWidth` accessor\n\nFollowing the above example, additional attributes are required to render the background:\n\n```ts\n// The background position attribute supplies one position for each text block\nconst backgroundPositions = new Float64Array(TEXT_DATA.map(d => d.position).flat());\n// The background color attribute supplies one color for each text block\nconst backgroundColors = new Uint8Array(TEXT_DATA.map(d => d.bgColor).flat());\n\nnew TextLayer({\n  data: {\n    length: TEXT_DATA.length,\n    startIndices: startIndices, // this is required to render the texts correctly!\n    attributes: {\n      getText: {value: texts},\n      getPosition: {value: positions, size: 2},\n      getColor: {value: colors, size: 3},\n      background: {\n        getPosition: {value: backgroundPosition, size: 2},\n        getFillColor: {value: backgroundColors, size: 3}\n      }\n    }\n  },\n  background: true\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Defining VectorTilesetSourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `VectorTilesetSourceOptions` type, used by the `vectorTilesetSource` function. It contains a single property, `tableName`.  It specifies which table to use when fetching the tileset, and is responsible for getting the source data for vector tiles.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype VectorTilesetSourceOptions = {\n  tableName: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Collision Groups for Multiple Layers (JavaScript)\nDESCRIPTION: Example demonstrating how to use the `collisionGroup` property to control which layers participate in collision detection together. Layers with the same `collisionGroup` ('legend' in this case) will avoid collisions with each other, but not necessarily with layers in different groups ('visualization').\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/collision-filter-extension.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst layers = [\n  new ScatterplotLayer({\n    ...,\n    extensions: [new CollisionFilterExtension()],\n    collisionGroup: 'visualization'\n  }),\n  new IconLayer({\n    ...,\n    extensions: [new CollisionFilterExtension()],\n    collisionGroup: 'legend'\n  }),\n  new TextLayer({\n    ...,\n    extensions: [new CollisionFilterExtension()],\n    collisionGroup: 'legend'\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Using String Input for Color with pydeck Expression Parser in Python\nDESCRIPTION: Illustrates using the deck.gl expression parser by passing the RGBA color value for `get_fill_color` as a string literal instead of a Python list. The parser evaluates the string '[180, 0, 200, 140]' and converts it into the appropriate color array for the ScatterplotLayer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/layer.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlayer = pdk.Layer(\n    'ScatterplotLayer',\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    get_radius=1000,\n    get_fill_color='[180, 0, 200, 140]',\n    pickable=True)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Pydeck Layer in Python\nDESCRIPTION: Demonstrates how to instantiate and use a custom deck.gl layer within a pydeck visualization in Python. This code assumes a custom layer (e.g., 'CustomHexagonLayer') has been defined and made available in the JavaScript frontend environment. It involves importing pydeck, preparing data (using pandas), defining the custom layer instance with its specific properties, setting up the view state, and creating a pydeck Deck object incorporating the custom layer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/custom_layers.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Placeholder for ../examples/custom_layer.py\nimport pydeck as pdk\nimport pandas as pd\n\n# Assume 'CustomHexagonLayer' is the identifier for the custom layer\n# provided by the external JavaScript bundle.\n# The actual mechanism for referencing might vary based on the\n# custom layer setup (e.g., via a specific pydeck function or class).\n\n# Sample data\nDATA_URL = \"https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv\"\ndf = pd.read_csv(DATA_URL)\n\n# Define the custom layer instance\n# The specific properties will depend on the custom layer's definition.\ncustom_layer = pdk.Layer(\n    \"CustomHexagonLayer\", # Type name must match the registered layer in JS\n    data=df,\n    get_position=\"[lng, lat]\",\n    # Other props specific to CustomHexagonLayer...\n    radius=1000,\n    elevation_scale=50,\n    pickable=True,\n    extruded=True,\n)\n\n# Define the view state\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36\n)\n\n# Create the Deck object\nr = pdk.Deck(\n    layers=[custom_layer],\n    initial_view_state=view_state,\n    map_style=pdk.map_styles.LIGHT,\n    tooltip={\"text\": \"Concentration: {elevationValue}\"}\n)\n\n# To save or show the visualization\n# r.to_html(\"custom_layer_example.html\")\n# r.show() # In a Jupyter environment\n```\n\n----------------------------------------\n\nTITLE: Configuring Functions for deck.gl JSON Conversion (JavaScript)\nDESCRIPTION: Defines a JavaScript function `calculateRadius` and registers it within the `JSONConverter` configuration under the `functions` key. This allows the function to be referenced and executed via the `@@function` prefix in JSON.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction calculateRadius({base, exponent}) {\n  return Math.pow(base, exponent);\n}\n\nconst configuration = {\n  ...,\n  functions: {calculateRadius}\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Access Token and Starting with NPM\nDESCRIPTION: This command sets the Mapbox access token as an environment variable and then starts the example application using npm. This is required if the example uses a Mapbox base map. Requires that you replace {Your Token Here} with your actual Mapbox token.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport MapboxAccessToken={Your Token Here} && npm start\n```\n\n----------------------------------------\n\nTITLE: snap_thumbnails.py - Script for Creating Thumbnails from Examples\nDESCRIPTION: This script generates PNG thumbnail images from example scripts, which are used in the HTML grid for visual referencing. To create thumbnails, it requires Python packages pyppeteer and Image, and is used within the process of updating documentation visual assets.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/scripts/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n/* Content not provided in the input. */\n```\n\n----------------------------------------\n\nTITLE: Customizing Themes in TypeScript\nDESCRIPTION: This snippet illustrates how to create a custom theme by extending an existing one, such as `DarkTheme`.  It requires the `Theme` type from `@deck.gl/widgets` and imports the base theme (e.g., `DarkTheme`).  The `...` operator is used to merge the base theme with custom properties to modify the appearance of the widget.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/styling.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport type {Theme} from '@deck.gl/widgets';\nimport {DarkTheme} from '@deck.gl/widgets';\n\nconst CustomTheme = {\n  ...DarkTheme,\n  ...\n} satisfies Theme;\n```\n\n----------------------------------------\n\nTITLE: Deep Picking Multiple Objects with pickMultipleObjects (JavaScript)\nDESCRIPTION: Performs deep picking to find multiple pickable and visible objects at a screen coordinate, including those occluded by others. This method returns an array of all matching objects up to a specified depth. The snippet shows calling `pickMultipleObjects` with coordinates and optional parameters including `depth`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeck.pickMultipleObjects({x, y, radius, layerIds, depth, unproject3D})\n```\n\n----------------------------------------\n\nTITLE: Loading deck.gl and CARTO Bundles via CDN (HTML Script Tags)\nDESCRIPTION: Illustrates including deck.gl and relevant submodules (core, layers, geo-layers, carto) in an HTML page using unpkg CDN URLs. Supports direct use in browser environments without bundlers or npm installation; scripts should be loaded in order to satisfy dependencies. No parameters; outputs global deck and deck.carto objects for use in browser JavaScript. Requires appropriate browser support and network access.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/heatmap-tile-layer.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Refreshing deck.gl ScatterplotLayer Data with Versioning in React - TypeScript and JSX\nDESCRIPTION: Illustrates a React functional component that periodically refreshes a ScatterplotLayer by incrementing a dataVersion state. It uses useEffect to schedule updates every five minutes, forcing data reload by altering the data URL with a version query parameter. The example combines deck.gl layering with React state and effects, supporting typed data input.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, {useState, useEffect} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapViewState} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst INITIAL_VIEW_STATE: MapViewState = {\n  longitude: -122.4,\n  latitude: 27.8,\n  zoom: 8\n};\n\ntype DataType = {\n  position: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const [dataVersion, setDataVersion] = useState<number>(0);\n\n  useEffect(() => {\n    const nextUpdate = setTimeout(() => setDataVersion(dataVersion + 1), 5 * 60 * 1000);\n    return () => clearTimeout(nextUpdate);\n  }, [dataVersion]);\n\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      data: `/path/to/data.json?v=${++dataVersion}`,\n      getPosition: (d: DataType) => d.position\n    })\n  ];\n\n  return <DeckGL\n    initialViewState={INITIAL_VIEW_STATE}\n    controller\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Pick and User Data on Transport Back-Channel Event (JSON)\nDESCRIPTION: This snippet shows a JSON object representing an event sent over the transport back-channel in the deck.gl/pydeck architecture. The event includes both user data previously specified for the event and a pick info object that contains metadata about the object that was picked (e.g., on click or hover). This structure enables event context, user state, and selection information to be communicated between frontend and backend.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/pydeck-interactive-api-rfc.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"@@type\": 'event'\n  \"data\": <user_data>\n  \"info\": <pick info object>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scatterplot Layer with pydeck in Python\nDESCRIPTION: This snippet creates a ScatterplotLayer to visualize the subway stop data using pydeck. It defines the layer type, data source (a DataFrame), and various visual parameters like radius and fill color. The `get_position` argument specifies the columns for longitude and latitude. Requires the dataframe loaded and cleaned.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/02 - Scatterplots.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import display\nimport ipywidgets\n\nyear = 2019\n\nscatterplot = pdk.Layer(\n    'ScatterplotLayer',\n    df,\n    get_position=['lng', 'lat'],\n    get_radius=500,\n    get_fill_color='color')\nr = pdk.Deck(scatterplot, initial_view_state=viewport)\n\n# Create an HTML header to display the year\ndisplay_el = ipywidgets.HTML('<h1>{}</h1>'.format(year))\ndisplay(display_el)\n# Show the current visualization\nr.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing PointCloudLayer in React\nDESCRIPTION: This React snippet demonstrates how to integrate a PointCloudLayer within a React component using deck.gl's `DeckGL` component. It defines the data accessors, and initializes the `PointCloudLayer` with appropriate properties such as color, normal, and position accessors, coordinate system, and picking settings, within a functional React component. It also sets up the initial view state, controller, and tooltip.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/point-cloud-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype DataType = {\n  position: [x: number, y: number, z: number];\n  normal: [nx: number, ny: number, nz: number];\n  color: [r: number, g: number, b: number];\n};\n\nfunction App() {\n  const layer = new PointCloudLayer<DataType>({\n    id: 'PointCloudLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/pointcloud.json',\n    \n    getColor: (d: DataType) => d.color,\n    getNormal: (d: DataType) => d.normal,\n    getPosition: (d: DataType) => d.position,\n    pointSize: 2,\n    coordinateOrigin: [-122.4, 37.74],\n    coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<DataType>) => object && object.position.join(', ')}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing BitmapLayer Image from Raw RGBA Pixels - TypeScript\nDESCRIPTION: Shows how to pass an ImageData object created from raw pixel array data directly to BitmapLayer’s image prop. This approach bypasses loader usage when raw pixel data is already available, enabling efficient rendering without additional parsing or loading steps.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew BitmapLayer({\n  image: new ImageData(pixels, 128, 128)\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging in deck.gl - JavaScript\nDESCRIPTION: Activates logging in deck.gl by enabling the logging subsystem and sets the verbosity to level 2. Requires that deck.gl and its log utilities (based on probe.gl) are loaded in the environment. 'deck.log.enable()' turns on logging, while 'deck.log.level = 2' specifies that layer update messages should be shown in the JavaScript console. This is typically run interactively in the browser developer console or as initialization code in an application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/debugging.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeck.log.enable()\ndeck.log.level = 2\n```\n\n----------------------------------------\n\nTITLE: Updating the binder branch\nDESCRIPTION: This snippet updates the binder branch to align with the master branch. It checks out the master branch, pulls the latest changes, checks out the binder branch, merges changes from master and pushes to binder.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/PUBLISH.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\ngit pull\ngit checkout binder\ngit merge binder\ngit push\n```\n\n----------------------------------------\n\nTITLE: Stateful Render Callback Pattern for DeckGL with StaticMap - React JSX\nDESCRIPTION: Shows the usage of the DeckGL component with an initialViewState prop for internal state management and a render callback child to render the StaticMap component. The viewState provided by the DeckGL's internal state is passed to StaticMap, allowing the DeckGL component to control and emit view state changes autonomously. The onViewStateChange callback is simply logged here. This pattern simplifies parent component state management in multi-view scenarios with proper React lifecycle usage. Dependencies include React, deck.gl, StaticMap, MapController, and initial view state constants.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/react-api-rfc.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DeckGL\n  layers={layers}\n  initialViewState={INITIAL_VIEW_STATE}\n  onViewStateChange={console.log}\n  controller={MapController}\n>\n  {({width, height, viewState, viewport}) => <StaticMap\n    width={width}\n    height={height}\n    viewState={viewState}\n    mapStyle={mapStyle}\n    mapboxApiAccessToken={mapboxApiAccessToken}\n  />}\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: DeckGL with JSX ZoomWidget\nDESCRIPTION: This code shows how to use JSX syntax to create deck.gl widgets. It imports `DeckGL`, and assumes `ZoomWidget`.  The `ZoomWidget` is defined as a child of the `DeckGL` component. This is an example demonstrating how to use JSX to create and position widgets within a deck.gl application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/deckgl.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n  <DeckGL initialViewState={...viewState}>\n    <ZoomWidget id=\"zoom-widget\" placement=\"top-right\" />\n  <DeckGL />\n```\n\n----------------------------------------\n\nTITLE: Constraining view state within bounds in TypeScript\nDESCRIPTION: Defines a type-safe function to constrain view state within geographic bounds, used with onViewStateChange in deck.gl setup. Dependencies include '@deck.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, MapViewState} from '@deck.gl/core';\n\nconst bounds: [\n  [west: number, south: number],\n  [east: number, north: number]\n] = [\n  [-123, 37],\n  [-122, 38]\n];\n\nfunction applyViewStateConstraints(viewState: MapViewState): MapViewState {\n  return {\n    ...viewState,\n    longitude: Math.min(bounds[1][0], Math.max(bounds[0][0], viewState.longitude)),\n    latitude: Math.min(bounds[1][1], Math.max(bounds[0][1], viewState.latitude))\n  };\n}\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  controller: true,\n  onViewStateChange: ({viewState}) => applyViewStateConstraints(viewState)\n});\n```\n\n----------------------------------------\n\nTITLE: Import and Instantiate TerrainExtension (deck.gl)\nDESCRIPTION: This JavaScript code snippet imports and instantiates the TerrainExtension from @deck.gl/extensions. This makes the TerrainExtension available for use with deck.gl layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/terrain-extension.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {_TerrainExtension as TerrainExtension} from '@deck.gl/extensions';\nnew TerrainExtension();\n```\n\n----------------------------------------\n\nTITLE: Coordinate System Specification in deck.gl\nDESCRIPTION: Properties `coordinateSystem` and `coordinateOrigin` define how layer coordinates are interpreted geographically, supporting modes like Cartesian and longitude/latitude offsets. These settings are essential for layers working with non-standard coordinate formats, influencing how positions are mapped onto the globe or scene.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n`coordinateSystem` determines the interpretation of geospatial positions, defaulting to latitude/longitude. Options include Cartesian and meter offsets.\n\n`coordinateOrigin` sets a reference point for offset-based coordinate systems, defaulting to `[0, 0, 0]`. It is necessary when using offset modes for accurate positioning.\n```\n\n----------------------------------------\n\nTITLE: Using Binary Data for ScatterplotLayer with target (Efficient)\nDESCRIPTION: This optimized version uses the `target` argument in the accessors. By modifying the existing `target` array directly, it further reduces object creation. This approach offers the highest performance, especially for animation and frequent updates.  It utilizes the `target` array to avoid allocations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst DATA = {src: binaryData, length: binaryData.length / 6}\n\nconst layer = new ScatterplotLayer({\n  data: DATA,\n  getPosition: (_, {index, data, target}) => {\n    target[0] = data.src[index * 6];\n    target[1] = data.src[index * 6 + 1];\n    target[2] = 0;\n    return target;\n  },\n  getRadius: (_, {index, data}) => {\n    return data.src[index * 6 + 2];\n  },\n  getFillColor: (_, {index, data, target}) => {\n    target[0] = data.src[index * 6 + 3];\n    target[1] = data.src[index * 6 + 4];\n    target[2] = data.src[index * 6 + 5];\n    target[3] = 255;\n    return target;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing ArcLayer in TypeScript\nDESCRIPTION: TypeScript implementation of ArcLayer with strongly typed data structure for BART transportation segments, including proper type definitions for data accessors and picking info.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/arc-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {ArcLayer} from '@deck.gl/layers';\n\ntype BartSegment = {\n  inbound: number;\n  outbound: number;\n  from: {\n    name: string;\n    coordinate: [longitude: number, latitude: number];\n  };\n  to: {\n    name: string;\n    coordinate: [longitude: number, latitude: number];\n  };\n};\n\nconst layer = new ArcLayer<BartSegment>({\n  id: 'ArcLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-segments.json',\n  getSourcePosition: (d: BartSegment) => d.from.coordinates,\n  getTargetPosition: (d: BartSegment) => d.to.coordinates,\n  getSourceColor: (d: BartSegment) => [Math.sqrt(d.inbound), 140, 0],\n  getTargetColor: (d: BartSegment) => [Math.sqrt(d.outbound), 140, 0],\n  getWidth: 12,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<BartSegment>) => object && `${object.from.name} to ${object.to.name}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Using ClusterTileLayer with React in TypeScript (TSX)\nDESCRIPTION: Demonstrates initializing and configuring `ClusterTileLayer` within a React application using TypeScript (TSX). It shows importing necessary components, fetching Quadbin data using `quadbinTableSource`, and setting layer properties for data source, clustering (`getWeight`, `getPosition`), and styling (`pointType`, `getPointRadius`, `getText`).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/cluster-tile-layer.md#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {ClusterTileLayer, quadbinTableSource} from '@deck.gl/carto';\n\nfunction App({viewState}) {\n  const data = quadbinTableSource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    tableName: 'carto-demo-data.demo_tables.quadbin'\n  });\n\n  const layer = new ClusterTileLayer({\n    data,\n\n    // Clustering props\n    getWeight: d => d.properties.longitude_count,\n    getPosition: d => [d.properties.longitude_average, d.properties.latitude_average];\n\n    // Styling (supports all GeoJsonLayer props)\n    pointType: 'circle+text',\n    getPointRadius: d => d.properties.longitude_count / d.properties.stats.longitude_count,\n    pointRadiusUnits: 'pixels',\n    pointRadiusScale: 50,\n    getText: d => d.properties.longitude_count,\n    textSizeScale: 20\n  });\n\n  return <DeckGL viewState={viewState} layers={[layer]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the deck.gl LineLayer Example\nDESCRIPTION: Commands for setting up dependencies and launching the LineLayer example application using npm or yarn, with vite as the bundler and development server.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/webgpu-line/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running deck.gl OrthographicView Example - Bash\nDESCRIPTION: Shell commands to install required dependencies for the deck.gl OrthographicView example using npm or yarn package managers, followed by starting the application with vite bundler via npm start. These commands assume a Node.js environment and help bootstrap and serve the minimal example application locally.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/orthographic/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running deck.gl BezierCurveLayer Example (Shell)\nDESCRIPTION: This shell script provides the command-line steps to set up and run the minimal deck.gl BezierCurveLayer example. It first installs project dependencies using npm install, then starts the development server or application with npm start.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/experimental/bezier/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Using Sliced Binary Buffers as Layer Input Data for PathLayer - JavaScript\nDESCRIPTION: Creates Float32Array and Uint16Array instances representing positions and path start indices, respectively, forming a custom non-iterable data object for a PathLayer. The `getPath` accessor uses `startIndex` and `endIndex` to extract subarrays corresponding to separate paths. This pattern shows how variable-length segments of binary data buffers can define complex geometry for layers, improving integration with server or worker-generated binary data streams.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/binary-data-rfc.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// lon1, lat1, alt1, lon2, lat2, alt2, ...\nconst positions = new Float32Array([-122.426942, 37.801537, 0, -122.425942, 37.711537, 0, ...]);\n// path1_start_index, path2_start_index, ...\nconst pathStartIndices = new Uint16Array([0, 36, 72, 147]);\n\nconst data = {positions, pathStartIndices, length: 4};\n\nnew PathLayer({\n  data,\n  getPath: (object, {index, data}) => {\n    const {positions, pathStartIndices} = data;\n    const startIndex = pathStartIndices[index];\n    const endIndex = pathStartIndices[index + 1] || positions.length / 3;\n    return positions.subarray(startIndex * 3, endIndex * 3);\n  },\n  getWidth: 10,\n  getColor: [255, 0, 0]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing ScenegraphLayer and Deck in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the ScenegraphLayer and a deck.gl instance using plain JavaScript. It loads data from a JSON file and a glTF model from a URL, mapping data points to model instances with random orientation and specified scaling. It also configures basic animation and PBR lighting.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/scenegraph-layer.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\n\nconst layer = new ScenegraphLayer({\n  id: 'ScenegraphLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-stations.json',\n  \n  getPosition: d => d.coordinates,\n  getOrientation: d => [0, Math.random() * 180, 90],\n  scenegraph: 'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/BoxAnimated/glTF-Binary/BoxAnimated.glb',\n  sizeScale: 500,\n  _animations: {\n    '*': {speed: 5}\n  },\n  _lighting: 'pbr',\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && object.name,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Unifying 32/64-bit Projection Function Interface in GLSL\nDESCRIPTION: This snippet presents the new common projection utility interface function `project_position_to_clipspace` which accepts 32-bit positions, optional 64-bit low parts, an offset vector, and outputs the projected world position while returning the projected clipspace position. It forms the core abstraction to unify vertex shaders for both fp32 and fp64 precision, enabling modular shader design with different implementations in the `project32` and `project64` modules. This helps shaders call a single function regardless of underlying precision, simplifying development and maintenance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/unified-32-and-64-bit-project-api-rfc.md#_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\nvec4 project_position_to_clipspace(vec3 positions, vec2 positions64xyLow, vec3 offset, out vec4 worldPosition);\n```\n\n----------------------------------------\n\nTITLE: Initializing H3HexagonLayer React\nDESCRIPTION: This React example integrates the H3HexagonLayer within a DeckGL component.  It defines a functional React component `App` which uses the H3HexagonLayer.  It sets the layer's properties, data accessors, and initial view state. This example demonstrates using the layer in a React application with the `@deck.gl/react` module.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-hexagon-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {H3HexagonLayer} from '@deck.gl/geo-layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype DataType = {\n  hex: string;\n  count: number;\n};\n\nfunction App() {\n  const layer = new H3HexagonLayer<DataType>({\n    id: 'H3HexagonLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.h3cells.json',\n\n    extruded: true,\n    getHexagon: (d: DataType) => d.hex,\n    getFillColor: (d: DataType) => [255, (1 - d.count / 500) * 255, 0],\n    getElevation: (d: DataType) => d.count,\n    elevationScale: 20,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<DataType>) => object && `${object.hex} count: ${object.count}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Picking a Single Object with pickObject (JavaScript)\nDESCRIPTION: Finds the closest pickable and visible object at a specific screen coordinate. This method is useful for handling hover or click events on individual objects. The snippet illustrates calling `pickObject` with required `x` and `y` coordinates and optional parameters like `radius`, `layerIds`, and `unproject3D`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeck.pickObject({x, y, radius, layerIds, unproject3D})\n```\n\n----------------------------------------\n\nTITLE: Importing pydeck and pandas\nDESCRIPTION: This code snippet imports the necessary libraries: pydeck for visualization and pandas for data manipulation. These are fundamental dependencies for using pydeck to render data from DataFrames.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/07 - Binary Transport.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck as pdk\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Installing specific pydeck prerelease version for JupyterLab (Bash)\nDESCRIPTION: This snippet extracts the correct semantic version of the @deck.gl/jupyter-widget labextension from the pydeck package and installs that exact version in JupyterLab. This is necessary for compatibility when using pydeck prerelease versions, ensuring smooth interactive widget integration.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/installation.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDECKGL_SEMVER=`python -c \"import pydeck; print(pydeck.frontend_semver.DECKGL_SEMVER)\"`\njupyter labextension install @deck.gl/jupyter-widget@$DECKGL_SEMVER\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies\nDESCRIPTION: NPM installation commands for deck.gl libraries required to use ArcLayer, including both the full package and individual core/layers modules.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/arc-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers\n```\n\n----------------------------------------\n\nTITLE: Initializing TextLayer with JavaScript\nDESCRIPTION: Demonstrates how to create and configure a `TextLayer` in plain JavaScript using deck.gl. It fetches data for BART stations, sets accessors for position (`getPosition`) and text content (`getText`), defines visual properties like color and size, enables picking, and integrates the layer into a Deck instance with a basic tooltip.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {TextLayer} from '@deck.gl/layers';\n\nconst layer = new TextLayer({\n  id: 'TextLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-stations.json',\n\n  getPosition: d => d.coordinates,\n  getText: d => d.name,\n  getAlignmentBaseline: 'center',\n  getColor: [255, 128, 0],\n  getSize: 16,\n  getTextAnchor: 'middle',\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && object.name,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl Standalone and Mapbox GL in HTML for Scripting API\nDESCRIPTION: HTML snippet showing how to include the standalone deck.gl library via CDN along with Mapbox GL JS and its stylesheet. These script and link tags allow deck.gl visualizations to use Mapbox as the base map renderer. It also incorporates CSS to make the map container fill the browser viewport by setting body width and height to 100vw and 100vh respectively with no margin.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-standalone.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@latest/dist.min.js\"></script>\n<!-- optional if mapbox base map is needed -->\n<script src=\"https://api.mapbox.com/mapbox-gl-js/v3.2.0/mapbox-gl.js\"></script>\n<link href=\"https://api.mapbox.com/mapbox-gl-js/v3.2.0/mapbox-gl.css\" rel=\"stylesheet\" />\n<!-- Allow the map to render in full screen  -->\n<style>\n  body {\n    width: 100vw;\n    height: 100vh;\n    margin: 0;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl Standalone and MapLibre GL in HTML for Scripting API\nDESCRIPTION: HTML snippet for loading the deck.gl standalone build alongside MapLibre GL JS and its stylesheet from CDN. This setup enables deck.gl visualizations with an open source alternative to Mapbox GL basemaps. It also includes CSS to ensure the map uses the full browser viewport without margin.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-standalone.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@latest/dist.min.js\"></script>\n<!-- optional if maplibre base map is needed -->\n<script src=\"https://unpkg.com/maplibre-gl@3.0.0/dist/maplibre-gl.js\"></script>\n<link href=\"https://unpkg.com/maplibre-gl@3.0.0/dist/maplibre-gl.css\" rel=\"stylesheet\" />\n<!-- Allow the map to render in full screen  -->\n<style>\n  body {\n    width: 100vw;\n    height: 100vh;\n    margin: 0;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using pre-bundled deck.gl scripts\nDESCRIPTION: Illustrates how to include deck.gl's pre-bundled scripts in an HTML file, loading the core, layers, and aggregation-layers modules. This includes instructions for using the main deck.gl library or individual modules directly from a CDN, which provides a way to use deck.gl without a build process.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/contour-layer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/aggregation-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing SunLight in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the `SunLight` class from the `@deck.gl/core` module.  It requires the `@deck.gl/core` dependency and initializes a new `SunLight` object, setting properties like `timestamp`, `color`, and `intensity`.  The output is a `SunLight` object which is then used within the deck.gl rendering pipeline.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/sun-light.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {_SunLight as SunLight} from '@deck.gl/core';\n\nnew SunLight({\n  timestamp: 1554927200000, \n  color: [255, 0, 0],\n  intensity: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ArcLayer in React\nDESCRIPTION: React component implementation of ArcLayer using the DeckGL component with TypeScript interfaces for BART transportation data visualization and interactive tooltips.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/arc-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {ArcLayer} from '@deck.gl/layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype BartSegment = {\n  inbound: number;\n  outbound: number;\n  from: {\n    name: string;\n    coordinate: [longitude: number, latitude: number];\n  };\n  to: {\n    name: string;\n    coordinate: [longitude: number, latitude: number];\n  };\n};\n\nfunction App() {\n  const layer = new ArcLayer<BartSegment>({\n    id: 'ArcLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-segments.json',\n    getSourcePosition: (d: BartSegment) => d.from.coordinates,\n    getTargetPosition: (d: BartSegment) => d.to.coordinates,\n    getSourceColor: (d: BartSegment) => [Math.sqrt(d.inbound), 140, 0],\n    getTargetColor: (d: BartSegment) => [Math.sqrt(d.outbound), 140, 0],\n    getWidth: 12,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<BartSegment>) => object && `${object.from.name} to ${object.to.name}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Contour Layer with Single Contour Configuration\nDESCRIPTION: This code snippet defines the configuration for a Contour Layer in deck.gl with a single contour level. It sets a threshold and color for the contour, along with a cell size for data aggregation and a stroke width for the contour line. Requires the COORDINATES property from the input data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.1/contour-layer-rfc.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprops: {\n  id: 'contourLayer',\n  contours: [\n    {threshold: 1, color: [255, 0, 0]}],\n  cellSize: 200,\n  getStrokeWidth: 1\n  getPosition: d => d.COORDINATES,\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing GoogleMapsOverlay in TypeScript\nDESCRIPTION: This snippet shows how to create an instance of GoogleMapsOverlay by importing it and providing configuration properties matching the GoogleMapsOverlayProps type from @deck.gl/google-maps. The constructor accepts layer configurations and related deck.gl properties, as well as the optional 'interleaved' boolean that determines canvas compositing. This object enables overlay functionality onto a Google Map and is used in subsequent overlay management.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/google-maps/google-maps-overlay.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {GoogleMapsOverlay} from '@deck.gl/google-maps';\nimport type {GoogleMapsOverlayProps} from '@deck.gl/google-maps';\n\nnew GoogleMapsOverlay(props: GoogleMapsOverlayProps);\n```\n\n----------------------------------------\n\nTITLE: GeoJsonLayer Unit Tests Example (tape)\nDESCRIPTION: This snippet demonstrates how to use `testLayer` with the `tape` testing framework to test the `GeoJsonLayer`. It showcases different test cases, including verifying feature updates and prop propagation to sublayers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/test-utils/test-layer.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport test from 'tape-promise/tape';\nimport {testLayer, testLayerAsync} from '@deck.gl/test-utils';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\ntest('GeoJsonLayer#tests', t => {\n  testLayer({Layer: GeoJsonLayer, testCases: [\n  \t// Test case 1\n    {\n      props: {data: []}\n    },\n    // Test case 2\n    {\n      props: {\n        data: SAMPLE_GEOJSON\n      },\n      onAfterUpdate({layer, oldState}) {\n        t.ok(layer.state.features !== oldState.features, 'should update features');\n        t.is(subLayers.length, 2, 'should render 2 subLayers');\n      }\n    },\n    // Test case 3\n    {\n      updateProps: {\n        // will be merged with the previous props\n        lineWidthScale: 3\n      },\n      onAfterUpdate({subLayers}) {\n        const pathLayer = subLayers.find(layer => layer.id.endsWith('linestrings'));\n        t.is(pathLayer.props.widthScale, 3, 'widthScale is passed to sub layer');\n      }\n    }\n  ]});\n\n  t.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing React with deck.gl and ScatterplotLayer\nDESCRIPTION: This React snippet initializes a React component using deck.gl and the ScatterplotLayer. It sets up the necessary imports and data type definition for creating a scatterplot visualization. This serves as a foundation for the following code examples in React.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState, useEffect} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [longitude: number, latitude: number];\n};\n```\n\n----------------------------------------\n\nTITLE: PolygonLayer Import and Instantiation (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import the PolygonLayer and its corresponding props type from the @deck.gl/layers module and create a new instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/polygon-layer.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {PolygonLayer} from '@deck.gl/layers';\nimport type {PolygonLayerProps} from '@deck.gl/layers';\n\nnew PolygonLayer<DataT>(...props: PolygonLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with OAuth using carto-auth in Python\nDESCRIPTION: This Python snippet demonstrates authenticating with a CARTO account using OAuth via the `CartoAuth.from_oauth()` method.  It utilizes the `carto_auth` package to obtain necessary credentials for subsequent CartoLayer usage. The parameters include `cache_filepath`, `use_cache`, `open_browser`, `api_base_url`, and `org` for controlling token storage, browser behavior, and CARTO account details. The output is a `carto_auth` object containing the authentication credentials.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/authentication.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom carto_auth import CartoAuth\n\ncarto_auth = CartoAuth.from_oauth()\n```\n\n----------------------------------------\n\nTITLE: Terrain and GeoJson Layer Initialization in deck.gl\nDESCRIPTION: This JavaScript code snippet initializes a TerrainLayer and a GeoJsonLayer, using the TerrainExtension to drape the GeoJsonLayer over the terrain. It configures the TerrainLayer with elevation data from Mapbox and the GeoJsonLayer with styling properties and the TerrainExtension. It depends on @deck.gl/layers, @deck.gl/geo-layers, and @deck.gl/extensions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/terrain-extension.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {TerrainLayer} from '@deck.gl/geo-layers';\nimport {_TerrainExtension as TerrainExtension} from '@deck.gl/extensions';\n\nconst layers = [\n  new TerrainLayer({\n      id: 'terrain',\n      minZoom: 0,\n      maxZoom: 23,\n      strategy: 'no-overlap',\n      elevationDecoder: {\n        rScaler: 6553.6,\n        gScaler: 25.6,\n        bScaler: 0.1,\n        offset: -10000\n      },\n      elevationData: `https://api.mapbox.com/v4/mapbox.terrain-rgb/{z}/{x}/{y}.png?access_token=${MAPBOX_TOKEN}`,\n      texture: `https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?access_token=${MAPBOX_TOKEN}`,\n      operation: 'terrain+draw'\n    }),\n    new GeoJsonLayer({\n      data,\n      getFillColor: [0, 160, 180, 200],\n      getLineColor: [220, 80, 0],\n      getLineWidth: 50,\n      getPointRadius: 150,\n      extensions: [new TerrainExtension()]\n    })\n];\n```\n\n----------------------------------------\n\nTITLE: Switching Default Prop Types in Custom Layers in JavaScript\nDESCRIPTION: Shows how to migrate prop defaults in custom deck.gl layers from a primitive value to an explicit descriptor object to ensure proper prop type handling and update triggering. This is intended to fix potential issues where layers do not update correctly on prop changes due to implicit default prop type inference. Requires understanding of deck.gl custom layers API and explicit prop type descriptors with fields like `type`, `value`, and constraints such as `min`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nMyLayer.defaultProps = {\n  prop: 0\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nMyLayer.defaultProps = {\n  prop: {type: 'number', value: 0, min: 0}\n};\n```\n\n----------------------------------------\n\nTITLE: Structuring Binary Data for LineString Geometries in TypeScript\nDESCRIPTION: Shows the TypeScript structure (`BinaryLineFeature`) for encoding LineString and MultiLineString features in the flat binary format for `deck.gl`. This includes `positions`, `pathIndices` (offsets into positions for each line start), and feature properties, using types from `@loaders.gl/schema`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {BinaryLineFeature} from '@loaders.gl/schema';\n\ndata.lines = {\n  type: 'LineString',\n  positions: {value: Float32Array([x0, y0, x1, y1, x2, y2, ...]), size: 2}, // Use size=2 for xy and size=3 for xyz\n  pathIndices: {value: Uint16Array([0, 5, 7, ...]), size: 1}, // First line contains vertex 0-4, second line contains vertex 5-6, ...\n  // featureIds\n  // globalFeatureIds\n  // numericProps\n  // properties\n} as BinaryLineFeature\n```\n\n----------------------------------------\n\nTITLE: Applying Themes to Widgets (TypeScript)\nDESCRIPTION: Example shows how to apply themes (DarkGlassTheme or LightGlassTheme) to widgets based on the user's preferred color scheme.  Imports themes and sets the style property for each widget.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/overview.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {\n  CompassWidget,\n  ZoomWidget,\n  FullscreenWidget,\n  ScreenshotWidget,\n  DarkGlassTheme,\n  LightGlassTheme\n} from '@deck.gl/widgets';\nimport '@deck.gl/widgets/stylesheet.css';\n\n/* global window */\nconst prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)');\nconst widgetTheme = prefersDarkScheme.matches ? DarkGlassTheme : LightGlassTheme;\n\nnew Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: true,\n  layers: [ ... ],\n  widgets: [\n    new ZoomWidget({style: widgetTheme}),\n    new CompassWidget({style: widgetTheme}),\n    new FullscreenWidget({style: widgetTheme}),\n    new ScreenshotWidget({style: widgetTheme})\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl Extensions via Script Tags (HTML)\nDESCRIPTION: Provides HTML script tags to include the pre-bundled deck.gl core and extensions libraries directly in an HTML file from a CDN (unpkg).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/collision-filter-extension.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/extensions@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Category-Based Color Styles with colorCategories and CartoLayer in JavaScript\nDESCRIPTION: This code constructs a new CartoLayer configured for MAP_TYPES.QUERY, using the colorCategories helper to map categorical data to colors. Categorical values of the specified attribute ('type') are listed in the domain, each mapped to a color from a defined CARTOColors palette (e.g., 'Bold'). The function expects a valid SQL data source and categorical attribute, with optional customization for color palette, null color ([204, 204, 204]), and others color ([119, 119, 119]). The mapping assigns one color per category with fallback handling for unmatched values. The output is a categorized, color-styled visualization of airport types.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/styles.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew CartoLayer({\n  type: MAP_TYPES.QUERY,\n  data: 'SELECT the_geom_webmercator, type FROM ne_10m_airports',\n  getFillColor: colorCategories({\n    attr: 'type',\n    domain: ['mid', 'major', 'military mid', 'mid and military', 'major and military'],\n    colors: 'Bold'\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Using DataFilterExtension with Soft Range Filtering (JavaScript)\nDESCRIPTION: Demonstrates implementing soft filtering using `filterSoftRange` alongside `filterRange`. This fades objects in/out near the filter boundaries. `filterTransformSize` and `filterTransformColor` are enabled to visually adjust size and opacity during the transition.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnew ScatterplotLayer({\n  data,\n  getPosition: d => d.coordinates,\n  getFilterValue: d => d.timestamp,\n  filterRange: [0, 1],\n  filterSoftRange: [0.2, 0.8],\n  filterTransformSize: true,\n  filterTransformColor: true,\n  extensions: [new DataFilterExtension({filterSize: 1})]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl ScatterplotLayer (TypeScript)\nDESCRIPTION: This snippet demonstrates the initialization of `Deck` and `ScatterplotLayer` components using TypeScript. It sets up the necessary dependencies and data structures for rendering a scatterplot with animated radius.  The animation is handled using the `popmotion` library.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {animate} from 'popmotion';\n\ntype DataType = {\n  position: [x: number, y: number];\n  size: number;\n};\nconst data: DataType[] = [...];\nconst radiusAnimation = animate({\n  from: 10, // start radius\n  to: 50, // end radius\n  duration: 1000,\n  repeat: Infinity,\n  repeatType: 'mirror', // alternate to and fro\n  onUpdate: updateLayers\n});\n\nconst deckInstance = new Deck({...});\n```\n\n----------------------------------------\n\nTITLE: Using Dedicated Value Props (Proposed) - deck.gl - JavaScript\nDESCRIPTION: This snippet illustrates the first proposed solution where dedicated value properties (`radius`, `color`) are introduced alongside existing accessor properties (`getPosition`). When value properties are provided, they take precedence over their corresponding accessors, allowing constant values to be set directly without using accessor functions, leading to potential performance improvements and simpler updates. Requires the `deck.gl` library.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.3/constant-accessor-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ScatterplotLayer({\n  radiusScale: 100,\n  getPosition: d => d.position,\n  radius: 1,\n  color: [255, 200, 0]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple ViewStates and Controllers in React Component\nDESCRIPTION: Example React component implementation showing how to manage multiple view states and controllers in a deck.gl application. The code demonstrates view state management in component state, handling view state changes, and configuring multiple controllers and viewports with the DeckGL component.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/view-state-rfc.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconstructor(props) {\n  ...\n  this.state = {\n  \tviewState1: new ViewState(...),\n   \tviewState2: new ViewState(...),\n  }\n}\n\nonViewStateChanged(viewState) {\n  if (viewState.id === 'firstPerson') {\n  \tthis.setState(state1: viewState);\n  } ...\n}\n\nrender() {\n  const {viewState1, viewState2} = this.props;\n\n  const controllers = {\n    new MapController(viewState1),\n    new FirstPersonController(viewState1), // Controls same view as above\n    new FirstPersonController(viewState2)  // Controls a different view\n  };\n  const Viewports = {\n    new WebMercatorViewport(viewState1),\n    new FirstPersonViewport(viewState1), // Controls same view as above\n    new FirstPersonViewport(viewState2)  // Controls a different view\n  }\n\n  <DeckGL controllers={controllers} viewports={viewports} layers={[]}>\n    <StaticMap />\n  </DeckGL>\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating PointLabelLayer using Global Scope (Script Tags)\nDESCRIPTION: Demonstrates how to instantiate `PointLabelLayer` when deck.gl is included via <script> tags. The layer is accessed through the global `deck.carto` object provided by the pre-bundled script.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/point-label-layer.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nnew deck.carto.PointLabelLayer({});\n```\n\n----------------------------------------\n\nTITLE: Initializing HexagonLayer with Elevation Transition (JavaScript)\nDESCRIPTION: Demonstrates setting up a `HexagonLayer` in JavaScript, fetching data asynchronously, and configuring a transition for the `elevationScale` prop to make the hexagons \"grow\" when data loads. Requires `@deck.gl/core` and `@deck.gl/aggregation-layers`. The `transitions` object specifies the `elevationScale` prop should animate over 3000ms.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\n\nconst deckInstance = new Deck({\n  // ...\n  layer: getLayers(null)\n});\n\nconst resp = await fetch('/path/to/data.json');\nconst data = await resp.json();\ndeckInstance.setProps({\n  layer: getLayers(data)\n});\n\nfunction getLayers(data) {\n  return [\n    new HexagonLayer({\n      id: '3d-heatmap',\n      data,\n      getPosition: d => [d.longitude, d.latitude],\n      getElevationWeight: d => d.count,\n      extruded: true,\n      elevationScale: data && data.length ? 50 : 0,\n      transitions: {\n        elevationScale: 3000\n      }\n    })\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MVTLayer Web Worker URL in deck.gl - TypeScript\nDESCRIPTION: Shows how to specify a custom web worker script URL for MVTLoader to avoid fetching from a CDN. This is useful for serving worker code from a local static asset when using MVTLayer. The loadOptions prop's mvt.workerUrl is set to the relative path of the locally served worker bundle to enable this configuration.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew MVTLayer({\n  loadOptions: {\n    mvt: {\n      // cp node_modules/@loaders.gl/mvt/dist/mvt-worker.js static/mvt-worker.js\n      workerUrl: '/static/mvt-worker.js'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ContourLayer and Type Definitions\nDESCRIPTION: Shows the necessary import statements required when directly using the `ContourLayer` and related type definitions in a TypeScript or JavaScript environment.  This assumes a prior installation of the required modules (e.g., using npm).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/contour-layer.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {ContourLayer} from '@deck.gl/aggregation-layers';\nimport type {ContourLayerProps, ContourLayerPickingInfo} from '@deck.gl/aggregation-layers';\n\nnew ContourLayer<DataT>(...props: ContourLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Interleaved Attributes in Web Worker\nDESCRIPTION: This TypeScript code shows how to create interleaved attributes within a web worker.  It combines position and color data into a single `Float32Array`, which is then sent back to the main thread.  The colors are normalized when sent as floats.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\n// x0,y0,z0, r0,g0,b0, x1,y1,z1, r1,g1,b1, ...\nconst positionsAndColors = new Float32Array(POINT_CLOUD_DATA.flatMap(d => [\n  d.position[0],\n  d.position[1],\n  d.position[2],\n  // colors must be normalized if sent as floats\n  d.color[0] / 255,\n  d.color[1] / 255,\n  d.color[2] / 255\n]));\n\n// send back to main thread\npostMessage({pointCount: POINT_CLOUD_DATA.length, positionsAndColors}, [positionsAndColors.buffer]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mapbox and deck.gl Integration\nDESCRIPTION: This code snippet demonstrates the basic setup for integrating deck.gl with Mapbox using the `MapboxLayer` class.  It creates a Mapbox map and then adds deck.gl layers. The `MapboxLayer` handles the underlying deck.gl instance, allowing deck.gl layers to be used within a Mapbox environment, while managing their lifecycle.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.2/mapbox-custom-layer-rfc.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Deck, {ScatterplotLayer} from '@deck.gl/core';\nimport {MapboxLayer} from '@deck.gl/mapbox';\n\nconst map = new mapboxgl.Map({\n  container: 'map',\n  style: 'mapbox://styles/mapbox/light-v9',\n  center: [-74.012, 40.705],\n  zoom: 15.5,\n  bearing: -20,\n  pitch: 45\n});\n\nmap.on('load', () => {\n  map.addLayer(mapboxBuildingLayer);\n  map.addLayer(deckPoiLayer, getFirstTextLayerId(map.getStyle()));\n  map.addLayer(deckRouteLayer);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing React with deck.gl and Layers\nDESCRIPTION: This React code initializes a React component with deck.gl, ScatterplotLayer, and TextLayer imports. It sets the foundation to render layers and manage their visibility within the component.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {ScatterplotLayer, TextLayer} from '@deck.gl/layers';\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Layer Browser App - deck.gl - Bash\nDESCRIPTION: This snippet provides a sequence of Bash shell commands to set up and launch the Layer Browser testing application in the deck.gl project. Required dependencies include Yarn, Node.js, and access to the project's root directory. The commands install project-wide dependencies via 'yarn bootstrap', navigate to the example app directory, install app-specific dependencies, then build and serve the app using 'yarn start-local'. Input consists of shell commands run in a terminal; output is a locally-running development server. Ensure all dependencies are installed and run from the correct directories.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/layer-browser/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install root dependencies\n../deck.gl$ yarn bootstrap\n\ncd examples/layer-browser\n# install app dependencies\nyarn\n# bundle and serve\nyarn start-local\n```\n\n----------------------------------------\n\nTITLE: Styling All Widgets with CSS\nDESCRIPTION: This snippet demonstrates how to style all deck.gl widgets by using the `.deck-widget` selector in CSS.  It sets the `--button-size` variable to `48px`.  This affects all widgets in the application.  This is a global styling rule.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/styling.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.deck-widget {\n    --button-size: 48px;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Deck Properties (JavaScript)\nDESCRIPTION: This code snippet shows how to access and update properties of the underlying Deck instance through the `deck` member of the DeckRenderer. It demonstrates updating the `layers` property and using the `set` method to update multiple properties simultaneously.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/arcgis/deck-renderer.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Update deck layers\nlayer.deck.layers = [...]);\n\n// Update multiple deck props\nlayer.deck.set({\n  layers: [...],\n  pickingRadius: 5,\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: PathStyleExtension Constructor\nDESCRIPTION: Shows the PathStyleExtension constructor with a dash property. dash enables rendering of dashed lines. Additional options include highPrecisionDash and offset which can be enabled in a similar way.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/path-style-extension.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew PathStyleExtension({dash});\n```\n\n----------------------------------------\n\nTITLE: Efficient Sublayer Visibility via filterSubLayer in CompositeLayer (TypeScript)\nDESCRIPTION: This snippet implements a CompositeLayer subclass (LODLayer) which optimizes sublayer visibility at redraw time with filterSubLayer, avoiding recreation overhead. Instead of using visible props in renderSubLayers, this approach relies on dynamic evaluation based on the current viewport zoom, improving performance with frequently changing visibility. Inputs are two datasets; the output is a CompositeLayer whose sublayers are efficiently filtered according to zoom level.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/composite-layer.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LODLayer extends CompositeLayer {\n  renderSubLayers() {\n    const {lowResData, hiResData} = this.props;\n    return [\n      new ScatterplotLayer({\n        id: 'points-low-zoom'\n        data: lowResData,\n      }),\n      new ScatterplotLayer({\n        id: 'points-high-zoom',\n        data: hiResData\n      })\n    ]\n  }\n\n  filterSubLayer({layer, viewport}) {\n    if (viewport.zoom < 8) {\n      return layer.id === 'points-low-zoom';\n    } else {\n      return layer.id === 'points-high-zoom';\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DISPLAY variable on WSL 1\nDESCRIPTION: This command sets the DISPLAY environment variable for WSL1 to enable OpenGL support via X11 forwarding. This is required for running Node tests on Windows Subsystem for Linux.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# WSL 1\nexport DISPLAY=localhost:0\n```\n\n----------------------------------------\n\nTITLE: Defining Polygon Geometry TypeScript/JavaScript\nDESCRIPTION: Demonstrates various valid data formats for representing polygon geometry in deck.gl, which are accepted by the `getPolygon` accessor. These formats include simple point arrays (rings), arrays of rings (for holes), flat coordinate arrays, and objects with positions and hole indices. The examples show 2D and 3D coordinate representations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/polygon-layer.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// All of the following are valid polygons\nconst polygons = [\n  // Simple polygon (array of points)\n  [[-122.4, 37.7, 0], [-122.4, 37.8, 5], [-122.5, 37.8, 10], [-122.5, 37.7, 5], [-122.4, 37.7, 0]],\n  // Polygon with holes (array of rings)\n  [\n    [[-122.4, 37.7], [-122.4, 37.8], [-122.5, 37.8], [-122.5, 37.7], [-122.4, 37.7]],\n    [[-122.45, 37.73], [-122.47, 37.76], [-122.47, 37.71], [-122.45, 37.73]]\n  ],\n  // Flat simple polygon\n  [-122.4, 37.7, 0, -122.4, 37.8, 5, -122.5, 37.8, 10, -122.5, 37.7, 5, -122.4, 37.7, 0],\n  // Flat polygon with holes\n  {\n    positions: [-122.4, 37.7, 0, -122.4, 37.8, 0, -122.5, 37.8, 0, -122.5, 37.7, 0, -122.4, 37.7, 0, -122.45, 37.73, 0, -122.47, 37.76, 0, -122.47, 37.71, 0, -122.45, 37.73, 0],\n    holeIndices: [15]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using FirstPersonController with Default View in deck.gl\nDESCRIPTION: Example showing how to initialize a Deck instance with FirstPersonView and configure the controller options. This approach sets controller options at the Deck level.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/first-person-controller.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, FirstPersonView} from '@deck.gl/core';\n\nnew Deck({\n  views: new FirstPersonView(),\n  controller: {keyboard: false, inertia: true},\n  initialViewState: viewState\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronizing View States Across Multiple Views\nDESCRIPTION: Illustrates how to synchronize the view state (e.g., for a main map and a minimap) in deck.gl v7.3+ by assigning the same `viewState.id` to related `View` instances. This became necessary after a bug fix prevented unintended synchronization across views with `initialViewState`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nnew Deck({\n  // ...\n  views: [\n    new MapView({id: 'main'}),\n    new MapView({id: 'minimap', controller: false, viewState: {id: 'main', pitch: 0, zoom: 10}})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Deck.gl Core and Layers Submodules with npm\nDESCRIPTION: Shows the npm command to install deck.gl core and layers submodules separately for pure JavaScript applications, following the modularization in deck.gl v5.3+. This command ensures both required packages are installed for non-React users to access core and layer functionality. Useful prerequisite step before importing layers from '@deck.gl/layers'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_24\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @deck.gl/core @deck.gl/layers\n```\n\n----------------------------------------\n\nTITLE: Constructing a ScatterplotLayer in TypeScript with typed data\nDESCRIPTION: This snippet illustrates creating a deck.gl ScatterplotLayer instance in TypeScript with strong typing for data objects, ensuring type safety. It defines a 'BartStation' type and employs typed accessor functions for rendering geographical data points.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-layers.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype BartStation = {\n  name: string;\n  passengers: number;\n  coordinates: [longitude: number, latitude: number];\n};\n\nconst layer = new ScatterplotLayer<BartStation>({\n  id: 'bart-stations',\n  data: [\n    {name: 'Colma', passengers: 4214, coordinates: [-122.466233, 37.684638]},\n    {name: 'Civic Center', passengers: 24798, coordinates: [-122.413756,37.779528]},\n    // ...\n  ],\n  stroked: false,\n  filled: true,\n  getPosition: (d: BartStation) => d.coordinates,\n  getRadius: (d: BartStation) => Math.sqrt(d.passengers),\n  getFillColor: [255, 200, 0]\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing to test PyPI\nDESCRIPTION: This snippet publishes the pydeck package to the test PyPI environment. It first cleans the dist directory, installs the package in verbose mode, builds the source distribution and wheel, installs twine, and then uploads the package to the test PyPI repository.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/PUBLISH.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrm -r ./dist/*  # If exists, clear out the current dist folder\npip install . --verbose\npython setup.py sdist bdist_wheel\npip install twine  # If you have not installed twine\npython -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n```\n\n----------------------------------------\n\nTITLE: Longitude Wrapping for Geospatial Layers\nDESCRIPTION: The `wrapLongitude` property enables normalization of geometry longitudes to handle international dateline crossings. When enabled, it adjusts paths, polygons, and lines to draw the shortest path across the 180th meridian, which is useful for rendering global data without artifacts. It increases CPU overhead if used with static data, so preprocessing is recommended.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n`wrapLongitude: true` ensures geometries are wrapped around the dateline, affecting layers like PathLayer, PolygonLayer, LineLayer, and ArcLayer. It modifies drawing behavior to handle longitudes beyond `-180` to `180` range.\n```\n\n----------------------------------------\n\nTITLE: Initializing a ContourLayer (Alternative)\nDESCRIPTION: Demonstrates the instantiation of a `ContourLayer` object after having included the deck.gl scripts, using the `new deck.ContourLayer({})` syntax. This syntax is applicable for pre-bundled script usage.  Requires the deck.gl library to be included in the html file, either directly or through a CDN.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/contour-layer.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nnew deck.ContourLayer({});\n```\n\n----------------------------------------\n\nTITLE: Instance-specific Styling with TypeScript and camelCase\nDESCRIPTION: This snippet demonstrates how to style instance-specific styles with camelCase for hyphenated CSS properties. The `backgroundColor` property is used to change the background color of the widget. It highlights the use of camelCase instead of the traditional hyphenated CSS style.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/styling.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nnew FullscreenWidget({ style: {'backgroundColor': '#fff'}})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Spring Simulation Tick in JavaScript\nDESCRIPTION: Provides a foundational JavaScript implementation of the core spring physics logic for a single time step ('tick'). It demonstrates how the next value is calculated based on the current value, previous value (to derive velocity), destination value, stiffness, and damping parameters.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/spring-based-transitions-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction createSpring (stiffness, damping, initialValue) {\n  let currentValue = initialValue\n  let previousValue = initialValue\n  return function tick (destinationValue) {\n    const velocity = currentValue - previousValue\n    const distanceToDestination = destinationValue - currentValue\n    const acceleration = distanceToDestination * stiffness - velocity * damping\n    const nextVal = currentValue + velocity + acceleration\n    previousValue = currentValue\n    currentValue = nextVal\n    return nextVal\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ResetViewWidget in Deck.gl (TypeScript)\nDESCRIPTION: This snippet demonstrates how to instantiate the `ResetViewWidget` and integrate it into a deck.gl application. It creates a deck.gl instance and adds the widget to the widgets array. The widget will reset the view to its initial state when clicked.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/reset-view-widget.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ResetViewWidget} from '@deck.gl/widgets';\nimport {Deck} from '@deck.gl/core';\n\nconst deck = new Deck({\n  widgets: [new ResetViewWidget()]\n});\n```\n\n----------------------------------------\n\nTITLE: Adding attribute descriptions to AttributeManager in JavaScript\nDESCRIPTION: Demonstrates how to add attribute descriptions to an AttributeManager including position and color attributes with their respective configurations for size, type, accessor functions, and update methods.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/attribute-manager.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nattributeManager.add({\n  positions: {size: 2, accessor: 'getPosition', update: calculatePositions},\n  colors: {size: 4, type: 'unorm8', accessor: 'getColor', update: calculateColors}\n});\n```\n\n----------------------------------------\n\nTITLE: Loading 3D Tiles from Google Maps with Tile3DLayer in TypeScript\nDESCRIPTION: Demonstrates usage of the Tile3DLayer to load publicly hosted 3D Tile data from Google Maps APIs. It uses a URL pointing to Google's 3D tiles root JSON and passes required fetch headers including the Google Maps API Key for authorization. This snippet highlights customizing fetch options within the loadOptions property, enabling secure requests on networks requiring explicit headers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-3d-layer.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\n\nconst layer = new Tile3DLayer({\n  id: 'tile-3d-layer',\n  data: 'https://tile.googleapis.com/v1/3dtiles/root.json',\n  loadOptions: {\n    // https://developers.google.com/maps/documentation/tile/3d-tiles\n    fetch: {headers: {'X-GOOG-API-KEY': '<google_maps_api_key>'}}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Core and Layers Packages via NPM\nDESCRIPTION: Provides terminal commands for installing the deck.gl library packages @deck.gl/core and @deck.gl/layers using npm. These packages are prerequisites to use the PathLayer and other deck.gl functionality as demonstrated in the examples. The snippet also shows usage of pre-bundled scripts via CDN for direct inclusion in HTML projects.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/path-layer.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Instantiating Fp64Extension via ES Modules - JavaScript\nDESCRIPTION: Shows how to import and instantiate the Fp64Extension directly from @deck.gl/extensions via ES module import. This is suitable when creating custom layers or configuring extensions explicitly in a JavaScript project. Ensure deck.gl extensions module is present in dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fp64-extension.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Fp64Extension} from '@deck.gl/extensions';\nnew Fp64Extension({});\n```\n\n----------------------------------------\n\nTITLE: Implementing Stereoscopic Rendering with Side-by-Side Viewports\nDESCRIPTION: Example of creating viewports for stereoscopic rendering, with separate left and right eye viewports side by side, each taking half the screen width and using different view and projection matrices.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.0/multi-viewport-rfc.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n  <DeckGL viewports=[\n    // left eye viewport\n    new Viewport({\n      width: viewprops.width / 2,\n      viewMatrix: leftViewMatrix, projectionMatrix: leftProjectionMatrix\n    }),\n    // right eye\n    new Viewport({\n      width: viewprops.width / 2, x: viewprops.width / 2\n      viewMatrix: rightViewMatrix, projectionMatrix: rightProjectionMatrix\n    }),\n    ...\n  ]/>\n```\n\n----------------------------------------\n\nTITLE: Example: reverse-controlled deck.gl with MapLibre in scripting and React\nDESCRIPTION: This example illustrates setting up deck.gl in reverse-controlled mode, overlaying deck.gl above the MapLibre container, preventing interaction with the base map. The scripting version uses the deck.gl bundled script with MapLibre, while the React version employs 'react-map-gl' and '@deck.gl/react'. It showcases how to configure layers and initial view state to render atop MapLibre without user interaction controls.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/base-maps/using-with-maplibre.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/maplibre-gl@^4.0.0/dist/maplibre-gl.js\"></script>\n<link href=\"https://unpkg.com/maplibre-gl@^4.0.0/dist/maplibre-gl.css\" rel=\"stylesheet\" />\n<script type=\"text/javascript\">\n  const {DeckGL, ScatterplotLayer} = deck;\n\n  new DeckGL({\n    mapStyle: 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json',\n    initialViewState: {\n      longitude: 0.45,\n      latitude: 51.47,\n      zoom: 11\n    },\n    controller: true,\n    layers: [\n      new ScatterplotLayer({\n        id: 'deckgl-circle',\n        data: [{position: [0.45, 51.47]}],\n        getPosition: d => d.position,\n        getFillColor: [255, 0, 0, 100],\n        getRadius: 1000\n      })\n    ]\n  });\n</script>\n\n```\n\n----------------------------------------\n\nTITLE: Setting color domain and range in deck.gl GPU Aggregation Layer\nDESCRIPTION: The colorDomain and colorRange properties control how values are mapped to colors. colorDomain defines the input value range, while colorRange defines the output colors. By default, colorDomain is auto-calculated from data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of setting color domain and range\nnew GPUGridLayer({\n  colorDomain: [0, 500], // Min and max values\n  colorRange: [\n    [255, 255, 204], // Light yellow\n    [254, 217, 118], // Light orange\n    [253, 141, 60],  // Orange\n    [240, 59, 32],   // Red-orange\n    [189, 0, 38],    // Red\n    [128, 0, 38]     // Dark red\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering TripsLayer using DeckGL in React (TypeScript)\nDESCRIPTION: This React functional component example uses DeckGL to render a TripsLayer representing animated vehicle trips. The TripsLayer is defined with typed waypoint data, accessor functions for coordinates and timestamps, and animation properties like currentTime and trailLength. The component sets an initial view over San Francisco and enables user interaction via controller. Dependencies include React, @deck.gl/react, and @deck.gl/geo-layers with TypeScript support for strongly typed props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/trips-layer.md#_snippet_2\n\nLANGUAGE: TypeScript React\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {TripsLayer} from '@deck.gl/geo-layers';\n\ntype DataType = {\n  waypoints: {\n    coordinates: [longitude: number, latitude: number];\n    timestamp: number;\n  }[]\n};\n\nfunction App() {\n  const layer = new TripsLayer<DataType>({\n    id: 'TripsLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.trips.json',\n    \n    getPath: (d: DataType) => d.waypoints.map(p => p.coordinates),\n    // Timestamp is stored as float32, do not return a long int as it will cause precision loss\n    getTimestamps: (d: DataType) => d.waypoints.map(p => p.timestamp - 1554772579000),\n    getColor: [253, 128, 93],\n    currentTime: 500,\n    trailLength: 600,\n    capRounded: true,\n    jointRounded: true,\n    widthMinPixels: 8\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding test cases to SnapshotTestRunner\nDESCRIPTION: Registers one or multiple test cases with detailed configurations including name, golden image path, timeout durations, callbacks for render events, and specific image diffing options. Enables configuring individual test behavior for visual validation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/test-utils/snapshot-test-runner.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd(testCase: Array|object)\n```\n\n----------------------------------------\n\nTITLE: DeckGL Methods for Interaction and Resource Management\nDESCRIPTION: This snippet details key methods of the `DeckGL` class, including `pickObject`, `pickObjects`, `setProps`, `getMapboxMap`, and `finalize`. These facilitate object selection, dynamic property updates, accessing the Mapbox map instance, and cleanup of resources, providing flexible control over the visualization lifecycle and interactivity.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.0/purejs-standalone-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining Luma.gl Post-processing Shader Module - JavaScript\nDESCRIPTION: This snippet illustrates the structure of a shader module intended for use with `PostProcessEffect`. It includes the GLSL fragment shader code (`fs`), definitions for uniforms (`uniforms`) with their default values and constraints, a `name` for the module, and configuration for rendering passes. This structure defines the pixel manipulation logic and controllable parameters for the effect.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.1/post-process-effect-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = `\\  \nuniform float brightness;  \nuniform float contrast;  \n\nvec4 brightnessContrast_filterColor(vec4 color, vec2 texSize, vec2 texCoords) {  \n return brightnessContrast_filterColor(color);\n}  \n`;  \n\nconst uniforms = {  \n  brightness: {value: 0, min: -1, max: 1},  \n  contrast: {value: 0, min: -1, max: 1}  \n};  \n\nexport default {  \n  name: 'brightnessContrast',  \n  uniforms,\n  fs,\n  passes: [{filter: true}]\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering ScatterplotLayer with DeckGL and Mapbox in JavaScript\nDESCRIPTION: Shows how to create a DeckGL instance with Mapbox integration by providing a Mapbox access token, map style, and initial view state. The example uses ScatterplotLayer for rendering red circle points. Controller is enabled to allow user interaction. This snippet depends on including deck.gl standalone and Mapbox GL libraries. It illustrates how deck.gl exposes global classes via the scripting API in the browser context.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-standalone.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//This example renders a scatterplot with DeckGL, on top of a basemap rendered with mapbox-gl, using a map style JSON from Carto.\nconst {DeckGL, ScatterplotLayer} = deck;\n\nnew DeckGL({\n  mapboxApiAccessToken: '<mapbox-access-token>',\n  mapStyle: 'mapbox://styles/mapbox/light-v9',\n  initialViewState: {\n    longitude: -122.45,\n    latitude: 37.8,\n    zoom: 15\n  },\n  controller: true,\n  layers: [\n    new ScatterplotLayer({\n      data: [\n        {position: [-122.45, 37.8], color: [255, 0, 0], radius: 100}\n      ],\n      getPosition: d => d.position,\n      getFillColor: d => d.color,\n      getRadius: d => d.radius\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Inefficient Accessor Update via Data Remapping (TypeScript)\nDESCRIPTION: Demonstrates a suboptimal pattern where changing a single parameter (`year`) leads to remapping the entire `data` array using `Array.prototype.map`. This forces a full layer update, unnecessarily recalculating attributes like `position` that haven't changed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype CensusTractCurrentYear = {\n  centroid: [longitude: number, latitude: number];\n  population: number;\n};\n\nfunction render(year: number) {\n  const layers = [\n    new ScatterplotLayer<CensusTractCurrentYear>({\n      // `data` changes every time year changed, but positions don't need to update\n      data: DATA.map(d => ({\n        centroid: d.centroid,\n        population: d.populationsByYear[year]\n      })),\n      getPosition: (d: CensusTractCurrentYear) => d.centroid,\n      getRadius: (d: CensusTractCurrentYear) => Math.sqrt(d.population)\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying PyDeck Visualization\nDESCRIPTION: This snippet displays the previously created pydeck visualization within the Jupyter Notebook environment. The function `r.show()` renders the deck.gl visualization in the output cell, making the taxi locations visible. It uses the prepared `Deck` object, containing the map layers and initial view state.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/03 - Event handlers and data selection in pydeck.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nr.show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a CartoLayer in pydeck\nDESCRIPTION: Defines a CartoLayer with SQL query data source, type, connection credentials, visual styling, and point radius. Uses 'pdk.Layer' with relevant parameters such as 'data' for SQL query, 'type_' as 'query', and a credentials dictionary with API URL and access token to fetch spatial data. The layer is styled with a red fill color and minimal point radius.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/hello_world.ipynb#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nlayer = pdk.Layer(\n    \"CartoLayer\",\n    data=\"SELECT geom, name FROM cartobq.public_account.populated_places\",\n    type_=pdk.types.String(\"query\"),\n    connection=pdk.types.String(\"bqconnection\"),\n    credentials={\n        \"apiBaseUrl\": \"https://gcp-us-east1.api.carto.com\",\n        \"accessToken\": \"eyJhbGciOiJIUzI1NiJ9.eyJhIjoiYWNfN3hoZnd5bWwiLCJqdGkiOiIwMGQ1NmFiMyJ9.zqsprFkxiafKXQ91PDB8845nVeWGVnuLg22v49J3Wiw\",\n    },\n    get_fill_color=[238, 77, 90],\n    point_radius_min_pixels=2.5,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing MVTLayer with JavaScript in deck.gl\nDESCRIPTION: Example of creating an MVTLayer with CARTO vector tiles, configuring styling based on feature properties, and setting up a basic deck.gl application with tooltips.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/mvt-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\n\nconst layer = new MVTLayer({\n  id: 'MVTLayer',\n  data: [\n    'https://tiles-a.basemaps.cartocdn.com/vectortiles/carto.streets/v1/{z}/{x}/{y}.mvt'\n  ],\n  minZoom: 0,\n  maxZoom: 14,\n  getFillColor: f => {\n    switch (f.properties.layerName) {\n      case 'poi':\n        return [255, 0, 0];\n      case 'water':\n        return [120, 150, 180];\n      case 'building':\n        return [218, 218, 218];\n      default:\n        return [240, 240, 240];\n    }\n  },\n  getLineWidth: f => {\n    switch (f.properties.class) {\n      case 'street':\n        return 6;\n      case 'motorway':\n        return 10;\n      default:\n        return 1;\n    }\n  },\n  getLineColor: [192, 192, 192],\n  getPointRadius: 2,\n  pointRadiusUnits: 'pixels',\n  stroked: false,\n  picking: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && (object.properties.name || object.properties.layerName),\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling MapView Interactivity with MapController - JavaScript\nDESCRIPTION: This snippet shows how to instantiate a MapView with interactive controls enabled by passing the controller: true option. Requires deck.gl and uses the MapController to provide default interaction behavior such as zooming, panning, and rotating. The id parameter specifies the view's identifier, and controller: true enables the MapController for user interaction. Outputs a MapView instance with built-in interactivity.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/map-view.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst view = new MapView({id: 'base-map', controller: true});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Handling with Deck.gl Controller in JavaScript\nDESCRIPTION: This example extends the base Controller class to handle specific events by overriding the handleEvent method. It subscribes to 'pointermove' events via the events array and processes those events with custom code, delegating other events to the superclass. The controller's constructor initializes the subscription and the event handler is conditioned to respond only to 'pointermove' for custom logic. This pattern allows fine-grained interaction control in map or data visualization apps using deck.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/controller.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Controller} from 'deck.gl';\n\nclass MyController extends Controller{\n  constructor(props) {\n    super(props);\n    this.events = ['pointermove'];\n  }\n\n  handleEvent(event) {\n    if (event.type === 'pointermove') {\n      // do something\n    } else {\n      super.handleEvent(event);\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Side-by-Side Viewports in deck.gl\nDESCRIPTION: Example of creating two stacked viewports that divide the screen vertically, with the first viewport taking the top half and the second viewport taking the bottom half of the screen.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.0/multi-viewport-rfc.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n  <DeckGL viewports=[\n    new FirstPersonViewport({...viewprops, height: viewprops.height / 2}),\n    new WebMercatorViewport({...viewprops, y: viewprops.height / 2, height: viewprops.height / 2}),\n    ...\n  ]/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with Built-in Tooltip (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize a deck.gl instance with a ScatterplotLayer and a `getTooltip` callback to render a built-in tooltip using TypeScript. The tooltip displays the 'message' property of the hovered object, with type annotations for the data. The `pickable` property must be set to true on the layer to enable picking.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [longitude: number, latitude: number];\n  message: string;\n};\n\n// Callback to populate the default tooltip with content\nfunction getTooltip({object}: PickingInfo<DataType>) {\n  return object && object.message;\n}\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.45,\n    latitude: 37.78,\n    zoom: 12\n  },\n  controller: true,\n  layers: [\n    new ScatterplotLayer<DataType>({\n      data: [\n        {position: [-122.45, 37.78], message: 'Hover over me'}\n      ],\n      getPosition: (d: DataType) => d.position,\n      getRadius: 1000,\n      getFillColor: [255, 255, 0],\n      // Required to enable picking\n      pickable: true\n    })\n  ],\n  getTooltip\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating ScenegraphLayer from CDN Global Object\nDESCRIPTION: This JavaScript snippet demonstrates how to create a ScenegraphLayer instance when deck.gl is loaded via CDN scripts. The libraries expose their components under the global `deck` object, allowing direct instantiation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/scenegraph-layer.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.ScenegraphLayer({});\n```\n\n----------------------------------------\n\nTITLE: DeckGL Rendering Control with React\nDESCRIPTION: This snippet demonstrates an alternative approach where mapbox layer order is specified separately using the mapbox API, allowing the app to manage the context of the WebGL in a subcomponent, such as a static map component, and enable more explicit control over layer rendering.  This method is intended to better manage how deck.gl layers are displayed in relation to Mapbox's built-in layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.2/mapbox-custom-layer-rfc.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Deck, {ScatterplotLayer} from '@deck.gl/core';\nimport {MapboxLayer} from '@deck.gl/mapbox';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Deck\n        // A simple, callbackless way to init with the gl context from a sub-component is envisioned...\n        // May require some private \"protocol\" between `<StaticMap>` and `<DeckGL>`.\n        // May also stash away a _deck reference on the mapbox component.\n\n        gl='base-map'\n\n        width='100%'\n        height='100%'\n\n        initialViewState={{\n          longitude: -122.4,\n          latitude: 37.8,\n        }}\n\n        layers={[\n\n          // Layer groups create named groups of layers that don't render automatically\n          // In this case we rely on MapboxLayers to render them.\n\n          new ScatterplotLayer({\n            id: 'below-labels',\n            autoRender: false // Don't render automatically with the rest of layers\n            // only when explictly called out - in this case when a mapbox layer calls it out\n            // An alternative to this prop is deck tracks which layers have been rendered each cycle.\n            ...\n          }),\n\n          // Any layers not in group render automatically (after all mapbox layers) as before.\n          new ArcLayer({...});\n\n        ]}\n        >\n\n        <StaticMap\n          id='base-map'\n          style=\"mapbox://styles/mapbox/light-v9\"\n          onLoad={this._onLoad.bind(this)/>\n\n      </DeckGL>\n    );\n  }\n\n  _onLoad(map) {\n    const insertBefore = getFirstTextLayerId(map.getStyle());\n    map.addLayer(new RenderDeckLayerById({id: 'below-labels'}), insertBefore);\n\n    map.addLayer({id: '3d-buildings', source: 'composite', ...});\n\n    // Ideally this would be auto injected, but OK to have to add it.\n    // Main motivation is that app should not need to start creating styles for every single layer\n    // just because it is sharing a gl context with mapbox\n\n    // Typically goes last\n    map.addLayer(new RenderRemainingDeckLayers());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tile3DLayer with CesiumIonLoader in JavaScript\nDESCRIPTION: Demonstrates how to create a Tile3DLayer instance to load and render 3D Tiles from a Cesium ION asset URL using JavaScript. It uses the CesiumIonLoader to decode tile data and accepts a Cesium access token for authenticated loading. The example shows how to recenter the Deck instance's view based on the loaded tileset's geographic center and zoom level. Key parameters include the tileset JSON URL, loadOptions with the Ion access token, onTilesetLoad callback for dynamic view updates, and point size configuration.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-3d-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\nimport {CesiumIonLoader} from '@loaders.gl/3d-tiles';\n\nconst layer = new Tile3DLayer({\n  id: 'tile-3d-layer',\n  // Tileset json file url\n  data: 'https://assets.cesium.com/43978/tileset.json',\n  loader: CesiumIonLoader,\n  loadOptions: {\n    // Set up Ion account: https://cesium.com/docs/tutorials/getting-started/#your-first-app\n    'cesium-ion': {accessToken: '<ion_access_token_for_your_asset>'}\n  },\n  onTilesetLoad: tileset => {\n    // Recenter to cover the tileset\n    const {cartographicCenter, zoom} = tileset;\n    deckInstance.setProps({\n      initialViewState: {\n        longitude: cartographicCenter[0],\n        latitude: cartographicCenter[1],\n        zoom\n      }\n    });\n  },\n  pointSize: 2\n});\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: 10,\n    latitude: 50,\n    zoom: 2\n  },\n  controller: true,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ContourLayer in React\nDESCRIPTION: This React example integrates `ContourLayer` within a `DeckGL` component. It sets up the layer properties including data source, cell size, contour definitions, data accessors, and tooltip using a `BikeRack` type. Dependencies include `@deck.gl/react`, `@deck.gl/aggregation-layers`, and `@deck.gl/core`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/contour-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {ContourLayer} from '@deck.gl/aggregation-layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype BikeRack = {\n  ADDRESS: string;\n  SPACES: number;\n  COORDINATES: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const layer = new ContourLayer<BikeRack>({\n    id: 'ContourLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n    cellSize: 200,\n    contours: [\n      {threshold: 1, color: [255, 0, 0], strokeWidth: 2, zIndex: 1},\n      {threshold: [3, 10], color: [55, 0, 55], zIndex: 0},\n      {threshold: 5, color: [0, 255, 0], strokeWidth: 6, zIndex: 2},\n      {threshold: 15, color: [0, 0, 255], strokeWidth: 4, zIndex: 3}\n    ],\n    getPosition: (d: BikeRack) => d.COORDINATES,\n    getWeight: (d: BikeRack) => d.SPACES,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<BikeRack>) => object && `threshold: ${object.contour.threshold}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl and Extensions via CDN - HTML\nDESCRIPTION: This HTML snippet demonstrates how to load deck.gl's bundled and modular scripts from a CDN (unpkg.com) by including <script> tags in a webpage. The provided scripts correspond to the full build and individual core, layers, and extensions modules. No prerequisites other than a modern web browser are required. This approach enables quick prototyping without npm or build tools.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/overview.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/extensions@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Data Iteration Pattern in deck.gl\nDESCRIPTION: Demonstrates an incorrect iteration pattern that won't work with general ES6 containers in deck.gl layers. This approach relies on array-specific length property and indexing.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/deckgl-api-guidelines.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < this.props.data.length; i++) { // NOT GOOD\n  const object = this.props.data[i];\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: External Masking with BitmapLayer (JSX)\nDESCRIPTION: This example showcases how to use an external bitmap mask in deck.gl to clip other layers. The BitmapMask component (potentially a strongly typed BitmapLayer) is used with a bitmap URL, and a subsequent layer is clipped based on this mask.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-group-and-operation-rfc.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DeckGL>\n  <BitmapMask id='bitmap-mask' bitmapUrl=.../>\n  <Layer clipBy={['bitmap-mask']}>\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Enabling animation using the transition prop - JavaScript\nDESCRIPTION: This code snippet illustrates how to enable animation when creating a deck.gl layer by supplying a `transition` prop. Animation parameters such as duration and easing are defined per attribute, using attribute names or accessor names as keys, similar to `updateTriggers`.  It utilizes duration and easing from the d3 library.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.1/attribute-transition-rfc.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Layer({\n  transition: {\n    getPositions: 600,\n    getColors: {\n      duration: 300,\n      easing: d3.easeCubicInOut\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck.gl for Data Filtering (TypeScript)\nDESCRIPTION: Sets up the necessary imports, type definitions (`DataType`, `Settings`), placeholder data (`DATA`), and a `Deck` instance for subsequent examples illustrating performance optimization techniques related to data filtering in TypeScript.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [x: number, y: number];\n  time: number;\n};\ntype Settings = {\n  radius: number;\n  minTime: number;\n  maxTime: number;\n}\nconst DATA: DataType[] = [...];\n\nconst deckInstance = new Deck({...});\n```\n\n----------------------------------------\n\nTITLE: Initializing ContourLayer in TypeScript\nDESCRIPTION: This TypeScript example initializes a `ContourLayer` within a `Deck` instance, demonstrating type safety using interfaces for data. It specifies data, cell size, contour configurations, position and weight accessors, and a tooltip. Dependencies: `@deck.gl/core` and `@deck.gl/aggregation-layers`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/contour-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {ContourLayer} from '@deck.gl/aggregation-layers';\n\ntype BikeRack = {\n  ADDRESS: string;\n  SPACES: number;\n  COORDINATES: [longitude: number, latitude: number];\n};\n\nconst layer = new ContourLayer<BikeRack>({\n  id: 'ContourLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n  cellSize: 200,\n  contours: [\n    {threshold: 1, color: [255, 0, 0], strokeWidth: 2, zIndex: 1},\n    {threshold: [3, 10], color: [55, 0, 55], zIndex: 0},\n    {threshold: 5, color: [0, 255, 0], strokeWidth: 6, zIndex: 2},\n    {threshold: 15, color: [0, 0, 255], strokeWidth: 4, zIndex: 3}\n  ],\n  getPosition: (d: BikeRack) => d.COORDINATES,\n  getWeight: (d: BikeRack) => d.SPACES,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<BikeRack>) => object && `threshold: ${object.contour.threshold}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating SolidPolygonLayer (deck.gl, TypeScript)\nDESCRIPTION: This TypeScript snippet shows the import of SolidPolygonLayer and its props type from the @deck.gl/layers package, and how to instantiate a new SolidPolygonLayer with type parameterization. It is useful for type-safe instantiation in advanced TypeScript projects. The code relies on TypeScript for generic types and assumes that the DataT type and appropriate props matching SolidPolygonLayerProps are available.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/solid-polygon-layer.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {SolidPolygonLayer} from '@deck.gl/layers';\nimport type {SolidPolygonLayerProps} from '@deck.gl/layers';\n\nnew SolidPolygonLayer<DataT>(...props: SolidPolygonLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Instantiating ColumnLayer TypeScript\nDESCRIPTION: This TypeScript snippet shows the type definition and instantiation of a `ColumnLayer`. It utilizes type parameters for the `DataT` to correctly define the props and provides the base class to use. Dependencies: @deck.gl/layers, associated typings.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/column-layer.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {ColumnLayer} from '@deck.gl/layers';\nimport type {ColumnLayerProps} from '@deck.gl/layers';\n\nnew ColumnLayer<DataT>(...props: ColumnLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Loading deck.gl and Extensions from CDN - HTML\nDESCRIPTION: HTML snippet for including pre-bundled deck.gl scripts and extensions via CDN (unpkg.com). This method suits browser-based projects not using module bundlers. Ensures all core, layers, and extensions scripts are loaded before deck.gl-based initialization. The script tags' versions can be adjusted as needed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fp64-extension.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/extensions@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using DataFilterExtension with filterSize 2 (JavaScript)\nDESCRIPTION: Example showing how to configure a `ScatterplotLayer` to filter based on two numeric properties (`timestamp`, `speed`). `getFilterValue` returns an array, `filterRange` is a nested array defining bounds for each property, and `filterSize: 2` is passed to the extension constructor.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnew ScatterplotLayer({\n  data,\n  getPosition: d => d.coordinates,\n  getFilterValue: d => [d.timestamp, d.speed],\n  filterRange: [[0, 1], [10, 20]],\n  extensions: [new DataFilterExtension({filterSize: 2})]\n})\n```\n\n----------------------------------------\n\nTITLE: Referencing `project64` Shader Module by Name (Old Syntax)\nDESCRIPTION: Illustrates the previous method (before v7.2) of including the `project64` shader module in a custom layer's `getShaders` method by referencing its name as a string. This is no longer supported as the module is not registered by default in deck.gl v7.2+.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngetShaders() {\n  return {vs, fs, modules: ['project64']};\n}\n```\n\n----------------------------------------\n\nTITLE: MapView repeating worlds setup\nDESCRIPTION: This snippet shows how to enable repeating worlds in MapView for low zoom levels. This is done by setting the `repeat` property to `true` when creating a `MapView` instance. The modified view should be passed to the `Deck` or `DeckGL` component.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nviews: new MapView({repeat: true})\n```\n\n----------------------------------------\n\nTITLE: Rendering VectorTileLayer with CARTO Continuous Color Style in Python\nDESCRIPTION: This snippet shows how to utilize CARTO's color_continuous style to map a continuous attribute ('value') to a gradient color scale on a VectorTileLayer within pydeck. The data source connects to a CARTO vector tile endpoint querying temperature values. It requires pydeck, pydeck_carto, and valid CARTO OAuth credentials. The key parameters include a continuous numeric range and a color palette 'Peach'. The output is a pydeck Deck map with point-sized vector tiles colored on the temperature scale, including styled HTML tooltips presenting the temperature values. The snippet assumes input data are numeric temperature values appropriate for continuous color mapping.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/styles.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create CARTO data source\ndata = pdkc.sources.vector_query_source(\n    access_token=carto_auth.get_access_token(),\n    api_base_url=carto_auth.get_api_base_url(),\n    connection_name=\"carto_dw\",\n    sql_query=\"SELECT geom, value FROM cartobq.public_account.temps\",\n)\n\n# Render CartoLayer in pydeck with color continuous style\nlayer = pdk.Layer(\n    \"VectorTileLayer\",\n    data=data,\n    get_fill_color=color_continuous(\"value\", [70, 75, 80, 85, 90, 95, 100], \"Peach\"),\n    point_radius_min_pixels=2.5,\n    pickable=True,\n)\n\nmap_style = pdk.map_styles.ROAD\nview_state = pdk.ViewState(latitude=34, longitude=-98, zoom=3)\ntooltip={\n    \"html\": \"<b>Temperature:</b> {value}°F\",\n    \"style\": {\"color\": \"white\"}\n}\npdk.Deck(layer, map_style=map_style, initial_view_state=view_state, tooltip=tooltip)\n```\n\n----------------------------------------\n\nTITLE: Instantiating CollisionFilterExtension with Script Tags (JavaScript)\nDESCRIPTION: Shows how to instantiate the CollisionFilterExtension when deck.gl is included via script tags, accessing it through the global `deck` object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/collision-filter-extension.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.CollisionFilterExtension();\n```\n\n----------------------------------------\n\nTITLE: DeckGL Layer Ordering with Callbacks\nDESCRIPTION: This snippet outlines a proposal to manage Mapbox and deck.gl layer ordering using deck.gl's API props and callbacks, by utilizing `MapboxLayer`.  It defines the deck.gl instance, including the `onAddLayer` and `onRemoveLayer` callbacks, to manipulate Mapbox layers based on deck.gl events.  This provides a way for deck.gl layers to be ordered in relation to mapbox layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.2/mapbox-custom-layer-rfc.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Deck, {ScatterplotLayer} from '@deck.gl/core';\nimport {MapboxLayer} from '@deck.gl/mapbox';\n\nconst map = new mapboxgl.Map({...});\n\nconst deck = new Deck({\n  width: '100%',\n  height: '100%',\n  longitude: -122.4,\n  latitude: 37.8,\n  layers: [\n    new MapboxLayer({\n      id: 'my-scatterplot',\n      insertBefore: 'admin-1-labels',\n      type: ScatterplotLayer,\n      ...\n    })\n  ],\n  onAddLayer: (layer) => {\n    if (layer instanceof MapboxLayer) {\n      map.addLayer(layer, layer.props.insertBefore)\n    }\n  },\n  onRemoveLayer: (layer) => {\n    if (layer instanceof MapboxLayer) {\n      map.removeLayer(layer.id);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Transport Callbacks in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up callback functions for handling transport events such as connection, disconnection, and incoming messages. It uses the static method `Transport.setCallbacks` to register user-defined handlers for each event, enabling application responsiveness to communication states.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/modules/json/docs/transport.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nTransport.setCallbacks({\n  onInitialize: (message) => console.log('A new transport connected'),\n  onFinalize: (message) => console.log('A transport disconnected'),\n  onMessage: (message) => console.log('A message arrived on a connection')\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Google Maps Component (JSX)\nDESCRIPTION: This code imports a React component named `Demo` from the file './google-maps'. This component is likely responsible for managing the interaction with the Google Maps API and deck.gl layers for visualization. It then renders the `Demo` component using the JSX syntax. The `<Demo />` tag triggers the component's rendering lifecycle.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/google-maps.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Demo from './google-maps';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: BrushingExtension Constructor Usage in JavaScript\nDESCRIPTION: Illustrates the basic constructor call for creating a `BrushingExtension` instance. This instance can then be added to a layer's `extensions` array.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/brushing-extension.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew BrushingExtension();\n```\n\n----------------------------------------\n\nTITLE: Creating Binned Color Styles with colorBins and CartoLayer in JavaScript\nDESCRIPTION: This code initializes a new CartoLayer using the MAP_TYPES.QUERY type and assigns bin-based fill colors to features using the colorBins helper. The colorBins function maps a numeric attribute (e.g., 'gn_pop') to a set of bins defined in the domain array, assigning each bin a color from a specified or default CARTOColors palette (here, 'Teal'). Arguments include 'attr' (attribute name), 'domain' (array of break values), and 'colors' (palette name or array of RGBA colors). Null handling and configuration rely on defaults such as PurpOr for colors and [204, 204, 204] for null values. The input should be a valid SQL query and the expected output is a styled map layer with colors corresponding to population bins.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/styles.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew CartoLayer({\n  type: MAP_TYPES.QUERY,\n  data: 'SELECT the_geom_webmercator, gn_pop FROM populated_places',\n  getFillColor: colorBins({\n    attr: 'gn_pop',\n    domain: [1e5, 2e5, 3e5],\n    colors: 'Teal'\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating ClusterTileLayer in JavaScript\nDESCRIPTION: Shows the basic ES module import for `ClusterTileLayer` from the `@deck.gl/carto` package and its minimal instantiation in a JavaScript environment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/cluster-tile-layer.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ClusterTileLayer} from '@deck.gl/carto';\nnew ClusterTileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Initializing DeckGL with Layers and ViewState - JavaScript\nDESCRIPTION: Demonstrates how to create a new instance of the DeckGL class. This example configures the initial view state, enables controller interaction, and includes a basic ScatterplotLayer with sample data, defining how color and radius are accessed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deckgl.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.DeckGL({\n  mapStyle: 'https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json',\n  initialViewState: {\n    longitude: -122.45,\n    latitude: 37.8,\n    zoom: 12\n  },\n  controller: true,\n  layers: [\n    new deck.ScatterplotLayer({\n      data: [\n        {position: [-122.45, 37.8], color: [255, 0, 0], radius: 100}\n      ],\n      getColor: d => d.color,\n      getRadius: d => d.radius\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Jupyter Notebook for Google Colab Local Runtime\nDESCRIPTION: This command starts a Jupyter Notebook server specifically configured to connect with Google Colab as a local runtime. It includes flags to allow connections from the Colab origin, specify a port (default 8888), and prevent port retries. Requires setting `PYDECK_DEV_PORT` beforehand for local widget changes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/contributing.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njupyter notebook \\\n    --NotebookApp.allow_origin='https://colab.research.google.com' \\\n    --port=8888 \\\n    --NotebookApp.port_retries=0\n```\n\n----------------------------------------\n\nTITLE: Marking properties as deprecated or removed in prop types\nDESCRIPTION: In this snippet, properties are annotated as deprecated or removed by including special keys in their type definitions. Deprecated indicates an alias or earlier version, whereas removed signifies the property is no longer supported, facilitating better version management and backward compatibility.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.3/prop-types-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst defaultProps = {\n  radius: {deprecated: 'radiusScale'}, // deprecated in favor of radiusScale\n  radius: {removed: 'radiusScale'}, // removed in favor of radiusScale\n};\n```\n\n----------------------------------------\n\nTITLE: Importing GoogleMapsOverlay in JavaScript\nDESCRIPTION: This code snippet shows how to import the GoogleMapsOverlay class from the @deck.gl/google-maps module in a JavaScript file. This assumes the module was installed using npm.  The GoogleMapsOverlay class is the primary interface for integrating deck.gl with Google Maps.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/google-maps/overview.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {GoogleMapsOverlay} from '@deck.gl/google-maps';\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Sublayers in deck.gl CompositeLayer (JavaScript)\nDESCRIPTION: Demonstrates the enhanced `renderLayers` method in deck.gl v4.1 CompositeLayers. This method now allows returning an array containing conditionally included sublayers (using `&&`) and nested arrays or null values. deck.gl automatically flattens and filters out null/false values before rendering, simplifying the logic for rendering complex layer compositions based on application state or settings.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n   renderLayers() {\n      return [\n         setting1 && new ScatterplotLayer(...),\n         setting2 && new LineLayer(...),\n         this._renderAdditionalLayerList()\n      ];\n   }\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl from CDN (deck.gl, HTML/JavaScript)\nDESCRIPTION: This HTML/JavaScript snippet demonstrates how to include deck.gl and its core/layers modules via CDN in a webpage. Scripts are sourced from unpkg for quick prototyping without a build step. Once included, a SolidPolygonLayer can be created on the global deck namespace. This approach is suitable for demo pages or rapid experimentation, but less ideal for large-scale applications.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/solid-polygon-layer.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.SolidPolygonLayer({});\n```\n\n----------------------------------------\n\nTITLE: Initializing WMSLayer with Deck in JavaScript\nDESCRIPTION: Demonstrates how to create a WMSLayer instance using a WMS service URL and layer names, and integrate it with a Deck instance in plain JavaScript. It imports necessary classes from @deck.gl/core and @deck.gl/geo-layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/wms-layer.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {_WMSLayer as WMSLayer} from '@deck.gl/geo-layers';\n\nconst layer = new WMSLayer({\n  data: 'https://ows.terrestris.de/osm/service',\n  serviceType: 'wms',\n  layers: ['OSM-WMS']\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 9\n  },\n  controller: true,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleMeshLayer in a React Component (TypeScript)\nDESCRIPTION: This snippet shows how to integrate the SimpleMeshLayer into a React application using the @deck.gl/react DeckGL component. It follows the same logic as the pure JS/TS examples but within a functional React component, defining data types and configuring the layer and view state.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/simple-mesh-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {OBJLoader} from '@deck.gl/obj';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype BartStation = {\n  name: string;\n  entries: number;\n  exits: number;\n  coordinates: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const layer = new SimpleMeshLayer<BartStation>({\n    id: 'SimpleMeshLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-stations.json',\n    \n    getColor: (d: BartStation) => [Math.sqrt(d.exits), 140, 0],\n    getOrientation: (d: BartStation) => [0, Math.random() * 180, 0],\n    getPosition: (d: BartStation) => d.coordinates,\n    mesh: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/humanoid_quad.obj',\n    sizeScale: 30,\n    pickable: true,\n    loaders: [OBJLoader]\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<BartStation>) => object && object.name}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing GeoJsonLayer Point SubLayer with ColumnLayer in deck.gl (TypeScript)\nDESCRIPTION: This snippet illustrates how to override the default rendering of point features in a GeoJsonLayer by specifying a ColumnLayer instead of ScatterplotLayer, leveraging the _subLayerProps property. Prerequisites: @deck.gl/layers must be installed and data provided in GeoJSON format. Key parameters include diskResolution, radius, and extruded for the ColumnLayer, and a custom getElevation accessor. Input is a GeoJsonLayer config; the output is a layer stack with transformed visual representation for point features.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/composite-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ColumnLayer, GeoJsonLayer} from '@deck.gl/layers';\n\nconst layer = new GeoJsonLayer({\n  // ...other props\n  _subLayerProps: {\n    points: {\n      type: ColumnLayer,\n      diskResolution: 12,\n      radius: 50,\n      extruded: true,\n      getElevation: d => d.sourceFeature.feature.properties.value\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using pre-bundled scripts - HTML\nDESCRIPTION: This snippet illustrates how to include pre-bundled deck.gl scripts in an HTML file using `<script>` tags.  It provides links to CDN hosted versions of deck.gl, @deck.gl/core, and @deck.gl/extensions.  Ensure the version numbers match your project requirements.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/clip-extension.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/extensions@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing ContourLayer in JavaScript\nDESCRIPTION: This code snippet demonstrates the initialization of a `ContourLayer` within a `Deck` instance in JavaScript.  It defines the data source, cell size, contour thresholds (isoline and isoband), position and weight accessors, and tooltip functionality. Dependencies include `@deck.gl/core` and `@deck.gl/aggregation-layers`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/contour-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ContourLayer} from '@deck.gl/aggregation-layers';\n\nconst layer = new ContourLayer({\n  id: 'ContourLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n  cellSize: 200,\n  contours: [\n    {threshold: 1, color: [255, 0, 0], strokeWidth: 2, zIndex: 1},\n    {threshold: [3, 10], color: [55, 0, 55], zIndex: 0},\n    {threshold: 5, color: [0, 255, 0], strokeWidth: 6, zIndex: 2},\n    {threshold: 15, color: [0, 0, 255], strokeWidth: 4, zIndex: 3}\n  ],\n  getPosition: d => d.COORDINATES,\n  getWeight: d => d.SPACES,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `threshold: ${object.contour.threshold}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with Multiple Views (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to initialize a deck.gl instance with multiple views. It creates two `MapView` instances, positioned side-by-side, and synchronizes their view states.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck, MapView} from '@deck.gl/core';\n\nconst deckInstance = new Deck({\n  views: [\n    new MapView({id: 'left', x: 0, width: '50%', controller: true}),\n    new MapView({id: 'right', x: '50%', width: '50%', controller: true})\n  ],\n  viewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  onViewStateChange: ({viewState}) => {\n    deckInstance.setProps({viewState});\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (bash)\nDESCRIPTION: This code snippet demonstrates how to install all required dependencies for the project using either npm or yarn. Execute this command in the project's root directory after cloning the repository.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/openlayers/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Using Arbitrary Ellipsoids as Coordinate Systems in deck.gl Layers (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates a potential future feature where a deck.gl Layer could accept an arbitrary ellipsoid, defined using `@math.gl/geospatial`, as its coordinate system. This would allow visualization on non-Earth bodies like Mars, with data provided in Cartesian coordinates relative to that ellipsoid. Requires importing `Ellipsoid` from `@math.gl/geospatial`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/fixed-frame-coordinates-rfc.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {Ellipsoid} from '@math.gl/geospatial';\n\nconst MARS_ELLIPSOID = new Ellipsoid(MARS_RADIUS_X, MARS_RADIUS_Y, MARS_RADIUS_Z);\n\nnew Layer({\n  coordinateSystem: MARS_ELLIPSOID,\n  data: [...] // coordinates in cartesian\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Shader Module Objects (New Syntax)\nDESCRIPTION: Shows the updated method (deck.gl v7.3+) for using shader modules. Modules must now be explicitly imported from `@deck.gl/core` (or other relevant packages like `@deck.gl/extensions`) and passed as objects to the `modules` array.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {picking, project32, gouraudLighting} from '@deck.gl/core';\n/// NEW\nnew Model({\n  // ...\n  modules: [picking, project32, gouraudLighting]\n});\n```\n\n----------------------------------------\n\nTITLE: Testing deck.gl Gallery with Specific Version (bash)\nDESCRIPTION: Starts the deck.gl gallery server using a specified version of the deck.gl library. This is useful for testing gallery examples against older or specific published releases.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/gallery/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode build-tools/serve --version=6.0.0-alpha.0\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Access Token via Environment Variable\nDESCRIPTION: Instructions for setting up the required Mapbox access token as an environment variable to access the terrain elevation data API.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/terrain-extension/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MapboxAccessToken=<mapbox_access_token>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile-Friendly Event Recognition Options in JavaScript\nDESCRIPTION: This example shows how to adjust event recognition thresholds for better mobile interaction. It makes panning less sensitive and clicking easier by increasing the pan threshold and reducing the tap threshold.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Deck({\n  // ...\n  eventRecognizerOptions: isMobile ? {\n    pan: {threshold: 10},\n    tap: {threshold: 5}\n  } : {}\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering deck.gl Layers with DeckGL React Component in TypeScript\nDESCRIPTION: Demonstrates using the DeckGL React component with TypeScript to render a LineLayer. The snippet includes setting an initial view state with latitude, longitude, and zoom, defining a typed data structure for layer data, and creating layers with properties such as data source and position accessor functions. Dependencies include React, @deck.gl/react, @deck.gl/core, and @deck.gl/layers. Inputs are the layer data fetched from a JSON path and the initial view configuration; output is a rendered map with a line layer. It highlights the integration of deck.gl layers inside React JSX components.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-with-react.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapViewState} from '@deck.gl/core';\nimport {LineLayer} from '@deck.gl/layers';\n\nconst INITIAL_VIEW_STATE: MapViewState = {\n  longitude: -122.41669,\n  latitude: 37.7853,\n  zoom: 13\n};\n\ntype DataType = {\n  from: [longitude: number, latitude: number];\n  to: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const layers = [\n    new LineLayer<DataType>({\n      id: 'line-layer',\n      data: '/path/to/data.json',\n      getSourcePosition: (d: DataType) => d.from,\n      getTargetPosition: (d: DataType) => d.to,\n    })\n  ];\n\n  return <DeckGL\n      initialViewState={INITIAL_VIEW_STATE}\n      controller\n      layers={layers} />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Orthographic View in deck.gl - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize a new deck.gl Deck instance with a manually specified OrthographicView for information visualization use cases, such as 2D charts or non-geospatial data. To use this snippet, ensure that you have installed the @deck.gl/core package as a dependency. The 'views' property is set to a new OrthographicView instance, which determines the camera configuration. Replace the '...' in the configuration with actual layers and properties as needed. Returns a Deck instance configured for a top-down, non-rotating view.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, OrthographicView} from '@deck.gl/core';\n\nconst deck = new Deck({\n  // ...\n  views: new OrthographicView()\n});\n```\n\n----------------------------------------\n\nTITLE: Using MaskExtension with deck.gl Layers\nDESCRIPTION: Basic example showing how to configure a GeoJsonLayer as a mask and apply it to filter objects in a ScatterplotLayer. The GeoJsonLayer defines the masking boundaries with 'operation: mask' while the ScatterplotLayer only shows points within those boundaries.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/mask-extension.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {GeoJsonLayer, ScatterplotLayer} from '@deck.gl/layers';\nimport {MaskExtension} from '@deck.gl/extensions';\n\nconst layers = [\n  new GeoJsonLayer({\n    id: 'geofence',\n    data: POLYGON_FEATURE,\n    operation: 'mask'\n  }),\n  new ScatterplotLayer({\n    id: 'pickups',\n    data: PICKUP_LOCATIONS,\n    getPosition: d => [d.lng, d.lat],\n    getRadius: 50,\n    // only render points that are inside the geofence\n    extensions: [new MaskExtension()],\n    maskId: 'geofence'\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Injecting custom code into shader hooks for layer customization\nDESCRIPTION: Shows how to leverage shader hooks (e.g., 'fs:#decl', 'vs:#main-start') for injecting custom GLSL code into specific shader locations when subclassing deck.gl layers, enabling advanced customization without breaking compatibility across releases.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/writing-shaders.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst shaders = this.getShaders();\n\nconst model = new Model(gl, {\n  ...this.getShaders(),\n  inject: {\n    'fs:decl': `\\n  uniform float coverage;\\n`,\n    'fs:DECKGL_FILTER_COLOR': `\\n  if (abs(geometry.uv.x) > coverage) discard;\\n`\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: MaskExtension Constructor Syntax\nDESCRIPTION: The constructor signature for creating a new MaskExtension instance. This extension takes no parameters when instantiated.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/mask-extension.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew MaskExtension();\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies via npm\nDESCRIPTION: Shows the npm commands to install the necessary deck.gl packages. You can either install the monolithic `deck.gl` package or install the required scoped packages individually.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/extensions\n```\n\n----------------------------------------\n\nTITLE: CollisionFilterExtension Constructor (JavaScript)\nDESCRIPTION: Basic instantiation of the CollisionFilterExtension using its constructor. This creates a new instance with default settings.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/collision-filter-extension.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew CollisionFilterExtension();\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies\nDESCRIPTION: This snippet describes the installation process for deck.gl and its associated packages using npm. It provides the commands to install the core and layers modules. Prerequisites: Node.js and npm installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/column-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers\n```\n\n----------------------------------------\n\nTITLE: Importing TerrainLayer in TypeScript with Type Definitions\nDESCRIPTION: TypeScript import statement for TerrainLayer with proper type definitions for props, showing how to utilize TypeScript's type checking with the layer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/terrain-layer.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TerrainLayer} from '@deck.gl/geo-layers';\nimport type {TerrainLayerProps} from '@deck.gl/geo-layers';\n\nnew TerrainLayer(...props: TerrainLayerProps[]);\n```\n\n----------------------------------------\n\nTITLE: React Component with DeckGL and Layer Filter\nDESCRIPTION: This React code snippet demonstrates how to use DeckGL within a functional component, rendering multiple views (FirstPersonView and MapView) and applying a layerFilter. The `useMemo` hook optimizes the creation of layers and views.  The `layerFilter` hides the 'car' layer in the 'first-person' view.  It depends on react, @deck.gl/react, @deck.gl/core, @deck.gl/mesh-layers, and @deck.gl/geo-layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useMemo, useCallback} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {Deck, DeckProps, FirstPersonView, MapView} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {MVTLayer} from '@deck.gl/geo-layers';\n\ntype CarPose = {\n  longitude: number;\n  latitude: number;\n  heading: number;\n};\n\n/** Rerenders periodically to update the map with the car's latest position */\nfunction App({carPose}: {\n  carPos: CarPose;\n}) {\n\n  const layers = useMemo(() => [\n    new MVTLayer({\n      id: 'base-map',\n      // ...\n    }),\n    new SimpleMeshLayer<CarPose>({\n      id: 'car',\n      mesh: '/path/to/model.obj',\n      data: [carPose],\n      getPosition: (d: CarPose) => [d.longitude, d.latitude, 0],\n      getOrientation: (d: CarPos) => [0, -d.heading * Math.PI / 180, 0]\n    })\n  ], [carPos]);\n\n  const views = useMemo(() => [\n    new FirstPersonView({id: 'first-person'}),\n    new MapView({id: 'minimap', x: 10, y: 10, width: '20%', height: '20%'})\n  ], []);\n\n  const layerFilter: DeckProps[\"layerFilter\"] = useCallback(({layer, viewport}) => {\n    if (viewport.id === 'first-person' && layer.id === 'car') {\n      // Do not draw the car layer in the first person view\n      return false;\n    }\n    return true;\n  }, []);\n\n  return <DeckGL\n    views={views}\n    viewState={{\n      'first-person': {\n        longitude: carPos.longitude,\n        latitude: carPos.latitude,\n        bearing: carPos.heading,\n        position: [0, 0, 2]\n      },\n      minimap: {\n        longitude: carPos.longitude,\n        latitude: carPos.latitude,\n        zoom: 10\n      }\n    }}\n    layers={layers}\n    layerFilter={layerFilter}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating CARTO Basemap in React with DeckGL (JavaScript)\nDESCRIPTION: Demonstrates how to use a CARTO basemap within a React application using `DeckGL` and `StaticMap`. It imports `DeckGL` from `@deck.gl/react`, `StaticMap` from `react-map-gl`, and the `BASEMAP` enum from `@deck.gl/carto`. The `mapStyle` prop of `StaticMap` is set using a value from `BASEMAP` (e.g., `BASEMAP.POSITRON`). Note the licensing considerations for Mapbox GL JS v2+ when using `react-map-gl` v6+.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/basemap.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {StaticMap} from 'react-map-gl';\nimport {BASEMAP} from '@deck.gl/carto';\n<DeckGL initialViewState={INITIAL_VIEW_STATE} controller={true} layers={layers}>\n  <StaticMap mapStyle={BASEMAP.POSITRON} />\n</DeckGL>;\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl via CDN Scripts\nDESCRIPTION: These HTML script tags show how to include deck.gl libraries in a web page directly from a Content Delivery Network (CDN). This method is useful for quick examples or environments without a build system, providing access to deck.gl and its modules via global variables.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/scenegraph-layer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/mesh-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining VectorQuerySourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `VectorQuerySourceOptions` type for the `vectorQuerySource` function. It includes `spatialDataColumn`, `sqlQuery`, `queryParameters`, and `aggregationExp`. It allows users to specify a SQL query and parameters to fetch vector data, and also define if the data has a spatial column. The `queryParameters` are used for SQL query parametrization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntype VectorQuerySourceOptions = {\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n  aggregationExp?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Animating TripsLayer currentTime prop using popmotion in React\nDESCRIPTION: This React snippet demonstrates how to animate the `currentTime` prop of a `TripsLayer` in deck.gl using the `popmotion` library within a functional component and React hooks. It uses `useState` to manage the current time and `useEffect` to start and stop the animation. The animation ranges from 0 to 1800 over 5 seconds, repeating indefinitely. It utilizes DeckGL for rendering. Requires `@deck.gl/react`, `@deck.gl/core`, `@deck.gl/geo-layers`, and `popmotion`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState, useEffect} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapViewState} from '@deck.gl/core';\nimport {TripsLayer} from '@deck.gl/geo-layers';\nimport {animate} from \"popmotion\";\n\nconst INITIAL_VIEW_STATE: MapViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12\n};\n\ntype TripData = {\n  coordinates: [longitude: number, latitude: number][];\n  timestamps: number[];\n};\n\nfunction App() {\n  const [currentTime, setCurrentTime] = useState<number>(0);\n\n  useEffect(() => {\n    const currentTimeAnimation = animate<number>({\n      from: 0, // currentTime min value\n      to: 1800, // currentTime max value\n      duration: 5000, // over the course of 5 seconds\n      repeat: Infinity,\n      onUpdate: setCurrentTime\n    });\n    return () => currentTimeAnimation.stop();\n  });\n\n  const layers = [\n    new TripsLayer<TripData>({\n      id: 'TripsLayer',\n      data: '/path/to/data.json',\n      getPath: (d: TripData) => d.waypoints.map(p => p.coordinates),\n      getTimestamps: (d: TripData) => d.waypoints.map(p => p.timestamp),\n      getColor: [253, 128, 93],\n      getWidth: 50,\n\n      currentTime,\n      trailLength: 600\n    })\n  ];\n\n  return <DeckGL\n    initialViewState={INITIAL_VIEW_STATE}\n    controller\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning deck.gl Repository with Git\nDESCRIPTION: This command clones the deck.gl repository from GitHub to your local machine. Cloning the repository allows you to access the example code and contribute to the project. Requires Git to be installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:visgl/deck.gl.git\n```\n\n----------------------------------------\n\nTITLE: Reverse-Controlled deck.gl with react-map-gl (React)\nDESCRIPTION: This React snippet shows how to implement reverse-controlled deck.gl integration using `react-map-gl`. It utilizes the `DeckGL` component as the root, with the `Map` component as a child.  A `ScatterplotLayer` is added, and the `controller` prop is set to `true` within the `DeckGL` component.  This method requires a valid Mapbox access token, and it automatically interprets deck.gl's view state.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/base-maps/using-with-mapbox.md#_snippet_3\n\nLANGUAGE: React\nCODE:\n```\nimport React from 'react';\nimport {Map} from 'react-map-gl';\nimport {DeckGL} from '@deck.gl/react';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  const layers: [\n    new ScatterplotLayer({\n      id: 'deckgl-circle',\n      data: [\n        {position: [0.45, 51.47]}\n      ],\n      getPosition: d => d.position,\n      getFillColor: [255, 0, 0, 100],\n      getRadius: 1000,\n    })\n  ];\n\n  return (\n    <DeckGL\n      initialViewState={{\n        longitude: 0.45,\n        latitude: 51.47,\n        zoom: 11\n      }}\n      controller\n      layers={layers}\n    >\n      <Map\n        mapStyle=\"mapbox://styles/mapbox/light-v9\"\n        mapboxAccessToken=\"<mapbox_access_token>\"\n      />\n    </DeckGL>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Tooltip (TypeScript)\nDESCRIPTION: This snippet demonstrates rendering a custom tooltip in TypeScript by creating a DOM element, positioning it based on mouse coordinates, and updating its content on hover.  It involves creating a `tooltip` div element with a specific type annotation, setting its style properties (position, zIndex, pointerEvents), and appending it to the document body.  The `updateTooltip` function is called on the `onHover` event of the ScatterplotLayer to update the tooltip's position and text content, leveraging type safety.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [longitude: number, latitude: number];\n  message: string;\n};\n\nconst tooltip: HTMLDivElement = document.createElement('div');\ntooltip.style.position = 'absolute';\ntooltip.style.zIndex = 1;\ntooltip.style.pointerEvents = 'none';\ndocument.body.append(tooltip);\n\nfunction updateTooltip({object, x, y}: PickingInfo<DataType>) {\n  if (object) {\n    tooltip.style.display = 'block';\n    tooltip.style.left = `${x}px`;\n    tooltip.style.top = `${y}px`;\n    tooltip.innerText = object.message;\n  } else {\n    tooltip.style.display = 'none';\n  }\n}\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.45,\n    latitude: 37.78,\n    zoom: 12\n  },\n  controller: true,\n  layers: [\n    new ScatterplotLayer<DataType>({\n      data: [\n        {position: [-122.45, 37.78], message: 'Hover over me'}\n      ],\n      getPosition: (d: DataType) => d.position,\n      getRadius: 1000,\n      getFillColor: [255, 255, 0],\n      // Required to enable picking\n      pickable: true,\n      // Update tooltip position and content\n      onHover: updateTooltip\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Standalone DeckGL with MapLibre GL and CARTO Basemap (JavaScript)\nDESCRIPTION: Illustrates initializing `maplibregl.Map` with a CARTO basemap style (`deck.carto.BASEMAP.POSITRON`) and `deck.DeckGL` in a standalone JavaScript environment. It sets up view state synchronization between the MapLibre map and the DeckGL instance using the `onViewStateChange` callback and `map.jumpTo`. Assumes the pre-bundled scripts have been included via HTML.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/basemap.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst map = new maplibregl.Map({\n  container: 'map',\n  style: deck.carto.BASEMAP.POSITRON,\n  interactive: false\n})\nconst deckgl = new deck.DeckGL({\n  canvas: 'deck-canvas',\n  initialViewState: {\n    latitude: 0,\n    longitude: 0,\n    zoom: 1\n  },\n  onViewStateChange: ({viewState}) => {\n    const {longitude, latitude, ...rest} = viewState;\n    map.jumpTo({center: [longitude, latitude], ...rest});\n  }\n  controller: true\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck.gl with Theme\nDESCRIPTION: This snippet demonstrates how to initialize a deck.gl instance with a theme based on a condition.  It uses the `DarkTheme` and `LightTheme` from `@deck.gl/widgets` to set the `style` property.  The `mode` variable is used to determine which theme to apply.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/styling.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {DarkTheme, LightTheme} from '@deck.gl/widgets';\n\nnew Deck({\n  style: mode === 'dark' ? DarkTheme : LightTheme\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies - Bash\nDESCRIPTION: This snippet demonstrates how to install the required project dependencies using npm or yarn.  It's a necessary step to set up the project and includes dependencies for deck.gl and React among others. The output is the installed packages in the `node_modules` directory.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/basic/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Rendering HexagonLayer Demo Component - JSX\nDESCRIPTION: Renders the imported `Demo` component within the document's structure. In a React or JSX environment, this tag instantiates the component, executing its rendering logic to display the HexagonLayer demo. It assumes `Demo` is a valid React functional or class component.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/hexagon-layer.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Implementing React Mercator Controller Wrapper - JavaScript\nDESCRIPTION: Implements a React component that wraps an ES6 MercatorControllerState instance. It uses an EventManager to register DOM event handlers on a rendered element (implied by the component context). Event handlers like _onDragStart call corresponding methods on the controllerState instance to calculate new viewport states, which are then presumably propagated via the onChangeViewport callback. The component includes toggles for various interactive features and properties to indicate hover and drag states.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v4.1/event-handling-rfc.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class MercatorController {\n  static propTypes = {\n    controllerState: PropTypes.instanceOf(MercatorControllerState).isRequired,\n\n    /** event handling toggles, parity of Mapbox */\n    dragPanEnabled: PropTypes.bool,\n    dragRotateEnabled: PropTypes.bool,\n    scrollZoomEnabled: PropTypes.bool,\n    keyboardEnabled: PropTypes.bool,\n    doubleClickZoomEnabled: PropTypes.bool,\n\n    /**\n      * `onChangeViewport` callback is fired when the user interacted with the\n      * height. The object passed to the callback contains `latitude`,\n      * `longitude` and `zoom` and additional state information.\n      */\n    onChangeViewport: PropTypes.func,\n\n    /**\n      * Is the component currently being dragged. This is used to show/hide the\n      * drag cursor. Also used as an optimization in some overlays by preventing\n      * rendering while dragging.\n      */\n    isHovering: PropTypes.bool,\n    isDragging: PropTypes.bool\n  };\n\n  componentDidMount() {\n    // Register event handlers on the canvas using the EventManager helper class\n\n    this._eventManager = new EventManager(...);\n  }\n\n  _onDragStart(event) {\n    const newheightState = this.props.controllerState.panStart({pos}).zoomStart({pos});\n    this._updateViewport(newheightState);\n  }\n\n  _onDrag(event) {}\n  _onPinch(event) {}\n  _onWheel(event) {}\n  ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adaptive Sublayer Visibility Using renderSubLayers in CompositeLayer (TypeScript)\nDESCRIPTION: This example defines a new CompositeLayer subclass (LODLayer) that dynamically renders different ScatterplotLayer sublayers based on map zoom level, by adjusting their visible prop within renderSubLayers. This approach triggers layer re-creation on every relevant props or viewport change. Dependencies: deck.gl and TypeScript. Inputs are two datasets (lowResData, hiResData); output is a CompositeLayer that switches between sublayers for low/high zoom.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/composite-layer.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LODLayer extends CompositeLayer {\n  \n  // Force update layer and re-render sub layers when viewport changes\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  renderSubLayers() {\n    const {lowResData, hiResData} = this.props;\n    const {zoom} = this.context.viewport;\n    return [\n      new ScatterplotLayer({\n        id: 'points-low-zoom',\n        data: lowResData,\n        visible: zoom < 8\n      }),\n      new ScatterplotLayer({\n        id: 'points-high-zoom',\n        data: hiResData,\n        visible: zoom >= 8\n      })\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating BitmapLayer with global deck object (JavaScript)\nDESCRIPTION: This snippet demonstrates how to instantiate a BitmapLayer using the global `deck` object when using pre-bundled scripts. It requires that the deck.gl library is loaded via a `<script>` tag.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/bitmap-layer.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.BitmapLayer({});\n```\n\n----------------------------------------\n\nTITLE: PolygonLayer Initialization with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a PolygonLayer with deck.gl to render polygons from a JSON data source. It configures the layer with properties such as data source URL, accessors for polygon, elevation, fill color, line color, and line width. The layer is then integrated into a deck.gl instance for rendering, and a tooltip is provided when hovering over each rendered polygon.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/polygon-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nconst layer = new PolygonLayer({\n  id: 'PolygonLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-zipcodes.json',\n\n  getPolygon: d => d.contour,\n  getElevation: d => d.population / d.area / 10,\n  getFillColor: d => [d.population / d.area / 60, 140, 0],\n  getLineColor: [255, 255, 255],\n  getLineWidth: 20,\n  lineWidthMinPixels: 1,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `${object.zipcode}\\nPopulation: ${object.population}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Serving Local Pydeck Documentation using Python\nDESCRIPTION: This command starts a simple Python 3 HTTP server from the current directory. It's intended to be run from the `_build` directory after building the documentation with `make html`, allowing you to view the documentation locally in a browser.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/contributing.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npython3 -m http.server\n```\n\n----------------------------------------\n\nTITLE: Extending Deck.gl Controller Class in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a custom controller by extending the base Controller class from deck.gl. The class constructor takes an options object (props), which may include references such as eventManager, makeViewPort, onStateChange, onViewStateChange, and a timeline instance, and passes it to the superclass constructor. This forms the boilerplate for custom controllers and is the foundation for further extension and customization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/controller.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Controller} from 'deck.gl';\n\nclass MyController extends Controller {\n  constructor(props) {\n    super(props);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl Scripts via CDN in HTML\nDESCRIPTION: Provides HTML script tags to include pre-bundled deck.gl core, layers, and extensions libraries directly from the unpkg CDN. This method is suitable for simpler web pages or prototypes that don't use a JavaScript build system.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fill-style-extension.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/extensions@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies - Bash\nDESCRIPTION: Installs the necessary Node.js packages for the project. This step is required before running or building the application. It utilizes either npm or yarn package managers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/google-maps/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Extensions via NPM (Bash)\nDESCRIPTION: Shows the necessary NPM commands to install the core deck.gl library and its extensions module, which includes the CollisionFilterExtension.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/collision-filter-extension.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/extensions\n```\n\n----------------------------------------\n\nTITLE: Configuring Layer Properties with Updater Functions in deck.gl (JavaScript)\nDESCRIPTION: Demonstrates how to define deck.gl layer properties using updater functions, enabling properties like 'radius' and 'color' to animate based on contextual parameters (e.g., 'tick'). The provided JavaScript snippet sets the 'radius' property to update using a sine function of 'tick', and the 'color' property to change dynamically with every frame. Requires deck.gl's Layer class and the system supporting functional property definitions. The updater functions receive an object (such as {tick}) each animation frame, triggering smooth animated effects. Inputs include animation context, outputs are per-frame animated values. Works with deck.gl v6 features and assumes proper context integration.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/property-animation-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst layer = new Layer {\n  radius: ({tick}) => Math.sin(tick * 0.1),\n  color: ({tick}) => [128, 128, tick % 255, 255]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl via NPM (deck.gl, Bash)\nDESCRIPTION: These bash commands install deck.gl and its core/layers packages from the npm registry, allowing developers to use deck.gl in their JavaScript or TypeScript projects. It's necessary to run these commands in a Node.js environment with npm available. The snippet expects a package.json in the working directory and installs the dependencies required for both standalone and modular deck.gl usage.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/solid-polygon-layer.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers\n```\n\n----------------------------------------\n\nTITLE: Example of QueryParameters\nDESCRIPTION: This snippet demonstrates how `QueryParameters` are used to parametrize SQL queries for different database providers.  It shows examples for PostgreSQL/Redshift, BigQuery (positional and named parameters), Snowflake (positional), and Databricks ODBC.  The specific format of the parameters depends on the database system.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nvectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=$1`,\n  queryParameters: ['my-name']\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nvectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=$1`,\n  queryParameters: ['my-name']\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nvectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=@username`,\n  queryParameters: { username: 'my-name' }\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nvectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=?`,\n  queryParameters: ['my-name']\n});\n```\n\nLANGUAGE: ts\nCODE:\n```\nvectorQuerySource({\n  data: `select * from users where username=:1`,\n  queryParameters: ['my-name']\n});\n```\n\nLANGUAGE: ts\nCODE:\n```\nvectorQuerySource({\n  ...\n  data: `select * from users where username=?`,\n  queryParameters: ['my-name']\n});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies via npm\nDESCRIPTION: Provides the necessary bash commands to install deck.gl and its related packages using npm. It includes options for installing the main `deck.gl` package or installing core, layers, and carto modules individually.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/cluster-tile-layer.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/carto\n```\n\n----------------------------------------\n\nTITLE: Enhancing BitmapLayer with Pixel Picking Feedback (JavaScript)\nDESCRIPTION: This code implements pixel-based picking callbacks in a BitmapLayer, allowing the application to obtain pixel-specific information when clicking or hovering over the raster image. This feature is useful for interactive raster data analysis, depending on layer configuration and picking support in deck.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst bitmapLayer = new BitmapLayer({\n  id: 'bitmap',\n  data: ..., \n  pickable: true,\n  onPixelPick: ({x, y, pixel}) => {\n    console.log(`Pixel at (${x}, ${y}):`, pixel);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing H3HexagonLayer TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use the H3HexagonLayer within a Deck instance, also including type definitions for the data.  It specifies the data type, sets up the layer properties with data accessors, and defines a Deck instance with the initial view and interactivity. The `DataType` interface defines the structure of the data used by the layer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-hexagon-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {H3HexagonLayer} from '@deck.gl/geo-layers';\n\ntype DataType = {\n  hex: string;\n  count: number;\n};\n\nconst layer = new H3HexagonLayer<DataType>({\n  id: 'H3HexagonLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.h3cells.json',\n\n  extruded: true,\n  getHexagon: (d: DataType) => d.hex,\n  getFillColor: (d: DataType) => [255, (1 - d.count / 500) * 255, 0],\n  getElevation: (d: DataType) => d.count,\n  elevationScale: 20,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<DataType>) => object && `${object.hex} count: ${object.count}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing IconLayer with Prepacked Icons in JavaScript\nDESCRIPTION: This JavaScript code demonstrates the usage of `IconLayer` with pre-packed icons. It requires an `iconAtlas` and `iconMapping`, and the `getIcon` function returns a string corresponding to the icon's name in the `iconMapping`.  The code also sets properties like `sizeScale`, `getPosition`, and `getColor` to customize the icons' appearance and positioning.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.4/icon-layer-dynamic-image-sources.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DeckGL, {IconLayer} from 'deck.gl';\n\nconst ICON_MAPPING = {\n  marker: {x: 0, y: 0, width: 32, height: 32, mask: true}\n};\n\nconst App = ({data, viewport}) => {\n\n  /**\n   * Data format:\n   * [\n   *   {name: 'Colma (COLM)', address: '365 D Street, Colma CA 94014', exits: 4214, coordinates: [-122.466233, 37.684638]},\n   *   ...\n   * ]\n   */\n  const layer = new IconLayer({\n    id: 'icon-layer',\n    data,\n    pickable: true,\n\n    // `iconAtlas` and `iconMapping` are required\n    iconAtlas: 'images/icon-atlas.png',\n    iconMapping: {\n      marker: {\n        x: 0,\n        y: 0,\n        width: 128,\n        height: 128,\n        anchorY: 128,\n        mask: true\n      }\n    },\n    // return a string\n    getIcon: d => 'marker',\n    \n    sizeScale: 15,\n    getPosition: d => d.coordinates,\n    getSize: d => 5,\n    getColor: d => [Math.sqrt(d.exits), 140, 0]\n  });\n\n  return (<DeckGL {...viewport} layers={[layer]} />);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Including Mapbox/MapLibre GL JS Dependencies - HTML\nDESCRIPTION: Provides the necessary HTML script and link tags to include Mapbox GL JS or MapLibre GL JS libraries and stylesheets. Including these makes the map library available in the global scope, allowing DeckGL to automatically integrate a base map.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deckgl.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://api.mapbox.com/mapbox-gl-js/v3.2.0/mapbox-gl.js\"></script>\n<link href=\"https://api.mapbox.com/mapbox-gl-js/v3.2.0/mapbox-gl.css\" rel=\"stylesheet\" />\n<!-- or -->\n<script src=\"https://unpkg.com/maplibre-gl@3.0.0/dist/maplibre-gl.js\"></script>\n<link href=\"https://unpkg.com/maplibre-gl@3.0.0/dist/maplibre-gl.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: RasterTileLayer instantiation (Pre-bundled)\nDESCRIPTION: Demonstrates how to create a new RasterTileLayer instance when deck.gl and CARTO are included via pre-bundled scripts.  It accesses the layer through the `deck.carto` namespace. Requires inclusion of CDN script tags as shown in the previous example.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/raster-tile-layer.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nnew deck.carto.RasterTileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl via Script Tags in HTML\nDESCRIPTION: Illustrates how to include pre-bundled deck.gl scripts directly in an HTML file using <script> tags from the unpkg CDN. It presents options for including either the main deck.gl bundle or the individual core, layers, and carto module scripts.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/point-label-layer.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Hexagon Heatmap with Pydeck in Python\nDESCRIPTION: This Python code utilizes the Pydeck library to fetch UK accident data from a remote CSV file and visualize it as a 3D hexagon heatmap. It configures a `HexagonLayer` with parameters like position columns (`lng`, `lat`), elevation scaling, highlighting, and extrusion. It also sets the initial map `ViewState` including longitude, latitude, zoom levels, pitch, and bearing. Finally, it creates a `Deck` object with the layer and view state and displays the interactive map using `r.show()`. Requires the `pydeck` library and an internet connection to fetch the data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/tests/dev-containers/test.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck as pdk\nprint(pdk.__version__)\n\n# 2014 locations of car accidents in the UK\nUK_ACCIDENTS_DATA = ('https://raw.githubusercontent.com/uber-common/'\n                     'deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv')\n\n# Define a layer to display on a map\nlayer = pdk.Layer(\n    'HexagonLayer',\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,                 \n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Render\nr = pdk.Deck(layers=[layer], initial_view_state=view_state)\nr.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom View State Interpolator in Deck.gl\nDESCRIPTION: This JavaScript code provides an example implementation of a custom interpolator (`SphericalLinearInterpolator`) by extending `TransitionInterpolator`. It includes a helper function for linear interpolation (`lerp`) and demonstrates how to calculate transition duration (`getDuration`), preprocess start and end states (`initializeProps`), and perform the interpolation per frame (`interpolateProps`), specifically handling longitude values for shortest path transitions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/transition-interpolator.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {TransitionInterpolator} from '@deck.gl/core';\n\n// Interpolate between two values\nfunction lerp(from, to, t) {\n  return from + (to - from) * t;\n}\n\n/*\n * This interpolator moves the camera along a straight path on the Web Mercator map\n * Horizontally it moves in the direction that is shorter\n */\nclass SphericalLinearInterpolator extends TransitionInterpolator {\n  constructor({speed = 100} = {}) {\n    super(['longitude', 'latitude']);\n\n    // degrees per second\n    this.speed = speed;\n  }\n\n  getDuration(startViewState, endViewState) {\n    const deltaLat = Math.abs(startViewState.latitude - endViewState.latitude);\n    let deltaLng = Math.abs(startViewState.longitude - endViewState.longitude);\n    // Transition to the destination longitude along the smaller half of the circle\n    if (deltaLng > 180) deltaLng = 360 - deltaLng;\n    return Math.max(deltaLng, deltaLat) / this.speed * 1000;\n  }\n\n  initializeProps(startViewState, endViewState) {\n    const fromLng = startViewState.longitude;\n    let toLng = endViewState.longitude;\n    // Transition to the destination longitude along the smaller half of the latitude circle\n    if (toLng > fromLng + 180) toLng -= 360;\n    if (toLng < fromLng - 180) toLng += 360;\n\n    return {\n      start: {longitude: fromLng, latitude: startViewState.latitude},\n      end: {longitude: toLng, latitude: endViewState.latitude}\n    };\n  }\n\n  interpolateProps(start, end, t) {\n    const latitude = lerp(start.latitude, end.latitude, t);\n    let longitude = lerp(start.longitude, end.longitude, t);\n    // Put longitude back into the [-180, 180] range\n    if (longitude > 180) longitude -= 360;\n    if (longitude < -180) longitude += 360;\n\n    return {longitude, latitude};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching, Processing Taxi Data and Plotting\nDESCRIPTION: This snippet fetches the taxi location data from a remote API using `requests`, processes it into a Pandas DataFrame, and plots it using pydeck.  It computes the initial view state for the map and defines a `ScreenGridLayer` to visualize the taxi locations. It uses `compute_view` to calculate the initial viewport and `Deck` to render the visualization. The input is the URL of the taxi data. The output is a pydeck visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/03 - Event handlers and data selection in pydeck.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport requests\n\njson = requests.get(DATA_URL).json()\ndf = pd.DataFrame(json[\"features\"][0][\"geometry\"][\"coordinates\"])\ndf.columns = ['lng', 'lat']\n\nviewport = pdk.data_utils.compute_view(df[['lng', 'lat']])\nlayer = pdk.Layer(\n    'ScreenGridLayer',\n    df,\n    get_position=['lng', 'lat'],\n    cell_size_pixels=20,\n    color_range=COLOR_RANGE,\n    pickable=True,\n    auto_highlight=True)\nr = pdk.Deck(layers=[layer], initial_view_state=viewport)\n```\n\n----------------------------------------\n\nTITLE: Defining accessor functions for TextLayer properties in deck.gl (JavaScript/TypeScript)\nDESCRIPTION: Provides optional accessor functions for retrieving text content, position, size, color, angle, text anchor, alignment, pixel offset, background color, border color, and border width. Each accessor has a default value and can be customized per object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n#### `getText` (Accessor&lt;string&gt;) {#gettext}\n\n* Default: `x => x.text`\n\nMethod called to retrieve the content of each text label.\n\n#### `getPosition` (Accessor&lt;Position&gt;) ![transition-enabled](https://img.shields.io/badge/transition-enabled-green.svg?style=flat-square\") {#getposition}\n\n* Default: `x => x.position`\n\nMethod called to retrieve the location of each text label.\n\n#### `getSize` (Accessor&lt;number&gt;) ![transition-enabled](https://img.shields.io/badge/transition-enabled-green.svg?style=flat-square\") {#getsize}\n\n* Default: `32`\n\nThe font size of each text label, in units specified by `sizeUnits` (default pixels).\n* If a number is provided, it is used as the size for all objects.\n* If a function is provided, it is called on each object to retrieve its size.\n\n#### `getColor` (Accessor&lt;Color&gt;) ![transition-enabled](https://img.shields.io/badge/transition-enabled-green.svg?style=flat-square\") {#getcolor}\n\n* Default: `[0, 0, 0, 255]`\n\nThe rgba color is in the format of `[r, g, b, [a]]`. Each channel is a number between 0-255 and `a` is 255 if not supplied.\n* If an array is provided, it is used as the color for all objects.\n* If a function is provided, it is called on each object to retrieve its color.\n\n#### `getAngle` (Accessor&lt;number&gt;) ![transition-enabled](https://img.shields.io/badge/transition-enabled-green.svg?style=flat-square\") {#getangle}\n\n* Default: `0`\n\nThe rotating angle of each text label, in degrees.\n* If a number is provided, it is used as the angle for all objects.\n* If a function is provided, it is called on each object to retrieve its angle.\n\n#### `getTextAnchor` (Accessor&lt;string&gt;) {#gettextanchor}\n\n* Default: `'middle'`\n\nThe text anchor. Options include `'start'`, `'middle'`, `'end'`.\n* If a string is provided, it is used as the text anchor for all objects.\n* If a function is provided, it is called on each object to retrieve its text anchor.\n\n#### `getAlignmentBaseline` (Accessor&lt;string&gt;) {#getalignmentbaseline}\n\n* Default: `'center'`\n\nThe alignment baseline, options `'top'`, `'center'`, `'bottom'`.\n* If a string is provided, it is used as the alignment baseline for all objects.\n* If a function is provided, it is called on each object to retrieve its alignment baseline.\n\n#### `getPixelOffset` (Accessor&lt;number[2]&gt;) ![transition-enabled](https://img.shields.io/badge/transition-enabled-green.svg?style=flat-square\") {#getpixeloffset}\n\n* Default: `[0, 0]`\n\nScreen space offset relative to the `coordinates` in pixel units.\n* If an array is provided, it is used as the offset for all objects.\n* If a function is provided, it is called on each object to retrieve its offset.\n\n#### `getBackgroundColor` (Accessor&lt;Color&gt;) ![transition-enabled](https://img.shields.io/badge/transition-enabled-green.svg?style=flat-square\") {#getbackgroundcolor}\n\n* Default: `[255, 255, 255, 255]`\n\nThe background color, effective if `background: true`.\n* The color format `[r, g, b, [a]]` with channels 0-255.\n* Can be an array (applied to all) or a function (per object).\n\n#### `getBorderColor` (Accessor&lt;Color&gt;) ![transition-enabled](https://img.shields.io/badge/transition-enabled-green.svg?style=flat-square\") {#getbordercolor}\n\n* Default: `[0, 0, 0, 255]`\n\nThe border color of the background, effective if `background: true`.\n* Format similar to background color.\n\n#### `getBorderWidth` (Accessor&lt;number&gt;) ![transition-enabled](https://img.shields.io/badge/transition-enabled-green.svg?style=flat-square\") {#getborderwidth}\n\n* Default: `0`\n\nThe border thickness for each text label in pixels, effective if `background: true`.\n* Can be a number or a function returning the thickness.\n```\n\n----------------------------------------\n\nTITLE: Creating a Deck Instance with Constructor in JavaScript\nDESCRIPTION: Shows the generic instantiation of a Deck instance using the constructor with a props object. This snippet is a minimal example highlighting constructor usage; it expects a properly formed props object consistent with Deck's documented properties. The props control the Deck instance's initialization including canvas, device, layers, views, and rendering parameters.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst deck = new Deck(props);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Median Operation in TypeScript\nDESCRIPTION: This code snippet showcases a custom aggregation operation to calculate the median. It takes an array of point indices and a function to retrieve values. The values are retrieved using `getValue` and sorted. The median is then computed by accessing the middle element or the average of the two middle elements in case of an even number of values and it requires the `pointIndices` and `getValue` as input.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/cpu-aggregator.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction median(pointIndices: number[], getValue: (index: number) => number) {\n  const values = pointIndices.map(getValue);\n  values.sort((a, b) => a - b);\n  return values[values.length >> 1];\n}\n\naggregator.setProps({\n  customOperations: [null, median, null]\n});\n```\n\n----------------------------------------\n\nTITLE: Using WMSLayer with DeckGL in React (TSX)\nDESCRIPTION: Illustrates integrating the WMSLayer within a React functional component using the DeckGL wrapper component from @deck.gl/react. It demonstrates passing the WMSLayer instance with its configuration (data URL, serviceType, layers) to the `layers` prop of DeckGL.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/wms-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {_WMSLayer as WMSLayer} from '@deck.gl/geo-layers';\n\nfunction App() {\n  const layer = new WMSLayer({\n    data: 'https://ows.terrestris.de/osm/service',\n    serviceType: 'wms',\n    layers: ['OSM-WMS']\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 9\n    }}\n    controller\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: FillStyleExtension Constructor Signature in JavaScript\nDESCRIPTION: Defines the constructor signature for `FillStyleExtension`. It accepts an optional options object with a `pattern` boolean property. Setting `pattern: true` enables the pattern fill functionality provided by the extension.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fill-style-extension.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew FillStyleExtension({pattern});\n```\n\n----------------------------------------\n\nTITLE: PolygonLayer with React and DeckGL\nDESCRIPTION: This React component demonstrates integrating the PolygonLayer with DeckGL in a functional component. It retrieves data from a remote source, defines accessors for polygon, elevation, and colors. The layer is configured with styling properties and made interactive with tooltips to display zipcode and population data on hover.  The component utilizes the DeckGL component to render the map.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/polygon-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {PolygonLayer} from '@deck.gl/layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype ZipCode = {\n  zipcode: number;\n  population: number;\n  area: number;\n  contour: [longitude: number, latitude: number][];\n};\n\nfunction App() {\n  const layer = new PolygonLayer<ZipCode>({\n    id: 'PolygonLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-zipcodes.json',\n\n    getPolygon: (d: ZipCode) => d.contour,\n    getElevation: (d: ZipCode) => d.population / d.area / 10,\n    getFillColor: (d: ZipCode) => [d.population / d.area / 60, 140, 0],\n    getLineColor: [255, 255, 255],\n    getLineWidth: 20,\n    lineWidthMinPixels: 1,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<ZipCode>) => object && `${object.zipcode}\\nPopulation: ${object.population}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Result of deck.gl Layer Conversion using `@@type` (JavaScript)\nDESCRIPTION: Shows the JavaScript object resulting from the conversion of the previous JSON snippet using `@@type`. The `JSONConverter` replaced the JSON object with `@@type` with an actual `ScatterplotLayer` instance, initialized with the specified properties.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  layers: [\n    new ScatterplotLayer({\n      data: ...,\n      getColor: [0, 128, 255],\n      getRadius: 1\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a HexagonLayer Map with pydeck in Python\nDESCRIPTION: Demonstrates initializing a `pydeck.Layer` as a `HexagonLayer` to visualize UK accident data. It specifies the data source (URL), position mapping (`get_position` using column names), enables highlighting, sets elevation scale/range, extrusion, and coverage. It also configures the initial `ViewState` and renders the map to an HTML file using `pdk.Deck`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/layer.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck as pdk\n\nUK_ACCIDENTS_DATA = 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'\n\nlayer = pdk.Layer(\n    'HexagonLayer',  # `type` positional argument is here\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,\n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Combined all of it and render a viewport\nr = pdk.Deck(layers=[layer], initial_view_state=view_state)\nr.to_html('hexagon-example.html')\n```\n\n----------------------------------------\n\nTITLE: Defining Mercator Viewport Controller State - JavaScript\nDESCRIPTION: Defines the properties and method stubs for an ES6 class representing the state of a Mercator-projected viewport controller. It includes required viewport parameters like dimensions, location, and zoom, along with optional parameters for bearing, pitch, altitude, and limits. Placeholder methods are provided for handling pan, rotate, and zoom gesture events, designed to return a new state object for immutability. This class is intended to be framework-independent and work with a state management paradigm.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v4.1/event-handling-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class MercatorControlState {\n\n  static propTypes = {\n    width: PropTypes.number.isRequired, // The width of the map\n    height: PropTypes.number.isRequired, // The height of the height\n    latitude: PropTypes.number.isRequired, // The latitude of the center of the map.\n    longitude: PropTypes.number.isRequired,  // The longitude of the center of the map.\n    zoom: PropTypes.number.isRequired, // The tile zoom level of the map.\n    bearing: PropTypes.number, // Specify the bearing of the viewport\n    pitch: PropTypes.number, // Specify the pitch of the viewport\n    altitude: PropTypes.number, // Altitude of viewport camera. Unit: height heights, default 1.5\n\n    maxZoom: PropTypes.number,\n    minZoom:\n    maxPitch:\n    minPitch:\n\n    startDragLngLat: PropTypes.arrayOf(PropTypes.number), // Position when current drag started\n    startBearing: PropTypes.number, // Bearing when current perspective drag started\n    startPitch: PropTypes.number, // Pitch when current perspective drag operation started\n  };\n\n  // Returns an Viewport instance\n  getViewport() {}\n\n  // Returns a new state object for chaining\n  panStart() {}\n  pan() {}\n  panEnd() {}\n  rotateStart() {}\n  rotate() {}\n  rotateEnd() {}\n  zoomStart() {}\n  zoom() {}\n  zoomEnd() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Random Colors using pydeck.data_utils in Python\nDESCRIPTION: This snippet demonstrates how to use the `pydeck.data_utils.assign_random_colors` function to generate a unique random color (as an RGB list) for each unique category found in a specified column of a pandas DataFrame. It shows how to create a sample DataFrame, apply the color assignment function to the 'attraction_type' column, and then use the resulting color lookup dictionary to add a 'color' column to the DataFrame. Requires the pydeck and pandas libraries. The input is a pandas DataFrame with at least one column containing categorical data, and the output is the same DataFrame with an added column containing the assigned RGB color list for each row based on its category.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/data_utils.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck\nimport pandas\n\ndata = pandas.DataFrame([\n    {\n        'site': 'Big Ben',\n        'attraction_type': 'Clock Tower',\n        'lat': 51.5006958,\n        'lng': -0.1266639\n    },\n    {\n        'site': 'Kensington Palace',\n        'attraction_type': 'Palace',\n        'lat': 51.5046188,\n        'lng': -0.1839472\n    },\n    {\n        'attraction_type': 'Palace',\n        'site': 'Buckingham Palace',\n        'lat': 51.501364,\n        'lng': -0.14189\n    }\n])\n\ncolor_lookup = pydeck.data_utils.assign_random_colors(data['attraction_type'])\n# Assign a color based on attraction_type\ndata['color'] = data.apply(lambda row: color_lookup.get(row['attraction_type']), axis=1)\n```\n\n----------------------------------------\n\nTITLE: Example of Invalid Request for Unsupported Format in CARTORasterSource\nDESCRIPTION: Illustrates a scenario where the user requests a format ('geojson') that is not supported by the CartoRasterSource class. This triggers an error, enforcing correct usage and format constraints at development time. This pattern helps maintain consistency between data source capabilities and requested output types.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/carto-v9-rfc.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await CartoRasterSource({\n  ...globalOptions,\n  tableName: 'carto-demo-data.raster.table',\n  format: 'geojson' // <-- Error as 'geojson' not a valid format for this source\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating TextLayer in TypeScript\nDESCRIPTION: Shows the standard way to import the `TextLayer` class and its corresponding props type (`TextLayerProps`) from the `@deck.gl/layers` package in a TypeScript project. It also includes the generic constructor signature for creating a new TextLayer instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {TextLayer} from '@deck.gl/layers';\nimport type {TextLayerProps} from '@deck.gl/layers';\n\nnew TextLayer<DataT>(...props: TextLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Loading deck.gl and H3TileLayer with CDN Scripts in HTML\nDESCRIPTION: Demonstrates how to include deck.gl core, layers, geo-layers, and carto modules directly into an HTML page via CDN links using script tags. Two different options are provided: a combined deck.gl bundle or individual module bundles. This approach supports usage without npm or build tools.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/h3-tile-layer.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring ScatterplotLayer updateTriggers deck.gl TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use the `updateTriggers` property on a deck.gl ScatterplotLayer. By listing `maleColor` and `femaleColor` in the `updateTriggers.getFillColor` array, deck.gl is explicitly instructed to re-evaluate the `getFillColor` accessor whenever these external variables change, ensuring attributes are updated correctly.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction render({maleColor, femaleColor}: {\n  maleColor: Color;\n  femaleColor: Color;\n}) {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      getPosition: (d: DataType) => d.position;\n      getFillColor: (d: DataType) => d.gender === 'M' ? maleColor : femaleColor,\n      // getFillColor should be re-evaluated when something in [maleColor, femaleColor] changes\n      updateTriggers: {\n        getFillColor: [maleColor, femaleColor]\n      }\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Incremental Data Loading - TypeScript\nDESCRIPTION: This TypeScript code demonstrates an inefficient way to handle incremental data loading in deck.gl.  It concatenates new data chunks to a single data array, causing deck.gl to recalculate buffers for all data, including previously loaded chunks. This approach can lead to poor performance with large datasets.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nlet loadedData: DataType[] = [];\nlet chunk: DataType[];\nwhile (chunk = await fetchNextChunk()) {\n  loadedData = loadedData.concat(chunk);\n  render();\n}\n\nfunction render() {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      id: 'points',\n      // If we have 1 million rows loaded and 100,000 new rows arrive,\n      // we end up recalculating the buffers for all 1,100,000 rows\n      data: loadedData,\n      getPosition: (d: DataType) => d.position\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Data with Pandas in Python\nDESCRIPTION: This snippet downloads data from a URL (a CSV file containing subway stop information) using the Pandas library. It imports pandas as pd and reads the CSV file into a DataFrame and then displays the head of the dataframe.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/02 - Scatterplots.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport pydeck as pdk\n\n# First, let's use Pandas to download our data\nURL = 'https://raw.githubusercontent.com/ajduberstein/data_sets/master/beijing_subway_station.csv'\ndf = pd.read_csv(URL)\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: React example: constraining view state with callback\nDESCRIPTION: Utilizes React's useCallback hook to constrain user's view within bounds dynamically, applying the constraints within onViewStateChange callback for deck.gl. Dependencies include '@deck.gl/react'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useCallback} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapViewState} from '@deck.gl/core';\n\nfunction App({bounds}: {\n  bounds: [\n    [west: number, south: number],\n    [east: number, north: number]\n  ] \n}) {\n  const applyViewStateConstraints = useCallback((viewState: MapViewState) => ({\n    ...viewState,\n    longitude: Math.min(bounds[1][0], Math.max(bounds[0][0], viewState.longitude)),\n    latitude: Math.min(bounds[1][1], Math.max(bounds[0][1], viewState.latitude))\n  }), [bounds]);\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.8,\n      zoom: 12\n    }}\n    controller\n    onViewStateChange={({viewState}) => applyViewStateConstraints(viewState)}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Revisions to Viewport Class Properties and Removal of Viewport id\nDESCRIPTION: The traditional Viewport class properties such as `id`, `x`, and `y` are deprecated or removed to better support the new multi-view architecture. Usage of `id` is eliminated, and the `x` and `y` properties are marked as TBD for future consideration, indicating potential use as offsets in projections.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/view-class-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n> | Old Method            | New Method        | Comment |\n> | ---                   | ---               | ---     |\n> | `id`         | N/A      | Removed |\n> | `x`          | N/A      | TBD - keep and use as offset in projections? |\n> | `y`          | N/A      | TBD - keep and use as offset in projections? |\n```\n\n----------------------------------------\n\nTITLE: Using GridLayer with DeckGL React Component\nDESCRIPTION: This React/TypeScript example demonstrates how to integrate the GridLayer within a React application using the DeckGL component. It defines the data type, creates the GridLayer instance, and renders the DeckGL component passing the layer and initial view state as props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {GridLayer, GridLayerPickingInfo} from '@deck.gl/aggregation-layers';\n\ntype BikeRack = {\n  ADDRESS: string;\n  SPACES: number;\n  COORDINATES: [longitude: number, latitude: number];\n};\n\nfunction App() {\n  const layer = new GridLayer<BikeRack>({\n    id: 'GridLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-bike-parking.json',\n\n    gpuAggregation: true,\n    extruded: true,\n    getPosition: (d: BikeRack) => d.COORDINATES,\n    getColorWeight: (d: BikeRack) => d.SPACES,\n    getElevationWeight: (d: BikeRack) => d.SPACES,\n    elevationScale: 4,\n    cellSize: 200,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: GridLayerPickingInfo<BikeRack>) => object && `Count: ${object.elevationValue}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing ViewportLinearInterpolator Transition Properties in Deck.gl - JavaScript\nDESCRIPTION: Illustrates supplying a customized set of transition properties to a ViewportLinearInterpolator instance for use with MapController. This allows users to specify which viewport properties should be interpolated during transitions. To use, pass the required properties array (denoted as TRANSITION_PROPS) to the ViewportLinearInterpolator constructor. Dependencies include Deck.gl and access to the relevant property names.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.1/transition-interpolator-class-rfc.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<MapController transitionInterpolator={new ViewportLinearInterpolator(TRANSITION_PROPS)} />\n```\n\n----------------------------------------\n\nTITLE: Rendering the Map with Deck and CartoLayer\nDESCRIPTION: Creates and displays a map using 'pdk.Deck', integrating the layer and setting map style to 'ROAD'. The 'initial_view_state' is assigned the 'view_state' parameter. This results in an interactive map visualizing the specified spatial data with styling and camera settings.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/hello_world.ipynb#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npdk.Deck(layer, map_style=pdk.map_styles.ROAD, initial_view_state=view_state)\n```\n\n----------------------------------------\n\nTITLE: Using String Constants for Aggregation in pydeck HeatmapLayer (Python)\nDESCRIPTION: Shows how to pass string constants, specifically aggregation methods, to pydeck layers. It uses `pydeck.types.String('MEAN')` to wrap the string 'MEAN', indicating it's a constant value for the `aggregation` parameter of a `HeatmapLayer`. This layer visualizes Fortune 500 data, using longitude/latitude columns and calculating weight based on profit per employee using another expression string.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/layer.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeck.types import String\n\nDATA_SOURCE = 'https://raw.githubusercontent.com/ajduberstein/geo_datasets/master/fortune_500.csv'\n\nlayer = pydeck.Layer(\n    \"HeatmapLayer\",\n    DATA_SOURCE,\n    opacity=0.9,\n    get_position=[\"longitude\", \"latitude\"],\n    aggregation=String('MEAN'),\n    get_weight=\"profit / employees > 0 ? profit / employees : 0\")\n```\n\n----------------------------------------\n\nTITLE: Enabling FirstPersonController\nDESCRIPTION: This code snippet demonstrates how to enable the FirstPersonController for a FirstPersonView. By setting the `controller` property to `true` in the FirstPersonView constructor, the user can interact with the view using mouse and keyboard input. The view's `id` is set to `pov`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/first-person-view.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst view = new FirstPersonView({id: 'pov', controller: true});\n```\n\n----------------------------------------\n\nTITLE: Async Usage of CARTO Source Functions with Typed Format Output in JavaScript\nDESCRIPTION: Shows how to asynchronously call a CARTO source function (CartoVectorTableSource) passing options including format specification to receive a TileJSON or GeoJSON payload. Demonstrates the new API's ability to return properly typed data depending on the format option, improving type safety. Also highlights that unsupported formats cause compile-time or runtime errors.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/carto-v9-rfc.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await CartoVectorTableSource({\n  ...globalOptions,\n  tableName: 'carto-demo-data.demo_tables.chicago_crime_sample',\n  format: 'geojson'\n});\n\nconsole.log(data.features); // <-- data is typed as a GeoJSON object\n```\n\n----------------------------------------\n\nTITLE: Configuring Pickability for GeoJsonLayer SubLayers in deck.gl (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set the pickable property selectively for a sublayer (specifically the points-circle sublayer) in a GeoJsonLayer instance, using the experimental _subLayerProps property. This allows only specific features to respond to hover and click events. To use, install @deck.gl/layers and supply standard properties to the GeoJsonLayer. The input is a GeoJsonLayer configuration object; the output is a customized deck.gl layer with tailored interactivity across sublayers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/composite-layer.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nconst layer = new GeoJsonLayer({\n  // ...\n  pickable: false,\n  _subLayerProps: {\n    'points-circle': {\n      pickable: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Culling\nDESCRIPTION: This code snippet demonstrates how to discard surfaces facing away from the camera in Deck to fix the \"see-through\" effect. The `cull` parameter is set to `true` in the `parameters` prop of the `Deck` component. This improves rendering performance and visual appearance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/globe-view.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nparameters: {\n  cull: true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing deck.gl from CDN (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to import deck.gl and its core and layers modules from a CDN using script tags. It allows usage of deck.gl in a web page without requiring local installation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/polygon-layer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Google 3D Tiles Demo in React - JavaScript/JSX\nDESCRIPTION: This snippet shows how to import a Google 3D Tiles demo component from a local module (./google-3d-tiles) and render it in a React application. It requires a React environment and assumes that the Demo component encapsulates the logic for displaying Google 3D Tiles, possibly using deck.gl or similar libraries. The expected input is a React-compatible environment, and the output is the rendered 3D Tiles demo in the UI; there are no configurable parameters in this usage.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/google-3d-tiles.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './google-3d-tiles';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Custom Deck.gl Widget (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a custom widget by inheriting from the `Deck.gl Widget` base class. It defines a `LoadingIndicator` widget that uses `onRenderHTML` to initialize its DOM element and `onRedraw` to control its visibility based on the loading status of layers. It also shows how to instantiate this custom widget and add it to a new `Deck` instance's `widgets` array for integration.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/widget.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, Widget} from '@deck.gl/core';\n\nclass LoadingIndicator extends Widget {\n  element?: HTMLDivElement;\n  size: number;\n\n  constructor(options: {\n    size: number;\n  }) {\n    // Note: In modern JS/TS, `super(options)` or `super({id: 'loading-indicator', ...options})`\n    // is usually called here to pass props to the base class. The example lacks this.\n    // Assuming 'id' and 'props' are managed internally by the base class or context.\n    this.size = options.size;\n    // TODO - initialize base class properly if needed based on actual Deck.gl Widget implementation\n  }\n\n  onRenderHTML(el: HTMLElement) {\n    el.className = 'spinner';\n    el.style.width = `${this.size}px`;\n    el.style.height = `${this.size}px`; // Added height for square spinner often needed\n    // TODO - create animation for .spinner in the CSS stylesheet\n  }\n\n  onRedraw({layers}) {\n    // Check if ANY layer is currently NOT loaded\n    const isVisible = layers.some(layer => !layer.isLoaded);\n    // Access the root DOM element managed by the widget system\n    // The base Widget class is expected to provide a rootElement property\n    // This might differ slightly in the actual Deck.gl API\n    if (this.rootElement) {\n      this.rootElement.style.display = isVisible ? 'block' : 'none';\n    }\n  }\n}\n\n// Example of adding the custom widget to a Deck instance\n// Requires a DOM element with id 'deck-container' or similar\n// The 'widgets' array is passed as part of the Deck options.\nnew Deck({\n  // container: 'deck-container', // Assume container is set elsewhere\n  // views: [], // Assume views are defined elsewhere\n  // initialViewState: {}, // Assume view state is defined elsewhere\n  // layers: [], // Assume layers are defined elsewhere\n  widgets: [new LoadingIndicator({size: 48})]\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Data with pandas\nDESCRIPTION: This snippet loads the data from a CSV file hosted on GitHub using `pd.read_csv`. The loaded data is then displayed using `nodes.head()` to preview the DataFrame.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/07 - Binary Transport.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnodes = pd.read_csv(NODES_URL)\nnodes.head()\n```\n\n----------------------------------------\n\nTITLE: Starting deck.gl Gallery Local Dev Server (bash)\nDESCRIPTION: Installs project dependencies using yarn and then starts the local development server. Requires the MapboxAccessToken environment variable to be set for examples using base maps.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/gallery/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nyarn\n# start server\nexport MapboxAccessToken=<mapbox-access-token> && npm start\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Aggregator Resources\nDESCRIPTION: Disposes all resources allocated by the aggregator implementation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/aggregator.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\naggregator.destroy();\n```\n\n----------------------------------------\n\nTITLE: Implementing QuadkeyLayer in React with TypeScript\nDESCRIPTION: React component implementation of QuadkeyLayer using DeckGL, with TypeScript typing for data objects and picking info, suitable for integration in React applications.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/quadkey-layer.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {QuadkeyLayer} from '@deck.gl/geo-layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype DataType = {\n  quadkey: string;\n  value: number;\n};\n\nfunction App() {\n  const layer = new QuadkeyLayer<DataType>({\n    id: 'QuadkeyLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.quadkeys.json',\n    \n    extruded: true,\n    getQuadkey: (d: DataType) => d.quadkey,\n    getFillColor: (d: DataType) => [d.value * 128, (1 - d.value) * 255, (1 - d.value) * 255, 180],\n    getElevation: (d: DataType) => d.value,\n    elevationScale: 1000,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<DataType>) => object && `${object.quadkey} value: ${object.value}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing GPU Buffer Allocation for Arrow Table Chunks in JavaScript\nDESCRIPTION: This code proposes utility functions (`allocateGPUBuffersForChunks`, `freeGPUBuffersForChunks`) for managing GPU memory associated with data chunks (specifically Apache Arrow `Vector` instances). It utilizes a Map (`vectorToGPUBufferMap`) to cache GPU buffers and implement reference counting based on which tables use a chunk, facilitating efficient memory allocation and deallocation when tables are added or removed as layer data props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/chunked-data-support-rfc.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst vectorToGPUBufferMap = new Map();\n\nfunction allocateGPUBuffersForChunks(table) {\n  for (column in table) {\n    for (chunks in column) {\n      let cache = vectorToGPUBufferMap.get(chunk);\n      if (! cache) {\n        cache = {buffer: new GPUBuffer(...), tables: []}\n        vectorToGPUBufferMap.add(chunk, cache);\n      }\n      cache.tables.push(table);\n    }\n  }\n}\n\nfunction freeGPUBuffersForChunks(table) {\n  for (columns) {\n    for (chunks) {\n      // if table no longer in tables, free GPUBuffer\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TextLayer with TypeScript\nDESCRIPTION: Shows the TypeScript equivalent of creating a `TextLayer`. It defines a `BartStation` type for the data structure, uses typed accessors for position and text, configures visual properties and picking, and integrates the layer into a Deck instance. The tooltip function utilizes the typed `PickingInfo` object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {TextLayer} from '@deck.gl/layers';\n\ntype BartStation = {\n  name: string;\n  coordinates: [longitude: number, latitude: number];\n};\n\nconst layer = new TextLayer<BartStation>({\n  id: 'TextLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-stations.json',\n\n  getPosition: (d: BartStation) => d.coordinates,\n  getText: (d: BartStation) => d.name,\n  getAlignmentBaseline: 'center',\n  getColor: [255, 128, 0],\n  getSize: 16,\n  getTextAnchor: 'middle',\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<BartStation>) => object && object.name,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Color Bins Styling with CartoLayer\nDESCRIPTION: This snippet creates a CartoLayer with color bins styling. It queries data from Carto DW and styles the layer based on the 'pct_higher_ed' column, using predefined color bins and a 'PinkYl' color palette. The layer visualizes higher education percentage by county.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/carto_styles.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlayer = pdk.Layer(\n    \"CartoLayer\",\n    data=\"SELECT geom, pct_higher_ed FROM `cartobq.public_account.higher_edu_by_county`\",\n    type_=pdkc.MapType.QUERY,\n    connection=pdkc.CartoConnection.CARTO_DW,\n    credentials=pdkc.get_layer_credentials(carto_auth),\n    get_fill_color=pdkc.styles.color_bins(\n        \"pct_higher_ed\", [0, 20, 30, 40, 50, 60, 70], \"PinkYl\"\n    ),\n    get_line_color=[0, 0, 0, 100],\n    line_width_min_pixels=0.5,\n    pickable=True,\n)\n\nview_state = pdk.ViewState(latitude=38, longitude=-98, zoom=3)\n\ntooltip = {\"text\": \"Higher education percentage: {pct_higher_ed} %\"}\n\npdk.Deck(\n    layer, map_style=pdk.map_styles.ROAD, initial_view_state=view_state, tooltip=tooltip\n)\n```\n\n----------------------------------------\n\nTITLE: Selective control feature enabling in deck.gl (JavaScript)\nDESCRIPTION: Enables or disables specific camera control features such as double-click zoom and touch rotation by passing a controller object with feature flags. Dependencies include '@deck.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst deckInstance = new Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: {doubleClickZoom: false, touchRotate: true}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a CARTO credentials file in JSON\nDESCRIPTION: This JSON snippet shows the structure of a CARTO credentials file required for M2M authentication. The file contains `api_base_url`, `client_id`, and `client_secret` fields.  These values are obtained from the CARTO Dashboard in the Developers section, after creating a Machine to Machine application. The file's content provides the authentication information required for automated login.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/authentication.rst#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"api_base_url\": \"https://gcp-us-east1.api.carto.com\",\n    \"client_id\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n    \"client_secret\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Data Attributes Example\nDESCRIPTION: This code snippet demonstrates how to replace a layer's accessors with binary data attributes in deck.gl for improved performance. It creates a ScatterplotLayer and supplies data with specific offsets and strides for position and fill color. This technique optimizes data throughput when loading or updating data frequently.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = new Float32Array([\n  0.7, 0.2, 0, 0, 0, 0,\n  0.8, 0.6, 0, 0, 5, 0,\n  0.3, 0.5, 0, 5, 5, 0,\n  0, 0.8, 0.6, 5, 10, 0,\n  0, 0.5, 0.7, 10, 10, 0\n]);\n\nnew deck.ScatterplotLayer({\n  id: 'points',\n  data: {\n    length: 5,\n    attributes: {\n      getPosition: {value: data, size: 3, offset: 12, stride: 24},\n      getFillColor: {value: data, size: 3, offset: 0, stride: 24}\n    }\n  },\n  getRadius: 1\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering H3ClusterLayer in React with TypeScript\nDESCRIPTION: Shows how to integrate the H3ClusterLayer within a React functional component using DeckGL. The data type is defined explicitly for typing props and interactions. The component initializes the layer with properties for hexagon retrieval, fill color, and line color, and renders the DeckGL component with view state and tooltip configurations. Required dependencies include React, @deck.gl/react, @deck.gl/core, and @deck.gl/geo-layers, and the component expects external H3 cluster JSON data served at the specified URL.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-cluster-layer.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {H3ClusterLayer} from '@deck.gl/geo-layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype DataType = {\n  mean: number;\n  count: number;\n  hexIds: string[];\n};\n\nfunction App() {\n  const layer = new H3ClusterLayer<DataType>({\n    id: 'H3ClusterLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.h3clusters.json',\n    \n    stroked: true,\n    getHexagons: (d: DataType) => d.hexIds,\n    getFillColor: (d: DataType) => [255, (1 - d.mean / 500) * 255, 0],\n    getLineColor: [255, 255, 255],\n    lineWidthMinPixels: 2,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<DataType>) => object && `density: ${object.mean}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering VectorTileLayer with CARTO Color Categories Style in Python\nDESCRIPTION: This snippet illustrates how to create a CARTO data source with a query selecting geometry and categorical land use types, then render a VectorTileLayer using the color_categories style to assign colors to distinct land use categories. Dependencies are pydeck, pydeck_carto, and a valid CARTO authentication method. The method requires an explicit list of categories and a named color scheme 'Bold'. Outputs include a pydeck Deck visualization with fill colors mapped to land use types and customized HTML tooltips with styling options. The snippet assumes categorical data is consistent with the provided category list for accurate color mapping.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/styles.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Create CARTO data source\ndata = pdkc.sources.vector_query_source(\n    access_token=carto_auth.get_access_token(),\n    api_base_url=carto_auth.get_api_base_url(),\n    connection_name=\"carto_dw\",\n    sql_query=\"SELECT geom, landuse_type FROM `cartobq.public_account.wburg_parcels`\",\n)\n\n# Render CARTO layer in pydeck with color categories style\nlayer = pdk.Layer(\n    \"VectorTileLayer\",\n    data=data,\n    get_fill_color=color_categories(\n        \"landuse_type\",\n        [\n            \"Multi-Family Walk-Up Buildings\",\n            \"Multi-Family Elevator Buildings\",\n            \"Mixed Residential And Commercial Buildings\",\n            \"Parking Facilities\",\n            \"1 and 2 Family Buildings\",\n            \"Commercial and Office Buildings\",\n            \"Vacant Land\",\n            \"Public Facilities and Institutions\",\n            \"Transportation and Utility\",\n            \"Open Space and Outdoor Recreation\",\n            \"Industrial and Manufacturing\",\n        ],\n        \"Bold\",\n    ),\n    get_line_color=[0, 0, 0, 100],\n    line_width_min_pixels=0.5,\n    pickable=True,\n)\n\nmap_style = pdk.map_styles.ROAD\nview_state = pdk.ViewState(latitude=40.715, longitude=-73.959, zoom=14)\ntooltip={\n    \"html\": \"<b>Land use type:</b><br>{landuse_type}\",\n    \"style\": {\"color\": \"black\", \"backgroundColor\": \"#84D2F6\"}\n}\npdk.Deck(layer, map_style=map_style, initial_view_state=view_state, tooltip=tooltip)\n```\n\n----------------------------------------\n\nTITLE: Animating TripsLayer currentTime prop using popmotion in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to animate the `currentTime` prop of a `TripsLayer` in deck.gl using the `popmotion` library.  It defines a TripData type and uses this type to provide data for the TripsLayer. It initializes a `Deck` instance and defines an animation that updates the layer's `currentTime` property, triggering a layer update on each frame. The animation ranges from 0 to 1800 over 5 seconds, repeating indefinitely. Requires `@deck.gl/core`, `@deck.gl/geo-layers`, and `popmotion`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {TripsLayer} from '@deck.gl/geo-layers';\nimport {animate} from \"popmotion\";\n\nconst currentTimeAnimation = animate<number>({\n  from: 0, // currentTime min value\n  to: 1800, // currentTime max value\n  duration: 5000, // over the course of 5 seconds\n  repeat: Infinity,\n  onUpdate: updateLayers\n});\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  controller: true\n});\n\ntype TripData = {\n  coordinates: [longitude: number, latitude: number][];\n  timestamps: number[];\n};\n\nfunction updateLayers(currentTime: number) {\n  const layers = [\n    new TripsLayer<TripData>({\n      id: 'TripsLayer',\n      data: '/path/to/data.json',\n      getPath: (d: TripData) => d.waypoints.map(p => p.coordinates),\n      getTimestamps: (d: TripData) => d.waypoints.map(p => p.timestamp),\n      getColor: [253, 128, 93],\n      getWidth: 50,\n\n      currentTime,\n      trailLength: 600\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Using H3TileLayer with h3TilesetSource\nDESCRIPTION: This JSX snippet demonstrates how to use the `h3TilesetSource` function and its resulting data with the `H3TileLayer` from the `@deck.gl/carto` module. The `h3TilesetSource` function is used to obtain data, which is then directly passed to the `data` prop of the `H3TileLayer`. This showcases how the promise returned by the data source doesn't need to be resolved directly.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {H3TileLayer, h3TilesetSource} from '@deck.gl/carto';\nnew H3TileLayer({\n  data: h3TilesetSource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    tableName: 'carto-demo-data.demo_tables.h3_data'\n  }),\n\n  getFillColor: d => d.properties.color\n});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl NPM Module using Bash\nDESCRIPTION: Provides the command to install the deck.gl package through npm for usage in JavaScript or React projects. This method requires Node.js and npm installed on the system. It allows integration of deck.gl in modern frontend build pipelines and frameworks like React. Users can then import deck.gl modules directly in their TypeScript or JavaScript code.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n```\n\n----------------------------------------\n\nTITLE: Implementing GridCellLayer in JavaScript\nDESCRIPTION: Example of creating a GridCellLayer in JavaScript to visualize hexagon data with elevation and color based on data values.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/grid-cell-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {GridCellLayer} from '@deck.gl/layers';\n\nconst layer = new GridCellLayer({\n  id: 'GridCellLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/hexagons.json',\n\n  cellSize: 200,\n  extruded: true,\n  elevationScale: 5000,\n  getElevation: d => d.value,\n  getFillColor: d => [48, 128, d.value * 255, 255],\n  getPosition: d => d.centroid,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `height: ${object.value * 5000}m`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: React view transition example with animated camera move\nDESCRIPTION: Uses React hooks to manage view state and animate camera movement between cities upon button clicks with style transitions using FlyToInterpolator. Dependencies include '@deck.gl/react' and '@deck.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapViewState, FlyToInterpolator} from '@deck.gl/core';\n\nconst CITIES: {[name: string]: MapViewState} = {\n  SF: {longitude: -122.4, latitude: 37.8, zoom: 10},\n  NYC: {longitude: -74.0, latitude: 40.7, zoom: 10}\n};\n\nfunction App() {\n  const [initialViewState, setInitialViewState] = useState<MapViewState>(CITIES.SF);\n\n  const flyToCity = useCallback(evt => {\n    setInitialViewState({\n      ...CITIES[evt.target.id],\n      transitionInterpolator: new FlyToInterpolator({speed: 2}),\n      transitionDuration: 'auto'\n    });\n  }, [])\n\n  return <> \n    <DeckGL\n      initialViewState={initialViewState}\n      controller\n    />;\n    {Object.keys(CITIES).map(name => <button id={name} onClick={flyToCity}>{name}</button>)}\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeWidget with deck.gl\nDESCRIPTION: Basic example showing how to instantiate and add a ThemeWidget to a deck.gl instance. The widget allows toggling between light and dark themes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/theme-widget.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {_ThemeWidget as ThemeWidget} from '@deck.gl/widgets';\nimport {Deck} from '@deck.gl/core';\n\nconst deck = new Deck({\n  widgets: [new ThemeWidget()]\n});\n```\n\n----------------------------------------\n\nTITLE: Continuous Color Styling with CartoLayer\nDESCRIPTION: This snippet creates a CartoLayer with continuous color styling. It queries data from Carto DW and styles the layer based on the 'value' column, using predefined color stops and a 'Peach' color palette. The layer visualizes temperature data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/carto_styles.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlayer = pdk.Layer(\n    \"CartoLayer\",\n    data=\"SELECT geom, value FROM cartobq.public_account.temps\",\n    type_=pdkc.MapType.QUERY,\n    connection=pdkc.CartoConnection.CARTO_DW,\n    credentials=pdkc.get_layer_credentials(carto_auth),\n    get_fill_color=pdkc.styles.color_continuous(\n        \"value\", [70, 75, 80, 85, 90, 95, 100], \"Peach\"\n    ),\n    point_radius_min_pixels=2.5,\n    pickable=True,\n)\n\nview_state = pdk.ViewState(latitude=34, longitude=-98, zoom=3)\n\ntooltip = {\n    \"html\": \"<b>Temperature:</b> {value}°F\",\n    \"style\": {\n        \"color\": \"white\",\n    },\n}\n\npdk.Deck(\n    layer, map_style=pdk.map_styles.ROAD, initial_view_state=view_state, tooltip=tooltip\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (npm/yarn)\nDESCRIPTION: Installs the necessary project dependencies listed in the `package.json` file using either the npm or yarn package manager. This step must be completed before attempting to run the development server or build the project.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/mapbox/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Animating pydeck Map Updates Over Time in Python\nDESCRIPTION: Creates an animation effect by updating the map visualization over time. It first ensures the map `r` is displayed using `r.show()`. Then, it iterates through a range of values, updating the `layer.elevation_range` property in each iteration and calling `r.update()` to reflect the change visually. A `time.sleep(0.1)` call introduces a short delay between updates, creating a smooth animation. Requires the `time` module and previously defined `layer` and `r` objects.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/01 - Introduction.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport time\nr.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(0, 10000, 1000):\n    layer.elevation_range = [0, i]\n    r.update()\n    time.sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with WebGLAggregator in TypeScript\nDESCRIPTION: Example implementation of a WebGLAggregator that creates a histogram to calculate weight distribution by position. It demonstrates initialization, attribute setup, and configuration of the aggregator.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/webgl-aggregator.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {WebGLAggregator} from '@deck.gl/aggregation-layers';\n\nconst aggregator = new WebGLAggregator(device, {\n  dimensions: 1,\n  channelCount: 1,\n  bufferLayout: [\n    {name: 'position', format: 'float32'},\n    {name: 'weight', format: 'float32'}\n  ],\n  vs: `\n    uniform float binSize;\n    in float position;\n    in float weight;\n    void getBin(out int binId) {\n      binId = int(floor(position / binSize));\n    }\n    void getValue(out float value) {\n      value = weight;\n    }`\n});\n\nconst position = new Attribute(device, {id: 'position', size: 1});\nposition.setData({value: new Float32Array(...)});\nconst weight = new Attribute(device, {id: 'weight', size: 1});\nposition.setData({value: new Float32Array(...)});\n\naggregator.setProps({\n  pointCount: data.length,\n  binIdRange: [0, 100],\n  operations: ['SUM'],\n  binOptions: {\n    binSize: 1\n  },\n  attributes: {position, weight}\n});\n\naggregator.update();\n```\n\n----------------------------------------\n\nTITLE: Initializing H3ClusterLayer with deck.gl in JavaScript\nDESCRIPTION: Demonstrates creating a deck.gl Deck instance with an H3ClusterLayer, which renders hexagonal geospatial clusters from H3 hexagon indices. The snippet imports core deck.gl modules and defines styling callbacks for fill and stroke colors. Key parameters include the data source URL providing cluster data, visualization options like stroke and line width, and tooltip configuration displaying density information. This snippet requires deck.gl core and geo-layers packages, and assumes access to H3 cluster data formatted with hexIds and mean values.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-cluster-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {H3ClusterLayer} from '@deck.gl/geo-layers';\n\nconst layer = new H3ClusterLayer({\n  id: 'H3ClusterLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.h3clusters.json',\n  \n  stroked: true,\n  getHexagons: d => d.hexIds,\n  getFillColor: d => [255, (1 - d.mean / 500) * 255, 0],\n  getLineColor: [255, 255, 255],\n  lineWidthMinPixels: 2,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `density: ${object.mean}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Image Loading Options in deck.gl Using ImageLoader - TypeScript\nDESCRIPTION: Shows how to override default decoding options for image loading via loaders.gl's ImageLoader within deck.gl. It customizes the createImageBitmap API call by flipping an image vertically using the imageOrientation option. This snippet applies to IconLayer configuration allowing fine control over image processing for performance and visual purposes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IconLayer({\n  iconAtlas: '/path/to/image.png',\n  loadOptions: {\n    imagebitmap: {\n      // Flip the image vertically\n      imageOrientation: 'flipY'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Auto-refreshing Map Data with fetchMap (JavaScript)\nDESCRIPTION: Demonstrates how to implement auto-refreshing of map data using the `autoRefresh` option of `fetchMap`.  It initializes a `Deck` instance, configures `fetchMap` with `autoRefresh` and `onNewData`, and sets the deck's props with the fetched layers. A button is used to stop the auto-refresh.  Dependencies: `@deck.gl/core`, `@deck.gl/carto`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/fetch-map.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst deck = new Deck({canvas: 'deck-canvas'});\nconst mapConfiguration = {\n  autoRefresh: 5,\n  cartoMapId,\n  onNewData: ({layers}) => {\n    deck.setProps({layers});\n  }\n};\n\nconst {initialViewState, layers, stopAutoRefresh} = await fetchMap(mapConfiguration);\ndeck.setProps({controller: true, initialViewState, layers});\n\nbuttonElement.addEventListener('click', () => {\n  stopAutoRefresh();\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Multi-View Deck.gl and Mapbox with Layer Filter (TypeScript)\nDESCRIPTION: This advanced TypeScript example demonstrates using MapboxOverlay to synchronize a Deck.gl MapView with Mapbox and rendering additional non-interactive views (e.g., OrthographicView). A layerFilter callback determines which layers are rendered in each view based on their id. Dependencies include '@deck.gl/mapbox', '@deck.gl/core', and '@deck.gl/layers'. Inputs are multi-view configuration and layers; outputs are deck.gl layers selectively rendered across views, with only one MapView synchronized for interaction.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mapbox/mapbox-overlay.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MapboxOverlay} from '@deck.gl/mapbox';\nimport {Deck, MapView, OrthographicView} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst map = new mapboxgl.Map({...});\n\nconst overlay = new MapboxOverlay({\n  views: [\n    // This view will be synchronized with the base map\n    new MapView({id: 'mapbox'}),\n    // This view will not be interactive\n    new OrthographicView({id: 'widget'})\n  ],\n  layerFilter: ({layer, viewport}) => {\n    const shouldDrawInWidget = layer.id.startsWith('widget');\n    if (viewport.id === 'widget') return shouldDrawInWidget;\n    return !shouldDrawInWidget;\n  },\n  layers: [\n    new ScatterplotLayer({\n      id: 'my-scatterplot',\n      data: [\n        {position: [-74.5, 40], size: 100}\n      ],\n      getPosition: d => d.position,\n      getRadius: d => d.size,\n      getFillColor: [255, 0, 0]\n    }),\n    new ScatterplotLayer({\n      id: 'widget-scatterplot',\n      data: [\n        {position: [0, 0], size: 100}\n      ],\n      getPosition: d => d.position,\n      getRadius: d => d.size,\n      getFillColor: [255, 0, 0]\n    })\n  ]\n});\n\nmap.addControl(overlay);\n```\n\n----------------------------------------\n\nTITLE: Handling Global Picking Events (TypeScript)\nDESCRIPTION: This snippet shows how to handle picking events globally using TypeScript. The code sets `onHover` and `onClick` props on the `Deck` component. These callbacks will respond to hover and click events from any pickable layer, logging the picking information and event details.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {MjolnirEvent} from 'mjolnir.js';\n\nnew Deck({\n  // ...\n  // Callback when the pointer enters or leaves an object in any pickable layer\n  onHover: (info: PickingInfo, event: MjolnirEvent) => console.log('Hovered:', info, event),\n  // Callback when the pointer clicks on an object in any pickable layer\n  onClick: (info: PickingInfo, event: MjolnirEvent) => console.log('Clicked:', info, event)\n})\n```\n\n----------------------------------------\n\nTITLE: Definition of TextLayer with auto character detection and style props\nDESCRIPTION: This snippet illustrates instantiating a TextLayer with 'characterSet' set to 'auto' to automatically detect characters used in the data for optimized rendering. Additional styling props such as 'background', 'outlineWidth', and 'outlineColor' enable flexible text appearance customization, enhancing label readability and visual appeal.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew TextLayer({\n  ...\n  characterSet: 'auto',\n  background: true,\n  backgroundPadding: [2, 2],\n  outlineWidth: 1,\n  outlineColor: [0, 0, 0],\n  getBackgroundColor: [255, 255, 255],\n  getBorderWidth: 1,\n  getBorderColor: [0, 0, 0]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Options in Deck Component with Views in JavaScript\nDESCRIPTION: This example demonstrates how to set up controller options by directly specifying them in the views prop, using a MapView with custom touch and zoom settings.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Deck({\n  // ...\n  views: [\n    new MapView({\n      controller: {touchRotate: true, doubleClickZoom: false}\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basics of shader assembly process using luma.gl assembleShaders\nDESCRIPTION: Illustrates how shaders are processed through luma.gl's assembleShaders function, injecting platform defines, modules, and user shaders. This setup ensures compatibility and platform-specific customization, supporting advanced shader features and modules.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/writing-shaders.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst assembledShaders = assembleShaders(gl, {\n  vs: 'vertex shader source code',\n  fs: 'fragment shader source code',\n  modules: [/* shader modules */],\n  defineFunctions: {\n    /* platform defines and other preprocessor directives */\n  },\n  compileOptions: {/* compilation options */}\n});\n```\n\n----------------------------------------\n\nTITLE: Component Architecture Diagram for ViewState Integration\nDESCRIPTION: Conceptual diagram showing how different controllers and viewports would interact with a unified ViewState class. The diagram illustrates how MapController, FirstPersonController, and OrbitController would all use a common ViewState that feeds into different viewport types.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/view-state-rfc.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  MapController          \\              /  WebMercatorViewport\n                          \\            /\n  FirstPersonController ---  ViewState --- FirstPersonViewport   => Viewport => uniforms\n                          /            \\\n  OrbitController        /              \\  ThirdPersonViewport\n```\n\n----------------------------------------\n\nTITLE: Instantiating PointLight in deck.gl (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a new PointLight instance in deck.gl. It initializes the light with a specific RGB color ([128, 128, 0]), an intensity value of 2.0, and a position at [0, 0, 200]. This light source emits light uniformly in all directions from the specified position.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/point-light.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pointLight= new PointLight({\n  color: [128, 128, 0],\n  intensity: 2.0,\n  position: [0, 0, 200]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating BrushingExtension in JavaScript (Modules)\nDESCRIPTION: Shows how to import the `BrushingExtension` from the `@deck.gl/extensions` package and create a new instance using its constructor within a JavaScript module environment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/brushing-extension.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {BrushingExtension} from '@deck.gl/extensions';\nnew BrushingExtension();\n```\n\n----------------------------------------\n\nTITLE: Creating a ClipExtension Instance (deck.gl global) - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new instance of the ClipExtension when using deck.gl from a pre-bundled script. It assumes that the deck.gl library is available as a global variable named `deck`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/clip-extension.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.ClipExtension();\n```\n\n----------------------------------------\n\nTITLE: Result of Function Conversion using `@@function` (JavaScript)\nDESCRIPTION: Displays the JavaScript object after the `JSONConverter` resolves the `@@function` call. The `getRadius` prop is assigned the result of executing the registered `calculateRadius` function with the provided arguments (e.g., 8).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  layers: [\n    new ScatterplotLayer({\n      data: ...,\n      getColor: [0, 128, 255],\n      getRadius: 8\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Data Generation Function\nDESCRIPTION: This function, `generate_graph_data`, creates a graph with a specified number of nodes and a 3D force layout. While not directly used in the binary transfer example, it illustrates how the example data might be generated using the `networkx` library. It returns a pandas DataFrame containing node positions and group assignments.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/07 - Binary Transport.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef generate_graph_data(num_nodes, random_seed):\n    \"\"\"Generates a graph of 10k nodes with a 3D force layout\n\n    This function is unused but serves as an example of how the data in\n    this visualization was generated\n    \"\"\"\n    import networkx as nx  # noqa\n\n    g = nx.random_internet_as_graph(num_nodes, random_seed)\n    node_positions = nx.fruchterman_reingold_layout(g, dim=3)\n\n    force_layout_df = pd.DataFrame.from_records(node_positions).transpose()\n    force_layout_df[\"group\"] = [d[1][\"type\"] for d in g.nodes.data()]\n    force_layout_df.columns = [\"x\", \"y\", \"z\", \"group\"]\n    return force_layout_df\n```\n\n----------------------------------------\n\nTITLE: Aggregating by Mean using getColorValue (HexagonLayer Example)\nDESCRIPTION: This TypeScript snippet, presented within the GridLayer documentation but showing HexagonLayer code, shows how to calculate the color value of a cell based on the mean of the 'SPACES' field of points within it using the `getColorValue` prop. This method requires CPU aggregation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getColorValue: (points: BikeRack[]) => {\n    // Calculate mean value\n    return points.reduce((sum: number, p: BikeRack) => sum += p.SPACES, 0) / points.length;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting the viewState Property in View Class for deck.gl\nDESCRIPTION: The viewState property allows specifying what view state should be used by a View when rendering, picking, or projecting coordinates. It supports multiple formats including null (default), String, Object with ID, or Object without ID to handle various use cases like sharing view states between views or fixing certain parameters.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.1/view-class-extension-rfc.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n##### `viewState` : String | Object | null\n\nUsed to specify what view state that should be used by this `View` when rendering, picking or projecting coordinates.\n\nThe `viewState` property, while optional, enables a number of use cases:\n\n* Sharing view states between multiple views - If a `View` id is different from the designed view state's id.\n* specify a complete, constant (fixed) view state directly in the view\n* Overriding a partial set of view state properties from a selected view state.\n\n* `null` (default): Will select a view state based on `view.id`, falling back to using the first view state.\n* `String`: Will attempt to match the indicated \tview state.\n* `Object` (with `id` field): if the object contains an `id` field which matches a dynamic view state, the remaining fields will extend the specified dynamic view state.\n* `Object` (with no `id` field): If no `id` is provided, the `View.viewState` object will be used directly as the view state, essentially representing a fixed or constant view state.\n\nNote that specifying both `id` and `viewState` effectively allows the View to modify a view state before using it. This is useful in multiview situations where it enables having one view that fixes some parameters (eg. zoom, pitch and bearing to show an overview map).\n```\n\n----------------------------------------\n\nTITLE: Initializing H3ClusterLayer with deck.gl in TypeScript\nDESCRIPTION: Provides a TypeScript version of deck.gl usage, defining a strongly typed data interface for cluster objects. It creates an H3ClusterLayer with typed accessors for hexagons and styling, enhancing development experience with type safety. The Deck instance is configured similarly to JavaScript, including controller and tooltip functions typed as PickingInfo. Dependencies include deck.gl core and geo-layers, with the data expected to contain 'mean', 'count', and 'hexIds' properties matching the DataType interface.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-cluster-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {} from '@deck.gl/geo-layers';\n\ntype DataType = {\n  mean: number;\n  count: number;\n  hexIds: string[];\n};\n\nconst layer = new H3ClusterLayer<DataType>({\n  id: 'H3ClusterLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.h3clusters.json',\n  \n  stroked: true,\n  getHexagons: (d: DataType) => d.hexIds,\n  getFillColor: (d: DataType) => [255, (1 - d.mean / 500) * 255, 0],\n  getLineColor: [255, 255, 255],\n  lineWidthMinPixels: 2,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<DataType>) => object && `density: ${object.mean}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Filter Values Using Origin Offset in deck.gl DataFilterExtension JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to improve filter precision when using large numeric filter values (e.g., epoch timestamps) with deck.gl's DataFilterExtension. By subtracting a fixed origin timestamp from filter values and ranges, the resulting numbers are smaller and can be accurately represented as 32-bit floats, avoiding the overhead of enabling 64-bit precision. This method reduces error margin without requiring extra attribute slots on the GPU, which might cause hardware limits to be exceeded. The snippet depends on defining the constant ORIGIN_TS representing the fixed reference timestamp, and expects timestamp data within the dataset. It outputs adjusted filter values suitable for GPU upload with improved precision.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetFilterValue: d => d.timestamp - ORIGIN_TS,\nfilterRange: [rangeStart - ORIGIN_TS, rangeEnd - ORIGIN_TS]\n```\n\n----------------------------------------\n\nTITLE: CameraLight Constructor Usage Example in JavaScript\nDESCRIPTION: This snippet shows the constructor usage for the CameraLight class, illustrating how to instantiate it with optional parameters 'color' and 'intensity'. The color parameter accepts an RGB array with a default value of [255, 255, 255], and intensity controls the light's strength with a default of 1.0. This constructor allows configuration of camera-positioned lighting in deck.gl scenes. The output is a reusable CameraLight object configured with the specified properties.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/camera-light.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst cameraLight = new CameraLight({color, intensity});\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating DataFilterExtension (JavaScript ES Modules)\nDESCRIPTION: Illustrates the basic ES module import for `DataFilterExtension` from `@deck.gl/extensions` and shows how to create a new instance, typically added to a layer's `extensions` array.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {DataFilterExtension} from '@deck.gl/extensions';\nnew DataFilterExtension({});\n```\n\n----------------------------------------\n\nTITLE: Initializing S2Layer - React\nDESCRIPTION: This React snippet demonstrates how to integrate the S2Layer within a React component, using the deck.gl library. The example defines a functional component that renders an S2Layer using data, styling, and interaction configuration. It uses the DeckGL component and defines a custom data type.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/s2-layer.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {S2Layer} from '@deck.gl/geo-layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype DataType = {\n  token: string;\n  value: number;\n};\n\nfunction App() {\n  const layer = new S2Layer<DataType>({\n    id: 'S2Layer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.s2cells.json',\n    \n    extruded: true,\n    getS2Token: (d: DataType) => d.token,\n    getFillColor: (d: DataType) => [d.value * 255, (1 - d.value) * 255, (1 - d.value) * 128],\n    getElevation: (d: DataType) => d.value,\n    elevationScale: 1000,\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<DataType>) => object && `${object.token} value: ${object.value}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing DeckGL Views and ViewStates Separately - React - JSX\nDESCRIPTION: Demonstrates the React pattern for managing `deck.gl` views and view states when using the `DeckGL` component. The `views` array can be defined once, while the dynamic `viewStates` object is passed as a separate prop during each render.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/view-class-rfc.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst views = [...];\n\nrender() {\n  <DeckGL\n    views={views}\n    viewStates={{firstPerson: viewState1, map: viewState2}}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining enter/exit animation parameters - JavaScript\nDESCRIPTION: This code snippet illustrates how to define `enter` and `exit` fields within the `transition` prop. These fields allow the user to control the animations per object by substituting the regular accessor to retrieve the 'from' value for enter animation or the 'to' value for exit animation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.1/attribute-transition-rfc.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew Layer({\n  transition: {\n    getColors: {\n      duration: 300,\n      enter: feature => feature.properties.fill.concat(0),\n      exit: feature => feature.properties.fill.concat(0)\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging in luma.gl - JavaScript\nDESCRIPTION: Turns on logging in the luma.gl library and sets its verbosity level for debugging WebGL2/WebGPU rendering. Dependencies include luma.gl being present in the environment; 'luma.log.enable()' activates logging and 'luma.log.level = 2' records comprehensive information about shader uniforms and GPU attributes to the console. Intended for diagnosing issues at the GPU and rendering layer, especially when using deck.gl layers that build on luma.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/debugging.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nluma.log.enable()\nluma.log.level = 2\n```\n\n----------------------------------------\n\nTITLE: Specifying Fixed Frame Coordinates for deck.gl Layers in JavaScript\nDESCRIPTION: This JavaScript example shows how to configure a deck.gl Layer to use fixed frame coordinates (WGS84 Cartesian) by setting the `coordinateSystem` property to the proposed `COORDINATE_SYSTEM.FIXED_FRAME` constant. The `data` array should contain coordinates in this specified system.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/fixed-frame-coordinates-rfc.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nnew Layer({\n  coordinateSystem: COORDINATE_SYSTEM.FIXED_FRAME,\n  data: [...] // coordinates in WGS84 cartesian\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Deck.gl LineLayer Demonstration Component (JavaScript)\nDESCRIPTION: Imports the default export from the local file './line-layer.js' (or similar) and assigns it to the variable 'Demo'. This component is expected to contain the implementation or demonstration of the LineLayer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/line-layer.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './line-layer';\n```\n\n----------------------------------------\n\nTITLE: Optimizing Carto Tile Source Fetching with React useMemo\nDESCRIPTION: This React snippet demonstrates using the `useMemo` hook to cache the result of calling `CartoVectorTableSource`. This approach prevents the TileJSON data from being re-fetched on every component render, significantly improving performance in React applications. The memoized `data` object, which updates only when the `tableName` dependency changes, is then used to configure a `VectorTileLayer`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/carto-v9-rfc.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent(tableName) {\n  const data = useMemo<CartoTilejsonResult>(() => {\n    return CartoVectorTableSource({...globalOptions, tableName});\n  }, [tableName]);\n\n  return new VectorTileLayer({\n    data\n    ...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl via npm in Bash\nDESCRIPTION: This command installs the deck.gl package from the npm registry into a Node.js project directory. It requires Node.js and npm to be installed on the system. Once run, deck.gl becomes available as a dependency for use in JavaScript or React projects. No parameters are needed; subsequent setup may involve importing the library in source files and configuring layers or data as needed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n```\n\n----------------------------------------\n\nTITLE: PointCloudLayer with Geometry Object and Parse (JavaScript)\nDESCRIPTION: This example shows the PointCloudLayer accepting a Geometry-shaped object and making use of loaders.gl for parsing. The `parse` prop is used to enable loaders.gl integration for loading and parsing the LAZ data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/data-loading-rfc.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport {parse, registerLoaders} from '@loaders.gl/core';\nimport {LAZLoader} from '@loaders.gl/las';\nregisterLoaders(LAZLoader);\n\nnew PointCloudLayer({\n  coordinateSystem: COORDINATE_SYSTEM.IDENTITY,\n  data: LAZ_SAMPLE,\n  parse // NEW: See above\n});\n```\n\n----------------------------------------\n\nTITLE: Install pydeck-carto using pip\nDESCRIPTION: This command installs the pydeck-carto package using pip, the Python package installer. It also ensures that the pydeck package is installed as a dependency.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pydeck-carto\n```\n\n----------------------------------------\n\nTITLE: Importing BitmapLayer and its Types (TypeScript)\nDESCRIPTION: This snippet illustrates how to import the BitmapLayer class and its related type definitions (BitmapLayerProps, BitmapLayerPickingInfo) from the @deck.gl/layers module in TypeScript. It also shows how to instantiate a BitmapLayer with generic props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/bitmap-layer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BitmapLayer} from '@deck.gl/layers';\nimport type {BitmapLayerProps, BitmapLayerPickingInfo} from '@deck.gl/layers';\n\nnew BitmapLayer(...props: BitmapLayerProps);\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Properties (TypeScript)\nDESCRIPTION: This code snippet shows how to store numeric properties in typed arrays for better performance. It demonstrates the structure using `numericProps` within `BinaryPointFeature`. The output is a `BinaryPointFeature` object. These numeric properties are stored separately in typed arrays and are defined per-feature. The `population` is used as an example.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ndata.points = {\n  type: 'Point',\n  // positions\n  // featureIds\n  // globalFeatureIds\n  numericProps: {\n    population: {value: Float32Array([value0, value1, ...], size: 1}\n  },\n  // properties\n } as BinaryPointFeature\n```\n\n----------------------------------------\n\nTITLE: Registering a Click Callback Function in a pydeck Layer (Python)\nDESCRIPTION: This example demonstrates how to instantiate a pydeck Layer in Python and register a click event callback along with associated user data. It illustrates the definition of a 'ScreenGridLayer' using a dataframe as input and specifies properties for granularity, coloring, interactivity, and event behavior. The on_click argument receives a callable (function) and user data to be returned on event trigger. The composed pydeck.Deck can then be rendered with interactivity enabled in a Python notebook or web app.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/pydeck-interactive-api-rfc.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport pydeck as pdk\nlayer = pdk.Layer(\n    'ScreenGridLayer',\n    df,\n    cell_size_pixels=20,\n    color_range=COLOR_RANGE,\n    get_position='[lng, lat]',\n    pickable=True,\n    auto_highlight=True,\n    on_click=<callable>,<user_data>)\nr = pdk.Deck(layers=[layer], initial_view_state=viewport)\n```\n\n----------------------------------------\n\nTITLE: Projecting Coordinates with GlobeViewport (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the `project` method of the `GlobeViewport` to convert world coordinates (longitude, latitude) into screen coordinates. It depends on a pre-existing `GlobeViewport` instance.  The output is an array representing the x and y pixel coordinates on the screen.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/globe-viewport.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nviewport.project([-122.45, 37.78]);\n// [300,200]\n```\n\n----------------------------------------\n\nTITLE: Initializing TripsLayer with Deck.gl in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and configure a TripsLayer instance using JavaScript, specifying data URL, accessors for path and timestamps, color, animation parameters such as currentTime and trailLength, and minimum path width. It shows how to instantiate a Deck object with an initial view centered over San Francisco, enabling user interaction and layering the animated TripsLayer. Dependencies include @deck.gl/core and @deck.gl/geo-layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/trips-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {TripsLayer} from '@deck.gl/geo-layers';\n\nconst layer = new TripsLayer({\n  id: 'TripsLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.trips.json',\n  \n  getPath: d => d.waypoints.map(p => p.coordinates),\n  // Timestamp is stored as float32, do not return a long int as it will cause precision loss\n  getTimestamps: d => d.waypoints.map(p => p.timestamp - 1554772579000),\n  getColor: [253, 128, 93],\n  currentTime: 500,\n  trailLength: 600,\n  capRounded: true,\n  jointRounded: true,\n  widthMinPixels: 8\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Deck and Layer with Lighting Effect in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a `Deck` instance and a `GeoJsonLayer` with a specified lighting effect and material. The `effects` prop of the `Deck` instance takes an array of rendering effects, including the `lightingEffect`. The `material` prop of the `GeoJsonLayer` takes a `LightPhongMeterial` object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.0/phong-lighting-rfc.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst deck = new Deck({\n effects: [lightingEffect],\n layers: [\n   new GeoJsonLayer({\n     data: US_MAP_GEOJSON,\n     stroked: true,\n     filled: true,\n     getLineColor: [255, 100, 100],\n     getFillColor: [200, 160, 0, 180],\n     material:phongMeterial\n     }\n   })\n ]});\n```\n\n----------------------------------------\n\nTITLE: Updating Layers with Deck.setProps in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to update deck.gl layers by creating a new Deck instance and updating its props with new layer instances.  It uses `ScatterplotLayer` and `TextLayer` to display flight data fetched from a hypothetical server. The `update` function is called repeatedly using `setTimeout` to simulate real-time data updates.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-layers.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer, TextLayer} from '@deck.gl/layers';\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 8\n  },\n  controller: true\n});\n\nupdate();\n\nasync function update() {\n  // `queryServer` is a hypothetical function that contacts a server to fetch a list of flight locations\n  // in the shape of [{lon: -122.39, lat: 37.62, alt: 1800, callSign: 'SKW 3342'}, ...]\n  const flights = await queryServer({time: Date.now()});\n\n  deckInstance.setProps({\n    layers: [\n      new ScatterplotLayer({\n        id: 'circles',\n        data: flights,\n        getPosition: d => [d.lng, d.lat, d.alt],\n        getFillColor: [255, 0, 0],\n        getRadius: 3,\n        radiusUnits: 'pixels'\n      }),\n      new TextLayer({\n        id: 'labels',\n        data: flights,\n        getText: d => d.callSign,\n        getPosition: d => [d.lon, d.lat, d.alt],\n        getSize: 12\n      })\n    ]\n  });\n\n  // refresh again after 60 seconds\n  setTimeout(update, 60000);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the deck.gl Example (Bash)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn, and then bundle and serve the application locally using vite via the 'npm start' script. These commands are typically run in a terminal within the project directory.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/scenegraph/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Initializing S2Layer - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the initialization of an S2Layer and a Deck instance to visualize S2 cell data.  It fetches data from a URL and configures how the layer renders, including color, elevation, and pickability.  It utilizes the Deck class from '@deck.gl/core' and the S2Layer from '@deck.gl/geo-layers'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/s2-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {S2Layer} from '@deck.gl/geo-layers';\n\nconst layer = new S2Layer({\n  id: 'S2Layer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.s2cells.json',\n  \n  extruded: true,\n  getS2Token: d => d.token,\n  getFillColor: d => [d.value * 255, (1 - d.value) * 255, (1 - d.value) * 128],\n  getElevation: d => d.value,\n  elevationScale: 1000,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `${object.token} value: ${object.value}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Install and Start Examples\nDESCRIPTION: These commands install the project dependencies and start the development server to run the examples. The `yarn start` command is used to run the examples, while `yarn start-local` may be a variation for local development environments.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/mapbox-integration/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn start\n# or\nyarn start-local\n```\n\n----------------------------------------\n\nTITLE: Using Layer Extensions in deck.gl with JavaScript\nDESCRIPTION: This snippet shows how to import and apply multiple layer extensions such as Brushing and DataFilter to a ScatterplotLayer in deck.gl. It demonstrates the use of the new `extensions` property in the base Layer, which accepts an array of LayerExtension instances. Key props related to these extensions, like `enableBrush` and `getFilterValue`, are passed to customize the behavior. This pattern allows on-demand adding or removing of optional functionality without bloating the base layer implementation. It depends on @deck.gl/core, @deck.gl/layers, and @deck.gl/layer-extensions packages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-extension-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {Brushing, DataFilter} from '@deck.gl/layer-extensions';\n\nconst LAYER_EXTENSIONS = [\n  new Brushing(),\n  new DataFilter({size: 2})  // with options\n];\n\nnew Deck({\n  layers: [\n    new ScatterplotLayer({\n      extensions: LAYER_EXTENSIONS,\n      // props for brushing\n      enableBrush: false,\n      // props for filtering\n      getFilterValue: d => [d.time, d.count],\n      filterRange: [1545000000, 1545002000, 10, 20],\n      ...\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating ScreenGridLayer - TypeScript\nDESCRIPTION: This code snippet shows how to import and instantiate the ScreenGridLayer in TypeScript, showcasing its usage with typed data. It imports the ScreenGridLayer and its corresponding properties type definition. It creates a new ScreenGridLayer instance, leveraging type parameters to correctly specify data types. This demonstrates the use of TypeScript interfaces and types with deck.gl layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/screen-grid-layer.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {ScreenGridLayer} from '@deck.gl/aggregation-layers';\nimport type {ScreenGridLayerProps, ScreenGridLayerPickingInfo} from '@deck.gl/aggregation-layers';\n\nnew ScreenGridLayer<DataT>(...props: ScreenGridLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Registering Carto Layer\nDESCRIPTION: This snippet registers the CartoLayer with pydeck-carto, making it available for use.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/carto_styles.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npdkc.register_carto_layer()\n```\n\n----------------------------------------\n\nTITLE: Current Implementation of ScatterplotLayer InstancePositions Calculation\nDESCRIPTION: The current method for calculating instance positions in ScatterplotLayer, which iterates through the entire data array regardless of what has changed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/partial-updates-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n  calculateInstancePositions({value}) {\n    const {data, getPosition} = this.props;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = get(position, 0);\n      value[i++] = get(position, 1);\n      value[i++] = get(position, 2) || 0;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip HTML and CSS in pydeck - Python\nDESCRIPTION: This code snippet shows a minimal definition for a tooltip dictionary in pydeck, specifying custom HTML and simple CSS styling for use in a visualization. The \"html\" key uses the {elevationValue} placeholder, and the \"style\" dictionary alters colors. Only one of \"html\" or \"text\" should be supplied, and variable placeholders correspond to keys in the hovered object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/tooltip.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntooltip = {\n   \"html\": \"<b>Elevation Value:</b> {elevationValue}\",\n   \"style\": {\n        \"backgroundColor\": \"steelblue\",\n        \"color\": \"white\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing required libraries\nDESCRIPTION: This snippet imports the necessary libraries for working with pydeck, pydeck-carto, and Carto authentication.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/carto_styles.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck as pdk\nimport pydeck_carto as pdkc\nfrom carto_auth import CartoAuth\n```\n\n----------------------------------------\n\nTITLE: Handling Drag Events in deck.gl Layers\nDESCRIPTION: This set of optional callback functions (`onDragStart`, `onDrag`, `onDragEnd`) manage user interactions involving dragging objects within a deck.gl layer. They provide hooks to respond to drag lifecycle events with access to picking info and source events, and enable event handling control via return values. These callbacks require `pickable` to be true.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n`onDragStart` function is invoked when dragging starts, receiving `info` and `event`. Return true to prevent event bubbling.\n\n`onDrag` function is called during dragging, providing details and allowing to handle the drag operation.\n\n`onDragEnd` triggers upon release, enabling cleanup or final updates.\n\nAll three require `pickable: true`, and they enhance interactivity by enabling custom drag behaviors.\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and Layer Packages via NPM (Bash)\nDESCRIPTION: This snippet provides bash commands to install deck.gl and its core/layers modules using npm. It guides on installing the full suite or only the required sub-packages. The commands expect a Node.js/npm environment and will install dependencies to package.json. There are no other parameters or outputs beyond installation. Requires npm to be available in the environment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Views with View States in JavaScript\nDESCRIPTION: JavaScript implementation of a deck.gl application with two MapViews: a main view and a minimap. The code manages view state synchronization between the views, where the minimap follows the location of the main view but maintains its own zoom level.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, MapView} from '@deck.gl/core';\n\nlet currentViewState = {\n  main: {\n    longitude: -122.4,\n    latitude: 37.8,\n    pitch: 30,\n    zoom: 12,\n  },\n  minimap: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 8\n  }\n};\n\nfunction onViewStateChange({viewId, viewState}) {\n  if (viewId === 'main') {\n    // When user moves the camera in the first-person view, the minimap should follow\n    currentViewState = {\n      main: viewState,\n      minimap: {\n        ...currentViewStates.minimap,\n        longitude: viewState.longitude,\n        latitude: viewState.latitude\n      }\n    };\n  } else {\n    // Only allow the user to change the zoom in the minimap\n    currentViewState = {\n      main: currentViewStates.main,\n      minimap: {\n        ...currentViewStates.minimap,\n        zoom: viewState.zoom\n      }\n    };\n  }\n  // Apply the new view state\n  deckInstance.setProps({viewState: currentViewState});\n};\n\nconst deckInstance = new Deck({\n  views: [\n    new MapView({id: 'main', controller: true}),\n    new MapView({id: 'minimap', x: 10, y: 10, width: 300, height: 200, controller: true})\n  ],\n  viewState: currentViewState\n  onViewStateChange\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with InfoWidget - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new deck.gl Deck instance and include the experimental InfoWidget in its widgets array. It shows configuration of basic properties like visibility, position, text content, and inline styling. Requires the @deck.gl/core and @deck.gl/widgets modules.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/info-widget.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {_InfoWidget as InfoWidget} from '@deck.gl/widgets';\nimport {Deck} from '@deck.gl/core';\n\nconst deck = new Deck({\n  widgets: [\n    new InfoWidget({\n      visible: true,\n      position: [0.45, 51.47],\n      text: \"Info\",\n      style: {width: 200, boxShadow: 'rgba(0, 0, 0, 0.5) 2px 2px 5px'}\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting the H3 Visualization Example (Shell)\nDESCRIPTION: These shell commands first install the necessary Node.js package dependencies using `npm install`, then start the example application using `npm start`. This assumes Node.js and npm are installed and the commands are run from the project's root directory after copying the example folder contents.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/experimental/h3-grid/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Declarative Layer Masking with DeckGL (JSX)\nDESCRIPTION: This code snippet demonstrates how to define layer masks within a DeckGL component using JSX syntax. It uses PolygonLayer to define masks and ScatterplotLayer/PathOutlineLayer to clip layers based on the defined masks using union and intersection operations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-group-and-operation-rfc.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DeckGL>\n  <PolygonLayer id='mask-1' mask visible={false} .../>\n  <PolygonLayer  id='mask-2' invertMask .../>\n  <ScatterplotLayer clipByUnion={['mask-1', 'mask-2']}>\n  <PathOutlineLayer clipByIntersection={['mask-1', 'mask-2']}>\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Configuring open ranges and dynamic limits in property definitions\nDESCRIPTION: This snippet showcases setting open-ended ranges by omitting max or min values, and introduces dynamic limit support by referencing a variable, such as '#instances', for the max value. It exemplifies how users can specify flexible ranges within the type system, including dynamic dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.3/prop-types-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst defaultProps = {\n  highlightedObjectIndex: {type: 'integer', min: -1, max: '#instances'}\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from CartoLayer to Data Source - Typescript\nDESCRIPTION: This example demonstrates the replacement of `CartoLayer` with a `Data Source` in combination with a standard deck.gl layer in deck.gl v9. It shows how to use `vectorQuerySource` to fetch data from CARTO and pass it to a `VectorTileLayer`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// deck.gl v9\nimport {VectorTileLayer, vectorQuerySource} from '@deck.gl/carto';\nconst data = vectorQuerySource({\n  accessToken: 'XXX',\n  connectionName: 'carto_dw',\n  sqlQuery: 'SELECT * FROM cartobq.testtables.points_10k',\n});\nconst layer = new VectorTileLayer({data, ...styleProps});\n\n// deck.gl v8\nimport {CartoLayer, setDefaultCredentials, MAP_TYPES} from '@deck.gl/carto';\nsetDefaultCredentials({accessToken: 'XXX'});\nconst layer = new CartoLayer({\n  type: MAP_TYPES.QUERY,\n  connection: 'carto_dw',\n  data: 'SELECT * FROM cartobq.testtables.points_10k',\n  ...styleProps\n});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl via NPM\nDESCRIPTION: Provides the command-line instructions for installing the necessary deck.gl packages using the Node Package Manager (npm). Users can either install the monolithic `deck.gl` package or the individual `@deck.gl/core` and `@deck.gl/layers` modules.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers\n```\n\n----------------------------------------\n\nTITLE: Using Overloaded Accessor Props (Alternative Proposed) - deck.gl - JavaScript\nDESCRIPTION: This snippet illustrates the second proposed solution where existing accessor properties (`getRadius`, `getColor`) are overloaded to accept either a function (the traditional accessor) or a constant value directly. This allows setting constant attributes without needing dedicated value props, potentially simplifying the API slightly, but requires layers and the `LayerManager` to handle type checking for these properties. Requires the `deck.gl` library.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.3/constant-accessor-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ScatterplotLayer({\n  radiusScale: 100,\n  getPosition: d => d.position,\n  getRadius: 1,\n  getColor: [255, 200, 0]\n});\n```\n\n----------------------------------------\n\nTITLE: Externally managing view state in JavaScript\nDESCRIPTION: Shows how to maintain the view state outside of deck.gl and synchronize it via the viewState prop, allowing external control and integration with state management libraries like Redux. Dependencies include '@deck.gl/core' and '@deck.gl/react'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\n\nconst deckInstance = new Deck({\n  viewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  controller: true,\n  onViewStateChange: ({viewState}) => {\n    deckInstance.setProps({viewState})\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring DECKGL_FILTER_COLOR Hook in GLSL Vertex Shader\nDESCRIPTION: Declares the standard vertex shader hook `DECKGL_FILTER_COLOR`. This hook allows modification of the color associated with the current vertex after projection calculations, using the VertexGeometry struct for context. The color is expected to be in normalized WebGL color space.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-shader-hook-rfc.md#_snippet_4\n\nLANGUAGE: GLSL\nCODE:\n```\nvoid DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry);\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip Text in pydeck - Python\nDESCRIPTION: This code snippet provides an example of assigning a simple text-based tooltip for a pydeck layer by supplying the \"text\" key only. The template supports variable placeholders and does not apply any HTML or custom style. Use this pattern to show straightforward, non-HTML, dynamically updated text during hover/pick events.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/tooltip.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntooltip = {\n    \"text\": \"Elevation: {elevationValue}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing QuadkeyLayer in TypeScript\nDESCRIPTION: TypeScript implementation of QuadkeyLayer with proper type definitions for data objects and picking info, including color and elevation mapping based on values.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/quadkey-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {QuadkeyLayer} from '@deck.gl/geo-layers';\n\ntype DataType = {\n  quadkey: string;\n  value: number;\n};\n\nconst layer = new QuadkeyLayer<DataType>({\n  id: 'QuadkeyLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.quadkeys.json',\n  \n  extruded: true,\n  getQuadkey: (d: DataType) => d.quadkey,\n  getFillColor: (d: DataType) => [d.value * 128, (1 - d.value) * 255, (1 - d.value) * 255, 180],\n  getElevation: (d: DataType) => d.value,\n  elevationScale: 1000,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<DataType>) => object && `${object.quadkey} value: ${object.value}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Inefficient Incremental Data Loading - React\nDESCRIPTION: This React component shows an inefficient way to perform incremental data loading using deck.gl. It concatenates new data chunks to the `loadedData` state, causing deck.gl to recalculate buffers for the entire dataset on each update. This leads to performance issues when handling large datasets.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const [loadedData, setLoadedData] = useState<DataType[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      let chunk: DataType[];\n      while (chunk = await fetchNextChunk()) {\n        setLoadedData(current => current.concat(chunk));\n      }\n    })();\n  }, []);\n  \n  const layers = [\n    new ScatterplotLayer<DataType>({\n      id: 'points',\n      // If we have 1 million rows loaded and 100,000 new rows arrive,\n      // we end up recalculating the buffers for all 1,100,000 rows\n      data: loadedData,\n      getPosition: (d: DataType) => d.position\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Top-Level Layers (v8.6+) in deck.gl\nDESCRIPTION: Demonstrates the updated `layerFilter` callback implementation introduced in deck.gl v8.6. The callback now only receives top-level layers passed by the application, simplifying filtering logic as direct ID comparison (e.g., `layer.id === 'region'`) is sufficient. Filtering specific nested sublayers now requires different approaches like `_subLayerProps` or `filterSubLayer`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlayerFilter: ({layer, viewport}) => {\n  if (layer.id === 'region') {\n    // everything rendered by the GeoJsonLayer\n    return viewport.id === 'main';\n  }\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Globe Surface\nDESCRIPTION: This code snippet shows how to render a polygon that represents the surface of the earth to prevent the \"see-through\" effect in GlobeView. It creates a `SolidPolygonLayer` with specific coordinates to cover the entire globe and sets the fill color. Dependencies include `SolidPolygonLayer`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/globe-view.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew SolidPolygonLayer({\n  id: 'background',\n  data: [\n    [[-180, 90], [0, 90], [180, 90], [180, -90], [0, -90], [-180, -90]]\n  ],\n  getPolygon: d => d,\n  stroked: false,\n  filled: true,\n  getFillColor: [40, 40, 40]\n})\n```\n\n----------------------------------------\n\nTITLE: Applying PostProcessEffect to Deck.gl\nDESCRIPTION: This snippet demonstrates how to import a luma.gl effect module, create a PostProcessEffect instance with specific properties, and add it to the `effects` array of a deck.gl `Deck` instance. This applies the screen-space effect to all rendered layers. Requires `@luma.gl/effects` and `@deck.gl/core` dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/post-process-effect.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {brightnessContrast} from '@luma.gl/effects';\nimport {PostProcessEffect} from '@deck.gl/core';\n\nconst postProcessEffect = new PostProcessEffect(brightnessContrast, {\n  brightness: 1.0,\n  contrast: 1.0\n});\n\nconst deckgl = new Deck({\n  canvas: 'my-deck-canvas',\n  initialViewState,\n  controller: true,\n  // add effect to deck\n  effects: [postProcessEffect],\n  layers: [new GeoJsonLayer({\n    // ... layer props\n  })]\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing prop comparison for short color arrays\nDESCRIPTION: This example demonstrates defining color properties with specific type markers such as 'color-rgba' to enable optimized deep comparisons, especially for small arrays like colors. It aims to reduce unnecessary updates by leveraging knowledge of array short-circuit comparisons.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.3/prop-types-rfc.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst defaultProps = {\n  color: {type: 'color-rgba', ... }\n};\n```\n\n----------------------------------------\n\nTITLE: Post-Processing Effects with DeckGL Views\nDESCRIPTION: This code snippet demonstrates how to apply post-processing effects to a DeckGL view using luma.gl's post-processing passes.  The `postprocessing` prop of the `View` component accepts an array of post-processing effect instances.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-group-and-operation-rfc.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<View postprocessing={[new FilmPass(), new OutlinePass(), new DotScreenPass(), ...]}/>\n```\n\n----------------------------------------\n\nTITLE: Importing QuadbinTileLayer in JavaScript\nDESCRIPTION: Shows the basic ES6 import statement for using QuadbinTileLayer in a JavaScript project when installed via NPM. It also includes a minimal instantiation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/quadbin-tile-layer.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {QuadbinTileLayer} from '@deck.gl/carto';\nnew QuadbinTileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Updating resources in DataManager\nDESCRIPTION: Demonstrates how to update existing resources in the DataManager using both declarative and imperative approaches, including removing resources that are no longer needed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/data-manager-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// declarative\n<DeckGL\n  resources={{\n    // `airports` is removed because it is no longer referenced\n    'interleaved-pointcloud-date': float32Array.slice()  // a shalow change is required to signal updates\n  }} />\n\n// imperative\ndeck.addResources({\n  'interleaved-pointcloud-date': float32Array\n}, {\n  update: true // indicate that the data has been mutated\n});\ndeck.removeResources('airports');\n```\n\n----------------------------------------\n\nTITLE: Definition and Purpose of the View Class in deck.gl\nDESCRIPTION: The View class serves as a descriptor for individual viewports, representing a window or perspective into your data, with properties such as 'id', 'type', 'x', 'y', 'width', and 'height'. It utilizes CSS coordinate systems and supports relative sizing, enabling flexible layout and multi-view rendering in deck.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/view-class-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n> Note: `View` class instances use the \"CSS\" (top-left, window, non-device-pixel) coordinate system to interpret `x`,`y`, `width` and `height` properties and automatically convert to WebGL (`gl.viewport`) coordinates under the hood.\n\n* `type` (`Viewport` subclass, default `Viewport`) - Can be any existing `Viewport` class type...\n* viewport specific params?\n* `id` - (String) - for filtering and child component layout\n* `x` - (Number|String, default 0)\n* `y` - (Number|String, default 0)\n* `width` - (Number|String, default `100%`)\n* `height` - (Number|String, default `100%`)\n* `layerFilter({layer, view, isPicking})` - Similar to the `layerFilter` on the main DeckGL class, this filter allows control of which layers are rendered in this viewport.\n* `onBeforeRender({gl, view, ...})` - called just before this view is rendered\n* `onAfterRender({gl, view, ...})` - called just before this view is rendered\n```\n\n----------------------------------------\n\nTITLE: Using deck.gl with pre-bundled scripts\nDESCRIPTION: This code demonstrates how to include deck.gl in a web page using pre-built JavaScript bundles.  It provides the necessary `<script>` tags to include the core and layers, or a combined version of the library.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/point-cloud-layer.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Instantiating SimpleMeshLayer from Bundled Scripts (JavaScript)\nDESCRIPTION: When using deck.gl via pre-bundled scripts, this snippet shows how to access and instantiate the SimpleMeshLayer from the global 'deck' object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/simple-mesh-layer.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nnew deck.SimpleMeshLayer({});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl dependencies - Bash\nDESCRIPTION: This snippet shows how to install deck.gl and its extensions using npm. It provides two alternative commands to install either the core deck.gl library or specific modules like @deck.gl/core and @deck.gl/extensions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/clip-extension.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/extensions\n```\n\n----------------------------------------\n\nTITLE: Enabling pydeck in JupyterLab (Bash)\nDESCRIPTION: This snippet installs required JupyterLab extensions to enable pydeck visualizations. It installs the widget manager and the compatible version of the @deck.gl/jupyter-widget labextension determined dynamically using the pydeck Python package’s frontend semantic version constant. These steps ensure interactive visualizations work within JupyterLab on Mac/Unix-like systems.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/installation.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njupyter labextension install @jupyter-widgets/jupyterlab-manager\nDECKGL_SEMVER=`python -c \"import pydeck; print(pydeck.frontend_semver.DECKGL_SEMVER)\"`\njupyter labextension install @deck.gl/jupyter-widget@$DECKGL_SEMVER\n```\n\n----------------------------------------\n\nTITLE: Constructing DeckLayer Instance JavaScript\nDESCRIPTION: This snippet illustrates the basic syntax for creating a new instance of the `DeckLayer` class. It indicates that the constructor accepts a `props` object, which can include properties inherited from `esri-layers-Layer` and properties prefixed with `deck.` which are forwarded to the internal Deck instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/arcgis/deck-layer.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew DeckLayer(props);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Chunked Data Structure with TypedArrays in JavaScript\nDESCRIPTION: This example shows a chunked data structure using JavaScript objects where each object represents a chunk. Within each chunk, columns are represented by TypedArrays (e.g., `Int32Array`, `Float32Array`). This columnar chunking mirrors structures found in binary formats like Apache Arrow.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/chunked-data-support-rfc.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n[\n  {\n    value: new Int32Array([1, 2]),\n    time: new Float32Array([1.00, 1.10])\n  },\n  {\n    value: new Int32Array([3, 4]),\n    ...\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing and initializing MVTLayer in TypeScript\nDESCRIPTION: TypeScript import statements for MVTLayer with type definitions for props and picking info, and example of layer initialization with generic type parameter.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/mvt-layer.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport type {MVTLayerProps, MVTLayerPickingInfo} from '@deck.gl/geo-layers';\n\nnew MVTLayer<FeaturePropertiesT>(...props: MVTLayerProps<FeaturePropertiesT>[]);\n```\n\n----------------------------------------\n\nTITLE: Rendering DeckGL with Multi-View and StaticMap Using JSX Props - React JSX\nDESCRIPTION: Demonstrates rendering a DeckGL component with layers, a single MapView, explicit multi-view setup, and controlled view state using the older prop-passing pattern. It shows how the StaticMap child component receives dynamic width, height, and view state properties, along with an event handler for updating the view state. Dependencies include React, deck.gl, react-map-gl components like StaticMap, and MapController. Key parameters include \"layers\", \"views\", \"viewState\", and \"onViewStateChange\". The snippet highlights issues with prop overriding and the need for the non-standard \"viewId\" prop for linkage.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/react-api-rfc.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DeckGL\n  layers={layers}\n  views={new MapView({id: 'map', controller: MapController})}\n  {...this.state.viewState}\n  onViewStateChange={({viewState}) => this.setState({viewState})}\n>\n  <StaticMap\n    viewId=\"map\"\n    {...this.state.viewState}\n    mapStyle={mapStyle}\n    mapboxApiAccessToken={mapboxApiAccessToken}\n  />\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Setup and Run deck.gl CollisionFilterExtension Example - Bash\nDESCRIPTION: These commands show how to install the necessary project dependencies using npm or yarn and then bundle and serve the application using npm start (presumably linked to a vite command as mentioned in the surrounding text).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/collision-filter/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating LinearInterpolator in deck.gl (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the LinearInterpolator class from the '@deck.gl/core' package and instantiate it with custom transition properties. The constructor accepts an options object, where 'transitionProps' specifies which properties to interpolate, defaulting to ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'] if not provided. Additional parameters include 'around' (a point to anchor the transition) and 'makeViewport' (required if 'around' is used) to customize viewport creation. The instance enables smooth view state transitions in deck.gl applications.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/linear-interpolator.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {LinearInterpolator} from '@deck.gl/core';\n\nnew LinearInterpolator({transitionProps: ['target', 'zoom']});\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Parameters per Layer in deck.gl (JS)\nDESCRIPTION: Demonstrates setting GPU parameters, specifically `depthTest`, for a deck.gl layer using the `parameters` prop. This allows fine-grained control over rendering states like depth testing, which can be disabled (set to `false`) to potentially mitigate z-fighting issues when 3D geometry isn't the primary focus.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/tips-and-tricks.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst layer = new ScatterplotLayer({\n  ...,\n  parameters: {depthTest: false}\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nnew ...Layer({\n  ...,\n  parameters: {\n    depthTest: false\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and aggregation layers - npm and script tags\nDESCRIPTION: Provides instructions on how to install deck.gl dependencies using npm or by including pre-bundled scripts via script tags in HTML files. The npm install command shows installing both `deck.gl` as well as individual modules to minimize the bundle size. The script tag examples provide URLs for CDN-hosted files for core, layers, and aggregation layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/screen-grid-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/aggregation-layers\n```\n\n----------------------------------------\n\nTITLE: Rendering VectorTileLayer with CARTO Color Bins Style in Python\nDESCRIPTION: This snippet demonstrates how to authenticate with CARTO, register CARTO layers in pydeck, and create a VectorTileLayer using the color_bins style to classify a continuous attribute ('pct_higher_ed') into discrete color bins. Dependencies include pydeck, pydeck_carto, and carto_auth modules. The data source is a vector tile query with SQL to select geographic and attribute data. Key parameters are the color_bins breaks and color scheme 'PinkYl'. The output is a pydeck Deck visualization showing fill colors corresponding to education percentage bins with tooltips. Limitations include requiring a valid CARTO OAuth authentication and that the data attribute must be numeric for binning.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/styles.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck as pdk\nimport pydeck_carto as pdkc\nfrom carto_auth import CartoAuth\n\n# Authentication with CARTO\ncarto_auth = CartoAuth.from_oauth()\n\n# Register CARTO layers in pydeck\npdkc.register_layers()\n\n# Create CARTO data source\ndata = pdkc.sources.vector_query_source(\n    access_token=carto_auth.get_access_token(),\n    api_base_url=carto_auth.get_api_base_url(),\n    connection_name=\"carto_dw\",\n    sql_query=\"SELECT geom, pct_higher_ed FROM `cartobq.public_account.higher_edu_by_county`\",\n)\n\n# Render CartoLayer in pydeck with color bins style\nlayer = pdk.Layer(\n    \"VectorTileLayer\",\n    data=data,\n    get_fill_color=pdkc.styles.color_bins(\"pct_higher_ed\", [0, 20, 30, 40, 50, 60, 70], \"PinkYl\"),\n    get_line_color=[0, 0, 0, 100],\n    line_width_min_pixels=0.5,\n    pickable=True,\n)\n\nview_state = pdk.ViewState(latitude=38, longitude=-98, zoom=3)\ntooltip={\"text\": \"Higher education percentage: {pct_higher_ed} %\"}\npdk.Deck(layer, map_style=pdk.map_styles.ROAD, initial_view_state=view_state, tooltip=tooltip)\n```\n\n----------------------------------------\n\nTITLE: Mapping Properties in Composite Layer in JavaScript\nDESCRIPTION: Implementation of renderLayers method that maps the parent layer's properties to the appropriate properties of each sublayer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/composite-layers.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass LabeledIconLayer extends CompositeLayer {\n  renderLayers() {\n    return [\n      // the icons\n      new IconLayer({\n        id: `${this.props.id}-icon`,\n        data: this.props.data,\n\n        iconAtlas: this.props.iconAtlas,\n        iconMapping: this.props.iconMapping,\n\n        getPosition: this.props.getPosition,\n        getIcon: this.props.getIcon,\n        getSize: this.props.getIconSize,\n        getColor: this.props.getIconColor\n      }),\n      // the labels\n      new TextLayer({\n        id: `${this.props.id}-label`,\n        data: this.props.data,\n\n        fontFamily: this.props.fontFamily,\n        fontWeight: this.props.fontWeight,\n\n        getPosition: this.props.getPosition,\n        getText: this.props.getText,\n        getSize: this.props.getTextSize\n        getColor: this.props.getTextColor\n      })\n    ];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including pre-bundled deck.gl scripts via CDN\nDESCRIPTION: These HTML script tags show how to include deck.gl libraries directly from a CDN using pre-bundled scripts, offering an alternative to using a package manager.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/heatmap-layer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/aggregation-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating an Orthographic View in deck.gl - TypeScript\nDESCRIPTION: This TypeScript snippet is similar to the JavaScript version but leverages type safety features. After importing the required classes from @deck.gl/core, it creates a Deck instance with a single OrthographicView for 2D info-vis visualization. Prerequisites include installing @deck.gl/core and setting up an environment capable of TypeScript compilation. Substitute the '...' region with necessary Deck configuration such as layers and data sources. Returns a type-safe Deck instance for top-down visualizations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, OrthographicView} from '@deck.gl/core';\n\nconst deck = new Deck({\n  // ...\n  views: new OrthographicView()\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Constants for `@@#` Lookup (JavaScript)\nDESCRIPTION: Configures the `JSONConverter` by importing a constant (`MapController` from `@deck.gl/core`) and registering it under the `constants` key. This enables referencing it in JSON using the `@@#` prefix.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {MapController} from '@deck.gl/core';\n\nconst configuration = {\n  ...\n  constants: {\n    MapController\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Including Deck.gl via Bundled Scripts (HTML)\nDESCRIPTION: This HTML snippet shows how to include deck.gl and the mesh-layers module using pre-bundled scripts from a CDN, providing an alternative to module installation via npm.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/simple-mesh-layer.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/mesh-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining a Component Registration Configuration Object using JavaScript\nDESCRIPTION: This snippet shows an example configuration object for registering JavaScript classes with optional prop type metadata, enabling their hydration from JSON or other declarative descriptions. It demonstrates mapping class constructors and optionally defining prop types for untyped classes to facilitate type forwarding in binding layers. This configuration enables component authors to expose JS classes to environments like Python or Jupyter notebooks by providing standardized type information alongside class references. Dependencies include having the classes defined and accessible in scope. The input is a JSON-like config describing classes and their prop types, while the output is a structured object consumed by the wrapping library for instantiation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/json-component-wrapping-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst configuration = {\n  classes: {\n    MyClassThatAlreadyHasTypes,\n    MyUntypedClass: {\n      type: MyUntypedClass,\n      propTypes: {\n        value: {type: 'integer'}\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: This command installs the dependencies listed in the package.json file of the current directory (the example directory). It uses npm to fetch and install the required packages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Rendering CARTO Demo Component Using Docusaurus BrowserOnly in JavaScript\nDESCRIPTION: Imports the BrowserOnly component from Docusaurus and a Demo component from a local 'carto' module, then uses BrowserOnly to render the Demo component only on the client side. This prevents server-side rendering errors by ensuring the Demo component is loaded exclusively in the browser environment. The snippet requires React and Docusaurus dependencies, where BrowserOnly is critical for client-only rendering.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/carto.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BrowserOnly from '@docusaurus/BrowserOnly';\nimport Demo from './carto';\n\n<BrowserOnly>{() => <Demo/>}</BrowserOnly>\n```\n\n----------------------------------------\n\nTITLE: Instantiating HeatmapLayer from bundled script (JavaScript)\nDESCRIPTION: This simple JavaScript snippet demonstrates how to create a HeatmapLayer instance when using the pre-bundled deck.gl scripts included via CDN.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/heatmap-layer.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nnew deck.HeatmapLayer({});\n```\n\n----------------------------------------\n\nTITLE: Initializing PointCloudLayer with METER_OFFSETS\nDESCRIPTION: This code snippet initializes a PointCloudLayer with the COORDINATE_SYSTEM.METER_OFFSETS coordinate system.  It sets the coordinateOrigin to a specific longitude, latitude, and altitude, and provides data with position offsets in meters relative to this origin.  It imports necessary modules and configures the layer for rendering point clouds using meter offsets.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/coordinate-systems.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\n\nnew PointCloudLayer({\n  coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n  coordinateOrigin: [-122.4004935, 37.7900486, 0],  // anchor point in longitude/latitude/altitude\n  data: [\n    {position: [33.22, 109.87, 1.455]}, // offsets from the coordinate origin in meters\n  ],\n  getPosition: d => d.position,\n  pointSize: 2\n})\n```\n\n----------------------------------------\n\nTITLE: Plotting LIDAR Point Cloud Using Pydeck in Python\nDESCRIPTION: This snippet creates and configures a Pydeck PointCloudLayer to visualize scaled LIDAR points, increasing the z-axis size by a factor of 10 to enhance depth perception. It sets static normal vectors and coloring with opacity. The view state is computed to center on the data with customized pitch, bearing, and maximum pitch values. The snippet initializes a Pydeck Deck instance without a base map (map_provider=None) and renders the visualization. It requires the pydeck library and the transformed LIDAR DataFrame as input.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/04 - Plotting massive data sets.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck as pdk\n\n\npoint_cloud = pdk.Layer(\n    'PointCloudLayer',\n    lidar[['x', 'y', 'z']],\n    get_position=['x', 'y', 'z * 10'],\n    get_normal=[0, 0, 1],\n    get_color=[255, 0, 100, 200],\n    pickable=True,  \n    auto_highlight=True,\n    point_size=1)\n\n\nview_state = pdk.data_utils.compute_view(lidar[['x', 'y']], 0.9)\nview_state.max_pitch = 360\nview_state.pitch = 80\nview_state.bearing = 120\n\nr = pdk.Deck(\n    point_cloud,\n    initial_view_state=view_state,\n    map_provider=None,\n)\nr.show()\n```\n\n----------------------------------------\n\nTITLE: Creating DataFilterExtension via CDN Global - JavaScript\nDESCRIPTION: This JavaScript snippet creates a new instance of the DataFilterExtension using the global deck object, as provided by the CDN script. It should be run in a browser environment after loading deck.gl via CDN. Assumes that <script> tags for deck.gl and its extensions have already been included.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/overview.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.DataFilterExtension({});\n```\n\n----------------------------------------\n\nTITLE: Using PathStyleExtension with PolygonLayer\nDESCRIPTION: This snippet demonstrates how to integrate the PathStyleExtension with a PolygonLayer in deck.gl. It showcases the usage of `getDashArray`, `dashJustified`, `dashGapPickable`, and passing the extension to the layer. The `data` variable is assumed to hold the polygon data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/path-style-extension.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {PolygonLayer} from '@deck.gl/layers';\nimport {PathStyleExtension} from '@deck.gl/extensions';\n\nconst layer = new PolygonLayer({\n  id: 'polygon-layer',\n  data,\n  ...\n  getDashArray: [3, 2],\n  dashJustified: true,\n  dashGapPickable: true,\n  extensions: [new PathStyleExtension({dash: true})]\n});\n```\n\n----------------------------------------\n\nTITLE: Async Iterables for Incremental Loading - TypeScript\nDESCRIPTION: This TypeScript code demonstrates using async iterables for efficient incremental data loading in deck.gl. It creates an async generator function that yields data chunks, allowing deck.gl to update only the sub-buffers for new rows. This approach leverages deck.gl's support for async iterables, introduced in v7.2.0.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n// Create an async iterable\nasync function* getData() {\n  let chunk: DataType[];\n  while (chunk = await fetchNextChunk()) {\n    yield chunk;\n  }\n}\n\nfunction render() {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      id: 'points',\n      // When a new chunk arrives, deck.gl only updates the sub buffers for the new rows\n      data: getData(),\n      getPosition: (d: DataType) => d.position\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Picking with ScatterplotLayer (JavaScript)\nDESCRIPTION: This snippet demonstrates enabling picking for a ScatterplotLayer in JavaScript. It sets the `pickable` prop to `true` to enable picking and defines `onHover` and `onClick` callbacks to handle hover and click events, respectively. The callbacks log information about the picked object and the event.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst layer = new ScatterplotLayer({\n  data: [\n    {position: [-122.45, 37.78]}\n  ],\n  getPosition: d => d.position,\n  getRadius: 1000,\n  getFillColor: [255, 255, 0],\n  // Required to enable picking\n  pickable: true\n  // Callback when the pointer enters or leaves an object\n  onHover: (info, event) => console.log('Hovered:', info, event),\n  // Callback when the pointer clicks on an object\n  onClick: (info, event) => console.log('Clicked:', info, event)\n});\n```\n\n----------------------------------------\n\nTITLE: Registering CARTO Layers and initializing a CARTO Data Source in Python\nDESCRIPTION: This code snippet demonstrates how to register CARTO layers in pydeck, authenticate with CARTO, create a data source using `vector_query_source`, and render the layer in pydeck. It utilizes the `pydeck_carto` library to connect to CARTO and query data. It uses an example dataset `world_airports` and visualizes it with a `VectorTileLayer`. Dependencies are `pydeck`, `pydeck_carto`, and `carto_auth`.  The output is a pydeck `Deck` object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/layers.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck as pdk\nimport pydeck_carto as pdkc\nfrom carto_auth import CartoAuth\n\n# Authentication with CARTO\ncarto_auth = CartoAuth.from_oauth()\n\n# Register CARTO layers in pydeck\npdkc.register_layers()\n\n# Create CARTO data source\ndata = pdkc.sources.vector_query_source(\n    access_token=carto_auth.get_access_token(),\n    api_base_url=carto_auth.get_api_base_url(),\n    connection_name=\"carto_dw\",\n    sql_query=\"SELECT geom, name FROM carto-demo-data.demo_tables.world_airports\",\n)\n\n# Render CARTO layer in pydeck\nlayer = pdk.Layer(\n    \"VectorTileLayer\",\n    data=data,\n    get_fill_color=[238, 77, 90],\n    point_radius_min_pixels=2.5,\n    pickable=True,\n)\n\nview_state = pdk.ViewState(latitude=0, longitude=0, zoom=1)\ntooltip={\"html\": \"<b>Name:</b> {name}\", \"style\": {\"color\": \"white\"}}\npdk.Deck(layer, map_style=pdk.map_styles.ROAD, initial_view_state=view_state, tooltip=tooltip)\n```\n\n----------------------------------------\n\nTITLE: Alternative OrbitView configuration with controller options\nDESCRIPTION: An equivalent alternative approach to configure OrbitController by passing controller options directly to the OrbitView instance, rather than to the Deck instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/orbit-controller.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, OrbitView} from '@deck.gl/core';\n\nnew Deck({\n  views: new OrbitView({\n    controller: {dragPan: false,  inertia: true}\n  }),\n  initialViewState: viewState\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing SSAO Effect in Deck.gl - JavaScript\nDESCRIPTION: This snippet demonstrates the initialization and integration of the SSAO effect within a deck.gl application.  It initializes an `SSAOEffect` object and then configures a `Deck` instance to use this effect.  The `effects` prop of the `Deck` component is set to an array containing the `ssaoEffect` instance. The example also includes a `SolidPolygonLayer` with its parameters.  Dependencies include deck.gl and the SSAO effect implementation. The output is a rendered scene with SSAO applied.  This example has the limitation that SSAO is only applied to 3D layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/SSAO-effect-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ssaoEffect = new SSAOEffect();\nconst deckgl = new Deck({\n  canvas: 'my-deck-canvas',\n  effects: [ssaoEffect],\n  layers: [\n\t  // building layer\n\t  new SolidPolygonLayer({\n      ...})]\n});\n```\n\n----------------------------------------\n\nTITLE: Generating DeepZoom Pyramid with libvips\nDESCRIPTION: This snippet shows a command-line operation that creates a DeepZoom image pyramid using the libvips library. The input is a TIFF image file, and the output is a directory containing the DeepZoom pyramid structure. Key parameters include `--tile-size` which determines the tile dimensions and `--overlap` specifying the overlap between adjacent tiles. libvips must be installed to use this command.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/image-tile/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvips dzsave wac_nearside.tif moon.image --tile-size 512 --overlap 0\n```\n\n----------------------------------------\n\nTITLE: Enabling attribute transition in attributeManager - JavaScript\nDESCRIPTION: This code snippet shows how to define attributes with and without transition enabled using the `attributeManager` in deck.gl. The `transition: true` flag enables smooth interpolation when the attribute values are updated.  This is done within a deck.gl layer class definition.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.1/attribute-transition-rfc.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.state.attributeManager.add({\n  // Transition disabled\n  pickingColors: {size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors},\n  // Transition enabled\n  positions: {size: 3, accessor: 'getPosition', update: this.calculatePositions, transition: true},\n  colors: {size: 4, type: GL.UNSIGNED_BYTE, accessor: 'getColor', update: this.calculateColors, transition: true}\n});\n```\n\n----------------------------------------\n\nTITLE: Stateless Render Callback Pattern for DeckGL with StaticMap - React JSX\nDESCRIPTION: Illustrates the proposed stateless usage of the DeckGL component where children are passed as render callbacks receiving dynamic viewport parameters such as width, height, viewState, and viewport. It avoids the need for a viewId prop and facilitates direct render control and re-rendering tied to view state changes, promoting better compatibility with React's rendering cycle. Dependencies include React, deck.gl, StaticMap component, MapController, and state management via this.state.viewState. The onViewStateChange callback updates the view state externally as part of the React component's state.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/react-api-rfc.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DeckGL\n  layers={layers}\n  viewState={this.state.viewState}\n  onViewStateChange={({viewState}) => this.setState({viewState})}\n  controller={MapController}\n>\n  {({width, height, viewState, viewport}) => <StaticMap\n    width={width}\n    height={height}\n    viewState={this.state.viewState}\n    mapStyle={mapStyle}\n    mapboxApiAccessToken={mapboxApiAccessToken}\n  />}\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Importing Demo component in JavaScript for Deck.gl visualization\nDESCRIPTION: This snippet imports the Demo component from the local 'plot' module for use in a Deck.gl visualization setup. It then renders the Demo component within the page. Dependencies include React and the local 'plot' module, which should export a React component. Inputs are minimal, mainly rendering the Demo component. The output is the visualization rendered on the page.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/plot.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './plot';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Converting Arrow Predicates to GLSL in deck.gl\nDESCRIPTION: Example code showing how Apache Arrow data frame predicates could be converted to GLSL functions for GPU filtering. The code demonstrates mapping Arrow schema to GPU attributes and converting various predicate types (equality, greater than, less than, logical operations) to GLSL expressions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/gpu-data-frame-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {predicate} from 'apache-arrow';\n\nfunction mapArrowSchemaToGPUAttributes(schema) {\n  const gpuSchema = {};\n  for (const field of schema.fields) {\n    console.log(field);\n\n    switch (field.type) {\n    case Int:\n      break;\n    case Float:\n      break;\n    case Bool:\n      break;\n    case Date:\n      break;\n    }\n  }\n}\n\nfunction convertPredicateToGLSL(arrowPredicate, gpuSchema) {\n  const {left, right} = convertBinaryPredicateComponentsToGLSL(arrowPredicate, gpuSchema);\n  switch (arrowPredicate) {\n\n  // Comparisons\n  case predicate.Eq:\n    // == Does not work well for Floats, but maybe OK as JS would have same issue?\n    return `(${left} == ${right})`;\n  case predicate.GTeq:\n    return `(${left} >= ${right})`;\n  case predicate.LTeq:\n    return `(${left} <= ${right})`;\n\n  case predicate.And:\n    return `(${left} && ${right})`;\n  case predicate.Or:\n    return `(${left} || ${right})`;\n  case predicate.Not:\n    const expression = convertPredicateToGLSL(arrowPredicate.l, gpuSchema);\n    return `(!${expression})`;\n\n  case predicate.Col:\n    const attribute = gpuSchema.getColumnAttribute(arrowPredicate.name);\n    return attribute.name;\n\n  case predicate.Literal:\n    return convertLiteralToGLSL(arrowPredicate, gpuSchema);\n\n  // case predicate.Value:\n  //   return convertLiteralToGLSL(attribute, gpuSchema);\n\n  case predicate.Custom:\n    // TODO - support custom GLSL predicates\n    throw new Error('Cant convert custom predicates to GLSL');\n\n  default:\n    throw new Error('Unknown Arrow predicate');\n  }\n}\n\nfunction convertBinaryPredicateComponentsToGLSL(arrowPredicate, gpuSchema) {\n  return {\n    left: arrowPredicate.left && convertPredicateToGLSL(arrowPredicate.left, gpuSchema),\n    right: arrowPredicate.right && convertPredicateToGLSL(arrowPredicate.right, gpuSchema)\n  };\n}\n\nfunction convertLiteralToGLSL(arrowPredicate) {\n  // TBA\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Viewport with pydeck in Python\nDESCRIPTION: This snippet uses pydeck's `compute_view` utility to automatically generate a viewport that fits the data. The `compute_view` function calculates the view state (zoom, center) based on the provided point data and a view proportion. The resulting viewport is then used to initialize a `Deck` object. It depends on the `pydeck` library, and requires a DataFrame with 'lng' and 'lat' columns.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/02 - Scatterplots.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nviewport = pdk.data_utils.compute_view(points=df[['lng', 'lat']], view_proportion=0.9)\nauto_zoom_map = pdk.Deck(layers=[], initial_view_state=viewport)\nauto_zoom_map.show()\n```\n\n----------------------------------------\n\nTITLE: Querying and Rendering CARTO Layers with SQL in Python\nDESCRIPTION: This code snippet showcases how to query data from a BigQuery connection using a more complex SQL query. It specifies a query that intersects geometries. It then renders the data using a `VectorTileLayer`, similar to the previous example. The `carto_auth` object is assumed to be pre-authenticated. The output is a pydeck `Deck` object. Dependencies include `pydeck`, `pydeck_carto`, and `carto_auth`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/layers.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# SQL query from a BigQuery connection\ndata = pdkc.sources.vector_query_source(\n    access_token=carto_auth.get_access_token(),\n    api_base_url=carto_auth.get_api_base_url(),\n    connection_name=\"carto_dw\",\n    sql_query=\"\"\"\n        SELECT a.geom, a.name\n        FROM `carto-demo-data.demo_tables.world_airports` AS a,\n             `carto-do-public-data.natural_earth.geography_glo_admin0countries_410` AS g\n        WHERE g.ADMIN = 'Spain' AND\n              ST_INTERSECTS(a.geom, g.geom)\n    \"\"\",\n)\n\n# Render CARTO layer in pydeck\nlayer = pdk.Layer(\n    \"VectorTileLayer\",\n    data=data,\n    get_fill_color=[238, 77, 90],\n    point_radius_min_pixels=2.5,\n    pickable=True,\n)\n\nview_state = pdk.ViewState(latitude=36, longitude=-7.44, zoom=4)\ntooltip = {\"html\": \"<b>Name:</b> {name}\", \"style\": {\"color\": \"white\"}}\npdk.Deck(layer, map_style=pdk.map_styles.ROAD, initial_view_state=view_state, tooltip=tooltip)\n```\n\n----------------------------------------\n\nTITLE: Proposed Helper Methods for Non-Instanced Attributes\nDESCRIPTION: Two additional helper methods to support partial updates for non-instanced attributes, handling variable vertex counts per object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/partial-updates-rfc.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n   // Called on each object to \"size up\" array before allocation\n   // Normally only called when new data is supplied, but is also\n   // called every time a data range is provided\n   getVertexCount(index, object) {\n        return this.state.paths[index].length;\n   }\n   // Called on each object to fill in the verts for that object\n   // for one attribute\n   // Will be called for all objects or just for some\n   getStartPositions({index, object, value, offset}) {\n      const numSegments = object.length - 1;\n      for (let ptIndex = 0; ptIndex < numSegments; ptIndex++) {\n        const point = path[ptIndex];\n        value[offset++] = point[0];\n        value[offset++] = point[1];\n        value[offset++] = point[2] || 0;\n      }\n }\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Example Folder\nDESCRIPTION: This command navigates the terminal to a specific example directory within the deck.gl repository.  It sets the working directory for subsequent commands like installing dependencies and running the example.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd deck.gl/examples/get-started/pure-js/basic\n```\n\n----------------------------------------\n\nTITLE: Optimized Data Filtering with Caching (TypeScript)\nDESCRIPTION: Demonstrates an optimized approach to data filtering for `ScatterplotLayer`. It caches the `filteredData` and only recomputes it when the relevant `settings` (`minTime`, `maxTime`) change, preventing unnecessary layer updates and improving performance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet filteredData: DataType[];\nlet lastSettings: Settings;\n\nfunction render(settings: Settings) {\n  if (!lastSettings ||\n      settings.minTime !== lastSettings.minTime ||\n      settings.maxTime !== lastSettings.maxTime) {\n    filteredData = DATA.filter(d => d.time >= settings.minTime && d.time <= settings.maxTime);\n  }\n  lastSettings = settings;\n\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      data: filteredData,\n      getPosition: (d: DataType) => d.position,\n      getRadius: settings.radius\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Aggregation Results for a Channel\nDESCRIPTION: Retrieves an accessor to the aggregated values of a specific channel, returning a binary attribute or null if update hasn't been called.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/aggregator.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst resultAttribute = aggregator.getResult(0);\n```\n\n----------------------------------------\n\nTITLE: Configuring X11 Forwarding on Windows Subsystem for Linux\nDESCRIPTION: Commands to set up OpenGL support on Windows WSL by installing and configuring X server (VcXsrv), setting DISPLAY environment variable, and verifying setup with glxgears, enabling running OpenGL-based tests.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install VcXsrv from https://sourceforge.net/projects/vcxsrv/\n# Run xlaunch.exe, configure as per instructions\n\n# For WSL 1\nexport DISPLAY=localhost:0\n# For WSL 2\nexport DISPLAY=$(grep -m 1 nameserver /etc/resolv.conf | awk '{print $2}'):0.0\n\n# Verify with\nsudo apt-get install mesa-utils\nglxgears\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl with Standalone `DeckGL` Constructor\nDESCRIPTION: This snippet demonstrates how to instantiate the `DeckGL` class, which manages the visualization, shared states, and optional map integration. It accepts properties like container, viewport controls, layers, and map options. It enables creating a deck.gl visualization with minimal dependencies, suitable for embedding in web pages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.0/purejs-standalone-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst deckgl = new DeckGL(props);\n```\n\n----------------------------------------\n\nTITLE: Layer Group Masking (JSX)\nDESCRIPTION: This code illustrates the concept of grouping layers and applying masks to these groups. The LayerGroup component is used to define groups of layers, and these groups can then be used for clipping other layers using union and intersection operations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-group-and-operation-rfc.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DeckGL>\n  <LayerGroup id='group-1' mask>\n    <PolygonLayer .../>\n    <PolygonLayer .../>\n  </LayerGroup>\n  <LayerGroup id='group-2' mask>\n    <PolygonLayer .../>\n  </LayerGroup>\n  <ScatterplotLayer clipByUnion={['group-1', 'group-2']}>\n  <ScatterplotLayer clipByIntersection={['group-1', 'group-2']}>\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Rendering ScatterplotLayer with DeckGL and MapLibre in JavaScript\nDESCRIPTION: Illustrates how to instantiate the DeckGL class with MapLibre GL integration using a publicly available basemap style URL. It uses a ScatterplotLayer to render data points with position, color, and radius attributes. This example works in environments where deck.gl standalone and MapLibre GL are included as scripts. Controller interactivity is enabled for user manipulation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-standalone.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n//This example renders a scatterplot with DeckGL, on top of a basemap rendered with maplibre-gl, using a map style JSON from Carto.\nconst {DeckGL, ScatterplotLayer} = deck;\n\nnew DeckGL({\n  mapStyle: 'https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json',\n  initialViewState: {\n    longitude: -122.45,\n    latitude: 37.8,\n    zoom: 15\n  },\n  controller: true,\n  layers: [\n    new ScatterplotLayer({\n      data: [\n        {position: [-122.45, 37.8], color: [255, 0, 0], radius: 100}\n      ],\n      getPosition: d => d.position,\n      getFillColor: d => d.color,\n      getRadius: d => d.radius\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Contour Layer with Multiple Contours Configuration\nDESCRIPTION: This code snippet defines the configuration for a Contour Layer in deck.gl with three different contour levels. Each contour level is defined by a threshold and a color, allowing the layer to visualize boundaries between areas of different values. The layer also sets a cell size for data aggregation and a stroke width for the contour lines. It requires the COORDINATES property from the input data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.1/contour-layer-rfc.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprops: {\n  id: 'contourLayer',\n  contours: [\n    {threshold: 1, color: [255, 0, 0]},\n    {threshold: 5, color: [0, 255, 0]},\n    {threshold: 10, color: [0, 0, 255]},\n  ],\n  cellSize: 200,\n  getStrokeWidth: 3\n  getPosition: d => d.COORDINATES,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies via npm\nDESCRIPTION: This snippet details the npm installation commands for deck.gl dependencies.  It provides options for installing either the core and layers separately or the entire deck.gl library.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/point-cloud-layer.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers\n```\n\n----------------------------------------\n\nTITLE: Decode Picking Color to Feature Index\nDESCRIPTION: Decodes a color array `[r, g, b]` into a feature index. The method interprets encoded colors generated by `encodePickingColor()` to identify specific sub-features. Returns -1 if the color indicates a null or unpickable feature.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction decodePickingColor(color: Uint8Array): number {\n  // Implementation decodes color to feature index\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Classes for deck.gl JSON Conversion (JavaScript)\nDESCRIPTION: Defines a JavaScript configuration object for the `JSONConverter`. It registers available deck.gl layers (`@deck.gl/layers`, `@deck.gl/aggregation-layers`) under the `classes` key, allowing them to be instantiated via the `@@type` prefix in JSON.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst configuration = {\n  classes: Object.assign({}, require('@deck.gl/layers'), require('@deck.gl/aggregation-layers'))\n};\n```\n\n----------------------------------------\n\nTITLE: Import and Render PointCloudLayer Demo\nDESCRIPTION: This snippet imports a `Demo` component, assumed to contain a PointCloudLayer implementation, and renders it. The `Demo` component encapsulates the logic for displaying and interacting with the PointCloudLayer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/point-cloud-layer.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Demo from './point-cloud-layer';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: GPU Grid Aggregation Fragment Shader for Cell Counting\nDESCRIPTION: GLSL fragment shader that outputs cell count and weight values during the grid aggregation process. It uses the red channel for point count and the green channel for point weight.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/gpu-screengrid-aggregation-rfc.md#_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\n  gl_FragColor = vec4(1., vWeights, 0, 0.0);\n```\n\n----------------------------------------\n\nTITLE: RasterTileLayer Usage with Deck.gl and CARTO\nDESCRIPTION: This example demonstrates how to use the RasterTileLayer with Deck.gl and CARTO to visualize tiled raster data. It imports necessary modules, defines a raster data source using `rasterSource`, creates a `RasterTileLayer` instance with a custom `getFillColor` function, and renders it within a DeckGL component. Requires installation of `@deck.gl/react` and `@deck.gl/carto`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/raster-tile-layer.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {RasterTileLayer, rasterSource} from '@deck.gl/carto';\n\nfunction App({viewState}) {\n  const data = rasterSource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    tableName: 'cartobq.public_account.temperature_raster'\n  });\n\n  const layer = new RasterTileLayer({\n    data,\n    getFillColor: d => {\n      const {band_1} = d.properties;\n      return [10 * (band_1 - 20), 0, 300 - 5 * band_1];\n    }\n  })\n\n  return <DeckGL viewState={viewState} layers={[layer]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a custom OrbitController by extending the base class\nDESCRIPTION: Example of extending the OrbitController class to customize its behavior. This snippet demonstrates overriding the handleEvent method to add custom handling for pan events while delegating other events to the parent class.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/orbit-controller.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, OrbitView, OrbitController} from '@deck.gl/core';\n\nclass MyOrbitController extends OrbitController {\n\n  handleEvent(event) {\n    if (event.type === 'pan') {\n      // do something\n    } else {\n      super.handleEvent(event);\n    }\n  }\n}\n\nnew Deck({\n  views: new OrbitView(),\n  controller: {type: MyOrbitController},\n  initialViewState: viewState\n})\n```\n\n----------------------------------------\n\nTITLE: Reverse-Controlled deck.gl Integration (Scripting)\nDESCRIPTION: This snippet demonstrates reverse-controlled deck.gl integration using the pre-built scripting bundle. It loads deck.gl and Mapbox GL JS, sets up an access token, initializes a `DeckGL` instance, and includes a `ScatterplotLayer`. The `controller: true` option allows deck.gl to manage the map's size and camera. This configuration requires providing a valid Mapbox access token.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/base-maps/using-with-mapbox.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<script src=\"https://api.mapbox.com/mapbox-gl-js/v3.2.0/mapbox-gl.js\"></script>\n<link href=\"https://api.mapbox.com/mapbox-gl-js/v3.2.0/mapbox-gl.css\" rel=\"stylesheet\" />\n<script type=\"text/javascript\">\n  const {DeckGL, ScatterplotLayer} = deck;\n\n  mapboxgl.accessToken = '<mapbox_access_token>';\n\n  new DeckGL({\n    mapStyle: 'mapbox://styles/mapbox/light-v9',\n    initialViewState: {\n      longitude: 0.45,\n      latitude: 51.47,\n      zoom: 11\n    },\n    controller: true,\n    layers: [\n      new ScatterplotLayer({\n        id: 'deckgl-circle',\n        data: [\n          {position: [0.45, 51.47]}\n        ],\n        getPosition: d => d.position,\n        getFillColor: [255, 0, 0, 100],\n        getRadius: 1000\n      })\n    ]\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding loaders Prop to Support Additional Data Formats in deck.gl Layers (JavaScript)\nDESCRIPTION: This code snippet adds a 'loaders' prop to deck.gl layers to support various data formats, including plain objects and HTMLVideoElements. It facilitates flexible data ingestion for layers like BitmapLayer, IconLayer, and SimpleMeshLayer. Dependencies include deck.gl layer components and data format specifications.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst bitmapLayer = new BitmapLayer({\n  id: 'bitmap-layer',\n  data: {data: new Uint8Array([...]), width: 256, height: 256},\n  loaders: ['arraybuffer', 'HTMLVideoElement'],\n  /* other properties */\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Content (TypeScript)\nDESCRIPTION: This snippet demonstrates customizing the content and style of the built-in tooltip in TypeScript by returning an object with `html` and `style` properties from the `getTooltip` callback. The `html` property allows rendering HTML content, and the `style` property allows styling the tooltip with CSS, with type annotations for the data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getTooltip({object}: PickingInfo<DataType>) {\n  return object && {\n    html: `<h2>Message:</h2> <div>${object.message}</div>`,\n    style: {\n      backgroundColor: '#f00',\n      fontSize: '0.8em'\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating by Mean using getColorWeight and colorAggregation (HexagonLayer Example)\nDESCRIPTION: This TypeScript snippet, also presented within the GridLayer documentation but showing HexagonLayer code, demonstrates how to calculate the color value of a cell based on the mean of the 'SPACES' field using `getColorWeight` and setting `colorAggregation` to 'MEAN'. This method can leverage both CPU and GPU aggregation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getColorWeight: (point: BikeRack) => point.SPACES,\n  colorAggregation: 'MEAN'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up pydeck development environment (Bash)\nDESCRIPTION: This snippet describes a series of make commands to configure a development environment for pydeck. It clones the repo, runs setup scripts, activates a virtual environment, initializes and prepares Jupyter support, enabling developers to modify and test pydeck’s codebase effectively. It also mentions running local tests with make test to verify the installation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/installation.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/visgl/deck.gl\ncd deck.gl/bindings/pydeck\nmake setup-env\n. env/bin/activate\nmake init\nmake prepare-jupyter\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck and ScatterplotLayer in JavaScript\nDESCRIPTION: Demonstrates creating a new Deck instance with an initial view state focused on a specific latitude, longitude, and zoom level. It uses a ScatterplotLayer to render data points defined with positions, colors, and radii. The configuration enables user interaction controls via the controller property and uses accessor functions to extract meaningful attributes from the data for rendering.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-standalone.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst INITIAL_VIEW_STATE = {\n  latitude: 37.8,\n  longitude: -122.45,\n  zoom: 15\n};\n\nconst deckInstance = new Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: true,\n  layers: [\n    new ScatterplotLayer({\n      data: [\n        {position: [-122.45, 37.8], color: [255, 0, 0], radius: 100}\n      ],\n      getPosition: d => d.position,\n      getFillColor: d => d.color,\n      getRadius: d => d.radius\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Enumerations for `@@#` Lookup (JavaScript)\nDESCRIPTION: Configures the `JSONConverter` by importing enumeration objects (`COORDINATE_SYSTEM` from `@deck.gl/core`, `GL` from `@luma.gl/constants`) and registering them under the `enumerations` key. This allows referencing specific enum values in JSON using the `@@#<enum-name>.<enum-value>` syntax.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst configuration = {\n  ...\n  enumerations: {\n    COORDINATE_SYSTEM,\n    GL\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing BezierCurveLayer in JavaScript\nDESCRIPTION: This snippet imports the `BezierCurveLayer` from its local file path. This import statement is necessary for utilizing the Bezier curve rendering functionality within the deck.gl framework. The BezierCurveLayer renders quadratic bezier curves using a single control point.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/experimental/bezier/src/bezier-curve-layer/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BezierCurveLayer from './bezier-curve-layer';\n```\n\n----------------------------------------\n\nTITLE: Initializing FirstPersonView\nDESCRIPTION: This code snippet demonstrates how to import and instantiate the FirstPersonView class from the @deck.gl/core module. It shows the basic syntax for creating a new FirstPersonView object, passing in an optional id and any other view properties.  The ellipsis indicates that other view properties can be passed in as needed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/first-person-view.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {FirstPersonView} from '@deck.gl/core';\nnew FirstPersonView({id, ...});\n```\n\n----------------------------------------\n\nTITLE: equals Method for comparing Views\nDESCRIPTION: Checks whether another 'View' instance is equivalent to this one using shallow comparison. Useful for determining if a view's configuration has changed, affecting rendering or state management.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/view.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.equals(otherView)\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl Standalone Bundle in HTML\nDESCRIPTION: This code snippet demonstrates how to include the deck.gl library as a standalone bundle in an HTML file.  It provides two options: including the complete deck.gl bundle or including @deck.gl/core and @deck.gl/google-maps separately. The code shows how to access the GoogleMapsOverlay class after including the bundle.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/google-maps/overview.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/google-maps@^9.0.0/dist.min.js\"></script>\n<!-- usage -->\n<script type=\"text/javascript\">\n  const {GoogleMapsOverlay} = deck;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tile3DLayer with CesiumIonLoader in TypeScript\nDESCRIPTION: Shows how to set up a Tile3DLayer in TypeScript for loading 3D Tiles from Cesium ION. This snippet adds type safety by importing types like Tileset3D and demonstrates the use of typed callbacks. It includes loading the tileset JSON from a remote URL with the CesiumIonLoader and an access token. The onTilesetLoad callback recenters the view using the tileset's geographic center. The example configures initial view state and enables controllers to support user interaction.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-3d-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\nimport {CesiumIonLoader} from '@loaders.gl/3d-tiles';\nimport type {Tileset3D} from '@loaders.gl/tiles';\n\nconst layer = new Tile3DLayer({\n  id: 'tile-3d-layer',\n  // Tileset json file url\n  data: 'https://assets.cesium.com/43978/tileset.json',\n  loader: CesiumIonLoader,\n  loadOptions: {\n    // Set up Ion account: https://cesium.com/docs/tutorials/getting-started/#your-first-app\n    'cesium-ion': {accessToken: '<ion_access_token_for_your_asset>'}\n  },\n  onTilesetLoad: (tileset: Tileset3D) => {\n    // Recenter to cover the tileset\n    const {cartographicCenter, zoom} = tileset;\n    deckInstance.setProps({\n      initialViewState: {\n        longitude: cartographicCenter[0],\n        latitude: cartographicCenter[1],\n        zoom\n      }\n    });\n  },\n  pointSize: 2\n});\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: 10,\n    latitude: 50,\n    zoom: 2\n  },\n  controller: true,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing IconLayer Demo in JavaScript\nDESCRIPTION: This snippet imports the demo component for the IconLayer from the local module './icon-layer'. It is used to include the IconLayer visualization functionality into the React application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/icon-layer.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './icon-layer';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm or yarn in Bash\nDESCRIPTION: This snippet demonstrates how to install project dependencies using either npm or yarn as the package manager. The commands set up the required JavaScript packages specified in the project's package.json. Both commands ensure that all dependencies for running and building the example with deck.gl and Maplibre globe projection are available. No additional parameters are required; run the commands in the project root.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/maplibre-globe/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl and CARTO from CDN\nDESCRIPTION: These script tags demonstrate how to include deck.gl and CARTO libraries from a CDN, making the functionality available globally in the browser.  It specifies version `^9.0.0`. Either the combined or individual modules can be included. Requires an internet connection to access the CDN.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/raster-tile-layer.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing ScaledViewport with Center and Zoom Parameters in JavaScript\nDESCRIPTION: This code snippet creates a ScaledViewport instance that provides a generic, linear viewport with user-friendly parameters such as center coordinates, zoom, pitch, and bearing. It calculates the view and projection matrices internally based on these parameters while still allowing applications to specify a worldMatrix and modelMatrix if needed. Inputs include pixel dimensions, centerX and centerY positions, zoom level, altitude, pitch angle, and bearing angle, making it suitable for generalized 2D or 3D visualizations requiring scaled views.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v4.0/non-geospatial-viewports-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ScaledViewport({\n    // Window width/height in pixels (for pixel projection)\n    width,\n    height,\n\n    worldMatrix,\n\n    // Current center (in 0-1 coordinates? Or worldMatrix coordinates)\n    centerX,\n    centerY,\n    zoom,\n    altitude,\n    pitch,\n    bearing,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing ZoomWidget in deck.gl with TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the ZoomWidget within a deck.gl Deck instance using TypeScript. It requires the '@deck.gl/widgets' package for the ZoomWidget and '@deck.gl/core' for the Deck class. The ZoomWidget instance is passed to the Deck constructor's widgets array to enable zoom control UI overlay. This setup allows users to incrementally zoom in and out on Map and Globe views with default settings. No parameters are passed during widget instantiation in this example, relying on default props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/zoom-widget.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ZoomWidget} from '@deck.gl/widgets';\nimport {Deck} from '@deck.gl/core';\n\nconst deck = new Deck({\n  widgets: [new ZoomWidget()]\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Binary Mode in MVTLayer for Performance Optimization (JavaScript)\nDESCRIPTION: This snippet configures the MVTLayer with the 'binary' prop set to true, removing serialization overhead during worker-thread data transfer. It significantly improves loading and rendering performance for large datasets, as demonstrated by benchmark figures. Dependencies include deck.gl's MVTLayer and Web Workers API.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mvtLayer = new MVTLayer({\n  id: 'mvt-layer',\n  data: 'tile-url',\n  binary: true, // Enable binary mode for improved performance\n  /* other configurations */\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a GlobeViewport (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create an instance of the `GlobeViewport` class.  It requires the `@deck.gl/core` module. It initializes the viewport with width, height, longitude, latitude, and zoom, defining the view state. The coordinates can then be projected or unprojected.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/globe-viewport.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {_GlobeViewport as GlobeViewport} from '@deck.gl/core';\n\nconst viewport = new GlobeViewport({\n  width: 600,\n  height: 400,\n  longitude: -122.45,\n  latitude: 37.78,\n  zoom: 12\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing MercatorViewport with Geographic Coordinates in JavaScript\nDESCRIPTION: This snippet initializes a MercatorViewport designed specifically for geospatial contexts, handling non-linear WebMercator projection and unprojection. It accepts traditional geographic parameters—longitude (lng), latitude (lat), and zoom level—which the viewport converts internally into linear centerX, centerY, and scale values. This allows integration with deck.gl layers that assume mercator coordinates, preserving compatibility with mapping-focused visualizations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v4.0/non-geospatial-viewports-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew MercatorViewport({\n  lng, lat, zoom // converted to centerX, centerY, scale\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Pydeck-carto via conda\nDESCRIPTION: This snippet installs pydeck-carto via the conda package manager, specifically utilizing the conda-forge channel. The command fetches the package from the specified channel and installs it alongside its dependencies within the conda environment. A conda installation is a way to isolate the package with its dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/installation.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nconda install -c conda-forge pydeck-carto\n```\n\n----------------------------------------\n\nTITLE: QuadkeyTileset2D Implementation Example\nDESCRIPTION: Demonstrates how to extend the `Tileset2D` class to implement a custom indexing scheme using quadkeys.  It overrides methods to convert tile indices, generate tile IDs, determine zoom levels, and get parent indices based on quadkey values. This example shows how to interface with the deck.gl TileLayer, allowing for a custom tile indexing system using quadkeys.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-layer.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport {_Tileset2D as Tileset2D} from '@deck.gl/geo-layers';\nclass QuadkeyTileset2D extends Tileset2D {\n  getTileIndices(opts) {\n    // Quadkeys and OSM tiles share the layout, leverage existing algorithm\n    // Data format: [{quadkey: '0120'}, {quadkey: '0121'}, {quadkey: '0120'},...]\n    return super.getTileIndices(opts).map(tileToQuadkey);\n  }\n\n  getTileId({quadkey}) {\n    return quadkey;\n  }\n\n  getTileZoom({quadkey}) {\n    return quadkey.length;\n  }\n\n  getParentIndex({quadkey}) {\n    const quadkey = quadkey.slice(0, -1);\n    return {quadkey};\n  }\n}\n\nconst quadkeyTileLayer = new TileLayer({\n  TilesetClass: QuadkeyTileset2D,\n  data: 'quadkey/{quadkey}.json',\n  ...\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bin Information in an Aggregator\nDESCRIPTION: Gets information about a specific bin including ID, aggregated values, count, and optionally point indices if available.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/aggregator.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bin = aggregator.getBin(100);\n```\n\n----------------------------------------\n\nTITLE: Declaring DECKGL_FILTER_GL_POSITION Hook in GLSL Vertex Shader\nDESCRIPTION: Declares the standard vertex shader hook `DECKGL_FILTER_GL_POSITION`. This hook allows modification of the final clip space position (gl_Position) of the current vertex after projection, using the VertexGeometry struct for context.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-shader-hook-rfc.md#_snippet_3\n\nLANGUAGE: GLSL\nCODE:\n```\nvoid DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry);\n```\n\n----------------------------------------\n\nTITLE: Importing ScatterplotLayer from Deck.gl Layers Submodule in JavaScript\nDESCRIPTION: Demonstrates how to import the ScatterplotLayer class from the new layers submodule in deck.gl v5.3+, which separates core functionality and layers. This import path change is relevant for pure JavaScript (non-React) users following the updated module structure. Ensures correct dependency usage when creating scatter plot visualizations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ScatterplotLayer} from '@deck.gl/layers';\n```\n\n----------------------------------------\n\nTITLE: Starting Application with vite (bash)\nDESCRIPTION: This bash snippet provides the command to bundle and serve the application using vite. Vite is a build tool that optimizes the application for development and production. This is the final step to run the example. The command uses npm.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/mapbox/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining Elevation Aggregation Options in HexagonLayer Using TypeScript\nDESCRIPTION: This TypeScript snippet illustrates alternative methods for customizing elevation aggregation in HexagonLayer. Users can provide a CPU-only getElevationValue function aggregating values across all points in a hexagon or supply a GPU-enabled getElevationWeight accessor with a predefined aggregation type like SUM, COUNT, or MAX. These options control the height of hexagon extrusions representing data density or other weighted metrics.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/hexagon-layer.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Option A: use getElevationValue (CPU only)\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getElevationValue: (points: BikeRack[]) => points.length\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Option B: use getElevationWeight and elevationAggregation (CPU or GPU)\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getElevationWeight: 1,\n  elevationAggregation: 'COUNT'\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Option A: use getElevationValue (CPU only)\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getElevationValue: (points: BikeRack[]) => {\n    // Calculate max value\n    return points.reduce((max: number, p: BikeRack) => p.SPACES > max ? p.SPACES : max, -Infinity);\n  }\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Option B: use getElevationWeight and elevationAggregation (CPU or GPU)\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getElevationWeight: (point: BikeRack) => point.SPACES,\n  elevationAggregation: 'MAX'\n});\n```\n\n----------------------------------------\n\nTITLE: Loading I3S Tiles with Tile3DLayer in TypeScript\nDESCRIPTION: This snippet shows how to create a Tile3DLayer instance to load Indexed 3D Scene Layer (I3S) tiles from ArcGIS online resources using TypeScript. It imports I3SLoader from loaders.gl to decode tiles and sets the data property to the URL of the Indexed 3D layer file. This example requires no additional parameters beyond the URL and loader specification and represents the simplest way to render I3S data with deck.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-3d-layer.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\nimport {I3SLoader} from '@loaders.gl/i3s';\n\nconst layer = new Tile3DLayer({\n  id: 'tile-3d-layer',\n  // Tileset entry point: Indexed 3D layer file url\n  data: 'https://tiles.arcgis.com/tiles/z2tnIkrLQ2BRzr6P/arcgis/rest/services/SanFrancisco_Bldgs/SceneServer/layers/0',\n  loader: I3SLoader\n});\n```\n\n----------------------------------------\n\nTITLE: Loading LAS/LAZ Files with PointCloudLayer in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to load point cloud data from LAS/LAZ files using the `PointCloudLayer` and `@loaders.gl/las` library. It shows how to import necessary modules and configure the layer with the `LASLoader` to handle data loading from a specified file path. This example builds upon the core functionality by adding support for a specific file format.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/point-cloud-layer.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {LASLoader} from '@loaders.gl/las';\n\nnew PointCloudLayer({\n  data: 'path/to/pointcloud.laz',\n  loaders: [LASLoader]\n});\n```\n\n----------------------------------------\n\nTITLE: Isolating CSS Blending Effects in deck.gl (CSS)\nDESCRIPTION: Applies the `isolation: 'isolate';` CSS property to the parent container element of the deck.gl canvas (e.g., `.deckgl-parent-class`). This is necessary when using `mix-blend-mode` on the canvas to prevent the blending effect from unintentionally affecting other sibling HTML elements within the same stacking context, such as map controls or legends.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/tips-and-tricks.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.deckgl-parent-class {\n  isolation: 'isolate';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TextLayer Font Atlas Settings in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the proposed `fontSettings` prop within a deck.gl `TextLayer` instance. It shows how to configure options for both standard and Signed Distance Field (SDF) font atlas generation, including `fontSize`, `buffer`, `sdf`, `radius`, and `cutoff`. These settings influence the shared font atlas texture but do not directly affect the rendered size of individual text labels.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.3/text-layer-font-setting-api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {TextLayer} from '@deck.gl/layers'\n\nconst textLayer = new TextLayer({\n  ...,\n  characterSet: 'abcdefg',\n  fontFamily: 'Monaco, monospace',\n  fontWeight: 'normal',\n\n  fontSettings: {\n    // shared options between non-sdf and sdf\n    // this fontSize if only applied for generating fontAtlas\n    // it does not impact the size of the text labels \n    fontSize: 64, \n    // Whitespace buffer around each side of the character\n    buffer: 2,\n    \n    // `sdf` only options\n    // https://github.com/mapbox/tiny-sdf\n    sdf: true,\n    // if `sdf` is false, the following parameters are not appliable\n    radius: 3,\n    cutoff: 0.25\n  },\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with npm\nDESCRIPTION: This code snippet provides the command to start a local development server using npm, bundling the application with vite for testing and development purposes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/google-3d/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring OrthographicController within OrthographicView in deck.gl\nDESCRIPTION: Shows an equivalent approach to the previous example, but passing controller options to the OrthographicView itself. This demonstrates how controller settings can be configured at the view level.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/orthographic-controller.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, OrthographicView} from '@deck.gl/core';\n\nnew Deck({\n  views: new OrthographicView({\n    controller: {scrollZoom: false,  inertia: true}\n  }),\n  initialViewState: viewState\n})\n```\n\n----------------------------------------\n\nTITLE: Importing DataFilterExtension in Node.js/ESM - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import DataFilterExtension from the @deck.gl/extensions package and instantiate it with default (empty) options. Requires that @deck.gl/extensions is installed, typically via npm. Intended for use in JavaScript applications or frameworks that support ES modules.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/overview.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {DataFilterExtension} from '@deck.gl/extensions';\nnew DataFilterExtension({});\n```\n\n----------------------------------------\n\nTITLE: Creating Continuous Color Styles with colorContinuous and CartoLayer in JavaScript\nDESCRIPTION: This snippet demonstrates initializing a CartoLayer using MAP_TYPES.QUERY, where the fill color of each feature is interpolated continuously based on the 'gn_pop' attribute using colorContinuous. This helper performs a linear mapping between the numeric domain provided and a color gradient defined by a CARTOColors palette (here, 'BluYl') or a custom array. Additional parameters allow configuration of the attribute, domain, color palette, and colors for null values (default [204, 204, 204]). Intended for visualizing smoothly varying data such as population density or elevation, where input is a numeric field and output is a smoothly color-graded map layer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/styles.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew CartoLayer({\n  type: MAP_TYPES.QUERY,\n  data: 'SELECT the_geom_webmercator, gn_pop FROM populated_places',\n  getFillColor: colorContinuous({\n    attr: 'gn_pop',\n    domain: [0, 1e5],\n    colors: 'BluYl'\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering TerrainLayer Demo Component in JSX (React)\nDESCRIPTION: Renders the imported 'Demo' component as a JSX element within the React component's return context. This snippet is crucial for displaying the TerrainLayer demonstration UI. It assumes that React is in scope and properly configured to interpret JSX syntax.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/terrain-layer.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Importing TerrainExtension Demo Component\nDESCRIPTION: This snippet imports the `Demo` component from a local file named `terrain-extension.js`. The `Demo` component is expected to render the demonstration of the TerrainExtension in this context, such as a 3D terrain visualization. There are no external dependencies explicitly declared in this snippet. The expected input is the component import itself. The output of this code is the availability of the `Demo` component within the current file's scope for rendering. There are no apparent limitations from this code snippet alone.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/terrain-extension.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './terrain-extension';\n```\n\n----------------------------------------\n\nTITLE: Result of React Component Conversion using `@@type` (JavaScript)\nDESCRIPTION: Illustrates the output after the `JSONConverter` processes the React component JSON specified with `@@type`. It generates a React element structure (`$$typeof: Symbol(react.element)`) for the `TestComponent` with the provided props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  $$typeof: Symbol(react.element),\n  key: null,\n  props: {\n    color: [0, 128, 255],\n    anotherProp: 1\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BaseViewport for Generic Coordinate Systems in JavaScript\nDESCRIPTION: This snippet demonstrates creating a BaseViewport object, which operates within a normalized [0,1] coordinate system and works with standard matrices. It requires pixel dimensions (width and height), a coordinate-defining worldMatrix, and explicit projection and view matrices. This viewport is completely generic and linear, intended as the foundational class in the viewport hierarchy that does not make any geospatial assumptions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v4.0/non-geospatial-viewports-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew BaseViewport({\n    // Window width/height in pixels (for pixel projection)\n    width,\n    height,\n\n    // Defines the coordinate system\n    worldMatrix,\n\n    projectionMatrix,\n    viewMatrix,\n\n})\n```\n\n----------------------------------------\n\nTITLE: Defining voidValue for enter/exit animations - JavaScript\nDESCRIPTION: This code snippet demonstrates how to define a `voidValue` for attribute definitions, which could be used for enter/exit animations to transition from or to a specific value. It shows examples for radius and colors, where the color's alpha channel is set to 0 for the void value.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.1/attribute-transition-rfc.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.state.attributeManager.add({\n  // Animatable\n  radius: {size: 1, accessor: 'getRadius', update: this.calculateRadius, animate: true, voidValue: 0},\n  colors: {size: 4, type: GL.UNSIGNED_BYTE, accessor: 'getColor', update: this.calculateColors, animate: true, voidValue: ([r, g, b, a]) => [r, g, b, 0]}\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring DECKGL_FILTER_COLOR Hook in GLSL Fragment Shader\nDESCRIPTION: Declares the standard fragment shader hook `DECKGL_FILTER_COLOR`. This hook allows modification of the final color of the current fragment before it's written to the output buffer, using the FragmentGeometry struct for context. The color is expected to be in normalized WebGL color space.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-shader-hook-rfc.md#_snippet_5\n\nLANGUAGE: GLSL\nCODE:\n```\nvoid DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry);\n```\n\n----------------------------------------\n\nTITLE: Creating VectorTileLayer instance via global deck.carto object\nDESCRIPTION: This JavaScript code initializes a new VectorTileLayer using the global deck.carto namespace after including the scripts externally. It allows use of the layer without module imports, suitable for simple HTML pages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/vector-tile-layer.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.carto.VectorTileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Deck.gl Example (Bash)\nDESCRIPTION: This snippet provides instructions for installing the necessary dependencies for the deck.gl MaskEffect example. It offers two options: using npm or yarn.  This is essential for running the example correctly. The output is the successful installation of all project dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/mask/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with webpack\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Handling Pixel Picking with BitmapLayer (TypeScript)\nDESCRIPTION: This code demonstrates how to read pixel color data from a BitmapLayer when a pixel is clicked.  It accesses the device context to read the pixel data using `readPixelsToArrayWebGL`. Requires the `pickable` property to be set to true.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/bitmap-layer.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnew BitmapLayer({\n  image: './my-image.png',\n  bounds: [-122.45, 37.75, -122.43, 37.78],\n  pickable: true,\n  onClick: ({bitmap, layer}) => {\n    if (bitmap) {\n      const {device} = layer.context;\n      const pixelColor = device.readPixelsToArrayWebGL(layer.props.image, {\n        sourceX: bitmap.pixel[0],\n        sourceY: bitmap.pixel[1],\n        sourceWidth: 1,\n        sourceHeight: 1\n      });\n      console.log('Color at picked pixel:', pixelColor);\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Unified Vertex Shader Using New Common Projection Interface in GLSL\nDESCRIPTION: This vertex shader demonstrates the new unified approach using the proposal's common projection function `project_position_to_clipspace`. It declares vertex attributes including the 64-bit low-part attribute, calls the unified projection function that outputs the clipspace position and world coordinates in a single call, and computes the lighting weight. This shader works seamlessly in both 32-bit and 64-bit projection modes by including either `project32` or `project64` modules as dependencies, removing the need for separate shader codes and simplifying the shader authoring process.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/unified-32-and-64-bit-project-api-rfc.md#_snippet_3\n\nLANGUAGE: GLSL\nCODE:\n```\nattribute vec3 positions;\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64xyLow;\nattribute vec3 instanceNormals;\n\nvarying float vLightWeight;\n\nmain() {\n  vec4 position_worldspace;\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xyLow, positions, position_worldspace);\n\n  vLightWeight = getLightWeight(position_worldspace.xyz, project_normal(instanceNormals));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PostProcessEffect in deck.gl (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates the same functionality as the JavaScript example, but with type safety. It initializes a `PostProcessEffect` using the `brightnessContrast` shader from `@luma.gl/effects`, specifying `brightness` and `contrast` parameters, and applies it to the deck.gl instance.  Type assertion is used to define the props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-effects.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {brightnessContrast, BrightnessContrastProps} from '@luma.gl/effects';\nimport {Deck, PostProcessEffect} from '@deck.gl/core';\n\nconst postProcessEffect = new PostProcessEffect(brightnessContrast, {\n  brightness: 1.0,\n  contrast: 1.0\n} as BrightnessContrastProps);\n\nconst deckInstance = new Deck({\n  // ...\n  effects: [postProcessEffect]\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating OrthographicView Class in JavaScript\nDESCRIPTION: Demonstrates how to import the OrthographicView class from the deck.gl core module and create a new instance. The constructor accepts parameters from the base View class as well as specific OrthographicView options like `flipY`, `near`, and `far`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/orthographic-view.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {OrthographicView} from '@deck.gl/core';\nconst view = new OrthographicView({id, ...});\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Red Filter Layer Extension in JavaScript for deck.gl\nDESCRIPTION: Presents a complete implementation of a reusable LayerExtension named RedFilter that injects shader code to highlight red colors in fragment shaders across multiple layers. Defines uniform blocks, appends shader injections in getShaders, updates shader uniform inputs in updateState, and propagates custom props with getSubLayerProps. This extension can be passed as an argument to composite layers like GeoJsonLayer to automatically apply the effect to all sublayers without duplicating code.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/layer-extensions.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {LayerExtension} from '@deck.gl/core';\n\n// Declare uniform block & custom shader module\nconst uniformBlock = `\\\nuniform highlightUniforms {\n  bool enabled;\n} highlight;\n`;\n\ntype HighlightProps = {enabled: boolean};\n\nconst highlightUniforms = {\n  name: 'trips',\n  fs: uniformBlock, // Only need to add block to fragment stage in this example\n  uniformTypes: {enabled: 'f32'}\n} as const satisfies ShaderModule<TripsProps>;\n\n\nclass RedFilter extends LayerExtension {\n  getShaders() {\n    const shaders = super.getShaders();\n    shaders.inject = {\n      // Standard injection hook - see \"Writing Shaders\"\n      'fs:DECKGL_FILTER_COLOR': `\n        if (highlight.enabled) {\n          if (color.r / max(color.g, 0.001) > 2. && color.r / max(color.b, 0.001) > 2.) {\n            // is red\n            color = vec4(1.0, 0.0, 0.0, 1.0);\n          } else {\n            discard;\n          }\n        }\n      `\n    };\n\n    // Add uniform binding to shader modules\n    shaders.modules = [...shaders.modules, highlightUniforms];\n    return shaders;\n  }\n\n  updateState(params) {\n    const {highlightRed = true} = params.props;\n    for (const model of this.getModels()) {\n      const highlightProps: HighlightProps = {enabled: props.highlightRed};\n      model.shaderInputs.setProps({highlight: highlightProps});\n    }\n  }\n\n  getSubLayerProps() {\n    const {highlightRed = true} = params.props;\n    return {\n      highlightRed\n    };\n  }\n}\n\nnew GeoJsonLayer({\n  ...\n  extensions: [new RedFilter()]\n});\n```\n\n----------------------------------------\n\nTITLE: Constructor for SnapshotTestRunner class\nDESCRIPTION: Initializes an instance of SnapshotTestRunner, passing deckProps to configure the deck.gl Deck instance. This setup is essential for defining the initial visualization parameters for all subsequent tests.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/test-utils/snapshot-test-runner.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew SnapshotTestRunner(deckProps)\n```\n\n----------------------------------------\n\nTITLE: Initializing PostProcessEffect in deck.gl (React)\nDESCRIPTION: This React code shows the integration of a `PostProcessEffect` in a deck.gl application.  It utilizes the `brightnessContrast` effect, with `brightness` and `contrast` configured. The `postProcessEffect` is then added to the `effects` prop of the `DeckGL` component, resulting in the post-processing effect being applied to the visualization.  Type assertion is used to define the props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-effects.md#_snippet_5\n\nLANGUAGE: React\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {brightnessContrast, BrightnessContrastProps} from '@luma.gl/effects';\nimport {PostProcessEffect} from '@deck.gl/core';\n\nconst postProcessEffect = new PostProcessEffect(brightnessContrast, {\n  brightness: 1.0,\n  contrast: 1.0\n} as BrightnessContrastProps);\n\nfunction App() {\n  return <DeckGL\n    // ...\n    effects={[postProcessEffect]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a ScatterplotLayer in deck.gl (JavaScript)\nDESCRIPTION: Defines a ScatterplotLayer with specified data source, visual properties, and accessor functions for radius, position, and color. The snippet shows how to create a visual layer representing spatial data points, requiring deck.gl's layer modules and data formatting. Outputs a configured layer object ready for rendering.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/modules/main/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\n/**\n * data is an array of object in the shape of:\n * {\n *   \"name\":\"Montgomery St. (MONT)\",\n *   \"address\":\"598 Market Street, San Francisco CA 94104\",\n *   \"entries\":\"43430\",\n *   \"exits\":\"45128\",\n *   \"coordinates\":[-122.401407,37.789256]\n * }\n */\nconst scatterplotLayer = new ScatterplotLayer({\n  id: 'bart-stations',\n  data: 'https://github.com/visgl/deck.gl-data/blob/master/website/bart-stations.json',\n  getRadius: d => Math.sqrt(d.entries) / 100,\n  getPosition: d => d.coordinates,\n  getColor: [255, 228, 0],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting App (bash)\nDESCRIPTION: Provides commands to install project dependencies using `npm` or `yarn`, and then start the development server using `npm start` to bundle and serve the application with Vite.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/mask-extension/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Enabling Time-based Animation in deck.gl Layer (JavaScript)\nDESCRIPTION: Shows how to enable time-based animation for a deck.gl layer by setting the 'animated' property to true upon instantiation. The JavaScript code triggers automatic per-frame updates, ensuring the layer animates in response to the browser's animation frames (typically at 60fps) regardless of user input or prop changes. Requires deck.gl framework with layer animation system support. The key parameter is 'animated: true', which marks the layer for continuous animation. No explicit inputs other than the flag; output is continuous rendering-driven property updates.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/property-animation-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Layer({\n  animated: true\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Web Fonts Asynchronously with FontFace API (TypeScript)\nDESCRIPTION: Shows how to use the JavaScript `FontFace` API to programmatically load a web font in a TypeScript application. It waits for the font to be fully loaded using `await font.load()` and then adds it to the document's available fonts via `document.fonts.add(font)` before initializing and rendering the `TextLayer` which specifies the loaded `fontFamily`. This ensures the custom font is ready before the layer needs it. Requires `@deck.gl/core` and `@deck.gl/layers`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {TextLayer} from '@deck.gl/layers';\n\nconst deckInstance = new Deck({...});\nrenderLayers();\n\nasync function renderLayers() {\n  const font = new FontFace('Material Icons', 'url(https://fonts.gstatic.com/s/materialicons/v90/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2)');\n  // wait for font to be loaded\n  await font.load();\n  // add font to document\n  document.fonts.add(font);\n  // add TextLayer\n  const textLayer = new TextLayer({\n    fontFamily: 'Material Icons',\n    // ...\n  });\n  deckInstance.setProps({\n    layers: [textLayer]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Deck.gl GlobeController for Custom Interaction (JavaScript)\nDESCRIPTION: Illustrates how to create a custom controller class by extending the internal _GlobeController class. It shows how to override the handleEvent method to intercept specific events, allowing for custom interaction logic (like 'pan') while allowing the base class to handle other events.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/globe-controller.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck, _GlobeView as GlobeView, _GlobeController as GlobeController} from '@deck.gl/core';\n\nclass MyGlobeController extends GlobeController {\n\n  handleEvent(event) {\n    if (event.type === 'pan') {\n      // do something\n    } else {\n      super.handleEvent(event);\n    }\n  }\n}\n\nnew Deck({\n  views: new GlobeView(),\n  controller: {type: MyGlobeController},\n  initialViewState: viewState\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using `project64` Shader Module Object (New Syntax)\nDESCRIPTION: Shows the updated method (deck.gl v7.2+) for using the `project64` shader module. The module must be explicitly imported (e.g., from `@deck.gl/core` or `@deck.gl/extensions`) and passed as an object to the `modules` array returned by `getShaders`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport {project64} from '@deck.gl/core'; // Or potentially @deck.gl/extensions\n\ngetShaders() {\n  return {vs, fs, modules: [project64]};\n}\n```\n\n----------------------------------------\n\nTITLE: Using UI Widgets in deck.gl\nDESCRIPTION: This snippet illustrates how users will integrate the new `NavigationWidget` and `FullscreenWidget` UI components within a deck.gl application. It presents a declarative approach using `new Deck` and the `uiControls` prop.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/ui-module-rfc.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {NavigationWidget, FullscreenWidget} from '@deck.gl/widgets'\n\nnew Deck({\n  ...\n  uiControls: [\n    new NavigationWidget(),\n    new FullscreenWidget()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating GeoJsonLayer with SubLayerProps Override in JavaScript\nDESCRIPTION: Demonstrates how to instantiate a GeoJsonLayer with overridden sublayer properties to control stroke appearance on point features separately from polygon features. This snippet addresses breaking changes where stroked and line styling props now apply to point features by default. Requires deck.gl library and GeoJsonLayer class. Inputs include layer properties such as `stroked` and `_subLayerProps` to customize rendering behavior. Outputs a configured GeoJsonLayer instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew GeoJsonLayer({\n  // ...other props\n  stroked: true,\n  _subLayerProps: {\n    points: {stroked: false}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating React Components using `@@type` (JSON)\nDESCRIPTION: JSON example demonstrating how to specify a React component (`TestComponent`) using the `@@type` prefix. The accompanying keys (`color`, `anotherProp`) are passed as props to the component during conversion.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@@type\": \"TestComponent\",\n  // props for the component\n  \"color\": [0, 128, 255],\n  \"anotherProp\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Data Updates with _dataDiff\nDESCRIPTION: The `_dataDiff` property is an experimental function that detects which data objects have changed by returning ranges (`{startRow, endRow}`), enabling partial updates. It requires careful management of data indices and is suitable for large datasets where only small parts update frequently, improving performance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n`_dataDiff` is invoked when data changes to identify ranges of changed objects, allowing for selective attribute recalculations. It is advanced and should be used when efficient partial updates are needed.\n```\n\n----------------------------------------\n\nTITLE: Initializing a Viewport in deck.gl with JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new `Viewport` object in deck.gl with JavaScript. It showcases the constructor syntax and the parameters that can be used to configure the viewport's dimensions, view matrix, and projection matrix. The code provides a basic example of instantiating a `Viewport` object with specified width, height, and transformation matrices, essential for rendering scenes in deck.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/viewport.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nnew Viewport({width: 500, height: 500, viewMatrix, projectionMatrix, ...});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Credentials and Overriding in CARTO Source Usage\nDESCRIPTION: Shows how default connection parameters like accessToken, apiBaseUrl, and connectionName can be defined once in a utility file or higher scope and later overridden as needed when calling CARTO source functions. This pattern provides flexibility for multi-connection or multi-tenant use cases without duplicating configuration details.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/carto-v9-rfc.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Define in utility file\nconst defaults = {accessToken, apiBaseUrl, connectionName};\nconst tilejson = await CartoVectorTableSource({\n  accessToken: 'XXX',\n  apiBaseUrl: 'https://custom.domain.com', // <-- override default\n  connectionName: 'my-connection',\n  tableName: 'carto.my.table'\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Data from BigQuery in Python\nDESCRIPTION: This snippet demonstrates rendering data from BigQuery using a spatial intersection to display airports in Spain. It creates a CartoLayer and sets the data parameter to a SQL query that selects airport data and intersects it with Spain's boundaries, and configures connection type, style, and interactive options. The final output is an interactive map displaying airports in Spain from BigQuery.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/carto_layer.ipynb#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nlayer = pdk.Layer(\n    \"CartoLayer\",\n    data=\"\"\"\n        SELECT a.geom, a.name\n        FROM `carto-demo-data.demo_tables.world_airports` AS a,\n             `carto-do-public-data.natural_earth.geography_glo_admin0countries_410` AS g\n        WHERE g.ADMIN = 'Spain' AND\n              ST_INTERSECTS(a.geom, g.geom)\n    \"\"\",\n    type_=pdkc.MapType.QUERY,\n    connection=pdkc.types.String(\"bigquery\"),\n    credentials=pdkc.get_layer_credentials(carto_auth),\n    get_fill_color=[238, 77, 90],\n    point_radius_min_pixels=2.5,\n    pickable=True,\n)\n\nview_state = pdk.ViewState(latitude=36, longitude=-7.44, zoom=4)\n\ntooltip = {\"html\": \"<b>Name:</b> {name}\", \"style\": {\"color\": \"white\"}}\n\npdk.Deck(\n    layer, map_style=pdk.map_styles.ROAD, initial_view_state=view_state, tooltip=tooltip\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Options in Deck Component Using Controller Shorthand in JavaScript\nDESCRIPTION: This example shows the equivalent shorthand for setting controller options directly on the Deck component, without explicitly specifying views. The controller settings apply to the default view.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Deck({\n  // ...\n  // views: undefined\n  controller: {touchRotate: true, doubleClickZoom: false}\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Objects with Deck.pickMultipleObjects (TypeScript)\nDESCRIPTION: This snippet demonstrates how to directly call the picking engine using `deckInstance.pickMultipleObjects` in TypeScript to query multiple overlapping objects under the mouse pointer. The `onClick` event handler retrieves the x and y coordinates of the click event and passes them to `pickMultipleObjects` along with a radius and depth to control the picking area and the number of objects to retrieve. The results, which are an array of `PickingInfo` objects, are then logged to the console, ensuring type safety.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\n\nconst deckInstance = new Deck({\n  // ...\n  onClick: ({x, y}: PickingInfo) => {\n    // Query up to 5 overlapping objects under the pointer\n    const pickInfos: PickingInfo[] = deckInstance.pickMultipleObjects({x, y, radius: 1, depth: 5});\n    console.log(pickInfo);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Reset camera position in TypeScript with animation\nDESCRIPTION: Defines a function to animate camera movement between locations with state management, utilizing FlyToInterpolator for smooth transitions. Dependencies include '@deck.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, MapViewState, FlyToInterpolator} from '@deck.gl/core';\n\nconst CITIES: {[name: string]: MapViewState} = {\n  SF: {longitude: -122.4, latitude: 37.8, zoom: 10},\n  NYC: {longitude: -74.0, latitude: 40.7, zoom: 10}\n};\n\nconst deckInstance = new Deck({\n  initialViewState: CITIES.SF,\n  controller: true\n});\n\nfunction flyToCity(name: string) {\n  deckInstance.setProps({\n    initialViewState: {\n      ...CITIES[name],\n      transitionInterpolator: new FlyToInterpolator({speed: 2}),\n      transitionDuration: 'auto'\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using DataFilterExtension with categorySize 2 (JavaScript)\nDESCRIPTION: Demonstrates filtering a `ScatterplotLayer` based on two categorical properties (`industry`, `size`). `getFilterCategory` returns an array, `filterCategories` uses nested arrays for each dimension, and `categorySize: 2` is set in the extension constructor.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nnew ScatterplotLayer({\n  data,\n  getPosition: d => d.coordinates,\n  getFilterCategory: d => [d.industry, d.size],\n  filterCategories: [['retail', 'health'], [10, 20, 50]],\n  extensions: [new DataFilterExtension({categorySize: 2})]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Data and Initializing Layer\nDESCRIPTION: This snippet demonstrates how to define the data type and initialize a `PointCloudLayer` with data and accessors for position, color, and normal.  It serves as a baseline for comparison when offloading calculations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DataType = {\n  position: [x: number, y: number, z: number];\n  color: [r: number, g: number, b: number];\n};\nconst POINT_CLOUD_DATA: DataType[] = [...];\n\n// Calculate attributes on the main thread\nconst layer = new PointCloudLayer<DataType>({\n  data: POINT_CLOUD_DATA,\n  getPosition: (d: DataType) => d.position,\n  getColor: (d: DataType) => d.color,\n  getNormal: [0, 0, 1]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Google Maps API Key Environment Variable - bash\nDESCRIPTION: Sets the Google Maps API key as an environment variable named `GoogleMapsAPIKey`. This method provides the key to the application without modifying source code. Replace `<google_maps_api_key>` with your actual API key.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/google-3d-tiles/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GoogleMapsAPIKey=<google_maps_api_key>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Orthographic View in deck.gl (JavaScript)\nDESCRIPTION: This code snippet imports the `Demo` component from './orthographic-view'. This component presumably contains the implementation logic for rendering the orthographic view using deck.gl. The snippet then renders this imported component, effectively displaying the orthographic view within the application. No specific parameters are shown, but the rendered component would likely accept props to configure the view.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/orthographic-view.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './orthographic-view';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Using destructured compound resources in layers\nDESCRIPTION: Demonstrates how to use parts of a compound resource (like an Arrow table) in a deck.gl layer by referencing specific buffers from the resource.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/data-manager-rfc.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ScatterplotLayer({\n  data: {\n    length: 1e5,\n    attributes: {\n      getPosition: {buffer: 'deck://scatterplot-data-arrow/coordinate', size: 2},\n      getRadius: {buffer: 'deck://scatterplot-data-arrow/radius', size: 1}\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running the development server with vite\nDESCRIPTION: This command starts the development server with vite, enabling live preview of the application after setup and dependencies are installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/contour/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Querying Rendered Features with getRenderedFeatures Method (JavaScript)\nDESCRIPTION: This snippet introduces the getRenderedFeatures method, used to query all visible features within the current viewport in deck.gl. It enables developers to retrieve feature data for interactive maps, especially useful for hover or click events. It depends on the deck.gl core API and requires a properly initialized deck.gl instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* \nExample: Using getRenderedFeatures to query visible features\nThis method returns all features currently rendered in the viewport, useful for interactivity.\n*/\nconst features = deck.getRenderedFeatures();\nconsole.log(features);\n```\n\n----------------------------------------\n\nTITLE: Setting a Layer Bounding Volume with OrientedBoundingBox in JavaScript\nDESCRIPTION: This example creates a new layer, assigning it a boundingVolume property initialized as an empty OrientedBoundingBox instance from math.gl. This bounding volume will automatically be tested against the current camera's frustum to determine visibility before rendering. The code presumes proper inclusion of the '@math.gl/culling' library and that the Layer constructor accepts a boundingVolume option in its configuration.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/layer-culling-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {OrientedBoundingBox} from '@math.gl/culling';\nnew Layer {\n  boundingVolume: new OrientedBoundingBox()\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering TextLayer Demo\nDESCRIPTION: This snippet imports a component named 'Demo' from the './text-layer' file and then renders it. This is likely a demonstration of the TextLayer component in a deck.gl application, where the Demo component showcases the TextLayer's capabilities.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/text-layer.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Demo from './text-layer';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: DeckGL with JSX LineLayer\nDESCRIPTION: Demonstrates defining deck.gl layers using JSX syntax as children of the `DeckGL` component, as an alternative to the `layers` prop. It imports `DeckGL`, and assumes the import of `LineLayer` from the deck.gl library. A `<LineLayer>` is declared directly inside the `<DeckGL>` component. This is a simplified example of the JSX layer syntax, and is limited to direct children of the `DeckGL` component.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/deckgl.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n  <DeckGL initialViewState={...viewState}>\n    <LineLayer id=\"line-layer\" data={data} />\n  <DeckGL />\n```\n\n----------------------------------------\n\nTITLE: Complete Composite Layer Implementation with getSubLayerProps in JavaScript\nDESCRIPTION: Complete implementation of the LabeledIconLayer using the getSubLayerProps helper method to handle property forwarding and layer ID generation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/composite-layers.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass LabeledIconLayer extends CompositeLayer {\n  renderLayers() {\n    return [\n      // the icons\n      new IconLayer(this.getSubLayerProps({\n        // `getSubLayerProps` will concat the parent layer id with this id\n        id: 'icon',\n        data: this.props.data,\n\n        iconAtlas: this.props.iconAtlas,\n        iconMapping: this.props.iconMapping,\n\n        getPosition: this.props.getPosition,\n        getIcon: this.props.getIcon,\n        getSize: this.props.getIconSize,\n        getColor: this.props.getIconColor,\n\n        updateTriggers: {\n          getPosition: this.props.updateTriggers.getPosition,\n          getIcon: this.props.updateTriggers.getIcon,\n          getSize: this.props.updateTriggers.getIconSize,\n          getColor: this.props.updateTriggers.getIconColor\n        }\n      })),\n      // the labels\n      new TextLayer(this.getSubLayerProps({\n        // `getSubLayerProps` will concat the parent layer id with this id\n        id: 'id',\n        data: this.props.data,\n\n        fontFamily: this.props.fontFamily,\n        fontWeight: this.props.fontWeight,\n\n        getPosition: this.props.getPosition,\n        getText: this.props.getText,\n        getSize: this.props.getTextSize\n        getColor: this.props.getTextColor,\n\n        updateTriggers: {\n          getPosition: this.props.updateTriggers.getPosition,\n          getText: this.props.updateTriggers.getText,\n          getSize: this.props.updateTriggers.getTextSize,\n          getColor: this.props.updateTriggers.getTextColor\n        }\n      }))\n    ];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Meter Size Projection in deck.gl v8.6\nDESCRIPTION: Provides the code to configure a `MapView` with `legacyMeterSizes: true`. This prop, passed to the `Deck` or `DeckGL` component via the `views` prop, reverts the projection of meter-based dimensions (like radius or width) to the behavior present before deck.gl v8.6. This is useful for maintaining visual consistency in applications affected by the v8.6 projection accuracy improvements, although the flag may be removed in future versions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nviews: new MapView({legacyMeterSizes: true})\n```\n\n----------------------------------------\n\nTITLE: Using pre-bundled deck.gl scripts in HTML\nDESCRIPTION: This HTML snippet illustrates how to include deck.gl pre-bundled JavaScript files from a CDN via script tags. It allows users to operate deck.gl components like HexagonLayer without npm installation or bundling tools, facilitating quick prototyping in web pages. Multiple options include the full deck.gl bundle or individual core, layers, and aggregation layers scripts.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/hexagon-layer.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/aggregation-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Mesh Coloring for Debugging with _getMeshColor in deck.gl (JavaScript)\nDESCRIPTION: The `_getMeshColor` callback allows developers to control the color of mesh tiles dynamically based on properties of the `tileHeader` object. Returning an array `[r, g, b]` with values from 0-255, this function enables visual debugging in I3S mesh formats (applied only to tiles with format `mesh`). The default returns white `[255, 255, 255]`, but a custom function can assign colors for different tile attributes. No dependencies required; used exclusively for I3S debugging scenarios.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-3d-layer.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n_getMeshColor: (tileHeader) => [255, 255, 255]\n```\n\n----------------------------------------\n\nTITLE: Implementing MVTLayer with TypeScript in deck.gl\nDESCRIPTION: TypeScript implementation of an MVTLayer with proper type definitions for feature properties, enhancing code safety with strongly typed feature properties and picking info.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/mvt-layer.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {MVTLayer, MVTLayerPickingInfo} from '@deck.gl/geo-layers';\nimport type {Feature, Geometry} from 'geojson';\n\ntype PropertiesType = {\n  name?: string;\n  rank: number;\n  layerName: string;\n  class: string;\n};\n\nconst layer = new MVTLayer<PropertiesType>({\n  id: 'MVTLayer',\n  data: [\n    'https://tiles-a.basemaps.cartocdn.com/vectortiles/carto.streets/v1/{z}/{x}/{y}.mvt'\n  ],\n  minZoom: 0,\n  maxZoom: 14,\n  getFillColor: (f: Feature<Geometry, PropertiesType>) => {\n    switch (f.properties.layerName) {\n      case 'poi':\n        return [255, 0, 0];\n      case 'water':\n        return [120, 150, 180];\n      case 'building':\n        return [218, 218, 218];\n      default:\n        return [240, 240, 240];\n    }\n  },\n  getLineWidth: (f: Feature<Geometry, PropertiesType>) => {\n    switch (f.properties.class) {\n      case 'street':\n        return 6;\n      case 'motorway':\n        return 10;\n      default:\n        return 1;\n    }\n  },\n  getLineColor: [192, 192, 192],\n  getPointRadius: 2,\n  pointRadiusUnits: 'pixels',\n  stroked: false,\n  picking: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: MVTLayerPickingInfo<PropertiesType>) => object && (object.properties.name || object.properties.layerName),\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating HeatmapTileLayer via CDN Scripts (JavaScript in Browser)\nDESCRIPTION: Demonstrates creating a new HeatmapTileLayer object using the global deck.carto namespace after loading deck.gl and associated CARTO scripts via CDN in an HTML page. The code uses the browser-compatible API, passing an options object to the constructor (empty in this example, but can be configured with data and other properties). Requires all dependencies loaded via script tags in proper order. Outputs an instance usable in deck.gl visualization code.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/heatmap-tile-layer.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.carto.HeatmapTileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Importing PlotLayer from deck.gl (JavaScript)\nDESCRIPTION: Demonstrates how to import the PlotLayer component from its module file in a JavaScript or React project, which is required before using any of its configuration options or adding it to a deck.gl layer stack. No additional dependencies are required for the import itself, but usage of axes and labeling features requires the d3-scale library. Input: none. Output: PlotLayer is made available for further use.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/plot/plot-layer/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PlotLayer from './plot-layer';\n```\n\n----------------------------------------\n\nTITLE: Initializing PointCloudLayer in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize and use the PointCloudLayer in a deck.gl application. It imports necessary modules and configures the layer with data, accessors for color, normal, and position, point size, coordinate system, and picking behavior.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/point-cloud-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\n\nconst layer = new PointCloudLayer({\n  id: 'PointCloudLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/pointcloud.json',\n  \n  getColor: d => d.color,\n  getNormal: d => d.normal,\n  getPosition: d => d.position,\n  pointSize: 2,\n  coordinateOrigin: [-122.4, 37.74],\n  coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && object.position.join(', '),\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Viewport-Based Filtering\nDESCRIPTION: This snippet demonstrates interactive data filtering using `ipywidgets` and `pydeck`'s event handlers. It defines a function `filter_by_bbox` to check if a point is within a given bounding box, used for filtering. The `filter_by_viewport` function filters data based on the current viewport and updates an HTML widget with the count of points within the viewport. The main dependencies are `ipywidgets` and `pydeck`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/03 - Event handlers and data selection in pydeck.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ipywidgets import HTML\n\ntext = HTML(value='Points in viewport:')\nlayer = pdk.Layer('ScatterplotLayer', df, get_position=['lng', 'lat'], get_fill_color=[255, 0, 0], get_radius=100)\nr = pdk.Deck(layer, initial_view_state=viewport)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef filter_by_bbox(row, west_lng, east_lng, north_lat, south_lat):\n    return west_lng < row['lng'] < east_lng and south_lat < row['lat'] < north_lat\n\n\ndef filter_by_viewport(widget_instance, payload):\n    try:\n        west_lng, north_lat = payload['data']['nw']\n        east_lng, south_lat = payload['data']['se']\n        filtered_df = df[df.apply(lambda row: filter_by_bbox(row, west_lng, east_lng, north_lat, south_lat), axis=1)]\n        text.value = 'Points in viewport: %s' % int(filtered_df.count()['lng'])\n    except Exception as e:\n        text.value = 'Error: %s' % e\n\nr.deck_widget.on_view_state_change(filter_by_viewport)\ndisplay(text)\nr.show()\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with NPM/Yarn (Bash)\nDESCRIPTION: This snippet provides commands to install project dependencies using either npm or yarn package managers. It should be executed in the project's root directory.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/widgets-example-9.2/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This code snippet demonstrates how to install project dependencies using npm (Node Package Manager).  It is a command that must be executed in the project's root directory after cloning or copying the project files.  The command will install all dependencies listed in the project's package.json file, ensuring the application has all necessary packages and libraries.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/image-tile/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck.gl with SimpleMeshLayer and OBJ Mesh (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript version of initializing a deck.gl SimpleMeshLayer with data and an OBJ mesh. It includes type definitions for the data objects (BartStation) and the picking info, enhancing type safety. It loads data and mesh from URLs and configures the layer's accessors.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/simple-mesh-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {OBJLoader} from '@deck.gl/obj';\n\ntype BartStation = {\n  name: string;\n  entries: number;\n  exits: number;\n  coordinates: [longitude: number, latitude: number];\n};\n\nconst layer = new SimpleMeshLayer<BartStation>({\n  id: 'SimpleMeshLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-stations.json',\n  \n  getColor: (d: BartStation) => [Math.sqrt(d.exits), 140, 0],\n  getOrientation: (d: BartStation) => [0, Math.random() * 180, 0],\n  getPosition: (d: BartStation) => d.coordinates,\n  mesh: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/humanoid_quad.obj',\n  sizeScale: 30,\n  pickable: true,\n  loaders: [OBJLoader]\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<BartStation>) => object && object.name,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Using generateLayerTests for Automated Layer Testing in deck.gl\nDESCRIPTION: Shows how to use the generateLayerTests utility to automatically create test cases for a layer based on its default props. This approach is useful for conformance testing of layer implementations and verifies layer initialization and rendering behavior.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/testing.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport test from 'tape-promise/tape';\nimport {testLayer, generateLayerTests} from '@deck.gl/test-utils';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\ntest('GeoJsonLayer#tests', t => {\n  \n  const testCases = generateLayerTests({\n    Layer: GeoJsonLayer,\n    sampleProps: {\n      data: SAMPLE_GEOJSON\n    },\n    assert: ({layer, subLayers}) => {\n      t.ok(layer.state.features, 'should update features');\n      t.is(subLayers.length, layer.props.stroked ? 2 : 1, 'correct number of sublayers');\n    }\n  });\n\n  testLayer({Layer: GeoJsonLayer, testCases});\n\n  t.end();\n});\n```\n\n----------------------------------------\n\nTITLE: GLSL Uniform Migration to UBO\nDESCRIPTION: This snippet illustrates the migration from global GLSL uniforms to Uniform Buffer Objects (UBOs). It shows how to declare a uniform within a UBO block and how to access it within a shader. This is required when migrating deck.gl to WebGPU.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n// Global uniform\nuniform float opacity;\n\n// UBO\nuniform layerUniforms {\n  uniform float opacity;\n} layer;\n```\n\n----------------------------------------\n\nTITLE: Switching from Pure JS to React-Wrapped ZoomWidget (React JSX Diff)\nDESCRIPTION: This diff snippet illustrates the code changes needed to migrate from using the ZoomWidget directly from '@deck.gl/widgets' in JavaScript to using the React-wrapped ZoomWidget from '@deck.gl/react'. It shows import statement changes and how to replace the widgets prop on <DeckGL> with a direct JSX <ZoomWidget/> child component, enabling idiomatic React usage and prop passing.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/overview.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-import { ZoomWidget } from '@deck.gl/widgets';\n+import { ZoomWidget } from '@deck.gl/react';\n\n-<DeckGL widgets={[new ZoomWidget()]}> \n+<DeckGL>\n+  <ZoomWidget/>\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Color Assignment and Normalization\nDESCRIPTION: This snippet assigns random colors to each group in the data, normalizes the color values by dividing by 255, and creates a 'color' column containing lists of normalized color values.  It then removes the 'group' column and prints the first few rows.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/07 - Binary Transport.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncolors = pdk.data_utils.assign_random_colors(nodes[\"group\"])\n# Divide by 255 to normalize the colors\n# Specify positions and colors as columns of lists\nnodes[\"color\"] = nodes.apply(\n    lambda row: [c / 255 for c in colors.get(row[\"group\"])], axis=1\n)\n# Remove unused column\ndel nodes[\"group\"]\nnodes.head()\n```\n\n----------------------------------------\n\nTITLE: Adding LAS/LAZ File Support to deck.gl PointCloudLayer Using LASLoader - TypeScript\nDESCRIPTION: Demonstrates importing LASLoader from loaders.gl to parse LAS/LAZ point cloud files within a PointCloudLayer. The loaders prop grants support for specialized 3D data formats, enabling deck.gl to visualize volumetric and LIDAR data seamlessly.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {LASLoader} from '@loaders.gl/las';\n\nnew PointCloudLayer({\n  mesh: '/path/to/pointcloud.laz',\n  loaders: [LASLoader]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl with ScatterplotLayer - TypeScript\nDESCRIPTION: This TypeScript snippet initializes a deck.gl instance and imports the ScatterplotLayer. It sets up the basic structure for rendering a scatterplot. This is the setup code used by following snippets.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [longitude: number, latitude: number];\n};\n\nconst deckInstance = new Deck({...});\n```\n\n----------------------------------------\n\nTITLE: Handling UpdateTriggers in Composite Layer in JavaScript\nDESCRIPTION: Adding updateTriggers handling to the renderLayers method to ensure proper updating of accessors when data changes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/composite-layers.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass LabeledIconLayer extends CompositeLayer {\n  renderLayers() {\n    return [\n      // the icons\n      new IconLayer({\n        ...\n        updateTriggers: {\n          getPosition: this.props.updateTriggers.getPosition,\n          getIcon: this.props.updateTriggers.getIcon,\n          getSize: this.props.updateTriggers.getIconSize,\n          getColor: this.props.updateTriggers.getIconColor\n        }\n      }),\n      // the labels\n      new TextLayer({\n        ...\n        updateTriggers: {\n          getPosition: this.props.updateTriggers.getPosition,\n          getText: this.props.updateTriggers.getText,\n          getSize: this.props.updateTriggers.getTextSize,\n          getColor: this.props.updateTriggers.getTextColor\n        }\n      })\n    ];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Class Theming with CSS and TypeScript\nDESCRIPTION: This snippet shows how to define a custom class in CSS (`.my-class`) and apply it to a widget instance in TypeScript (using the `className` property). This allows for more complex styling scenarios beyond just CSS variables or inline styles.  The example sets the `--button-size` variable to `48px` within the custom class.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/styling.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.my-class {\n    --button-size: 48px;\n}\n```\n\n----------------------------------------\n\nTITLE: DeckGL with Map and Maplibre\nDESCRIPTION: This snippet shows how to integrate `DeckGL` with a base map from `react-map-gl`. It imports `DeckGL` and the `Map` component from `react-map-gl/maplibre` and also imports the stylesheet for the maplibre-gl. It defines an `App` component that renders a `DeckGL` component including a basemap. The initial view state is set, and the `controller` prop is set to `true` to enable user interaction. The  `Map` component is used as a child of `DeckGL` and sets the mapStyle property.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/deckgl.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {Map} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nconst App = (data) => (\n  <DeckGL\n    initialViewState={{longitude: -122.45, latitude: 37.78, zoom: 12}}\n    controller={true}\n    layers={[new ScatterplotLayer({data})]}\n  >\n    <Map mapStyle=\"https://basemaps.cartocdn.com/gl/positron-gl-style/style.json\" />\n  </DeckGL>\n);\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript H3HexagonLayer type definition\nDESCRIPTION: This TypeScript snippet shows how to create an instance of `H3HexagonLayer` using the `H3HexagonLayerProps` type for properties and the generic `DataT` type for data. It defines the expected types of props for the layer. This approach is for strongly-typed use cases of the library.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-hexagon-layer.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport {H3HexagonLayer} from '@deck.gl/geo-layers';\nimport type {H3HexagonLayerProps} from '@deck.gl/geo-layers';\n\nnew H3HexagonLayer<DataT>(...props: H3HexagonLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Providing a getPickingInfo Callback for Non-Iterable Binary Data in ScatterplotLayer - JavaScript\nDESCRIPTION: Illustrates specifying a `getPickingInfo` callback to reconstruct a valid `object` for picking events when `data` is a non-iterable binary object. This function uses the index to access the binary buffer, populating the picked object's position, radius, and color via subarrays. It ensures interactivity features like picking correctly interpret binary data representations in deck.gl layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/binary-data-rfc.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ScatterplotLayer({\n  ...\n  getPickingInfo: ({info, data}) => {\n    const i = info.index * 6;\n    info.object = {\n      position: data.src.subarray(i, i + 2),\n      radius: data.src[i + 2],\n      color: data.src.subarray(i + 3, i + 6)\n    };\n    return info;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Tooltip (React)\nDESCRIPTION: This snippet demonstrates rendering a custom tooltip within a React component by using React state to manage the tooltip's visibility and position. The `useState` hook is used to store the `PickingInfo` object, and the tooltip is rendered conditionally based on the presence of a hovered object.  CSS styles are applied to position and style the tooltip.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_28\n\nLANGUAGE: react\nCODE:\n```\nimport React, {useState} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {PickingInfo} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [longitude: number, latitude: number];\n  message: string;\n};\n\nconst tooltipStyle: React.CSSProperties = {\n  position: 'absolute',\n  zIndex: 1,\n  pointerEvents: 'none'\n};\n\nfunction App() {\n  const [hoverInfo, setHoverInfo] = useState<PickingInfo<DataType>>();\n\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      data: [\n        {position: [-122.45, 37.78], message: 'Hover over me'}\n      ],\n      getPosition: (d: DataType) => d.position,\n      getRadius: 1000,\n      getFillColor: [255, 255, 0],\n      // Required to enable picking\n      pickable: true,\n      // Update app state\n      onHover: info => setHoverInfo(info)\n    })\n  ];\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.45,\n      latitude: 37.78,\n      zoom: 12\n    }}\n    controller\n    layers={layers} >\n      {hoverInfo.object && (\n        <div style={{...tooltipStyle, left: hoverInfo.x, top: hoverInfo.y}}>\n          { hoverInfo.object.message }\n        </div>\n      )}\n  </DeckGL>;\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle with npm\nDESCRIPTION: Executes the production build process using Webpack, orchestrated by an npm script. This command generates optimized application files and writes them to the disk, ready for deployment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/frustum-cull/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting Private CARTO Credentials with API Key - JavaScript\nDESCRIPTION: Configures both the CARTO username and API key using the setDefaultCredentials() function to allow access to private datasets. Requires the '@deck.gl/carto' package or CARTO integration, and a valid API key generated from the CARTO dashboard. Accepts username and apiKey parameters as strings. Credentials should be kept secure and not hardcoded in production code.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/carto-sql/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetDefaultCredentials({\n  username: '<username>',\n  apiKey: '<api_key>\n});\n\n```\n\n----------------------------------------\n\nTITLE: Building deck.gl Gallery for Publishing (bash)\nDESCRIPTION: Runs the npm build script to generate the static files for the deck.gl gallery. The output is placed in the 'dist' directory, ready for deployment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/gallery/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Getting Layer IDs in deck.gl\nDESCRIPTION: This code snippet proposes a method to retrieve an array of layer IDs in deck.gl.  This is useful for iterating through the layers and controlling their rendering order, especially when integrating with external rendering systems like Mapbox.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.2/mapbox-custom-layer-rfc.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst layerIds = deck.getLayerIds();\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl scripts using HTML\nDESCRIPTION: This snippet shows how to include pre-bundled deck.gl scripts in an HTML file. It includes core, layers and extensions modules, making the PathStyleExtension available for use in web applications.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/path-style-extension.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/extensions@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing deck.gl ArcGIS integration classes in JavaScript\nDESCRIPTION: JavaScript code showing how to import deck.gl ArcGIS integration classes based on whether you're using esri-loader or @arcgis/core.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/arcgis/overview.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// if using with esri-loader\nimport {loadArcGISModules} from '@deck.gl/arcgis';\n// if using with @arcgis/core\nimport {DeckLayer} from '@deck.gl/arcgis';\n```\n\n----------------------------------------\n\nTITLE: TypeScript example: setting up MapboxOverlay with interleaved mode\nDESCRIPTION: This snippet demonstrates how to initialize a MapboxOverlay in interleaved mode using TypeScript. It creates a map instance, adds a deck.gl overlay with a scatterplot layer, and sets up the layer to render beneath map labels for proper occlusion. Dependencies include '@deck.gl/mapbox', '@deck.gl/layers', and 'maplibre-gl'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/base-maps/using-with-maplibre.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MapboxOverlay} from '@deck.gl/mapbox';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {Map} from 'maplibre-gl';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nconst map = new Map({\n  container: 'map',\n  style: 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json',\n  center: [0.45, 51.47],\n  zoom: 11\n});\n\nawait map.once('load');\n\nconst deckOverlay = new MapboxOverlay({\n  interleaved: true,\n  layers: [\n    new ScatterplotLayer({\n      id: 'deckgl-circle',\n      data: [\n        {position: [0.45, 51.47]}\n      ],\n      getPosition: d => d.position,\n      getFillColor: [255, 0, 0, 100],\n      getRadius: 1000,\n      beforeId: 'watername_ocean'\n    })\n  ]\n});\n\nmap.addControl(deckOverlay);\n```\n\n----------------------------------------\n\nTITLE: Updating Layer Props Imperatively with deck.setProps (JavaScript)\nDESCRIPTION: This code snippet demonstrates the challenge of updating layer props imperatively using the standard `deck.setProps` method.  It requires repeating all existing props, which can be cumbersome when only a few properties need to be changed. This is especially problematic when data and previous props are no longer easily accessible in the current scope.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/imperative-api-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// First time we set the props\nfetch().then(data => {\n  data = transformData(data);\n  deck.setProps({\n    layers: new ScatterplotLayer({\n      data,\n      getPosition: getPositionBinned\n    }),\n    ... // Other layers\n  });\n}\n\n// Now we update the props\nbutton.onClick(() => {\n  deck.setProps({\n    layers: new ScatterplotLayer({\n      getPosition: getPositionByState, // I just want to change the accessor, but\n      data // I have to repeat all props I already set, but they are out of scope now :(\n    }),\n    // Let's not talk about having to repeat all the other layers I might have created :( :(\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck with initialViewState (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to initialize a deck.gl instance with an `initialViewState`. deck.gl automatically tracks the view states of interactive views, so this is a 'stateful' component approach. It sets the initial longitude, latitude, zoom, pitch, and bearing.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12,\n  pitch: 0,\n  bearing: 0\n};\n\nconst deckInstance = new Deck({\n  initialViewState: INITIAL_VIEW_STATE,\n  controller: true\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Multiply Blend Mode to deck.gl Canvas (CSS)\nDESCRIPTION: Uses the CSS `mix-blend-mode: multiply;` property on deck.gl canvas elements (targeted via a class like `.overlays`). This controls how the transparent deck.gl layer blends with the underlying map content, often improving visual integration by darkening the map while preserving overlay colors and map legend legibility.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/tips-and-tricks.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.overlays canvas {\n  mix-blend-mode: multiply;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving layers with optional filtering in deck.gl\nDESCRIPTION: The getLayers method returns a list of current layer instances, with an optional filter by layer IDs. It performs recursive expansion of composite layers into primitive layers, matching layer IDs by prefix.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer-manager.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst layers = layerManager.getLayers({layerIds = []});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering WMSLayer Demo Component\nDESCRIPTION: Simple React code that imports the WMSLayer demo component from a local file and renders it within the documentation page.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/wms-layer.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './wms-layer';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: React example with specific control features\nDESCRIPTION: In a React component, the code demonstrates how to pass specific control options such as doubleClickZoom and touchRotate via the controller prop. Dependencies include '@deck.gl/react'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nreturn <DeckGL\n  initialViewState={INITIAL_VIEW_STATE}\n  controller={{doubleClickZoom: false, touchRotate: true}}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Registering CartoLayer in Python\nDESCRIPTION: This snippet registers the CartoLayer. This step is necessary to make the CartoLayer available for use within the pydeck framework.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/carto_layer.ipynb#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npdkc.register_carto_layer()\n```\n\n----------------------------------------\n\nTITLE: Specifying a User Data Event Handler in deck.gl Transport Protocol (JSON)\nDESCRIPTION: This snippet outlines the structure for attaching a custom user data object to an onClick handler when defining a ScatterplotLayer in deck.gl's transport protocol. The onClick property receives user-provided data, which will be serialized and returned alongside the triggered event. This approach enables context-aware event handling from the frontend to be surfaced and processed in the backend.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/pydeck-interactive-api-rfc.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"@@type\": 'ScatterplotLayer',\n  \"onClick\": <user_data> // This object will be serialized and passed back with the event.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated `fp64` Prop (Old Syntax)\nDESCRIPTION: Demonstrates the old method (before v7.2) of enabling 64-bit precision using the `fp64: true` prop in conjunction with `COORDINATE_SYSTEM.LNGLAT_DEPRECATED`. This prop was removed in deck.gl v7.2.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/// old\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\n\nnew ScatterplotLayer({\n  coordinateSystem: COORDINATE_SYSTEM.LNGLAT_DEPRECATED,\n  fp64: true,\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Supplying External Buffers Directly (JavaScript)\nDESCRIPTION: This code shows how to supply external buffers directly to a deck.gl layer, bypassing CPU-based packing. The application needs to have knowledge of the layer's internal attribute names, array types, and layouts. It's the most performant approach, but depends on implementation details that are not documented and prone to breakage between minor releases.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/binary-support-improvements-rfc.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n    // binaryData is packed on the server, in the format of [x, y, r, g, b, a]\n    const DATA = {\n      length: binaryData.length / 6,\n      attributes: {\n        instancePositions: {value: binaryData, size: 2, stride: 4 * 6, offset: 0},\n        instanceColors: {value: binaryData, size: 4, stride: 4 * 6, offset: 4 * 2, normalized: true}\n      }\n    };\n\n    new PointCloudLayer({\n      data: DATA,\n      getNormal: [0, 0, 0]\n    });\n```\n\n----------------------------------------\n\nTITLE: Modifying Mercator Projection GLSL Shader Code\nDESCRIPTION: This GLSL snippet returns a projected 2D coordinate vector used in deck.gl's mercator projection. The key change involves modifying the y-component to 'PI + log(tan_fp32(...))' instead of subtracting, fixing the left-handed coordinate issue in common space. This snippet depends on GLSL functions like radians and a custom tan_fp32, and uses the constant PI to convert longitude/latitude to projected coordinates. The output is a vec2 representing mercator coordinates to be used for subsequent coordinate system transformations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/coordinate-spaces-rfc.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nreturn vec2(\n  radians(x) + PI,\n  PI + log(tan_fp32(PI * 0.25 + radians(lnglat.y) * 0.5)) // Note it's now `PI + ...`\n);\n```\n\n----------------------------------------\n\nTITLE: Basic PathLayer Construction with PathLayerProps Type in TypeScript\nDESCRIPTION: Shows the creation of a new PathLayer instance using the generic PathLayerProps interface for typed props. This snippet indicates how to instantiate a PathLayer with generic data type DataT, demonstrating the API surface for advanced usage and typings support. Prerequisite imports from '@deck.gl/layers' are necessary.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/path-layer.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {PathLayer} from '@deck.gl/layers';\nimport type {PathLayerProps} from '@deck.gl/layers';\n\nnew PathLayer<DataT>(...props: PathLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Directional Light with Color, Intensity, Direction - JavaScript\nDESCRIPTION: Creates a new DirectionalLight instance with a specified color (RGB), intensity, and direction vector.  The color defines the light's tint, intensity its strength, and direction the emanation direction.  No external dependencies are explicitly required beyond the deck.gl library itself.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/directional-light.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst directionalLight= new DirectionalLight({\n  color: [128, 128, 0],\n  intensity: 2.0,\n  direction: [0, -100, -100]\n});\n```\n\n----------------------------------------\n\nTITLE: Animation Class Constructor and Methods - JavaScript\nDESCRIPTION: This snippet describes the methods available for the Animation class.  The constructor initializes the animation. The `to()` method adds a keyframe to the animation with a value, time, and optional easing function.  The `loop()` method enables the animation to restart when finished. The `evaluate()` method returns the current state of the animation.  The `isDone()` method returns if the animation is complete.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/generic-layer-prop-animation-rfc.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Animation(startValue);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n- `to({value, time, [easing]})` - add a keyframe\n  + `time` is relative to the starting time (first evaluation)\n  + `easing` is an optional easing function\n- `loop()` - restart from top when done\n- `evaluate({time})` - get the current \"leg\" of the animation, in the form of `{value, transition: {duration, easing}, updateTrigger: {animationId}}`\n- `isDone()` - returns `true` if animation is finished.\n```\n\n----------------------------------------\n\nTITLE: Enabling OrbitController for OrbitView in JavaScript\nDESCRIPTION: Illustrates how to enable the built-in OrbitController for an OrbitView instance by setting the 'controller' property to true during initialization. This allows users to interact with the view using mouse or touch gestures for orbiting, panning, and zooming.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/orbit-view.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst view = new OrbitView({id: '3d-scene', controller: true});\n```\n\n----------------------------------------\n\nTITLE: Defining ScatterplotLayer Accessors React/DeckGL TSX\nDESCRIPTION: This React (TSX) snippet demonstrates configuring a deck.gl ScatterplotLayer within a `DeckGL` component, where the `getFillColor` accessor depends on external component props (`maleColor`, `femaleColor`). It illustrates the default behavior where attribute updates are not triggered by changes to these props alone if the `data` prop remains the same.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {Color} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [x: number, y: number];\n  gender: 'M'|'F';\n};\nconst data: DataType[] = [...];\nconst deckInstance = new Deck({...});\n\nfunction App({maleColor, femaleColor}: {\n  maleColor: Color;\n  femaleColor: Color;\n}) {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      getPosition: (d: DataType) => d.position;\n      getFillColor: (d: DataType) => d.gender === 'M' ? maleColor : femaleColor\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Interaction Test Example\nDESCRIPTION: Illustrates the usage of InteractionTestRunner with a sample test case. Defines test events (drag) and lifecycle hooks (onBeforeEvents, onAfterEvents) to interact with a deck.gl instance and validate viewport changes. The example shows how to create a deck.gl instance with initial view state and controller enabled, then add the test cases and run them.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/test-utils/interaction-test-runner.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {InteractionTestRunner} = require('@deck.gl/test-utils');\n\nconst TEST_CASES = [\n  {\n    name: 'MapController',\n    events: [\n      {type: 'drag', startX: 400, startY: 200, endX: 300, endY: 200, steps: 3}\n    ],\n    onBeforeEvents: ({deck}) => ({viewport: deck.getViewports[0]}),\n    onAfterEvents: ({deck, context}) => {\n      const oldViewport = context.viewport;\n      const newViewport = deck.getViewports[0];\n      t.ok(newViewport.longitude > oldViewport.longitude, 'map moved');\n    }\n  }\n];\n\nnew TestRender({\n  width: 800,\n  height: 600,\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  controller: true\n})\n  .add(TEST_CASES)\n  .run()\n  .then(window.browserTestDriver_finish);\n```\n\n----------------------------------------\n\nTITLE: RasterTileLayer instantiation (ES Module)\nDESCRIPTION: This demonstrates how to create a new RasterTileLayer instance using ES module imports.  It imports the RasterTileLayer from the `@deck.gl/carto` module. Requires that @deck.gl/carto is installed as a dependency.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/raster-tile-layer.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {RasterTileLayer} from '@deck.gl/carto';\nnew RasterTileLayer({});\n```\n\n----------------------------------------\n\nTITLE: WebGLAggregator Constructor Syntax in TypeScript\nDESCRIPTION: Demonstrates the constructor signature for WebGLAggregator, including all required and optional parameters. This shows how to initialize a new WebGLAggregator instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/webgl-aggregator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew WebGLAggregator(props);\n```\n\n----------------------------------------\n\nTITLE: Example fp32 Vertex Shader Using Current Projection Functions in GLSL\nDESCRIPTION: This GLSL snippet demonstrates a current fp32 vertex shader implementation that uses `project_position` and `project_to_clipspace` functions to compute clipspace positions. It projects instance positions, applies local offsets, calculates world positions, transforms to clipspace, and computes lighting weights. This shader relies on 32-bit projection APIs and does not handle 64-bit precision positions explicitly.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/unified-32-and-64-bit-project-api-rfc.md#_snippet_1\n\nLANGUAGE: GLSL\nCODE:\n```\nattribute vec3 positions;\nattribute vec3 instancePositions;\nattribute vec3 instanceNormals;\n\nvarying float vLightWeight;\n\nmain() {\n  vec3 projected_coord = project_position(instancePositions);\n  vec4 position_worldspace = vec4(projected_coord + positions, 1.0);\n\n  gl_Position = project_to_clipspace(position_worldspace);\n\n  vLightWeight = getLightWeight(position_worldspace.xyz, project_normal(instanceNormals));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating GPU Tables with Apache Arrow in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to load tabular data using loaders.gl's ArrowLoader, create a GPUTable from the loaded Apache Arrow table, and perform updates by slicing rows or removing columns followed by calling 'gpuTable.setTable(table)'. It assumes the presence of the GPUTable class that manages GPU buffer uploads for chunked columnar tables. Key dependencies include '@loaders.gl/arrow' for parsing Arrow data and a GPU table management system. The snippet emphasizes efficient handling of chunked data where only changed portions of the table need re-uploading, facilitating incremental updates on the GPU.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/roadmaps/gpu-table-roadmap.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ArrowLoader} from `@loaders.gl/arrow`;\nconst table = parse(..., ArrowLoader, {});\nconst gpuTable = new GPUTable(table);\ntable = table.slice(1000, 3000); // can drop chunks\ngpuTable.setTable(table);\ntable = table.removeColumn('price'); // drops chunks\ngpuTable.setTable(table);\n```\n\n----------------------------------------\n\nTITLE: Subclassing Multiple Deck.gl Layers for GeoJsonLayer Customization in JavaScript\nDESCRIPTION: Shows how to create custom subclasses of ScatterplotLayer, PathLayer, and SolidPolygonLayer with similar filtering functionality, then configure GeoJsonLayer to use these subclasses as its sublayer types. This approach highlights the complexity and redundancy involved in subclassing multiple layers to propagate shared behavior.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/layer-extensions.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ScatterplotLayer, PathLayer, SolidPolygonLayer} from '@deck.gl/layers';\n\nclass FilteredScatterplotLayer extends ScatterplotLayer {\n  // same code\n}\nclass FilteredPathLayer extends PathLayer {\n  // same code\n}\nclass FilteredSolidPolygonLayer extends SolidPolygonLayer {\n  // same code\n}\n\nnew GeoJsonLayer({\n  ...\n  _subLayerProps: {\n    points: {type: FilteredScatterplotLayer},\n    linestrings: {type: FilteredPathLayer},\n    'polygons-stroke': {type: FilteredPathLayer},\n    'polygons-fill': {type: FilteredSolidPolygonLayer}\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing core and layers package with Yarn\nDESCRIPTION: This command installs `@deck.gl/core` and `@deck.gl/layers` packages selectively with yarn, providing only the necessary dependencies for rendering `PointCloudLayer`. This reduces the overall size of the project and helps managing dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @deck.gl/core @deck.gl/layers\n```\n\n----------------------------------------\n\nTITLE: Constructing PathLayer Using Pre-Bundled scripts in JavaScript\nDESCRIPTION: Example demonstrating how to instantiate a PathLayer object directly using the globally exposed deck object when using pre-bundled scripts included from CDN in HTML. This snippet is useful for quick prototyping or projects without build pipelines.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/path-layer.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.PathLayer({});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment\nDESCRIPTION: These commands checkout the master branch, bootstrap the project using yarn, and run the tests. They are the foundational commands for setting up the deck.gl development environment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\nyarn bootstrap\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Defining Feature and Global Feature IDs (TypeScript)\nDESCRIPTION: This snippet shows how to define feature IDs and global feature IDs, crucial for mapping vertices to the corresponding elements in the properties array, and uniquely identifying a feature within a FeatureCollection. It showcases the structure of the `featureIds` and `globalFeatureIds` fields within `BinaryPointFeature`. It is specified per-vertex. These IDs are essential for linking vertices to features and handling feature-level information. The output will be `BinaryPointFeature` object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ndata.points = {\n  type: 'Point',\n  // positions\n  featureIds: {value: new Uint16Array([0, 1, 1, 1, 2]), size: 1}, // this vertex belongs to the Nth point-type feature\n  globalFeatureIds: {value: new Uint16Array([0, 3, 3, 3, 4]), size: 1}, // this vertex belongs to the Nth feature\n  // numericProps\n  // properties\n } as BinaryPointFeature\n```\n\n----------------------------------------\n\nTITLE: Initializing GeohashLayer in TypeScript with deck.gl\nDESCRIPTION: This TypeScript example defines data types and creates a GeohashLayer with type safety, loading geohash data and configuring properties similar to the JavaScript version. It shows how to instantiate the layer with typed data and integrate it into a Deck instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/geohash-layer.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, PickingInfo} from '@deck.gl/core';\nimport {GeohashLayer} from '@deck.gl/geo-layers';\n\ntype DataType = {\n  geohash: string;\n  value: number;\n};\n\nconst layer = new GeohashLayer<DataType>({\n  id: 'GeohashLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.geohashes.json',\n  extruded: true,\n  getGeohash: (d: DataType) => d.geohash,\n  getElevation: (d: DataType) => d.value,\n  getFillColor: (d: DataType) => [d.value * 255, (1 - d.value) * 128, (1 - d.value) * 255],\n  elevationScale: 1000,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}: PickingInfo<DataType>) => object && `${object.geohash} value: ${object.value}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Continuous Camera Rotation React\nDESCRIPTION: This React example implements continuous camera rotation using `@deck.gl/react` and `@deck.gl/core`. It utilizes the `useState` and `useCallback` hooks for state management and defining the `rotateCamera` function, respectively.  It requires  `@deck.gl/react` and `@deck.gl/core`.  The `rotateCamera` function continuously updates the bearing within `initialViewState`'s settings.  The rotation continues after the transition using the `onTransitionEnd` callback.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {LinearInterpolator, MapViewState} from '@deck.gl/core';\n\nfunction App() {\n  const [initialViewState, setInitialViewState] = useState<MapViewState>({\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  });\n\n  const rotateCamera = useCallback(() => {\n    setInitialViewState(viewState => ({\n      ...viewState,\n      bearing: viewState.bearing + 120,\n      transitionDuration: 1000,\n      transitionInterpolator: new LinearInterpolator(['bearing']),\n      onTransitionEnd: rotateCamera\n    }));\n  }, []);\n\n  return <DeckGL\n    initialViewState={initialViewState}\n    controller\n    onLoad={rotateCamera}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying DeckLayer with ArcGIS API JavaScript\nDESCRIPTION: This snippet shows how to instantiate a `DeckLayer` with a single ScatterplotLayer. It configures the ScatterplotLayer with sample data and styling. The `DeckLayer` is then added to an ArcGIS `Map`, which is subsequently displayed in a `MapView` instance, demonstrating how to render Deck.gl layers within an ArcGIS map context.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/arcgis/deck-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {DeckLayer} from '@deck.gl/arcgis';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport ArcGISMap from '@arcgis/core/Map';\nimport MapView from '@arcgis/core/views/MapView';\n\nconst layer = new DeckLayer({\n  'deck.layers': [\n    new ScatterplotLayer({\n      data: [\n        {position: [0.119, 52.205]}\n      ],\n      getPosition: d => d.position,\n      getColor: [255, 0, 0],\n      radiusMinPixels: 20\n    })\n  ]\n});\n\nconst mapView = new MapView({\n  container: \"viewDiv\",\n  map: new ArcGISMap({\n    basemap: \"dark-gray-vector\",\n    layers: [layer]\n  }),\n  center: [0.119, 52.205],\n  zoom: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling OrthographicView Controller in JavaScript\nDESCRIPTION: Shows how to instantiate an OrthographicView and enable the default OrthographicController by setting the `controller` parameter to `true`. This allows built-in interaction like panning and zooming for the view.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/orthographic-view.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst view = new OrthographicView({id: '2d-scene', controller: true});\n```\n\n----------------------------------------\n\nTITLE: Initializing IconLayer with Dynamically Loaded Icons in JavaScript\nDESCRIPTION: This JavaScript code demonstrates the usage of `IconLayer` with dynamically loaded icons.  The `getIcon` function returns an object containing the `url`, `width`, `height`, `anchorY`, and `mask` properties.  `iconAtlas` and `iconMapping` are not needed in this case. The code also defines how the icon is positioned and colored.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.4/icon-layer-dynamic-image-sources.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DeckGL, {IconLayer} from 'deck.gl';\n\nconst ICON_MAPPING = {\n  marker: {x: 0, y: 0, width: 32, height: 32, mask: true}\n};\n\nconst App = ({data, viewport}) => {\n\n  /**\n   * Data format:\n   * [\n   *   {name: 'Colma (COLM)', avatar_url: 'https://data/colma_avatar.png', address: '365 D Street, Colma CA 94014', exits: 4214, coordinates: [-122.466233, 37.684638]},\n   *   ...\n   * ]\n   */\n  const layer = new IconLayer({\n    id: 'icon-layer',\n    data,\n    pickable: true,\n    sizeScale: 15,\n    getPosition: d => d.coordinates,\n    \n    // `iconAtlas` and `iconMapping` are not needed\n    // return an object \n    getIcon: d => ({\n      url: d.avatar_url,\n      width: 128,\n      height: 128,\n      anchorY: 128,\n      mask: true\n    }),\n    \n    getSize: d => 5,\n    getColor: d => [Math.sqrt(d.exits), 140, 0]\n  });\n\n  return (<DeckGL {...viewport} layers={[layer]} />);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies for TerrainLayer\nDESCRIPTION: Commands for installing the necessary npm packages to use TerrainLayer, including the core deck.gl package and specific layer modules.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/terrain-layer.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/mesh-layers @deck.gl/geo-layers\n```\n\n----------------------------------------\n\nTITLE: Include deck.gl Pre-bundled Scripts (HTML)\nDESCRIPTION: These HTML script tags include the pre-bundled deck.gl library or its core and extensions packages.  This allows the use of the library without a build process.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/terrain-extension.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/extensions@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Instantiating ScreenGridLayer with script tags - JavaScript\nDESCRIPTION: This snippet shows how to instantiate the ScreenGridLayer when using pre-bundled scripts directly in HTML. It uses `deck.ScreenGridLayer` after the deck.gl library is loaded. This is an alternative to using module imports via npm or yarn.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/screen-grid-layer.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nnew deck.ScreenGridLayer({});\n```\n\n----------------------------------------\n\nTITLE: Instantiating PointCloudLayer using pre-bundled scripts\nDESCRIPTION: This JavaScript snippet provides example of how to create an instance of PointCloudLayer using deck.gl scripts.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/point-cloud-layer.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nnew deck.PointCloudLayer({});\n```\n\n----------------------------------------\n\nTITLE: Implementing the clear Property in View Class for deck.gl\nDESCRIPTION: The clear property controls clearing the contents (pixels) of the viewport. It can be specified as a boolean or an object with color, depth, and stencil properties, allowing fine-grained control over which buffers are cleared and how. This is particularly useful when rendering overlapping viewports.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.1/view-class-extension-rfc.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n##### `clear`: Boolean | Object\n\nClears the contents (pixels) of the viewport. If `true` clears color and depth buffers.\n\n* `color` (Boolean or Array) - if not `false`, clears all active color buffers with either the provided color or the currently set clear color.\n* `depth` (Boolean)  - if `true`, clears the depth buffer.\n* `stencil` (Boolean) - if `true` clears the stencil buffer.\n\nNote that the screen is cleared before each render, and viewports should only clear if they are e.g. rendering on top of another viewport, want to change the background coloer etc. Clearing, while cheap, is not totally free.\n\n\n* The value of the `View.clear` property is used as argument to the luma.gl `clear` function:\n* The view's scissor box bounds the cleared region.\n* The pixel ownership test, the scissor test, dithering, and the buffer writemasks affect the operation of `clear`.\n* Alpha function, blend function, logical operation, stenciling, texture mapping, and depth-buffering are ignored by `clear`.\n```\n\n----------------------------------------\n\nTITLE: Starting Example Against Local Deck.gl Source with NPM\nDESCRIPTION: This command runs the example using the local deck.gl source code in the cloned repository, rather than the published version. This is useful for testing changes to deck.gl.  It uses the \"start-local\" script defined in the example's package.json file. Must run `npm install` or `yarn` in the root deck.gl directory first.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Rendering multiple layers with deck.gl in TypeScript\nDESCRIPTION: This example shows how to create and configure multiple layers in TypeScript, including type annotations for the data. It illustrates the use of typed accessor functions and demonstrates initializing a deck.gl Deck instance with multiple layers for geographic visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-layers.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, LayersList} from '@deck.gl/core';\nimport {ScatterplotLayer, TextLayer} from '@deck.gl/layers';\n\ntype Flight = {\n  callSign: string;\n  lon: number;\n  lat: number;\n  alt: number;\n};\n\n// a JSON file of flight locations in the shape of Flight[]\nconst flights = '/path/to/data.json';\n\nconst layers: LayersList = [\n  new ScatterplotLayer<Flight>({\n    id: 'circles',\n    data: flights,\n    getPosition:  (d: Flight) => [d.lng, d.lat, d.alt],\n    getFillColor: [255, 255, 255],\n    getRadius: 3,\n    radiusUnits: 'pixels'\n  }),\n  new TextLayer<Flight>({\n    id: 'labels',\n    data: flights,\n    getText: (d: Flight) => d.callSign,\n    getPosition: (d: Flight) => [d.lng, d.lat, d.alt],\n    getSize: 12\n  })\n];\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 8\n  },\n  controller: true,\n  layers\n});\n```\n\n----------------------------------------\n\nTITLE: Running Layer Browser Example Locally\nDESCRIPTION: These commands navigate to the layer-browser example directory, install dependencies using yarn, and start the example application in local mode. This allows developers to test changes against a running example.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/layer-browser\nyarn\nyarn start-local\n```\n\n----------------------------------------\n\nTITLE: Initializing CPUAggregator Example in TypeScript\nDESCRIPTION: This code snippet demonstrates the instantiation and usage of the CPUAggregator class to create a histogram. It calculates the distribution of \"weight\" based on \"position\" data. It requires the @deck.gl/aggregation-layers package for the CPUAggregator and requires the use of Attributes. It initializes the aggregator with dimensions, bin mapping, and value retrieval functions, then sets the props for the number of data points, aggregation operations, bin size and attributes. Finally, it updates the aggregation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/cpu-aggregator.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {CPUAggregator} from '@deck.gl/aggregation-layers';\n\nconst aggregator = new CPUAggregator({\n  dimensions: 1,\n  getBin: {\n    sources: ['position'],\n    getValue: (data: {position: number}, index: number, options: {binSize: number}) =>\n      [Math.floor(data.position / options.binSize)]\n  },\n  getValue: [\n    {\n      sources: ['weight'],\n      getValue: (data: {weight: number}) => data.weight\n    }\n  ]\n});\n\nconst position = new Attribute(device, {id: 'position', size: 1});\nposition.setData({value: new Float32Array(...)});\nconst weight = new Attribute(device, {id: 'weight', size: 1});\nposition.setData({value: new Float32Array(...)});\n\naggregator.setProps({\n  pointCount: data.length,\n  operations: ['SUM'],\n  binOptions: {\n    binSize: 1\n  },\n  attributes: {position, weight}\n});\n\naggregator.update();\n```\n\n----------------------------------------\n\nTITLE: Filtering Layers (Pre-v8.6 Method) in deck.gl\nDESCRIPTION: Illustrates the `layerFilter` callback implementation prior to deck.gl v8.6. This method required checking potentially generated sublayer IDs (e.g., using `startsWith`) because the filter was invoked for all layers, including nested ones rendered by composite layers. This approach is contrasted with the simpler v8.6+ method.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlayerFilter: ({layer, viewport}) => {\n  if (layer.id.startsWith('regions')) {\n    // regions-points, regions-polygons, etc.\n    return viewport.id === 'main';\n  }\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example: Creating GreatCircleLayer with Props Typing\nDESCRIPTION: Shows usage of TypeScript import syntax to bring in GreatCircleLayer and its props type GreatCircleLayerProps for stricter typing of layer properties. It constructs a new GreatCircleLayer instance with generic DataT to enable users to specify data item types and ensure type-safety when passing props. This snippet highlights type-driven development and is useful in complex Deck.gl applications with advanced TypeScript integration.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/great-circle-layer.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {GreatCircleLayer} from '@deck.gl/geo-layers';\nimport type {GreatCircleLayerProps} from '@deck.gl/geo-layers';\n\nnew GreatCircleLayer<DataT>(...props: GreatCircleLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating CollisionFilterExtension with NPM (JavaScript)\nDESCRIPTION: Illustrates how to import the CollisionFilterExtension from the '@deck.gl/extensions' package and create a new instance when using a module bundler with NPM.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/collision-filter-extension.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {CollisionFilterExtension} from '@deck.gl/extensions';\nnew CollisionFilterExtension();\n```\n\n----------------------------------------\n\nTITLE: Enabling pydeck in Jupyter Notebook (Bash)\nDESCRIPTION: This snippet enables pydeck's notebook extensions in Jupyter Notebook by installing and enabling the pydeck nbextension. This setup is required to allow pydeck visualizations to function correctly inside Jupyter Notebook environments.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/installation.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njupyter nbextension install --sys-prefix --symlink --overwrite --py pydeck\njupyter nbextension enable --sys-prefix --py pydeck\n```\n\n----------------------------------------\n\nTITLE: Rendering SolidPolygonLayer in a React Component (deck.gl, TypeScript/React)\nDESCRIPTION: This snippet details how to integrate SolidPolygonLayer into a React functional component using deck.gl and TypeScript for type safety. The App function creates a SolidPolygonLayer with strongly typed polygon data, and renders a DeckGL component as a React element with the configured layer, interactive controller, and customized tooltip function. Dependencies include @deck.gl/react, @deck.gl/layers, @deck.gl/core, and React. All props align with deck.gl’s expectations, and input data must be compatible with the defined ZipCode type.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/solid-polygon-layer.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {SolidPolygonLayer} from '@deck.gl/layers';\nimport type {PickingInfo} from '@deck.gl/core';\n\ntype ZipCode = {\n  zipcode: number;\n  population: number;\n  area: number;\n  contour: [longitude: number, latitude: number][];\n};\n\nfunction App() {\n  const layer = new SolidPolygonLayer<ZipCode>({\n    id: 'SolidPolygonLayer',\n    data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-zipcodes.json',\n\n    extruded: true,\n    wireframe: true,\n    getPolygon: (d: ZipCode) => d.contour,\n    getElevation: (d: ZipCode) => d.population / d.area / 10,\n    getFillColor: (d: ZipCode) => [d.population / d.area / 60, 140, 0],\n    getLineColor: [80, 80, 80],\n    pickable: true\n  });\n\n  return <DeckGL\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.74,\n      zoom: 11\n    }}\n    controller\n    getTooltip={({object}: PickingInfo<ZipCode>) => object && `${object.zipcode}\\nPopulation: ${object.population}`}\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating GreatCircleLayer Using Pre-Bundled Deck.gl Scripts in JavaScript\nDESCRIPTION: Demonstrates creating a new GreatCircleLayer instance via the global 'deck' object exposed by pre-bundled Deck.gl scripts included in HTML. This example shows the simplest construction syntax without additional properties, assuming the user will configure it later or use default values. This pattern supports environments where module bundling is not used.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/great-circle-layer.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.GreatCircleLayer({});\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl via CDN Scripts in HTML\nDESCRIPTION: Shows how to include the pre-bundled deck.gl scripts directly in an HTML file using CDN links from unpkg. You can include the monolithic bundle or the individual core, layers, and geo-layers scripts.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/wms-layer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Type Import and Initialization Pattern for TileLayer (TypeScript)\nDESCRIPTION: This code demonstrates importing the TileLayer class and TypeScript types for strong typing in deck.gl. It imports both the class and the associated props/picking types, then initializes a new TileLayer using a typed definition for tile data and the TileLayerProps. This pattern is essential for extending or providing custom properties to TileLayer and ensuring that props are type-checked throughout the application. Input is tile data, output is a new TileLayer instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-layer.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {TileLayer} from '@deck.gl/geo-layers';\nimport type {TileLayerProps, TileLayerPickingInfo} from '@deck.gl/geo-layers';\n\nnew TileLayer<TileDataT>(...props: TileLayerProps<TileDataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Using react-map-gl Popup Components Within DeckGL Render Callback - React JSX\nDESCRIPTION: Demonstrates rendering multiple Popup components from react-map-gl as children of DeckGL using a render callback. The callback receives viewport information and dynamically maps over a collection of label objects, each with latitude, longitude, and content properties, to render corresponding Popup components keyed by label id. This pattern supports overlays above the map viewports managed by DeckGL and requires react-map-gl Popup, viewport, and DeckGL layers as dependencies. It exemplifies usage of DeckGL in applications that render interactive map annotations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/react-api-rfc.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DeckGL\n  layers={layers}\n  initialViewState={INITIAL_VIEW_STATE}\n  controller={MapController}\n>\n  {({width, height, viewState, viewport}) => labels.map(label => (\n    <Popup\n      key={label.id}\n      longitude={label.longitude}\n      latitude={label.latitude}\n      viewport={viewport}\n    >\n      {label.content}\n    </Popup>\n  ))}\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Installing Python and creating symlink on MacOS\nDESCRIPTION: These commands install Python using Homebrew and create a symbolic link. A system-wide Python installation is required to run yarn bootstrap on MacOS.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew install python\nsudo ln -s /opt/homebrew/bin/python3 /opt/homebrew/bin/python\n```\n\n----------------------------------------\n\nTITLE: Using testLayer Utility for Unit Testing GeoJsonLayer in deck.gl\nDESCRIPTION: Demonstrates how to use the testLayer utility from @deck.gl/test-utils to test a GeoJsonLayer through a series of prop updates. The example creates test cases that verify layer initialization, data handling, and prop propagation to sublayers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/testing.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport test from 'tape-promise/tape';\nimport {testLayer} from '@deck.gl/test-utils';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\ntest('GeoJsonLayer#tests', t => {\n  testLayer({Layer: GeoJsonLayer, testCases: [\n    // Test case 1\n    {\n      props: {data: []}\n    },\n    // Test case 2\n    {\n      props: {\n        data: SAMPLE_GEOJSON\n      },\n      assert({layer, oldState}) {\n        t.ok(layer.state.features !== oldState.features, 'should update features');\n        t.is(subLayers.length, 2, 'should render 2 subLayers');\n      }\n    },\n    // Test case 3\n    {\n      updateProps: {\n        // will be merged with the previous props\n        lineWidthScale: 3\n      },\n      assert({subLayers}) {\n        const pathLayer = subLayers.find(layer => layer.id.endsWith('linestrings'));\n        t.is(pathLayer.props.widthScale, 3, 'widthScale is passed to sub layer');\n      }\n    }\n  ]});\n\n  t.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Sublayers with Overridable and Non-Overridable Props - JS\nDESCRIPTION: This code snippet illustrates how to render sublayers within a composite layer, distinguishing between overridable and non-overridable properties. The `getSubLayerProps` method merges user-supplied props with the layer's default props, allowing for customization. Non-overridable props, such as `data` and `getPosition`, are passed separately to prevent accidental modification of the layer's internal state.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.4/composite-layer-customization-rfc.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrenderLayers() {\n  const SubLayer = new this.getSubLayerClass('child-layer', ScatterplotLayer);\n  return new SubLayer(\n    // where subLayerProps are merged in\n    this.getSubLayerProps({\n      id: 'child-layer',\n\n      // \"overridable\" props\n      stroked: this.props.stroked,\n      filled: this.props.filled\n    }),\n    {\n      // \"non-overridable\" props\n      data: this.state.data,\n      getPosition: d => d.point\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Layers Using JSONLayer Class in JavaScript\nDESCRIPTION: Illustrates usage of the JSONLayer class from the @deck.gl/json module to create deck.gl layers directly from an array of JSON layer descriptors. It accepts a layer catalog configuration for resolving layer types to classes and a JSON specification containing layer properties. This allows applications to mix JSON-defined layers with programmatic layers, enabling flexible layer composition. The example depends on the @deck.gl/json and @deck.gl/layers packages and requires JSON data describing the layer information.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.1/json-layers-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {JSONLayer} from '@deck.gl/json';\n\nconst layers = [\n  new JSONLayer({\n  \tconfiguration: {layers: require('@deck.gl/layers')},\n  \tjson: require('./us-map.json')\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Test Utilities using npm or Yarn - Bash\nDESCRIPTION: This snippet provides bash commands for installing the @deck.gl/test-utils package as a development dependency. Prerequisites include having Node.js, a package manager (npm or Yarn), and an existing JavaScript project. The commands modify your package.json to add the test utilities in devDependencies, ensuring proper version alignment with deck.gl core packages. Users should verify that both @deck.gl/core and @deck.gl/test-utils are on matching major and minor versions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/test-utils/overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @deck.gl/test-utils\n# or\nyarn add -D @deck.gl/test-utils\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl with camera controls in React using JSX\nDESCRIPTION: Creates a React component that renders a deck.gl visualization with an initial view state and interactive controls enabled via the controller prop. Dependencies include '@deck.gl/react' and '@deck.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {MapViewState} from '@deck.gl/core';\n\nconst INITIAL_VIEW_STATE: MapViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12,\n  pitch: 0,\n  bearing: 0\n};\n\nfunction App() {\n  return <DeckGL\n    initialViewState={INITIAL_VIEW_STATE}\n    controller\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending MapController to Customize Event Handling in JavaScript\nDESCRIPTION: Illustrates subclassing the MapController to override the handleEvent method, adding custom behavior for pan events while delegating other event types to the superclass. The example demonstrates creating a custom controller class named MyMapController that intercepts pan events for special processing, then instantiating a Deck with this custom controller type and an initial view state. Requires importing Deck and MapController from deck.gl core.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/map-controller.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, MapController} from '@deck.gl/core';\n\nclass MyMapController extends MapController {\n\n  handleEvent(event) {\n    if (event.type === 'pan') {\n      // do something\n    } else {\n      super.handleEvent(event);\n    }\n  }\n}\n\nnew Deck({\n  controller: {type: MyMapController},\n  initialViewState: viewState\n})\n```\n\n----------------------------------------\n\nTITLE: Efficient Incremental Data Loading - React\nDESCRIPTION: This React component implements an efficient approach to incremental data loading in deck.gl. Instead of concatenating data, it manages an array of data chunks in the `dataChunks` state. Each chunk is rendered as a separate layer, so when new data arrives, only the new layer's buffers need to be recalculated.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const [dataChunks, setDataChunks] = useState<DataType[][]>([]);\n\n  useEffect(() => {\n    (async () => {\n      let chunk: DataType[];\n      while (chunk = await fetchNextChunk()) {\n        setDataChunks(current => current.concat([chunk]));\n      }\n    })();\n  }, []);\n  \n  const layers = dataChunks.map((chunk: DataType[], chunkIndex: number) =>\n    new ScatterplotLayer<DataType>({\n      // Important: each layer must have a consistent & unique id\n      id: `points-${chunkIndex}`,\n      // If we have 10 100,000-row chunks already loaded and a new one arrive,\n      // the first 10 layers will see no prop change\n      // only the 11th layer's buffers need to be generated\n      data: chunk,\n      getPosition: (d: DataType) => d.position\n    });\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using percentile filtering in deck.gl GPU Aggregation Layer\nDESCRIPTION: The percentile properties filter cells based on their values. Cells with values outside the specified percentile ranges are hidden. These properties are useful for filtering outliers in the visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of using percentile filtering\nnew GPUGridLayer({\n  lowerPercentile: 1,       // Hide bottom 1% of values\n  upperPercentile: 99,      // Hide top 1% of values\n  elevationLowerPercentile: 5,  // Hide bottom 5% for elevation\n  elevationUpperPercentile: 95  // Hide top 5% for elevation\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Applying Fp64Extension in deck.gl Layer - JavaScript\nDESCRIPTION: Demonstrates how to import the GeoJsonLayer and Fp64Extension from the deck.gl library, then create a new GeoJsonLayer with the Fp64Extension enabled in the extensions array. Requires deck.gl core, layers, and extensions packages. The 'data' parameter should be a valid GeoJSON object; extensions expects an array which can include new Fp64Extension instances. Output is a configured GeoJsonLayer instance with increased numerical precision on positional data. Ensure your coordinateSystem prop adheres to Fp64Extension requirements.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fp64-extension.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {Fp64Extension} from '@deck.gl/extensions';\n\nconst layer = new GeoJsonLayer({\n  id: 'geojson-layer',\n  data: GEOJSON,\n  ...\n  extensions: [new Fp64Extension()]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Binary Data for ScatterplotLayer (Inefficient)\nDESCRIPTION: This code constructs a `ScatterplotLayer` using data unpacked from a `Float32Array`. The data is first converted into a JavaScript array, which consumes significant CPU time and memory, particularly for large datasets.  It illustrates inefficient data handling and the creation of intermediate data structures.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DataType = {\n  position: [lon: number, lat: number];\n  radius: number;\n  color: [r: number, g: numer, b: number];\n}\nconst data: DataType[] = [];\nfor (let i = 0; i < binaryData.length; i += 6) {\n  data.push({\n    position: [binaryData[i], binaryData[i + 1]],\n    radius: binaryData[i + 2],\n    color: [binaryData[i + 3], binaryData[i + 4], binaryData[i + 5]]\n  });\n}\n\nconst data = new ScatterplotLayer<DataType>{\n  data,\n  getPosition: (d: DataType) => d.position,\n  getRadius: (d: DataType) => d.radius,\n  getFillColor: (d: DataType) => d.color\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using npm (bash)\nDESCRIPTION: This bash snippet provides the command to install project dependencies using npm. This command downloads and installs all required packages, which are specified in the project's `package.json` file. This step is essential for running the deck.gl and Mapbox example.  It uses the npm package manager.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/mapbox/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and Geo Layers Using npm (Bash)\nDESCRIPTION: This shell snippet shows how to install the main deck.gl library and its modular subpackages using npm. The first command installs the aggregate package, and the second installs individual modules for core layers and geo-specific layers. Prerequisite is Node.js with npm available. Outputs are the dependencies required for running deck.gl and using TileLayer or other composite layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-layer.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers\n```\n\n----------------------------------------\n\nTITLE: Defining VectorTableSourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `VectorTableSourceOptions` type. This object defines the specific options available to the `vectorTableSource` function. These options include `columns`, `spatialDataColumn`, `tableName`, and `aggregationExp`. These options allow users to specify which columns to select, and if the data has a spatial column, to specify it.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntype VectorTableSourceOptions = {\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n  aggregationExp?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SolidPolygonLayer with JSON\nDESCRIPTION: This snippet demonstrates how to use a plain JSON array to provide data to the `SolidPolygonLayer`.  It shows how to define the `data`, `getPolygon`, `getElevation`, and `getFillColor` properties. The `getPolygon` accessor extracts the polygon coordinates, `getElevation` uses the population, and `getFillColor` is a constant color.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/solid-polygon-layer.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst POLYGON_DATA = [\n  {\n     contour: [[-122.4, 37.7], [-122.4, 37.8], [-122.5, 37.8], [-122.5, 37.7], [-122.4, 37.7]],\n     population: 26599\n  },\n  ...\n];\n\nnew SolidPolygonLayer({\n  data: POLYGON_DATA,\n  getPolygon: d => d.contour,\n  getElevation: d => d.population,\n  getFillColor: [0, 100, 60, 160]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Sublayer Rendering in Composite Layer in JavaScript\nDESCRIPTION: Initial implementation of the renderLayers method that creates and returns the IconLayer and TextLayer sublayers with the shared data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/composite-layers.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass LabeledIconLayer extends CompositeLayer {\n  renderLayers() {\n    return [\n      // the icons\n      new IconLayer({\n        data: this.props.data,\n        // TODO\n      }),\n      // the labels\n      new TextLayer({\n        data: this.props.data,\n        // TODO\n      })\n    ];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating DeckGL View with StaticMap - React - JSX\nDESCRIPTION: Presents a React `render` method showing how to use a `StaticMap` component inside a `DeckGL` component. The `viewId` prop on both components is used to associate the `StaticMap` with a specific `deck.gl` view, allowing the map to render using that view's perspective and state.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/view-class-rfc.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n  render() {\n    <DeckGL\n      width={viewportProps.width}\n      height={viewportProps.height}\n      layers={this._renderLayers()}\n      views={[\n        new View({type: FirstPersonViewport, ...}),\n        new View({type: WebMercatorViewport, id: 'basemap', ...})\n      ]}\n     >\n\n      <StaticMap\n        viewId='basemap'\n        {...viewportProps}/>\n\n    </DeckGL>\n  }\n```\n\n----------------------------------------\n\nTITLE: Building Pydeck Documentation using Bash/Make\nDESCRIPTION: These commands navigate to the pydeck documentation directory and use `make` to build the documentation. `make clean` removes previous build files, and `make html` generates the static HTML documentation, typically using Sphinx.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/contributing.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd deck.gl/bindings/pydeck/docs\nmake clean && make html\n```\n\n----------------------------------------\n\nTITLE: Custom refinementStrategy Function\nDESCRIPTION: Defines a custom refinement strategy for the TileLayer. The function receives an array of Tile instances and allows manipulation of `tile.isVisible` before sub layers are rendered. This allows for custom logic to determine tile visibility.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-layer.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Color Categories Styling with CartoLayer\nDESCRIPTION: This snippet creates a CartoLayer with color categories styling. It queries data from Carto DW and styles the layer based on the 'landuse_type' column, using predefined categories and a 'Bold' color palette. The layer visualizes land use types in Williamsburg parcels.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/carto_styles.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlayer = pdk.Layer(\n    \"CartoLayer\",\n    data=\"SELECT geom, landuse_type FROM `cartobq.public_account.wburg_parcels`\",\n    type_=pdkc.MapType.QUERY,\n    connection=pdkc.CartoConnection.CARTO_DW,\n    credentials=pdkc.get_layer_credentials(carto_auth),\n    get_fill_color=pdkc.styles.color_categories(\n        \"landuse_type\",\n        [\n            \"Multi-Family Walk-Up Buildings\",\n            \"Multi-Family Elevator Buildings\",\n            \"Mixed Residential And Commercial Buildings\",\n            \"Parking Facilities\",\n            \"1 and 2 Family Buildings\",\n            \"Commercial and Office Buildings\",\n            \"Vacant Land\",\n            \"Public Facilities and Institutions\",\n            \"Transportation and Utility\",\n            \"Open Space and Outdoor Recreation\",\n            \"Industrial and Manufacturing\",\n        ],\n        \"Bold\",\n    ),\n    get_line_color=[0, 0, 0, 100],\n    line_width_min_pixels=0.5,\n    pickable=True,\n)\n\nview_state = pdk.ViewState(latitude=40.715, longitude=-73.959, zoom=14)\n\ntooltip = {\n    \"html\": \"<b>Land use type:</b><br>{landuse_type}\",\n    \"style\": {\n        \"color\": \"black\",\n        \"backgroundColor\": \"#84D2F6\",\n    },\n}\n\npdk.Deck(\n    layer,\n    map_style=pdk.map_styles.LIGHT,\n    initial_view_state=view_state,\n    tooltip=tooltip,\n)\n```\n\n----------------------------------------\n\nTITLE: Using loadArcGISModules with ArcGIS MapView in JavaScript\nDESCRIPTION: This snippet demonstrates how to use `loadArcGISModules` to dynamically load necessary ArcGIS modules (`esri/Map`, `esri/views/MapView`). It then shows how to instantiate an ArcGIS MapView using the loaded modules and integrate a Deck.gl `DeckLayer` containing a `ScatterplotLayer` into the ArcGIS map's layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/arcgis/load-arcgis-modules.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {loadArcGISModules} from '@deck.gl/arcgis';\n\nloadArcGISModules(['esri/Map', 'esri/views/MapView'], {version: '4.21'})\n  .then(({DeckLayer, DeckRenderer, modules}) => {\n    const [ArcGISMap, MapView] = modules;\n\n    const layer = new DeckLayer({\n      'deck.layers': [\n        new ScatterplotLayer({\n          data: [\n            {position: [0.119, 52.205]}\n          ],\n          getPosition: d => d.position,\n          getColor: [255, 0, 0],\n          radiusMinPixels: 20\n        })\n      ]\n    });\n\n    const mapView = new MapView({\n      container: \"viewDiv\",\n      map: new ArcGISMap({\n        basemap: \"dark-gray-vector\",\n        layers: [layer]\n      }),\n      center: [0.119, 52.205],\n      zoom: 5\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing HexagonLayer with Elevation Transition (TypeScript)\nDESCRIPTION: Shows the TypeScript equivalent of setting up a `HexagonLayer` with a transition on `elevationScale`. Includes type definitions for the data and layer. Requires `@deck.gl/core` and `@deck.gl/aggregation-layers`. The `transitions` object configures a 3000ms duration for the `elevationScale` transition.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\n\ntype DataType = {\n  longitude: number;\n  latitude: number;\n  count: number;\n};\n\nconst deckInstance = new Deck({\n  // ...\n  layer: getLayers(null)\n});\n\nconst resp = await fetch('/path/to/data.json');\nconst data = await resp.json() as DataType[];\ndeckInstance.setProps({\n  layer: getLayers(data)\n});\n\nfunction getLayers(data: DataType[] | null) {\n  return [\n    new HexagonLayer<DataType>({\n      id: '3d-heatmap',\n      data,\n      getPosition: (d: DataType) => [d.longitude, d.latitude],\n      getElevationWeight: (d: DataType) => d.count,\n      extruded: true,\n      elevationScale: data && data.length ? 50 : 0,\n      transitions: {\n        elevationScale: 3000\n      }\n    })\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Elevation by Count using getElevationWeight and elevationAggregation (HexagonLayer Example)\nDESCRIPTION: This TypeScript snippet, also presented within the GridLayer documentation but showing HexagonLayer code, demonstrates an alternative way to calculate the elevation value of a cell by count using `getElevationWeight` and setting `elevationAggregation` to 'COUNT'. This method can leverage both CPU and GPU aggregation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getElevationWeight: 1,\n  elevationAggregation: 'COUNT'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This snippet demonstrates how to install the necessary dependencies for the project using npm.  It utilizes the `npm install` command, which reads the project's `package.json` file to determine which packages need to be downloaded and installed.  The dependencies will be placed in a `node_modules` directory within the project. There are no specific parameters or inputs, it simply initiates the dependency installation process.  The output is the installed packages. A prerequisite is having npm installed on the system.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/widgets/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring ScatterplotLayer updateTriggers React/DeckGL TSX\nDESCRIPTION: This React (TSX) snippet demonstrates how to use the `updateTriggers` property on a deck.gl ScatterplotLayer within a `DeckGL` component. By adding `updateTriggers: { getFillColor: [maleColor, femaleColor] }`, attribute updates for `getFillColor` are correctly triggered when the `maleColor` or `femaleColor` props of the React component change.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App({maleColor, femaleColor}: {\n  maleColor: Color;\n  femaleColor: Color;\n}) {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      getPosition: (d: DataType) => d.position;\n      getFillColor: (d: DataType) => d.gender === 'M' ? maleColor : femaleColor,\n      // getFillColor should be re-evaluated when something in [maleColor, femaleColor] changes\n      updateTriggers: {\n        getFillColor: [maleColor, femaleColor]\n      }\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Deck.gl and Related Geo Layers with NPM\nDESCRIPTION: Provides command line instructions to install deck.gl core and geo layers packages via NPM. The commands allow users to either install the monolithic 'deck.gl' package or the modular scoped packages '@deck.gl/core', '@deck.gl/layers', and '@deck.gl/geo-layers' separately, catering to different dependency management preferences. This is a prerequisite for using the GreatCircleLayer and other Deck.gl components in JavaScript or TypeScript environments.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/great-circle-layer.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers\n```\n\n----------------------------------------\n\nTITLE: Configuring a HexagonLayer with pydeck in Python\nDESCRIPTION: Creates a `pydeck` `Layer` instance of type 'HexagonLayer' to visualize data aggregation. It uses the previously defined `UK_ACCIDENTS_DATA` source, specifies that longitude and latitude are found in 'lng' and 'lat' columns (`get_position`), sets visual properties like `elevation_scale`, `elevation_range`, `extruded`, `coverage`, and enables interactivity features like tooltips on hover (`pickable=True`, `auto_highlight=True`).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/01 - Introduction.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlayer = pdk.Layer(\n    'HexagonLayer',\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    elevation_scale=50,\n    pickable=True,\n    auto_highlight=True,\n    elevation_range=[0, 3000],\n    extruded=True,                 \n    coverage=1)\n```\n\n----------------------------------------\n\nTITLE: Integration with CARTO Basemaps using fetchMap (JavaScript)\nDESCRIPTION: Illustrates how to integrate a CARTO map with CARTO basemaps using deck.gl and MapboxOverlay.  It imports `fetchMap` from `@deck.gl/carto`, `MapboxOverlay` from `@deck.gl/mapbox`, and `maplibregl` from `maplibre-gl`. `fetchMap` fetches the map and extracts basemap properties and layers. A maplibre-gl map is initialized, and layers are added using MapboxOverlay.  Dependencies: `@deck.gl/carto`, `@deck.gl/mapbox`, `maplibre-gl`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/fetch-map.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetchMap } from '@deck.gl/carto';\nimport { MapboxOverlay } from '@deck.gl/mapbox';\nimport maplibregl from 'maplibre-gl';\n\nfetchMap({ cartoMapId }).then(({ basemap, layers }) => {\n  const map = new maplibregl.Map({\n    container: '...',  //Need an HTML element with that id\n    ...basemap?.props, // basemap.props contain all props required to setup basemap\n    interactive: true\n  })\n  const overlay = new MapboxOverlay({layers: result.layers});\n  map.addControl(overlay);\n})\n```\n\n----------------------------------------\n\nTITLE: Updating MapboxOverlay Layer Props at Runtime (TypeScript)\nDESCRIPTION: This TypeScript example shows how to create a MapboxOverlay and update its layers dynamically after initialization with the setProps method. The pattern is useful for updating the visualization without reconstructing the overlay. Dependencies include '@deck.gl/mapbox' and Deck-compatible Layer classes. Input is a partial props object to setProps, and the output is that the deck.gl overlay updates in-place on the base map.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mapbox/mapbox-overlay.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst overlay = new MapboxOverlay({\n  interleaved: true,\n  layers: []\n});\n\nmap.addControl(overlay);\n\n// Update layers\noverlay.setProps({\n  layers: [new ScatterplotLayer({...})]\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Data Comparison with dataComparator\nDESCRIPTION: The `dataComparator` property allows defining a custom function to compare old and new data objects for layer updates. It overrides default shallow comparison, enabling deep comparisons or custom logic, which can optimize rendering by preventing unnecessary updates for unchanged large datasets.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n`dataComparator` is a function that takes `newData` and `oldData` and returns true if they are considered equal. It is useful for performance optimization when data structures require deep comparison.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the Example (Bash)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn, and then bundle and serve the application using the 'npm start' command (which likely utilizes vite as mentioned in the comment).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/trips/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Initializing DeckGL for Accessor Updates (React/TSX)\nDESCRIPTION: Sets up the React context for demonstrating `updateTriggers`. Includes imports (React, DeckGL, ScatterplotLayer), type definitions (`CensusTract`), and placeholder data (`DATA`) for scenarios where accessors depend on changing props like `year`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype CensusTract = {\n  centroid: [longitude: number, latitude: number];\n  populationsByYear: {[year: number]: number};\n};\nconst DATA: CensusTract[] = [...];\n```\n\n----------------------------------------\n\nTITLE: React ScatterplotLayer with Callback (Inefficient)\nDESCRIPTION: This React component renders a `ScatterplotLayer` where `getRadius` depends on the changing `radius` state variable. This is inefficient because the accessor is called every render.  The `updateTriggers` prop is used to trigger updates, causing performance issues.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      data,\n      getPosition: (d: DataType) => d.position,\n      // deck.gl will call `getRadius` for ALL data objects every animation frame, which will likely choke the app\n      getRadius: (d: DataType) => d.size * radius,\n      updateTriggers: {\n        getRadius: radius\n      }\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n```\n\n----------------------------------------\n\nTITLE: Carto Authentication Setup\nDESCRIPTION: This snippet demonstrates how to authenticate with Carto using OAuth.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/carto_styles.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncarto_auth = CartoAuth.from_oauth()\n```\n\n----------------------------------------\n\nTITLE: Creating CameraLight Instance with deck.gl in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the CameraLight class from deck.gl core and create a new instance with specified color and intensity. The light emitted is always anchored to the camera position, enhancing scene illumination dynamically from the viewer's perspective. Dependencies include the deck.gl core module. Key parameters include 'color', an RGB array defining the light's color, and 'intensity', a numeric value setting the brightness level. The snippet outputs an instantiated CameraLight object ready for use in deck.gl visualizations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/camera-light.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {_CameraLight as CameraLight} from '@deck.gl/core';\n\nnew CameraLight({\n  color: [255, 255, 255],\n  intensity: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Using MVTLayer with pre-bundled scripts in HTML\nDESCRIPTION: HTML script tags for including pre-bundled deck.gl libraries from CDN, and example of initializing MVTLayer in the browser.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/mvt-layer.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.MVTLayer({});\n```\n\n----------------------------------------\n\nTITLE: Passing Mapbox/MapLibre GL Instance to DeckGL - JavaScript\nDESCRIPTION: Illustrates how to pass a reference to the imported Mapbox GL JS or MapLibre GL JS object to the `map` property of the DeckGL constructor. This is required when the map library is not in the global scope but imported as a module.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deckgl.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.DeckGL({\n  ...\n  map: mapboxgl  // or maplibregl\n});\n```\n\n----------------------------------------\n\nTITLE: Example: Embedding deck.gl in HTML\nDESCRIPTION: This code provides an example of including the standalone deck.gl library via CDN in an HTML page and creating a simple visualization with layers such as ArcLayer. It demonstrates minimal setup for prototyping or quick demos, emphasizing ease of use and visual output.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.0/purejs-standalone-rfc.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = [\n  { pickup: [-122.42, 37.8], dropoff: [-122.48, 37.76] },\n  { pickup: [-122.43, 37.8], dropoff: [-122.42, 37.75] }\n];\n\nconst deckgl = new DeckGL({\n  container: document.getElementById(\"container\"),\n  longitude: -122.45,\n  latitude: 37.8,\n  zoom: 11,\n  pitch: 30,\n  layers: [\n    new DeckGL.ArcLayer({\n      data,\n      getSourcePosition: d => d.pickup,\n      getTargetPosition: d => d.dropoff,\n      getSourceColor: d => [255, 128, 0],\n      getTargetColor: d => [0, 128, 255],\n      strokeWidth: 5\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Attributes in PointCloudLayer - JavaScript\nDESCRIPTION: This snippet demonstrates how to define additional attributes for a custom shader in a `PointCloudLayer`. It extends the `PointCloudLayer` and adds an `instanceRadiusPixels` attribute using the `attributeManager`. The `getRadius` accessor is used to determine the radius of each point.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/subclassed-layers.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// my-point-cloud-layer.js\n// Example to add per-point size to point cloud layer\nimport {PointCloudLayer} from 'deck.gl';\nimport vertexShader from 'my-point-cloud-layer-vertex';\n\nexport default MyPointCloudLayer extends PointCloudLayer {\n\n  initializeState() {\n    super.initializeState();\n\n    this.state.attributeManager.addInstanced({\n      instanceRadiusPixels: {size: 1, accessor: 'getRadius'}\n    });\n  }\n\n  getShaders() {\n    return Object.assign({}, super.getShaders(), {\n      vs: vertexShader,\n    });\n  }\n}\n\nMyPointCloudLayer.defaultProps = {\n  // returns point radius in pixels\n  getRadius: {type: 'accessor', value: 1}\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing GeoJsonLayer with ExtendedScatterplotLayer and HollowPolygonLayer - JS\nDESCRIPTION: This code snippet demonstrates how to customize a GeoJsonLayer by overriding its sublayers with custom layer types. It uses the `subLayerProps` prop to specify the custom layers and their respective properties.  `ExtendedScatterplotLayer` is used for points and `HollowPolygonLayer` for the fill of polygons.  `transferAllProps` enables passing additional props to the sublayers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.4/composite-layer-customization-rfc.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst customizedGeoJsonLayer = new GeoJsonLayer({\n  ...,\n  transferAllProps: true,\n  subLayerProps: {\n    points: {\n      type: ExtendedScatterplotLayer,\n      extendedProp: 100\n    },\n    'polygons-fill': {\n      subLayerProps: {  // Recursive application of sublayerProps!\n        fill: {\n          type: HollowPolygonLayer\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with yarn\nDESCRIPTION: This snippet shows how to install project dependencies using yarn. It's an alternative to npm, offering similar functionality but potentially faster and with a different dependency resolution algorithm.  It reads the project's `package.json` file and installs all the dependencies, placing them within a `node_modules` directory. There are no specific parameters or inputs. The output is the installed packages.  The only prerequisite is having yarn installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/widgets/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Unproject Screen Coordinates Using Viewport\nDESCRIPTION: Provides a method to unproject a screen coordinate `[x, y, z]` to geographic coordinates `[lng, lat]`. Uses current viewport settings and supports an optional `z` component. Useful for converting screen positions to map positions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction unproject(pixels: number[]): number[] {\n  // Implementation unprojecting screen coordinates to geographic coordinates\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Release Branch with Git\nDESCRIPTION: This command checks out a specific release branch (e.g., 8.0-release) of the deck.gl repository.  Using a release branch provides more consistent results when running examples compared to using the master branch which may contain unreleased features. Requires Git to be installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 8.0-release\n```\n\n----------------------------------------\n\nTITLE: Using `parse` prop with loaders.gl (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `parse` prop to integrate loaders.gl with a deck.gl layer. It imports the necessary modules, registers the `CSVLoader`, and then uses the `parse` function to load and parse data from a CSV URL.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/data-loading-rfc.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {parse, registerLoaders} from '@loaders.gl/core';\nimport {CSVLoader} from '@loaders.gl/csv';\nregisterLoaders(CSVLoader);\n\nnew AnyLayer({\n  coordinateSystem: COORDINATE_SYSTEM.IDENTITY,\n  data: CSV_URL,\n  // NEW: Accept a parse methods\n  parse,\n});\n```\n\n----------------------------------------\n\nTITLE: Node.js Script for Browser-based Integration Testing in deck.gl\nDESCRIPTION: A Node.js script that uses BrowserTestDriver from probe.gl to launch a controlled browser instance for running integration tests. The script starts a webpack dev server that bundles and serves the test code to be executed in the browser.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/testing.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This is the script that runs in Node.js and starts the browser\nconst {BrowserTestDriver} = require('@probe.gl/test-utils');\nnew BrowserTestDriver().run({\n  server: {\n    // Bundles and serves the browser script\n    command: 'webpack-dev-server',\n    arguments: ['--env.render-test']\n  },\n  headless: true\n});\n```\n\n----------------------------------------\n\nTITLE: Reverting H3HexagonLayer Shading in deck.gl v8.7\nDESCRIPTION: Shows how to override the `_subLayerProps` for `H3HexagonLayer` to set `flatShading: false` on the `hexagon-cell` sublayer. This configuration reverts the layer's rendering to the pre-v8.7 behavior, which did not use flat shading by default, addressing a visual change introduced in v8.7.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n_subLayerProps: {\n  'hexagon-cell': {flatShading: false}\n}\n```\n\n----------------------------------------\n\nTITLE: Proposed Partial Update Implementation for ScatterplotLayer\nDESCRIPTION: The modified version of the calculateInstancePositions method that implements partial updates by only iterating through a specified range of data items.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/partial-updates-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n  calculateInstancePositions({value, start, end}) {\n    const {data, getPosition} = this.props;\n    for (let i = start; i < end; i++) {\n      const position = getPosition(data[i]);\n      value[i++] = get(position, 0);\n      value[i++] = get(position, 1);\n      value[i++] = get(position, 2) || 0;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Include Standalone Bundle in HTML\nDESCRIPTION: This snippet demonstrates how to include the standalone bundle of deck.gl and its dependencies (@deck.gl/core, @deck.gl/layers, @deck.gl/json) directly in an HTML file using script tags. It also shows how to access the JSONConverter class from the global deck object. It requires an internet connection to download the bundles from unpkg.com.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/overview.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/json@^9.0.0/dist.min.js\"></script>\n<!-- usage -->\n<script type=\"text/javascript\">\n  const {JSONConverter} = deck;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Tile Loading Errors with onTileError Callback in deck.gl (JavaScript)\nDESCRIPTION: This snippet defines an optional `onTileError` callback for the Tile3DLayer in deck.gl, used to execute custom logic when a tile fails to load. The function receives three parameters: `tileHeader` (metadata about the tile), `url` (the resource URL for the failed tile), and `message` (the error description). The default implementation is a no-op, but applications can override to provide robust error reporting or recovery. No external dependencies are required, but the callback will only trigger in the context of tile fetch failures.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-3d-layer.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nonTileError: (tileHeader, url, message) => {}\n```\n\n----------------------------------------\n\nTITLE: Inefficient ScatterplotLayer with Callback (TypeScript)\nDESCRIPTION: This code defines a `ScatterplotLayer` where the `getRadius` accessor is a function of a changing `radius` value. This approach is inefficient because the `getRadius` function is called for every data object on every animation frame, increasing computational cost and likely impacting performance.  This version utilizes an animation that updates layers on update.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction updateLayers(radius: number) {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      data,\n      getPosition: (d: DataType) => d.position,\n      // deck.gl will call `getRadius` for ALL data objects every animation frame, which will likely choke the app\n      getRadius: (d: DataType) => d.size * radius,\n      updateTriggers: {\n        getRadius: radius\n      }\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Managing viewState prop and onViewStateChange (React)\nDESCRIPTION: This React snippet demonstrates managing the view state outside of deck.gl using `useState` hook, `viewState` prop, and the `onViewStateChange` callback.  The `useState` hook manages view state updates. `useCallback` is used for the reset button.  This is a stateless component approach.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState, useCallback} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {OrthographicView, OrthographicViewState} from '@deck.gl/core';\n\nconst INITIAL_VIEW_STATE: OrthographicViewState = {\n  target: [0, 0, 0],\n  zoom: 1\n};\n\nfunction App() {\n  const [viewState, setViewState] = useState<OrthographicViewState>(INITIAL_VIEW_STATE);\n\n  const onReset = useCallback(() => setViewState(INITIAL_VIEW_STATE), []);\n\n  return <>  \n    <DeckGL\n      views={new OrthographicView()}\n      controller\n      viewState={viewState}\n      onViewStateChange={e => setViewState(e.viewState)}\n    />\n    <button onClick={onReset}>Reset</button>\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Culling Primitives from math.gl in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the OrientedBoundingBox and PerspectiveFrustum classes from the '@math.gl/culling' module, which provide essential 3D geometric constructs for frustum culling operations. The code assumes that the '@math.gl/culling' package is installed as a project dependency. Both classes are used for describing bounding volumes and camera frustum computations required for visibility culling in WebGL-based visualization libraries like deck.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/layer-culling-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {OrientedBoundingBox, PerspectiveFrustum} from '@math.gl/culling';\n```\n\n----------------------------------------\n\nTITLE: Initializing React DeckGL & ScatterplotLayer\nDESCRIPTION: This snippet demonstrates how to initialize a `DeckGL` component and `ScatterplotLayer` within a React application, using TypeScript. It sets up the data and uses `popmotion` for radius animation. The `useEffect` hook handles the animation lifecycle (start and stop).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState, useEffect} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {animate} from 'popmotion';\n\ntype DataType = {\n  position: [x: number, y: number];\n  size: number;\n};\nconst data: DataType[] = [...];\n\nfunction App() {\n  const [radius, setRadius] = useState<number>(0);\n\n  useEffect(() => {\n    const radiusAnimation = animate({\n      from: 10, // start radius\n      to: 50, // end radius\n      duration: 1000,\n      repeat: Infinity,\n      repeatType: 'mirror', // alternate to and fro\n      onUpdate: setRadius\n    });\n\n    return () => radiusAnimation.stop();\n  }, []);\n```\n\n----------------------------------------\n\nTITLE: Initializing Typed Array as Input Data in deck.gl ScatterplotLayer - JavaScript\nDESCRIPTION: Defines a Float32Array named binaryData that holds interleaved floating-point values representing longitude, latitude, radius, and RGB color components. This snippet illustrates the initialization of binary input data in a compact typed array format for later use in a deck.gl ScatterplotLayer. The binary data mimics typical spatial and visual attributes of scatterplot points.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/binary-data-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst binaryData = new Float32Array([-122.4, 37.78, 1000, 255, 200, 0, -122.41, 37.775, 500, 200, 0, 0, -122.39, 37.8, 500, 0, 40, 200]);\n```\n\n----------------------------------------\n\nTITLE: Laying Out Views Side-by-Side - DeckGL - JSX\nDESCRIPTION: Sets up two `View` instances for a side-by-side layout within a `DeckGL` React component. Uses percentage values for `width` and `x` to control positioning and includes examples of passing external `viewMatrix` and `projectionMatrix` props, typically used for stereo rendering like WebVR.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/view-class-rfc.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n  <DeckGL views=[\n    // left eye\n    new View({ // type defaults to `Viewport`\n      width: '50%',\n      viewMatrix: leftViewMatrix, // from WebVR API\n      projectionMatrix: leftProjectionMatrix // from WebVR API\n    }),\n    // right eye\n    new View({ // type defaults to `Viewport`\n      x: '50%',\n      width: '50%',\n      viewMatrix: rightViewMatrix, // from WebVR API\n      projectionMatrix: rightProjectionMatrix // from WebVR API\n    }),\n    ...\n  ]/>\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl via Script Tag in HTML\nDESCRIPTION: Demonstrates how to include the deck.gl library directly in an HTML page using a script tag that loads the latest minified version from the unpkg CDN. This enables usage of deck.gl without a build system or package manager. No specific dependencies besides a modern browser supporting WebGL/WebGPU are required. This method is suitable for quick prototyping or embedding deck.gl visuals in static web pages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@latest/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing support for new Viewport from viewport-mercator-project in deck.gl v3.1.0-beta1\nDESCRIPTION: This code snippet introduces the new support for the Viewport object imported from 'viewport-mercator-project', enabling deck.gl to handle non-mercator viewports with customizable view and projection matrices. It replaces previous context management methods with 'LayerManager.setViewport'. Dependencies include 'viewport-mercator-project'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Usage of new Viewport support in deck.gl v3.1.0-beta1 */\n// Import Viewport class for customized map projections\nimport {Viewport} from 'viewport-mercator-project';\n\n// Create a custom viewport with specific view and projection matrices\nconst customViewport = new Viewport({\n  viewMatrix: /* your view matrix */, \n  projectionMatrix: /* your projection matrix */\n});\n\n// Pass the custom viewport to DeckGL component\n<DeckGL viewport={customViewport} layers={/* your layers */} />;\n\n// Replace LayerManager.setContext with setViewport for performance and clarity\nlayerManager.setViewport(customViewport);\n```\n\n----------------------------------------\n\nTITLE: ScenegraphLayer TypeScript Constructor Signature\nDESCRIPTION: This snippet provides the TypeScript signature for the ScenegraphLayer constructor. It shows how to instantiate the layer, accepting a generic type for data (`DataT`) and props based on the ScenegraphLayerProps interface.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/scenegraph-layer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\nimport type {ScenegraphLayerProps} from '@deck.gl/mesh-layers';\n\nnew ScenegraphLayer<DataT>(...props: ScenegraphLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Importing and using FullscreenWidget in JavaScript\nDESCRIPTION: Example shows how to import the FullscreenWidget from the @deck.gl/widgets package and instantiate it. It also imports the stylesheet for basic styling. This assumes deck.gl or @deck.gl/widgets is installed via npm.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/overview.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {FullscreenWidget} from '@deck.gl/widgets';\nimport '@deck.gl/widgets/stylesheet.css';\n\nnew FullscreenWidget();\n```\n\n----------------------------------------\n\nTITLE: Proposed Syntax for Type Declaration in @deck.gl/json\nDESCRIPTION: Example of the proposed '@@type' syntax to explicitly reference the JavaScript type keyword in @deck.gl/json. This syntax would help distinguish between the 'type' keyword and a field named 'type' in data sets like GeoJSON.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/json-converter-keyword-handling-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n@@type\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies via NPM\nDESCRIPTION: NPM installation commands for deck.gl core and required modules, along with TypeScript import example for QuadkeyLayer and its type definitions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/quadkey-layer.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {QuadkeyLayer} from '@deck.gl/geo-layers';\nimport type {QuadkeyLayerProps} from '@deck.gl/geo-layers';\n\nnew QuadkeyLayer<DataT>(...props: QuadkeyLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Instantiating ClusterTileLayer using Global Script Object in JavaScript\nDESCRIPTION: Shows how to create a `ClusterTileLayer` instance when using the pre-bundled scripts included via `<script>` tags. It accesses the layer constructor through the global `deck.carto` namespace.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/cluster-tile-layer.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.carto.ClusterTileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Using Programmatically Generated SVG Strings as Image Data in deck.gl IconLayer - TypeScript\nDESCRIPTION: Demonstrates dynamic generation of SVG icons converted to data URLs passed as iconAtlas to IconLayer. Functions createSVGIcon produces inline SVG markup, svgToDataUrl encodes it safely as a URI component, and svgToDataUrlBase64 provides an alternative base64 encoding. This allows icons to be constructed at runtime without static URLs.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction createSVGIcon(n: number): string {\n  const label = n < 10 ? n.toString() : '10+';\n  return `\\\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n    <circle cx=\"12\" cy=\"12\" r=\"10\" fill=\"#c00\" stroke=\"#fa1\" stroke-width=\"2\"/>\n    <text x=\"12\" y=\"12\" fill=\"#fff\" text-anchor=\"middle\" alignment-baseline=\"middle\" font-size=\"8\">${label}</text>\n  </svg>`;\n}\n\n// Note that a xml string cannot be directly embedded in a data URL\n// it has to be either escaped or converted to base64.\nfunction svgToDataUrl(svg: string): string {\n  return `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svg)}`;\n}\n\n// You may need base64 encoding if the SVG contains certain special characters\nfunction svgToDataUrlBase64(svg: string): string {\n  return `data:image/svg+xml;base64,${btoa(svg)}`;\n}\n\nconst layer = new IconLayer({\n  getIcon: d => {\n    url: svgToDataUrl(createSVGIcon(d.value)),\n    width: 24,\n    height: 24\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Calling Deck.gl PickMultipleObjects JavaScript\nDESCRIPTION: Demonstrates the proposed API call for picking multiple overlapping objects at a specific screen coordinate. This function is intended to replace or supplement the existing single-object picking methods when a list of all objects under the cursor is required. The `depth` parameter limits the number of objects returned.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.3/picking-overlapping-objects-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst pickInfos = layerManager.pickMultipleObjects({x, y, depth: 5});\n```\n\n----------------------------------------\n\nTITLE: Adapting Composite Layers for Overloaded Accessors - deck.gl - JavaScript\nDESCRIPTION: This snippet shows an example of how a composite layer (like `TextLayer` wrapping `MultiIconLayer`) might need to adjust its prop forwarding under the \"Alternative: Overloaded Accessors\" proposal. It demonstrates checking the type of the received `getSize` prop and either forwarding the original accessor function or the constant value directly to the wrapped layer. This is an implementation detail for developers creating composite layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.3/constant-accessor-rfc.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// TextLayer\nreturn new MultiIconLayer({\n  ...\n  getSize: (typeof getSize === 'function')? d => getSize(d.object) : getSize\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Layer Props with updateTriggers (JavaScript)\nDESCRIPTION: This snippet highlights the verbosity of using `updateTriggers` when updating layer properties imperatively. The programmer must explicitly specify the updated property in `updateTriggers`, even though the intention to update is already clear from the code.  This is perceived as redundant and unintuitive.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/imperative-api-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// First time we set the props\ndeck.setProps({\n  layers: new ScatterplotLayer({\n    data\n    getPosition: getPositionBinned\n  })\n})\n\n// Now we update the props\nbutton.onClick(() => {\n  deck.setProps({\n    layers: new ScatterplotLayer({\n      data\n      getPosition: getPositionByState,\n      updateTriggers: {\n        getPosition: getPositionByState // Duh, I just told you two lines ago...\n      }\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating MapView in deck.gl - JavaScript\nDESCRIPTION: This snippet demonstrates how to import the MapView class from the @deck.gl/core package and instantiate it with optional parameters such as id and other view-specific options. Dependencies include the deck.gl library. Required parameters can include id, repeat, nearZMultiplier, farZMultiplier, projectionMatrix, fovy, altitude, and orthographic, among others. Inputs are the options object with desired parameters, and the output is a new MapView instance ready for use in a deck.gl visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/map-view.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {MapView} from '@deck.gl/core';\nconst view = new MapView({id, ...});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl via NPM\nDESCRIPTION: This snippet provides the bash commands required to install the deck.gl library and its components using the NPM package manager. Users can choose to install the entire library or specific modules.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/aggregation-layers\n```\n\n----------------------------------------\n\nTITLE: Authenticating with M2M using carto-auth in Python\nDESCRIPTION: This Python snippet demonstrates authentication using M2M credentials, using the `CartoAuth.from_m2m()` method. It utilizes a provided JSON credentials file to automatically log in. The method requires a `filepath` parameter pointing to the credentials file.  It uses optional `cache_filepath` and `use_cache` parameters to manage token storage and retrieval. The result is a `carto_auth` object containing the authenticated credentials.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/authentication.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom carto_auth import CartoAuth\n\ncarto_auth = CartoAuth.from_m2m(\"./carto-credentials.json\")\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl dependencies\nDESCRIPTION: This snippet shows how to install deck.gl and its dependencies using npm.  It provides two options: installing the core deck.gl library or installing specific modules such as @deck.gl/core and @deck.gl/layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/bitmap-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers\n```\n\n----------------------------------------\n\nTITLE: Using PointLabelLayer with React and Collision Detection in TypeScript\nDESCRIPTION: Demonstrates integrating PointLabelLayer within a DeckGL React component. It fetches airport data, renders points using ScatterplotLayer, and adds labels using PointLabelLayer. Key configurations include setting data source, accessors for position, primary/secondary text, colors, size scales, text anchoring, font settings, outline, and enabling collision detection via CollisionFilterExtension.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/point-label-layer.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {DeckGL} from '@deck.gl/react';\nimport {CollisionFilterExtension} from '@deck.gl/extensions';\nimport {PointLabelLayer} from '@deck.gl/carto';\n\ntype Airport = {\n  coordinates: [longitude: number, latitude: number];\n  name: string;\n  abbrev: string;\n};\nconst AIRPORTS = 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/line/airports.json'\n\n\nfunction App({viewState}) {\n  const layers = [\n    new ScatterplotLayer({\n      data: AIRPORTS,\n      getPosition: d => d.coordinates,\n      radiusMinPixels: 2\n    }),\n    new PointLabelLayer({\n      data: AIRPORTS,\n      extensions: [new CollisionFilterExtension()],\n      getPosition: d => d.coordinates,\n      getText: d => d.name,\n      getSecondaryText: d => d.abbrev,\n\n      getColor: d => [2, 5, 11],\n      sizeScale: 13,\n      getSecondaryColor: d => [102, 105, 111],\n      secondarySizeScale: 10,\n\n      getTextAnchor: 'start',\n      fontSettings: {sdf: true},\n      outlineColor: [255, 255, 255],\n      outlineWidth: 2\n    }),\n  ];\n\n  return <DeckGL viewState={viewState} layers={[ayers} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing WebMercatorViewport via Constructor (JavaScript)\nDESCRIPTION: Shows the canonical creation of a new WebMercatorViewport using the constructor with named options for width, height, position, orientation, and projection details. This establishes the viewport object but does not perform projection. Required: @deck.gl/core. Parameters include map center (latitude, longitude), zoom, pitch, bearing, altitude, and projection matrix options; all have sensible defaults with optional overrides. Main output is a new viewport instance prepared for projection tasks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/web-mercator-viewport.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew WebMercatorViewport({width, height, longitude, latitude, zoom, pitch, bearing});\n```\n\n----------------------------------------\n\nTITLE: Aggregating by Count using getColorWeight and colorAggregation (HexagonLayer Example)\nDESCRIPTION: This TypeScript snippet, also presented within the GridLayer documentation but showing HexagonLayer code, demonstrates an alternative way to calculate the color value of a cell by count using `getColorWeight` and setting `colorAggregation` to 'COUNT'. This method can leverage both CPU and GPU aggregation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst layer = new HexagonLayer<BikeRack>({\n  // ...\n  getColorWeight: 1,\n  colorAggregation: 'COUNT'\n});\n```\n\n----------------------------------------\n\nTITLE: Updating `project_position` (vec3) Signature in GLSL\nDESCRIPTION: Shows the updated GLSL function signature for `project_position` taking a `vec3` position, relevant when upgrading deck.gl versions affecting the projection system. The second parameter changed from `vec2 position64xyLow` to `vec3 position64Low` to reflect changes in how low-part double precision attributes are handled.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_13\n\nLANGUAGE: glsl\nCODE:\n```\n// Old: vec3 project_position(vec3 position, vec2 position64xyLow)\n// New: \nvec3 project_position(vec3 position, vec3 position64Low)\n```\n\n----------------------------------------\n\nTITLE: Running yarn bootstrap with CPLUS_INCLUDE_PATH\nDESCRIPTION: This command runs `yarn bootstrap` with a specific `CPLUS_INCLUDE_PATH` to ensure that the build process can find the necessary header files. This is often needed when developing on MacOS.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCPLUS_INCLUDE_PATH=/opt/homebrew/include yarn bootstrap\n```\n\n----------------------------------------\n\nTITLE: Defining QuadbinTilesetSourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `QuadbinTilesetSourceOptions` type, used by the `quadbinTilesetSource` function. It comprises a single `tableName` option.  It specifies the table containing quadbin tileset data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ntype QuadbinTilesetSourceOptions = {\n  tableName: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Data Using ES6 Container Patterns\nDESCRIPTION: Shows proper methods for iterating over data in deck.gl layers, supporting ES6 containers like Sets, Maps, and Immutable.js objects. Demonstrates recommended iteration patterns and those to avoid.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/deckgl-api-guidelines.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const object of this.props.data) { ... } // GOOD\nthis.props.data.forEach((object, index) => ...) // GOOD\n```\n\n----------------------------------------\n\nTITLE: Configuring React Components for Conversion (JavaScript)\nDESCRIPTION: Sets up a `JSONConverter` configuration to handle React components (experimental). It imports `React` and a custom `TestComponent`, registering them under `React` and `reactComponents` keys respectively, enabling instantiation via the `@@type` prefix in JSON.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nimport TestComponent from '@/components/test';\n\nconst configuration = {\n  React,\n  reactComponents: {\n    TestComponent\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Layers with Deck.updateLayers (JavaScript)\nDESCRIPTION: This snippet showcases the proposed `Deck.updateLayers` method, which allows for partial updates of existing layers by specifying a map of layer IDs to prop updates. It simplifies the process of changing layer properties without needing to re-specify all props.  The keys in the object passed to `updateLayers` are layer ids, and the values are prop updates for the layer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/imperative-api-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeck.updateLayers({\n  'scatterplot': {\n    ...newProps\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: DataFilterExtension Constructor Syntax (JavaScript)\nDESCRIPTION: Outlines the constructor signature for `DataFilterExtension`, showing the available options: `filterSize` (number of numeric filter columns, default 1), `categorySize` (number of category filter columns, default 0), `fp64` (use 64-bit precision, default false), and `countItems` (report filtered count, default false).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew DataFilterExtension({filterSize, fp64});\n```\n\n----------------------------------------\n\nTITLE: Setting Public CARTO Credentials with setDefaultCredentials - JavaScript\nDESCRIPTION: Configures the CARTO username for authenticating requests using the setDefaultCredentials() function, enabling the deck.gl application to fetch data from CARTO accounts. Requires the '@deck.gl/carto' package or CARTO integration. Accepts a username parameter as a string. Should be called before initiating any data requests. Does not handle private data; for private datasets, an API key must also be specified.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/carto-sql/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetDefaultCredentials({\n  username: '<username>',\n});\n\n```\n\n----------------------------------------\n\nTITLE: Optimizing deck.gl Memory Usage for Mobile (JS)\nDESCRIPTION: Illustrates configuring experimental `Deck` props (`_pickable` and `_typedArrayManagerProps`) to aggressively reduce memory consumption, particularly useful on resource-constrained mobile devices. Setting `_pickable` to `false` disables picking interactions, and adjusting `_typedArrayManagerProps` (e.g., setting `overAlloc` and `poolSize`) modifies buffer allocation strategies, potentially sacrificing some performance or features for a smaller memory footprint. These settings are often applied conditionally based on device detection (e.g., `isMobile`).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/tips-and-tricks.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nnew Deck({\n  // ...\n  _pickable: false,\n  _typedArrayManagerProps: isMobile ? {overAlloc: 1, poolSize: 0} : null\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a MapboxLayer Instance - JavaScript\nDESCRIPTION: This snippet shows how to create a new instance of the `MapboxLayer` class using the `new` keyword.  It takes a `props` object as an argument, which configures the layer. The `props` object must contain an unique `id`. It can contain the `type` of deck.gl layer to render or the `deck` instance. Any other props are related to the deck.gl layer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mapbox/mapbox-layer.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {MapboxLayer} from '@deck.gl/mapbox';\nnew MapboxLayer(props);\n```\n\n----------------------------------------\n\nTITLE: Inefficient Data Filtering in Deck.gl (TypeScript)\nDESCRIPTION: Shows a common performance pitfall where the `data` prop for `ScatterplotLayer` is generated using `Array.prototype.filter` inside the render function. This creates a new array instance on every call, causing deck.gl to recalculate GPU buffers even if the filtering criteria (`settings.minTime`, `settings.maxTime`) haven't changed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction render(settings: Settings) {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      // `filter` creates a new array every time `render` is called, even if minTime/maxTime have not changed\n      data: DATA.filter(d => d.time >= settings.minTime && d.time <= settings.maxTime),\n      getPosition: (d: DataType) => d.position,\n      getRadius: settings.radius\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Picking Color in a Custom Fragment Shader (GLSL)\nDESCRIPTION: This GLSL fragment shader snippet shows the final step for custom picking shader implementation. It uses the `picking_filterPickingColor` function (provided by the `picking` shader module) to potentially replace the calculated `gl_FragColor` with the appropriate picking color during the picking pass. This function ensures the correct color is written to the off-screen picking buffer. This call should typically be the last operation modifying `gl_FragColor`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/picking.md#_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\nvoid main(void) {\n  ...\n\n  // Should be the last Fragment shader instruction that updates gl_FragColor\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Post-processing Effect to Deck.gl - JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a `PostProcessEffect` using a shader module from `@luma.gl/effects` and configure its properties. The created effect is then added to the `effects` array when initializing a `Deck` instance, integrating it into the rendering pipeline. It requires importing the specific effect module and the `PostProcessEffect` class.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.1/post-process-effect-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {brightnessContrast} from '@luma.gl/effects';\nimport {PostProcessEffect} from '@deck.gl/core';\n\nconst postProcessEffect = new PostProcessEffect(brightnessContrast, {\n  brightness: 0.5,\n  contrast: 0.5\n});\n\nconst deckgl = new Deck({\n  canvas: 'my-deck-canvas',\n  initialViewState,\n  controller: true,\n  // add effect to deck\n  effects: [postProcessEffect],\n  layers: [new GeoJsonLayer({\n    ...\n  })]\n});\n```\n\n----------------------------------------\n\nTITLE: Efficient ScatterplotLayer with radiusScale (TypeScript)\nDESCRIPTION: This code optimizes the `ScatterplotLayer` rendering by using the `radiusScale` prop instead of a callback in the `getRadius` accessor. By passing the changing `radius` directly to `radiusScale`, the layer updates much more efficiently. This avoids unnecessary calculations on each frame.  This utilizes animation to update the `radiusScale` prop.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction updateLayers(radius: number) {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      data,\n      getPosition: (d: DataType) => d.position,\n      getRadius: (d: DataType) => d.size,\n      // This has virtually no cost to update, easily getting 60fps animation\n      radiusScale: radius\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and dependencies for H3ClusterLayer\nDESCRIPTION: Provides commands and script tags to install deck.gl packages and dependencies required to use the H3ClusterLayer. It covers installation via npm for core, layers, and geo-layers packages, as well as pre-bundled scripts for browser environments. It highlights the necessary order, such as including 'h3-js' before deck.gl scripts to ensure proper functionality.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-cluster-layer.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/h3-js@^4.0.0\"></script>\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: LineLayerState Class Definition\nDESCRIPTION: This snippet showcases the proposal for a proper LayerState class hierarchy within deck.gl.  It provides an example of a `LineLayerState` class extending the `LayerState` class. This is intended to allow layer subclass writers to focus on the permanent part of the Layer, as opposed to putting all their logic on the \"dumb\" descriptor.  The feature will not break the React JSX style of specifying the layer props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/roadmaps/api-evolution-roadmap.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass LineLayerState extends LayerState {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: PointLight Constructor Signature in deck.gl (JavaScript)\nDESCRIPTION: Illustrates the general constructor signature for the PointLight class using object destructuring for parameters. Key parameters include 'color' (RGB array, default [255, 255, 255]), 'intensity' (number, default 1.0), 'position' (3-element array, default [0, 0, 1]), and optional 'attenuation' (3-element array, default [1, 0, 0]). The position coordinate system depends on the current view (geospatial or world coordinates).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/point-light.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pointLight = new PointLight({color, intensity, position});\n```\n\n----------------------------------------\n\nTITLE: Initializing LoadingWidget in deck.gl using TypeScript\nDESCRIPTION: Imports the LoadingWidget from the deck.gl widgets package and initializes a Deck instance with the LoadingWidget added. The widget shows a spinning loading indicator during data loading of deck.gl layers. This snippet requires dependencies on @deck.gl/core and @deck.gl/widgets. The code defines the Deck configuration object including setting the widgets property to an array containing a new LoadingWidget instance. No inputs are required beyond standard deck.gl setup, and no output is returned beyond instantiated Deck with the loading widget active.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/loading-widget.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {_LoadingWidget as LoadingWidget} from '@deck.gl/widgets';\nimport {Deck} from '@deck.gl/core';\n\nconst deck = new Deck({\n  widgets: [new LoadingWidget()]\n});\n```\n\n----------------------------------------\n\nTITLE: Laying Out Views Vertically - DeckGL - JSX\nDESCRIPTION: Configures two `View` instances within a `DeckGL` React component to create a top-to-bottom layout. Uses percentage values for the `height` and `y` props to define the size and position of each view relative to the container.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/view-class-rfc.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n  <DeckGL views=[\n    new View({type: FirstPersonViewport, viewprops, height: '50%'}),\n    new View({type: WebMercatorViewport, viewprops, y: '50%', height: '50%'}),\n    ...\n  ]/>\n```\n\n----------------------------------------\n\nTITLE: Instantiating BrushingExtension in JavaScript (Global Scope)\nDESCRIPTION: Shows how to instantiate `BrushingExtension` when deck.gl is loaded globally via script tags. The extension class is accessed through the global `deck` object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/brushing-extension.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.BrushingExtension();\n```\n\n----------------------------------------\n\nTITLE: Starting the Application with npm - bash\nDESCRIPTION: Bundles and serves the application using the npm `start` script defined in the `package.json` file. This script typically initiates a development server, often powered by tools like Vite, to run the example.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/google-3d-tiles/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Accessing All Bin IDs in an Aggregator\nDESCRIPTION: Retrieves an accessor to all bin IDs in the aggregator, returning a binary attribute or null if update hasn't been called.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/aggregator.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst binIdsAttribute = aggregator.getBins();\n```\n\n----------------------------------------\n\nTITLE: Initializing Animation Instance - JavaScript\nDESCRIPTION: This code snippet demonstrates how to create and use an `Animation` instance for a `HexagonLayer`'s `elevationScale` property. It defines an animation that interpolates the `elevationScale` value over time using a keyframe-based approach. The animation starts at a value of 0, transitions to 100 over 3 seconds, then returns to 0 in 3 seconds, and loops indefinitely.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/generic-layer-prop-animation-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst elevationScaleAnimation = new Animation(0)\n    .to({value: 100, time: 3000})\n    .to({value: 0, time: 3000})\n    .loop();\n\nnew HexagonLayer({\n    ...\n    elevationScale: elevationScaleAnimation\n});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl via NPM\nDESCRIPTION: These commands show how to install the deck.gl library and specifically the mesh-layers package using npm. Installing deck.gl includes core functionality, while installing specific modules like mesh-layers allows for a smaller dependency footprint.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/scenegraph-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/mesh-layers\n```\n\n----------------------------------------\n\nTITLE: Setting Controller on FirstPersonView in deck.gl\nDESCRIPTION: Alternative approach for configuring FirstPersonController by setting controller options directly on the FirstPersonView instance. This is equivalent to the previous example.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/first-person-controller.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, FirstPersonView} from '@deck.gl/core';\n\nnew Deck({\n  views: new FirstPersonView({\n    controller: {keyboard: false,  inertia: true}\n  }),\n  initialViewState: viewState\n})\n```\n\n----------------------------------------\n\nTITLE: Refactoring Transitions and Update Triggers - JavaScript\nDESCRIPTION: This code snippet illustrates the proposed change to how transitions and update triggers work.  It converts the original style using `transitions` and `updateTriggers` into the new approach where the `value` and animation information are bundled together within the props. The updated version allows animated props to directly control how change is handled by the layer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/generic-layer-prop-animation-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ScatterplotLayer({\n    ...\n    radiusScale: 10,\n    getColor: d => d.color,\n    transitions: {\n        radiusScale: {duration, easing},\n        getColor: {duration, easing}\n    },\n    updateTriggers: {\n        getColor: {color}\n    }\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ScatterplotLayer({\n    ...\n    radiusScale: {\n        value: 10,\n        transition: {duration, easing},\n    },\n    getColor: {\n        value: d => d.color,\n        transition: {duration, easing},\n        updateTrigger: {color}\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration of Tile3DLayer for multi-view rendering with I3S features\nDESCRIPTION: This code sets up a Tile3DLayer capable of rendering multiple views simultaneously, sharing a tile cache for efficiency. Additional feature flags such as 'picking', 'dracoMesh', 'compressedTexture', 'PBR', 'vertexColors', and 'UVRegions' optimize performance and visual fidelity when handling I3S 1.7 tile data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Tile3DLayer({\n  ...\n  modelMatrix: someMatrix,\n  pickable: true,\n  multiView: true,\n  loadOptions: {\n    dracoMesh: true,\n    compressedTexture: true,\n    PBR: true,\n    vertexColors: true,\n    UVRegions: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl with Pure JavaScript (JavaScript)\nDESCRIPTION: Shows how to instantiate a deck.gl visualization in a vanilla JavaScript environment by creating a Deck instance with container, size, viewport parameters, and layers. It assumes the presence of a container element like document.body and a predefined layer (scatterplotLayer). This setup allows embedding deck.gl visualizations directly into web pages without React.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/modules/main/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\n\nconst deck = new Deck({\n  container: document.body,\n  width: '100vw',\n  height: '100vh',\n  longitude: -122.4,\n  latitude: 37.78,\n  zoom: 8,\n  controller: true,\n  layers: [scatterplotLayer]\n});\n```\n\n----------------------------------------\n\nTITLE: Async Iterables for Incremental Loading - React\nDESCRIPTION: This React component demonstrates the use of async iterables for incremental data loading with deck.gl. It uses an async generator function, `getData`, to yield data chunks, which are then consumed by deck.gl. This approach allows deck.gl to efficiently update only the necessary buffers when new data arrives.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// Create an async iterable\nasync function* getData() {\n  let chunk: DataType[];\n  while (chunk = await fetchNextChunk()) {\n    yield chunk;\n  }\n}\n\nfunction App() {  \n  const layers = [\n    new ScatterplotLayer<DataType>({\n      id: 'points';\n      // When a new chunk arrives, deck.gl only updates the sub buffers for the new rows\n      data: getData(),\n      getPosition: (d: DataType) => d.position\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Browser-side Integration Test Script for Visual Regression Testing in deck.gl\nDESCRIPTION: A browser-side test script that uses SnapshotTestRunner to render deck.gl layers and compare the output against golden images. The test defines a ScatterplotLayer rendering test case with specific view state and layer properties.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/testing.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {SnapshotTestRunner} = require('@deck.gl/test-utils');\nconst {ScatterplotLayer} = require('@deck.gl/layers');\n\nconst TEST_CASES = [\n  {\n    name: 'ScatterplotLayer',\n    // `Deck` props\n    viewState: {\n      longitude: -122.4,\n      latitude: 37.8,\n      zoom: 12,\n      pitch: 20\n    },\n    layers: [\n      new ScatterplotLayer({\n        id: 'circles',\n        data: './data/scatterplot.json',\n        getPosition: d => d.position,\n        getRadius: d => d.size,\n        getFillColor: [255, 0, 0]\n      })\n    ],\n    // `done` must be called when ready for screenshot and compare\n    onAfterRender: ({layers, done}) => {\n      if (layers[0].props.data.length) {\n        // data is loaded\n        done();\n      }\n    },\n    // Target rendering result\n    goldenImage: './test/render/golden-images/scatterplot.png'\n  }\n];\n\nnew TestRender({width: 800, height: 600})\n  .add(TEST_CASES)\n  .run({\n    onTestFail: window.browserTestDriver_fail\n  })\n  .then(window.browserTestDriver_finish);\n```\n\n----------------------------------------\n\nTITLE: Projecting Modelspace Positions to Clip Space Using 64-bit Precision\nDESCRIPTION: This GLSL function converts a 2D array of modelspace vertex positions into clip space coordinates with 64-bit accuracy. It processes an array of four vec2 positions, facilitating precise transformation of model vertices for high-precision rendering workflows. The function is required in shaders utilizing the project64 module for detailed spatial computations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/project64.md#_snippet_2\n\nLANGUAGE: GLSL\nCODE:\n```\nvec4 project_to_clipspace_fp64(vec2 vertex_pos_modelspace[4])\n```\n\n----------------------------------------\n\nTITLE: Instantiating PathStyleExtension\nDESCRIPTION: This snippet demonstrates how to create a new instance of the PathStyleExtension in JavaScript. It showcases the basic instantiation without any specific options. It needs to be passed as an extension in a layer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/path-style-extension.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {PathStyleExtension} from '@deck.gl/extensions';\nnew PathStyleExtension({});\n```\n\n----------------------------------------\n\nTITLE: Defining Orbit Viewport Controller State - JavaScript\nDESCRIPTION: Defines the properties and method stubs for an ES6 class representing the state of an Orbit-style viewport controller. It includes parameters for the target position, camera distance, rotation angles, field of view, and viewport dimensions. Placeholder methods are provided for handling pan, rotate, and zoom gesture events, designed to return a new state object. This class is intended to be framework-independent and work with a state management paradigm.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v4.1/event-handling-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class OrbitControllerState {\n\n  static propTypes = {\n    // target position\n    lookAt: PropTypes.arrayOf(PropTypes.number),\n    // camera distance\n    distance: PropTypes.number.isRequired,\n    minDistance: PropTypes.number,\n    maxDistance: PropTypes.number,\n    // rotation\n    rotationX: PropTypes.number,\n    rotationY: PropTypes.number,\n    // field of view\n    fov: PropTypes.number,\n    // viewport width in pixels\n    width: PropTypes.number.isRequired,\n    // viewport height in pixels\n    height: PropTypes.number.isRequired\n  };\n\n  // Returns an Viewport instance\n  getViewport() {}\n\n  // Returns a new state object for chaining\n  panStart() {}\n  pan() {}\n  panEnd() {}\n  rotateStart() {}\n  rotate() {}\n  rotateEnd() {}\n  zoomStart() {}\n  zoom() {}\n  zoomEnd() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating WMSLayer using CDN Script in JavaScript\nDESCRIPTION: Demonstrates how to instantiate the WMSLayer using the global `deck` object, which becomes available after including the deck.gl CDN scripts in an HTML file. Access the layer constructor via `deck._WMSLayer`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/wms-layer.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck._WMSLayer({});\n```\n\n----------------------------------------\n\nTITLE: Overlapping Views with Absolute Positioning - DeckGL - JSX\nDESCRIPTION: Defines two views within a `DeckGL` component where one view (a small `WebMercatorViewport`) is rendered as an overlay on the main view. Positions and sizes the overlay view using calculated absolute pixel values derived from the container dimensions (`width`, `height`).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/view-class-rfc.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n  const {width, height} = viewportProps;\n  ...\n  <DeckGL views=[\n    new View({\n      type: FirstPersonViewport,\n      ...viewprops\n    }),\n\n    // Render a small map viewport over the main first person viewport\n    new WebMercatorViewport({\n      ...viewprops,\n      height: height / 8,\n      width: width / 8,\n      x: width * 7 / 16,\n      y: height * 13 / 16\n    })\n  ]/>\n```\n\n----------------------------------------\n\nTITLE: Instantiating Fp64Extension via Browser Global - JavaScript\nDESCRIPTION: Illustrates creating a new Fp64Extension in a browser environment using the global 'deck' namespace available after loading the CDN scripts. Appropriate for non-modular, direct-in-browser usage where ES modules are not used. Requires that the deck.gl and @deck.gl/extensions scripts have been loaded prior to invocation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fp64-extension.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.Fp64Extension({});\n```\n\n----------------------------------------\n\nTITLE: Loading PLY Mesh with SimpleMeshLayer and PLYLoader (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure SimpleMeshLayer to load a mesh from a PLY file using the loaders.gl PLYLoader. It requires importing the specific loader and providing it in the `loaders` array prop.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/simple-mesh-layer.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {PLYLoader} from '@loaders.gl/ply';\n\nnew SimpleMeshLayer({\n  mesh: 'path/to/model.ply',\n  loaders: [PLYLoader]\n});\n```\n\n----------------------------------------\n\nTITLE: Rounded Rectangle Fragment Shader - GLSL\nDESCRIPTION: This is a custom fragment shader used in conjunction with the `RoundedRectangleLayer` example. It calculates the distance to the center of the fragment and uses the `cornerRadius` uniform to determine whether to discard the fragment, creating a rounded rectangle effect.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/subclassed-layers.md#_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\n/// rounded-rectangle-layer-fragment.js\n// This is copied and adapted from scatterplot-layer-fragment.glsl.js\n// Modifications are annotated\nexport default `\\\n#define SHADER_NAME rounded-rectangle-layer-fragment-shader\n\nprecision highp float;\n\nuniform float cornerRadius;\n\nvarying vec4 vFillColor;\nvarying vec2 unitPosition;\n\nvoid main(void) {\n\n  float distToCenter = length(unitPosition);\n\n  /* Calculate the cutoff radius for the rounded corners */\n  float threshold = sqrt(2.0) * (1.0 - cornerRadius) + 1.0 * cornerRadius;\n  if (distToCenter <= threshold) {\n    gl_FragColor = vFillColor;\n  } else {\n    discard;\n  }\n\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Implementing getPickingInfo in a Composite Layer\nDESCRIPTION: Shows how to override the getPickingInfo method in a composite layer to modify the picking information that gets passed to event callbacks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/composite-layers.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nclass AwesomeCompositeLayer extends CompositeLayer {\n\n  ...\n\n  getPickingInfo({info, sourceLayer}) {\n    // override info.object\n    return info;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Content (React)\nDESCRIPTION: This snippet demonstrates customizing the content and style of the built-in tooltip within a React component by returning an object with `html` and `style` properties from the `getTooltip` callback. The `html` property allows rendering HTML content, and the `style` property allows styling the tooltip with CSS.  The `useCallback` hook is used for memoization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_25\n\nLANGUAGE: react\nCODE:\n```\nconst getTooltip = useCallback(({object}: PickingInfo<DataType>) => {\n  return object && {\n    html: `<h2>Message:</h2> <div>${object.message}</div>`,\n    style: {\n      backgroundColor: '#f00',\n      fontSize: '0.8em'\n    }\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl Deck with MapView and MapController options in JavaScript\nDESCRIPTION: Shows how to create a new Deck instance specifying a MapView with a customized controller configuration, equivalent to passing controller directly to Deck. This example sets doubleClickZoom to false and inertia to true within the MapView controller prop while assigning an initial view state for the viewport. It explicitly uses MapView to configure the controller.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/map-controller.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\n\nnew Deck({\n  views: new MapView({\n    controller: {doubleClickZoom: false,  inertia: true}\n  }),\n  initialViewState: viewState\n})\n```\n\n----------------------------------------\n\nTITLE: Instantiating DataFilterExtension (JavaScript Pre-bundled)\nDESCRIPTION: Shows how to instantiate the `DataFilterExtension` when using the pre-bundled script version. The extension is accessed via the global `deck` object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.DataFilterExtension({});\n```\n\n----------------------------------------\n\nTITLE: Implementing QuadkeyLayer in JavaScript\nDESCRIPTION: Example of creating a QuadkeyLayer instance in JavaScript that displays data from a remote JSON file, with extrusion, color mapping based on values, and interactive tooltips.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/quadkey-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {QuadkeyLayer} from '@deck.gl/geo-layers';\n\nconst layer = new QuadkeyLayer({\n  id: 'QuadkeyLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.quadkeys.json',\n  \n  extruded: true,\n  getQuadkey: d => d.quadkey,\n  getFillColor: d => [d.value * 128, (1 - d.value) * 255, (1 - d.value) * 255, 180],\n  getElevation: d => d.value,\n  elevationScale: 1000,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `${object.quadkey} value: ${object.value}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Proposed Layer API for URL-based Data Loading in deck.gl\nDESCRIPTION: Describes the new and modified properties for deck.gl Layer class to support URL-based data loading. The main changes include accepting string URLs or Promises in the data prop, adding a dataTransform function, and providing a configurable fetch property.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.3/async-props-rfc.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **data** - Can now accept `Array`, `String` (URL) or `Promise` (that resolves to string).\n* **dataTransform** - `Function` that receives the value of data and returns an Array. Default to IDENTITY.\n* **fetch** (`Function`|`String`) (Default: 'json') - function used to load data. Defaults to `fetch` with JSON parsing.\n    - `Function` returning `Promise` that resolves to data.\n    - `String` specifying 'json', 'text' or 'binary'. A default fetch function converting data accordingly will be used.\n```\n\n----------------------------------------\n\nTITLE: Integrating React-Map-GL Components with DeckGL in React\nDESCRIPTION: Example code showing how to use react-map-gl components with deck.gl by supplying the ContextProvider prop on DeckGL. This enables the use of DOM-based markers, popups, and navigation controls within a deck.gl application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_14\n\nLANGUAGE: JSX\nCODE:\n```\n/// Example using react-map-gl controls with deck.gl\nimport {DeckGL} from '@deck.gl/react';\nimport {_MapContext as MapContext, NavigationControl} from 'react-map-gl';\n\n<DeckGL ... ContextProvider={MapContext.Provider}>\n  <div style={{margin: 10, position: 'absolute', zIndex: 1}}>\n    <NavigationControl />\n  </div>\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Cleaning Color Data with Python\nDESCRIPTION: This snippet cleans the color data in the DataFrame. The color values are encoded as strings representing RGBA values, and the code uses `literal_eval` from the `ast` module to convert these strings into lists. The lambda function applies this conversion to each row's 'color' column.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/02 - Scatterplots.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ast import literal_eval\n# We have to re-code position to be one field in a list, so we'll do that here:\n# The CSV encodes the [R, G, B, A] color values listed in it as a string\ndf['color'] = df.apply(lambda x: literal_eval(x['color']), axis=1)\n```\n\n----------------------------------------\n\nTITLE: Making Viewport Instance from MapView in JavaScript\nDESCRIPTION: Illustrates usage of the `makeViewport` method on a View instance to create a matching Viewport. This pattern is recommended because various Viewport subclasses are deprecated. The snippet relies on having `width`, `height` viewport dimensions and `viewState` parameters including `longitude`, `latitude`, and `zoom`. It returns a configured viewport instance derived from view parameters for rendering or projection tasks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew MapView().makeViewport({width, height, viewState: {longitude, latitude, zoom}});\n```\n\n----------------------------------------\n\nTITLE: Automatic Bounding Volume Calculation for Layer Culling in JavaScript\nDESCRIPTION: This code snippet shows how to enable automatic calculation of a deck.gl layer's bounding volume by setting the boundingVolume property to 'auto'. When enabled, the layer is expected to compute its bounding box based on underlying data, which can help in view-dependent rendering culling. This feature may have performance implications for large or dynamic datasets and assumes internal layer support for determining bounding volumes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/layer-culling-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Layer {\n  boundingVolume: 'auto'\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing H3HexagonLayer JavaScript (Pre-bundled)\nDESCRIPTION: This JavaScript snippet shows how to instantiate an H3HexagonLayer using a pre-bundled deck.gl distribution.  This example assumes that the necessary libraries are included using script tags as per the previous example. The code demonstrates the basic instantiation of the layer, which requires the `h3-js` dependency to be included.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-hexagon-layer.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nnew deck.H3HexagonLayer({});\n```\n\n----------------------------------------\n\nTITLE: Rendering Views with DeckGL using JSX\nDESCRIPTION: This code snippet demonstrates how to render multiple views within a DeckGL component using JSX. It specifies two views: a MapView and a FirstPersonView, each occupying 50% of the screen width.  The `views` prop accepts an array of `View` class instances.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<DeckGL\n  views=[\n    new MapView({id: 'map', width: '50%'}),\n    new FirstPersonView({x: '50%', width: '50%'})\n  ]\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Accessor Functions using `@@=` Prefix (JSON)\nDESCRIPTION: Example of using the `@@=` prefix for the `getPosition` accessor in a `HexagonLayer`. The string `\"@@=[lng, lat]\"` instructs the `JSONConverter` to generate a function equivalent to `(datum) => [datum.lng, datum.lat]`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n    \"layers\": [{\n        \"@@type\": \"HexagonLayer\",\n        \"data\": [\n            {\"lat\":0,\"lng\":0},\n            {\"lat\":0,\"lng\":0},\n            {\"lat\":0,\"lng\":0},\n            {\"lat\":1.2,\"lng\":1.2},\n            {\"lat\":1.2,\"lng\":1.2},\n            {\"lat\":1.2,\"lng\":1.2}\n        ],\n        \"getPosition\": \"@@=[lng, lat]\",\n```\n\n----------------------------------------\n\nTITLE: Customizing GPU Parameters for Deck.gl Deck Instance in JavaScript\nDESCRIPTION: Illustrates how to override global GPU parameters using the parameters prop in Deck constructor. Requires importing GPU constant definitions (GL) from '@luma.gl/constants'. Parameters can disable depth testing or alter blend functions for custom rendering behavior. These parameters are applied before each frame and individual layers can override them.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport GL from '@luma.gl/constants';\nnew Deck({\n  // ...\n  parameters: {\n    blendFunc: [GL.ONE, GL.ONE, GL.ONE, GL.ONE],\n    depthTest: false\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration Properties of `DeckGL`\nDESCRIPTION: This snippet describes various properties that configure the `DeckGL` instance, such as `container`, `map`, `mapStyle`, and `controller`. These settings control container element, base map options, interaction handlers, and viewport behavior, with sensible defaults and options for customization. They are essential for setting up the visualization environment according to specific requirements.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.0/purejs-standalone-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Specifying SVG Image Dimensions to Avoid createImageBitmap Exceptions - TypeScript\nDESCRIPTION: Provides a solution when loading SVG images lacking intrinsic dimensions, which cause DOMExceptions in createImageBitmap. By explicitly setting resizeWidth, resizeHeight, and resizeQuality in loadOptions.imagebitmap, the IconLayer properly decodes SVG images preventing runtime errors and enabling smooth image rendering.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew IconLayer({\n  iconAtlas: '/path/to/image.svg',\n  loadOptions: {\n    imagebitmap: {\n      resizeWidth: 256,\n      resizeHeight: 256,\n      resizeQuality: 'high'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating H3ClusterLayer instance with default properties in JavaScript\nDESCRIPTION: Illustrates a minimal creation of an H3ClusterLayer instance using the global 'deck' object available in the browser after including deck.gl scripts. This snippet shows the default instantiation without parameters, useful for quick tests or prototyping. It assumes the deck.gl and h3-js scripts are loaded beforehand in the correct order.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-cluster-layer.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.H3ClusterLayer({});\n```\n\n----------------------------------------\n\nTITLE: GPU Grid Aggregation Vertex Shader for Cell Projection\nDESCRIPTION: GLSL vertex shader code that performs point projection to screen space and transforms coordinates to grid cells. It converts window positions to grid coordinates and moves points to pixel centers to ensure correct rendering.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/gpu-screengrid-aggregation-rfc.md#_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\n  vec2 windowPos = project_position(positions);\n  windowPos = project_to_pixel(windowPos);\n\n  // Transform (0,0):windowSize -> (0, 0): gridSize\n  vec2 pos = floor(windowPos / cellSize);\n\n  // Transform (0,0):gridSize -> (-1, -1):(1,1)\n  pos = (pos * (2., 2.) / (gridSize)) - (1., 1.);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Layer with Interleaved Buffers\nDESCRIPTION: This TypeScript snippet shows how to configure a `PointCloudLayer` to use an interleaved buffer.  It creates a buffer from the interleaved `positionsAndColors` data, then sets the `getPosition` and `getColor` attributes to read from the buffer with the appropriate size, offset, and stride.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst buffer = deckInstance.device.createBuffer({data: data.positionsAndColors});\n\nconst layer = new PointCloudLayer({\n  data: {\n    length : data.pointCount,\n    attributes: {\n      getPosition: {buffer, size: 3, offset: 0, stride: 24},\n      getColor: {buffer, size: 3, offset: 12, stride: 24},\n    }\n  },\n  // constant accessor works without raw data\n  getNormal: [0, 0, 1]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing VectorTileLayer from '@deck.gl/carto' in TypeScript\nDESCRIPTION: This code demonstrates how to import the VectorTileLayer class from the '@deck.gl/carto' package in TypeScript, enabling TypeScript-aware development with appropriate type checking and IntelliSense support.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/vector-tile-layer.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {VectorTileLayer} from '@deck.gl/carto';\nnew VectorTileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Rendering Tile3DLayer with CesiumIonLoader in React (TSX)\nDESCRIPTION: Illustrates how to use Tile3DLayer within a React functional component using TypeScript syntax. It demonstrates managing the initial view state with React's useState hook and updating it dynamically upon loading a tileset through the onTilesetLoad callback. The snippet configures the Tile3DLayer to fetch 3D Tiles data from a Cesium ION URL, using a provided access token and specifying point size. The DeckGL component is used as a React wrapper to render the layer with controller support.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/tile-3d-layer.md#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport React, {useState} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\nimport {CesiumIonLoader} from '@loaders.gl/3d-tiles';\nimport type {MapViewState} from '@deck.gl/core';\nimport type {Tileset3D} from '@loaders.gl/tiles';\n\nfunction App() {\n  const [initialViewState, setInitialViewState] = useState<MapViewState>({\n    longitude: 10,\n    latitude: 50,\n    zoom: 2\n  });\n\n  const layer = new Tile3DLayer({\n    id: 'tile-3d-layer',\n    // Tileset json file url\n    data: 'https://assets.cesium.com/43978/tileset.json',\n    loader: CesiumIonLoader,\n    loadOptions: {\n      // Set up Ion account: https://cesium.com/docs/tutorials/getting-started/#your-first-app\n      'cesium-ion': {accessToken: '<ion_access_token_for_your_asset>'}\n    },\n    onTilesetLoad: (tileset: Tileset3D) => {\n      // Recenter to cover the tileset\n      const {cartographicCenter, zoom} = tileset;\n      setInitialViewState({\n        longitude: cartographicCenter[0],\n        latitude: cartographicCenter[1],\n        zoom\n      });\n    },\n    pointSize: 2\n  });\n\n  return <DeckGL\n    initialViewState={initialViewState}\n    controller\n    layers={[layer]}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating `project_position_to_clipspace` Signature in GLSL\nDESCRIPTION: Shows the updated GLSL function signature for `project_position_to_clipspace` in `project32` and `project64` modules, relevant when upgrading deck.gl versions affecting the projection system. The second parameter changed from `vec2 position64xyLow` to `vec3 position64Low`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_15\n\nLANGUAGE: glsl\nCODE:\n```\n// Old: vec4 project_position_to_clipspace(vec3 position, vec2 position64xyLow, vec3 offset)\n// New:\nvec4 project_position_to_clipspace(vec3 position, vec3 position64Low, vec3 offset)\n```\n\n----------------------------------------\n\nTITLE: JSON format for referencing binary data in layers\nDESCRIPTION: Shows the JSON format for referencing binary data in a layer configuration, using the 'deck://' protocol to point to resources in the DataManager.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/data-manager-rfc.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"@@type\": \"PointCloudLayer\",\n  \"data\": {\n    \"length\": 1e6,\n    \"attributes\": {\n      \"positions\": {\"buffer\": \"deck://interleaved-pointcloud-date\", \"size\": 3, \"stride\": 24},\n      \"colors\": {\"buffer\": \"deck://interleaved-pointcloud-date\", \"size\": 4, \"stride\": 24, \"offset\": 12, \"type\": \"uint8\"}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PointLabelLayer Layout Examples in JavaScript\nDESCRIPTION: Provides JavaScript object examples showing how to configure the layout properties (`getTextAnchor`, `getAlignmentBaseline`) of `PointLabelLayer` to achieve different label placements relative to the point, such as right-aligned, above the point, or with secondary text below.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/point-label-layer.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Right-aligned labels\n{\n  getTextAnchor: 'start',\n  getAlignmentBaseline: 'center'\n}\n\n// Labels above points\n{\n  getTextAnchor: 'middle',\n  getAlignmentBaseline: 'bottom'\n}\n\n// Labels with secondary text below\n{\n  getTextAnchor: 'start',\n  getAlignmentBaseline: 'center',\n  getSecondaryText: d => d.subtitle\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ClipExtension Instance - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new instance of the ClipExtension in JavaScript. It imports the ClipExtension class and instantiates it using the `new` keyword. This instance can then be added to a layer's `extensions` property.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/clip-extension.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ClipExtension} from '@deck.gl/extensions';\nnew ClipExtension();\n```\n\n----------------------------------------\n\nTITLE: Creating a GlobeView with deck.gl for 3D Globe Visualization (JavaScript)\nDESCRIPTION: This code demonstrates initialization of a GlobeView in deck.gl, allowing geospatial data to be visualized on a 3D globe instead of a map projection. It requires deck.gl's GlobeView module and is used alongside layers like BitmapLayer or GeoJsonLayer for context.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst deck = new Deck({\n  initialViewState: {...},\n  views: [new GlobeView({\n    id: 'globe-view'\n  })],\n  layers: [...]\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Animation to Attributes - JavaScript\nDESCRIPTION: This snippet shows how to use the `Animation` class to animate attributes, specifically the `getColor` attribute in a `ScatterplotLayer`.  The animation starts with an initial color and transitions towards a color based on the data. The animation uses `d => d.color` to access the desired color value from the data. The animation takes 3 seconds. \nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/generic-layer-prop-animation-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst colorAnimation = new Animation([0, 0, 0, 0])\n    .to({value: d => d.color, time: 3000});\n\nnew ScatterplotLayer({\n    ...\n    getColor: colorAnimation\n});\n```\n\n----------------------------------------\n\nTITLE: Using JSON Array with PathLayer (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use a plain JSON array as input data for deck.gl's PathLayer. It showcases the typical usage with `getPath` and `getColor` accessors to extract path coordinates and colors from the data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/path-layer.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst PATH_DATA = [\n  {\n    path: [[-122.4, 37.7], [-122.5, 37.8], [-122.6, 37.85]],\n    name: 'Richmond - Millbrae',\n    color: [255, 0, 0]\n  },\n  // ...\n];\n\nnew PathLayer({\n  data: PATH_DATA,\n  getPath: d => d.path,\n  getColor: d => d.color\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring Layer Default Properties with `defaultProps` in JavaScript\nDESCRIPTION: This snippet demonstrates how to extend a deck.gl Layer class and assign default property types and values via the static `defaultProps` property. It enables type checking, async loading, and refines layer behavior through property definitions, ensuring correct prop resolution during instantiation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/prop-types.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Layer} from 'deck.gl';\n\nclass MyLayer extends Layer {\n  // implementation\n}\n\nMyLayer.defaultProps = {\n  texture: {type: 'object', value: null, async: true},\n  strokeOpacity: {type: 'number', value: 1, min: 0, max: 1},\n  strokeColor: {type: 'color', value: [255, 0, 0]},\n  getRadius: {type: 'accessor', value: d => d.radius}\n};\n```\n\n----------------------------------------\n\nTITLE: Reconstructing Classic JavaScript Array from Typed Array for ScatterplotLayer - JavaScript\nDESCRIPTION: Converts a typed binary Float32Array containing positional and color data into a classic JavaScript array of objects. Each object contains subarrays for position and color attributes, plus a radius scalar. This allows compatibility with deck.gl layers that expect iterable arrays, but at the cost of increased CPU and memory usage. It demonstrates unpacking and preparing data from binary format for standard usage.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/binary-data-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = [];\nfor (let i = 0; i < binaryData.length; i += 6) {\n  data.push({\n    position: binaryData.subarray(i, i + 2),\n    radius: binaryData[i + 2],\n    color: binaryData.subarray(i + 3, i + 6)\n  });\n}\n\nnew ScatterplotLayer({\n  data,\n  getPosition: d => d.position,\n  getRadius: d => d.radius,\n  getFillColor: d => d.color\n});\n```\n\n----------------------------------------\n\nTITLE: Automatic type conversion for color strings in custom layers\nDESCRIPTION: This snippet shows how color properties can accept string values like '#FFEEDD', which are automatically converted into color objects or buffers via an internal parseColor function. When instantiating layers, string colors are parsed on-the-fly, simplifying user code and maintaining performance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.3/prop-types-rfc.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew CustomLayer({\n  color: '#FFEEDD' // string to color converted automatically invoked\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Layer({getColor: [255, 0, 0]}) // shared value with generic vertex attribute\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Transitions in deck.gl JavaScript (Proposed API)\nDESCRIPTION: Illustrates the proposed API structure for configuring spring-based transitions within deck.gl layers. It shows how to specify a transition as 'spring' type and provide 'stiffness' and 'dampening' parameters, while also allowing combination with existing options like 'enter' functions and callbacks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/spring-based-transitions-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Layer({\n  transitions: {\n    getPositions: {\n      spring: {\n        type: 'spring',\n        stiffness: 0.001,\n        dampening: 0.05\n      }\n    },\n    getColors: {\n      spring: {\n        type: 'spring',\n        stiffness: 0.001,\n        dampening: 0.05\n      },\n      enter: value => [value[0], value[1], value[2], 0], // fade in\n      onStart: () => {},\n      onEnd: () => {},\n      onInterrupt: () => {}\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ArcGIS Map Component in React\nDESCRIPTION: This snippet imports a 'Demo' component from './arcgis' and renders it within the application. The 'Demo' component is expected to handle the integration of the ArcGIS map into the deck.gl environment. No specific parameters are passed; the component handles its own initialization and configuration. The output is the rendered ArcGIS map within the application's display area. Dependencies include deck.gl and React along with the ArcGIS API.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/arcgis.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './arcgis';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Bundling and Serving App with Vite\nDESCRIPTION: This bash command uses npm and vite to bundle and serve the application. 'npm start' is a shorthand for the script defined in the `package.json` file, typically running `vite` with the necessary configurations.  This command compiles the application code, making it ready to run in a web browser, and starts a local development server to host the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/image-tile/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting deck.gl Multi-View Example - Bash\nDESCRIPTION: This snippet contains shell commands for installing JavaScript package dependencies and starting the deck.gl multi-view example application using npm or yarn and Vite. It helps set up the project environment by installing necessary node modules and launching the app in a development server. Dependencies are assumed to be declared in package.json, and Vite is used for bundling and serving.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/radio/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Using Bash Commands\nDESCRIPTION: This snippet demonstrates how to install project dependencies using either npm or yarn from the command line. It requires that Node.js and either npm or Yarn be already installed on the system. The commands will look for a package.json file in the current directory and install all referenced dependencies, preparing the project environment for development or production builds.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/leaflet/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Settings in deck.gl (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the `material` property of a `GeoJsonLayer` in deck.gl. This includes enabling extrusion and setting the `ambient` and `specularColor` properties of the material. This allows fine-grained control over the lighting effects on the rendered geometries.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/using-effects.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew GeoJsonLayer({\n  id: 'geojson-layer',\n  data: '/path/to/data.geo.json',\n  // lighting only applies to extruded polygons\n  extruded: true,\n  getElevation: f => f.properties.height,\n  material: {\n    ambient: 0.8,\n    specularColor: [0.3, 0.1, 0.2]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies using NPM\nDESCRIPTION: Shows the command-line instructions to install the required deck.gl modules using the Node Package Manager (npm). You can install the umbrella package `deck.gl` or individual packages like `@deck.gl/core`, `@deck.gl/layers`, and `@deck.gl/extensions`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fill-style-extension.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/extensions\n```\n\n----------------------------------------\n\nTITLE: Proposed Expression Syntax in @deck.gl/json\nDESCRIPTION: Example of the proposed '@@=' prefix syntax for expressions in @deck.gl/json. This would allow expressions to be declared explicitly without needing to infer from prop types which strings should be parsed as expressions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/json-converter-keyword-handling-rfc.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n@@=[lng, lat]\n```\n\n----------------------------------------\n\nTITLE: Using deck.gl with Pre-bundled Scripts\nDESCRIPTION: HTML setup for using QuadkeyLayer with pre-bundled scripts from CDN, showing required dependencies and basic JavaScript instantiation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/quadkey-layer.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.QuadkeyLayer({});\n```\n\n----------------------------------------\n\nTITLE: Rendering IconLayer Demo React Component\nDESCRIPTION: This snippet renders the imported Demo component within a React environment, displaying the IconLayer visual as part of the application's UI.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/icon-layer.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Constructor for GlobeViewport (JavaScript)\nDESCRIPTION: This code shows the constructor signature for the `GlobeViewport` class.  It takes an object `opts` with various options, including `width`, `height`, `longitude`, `latitude`, `zoom`, `altitude`, `nearZMultiplier`, and `farZMultiplier`. It is essential for configuring the viewport's dimensions, location, and projection parameters. The constructor's parameters set up the view's characteristics.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/globe-viewport.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew GlobeViewport({width, height, longitude, latitude, zoom});\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies with Version Requirements for deck.gl Project\nDESCRIPTION: This requirements file lists Python packages with their version constraints needed for developing, testing, and maintaining the deck.gl project. It includes testing frameworks, code quality tools, documentation generators, and utility packages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/requirements/requirements-dev.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nblack==22.3.0\ncarto-auth>=0.2.0\nflake8==4.0.1\nipython>=7.8.0\npytest-cov==3.0.0\npytest-mock==3.8.2\npytest==7.1.2\nrequests-mock==1.9.3\nsphinx_rtd_theme==2.0.0\ntokenize-rt>=3.2.0\ntwine==4.0.0\ntyping-extensions>=4.0.0\nwheel==0.37.1\n```\n\n----------------------------------------\n\nTITLE: Setting WebGL Context in deck.gl\nDESCRIPTION: This snippet demonstrates how to set the WebGL context in deck.gl, using both a direct method call and a prop. This allows deck.gl to share the same rendering context with other libraries, such as mapbox-gl, enabling more complex integrations and rendering scenarios. The code shows two methods for initializing with an external context.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.2/mapbox-custom-layer-rfc.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndeck.setWebGLContext(gl : WebGLRenderingContext);\n```\n\n----------------------------------------\n\nTITLE: Position and Color Format Specifications\nDESCRIPTION: Properties `positionFormat` and `colorFormat` specify how position and color data are interpreted within layers. `positionFormat` can be `'XYZ'` or `'XY'`, affecting how coordinate arrays are read. `colorFormat` can be `'RGBA'` or `'RGB'`, influencing how colors are processed, particularly regarding alpha transparency. Defaults are `'XYZ'` and `'RGBA'` respectively.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n`positionFormat` sets the expected format of position arrays for relevant layers, defaulting to `'XYZ'`.\n\n`colorFormat` determines how color data is parsed, defaulting to `'RGBA'`, with `'RGB'` ignoring alpha transparency.\n```\n\n----------------------------------------\n\nTITLE: Supplying Non-Iterable Binary Data Object Directly to ScatterplotLayer - JavaScript\nDESCRIPTION: Demonstrates how to pass a non-iterable object containing a typed array and a length property as the `data` prop to a ScatterplotLayer. Accessors extract attributes by interpreting the binary buffer layout directly, using index calculations and subarray slicing. This approach avoids reconstructing classic arrays and reduces CPU and memory overhead, enabling efficient rendering of large binary datasets with deck.gl. The example defines accessors for position, radius, and fill color based on fixed offsets.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/binary-data-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = {src: binaryData, length: 3}\n\nnew ScatterplotLayer({\n  data,\n  getPosition: (object, {index, data, target}) => {\n    target[0] = data.src[index * 6];\n    target[1] = data.src[index * 6 + 1];\n    target[2] = 0;\n    return target;\n  },\n  getRadius: (object, {index, data}) => {\n    return data.src[index * 6 + 2];\n  },\n  getFillColor: (object, {index, data, target}) => {\n    target[0] = data.src[index * 6 + 3];\n    target[1] = data.src[index * 6 + 4];\n    target[2] = data.src[index * 6 + 5];\n    target[3] = 255;\n    return target;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running deck.gl example (Bash)\nDESCRIPTION: This snippet provides the bash commands required to set up and run the deck.gl GeoJsonLayer example project. `npm install` or `yarn` are used to install project dependencies, while `npm start` initiates the build and serving process, typically powered by Vite, making the application accessible via a local web server.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/highway/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Picking Objects within a Bounding Box with pickObjects (JavaScript)\nDESCRIPTION: Retrieves all unique pickable and visible objects located within a defined rectangular bounding box on the screen. This method is useful for selecting multiple objects via a drag or area selection. The snippet demonstrates calling `pickObjects` with coordinates and optional `width`, `height`, `layerIds`, and `maxObjects`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeck.pickObjects({x, y, width, height, layerIds, maxObjects})\n```\n\n----------------------------------------\n\nTITLE: Creating SunLight Instance with JavaScript\nDESCRIPTION: This code snippet shows the constructor call for creating a `SunLight` instance. It takes an object as input, allowing users to set timestamp, color, and intensity. The timestamp is a Unix timestamp in milliseconds. The color parameter is the RGB color of sun, and intensity is the strength of the light. The expected output is a configured `SunLight` object ready for use.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/sun-light.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sunLight = new SunLight({timestamp, color, intensity});\n```\n\n----------------------------------------\n\nTITLE: Using aggregation Prop in HeatmapLayer for Data Summarization (JavaScript)\nDESCRIPTION: This snippet demonstrates configuring the HeatmapLayer with the 'aggregation' prop set to 'SUM' or 'MEAN', affecting how data points are aggregated in the heatmap visualization. This enhances the layer's analytical capabilities for density or value-based visualizations. Requires deck.gl HeatmapLayer component.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst heatmapLayer = new HeatmapLayer({\n  id: 'heatmap',\n  data: yourData,\n  aggregation: 'SUM', // or 'MEAN'\n  /* other configs */\n});\n```\n\n----------------------------------------\n\nTITLE: Extending OrthographicController with Custom Behavior in deck.gl\nDESCRIPTION: Demonstrates how to create a custom controller by extending the OrthographicController class. The example overrides the handleEvent method to implement custom behavior for pan events while preserving default behavior for other events.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/orthographic-controller.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, OrthographicView, OrthographicController} from '@deck.gl/core';\n\nclass MyOrthographicController extends OrthographicController {\n\n  handleEvent(event) {\n    if (event.type === 'pan') {\n      // do something\n    } else {\n      super.handleEvent(event);\n    }\n  }\n}\n\nnew Deck({\n  views: new OrthographicView(),\n  controller: {type: MyOrthographicController},\n  initialViewState: viewState\n})\n```\n\n----------------------------------------\n\nTITLE: Bundling and Serving the App with vite - Bash\nDESCRIPTION: This command uses npm to bundle and serve the application using vite. It assumes vite is configured to handle the project setup and serve the application.\n\nDependencies: npm, vite\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/geojson/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom HTML Tooltip Dictionary in pydeck - Python\nDESCRIPTION: This code snippet defines a Python dictionary that customizes the tooltip for a pydeck visualization, setting the \"html\" key for formatted HTML content and the \"style\" key for CSS styling. The template syntax uses placeholders matching attributes of the picked layer's data point, such as {elevationValue} and {colorValue}. Only either \"html\" or \"text\" should be set at a time; the template will be populated dynamically during user interaction.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/tooltip.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntooltip = {\n   \"html\": \"<b>Elevation Value:</b> {elevationValue} <br/> <b>Color Value:</b> {colorValue}\",\n   \"style\": {\n        \"backgroundColor\": \"steelblue\",\n        \"color\": \"white\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: loadArcGISModules Function Signature in JavaScript\nDESCRIPTION: This snippet presents the function signature for `loadArcGISModules`. It highlights the two optional parameters: `modules`, an array of strings representing ArcGIS modules to load via `esri-loader`, and `loadScriptOptions`, an object containing options for `esri-loader`'s `loadScript` function.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/arcgis/load-arcgis-modules.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nloadArcGISModules(modules, loadScriptOptions);\n```\n\n----------------------------------------\n\nTITLE: Rendering GlobeView with deck.gl in JSX\nDESCRIPTION: This snippet renders the Demo component which presumably handles the globe view functionality. The component is imported from a relative path and is immediately used within the JSX. This demonstrates a basic example of using a deck.gl component within another react component. There are no explicit parameters, likely relying on default settings or prop settings provided by Demo.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/globe-view.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Demo from './globe-view';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: PathLayer with Binary Data (JavaScript)\nDESCRIPTION: This example illustrates using binary data with the PathLayer in deck.gl. The binary data contains vertex positions, colors, and starting indices for each path. The `data` object specifies the `length`, `startIndices`, and `attributes`, which define how to access the `positions` and `colors` arrays.  The `size` property indicates the number of components (e.g., 2 for x, y coordinates).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/binary-support-improvements-rfc.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// EXAMPLE 2 - PathLayer\n/*\n   binaryData is packed on the server:\n   original data: [\n     {path: [[x, y], [x, y], [x, y]]}, // p0\n     {path: [[x, y], [x, y]]}, // p1\n     ...\n   ]\n   binary data: {\n     positions: [p00x, p00y, p01x, p01y, p02x, p02y, p10x, p10y, ...],\n     colors: [p00r, p00g, p00b, p01r, p01g, p01b, p02r, p02g, p02b, p10r, p10g, p10b, ...],\n     startingIndices: [0, 3, 5, ...]\n   }\n*/\nnew PathLayer({\n  data: {\n    length: binaryData.positions.length / 2,\n    startIndices: binaryData.startingIndices,\n    attributes: {\n      getPath: {value: binaryData.positions, size: 2},\n      getColor: {value: binaryData.colors, size: 3}\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Serving Local Jupyter Widget using Bash/Python\nDESCRIPTION: This snippet details how to build and serve the `@deck.gl/jupyter-widget` locally. It changes directory to the widget module, builds it with `yarn`, sets an environment variable for the port, and starts a simple Python HTTP server to host the built files.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/contributing.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd deckl.gl/modules/jupyter-widget\nyarn run build\n# select any port you wish\nPYDECK_DEV_PORT=8000\npython -m http.server $PYDECK_DEV_PORT\n```\n\n----------------------------------------\n\nTITLE: Initializing ScreenshotWidget in deck.gl (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize and use the `ScreenshotWidget` within a deck.gl application.  It creates a `Deck` instance and includes the `ScreenshotWidget` in the `widgets` configuration. The widget will then render on the deck.gl canvas, allowing users to capture screenshots.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/screenshot-widget.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {ScreenshotWidget} from '@deck.gl/widgets';\nimport {Deck} from '@deck.gl/core';\n\nconst deck = new Deck({\n  widgets: [new ScreenshotWidget()]\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing resources in layers\nDESCRIPTION: Shows how to reference shared resources from the DataManager in different deck.gl layers, demonstrating shared datasets, interleaved binary data handling, and populating async properties.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/data-manager-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst layers = [\n  // Multiple layers sharing the same dataset\n  new ScatterplotLayer({data: 'deck://airports', ...}),\n  new ColumnLayer({data: 'deck://airports', ...}),\n  \n  // Interleaved binary\n  new PointCloudLayer({\n    data: {\n      length: 1e6,\n      attributes: {\n        positions: {buffer: 'deck://interleaved-pointcloud-date', size: 3, stride: 24},\n        colors: {buffer: 'deck://interleaved-pointcloud-date', size: 4, stride: 24, offset: 12, type: GL.UNSIGNED_BYTE},\n      }\n    }\n  }),\n\n  // Populate arbitrary async prop\n  new SimpleMeshLayer({mesh: 'deck://car-mesh', ...})\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Layer Instance with Resolved Properties in JavaScript\nDESCRIPTION: This snippet shows how to instantiate a custom layer with specific props, illustrating how default and provided props are merged. The `props` object will include default values combined with user-specified overrides, facilitating predictable layer configuration.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/prop-types.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst layer = new MyLayer({id: 'my-layer', strokeOpacity: 0.5})\n/*\n  layer.props:\n  {\n    texture: null,\n    strokeOpacity: 0.5,\n    strokeColor: [255, 0, 0],\n    getRadius: d => d.radius,\n    // other default base Layer props\n  }\n */\n```\n\n----------------------------------------\n\nTITLE: Inefficient Layer Visibility Toggle - React\nDESCRIPTION: This React component demonstrates an inefficient method for toggling layer visibility in deck.gl. It conditionally renders layers based on the `layerVisibility` prop. Removing and re-adding layers causes them to be completely regenerated, resulting in performance issues.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App({layerVisibility}: {\n  layerVisibility: {\n    circles: boolean;\n    labels: boolean;\n  }\n}) {\n  const layers = [\n    // when visibility goes from on to off to on, this layer will be completely removed and then regenerated\n    layerVisibility.circles && new ScatterplotLayer({\n      id: 'circles'\n      // ...\n    }),\n    layerVisibility.labels && new TextLayer({\n      id: 'labels',\n      //...\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Web Workers for MVTLoader in deck.gl for Debugging - TypeScript\nDESCRIPTION: Explains importing the full MVTLoader and disabling web workers using loadOptions.worker set to false. This configuration forces the loader to parse data on the main thread instead of spawning workers. Useful when debugging parsing logic or working in environments without worker support.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/loading-data.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MVTLoader} from '@loaders.gl/mvt';\nnew MVTLayer({\n  loaders: [MVTLoader],\n  loadOptions: {worker: false}\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating FlyToInterpolator with MapController in Deck.gl - JavaScript\nDESCRIPTION: Demonstrates how to use the new FlyToInterpolator class with MapController by instantiating the interpolator and passing it as the transitionInterpolator prop. This pattern enables more flexible and class-based customization of viewport transitions. Requires Deck.gl and the FlyToInterpolator class to be available. Expected input is a MapController component, and the interpolator controls transition behavior. Output is the MapController instance configured with the desired transition behavior.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.1/transition-interpolator-class-rfc.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<MapController transitionInterpolator={new FlyToInterpolator()} />\n```\n\n----------------------------------------\n\nTITLE: Inefficient Layer Visibility Toggle - TypeScript\nDESCRIPTION: This TypeScript code shows a bad practice for toggling layer visibility in deck.gl.  It conditionally adds or removes layers based on visibility, leading to complete removal and regeneration of layers when visibility changes.  This can incur significant performance penalties.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nfunction render(layerVisibility: {\n  circles: boolean;\n  labels: boolean;\n}) {\n  const layers = [\n    // when visibility goes from on to off to on, this layer will be completely removed and then regenerated\n    layerVisibility.circles && new ScatterplotLayer({\n      id: 'circles'\n      // ...\n    }),\n    layerVisibility.labels && new TextLayer({\n      id: 'labels',\n      //...\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the Demo Component\nDESCRIPTION: This snippet renders the `Demo` component, which has been imported. This code assumes that the `Demo` component manages and displays a visualization using deck.gl's `TerrainExtension`. The expected input is the imported component. The output is the rendering of the Demo component, which will likely showcase a terrain based visualization. No limitations or constraints are immediately visible from this snippet alone.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/terrain-extension.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes in initializeState - JavaScript\nDESCRIPTION: This code shows how to define attributes using the attribute manager.  The positions will be automatically populated from the getPosition accessor, and the colors will be populated by calling calculateInstanceColors. This allows for dynamic attribute updates.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/primitive-layers.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninitializeState() {\n  const {gl} = this.context;\n  this.setState({\n    model: this._getModel(gl)\n  });\n\n  this.state.attributeManager.add({\n    /* this attribute is automatically filled by the return value of `props.getPosition` */\n    instancePositions: {size: 3, accessor: 'getPosition'},\n    /* this attribute is populated by calling `layer.calculateInstanceColors` */\n    instanceColors: {size: 4, type: GL.UNSIGNED_BYTE, accessor: 'getColor', update: this.calculateInstanceColors}\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IconLayer for Collision Filter Compatibility (JavaScript)\nDESCRIPTION: Shows an example `iconMapping` configuration for an IconLayer to ensure compatibility with the CollisionFilterExtension when dealing with transparency. Setting `anchorY` appropriately and potentially adjusting `alphaCutoff` (as mentioned in surrounding text) prevents the anchor point from being discarded during collision checks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/collision-filter-extension.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\niconMapping: {\n  marker: {x: 0, y: 0, width: 128, height: 128, anchorY: 124}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm or yarn (Bash)\nDESCRIPTION: Provides commands to install the project dependencies using either the npm or yarn package managers. This step is necessary before attempting to run the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/google-maps/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Creating a Lighting Effect in deck.gl with JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a `LightingEffect` instance using the previously defined `directionalLight` and `pointLight` objects.  The `LightingEffect` manages the light sources within the scene.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.0/phong-lighting-rfc.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst lightingEffect = new LightingEffect({pointLight, directionalLight}])\n```\n\n----------------------------------------\n\nTITLE: Initializing DeckGL for Data Filtering (React/TSX)\nDESCRIPTION: Sets up the necessary imports (React, DeckGL, ScatterplotLayer), type definitions (`DataType`, `Settings`), and placeholder data (`DATA`) within a React context for subsequent examples illustrating performance optimization techniques related to data filtering.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\ntype DataType = {\n  position: [x: number, y: number];\n  time: number;\n};\ntype Settings = {\n  radius: number;\n  minTime: number;\n  maxTime: number;\n}\nconst DATA: DataType[] = [...];\n```\n\n----------------------------------------\n\nTITLE: Initializing GeohashLayer in JavaScript with deck.gl\nDESCRIPTION: This code snippet creates a GeohashLayer in JavaScript using deck.gl, loading geohash data from an external URL, with properties like extrusion, color, elevation, and tooltip configuration. It demonstrates how to instantiate and add the layer to a deck instance for interactive visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/geohash-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {GeohashLayer} from '@deck.gl/geo-layers';\n\nconst layer = new GeohashLayer({\n  id: 'GeohashLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf.geohashes.json',\n  extruded: true,\n  getGeohash: d => d.geohash,\n  getElevation: d => d.value,\n  getFillColor: d => [d.value * 255, (1 - d.value) * 128, (1 - d.value) * 255],\n  elevationScale: 1000,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `${object.geohash} value: ${object.value}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Deck Canvas Element (JavaScript)\nDESCRIPTION: Retrieves the HTML canvas element that the Deck instance is rendering into. This can be useful for directly interacting with the canvas element in the DOM. The snippet shows the simple method call which returns an `HTMLCanvasElement` or `null`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deck.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeck.getCanvas()\n```\n\n----------------------------------------\n\nTITLE: Initializing pydeck and Loading Data in Python\nDESCRIPTION: Imports the `pydeck` and `pandas` libraries. Prints the `pydeck` version and defines a constant `UK_ACCIDENTS_DATA` holding the URL to a CSV file. It then uses pandas to read the CSV data from the URL and displays the first few rows using `.head()`. This prepares the environment and loads the necessary data for visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/01 - Introduction.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pydeck as pdk\nprint(\"Welcome to pydeck version\", pdk.__version__)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\nUK_ACCIDENTS_DATA = 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'\n\npd.read_csv(UK_ACCIDENTS_DATA).head()\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Views with View States in TypeScript\nDESCRIPTION: TypeScript implementation of a deck.gl application with two MapViews that demonstrates proper type definitions for view states and view IDs. The code handles synchronization between main and minimap views with type safety.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Deck, MapView, MapViewState} from '@deck.gl/core';\n\nlet currentViewState: {\n  main: MapViewState;\n  minimap: MapViewState\n} = {\n  main: {\n    longitude: -122.4,\n    latitude: 37.8,\n    pitch: 30,\n    zoom: 12,\n  },\n  minimap: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 8\n  }\n};\n\nfunction onViewStateChange({viewId, viewState}: {\n  viewId: 'main' | 'minimap';\n  viewState: MapViewState;\n}) {\n  if (viewId === 'main') {\n    // When user moves the camera in the first-person view, the minimap should follow\n    currentViewState = {\n      main: viewState,\n      minimap: {\n        ...currentViewStates.minimap,\n        longitude: viewState.longitude,\n        latitude: viewState.latitude\n      }\n    };\n  } else {\n    // Only allow the user to change the zoom in the minimap\n    currentViewState = {\n      main: currentViewStates.main,\n      minimap: {\n        ...currentViewStates.minimap,\n        zoom: viewState.zoom\n      }\n    };\n  }\n  // Apply the new view state\n  deckInstance.setProps({viewState: currentViewState});\n};\n\nconst deckInstance = new Deck<[MapView, MapView]>({\n  views: [\n    new MapView({id: 'main', controller: true}),\n    new MapView({id: 'minimap', x: 10, y: 10, width: 300, height: 200, controller: true})\n  ],\n  viewState: currentViewState\n  onViewStateChange\n});\n```\n\n----------------------------------------\n\nTITLE: Defining SourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `SourceOptions` type, which includes global options shared by all data source functions. These options include `accessToken`, `connectionName`, `apiBaseUrl`, `clientId`, `headers`, and `maxLengthURL`.  These options are used to configure the requests made by the data source functions to the CARTO API.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype SourceOptions = {\n  accessToken: string;\n  connectionName: string;\n  apiBaseUrl?: string;\n  clientId?: string;\n  headers?: Record<string, string>;\n  maxLengthURL?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Data Filter Color Filtering in deck.gl Fragment Shader with GLSL\nDESCRIPTION: This GLSL fragment shader snippet demonstrates the use of the 'filter_filterColor' function from the 'filter' shader module to modify or discard fragment colors based on data filtering logic. By passing the original fragment color, the function conditionally recolors or discards fragments to visually implement filtering effects at the fragment level.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/data-filter-rfc.md#_snippet_3\n\nLANGUAGE: GLSL\nCODE:\n```\nvoid main() {\n    ...\n    gl_FragColor = filter_filterColor(gl_FragColor);    \n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Vite App - Bash\nDESCRIPTION: Installs the required dependencies for the deck.gl and CARTO integration using npm or yarn, and then bundles and serves the application using Vite. Requires Node.js, npm or yarn, and a compatible Vite setup. Expects to be executed in the project directory. Outputs a running local development server.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/carto-sql/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n\n```\n\n----------------------------------------\n\nTITLE: Installing core, layers, aggregation-layers and react package with Yarn\nDESCRIPTION: This command installs `@deck.gl/core`, `@deck.gl/layers`, `@deck.gl/aggregation-layers` and `@deck.gl/react` packages selectively with yarn, providing the necessary dependencies to use HexagonLayer with React. This approach reduces the project size and offers control over installed dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @deck.gl/core @deck.gl/layers @deck.gl/aggregation-layers @deck.gl/react\n```\n\n----------------------------------------\n\nTITLE: GLSL: project_position_to_clipspace Function Implementation\nDESCRIPTION: Defines the 32-bit implementation of the project_position_to_clipspace function that projects a 3D vertex position to clip space, considering low-precision components and an offset. This function accepts vertex position, its lower part, and an offset, returning the projected clip space position.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/project32.md#_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\nvec4 project_position_to_clipspace(vec3 position, vec3 position64Low, vec3 offset)\nvec4 project_position_to_clipspace(vec3 position, vec3 position64Low, vec3 offset, out vec4 commonPosition)\n```\n\n----------------------------------------\n\nTITLE: Defining H3TableSourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `H3TableSourceOptions` type for the `h3TableSource` function. It includes options for `aggregationExp`, `aggregationResLevel`, `columns`, `spatialDataColumn`, and `tableName`. These parameters are used to configure how the H3 data is aggregated and fetched from the specified table.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntype H3TableSourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ArcLayer in JavaScript\nDESCRIPTION: Example of creating an ArcLayer instance in JavaScript with Deck.gl core to visualize BART transportation segments with color-coded arcs based on inbound/outbound traffic values.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/arc-layer.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\nimport {ArcLayer} from '@deck.gl/layers';\n\nconst layer = new ArcLayer({\n  id: 'ArcLayer',\n  data: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/bart-segments.json',\n  getSourcePosition: d => d.from.coordinates,\n  getTargetPosition: d => d.to.coordinates,\n  getSourceColor: d => [Math.sqrt(d.inbound), 140, 0],\n  getTargetColor: d => [Math.sqrt(d.outbound), 140, 0],\n  getWidth: 12,\n  pickable: true\n});\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.74,\n    zoom: 11\n  },\n  controller: true,\n  getTooltip: ({object}) => object && `${object.from.name} to ${object.to.name}`,\n  layers: [layer]\n});\n```\n\n----------------------------------------\n\nTITLE: Including Pre-bundled Scripts for Standalone deck.gl (HTML)\nDESCRIPTION: Shows how to include the necessary deck.gl modules (`core`, `layers`, `carto`, etc.) and a basemap provider (MapLibre GL JS) using `<script>` tags from a CDN like UNPKG for a standalone HTML/JavaScript setup. This avoids the need for a build system.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/basemap.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core/@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/mesh-layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/extensions@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n\n<!-- basemap provider -->\n<script src=\"https://unpkg.com/maplibre-gl/dist/maplibre-gl.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Inefficient Data Filtering in DeckGL (React/TSX)\nDESCRIPTION: Illustrates a performance issue in a React component using `DeckGL`. The `data` prop for `ScatterplotLayer` is generated using `Array.prototype.filter` within the component function, creating a new array on every render and triggering unnecessary layer updates even if `settings` haven't changed relevantly.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App({settings}: {\n  settings: Settings;\n}) {\n  const layers = [\n    new ScatterplotLayer<DataType>({\n      // `filter` creates a new array every time `render` is called, even if minTime/maxTime have not changed\n      data: DATA.filter(d => d.time >= settings.minTime && d.time <= settings.maxTime),\n      getPosition: (d: DataType) => d.position,\n      getRadius: settings.radius\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting JavaScript Instantiation from JSON Layer Descriptor\nDESCRIPTION: An example of how the JSONConverter converts a JSON object containing a layer descriptor with a 'type' property into a corresponding JavaScript class instance in deck.gl. This snippet highlights the conversion of the JSON metadata into an actual ScatterplotLayer instance with supplied data, representing how the adaptor enriches JSON with functional layer instances at runtime. This mechanism enforces separation between layer catalog management and JSON descriptions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.1/json-layers-rfc.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ScatterplotLayer({data})\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl from NPM\nDESCRIPTION: This code snippet shows how to install the deck.gl library using npm. It provides two options: installing the complete deck.gl package or installing @deck.gl/core and @deck.gl/google-maps separately. The user must have Node.js and npm installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/google-maps/overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/google-maps\n```\n\n----------------------------------------\n\nTITLE: Configuring Layer Mask for Highlighting in deck.gl\nDESCRIPTION: JavaScript code snippet showing how to use multiple layers as masks to highlight pixels. This configuration will highlight all pixels that fall into areas defined by either of the specified layers with the designated color.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/layer-intersections-rfc.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst layerMask = {\n  layers: ['layerid-1', 'layer-id2']\n  operation: 'highlight'\n  highlightColor: [255, 0, 0, 255]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Polygon Geometries in deck.gl (TypeScript)\nDESCRIPTION: This code snippet defines the structure for polygon geometries in deck.gl using TypeScript. It specifies how vertex positions, polygon indices, and primitive polygon indices are stored to represent polygon features. It depends on the `@loaders.gl/schema` package. The output is a BinaryPolygonFeature object, which can be used to render polygons. The polygonIndicies specifies the vertex index where each polygon starts and primitivePolygonIndices separates holes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {BinaryPolygonFeature} from '@loaders.gl/schema';\n\ndata.polygons = {\n  positions: {value: Float32Array([x0, y0, x1, y1, x2, y2, ...]), size: 2}, // Use size=2 for xy and size=3 for xyz\n  polygonIndices: {value: Uint16Array([0, 100, ...]), size: 1}, // First polygon contains vertex 0-99\n  primitivePolygonIndices: {value: Uint16Array([0, 60, 80, 100, ...]), size: 1}, // First polygon has 2 holes, made of vertex 60-79 and vertex 80-99\n  // featureIds\n  // globalFeatureIds\n  // numericProps\n  // properties\n} as BinaryPolygonFeature\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Layer Extension in deck.gl with JavaScript\nDESCRIPTION: Illustrates a minimal LayerExtension subclass demonstrating how options can be passed to the constructor and accessed later via the opts property. Highlights that extensions with identical constructors and opts objects are considered equal and avoid unnecessary shader recompilations during layer updates.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/layer-extensions.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass RedFilter extends LayerExtension {}\n\nconst extension = new RedFilter({color: [1, 1, 0]});\nconsole.log(extension.opts);\n```\n\n----------------------------------------\n\nTITLE: CSS Icon Overrides\nDESCRIPTION: This snippet demonstrates how to customize the icons used in deck.gl widgets using CSS. It uses the `.deck-widget` selector combined with CSS variables (e.g., `--icon-fullscreen-enter`) to specify a custom SVG icon.  It also sets the icon's color using `--button-icon-idle`.  This requires an SVG data URL.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/styling.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.deck-widget {\n    --icon-fullscreen-enter: url('path_to_your_svg_icon.svg');\n    --button-icon-idle: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: View Constructor Parameters Description\nDESCRIPTION: Provides comprehensive details on each constructor parameter for the 'View' class, including 'id', positional and size attributes ('x', 'y', 'width', 'height'), 'padding', 'controller', 'viewState', and 'clear'. Explains optionality, default values, and how to configure views for different interaction and rendering scenarios.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/view.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Importing and Rendering CollisionFilterExtension Demo in JavaScript\nDESCRIPTION: This snippet imports the Demo module from the collision-filter-extension source and renders it as a component. It requires support for modern JavaScript modules and JSX syntax, typically used in React environments. The Demo component likely demonstrates the behavior or capabilities of the CollisionFilterExtension, handling visual collision filtering in a UI or map context.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/collision-filter-extension.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './collision-filter-extension';\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Using HexagonLayer with Elevation Transition in React (TypeScript)\nDESCRIPTION: Implements a React component using `DeckGL` from `@deck.gl/react` to display a `HexagonLayer`. Fetches data using `useEffect` and `useState`, and configures a transition for `elevationScale`. Requires React, `@deck.gl/react`, `@deck.gl/core`, and `@deck.gl/aggregation-layers`. The transition makes the hexagons animate their height over 3000ms when data loads.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useEffect, useState} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\n\ntype DataType = {\n  longitude: number;\n  latitude: number;\n  count: number;\n};\n\nfunction App() {\n  const [data, setData] = useState<DataType[] | null>(null);\n\n  useEffect(() => {\n    (async () => {\n      const resp = await fetch('/path/to/data.json');\n      const data = await resp.json() as DataType[];\n      setData(data);\n    })();\n  }, []);\n\n  const layers = [\n    new HexagonLayer<DataType>({\n      id: '3d-heatmap',\n      data,\n      getPosition: (d: DataType) => [d.longitude, d.latitude],\n      getElevationWeight: (d: DataType) => d.count,\n      extruded: true,\n      elevationScale: data && data.length ? 50 : 0,\n      transitions: {\n        elevationScale: 3000\n      }\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Tooltip Content (JavaScript)\nDESCRIPTION: This snippet demonstrates customizing the content and style of the built-in tooltip in JavaScript by returning an object with `html` and `style` properties from the `getTooltip` callback.  The `html` property allows rendering HTML content, and the `style` property allows styling the tooltip with CSS.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getTooltip({object}) {\n  return object && {\n    html: `<h2>Message:</h2> <div>${object.message}</div>`,\n    style: {\n      backgroundColor: '#f00',\n      fontSize: '0.8em'\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring colorScaleType in deck.gl GPU Aggregation Layer\nDESCRIPTION: The colorScaleType property determines how numeric values are mapped to colors in the color range. It supports linear interpolation, quantize (equal segments), quantile (equal-size groups), and ordinal (unique value) mappings.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of setting colorScaleType\nnew GPUGridLayer({\n  colorScaleType: 'quantize', // Default value\n  // Other options: 'linear', 'quantile', 'ordinal'\n  colorDomain: [0, 100],\n  colorRange: [[255,0,0], [0,255,0]] // red to green\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Interpolation Transitions in deck.gl JavaScript\nDESCRIPTION: Demonstrates how the existing deck.gl API configures interpolation-based transitions for layer attributes. It shows setting a simple duration or providing a detailed configuration object with easing functions, enter transitions, and callback handlers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/spring-based-transitions-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Layer({\n  transitions: {\n    getPositions: 600,\n    getColors: {\n      duration: 300,\n      easing: d3.easeCubicInOut,\n      enter: value => [value[0], value[1], value[2], 0], // fade in\n      onStart: () => {},\n      onEnd: () => {},\n      onInterrupt: () => {}\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Bundling and Serving the deck.gl Example with vite\nDESCRIPTION: This bash command leverages vite to bundle the deck.gl example application and serve it locally. The 'npm start' command likely executes a script defined in the project's `package.json` that uses vite to build and launch the app, making it accessible in a web browser. This step is essential to view the HeatmapLayer visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/heatmap/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing - pydeck - Bash\nDESCRIPTION: This command uses the pip package installer, the standard package management system for Python, to download and install the 'pydeck' library. 'pydeck' provides a native Python API for interacting with the deck.gl visualization library. This installation is a prerequisite for using deck.gl from Python scripts or within environments like Jupyter Notebooks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npip install pydeck\n```\n\n----------------------------------------\n\nTITLE: Rendering CARTO DW Data in Python\nDESCRIPTION: This code snippet creates a CartoLayer to render world airport data from the CARTO Data Warehouse. It uses the `CartoLayer` to display the data, specifying the data source, connection type, credentials, styling parameters, and other rendering options. The output is the interactive map visualizing the airports.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/carto_layer.ipynb#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nlayer = pdk.Layer(\n    \"CartoLayer\",\n    data=\"carto-demo-data.demo_tables.world_airports\",\n    type_=pdkc.MapType.TABLE,\n    connection=pdkc.CartoConnection.CARTO_DW,\n    credentials=pdkc.get_layer_credentials(carto_auth),\n    get_fill_color=[238, 77, 90],\n    point_radius_min_pixels=2.5,\n    pickable=True,\n)\n\nview_state = pdk.ViewState(latitude=0, longitude=0, zoom=1)\n\ntooltip = {\"html\": \"<b>Name:</b> {name}\", \"style\": {\"color\": \"white\"}}\n\npdk.Deck(\n    layer, map_style=pdk.map_styles.ROAD, initial_view_state=view_state, tooltip=tooltip\n)\n```\n\n----------------------------------------\n\nTITLE: Performing aggregation on CPU using ScreenGridAggregator\nDESCRIPTION: Code example demonstrating how to use the ScreenGridAggregator class to perform grid aggregation on the CPU. It takes position and weight data along with cell size and viewport parameters, and returns a Buffer object with aggregated results.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/gpu-screengrid-aggregation-rfc.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n const opts = {\n  positions, // (lng, lat) array\n  weights,\n  cellSize,\n  viewport,\n  useGPU: false\n };\n\n  const sa = new ScreenGridAggregator(gl);\n  const result = sa.run(opts);\n\n  //result contains Buffer object with aggregated data.\n```\n\n----------------------------------------\n\nTITLE: Custom fetch for one prop, default for another (JavaScript)\nDESCRIPTION: This example shows how to use a custom `fetch` function for one property (`data`) while using the default `fetch` for another (`bitmap`).  Only the `data` property will have its URL fetched with the custom header.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/data-loading-rfc.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nSomeBitmapLayer({\n    data: DATA_URL, // loaded with custom fetch\n    bitmap: BITMAP_URL, // loaded with default fetch\n    fetch: {\n      data: url => fetch(url, {headers: {...}}),\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Fetch Options Object (JavaScript)\nDESCRIPTION: This example shows how to specify a `fetch` overload that takes an object with parameters to the `fetch` function. It sets `Company-Access-Token` in headers when fetching from `INTERNAL_DATA_URL`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/data-loading-rfc.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nSomeLayer({\n    data: INTERNAL_DATA_URL,\n    fetch: {headers: {'Company-Access-Token': 'Secret-Value'}}\n  })\n```\n\n----------------------------------------\n\nTITLE: Updating a pydeck Visualization Property in Python\nDESCRIPTION: Demonstrates how to dynamically update a property of an existing pydeck visualization. It modifies the `elevation_range` attribute of the previously defined `layer` object and then calls the `r.update()` method on the `pdk.Deck` instance (`r`) to apply the change and re-render the map with the new visual parameter.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/examples/01 - Introduction.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlayer.elevation_range = [0, 10000]\n\nr.update()\n```\n\n----------------------------------------\n\nTITLE: Initializing Deck.gl with ThemeWidget\nDESCRIPTION: This snippet shows how to initialize a deck.gl instance with a `ThemeWidget`. The `ThemeWidget` provides a UI element to switch between dark and light themes.  It's useful for minimal applications without their own theme switching mechanisms.  The `@deck.gl/widgets` package is required.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/styling.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {ThemeWidget} from '@deck.gl/widgets';\n\nnew Deck({\n  widgets=[new ThemeWidget()]\n});\n```\n\n----------------------------------------\n\nTITLE: Support for raster tile orientation with _imageCoordinateSystem in BitmapLayer (JavaScript)\nDESCRIPTION: This snippet shows the use of the experimental '_imageCoordinateSystem' prop in BitmapLayer, which ensures correct rendering of raster tiles in GlobeView with different coordinate systems. It depends on deck.gl's rendering pipeline and layer properties for coordinate system management.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst bitmapLayer = new BitmapLayer({\n  id: 'raster',\n  data: ..., \n  _imageCoordinateSystem: 'GLOBE'\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Pydeck for JupyterLab\nDESCRIPTION: This snippet installs JupyterLab extensions to support pydeck visualizations. The first command installs the JupyterLab manager. The second command obtains the correct version of deck.gl and the final command installs the deck.gl Jupyter widget, using the previously defined DECKGL_SEMVER variable. The commands require a JupyterLab environment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/installation.rst#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\njupyter labextension install @jupyter-widgets/jupyterlab-manager\n```\n\nLANGUAGE: Bash\nCODE:\n```\nDECKGL_SEMVER=`python -c \"import pydeck; print(pydeck.frontend_semver.DECKGL_SEMVER)\"`\n```\n\nLANGUAGE: Bash\nCODE:\n```\njupyter labextension install @deck.gl/jupyter-widget@$DECKGL_SEMVER\n```\n\n----------------------------------------\n\nTITLE: Rendering deck.gl Layers Using JSX Syntax in React (JavaScript/JSX)\nDESCRIPTION: Demonstrates how to render deck.gl layers using JSX syntax within a React component. This format enables a more natural coding style for React users by embedding deck.gl layers as JSX elements. The example shows usage of the DeckGL component with a LineLayer child, passing viewport properties. Note that deck.gl layers are not React components, so there are limitations and special considerations when using this approach. Dependency: React environment and the deck.gl React wrapper.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<DeckGL {...viewport}>\n  <LineLayer data={data} />\n<DeckGL />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs the dependencies listed in the package.json file of the current directory (the example directory). It uses Yarn as an alternative to NPM to fetch and install the required packages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Retrieving View Dimensions\nDESCRIPTION: Returns the actual pixel position and size of the view within the larger canvas, based on the canvas dimensions. Useful for layout calculations or rendering multiple views within a single canvas.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/view.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {x, y, width, height} = view.getDimensions({width, height});\n```\n\n----------------------------------------\n\nTITLE: Using `@@=` for Expression-Based Accessors (JSON)\nDESCRIPTION: Demonstrates advanced usage of the `@@=` prefix to define accessors using simple JavaScript expressions. Examples include property access, arithmetic operations, and inline conditional (ternary) operators.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"getPosition\": \"@@=[lng, lat, altitudeMeters]\",\n\"getFillColor\": \"@@=[color / 255, 200, 20]\",\n\"getLineColor\": \"@@=value > 10 ? [255, 0, 0] : [0, 255, 200]\",\n```\n\n----------------------------------------\n\nTITLE: Configuring WGS84 Coordinates Access via Callbacks in deck.gl\nDESCRIPTION: This snippet describes the use of callbacks like onHover, onClick, etc., that can now access features in WGS84 coordinates within deck.gl. It enhances geospatial interactions by providing feature data in coordinate systems compatible with GPS standards. These callbacks depend on deck.gl's event system and proper layer configuration.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.onHover = ({object, x, y}) => {\n  if (object) {\n    console.log('Feature in WGS84 coords:', object.coordinates);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Functions Equivalent to `@@=` Expressions\nDESCRIPTION: Shows the JavaScript arrow functions that are effectively generated by the `JSONConverter` when parsing the `@@=` expressions from the previous JSON snippet. Each function takes a `datum` object as input and returns the result of the evaluated expression.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndatum => [datum.lng, datum.lat, altitudeMeters / 1000]\ndatum => [datum.color / 255, 200, 20]\ndatum => datum.value > 10 ? [255, 0, 0] : [0, 255, 200]\n```\n\n----------------------------------------\n\nTITLE: Managing Deck Instance Views and ViewStates Separately - DeckGL JS API - JavaScript\nDESCRIPTION: Illustrates the pure JavaScript API approach for managing views and view states on a `Deck` instance. Shows initializing the instance, setting the initial `views` array once via `setViews`, and updating the `viewStates` dynamically via `setViewStates` in response to state changes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/view-class-rfc.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n  const deck = new Deck();\n  deck.setViews(views);\n\n  onViewStateChanged(...) {\n    deck.setViewStates(viewStates);\n  }\n```\n\n----------------------------------------\n\nTITLE: Referencing Constants using `@@#` Prefix (JSON)\nDESCRIPTION: Example JSON where the `controller` property is assigned the string `\"@@#MapController\"`. The `JSONConverter` will resolve this string to the actual `MapController` class registered in the configuration's `constants` map.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"controller\": \"@@#MapController\",\n  \"layers\": [\n    {\n      \"@@type\": \"ScatterplotLayer\",\n      \"data\": ...,\n      ...\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Maximum Weight Calculation Fragment Shader\nDESCRIPTION: GLSL fragment shader that samples the aggregation texture to calculate total counts, total weights, and maximum weights. It outputs these values to different color channels to be used for later rendering.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/gpu-screengrid-aggregation-rfc.md#_snippet_5\n\nLANGUAGE: glsl\nCODE:\n```\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nvoid main(void) {\n  vec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n  // Red: total count, Green: total weight, Alpha: maximum weight\n  gl_FragColor = vec4(textureColor.r, textureColor.g, 0., textureColor.g);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating PointCloudLayer (Typescript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import and instantiate a `PointCloudLayer` with type information using `PointCloudLayerProps`. The code assumes the type `DataT` is defined elsewhere and uses it to specify the data type.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/point-cloud-layer.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport type {PointCloudLayerProps} from '@deck.gl/layers';\n\nnew PointCloudLayer<DataT>(...props: PointCloudLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies\nDESCRIPTION: This snippet shows how to install the necessary deck.gl packages using npm, including the core, layers, and aggregation-layers modules, or the individual required dependencies. It details the npm command for each installation method.  This is a prerequisite for running the code.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/contour-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/aggregation-layers\n```\n\n----------------------------------------\n\nTITLE: Including the deck.gl Debug Module in Production - HTML\nDESCRIPTION: Demonstrates how to add deck.gl's debug module to a production environment by referencing external script sources in an HTML file. Requires that 'app.js' contains the pre-bundled deck.gl library and that 'https://unpkg.com/@deck.gl/core@^9.0.0/debug.min.js' is loaded after it. The debug module is not included automatically when building with 'NODE_ENV=production', so developers must explicitly add it to enable debugging capabilities in production deployments.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/debugging.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"app.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/debug.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Executing test suite with run method\nDESCRIPTION: Runs all added test cases, with options for per-test timeouts, global image diffing preferences, and callback hooks for test start, success, or failure. Returns a promise that resolves after completion, facilitating asynchronous test workflows.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/test-utils/snapshot-test-runner.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrun(options: Object)\n```\n\n----------------------------------------\n\nTITLE: ScatterplotLayer Color Definition\nDESCRIPTION: This snippet demonstrates how to define colors for a ScatterplotLayer using hexadecimal string values. It shows setting the `highlightColor` and `getFillColor` props with string representations of colors. The example uses color definitions of type `#abc` and `#aabbcc`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/roadmaps/api-evolution-roadmap.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  new ScatterplotLayer({\n  \thighlightColor: '#ffee00',\n  \tgetFillColor: '#aa000'\n  })\n```\n\n----------------------------------------\n\nTITLE: Setting up Project Dependencies and Running Demo (Bash)\nDESCRIPTION: This snippet provides instructions for installing project dependencies using npm or yarn and then bundling and serving the application using vite via npm start. These steps are necessary to run the included demo applications.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/experimental/tfjs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: generate_grid_html.py - Script for Creating HTML Grid of Example Links\nDESCRIPTION: This script generates an HTML page featuring a grid of links to the .rst documentation pages, with thumbnail images for each example. It serves as the main landing page for pydeck's documentation site and depends on installed packages like pyppeteer and Image to generate and organize visual links.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/scripts/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n/* Content not provided in the input. */\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl Pre-bundled Scripts\nDESCRIPTION: Demonstrates how to include deck.gl libraries using pre-bundled scripts from a CDN (unpkg). Provides options for including the monolithic bundle or individual core, layers, and extensions scripts.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/extensions@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering BrushingExtension Component - JavaScript (JSX)\nDESCRIPTION: This snippet imports a `Demo` component from a local file (`./brushing-extension`) and renders it. The `Demo` component is assumed to encapsulate the implementation or usage of `BrushingExtension`.  No dependencies beyond the local file dependency and the standard React library are apparent from this snippet.  The output is the rendered component.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/brushing-extension.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './brushing-extension';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Importing and Typing GeohashLayer in TypeScript\nDESCRIPTION: This code demonstrates how to import the GeohashLayer and its props for TypeScript usage, enabling type safety and IntelliSense in development. It indicates how to instantiate GeohashLayer with typed parameters for robust application development.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/geohash-layer.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {GeohashLayer} from '@deck.gl/geo-layers';\nimport type {GeohashLayerProps} from '@deck.gl/geo-layers';\n\nnew GeohashLayer<DataT>(...props: GeohashLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Passing Props to React ZoomWidget (React JSX Diff)\nDESCRIPTION: This snippet shows how to pass props to the React-wrapped ZoomWidget component, replacing the prior method of using JavaScript object construction with new ZoomWidget(). It highlights setting widget-specific properties such as id and placement directly as React props, enabling seamless customization within JSX.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/react/overview.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-new ZoomWidget({ id: 'zoom', placement: 'top-right' })\n+<ZoomWidget id='zoom' placement='top-right'/>\n```\n\n----------------------------------------\n\nTITLE: Installing pydeck from source (Bash)\nDESCRIPTION: This snippet clones the deck.gl repository, navigates to the pydeck binding directory, bootstraps the dependencies using yarn, and installs the library via pip locally from source code. This procedure is used to install the latest development version or make custom modifications to pydeck.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/installation.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/visgl/deck.gl\ncd deck.gl/bindings/pydeck\nyarn bootstrap\npip install .\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Picking Color Attribute in a deck.gl Layer (JS)\nDESCRIPTION: This snippet shows how to define a custom attribute named `customPickingColors` within a deck.gl layer's `initializeState` method using the `AttributeManager`. This attribute will store the unique picking color for each object's vertices, enabling GPU-based picking. It uses `GL.UNSIGNED_BYTE` for the type, suitable for storing 3-byte color values.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/picking.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GL from '@luma.gl/constants';\n\nclass MyLayer extends Layer {\n  initializeState() {\n    this.state.attributeManager.add({\n      customPickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculatePickingColors\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with npm\nDESCRIPTION: This command installs the necessary dependencies for the project using npm. It ensures that all required packages are available before running or building the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/maplibre/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Applying Inline CSS Style for Logo\nDESCRIPTION: An HTML snippet containing inline CSS within `<style>` tags. This CSS rule targets elements with the class 'logo' and sets their width to 480 pixels, specifically styling the pydeck-carto logo image displayed on the page.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/index.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .logo {\n    width: 480px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating WMSLayer in TypeScript\nDESCRIPTION: Illustrates how to import the WMSLayer class (aliased from _WMSLayer) and its WMSLayerProps type from `@deck.gl/geo-layers` for use in a TypeScript project. It shows the basic structure for instantiating the layer with props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/wms-layer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {_WMSLayer as WMSLayer} from '@deck.gl/geo-layers';\nimport type {WMSLayerProps} from '@deck.gl/geo-layers';\n\nnew WMSLayer(...props: WMSLayerProps[]);\n```\n\n----------------------------------------\n\nTITLE: Running Development Server and Building Project (npm)\nDESCRIPTION: Provides standard npm script commands for managing the application lifecycle. `npm start` typically launches the development server (e.g., Vite) with features like hot reloading. `npm run build` creates an optimized, production-ready bundle of the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/mapbox/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Layer Class Constructor\nDESCRIPTION: The constructor of the `Layer` class, which accepts properties to initialize a layer instance. It merges property objects and uses default values if not provided. This constructor is the entry point for creating a new `Layer` instance, and all layers derive from this base class.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew Layer(...props);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the Example (Bash)\nDESCRIPTION: Provides shell commands to install the necessary project dependencies using either Node Package Manager (npm) or Yarn, and then to bundle and serve the application locally using Vite via the predefined 'start' script in package.json.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/screen-grid/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: PointCloudLayer with onData callback (JavaScript)\nDESCRIPTION: This code demonstrates the usage of the `onData` callback to react to loaded or updated data in a PointCloudLayer. The callback is used to calculate and set the view state from the point cloud data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/data-loading-rfc.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nnew PointCloudLayer({\n  data: LAZ_SAMPLE,\n  // NEW: Provide a callback to let application react to loaded/parsed/transformed data\n  onData: data => this._setViewStateFromPointCloud(data)\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running deck.gl LineLayer Example Using Bash\nDESCRIPTION: This bash snippet provides the commands necessary to install project dependencies using npm or yarn and then bundle and serve the deck.gl example app with Vite. It is intended for setting up and launching the minimal standalone LineLayer example application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/line/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Constructing LightingEffect in deck.gl\nDESCRIPTION: This snippet demonstrates the instantiation of a `LightingEffect` object.  It shows the use of the constructor and potential parameters, which are light sources. The snippet shows the structure of how to use the constructor but it doesn't contain the actual implementation details. Required dependencies include the deck.gl library.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/lighting-effect.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nnew LightingEffect({light0, light1, light2, ...});\n```\n\n----------------------------------------\n\nTITLE: Building pydeck-carto Documentation Locally (Bash)\nDESCRIPTION: Navigates to the documentation directory within the pydeck-carto bindings, cleans any previous build artifacts, and then builds the HTML documentation using 'make html'. The resulting documentation can be found in the '_build/html' subdirectory and served locally.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/contributing.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd deck.gl/bindings/pydeck-carto/docs\nmake clean && make html\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependency on pydeck-carto\nDESCRIPTION: This snippet specifies that the project requires the pydeck-carto package, and it must be version 0.2.0 or higher. This information is crucial for ensuring that the project has all necessary dependencies and that they are of compatible versions.  This dependency is required for utilizing pydeck-carto features.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/requirements/requirements-rtd.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npydeck-carto>=0.2.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Pydeck for Jupyter Notebook\nDESCRIPTION: These commands enable the pydeck extension for Jupyter Notebook. It involves installing the necessary nbextension using the specified options (sys-prefix, symlink, overwrite, pydeck). The second command activates the extension for use in Jupyter Notebook. It enables pydeck in the current environment, allowing its features to be used within Jupyter notebooks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/installation.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\njupyter nbextension install --sys-prefix --symlink --overwrite --py pydeck\n```\n\nLANGUAGE: Python\nCODE:\n```\njupyter nbextension enable --sys-prefix --py pydeck\n```\n\n----------------------------------------\n\nTITLE: Updating `project_position` (vec4) Signature in GLSL\nDESCRIPTION: Shows the updated GLSL function signature for `project_position` taking a `vec4` position, relevant when upgrading deck.gl versions affecting the projection system. The second parameter changed from `vec2 position64xyLow` to `vec3 position64Low`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_14\n\nLANGUAGE: glsl\nCODE:\n```\n// Old: vec4 project_position(vec4 position, vec2 position64xyLow)\n// New:\nvec4 project_position(vec4 position, vec3 position64Low)\n```\n\n----------------------------------------\n\nTITLE: Importing Demo component for GeoJsonLayer Paths in React\nDESCRIPTION: This snippet imports the 'Demo' component from the 'geojson-layer-paths' module and renders it within the React component tree. It enables visualization of path data using Deck.GL's GeoJsonLayer. Dependencies include React and the local 'geojson-layer-paths' module.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/geojson-layer-paths.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './geojson-layer-paths';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Installation of deck.gl GeohashLayer via NPM\nDESCRIPTION: This code snippet provides terminal commands to install deck.gl dependencies necessary for using the GeohashLayer, including core, geo-layers, and their dependencies. It facilitates setting up the environment for GeohashLayer development.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/geohash-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers\n```\n\n----------------------------------------\n\nTITLE: Building and Running Binder Docker Image\nDESCRIPTION: This snippet builds and runs a Docker image for testing the binder environment. It builds the image using the Dockerfile in the current directory and then runs a Jupyter notebook server inside the container, exposing it on port 8888.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/PUBLISH.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t test-binder:latest .\ndocker run -p 8888:8888 test-binder:latest jupyter notebook --ip 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with npm or yarn\nDESCRIPTION: This snippet demonstrates how to install project dependencies using npm or yarn. It prepares the environment for developing or building the deck.gl project that integrates Maplibre, ensuring all required packages are available.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/maplibre/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating FillStyleExtension in JavaScript (Module)\nDESCRIPTION: Illustrates the basic import statement for `FillStyleExtension` from `@deck.gl/extensions` and its instantiation when using a module bundler environment like Webpack or Rollup. This is the standard way to use extensions in modern JavaScript projects.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fill-style-extension.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {FillStyleExtension} from '@deck.gl/extensions';\nnew FillStyleExtension({});\n```\n\n----------------------------------------\n\nTITLE: Initializing CollisionFilterExtension in a ScatterplotLayer (JavaScript)\nDESCRIPTION: Demonstrates how to import and apply the CollisionFilterExtension to a ScatterplotLayer in deck.gl to enable collision detection and filtering for overlapping points. The extension is added to the layer's `extensions` prop.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/collision-filter-extension.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {CollisionFilterExtension} from '@deck.gl/extensions';\n\nconst layer = new ScatterplotLayer({\n  id: 'points',\n  data: points,\n  extensions: [new CollisionFilterExtension()],\n  getPosition: d => d.COORDINATES,\n  getRadius: 10,\n  radiusUnits: 'pixels'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the GraphLayer Example (Shell)\nDESCRIPTION: These commands install the necessary Node.js package dependencies and then start the development server for the GraphLayer example application. This assumes you have copied the example folder content into your project and have Node.js and npm installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/showcases/graph/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Importing DeckGL from deck.gl/react\nDESCRIPTION: This code snippet demonstrates how to import the DeckGL React component in deck.gl v3.  The component now requires a separate import, enabling the core deck.gl library to be used by non-React applications without pulling in React.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/whats-new.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport DeckGL from 'deck.gl/react'\n```\n\n----------------------------------------\n\nTITLE: Setting Google Maps API Keys as Environment Variables in Bash\nDESCRIPTION: This snippet demonstrates how to set environment variables for Google Maps API key and Map ID using Bash commands before running the application. These variables are essential for authentication and map configuration in the deck.gl Google Maps integration.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/google-3d/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nexport GoogleMapsAPIKey=<google_maps_api_key>\nexport GoogleMapsMapId=<google_maps_map_id>\n```\n\n----------------------------------------\n\nTITLE: Initializing S2Layer - JavaScript (script tag)\nDESCRIPTION: This JavaScript code shows how to initialize an S2Layer, but is designed to work with the pre-bundled script tag method described above. The code assumes the deck namespace and creates a new S2Layer instance with empty configuration options.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/s2-layer.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nnew deck.S2Layer({});\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for deck.gl and CARTO vectors\nDESCRIPTION: This snippet shows the npm commands required to install deck.gl core packages and CARTO-specific layers for working with VectorTileLayer. Dependencies include core deck.gl modules and CARTO extensions for vector data visualization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/vector-tile-layer.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/carto\n```\n\n----------------------------------------\n\nTITLE: Configuring Layer Mask for Filtering in deck.gl\nDESCRIPTION: JavaScript code snippet demonstrating how to use a single layer as a mask to filter out pixels not in the region defined by that layer. This configuration will discard all pixels that fall outside the masked region.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/layer-intersections-rfc.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst layerMask = {\n  layers: 'layerid-1'\n  operation: 'filter'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting WebGL Context with Props\nDESCRIPTION: This code snippet illustrates setting the WebGL context for deck.gl using the `setProps` method. This approach provides an alternative mechanism for configuring the WebGL context, potentially making the integration more declarative within a React-based application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.2/mapbox-custom-layer-rfc.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndeck.setProps({gl});\n```\n\n----------------------------------------\n\nTITLE: Testing with Local dependencies (luma.gl and math.gl)\nDESCRIPTION: This configuration allows developers to use local versions of dependencies such as luma.gl and math.gl while testing examples with the local deck.gl source, by passing specific environment options in the build process.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn start-local --env.local-luma\n# or\nyarn start-local --env.local-math\n```\n\n----------------------------------------\n\nTITLE: Defining H3TilesetSourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `H3TilesetSourceOptions` type, which includes the `tableName` option for the `h3TilesetSource` function.  It is used to specify the table that contains the H3 tileset data, and is used as a data source.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ntype H3TilesetSourceOptions = {\n  tableName: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing pydeck using conda (Bash)\nDESCRIPTION: This snippet installs the pydeck library using conda from the conda-forge channel, which is suited for users managing dependencies through the Anaconda environment. It installs all necessary packages for pydeck to run in a conda-managed environment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/installation.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge pydeck\n```\n\n----------------------------------------\n\nTITLE: Starting development server with npm\nDESCRIPTION: This command initiates the development environment, starts a local server, and enables hot reloading for rapid development of the ArcGIS with deck.gl application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/arcgis/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Inefficient Accessor Update via Data Remapping (React/TSX)\nDESCRIPTION: Shows a suboptimal React pattern where `useMemo` is used to remap the entire `data` array when the `year` prop changes. While `useMemo` helps, it still triggers a full layer update because the `data` prop itself changes shallowly, recalculating all attributes unnecessarily.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/performance.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ntype CensusTractCurrentYear = {\n  centroid: [longitude: number, latitude: number];\n  population: number;\n};\n\nfunction App({year}: {\n  year: number;\n}) {\n  // `data` changes every time year changed, but positions don't need to update\n  const data: CensusTractCurrentYear[] = React.useMemo(() => {\n    return DATA.map(d => ({\n      centroid: d.centroid,\n      population: d.populationsByYear[year]\n    }));\n  }, [year]);\n\n  const layers = [\n    new ScatterplotLayer<CensusTractCurrentYear>({\n      data,\n      getPosition: (d: CensusTractCurrentYear) => d.centroid,\n      getRadius: (d: CensusTractCurrentYear) => Math.sqrt(d.population)\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using deck.gl Helper Functions for Data Access\nDESCRIPTION: Shows how to properly access elements using deck.gl's internal helper functions 'get' and 'count', which handle various container types correctly when accessing by index or key.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/deckgl-api-guidelines.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < count(this.props.data); i++) { // GOOD\n  const object = get(this.props.data, i); // instead of this.props.data[i]\n  const value = get(object, 'value'); // instead of object.value\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Child Component Autolayout with StaticMap\nDESCRIPTION: Example of using the autolayout feature to position a StaticMap component beneath a specific viewport by matching the viewId prop on the child component with the viewport's id.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.0/multi-viewport-rfc.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n  render() {\n    <DeckGL\n      width={viewportProps.width}\n      height={viewportProps.height}\n      layers={this._renderLayers()}\n      viewports={[\n        new FirstPersonViewport({...}),\n        new WebMercatorViewport({id: 'basemap', ...})\n      ]}\n     >\n\n      <StaticMap\n        viewId='basemap'\n        {...viewportProps}/>\n\n    </DeckGL>\n  }\n```\n\n----------------------------------------\n\nTITLE: Current Implementation of PathLayer InstancePositions Calculation\nDESCRIPTION: The current method for calculating instance positions in PathLayer, which processes all data items without support for partial updates.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/partial-updates-rfc.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n  calculateInstancePositions(attribute) {\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = get(position, 0);\n      value[i++] = get(position, 1);\n      value[i++] = get(position, 2) || 0;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Phong Material in deck.gl with JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a `LightPhongMeterial` instance with specified ambient, diffuse, shininess, and specular color properties. This material is used to define the lighting properties of a layer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.0/phong-lighting-rfc.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst phongMeterial = new LightPhongMeterial(0.3, 0.5, 32, [255, 255, 255, 255])\n```\n\n----------------------------------------\n\nTITLE: Overriding Layer Props for Collision Testing (JavaScript)\nDESCRIPTION: Illustrates using the `collisionTestProps` property to modify layer properties specifically for the collision calculation phase. This example increases the `radiusScale` for a ScatterplotLayer during collision testing to create more space between visible points.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/collision-filter-extension.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncollisionTestProps: {radiusScale: 2}\n```\n\n----------------------------------------\n\nTITLE: Basic H3TileLayer Instantiation in JavaScript\nDESCRIPTION: Shows a minimal example creating a new H3TileLayer instance by importing it from @deck.gl/carto and initializing with an empty configuration. This serves as a starting point for further customization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/h3-tile-layer.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {H3TileLayer} from '@deck.gl/carto';\nnew H3TileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and CARTO dependencies via NPM\nDESCRIPTION: This snippet shows how to install the necessary deck.gl and CARTO dependencies using npm.  It provides two options: installing `deck.gl` directly or installing the specific core, layers, and carto modules. It requires npm to be installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/raster-tile-layer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/carto\n```\n\n----------------------------------------\n\nTITLE: Running the Pure JS CARTO Demo with Yarn\nDESCRIPTION: Provides shell commands to install project dependencies using Yarn and then start the demo application. It assumes the user has Yarn installed and is in the project's root directory.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/carto/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Setting Map ViewState for Visualization\nDESCRIPTION: Initializes the camera view position for the map with specified latitude, longitude, and zoom level using 'pdk.ViewState'. This determines the initial viewport when rendering the map with the CartoLayer.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/hello_world.ipynb#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nview_state = pdk.ViewState(latitude=0, longitude=0, zoom=1)\n```\n\n----------------------------------------\n\nTITLE: Example Data Structure for Numeric Filtering\nDESCRIPTION: Provides an example JSON structure for data objects suitable for numeric filtering with `DataFilterExtension`. Each object contains properties like `timestamp` and `speed` that can be accessed by the `getFilterValue` accessor.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"timestamp\": 0.1, \"coordinates\": [-122.45, 37.78], \"speed\": 13.3},\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl dependencies using npm\nDESCRIPTION: These commands demonstrate how to install the necessary deck.gl packages using npm. The first command installs the main 'deck.gl' package, while the second installs core, layers, and aggregation-layers specifically.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/heatmap-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/aggregation-layers\n```\n\n----------------------------------------\n\nTITLE: Generating a Viewport from a View\nDESCRIPTION: Constructs a 'Viewport' object using provided width, height, and 'viewState', considering the view's configuration. This viewport defines the camera and viewing parameters used for rendering on a specific canvas size.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/view.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.makeViewport({width, height, viewState})\n```\n\n----------------------------------------\n\nTITLE: SimpleMeshLayer Constructor Signature (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript signature for the SimpleMeshLayer constructor, indicating it accepts an array of props which extend the base SimpleMeshLayerProps type and can be generic over the data type DataT.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/simple-mesh-layer.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport type {SimpleMeshLayerProps} from '@deck.gl/mesh-layers';\n\nnew SimpleMeshLayer<DataT>(...props: SimpleMeshLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Run Development Target with npm\nDESCRIPTION: This command starts the development server using npm, enabling hot reloading for a faster development workflow.  It serves the app and automatically reloads it whenever changes are made to the code.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/maplibre/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating Custom FirstPersonController in deck.gl\nDESCRIPTION: Example demonstrating how to extend the FirstPersonController class to customize its behavior. This shows overriding the handleEvent method to implement custom interaction handling.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/first-person-controller.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, FirstPersonView, FirstPersonController} from '@deck.gl/core';\n\nclass MyFirstPersonController extends FirstPersonController {\n\n  handleEvent(event) {\n    if (event.type === 'pan') {\n      // do something\n    } else {\n      super.handleEvent(event);\n    }\n  }\n}\n\nnew Deck({\n  views: new FirstPersonView(),\n  controller: {type: MyFirstPersonController},\n  initialViewState: viewState\n})\n```\n\n----------------------------------------\n\nTITLE: Importing HexagonLayer Demo Component - JavaScript\nDESCRIPTION: Imports a default export component named `Demo` from the relative path './hexagon-layer'. This component is expected to encapsulate the setup and rendering logic for a HexagonLayer example or demo. This uses standard ES module syntax.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/hexagon-layer.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './hexagon-layer';\n```\n\n----------------------------------------\n\nTITLE: Rendering Minimap Component using deck.gl (JSX)\nDESCRIPTION: This snippet imports and renders the Demo component, which is assumed to encapsulate the logic for displaying a minimap. The Demo component is imported from the './multi-view' file. The rendered output of the Demo component will be displayed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/multi-view.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Demo from './multi-view';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Importing DataFilterExtension Demo Component - JavaScript\nDESCRIPTION: This line imports the main React component that demonstrates the `DataFilterExtension`. It uses standard ES Module syntax to bring the `Demo` component from the specified relative path into the current scope, allowing it to be rendered later.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/data-filter-extension.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './data-filter-extension';\n```\n\n----------------------------------------\n\nTITLE: Defining RasterSourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `RasterSourceOptions` type, used by the `rasterSource` function. It includes a single `tableName` option.  This option specifies the table from which raster data will be fetched.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ntype RasterSourceOptions = {\n  tableName: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing TerrainLayer Demo Component in JavaScript\nDESCRIPTION: Imports the 'Demo' component from a local file named 'terrain-layer'. This import is required to use the TerrainLayer demo within the JSX rendering context. The snippet assumes the presence of a module exporting this component.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/terrain-layer.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './terrain-layer';\n```\n\n----------------------------------------\n\nTITLE: Custom Class Theming with CSS and TypeScript\nDESCRIPTION: This snippet shows how to apply the custom class to an instance of a widget. This example highlights the use of `className` prop in the FullscreenWidget constructor to apply the defined styles from the `.my-class` class.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/styling.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nnew FullscreenWidget({ className: 'my-class'})\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl dependencies using NPM\nDESCRIPTION: This snippet provides the command to install deck.gl, along with its core, layers, and extensions dependencies, using the Node Package Manager (NPM). This allows using the PathStyleExtension in a Javascript project.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/path-style-extension.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/extensions\n```\n\n----------------------------------------\n\nTITLE: Widget-type Specific Styling with CSS\nDESCRIPTION: This snippet provides an example of styling a specific type of widget using the `.deck-widget-[type]` selector in CSS. This selector allows for targeted styling of certain widget types. In this instance, the `--button-size` is set to `48px` only for the `fullscreen` widget.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/widgets/styling.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.deck-widget-fullscreen {\n    --button-size: 48px;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Layer Model Creation - Typescript\nDESCRIPTION: This snippet illustrates the updated approach for creating a Model within a custom layer using the luma.gl v9 API. It shows how to pass the `device` (replacing `this.context.gl`), update shaders to GLSL 3.00, configure the `bufferLayout`, and specify the `topology` instead of the deprecated `drawMode`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyLayer {\n  getModel() {\n    return new Model(\n      // Replaces this.context.gl\n      this.context.device,\n      {\n        // GLSL 1.00 shaders no longer supported, must be updated to GLSL 3.00\n        vs,\n        fs,\n        // New in v9 Model API\n        bufferLayout: this.getAttributeManager().getBufferLayouts(),\n        // Replaces GL constant `drawMode`\n        topology: 'triangle-strip'\n      }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use deck.gl TerrainExtension from Pre-bundled Script\nDESCRIPTION: This JavaScript code snippet shows how to use the TerrainExtension when deck.gl is included via a pre-bundled script. It assumes that the deck object is available in the global scope.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/terrain-extension.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck._TerrainExtension();\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies on MacOS (Apple Silicon)\nDESCRIPTION: This command uses brew to install necessary dependencies, specifying the arm64 architecture. It's important for MacOS systems running on Apple Silicon (M1 chip).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\narch -arm64 brew install pkg-config cairo pango libpng jpeg giflib librsvg\n```\n\n----------------------------------------\n\nTITLE: Creating CPUAggregator Constructor in TypeScript\nDESCRIPTION: This snippet defines the constructor for the CPUAggregator class. It takes props as input. It shows the structure and arguments. The constructor takes the dimensions of the bin IDs, a getBin accessor to map data points to bin IDs, and a getValue accessor to map data points to a weight value.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/cpu-aggregator.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew CPUAggregator(props);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Chunked Data Structure with JavaScript Arrays\nDESCRIPTION: This snippet provides an example of how a dataset can be represented as a chunked JavaScript array. The outer array holds the chunks, and each inner array contains objects representing individual data records within that chunk. This demonstrates a basic structure for handling large datasets incrementally.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/chunked-data-support-rfc.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n[\n [\n   {value: 1, time: 1.00},\n   {value: 2, time: 1.10},\n ],\n [\n   {value: 3, time: 2.00},\n   {value: 4, time: 2.10},\n ],\n ...\n]\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Core and Layers via npm in Bash\nDESCRIPTION: Installs the essential @deck.gl/core and @deck.gl/layers packages using npm, which are required to use deck.gl's core rendering functionality and predefined layers in standalone JavaScript applications.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-standalone.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @deck.gl/core @deck.gl/layers\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with yarn - bash\nDESCRIPTION: Installs project dependencies using the yarn package manager. This command serves as an alternative to `npm install`, reading the project's dependencies and installing them. It must be run before starting the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/google-3d-tiles/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Setting new layer list in LayerManager\nDESCRIPTION: The setLayers (or updateLayers) method replaces the current list of layers with a new set, recursively expanding any composite layers into primitive layers. This updates the internal layer state.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer-manager.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayerManager.updateLayers({newLayers});\n```\n\n----------------------------------------\n\nTITLE: Checking if test runs in headless mode\nDESCRIPTION: Property indicating whether the tests are executed in headless mode, which may influence rendering behavior and image diffing thresholds due to software rendering differences.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/test-utils/snapshot-test-runner.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nisHeadless\n```\n\n----------------------------------------\n\nTITLE: Aggregation API: Defining Aggregations\nDESCRIPTION: This code snippet shows how aggregations can be defined outside the layer for consistency. It defines an Aggregator with different aggregation operations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.1/gpu-grid-layer.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  const aggregator = new Aggregator({\n    aggregations: {\n      COUNT_SUM: {aggregation: 'SUM', field: 'count'},\n      VALUE_MEAN: {aggregation: 'MEAN', field: 'value'}\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing Modules for deck.gl and CARTO\nDESCRIPTION: This snippet imports the necessary Python libraries for using pydeck, pydeck_carto, and carto_auth. These libraries are essential for creating and rendering the CartoLayer and authenticating with CARTO.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/carto_layer.ipynb#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pydeck as pdk\nimport pydeck_carto as pdkc\nfrom carto_auth import CartoAuth\n```\n\n----------------------------------------\n\nTITLE: Installing Pydeck-carto via pip\nDESCRIPTION: This snippet installs the pydeck-carto library using pip. It is a straightforward command that downloads and installs the package and its dependencies. Prerequisites include having Python and pip installed and properly configured in the system's PATH.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/installation.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install pydeck-carto\n```\n\n----------------------------------------\n\nTITLE: Building production bundle with npm\nDESCRIPTION: This command compiles the project into a production-ready bundle, optimizes files, and writes the final output to disk, suitable for deployment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/arcgis/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Importing Mapbox/MapLibre GL JS Modules - JavaScript\nDESCRIPTION: Shows how to import Mapbox GL JS or MapLibre GL JS using a module loader like `require`. This approach is necessary in environments where libraries are not automatically added to the global scope and the library object needs to be explicitly passed to the DeckGL constructor.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/deckgl.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmapboxgl = require('mapbox-gl@^3.0.0/dist/mapbox-gl.js');\n// or\nmaplibregl = require('maplibre-gl@^3.0.0/dist/maplibre-gl.js');\n```\n\n----------------------------------------\n\nTITLE: Instantiating Fp64Extension with Default Constructor - JavaScript\nDESCRIPTION: Documents use of the Fp64Extension default constructor with no arguments, suitable for straightforward inclusion in a layer's extensions array. No special parameters are required, but compatibility with coordinate systems must be observed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/fp64-extension.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Fp64Extension();\n```\n\n----------------------------------------\n\nTITLE: Cloning a View instance\nDESCRIPTION: Creates a new 'View' by merging existing properties with new overrides provided via 'newProps'. Facilitates creating nearly identical views with slight modifications for different rendering contexts or configurations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/view.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.clone(newProps)\n```\n\n----------------------------------------\n\nTITLE: Using OrbitController with OrbitView in deck.gl\nDESCRIPTION: Example of initializing a Deck instance with OrbitView and explicitly configuring an OrbitController. This snippet shows how to disable drag panning and enable inertia in the controller.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/orbit-controller.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, OrbitView} from '@deck.gl/core';\n\nnew Deck({\n  views: new OrbitView(),\n  controller: {dragPan: false, inertia: true},\n  initialViewState: viewState\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Default Properties for a deck.gl Layer\nDESCRIPTION: Shows how to set default property values for a custom layer using the static defaultProps object. This example defines default color and opacity values.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nAwesomeLayer.defaultProps = {\n  color: [255, 0, 0],\n  opacity: 0.5\n};\n```\n\n----------------------------------------\n\nTITLE: Setting HERE maps API key (Bash)\nDESCRIPTION: This command sets the HERE maps API key as an environment variable.  It allows the application to authenticate with the HERE maps API. The environment variable `HereApiKey` must be set before running the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/harp.gl/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport HereApiKey=<your_api_key>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the IconLayer Example with npm/yarn\nDESCRIPTION: Commands for installing dependencies and starting the application using npm or yarn. The example uses vite as the bundler and development server to serve the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/icon/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server - Bash\nDESCRIPTION: Executes the `start` script defined in `package.json`. This command typically launches a local development server using Vite, enabling features like hot module replacement for faster development cycles.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/google-maps/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Example JSON Layer Descriptor for Class Catalog Conversion in JSON\nDESCRIPTION: Shows a JSON snippet exemplifying how a layer descriptor specifies the 'type' property to indicate which deck.gl layer class to instantiate, e.g., ScatterplotLayer. The JSONConverter uses a provided layer catalog to look up this type string and create a corresponding JavaScript class instance, enabling deserialization of JSON into fully instantiated deck.gl layers. This pattern supports abstraction and flexibility in defining layers via JSON. The snippet expects a compatible layer catalog to be provided and supports all typical layer properties under the given type.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.1/json-layers-rfc.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"layers\": {\n   \t\"type\": \"ScatterplotLayer\",\n   \t\"data\": \"...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Overlapping Viewports with Mini-Map\nDESCRIPTION: Example of overlapping viewports where a small overview map is positioned in the bottom-middle of the screen, overlaid on top of a main first-person viewport.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.0/multi-viewport-rfc.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n  const {width, height} = viewportProps;\n  ...\n  <DeckGL viewports=[\n    new FirstPersonViewport({...viewprops}),\n\n    // Render a small map viewport over the main first person viewport\n    new WebMercatorViewport({\n      ...viewprops,\n      height: height / 8,\n      width: width / 8,\n      x: width * 7 / 16,\n      y: height * 13 / 16\n    })\n  ]/>\n```\n\n----------------------------------------\n\nTITLE: Creating a HexagonLayer Instance Using Pre-bundled Scripts\nDESCRIPTION: This JavaScript snippet shows how to create a new HexagonLayer instance using the globally exposed deck object, typically available when using pre-bundled deck.gl scripts from a CDN. It demonstrates minimal initialization and usage after including deck.gl scripts in an HTML page.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/hexagon-layer.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew deck.HexagonLayer({});\n```\n\n----------------------------------------\n\nTITLE: Performing aggregation on GPU using ScreenGridAggregator\nDESCRIPTION: Code example showing how to use the ScreenGridAggregator class to perform grid aggregation on the GPU. Similar to the CPU version but with useGPU flag set to true, returning Buffer objects with aggregated data without CPU-GPU synchronization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/gpu-screengrid-aggregation-rfc.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n const opts = {\n  positions, // (lng, lat) array\n  weights,\n  cellSize,\n  viewport,\n  useGPU: true\n };\n\n  const sa = new ScreenGridAggregator(gl);\n  const result = sa.run(opts);\n\n  //result contains Buffer object with aggregated data.\n```\n\n----------------------------------------\n\nTITLE: Testing deck.gl Gallery with Local Build (bash)\nDESCRIPTION: Rebuilds the local deck.gl bundle by running prepublishOnly in the main module directory, then starts the gallery server configured to use the local build instead of the published version.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/gallery/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# rebuild bundle\ncd ../../modules/main && npm run prepublishOnly && cd -\n# start server\nnpm run start-local\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl dependencies\nDESCRIPTION: This bash command installs deck.gl packages using npm.  It provides alternative install commands for installing the core, layers and geo-layers separately.  It is a prerequisite for using the deck.gl libraries.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-hexagon-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/geo-layers\n```\n\n----------------------------------------\n\nTITLE: Registering CartoLayer with pydeck_carto\nDESCRIPTION: Registers CartoLayer functionality within the pydeck environment by calling 'register_carto_layer()'. This setup step enables subsequent creation and rendering of CartoLayer instances. No parameters required.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/hello_world.ipynb#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npdkc.register_carto_layer()\n```\n\n----------------------------------------\n\nTITLE: Updating Buffer Subdata in WebGL\nDESCRIPTION: WebGL provides the gl.bufferSubData method to update a range of memory in a GPU buffer without reallocating the entire buffer. This is a key mechanism for implementing partial data updates in deck.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/partial-updates-rfc.md#_snippet_5\n\nLANGUAGE: WebGL\nCODE:\n```\ngl.bufferSubData\n```\n\n----------------------------------------\n\nTITLE: Structure of Pydeck `on_resize` Event Payload in Python\nDESCRIPTION: Defines the dictionary structure returned as the payload when the pydeck visualization widget is resized. Contains the new `width` and `height` of the viewport in pixels.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/event_handling.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n   'type': 'deck-resize-event',\n   'data': {\n       'width': int,\n       'height': int\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @danmarshall/deckgl-typings via npm\nDESCRIPTION: This command installs the `@danmarshall/deckgl-typings` package using npm. This package provides TypeScript definitions for deck.gl versions prior to v8.8. The version specifier `^3.0.0` allows for compatible updates within the 3.x.x range.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-with-typescript.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @danmarshall/deckgl-typings@^3.0.0\n```\n\n----------------------------------------\n\nTITLE: React Integration of UI Widgets\nDESCRIPTION: Shows how to use the React wrapper around the new widgets.  It uses `NavigationControl` and `FullscreenControl` to add UI elements to the map.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/ui-module-rfc.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {NavigationWidget, FullscreenWidget} from '@deck.gl/react'\n\n<DeckGL>\n  <MapView>\n    <NavigationControl />\n    <FullscreenControl />\n  </MapView>\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Using testLayer and testLayerAsync\nDESCRIPTION: Illustrates the basic usage pattern for `testLayer` and `testLayerAsync` functions, showing how to call them with the required parameters.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/test-utils/test-layer.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntestLayer({Layer, spies, testCases, onError});\nawait testLayerAsync({Layer, spies, testCases, onError});\n```\n\n----------------------------------------\n\nTITLE: Definition of FragmentGeometry structure for shader data passing\nDESCRIPTION: Defines the 'FragmentGeometry' struct used within shaders to carry fragment-specific data such as UV coordinates, facilitating shading calculations and effects.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/writing-shaders.md#_snippet_4\n\nLANGUAGE: GLSL\nCODE:\n```\nstruct FragmentGeometry {\n  vec2 uv;\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Standard Jupyter Notebook for Local Testing\nDESCRIPTION: This command launches a standard Jupyter Notebook server. It is used after setting up the pydeck development environment to test changes within a local notebook. Ensure the development virtual environment is active.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/contributing.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njupyter notebook\n```\n\n----------------------------------------\n\nTITLE: Run the development server using npm\nDESCRIPTION: This command starts the development server, allowing for hot reloading of changes. It is used during development to serve the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/basic/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components with React\nDESCRIPTION: This snippet demonstrates how to import and use `StaticMap`, `NavigationControl`, and `FullscreenControl` components within a React-based deck.gl application. It highlights the use of `MapContext` to integrate with mapbox-gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/ui-module-rfc.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {StaticMap, MapContext, NavigationControl, FullscreenControl} from 'react-map-gl'\n\n<DeckGL\n  ContextProvider={MapContext.Provider}\n>\n  <StaticMap />\n  <NavigationControl />\n  <FullscreenControl />\n</DeckGL>\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl dependencies for MVTLayer\nDESCRIPTION: NPM installation commands for deck.gl packages required to use the MVTLayer, including core, layers, extensions, and geo-layers packages.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/mvt-layer.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/extensions @deck.gl/geo-layers\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with npm or yarn\nDESCRIPTION: Installs all required project dependencies using npm or yarn, setting up the environment for development or production builds.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/arcgis/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running the TerrainLayer Example\nDESCRIPTION: Commands for installing the required dependencies using npm or yarn, and starting the application with vite bundler to run the TerrainLayer example.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/terrain/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Example Data Structure for Category Filtering\nDESCRIPTION: Provides an example JSON data structure suitable for category filtering. Each object includes properties like `industry` (string) and `size` (number) that can be used with `getFilterCategory`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/data-filter-extension.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"industry\": \"retail\", \"coordinates\": [-122.45, 37.78], \"size\": 10},\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with CARTO using OAuth in Python\nDESCRIPTION: This snippet authenticates with the CARTO service using OAuth. It fetches the credentials required for connecting to the CARTO data warehouse and accessing the data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/examples/notebooks/carto_layer.ipynb#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncarto_auth = CartoAuth.from_oauth()\n```\n\n----------------------------------------\n\nTITLE: Using ArcLayer with Pre-bundled Scripts\nDESCRIPTION: HTML and JavaScript implementation using pre-bundled deck.gl scripts from CDN, showing how to include dependencies and create an instance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/arc-layer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n```\n\nLANGUAGE: js\nCODE:\n```\nnew deck.ArcLayer({});\n```\n\n----------------------------------------\n\nTITLE: Instantiating GridLayer with Pre-bundled Scripts\nDESCRIPTION: This JavaScript snippet demonstrates how to access and instantiate the GridLayer when using the pre-bundled script files included via CDN. The layer constructor is available directly under the global `deck` object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.GridLayer({});\n```\n\n----------------------------------------\n\nTITLE: Installing MaskExtension from NPM\nDESCRIPTION: Instructions for installing the necessary deck.gl dependencies from NPM and importing the MaskExtension. Shows both the full deck.gl package installation and the more targeted core and extensions installation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/mask-extension.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/extensions\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {MaskExtension} from '@deck.gl/extensions';\nnew MaskExtension();\n```\n\n----------------------------------------\n\nTITLE: Overriding Layer Attributes (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to override attributes and pass them directly to sublayers, specifically for performance optimization. It shows an example of adding an `attributes` member to the `lines` object to pass the `getWidth` attribute to a `PathLayer`. The output allows to bypass the standard attribute processing and directly supply attributes to the sublayers, improving performance.  It is used when the developer wishes to pass attributes directly to the sublayers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/geojson-layer.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  lines: {\n    // ...\n    attributes: {\n      getWidth: {value: new Float32Array([1, 2, 3, ....]), size: 1}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating PointLabelLayer in JavaScript (Module)\nDESCRIPTION: Shows the standard ES module import statement for `PointLabelLayer` from the `@deck.gl/carto` package and a basic instantiation of the layer in a JavaScript module environment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/point-label-layer.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {PointLabelLayer} from '@deck.gl/carto';\nnew PointLabelLayer({});\n```\n\n----------------------------------------\n\nTITLE: Rendering Deck.gl LineLayer Demonstration Component (JSX)\nDESCRIPTION: Renders the 'Demo' component imported previously. This is standard JSX syntax used in frameworks like React to embed components, likely displaying the interactive LineLayer demonstration.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/line-layer.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Build the production bundle using npm\nDESCRIPTION: This command builds the production-ready bundle of the application and writes it to disk. This is used for deploying the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/basic/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting the JSONLayer Example (Shell)\nDESCRIPTION: Shell commands to install project dependencies using npm and then start the development server for the deck.gl JSONLayer example. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/json-layer/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Instantiating PathStyleExtension using global deck\nDESCRIPTION: This snippet demonstrates how to create a new instance of the PathStyleExtension when deck.gl is included as a global script in HTML. Assumes that the deck object is globally available.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/extensions/path-style-extension.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew deck.PathStyleExtension({});\n```\n\n----------------------------------------\n\nTITLE: Triggering Aggregator Update in TypeScript\nDESCRIPTION: Triggers the update process for an aggregator after all properties are set and before results are accessed, allocating resources and redoing aggregations as needed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/aggregator.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\naggregator.update();\n```\n\n----------------------------------------\n\nTITLE: Constructor for LayerManager Class\nDESCRIPTION: Initializes a new LayerManager instance by providing a WebGL2RenderingContext and optional parameters such as an event manager. This constructor sets up the internal layer lifecycle management system.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer-manager.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew LayerManager(gl, {eventManager: ...})\n```\n\n----------------------------------------\n\nTITLE: Install dependencies using yarn\nDESCRIPTION: This command installs the necessary dependencies for the project using yarn. It serves as an alternative to npm install.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/basic/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Install dependencies and start application\nDESCRIPTION: This snippet provides instructions to install the project dependencies using npm and then start the application. It assumes that npm is already installed in the environment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Install dependencies using npm\nDESCRIPTION: This command installs the necessary dependencies for the project using npm. It is a prerequisite for running the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/basic/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using pre-bundled scripts for VectorTileLayer in HTML/JavaScript\nDESCRIPTION: This snippet provides script tags for including deck.gl and CARTO libraries directly in an HTML page, facilitating use of VectorTileLayer without module bundlers. It supports usage via CDN hosting of specific library versions.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/vector-tile-layer.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Build Production Target with npm\nDESCRIPTION: This command builds the production-ready bundle of the application using npm. It creates optimized files and writes them to disk, ready for deployment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/maplibre/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Fully Overlapping Views - DeckGL - JSX\nDESCRIPTION: Illustrates setting up two `View` instances that are intended to fully overlap within a `DeckGL` component. Notes that when views fully overlap, the application needs to manage graphics buffer clearing (like depth and stencil buffers) between rendering views for correct layering and rendering.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/view-class-rfc.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n  const {width, height} = viewportProps;\n  ...\n  <DeckGL views=[\n    new View({\n      type: FirstPersonViewport,\n      ...viewprops\n    }),\n\n    // Render a small map viewport over the main first person viewport\n    new View({\n      type: WebMercatorViewport({\n      ...viewprops\n    })\n  ]/>\n```\n\n----------------------------------------\n\nTITLE: Install deck.gl via NPM\nDESCRIPTION: This snippet demonstrates how to install deck.gl and its core dependencies (@deck.gl/core, @deck.gl/layers, @deck.gl/json) using npm, a package manager for JavaScript. This allows you to manage deck.gl as a dependency in your project.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/json\n```\n\n----------------------------------------\n\nTITLE: Initializing ColumnLayer JavaScript (pre-bundled)\nDESCRIPTION: This JavaScript snippet shows how to create a `ColumnLayer` if the deck.gl is imported as a global variable. Dependencies: deck.gl and core/layers.js loaded via script tags.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/column-layer.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nnew deck.ColumnLayer({});\n```\n\n----------------------------------------\n\nTITLE: Instantiating QuadbinTileLayer using Global Namespace (JS)\nDESCRIPTION: Demonstrates how to instantiate the QuadbinTileLayer using the global `deck.carto` namespace provided when including the pre-bundled scripts via HTML script tags.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/quadbin-tile-layer.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nnew deck.carto.QuadbinTileLayer({});\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the PointCloudLayer Example with npm/yarn\nDESCRIPTION: Commands to install dependencies and start the application using npm or yarn. The application is bundled and served using vite.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/point-cloud/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting the Layer Name for a Custom deck.gl Layer\nDESCRIPTION: Demonstrates how to define the layer name property, which is used as the default ID for layer instances and for debugging purposes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nAwesomeLayer.layerName = 'AwesomeLayer';\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Deck.gl ArcLayer Example\nDESCRIPTION: Commands to install dependencies and start the application using npm or yarn, and bundle/serve the app with vite.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/arc/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Registering resources in DataManager using declarative and imperative approaches\nDESCRIPTION: Shows how to register resources in the DataManager using both declarative (via DeckGL component props) and imperative (via deck.addResources) methods. Resources can be URLs, arrays, or binary data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/data-manager-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// declarative\n<DeckGL\n  resources={{\n    'airports': 'https://raw.githubusercontent.com/../airports.geojson',\n    'interleaved-pointcloud-date': float32Array\n  }} />\n\n// imperative\ndeck.addResources({\n  'airports': 'https://raw.githubusercontent.com/../airports.geojson',\n  'interleaved-pointcloud-date': float32Array\n});\n```\n\n----------------------------------------\n\nTITLE: Constraining view state within bounds in JavaScript\nDESCRIPTION: Provides a function to enforce map movement within specified geographic bounds by adjusting longitude and latitude before applying new view state, used in onViewStateChange callback. Dependencies include '@deck.gl/core'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/interactivity.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport {Deck} from '@deck.gl/core';\n\nconst bounds = [\n  [-123, 37], // South west corner\n  [-122, 38]  // North east corner\n];\n\nfunction applyViewStateConstraints(viewState) {\n  return {\n    ...viewState,\n    longitude: Math.min(bounds[1][0], Math.max(bounds[0][0], viewState.longitude)),\n    latitude: Math.min(bounds[1][1], Math.max(bounds[0][1], viewState.latitude))\n  };\n}\n\nnew Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  controller: true,\n  onViewStateChange: ({viewState}) => applyViewStateConstraints(viewState)\n});\n```\n\n----------------------------------------\n\nTITLE: Extending JSONConverter API for handling resources\nDESCRIPTION: Shows the proposed extension to the JSONConverter API that allows for incremental updates of resources from binary payloads.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/data-manager-rfc.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconverter.convert(json, resources);\n```\n\n----------------------------------------\n\nTITLE: Import Demo Component\nDESCRIPTION: Imports the Demo component from a local file. This component presumably contains the deck.gl TileLayer implementation for non-geospatial data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/tile-layer-non-geospatial.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Demo from './tile-layer-non-geospatial';\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies via NPM\nDESCRIPTION: Provides the shell commands to install the necessary deck.gl packages using NPM. Includes commands for installing the main `deck.gl` package or installing individual modules like `@deck.gl/core`, `@deck.gl/layers`, and `@deck.gl/carto` which contains `PointLabelLayer`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/point-label-layer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/carto\n```\n\n----------------------------------------\n\nTITLE: Result of Enumeration Resolution using `@@#` (JavaScript)\nDESCRIPTION: Shows the JavaScript object after resolving enumeration strings prefixed with `@@#`. The `coordinateSystem` and `blendFunc` properties now hold the actual numeric values corresponding to the specified enums (e.g., `COORDINATE_SYSTEM.METER_OFFSETS` becomes `2`).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  layers: [\n    new ScatterplotLayer({\n      data: ...,\n      coordinateSystem: 2,  // The enumerated value of COORDINATE_SYSTEM.METER_OFFSETS\n      parameters: {\n        blend: true,\n        blendFunc: [1, 0, 770, 772]\n      }\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GlobeController\nDESCRIPTION: This code snippet demonstrates how to enable the GlobeController for the GlobeView to handle user interactivity. The `controller` property is set to `true` during GlobeView initialization, enabling default interactivity. Additional GlobeController options can be configured as needed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/globe-view.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = new GlobeView({id: 'globe', controller: true});\n```\n\n----------------------------------------\n\nTITLE: Installation - H3 Hexagon Script Tags\nDESCRIPTION: This HTML code provides script tags to include necessary dependencies for using `deck.gl` with `H3HexagonLayer` via pre-bundled scripts.  It includes `h3-js` and deck.gl core and layers libraries.  This approach is useful when not using a module bundler like webpack.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/h3-hexagon-layer.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/h3-js@^4.0.0\"></script>\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including deck.gl and @deck.gl/arcgis via CDN\nDESCRIPTION: HTML code snippet showing how to include the deck.gl standalone bundle via CDN and use the loadArcGISModules function.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/arcgis/overview.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/arcgis@^1.0.0/dist.min.js\"></script>\n<!-- usage -->\n<script type=\"text/javascript\">\n  deck.loadArcGISModules();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Attribute Value (JavaScript)\nDESCRIPTION: Provides an example of how to modify properties of an already created `Attribute` instance using the `update` method. Specifically shows updating the `value` property with new data, allowing for dynamic geometry or other attribute changes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/attribute.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nattribute.update({value: newValue});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Composite Layer Class in JavaScript\nDESCRIPTION: Basic setup for creating a composite layer by extending the CompositeLayer class from deck.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/composite-layers.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {CompositeLayer, IconLayer, TextLayer} from 'deck.gl';\n\nclass LabeledIconLayer extends CompositeLayer {\n  // TODO\n}\nLabeledIconLayer.layerName = 'LabeledIconLayer';\n```\n\n----------------------------------------\n\nTITLE: Preparing Aggregator for Drawing\nDESCRIPTION: Called before result buffers are drawn to screen, allowing for just-in-time updates for render-dependent aggregations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/aggregator.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naggregator.preDraw();\n```\n\n----------------------------------------\n\nTITLE: Render Demo Component\nDESCRIPTION: Renders the Demo component.  This is likely a React component that utilizes deck.gl's TileLayer to display non-geospatial tile data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/tile-layer-non-geospatial.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm or yarn\nDESCRIPTION: This snippet shows the commands to install required dependencies for the deck.gl Google Maps example using npm or yarn package managers, ensuring all necessary modules are available for development.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/google-3d/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nYarn\n```\n\n----------------------------------------\n\nTITLE: Using OrthographicController with Default View in deck.gl\nDESCRIPTION: Demonstrates how to enable viewport interaction by passing controller options directly to the Deck class when using an OrthographicView. The example shows how to disable scroll zoom and enable inertia for smoother animations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/orthographic-controller.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Deck, OrthographicView} from '@deck.gl/core';\n\nnew Deck({\n  views: new OrthographicView(),\n  controller: {scrollZoom: false, inertia: true},\n  initialViewState: viewState\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (yarn)\nDESCRIPTION: This command installs the necessary dependencies for the project using yarn. It reads the `package.json` file and downloads the required packages. This step is crucial before running or building the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/harp.gl/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for an Aggregator in TypeScript\nDESCRIPTION: Sets runtime properties of an aggregator including point count, attributes, operations, bin options, and update callback.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/aggregator.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\naggregator.setProps({\n  pointCount: 10000,\n  attributes: {...},\n  operations: ['SUM', 'MEAN'],\n  binOptions: {groupSize: 5}\n});\n```\n\n----------------------------------------\n\nTITLE: Updating DeckLayer Properties via Accessor JavaScript\nDESCRIPTION: This snippet provides examples of modifying the internal Deck configuration of an existing `DeckLayer` instance. It shows direct property assignment to the `layer.deck` accessor (e.g., updating `layers`) and using the `set()` method for updating multiple properties simultaneously, highlighting the mutability of Deck props post-initialization.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/arcgis/deck-layer.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Update deck layers\nlayer.deck.layers = [...]);\n\n// Update multiple deck props\nlayer.deck.set({\n  layers: [...],\n  pickingRadius: 5,\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Layer with a Model - JavaScript\nDESCRIPTION: This snippet demonstrates the basic structure of a custom deck.gl layer, including initializing the layer's state and creating a placeholder for the model. It extends the Layer class and overrides the initializeState method to set the layer's model. The _getModel method is left as a TODO.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/primitive-layers.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Layer} from '@deck.gl/core';\n\nexport default class CubeLayer extends Layer {\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    // TODO: create Model here\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Continuous Camera Rotation TypeScript\nDESCRIPTION: This TypeScript example replicates the continuous camera rotation functionality from the JavaScript version, using `LinearInterpolator` and `@deck.gl/core`. It requires  `@deck.gl/core`.  `rotateCamera` updates the `initialViewState`'s bearing, transition properties and calls itself in `onTransitionEnd`.  This creates a continuous rotation around the Z-axis. This snippet ensures smooth camera rotation with consistent duration and interpolation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/animations-and-transitions.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {Deck, LinearInterpolator, MapViewState} from '@deck.gl/core';\n\nlet initialViewState: MapViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12\n};\n\nconst deckInstance = new Deck({\n  initialViewState,\n  controller: true,\n  onLoad: rotateCamera\n});\n\nfunction rotateCamera(): void {\n  initialViewState = {\n    ...initialViewState,\n    bearing: initialViewState.bearing + 120,\n    transitionDuration: 1000,\n    transitionInterpolator: new LinearInterpolator(['bearing']),\n    onTransitionEnd: rotateCamera\n  };\n  deckInstance.setProps({initialViewState});\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Channels for Update in an Aggregator\nDESCRIPTION: Flags a specific channel or all channels in an aggregator as needing update, typically after input data or bin options change.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/aggregator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naggregator.setNeedsUpdate(0);\n```\n\n----------------------------------------\n\nTITLE: Get Null Picking Color for Unpickable Pixels\nDESCRIPTION: Returns a special color used for pixels that are not covered by the layer or are intentionally rendered unpickable. This color is guaranteed not to match any valid feature index, supporting features like unselectable overlays.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction nullPickingColor(): number[] {\n  // Returns a predefined color that indicates unpickable pixels\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the deck.gl Example (Bash)\nDESCRIPTION: This script demonstrates how to install the necessary project dependencies using either npm or yarn, and then how to bundle and serve the application locally using Vite via the `npm start` command. It assumes Node.js and npm/yarn are already installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/brushing/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl and WebGL Context\nDESCRIPTION: This snippet demonstrates initializing a deck.gl instance and setting its WebGL context. It shows how to integrate deck.gl with an external rendering system like Mapbox, allowing for layer-by-layer rendering.  It focuses on setting the WebGL context, adding layers, clearing the context, and rendering individual layers by ID.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.2/mapbox-custom-layer-rfc.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst deck = new Deck(gl: null);\ndeck.setWebGLContext(map.getContext());\ndeck.setProps(layers: [new ScatterplotLayer({id: 'layer1'}), new ArcLayer({id: 'layer2'})])\ndeck.clear();\ndeck.renderLayer('layer1');\ndeck.renderLayer('layer2');\n```\n\n----------------------------------------\n\nTITLE: Instantiating TextLayer in UMD Environment\nDESCRIPTION: Shows the syntax for creating a new `TextLayer` instance when using the pre-bundled UMD (Universal Module Definition) scripts in a browser environment. The layer class is accessed via the global `deck` object.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/text-layer.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nnew deck.TextLayer({});\n```\n\n----------------------------------------\n\nTITLE: Defining VertexGeometry Struct in GLSL\nDESCRIPTION: Defines the VertexGeometry struct in GLSL, providing a standardized interface for accessing vertex shader variables like world position, common space position, normal, and UV coordinates within shader hooks. Its members have specific semantic meanings depending on the layer type.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-shader-hook-rfc.md#_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\nstruct VertexGeometry {\n  vec3 worldPosition;      // Primary world space position\n  vec3 worldPositionAlt; // Secondary world space position (e.g., for edges)\n  vec4 position;           // Common space position (after projection)\n  vec4 normal;             // Common space normal\n  vec2 uv;                 // UV coordinates\n};\n```\n\n----------------------------------------\n\nTITLE: Subclassing ScatterplotLayer with Custom Shader Injection in JavaScript\nDESCRIPTION: Demonstrates how to subclass the ScatterplotLayer to inject custom shader code that highlights red objects by modifying the fragment shader. Defines uniforms and shader modules, overrides getShaders to append shader injection, and implements updateState to update shader uniform props based on the layer's highlightRed prop. This approach requires subclassing each layer type individually for reuse, leading to code duplication.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/layer-extensions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport type {ShaderModule} from '@luma.gl/shadertools';\n\n// Declare uniform block & custom shader module\nconst uniformBlock = `\\\nuniform highlightUniforms {\n  bool enabled;\n} highlight;\n`;\n\ntype HighlightProps = {enabled: boolean};\n\nconst highlightUniforms = {\n  name: 'trips',\n  fs: uniformBlock, // Only need to add block to fragment stage in this example\n  uniformTypes: {enabled: 'f32'}\n} as const satisfies ShaderModule<TripsProps>;\n\nclass FilteredScatterplotLayer extends ScatterplotLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    shaders.inject = {\n      // Standard injection hook - see \"Writing Shaders\"\n      'fs:DECKGL_FILTER_COLOR': `\n        if (highlight.enabled) {\n          if (color.r / max(color.g, 0.001) > 2. && color.r / max(color.b, 0.001) > 2.) {\n            // is red\n            color = vec4(1.0, 0.0, 0.0, 1.0);\n          } else {\n            discard;\n          }\n        }\n      `\n    };\n\n    // Add uniform binding to shader modules\n    shaders.modules = [...shaders.modules, highlightUniforms];\n    return shaders;\n    };\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.highlightRed !== oldProps.highlightRed) {\n      // Set the custom uniform\n      const highlightProps: HighlightProps = {enabled: props.highlightRed};\n      model.shaderInputs.setProps({highlight: highlightProps});\n    }\n  }\n}\n\nnew FilteredScatterplotLayer({...});\n```\n\n----------------------------------------\n\nTITLE: Defining the Widget Interface in JavaScript\nDESCRIPTION: This code defines the `Widget` interface, including methods like `onAdd`, `onRemove`, `setProps`, and event hooks such as `onViewStateChange`, `onRedraw`, `onHover`, and `onClick`.  This interface is the foundation for the new UI components.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.0/ui-module-rfc.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ninterface Widget<PropsT> {\n  /// Populated by core when mounted\n  deck?: Deck;\n  container?: HTMLDivElement;\n\n  constructor(props: PropsT);\n\n  /// Lifecycle hooks\n  onAdd: () => void;\n  onRemove: () => void;\n  setProps: (props: PropsT) => void;\n\n  /// Event hooks\n  onViewStateChange?: () => void;\n  onRedraw?: () => void;\n  onHover?: (info) => void;\n  onClick?: (info) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using deck.gl Pre-bundled Scripts via CDN\nDESCRIPTION: This HTML snippet shows how to include deck.gl in a project using pre-bundled JavaScript files hosted on a CDN. This method is suitable for simple use cases or when not using a module bundler.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/aggregation-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Tile Maps in Multiple Views - React\nDESCRIPTION: This React code snippet demonstrates rendering tile maps in multiple views using separate MVTLayer instances for each view, managed within a React component using `useMemo` and `useCallback` hooks. A `layerFilter` ensures each layer is rendered only in its designated viewport.  This approach is recommended for layers with expensive operations like data fetching or aggregation. It depends on react, @deck.gl/react, @deck.gl/core and @deck.gl/geo-layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useMemo, useCallback} from 'react';\nimport {DeckGL} from '@deck.gl/react';\nimport {DeckProps, MapView} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\n\nfunction App() {\n  const views = useMemo(() => [\n    new MapView({id: 'main', controller: true}),\n    new MapView({id: 'minimap', x: 10, y: 10, width: 300, height: 200})\n  ], []);\n\n  const layers = useMemo(() => [\n    new MVTLayer({\n      id: 'tiles-for-main',\n      // ...\n    }),\n    new MVTLayer({\n      id: 'tiles-for-minimap',\n      // ...\n    })\n  ], []);\n\n  const layerFilter: DeckProps[\"layerFilter\"] = useCallback(({layer, viewport} => {\n    return layer.id === `tiles-for-${viewport.id}`;\n  }), []);\n\n  return <DeckGL\n    // ...\n    views={views}\n    layers={layers}\n    layerFilter={layerFilter}\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using S2Layer - TypeScript\nDESCRIPTION: This TypeScript code demonstrates creating an instance of the S2Layer.  It uses the `S2Layer` and `S2LayerProps` from the `@deck.gl/geo-layers` module.  It shows how to instantiate an S2Layer with type definition using a generic, but does not include any actual property assignments.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/s2-layer.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {S2Layer} from '@deck.gl/geo-layers';\nimport type {S2LayerProps} from '@deck.gl/geo-layers';\n\nnew S2Layer<DataT>(...props: S2LayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Filtering Layers for Rendering and Picking - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `layerFilter` prop to control both rendering and picking behavior in multiple viewports. It prevents rendering the 'car' layer in the 'first-person' view and disables picking in the 'minimap'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/views.md#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst layerFilter = ({layer, viewport, isPicking}) => {\n  if (viewport.id === 'first-person' && layer.id === 'car') {\n    // Do not draw the car layer in the first person view\n    return false;\n  }\n  if (isPicking && viewport.id === 'minimap') {\n    // Do not pick anything in the minimap\n    return false;\n  }\n  return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with yarn\nDESCRIPTION: This command installs the necessary dependencies for the project using yarn. It is an alternative to npm and ensures that all required packages are available before running or building the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/maplibre/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Defining QuadbinTableSourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `QuadbinTableSourceOptions` type used by the `quadbinTableSource` function. It includes `aggregationExp`, `aggregationResLevel`, `columns`, `spatialDataColumn`, and `tableName`. It's used to fetch quadbin data, including options for aggregation and specific column selection.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\ntype QuadbinTableSourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing GPU Buffer with luma.gl in JavaScript\nDESCRIPTION: Imports the Buffer class from the luma.gl library and creates a new Buffer instance using a WebGL context and data. This snippet shows how to create GPU buffers directly in JavaScript, which can then be passed as attributes to deck.gl layers to maximize GPU memory control and performance. It implies familiarity with WebGL context management and WebGL-compatible typed array data.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/binary-data-rfc.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {Buffer} from 'luma.gl';\nconst buffer = new Buffer(gl, {data: });\n```\n\n----------------------------------------\n\nTITLE: Auto-Registering LAZLoader for deck.gl PointCloudLayer (Proposal)\nDESCRIPTION: Demonstrates a proposed feature where importing a loaders.gl loader (`LAZLoader`) would automatically make it available for use with deck.gl layers (like `PointCloudLayer`), simplifying data loading. This example uses a `LAZ_SAMPLE` data source, implying asynchronous loading handled by the implicitly registered loader. Note: This is a conceptual proposal exploring auto-registration and not standard implemented behavior.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/data-loading-rfc.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LAZLoader} from '@loaders.gl/las';\n\nnew PointCloudLayer({\n  coordinateSystem: COORDINATE_SYSTEM.IDENTITY,\n  data: LAZ_SAMPLE\n});\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and ArcGIS packages via NPM\nDESCRIPTION: Terminal commands to install deck.gl with ArcGIS dependencies using npm.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/arcgis/overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl @arcgis/core\n# or\nnpm install @deck.gl/core @deck.gl/arcgis @arcgis/core\n```\n\n----------------------------------------\n\nTITLE: Defining Default Texture Parameters (TypeScript)\nDESCRIPTION: This snippet shows the default configuration object used by SimpleMeshLayer for texture parameters if not explicitly provided, specifying linear filtering and clamp-to-edge addressing.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/simple-mesh-layer.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n{\n  minFilter: 'linear',\n  magFilter: 'linear',\n  mipmapFilter: 'linear',\n  addressModeU: 'clamp-to-edge',\n  addressModeV: 'clamp-to-edge'\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring DECKGL_FILTER_SIZE Hook in GLSL Vertex Shader\nDESCRIPTION: Declares the standard vertex shader hook `DECKGL_FILTER_SIZE`. This hook allows modification of the common space dimensions (size) associated with the current vertex before projection, using the VertexGeometry struct for context. The specific meaning of 'size' varies by layer (e.g., offset, extrusion).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-shader-hook-rfc.md#_snippet_2\n\nLANGUAGE: GLSL\nCODE:\n```\nvoid DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry);\n```\n\n----------------------------------------\n\nTITLE: Installing pydeck Python Bindings using Bash\nDESCRIPTION: Shows the pip command to install pydeck, the official Python bindings for deck.gl, enabling deck.gl's WebGL visualizations from Python environments. This requires Python and pip package manager. pydeck facilitates integration with Jupyter notebooks and Python-based data science workflows, expanding deck.gl's accessibility beyond JavaScript.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install pydeck\n```\n\n----------------------------------------\n\nTITLE: Initializing an AttributeManager instance in JavaScript\nDESCRIPTION: Creates a new AttributeManager instance with an optional identifier for debugging purposes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/attribute-manager.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew AttributeManager({id: 'attribute-manager'});\n```\n\n----------------------------------------\n\nTITLE: Defining QuadbinQuerySourceOptions Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the `QuadbinQuerySourceOptions` type for the `quadbinQuerySource` function. This type provides options to configure the query for quadbin data. It includes `aggregationExp`, `aggregationResLevel`, `spatialDataColumn`, `sqlQuery`, and `queryParameters`. This configures the query and data aggregation parameters.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/data-sources.md#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ntype QuadbinQuerySourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n};\n```\n\n----------------------------------------\n\nTITLE: Function Signature for `generateLayerTests`\nDESCRIPTION: Outlines the function signature and parameters for the `generateLayerTests` utility. It accepts an options object with `Layer` (the layer class), optional `sampleProps` (base properties for tests including data), an optional `assert` callback for custom checks, and optional `onBeforeUpdate`/`onAfterUpdate` callbacks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/test-utils/generate-layer-tests.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ngenerateLayerTests({Layer, sampleProps, assert, onError});\n```\n\n----------------------------------------\n\nTITLE: Defining FragmentGeometry Struct in GLSL\nDESCRIPTION: Defines the FragmentGeometry struct in GLSL, providing a standardized interface for accessing fragment shader variables like UV coordinates within fragment shader hooks.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/layer-shader-hook-rfc.md#_snippet_1\n\nLANGUAGE: GLSL\nCODE:\n```\nstruct FragmentGeometry {\n  vec2 uv; // UV coordinates of the fragment\n};\n```\n\n----------------------------------------\n\nTITLE: Importing ArcLayer in TypeScript\nDESCRIPTION: TypeScript import statements for ArcLayer component and its prop types, showing proper type usage for strongly typed implementation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/arc-layer.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {ArcLayer} from '@deck.gl/layers';\nimport type {ArcLayerProps} from '@deck.gl/layers';\n\nnew ArcLayer<DataT>(...props: ArcLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with npm\nDESCRIPTION: Launches a local development server for the application using webpack-dev-server, configured via an npm script. This command typically includes hot module reloading for a faster development workflow.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/frustum-cull/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Accessing Selected Data from pydeck Widget in Python\nDESCRIPTION: This snippet demonstrates how to convert the selected data property from a pydeck widget into a Pandas DataFrame for downstream data manipulation. It assumes a pydeck Deck or Layer has been instantiated and an object r exists with a deck_widget property containing selected_data. The output is a DataFrame containing the currently selected data features, which can be empty if no selection has occurred.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/pydeck-interactive-api-rfc.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npd.DataFrame([r.deck_widget.selected_data])\n```\n\n----------------------------------------\n\nTITLE: Setting eventRecognizerOptions for touch viewport manipulation - Typescript\nDESCRIPTION: This code snippet demonstrates how to configure the `eventRecognizerOptions` prop of the `Deck` component to revert the default gesture for manipulating viewport pitch by touch from two-finger to three-finger dragging. This is necessary when upgrading from older versions of deck.gl where the default gesture was three-finger dragging.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\neventRecognizerOptions: {\n  multipan: {pointers: 3}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm/yarn\nDESCRIPTION: Installs the required Node.js package dependencies for the project using either npm or yarn. This command must be run before executing the development or build commands.\n\nPrerequisites: Node.js and either npm or yarn installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/frustum-cull/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Using Accessors for Constant Attributes (Prior Method) - deck.gl - JavaScript\nDESCRIPTION: This snippet demonstrates the traditional deck.gl method for setting constant attributes on a layer by providing accessor functions that return a fixed value for each object. It highlights the inefficiency and complexity (requiring update triggers) associated with this approach when the value is constant across all data points. Requires the `deck.gl` library.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.3/constant-accessor-rfc.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ScatterplotLayer({\n  radiusScale: 100,\n  getPosition: d => d.position,\n  getRadius: d => 1,\n  getColor: d => [255, 200, 0]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting the WMSLayer Example (Bash)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn, and then bundle and serve the WMSLayer example application using Vite via `npm start`. These commands are essential for setting up the local development environment for the example.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/wms/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Example fp64 Vertex Shader with Extended 64-bit Projection Functions in GLSL\nDESCRIPTION: This GLSL example shows a current fp64 vertex shader that implements double precision positioning by separately handling high and low parts of coordinates. It constructs 64-bit position vectors from instance attributes, performs multiple fp64 sum and projection operations using helper functions like `project_position_fp64`, `vec4_fp64`, and `sum_fp64`, and calculates the clipspace position with `project_to_clipspace_fp64`. This shader is substantially more complex than fp32 due to additional precision computations and multiple intermediate variables.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v5.2/unified-32-and-64-bit-project-api-rfc.md#_snippet_2\n\nLANGUAGE: GLSL\nCODE:\n```\nattribute vec3 positions;\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64xyLow;\nattribute vec3 instanceNormals;\n\nvarying float vLightWeight;\n\nmain() {\n  vec4 instancePositions64xy = vec4(\n    instancePositions.x, instancePositions64xyLow.x,\n    instancePositions.y, instancePositions64xyLow.y);\n  vec2 projected_coord_xy[2];\n  project_position_fp64(instancePositions64xy, projected_coord_xy);\n  vec2 vertex_pos_localspace[4];\n  vec4_fp64(vec4(positions, 0.0), vertex_pos_localspace);\n  vec2 vertex_pos_modelspace[4];\n  vertex_pos_modelspace[0] = sum_fp64(vertex_pos_localspace[0], projected_coord_xy[0]);\n  vertex_pos_modelspace[1] = sum_fp64(vertex_pos_localspace[1], projected_coord_xy[1]);\n  vertex_pos_modelspace[2] = sum_fp64(vertex_pos_localspace[2],\n    vec2(project_scale(instancePositions.z), 0.0));\n  vertex_pos_modelspace[3] = vec2(1.0, 0.0);\n\n  gl_Position = project_to_clipspace_fp64(vertex_pos_modelspace);\n\n  vec4 position_worldspace = vec4(  \n    vertex_pos_modelspace[0].x,\n    vertex_pos_modelspace[1].x,  \n    vertex_pos_modelspace[2].x,\n    1.0\n  );\n  vLightWeight = getLightWeight(position_worldspace.xyz, project_normal(instanceNormals));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running deck.gl HexagonLayer example with bash\nDESCRIPTION: This snippet provides command-line instructions to install required Node.js dependencies for the HexagonLayer example using npm or yarn and to start the application with Vite bundler. It assumes Node.js and npm or yarn are installed and targets developers running the example locally for testing or development purposes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/3d-heatmap/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for deck.gl Example using yarn\nDESCRIPTION: This bash snippet shows how to install project dependencies using yarn.  It accomplishes the same task as `npm install`, fetching and installing the packages defined in `package.json`. It's executed from the project's root directory, ensuring all project-specific dependencies are present.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/heatmap/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Maximum Weight Calculation Vertex Shader\nDESCRIPTION: GLSL vertex shader used in the second rendering pass to find maximum and total weights. It maps all vertices to the same location and passes texture coordinates to the fragment shader for sampling the aggregation texture.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.0/gpu-screengrid-aggregation-rfc.md#_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\nattribute vec2 positions;\nattribute vec2 texCoords;\nvarying vec2 vTextureCoord;\nvoid main(void) {\n  // Map each position to single pixel\n   gl_Position = vec4(-1.0, -1.0, 0.0, 1.0);\n\n  vTextureCoord = texCoords;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if layers need redraw in deck.gl\nDESCRIPTION: The needsRedraw method assesses whether the current set of layers requires redrawing. It accepts a parameter to reset redraw flags after the check and returns a boolean indicating if a redraw is necessary.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/layer-manager.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayerManager.needsRedraw({clearRedrawFlags = false});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running deck.gl Example - bash\nDESCRIPTION: This snippet provides the command-line steps to install project dependencies and run the deck.gl ScatterplotLayer example locally. It requires Node.js and either npm or yarn to be installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/scatterplot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Subclassing `CPUGridLayer` for Custom Grid Logic\nDESCRIPTION: Demonstrates how to correctly subclass `CPUGridLayer` instead of `GridLayer` for custom grid aggregation logic starting from deck.gl v7.1. The custom layer (`EnhancedCPUGridLayer` in this example) must then be specified via the `_subLayerProps` when instantiating the main `GridLayer`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nclass EnhancedCPUGridLayer extends CPUGridLayer {\n// enhancments\n}\n\n// Code initilizing GridLayer\nconst myGridLayer = new GridLayer({\n  // props\n  ...\n  // Override sublayer type for 'CPU'\n  _subLayerProps: {\n    CPU: {\n      type: EnhancedCPUGridLayer\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing JSONLayer with Catalog and JSON\nDESCRIPTION: This snippet demonstrates how to import and initialize a JSONLayer with a layer catalog and a JSON file. The layerCatalog specifies the available layer types, and the json prop contains the configuration for the layers to be created.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/json-layer/json-layer/json-layer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {JSONLayer} from './json-layer';\n\nconst layers = [\n  new JSONLayer({\n  \tlayerCatalog: require('@deck.gl/layers'),\n  \tjson: require('./us-map.json')\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Access Token\nDESCRIPTION: Sets the Mapbox access token as an environment variable.  This allows the deck.gl application to authenticate with Mapbox and display maps. The token is required for using Mapbox's services.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/mapbox/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MapboxAccessToken=<mapbox_access_token>\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Deck.gl TextLayer Example Using Bash\nDESCRIPTION: This bash snippet shows commands to install project dependencies using npm or yarn, followed by bundling and serving the app with Vite through the npm start script. It is required to run these commands to set up and launch the example locally.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/text/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting up and Running Deck.gl Video Example (Bash)\nDESCRIPTION: This snippet provides the Bash commands required to install the project dependencies and then bundle and serve the application using webpack. Ensure you are in the project directory and have Node.js and a package manager (npm or yarn) installed.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/video/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with webpack\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with npm or yarn\nDESCRIPTION: This script outlines commands to install project dependencies using npm or yarn, foundational steps before running the app.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/contour/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Commands for development and production build\nDESCRIPTION: These commands run the development server with hot reload (`npm start`) and create an optimized production build (`npm run build`). They facilitate the development workflow and final deployment process for the deck.gl with Maplibre project.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/maplibre/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start // for development with hot reload\nnpm run build // for production build\n```\n\n----------------------------------------\n\nTITLE: Example Usage of `generateLayerTests` with `tape`\nDESCRIPTION: Demonstrates integrating `generateLayerTests` within a `tape` test suite to test a `GeoJsonLayer`. It shows importing necessary utilities, configuring `generateLayerTests` with the layer class, sample data props, and custom assertions, and finally passing the generated test cases to `testLayer` for execution.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/test-utils/generate-layer-tests.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport test from 'tape-promise/tape';\nimport {testLayer, generateLayerTests} from '@deck.gl/test-utils';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\ntest('GeoJsonLayer#tests', t => {\n  \n  const testCases = generateLayerTests({\n    Layer: GeoJsonLayer,\n    sampleProps: {\n      data: SAMPLE_GEOJSON\n    },\n    assert: ({layer, subLayers}) => {\n      t.ok(layer.state.features, 'should update features');\n      t.is(subLayers.length, layer.props.stroked ? 2 : 1, 'correct number of sublayers');\n    }\n  });\n\n  testLayer({Layer: GeoJsonLayer, testCases});\n\n  t.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server with npm/yarn in Bash\nDESCRIPTION: Shows the commands to install project dependencies using npm or yarn, and how to bundle and serve the application using Vite's development server. These commands must be run in the terminal at the project root to set up and launch the minimal FirstPersonView deck.gl example. Key steps include installing dependencies via 'npm install' or 'yarn' and starting the app with 'npm start'.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/360-video/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Access Token as Environment Variable in Bash\nDESCRIPTION: Sets up the Mapbox access token as an environment variable, which is required for accessing Mapbox's terrain API to load elevation data for the TerrainLayer example.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/terrain/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MapboxAccessToken=<mapbox_access_token>\n```\n\n----------------------------------------\n\nTITLE: Importing and Instantiating GridLayer in TypeScript\nDESCRIPTION: This TypeScript snippet shows the standard import statement for the GridLayer and its types from the aggregation-layers module. It also illustrates the general constructor signature for creating a new GridLayer instance with generic data type support.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/aggregation-layers/grid-layer.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {GridLayer} from '@deck.gl/aggregation-layers';\nimport type {GridLayerProps, GridLayerPickingInfo} from '@deck.gl/aggregation-layers';\n\nnew GridLayer<DataT>(...props: GridLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Running Development and Production Build Commands (Bash)\nDESCRIPTION: Lists the npm commands for running the application. `npm start` launches the development server with hot reloading enabled. `npm run build` creates an optimized production bundle of the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/google-maps/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Proposed Implementation for PathLayer with Partial Updates\nDESCRIPTION: Modified implementation for PathLayer that supports updating only a specified range of paths, demonstrating the approach for non-instanced attributes.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/partial-updates-rfc.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ncalculateStartPositions( {value, start, end}) {\n    const {paths} = this.state;\n    for (let i = start; < end; ++i) {\n         const path = this.state.paths[i]\n         const numSegments = path.length - 1;\n      for (let ptIndex = 0; ptIndex < numSegments; ptIndex++) {\n        const point = path[ptIndex];\n        value[i++] = point[0];\n        value[i++] = point[1];\n        value[i++] = point[2] || 0;\n      }\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle - Bash\nDESCRIPTION: Executes the `build` script defined in `package.json`. This command typically uses Vite to compile, optimize, and bundle the application code into static assets suitable for deployment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/google-maps/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (npm)\nDESCRIPTION: This command installs the necessary dependencies for the project using npm. It reads the `package.json` file and downloads the required packages. This step is crucial before running or building the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/harp.gl/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Installs the project dependencies using npm or yarn. This ensures that all required packages for running and building the deck.gl application are available.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/mapbox/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Rendering ScreenGridLayer Demo with React JSX in JavaScript\nDESCRIPTION: Imports a Demo component from a relative module representing the ScreenGridLayer visualization and renders it as a JSX element. This snippet assumes a React or JSX environment to enable rendering of the component. There are no parameters or outputs directly shown; the visual output is expected when running in a suitable React application context.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/screen-grid-layer.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Demo from './screen-grid-layer';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This code snippet shows how to install project dependencies using either npm or yarn. It is a prerequisite step for running the application.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/arcgis/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Using S2Layer - minified JS\nDESCRIPTION: This snippet provides instructions on how to use pre-bundled scripts of deck.gl in an HTML file. It offers the options of using the minified `deck.gl.min.js` file or the core, layers, and geo-layers minified files separately.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/geo-layers/s2-layer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using pre-bundled deck.gl scripts (HTML)\nDESCRIPTION: This snippet demonstrates how to include pre-bundled deck.gl scripts in an HTML file using unpkg. It shows how to either include the complete deck.gl library or specific modules like @deck.gl/core and @deck.gl/layers.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/bitmap-layer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/deck.gl@^9.0.0/dist.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js\"></script>\n<script src=\"https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Package with Yarn\nDESCRIPTION: This command installs the complete deck.gl package using Yarn. It provides an alternative to npm for installing dependencies. The add command ensures that deck.gl is added to your project's dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add deck.gl\n```\n\n----------------------------------------\n\nTITLE: Setting Google Maps Credentials Environment Variables - Bash\nDESCRIPTION: Sets the `GoogleMapsAPIKey` and `GoogleMapsMapId` environment variables. These are required for the application to connect to Google Maps services. Users should replace `<google_maps_api_key>` and `<google_maps_map_id>` with their actual keys/IDs.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/pure-js/google-maps/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GoogleMapsAPIKey=<google_maps_api_key>\nexport GoogleMapsMapId=<google_maps_map_id>\n```\n\n----------------------------------------\n\nTITLE: Rendering DataFilterExtension Demo Component - JSX\nDESCRIPTION: This JSX syntax renders the imported `Demo` component. It instantiates the component and adds its output to the page, effectively displaying the demonstration of the `DataFilterExtension`. This is typically used within a React functional or class component's render method.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/data-filter-extension.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Access Token Environment Variable (Bash)\nDESCRIPTION: Exports the required Mapbox access token as an environment variable named `MapboxAccessToken`. This token is necessary for authenticating requests to Mapbox services used in the example application. Replace `<mapbox_access_token>` with your actual personal token.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/get-started/react/mapbox/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MapboxAccessToken=<mapbox_access_token>\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and Dependencies for H3TileLayer (Bash)\nDESCRIPTION: Lists npm commands to install deck.gl and its core, layers, and carto packages required to use the H3TileLayer component. This snippet helps set up the environment for development with these dependencies.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/h3-tile-layer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/carto\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl dependencies via NPM\nDESCRIPTION: Instructions for installing deck.gl dependencies from NPM and importing GridCellLayer components.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/grid-cell-layer.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {GridCellLayer} from '@deck.gl/layers';\nimport type {GridCellLayerProps} from '@deck.gl/layers';\n\nnew GridCellLayer<DataT>(...props: GridCellLayerProps<DataT>[]);\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl and CARTO Module via NPM\nDESCRIPTION: Provides the necessary commands to install deck.gl and its related modules, including the CARTO module which contains QuadbinTileLayer, using the Node Package Manager (NPM).\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/quadbin-tile-layer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/carto\n```\n\n----------------------------------------\n\nTITLE: Installing deck.gl Dependencies via npm (Bash)\nDESCRIPTION: Provides the npm commands to install the required deck.gl packages for using CARTO basemaps in a Node.js/React project. You can either install the umbrella `deck.gl` package or install individual modules like `@deck.gl/core`, `@deck.gl/layers`, and `@deck.gl/carto`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/carto/basemap.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/carto\n```\n\n----------------------------------------\n\nTITLE: Server message handling with JSONConverter\nDESCRIPTION: Demonstrates how to handle server messages containing JSON and binary payloads, updating resources incrementally and converting to deck.gl props.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/data-manager-rfc.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet json;\nlet resouces = {};\n\nfunction onServerMessage({type, id, payload}) {\n  if (type === 'json') {\n    json = payload;\n  } else if (type === 'binary') {\n    resources[id] = payload;\n  }\n  const deckProps = converter.convert(json, resources);\n  // update\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Pydeck Development Environment using Bash\nDESCRIPTION: These commands provide a complete setup for the pydeck development environment. They clone the repository, navigate to the pydeck bindings, run setup scripts, activate a virtual environment, initialize dependencies, and prepare Jupyter integration. Prerequisites include `yarn` and Python 3.5+.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/contributing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/visgl/deck.gl\ncd deck.gl/bindings/pydeck\nmake setup-env\n. env/bin/activate\nmake init\nmake prepare-jupyter\n```\n\n----------------------------------------\n\nTITLE: Setting Mapbox Token Directly in TypeScript Configuration\nDESCRIPTION: Alternative approach to provide the Mapbox access token by directly setting it in the app.tsx file instead of using an environment variable.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/terrain/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nMAPBOX_TOKEN = '<mapbox_access_token>'\n```\n\n----------------------------------------\n\nTITLE: Testing X11 setup with glxgears\nDESCRIPTION: These commands install mesa-utils and run glxgears to verify that X11 forwarding is set up correctly. This is a crucial step for ensuring OpenGL support in the WSL environment.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install mesa-utils\nglxgears\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running deck.gl WebGPU Example - bash\nDESCRIPTION: This snippet provides the shell commands necessary to install project dependencies using npm or yarn, and to bundle and serve the example application with vite. It assumes a Node.js environment with the relevant package management tools installed. The commands ensure the environment is set up correctly before running the app.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/test/apps/webgpu-scatterplot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting DISPLAY variable on WSL 2\nDESCRIPTION: This command sets the DISPLAY environment variable for WSL2 to enable OpenGL support via X11 forwarding. It retrieves the nameserver from /etc/resolv.conf and sets the DISPLAY variable accordingly.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# WSL 2\nexport DISPLAY=$(grep -m 1 nameserver /etc/resolv.conf | awk '{print $2}'):0.0\n```\n\n----------------------------------------\n\nTITLE: glTF MSFT_LOD Extension Example\nDESCRIPTION: This JSON snippet demonstrates how to use the MSFT_lod extension in a glTF file to specify different levels of detail (LODs) for a node. The extensions.MSFT_lod.ids array lists the IDs of the nodes representing lower LODs.  The extras.MSFT_screencoverage array is used to specify the screen coverage for each LOD level. This extension allows the renderer to select the appropriate LOD based on screen size or distance.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/proposals/instance-culling-rfc.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"nodes\": [\n        {\n            \"name\": \"High_LOD\",\n            \"mesh\": 0,\n            \"extensions\": {\n                \"MSFT_lod\": {\n                    \"ids\": [\n                        1,\n                        2\n                    ]\n                }\n            },\n            \"extras\": {\n                \"MSFT_screencoverage\": [\n                    0.5,\n                    0.2,\n                    0.01\n                ]\n            }\n        },\n        {\n            \"name\": \"Medium_LOD\",\n            \"mesh\": 1\n        },\n        {\n            \"name\": \"Low_LOD\",\n            \"mesh\": 2\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install deck.gl with npm\nDESCRIPTION: This bash command shows how to install deck.gl and its core/layers dependencies using npm. It installs either the complete deck.gl package or only the core and layers modules.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/layers/polygon-layer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers\n```\n\n----------------------------------------\n\nTITLE: Definition of VertexGeometry structure for shader data passing\nDESCRIPTION: Defines the 'VertexGeometry' struct used within shaders to pass per-vertex data such as position, normal, UV coordinates, and picking color, enabling advanced shading and geometry manipulations.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/writing-shaders.md#_snippet_3\n\nLANGUAGE: GLSL\nCODE:\n```\nstruct VertexGeometry {\n  vec3 worldPosition;\n  vec3 worldPositionAlt;\n  vec3 normal;\n  vec2 uv;\n  vec4 position;\n  vec3 pickingColor;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing MEAN operation with Transform in WebGL2 GLSL\nDESCRIPTION: A code example showing how to calculate MEAN values by first performing SUM aggregation, then dividing the sum by count using the Transform class. This approach uses a GLSL shader to process the summed values and perform the division on the GPU.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.3/gpu-aggregation-enhancements.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {sumBuffer} = aggregationResults;\n\nconst transform = new Transform(gl2, {\n  sourceBuffers: {\n    inValue: sumBuffer\n  },\n  vs: `\\\n#version 300 es\nin vec4 inValue;\nout vec4 outValue;\n\nvoid main()\n{\n  // count is in 'w' channel.\n  outValue.xyz = inValue.xyz/inValue.w;\n},\n  feedbackMap: {\n    inValue: 'outValue'\n  },\n  varyings: ['outValue'],\n  elementCount\n});\n\nconst meanBuffer = transform.getBuffer('outValue');\n```\n\n----------------------------------------\n\nTITLE: Rendering ScenegraphLayer with deck.gl - React\nDESCRIPTION: This snippet imports a React component named `Demo` from a local file `./scenegraph-layer` and renders it. The `Demo` component is assumed to utilize the `ScenegraphLayer` from deck.gl.  The rendered component is responsible for setting up and displaying 3D models within the deck.gl environment. This requires the component to have correct dependencies to the deck.gl library and a properly formatted scenegraph.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/website/src/examples/scenegraph-layer.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Demo from './scenegraph-layer';\n\n<Demo />\n```\n\n----------------------------------------\n\nTITLE: Install pydeck-carto from source\nDESCRIPTION: These commands clone the deck.gl repository, navigate to the pydeck-carto directory, and install the package from source using pip.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/visgl/deck.gl\ncd deck.gl/bindings/pydeck-carto\npip install .\n```\n\n----------------------------------------\n\nTITLE: Modified Point Cloud Vertex Shader - GLSL\nDESCRIPTION: This is a modified vertex shader for a `PointCloudLayer` that uses the custom `instanceRadiusPixels` attribute. It replaces the uniform `radiusPixels` with `instanceRadiusPixels` to allow for per-point radius control.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/developer-guide/custom-layers/subclassed-layers.md#_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\n// my-point-cloud-layer-vertex.js\n// This is copied and adapted from point-cloud-layer-vertext.glsl.js\n// Modifications are annotated\nexport default `\\\n#define SHADER_NAME point-cloud-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec3 instanceNormals;\nattribute vec4 instanceColors;\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute vec3 instancePickingColors;\n\n/* New attribute */\nattribute flat instanceRadiusPixels;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 unitPosition;\n\nvoid main(void) {\n  unitPosition = positions.xy;\n\n  vec4 position_commonspace;\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.), position_commonspace);\n  /* replaced uniform 'radiusPixels' with 'instanceRadiusPixels' */\n  gl_Position.xy += project_pixel_size_to_clipspace(positions.xy * instanceRadiusPixels);\n\n  vec3 lightColor = lighting_getLightColor(instanceColors.rgb, project.cameraPosition, position_commonspace.xyz, project_normal(instanceNormals));\n\n  vColor = vec4(lightColor, instanceColors.a * opacity) / 255.0;\n\n  picking_setPickingColor(instancePickingColors);\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Installing Deck.gl Dependencies (Bash)\nDESCRIPTION: This snippet provides the command-line instructions for installing the necessary deck.gl packages using npm. It shows options for installing the full package or core and mesh layers separately.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/mesh-layers/simple-mesh-layer.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/mesh-layers\n```\n\n----------------------------------------\n\nTITLE: Declaring deck.gl module with third-party typings (legacy)\nDESCRIPTION: This snippet demonstrates how to declare the deck.gl module to use the third-party typings from `@danmarshall/deckgl-typings` in versions of deck.gl prior to v8.8. This code should be placed in a `.d.ts` file, such as `deckgl.d.ts`.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/get-started/using-with-typescript.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as DeckTypings from \"@danmarshall/deckgl-typings\"\ndeclare module \"deck.gl\" {\n    export namespace DeckTypings {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for deck.gl Project\nDESCRIPTION: This snippet provides command-line instructions to install necessary dependencies using npm or yarn, and then start the development server with vite for the OpenStreetMap TileLayer and BitmapLayer example in deck.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/map-tile/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running the app using npm\nDESCRIPTION: This bash script installs project dependencies using npm and then starts the application using the npm start command. It assumes that npm is installed and configured correctly.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/examples/website/i3s/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# or\nyarn\n# bundle and serve the app with vite\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL function project_position_to_clipspace for 64-bit Projection\nDESCRIPTION: This GLSL function projects a 3D position into clip space using 64-bit precision by considering the low part of the position and an offset. It provides two variants: one returning a vec4 and another outputting the projected position through an out parameter. It requires the vertex position, its low part, and an offset, facilitating high-precision rendering in shaders.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/core/project64.md#_snippet_0\n\nLANGUAGE: GLSL\nCODE:\n```\nvec4 project_position_to_clipspace(vec3 position, vec3 position64Low, vec3 offset)\nvec4 project_position_to_clipspace(vec3 position, vec3 position64Low, vec3 offset, out vec4 commonPosition)\n```\n\n----------------------------------------\n\nTITLE: InteractionTestRunner Constructor\nDESCRIPTION: Demonstrates the instantiation of the InteractionTestRunner. The `deckProps` argument is passed directly to the Deck constructor, allowing for configuration of the deck.gl instance during test setup.  The constructor creates an instance for setting up the automated tests.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/api-reference/test-utils/interaction-test-runner.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew InteractionTestRunner(deckProps)\n```\n\n----------------------------------------\n\nTITLE: Rejected Proposal: Customizing fetch Defaults in deck.gl Layers\nDESCRIPTION: Illustrates a rejected idea for deck.gl layers to specify custom default fetch behavior. This example shows configuring `defaultProps` to use `d3.csv` for fetching data when the `data` prop is a URL. This approach was rejected, indicating it's not a supported feature in deck.gl.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v7.2/data-loading-rfc.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultProps = {\n  bitmap: {async: true},\n  fetch: {\n    data: url => d3.csv(url)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shader Modules by Name (Old Syntax)\nDESCRIPTION: Demonstrates the previous method (before v7.3) of specifying shader modules in the `Model` constructor using string names. This syntax required deck.gl to register shaders by default, which is no longer the case.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/// OLD\nnew Model({\n  // ...\n  modules: ['picking', 'project32', 'gouraud-lighting']\n});\n```\n\n----------------------------------------\n\nTITLE: Vector Tile Data Source Interface Definition in TypeScript\nDESCRIPTION: Defines a potential interface for vector tile data sources that could be implemented in the future, following a similar pattern to the ImageSource interface.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v8.9/wms-layer-rfc.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VectorTileDataSource {\n  getCapabilities(): Promise<IVectorTileDataSourceCapabilities>;\n  getTile({boundingBox, width, height, layers, parameters}): Promise<VectorTile>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Python and generating static images\nDESCRIPTION: This snippet includes shell commands related to setting up the Python environment for pydeck and generating static images from examples. It includes `make pre-init` and `make screenshot-examples` commands to create static images and .html files associated with the examples.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/PUBLISH.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# If you've never done any Python setup for pydeck\nmake pre-init\n# To create static images and .html files associated with the examples in `examples/`\nmake screenshot-examples\n# To make markdown documentation\ncd docs\nmake markdown\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on MacOS Apple Silicon (M1) with Homebrew\nDESCRIPTION: Commands to install native arm64 dependencies for MacOS on Apple Silicon by using the 'arch -arm64' prefix with Homebrew, and configuring Python environment by installing Python via Homebrew and symlinking it for use in the build process.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/docs/contributing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\narch -arm64 brew install pkg-config cairo pango libpng jpeg giflib librsvg\n\n# Ensure Python is installed\nbrew install python\nsudo ln -s /opt/homebrew/bin/python3 /opt/homebrew/bin/python\n\n# Run bootstrap with Python environment\nCPLUS_INCLUDE_PATH=/opt/homebrew/include yarn bootstrap\n```\n\n----------------------------------------\n\nTITLE: Initializing pydeck-carto Development Environment (Bash)\nDESCRIPTION: Clones the main deck.gl repository, navigates to the pydeck-carto bindings directory, and runs the 'make init' command to set up the development environment. Requires git and make to be installed. Assumes Python 3.8+ is available.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck-carto/docs/contributing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/visgl/deck.gl\ncd deck.gl/bindings/pydeck-carto\nmake init\n```\n\n----------------------------------------\n\nTITLE: Installing pydeck from test PyPI\nDESCRIPTION: This snippet installs pydeck from the test PyPI repository. It uses the pip install command with a custom index URL pointing to the test PyPI server. The version specifier `{{version}}` should be replaced with the actual semantic version number.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/PUBLISH.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -i https://test.pypi.org/simple/ pydeck=={{version}}\n```\n\n----------------------------------------\n\nTITLE: embed_examples.py - Script for Generating Embedded Source and Example Files\nDESCRIPTION: This script creates reStructuredText (.rst) files that embed source code snippets and example visualizations. It automates the generation of documentation pages with embedded code and images, enabling streamlined example showcase creation for pydeck documentation.\nSOURCE: https://github.com/visgl/deck.gl/blob/master/bindings/pydeck/docs/scripts/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n/* Content not provided in the input. */\n```"
  }
]