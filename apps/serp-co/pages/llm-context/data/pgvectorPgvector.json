[
  {
    "owner": "pgvector",
    "repo": "pgvector",
    "content": "TITLE: Querying Nearest Neighbors with L2 Distance in PostgreSQL\nDESCRIPTION: Find the nearest neighbors to a query vector using L2 distance. The '<->' operator calculates L2 distance between vectors for efficient similarity search.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension in PostgreSQL Database\nDESCRIPTION: Enable the pgvector extension in your PostgreSQL database. This needs to be done once for each database where you want to use vector operations.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: tsql\nCODE:\n```\nCREATE EXTENSION vector;\n```\n\n----------------------------------------\n\nTITLE: Installing pgvector on Linux/Mac using Git and Make\nDESCRIPTION: Clone the pgvector repository and compile the extension for PostgreSQL 13+. This builds the extension from source and installs it on your system.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd /tmp\ngit clone --branch v0.8.0 https://github.com/pgvector/pgvector.git\ncd pgvector\nmake\nmake install # may need sudo\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Table with Vector Column\nDESCRIPTION: Create a new table with a vector column that can store 3-dimensional vectors. The vector data type is provided by the pgvector extension.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE items (id bigserial PRIMARY KEY, embedding vector(3));\n```\n\n----------------------------------------\n\nTITLE: Inserting Vectors into PostgreSQL\nDESCRIPTION: Insert vector data into a PostgreSQL table. Vectors are represented as arrays of numbers in JSON-like format.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO items (embedding) VALUES ('[1,2,3]'), ('[4,5,6]');\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index for L2 Distance in PostgreSQL\nDESCRIPTION: Create an HNSW (Hierarchical Navigable Small World) index to optimize L2 distance vector searches. This provides approximate nearest neighbor search with better performance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw (embedding vector_l2_ops);\n```\n\n----------------------------------------\n\nTITLE: Hybrid Search with Full-Text Search in SQL\nDESCRIPTION: Demonstrates how to combine vector similarity search with Postgres full-text search for hybrid search.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_62\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, content FROM items, plainto_tsquery('hello search') query\n    WHERE textsearch @@ query ORDER BY ts_rank_cd(textsearch, query) DESC LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Finding Nearest Neighbors to a Row in PostgreSQL\nDESCRIPTION: Find the nearest neighbors to an existing row's vector using a subquery. This allows similarity search based on existing data in the database.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM items WHERE id != 1 ORDER BY embedding <-> (SELECT embedding FROM items WHERE id = 1) LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Bulk Loading Vectors with COPY in PostgreSQL\nDESCRIPTION: Load vector data in bulk using PostgreSQL's COPY command with binary format. This is much faster than individual INSERT statements for large datasets.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCOPY items (embedding) FROM STDIN WITH (FORMAT BINARY);\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index for Cosine Distance in PostgreSQL\nDESCRIPTION: Create an HNSW index to optimize cosine distance vector searches. This provides approximate nearest neighbor search using cosine distance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw (embedding vector_cosine_ops);\n```\n\n----------------------------------------\n\nTITLE: Filtering Rows by Vector Distance in PostgreSQL\nDESCRIPTION: Select rows that have vectors within a certain distance of a query vector. This implements a distance threshold filter for similarity search.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM items WHERE embedding <-> '[3,1,2]' < 5;\n```\n\n----------------------------------------\n\nTITLE: Calculating Vector Distance in PostgreSQL\nDESCRIPTION: Calculate and return the L2 distance between a query vector and stored vectors. The distance is returned as a column in the result set.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT embedding <-> '[3,1,2]' AS distance FROM items;\n```\n\n----------------------------------------\n\nTITLE: Upserting Vectors in PostgreSQL\nDESCRIPTION: Insert or update vectors using the ON CONFLICT clause. This is useful for ensuring vectors are updated if their ID already exists in the table.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO items (id, embedding) VALUES (1, '[1,2,3]'), (2, '[4,5,6]')\n    ON CONFLICT (id) DO UPDATE SET embedding = EXCLUDED.embedding;\n```\n\n----------------------------------------\n\nTITLE: Calculating Cosine Similarity in PostgreSQL\nDESCRIPTION: Calculate the cosine similarity between vectors by subtracting the cosine distance from 1. The '<=>' operator returns cosine distance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1 - (embedding <=> '[3,1,2]') AS cosine_similarity FROM items;\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index for Inner Product in PostgreSQL\nDESCRIPTION: Create an HNSW index to optimize inner product vector searches. This provides approximate nearest neighbor search using inner product distance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw (embedding vector_ip_ops);\n```\n\n----------------------------------------\n\nTITLE: Averaging Groups of Vectors in PostgreSQL\nDESCRIPTION: Calculate the average vector for each category using GROUP BY. This allows creating vector centroids for different categories.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT category_id, AVG(embedding) FROM items GROUP BY category_id;\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index for Hamming Distance in PostgreSQL\nDESCRIPTION: Create an HNSW index to optimize Hamming distance searches for binary vectors. This provides approximate nearest neighbor search using Hamming distance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw (embedding bit_hamming_ops);\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index for Approximate Nearest Neighbor Search in SQL\nDESCRIPTION: Creates an HNSW index for approximate nearest neighbor search using L2 distance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw (embedding vector_l2_ops);\n```\n\n----------------------------------------\n\nTITLE: Adding Vector Column to Existing PostgreSQL Table\nDESCRIPTION: Add a vector column to an existing table in PostgreSQL. This allows you to store vector embeddings alongside existing data.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE items ADD COLUMN embedding vector(3);\n```\n\n----------------------------------------\n\nTITLE: Calculating Inner Product Between Vectors in PostgreSQL\nDESCRIPTION: Calculate the inner product between vectors by multiplying the negative inner product by -1. The '<#>' operator returns the negative inner product for compatibility with ASC order index scans.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_14\n\nLANGUAGE: tsql\nCODE:\n```\nSELECT (embedding <#> '[3,1,2]') * -1 AS inner_product FROM items;\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbors with Binary Quantization in SQL\nDESCRIPTION: Demonstrates how to query nearest neighbors using binary quantization for efficient similarity search.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_57\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM items ORDER BY binary_quantize(embedding)::bit(3) <~> binary_quantize('[1,-2,3]') LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Updating Vectors in PostgreSQL\nDESCRIPTION: Update vector values for existing rows in the database. Standard SQL UPDATE syntax is used to modify vector embeddings.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE items SET embedding = '[1,2,3]' WHERE id = 1;\n```\n\n----------------------------------------\n\nTITLE: Analyzing Query Performance with EXPLAIN ANALYZE\nDESCRIPTION: SQL command to debug vector search performance by analyzing query execution plans and timing statistics.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_70\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN ANALYZE SELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Creating IVFFlat Index for L2 Distance in SQL\nDESCRIPTION: Creates an IVFFlat index for L2 distance on the 'embedding' column of the 'items' table with 100 lists.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 100);\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index with Custom Parameters in PostgreSQL\nDESCRIPTION: Create an HNSW index with custom parameters for m (max connections per layer) and ef_construction (size of dynamic candidate list). These parameters control the tradeoff between accuracy and build time.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw (embedding vector_l2_ops) WITH (m = 16, ef_construction = 64);\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index for Jaccard Distance in PostgreSQL\nDESCRIPTION: Create an HNSW index to optimize Jaccard distance searches for binary vectors. This provides approximate nearest neighbor search using Jaccard distance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw (embedding bit_jaccard_ops);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Vector Search with Inner Product Distance\nDESCRIPTION: SQL command using inner product distance for normalized vectors (like OpenAI embeddings) for better performance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_72\n\nLANGUAGE: tsql\nCODE:\n```\nSELECT * FROM items ORDER BY embedding <#> '[3,1,2]' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index for L1 Distance in PostgreSQL\nDESCRIPTION: Create an HNSW index to optimize L1 (Manhattan) distance vector searches. This provides approximate nearest neighbor search using L1 distance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw (embedding vector_l1_ops);\n```\n\n----------------------------------------\n\nTITLE: Creating IVFFlat Index with Custom Lists Parameter\nDESCRIPTION: SQL command to create an IVFFlat index with an increased number of inverted lists to speed up approximate search at the expense of recall.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_73\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 1000);\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbors with Hamming Distance for Binary Vectors in SQL\nDESCRIPTION: Demonstrates how to query nearest neighbors using Hamming distance for binary vectors.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_55\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM items ORDER BY embedding <~> '101' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Creating IVFFlat Index for Cosine Distance in SQL\nDESCRIPTION: Creates an IVFFlat index for cosine distance on the 'embedding' column of the 'items' table with 100 lists.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbors with Sparse Vectors in SQL\nDESCRIPTION: Shows how to query nearest neighbors using sparse vectors and L2 distance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_61\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM items ORDER BY embedding <-> '{1:3,3:1,5:2}/5' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Creating IVFFlat Index for Inner Product in SQL\nDESCRIPTION: Creates an IVFFlat index for inner product distance on the 'embedding' column of the 'items' table with 100 lists.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING ivfflat (embedding vector_ip_ops) WITH (lists = 100);\n```\n\n----------------------------------------\n\nTITLE: Creating IVFFlat Index for Hamming Distance in SQL\nDESCRIPTION: Creates an IVFFlat index for Hamming distance on the 'embedding' column of the 'items' table with 100 lists.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING ivfflat (embedding bit_hamming_ops) WITH (lists = 100);\n```\n\n----------------------------------------\n\nTITLE: Setting HNSW Search Parameter in PostgreSQL\nDESCRIPTION: Set the ef_search parameter for HNSW, which controls the size of the dynamic candidate list during search. Higher values provide better recall at the cost of speed.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSET hnsw.ef_search = 100;\n```\n\n----------------------------------------\n\nTITLE: Updating pgvector Extension in PostgreSQL\nDESCRIPTION: SQL command to update an installed pgvector extension to the latest version after installing the new binaries.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_105\n\nLANGUAGE: SQL\nCODE:\n```\nALTER EXTENSION vector UPDATE;\n```\n\n----------------------------------------\n\nTITLE: Deleting Vectors in PostgreSQL\nDESCRIPTION: Delete rows containing vectors from a PostgreSQL table. Standard SQL DELETE syntax is used.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM items WHERE id = 1;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Generic Vector Type\nDESCRIPTION: SQL command to create a table with a generic vector type column that can store vectors of different dimensions.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_78\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE embeddings (model_id bigint, item_id bigint, embedding vector, PRIMARY KEY (model_id, item_id));\n```\n\n----------------------------------------\n\nTITLE: Inserting Sparse Vectors in SQL\nDESCRIPTION: Demonstrates how to insert sparse vectors into a table using the sparsevec format.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_60\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO items (embedding) VALUES ('{1:1,3:2,5:3}/5'), ('{1:4,3:5,5:6}/5');\n```\n\n----------------------------------------\n\nTITLE: Encouraging Index Usage for Vector Queries\nDESCRIPTION: SQL transaction to discourage sequential scans and encourage the query planner to use an index for vector search queries.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_86\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\nSET LOCAL enable_seqscan = off;\nSELECT ...\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Querying with Type Casting for Vector Search\nDESCRIPTION: SQL query that uses type casting to search vectors of specific dimensions in a mixed-dimension table.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_80\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM embeddings WHERE model_id = 123 ORDER BY embedding::vector(3) <-> '[3,1,2]' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Bulk Loading Vectors Using COPY Command\nDESCRIPTION: SQL command for efficiently bulk loading vector data in binary format, which is faster than individual INSERT statements.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_68\n\nLANGUAGE: sql\nCODE:\n```\nCOPY items (embedding) FROM STDIN WITH (FORMAT BINARY);\n```\n\n----------------------------------------\n\nTITLE: Increasing Parallel Workers for HNSW Index Building in PostgreSQL\nDESCRIPTION: Increase the number of parallel workers for faster HNSW index building. More workers can significantly reduce index creation time for large tables.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSET max_parallel_maintenance_workers = 7; -- plus leader\n```\n\n----------------------------------------\n\nTITLE: Increasing PostgreSQL Memory for HNSW Index Building\nDESCRIPTION: Set maintenance_work_mem to a higher value to speed up HNSW index building. This ensures the graph fits into memory during index creation.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSET maintenance_work_mem = '8GB';\n```\n\n----------------------------------------\n\nTITLE: Setting Local Probes for Single IVFFlat Query in SQL\nDESCRIPTION: Sets the number of probes for a single IVFFlat query within a transaction using SET LOCAL.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\nSET LOCAL ivfflat.probes = 10;\nSELECT ...\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index with Binary Quantization in SQL\nDESCRIPTION: Creates an HNSW index using binary quantization for efficient indexing of vector data.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_56\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw ((binary_quantize(embedding)::bit(3)) bit_hamming_ops);\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index for Specific Vector Dimensions\nDESCRIPTION: SQL command to create an HNSW index using expression and partial indexing for vectors of specific dimensions in a mixed-dimension table.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_79\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON embeddings USING hnsw ((embedding::vector(3)) vector_l2_ops) WHERE (model_id = 123);\n```\n\n----------------------------------------\n\nTITLE: Averaging Vectors in PostgreSQL\nDESCRIPTION: Calculate the average of all vectors in a table using the AVG aggregate function. This returns a vector with the same dimensions.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(embedding) FROM items;\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes Concurrently in PostgreSQL\nDESCRIPTION: SQL command to create indexes without blocking write operations, which is important for production environments.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_69\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX CONCURRENTLY ...\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index on Subvectors in SQL\nDESCRIPTION: Creates an HNSW index on subvectors using expression indexing for efficient similarity search on partial vectors.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_63\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw ((subvector(embedding, 1, 3)::vector(3)) vector_cosine_ops);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Distance-Filtered Queries with Materialized CTE in SQL\nDESCRIPTION: Shows how to use a materialized CTE to optimize queries that filter by distance, placing the filter outside the CTE.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_47\n\nLANGUAGE: sql\nCODE:\n```\nWITH nearest_results AS MATERIALIZED (\n    SELECT id, embedding <-> '[1,2,3]' AS distance FROM items ORDER BY distance LIMIT 5\n) SELECT * FROM nearest_results WHERE distance < 5 ORDER BY distance;\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbors with Subvectors in SQL\nDESCRIPTION: Demonstrates how to query nearest neighbors using subvectors and cosine distance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_64\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM items ORDER BY subvector(embedding, 1, 3)::vector(3) <=> subvector('[1,2,3,4,5]'::vector, 1, 3) LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Creating Index on Filter Column for Nearest Neighbor Queries in SQL\nDESCRIPTION: Creates an index on a filter column to optimize nearest neighbor queries with WHERE clauses.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items (category_id);\n```\n\n----------------------------------------\n\nTITLE: Creating Partitioned Table for Efficient Filtering in SQL\nDESCRIPTION: Creates a partitioned table to improve performance of filtered nearest neighbor queries with many distinct values.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_44\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE items (embedding vector(3), category_id int) PARTITION BY LIST(category_id);\n```\n\n----------------------------------------\n\nTITLE: Setting Vector Storage to Plain for Better Parallel Scan\nDESCRIPTION: SQL command to set the storage mode of a vector column to PLAIN to avoid TOAST storage and improve parallel scan performance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_88\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE items ALTER COLUMN embedding SET STORAGE PLAIN;\n```\n\n----------------------------------------\n\nTITLE: Setting Number of Probes for IVFFlat Query in SQL\nDESCRIPTION: Sets the number of probes for IVFFlat queries to 10, which affects the trade-off between recall and speed.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nSET ivfflat.probes = 10;\n```\n\n----------------------------------------\n\nTITLE: Creating Multicolumn Index for Filtered Nearest Neighbor Queries in SQL\nDESCRIPTION: Creates a multicolumn index to optimize nearest neighbor queries with multiple filter conditions.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items (location_id, category_id);\n```\n\n----------------------------------------\n\nTITLE: Increasing Parallel Workers for IVFFlat Index Creation in SQL\nDESCRIPTION: Increases the number of parallel maintenance workers to speed up IVFFlat index creation on large tables.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nSET max_parallel_maintenance_workers = 7; -- plus leader\n```\n\n----------------------------------------\n\nTITLE: Enabling Relaxed Order Iterative Scans for IVFFlat in SQL\nDESCRIPTION: Enables iterative index scans with relaxed ordering for IVFFlat to improve recall for filtered queries.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_45\n\nLANGUAGE: sql\nCODE:\n```\nSET ivfflat.iterative_scan = relaxed_order;\n```\n\n----------------------------------------\n\nTITLE: Enabling Iterative Index Scans for HNSW in SQL\nDESCRIPTION: Enables iterative index scans for HNSW with strict ordering to improve recall for filtered queries.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\nSET hnsw.iterative_scan = strict_order;\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Probes for IVFFlat Iterative Scans in SQL\nDESCRIPTION: Sets the maximum number of probes for IVFFlat iterative scans to control performance and recall.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_50\n\nLANGUAGE: sql\nCODE:\n```\nSET ivfflat.max_probes = 100;\n```\n\n----------------------------------------\n\nTITLE: Setting HNSW Search Effort for Filtered Queries in SQL\nDESCRIPTION: Increases the HNSW search effort to improve recall for filtered nearest neighbor queries.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\nSET hnsw.ef_search = 200;\n```\n\n----------------------------------------\n\nTITLE: Checking IVFFlat Indexing Progress in SQL\nDESCRIPTION: Queries the progress of IVFFlat index creation, showing the current phase and percentage completion.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nSELECT phase, round(100.0 * tuples_done / nullif(tuples_total, 0), 1) AS \"%\" FROM pg_stat_progress_create_index;\n```\n\n----------------------------------------\n\nTITLE: Setting HNSW Search Parameter for a Single Query in PostgreSQL\nDESCRIPTION: Set the ef_search parameter for HNSW for a single query using a transaction. This allows optimizing the parameter for specific queries without affecting others.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\nSET LOCAL hnsw.ef_search = 100;\nSELECT ...\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Half-Precision Vector Column in SQL\nDESCRIPTION: Creates a table with a half-precision vector column using the halfvec type for more compact storage.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_51\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE items (id bigserial PRIMARY KEY, embedding halfvec(3));\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Sparse Vector Column in SQL\nDESCRIPTION: Creates a table with a sparse vector column using the sparsevec type for efficient storage of sparse data.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_59\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE items (id bigserial PRIMARY KEY, embedding sparsevec(5));\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index with Half-Precision Vectors in SQL\nDESCRIPTION: Creates an HNSW index using half-precision vectors for more compact indexing.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_52\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw ((embedding::halfvec(3)) halfvec_l2_ops);\n```\n\n----------------------------------------\n\nTITLE: Querying Nearest Neighbors with Half-Precision Vectors in SQL\nDESCRIPTION: Demonstrates how to query nearest neighbors using half-precision vectors.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_53\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM items ORDER BY embedding::halfvec(3) <-> '[1,2,3]' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Binary Vector Column in SQL\nDESCRIPTION: Creates a table with a binary vector column using the bit type for efficient storage of binary data.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_54\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE items (id bigserial PRIMARY KEY, embedding bit(3));\nINSERT INTO items (embedding) VALUES ('000'), ('111');\n```\n\n----------------------------------------\n\nTITLE: Adding Dimension Check Constraint for Vectors\nDESCRIPTION: SQL command to add a check constraint ensuring vector data can be converted to the vector type and has the expected dimensions.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_82\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE items ADD CHECK (vector_dims(embedding::vector) = 3);\n```\n\n----------------------------------------\n\nTITLE: Setting Parallel Workers for Query Optimization\nDESCRIPTION: SQL command to increase the number of parallel workers used for vector queries to improve performance without indexes.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_71\n\nLANGUAGE: sql\nCODE:\n```\nSET max_parallel_workers_per_gather = 4;\n```\n\n----------------------------------------\n\nTITLE: Installing pgvector with Conda\nDESCRIPTION: Command to install pgvector from conda-forge using the conda package manager.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_104\n\nLANGUAGE: sh\nCODE:\n```\nconda install -c conda-forge pgvector\n```\n\n----------------------------------------\n\nTITLE: Creating Partial HNSW Index for Filtered Queries in SQL\nDESCRIPTION: Creates a partial HNSW index for a specific category to optimize filtered nearest neighbor queries.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_43\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw (embedding vector_l2_ops) WHERE (category_id = 123);\n```\n\n----------------------------------------\n\nTITLE: Using Materialized CTE for Strict Ordering with Relaxed Scans in SQL\nDESCRIPTION: Demonstrates how to use a materialized CTE to achieve strict ordering with relaxed iterative scans.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_46\n\nLANGUAGE: sql\nCODE:\n```\nWITH relaxed_results AS MATERIALIZED (\n    SELECT id, embedding <-> '[1,2,3]' AS distance FROM items WHERE category_id = 123 ORDER BY distance LIMIT 5\n) SELECT * FROM relaxed_results ORDER BY distance;\n```\n\n----------------------------------------\n\nTITLE: Re-ranking Binary Quantization Results with Original Vectors in SQL\nDESCRIPTION: Shows how to re-rank binary quantization results using the original vectors for improved recall.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_58\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (\n    SELECT * FROM items ORDER BY binary_quantize(embedding)::bit(3) <~> binary_quantize('[1,-2,3]') LIMIT 20\n) ORDER BY embedding <=> '[1,-2,3]' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Querying with Type Casting for High-Precision Vectors\nDESCRIPTION: SQL query that casts high-precision vectors to the vector type for nearest neighbor search.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_84\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM items ORDER BY embedding::vector(3) <-> '[3,1,2]' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Re-ranking Subvector Results with Full Vectors in SQL\nDESCRIPTION: Shows how to re-rank subvector query results using the full vectors for improved recall.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_65\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (\n    SELECT * FROM items ORDER BY subvector(embedding, 1, 3)::vector(3) <=> subvector('[1,2,3,4,5]'::vector, 1, 3) LIMIT 20\n) ORDER BY embedding <=> '[1,2,3,4,5]' LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Scan Tuples for HNSW Iterative Scans in SQL\nDESCRIPTION: Sets the maximum number of tuples to visit during HNSW iterative scans to control performance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_48\n\nLANGUAGE: sql\nCODE:\n```\nSET hnsw.max_scan_tuples = 20000;\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Multiplier for HNSW Iterative Scans in SQL\nDESCRIPTION: Sets the memory multiplier for HNSW iterative scans to control memory usage relative to work_mem.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_49\n\nLANGUAGE: sql\nCODE:\n```\nSET hnsw.scan_mem_multiplier = 2;\n```\n\n----------------------------------------\n\nTITLE: Optimizing Parallel Scan Settings for Vector Queries\nDESCRIPTION: SQL transaction to modify planner parameters to encourage parallel scan usage for vector queries when necessary.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_87\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\nSET LOCAL min_parallel_table_scan_size = 1;\nSET LOCAL parallel_setup_cost = 1;\nSELECT ...\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Disabling Index Scan for Exact Search Comparison\nDESCRIPTION: SQL transaction to disable index scan temporarily for comparing exact search results with approximate search results to monitor recall.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_77\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\nSET LOCAL enable_indexscan = off; -- use exact search\nSELECT ...\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Querying for Time-Consuming SQL Statements\nDESCRIPTION: SQL query to identify the most time-consuming queries using the pg_stat_statements extension for performance monitoring.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_76\n\nLANGUAGE: sql\nCODE:\n```\nSELECT query, calls, ROUND((total_plan_time + total_exec_time) / calls) AS avg_time_ms,\n    ROUND((total_plan_time + total_exec_time) / 60000) AS total_time_min\n    FROM pg_stat_statements ORDER BY total_plan_time + total_exec_time DESC LIMIT 20;\n```\n\n----------------------------------------\n\nTITLE: Monitoring HNSW Index Creation Progress in PostgreSQL\nDESCRIPTION: Query the pg_stat_progress_create_index table to check the progress of HNSW index creation. This shows the current phase and percentage complete.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSELECT phase, round(100.0 * blocks_done / nullif(blocks_total, 0), 1) AS \"%\" FROM pg_stat_progress_create_index;\n```\n\n----------------------------------------\n\nTITLE: Checking Installed pgvector Version\nDESCRIPTION: SQL query to check the current version of pgvector installed in the database.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_106\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT extversion FROM pg_extension WHERE extname = 'vector';\n```\n\n----------------------------------------\n\nTITLE: Installing pg_stat_statements Extension for Monitoring\nDESCRIPTION: SQL command to create the pg_stat_statements extension, which is useful for monitoring query performance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_75\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION pg_stat_statements;\n```\n\n----------------------------------------\n\nTITLE: Creating Expression Index for High-Precision Vectors\nDESCRIPTION: SQL command to create an expression index for high-precision vectors by converting them to the vector type during indexing.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_83\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON items USING hnsw ((embedding::vector(3)) vector_l2_ops);\n```\n\n----------------------------------------\n\nTITLE: Checking PostgreSQL Parameter Settings\nDESCRIPTION: SQL command to check the current value of a specific PostgreSQL parameter, in this case 'shared_buffers'.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_67\n\nLANGUAGE: sql\nCODE:\n```\nSHOW shared_buffers;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with High-Precision Vector Storage\nDESCRIPTION: SQL commands to create a table using double precision arrays for higher precision vector storage than the native vector type.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_81\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE items (id bigserial PRIMARY KEY, embedding double precision[]);\n\n-- use {} instead of [] for Postgres arrays\nINSERT INTO items (embedding) VALUES ('{1,2,3}'), ('{4,5,6}');\n```\n\n----------------------------------------\n\nTITLE: Dropping PostgreSQL Index\nDESCRIPTION: SQL command to drop an index, which may be necessary if an IVFFlat index was created with too little data for the number of lists.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_89\n\nLANGUAGE: sql\nCODE:\n```\nDROP INDEX index_name;\n```\n\n----------------------------------------\n\nTITLE: Finding PostgreSQL Config File Location\nDESCRIPTION: SQL command to show the location of the PostgreSQL configuration file, which is useful for modifying server parameters.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_66\n\nLANGUAGE: sql\nCODE:\n```\nSHOW config_file;\n```\n\n----------------------------------------\n\nTITLE: Setting up pgvector development environment\nDESCRIPTION: Commands to clone the pgvector repository, build the project, and install it. This is the first step for contributors to start working on the project.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_107\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/pgvector/pgvector.git\ncd pgvector\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Checking PostgreSQL Index Size\nDESCRIPTION: SQL query to check the size of an index, which is useful for determining if the index can fit in memory for optimal performance.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_85\n\nLANGUAGE: sql\nCODE:\n```\nSELECT pg_size_pretty(pg_relation_size('index_name'));\n```\n\n----------------------------------------\n\nTITLE: Pulling pgvector Docker Image\nDESCRIPTION: Docker command to pull the official pgvector Docker image for Postgres 17.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_95\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull pgvector/pgvector:pg17\n```\n\n----------------------------------------\n\nTITLE: Optimizing Vacuum Process for HNSW Indexes\nDESCRIPTION: SQL commands to speed up vacuuming for HNSW indexes by reindexing concurrently before vacuuming.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_74\n\nLANGUAGE: sql\nCODE:\n```\nREINDEX INDEX CONCURRENTLY index_name;\nVACUUM table_name;\n```\n\n----------------------------------------\n\nTITLE: Installing pgvector on Windows using Visual Studio and nmake\nDESCRIPTION: Build and install pgvector on Windows by setting up the Visual Studio environment and using nmake. This requires having C++ support in Visual Studio installed.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ncall \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n```\n\nLANGUAGE: cmd\nCODE:\n```\nset \"PGROOT=C:\\Program Files\\PostgreSQL\\16\"\ncd %TEMP%\ngit clone --branch v0.8.0 https://github.com/pgvector/pgvector.git\ncd pgvector\nnmake /F Makefile.win\nnmake /F Makefile.win install\n```\n\n----------------------------------------\n\nTITLE: Installing pgvector with Homebrew\nDESCRIPTION: Command to install pgvector using the Homebrew package manager on macOS.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_98\n\nLANGUAGE: sh\nCODE:\n```\nbrew install pgvector\n```\n\n----------------------------------------\n\nTITLE: Installing pgvector via APT on Debian/Ubuntu\nDESCRIPTION: Command to install pgvector package from the PostgreSQL APT repository on Debian or Ubuntu.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_100\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install postgresql-17-pgvector\n```\n\n----------------------------------------\n\nTITLE: Installing pgvector from PGXN\nDESCRIPTION: Command to install pgvector from the PostgreSQL Extension Network (PGXN).\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_99\n\nLANGUAGE: sh\nCODE:\n```\npgxn install vector\n```\n\n----------------------------------------\n\nTITLE: Installing pgvector via Yum/DNF on RHEL-based Systems\nDESCRIPTION: Commands to install pgvector package from the PostgreSQL Yum repository on RHEL, CentOS, or Fedora.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_101\n\nLANGUAGE: sh\nCODE:\n```\nsudo yum install pgvector_17\n# or\nsudo dnf install pgvector_17\n```\n\n----------------------------------------\n\nTITLE: Running Docker with Increased Shared Memory for HNSW Index\nDESCRIPTION: Docker run command with increased shared memory allocation needed for parallel HNSW index builds.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_97\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --shm-size=1g ...\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres Development Files on Ubuntu/Debian\nDESCRIPTION: Command to install PostgreSQL server development files needed for compiling pgvector on Ubuntu and Debian systems.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_92\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install postgresql-server-dev-17\n```\n\n----------------------------------------\n\nTITLE: Setting Postgres Configuration Path for Installation on Mac/Linux\nDESCRIPTION: Sets the PG_CONFIG environment variable to specify the path to pg_config for installations with multiple Postgres versions.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_90\n\nLANGUAGE: sh\nCODE:\n```\nexport PG_CONFIG=/Library/PostgreSQL/17/bin/pg_config\n```\n\n----------------------------------------\n\nTITLE: Building Custom pgvector Docker Image\nDESCRIPTION: Commands to clone the pgvector repository and build a custom Docker image for Postgres 17.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_96\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --branch v0.8.0 https://github.com/pgvector/pgvector.git\ncd pgvector\ndocker build --pull --build-arg PG_MAJOR=17 -t myuser/pgvector .\n```\n\n----------------------------------------\n\nTITLE: Running pgvector tests\nDESCRIPTION: Commands to run regression tests and TAP tests for pgvector. These tests help ensure the functionality of the extension is working as expected.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_108\n\nLANGUAGE: sh\nCODE:\n```\nmake installcheck        # regression tests\nmake prove_installcheck  # TAP tests\n```\n\n----------------------------------------\n\nTITLE: Compiling pgvector for Portability Across Systems\nDESCRIPTION: Builds pgvector without architecture-specific optimizations for improved portability between different machines.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_94\n\nLANGUAGE: sh\nCODE:\n```\nmake OPTFLAGS=\"\"\n```\n\n----------------------------------------\n\nTITLE: Running specific pgvector tests\nDESCRIPTION: Commands to run individual regression tests or TAP tests. This is useful for focusing on specific functionalities during development or debugging.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_109\n\nLANGUAGE: sh\nCODE:\n```\nmake installcheck REGRESS=functions                            # regression test\nmake prove_installcheck PROVE_TESTS=test/t/001_ivfflat_wal.pl  # TAP test\n```\n\n----------------------------------------\n\nTITLE: Running pgvector Installation with Preserved Environment Variables\nDESCRIPTION: Uses sudo with preserved environment variables to install pgvector when elevated privileges are required.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_91\n\nLANGUAGE: sh\nCODE:\n```\nsudo --preserve-env=PG_CONFIG make install\n```\n\n----------------------------------------\n\nTITLE: Enabling assertions in pgvector\nDESCRIPTION: Command to rebuild pgvector with assertions enabled. This is useful for catching potential bugs during development.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_110\n\nLANGUAGE: sh\nCODE:\n```\nmake clean && PG_CFLAGS=\"-DUSE_ASSERT_CHECKING\" make && make install\n```\n\n----------------------------------------\n\nTITLE: Checking Postgres C Compiler Flags\nDESCRIPTION: Command to display C preprocessor flags for Postgres which is useful for troubleshooting compilation issues.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_93\n\nLANGUAGE: sh\nCODE:\n```\npg_config --cppflags\n```\n\n----------------------------------------\n\nTITLE: Enabling benchmarking in pgvector\nDESCRIPTION: Command to rebuild pgvector with benchmarking enabled. This allows developers to measure performance metrics of the extension.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_111\n\nLANGUAGE: sh\nCODE:\n```\nmake clean && PG_CFLAGS=\"-DIVFFLAT_BENCH\" make && make install\n```\n\n----------------------------------------\n\nTITLE: Installing pgvector Package on FreeBSD\nDESCRIPTION: Command to install the pgvector package on FreeBSD using the pkg package manager.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_102\n\nLANGUAGE: sh\nCODE:\n```\npkg install postgresql16-pgvector\n```\n\n----------------------------------------\n\nTITLE: Showing memory usage in pgvector\nDESCRIPTION: Command to rebuild pgvector with memory usage tracking enabled for HNSW and IVFFlat algorithms. This helps in analyzing the memory footprint of the extension.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_112\n\nLANGUAGE: sh\nCODE:\n```\nmake clean && PG_CFLAGS=\"-DHNSW_MEMORY -DIVFFLAT_MEMORY\" make && make install\n```\n\n----------------------------------------\n\nTITLE: Installing pgvector Port on FreeBSD\nDESCRIPTION: Commands to install pgvector from ports collection on FreeBSD.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_103\n\nLANGUAGE: sh\nCODE:\n```\ncd /usr/ports/databases/pgvector\nmake install\n```\n\n----------------------------------------\n\nTITLE: Enabling k-means metrics in pgvector\nDESCRIPTION: Command to rebuild pgvector with k-means debugging metrics enabled. This provides additional insights into the k-means clustering algorithm used in the extension.\nSOURCE: https://github.com/pgvector/pgvector/blob/master/README.md#2025-04-21_snippet_113\n\nLANGUAGE: sh\nCODE:\n```\nmake clean && PG_CFLAGS=\"-DIVFFLAT_KMEANS_DEBUG\" make && make install\n```"
  }
]