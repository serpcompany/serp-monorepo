[
  {
    "owner": "thirdweb-dev",
    "repo": "js",
    "content": "TITLE: Complete ERC721ClaimPhases Contract Implementation\nDESCRIPTION: Full implementation example of an ERC721ClaimPhases contract including constructor, claim lifecycle hooks, price collection, token transfer, and administrative functions. Demonstrates integration of ERC721A, LazyMint, and Drop extensions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721ClaimPhases/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\nimport \"@thirdweb-dev/contracts/extension/LazyMint.sol\";\nimport \"@thirdweb-dev/contracts/extension/Drop.sol\";\n\ncontract Contract is ERC721A, LazyMint, Drop {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC721A(\n            _name,\n            _symbol\n        )\n    {}\n\n    function _canLazyMint() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    /// @dev Runs before every `claim` function call.\n    function _beforeClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual override {\n      // Your custom implementation logic here\n    }\n\n    /// @dev Runs after every `claim` function call.\n    function _afterClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual override {\n      // Your custom implementation logic here\n    }\n\n    /// @dev Collects and distributes the primary sale value of tokens being claimed.\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual override {\n        if (_pricePerToken == 0) {\n            return;\n        }\n\n        uint256 totalPrice = (_quantityToClaim * _pricePerToken) / 1 ether;\n        require(totalPrice > 0, \"quantity too low\");\n\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n            require(msg.value == totalPrice, \"Must send total price.\");\n        }\n\n        address saleRecipient = _primarySaleRecipient;\n        CurrencyTransferLib.transferCurrency(\n            _currency,\n            msg.sender,\n            saleRecipient,\n            totalPrice\n        );\n    }\n\n    /// @dev Transfers the tokens being claimed.\n    function _transferTokensOnClaim(address _to, uint256 _quantityBeingClaimed)\n        internal\n        virtual\n        override\n        returns (uint256)\n    {\n        _mint(_to, _quantityBeingClaimed);\n        return 0;\n    }\n\n    /// @dev Checks whether platform fee info can be set in the given execution context.\n    function _canSetClaimConditions()\n        internal\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return msg.sender == owner();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating thirdweb client\nDESCRIPTION: Creating a thirdweb client instance using the secret key for server-side operations.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/getting-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\"\n\nconst client = createThirdwebClient({\n\t// use `secretKey` for server side or script usage\n\tsecretKey: process.env.THIRDWEB_SECRET_KEY\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing IModularCore Interface in Solidity\nDESCRIPTION: Defines the core interface for modular contract architecture including extension management, callback handling, and ERC-165 support. Contains structs for callback functions, extension configurations, and methods for installing/uninstalling extensions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/modular-contracts/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.23;\n\nimport {IExtensionConfig} from \"./IExtensionConfig.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\ninterface IModularCore is IExtensionConfig, IERC165 {\n    enum CallbackMode {\n        OPTIONAL,\n        REQUIRED\n    }\n\n    struct SupportedCallbackFunction {\n        bytes4 selector;\n        CallbackMode mode;\n    }\n\n    struct InstalledExtension {\n        address implementation;\n        ExtensionConfig config;\n    }\n\n    function getSupportedCallbackFunctions() external pure returns (SupportedCallbackFunction[] memory);\n\n    function getInstalledExtensions() external view returns (InstalledExtension[] memory);\n\n    function installExtension(address extensionContract, bytes calldata data) external payable;\n\n    function uninstallExtension(address extensionContract, bytes calldata data) external payable;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Contract State with useReadContract Hook in React\nDESCRIPTION: Demonstrates how to use the useReadContract hook to read data from a smart contract. The example shows setting up a contract instance and then using the hook to call a specific method with parameters, returning data and loading state.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/reading-state/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { useReadContract } from \"thirdweb/react\";\n\nconst contract = getContract({\n\tclient,\n\tchain,\n\taddress: \"0x...\",\n});\n\nconst MyComponent = () => {\n\tconst { data, isLoading } = useReadContract({\n\t\tcontract,\n\t\tmethod: \"function tokenURI(uint256 tokenId) returns (string)\",\n\t\tparams: [1n],\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectButton with Account Abstraction in React\nDESCRIPTION: This snippet demonstrates how to use the Connect Button component to enable smart account connections in a React application. It configures account abstraction with gas sponsoring on the Sepolia network.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/guides/react/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\nimport { sepolia } from \"thirdweb/chains\";\n\nconst client = createThirdwebClient({ clientId: \"your-client-id\" });\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ConnectButton\n\t\t\t\tclient={client}\n\t\t\t\taccountAbstraction={{\n\t\t\t\t\tchain: sepolia,\n\t\t\t\t\tsponsorGas: true,\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Authentication with thirdweb\nDESCRIPTION: This code snippet demonstrates how to implement client-side authentication using thirdweb's Auth system. It shows the process of fetching a login payload from a server, signing it with the user's wallet, and verifying the signature by sending it back to the server.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/auth/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signLoginPayload } from 'thirdweb/auth';\n\n// 1. fetch a login payload from your server\nconst result = await fetch(...);\nconst loginPayload = await result.json();\n\n// 2. sign the login payload with the user's account\nconst signature = await signLoginPayload({ payload: loginPayload, account });\n\n// 3. send the login payload and signature to your server\nconst result = await fetch(...);\nconst verifiedPayload = await result.json();\n```\n\n----------------------------------------\n\nTITLE: Contract Call with Explicit ABI in TypeScript\nDESCRIPTION: Demonstrates preparing a contract call using full contract ABI for complete type safety and autocompletion.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/prepare/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract, prepareContractCall, toWei } from \"thirdweb\";\n\nconst contract = getContract({\n  client,\n\tchainId,\n  // The ABI for the contract is defined here\n  abi: [\n    ...\n    {\n      name: \"mintTo\",\n      inputs: [\n        {\n          type: \"address\",\n          name: \"to\",\n        },\n        {\n          type: \"uint256\",\n          name: \"amount\",\n        },\n      ],\n      type: \"function\",\n    }\n    ...\n  ],\n});\n\nconst tx = prepareContractCall({\n  contract,\n  // We get auto-completion for all the available functions on the contract ABI\n  method: \"mintTo\",\n  // including full type-safety for the params\n  params: [\"0x123...\", toWei(\"100\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20BatchMintable Contract in Solidity\nDESCRIPTION: This example demonstrates how to create a smart contract that implements ERC20BatchMintable functionality. It inherits from ERC20, IMintableERC20, and Multicall, and includes a constructor and a customizable mintTo function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20BatchMintable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/openzeppelin-presets/token/ERC20/ERC20.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC20.sol\";\nimport \"@thirdweb-dev/contracts/extension/Multicall.sol\";\n\ncontract Contract is ERC20, IMintableERC20, Multicall {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC20(\n            _name,\n            _symbol\n        )\n    {}\n\n    function mintTo(address to, uint256 amount) external override returns (uint256) {\n        // Your custom implementation here\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RoyaltyERC721 Module in a Modular Contract with TypeScript\nDESCRIPTION: This code demonstrates how to install a RoyaltyERC721 module into an existing modular contract. The install function requires the contract reference, account, and configuration parameters including royalty recipient address, royalty basis points, and transfer validator address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/modular/upgrade/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RoyaltyERC721,\n} from \"thirdweb/modules\";\n\nconst transaction = RoyaltyERC721.install({\n  contract: coreContract,\n  account,\n  params: {\n     royaltyRecipient: account.address,\n     royaltyBps: 100n,\n     transferValidator: ZERO_ADDRESS,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Batching Transactions with Smart Accounts in TypeScript\nDESCRIPTION: This snippet shows how to batch an approval and a transfer transaction using TypeScript with thirdweb. It demonstrates creating a smart wallet, connecting it to a personal account, and sending a batch transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/batching-transactions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { smartWallet } from \"thirdweb/wallets\";\nimport { sendBatchTransaction } from \"thirdweb\";\nimport { approve, transferFrom } from \"thirdweb/extensions/erc20\";\n\nconst smartWallet = new smartWallet(config);\nconst smartAccount = await smartWallet.connect({\n\tclient,\n\tpersonalAccount,\n});\n\nconst transactions = [\n\tapprove({\n\t\tcontract,\n\t\tspender: \"0x...\",\n\t\tvalue: 100,\n\t}),\n\ttransferFrom({\n\t\tcontract,\n\t\tfrom: \"0x...\",\n\t\tto: \"0x...\",\n\t\tamount: 100,\n\t}),\n];\n\nawait sendBatchTransaction({\n\ttransactions,\n\taccount: smartAccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Reading NFT contract state with ERC1155 extension\nDESCRIPTION: Retrieving owned NFTs from an ERC1155 contract by importing the extension, getting the contract, and calling the extension function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/getting-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { sepolia } from \"thirdweb/chains\";\n// 1. import the extension you want to use\nimport { getOwnedNFTs } from \"thirdweb/extensions/erc1155\";\n\n// 2. get the contract\nconst contract = getContract({\n    client,\n    address: \"0x1234...\",\n    chain: sepolia,\n});\n\n// 3. call the extension function\nconst ownedNFTs = await getOwnedNFTs({\n\tcontract,\n\taddress: \"0x1234...\",\n});\n\nconsole.log(ownedNFTs);\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions with Smart Accounts using React Hooks\nDESCRIPTION: This React code snippet shows how to execute read and write operations using smart accounts. It demonstrates reading the balance of an NFT and minting a new NFT using the useReadContract and useSendTransaction hooks.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/get-started/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { useActiveAccount, useSendTransaction } from \"thirdweb/react\";\nimport { mintTo, balanceOf } from \"thirdweb/extensions/erc721\";\n\nconst contract = getContract({ client, chain, address: \"0x...\" });\n\n// The ThirdwebProvider setup above already handles the connection to the smart account\n// Within the provider, you can use the SDK normally to interact with the blockchain\nexport default function MyComponent() {\n\t// Get the connected smart account\n\tconst smartAccount = useActiveAccount();\n\t// Example read\n\tconst { data, isLoading } = useReadContract(\n\t\tbalanceOf,\n\t\t{\n\t\t\tcontract,\n\t\t\towner: smartAccount.address!,\n\t\t},\n\t\t{\n\t\t\tenabled: !!smartAccount,\n\t\t},\n\t);\n\t// Example write\n\tconst { mutate: sendTransaction, isPending } = useSendTransaction();\n\tconst mint = () => {\n\t\tsendTransaction({\n\t\t\ttransaction: mintTo({\n\t\t\t\tcontract,\n\t\t\t\tto: smartAccount.address,\n\t\t\t\tnft: {\n\t\t\t\t\tname: \"My NFT\",\n\t\t\t\t\tdescription: \"My NFT description\",\n\t\t\t\t\timage: \"https://example.com/image.png\",\n\t\t\t\t},\n\t\t\t}),\n\t\t});\n\t};\n\t// Mint a new NFT\n\treturn <button onClick={mint}>Mint NFT</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions with Smart Accounts using TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to execute a transaction (minting an NFT) using a smart account. It shows how to prepare and send a transaction using the thirdweb SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/get-started/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { getContract, prepareContractCall } from \"thirdweb\";\nimport { mintTo } from \"thirdweb/extensions/erc721\";\n\n// Once you have a smartAccount connected, you can interact with the blockchain as you would with a regular EOA\nconst smartWalletAddress = smartAccount.address;\n// gas-free wallet actions\nconst transaction = await mintTo({\n\tcontract,\n\tto: smartWalletAddress,\n\tnft: {\n\t\tname: \"My NFT\",\n\t\tdescription: \"My NFT description\",\n\t\timage: \"https://example.com/image.png\",\n\t},\n});\nconst { transactionHash } = await sendTransaction({\n\ttransaction,\n\tsmartAccount,\n});\nconsole.log(`Minted NFT with transaction hash: ${transactionHash}`);\n```\n\n----------------------------------------\n\nTITLE: Connecting Smart Accounts with UI Component in React\nDESCRIPTION: This snippet demonstrates how to set up a ThirdwebProvider and ConnectButton to enable account abstraction in a React application. It includes configuration for the client, chain, and sponsored transactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\n\nconst client = createThirdwebClient({\nclientId: \"YOUR_CLIENT_ID\",\n});\n\nexport default function App() {\nreturn (\n    <ThirdwebProvider>\n      <ConnectButton\n\t    client={client}\n\t    accountAbstraction={{\n\t\t\tchain: sepolia, // the chain where your smart accounts will be or is deployed\n            sponsorGas: true // enable or disable sponsored transactions\n        }}\n\t  />\n    </ThirdwebProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Connecting a Smart Wallet\nDESCRIPTION: Code to create a smart wallet instance and connect it with the personal wallet. It configures the smart wallet with options like chain and gas sponsorship.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/account-abstraction/get-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { smartWallet } from \"thirdweb/wallets\";\n\n// Configure the smart wallet\nconst wallet = smartWallet({\n\tchain: sepolia,\n\tsponsorGas: true,\n});\n\n// Connect the smart wallet\nconst smartAccount = await wallet.connect({\n\tclient,\n\tpersonalAccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens with Signature Authorization\nDESCRIPTION: Executes token minting based on a validated signature request. Processes payment and mints tokens according to the specified parameters in the MintRequest struct.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721SignatureMint/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstruct MintRequest {\n    address to;\n    address royaltyRecipient;\n    uint256 royaltyBps;\n    address primarySaleRecipient;\n    string uri;\n    uint256 quantity;\n    uint256 pricePerToken;\n    address currency;\n    uint128 validityStartTimestamp;\n    uint128 validityEndTimestamp;\n    bytes32 uid;\n}\n\nfunction mintWithSignature(MintRequest calldata req, bytes calldata signature)\n    external\n    payable\n    returns (address signer)\n```\n\n----------------------------------------\n\nTITLE: Buying from NFT Listing\nDESCRIPTION: Function to purchase NFTs from an active listing, including validation of payment and quantity.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction buyFromListing(\n    uint256 listingId,\n    address buyFor,\n    uint256 quantity,\n    address currency,\n    uint256 expectedTotalPrice\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Data\nDESCRIPTION: Examples of reading contract data using useReadContract hook and Extensions\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/getting-started/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { client }  from \"./client\";\nimport { getContract } from \"thirdweb\";\nimport { sepolia } from \"thirdweb/chains\";\nimport { useReadContract } from \"thirdweb/react\";\n\nconst contract = getContract({ client, address: \"0x...\", chain: sepolia });\n\nexport default function App() {\n\tconst { data, isLoading } = useReadContract({\n    \tcontract,\n   \t\tmethod: \"function tokenURI(uint256 tokenId) returns (string)\",\n    \tparams: [1n],  // type safe params\n  \t});\n\n\treturn <div>\n        <p>Token URI: {data}</p>\n    </div>;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { client }  from \"./client\";\nimport { getContract } from \"thirdweb\";\nimport { sepolia } from \"thirdweb/chains\";\nimport { useReadContract } from \"thirdweb/react\";\nimport { getOwnedNFTs } from \"thirdweb/extensions/erc721\";\n\nconst contract = getContract({ client, address: \"0x...\", chain: sepolia });\n\nexport default function App() {\n\tconst { data: ownedNFTs } = useReadContract(getOwnedNFTs, {\n    contract,\n    address: \"0x...\",\n  });\n\n\treturn <div>\n        <p>Owned NFTs: {ownedNFTs}</p>\n    </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UI for Smart Account Connection in React\nDESCRIPTION: This snippet demonstrates how to use connection hooks and functions to connect to smart accounts with a custom UI. It includes setting up account abstraction configuration and connecting with an in-app wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/account-abstraction/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnect } from \"thirdweb/react\";\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { sepolia } from \"thirdweb/chains\";\n\nfunction App() {\n\t// 1. set the `accountAbstraction` configuration to convert wallets to smart accounts\n\tconst { connect } = useConnect({\n\t\tclient,\n\t\taccountAbstraction: {\n\t\t\tchain: sepolia, // the chain where your smart accounts will be or is deployed\n\t\t\tsponsorGas: true, // enable or disable sponsored transactions\n\t\t},\n\t});\n\n\tconst connectToSmartAccount = async () => {\n\t\t// 2. connect with the admin wallet of the smart account\n\t\tconnect(async () => {\n\t\t\tconst wallet = inAppWallet(); // or any other wallet\n\t\t\tawait wallet.connect({\n\t\t\t\tclient,\n\t\t\t\tchain: sepolia,\n\t\t\t\tstrategy: \"google\",\n\t\t\t});\n\t\t\treturn wallet;\n\t\t});\n\t};\n\n\treturn <button onClick={() => connectToSmartAccount()}>Connect</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Verification and JWT Generation Route\nDESCRIPTION: Creates a POST route at '/login' to verify the signed payload and generate a JWT token. It uses thirdweb Auth to verify the payload and generate the JWT, which is then set as a cookie.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/login\", async (req, res) => {\n\tconst payload: VerifyLoginPayloadParams = req.body;\n\n\tconst verifiedPayload = await thirdwebAuth.verifyPayload(payload);\n\n\tif (verifiedPayload.valid) {\n\t\tconst jwt = await thirdwebAuth.generateJWT({\n\t\t\tpayload: verifiedPayload.payload,\n\t\t});\n\t\tres.cookie(\"jwt\", jwt);\n\t\treturn res.status(200).send({ token: jwt });\n\t}\n\n\tres.status(400).send(\"Failed to login\");\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning Session Key Permissions in TypeScript\nDESCRIPTION: This code snippet shows how to add a new session key to a smart account with specific permissions using the thirdweb SDK. It includes setting up a smart wallet, connecting it, and sending a transaction to add a session key with custom permissions such as approved targets, native token limit, and time-based restrictions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/account-abstraction/permissions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addAdmin } from \"thirdweb/extensions/erc4337\";\nimport { smartWallet } from \"thirdweb/wallets\";\nimport { sendTransaction, getContract } from \"thirdweb\";\n\nconst smartWallet = new smartWallet(config);\nconst smartAccount = await smartWallet.connect({\n\tclient,\n\tpersonalAccount,\n});\n\nconst transaction = addSessionKey({\n\tcontract: getContract({\n\t\taddress: smartAccount.address,\n\t\tchain,\n\t\tclient,\n\t}),\n\taccount: smartAccount,\n\tsessionKeyAddress: \"0x...\", // the address of the new session key\n\tpermissions: {\n\t\tapprovedTargets: \"*\", // the addresses of allowed contracts, or '*' for any contract\n\t\tnativeTokenLimitPerTransaction: 0.1, // the maximum amount of native token (in ETH) that the session key can spend per transaction\n\t\tpermissionStartTimestamp: new Date(), // the date when the session key becomes active\n\t\tpermissionEndTimestamp: new Date(Date.now() + 24 * 60 * 60 * 1000), // the date when the session key expires\n\t},\n});\nawait sendTransaction({\n\ttransaction,\n\taccount: smartAccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Drop1155 Implementation Example\nDESCRIPTION: Full example of a smart contract implementing the Drop1155 extension with ERC1155Base, including constructor, price collection, token transfer, and claim condition settings. Demonstrates all required function overrides and their implementations.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/Drop1155.sol\";\nimport \"@thirdweb-dev/contracts/base/ERC1155Base.sol\";\nimport \"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\";\n\n/// This is an EXAMPLE of usage of `Drop1155` for distributing ERC1155 tokens.\n\ncontract MyContract is ERC1155Base, Drop1155 {\n    /*//////////////////////////////////////////////////////////////\n                            Constructor\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC1155Base(_name, _symbol, _royaltyRecipient, _royaltyBps) {}\n\n    /*//////////////////////////////////////////////////////////////\n                        Internal (overrideable) functions\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Collects and distributes the primary sale value of NFTs being claimed.\n    function _collectPriceOnClaim(\n        uint256 _tokenId,\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual override {\n        if (_pricePerToken == 0) {\n            return;\n        }\n\n        uint256 totalPrice = _quantityToClaim * _pricePerToken;\n\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n            if (msg.value != totalPrice) {\n                revert(\"Must send total price.\");\n            }\n        }\n\n        address saleRecipient = _primarySaleRecipient;\n        CurrencyTransferLib.transferCurrency(_currency, msg.sender, saleRecipient, totalPrice);\n    }\n\n    /// @dev Transfers the tokens being claimed.\n    function _transferTokensOnClaim(address _to, uint256 _tokenId, uint256 _quantityBeingClaimed)\n        internal\n        virtual\n        override\n    {\n        _mint(_to, _tokenId, _quantityBeingClaimed, \"\");\n    }\n\n    /// @dev Checks whether platform fee info can be set in the given execution context.\n    function _canSetClaimConditions()\n        internal\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return msg.sender == owner();\n    }\n\n    /// @dev Runs before every `claim` function call.\n    function _beforeClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual {}\n\n    /// @dev Runs after every `claim` function call.\n    function _afterClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual {}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet and Smart Contract Context in C#\nDESCRIPTION: Sets up the initial context for the Nebula AI, including generating a PrivateKeyWallet, upgrading it to a SmartWallet, and defining contract addresses on the Sepolia network.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/nebula/quickstart/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Prepare some context\nvar myChain = 11155111; // Sepolia\nvar mySigner = await PrivateKeyWallet.Generate(client);\nvar myWallet = await SmartWallet.Create(mySigner, myChain);\nvar myContractAddress = \"0xe2cb0eb5147b42095c2FfA6F7ec953bb0bE347D8\"; // DropERC1155\nvar usdcAddress = \"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\"; // Sepolia USDC\n```\n\n----------------------------------------\n\nTITLE: Executing Contract Transactions\nDESCRIPTION: Examples of executing contract transactions using useSendTransaction hook and Extensions\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/getting-started/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { client }  from \"./client\";\nimport { getContract } from \"thirdweb\";\nimport { sepolia } from \"thirdweb/chains\";\nimport { useSendTransaction } from \"thirdweb/react\";\n\nconst contract = getContract({ client, address: \"0x...\", chain: sepolia });\n\nexport default function App() {\n\tconst { mutate: sendTransaction } = useSendTransaction();\n\n\tconst onClick = async () => {\n\t\tconst transaction = prepareContractCall({\n\t\t\tcontract,\n\t\t\tmethod: \"function mint(address to)\",\n\t\t\tparams: [\"0x...\"], // type safe params\n\t\t});\n\t\tsendTransaction(transaction);\n  \t};\n\n\treturn <div>\n        <button onClick={onClick}>Mint</button>\n    </div>;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { client }  from \"./client\";\nimport { getContract } from \"thirdweb\";\nimport { sepolia } from \"thirdweb/chains\";\nimport { useSendTransaction } from \"thirdweb/react\";\nimport { mintTo } from \"thirdweb/extensions/erc721\";\n\nconst contract = getContract({ client, address: \"0x...\", chain: sepolia });\n\nexport default function App() {\n\tconst { mutate: sendTransaction } = useSendTransaction();\n\n\tconst onClick = async () => {\n\t\t// this mint extension handles uploading metadata to IPFS and pining it\n\t\tconst transaction = mintTo({\n\t\t\tcontract,\n\t\t\tto: \"0x...\",\n\t\t\tnft: {\n\t\t\t\tname: \"NFT Name\",\n\t\t\t\tdescription: \"NFT Description\",\n\t\t\t\timage: \"https://example.com/image.png\",\n\t\t\t},\n    \t});\n\t\tsendTransaction(transaction);\n  \t};\n\n\treturn <div>\n        <button onClick={onClick}>Mint</button>\n    </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions with Smart Accounts in React\nDESCRIPTION: This snippet shows how to execute transactions using a connected smart account in a React component. It demonstrates reading contract data with useReadContract and writing to a contract with useSendTransaction to mint an NFT.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/account-abstraction/build-your-own-ui/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { useActiveAccount, useSendTransaction } from \"thirdweb/react\";\nimport { claimTo, balanceOf } from \"thirdweb/extensions/erc721\";\n\nconst contract = getContract({ client, chain, address: \"0x...\" });\n\n// The ThirdwebProvider setup above already handles the connection to the smart account\n// Within the provider, you can use the SDK normally to interact with the blockchain\nexport default function MyComponent() {\n\t// Get the connected smart account\n\tconst smartAccount = useActiveAccount();\n\t// Example read\n\tconst { data, isLoading } = useReadContract(\n\t\tbalanceOf,\n\t\t{\n\t\t\tcontract,\n\t\t\towner: smartAccount.address,\n\t\t},\n\t\t{\n\t\t\tenabled: !!smartAccount,\n\t\t},\n\t);\n\t// Example write\n\tconst { mutate: sendTransaction, isPending } = useSendTransaction();\n\tconst mint = () => {\n\t\tsendTransaction({\n\t\t\ttransaction: claimTo({\n\t\t\t\tcontract,\n\t\t\t\tto: smartAccount.address,\n\t\t\t\tquantity: 1n,\n\t\t\t}),\n\t\t});\n\t};\n\t// Mint a new NFT\n\treturn <button onClick={mint}>Mint NFT</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Events with useContractEvents Hook\nDESCRIPTION: Demonstrates how to query and listen to contract events using the useContractEvents hook. This example shows setting up an event signature with prepareEvent and retrieving matching events.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/reading-state/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContractEvents } from \"thirdweb/react\";\nimport { prepareEvent } from \"thirdweb\";\n\nconst myEvent = prepareEvent({\n  signature: \"event MyEvent(uint256 myArg)\",\n});\n\nconst { data: events } = useContractEvents({\n    contract,\n    eventName: [myEvent],\n});\n```\n\n----------------------------------------\n\nTITLE: Batching ERC20 Approve and Transfer Transactions with thirdweb React Hooks\nDESCRIPTION: This code demonstrates how to batch an ERC20 approval and transfer into a single user operation using thirdweb's React hooks. It imports the necessary hooks and functions, defines a smart account reference, and creates a function that builds a transaction batch containing both approval and transfer operations before executing them together.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/account-abstraction/batching-transactions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useActiveAccount, useSendBatchTransaction } from \"thirdweb/react\";\nimport { approve, transferFrom } from \"thirdweb/extensions/erc20\";\n\nconst smartAccount = useActiveAccount();\nconst { mutate: sendBatchTransaction } = useSendBatchTransaction();\n\nconst approveAndTransfer = async () => {\n\tconst transactions = [\n\t\tapprove({\n\t\t\tcontract,\n\t\t\tspender: \"0x...\",\n\t\t\tvalue: 100,\n\t\t}),\n\t\ttransferFrom({\n\t\t\tcontract,\n\t\t\tfrom: \"0x...\",\n\t\t\tto: \"0x...\",\n\t\t\tamount: 100,\n\t\t}),\n\t];\n\tawait sendBatchTransaction(transactions);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing getBalance Extension for ERC20 Tokens in Thirdweb SDK\nDESCRIPTION: This extension fetches and formats ERC20 token balance information. It retrieves the balance, decimals, symbol, and name from the contract, then returns a structured object with human-readable balance information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/create/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getBalance(\n\toptions: BaseTransactionOptions<{ address: string }>,\n) {\n\tconst [balanceWei, decimals_, symbol_, name_] = await Promise.all([\n\t\tbalanceOf(options),\n\t\tdecimals(options),\n\t\tsymbol(options),\n\t\tname(options),\n\t]);\n\treturn {\n\t\tvalue: balanceWei,\n\t\tdecimals: decimals_,\n\t\tdisplayValue: toTokens(balanceWei, decimals_),\n\t\tsymbol: symbol_,\n\t\tname: name_,\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Creating thirdweb Client in React Native\nDESCRIPTION: Sets up a reusable thirdweb client instance for use in a React Native application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// thirdwebClient.ts\nimport { createThirdwebClient } from \"thirdweb\";\n\nexport const client = createThirdwebClient({\n  clientId: \"YOUR_CLIENT_ID\", // Configure in your app's env or constants\n});\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb SDK with npm\nDESCRIPTION: Command to install the thirdweb SDK package using npm. This is the primary installation method for integrating the SDK into your JavaScript or TypeScript projects.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/thirdweb/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install thirdweb\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectButton with ThirdwebProvider in React\nDESCRIPTION: Example showing how to set up the ThirdwebProvider and ConnectButton components for wallet connection functionality. The code demonstrates basic integration with support for 500+ wallets including in-app wallets and account abstraction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/connecting-wallets/ui-components/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\n\nconst client = createThirdwebClient({ clientId });\n \nexport default function App() {\n  return (\n    <ThirdwebProvider>\n      <ConnectButton client={client} />\n    </ThirdwebProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting MetaMask Wallet using Connect SDK\nDESCRIPTION: Example showing how to create a thirdweb client, initialize MetaMask wallet connection, and handle both extension-based and QR code-based wallet connections. Demonstrates fallback to WalletConnect QR modal when extension is not present.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/connecting-wallets/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { createWallet, injectedProvider } from \"thirdweb/wallets\";\n\nconst client = createThirdwebClient({ clientId });\n\nconst metamask = createWallet(\"io.metamask\"); // pass the wallet id\n\n// if user has metamask installed, connect to it\nif (injectedProvider(\"io.metamask\")) {\n\tawait metamask.connect({ client });\n}\n\n// open wallet connect modal so user can scan the QR code and connect\nelse {\n\tawait metamask.connect({ client, walletConnect: { showQrModal: true } });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Metadata\nDESCRIPTION: Sets up metadata for the documentation page including title, description, and image configuration for wallet connection documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/connecting-wallets/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Connecting Wallets\",\n\t\ticon: \"react\",\n\t},\n\ttitle: \"Connecting Wallets in thirdweb React SDK\",\n\tdescription:\n\t\t\"Connect wallets using ConnectButton, ConnectEmbed or useConnect hook\",\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Navigation Cards\nDESCRIPTION: Creates a stack of navigation cards that link to detailed documentation for UI components and hooks for wallet connection.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/connecting-wallets/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack>\n\n<ArticleIconCard\n\ttitle=\"Using UI Components\"\n\ticon={ComponentIcon}\n\tdescription=\"Prebuilt UI components for connecting wallets\"\n\thref=\"/react/v5/connecting-wallets/ui-components\"\n/>\n\n<ArticleIconCard\n\ttitle=\"Using Hooks\"\n\ticon={CableIcon}\n\thref=\"/react/v5/connecting-wallets/hooks\"\n\tdescription=\"Hooks for connecting wallets with your own UX\"\n/>\n\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721SignatureMint Contract in Solidity\nDESCRIPTION: Demonstrates a full implementation of the ERC721SignatureMint contract, including constructor, mintWithSignature function, and helper functions for signature verification and price collection.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721SignatureMint/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC721Base.sol\";\nimport \"@thirdweb-dev/contracts/extension/SignatureMintERC721.sol\";\nimport \"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\";\n\ncontract ERC721SignatureMint is ERC721Base, SignatureMintERC721 {\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC721Base(_defaultAdmin, _name, _symbol, _royaltyRecipient, _royaltyBps) {}\n\n    /// @dev Mints tokens according to the provided mint request.\n    function mintWithSignature(\n        MintRequest calldata _req,\n        bytes calldata _signature\n    ) external payable virtual override returns (address signer) {\n        require(_req.quantity == 1, \"quantity must be 1\");\n\n        uint256 tokenIdToMint = nextTokenIdToMint();\n\n        // Verify and process payload.\n        signer = _processRequest(_req, _signature);\n\n        address receiver = _req.to;\n\n        // Collect price\n        _collectPriceOnClaim(\n            _req.primarySaleRecipient,\n            _req.quantity,\n            _req.currency,\n            _req.pricePerToken\n        );\n\n        // Mint tokens.\n        _setTokenURI(tokenIdToMint, _req.uri);\n        _safeMint(receiver, _req.quantity);\n\n        emit TokensMintedWithSignature(signer, receiver, tokenIdToMint, _req);\n    }\n\n    /// @dev Returns whether a given address is authorized to sign mint requests.\n    function _canSignMintRequest(address _signer)\n        internal\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _signer == owner();\n    }\n\n    /// @dev Collects and distributes the primary sale value of tokens being claimed.\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual {\n        if (_pricePerToken == 0) {\n            return;\n        }\n\n        uint256 totalPrice = (_quantityToClaim * _pricePerToken) / 1 ether;\n        require(totalPrice > 0, \"quantity too low\");\n\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n            require(msg.value == totalPrice, \"Must send total price.\");\n        }\n\n        address saleRecipient = _primarySaleRecipient;\n        CurrencyTransferLib.transferCurrency(\n            _currency,\n            msg.sender,\n            saleRecipient,\n            totalPrice\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NFT Listing Structure and Function\nDESCRIPTION: Defines the ListingParameters struct and createListing function for listing NFTs at fixed prices. Includes parameters for asset contract, token details, pricing, and timing.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ListingParameters {\n    address assetContract;\n    uint256 tokenId;\n    uint256 quantity;\n    address currency;\n    uint256 pricePerToken;\n    uint128 startTimestamp;\n    uint128 endTimestamp;\n    bool reserved;\n}\n\nfunction createListing(ListingParameters memory params) external returns (uint256 listingId);\n```\n\n----------------------------------------\n\nTITLE: Creating ThirdwebNebula Session in C#\nDESCRIPTION: Initializes a Nebula session using the ThirdwebNebula.Create method, which is the entry point for interacting with the AI assistant.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/nebula/quickstart/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Create a Nebula session\nvar nebula = await ThirdwebNebula.Create(client);\n```\n\n----------------------------------------\n\nTITLE: Setting up Thirdweb Provider and Connect Button\nDESCRIPTION: Initializes the Thirdweb client with a client ID and sets up the ThirdwebProvider and ConnectButton components in a React application\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/quickstart/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\n\nexport const client = createThirdwebClient({ clientId: <your_client_id> });\n\nexport default function App() {\n  return (\n    <ThirdwebProvider>\n      <ConnectButton client={client} />\n    </ThirdwebProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Thirdweb Client for Client-Side Usage in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Thirdweb client for client-side usage. It requires a client ID, which can be obtained from the Thirdweb website. The client provides access to various Thirdweb services and functionalities.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/client/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\n\nconst client = createThirdwebClient({\n\tclientId: \"<your_client_id>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using useConnect Hook for Sponsored Transactions in thirdweb\nDESCRIPTION: This snippet demonstrates how to use the `useConnect` hook to enable sponsored transactions. It configures account abstraction with the `sponsorGas` option and provides a function to connect a wallet that will become the admin wallet for the smart account.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/enable-gasless/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useConnect } from \"thirdweb/react\";\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { sepolia } from \"thirdweb/chains\";\n \nfunction App() {\n  // 1. set the `accountAbstraction` configuration to convert wallets to smart accounts\n  const { connect } = useConnect({\n    client,\n    accountAbstraction: {\n      chain: sepolia, // the chain where your smart accounts will be or is deployed\n      sponsorGas: true, // enable or disable sponsored transactions\n    },\n  });\n \n  const connectToSmartAccount = async () => {\n    // 2. connect with the admin wallet of the smart account\n    connect(async () => {\n      const wallet = createWallet(\"io.metamask\"); // or any other wallet\n      await wallet.connect({\n        client,\n        chain: sepolia,\n      });\n      return wallet;\n    });\n  };\n \n  return (\n    <button onClick={() => connectToSmartAccount()}>Connect</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Smart Account for Gasless NFT Claiming\nDESCRIPTION: Code demonstrating how to use the smart account to perform onchain actions gaslessly, specifically claiming an NFT from a contract and sending the transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/account-abstraction/get-started/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst balance = await getWalletBalance({\n\tclient,\n\tchain,\n\taddress: smartAccount.address,\n});\nconsole.log(\"Smart account balance:\", balance.displayValue);\n\nconst contract = getContract({\n\tclient,\n\tchain: sepolia,\n\taddress: \"0x...\", // deploy a drop contract from thirdweb.com/explore\n});\n\nconst transaction = await claimTo({\n\tcontract,\n\tto: smartAccount.address,\n\tquantity: 1,\n});\nconst { transactionHash } = await sendTransaction({\n\ttransaction,\n\tsmartAccount,\n});\nconsole.log(`Minted NFT with transaction hash: ${transactionHash}`);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using InAppWallet with Various Authentication Methods in Thirdweb .NET SDK\nDESCRIPTION: Comprehensive examples of initializing InAppWallet instances with different authentication methods including email, phone, social logins, custom auth, guest login, server login, and SIWE. Also demonstrates session resuming and login flows for each authentication type.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/in-app-wallet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Email\nvar wallet = await InAppWallet.Create(client: client, email: \"userEmail\");\n// Phone\nvar wallet = await InAppWallet.Create(client: client, phoneNumber: \"+1234567890\");\n// Google, Apple, Facebook, etc.\nvar wallet = await InAppWallet.Create(client: client, authProvider: AuthProvider.Google);\n// Custom Auth - JWT\nvar wallet = await InAppWallet.Create(client: client, authProvider: AuthProvider.JWT);\n// Custom Auth - AuthEndpoint\nvar wallet = await InAppWallet.Create(client: client, authProvider: AuthProvider.AuthEndpoint);\n// Guest Login\nvar wallet = await InAppWallet.Create(client: client, authProvider: AuthProvider.Guest);\n// Server Login\nvar wallet = await InAppWallet.Create(client: client, authProvider: AuthProvider.Backend, walletSecret: \"very-secret\");\n// Siwe\nvar wallet = await InAppWallet.Create(client: client, authProvider: AuthProvider.Siwe, siweSigner: anyExternalWallet);\n// SiweExternal\nvar wallet = await InAppWallet.Create(client: client, authProvider: AuthProvider.SiweExternal);\n\n// Session resuming supported for all methods\nvar isConnected = await wallet.IsConnected();\n\n// If not connected, initiate login flow based on the auth provider you are using\n\n// Email & Phone (OTP)\nawait wallet.SendOTP(); // and fetch the otp\nvar address = await wallet.LoginWithOtp(\"userEnteredOTP\"); // try catch and retry if needed\n\n// Socials (OAuth)\nvar address = await wallet.LoginWithOauth(\n    // Windows console app example, adaptable to any runtime\n    isMobile: false,\n    browserOpenAction: (url) =>\n    {\n        var psi = new ProcessStartInfo { FileName = url, UseShellExecute = true };\n        _ = Process.Start(psi);\n    },\n    mobileRedirectScheme: \"myBundleId://\"\n);\n\n// Custom Auth (JWT)\nvar address = await wallet.LoginWithCustomAuth(jwt: \"myjwt\");\n\n// Custom Auth (AuthEndpoint)\nvar address = await wallet.LoginWithAuthEndpoint(payload: \"mypayload\");\n\n// Guest Login (Easy onboarding)\nvar address = await wallet.LoginWithGuest();\n\n// Backend (Server Wallets)\nvar address = await wallet.LoginWithBackend();\n\n// SIWE (Wallet)\nvar address = await siweWallet.LoginWithSiwe(chainId: 1);\n\n// SiweExternal (React-only wallet)\nvar address = await wallet.LoginWithSiweExternal(\n    // Windows console app example, adaptable to any runtime\n    isMobile: false,\n    browserOpenAction: (url) =>\n    {\n        var psi = new ProcessStartInfo { FileName = url, UseShellExecute = true };\n         _ = Process.Start(psi);\n    },\n    forceWalletIds: new List<string> { \"io.metamask\", \"com.coinbase.wallet\", \"xyz.abs\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing mintWithSignature Function for Signature Minting in Solidity\nDESCRIPTION: This function allows external parties to mint tokens using a signed payload. It takes a MintRequest struct and a signature as parameters, verifies the signature, and mints tokens according to the specified information in the payload.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/signature-mint/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mintWithSignature(MintRequest calldata req, bytes calldata signature) external payable;\n```\n\n----------------------------------------\n\nTITLE: Connecting Wallet and Sending Transaction with Account in TypeScript\nDESCRIPTION: This snippet demonstrates how to connect a MetaMask wallet, access the connected account, and use it to sign and send a transaction. It uses the thirdweb SDK and showcases the wallet connection and transaction sending process.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/wallets/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from \"thirdweb\";\n// We use MetaMask wallet as an example, the pattern is the same for all wallets\nimport { createWallet } from \"thirdweb/wallets\";\n\n// initialize the wallet, you can pick any of the 300+ wallet connectors supported\n// wallet ids are typed, let your TS editor autocomplete them for you\n// ex: \"io.metamask\", \"com.coinbase.wallet\", \"me.rainbow\", etc...\nconst wallet = createWallet(\"io.metamask\");\n\n// connect the wallet, this returns a promise that resolves to the connected account\nconst account = await wallet.connect({\n\t// pass the client you created with `createThirdwebClient()`\n\tclient,\n});\n\n// sign & send a transaction with the account -> returns the transaction hash\nconst { transactionHash } = await sendTransaction({\n\t// assuming you have called `prepareTransaction()` or `prepareContractCall()` before which returns the prepared transaction to send\n\ttransaction,\n\t// Pass the account to sign the transaction with\n\taccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Authentication with thirdweb\nDESCRIPTION: This code snippet shows the server-side implementation of thirdweb's Auth system. It demonstrates how to initialize the auth module, generate login payloads, verify signatures, generate JWTs for authenticated sessions, and authenticate subsequent requests using the JWT.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/auth/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { createAuth } from \"thirdweb/auth\";\nimport { privateKeyToAccount } from \"thirdweb/wallets\";\n\nconst privateKey = process.env.THIRDWEB_PRIVATE_KEY;\nconst thirdwebClient = createThirdwebClient({\n\tsecretKey: process.env.THIRDWEB_SECRET_KEY;\n});\n\nconst auth = createAuth({\n\tdomain: \"localhost:3000\",\n\tclient: thirdwebClient,\n\tadminAccount: privateKeyToAccount({client, privateKey})\n});\n\n// 1. generate a login payload for a client on the server side\nconst loginPayload = await auth.generatePayload({ address: \"0x123...\" });\n\n// 2. send the login payload to the client to sign\n\n// 3. verify the login payload and signature that the client sends back later\nconst verifiedPayload = await auth.verifyPayload({\n\tpayload: loginPayload,\n\tsignature: \"0x123...\",\n});\n\n// 4. generate a JWT for the client\nconst jwt = await auth.generateJWT({ payload: verifiedPayload });\n\n// 5. set the JWT as a cookie or otherwise provide it to the client\n\n// 6. authenticate the client based on the JWT on subsequent calls\nconst { valid, parsedJWT } = await auth.verifyJWT({ jwt });\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721ClaimCustom Contract in Solidity\nDESCRIPTION: This example demonstrates how to create a contract that inherits from ERC721A, LazyMint, and IClaimableERC721 interfaces. It includes the constructor and overridable functions for customizing claiming behavior.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721ClaimCustom/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\nimport \"@thirdweb-dev/contracts/extension/LazyMint.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IClaimableERC721.sol\";\n\ncontract Contract is ERC721A, LazyMint, IClaimableERC721 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC721A(\n            _name,\n            _symbol\n        )\n    {}\n\n    function _canLazyMint() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    function _canSetClaimConditions() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual override {\n        // Your custom implementation here\n    }\n\n    function _transferTokensOnClaim(address _to, uint256 _quantityBeingClaimed)\n        internal\n        virtual\n        override\n        returns (uint256 startTokenId)\n    {\n        // Your custom implementation here\n    }\n\n    function claim(address _receiver, uint256 _quantity) external payable override {\n        // Your custom implementation here\n    }\n\n    function verifyClaim(address _claimer, uint256 _quantity) external view override {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to a Contract with thirdweb Engine API in TypeScript\nDESCRIPTION: This code performs a write operation on a blockchain contract through the Engine API. It calls the transferFrom function with specific parameters, requires gas funds, and returns a queueId that can be used to track the transaction status.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst resp = await fetch(\n\t\"<engine_url>/contract/<chain>/<contract_address>/write\",\n\t{\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: \"Bearer <access_token>\",\n\t\t\t\"x-backend-wallet-address\": \"<backend_wallet_address>\",\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tfunctionName: \"transferFrom\",\n\t\t\targs: [\n\t\t\t\t\"0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473\",\n\t\t\t\t\"0x3EcDBF3B911d0e9052b64850693888b008e18373\",\n\t\t\t\t\"0\",\n\t\t\t],\n\t\t}),\n\t},\n);\n\nconst { result } = await resp.json();\n// queueId is a reference to the transaction queued by Engine.\nconsole.log(\"Queue ID:\", result.queueId);\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-20 Paymaster in React\nDESCRIPTION: This code shows how to configure a ConnectButton component in React to use Base USDC for gas payments. The TokenPaymaster is specified in the accountAbstraction options of the ConnectButton.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/erc-20-paymaster/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { base, lisk, celo } from \"thirdweb/chains\";\nimport { TokenPaymaster, smartWallet } from \"thirdweb/wallets\";\n\n// Have users pay for gas in Base USDC\n<ConnectButton \n  client={client} \n  accountAbstraction={{\n    chain: base,\n    sponsorGas: true,\n    overrides: {\n      tokenPaymaster: TokenPaymaster.BASE_USDC,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Querying USDT Transfers with thirdweb Insight API\nDESCRIPTION: This snippet demonstrates how to fetch USDT transfer events from the Ethereum blockchain using the thirdweb Insight API. It queries the Transfer event from the USDT contract address and limits the results to 5 entries. Authentication is done via the x-client-id header.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUsdtTransfers = async () => {\n try {\n   const response = await fetch('https://1.insight.thirdweb.com/v1/events/0xdAC17F958D2ee523a2206206994597C13D831ec7/Transfer(address,address,uint256)?limit=5', {\n    headers: {\n      'x-client-id': <YOUR_THIRDWEB_CLIENT_ID>\n    }\n   });\n   const transfersInfo = await response.json();\n   return transfersInfo\n } catch (error) {\n   console.error('Error:', error);\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC721 Tokens with Thirdweb\nDESCRIPTION: Demonstrates how to safely transfer an ERC721 token from one address to another using thirdweb's safeTransferFrom extension. Requires contract instance, owner address, recipient address, and token ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/examples/transfering-tokens/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeTransferFrom } from \"thirdweb/extensions/erc721\";\nimport { sendAndConfirmTransaction } from \"thirdweb\";\n\nconst transaction = safeTransferFrom({\n\tcontract, // the erc721 contract\n\tfrom: \"0x-wallet-address-of-owner\",\n\tto: \"0x-recipient-address\",\n\ttokenId: 0n, // bigint - if you want to transfer tokenId #0, enter `0n`\n});\n\nconst transactionReceipt = await sendAndConfirmTransaction({\n\taccount, // the account initiating the transaction\n\ttransaction\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20SignatureMint Contract in Solidity\nDESCRIPTION: This example demonstrates how to create a custom ERC20 token contract that inherits from ERC20Base and implements the SignatureMintERC20 extension. It includes constructor, mintWithSignature, _canSignMintRequest, and _collectPriceOnClaim functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20SignatureMint/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC20Base.sol\";\nimport \"@thirdweb-dev/contracts/extension/SignatureMintERC20.sol\";\nimport \"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\";\n\ncontract ERC20SignatureMint is ERC20Base, SignatureMintERC20 {\n    /*//////////////////////////////////////////////////////////////\n                            Constructor\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _defaultAdmin, string memory _name, string memory _symbol)\n        ERC20Base(_defaultAdmin, _name, _symbol)\n    {}\n\n    /// @dev Mints tokens according to the provided mint request.\n    function mintWithSignature(\n        MintRequest calldata _req,\n        bytes calldata _signature\n    ) external payable virtual returns (address signer) {\n        require(_req.quantity > 0, \"Minting zero tokens.\");\n\n        // Verify and process payload.\n        signer = _processRequest(_req, _signature);\n\n        address receiver = _req.to;\n\n        // Collect price\n        _collectPriceOnClaim(\n            _req.primarySaleRecipient,\n            _req.quantity,\n            _req.currency,\n            _req.pricePerToken\n        );\n\n        // Mint tokens.\n        _mint(receiver, _req.quantity);\n\n        emit TokensMintedWithSignature(signer, receiver, _req);\n    }\n\n    /// @dev Returns whether a given address is authorized to sign mint requests.\n    function _canSignMintRequest(address _signer)\n        internal\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _signer == owner();\n    }\n\n    /// @dev Collects and distributes the primary sale value of tokens being claimed.\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual {\n        if (_pricePerToken == 0) {\n            return;\n        }\n\n        uint256 totalPrice = (_quantityToClaim * _pricePerToken) / 1 ether;\n        require(totalPrice > 0, \"quantity too low\");\n\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n            require(msg.value == totalPrice, \"Must send total price.\");\n        }\n\n        address saleRecipient = _primarySaleRecipient;\n        CurrencyTransferLib.transferCurrency(\n            _currency,\n            msg.sender,\n            saleRecipient,\n            totalPrice\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Contract Extension Functions with thirdweb CLI\nDESCRIPTION: Command to generate optimized functions for all possible calls to a contract using the thirdweb CLI. This saves time by precomputing all necessary encoding for contract interactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/read/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx thirdweb generate <contractId>/<contractAddress>\n```\n\n----------------------------------------\n\nTITLE: Implementing _transferTokensOnClaim Function in ERC721Drop\nDESCRIPTION: Internal function to transfer the NFTs being claimed. It uses _safeMint to mint and transfer the tokens to the claimer.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/drop/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transferTokensOnClaim(address _to, uint256 _quantityBeingClaimed)\n    internal\n    virtual\n    override\n    returns (uint256 startTokenId)\n{\n    startTokenId = _currentIndex;\n    _safeMint(_to, _quantityBeingClaimed);\n}\n```\n\n----------------------------------------\n\nTITLE: Sponsoring Transactions for In-App Wallets with Smart Accounts in thirdweb\nDESCRIPTION: This snippet demonstrates how to set up sponsored transactions for in-app wallets by configuring a smart account with the `sponsorGas` option set to true. This allows users to execute transactions without needing to hold ETH for gas fees.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/enable-gasless/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { sepolia } from \"thirdweb/chains\";\n\nconst wallets = [inAppWallet({\n\tsmartAccount: {\n\t\tchain: sepolia,\n\t\tsponsorGas: true,\n\t},\n})];\n\nexport default function App() {\n\treturn (\n\t\t<ThirdwebProvider>\n\t\t\t<ConnectButton\n\t\t\t\tclient={client}\n\t\t\t\twallets={wallets}\n\t\t\t/>\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Session Key Permissions with React in thirdweb\nDESCRIPTION: React implementation for adding a session key to a smart account with specific permissions. It defines time limits, contract access, and native token limits for the session key using thirdweb's React hooks.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/permissions/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { addSessionKey } from \"thirdweb/extensions/erc4337\";\nimport { useSendTransaction, useActiveAccount } from \"thirdweb/react\";\nimport { getContract } from \"thirdweb\";\n\nconst { mutate: sendTransaction } = useSendTransaction();\nconst smartAccount = useActiveAccount();\n\nconst onClick = () => {\n\tif (!smartAccount) return;\n\tconst transaction = addSessionKey({\n\t\tcontract: getContract({\n\t\t\taddress: smartAccount.address,\n\t\t\tchain,\n\t\t\tclient,\n\t\t}),\n\t\taccount: smartAccount,\n\t\tsessionKeyAddress: \"0x...\", // the address of the account allowed to use the session key\n\t\tpermissions: {\n\t\t\tapprovedTargets: \"*\", // the addresses of allowed contracts, or '*' for any contract\n\t\t\tnativeTokenLimitPerTransaction: 0.1, // the maximum amount of native token (in ETH) that the session key can spend per transaction\n\t\t\tpermissionStartTimestamp: new Date(), // the date when the session key becomes active\n\t\t\tpermissionEndTimestamp: new Date(Date.now() + 24 * 60 * 60 * 1000), // the date when the session key expires\n\t\t},\n\t});\n\tsendTransaction(transaction);\n};\n```\n\n----------------------------------------\n\nTITLE: Claiming Tokens in Solidity Smart Contract\nDESCRIPTION: Allows an account to claim a specified quantity of tokens. Requires various parameters including receiver address, quantity, currency, price, allowlist proof, and additional data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claim(\n    address receiver,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155ClaimPhases Contract in Solidity\nDESCRIPTION: A complete example of a contract implementing ERC1155ClaimPhases, including constructor, overridable functions, and core claim logic. This contract inherits from ERC1155, LazyMint, and Drop1155.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155ClaimPhases/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\nimport \"@thirdweb-dev/contracts/extension/LazyMint.sol\";\nimport \"@thirdweb-dev/contracts/extension/Drop1155.sol\";\n\ncontract Contract is ERC1155, LazyMint, Drop1155 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC1155(\n            _name,\n            _symbol\n        )\n    {}\n\n    function _canLazyMint() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    /// @dev Runs before every `claim` function call.\n    function _beforeClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual {}\n\n    /// @dev Runs after every `claim` function call.\n    function _afterClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual {}\n\n    /// @dev Collects and distributes the primary sale value of NFTs being claimed.\n    function _collectPriceOnClaim(\n        uint256 _tokenId,\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual override {\n        if (_pricePerToken == 0) {\n            return;\n        }\n\n        uint256 totalPrice = _quantityToClaim * _pricePerToken;\n\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n            if (msg.value != totalPrice) {\n                revert(\"Must send total price.\");\n            }\n        }\n\n        address saleRecipient = _primarySaleRecipient;\n        CurrencyTransferLib.transferCurrency(_currency, msg.sender, saleRecipient, totalPrice);\n    }\n\n    /// @dev Transfers the tokens being claimed.\n    function _transferTokensOnClaim(address _to, uint256 _tokenId, uint256 _quantityBeingClaimed)\n        internal\n        virtual\n        override\n    {\n        _mint(_to, _tokenId, _quantityBeingClaimed, \"\");\n    }\n\n    /// @dev Checks whether platform fee info can be set in the given execution context.\n    function _canSetClaimConditions()\n        internal\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return msg.sender == owner();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading NFT Data with ERC721 Extension in React\nDESCRIPTION: Demonstrates how to use a read extension with the useReadContract hook to fetch owned NFTs from an ERC721 contract. The example shows importing the necessary functions and creating a React component that reads blockchain data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/extensions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { useReadContract } from \"thirdweb/react\";\nimport { getOwnedNFTs } from \"thirdweb/extensions/erc721\";\n\nconst contract = getContract({\n\tclient,\n\tchain,\n\taddress: \"0x...\",\n});\n\nconst MyComponent = () => {\n\tconst ownedNFTs = useReadContract(getOwnedNFTs, {\n\t\tcontract,\n\t\taddress: \"0x...\",\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up ThirdwebProvider Component\nDESCRIPTION: Implementation of the ThirdwebProvider wrapper component at the root level of the application to manage wallet and chain state\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/getting-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// src/main.tsx\nimport { ThirdwebProvider } from \"thirdweb/react\";\n\nfunction Main() {\n\treturn (\n\t\t<ThirdwebProvider>\n\t\t\t<App />\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Batching ERC20 Approval and Transfer with Smart Wallets in thirdweb\nDESCRIPTION: This code snippet demonstrates how to batch multiple transactions (ERC20 token approval and transfer) in a single user operation using a smart wallet. It imports necessary functions from thirdweb, configures a smart wallet connection, defines the transactions to batch, and sends them in a single operation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/account-abstraction/batching-transactions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { smartWallet } from \"thirdweb/wallets\";\nimport { sendBatchTransaction } from \"thirdweb\";\nimport { approve, transferFrom } from \"thirdweb/extensions/erc20\";\n\nconst smartWallet = new smartWallet(config);\nconst smartAccount = await smartWallet.connect({\n\tclient,\n\tpersonalAccount,\n});\n\nconst transactions = [\n\tapprove({\n\t\tcontract,\n\t\tspender: \"0x...\",\n\t\tvalue: 100,\n\t}),\n\ttransferFrom({\n\t\tcontract,\n\t\tfrom: \"0x...\",\n\t\tto: \"0x...\",\n\t\tamount: 100,\n\t}),\n];\n\nawait sendBatchTransaction({\n\ttransactions,\n\taccount: smartAccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Writing to Contract with thirdweb SDK v5\nDESCRIPTION: Shows how to claim an NFT from a thirdweb Drop contract using the new SDK v5 approach with useSendTransaction and claimTo extension.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/migrate/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Claim an NFT from thirdweb Drop contract\nimport { useSendTransaction } from \"thirdweb/react\";\nimport { claimTo } from \"thirdweb/extensions/erc721\";\n\nconst { mutate: sendTx } = useSendTransaction();\nconst transaction = claimTo({\n  contract,\n  to: \"0x...\",\n  quantity: 1n,\n});\nsendTx(transaction);\n```\n\n----------------------------------------\n\nTITLE: ERC20 Contract Implementation Example\nDESCRIPTION: Complete example of a smart contract implementing the IERC20 interface, showing the basic structure and required function implementations for an ERC20 token. Includes constructor for name and symbol, and placeholders for all required ERC20 functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/interface/IERC20.sol\";\n\ncontract Contract is IERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) {}\n\n    function totalSupply() external view returns (uint256) {\n      // Your custom implementation here\n    }\n\n    function balanceOf(address who) external view returns (uint256) {\n      // Your custom implementation here\n    }\n\n    function allowance(address owner, address spender) external view returns (uint256) {\n      // Your custom implementation here\n    }\n\n    function transfer(address to, uint256 value) external returns (bool) {\n      // Your custom implementation here\n    }\n\n    function approve(address spender, uint256 value) external returns (bool) {\n      // Your custom implementation here\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool); {\n      // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Contract with thirdweb CLI\nDESCRIPTION: This command demonstrates how to publish a contract using the thirdweb CLI. It should be run at the root of the project directory to publish the contract and make it shareable and deployable by other users.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/overview/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb publish\n```\n\n----------------------------------------\n\nTITLE: Using Generated Extension Function in TypeScript\nDESCRIPTION: Example of using a precompiled, type-safe function from a generated extension to execute a permit transaction on a USDC contract. The example shows importing the function, setting up the contract, and executing the transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/generate/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { permit } from \"/thirdweb/10/0x0b2c639c533813f4aa9d7837caf62653d097ff85\";\n\nconst contract = getContract({\n\tclient,\n\tchain: optimism,\n\taddress: USDC_ADDRESS,\n});\n\n// Type-safe function to do a permit transaction\nconst transaction = permit({\n  owner: ...,\n  spender: ...,\n  value: ...,\n  deadline: ...,\n  signature: ...,\n});\nawait sendTransaction({ transaction, account });\n```\n\n----------------------------------------\n\nTITLE: Multi-Message Conversation with Nebula AI in C#\nDESCRIPTION: Illustrates a multi-message conversation with Nebula AI, allowing for more complex interactions and follow-up questions while maintaining context.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/nebula/quickstart/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Chat, passing multiple messages and context\nvar response3 = await nebula.Chat(\n    messages: new List<NebulaChatMessage>\n    {\n        new($\"Tell me the name of this contract: {myContractAddress}\", NebulaChatRole.User),\n        new(\"The name of the contract is CatDrop\", NebulaChatRole.Assistant),\n        new(\"What's the symbol of this contract?\", NebulaChatRole.User),\n    },\n    context: new NebulaContext(contractAddresses: new List<string> { myContractAddress }, chainIds: new List<BigInteger> { myChain })\n);\nConsole.WriteLine($\"Response 3: {response3.Message}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring wagmi with thirdweb in-app wallet connector\nDESCRIPTION: Sets up a wagmi configuration with the thirdweb in-app wallet connector. This allows thirdweb wallets to be used within a wagmi application, with optional smart account functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/adapters/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createConfig } from \"wagmi\";\nimport { inAppWalletConnector } from \"@thirdweb-dev/wagmi-adapter\";\nimport { createThirdwebClient, defineChain as thirdwebChain } from \"thirdweb\";\n\nconst client = createThirdwebClient({\n  clientId: \"your-client-id\",\n});\n\nexport const config = createConfig({\n  chains: [sepolia],\n  connectors: [\n    // add the in-app wallet connector\n    inAppWalletConnector({\n      client,\n      // optional: turn on smart accounts!\n      smartAccounts: {\n        sponsorGas: true,\n        chain: thirdwebChain(sepolia),\n      },\n    }),\n  ],\n  transports: {\n    [sepolia.id]: http(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customized In-App Wallet Configuration - TypeScript\nDESCRIPTION: Advanced wallet configuration with custom authentication options, metadata, and smart account settings.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet({\n\tauth: {\n        mode, // options are \"popup\" | \"redirect\" | \"window\";\n        options, // ex: [\"discord\", \"farcaster\", \"apple\", \"facebook\", \"google\", \"passkey\"],\n        passkeyDomain, // for passkey, the domain that the passkey is created on\n        redirectUrl, // the URL to redirect to after authentication\n\t},\n\tmetadata, // metadata for the wallet (name, icon, etc.)\n\tsmartAccount, // smart account options for the wallet (for gasless tx)\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Smart Accounts with React Hook\nDESCRIPTION: This code snippet shows how to use the useConnect hook to set up account abstraction in a React application. It includes configuration for the client, chain, and sponsored transactions, as well as a function to connect to a smart account using an in-app wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnect } from \"thirdweb/react\";\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { sepolia } from \"thirdweb/chains\";\n\nfunction App() {\n\t// 1. set the `accountAbstraction` configuration\n\tconst { connect } = useConnect({\n\t\tclient,\n\t\taccountAbstraction: {\n\t\t\tchain: sepolia, // the chain where your smart accounts will be or is deployed\n\t\t\tsponsorGas: true, // enable or disable sponsored transactions\n\t\t},\n\t});\n\n\tconst connectToSmartAccount = async () => {\n\t\t// 2. connect with the admin wallet of the smart account\n\t\tconnect(async () => {\n\t\t\tconst wallet = inAppWallet(); // or any other wallet\n\t\t\tawait wallet.connect({\n\t\t\t\tclient,\n\t\t\t\tchain: sepolia,\n\t\t\t\tstrategy: \"google\",\n\t\t\t});\n\t\t\treturn wallet;\n\t\t});\n\t};\n\n\treturn <button onClick={() => connectToSmartAccount()}>Connect</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading files to IPFS using thirdweb SDK\nDESCRIPTION: This snippet demonstrates how to upload files to IPFS using the thirdweb SDK. It uses the 'upload' function from the 'thirdweb/storage' module to upload a File object.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/storage/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { upload } from \"thirdweb/storage\";\n\nconst uris = await upload({\n\tclient,\n\tfiles: [new File([\"hello world\"], \"hello.txt\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Claim Page with React and thirdweb\nDESCRIPTION: This snippet demonstrates how to create a React component for claiming NFTs. It uses thirdweb's ConnectWallet component and implements a claim button that interacts with a backend API.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/guides/airdrop-nfts/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useActiveAccount } from \"thirdweb/react\";\nfunction ClaimPage() {\n\tconst account = useActiveAccount();\n\tconst address = account?.address;\n\n\tconst onClick = async () => {\n\t\tawait fetch(\"/api/claim\", {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify({ address }),\n\t\t});\n\t\talert(`🎉 A reward has been sent to your wallet: ${address}`);\n\t};\n\n\treturn (\n\t\t<main>\n\t\t\t<h2>Thank you for being a superfan! ❤️</h2>\n\t\t\t<ConnectWallet />\n\t\t\t{address && <button onClick={onClick}>Claim my reward</button>}\n\t\t</main>\n\t);\n}\n\nfunction Example() {\n\treturn (\n\t\t<ThirdwebProvider activeChain=\"<chain_id>\" clientId=\"<thirdweb_client_id>\">\n\t\t\t<ClaimPage />\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: ERC1155ClaimCustom Contract Implementation\nDESCRIPTION: Complete example implementation of an ERC1155ClaimCustom contract showing constructor, overridable functions for lazy minting, claim conditions, price collection, token transfers, and claim verification.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155ClaimCustom/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\nimport \"@thirdweb-dev/contracts/extension/LazyMint.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IClaimableERC1155.sol\";\n\ncontract Contract is ERC1155, LazyMint, IClaimableERC1155 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC1155(\n            _name,\n            _symbol\n        )\n    {}\n\n    function _canLazyMint() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    function _canSetClaimConditions() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual override {\n        // Your custom implementation here\n    }\n\n    function _transferTokensOnClaim(address _to, uint256 _quantityBeingClaimed)\n        internal\n        virtual\n        override\n        returns (uint256 startTokenId)\n    {\n        // Your custom implementation here\n    }\n\n    function claim(address _receiver, uint256 _quantity) external payable override {\n        // Your custom implementation here\n    }\n\n    function verifyClaim(address _claimer, uint256 _quantity) external view override {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ThirdwebClient for Different Application Types in C#\nDESCRIPTION: Demonstrates how to create a ThirdwebClient instance for native, frontend, and backend applications using the Thirdweb .NET SDK. It shows the use of clientId, bundleId, and secretKey depending on the application type.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/client/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Thirdweb;\n\n// For native applications\nvar client = ThirdwebClient.Create(clientId: \"yourClientId\", bundleId: \"yourBundleId\");\n\n// For frontend applications\nvar client = ThirdwebClient.Create(clientId: \"yourClientId\");\n\n// For backend applications\nvar client = ThirdwebClient.Create(secretKey: \"yourSecretKey\");\n```\n\n----------------------------------------\n\nTITLE: Checking Cross-Chain Swap Status in TypeScript\nDESCRIPTION: This snippet demonstrates how to check the status of a cross-chain swap using the Bridge.status function. It returns the status (COMPLETED, PENDING, FAILED, or NOT_FOUND) and details about the transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/cross-chain-swapping/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bridge } from \"thirdweb\";\n\n// Check the status of a bridge transaction\nconst bridgeStatus = await Bridge.status({\n  transactionHash:\n    \"0xe199ef82a0b6215221536e18ec512813c1aa10b4f5ed0d4dfdfcd703578da56d\",\n  chainId: 8453, // The chain ID where the transaction was initiated\n  client: thirdwebClient,\n});\n\n// The status will be one of: \"COMPLETED\", \"PENDING\", \"FAILED\", or \"NOT_FOUND\"\nif (bridgeStatus.status === \"completed\") {\n  console.log(`\n    Bridge completed!\n    Sent: ${bridgeStatus.originAmount} wei on chain ${bridgeStatus.originChainId}\n    Received: ${bridgeStatus.destinationAmount} wei on chain ${bridgeStatus.destinationChainId}\n  `);\n} else if (bridgeStatus.status === \"pending\") {\n  console.log(\"Bridge transaction is still pending...\");\n} else {\n  console.log(\"Bridge transaction failed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens using ERC20 Extension in Thirdweb\nDESCRIPTION: Illustrates how to use the transfer extension to send ERC20 tokens. This extension handles unit conversion automatically, allowing you to specify the amount in tokens rather than wei, and prepares a transaction that must be sent with sendTransaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/use/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract, sendTransaction } from \"thirdweb\";\nimport { transfer } from \"thirdweb/extensions/erc20\";\n\n// get the contract\nconst contract = getContract({...});\n\n// Call the extension function to prepare the transaction\nconst transaction = transfer({\n  contract,\n  to: \"0x1234...\",\n  amount: \"0.01\",\n});\n\n// Send the transaction\nconst transactionResult = await sendTransaction({\n  transaction,\n  account,\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying NFT Drop Contract with TypeScript SDK\nDESCRIPTION: TypeScript code for deploying an NFT Drop contract using thirdweb SDK, requiring contract name and primary sale recipient address\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/nft-drop/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst txResult = await sdk.deployer.deployBuiltInContract(\"nft-drop\", {\n\tname: \"<your_contract_name>\",\n\tprimary_sale_recipient: \"<wallet_address>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using MediaRenderer Component in React\nDESCRIPTION: This example shows how to import and use the MediaRenderer component in a React application. It renders media content from an IPFS URI using the thirdweb client.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/MediaRenderer/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MediaRenderer } from \"thirdweb/react\";\n\nfunction Home() {\n\treturn (\n\t\t<MediaRenderer\n\t\t\tclient={client}\n\t\t\tsrc=\"ipfs://QmV4HC9fNrPJQeYpbW55NLLuSBMyzE11zS1L4HmL6Lbk7X\"\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Email Authentication with thirdweb's In-App Wallet\nDESCRIPTION: This snippet shows the process of authenticating via email verification using thirdweb's in-app wallet. It includes steps for sending a verification code and then verifying the email to connect the wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/build-your-own-ui/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet, preAuthenticate } from \"thirdweb/wallets/in-app\";\n\nconst { connect } = useConnect();\n\nconst preLogin = async (email: string) => {\n\t// send email verification code\n\tawait preAuthenticate({\n\t\tclient,\n\t\tstrategy: \"email\",\n\t\temail, // ex: user@example.com\n\t});\n};\n\nconst handleLogin = async (email: string, verificationCode: string) => {\n\t// verify email and connect\n\tawait connect(async () => {\n\t\tconst wallet = inAppWallet();\n\t\tawait wallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"email\",\n\t\t\temail,\n\t\t\tverificationCode,\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Complete EcosystemWallet Example with Email OTP Authentication\nDESCRIPTION: Complete example of creating an EcosystemWallet with email authentication, sending and verifying an OTP, and performing wallet operations.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/ecosystem-wallet/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Create EcosystemWallet wallet as signer to unlock web2 auth\nvar ecosystemWallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", email: \"email@email.com\"); // or email: null, phoneNumber: \"+1234567890\"\n\n// Resume session (if `EcosystemWallet` wallet was not logged in)\nif (!await ecosystemWallet.IsConnected())\n{\n    await ecosystemWallet.SendOTP();\n    Console.WriteLine(\"Please submit the OTP.\");\n    var otp = Console.ReadLine();\n    var ecosystemWalletAddress = await ecosystemWallet.LoginWithOtp(otp); // try catch and retry if needed\n}\n\nConsole.WriteLine($\"EcosystemWallet address: {await ecosystemWallet.GetAddress()}\");\n\n// Sign a message\nvar message = \"Hello, Thirdweb!\";\nvar signature = await wallet.PersonalSign(message);\nConsole.WriteLine($\"Signature: {signature}\");\n\n```\n\n----------------------------------------\n\nTITLE: Basic React Wallet Connection Implementation\nDESCRIPTION: Demonstrates the basic setup for implementing wallet connection in a React application using thirdweb's ConnectButton component and in-app wallet configuration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/connect-users/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst client = createThirdwebClient({ clientId });\nconst wallets = [inAppWallet()];\n\nexport default function App() {\n\treturn (\n\t\t<ThirdwebProvider>\n\t\t\t<ConnectButton client={client} wallets={wallets} />\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Thirdweb Client\nDESCRIPTION: Examples of initializing the Thirdweb client for different application types including web, native, and backend applications. Each initialization requires specific credentials like clientId, bundleId, or secretKey.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/getting-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// For Web Applications\nvar client = ThirdwebClient.Create(clientId: \"yourClientId\");\n\n// For Native Applications\nvar client = ThirdwebClient.Create(clientId: \"yourClientId\", bundleId: \"yourBundleId\");\n\n// For Backend Applications\nvar client = ThirdwebClient.Create(secretKey: \"yourSecretKey\");\n```\n\n----------------------------------------\n\nTITLE: Overriding _collectPriceOnClaim Function in ERC721SignatureMint\nDESCRIPTION: Presents the implementation of the _collectPriceOnClaim function, which can be overridden to customize the collection and distribution of the primary sale value for claimed NFTs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/signature-mint/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n/// @dev Collects and distributes the primary sale value of NFTs being claimed.\nfunction _collectPriceOnClaim(\n    address _primarySaleRecipient,\n    uint256 _quantityToClaim,\n    address _currency,\n    uint256 _pricePerToken\n) internal virtual {\n    if (_pricePerToken == 0) {\n        return;\n    }\n\n    uint256 totalPrice = _quantityToClaim * _pricePerToken;\n\n    if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n        require(msg.value == totalPrice, \"Must send total price.\");\n    }\n\n    address saleRecipient = _primarySaleRecipient == address(0) ? primarySaleRecipient() : _primarySaleRecipient;\n    CurrencyTransferLib.transferCurrency(_currency, msg.sender, saleRecipient, totalPrice);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Royalty Contract in Solidity\nDESCRIPTION: Demonstrates how to create a custom contract that inherits from the Royalty extension, including implementation of required functions and optional customizations.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Royalty/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/Royalty.sol\";\n\ncontract MyContract is Royalty {\n    /**\n     *  We store the contract deployer's address only for the purposes of the example\n     *  in the code comment below.\n     *\n     *  Doing this is not necessary to use the `Royalty` extension.\n     */\n    address public deployer;\n\n    constructor() {\n        deployer = msg.sender;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        return type(IERC2981).interfaceId == interfaceId;\n    }\n\n    /**\n     *  This function returns who is authorized to set royalty info for your NFT contract.\n     *\n     *  As an EXAMPLE, we'll only allow the contract deployer to set the royalty info.\n     *\n     *  You MUST complete the body of this function to use the `Royalty` extension.\n     */\n    function _canSetRoyaltyInfo()\n        internal\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return msg.sender == deployer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type-Safe Extensions for Complex Transactions\nDESCRIPTION: Shows how to use thirdweb extensions to make complex transactions in a type-safe way with a simpler API. The example demonstrates minting an ERC721 NFT with metadata using the mintTo extension function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/transactions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { useSendTransaction } from \"thirdweb/react\";\nimport { mintTo } from \"thirdweb/extensions/erc721\";\n\nconst contract = getContract({\n\tclient,\n\tchain,\n\taddress: \"0x...\",\n});\n\nconst MyComponent = () => {\n\tconst { mutate: sendTransaction, isPending } = useSendTransaction();\n\n\tconst onClick = async () => {\n\t\tconst transaction = mintTo({\n\t\t\tcontract,\n\t\t\tto: \"0x...\",\n\t\t\tnft: {\n\t\t\t\tname: \"NFT Name\",\n\t\t\t\tdescription: \"NFT Description\",\n\t\t\t\timage: \"https://example.com/image.png\",\n\t\t\t},\n\t\t});\n\t\tsendTransaction(transaction);\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Converting EIP1193 Provider to Thirdweb Wallet\nDESCRIPTION: Shows how to use EIP1193.fromProvider to convert any wallet that supports the EIP1193 standard into a Thirdweb wallet. This allows using external wallets with the thirdweb SDK's account functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/adapters/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EIP1193 } from \"thirdweb/wallets\";\n\n// Create a Thirdweb wallet from a EIP1193 provider\nconst wallet = EIP1193.fromProvider({\n  provider: yourProvider, // any EIP1193 provider\n});\n \n// Use like any other Thirdweb wallet\nconst account = await wallet.connect({\n  client: createThirdwebClient({ clientId: \"...\" }),\n});\n \n// Sign messages\nawait account.signMessage({ message: \"Hello World\" });\n```\n\n----------------------------------------\n\nTITLE: Writing to Blockchain with ERC721 Mint Extension in React\nDESCRIPTION: Shows how to implement a write extension with useSendTransaction hook to mint an NFT to a specified address. The example demonstrates creating a transaction object from the mintTo extension and executing it through the React hook.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/extensions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { useSendTransaction } from \"thirdweb/react\";\nimport { mintTo } from \"thirdweb/extensions/erc721\";\n\nconst contract = getContract({\n\tclient,\n\tchain,\n\taddress: \"0x...\",\n});\n\nconst MyComponent = () => {\n\tconst { mutate: sendTransaction, isPending } = useSendTransaction();\n\n\tconst onClick = async () => {\n\t\tconst transaction = mintTo({\n\t\t\tcontract,\n\t\t\tto: \"0x...\",\n\t\t\tnft: {\n\t\t\t\tname: \"NFT Name\",\n\t\t\t\tdescription: \"NFT Description\",\n\t\t\t\timage: \"https://example.com/image.png\",\n\t\t\t},\n\t\t});\n\t\tsendTransaction(transaction);\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing thirdweb Auth in React Applications\nDESCRIPTION: This code demonstrates how to set up thirdweb Auth in a React application. It shows how to initialize the thirdweb client, create an auth instance, and implement the ConnectButton component with authentication handlers for login, verification, and logout functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\nimport { createThirdwebClient } from \"thirdweb\";\nimport { createAuth } from \"thirdweb/auth\";\n\nconst client = createThirdwebClient({\nclientId: '1234567890', // get yours by creating a project on https://thirdweb.com/create-api-key\n});\n\nconst thirdwebAuth = createAuth({\ndomain: 'localhost:3000',\nclient,\nadminAccount: privateKeyToAccount({ client, privateKey }),\n});\n\nexport default function App() {\n\tconst [loggedIn, setLoggedIn] = useState(false);\n\treturn (\n\t\t// The ThirdwebProvider should be at the root of your application, but the ConnectButton can be anywhere\n\t\t<ThirdwebProvider>\n\t\t\t<ConnectButton\n\t\t\t\tclient={client}\n\t\t\t\tauth={{\n\t\t\t\t\tgetLoginPayload: async (params) => {\n\t\t\t\t\t\t// here you should call your backend, using generatePayload to return\n\t\t\t\t\t\t// a SIWE compliant login payload to the client\n\t\t\t\t\t\treturn thirdwebAuth.generatePayload(params)\n\t\t\t\t\t},\n\t\t\t\t\tdoLogin: async (params) => {\n             \t\t\t\t\t// here you should call your backend to verify the signed payload passed in params\n\t\t\t\t\t\t// this will verify that the signature matches the intended wallet\n\t\t\t\t\t\tconst verifiedPayload = await thirdwebAuth.verifyPayload(params);\n\t\t\t\t\t\tsetLoggedIn(verifiedPayload.valid)\n\t\t\t\t\t},\n\t\t\t\t\tisLoggedIn: async () => {\n\t\t\t\t\t\t// here you should ask you backend if the user is logged in\n\t\t\t\t\t\t// can use cookies, storage, or your method of choice\n\t\t\t\t\t\treturn loggedIn;\n\t\t\t\t\t},\n\t\t\t\t\tdoLogout: async () => {\n\t\t\t\t\t\t// here you should call your backend to logout the user if needed\n\t\t\t\t\t\t// and delete any local auth tokens\n\t\t\t\t\t\tsetLoggedIn(false);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t/>\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Claim Function Implementation\nDESCRIPTION: Core function that handles claiming of lazy minted NFTs with reentrance protection.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/lazy-mint/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claim(address _receiver, uint256 _quantity) public payable nonReentrant {\n    require(_currentIndex + _quantity <= nextTokenIdToLazyMint, \"Not enough lazy minted tokens.\");\n    verifyClaim(msg.sender, _quantity);\n\n    uint256 startTokenId = _transferTokensOnClaim(_receiver, _quantity);\n    emit TokensClaimed(msg.sender, _receiver, startTokenId, _quantity);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Signature Verification in TypeScript\nDESCRIPTION: TypeScript functions for verifying webhook payload authenticity using HMAC SHA-256 signatures to confirm the request came from thirdweb. Includes helper functions to generate and validate signatures.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/webhooks/payload/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst generateSignature = (\n  rawBody: string,\n  secret: string,\n): string => {\n  return crypto\n    .createHmac(\"sha256\", secret)\n    .update(rawBody)\n    .digest(\"hex\");\n};\n \nconst isValidSignature = (\n  rawBody: string,\n  signature: string,\n  secret: string,\n): boolean => {\n  const expectedSignature = generateSignature(\n    body,\n    secret,\n  );\n  return crypto.timingSafeEqual(\n    Buffer.from(expectedSignature),\n    Buffer.from(signature),\n  );\n};\n\n// extract the signature from request headers\nconst signature = req.headers['x-signature'];\n// get the raw body of the request\nconst rawBody = req.rawBody;\n\nconst isValid = isValidSignature(rawBody, signature, secret);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic In-App Wallet with thirdweb\nDESCRIPTION: This code demonstrates how to create a simple in-app wallet using the inAppWallet function, which supports email/password login, Google, Apple, Facebook login, and passkey by default.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/build-your-own-ui/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet();\n```\n\n----------------------------------------\n\nTITLE: Implementing OIDC Authentication in React\nDESCRIPTION: Example of how to authenticate a user using OIDC-compatible auth in a React application. Shows usage of inAppWallet and useConnect hook to handle post-login JWT authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/configuration/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { useConnect } from \"thirdweb/react\";\n\nconst { connect } = useConnect();\n\nconst handlePostLogin = async (jwt: string) => {\n\tawait connect(() => {\n\t\tconst wallet = inAppWallet();\n\t\twallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"jwt\",\n\t\t\tjwt,\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Sponsoring Transactions for All Connected Wallets with ConnectButton in thirdweb\nDESCRIPTION: This code example shows how to enable sponsored transactions for all connected wallets using the `accountAbstraction` prop on the ConnectButton component. This setup automatically handles gas costs for any transaction made through the connected wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/enable-gasless/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\n \nconst client = createThirdwebClient({\n  clientId: \"YOUR_CLIENT_ID\",\n});\n \nexport default function App() {\n  return (\n    <ThirdwebProvider>\n      <ConnectButton\n        client={client}\n        accountAbstraction={{\n          chain: sepolia, // the chain where your smart accounts will be or is deployed\n          sponsorGas: true, // enable or disable sponsored transactions\n        }}\n      />\n    </ThirdwebProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Implementation - TypeScript\nDESCRIPTION: Implementation of email-based authentication with verification code.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/get-started/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet, preAuthenticate } from \"thirdweb/wallets/in-app\";\n\nconst { connect } = useConnect();\n\nconst preLogin = async (email: string) => {\n\tawait preAuthenticate({\n\t\tclient,\n\t\tstrategy: \"email\",\n\t\temail, // ex: user@example.com\n\t});\n};\n\nconst handleLogin = async (email: string, verificationCode: string) => {\n\tawait connect(async () => {\n\t\tconst wallet = inAppWallet();\n\t\tawait wallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"email\",\n\t\t\temail,\n\t\t\tverificationCode,\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Reading Contract State with thirdweb in TypeScript\nDESCRIPTION: Example of using the readContract function to read contract state. This approach provides type safety based on the Solidity method signature and returns the result directly from the blockchain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/read/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readContract } from \"thirdweb\";\n\nconst balance = await readContract({\n\tcontract: contract,\n\tmethod: \"function balanceOf(address) view returns (uint256)\",\n\tparams: [\"0x123...\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Batching Transactions with Smart Accounts in React\nDESCRIPTION: This snippet demonstrates how to batch an approval and a transfer transaction using React hooks from thirdweb. It uses the useActiveAccount and useSendBatchTransaction hooks to create and send a batch of transactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/batching-transactions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useActiveAccount, useSendBatchTransaction } from \"thirdweb/react\";\nimport { approve, transferFrom } from \"thirdweb/extensions/erc20\";\n\nconst smartAccount = useActiveAccount();\nconst { mutate: sendBatchTransaction } = useSendBatchTransaction();\n\nconst approveAndTransfer = async () => {\n\tconst transactions = [\n\t\tapprove({\n\t\t\tcontract,\n\t\t\tspender: \"0x...\",\n\t\t\tvalue: 100,\n\t\t}),\n\t\ttransferFrom({\n\t\t\tcontract,\n\t\t\tfrom: \"0x...\",\n\t\t\tto: \"0x...\",\n\t\t\tamount: 100,\n\t\t}),\n\t];\n\tawait sendBatchTransaction(transactions);\n};\n```\n\n----------------------------------------\n\nTITLE: Using ThirdwebProvider in v5 (TypeScript/TSX)\nDESCRIPTION: Example of how to use the ThirdwebProvider in the latest SDK version. It no longer accepts props like activeChain or clientId.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/installation/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider } from \"thirdweb/react\";\n\n<ThirdwebProvider>\n ...\n</ThirdwebProvider>\n```\n\n----------------------------------------\n\nTITLE: NFT Contract with Custom Minting Restriction\nDESCRIPTION: NFT contract with overridden mintTo function implementing a one-NFT-per-wallet restriction\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/get-started/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC721Base.sol\";\nimport \"@thirdweb-dev/contracts/extension/Permissions.sol\";\n\ncontract MyNFT is ERC721Base, Permissions {\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC721Base(_defaultAdmin, _name, _symbol, _royaltyRecipient, _royaltyBps) {}\n\n    function mintTo(address _to, string memory _tokenURI) public override {\n        require(balanceOf(_to) < 1, \"only 1 NFT per wallet!\");\n        super.mintTo(_to, _tokenURI);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Contract Writing with TransactionButton in SDK v5\nDESCRIPTION: Using the TransactionButton component introduced in SDK v5 to handle contract write operations without explicit hooks. This represents the most concise approach for handling transactions in the new SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/contracts/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TransactionButton } from \"thirdweb/react\";\nimport { claimTo } from \"thirdweb/extension/erc721\";\n\nfunction App() {\n  return <TransactionButton transaction={\n    () => claimTo({ contract, quantity: 1n, to: \"0x...\" })\n  }>\n    Claim\n  </TransactionButton>\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Chain Activity Monitoring Implementation\nDESCRIPTION: Function that monitors recent transactions across multiple chains for a specific address, sorted by timestamp in descending order.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/multichain-queries/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst getRecentActivity = async (address) => {\n  const response = await fetch(\n    `https://insight.thirdweb.com/v1/transactions?filter_from_address=${address}&chain=1&chain=137&chain=42161&sort_by=block_timestamp&sort_order=desc&limit=10`,\n    { headers: { 'x-client-id': '<YOUR_CLIENT_ID>' } }\n  );\n  \n  return await response.json();\n};\n```\n\n----------------------------------------\n\nTITLE: Sending an ERC20 token transfer transaction\nDESCRIPTION: Executing a token transfer by importing the extension, defining the contract, preparing the transaction with the transfer function, and sending it with the account.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/getting-started/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract, sendTransaction } from \"thirdweb\";\n// 1. Import the extension you want to use\nimport { transfer } from \"thirdweb/extensions/erc20\";\n\n// 2. Define the contract\nconst contract = getContract({\n    client,\n    address: \"0x1234...\",\n    chain: sepolia,\n});\n\n// 3. Call the extension function to prepare the transaction\nconst transaction = transfer({\n  contract,\n  to: \"0x1234...\",\n  amount: \"0.01\",\n});\n\n// 4. Send the transaction\nconst result = await sendTransaction({\n  transaction,\n  account,\n});\n\nconsole.log(\"Transaction hash:\", result.transactionHash);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ERC20Staking Contract in Solidity\nDESCRIPTION: Demonstrates a complete example of implementing a custom ERC20 staking contract by inheriting from the Staking20 extension. It includes constructor setup, reward token minting, and custom stake condition checks.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20Staking/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/Staking20.sol\";\nimport \"@thirdweb-dev/contracts/eip/interface/IERC20.sol\";\nimport \"@thirdweb-dev/contracts/eip/interface/IERC20Metadata.sol\";\n\ncontract MyContract is Staking20 {\n    // ERC20 Reward Token address. See {_mintRewards}.\n    address public rewardToken;\n\n    /**\n     *  We store the contract deployer's address only for the purposes of the example\n     *  in the code comment below.\n     *\n     *  Doing this is not necessary to use the `Staking20` extension.\n     */\n    address public deployer;\n\n    constructor(\n        uint256 _timeUnit,\n        uint256 _rewardRatioNumerator,\n        uint256 _rewardRatioDenominator,\n        address _stakingToken,\n        address _rewardToken,\n        address _nativeTokenWrapper\n    ) Staking20(\n            _nativeTokenWrapper,\n            _stakingToken,\n            IERC20Metadata(_stakingToken).decimals(),\n            IERC20Metadata(_rewardToken).decimals()\n    ) {\n        _setStakingCondition(_timeUnit, _rewardRatioNumerator, _rewardRatioDenominator);\n\n        rewardToken = _rewardToken;\n        deployer = msg.sender;\n    }\n\n    /**\n     *  @dev    Mint/Transfer ERC20 rewards to the staker. Must override.\n     *\n     *  @param _staker    Address for sending rewards to.\n     *  @param _rewards   Amount of tokens to be given out as reward.\n     *\n     */\n    function _mintRewards(address _staker, uint256 _rewards) internal override {\n        IERC20(rewardToken).transfer(_staker, _rewards);\n    }\n\n    // Returns whether staking restrictions can be set in given execution context.\n    function _canSetStakeConditions() internal view override returns (bool) {\n        return msg.sender == deployer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Claim Function Implementation\nDESCRIPTION: Allows claiming multiple lazy minted NFTs to a recipient with reentrancy protection and custom verification logic.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/lazy-mint/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claim(\n    address _receiver,\n    uint256 _tokenId,\n    uint256 _quantity\n) public payable nonReentrant {\n    require(_tokenId < nextTokenIdToMint(), \"invalid id\");\n    verifyClaim(msg.sender, _tokenId, _quantity);\n\n    _transferTokensOnClaim(_receiver, _tokenId, _quantity);\n    emit TokensClaimed(msg.sender, _receiver, _tokenId, _quantity);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ThirdwebProvider in React\nDESCRIPTION: This snippet shows how to set up the ThirdwebProvider component to ensure wallet availability and handle connection states in a React application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/build-your-own-ui/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThirdwebProvider } from \"thirdweb/react\";\n\n<ThirdwebProvider>\n\t<YourApp />\n</ThirdwebProvider>;\n```\n\n----------------------------------------\n\nTITLE: Cross-Chain Protocol Analysis Implementation\nDESCRIPTION: Function that analyzes protocol activity across different deployments on multiple chains by dynamically building query parameters from a mapping of chain IDs to contract addresses.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/multichain-queries/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst getProtocolActivity = async (protocolAddresses) => {\n  // protocolAddresses = { 1: \"0x123...\", 137: \"0x456...\", 42161: \"0x789...\" }\n  \n  const queryParams = Object.entries(protocolAddresses)\n    .map(([chainId, address]) => `chain=${chainId}&filter_address=${address}`)\n    .join('&');\n  \n  const response = await fetch(\n    `https://insight.thirdweb.com/v1/events?${queryParams}&limit=50`,\n    { headers: { 'x-client-id': '<YOUR_CLIENT_ID>' } }\n  );\n  \n  return await response.json();\n};\n```\n\n----------------------------------------\n\nTITLE: Connecting InAppWallet with Social Authentication in Unity\nDESCRIPTION: Demonstrates wallet connection using social authentication (Google) with the InAppWallet provider. The code configures InAppWalletOptions with the Google auth provider and connects the wallet, opening a native browser for authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/in-app-wallet/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar inAppWalletOptions = new InAppWalletOptions(authprovider: AuthProvider.Google);\nvar options = new WalletOptions(\n    provider: WalletProvider.InAppWallet, \n    chainId: 1, \n    inAppWalletOptions: inAppWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication-Protected Page in Next.js\nDESCRIPTION: Implementation of an authentication-protected page component in Next.js using thirdweb Auth. This component checks if the user is logged in and redirects to another page if not authenticated.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/next/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from \"next/navigation\";\nimport { isLoggedIn } from \"../actions/login\";\n\nconst AuthenticatedPage = async () => {\n\t// redirect back if user is not logged in\n\tif (!(await isLoggedIn())) {\n\t\tredirect(\"/connect-button\");\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Logged In Page</h1>\n\t\t\t<p>You are logged in, so you can see this page!</p>\n\t\t</div>\n\t);\n};\n\nexport default AuthenticatedPage;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Wallet Integration and Transaction Execution\nDESCRIPTION: Example of wallet connection and transaction execution using TypeScript. Shows how to initialize the thirdweb client, connect a wallet using Google authentication, and execute a contract transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/interact-blockchain/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient, getContract, sendTransaction } from \"thirdweb\";\nimport { sepolia } from \"thirdweb/chains\";\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet();\nconst account = await wallet.connect({\n\tclient,\n\tstrategy: \"google\",\n});\n\nconst contract = getContract({ client, address: \"0x...\" });\n\nconst transaction = claimTo({\n\tcontract,\n\tto: wallet.account.address,\n\tquantity: 1,\n});\nawait sendTransaction({ transaction, account });\n```\n\n----------------------------------------\n\nTITLE: React Implementation for IPFS Upload\nDESCRIPTION: Complete React implementation showing provider setup, file upload functionality, and file rendering from IPFS\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/storage/how-to-use-storage/upload-files-to-ipfs/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Initialize your provider\nimport { ThirdwebProvider } from \"@thirdweb-dev/react\";\n\nfunction Provider() {\nreturn (\n    <ThirdwebProvider\n    clientId=\"YOUR_CLIENT_ID\" // You can get a client id from dashboard settings\n    activeChain=\"goerli\"\n    >\n    ...\n    </ThirdwebProvider>\n);\n}\n\n// Upload files to IPFS\nimport { useStorageUpload } from \"@thirdweb-dev/react\";\n\nfunction App() {\nconst { mutateAsync: upload } = useStorageUpload();\n\nconst uploadData = () => {\n    // Get any data that you want to upload\n    const dataToUpload = [...];\n\n    // And upload the data with the upload function\n    const uris = await upload({ data: dataToUpload });\n}\n...\n}\n\n// Render files from IPFS\nimport { MediaRenderer } from \"@thirdweb-dev/react\";\n\nfunction App() {\nreturn (\n    // Supported types: image, video, audio, 3d model, html\n    <MediaRenderer src=\"ipfs://QmamvVM5kvsYjQJYs7x8LXKYGFkwtGvuRvqZsuzvpHmQq9/0\" />\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DropSinglePhase Extension for ERC20 Token Distribution\nDESCRIPTION: This example demonstrates how to create a custom ERC20 token contract that implements the DropSinglePhase extension. It includes the constructor and overrides for required functions such as _beforeClaim, _afterClaim, _collectPriceOnClaim, _transferTokensOnClaim, and _canSetClaimConditions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/DropSinglePhase.sol\";\nimport \"@thirdweb-dev/contracts/base/ERC20Base.sol\";\nimport \"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\";\n\n/// This is an EXAMPLE of the usage of `DropSinglePhase` for distributing ERC20 tokens.\n\ncontract MyContract is ERC20Base, DropSinglePhase {\n    /*//////////////////////////////////////////////////////////////\n                            Constructor\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _defaultAdmin, string memory _name, string memory _symbol)\n        ERC20Base(_defaultAdmin, _name, _symbol)\n    {}\n\n    /*//////////////////////////////////////////////////////////////\n                        Internal (overrideable) functions\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Runs before every `claim` function call.\n    function _beforeClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual override {\n      // Your custom implementation logic here\n    }\n\n    /// @dev Runs after every `claim` function call.\n    function _afterClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual override {\n      // Your custom implementation logic here\n    }\n\n    /// @dev Collects and distributes the primary sale value of tokens being claimed.\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual override {\n        if (_pricePerToken == 0) {\n            return;\n        }\n\n        uint256 totalPrice = (_quantityToClaim * _pricePerToken) / 1 ether;\n        require(totalPrice > 0, \"quantity too low\");\n\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n            require(msg.value == totalPrice, \"Must send total price.\");\n        }\n\n        address saleRecipient = _primarySaleRecipient;\n        CurrencyTransferLib.transferCurrency(\n            _currency,\n            msg.sender,\n            saleRecipient,\n            totalPrice\n        );\n    }\n\n    /// @dev Transfers the tokens being claimed.\n    function _transferTokensOnClaim(address _to, uint256 _quantityBeingClaimed)\n        internal\n        virtual\n        override\n        returns (uint256)\n    {\n        _mint(_to, _quantityBeingClaimed);\n        return 0;\n    }\n\n    /// @dev Checks whether platform fee info can be set in the given execution context.\n    function _canSetClaimConditions()\n        internal\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return msg.sender == owner();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Data with thirdweb Engine API in TypeScript\nDESCRIPTION: This snippet demonstrates how to perform a read operation on a blockchain contract using Engine API. It calls the balanceOf function with a specific address parameter and doesn't require gas funds as it's a read-only operation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst resp = await fetch(\n\t\"<engine_url>/contract/<chain>/<contract_address>/read?functionName=balanceOf&args=0x3EcDBF3B911d0e9052b64850693888b008e18373\",\n\t{\n\t\theaders: {\n\t\t\tAuthorization: \"Bearer <access_token>\",\n\t\t},\n\t},\n);\n\nconst { result } = await resp.json();\nconsole.log(\"ERC-20 balance:\", result);\n```\n\n----------------------------------------\n\nTITLE: Installing Peer Dependencies\nDESCRIPTION: Installation command for required peer dependencies including wallet connect, authentication, and UI components\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/getting-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install react-native-get-random-values @react-native-community/netinfo expo-application @react-native-async-storage/async-storage expo-web-browser expo-linking react-native-aes-gcm-crypto react-native-quick-crypto amazon-cognito-identity-js @coinbase/wallet-mobile-sdk react-native-mmkv react-native-svg @walletconnect/react-native-compat react-native-passkey\n```\n\n----------------------------------------\n\nTITLE: Single NFT Minting Function\nDESCRIPTION: Function allowing authorized addresses to mint a single NFT to a recipient with specified metadata URI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/base/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mintTo(address _to, string memory _tokenURI) public virtual {\n    require(_canMint(), \"Not authorized to mint.\");\n    _setTokenURI(nextTokenIdToMint(), _tokenURI);\n    _safeMint(_to, 1, \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Generic Contract Calls with useSendTransaction\nDESCRIPTION: Demonstrates how to send a transaction to a smart contract using the useSendTransaction hook and prepareContractCall utility. The example shows a mint function call with a recipient address parameter.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/transactions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareContractCall, getContract } from \"thirdweb\";\nimport { useSendTransaction } from \"thirdweb/react\";\n\nconst contract = getContract({\n\tclient,\n\tchain,\n\taddress: \"0x...\",\n});\n\nconst MyComponent = () => {\n\tconst { mutate: sendTransaction, isPending } = useSendTransaction();\n\n\tconst onClick = async () => {\n\t\tconst transaction = prepareContractCall({\n\t\t\tcontract,\n\t\t\tmethod: \"function mint(address to)\",\n\t\t\tparams: [\"0x...\"],\n\t\t\tvalue: 0,\n\t\t});\n\t\tsendTransaction(transaction);\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Using thirdweb Engine Typescript SDK for ERC20 Token Minting\nDESCRIPTION: Example of how to use the thirdweb Engine Typescript SDK to initialize the Engine instance and mint ERC20 tokens. It demonstrates setting up the Engine with a URL and access token, then calling the erc20.mintTo method with specific parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/references/typescript/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Engine } from \"@thirdweb-dev/engine\";\n\nconst engine = new Engine({\n\turl: \"http://0.0.0.0:3005\",\n\taccessToken: \"<engine_access_token>\",\n});\n\nawait engine.erc20.mintTo(\n\t// chain\n\t\"<chain_id>\",\n\t// contract address\n\t\"0x365b83D67D5539C6583b9c0266A548926Bf216F4\",\n\t// backend wallet address\n\t\"0x43CAe0d7fe86C713530E679Ce02574743b2Ee9FC\",\n\t// args matching the API reference\n\t{\n\t\ttoAddress: \"0x43CAe0d7fe86C713530E679Ce02574743b2Ee9FC\",\n\t\tamount: \"1.0\",\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Writing to a Contract with SDK v5 using useSendTransaction\nDESCRIPTION: The updated approach for claiming an NFT using thirdweb SDK v5 with the useSendTransaction hook and the claimTo extension function. This provides a cleaner implementation compared to v4.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/contracts/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSendTransaction } from \"thirdweb/react\";\nimport { claimTo } from \"thirdweb/extension/erc721\";\n\nfunction App() {\n  const transaction = claimTo({ contract, quantity: 1n, to: \"0x...\" });\n  const { mutateAsync: claimNft } = useSendTransaction();\n\n  return <button onClick={() => claimNft(transaction)}>\n    Claim\n  </button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using In-App Wallets in React\nDESCRIPTION: Demonstrates how to enable email or social login using the useEmbeddedWallet hook in React.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEmbeddedWallet } from \"thirdweb/react\";\nimport { useState } from \"react\";\nimport { client } from \"./thirdwebClient\";\n\nfunction EmailLoginButton() {\n  const embeddedWallet = useEmbeddedWallet({\n    client,\n  });\n  const [email, setEmail] = useState(\"\");\n\n  const handleLogin = async () => {\n    try {\n      await embeddedWallet.connect({\n        strategy: \"email\",\n        email,\n      });\n    } catch (error) {\n      console.error(\"Failed to login:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <input \n        type=\"email\" \n        value={email} \n        onChange={(e) => setEmail(e.target.value)} \n        placeholder=\"Enter your email\"\n      />\n      <button onClick={handleLogin}>Login with Email</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Express Server Implementation for Custom Auth Endpoint\nDESCRIPTION: Complete Express.js server implementation that includes routes for user login and the thirdweb auth endpoint verification. This server handles authentication and generates the necessary payload for the In-App Wallet integration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-auth-server/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst express = require(\"express\");\nconst fs = require(\"fs\");\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\nconst users = [{ id: 1, email: \"user@example.com\", password: \"password123\" }];\n\napp.use(express.json());\n\n// This is what your app calls to log in a user and get a public identifier for the user (otherwise known as the payload)\napp.post(\"/login\", (req, res) => {\n\tconst { email, password } = req.body;\n\tconst user = users.find((u) => u.email === email && u.password === password);\n\tif (!user) return res.status(401).send({ message: \"Invalid credentials\" });\n\n\tres.send({ payload: user.id });\n});\n\n// This is a sample endpoint that you would register on the thirdweb dashboard for us to verify the payload\napp.post(\"/thirdweb-will-call-this\", (req, res) => {\n\tconst { payload } = req.body;\n\tif (!payload) return res.status(401).send({ message: \"Invalid credentials\" });\n\n\t// You would write your own logic here to verify the payload here\n\tconst user = users.find((u) => u.id === payload);\n\tif (!user) return res.status(401).send({ message: \"Invalid credentials\" });\n\n\t// Once the user is successfully verified, you can return the following field\n\treturn res.send({\n\t\tuserId: user.id,\n\t\t// The last two fields here are optional\n\t\temail: user.email,\n\t\texp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 30,\n\t});\n});\n\napp.listen(PORT, () => {\n\tconsole.log(`Server started on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Session Key for Smart Wallet in C#\nDESCRIPTION: Demonstrates how to create a session key for a Smart Wallet, granting restricted access to a specific signer. The example shows setting up permissions with time constraints and transaction limits.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/createsessionkey/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Grant a session key to pk wallet (advanced use case)\nvar receipt = await smartWallet.CreateSessionKey(\n    signerAddress: await privateKeyWallet.GetAddress(),\n    approvedTargets: new List<string>() { Constants.ADDRESS_ZERO },\n    nativeTokenLimitPerTransactionInWei: \"0\",\n    permissionStartTimestamp: \"0\",\n    permissionEndTimestamp: (Utils.GetUnixTimeStampNow() + 86400).ToString(),\n    reqValidityStartTimestamp: \"0\",\n    reqValidityEndTimestamp: Utils.GetUnixTimeStampIn10Years().ToString()\n);\n```\n\n----------------------------------------\n\nTITLE: NFT Contract Claim Method Signature in Solidity\nDESCRIPTION: The signature of the claim method on an NFT Drop contract that will be called via the relayer. This method allows users to claim NFTs, and when used with a relayer, users don't need to pay gas fees.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/relayers/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claim(address _receiver, uint256 _quantity, address _currency, uint256 _pricePerToken, AllowlistProof calldata _allowlistProof, bytes memory _data)\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload Format Structure in TypeScript\nDESCRIPTION: Defines the TypeScript structure of webhook payload format used in thirdweb Insight webhooks, including topic, timestamp and data fields.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/webhooks/payload/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  topic: string,                      // topic of the data\n  timestamp: string,                  // timestamp of when the payload was sent in seconds\n  data: [\n    {\n      data: object,                   // data of the event or transaction\n      status: \"new\" | \"reverted\",\n      type: \"event\" | \"transaction\",\n      id: string                      // unique id of the data\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Admin Permissions in Smart Account\nDESCRIPTION: Demonstrates how to add a new admin to a smart account using thirdweb's erc4337 extension. The code shows integration with React hooks and contract interaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/account-abstraction/permissions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { addAdmin } from \"thirdweb/extensions/erc4337\";\nimport { useSendTransaction, useActiveAccount } from \"thirdweb/react\";\nimport { getContract } from \"thirdweb\";\n\nconst { mutate: sendTransaction } = useSendTransaction();\nconst smartAccount = useActiveAccount();\n\nconst onClick = () => {\n\tif (!smartAccount) return;\n\tconst transaction = addAdmin({\n\t\tcontract: getContract({\n\t\t\taddress: smartAccount.address,\n\t\t\tchain,\n\t\t\tclient,\n\t\t}),\n\t\taccount: smartAccount,\n\t\tadminAddress: \"0x...\", // the address of the new admin\n\t});\n\tsendTransaction(transaction);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components for Documentation Page in React\nDESCRIPTION: Imports various UI components from the documentation framework and Lucide React icons for use in the transaction documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Details, ArticleIconCard, Stack } from \"@doc\";\nimport {\n\tZapIcon,\n\tScrollTextIcon,\n\tArrowRightLeftIcon,\n\tWalletIcon,\n\tBlocksIcon,\n\tCodeIcon,\n\tFolderTreeIcon,\n\tPlugZapIcon,\n\tComponentIcon,\n\tCableIcon,\n} from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Gasless Transaction Button with OpenZeppelin\nDESCRIPTION: Example of implementing a TransactionButton component with OpenZeppelin gasless configuration. The component handles contract method calls with gasless transaction support, including transaction lifecycle events and error handling.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/gasless/openzeppelin/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n    return (\n        <TransactionButton\n        transaction={() => {\n            // Create a transaction object and return it\n            const tx = prepareContractCall({\n            contract,\n            method: \"mint\",\n            params: [address, amount],\n            });\n            return tx;\n        }}\n        onTransactionSent={(result) => {\n            console.log(\"Transaction submitted\", result.transactionHash);\n        }}\n        onTransactionConfirmed={(receipt) => {\n            console.log(\"Transaction confirmed\", receipt.transactionHash);\n        }}\n        onError={(error) => {\n            console.error(\"Transaction error\", error);\n        }}\n        gasless={{\n            provider: \"openzeppelin\",\n            relayerUrl: \"...\",\n            relayerForwarderAddress: \"...\",\n        }}\n        >\n        Confirm Transaction\n        </TransactionButton>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive SmartWallet Creation Example in C#\nDESCRIPTION: Provides a full example of creating a SmartWallet, including setting up a ThirdwebClient, creating a personal wallet, and using the SmartWallet for signing a message. It demonstrates how to configure gasless transactions and handle wallet deployment.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/account-abstraction/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = ThirdwebClient.Create(clientId: \"yourClientId\", bundleId: \"yourBundleId\");\nvar personalWallet = await PrivateKeyWallet.Create(client, \"yourPrivateKeyHex\");\n\nBigInteger chainId = 137; // Polygon mainnet\nbool gasless = true; // Enable gasless transactions\n\nvar smartWallet = await SmartWallet.Create(\n    personalWallet,\n    gasless,\n);\n\nConsole.WriteLine($\"SmartWallet address: {await smartWallet.GetAddress()}\");\n\n// Sign a message (this will also deploy your smart wallet if it hasn't been deployed yet)\nvar message = \"Hello, Thirdweb!\";\nvar signature = await wallet.PersonalSign(message);\nConsole.WriteLine($\"Signature: {signature}\");\n```\n\n----------------------------------------\n\nTITLE: Initializing a Contract Instance in Thirdweb with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a contract wrapper instance using the getContract function from the Thirdweb JS SDK. It requires a client (created via createThirdwebClient()), specifies the blockchain (ethereum), the contract's address, and optionally its ABI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/contract/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { ethereum } from \"thirdweb/chains\";\n\n// get a contract\nconst contract = getContract({\n  // the client you have created via `createThirdwebClient()`\n  client,\n  // the chain the contract is deployed on\n  chain: ethereum,\n  // the contract's address\n  address: \"0x123...\",\n  // OPTIONAL: the contract's abi\n  abi: [...],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom UI for Account Abstraction with useConnect Hook\nDESCRIPTION: This code snippet shows how to implement a custom UI for connecting to a smart account using the useConnect hook. It uses in-app wallet with Google authentication strategy and supports gas sponsoring on the Sepolia network.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/guides/react/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnect } from \"thirdweb/react\";\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { sepolia } from \"thirdweb/chains\";\n\nfunction Example() {\n\t// 1. set the `accountAbstraction` configuration\n\tconst { connect } = useConnect({\n\t\tclient,\n\t\taccountAbstraction: {\n\t\t\tchain: sepolia,\n\t\t\tsponsorGas: true,\n\t\t},\n\t});\n\n\tconst connectToSmartAccount = async () => {\n\t\t// 2. connect with the admin wallet of the smart account\n\t\tconnect(async () => {\n\t\t\tconst wallet = inAppWallet(); // or any other wallet\n\t\t\tawait wallet.connect({\n\t\t\t\tclient,\n\t\t\t\tchain: sepolia,\n\t\t\t\tstrategy: \"google\",\n\t\t\t});\n\t\t\treturn wallet;\n\t\t});\n\t};\n\n\treturn <button onClick={() => connectToSmartAccount()}>Connect</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using In-App Wallets in React Native\nDESCRIPTION: Shows how to enable email or social login using the useEmbeddedWallet hook in a React Native application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEmbeddedWallet } from \"thirdweb/react\";\nimport { useState } from \"react\";\nimport { View, TextInput, Button, Alert } from \"react-native\";\nimport { client } from \"./thirdwebClient\";\n\nfunction EmailLoginButton() {\n  const embeddedWallet = useEmbeddedWallet({\n    client,\n  });\n  const [email, setEmail] = useState(\"\");\n\n  const handleLogin = async () => {\n    try {\n      await embeddedWallet.connect({\n        strategy: \"email\",\n        email,\n      });\n    } catch (error) {\n      Alert.alert(\"Login Failed\", error.message);\n    }\n  };\n\n  return (\n    <View>\n      <TextInput\n        value={email}\n        onChangeText={setEmail}\n        placeholder=\"Enter your email\"\n        keyboardType=\"email-address\"\n      />\n\n```\n\n----------------------------------------\n\nTITLE: Using Extensions with useReadContract in React\nDESCRIPTION: Shows how to leverage thirdweb extensions to make complex queries from a contract with a simpler API. This example demonstrates getting owned NFTs from an ERC721 contract using the getOwnedNFTs extension.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/reading-state/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { useReadContract } from \"thirdweb/react\";\nimport { getOwnedNFTs } from \"thirdweb/extensions/erc721\";\n\nconst contract = getContract({\n\tclient,\n\tchain,\n\taddress: \"0x...\",\n});\n\nconst MyComponent = () => {\n\tconst ownedNFTs = useReadContract(getOwnedNFTs, {\n\t\tcontract,\n\t\taddress: \"0x...\",\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Universal Bridge with sendTransaction Hook\nDESCRIPTION: Code showing how to use the useSendTransaction hook which automatically invokes Universal Bridge when a user has insufficient funds. This example demonstrates the integration with an NFT minting function using ERC721 extension.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSendTransaction } from \"thirdweb/react\";\nimport { mintTo } from \"thirdweb/extensions/erc721\";\n\nconst { mutate: sendTx, data: transactionResult } = useSendTransaction();\n\nconst onClick = () => {\n\tconst transaction = mintTo({\n\t\tcontract,\n\t\tto: \"0x...\",\n\t\tnft: {\n\t\t\tname: \"NFT Name\",\n\t\t\tdescription: \"NFT Description\",\n\t\t\timage: \"https://example.com/image.png\",\n\t\t},\n\t});\n\tsendTx(transaction);\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing SDK and Sending Transaction with In-App Wallet in TypeScript\nDESCRIPTION: This snippet shows how to initialize the thirdweb client, connect an in-app wallet, and send a transaction to claim an NFT using TypeScript. It demonstrates the use of the createThirdwebClient, getContract, and sendTransaction functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/interact-blockchain/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient, getContract, sendTransaction } from \"thirdweb\";\nimport { sepolia } from \"thirdweb/chains\";\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet();\nconst account = await wallet.connect({\n\tclient,\n\tstrategy: \"google\",\n});\n\nconst contract = getContract({ client, address: \"0x...\" });\n\nconst transaction = claimTo({\n\tcontract,\n\tto: wallet.account.address,\n\tquantity: 1,\n});\nawait sendTransaction({ transaction, account });\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155Mintable Contract in Solidity\nDESCRIPTION: This example demonstrates how to create a custom ERC1155 contract that implements the IMintableERC1155 interface. It inherits from ERC1155 and overrides the mintTo function, allowing for custom minting logic.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Mintable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC1155.sol\";\n\ncontract Contract is ERC1155, IMintableERC1155 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC1155(\n            _name,\n            _symbol\n        )\n    {}\n\n    function mintTo(\n        address to,\n        uint256 tokenId,\n        string calldata uri,\n        uint256 amount\n    ) external override {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Admin Permissions with React in thirdweb\nDESCRIPTION: React implementation for adding a new admin to a smart account using thirdweb's extensions. The code demonstrates how to use the addAdmin function with React hooks to handle transactions for a smart account.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/permissions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { addAdmin } from \"thirdweb/extensions/erc4337\";\nimport { useSendTransaction, useActiveAccount } from \"thirdweb/react\";\nimport { getContract } from \"thirdweb\";\n\nconst { mutate: sendTransaction } = useSendTransaction();\nconst smartAccount = useActiveAccount();\n\nconst onClick = () => {\n\tif (!smartAccount) return;\n\tconst transaction = addAdmin({\n\t\tcontract: getContract({\n\t\t\taddress: smartAccount.address,\n\t\t\tchain,\n\t\t\tclient,\n\t\t}),\n\t\taccount: smartAccount,\n\t\tadminAddress: \"0x...\", // the address of the new admin\n\t});\n\tsendTransaction(transaction);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Thirdweb Client in React\nDESCRIPTION: Code snippet to create and export a thirdweb client instance using the client ID from environment variables.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// lib/client.ts\nimport { createThirdwebClient } from \"thirdweb\";\n\nconst clientId = process.env.THIRDWEB_CLIENT_ID!;\n\nexport const client = createThirdwebClient({ clientId });\n```\n\n----------------------------------------\n\nTITLE: Signing Transactions in C#\nDESCRIPTION: This method signs a transaction and returns the signed transaction data as a string. For account abstraction, it returns the signed user operation in JSON format.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/static/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nstring signedTx = await ThirdwebTransaction.Sign(transaction);\n```\n\n----------------------------------------\n\nTITLE: Using Coinbase Smart Wallet in React Native\nDESCRIPTION: Example showing how to initialize and connect to Coinbase Smart Wallet in a React Native application. Demonstrates wallet creation with app metadata and mobile configuration options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/react-native-adapter/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst wallet = createWallet(\"com.coinbase.wallet\", {\n  appMetadata: {\n    name: \"My app name\",\n  },\n  mobileConfig: {\n    callbackURL: \"https://example.com\",\n  },\n  walletConfig: {\n    options: \"smartWalletOnly\",\n  },\n});\n\nawait wallet.connect({\n  client,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SmartWallet instance in C#\nDESCRIPTION: Demonstrates how to create a SmartWallet instance using the SmartWallet.Create method. This method sets up a SmartWallet with optional gasless transactions, leveraging account abstraction for seamless blockchain interactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/account-abstraction/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar smartWallet = await SmartWallet.Create(personalWallet, chainId);\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Webhook for NFT Minting with Engine\nDESCRIPTION: Backend webhook endpoint that verifies Stripe signatures, processes successful payment events, and uses thirdweb Engine to mint and deliver an NFT to the buyer's wallet address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/guides/nft-checkout/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// src/app/api/stripe-webhook/route.ts\n\nexport const config = {\n\tapi: { bodyParser: false },\n};\n\nexport async function POST(req: NextRequest) {\n\t// Validate the webhook signature\n\t// Source: https://stripe.com/docs/webhooks#secure-webhook\n\tconst body = await req.text();\n\tconst signature = headers().get(\"stripe-signature\");\n\tconst stripe = new Stripe(\"<stripe_secret_key>\", {\n\t\tapiVersion: \"2023-10-16\",\n\t});\n\n\t// Validate and parse the payload.\n\tconst event = stripe.webhooks.constructEvent(\n\t\tbody,\n\t\tsignature,\n\t\t\"<webhook_secret_key>\",\n\t);\n\n\tif (event.type === \"charge.succeeded\") {\n\t\tconst { buyerWalletAddress } = event.data.object.metadata;\n\n\t\t// Mint an NFT to the buyer with Engine.\n\t\tconst engine = new Engine({\n\t\t\turl: \"<engine_url>\",\n\t\t\taccessToken: \"<engine_access_token>\",\n\t\t});\n\t\tawait engine.erc1155.mintTo(\n\t\t\t\"<chain_id>\",\n\t\t\t\"<nft_contract_address>\",\n\t\t\t\"<backend_wallet_address>\",\n\t\t\t{\n\t\t\t\treceiver: buyerWalletAddress,\n\t\t\t\tmetadataWithSupply: {\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tname: \"Engine Hackathon 2023\",\n\t\t\t\t\t\tdescription: \"Created with thirdweb Engine\",\n\t\t\t\t\t\timage:\n\t\t\t\t\t\t\t\"ipfs://QmakhKF5oMyxupCZ2RsmcvPRyYTHnQzYeb9mQGv3RM81n1/hat.webp\",\n\t\t\t\t\t},\n\t\t\t\t\tsupply: \"1\",\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\treturn NextResponse.json({ message: \"OK\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Thirdweb Components\nDESCRIPTION: Example of importing and using Thirdweb components and hooks in React Native\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/getting-started/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// import thirdweb hooks, extensions, provider and wallets as usual\nimport { ThirdwebProvider } from \"thirdweb/react\";\nimport { balanceOf, claimTo } from \"thirdweb/extensions/erc721\";\nimport { inAppWallet } from \"thirdweb/wallets/in-app\";\n```\n\n----------------------------------------\n\nTITLE: Creating the thirdweb Client in Next.js\nDESCRIPTION: Implementation of the thirdweb client initialization in a Next.js application. This code creates a client with either a secret key (for server-side) or client ID (for client-side) depending on the context.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/next/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// lib/client.ts\nimport { createThirdwebClient } from \"thirdweb\";\n\nconst clientId = process.env.NEXT_PUBLIC_THIRDWEB_CLIENT_ID!; // this will be used on the client\nconst secretKey = process.env.THIRDWEB_SECRET_KEY!; // this will be used on the server-side\n\nexport const client = createThirdwebClient(\n\tsecretKey ? { secretKey } : { clientId },\n);\n```\n\n----------------------------------------\n\nTITLE: Using Connection Hooks in React\nDESCRIPTION: Shows how to use thirdweb connection hooks for more customized wallet implementations in React.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnect, useDisconnect, useActiveAccount, useWalletBalance } from \"thirdweb/react\";\nimport { client } from \"./thirdwebClient\";\nimport { ethereum } from \"thirdweb/chains\";\n\nfunction CustomWalletUI() {\n  const { connect } = useConnect();\n  const { disconnect } = useDisconnect();\n  const activeAccount = useActiveAccount();\n  \n  // Get wallet balance (only when connected)\n  const { data: balance, isLoading } = useWalletBalance({\n    client,\n    chain: ethereum,\n    address: activeAccount?.address,\n  });\n\n  return (\n    <div>\n      {activeAccount ? (\n        <div>\n          <p>Connected: {activeAccount.address}</p>\n          {isLoading ? (\n            <p>Loading balance...</p>\n          ) : (\n            <p>Balance: {balance?.displayValue} {balance?.symbol}</p>\n          )}\n          <button onClick={() => disconnect()}>Disconnect</button>\n        </div>\n      ) : (\n        <button \n          onClick={() => connect({ connector: \"metamask\" })}\n        >\n          Connect MetaMask\n        </button>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Core Dependencies\nDESCRIPTION: Commands to install Thirdweb and its React Native adapter package\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/getting-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install thirdweb @thirdweb-dev/react-native-adapter\n```\n\n----------------------------------------\n\nTITLE: Sending and Confirming a Transaction in Thirdweb\nDESCRIPTION: Shows how to send a transaction and wait for it to be mined. This is useful for ensuring a transaction is fully confirmed on-chain before proceeding to the next step.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/send/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendAndConfirmTransaction } from \"thirdweb\";\nimport { createWallet } from \"thirdweb/wallets\";\n\nconst wallet = createWallet(\"io.metamask\");\nconst account = await wallet.connect({ client });\n\nconst receipt = await sendAndConfirmTransaction({\n\ttransaction,\n\taccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Pre-Claim Hook in Solidity\nDESCRIPTION: Internal function that runs before every claim, allowing custom logic to be added before token claims.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeClaim(\n    uint256 tokenId,\n    address receiver,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Connecting Smart Accounts with TypeScript\nDESCRIPTION: This snippet demonstrates how to create and connect a personal wallet and a smart wallet using TypeScript. It includes configuration for the client, chain, and sponsored transactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { inAppWallet, smartWallet } from \"thirdweb/wallets\";\nimport { sepolia } from \"thirdweb/chains\";\n\nconst client = createThirdwebClient({\n\tclientId,\n});\n\n// First, create and connect the personal wallet, which can be any wallet (in-app, metamask, etc.)\nconst personalWallet = inAppWallet();\nconst personalAccount = await personalWallet.connect({\n\tclient,\n\tstrategy: \"google\",\n});\n// Then, create and connect the Smart wallet\nconst wallet = smartWallet({\n\tclient,\n\tchain: sepolia, // the chain where your smart wallet will be or is deployed\n\tsponsorGas: true, // enable or disable sponsored transactions\n});\nconst smartAccount = await wallet.connect({\n\tclient,\n\tpersonalAccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Minting NFTs with Signature in Solidity\nDESCRIPTION: This function mints tokens according to the provided mint request. It takes a MintRequest struct and a signature as input, and returns the signer's address. The function is payable, allowing for token purchases.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155SignatureMint/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mintWithSignature(MintRequest calldata req, bytes calldata signature)\n    external\n    payable\n    returns (address signer)\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectButton for Authentication in Next.js\nDESCRIPTION: Implementation of the thirdweb ConnectButton component for handling authentication in a Next.js application. This code configures the button with login, logout, and auth verification functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/next/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// app/page.tsx\nimport type { NextPage } from \"next\";\nimport { ConnectButton } from \"thirdweb/react\";\nimport { client } from \"@/lib/client\";\nimport { generatePayload, isLoggedIn, login, logout } from \"@/actions/login\"; // we'll create this file in the next section\n\nconst Page = () => {\n\treturn (\n\t\t<ConnectButton\n\t\t\tclient={client}\n\t\t\tauth={{\n\t\t\t\tisLoggedIn: async (address) => {\n\t\t\t\t\tconsole.log(\"checking if logged in!\", { address });\n\t\t\t\t\treturn await isLoggedIn();\n\t\t\t\t},\n\t\t\t\tdoLogin: async (params) => {\n\t\t\t\t\tconsole.log(\"logging in!\");\n\t\t\t\t\tawait login(params);\n\t\t\t\t},\n\t\t\t\tgetLoginPayload: async ({ address }) => generatePayload({ address }),\n\t\t\t\tdoLogout: async () => {\n\t\t\t\t\tconsole.log(\"logging out!\");\n\t\t\t\t\tawait logout();\n\t\t\t\t},\n\t\t\t}}\n\t\t/>\n\t);\n};\n\nexport default Page;\n```\n\n----------------------------------------\n\nTITLE: Fetching Owned NFTs using ERC1155 Extension in Thirdweb\nDESCRIPTION: Demonstrates how to use the getOwnedNFTs extension to fetch all ERC1155 tokens owned by a specific address. This read extension combines multiple contract calls into a single convenient function that returns owned NFTs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/use/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { getOwnedNFTs } from \"thirdweb/extensions/erc1155\";\n\n// get the contract\nconst contract = getContract({...});\n\n// since this is a read extension, we can just await the result\nconst ownedNFTs = await getOwnedNFTs({\n\tcontract,\n\taddress: \"0x5678...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Extension for ERC20 Token Distribution\nDESCRIPTION: Complete example of a smart contract implementing the Drop extension for ERC20 token distribution, including constructor and required override functions for claim management and token transfers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/Drop.sol\";\nimport \"@thirdweb-dev/contracts/base/ERC20Base.sol\";\nimport \"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\";\n\n/// This is an EXAMPLE of usage of `Drop` for distributing ERC20 tokens.\n\ncontract MyContract is ERC20Base, Drop {\n    /*//////////////////////////////////////////////////////////////\n                            Constructor\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _defaultAdmin, string memory _name, string memory _symbol)\n        ERC20Base(_defaultAdmin, _name, _symbol)\n    {}\n\n    /*//////////////////////////////////////////////////////////////\n                        Internal (overrideable) functions\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Runs before every `claim` function call.\n    function _beforeClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual override {\n      // Your custom implementation logic here\n    }\n\n    /// @dev Runs after every `claim` function call.\n    function _afterClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual override {\n      // Your custom implementation logic here\n    }\n\n    /// @dev Collects and distributes the primary sale value of tokens being claimed.\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual override {\n        if (_pricePerToken == 0) {\n            return;\n        }\n\n        uint256 totalPrice = (_quantityToClaim * _pricePerToken) / 1 ether;\n        require(totalPrice > 0, \"quantity too low\");\n\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n            require(msg.value == totalPrice, \"Must send total price.\");\n        }\n\n        address saleRecipient = _primarySaleRecipient;\n        CurrencyTransferLib.transferCurrency(\n            _currency,\n            msg.sender,\n            saleRecipient,\n            totalPrice\n        );\n    }\n\n    /// @dev Transfers the tokens being claimed.\n    function _transferTokensOnClaim(address _to, uint256 _quantityBeingClaimed)\n        internal\n        virtual\n        override\n        returns (uint256)\n    {\n        _mint(_to, _quantityBeingClaimed);\n        return 0;\n    }\n\n    /// @dev Checks whether platform fee info can be set in the given execution context.\n    function _canSetClaimConditions()\n        internal\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return msg.sender == owner();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens with ClaimableERC721 Module in TypeScript\nDESCRIPTION: This snippet demonstrates how to mint tokens using the ClaimableERC721 module in thirdweb. It creates a transaction to mint a specified quantity of tokens to a given address and then sends the transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/modular/interact/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClaimableERC721 } from \"thirdweb/modules\";\n\nconst transaction = ClaimableERC721.mint({\n contract,\n to: \"0x...\", // Address to mint tokens to\n quantity: 2, // Amount of tokens to mint\n});\n\n// Send the transaction\nawait sendTransaction({ transaction, account });\n```\n\n----------------------------------------\n\nTITLE: Embedding Universal Bridge with PayEmbed Component\nDESCRIPTION: Implementation example of thirdweb's PayEmbed component that allows users to onramp and purchase crypto directly within the application interface. This embedded solution provides a customizable crypto payment experience.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider, PayEmbed } from \"thirdweb/react\";\n\nconst client = createThirdwebClient({ clientId: your_client_id });\n\nexport default function App() {\n\treturn (\n\t\t<ThirdwebProvider>\n\t\t\t<PayEmbed client={client} />\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Balance with thirdweb in TypeScript\nDESCRIPTION: This snippet shows how to get the wallet balance using the getWalletBalance function. It requires client, chain, and address parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/interact-with-wallets/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait getWalletBalance({\n\tclient,\n\tchain,\n\taddress: account.address,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Smart Account with In-App Wallet in React\nDESCRIPTION: Shows how to set up a thirdweb Provider with an In-App Wallet configuration that enables gasless transactions through account abstraction. The setup includes creating a smart account on the Sepolia network with gas sponsorship enabled.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/enable-gasless/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallets = [inAppWallet({\n\tsmartAccount: {\n\t\tchain: \"sepolia\",\n\t\tsponsorGas: true,\n\t},\n})];\n\nexport default function App() {\n\treturn (\n\t\t<ThirdwebProvider>\n\t\t\t<ConnectButton\n\t\t\t\tclient={client}\n\t\t\t\twallets={wallets}\n\t\t\t/>\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading from IPFS using thirdweb SDK\nDESCRIPTION: This snippet demonstrates how to download a file from IPFS using the thirdweb SDK. It uses the 'download' function from the 'thirdweb/storage' module.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/storage/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { download } from \"thirdweb/storage\";\n\nconst file = await download({\n\tclient,\n\turi: \"ipfs://Qm...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing mintTo Extension for ERC721 Tokens in Thirdweb SDK\nDESCRIPTION: This extension handles the minting process for ERC721 tokens. It uploads the NFT metadata to IPFS before calling the contract's mintTo function. The extension uses prepareContractCall to set up the transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/create/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareContractCall, type BaseTransactionOptions } from \"thirdweb\";\n\nexport function mintTo(\n\toptions: BaseTransactionOptions<{ to: string; nft: NFTMetadata }>,\n) {\n\treturn prepareContractCall({\n\t\tcontract: options.contract,\n\t\tmethod: \"function mintTo(address to, string uri)\",\n\t\tparams: async () => {\n\t\t\tconst tokenURI = (await upload({\n\t\t\t\tclient: options.contract.client,\n\t\t\t\tfiles: [options.nft],\n\t\t\t})[0]) as string;\n\t\t\treturn [options.to, tokenURI] as const;\n\t\t},\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation for IPFS Storage\nDESCRIPTION: TypeScript implementation demonstrating storage initialization, file upload, URL resolution, and data download from IPFS\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/storage/how-to-use-storage/upload-files-to-ipfs/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThirdwebStorage } from \"@thirdweb-dev/storage\";\n\n// First, instantiate the thirdweb IPFS storage\nconst storage = new ThirdwebStorage({\nsecretKey: \"YOUR_SECRET_KEY\", // You can get one from dashboard settings\n});\n\n// Here we get the IPFS URI of where our metadata has been uploaded\nconst uri = await storage.upload(metadata);\n// This will log a URL like ipfs://QmWgbcjKWCXhaLzMz4gNBxQpAHktQK6MkLvBkKXbsoWEEy/0\nconsole.info(uri);\n\n// Here we a URL with a gateway that we can look at in the browser\nconst url = await storage.resolveScheme(uri);\n// This will log a URL like https://ipfs.thirdwebstorage.com/ipfs/QmWgbcjKWCXhaLzMz4gNBxQpAHktQK6MkLvBkKXbsoWEEy/0\nconsole.info(url);\n\n// You can also download the data from the uri\nconst data = await storage.downloadJSON(uri);\n```\n\n----------------------------------------\n\nTITLE: Unity Email Wallet Implementation\nDESCRIPTION: Implementation for email-based wallet connections in Unity using thirdweb SDK. Includes balance checking functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic async void ConnectWithEmail(string email)\n{\n    try {\n        string address = await sdk.wallet.Connect(new WalletConnection() {\n            provider = WalletProvider.EmbeddedWallet,\n            email = email,\n            chainId = 1 // Ethereum Mainnet\n        });\n        \n        walletAddressText.text = \"Connected: \" + address;\n        \n        // Read wallet balance\n        var balance = await sdk.wallet.GetBalance();\n        Debug.Log($\"Balance: {balance.DisplayValue} {balance.Symbol}\");\n    }\n    catch (System.Exception e) {\n        Debug.LogError(\"Error connecting wallet: \" + e.Message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ThirdwebProvider with RPC Edge in React\nDESCRIPTION: Sets up a React application with RPC Edge by passing the client ID to the ThirdwebProvider component. This configuration enables enhanced RPC capabilities for ethereum blockchain interactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/rpc-edge/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThirdwebProvider } from \"@thirdweb-dev/react\";\n\nfunction MyApp() {\n\treturn (\n\t\t<ThirdwebProvider activeChain=\"ethereum\" clientId=\"your-client-id\">\n\t\t\t<YourApp />\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Minting NFTs using ERC721 Extension in Thirdweb\nDESCRIPTION: Shows how to use the mintTo extension to mint an ERC721 token. This extension handles uploading metadata to IPFS before minting and prepares a transaction that must be sent using the sendTransaction function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/use/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { mintTo } from \"thirdweb/extensions/erc721\";\n\n// get the contract\nconst contract = getContract({...});\n\n// call the extension function to prepare the transaction\nconst transaction = mintTo({\n\tcontract,\n\tto: \"0x5678...\",\n    nft: {\n        name: \"My NFT\",\n        description: \"This is my NFT\",\n        image: \"https://example.com/image.png\",\n    },\n});\n\n// Send the transaction\nconst transactionResult = await sendTransaction({\n  transaction,\n  account,\n});\n```\n\n----------------------------------------\n\nTITLE: Express Webhook Endpoint Implementation in TypeScript\nDESCRIPTION: Complete Express.js endpoint implementation for handling webhooks with signature and timestamp validation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/webhooks/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport { isValidSignature, isExpired } from \"./webhookHelper\";\n\nconst app = express();\nconst port = 3000;\n\nconst WEBHOOK_SECRET = \"<your_webhook_auth_secret>\";\n\napp.use(bodyParser.text());\n\napp.post(\"/webhook\", (req, res) => {\n\tconst signatureFromHeader = req.header(\"X-Engine-Signature\");\n\tconst timestampFromHeader = req.header(\"X-Engine-Timestamp\");\n\n\tif (!signatureFromHeader || !timestampFromHeader) {\n\t\treturn res.status(401).send(\"Missing signature or timestamp header\");\n\t}\n\n\tif (\n\t\t!isValidSignature(\n\t\t\treq.body,\n\t\t\ttimestampFromHeader,\n\t\t\tsignatureFromHeader,\n\t\t\tWEBHOOK_SECRET,\n\t\t)\n\t) {\n\t\treturn res.status(401).send(\"Invalid signature\");\n\t}\n\n\tif (isExpired(timestampFromHeader, 300)) {\n\t\treturn res.status(401).send(\"Request has expired\");\n\t}\n\n\tres.status(200).send(\"Webhook received!\");\n});\n\napp.listen(port, () => {\n\tconsole.log(`Server started on http://localhost:${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying an NFT Contract with thirdweb Engine API in TypeScript\nDESCRIPTION: This code deploys a thirdweb NFT drop contract using the Engine API. It requires gas funds for deployment and returns a queueId for tracking the deployment transaction status. The contract is initialized with a name, symbol, and primary sale recipient address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/get-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst resp = await fetch(\"<engine_url>/deploy/<chain>/prebuilts/nft-drop\", {\n\tmethod: \"POST\",\n\theaders: {\n\t\t\"Content-Type\": \"application/json\",\n\t\tAuthorization: \"Bearer <access_token>\",\n\t\t\"x-backend-wallet-address\": \"<backend_wallet_address>\",\n\t},\n\tbody: JSON.stringify({\n\t\tcontractMetadata: {\n\t\t\tname: \"thirdweb Engine example\",\n\t\t\tsymbol: \"eng\",\n\t\t\tprimary_sale_recipient: \"0x3EcDBF3B911d0e9052b64850693888b008e18373\",\n\t\t},\n\t}),\n});\n\nconst { result } = await resp.json();\n// queueId is a reference to the transaction queued by Engine.\nconsole.log(\"Queue ID:\", result.queueId);\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google in TypeScript\nDESCRIPTION: This snippet shows how to authenticate and connect using Google in a non-React TypeScript environment with thirdweb's in-app wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/build-your-own-ui/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet();\nconst account = await wallet.connect({\n\tclient,\n\tstrategy: \"google\",\n});\n\n// use the account to send transactions\n```\n\n----------------------------------------\n\nTITLE: Creating thirdweb Client in React\nDESCRIPTION: Sets up a reusable thirdweb client instance for use throughout a React application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// thirdwebClient.ts\nimport { createThirdwebClient } from \"thirdweb\";\n\nexport const client = createThirdwebClient({\n  clientId: process.env.NEXT_PUBLIC_THIRDWEB_CLIENT_ID,\n});\n```\n\n----------------------------------------\n\nTITLE: Preparing and sending a generic contract call transaction\nDESCRIPTION: Creating a generic contract call using prepareContractCall function by specifying the solidity method signature and parameters, then sending the transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/getting-started/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContract, prepareContractCall, sendTransaction } from \"thirdweb\";\nimport { sepolia } from \"thirdweb/chains\";\nimport { toWei } from \"thirdweb/utils\";\n\n// 1. Define the contract\nconst contract = getContract({\n    client,\n    address: \"0x1234...\",\n    chain: sepolia,\n});\n\n// 2. Prepare the transaction\nconst transaction = prepareContractCall({\n  contract,\n  // Pass the method signature that you want to call\n  method: \"function mintTo(address to, uint256 amount)\",\n  // and the params for that method\n  // Their types are automatically inferred based on the method signature\n  params: [\"0x123...\", toWei(\"100\")],\n});\n\n// 3. Send the transaction\nconst result = await sendTransaction({\n  transaction,\n  account,\n});\n\nconsole.log(\"Transaction hash:\", result.transactionHash);\n```\n\n----------------------------------------\n\nTITLE: Wallet Pregeneration cURL Command\nDESCRIPTION: Complete cURL command example for making a wallet pregeneration API request with all required headers and body parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/pregenerate-wallets/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://in-app-wallet.thirdweb.com/api/v1/pregenerate' \\\n  -H 'x-ecosystem-id: ecosystem.example-eco-123' \\\n  -H 'x-ecosystem-partner-id: 1415d24e-c7b0-4fce-846e-740841ef2c32' \\\n  -H 'x-secret-key: 9f8e7d6c5b4a3f2e1d0c9b8a7ffge434b2a1f0e9d8c7b6a5f4e3d2c1b0a9f8e7' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"strategy\": \"email\",\n    \"email\": \"user@example.com\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Implementing OIDC Authentication in TypeScript\nDESCRIPTION: Example of how to authenticate a user using OIDC-compatible auth in a TypeScript application. Demonstrates direct wallet connection and account management.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/configuration/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet();\n\nconst account = await wallet.connect({\n\tclient,\n\tstrategy: \"jwt\",\n\tjwt,\n});\n\n// use the account to send transactions\n```\n\n----------------------------------------\n\nTITLE: Connecting InAppWallet with Guest Authentication in Unity\nDESCRIPTION: Demonstrates connecting a wallet using guest authentication for easy onboarding. The code sets up InAppWalletOptions with the Guest auth provider and connects using the EcosystemWallet provider.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/in-app-wallet/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar inAppWalletOptions = new InAppWalletOptions(\n    authprovider: AuthProvider.Guest\n);\nvar options = new WalletOptions(\n    provider: WalletProvider.EcosystemWallet, \n    chainId: 1, \n    inAppWalletOptions: inAppWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Executing Blockchain Transactions with Nebula AI in C#\nDESCRIPTION: Demonstrates how to use Nebula AI to directly execute blockchain transactions based on a simple prompt, including error handling and receipt logging.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/nebula/quickstart/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Execute, this directly sends transactions\nvar executionResult = await nebula.Execute(\"Approve 1 USDC to vitalik.eth\", wallet: myWallet, context: new NebulaContext(contractAddresses: new List<string>() { usdcAddress }));\nif (executionResult.TransactionReceipts != null && executionResult.TransactionReceipts.Count > 0)\n{\n    Console.WriteLine($\"Receipt: {executionResult.TransactionReceipts[0]}\");\n}\nelse\n{\n    Console.WriteLine($\"Message: {executionResult.Message}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TransactionButton in React with TypeScript\nDESCRIPTION: Example implementation of the TransactionButton component showing how to create and handle blockchain transactions. The component handles transaction submission, confirmation, and error states while providing network switching functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/TransactionButton/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Example() {\n\treturn (\n\t\t<TransactionButton\n\t\t\ttransaction={() => {\n\t\t\t\t// Create a transaction object and return it\n\t\t\t\tconst tx = prepareContractCall({\n\t\t\t\t\tcontract,\n\t\t\t\t\tmethod: \"mint\",\n\t\t\t\t\tparams: [address, amount],\n\t\t\t\t});\n\t\t\t\treturn tx;\n\t\t\t}}\n\t\t\tonTransactionSent={(result) => {\n\t\t\t\tconsole.log(\"Transaction submitted\", result.transactionHash);\n\t\t\t}}\n\t\t\tonTransactionConfirmed={(receipt) => {\n\t\t\t\tconsole.log(\"Transaction confirmed\", receipt.transactionHash);\n\t\t\t}}\n\t\t\tonError={(error) => {\n\t\t\t\tconsole.error(\"Transaction error\", error);\n\t\t\t}}\n\t\t>\n\t\t\tConfirm Transaction\n\t\t</TransactionButton>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Login Button Component in Next.js\nDESCRIPTION: Implementation of a custom login button component for thirdweb authentication in a Next.js application. This component handles wallet connection, payload generation, signature, and login verification.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/next/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// LoginButton.tsx\n\"use client\";\n\nimport { useActiveAccount, useActiveWalletChain } from \"thirdweb/react\";\nimport { generatePayload, login } from \"@/actions/login\"; // we'll add this file in the next section\nimport { signLoginPayload } from \"thirdweb/auth\";\n\nexport const LoginButton = () => {\n\tconst account = useActiveAccount();\n\tconst chain = useActiveWalletChain();\n\tconst { connect, isConnecting, error } = useConnect();\n\n\tasync function handleClick() {\n\t\tlet activeAccount;\n\t\tif (!account) {\n\t\t\tconst wallet = await connect(async () => {\n\t\t\t\tconst wallet = createWallet(\"io.metamask\"); // update this to your wallet of choice or create a custom UI to select wallets\n\t\t\t\tawait wallet.connect();\n\t\t\t\treturn wallet;\n\t\t\t});\n\t\t\tactiveAccount = wallet.getAccount();\n\t\t} else {\n\t\t\tactiveAccount = account;\n\t\t}\n\t\t// Step 1: fetch the payload from the server\n\t\tconst payload = await generatePayload({\n\t\t\taddress: account.address,\n\t\t\tchainId: chain.id,\n\t\t});\n\t\t// Step 2: Sign the payload\n\t\tconst signatureResult = await signLoginPayload({ account, payload });\n\t\t// Step 3: Send the signature to the server for verification\n\t\tconst finalResult = await login(signatureResult);\n\n\t\talert(finalResult.valid ? \"Login successful\" : \"Login failed\");\n\t}\n\n\treturn (\n\t\t<button disabled={!account} onClick={handleClick}>\n\t\t\tLogin\n\t\t</button>\n\t);\n};\n\nexport default LoginButton;\n```\n\n----------------------------------------\n\nTITLE: Verify Claim Function\nDESCRIPTION: Function to validate a token claim request against active claim conditions and allowlist criteria.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nstruct AllowlistProof {\n    bytes32[] proof;\n    uint256 quantityLimitPerWallet;\n    uint256 pricePerToken;\n    address currency;\n}\n\nfunction verifyClaim(\n    address claimer,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof\n) public view returns (bool isOverride);\n```\n\n----------------------------------------\n\nTITLE: Defining ClaimConditionList Struct in Solidity for Drop Contracts\nDESCRIPTION: This Solidity struct defines the structure for managing a list of claim conditions in Drop contracts. It includes mappings for storing conditions and tracking claimed supply by wallet address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/drop/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ClaimConditionList {\n  uint256 currentStartId;\n  uint256 count;\n  mapping(uint256 => ClaimCondition) conditions;\n  mapping(uint256 => mapping(address => uint256)) supplyClaimedByWallet;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Session Key Permissions with TypeScript in thirdweb\nDESCRIPTION: TypeScript implementation for adding a session key to a smart account with detailed permissions. This code configures authorized contract targets, transaction limits, and time-based access restrictions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/permissions/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addSessionKey } from \"thirdweb/extensions/erc4337\";\nimport { wallet } from \"thirdweb/wallets\";\nimport { sendTransaction, getContract } from \"thirdweb\";\n\nconst wallet = new smartWallet(config);\nconst smartAccount = await smartWallet.connect({\n\tclient,\n\tpersonalAccount,\n});\n\nconst transaction = addSessionKey({\n\tcontract: getContract({\n\t\taddress: smartAccount.address,\n\t\tchain,\n\t\tclient,\n\t}),\n\taccount: smartAccount,\n\tsessionKeyAddress: \"0x...\", // the address of the new session key\n\tpermissions: {\n\t\tapprovedTargets: \"*\", // the addresses of allowed contracts, or '*' for any contract\n\t\tnativeTokenLimitPerTransaction: 0.1, // the maximum amount of native token (in ETH) that the session key can spend per transaction\n\t\tpermissionStartTimestamp: new Date(), // the date when the session key becomes active\n\t\tpermissionEndTimestamp: new Date(Date.now() + 24 * 60 * 60 * 1000), // the date when the session key expires\n\t},\n});\nawait sendTransaction({\n\ttransaction,\n\taccount: smartAccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Smart Accounts with useConnect in React\nDESCRIPTION: This snippet demonstrates how to use the useConnect hook to connect a smart account with account abstraction configuration. It shows setting up the connection, enabling sponsored transactions, and connecting with an admin wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/account-abstraction/build-your-own-ui/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useConnect } from \"thirdweb/react\";\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { sepolia } from \"thirdweb/chains\";\n\nfunction App() {\n\t// 1. set the `accountAbstraction` configuration\n\tconst { connect } = useConnect({\n\t\tclient,\n\t\taccountAbstraction: {\n\t\t\tchain: sepolia, // the chain where your smart accounts will be or is deployed\n\t\t\tsponsorGas: true, // enable or disable sponsored transactions\n\t\t},\n\t});\n\n\tconst connectToSmartAccount = async () => {\n\t\t// 2. connect with the admin wallet of the smart account\n\t\tconnect(async () => {\n\t\t\tconst wallet = inAppWallet(); // or any other wallet\n\t\t\tawait wallet.connect({\n\t\t\t\tclient,\n\t\t\t\tchain: sepolia,\n\t\t\t\tstrategy: \"google\",\n\t\t\t});\n\t\t\treturn wallet;\n\t\t});\n\t};\n\n\treturn <button onClick={() => connectToSmartAccount()}>Connect</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions with Smart Accounts in Unity\nDESCRIPTION: This C# code snippet shows how to execute a transaction (minting an NFT) using a smart account in a Unity application. It demonstrates how to get the smart wallet address and interact with an ERC721 contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/get-started/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Thirdweb;\npublic async void MintNFT()\n{\n  // The ThirdwebManger prefab holds the smart wallet connection state\n  var sdk = ThirdwebManager.Instance.SDK;\n  // Get the connected smart wallet address\n  var smartWalletAddress = await sdk.Wallet.GetAddress();\n  // Interact with contracts\n  Contract contract = sdk.GetContract(\"0x...\");\n  await contract.ERC721.Mint(new NFTMetadata()\n    {\n      name = \"My NFT\",\n      description = \"My NFT description\",\n      image = \"https://example.com/image.png\",\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating SIWE with ConnectButton component\nDESCRIPTION: Shows how to add SIWE authentication to the ConnectButton component by configuring the auth option with necessary callback functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/auth/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\nimport {\n  generatePayload,\n  getUser,\n  login,\n  logout,\n} from \"@/server/actions/auth\";\n\nexport default function App() {\n  const [loggedIn, setLoggedIn] = useState(false);\n  return (\n    // The ThirdwebProvider should be at the root of your application, but the ConnectButton can be anywhere\n    <ThirdwebProvider>\n      <ConnectButton\n        client={client}\n        auth={{\n          getLoginPayload: async (params) => {\n            // here you should call your backend, using generatePayload to return\n            // a SIWE compliant login payload to the client\n            return generatePayload(params);\n          },\n          doLogin: async (params) => {\n            // here you should call your backend to verify the signed payload passed in params\n            // this will verify that the signature matches the intended wallet\n            return login(params);\n          },\n          isLoggedIn: async () => {\n            // here you should ask you backend if the user is logged in\n            // can use cookies, storage, or your method of choice\n            const user = await getUser();\n            return !!user;\n          },\n          doLogout: async () => {\n            // here you should call your backend to logout the user if needed\n            // and delete any local auth tokens\n            return logout();\n          },\n        }}\n      />\n    </ThirdwebProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Batch Transactions Function\nDESCRIPTION: Function to execute multiple transactions in sequence, callable only by admin or entrypoint.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/AccountExtension/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction executeBatch(\n    address[] calldata _target,\n    uint256[] calldata _value,\n    bytes[] calldata _calldata\n) external virtual onlyAdminOrEntrypoint {\n    require(_target.length == _calldata.length && _target.length == _value.length, \"Account: wrong array lengths.\");\n    for (uint256 i = 0; i < _target.length; i++) {\n        _call(_target[i], _value[i], _calldata[i]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication with ConnectButton in React\nDESCRIPTION: Example of adding authentication capabilities to the ConnectButton component. This configuration enables user login via wallet signature, with functions for checking login status, handling login/logout, and generating authentication payloads.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/ConnectButton/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n<ConnectButton\n\tclient={client}\n\tauth={{\n\t\tisLoggedIn: async (address) => {\n\t\t\tconsole.log(\"checking if logged in!\", { address });\n\t\t\treturn await isLoggedIn();\n\t\t},\n\t\tdoLogin: async (params) => {\n\t\t\tconsole.log(\"logging in!\");\n\t\t\tawait login(params);\n\t\t},\n\t\tgetLoginPayload: async ({ address }) => generatePayload({ address }),\n\t\tdoLogout: async () => {\n\t\t\tconsole.log(\"logging out!\");\n\t\t\tawait logout();\n\t\t},\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Common Query Parameters for Insight API\nDESCRIPTION: Defines the common query parameters that can be used with thirdweb Insight API endpoints, including pagination, sorting, grouping, and aggregation options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CommonQueryParams {\n\tpage?: number;      // Default: 0\n\tlimit?: number;     // Default: 20, must be > 0\n\tsort_by?: \"block_number\" | \"block_timestamp\" | \"transaction_index\";\n\tsort_order?: \"asc\" | \"desc\";\n\tgroup_by?: string;  // Group results by a specific field\n\taggregate?: string[]; // Apply aggregate functions (count, sum, avg, etc.) to grouped results\n}\n```\n\n----------------------------------------\n\nTITLE: Chatting with Nebula AI Using Wallet Context in C#\nDESCRIPTION: Demonstrates how to chat with the Nebula AI, passing wallet context to enable the AI to access and respond about wallet-specific information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/nebula/quickstart/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Chat, passing wallet context\nvar response1 = await nebula.Chat(message: \"What is my wallet address?\", wallet: myWallet);\nConsole.WriteLine($\"Response 1: {response1.Message}\");\n```\n\n----------------------------------------\n\nTITLE: Signing a Message with In-App Wallet in TypeScript\nDESCRIPTION: This example demonstrates how to sign a message using the inAppWallet.sign() method. It takes a string message as an argument.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/interact-with-wallets/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait inAppWallet.sign(\"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Sending a Transaction with Thirdweb\nDESCRIPTION: Demonstrates how to send a prepared transaction to the blockchain using a wallet. This requires a connected wallet account and the prepared transaction object.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/send/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction } from \"thirdweb\";\nimport { createWallet } from \"thirdweb/wallets\";\n\nconst wallet = createWallet(\"io.metamask\");\nconst account = await wallet.connect({ client });\n\nconst transactionResult = await sendTransaction({\n\ttransaction,\n\taccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Batch Executing Transactions with Nebula AI in C#\nDESCRIPTION: Shows how to perform batch execution of transactions using Nebula AI, including multi-step processes like resolving ENS names and approving token transfers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/nebula/quickstart/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Batch execute\nvar batchExecutionResult = await nebula.Execute(\n    new List<NebulaChatMessage>\n    {\n        new(\"What's the address of vitalik.eth\", NebulaChatRole.User),\n        new(\"The address of vitalik.eth is 0xd8dA6BF26964aF8E437eEa5e3616511D7G3a3298\", NebulaChatRole.Assistant),\n        new(\"Approve 1 USDC to them\", NebulaChatRole.User),\n    },\n    wallet: myWallet,\n    context: new NebulaContext(contractAddresses: new List<string>() { usdcAddress })\n);\nif (batchExecutionResult.TransactionReceipts != null && batchExecutionResult.TransactionReceipts.Count > 0)\n{\n    Console.WriteLine($\"Receipts: {JsonConvert.SerializeObject(batchExecutionResult.TransactionReceipts, Formatting.Indented)}\");\n}\nelse\n{\n    Console.WriteLine($\"Message: {batchExecutionResult.Message}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Connect UI Components Integration - React\nDESCRIPTION: Implementation of in-app wallet with thirdweb's prebuilt connect UI components.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst client = createThirdwebClient({ clientId });\nconst wallets = [inAppWallet({\n\tauth: { options: [\"email\", \"passkey\", \"google\"] }\n})];\n\nexport default function App() {\n\treturn (\n\t\t<ThirdwebProvider>\n\t\t\t<ConnectButton client={client} wallets={wallets} />\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating a Transaction in Thirdweb\nDESCRIPTION: Shows how to simulate a transaction to check if it would be successful without actually submitting it to the blockchain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/send/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simulateTransaction } from \"thirdweb\";\n\nconst result = await simulateTransaction({ transaction });\nconsole.log(\"simulation result\", result);\n```\n\n----------------------------------------\n\nTITLE: Authenticating Engine Requests\nDESCRIPTION: Example of making an authenticated request to Engine using the JWT token\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/keypair-authentication/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait fetch(`${engineBaseUrl}/backend-wallet/get-all`, {\n\theaders: {\n\t\tauthorization: `Bearer ${accessToken}`,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoConnect Component\nDESCRIPTION: Example implementation of the AutoConnect component with wallet configuration and client setup. Shows how to integrate various wallet providers including MetaMask, Coinbase, and Rainbow.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/AutoConnect/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createWallet, inAppWallet } from \"thirdweb/wallets\";\nimport { AutoConnect } from \"thirdweb/react\";\n\n// wallets used in your app\nconst wallets = [\n\tinAppWallet(),\n\tcreateWallet(\"io.metamask\"),\n\tcreateWallet(\"com.coinbase.wallet\"),\n\tcreateWallet(\"me.rainbow\"),\n];\n\nfunction Example() {\n\treturn (\n\t\t<AutoConnect\n\t\t\tclient={client}\n\t\t\ttimeout={10000}\n\t\t\twallets={wallets}\n\t\t\tappMetadata={appMetadata}\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Thirdweb Client for Server-Side Usage in TypeScript\nDESCRIPTION: This snippet shows how to create a Thirdweb client for server-side usage. It uses a secret key instead of a client ID. The client provides access to Thirdweb services, including RPC access, IPFS functionality, and Account Abstraction infrastructure.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/client/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\n\nconst client = createThirdwebClient({\n\tsecretKey: \"<your_secret_key>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Session Key Permissions in Smart Account\nDESCRIPTION: Shows how to add a new session key with specific permissions including approved targets, native token limits, and time-based restrictions using thirdweb's erc4337 extension.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/account-abstraction/permissions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { addSessionKey } from \"thirdweb/extensions/erc4337\";\nimport { useSendTransaction, useActiveAccount } from \"thirdweb/react\";\nimport { getContract } from \"thirdweb\";\n\nconst { mutate: sendTransaction } = useSendTransaction();\nconst smartAccount = useActiveAccount();\n\nconst onClick = () => {\n\tif (!smartAccount) return;\n\tconst transaction = addSessionKey({\n\t\tcontract: getContract({\n\t\t\taddress: smartAccount.address,\n\t\t\tchain,\n\t\t\tclient,\n\t\t}),\n\t\taccount: smartAccount,\n\t\tsessionKeyAddress: \"0x...\", // the address of the new session key\n\t\tpermissions: {\n\t\t\tapprovedTargets: \"*\", // the addresses of allowed contracts, or '*' for any contract\n\t\t\tnativeTokenLimitPerTransaction: 0.1, // the maximum amount of native token (in ETH) that the session key can spend per transaction\n\t\t\tpermissionStartTimestamp: new Date(), // the date when the session key becomes active\n\t\t\tpermissionEndTimestamp: new Date(Date.now() + 24 * 60 * 60 * 1000), // the date when the session key expires\n\t\t},\n\t});\n\tsendTransaction(transaction);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20Drop Contract in Solidity\nDESCRIPTION: This example demonstrates how to create a custom token contract by inheriting from ERC20Drop. It includes a constructor that initializes the contract with necessary parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/drop/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC20Drop.sol\";\n\ncontract MyToken is ERC20Drop {\n\t  constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _primarySaleRecipient\n    )\n        ERC20Drop(\n            _defaultAdmin,\n            _name,\n            _symbol,\n            _primarySaleRecipient\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155ClaimConditions Contract in Solidity\nDESCRIPTION: This snippet demonstrates a complete example of implementing the ERC1155ClaimConditions extension. It inherits from ERC1155, LazyMint, and DropSinglePhase1155 contracts and includes overridable functions for customization.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155ClaimConditions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC1155A.sol\";\nimport \"@thirdweb-dev/contracts/extension/LazyMint.sol\";\nimport \"@thirdweb-dev/contracts/extension/DropSinglePhase1155.sol\";\n\ncontract Contract is ERC1155, LazyMint, DropSinglePhase1155 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC1155(\n            _name,\n            _symbol\n        )\n    {}\n\n    function _canLazyMint() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    /// @dev Runs before every `claim` function call.\n    function _beforeClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual override {\n      // Your custom implementation logic here\n    }\n\n    /// @dev Runs after every `claim` function call.\n    function _afterClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual override {\n      // Your custom implementation logic here\n    }\n\n    function _canSetClaimConditions() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual override {\n        // Your custom implementation here\n    }\n\n    function _transferTokensOnClaim(address _to, uint256 _quantityBeingClaimed)\n        internal\n        virtual\n        override\n        returns (uint256 startTokenId)\n    {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading NFT Balance with SDK v5\nDESCRIPTION: The updated approach for checking an ERC1155 token balance using thirdweb SDK v5, which uses the useReadContract hook with the balanceOf extension function for a more streamlined experience.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/contracts/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getContract, createThirdwebClient } from \"thirdweb\";\nimport { balanceOf } from \"thirdweb/extensions/erc1155\";\nimport { ethereum } from \"thirdweb/chains\";\nimport { client } from \"@lib/client\";\n\nconst contract = getContract({\n  address: \"0x....\",\n  chain: ethereum,\n  client,\n});\n\nfunction App() {\n  const { data } = useReadContract(balanceOf, { contract, owner: \"0x...\", tokenId: 0n });\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions with Smart Accounts using UI Component\nDESCRIPTION: This React code snippet demonstrates how to execute a transaction (minting an NFT) using a smart account with a UI component. It uses the TransactionButton component from thirdweb/react.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/get-started/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { useActiveAccount, TransactionButton } from \"thirdweb/react\";\nimport { mintTo } from \"thirdweb/extensions/erc721\";\n\nconst contract = getContract({ client, chain, address: \"0x...\" });\n\n// The ThirdwebProvider setup above already handles the connection to the smart account\n// Within the provider, you can use the SDK normally to interact with the blockchain\nexport default function MyComponent() {\n\t// Get the connected smart account\n\tconst smartAccount = useActiveAccount();\n\t// Mint a new NFT\n\treturn (\n\t\t<TransactionButton\n\t\t\ttransaction={() => {\n\t\t\t\tif (!account) return;\n\t\t\t\treturn mintTo({\n\t\t\t\t\tcontract,\n\t\t\t\t\tto: account.address,\n\t\t\t\t\tnft: {\n\t\t\t\t\t\tname: \"My NFT\",\n\t\t\t\t\t\tdescription: \"My NFT description\",\n\t\t\t\t\t\timage: \"https://example.com/image.png\",\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}}\n\t\t>\n\t\t\tMint NFT\n\t\t</TransactionButton>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Personal Wallet Key with privateKeyAccount\nDESCRIPTION: Code to create a personal wallet key using the privateKeyAccount function from thirdweb. This key will be used to unlock the smart account.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/account-abstraction/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { privateKeyAccount } from \"thirdweb/wallets\";\n\nconst client = createThirdwebClient({\n\tsecretKey: process.env.THIRDWEB_SECRET_KEY as string,\n});\n\nconst personalAccount = privateKeyAccount({\n\tclient,\n\tprivateKey: process.env.PRIVATE_KEY as string,\n});\nconsole.log(\"Personal account address:\", personalAccount.address);\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs with Metadata\nDESCRIPTION: Retrieves NFTs with rich metadata and demonstrates conversion utilities and image handling capabilities.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/insight/quickstart/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Fetch ERC721s with extra metadata returned\nvar erc721Tokens = await insight.GetTokens_ERC721(address, chains, withMetadata: true);\n\n// Use ToNFT or ToNFTList extensions\nvar convertedNft = erc721Tokens[0].ToNFT();\nvar convertedNfts = erc721Tokens.ToNFTList();\n\n// Use NFT Extensions (GetNFTImageBytes, or GetNFTSprite in Unity)\nvar imageBytes = await convertedNft.GetNFTImageBytes(client);\nvar pathToSave = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyPictures), \"nft.png\");\nawait File.WriteAllBytesAsync(pathToSave, imageBytes);\nConsole.WriteLine($\"NFT image saved to: {pathToSave}\");\n```\n\n----------------------------------------\n\nTITLE: Claiming Tokens in Solidity\nDESCRIPTION: Function to let an account claim a given quantity of tokens. It includes parameters for the receiver, token ID, quantity, currency, price, allowlist proof, and additional data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claim(\n    address receiver,\n    uint256 tokenId,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Creating User Smart Account\nDESCRIPTION: JSON payload for deploying individual user smart accounts through the AccountFactory. Requires specifying an admin address which will have primary control over the deployed smart account.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/account-abstraction/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"adminAddress\": \"0x...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Token Balances Across Multiple Networks\nDESCRIPTION: Function that fetches ERC-20 token balances for an address across Ethereum, Polygon, and Arbitrum networks in a single API call.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/multichain-queries/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst getMultichainTokenBalances = async (ownerAddress) => {\n  try {\n    // Get ERC-20 balances on Ethereum, Polygon, and Arbitrum\n    const response = await fetch(\n      `https://insight.thirdweb.com/v1/tokens/erc20/${ownerAddress}?chain=1&chain=137&chain=42161`,\n      {\n        headers: {\n          'x-client-id': '<YOUR_THIRDWEB_CLIENT_ID>'\n        }\n      }\n    );\n    return await response.json();\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Writing to a Contract using thirdweb Engine API in TypeScript\nDESCRIPTION: Makes a POST request to the thirdweb Engine API to execute a write operation on a smart contract. This example demonstrates calling the 'transferFrom' function and requires gas funds in the backend wallet. The response includes a queueId reference to the transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/contracts/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst resp = await fetch(\n\t\"<engine_url>/contract/<chain>/<contract_address>/write\",\n\t{\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: \"Bearer <access_token>\",\n\t\t\t\"x-backend-wallet-address\": \"<backend_wallet_address>\",\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tfunctionName: \"transferFrom\",\n\t\t\targs: [\n\t\t\t\t\"0x1946267d81Fb8aDeeEa28e6B98bcD446c8248473\",\n\t\t\t\t\"0x3EcDBF3B911d0e9052b64850693888b008e18373\",\n\t\t\t\t\"0\",\n\t\t\t],\n\t\t}),\n\t},\n);\n\nconst { result } = await resp.json();\n// queueId is a reference to the transaction queued by Engine.\nconsole.log(\"Queue ID:\", result.queueId);\n```\n\n----------------------------------------\n\nTITLE: Polling for Buy with Crypto Status in TypeScript\nDESCRIPTION: Illustrates how to poll for the status of a Buy with Crypto transaction using getBuyWithCryptoStatus, including handling various status codes and appropriate UI updates.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/build-a-custom-experience/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getBuyWithCryptoStatus } from 'thirdweb/pay'\n\n// Keep calling the below code at regular intervals if the status is in a pending state\n\nconst swapStatus = await getBuyWithCryptoStatus({\n   client: client,\n   transactionHash: swapTxHash,\n}});\n\nif (swapStatus.status === \"NOT_FOUND\") {\n// invalid swap tx\n// Show error in your page\n// Stop polling\n}\n\nif (swapStatus.status === \"NONE\") {\n// No information available yet\n// show \"loading\" in UI\n// Keep polling\n}\n\nif (swapStatus.status === \"FAILED\") {\n// swap failed\n// show \"error\" in UI - show a retry option in UI\n// Stop polling\n}\n\nif (swapStatus.status === \"COMPLETED\") {\n// swap completed\n// show \"success\" in UI\n// Stop polling\n}\n\nif (swapStatus.status === \"PENDING\") {\n// swap is in progress\n// show \"loading\" in UI\n// Keep polling\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Claim Conditions in Solidity Smart Contract\nDESCRIPTION: Allows an authorized wallet to set claim conditions for the contract. Includes a ClaimCondition struct definition and a function to set multiple phases of claim conditions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ClaimCondition {\n    uint256 startTimestamp;\n    uint256 maxClaimableSupply;\n    uint256 supplyClaimed;\n    uint256 quantityLimitPerWallet;\n    bytes32 merkleRoot;\n    uint256 pricePerToken;\n    address currency;\n    string metadata;\n}\n\nfunction setClaimConditions(ClaimCondition[] calldata phases, bool resetClaimEligibility) external;\n```\n\n----------------------------------------\n\nTITLE: Collecting Claim Price in Solidity\nDESCRIPTION: Internal function to collect and distribute the primary sale value of NFTs being claimed, handling various parameters such as recipient, quantity, currency, and price.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _collectPriceOnClaim(\n    address primarySaleRecipient,\n    uint256 quantityToClaim,\n    address currency,\n    uint256 pricePerToken\n) internal virtual;\n```\n\n----------------------------------------\n\nTITLE: Parsing Event Logs in thirdweb Engine Contract Subscriptions\nDESCRIPTION: Example JSON structure of an event log webhook payload sent by thirdweb Engine when a contract event occurs. It includes chain ID, contract address, transaction details, event topics, decoded log data, and timestamps.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/contract-subscriptions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"event-log\",\n  \"data\": {\n    \"chainId\": 8453,\n    \"contractAddress\": \"0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4\",\n    \"blockNumber\": 14306496,\n    \"transactionHash\": \"0xdd73fc70754b6cb5238c33657b382e397aae635a8f9a3b26abe5f336059d0a40\",\n    \"topics\": [\n      \"0x2c76e7a47fd53e2854856ac3f0a5f3ee40d15cfaa82266357ea9779c486ab9c3\"\n    ],\n    \"data\": \"0x000000000000000000000000c60bf6eec03b33e1d02943348aaf8a5a3e6af4a80000000000000000000000004e5d89e10beafb7a49a03d136e7bb8e9519f4950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000e35fa931a00000000000000000000000000000000000000000000000000000000b5e620f480000000000000000000000000000000000000000000000000000000b5e620f48000000000000000000000000000000000000000000000000000000000000000002\",\n    \"eventName\": \"Trade\",\n    \"decodedLog\": {\n      \"isBuy\": {\n        \"type\": \"bool\",\n        \"value\": \"false\"\n      },\n      \"supply\": {\n        \"type\": \"uint256\",\n        \"value\": \"2\"\n      },\n      \"trader\": {\n        \"type\": \"address\",\n        \"value\": \"0xC60bf6EEc03B33E1D02943348AAf8A5a3E6Af4A8\"\n      },\n      \"subject\": {\n        \"type\": \"address\",\n        \"value\": \"0x4e5D89e10bEAfb7A49A03d136E7Bb8e9519f4950\"\n      },\n      \"ethAmount\": {\n        \"type\": \"uint256\",\n        \"value\": \"250000000000000\"\n      },\n      \"shareAmount\": {\n        \"type\": \"uint256\",\n        \"value\": \"1\"\n      },\n      \"subjectEthAmount\": {\n        \"type\": \"uint256\",\n        \"value\": \"12500000000000\"\n      },\n      \"protocolEthAmount\": {\n        \"type\": \"uint256\",\n        \"value\": \"12500000000000\"\n      }\n    },\n    \"timestamp\": 1715402339000,\n    \"transactionIndex\": 33,\n    \"logIndex\": 91\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Authentication with thirdweb Auth\nDESCRIPTION: Sets up server-side authentication logic using thirdweb Auth, including payload generation, signature verification, and JWT management for secure user sessions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/deploying-to-production/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { createAuth } from \"thirdweb/auth\";\n\nconst client = createThirdwebClient({\n\tclientId: \"1234567890\", // get yours at https://thirdweb.com/create-api-key\n});\n\nconst thirdwebAuth = createAuth({\n\tdomain: \"localhost:3000\",\n\tclient,\n});\n\n// 1. generate a login payload\nconst loginPayload = await auth.generatePayload({ address: \"0x123...\" });\n\n// 2. sign the login payload\nconst signature = await auth.signPayload({\n\tpayload: loginPayload,\n\taccount: userAccount,\n});\n\n// 3. verify the login payload and signature that the client sends back later\nconst verifiedPayload = await auth.verifyPayload({\n\tpayload: loginPayload,\n\tsignature,\n});\n\n// 4. generate a JWT for the client\nconst jwt = await auth.generateJWT({ payload: verifiedPayload });\n\n// 5. set the JWT as a cookie or store it another way\n\n// 6. authenticate the client based on the JWT on subsequent calls\nconst { valid, parsedJWT } = await auth.verifyJWT({ jwt });\n```\n\n----------------------------------------\n\nTITLE: Implementing SIWE login flow with server actions\nDESCRIPTION: Demonstrates backend functions for generating login payload, verifying user signature, and managing user sessions using JWT.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/auth/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function generatePayload(params) {\n    // generates a SIWE compliant login payload to return to the client\n    return thirdwebAuth.generatePayload(params);\n}\n\nexport async function login(params) {\n    // verify the user's signature\n    const verifiedPayload = await thirdwebAuth.verifyPayload(params);\n    if (verifiedPayload.valid) {\n        // generate a JWT for the client (or use your own method to store the user session)\n        const jwt = await thirdwebAuth.generateJWT({ payload: verifiedPayload });\n        // set the JWT in cookies, or return it to the client to use as needed\n        setJWTCookie(jwt);\n        return true;\n    } else {\n        // the payload is not valid, you can return an error message to the client\n        return false;\n    }\n}\n\nexport async function getUser() {\n    // check if the user is logged in with cookies, storage, or your method of choice\n    const jwt = getJWTCookie();\n    const { valid, parsedJWT } = await thirdwebAuth.verifyJWT({ jwt });\n    if (valid) {\n      return authResult.parsedJWT.sub; // sub is the user's address\n    }\n    return null;\n}\n\nexport async function logout() {\n    // logout the user, delete cookies, etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting InAppWallet with Backend Authentication in Unity\nDESCRIPTION: Shows how to connect a wallet using backend authentication for server wallets. The code configures InAppWalletOptions with the Backend auth provider and a wallet secret for secure server authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/in-app-wallet/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar inAppWalletOptions = new InAppWalletOptions(\n    authprovider: AuthProvider.Backend, \n    walletSecret: \"very-secret\"\n);\nvar options = new WalletOptions(\n    provider: WalletProvider.InAppWallet, \n    chainId: 1, \n    inAppWalletOptions: inAppWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20SignatureMintVote Token Contract\nDESCRIPTION: Example implementation of a custom token contract inheriting from ERC20SignatureMintVote, including constructor initialization with required parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/signature-mint-vote/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC20SignatureMintVote.sol\";\n\ncontract MyToken is ERC20SignatureMintVote {\n\t  constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _primarySaleRecipient\n    )\n        ERC20SignatureMintVote(\n            _defaultAdmin,\n            _name,\n            _symbol,\n            _primarySaleRecipient\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Filters with thirdweb Insight API Queries\nDESCRIPTION: Demonstrates how to use complex filtering parameters with the thirdweb Insight API, including block filters, time filters, transaction filters, pagination, and sorting options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Example: Get events with complex filtering\nasync function getFilteredEvents() {\n\tconst params = new URLSearchParams({\n\t\t// Block filters\n\t\tfilter_block_number_gte: blockNumberStart,\n\t\tfilter_block_number_lte: blockNumberEnd,\n\n\t\t// Time filters\n\t\tfilter_block_timestamp_gte: \"{{timestamp}}\",\n\n\t\t// Transaction filters\n\t\tfilter_from_address: \"{{fromAddress}}\",\n\t\tfilter_value_gte: \"{{value}}\", // 1 ETH\n\n\t\t// Pagination\n\t\tpage: \"{{page}}\",\n\t\tlimit: \"{{limit}}\",\n\n\t\t// Sorting\n\t\tsort_by: \"{{sortBy}}\",\n\t\tsort_order: \"{{sortOrder}}\",\n\t});\n\n\tconst response = await fetch(\n\t\t`https://{{chainId}}.insight.thirdweb.com/v1/events?${params}`,\n\t\t{ headers: { \"x-client-id\": \"{{clientId}}\" } },\n\t);\n\treturn await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Account Linking with InAppWallet in Unity\nDESCRIPTION: Demonstrates how to link multiple authentication methods to a single InAppWallet, create a new wallet with a different auth provider, and link it to the main account. Also shows how to retrieve linked accounts and unlink them.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/in-app-wallet/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Your main InAppWallet account, already authenticated and connected\nInAppWallet mainInAppWallet = ...\n\n// An InAppWallet with a new auth provider to be linked to the main account, not connected\nInAppWallet walletToLink = await InAppWallet.Create(client: Client, authProvider: AuthProvider.Telegram);\n\n// Link Account - Headless version\nvar linkedAccounts = await mainInAppWallet.LinkAccount(walletToLink: walletToLink);\n\n// Link Account - Unity wrapper version\nvar linkedAccounts = await ThirdwebManager.Instance.LinkAccount(mainInAppWallet, walletToLink);\n\n// You can also fetch linked accounts at any time\nList<LinkedAccount> linkedAccounts = await mainInAppWallet.GetLinkedAccounts();\n\n// Unlink an account\nList<LinkedAccount> linkedAccounts = await mainInAppWallet.UnlinkAccount(linkedAccounts[0]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Chain with Thirdweb SDK\nDESCRIPTION: Basic chain initialization using chain ID. The SDK handles RPC connection automatically.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/chain/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain } from \"thirdweb\";\n\nconst myChain = defineChain(myChainId);\n```\n\n----------------------------------------\n\nTITLE: Reading NFT Balance with SDK v4\nDESCRIPTION: Example of checking an ERC1155 token balance using the thirdweb SDK v4 approach, which requires loading the contract first and then using a specific hook for the operation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/contracts/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNFTBalance, useContract } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const { isLoading, data, error } = useNFTBalance(\n    contract,\n    \"{{wallet_address}}\",\n    \"{{token_id}}\",\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Avatar URL in TypeScript\nDESCRIPTION: Demonstrates how to fetch the avatar URL associated with an ENS name using the resolveAvatar function from thirdweb/extensions/ens.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/examples/ethereum-name-service/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolveAvatar } from \"thirdweb/extensions/ens\";\n\nconst address = await resolveAvatar({\n   client,\n  name: \"vitalik.eth\",\n});\n\n// Expected result: An URL that points to the image of the ENS\n```\n\n----------------------------------------\n\nTITLE: Preparing a Cross-Chain Swap Transaction in TypeScript\nDESCRIPTION: This snippet demonstrates how to prepare a cross-chain swap transaction using the Bridge.Buy.prepare function. Unlike the quote function, this requires specifying sender and receiver addresses.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/cross-chain-swapping/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bridge, NATIVE_TOKEN_ADDRESS } from \"thirdweb\";\n\nconst preparedBuy = await Bridge.Buy.prepare({\n  originChainId: 8453, // Base\n  originTokenAddress: NATIVE_TOKEN_ADDRESS,\n  destinationChainId: 10, // Optimism\n  destinationTokenAddress: \"0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85\", // Optimism USDC\n  buyAmountWei: 10000000n, // 10 USDC\n  sender: \"0x...\", // Your user's wallet address\n  receiver: \"0x...\", // Recipient address (can be the same as sender)\n  client: thirdwebClient,\n});\n\n// The prepared quote contains the transactions you need to execute\nconsole.log(`Transactions to execute: ${preparedBuy.transactions.length}`);\n```\n\n----------------------------------------\n\nTITLE: Preparing Contract Call with Method Signature in TypeScript\nDESCRIPTION: Demonstrates how to prepare a contract call using a Solidity method signature and parameters. Uses type-safe definitions based on the provided method signature.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/prepare/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareContractCall, toWei } from \"thirdweb\";\n\nconst tx = prepareContractCall({\n\tcontract,\n\t// Pass the method signature that you want to call\n\tmethod: \"function mintTo(address to, uint256 amount)\",\n\t// and the params for that method\n\t// Their types are automatically inferred based on the method signature\n\tparams: [\"0x123...\", toWei(\"100\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Running thirdweb MCP Server with uvx in Bash\nDESCRIPTION: This snippet demonstrates how to run the thirdweb MCP server using uvx. It requires setting the THIRDWEB_SECRET_KEY environment variable.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/mcp-server/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTHIRDWEB_SECRET_KEY=... \\\n    uvx thirdweb-mcp\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC20 Tokens with Thirdweb\nDESCRIPTION: Demonstrates ERC20 token transfer using thirdweb's transferFrom extension. Supports both token amount and wei amount specifications for transfer quantity.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/examples/transfering-tokens/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transferFrom } from \"thirdweb/extensions/erc20\";\nimport { sendAndConfirmTransaction } from \"thirdweb\";\n\nconst transaction = transferFrom({\n\tcontract, // the erc20 contract\n\tfrom: \"0x...\", // owner's wallet address\n\tto: \"0x...\", // recipient address\n  amount: 10n, // sending 10 tokens\n  // Alternatively, you can use `amountWei` if you prefer to use the value in wei\n  // amountWei: 10000000000000000000n, // assuming a decimals of 18\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Payment Intent API Endpoint\nDESCRIPTION: Backend API route that creates a Stripe payment intent with the buyer's wallet address stored in metadata, returning a client secret needed for the frontend credit card form.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/guides/nft-checkout/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/app/api/stripe-intent/route.ts\n\nexport async function POST(req: Request) {\n\tconst { buyerWalletAddress } = await req.json();\n\n\tconst stripe = new Stripe(\"<stripe_secret_key>\", {\n\t\tapiVersion: \"2023-10-16\",\n\t});\n\tconst paymentIntent = await stripe.paymentIntents.create({\n\t\tamount: 100_00,\n\t\tcurrency: \"usd\",\n\t\tpayment_method_types: [\"card\"],\n\t\t// buyerWalletAddress is needed in the webhook.\n\t\tmetadata: { buyerWalletAddress },\n\t});\n\n\treturn NextResponse.json({\n\t\tclientSecret: paymentIntent.client_secret,\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Available Routes with Bridge Namespace in TypeScript\nDESCRIPTION: This snippet demonstrates how to find available routes for cross-chain swaps using the Bridge.routes function. It shows different filtering options including by chain, token, and pagination.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/cross-chain-swapping/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bridge, NATIVE_TOKEN_ADDRESS } from \"thirdweb\";\n\n// Get all available routes\nconst allRoutes = await Bridge.routes({\n  client: thirdwebClient,\n});\n\n// Filter routes for a specific token or chain\nconst filteredRoutes = await Bridge.routes({\n  originChainId: 1, // From Ethereum\n  originTokenAddress: NATIVE_TOKEN_ADDRESS,\n  destinationChainId: 10, // To Optimism\n  client: thirdwebClient,\n});\n\n// Paginate through routes\nconst paginatedRoutes = await Bridge.routes({\n  limit: 10,\n  offset: 0,\n  client: thirdwebClient,\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Multichain Queries with thirdweb Insight\nDESCRIPTION: This snippet demonstrates how to query blockchain events across multiple chains (Ethereum and Polygon) in a single API call. It uses the global Insight endpoint with chain parameters to specify which networks to query and limits the results to 10 entries total.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getMultichainTransfers = async () => {\n try {\n   // Query USDT transfers on Ethereum (1) and Polygon (137)\n   const response = await fetch('https://insight.thirdweb.com/v1/events?chain=1&chain=137&limit=10', {\n    headers: {\n      'x-client-id': <YOUR_THIRDWEB_CLIENT_ID>\n    }\n   });\n   const transfersInfo = await response.json();\n   return transfersInfo\n } catch (error) {\n   console.error('Error:', error);\n }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155Revealable Contract\nDESCRIPTION: Example implementation of a smart contract that combines ERC1155, LazyMint, and DelayedReveal extensions. Shows basic structure with constructor and overridable functions for reveal and lazy minting control.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Revealable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\nimport \"@thirdweb-dev/contracts/extension/LazyMint.sol\";\nimport \"@thirdweb-dev/contracts/extension/DelayedReveal.sol\";\n\ncontract Contract is ERC1155, LazyMint, DelayedReveal {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC1155(\n            _name,\n            _symbol\n        )\n    {}\n\n    function reveal(uint256 _index, bytes calldata _key)\n        external\n        override\n        returns (string memory revealedURI)\n    {\n      // Your custom implementation here\n    }\n\n    function _canLazyMint() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running thirdweb CLI Help Command\nDESCRIPTION: Basic command to view all available thirdweb CLI commands. This displays the full list of commands and their descriptions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nthirdweb\n```\n\n----------------------------------------\n\nTITLE: Backend Relayer Request Body TypeScript Interface\nDESCRIPTION: TypeScript interface defining the structure of request bodies for different types of relayed transactions. This is used when submitting transactions to the relayer endpoint from your backend.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/relayers/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\ttype: \"forward\";\n\trequest: {\n\t\tchainid?: string | undefined;\n\t\tfrom: string;\n\t\tto: string;\n\t\tvalue: string;\n\t\tgas: string;\n\t\tnonce: string;\n\t\tdata: string;\n\t};\n\tsignature: string;\n\tforwarderAddress: string;\n} | {\n\ttype: \"permit\";\n\trequest: {\n\t\tto: string;\n\t\towner: string;\n\t\tspender: string;\n\t\tvalue: string;\n\t\tnonce: string;\n\t\tdeadline: string;\n\t};\n\tsignature: string;\n} | {\n\ttype: \"execute-meta-transaction\";\n\trequest: {\n\t\tfrom: string;\n\t\tto: string;\n\t\tdata: string;\n\t};\n\tsignature: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding RPC Endpoints for ThirdwebClient in C#\nDESCRIPTION: Demonstrates how to override default RPC endpoints when creating a ThirdwebClient. This allows the use of custom endpoints instead of the default Thirdweb RPC endpoints for specific chain IDs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/client/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = ThirdwebClient.Create(\n    ...,\n    rpcOverrides: new()\n    {\n        { 1, \"https://eth.llamarpc.com\" },\n        { 42161, \"https://arbitrum.llamarpc.com\" }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Account using BaseAccountFactory\nDESCRIPTION: Shows the implementation of the createAccount function in BaseAccountFactory, which deploys a new Account for an admin.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWalletFactory/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createAccount(address _admin, bytes calldata _data) external virtual override returns (address) {\n    address impl = accountImplementation;\n    bytes32 salt = _generateSalt(_admin, _data);\n    address account = Clones.predictDeterministicAddress(impl, salt);\n    if (account.code.length > 0) {\n        return account;\n    }\n    account = Clones.cloneDeterministic(impl, salt);\n    _initializeAccount(account, _admin, _data);\n    emit AccountCreated(account, _admin);\n    return account;\n}\n```\n\n----------------------------------------\n\nTITLE: Email Authentication in React\nDESCRIPTION: This code demonstrates the two-step process of email authentication in React: pre-authentication to send a verification code, and then connecting with the verification code.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/build-your-own-ui/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet, preAuthenticate } from \"thirdweb/wallets/in-app\";\n\nconst { connect } = useConnect();\n\nconst preLogin = async (email: string) => {\n\t// send email verification code\n\tawait preAuthenticate({\n\t\tclient,\n\t\tstrategy: \"email\",\n\t\temail,\n\t});\n};\n\nconst handleLogin = (email: string, verificationCode: string) => {\n\t// verify email and connect\n\tconnect(async () => {\n\t\tconst wallet = inAppWallet();\n\t\tawait wallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"email\",\n\t\t\temail,\n\t\t\tverificationCode,\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Connecting InAppWallet with Email Authentication in Unity\nDESCRIPTION: Demonstrates how to connect a wallet using email authentication with the InAppWallet provider. The code instantiates an InAppWalletOptions object with an email parameter, creates WalletOptions with the InAppWallet provider, and then connects the wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/in-app-wallet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar inAppWalletOptions = new InAppWalletOptions(email: \"myepicemail@domain.id\");\nvar options = new WalletOptions(\n    provider: WalletProvider.InAppWallet, \n    chainId: 1, \n    inAppWalletOptions: inAppWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Events with Extensions\nDESCRIPTION: Shows how to use extension functions to query specific contract events more easily. This example uses the tokensClaimedEvent extension from ERC721 to listen for token claim events.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/reading-state/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContractEvents } from \"thirdweb/react\";\nimport { tokensClaimedEvent } from \"thirdweb/extensions/erc721\";\n\nconst { data: events } = useContractEvents({\n    contract,\n\tevents: [tokensClaimedEvent()]\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of thirdweb-ai Python SDK\nDESCRIPTION: Demonstrates the basic usage of the thirdweb-ai Python SDK. It shows how to initialize services, create tools for AI agents, and integrate with frameworks like LangChain and OpenAI Agents. The example includes importing necessary modules, initializing services, and setting up tools for different frameworks.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/tools/python-sdk/installation/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom thirdweb_ai import Engine, Insight, Nebula, Tool\n\n# Initialize services\ninsight = Insight(secret_key=...)\nnebula = Nebula(secret_key=...)\nengine = Engine(...)\n\n# Example: Create tools for AI agents\ntools = [\n    *insight.get_tools(),\n    *nebula.get_tools(),\n    *engine.get_tools(),\n    # Or pick an individual tool from the services\n]\n\n# Example: Framework integration (LangChain)\nfrom thirdweb_ai.adapters.langchain import get_langchain_tools\nlangchain_tools = get_langchain_tools(tools)\nagent = create_tool_calling_agent(tools=langchain_tools, ...)\n\n# Example: Framework integration (OpenAI Agents)\nfrom thirdweb_ai.adapters.openai import get_openai_tools\nopenai_tools = get_openai_tools(tools)\nagent = Agent(name=\"thirdweb Assistant\", tools=tools)\n\n# see python/examples for other framework integration\n```\n\n----------------------------------------\n\nTITLE: Performing Gasless Transactions with Smart Account\nDESCRIPTION: Code that demonstrates using the smart account to claim an NFT with the claimTo method and send the transaction with sendTransaction, enabling gasless transactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/guides/typescript/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst balance = await getWalletBalance({\n\tclient,\n\tchain,\n\taddress: smartAccount.address,\n});\nconsole.log(\"Smart account balance:\", balance.displayValue);\n\nconst contract = getContract({\n\tclient,\n\tchain: sepolia,\n\taddress: \"0x...\", // deploy a drop contract from thirdweb.com/explore\n});\n\nconst transaction = await claimTo({\n\tcontract,\n\tto: smartAccount.address,\n\tquantity: 1,\n});\nconst { transactionHash } = await sendTransaction({\n\ttransaction,\n\tsmartAccount,\n});\nconsole.log(`Minted NFT with transaction hash: ${transactionHash}`);\n```\n\n----------------------------------------\n\nTITLE: Canceling NFT Listing Function\nDESCRIPTION: Simple function to cancel an existing listing, requiring the caller to be the original listing creator.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cancelListing(uint256 listingId) external;\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-side Authentication Functions in Next.js\nDESCRIPTION: Server-side implementation of thirdweb authentication functions in a Next.js application. This code handles payload generation, login verification, JWT generation, and authentication checking using cookies.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/next/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n\"use server\";\nimport { VerifyLoginPayloadParams, createAuth } from \"thirdweb/auth\";\nimport { privateKeyToAccount } from \"thirdweb/wallets\";\nimport { client } from \"@/lib/client\";\nimport { cookies } from \"next/headers\";\n\nconst privateKey = process.env.AUTH_PRIVATE_KEY || \"\";\n\nif (!privateKey) {\n\tthrow new Error(\"Missing AUTH_PRIVATE_KEY in .env file.\");\n}\n\nconst thirdwebAuth = createAuth({\n\tdomain: process.env.NEXT_PUBLIC_THIRDWEB_AUTH_DOMAIN || \"\",\n\tadminAccount: privateKeyToAccount({ client, privateKey }),\n\tclient: client,\n});\n\nexport const generatePayload = thirdwebAuth.generatePayload;\n\nexport async function login(payload: VerifyLoginPayloadParams) {\n\tconst verifiedPayload = await thirdwebAuth.verifyPayload(payload);\n\tif (verifiedPayload.valid) {\n\t\tconst jwt = await thirdwebAuth.generateJWT({\n\t\t\tpayload: verifiedPayload.payload,\n\t\t});\n\t\tcookies().set(\"jwt\", jwt);\n\t}\n}\n\nexport async function isLoggedIn() {\n\tconst jwt = cookies().get(\"jwt\");\n\tif (!jwt?.value) {\n\t\treturn false;\n\t}\n\n\tconst authResult = await thirdwebAuth.verifyJWT({ jwt: jwt.value });\n\treturn authResult.valid;\n}\n\nexport async function logout() {\n\tcookies().delete(\"jwt\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New thirdweb Project with CLI\nDESCRIPTION: Command to create a new thirdweb project using the CLI tool\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/getting-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create app\n```\n\n----------------------------------------\n\nTITLE: Executing Buy with Crypto Transaction in TypeScript\nDESCRIPTION: Demonstrates the process of executing a Buy with Crypto transaction, including handling ERC-20 token approvals and sending the transaction using the user's connected wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/build-a-custom-experience/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { sendTransaction, waitForReceipt } from \"thirdweb\";\n\nconst account = wallet.getAccount();\n\n// If approval is required, send the approval transaction\n// show a button to user to request approval and send the transaction on click\nif (quote.approval) {\n\t// request spending tokens from wallet\n\tconst approveTxResult = await sendTransaction({\n\t\ttransaction: quote.approval, // approval transaction\n\t\taccount: account, // account from user's connected wallet\n\t});\n\n\tawait waitForReceipt(approveTxResult);\n}\n\n// The above step may result in error if user rejects or transaction fails\n// If it results in error, it needs to be done again until its successful\n\n// Once the approval is done, you can send the buyWithCrypto transaction\n// show a button to user to request sending buyWithCrypto transaction and send the transaction on click\nconst buyWithCryptoTxResult = await sendTransaction({\n\ttransaction: quote.transactionRequest,\n\taccount: account,\n});\n\nawait waitForReceipt(buyWithCryptoTxResult);\n\n// Save the buy with crypto transaction hash for polling the status as mentioned in step 7\nconst buyWithCryptoTxHash = buyWithCryptoTxResult.transactionHash;\n```\n\n----------------------------------------\n\nTITLE: Upgrading Existing Wallet to Smart Wallet in C# with Thirdweb Unity SDK\nDESCRIPTION: This code demonstrates how to upgrade an existing wallet to a Smart Wallet using the Thirdweb Unity SDK. It creates SmartWalletOptions with gas sponsorship and uses ThirdwebManager to perform the upgrade.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/account-abstraction/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar smartWalletOptions = new SmartWalletOptions(sponsorGas: true)\nvar smartWallet = await ThirdwebManager.Instance.UpgradeToSmartWallet(\n    personalWallet: myExistingIThirdwebWallet, \n    chainId: 1, \n    smartWalletOptions: smartWalletOptions\n);\n```\n\n----------------------------------------\n\nTITLE: Getting a Quote for Token Exchange in TypeScript\nDESCRIPTION: This snippet shows how to get a quote for a cross-chain token swap using the Bridge.Buy.quote function. It specifies origin and destination chains/tokens and the amount to buy.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/cross-chain-swapping/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bridge, NATIVE_TOKEN_ADDRESS } from \"thirdweb\";\n\nconst buyQuote = await Bridge.Buy.quote({\n  originChainId: 8453, // Base\n  originTokenAddress: NATIVE_TOKEN_ADDRESS,\n  destinationChainId: 10, // Optimism\n  destinationTokenAddress: \"0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85\", // Optimism USDC\n  buyAmountWei: 10000000n, // 10 USDC\n  client: thirdwebClient,\n});\n\nconsole.log(\n  `To get ${buyQuote.destinationAmount} wei on destination chain, you need to pay ${buyQuote.originAmount} wei`,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing lazyMint Function in ERC721Drop\nDESCRIPTION: The lazyMint function allows authorized addresses to lazy mint a given amount of NFTs. It supports encrypted data for delayed reveal functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/drop/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction lazyMint(\n    uint256 _amount,\n    string calldata _baseURIForTokens,\n    bytes calldata _data\n) public override returns (uint256 batchId) {\n    if (_data.length > 0) {\n        (bytes memory encryptedURI, bytes32 provenanceHash) = abi.decode(_data, (bytes, bytes32));\n        if (encryptedURI.length != 0 && provenanceHash != \"\") {\n            _setEncryptedData(nextTokenIdToLazyMint + _amount, _data);\n        }\n    }\n\n    return LazyMint.lazyMint(_amount, _baseURIForTokens, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Viem with Thirdweb SDK\nDESCRIPTION: Shows how to convert between viem wallet clients and thirdweb wallets using the viemAdapter. This adapter facilitates interoperability between the viem library and thirdweb SDK components.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/adapters/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { viemAdapter } from \"thirdweb/adapters/viem\";\n\n// convert a viem wallet client to a thirdweb wallet\nconst walletClient = createWalletClient(...);\nconst thirdwebWallet = await viemAdapter.wallet.fromViem({\n  walletClient,\n});\n\n\n// convert a thirdweb account to viem wallet client\nconst viemClientWallet = viemAdapter.wallet.toViem({\n  client,\n  chain,\n  wallet,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Filters for Insight Webhooks in TypeScript\nDESCRIPTION: This snippet shows the structure for defining transaction filters in Insight Webhooks. It allows filtering by chain IDs, sender and recipient addresses, and function signatures. Optional ABI and parameter filtering are also supported.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/webhooks/filtering/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"v1.transactions\": {\n    chain_ids: string[],          // Filter by specific chains\n    from_addresses: string[],     // Filter by sender addresses\n    to_addresses: string[],       // Filter by recipient addresses\n    signatures: {                 // Filter by function signatures\n      sig_hash: string,          // Function signature hash\n      abi?: string,             // Optional ABI for data decoding\n      params?: string[]         // Filter on decoded parameters\n    }[]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Cross-Chain Swap in TypeScript\nDESCRIPTION: This snippet shows how to execute a prepared cross-chain swap transaction. It iterates through the transactions array from the prepared quote, sends each transaction, and waits for the swap to complete.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/cross-chain-swapping/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { sendTransaction, waitForReceipt } from \"thirdweb\";\n\nconst preparedBuy = await Bridge.Buy.prepare({\n  originChainId: 8453, // Base\n  originTokenAddress: NATIVE_TOKEN_ADDRESS,\n  destinationChainId: 10, // Optimism\n  destinationTokenAddress: \"0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85\", // Optimism USDC\n  buyAmountWei: 10000000n, // 10 USDC\n  sender: \"0x...\", // Your user's wallet address\n  receiver: \"0x...\", // Recipient address (can be the same as sender)\n  client: thirdwebClient,\n});\n\n};\n\nfor (const transaction of preparedBuy.transactions) {\n  const tx = prepareTransaction({\n    to: transaction.to as string,\n    value: BigInt(transaction.value ?? 0n),\n    data: transaction.data,\n    chain: defineChain(transaction.chainId),\n    client\n  });\n\n  const result = await sendAndConfirmTransaction({ transaction: tx, account });\n  let swapStatus;\n  do {\n    swapStatus = await Bridge.status({\n      transactionHash: result.transactionHash,\n      client,\n    });\n  } while (swapStatus.status !== \"COMPLETED\");\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Ecosystem Wallet to ConnectButton Component in React\nDESCRIPTION: Integrates the ecosystem wallet into the ConnectButton component, enabling users to log in through the ecosystem wallet. The wallet instance is passed to the wallets prop of the ConnectButton.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/integrating-partners/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\n\n<ConnectButton\n\tclient={THIRDWEB_CLIENT}\n\twallets={[wallet]} // Pass a non-gated or restricted wallet to the ConnectButton\n\t{...props}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Deploying an NFT Drop Contract using thirdweb Engine API in TypeScript\nDESCRIPTION: Makes a POST request to the thirdweb Engine API to deploy a pre-built NFT Drop contract. This example includes contract metadata configuration with name, symbol, and primary sale recipient. Requires gas funds in the backend wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/contracts/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst resp = await fetch(\"<engine_url>/deploy/<chain>/prebuilts/nft-drop\", {\n\tmethod: \"POST\",\n\theaders: {\n\t\t\"Content-Type\": \"application/json\",\n\t\tAuthorization: \"Bearer <access_token>\",\n\t\t\"x-backend-wallet-address\": \"<backend_wallet_address>\",\n\t},\n\tbody: JSON.stringify({\n\t\tcontractMetadata: {\n\t\t\tname: \"thirdweb Engine example\",\n\t\t\tsymbol: \"eng\",\n\t\t\tprimary_sale_recipient: \"0x3EcDBF3B911d0e9052b64850693888b008e18373\",\n\t\t},\n\t}),\n});\n\nconst { result } = await resp.json();\n// queueId is a reference to the transaction queued by Engine.\nconsole.log(\"Queue ID:\", result.queueId);\n```\n\n----------------------------------------\n\nTITLE: Implementing TransactionButton for Gasless NFT Claiming\nDESCRIPTION: Creates a TransactionButton component that prepares and executes a gasless transaction to claim an NFT. The transaction is signed by the user and then relayed via Engine, which pays for the gas fees.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/relayers/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TransactionButton } from \"thirdweb/react\";\n\n<TransactionButton\n\ttransaction={() => {\n\t\tconst contract = getContract({\n\t\t\tclient,\n\t\t\tchain,\n\t\t\taddress: NFT_ADDRESS,\n\t\t});\n\n\t\treturn prepareContractCall({\n\t\t\tcontract,\n\t\t\tmethod: resolveMethod(\"claim\"),\n\t\t\tparams: [\n\t\t\t\t// receiver\n\t\t\t\taccount.address,\n\t\t\t\t// quantity\n\t\t\t\t1n,\n\t\t\t\t// currency\n\t\t\t\tNATIVE_TOKEN_ADDRESS,\n\t\t\t\t// pricePerToken\n\t\t\t\t0n,\n\t\t\t\t// allowlistProof\n\t\t\t\t{\n\t\t\t\t\tproof: [],\n\t\t\t\t\tquantityLimitPerWallet: 0n,\n\t\t\t\t\tpricePerToken: 0n,\n\t\t\t\t\tcurrency: NATIVE_TOKEN_ADDRESS,\n\t\t\t\t},\n\t\t\t\t// data\n\t\t\t\t\"0x\",\n\t\t\t],\n\t\t});\n\t}}\n\tonTransactionSent={(result) =>\n\t\tconsole.log(\"Submitted:\", result.transactionHash)\n\t}\n\tonTransactionConfirmed={(receipt) =>\n\t\tconsole.log(\"Confirmed:\", receipt.transactionHash)\n\t}\n\tonError={(error) => console.error(\"Error:\", error)}\n\tgasless={{\n\t\tprovider: \"engine\",\n\t\trelayerUrl: RELAYER_URL, // e.g. https://<engine_url>/relayer/<relayer_id>\n\t\trelayerForwarderAddress: FORWARDER_ADDRESS, // a trusted forwarder on the contract\n\t}}\n>\n\tClaim\n</TransactionButton>;\n```\n\n----------------------------------------\n\nTITLE: Setting up In-App Wallet in TypeScript\nDESCRIPTION: Shows how to create wallets with email or social login using the embedded wallet feature of thirdweb.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient, embeddedWallet } from \"thirdweb\";\n\n// Create the client (do this once and reuse it)\nconst client = createThirdwebClient({\n  clientId: \"YOUR_CLIENT_ID\",\n});\n\n// Initialize embedded wallet\nconst wallet = embeddedWallet({\n  client,\n});\n\n// Connect with email\nconst emailWallet = await wallet.connect({\n  strategy: \"email\",\n  email: \"user@example.com\",\n});\n\n// Connect with social login\nconst googleWallet = await wallet.connect({\n  strategy: \"google\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Modular ERC721 Contract with Claimable and Batch Metadata Modules\nDESCRIPTION: Example showing how to deploy a modular ERC721 NFT contract with ClaimableERC721 and BatchMetadataERC721 modules to create NFT Drop functionality. The deployment requires a client, chain, and account configuration, along with contract parameters and module settings.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/modular/deploy/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ClaimableERC721,\n  BatchMetadataERC721,\n  deployModularContract,\n} from \"thirdweb/modules\";\n\nconst deployed = deployModularContract({\n   client,\n   chain,\n   account,\n   core: \"ERC721\", // or \"ERC20\" or \"ERC1155\"\n   params: {\n     name: \"My Modular NFT Contract\",\n   },\n   modules: [\n     ClaimableERC721.module({\n        primarySaleRecipient: \"0x...\",\n     }),\n     BatchMetadataERC721.module(),\n   ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a ThirdwebTransaction in C#\nDESCRIPTION: This snippet demonstrates how to use the ThirdwebTransaction.Create method to instantiate a low-level ThirdwebTransaction object. It takes a wallet instance, transaction input, and chain ID as parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/create/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction transaction = await ThirdwebTransaction.Create(wallet, txInput, chainId);\n```\n\n----------------------------------------\n\nTITLE: Initializing thirdweb SDK in Unity\nDESCRIPTION: Demonstrates how to initialize the thirdweb SDK in Unity using a client ID on the Goerli network\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/api-keys/use/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebSDK sdk = new ThirdwebSDK(\"goerli\", 5, new ThirdwebSDK.Options()\n{\n  clientId = \"my-client-id\", // you can get client id from dashboard settings\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721Staking Contract in Solidity\nDESCRIPTION: This example demonstrates how to inherit from the Staking721 extension and override functions to add custom functionality. It includes setting up reward tokens, staking conditions, and implementing the _mintRewards function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Staking/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/Staking721.sol\";\nimport \"@thirdweb-dev/contracts/eip/interface/IERC20.sol\";\n\ncontract MyContract is Staking721 {\n    // ERC20 Reward Token address. See {_mintRewards}.\n    address public rewardToken;\n\n    /**\n     *  We store the contract deployer's address only for the purposes of the example\n     *  in the code comment below.\n     *\n     *  Doing this is not necessary to use the `Staking721` extension.\n     */\n    address public deployer;\n\n    constructor(\n        uint256 _timeUnit,\n        uint256 _rewardsPerUnitTime,\n        address _stakingToken,\n        address _rewardToken\n    ) Staking721(_stakingToken) {\n        _setStakingCondition(_timeUnit, _rewardsPerUnitTime);\n\n        rewardToken = _rewardToken;\n        deployer = msg.sender;\n    }\n\n    /**\n     *  @dev    Mint/Transfer ERC20 rewards to the staker. Must override.\n     *\n     *  @param _staker    Address for sending rewards to.\n     *  @param _rewards   Amount of tokens to be given out as reward.\n     *\n     */\n    function _mintRewards(address _staker, uint256 _rewards) internal override {\n        IERC20(rewardToken).transfer(_staker, _rewards);\n    }\n\n    // Returns whether staking restrictions can be set in given execution context.\n    function _canSetStakeConditions() internal view override returns (bool) {\n        return msg.sender == deployer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passkey Authentication in TypeScript\nDESCRIPTION: This snippet demonstrates passkey authentication in a non-React TypeScript environment, including checking for existing passkeys and handling both sign-up and sign-in scenarios.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/build-your-own-ui/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet, hasStoredPasskey } from \"thirdweb/wallets/in-app\";\n\nconst wallet = inAppWallet();\nconst hasPasskey = await hasStoredPasskey(client);\nawait wallet.connect({\n\tclient,\n\tstrategy: \"passkey\",\n\ttype: hasPasskey ? \"sign-in\" : \"sign-up\",\n});\nreturn wallet;\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket for Transaction Status Updates in JavaScript\nDESCRIPTION: This snippet demonstrates how to use WebSocket to receive real-time updates on transaction status in Engine. It establishes a connection to the Engine WebSocket endpoint and logs received data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/faq/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst socket = new WebSocket(\n\t\"wss://<engine_url>/transaction/status/<queue_id>?token=<session_token>\",\n);\nsocket.onmessage = (event) => {\n\tconst res = JSON.parse(event.data);\n\tconsole.log(\"Received data:\", JSON.parse(res.result));\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MintRequest Struct for Signature Minting in Solidity\nDESCRIPTION: This struct defines the payload structure for a signature minting request in thirdweb Token smart contracts. It includes various parameters such as recipient address, royalty information, token details, pricing, and validity timestamps.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/signature-mint/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct MintRequest {\n    address to;\n    address royaltyRecipient;\n    uint256 royaltyBps;\n    address primarySaleRecipient;\n    uint256 tokenId;\n    string uri;\n    uint256 quantity;\n    uint256 pricePerToken;\n    address currency;\n    uint128 validityStartTimestamp;\n    uint128 validityEndTimestamp;\n    bytes32 uid;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ThirdwebProvider in React Application\nDESCRIPTION: Sets up the ThirdwebProvider component at the root of a React application to enable thirdweb functionality throughout the app.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/deploying-to-production/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider } from \"thirdweb/react\";\n\nexport default function App() {\n\treturn <ThirdwebProvider>{/* Your app here */}</ThirdwebProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Uploading File to IPFS with Result Output in C#\nDESCRIPTION: Uploads a file to IPFS and displays the resulting IPFS hash.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/storage/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar uploadResult = await ThirdwebStorage.Upload(client, @\"C:\\path\\to\\your\\file.txt\");\nConsole.WriteLine($\"IPFS Hash: {uploadResult.IpfsHash}\");\n```\n\n----------------------------------------\n\nTITLE: Fetching Blockchain Transactions\nDESCRIPTION: Queries blockchain transactions with filters for specific contracts, time ranges, and sorting options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/insight/quickstart/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Fetch transactions (great amount of optional filters available)\nvar transactions = await insight.GetTransactions(\n    chainIds: new BigInteger[] { 1 }, // ethereum\n    contractAddress: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\", // bored apes\n    fromTimestamp: Utils.GetUnixTimeStampNow() - 3600, // last hour\n    sortBy: SortBy.TransactionIndex, // block number, block timestamp or transaction index\n    sortOrder: SortOrder.Desc, // latest first\n    limit: 5 // last 5 transactions\n);\nConsole.WriteLine($\"Transactions: {JsonConvert.SerializeObject(transactions, Formatting.Indented)}\");\n```\n\n----------------------------------------\n\nTITLE: Generating Extensions with thirdweb CLI\nDESCRIPTION: Command to generate a precompiled extension for any deployed contract using the thirdweb CLI. This creates a type-safe extension with event and function definitions for the specified contract address on a given chain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/generate/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb generate <chainId>/<contract-address>\n```\n\n----------------------------------------\n\nTITLE: Initializing thirdweb Project Template via CLI\nDESCRIPTION: Command to create a new thirdweb Auth + Next.js integration project using the thirdweb CLI tool. This command sets up a complete working example application with authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/next/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create app --template thirdweb-auth-next\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Smart Contract using ThirdwebContract.Read in C#\nDESCRIPTION: This snippet demonstrates how to use the ThirdwebContract.Read method to call a view or pure function on a smart contract. It accepts a contract instance, method name, and optional parameters, and returns the result as a generic type T.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/contracts/read/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await contract.Read<T>(contract, \"methodName\", parameters);\n```\n\n----------------------------------------\n\nTITLE: Passkey Authentication with thirdweb's In-App Wallet\nDESCRIPTION: This snippet illustrates how to authenticate using a passkey with thirdweb's in-app wallet. It includes checking for an existing passkey and handling both sign-in and sign-up scenarios. For React Native, a valid app universal link is required for the passkeyDomain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/build-your-own-ui/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet, hasStoredPasskey } from \"thirdweb/wallets/in-app\";\n\nconst { connect } = useConnect();\n\nconst handleLogin = async () => {\n\tawait connect(async () => {\n\t\tconst wallet = inAppWallet({\n\t\t\tauth: {\n\t\t\t\tpasskeyDomain: \"example.com\", // defaults to current url\n\t\t\t},\n\t\t});\n\t\tconst hasPasskey = await hasStoredPasskey(client);\n\t\tawait wallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"passkey\",\n\t\t\ttype: hasPasskey ? \"sign-in\" : \"sign-up\",\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: ERC20Base burn Function Implementation\nDESCRIPTION: Overridable function that allows token holders to burn their tokens. Includes balance validation before burning.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/base/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n *  @notice          Lets an owner a given amount of their tokens.\n *  @dev             Caller should own the `_amount` of tokens.\n *\n *  @param _amount   The number of tokens to burn.\n */\nfunction burn(uint256 _amount) external virtual {\n    require(balanceOf(msg.sender) >= _amount, \"not enough balance\");\n    _burn(msg.sender, _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Lens Handle to Wallet Address in TypeScript\nDESCRIPTION: Shows how to resolve a Lens protocol handle to its associated wallet address using the thirdweb SDK. Takes a Lens handle name and returns the corresponding wallet address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/examples/lens-protocol/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolveAddress } from \"thirdweb/extensions/lens\";\n\nconst walletAddress = await resolveAddress({\n  name: \"vitalik\",\n  client,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ERC-20 Paymaster in TypeScript\nDESCRIPTION: This code demonstrates how to set up smart wallets with ERC-20 Paymasters for Base USDC, Lisk LSK, and Celo CUSD tokens. The configuration allows users to pay for gas fees using these tokens instead of the native cryptocurrency.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/erc-20-paymaster/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { base, lisk, celo } from \"thirdweb/chains\";\nimport { TokenPaymaster, smartWallet } from \"thirdweb/wallets\";\n\n// Have users pay for gas in Base USDC\nconst usdcWallet = smartWallet({\n  chain: base,\n  sponsorGas: true,\n  overrides: {\n    tokenPaymaster: TokenPaymaster.BASE_USDC,\n  },\n});\n\n// Have users pay for gas in Lisk LSK\nconst lskWallet = smartWallet({\n  chain: lisk,\n  sponsorGas: true,\n  overrides: {\n    tokenPaymaster: TokenPaymaster.LISK_LSK,\n  },\n});\n\n// Have users pay for gas in Celo CUSD\nconst cusdWallet = smartWallet({\n  chain: celo,\n  sponsorGas: true,\n  overrides: {\n    tokenPaymaster: TokenPaymaster.CELO_CUSD,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Post-Claim Hook in Solidity\nDESCRIPTION: Internal function that runs after every claim, allowing custom logic to be added after token claims.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _afterClaim(\n    uint256 tokenId,\n    address receiver,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Collect Claim Price Function\nDESCRIPTION: Internal function to handle collection and distribution of payment for claimed tokens.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _collectPriceOnClaim(\n    address primarySaleRecipient,\n    uint256 quantityToClaim,\n    address currency,\n    uint256 pricePerToken\n) internal virtual;\n```\n\n----------------------------------------\n\nTITLE: Creating NFT Purchase Page with Wallet Connection and Stripe Integration\nDESCRIPTION: Implementation of the main purchase page component that handles wallet connection, fetches a Stripe client secret, and renders either a buy button or a credit card form depending on the current state.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/guides/nft-checkout/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// src/app/page.tsx\nfunction PurchasePage() {\n\tconst buyerWalletAddress = useAddress();\n\tconst [clientSecret, setClientSecret] = useState(\"\");\n\n\t// Retrieve a Stripe client secret to display the credit card form.\n\tconst onClick = async () => {\n\t\tconst resp = await fetch(\"/api/stripe-intent\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\tbody: JSON.stringify({ buyerWalletAddress }),\n\t\t});\n\t\tconst json = await resp.json();\n\t\tsetClientSecret(json.clientSecret);\n\t};\n\n\tconst stripe = loadStripe(\"<stripe_publishable_key>\");\n\n\treturn (\n\t\t<main>\n\t\t\t<ConnectWallet />\n\n\t\t\t{!clientSecret ? (\n\t\t\t\t<button onClick={onClick}>Buy with credit card</button>\n\t\t\t) : (\n\t\t\t\t<Elements stripe={stripe} options={{ clientSecret }}>\n\t\t\t\t\t<CreditCardForm />\n\t\t\t\t</Elements>\n\t\t\t)}\n\t\t</main>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Pseudo-Random Numbers in Solidity\nDESCRIPTION: This function generates a pseudo-random number using the sender's address, previous block hash, and block difficulty to ensure fair reward distribution when opening packs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/pack/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 random = uint256(keccak256(abi.encodePacked(_msgSender(), blockhash(block.number - 1), block.difficulty)));\n```\n\n----------------------------------------\n\nTITLE: Recovering Signer Address from Mint Request\nDESCRIPTION: Internal view function that recovers and returns the address of the signer who authorized the mint request. Uses cryptographic signature recovery.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721SignatureMint/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nstruct MintRequest {\n    address to;\n    address royaltyRecipient;\n    uint256 royaltyBps;\n    address primarySaleRecipient;\n    string uri;\n    uint256 quantity;\n    uint256 pricePerToken;\n    address currency;\n    uint128 validityStartTimestamp;\n    uint128 validityEndTimestamp;\n    bytes32 uid;\n}\n\nfunction _recoverAddress(MintRequest calldata req, bytes calldata signature)\n    internal\n    view\n    returns (address signer)\n```\n\n----------------------------------------\n\nTITLE: Opening Packs in Solidity\nDESCRIPTION: This function allows pack owners to open one or multiple packs at once. It burns the pack tokens and distributes the corresponding reward units to the opener.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/pack/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction openPack(uint256 packId, uint256 amountToOpen) external;\n```\n\n----------------------------------------\n\nTITLE: Burn Function Implementation\nDESCRIPTION: Function that allows token burning by owner or approved operator.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/lazy-mint/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(uint256 _tokenId) external virtual {\n    _burn(_tokenId, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Token Balances in thirdweb Insight API\nDESCRIPTION: Shows how to retrieve token balances from the Insight API, including both ERC20 fungible token balances and NFT balances (ERC721). Includes example response structures.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Get ERC20 Balances\nasync function getERC20Balances(ownerAddress: string) {\n\tconst response = await fetch(\n\t\t`https://{{chainId}}.insight.thirdweb.com/v1/tokens/erc20/${ownerAddress}`,\n\t\t{ headers: { \"x-client-id\": \"{{clientId}}\" } },\n\t);\n\tconst data = await response.json();\n\t// Example response:\n\t// {\n\t//   \"data\": [\n\t//     {\n\t//       \"tokenAddress\": \"0x123...\",\n\t//       \"balance\": \"1000000000000000000\"\n\t//     }\n\t//   ]\n\t// }\n\treturn data;\n}\n\n// 2. Get NFT Balances\nasync function getNFTBalances(ownerAddress: string) {\n\tconst response = await fetch(\n\t\t`https://{{chainId}}.insight.thirdweb.com/v1/tokens/erc721/${ownerAddress}`,\n\t\t{ headers: { \"x-client-id\": \"{{clientId}}\" } },\n\t);\n\tconst data = await response.json();\n\t// Example response:\n\t// {\n\t//   \"data\": [\n\t//     {\n\t//       \"collectionAddress\": \"0x456...\",\n\t//       \"tokenId\": \"1\",\n\t//       \"balance\": \"1\"\n\t//     }\n\t//   ]\n\t// }\n\treturn data;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a POST Request to Nebula Chat API with curl\nDESCRIPTION: Example of making a POST request to the Nebula chat endpoint using curl. This request sends a message to execute a blockchain transaction with authentication headers and request parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://nebula-api.thirdweb.com/chat \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-secret-key: YOUR_THIRDWEB_SECRET_KEY\" \\\n  -d '{\n    \"message\": \"send 0.0001 ETH on sepolia to vitalik.eth\",\n    \"user_id\": \"default-user\",\n    \"stream\": false,\n  }'\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI Chat Completions API with thirdweb Nebula\nDESCRIPTION: This snippet demonstrates how to use OpenAI's Chat Completion API with thirdweb Nebula as the base endpoint. It initializes an OpenAI client with thirdweb's API URL, sends a simple chat message, and enables including context such as wallet address in the request.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/plugins/openai/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\n\nclient = OpenAI(\n\tbase_url=\"https://nebula-api.thirdweb.com\",\n\tapi_key=\"{{THIRDWEB_SECRET_KEY}}\",\n)\nchat_completion = client.chat.completions.create(\n\tmodel=\"t0\",\n\tmessages=[{\"role\": \"user\", \"content\": \"Hello Nebula!\"}],\n\tstream=False,\n    extra_body={ \"context\": { \"wallet_address\": \"0x...\" }}\n)\n\nprint(chat_completion)\n```\n\n----------------------------------------\n\nTITLE: Implementing Branded Wallet Connector with Multiple Options in React\nDESCRIPTION: Creates a ConnectButton with multiple wallet options, including the ecosystem wallet and other wallets like MetaMask. This approach allows partners to offer your ecosystem wallet alongside other wallet options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/integrating-partners/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createWallet } from \"thirdweb/wallets\";\n\n<ConnectButton\n\tclient={THIRDWEB_CLIENT}\n\twallets={[\n\t\tcreateWallet(\"ecosystem.your-ecosystem-id\", {\n\t\t\tpartnerId: \"...\", // Pass an optional partner ID for restricted ecosystems\n\t\t}),\n\t\tcreateWallet(\"io.metamask\"),\n\t]}\n\t{...props}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Reading from a Contract using thirdweb Engine API in TypeScript\nDESCRIPTION: Makes a GET request to the thirdweb Engine API to read data from a smart contract. This example demonstrates calling the 'balanceOf' function to check an ERC-20 balance, passing function name and arguments as query parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/contracts/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst resp = await fetch(\n\t\"<engine_url>/contract/<chain>/<contract_address>/read?functionName=balanceOf&args=0x3EcDBF3B911d0e9052b64850693888b008e18373\",\n\t{\n\t\theaders: {\n\t\t\tAuthorization: \"Bearer <access_token>\",\n\t\t},\n\t},\n);\n\nconst { result } = await resp.json();\nconsole.log(\"ERC-20 balance:\", result);\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Cost for a Transaction in Thirdweb\nDESCRIPTION: Demonstrates how to estimate the cost of gas in ether and wei for a transaction before sending it to the blockchain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/send/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { estimateGas } from \"thirdweb\";\n\nconst gasCost = await estimateGasCost({ transaction });\nconsole.log(\"cost in ether\", gasCost.ether);\n```\n\n----------------------------------------\n\nTITLE: Phone Number Authentication with thirdweb's In-App Wallet\nDESCRIPTION: This code demonstrates the process of authenticating via phone number verification using thirdweb's in-app wallet. It includes steps for sending a verification code and then verifying the phone number to connect the wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/build-your-own-ui/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet, preAuthenticate } from \"thirdweb/wallets/in-app\";\n\nconst { connect } = useConnect();\n\nconst preLogin = async (phoneNumber: string) => {\n\t// send phone number verification code\n\tawait preAuthenticate({\n\t\tclient,\n\t\tstrategy: \"phone\",\n\t\tphoneNumber, // ex: +1234567890\n\t});\n};\n\nconst handleLogin = async (phoneNumber: string, verificationCode: string) => {\n\t// verify phone number and connect\n\tawait connect(async () => {\n\t\tconst wallet = inAppWallet();\n\t\tawait wallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"phone\",\n\t\t\tphoneNumber,\n\t\t\tverificationCode,\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing TransactionButton with Biconomy Gasless Configuration\nDESCRIPTION: Example implementation of a TransactionButton component with Biconomy gasless transaction configuration. The component handles contract method calls with transaction lifecycle events and gasless transaction setup using Biconomy credentials.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/gasless/biconomy/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n    return (\n        <TransactionButton\n        transaction={() => {\n            // Create a transaction object and return it\n            const tx = prepareContractCall({\n            contract,\n            method: \"mint\",\n            params: [address, amount],\n            });\n            return tx;\n        }}\n        onTransactionSent={(result) => {\n            console.log(\"Transaction submitted\", result.transactionHash);\n        }}\n        onTransactionConfirmed={(receipt) => {\n            console.log(\"Transaction confirmed\", receipt.transactionHash);\n        }}\n        onError={(error) => {\n            console.error(\"Transaction error\", error);\n        }}\n        gasless={{\n            provider: \"biconomy\",\n            relayerForwarderAddress: \"...\",\n            apiId: \"...\",\n            apiKey: \"...\",\n        }}\n        >\n        Confirm Transaction\n        </TransactionButton>\n    ); \n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring NFT Collection Metadata with JavaScript\nDESCRIPTION: Metadata configuration for an NFT Collection contract including title, description, and image settings using createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/nft-collection/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"NFT Collection Contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"NFT Collection Contract | thirdweb\",\n\tdescription: `The NFT Collection contract is suitable for when you want to have a collection of unique NFTs, but not \"drop\" or \"release\" them for your community to claim.`,\n});\n```\n\n----------------------------------------\n\nTITLE: Cross-Chain Portfolio Tracking Implementation\nDESCRIPTION: Function that tracks a user's assets (both ERC-20 tokens and NFTs) across five major blockchain networks to provide a comprehensive portfolio view.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/multichain-queries/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst getPortfolio = async (address) => {\n  // Get ERC-20 tokens across major chains\n  const erc20Response = await fetch(\n    `https://insight.thirdweb.com/v1/tokens/erc20/${address}?chain=1&chain=137&chain=42161&chain=10&chain=8453`,\n    { headers: { 'x-client-id': '<YOUR_CLIENT_ID>' } }\n  );\n  \n  // Get NFTs across the same chains\n  const nftResponse = await fetch(\n    `https://insight.thirdweb.com/v1/tokens/erc721/${address}?chain=1&chain=137&chain=42161&chain=10&chain=8453`,\n    { headers: { 'x-client-id': '<YOUR_CLIENT_ID>' } }\n  );\n  \n  return {\n    tokens: await erc20Response.json(),\n    nfts: await nftResponse.json()\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Generated Event in TypeScript\nDESCRIPTION: Example of using a precompiled, type-safe event definition from a generated extension to listen for transfer events on a USDC contract. The example shows importing the event, setting up the contract, and retrieving events with typed parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/generate/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transferEvent } from \"/thirdweb/10/0x0b2c639c533813f4aa9d7837caf62653d097ff85\";\n\nconst contract = getContract({\n\tclient,\n\tchain: optimism,\n\taddress: USDC_ADDRESS,\n});\n\n// Type-safe event listener\nconst events = await getContractEvents({\n  contract,\n  events: [\n    transferEvent({\n      from: ...,\n      to: ...,\n    })\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing thirdweb Auth with TypeScript\nDESCRIPTION: This snippet shows the full auth flow using TypeScript, including initializing the client, generating a login payload, signing the payload on the client, verifying signatures, generating JWTs, and authenticating subsequent requests. It demonstrates the server-side and client-side components of the authentication process.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAuth } from \"thirdweb/auth\";\n\nconst client = createThirdwebClient({\n\tclientId: \"1234567890\", // get yours at https://thirdweb.com/create-api-key\n});\n\nconst auth = createAuth({\n\tdomain: \"localhost:3000\",\n\tadminAccount: privateKeyToAccount({ client, privateKey }),\n\tclient,\n});\n\n// 1. generate a login payload on the server\nconst loginPayload = await auth.generatePayload({\n\taddress: \"0x123...\",\n\tchain: 1,\n});\n\n// 2. sign the login payload on the client\nconst signature = await auth.signPayload({\n\tpayload: loginPayload,\n\taccount: userAccount,\n});\n\n// 3. verify the login payload and signature on the server\nconst verifiedPayload = await auth.verifyPayload({\n\tpayload: loginPayload,\n\tsignature,\n});\n\n// 4. generate a JWT for the client\nconst jwt = await auth.generateJWT({ payload: verifiedPayload });\n\n// 5. set the JWT as a cookie or store it another way\n\n// 6. authenticate the client based on the JWT on subsequent calls\nconst { valid, parsedJWT } = await auth.verifyJWT({ jwt });\n```\n\n----------------------------------------\n\nTITLE: Token Claim Function Implementation\nDESCRIPTION: Function to allow an account to claim a specified quantity of tokens with validation for currency, price, and allowlist proof.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claim(\n    address receiver,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom NFT Contract\nDESCRIPTION: Example of creating a custom NFT contract by inheriting from ERC721Base, including constructor implementation with necessary parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/base/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC721Base.sol\";\n\ncontract MyNFT is ERC721Base {\n\n\t  constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    )\n        ERC721Base(\n            _defaultAdmin,\n            _name,\n            _symbol,\n            _royaltyRecipient,\n            _royaltyBps\n        )\n    {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting In-App Wallet with Google Authentication in React\nDESCRIPTION: Example of connecting a user with an in-app wallet using Google authentication strategy. The code shows how to use the ThirdwebProvider, ConnectButton, and create a client connection with the wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/in-app-wallet/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst client = createThirdwebClient({ clientId });\nconst wallet = inAppWallet();\n\nconst account = await wallet.connect({\n\tclient,\n\tstrategy: \"google\",\n});\n\nconsole.log(\"connected as\", account.address);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Count for a Wallet in C#\nDESCRIPTION: Demonstrates how to retrieve the transaction count (nonce) for a wallet address on a specific blockchain using the Thirdweb .NET SDK. This method requires an IThirdwebWallet instance, chain ID, and wallet address, with an optional block tag parameter.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/gettransactioncount/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nBigInteger transactionCount = await wallet.GetTransactionCount(chainId, address);\n```\n\n----------------------------------------\n\nTITLE: JWT Auth Server Implementation in Node.js\nDESCRIPTION: Complete server implementation for JWT authentication using Express, including login endpoint and JWKS endpoint. The server reads RSA keys, verifies user credentials, and issues signed JWTs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-jwt-auth-server/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst express = require(\"express\");\nconst fs = require(\"fs\");\nconst jwt = require(\"jsonwebtoken\");\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\nconst PRIVATE_KEY = fs.readFileSync(\"./keys/rsa.key\", \"utf8\");\nconst jwks = require(\"./jwks.json\");\n\nconst users = [\n\t{ id: 1, email: \"user@example.com\", password: \"password123\" },\n];\n\napp.use(express.json());\n\napp.post(\"/login\", (req, res) => {\n\tconst { email, password } = req.body;\n\tconst user = users.find(\n\t\t(u) => u.email === email && u.password === password,\n\t);\n\tif (!user) return res.status(401).send({ message: \"Invalid credentials\" });\n\n\tconst payload = {\n\t\tiss: \"http://your-domain.com\",\n\t\tsub: user.id.toString(),\n\t\taud: \"EpicGame\",\n\t\temail: user.email,\n\t\texp: Math.floor(Date.now() / 1000) + 3600,\n\t};\n\n\tconst token = jwt.sign(payload, PRIVATE_KEY, {\n\t\talgorithm: \"RS256\",\n\t\tkeyid: \"0\",\n\t});\n\n\tres.send({ token });\n});\n\napp.get(\"/.well-known/jwks.json\", (req, res) => {\n\tres.json(jwks);\n});\n\napp.listen(PORT, () => {\n\tconsole.log(`Server started on port ${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Bundler URL in SmartWalletOptions\nDESCRIPTION: Code example showing how to configure a custom bundler URL in SmartWalletOptions overrides. This allows using your own account abstraction infrastructure instead of thirdweb's bundler service.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/infrastructure/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: SmartWalletOptions = {\n\tchain,\n\tsponsorGas: true,\n\toverrides: {\n\t\tbundlerUrl: \"your-bundler-url\",\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Blockchain Events\nDESCRIPTION: Retrieves blockchain events with customizable filters for chain IDs, contract addresses, event signatures, and time ranges.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/insight/quickstart/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Fetch events (great amount of optional filters available)\nvar events = await insight.GetEvents(\n    chainIds: new BigInteger[] { 1 }, // ethereum\n    contractAddress: \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\", // bored apes\n    eventSignature: \"Transfer(address,address,uint256)\", // transfer event\n    fromTimestamp: Utils.GetUnixTimeStampNow() - 3600, // last hour\n    sortBy: SortBy.TransactionIndex, // block number, block timestamp or transaction index\n    sortOrder: SortOrder.Desc, // latest first\n    limit: 5 // last 5 transfers\n);\nConsole.WriteLine($\"Events: {JsonConvert.SerializeObject(events, Formatting.Indented)}\");\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20Mintable Contract\nDESCRIPTION: Example implementation of a custom ERC20 contract that implements the IMintableERC20 interface. Shows constructor setup and mintTo function override that needs to be implemented.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20Mintable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/openzeppelin-presets/token/ERC20/ERC20.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC20.sol\";\n\ncontract Contract is ERC20, IMintableERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC20(\n            _name,\n            _symbol\n        )\n    {}\n\n    function mintTo(address to, uint256 amount) external override {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Authentication Examples in C#\nDESCRIPTION: Shows different ways to use the Authenticate method, including returning the result as a string, byte array, or custom object. These examples demonstrate the flexibility of the method in handling various return types.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/authenticate/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Example usage returning the auth result as a string\nvar authResult = await wallet.Authenticate<string>(domain: \"https://mydomain.com\", chainId: 1);\n\n// Example usage returning the auth result as a byte array\nvar authResultBytes = await wallet.Authenticate<byte[]>(domain: \"https://mydomain.com\", chainId: 1);\n\n// Example usage returning the auth result as a custom object\nvar authResultObject = await wallet.Authenticate<MyCustomType>(domain: \"https://mydomain.com\", chainId: 1);\n```\n\n----------------------------------------\n\nTITLE: Initializing thirdweb in React Application\nDESCRIPTION: Example of setting up ThirdwebProvider in a React application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThirdwebProvider } from \"thirdweb/react\";\n\nconst App = () => {\n  return (\n    <ThirdwebProvider>\n      {/* Your App */}\n    </ThirdwebProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Processing Mint Request Internally in Solidity\nDESCRIPTION: This internal function verifies a mint request and marks the request and signature as used. It takes a MintRequest struct and a signature as input, and returns the signer's address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155SignatureMint/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _processRequest(MintRequest calldata req, bytes calldata signature)\n    internal\n    returns (address signer)\n```\n\n----------------------------------------\n\nTITLE: Converting Ethers.js v6 Signer to Thirdweb Account\nDESCRIPTION: Demonstrates how to use ethers6Adapter to convert an ethers.js v6 Signer to a thirdweb account. This enables using existing ethers.js signers with thirdweb SDK functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/adapters/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers6Adapter } from \"thirdweb/adapters/ethers6\";\nimport { sendTransaction } from \"thirdweb\";\n\n// convert a ethers signer\nconst signer: ethers.Signer = ...;\nconst account = await ethers6Adapter.signer.fromEthers({\n  signer,\n});\n\n// use it with the thirdweb SDK\nawait sendTransaction({\n  transaction,\n  account,\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating ThirdwebContract in C# for Thirdweb Unity SDK\nDESCRIPTION: This snippet demonstrates how to create a ThirdwebContract instance using the ThirdwebManager. It allows you to specify the contract address, chain ID, and optional ABI for interacting with an EVM-compatible smart contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/contracts/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar contract = await ThirdwebManager.Instance.GetContract(\n\taddress: \"contract-address\", \n\tchainId: 1, \n\tabi: \"optional-abi\"\n);\n```\n\n----------------------------------------\n\nTITLE: Managed Execution of Bridge Transactions in C#\nDESCRIPTION: Demonstrates how to use the Execute extension method to simplify the execution of prepared Buy, Sell, and Transfer transactions. This method handles the entire execution process.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/universal-bridge/quickstart/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Execute a prepared Buy\nvar buyResult = await bridge.Execute(myWallet, preparedBuy);\nvar buyHashes = buyResult.Select(receipt => receipt.TransactionHash).ToList();\nConsole.WriteLine($\"Buy hashes: {JsonConvert.SerializeObject(buyHashes, Formatting.Indented)}\");\n\n// Execute a prepared Sell\nvar sellResult = await bridge.Execute(myWallet, preparedSell);\nvar sellHashes = sellResult.Select(receipt => receipt.TransactionHash).ToList();\nConsole.WriteLine($\"Sell hashes: {JsonConvert.SerializeObject(sellHashes, Formatting.Indented)}\");\n\n// Execute a prepared Transfer\nvar transferResult = await bridge.Execute(myWallet, preparedTransfer);\nvar transferHashes = transferResult.Select(receipt => receipt.TransactionHash).ToList();\nConsole.WriteLine($\"Transfer hashes: {JsonConvert.SerializeObject(transferHashes, Formatting.Indented)}\");\n```\n\n----------------------------------------\n\nTITLE: Set Base URI Internal Function\nDESCRIPTION: Internal function to update the base metadata URI for a batch of NFTs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/BatchMintMetadata/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setBaseURI(uint256 batchId, string memory baseURI) internal;\n```\n\n----------------------------------------\n\nTITLE: Implementing PayEmbed Component for Cross-Chain Transactions in React\nDESCRIPTION: This code demonstrates how to implement the PayEmbed component to let users execute transactions from any chain, paying with any token. It shows how to claim an ERC1155 NFT using the component with transaction mode and metadata.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/pay/transaction/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { claimTo } from \"thirdweb/extensions/erc1155\";\nimport { PayEmbed, useActiveAccount } from \"thirdweb/react\";\n\nfunction App() {\n  const account = useActiveAccount();\n  const { data: nft } = useReadContract(getNFT, {\n    contract: nftContract,\n    tokenId: 0n,\n  });\n\n  return (\n    <PayEmbed\n      client={client}\n      payOptions={{\n        mode: \"transaction\",\n        transaction: claimTo({\n          contract: nftContract,\n          quantity: 1n,\n          tokenId: 0n,\n          to: account?.address,\n        }),\n        metadata: nft?.metadata,\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ThirdwebSDK with Client ID in TypeScript for Frontend\nDESCRIPTION: Sets up a ThirdwebSDK instance using a client ID specifically for frontend applications. This configuration enables client-side applications to use RPC Edge when interacting with the specified blockchain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/rpc-edge/get-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst readOnlySdk = new ThirdwebSDK(\"<chain_id>\", {\n\tclientId: \"<your_client_id>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring NFT Collections Across Multiple Chains\nDESCRIPTION: Function that retrieves NFT (ERC-721) holdings for a specific owner address across Ethereum and Base networks simultaneously.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/multichain-queries/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst getMultichainNFTs = async (ownerAddress) => {\n  try {\n    // Get NFTs on Ethereum and Base\n    const response = await fetch(\n      `https://insight.thirdweb.com/v1/tokens/erc721/${ownerAddress}?chain=1&chain=8453`,\n      {\n        headers: {\n          'x-client-id': '<YOUR_THIRDWEB_CLIENT_ID>'\n        }\n      }\n    );\n    return await response.json();\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721Revealable Contract in Solidity\nDESCRIPTION: Example of a smart contract that implements ERC721Revealable functionality. It inherits from ERC721A, LazyMint, and DelayedReveal contracts, and includes custom implementations for reveal and _canLazyMint functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Revealable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\nimport \"@thirdweb-dev/contracts/extension/LazyMint.sol\";\nimport \"@thirdweb-dev/contracts/extension/DelayedReveal.sol\";\n\ncontract Contract is ERC721A, LazyMint, DelayedReveal {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC721A(\n            _name,\n            _symbol\n        )\n    {}\n  function reveal(uint256 _index, bytes calldata _key)\n        external\n        override\n        returns (string memory revealedURI)\n    {\n      // Your custom implementation here\n    }\n\n    function _canLazyMint() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for a Transaction in Thirdweb\nDESCRIPTION: Shows how to estimate the amount of gas that would be used by a transaction before sending it to the blockchain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/send/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { estimateGas } from \"thirdweb\";\n\nconst gasEstimate = await estimateGas({ transaction });\nconsole.log(\"estmated gas used\", gasEstimate);\n```\n\n----------------------------------------\n\nTITLE: Verifying Mint Request Signatures in Solidity\nDESCRIPTION: Verifies that a mint request is valid and signed by an authorized wallet. Takes a MintRequest struct containing token minting parameters and a signature to validate.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721SignatureMint/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstruct MintRequest {\n    address to;\n    address royaltyRecipient;\n    uint256 royaltyBps;\n    address primarySaleRecipient;\n    string uri;\n    uint256 quantity;\n    uint256 pricePerToken;\n    address currency;\n    uint128 validityStartTimestamp;\n    uint128 validityEndTimestamp;\n    bytes32 uid;\n}\n\nfunction verify(MintRequest calldata req, bytes calldata signature)\n    public\n    view\n    returns (bool success, address signer)\n```\n\n----------------------------------------\n\nTITLE: Unity Wallet Integration Implementation\nDESCRIPTION: Core implementation for connecting wallets in Unity using thirdweb SDK. Handles both external wallet connections and displays wallet address after successful connection.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nusing Thirdweb;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class WalletManager : MonoBehaviour\n{\n    private ThirdwebSDK sdk;\n    public Text walletAddressText;\n    public Button connectButton;\n\n    void Start()\n    {\n        // Client ID is set in Project Settings > Thirdweb\n        sdk = new ThirdwebSDK(\"ethereum\"); // Or any supported chain\n        connectButton.onClick.AddListener(ConnectWallet);\n    }\n\n    public async void ConnectWallet()\n    {\n        try {\n            // Connect with an external wallet like Coinbase Wallet\n            string address = await sdk.wallet.Connect(new WalletConnection() {\n                provider = WalletProvider.CoinbaseWallet,\n                chainId = 1 // Ethereum Mainnet\n            });\n            \n            walletAddressText.text = \"Connected: \" + address;\n        }\n        catch (System.Exception e) {\n            Debug.LogError(\"Error connecting wallet: \" + e.Message);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing EIP-7702 Authorization and Execution in C# with Thirdweb .NET SDK\nDESCRIPTION: This code snippet demonstrates the complete process of implementing EIP-7702 using the Thirdweb .NET SDK. It covers initializing contracts, generating wallets, signing authorizations, executing transactions, and interacting with the enhanced EOA. The example includes setting code to an EOA and using it to claim tokens through a delegation contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/signauthorization/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Chain and contract addresses\nvar chainWith7702 = 911867;\nvar erc20ContractAddress = \"0xAA462a5BE0fc5214507FDB4fB2474a7d5c69065b\"; // Fake ERC20\nvar delegationContractAddress = \"0x654F42b74885EE6803F403f077bc0409f1066c58\"; // BatchCallDelegation\n\n// Initialize contracts normally\nvar erc20Contract = await ThirdwebContract.Create(client: client, address: erc20ContractAddress, chain: chainWith7702);\nvar delegationContract = await ThirdwebContract.Create(client: client, address: delegationContractAddress, chain: chainWith7702);\n\n// Initialize a (to-be) 7702 EOA\nvar eoaWallet = await PrivateKeyWallet.Generate(client);\nvar eoaWalletAddress = await eoaWallet.GetAddress();\nConsole.WriteLine($\"EOA address: {eoaWalletAddress}\");\n\n// Initialize another wallet, the \"executor\" that will hit the eoa's (to-be) execute function\nvar executorWallet = await PrivateKeyWallet.Generate(client);\nvar executorWalletAddress = await executorWallet.GetAddress();\nConsole.WriteLine($\"Executor address: {executorWalletAddress}\");\n\n// Fund the executor wallet\nvar fundingWallet = await PrivateKeyWallet.Create(client, privateKey);\nvar fundingHash = (await fundingWallet.Transfer(chainWith7702, executorWalletAddress, BigInteger.Parse(\"0.001\".ToWei()))).TransactionHash;\nConsole.WriteLine($\"Funded Executor Wallet: {fundingHash}\");\n\n// Sign the authorization to make it point to the delegation contract\nvar authorization = await eoaWallet.SignAuthorization(chainId: chainWith7702, contractAddress: delegationContractAddress, willSelfExecute: false);\nConsole.WriteLine($\"Authorization: {JsonConvert.SerializeObject(authorization, Formatting.Indented)}\");\n\n// Execute the delegation\nvar tx = await ThirdwebTransaction.Create(executorWallet, new ThirdwebTransactionInput(chainId: chainWith7702, to: executorWalletAddress, authorization: authorization));\nvar hash = (await ThirdwebTransaction.SendAndWaitForTransactionReceipt(tx)).TransactionHash;\nConsole.WriteLine($\"Authorization execution transaction hash: {hash}\");\n\n// Prove that code has been deployed to the eoa\nvar rpc = ThirdwebRPC.GetRpcInstance(client, chainWith7702);\nvar code = await rpc.SendRequestAsync<string>(\"eth_getCode\", eoaWalletAddress, \"latest\");\nConsole.WriteLine($\"EOA code: {code}\");\n\n// Log erc20 balance of executor before the claim\nvar executorBalanceBefore = await erc20Contract.ERC20_BalanceOf(executorWalletAddress);\nConsole.WriteLine($\"Executor balance before: {executorBalanceBefore}\");\n\n// Prepare the claim call\nvar claimCallData = erc20Contract.CreateCallData(\n    \"claim\",\n    new object[]\n    {\n        executorWalletAddress, // receiver\n        100, // quantity\n        Constants.NATIVE_TOKEN_ADDRESS, // currency\n        0, // pricePerToken\n        new object[] { Array.Empty<byte>(), BigInteger.Zero, BigInteger.Zero, Constants.ADDRESS_ZERO }, // allowlistProof\n        Array.Empty<byte>() // data\n    }\n);\n\n// Embed the claim call in the execute call\nvar executeCallData = delegationContract.CreateCallData(\n    method: \"execute\",\n    parameters: new object[]\n    {\n        new List<Thirdweb.Console.Call>\n        {\n            new()\n            {\n                Data = claimCallData.HexToBytes(),\n                To = erc20ContractAddress,\n                Value = BigInteger.Zero\n            }\n        }\n    }\n);\n\n// Execute from the executor wallet targeting the eoa which is pointing to the delegation contract\nvar tx2 = await ThirdwebTransaction.Create(executorWallet, new ThirdwebTransactionInput(chainId: chainWith7702, to: eoaWalletAddress, data: executeCallData));\nvar hash2 = (await ThirdwebTransaction.SendAndWaitForTransactionReceipt(tx2)).TransactionHash;\nConsole.WriteLine($\"Token claim transaction hash: {hash2}\");\n\n// Log erc20 balance of executor after the claim\nvar executorBalanceAfter = await erc20Contract.ERC20_BalanceOf(executorWalletAddress);\nConsole.WriteLine($\"Executor balance after: {executorBalanceAfter}\");\n```\n\n----------------------------------------\n\nTITLE: Using PersonalSign Method in Thirdweb .NET SDK\nDESCRIPTION: Example of how to sign a string message using the wallet's private key with the PersonalSign method. The method takes a string message and returns a hexadecimal signature that can be used to verify the message's authenticity.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/sign/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring signature = await wallet.PersonalSign(\"Your message here\");\n```\n\n----------------------------------------\n\nTITLE: Converting to Ethers Provider\nDESCRIPTION: Shows how to obtain an Ethers.js provider from thirdweb client using the ethers5Adapter.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/ethers-adapter/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers5Adapter } from \"thirdweb/adapters/ethers5\";\nimport { createThirdwebClient } from \"thirdweb\";\n\nconst client = createThirdwebClient({\n  clientId: \"...\",\n});\n\nconst provider = ethers5Adapter.provider.toEthers({ client, chainId });\n```\n\n----------------------------------------\n\nTITLE: Converting a wagmi wallet to a thirdweb wallet\nDESCRIPTION: Code for adapting a wagmi connected account to a thirdweb wallet using EIP1193 standard. This allows using thirdweb SDK features within a wagmi application by setting the adapted wallet as the active wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/adapters/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Assumes you've wrapped your application in a `<ThirdwebProvider>`\n\nimport { useEffect } from 'react'\nimport { defineChain } from 'thirdweb'\nimport { useSetActiveWallet } from 'thirdweb/react'\nimport { createWalletAdapter } from 'thirdweb/wallets'\nimport { useDisconnect, useSwitchChain, useWalletClient } from 'wagmi'\nimport { viemAdapter } from \"thirdweb/adapters/viem\";\nimport { client } from './client'\n\n\nconst account = useAccount(); // from wagmi\nconst setActiveWallet = useSetActiveWallet(); // from thirdweb/react\n\n// whenever the wagmi account changes, \n// we adapt it to a thirdweb wallet and set it as the active wallet\n  useEffect(() => {\n    const setActive = async () => {\n      if (account?.connector?.getProvider) {\n        const provider = await account?.connector?.getProvider({\n          chainId,\n        });\n        const thirdwebWallet = EIP1193.fromProvider({\n          provider,\n        });\n        await thirdwebWallet.connect({\n          client,\n        });\n        setActiveWallet(thirdwebWallet);\n      }\n    };\n    setActive();\n  }, [account?.connector?.getProvider, setActiveWallet]);\n```\n\n----------------------------------------\n\nTITLE: Creating thirdweb Client in TypeScript\nDESCRIPTION: Sets up a thirdweb client instance for connecting to thirdweb services, with options for client-side and server-side applications.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\n\n// For client-side applications:\nconst client = createThirdwebClient({\n  clientId: \"YOUR_CLIENT_ID\", // Get from your thirdweb dashboard\n});\n\n// For server-side scripts (Never expose secret keys in client code):\n// const client = createThirdwebClient({\n//   secretKey: process.env.THIRDWEB_SECRET_KEY,\n// });\n```\n\n----------------------------------------\n\nTITLE: Downloading Data from IPFS or HTTP URL in C#\nDESCRIPTION: Downloads data from an HTTP or IPFS URI and deserializes it to the specified type using Newtonsoft.Json.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/storage/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar data = await ThirdwebStorage.Download<string>(client, \"{{uri}}\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration in TypeScript\nDESCRIPTION: Sets up the metadata configuration for the documentation page using thirdweb's createMetadata function. Defines the title, description, and image properties for the contract documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/core-contracts/erc-1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Nebula Response with thirdweb SDK in JavaScript\nDESCRIPTION: Implements a function to handle the Nebula API response using the thirdweb SDK. It initializes a thirdweb client, prepares and sends a transaction based on the action data received from the API.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/chat/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createThirdwebClient,\n  prepareTransaction,\n  sendTransaction,\n  privateKeyToAccount\n} from \"thirdweb\";\n\n// Example function to handle the API response\nasync function handleNebulaResponse(response) {\n  // Initialize thirdweb client\n  const client = createThirdwebClient({\n    secretKey: process.env.THIRDWEB_SECRET_KEY\n  });\n\n  // Initialize account\n  const account = privateKeyToAccount({\n    client,\n    privateKey: process.env.EOA_PRIVATE_KEY\n  });\n\n  // Check if we have any actions\n  if (response.actions && response.actions.length > 0) {\n    const action = response.actions[0];\n\n    // Parse the transaction data from the action\n    const txData = JSON.parse(action.data);\n\n    try {\n      // Prepare transaction with client\n      const transaction = prepareTransaction({\n        to: txData.to,\n        data: txData.data,\n        value: BigInt(txData.value),\n        chain: txData.chainId,\n        client\n      });\n\n      // Send transaction with account\n      const result = await sendTransaction({\n        transaction,\n        account\n      });\n\n      return result;\n    } catch (error) {\n      console.error(\"Error processing transaction:\", error);\n      throw error;\n    }\n  }\n}\n\n// Example usage\nconst response = await fetch('https://nebula-api.thirdweb.com/chat', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'x-secret-key': 'YOUR_THIRDWEB_SECRET_KEY'\n  },\n  body: JSON.stringify({\n    message: \"send 0.0001 ETH on sepolia to vitalik.eth\",\n    execute_config: {\n      mode: \"client\",\n      signer_wallet_address: \"0xc3F2b2a12Eba0f5989cD75B2964E31D56603a2cE\"\n    }\n  })\n});\n\nconst data = await response.json();\nconst result = await handleNebulaResponse(data);\n```\n\n----------------------------------------\n\nTITLE: Configuring In-App Wallet for Smart Accounts in React\nDESCRIPTION: This code snippet shows how to configure only in-app wallets to be converted to smart accounts, while leaving external wallets unchanged. It uses the ConnectButton component with custom wallet configurations.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/account-abstraction/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { sepolia } from \"thirdweb/chains\";\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\n\nconst client = createThirdwebClient({\nclientId: \"YOUR_CLIENT_ID\",\n});\n\nconst wallets = [inAppWallet({\n\t// only configure smart accounts for in-app wallets\n\tsmartAccount: {\n\t\tchain: sepolia,\n        sponsorGas: true\n\t}\n}), \n// other external wallets will not become smart accounts\ncreateWallet(\"io.metamask\"), \ncreateWallet(\"rainbow.me\"),\n];\n\nexport default function App() {\nreturn (\n    <ThirdwebProvider>\n      <ConnectButton\n\t    client={client}\n\t    wallets={wallets}\n\t  />\n    </ThirdwebProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: LazyMint Function Implementation\nDESCRIPTION: Implementation of lazyMint function that allows authorized addresses to lazy mint NFTs with optional encrypted data for delayed reveal.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/delayed-reveal/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction lazyMint(\n    uint256 _amount,\n    string calldata _baseURIForTokens,\n    bytes calldata _data\n) public override returns (uint256 batchId) {\n    if (_data.length > 0) {\n        (bytes memory encryptedURI, bytes32 provenanceHash) = abi.decode(_data, (bytes, bytes32));\n        if (encryptedURI.length != 0 && provenanceHash != \"\") {\n            _setEncryptedData(nextTokenIdToLazyMint + _amount, _data);\n        }\n    }\n\n    return super.lazyMint(_amount, _baseURIForTokens, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: ERC20Base mintTo Function Implementation\nDESCRIPTION: Overridable function that allows authorized addresses to mint tokens to a specified recipient. Includes authorization and amount validation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/base/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n *  @notice          Lets an authorized address mint tokens to a recipient.\n *  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint tokens.\n *\n *  @param _to       The recipient of the tokens to mint.\n *  @param _amount   Quantity of tokens to mint.\n */\nfunction mintTo(address _to, uint256 _amount) public virtual {\n    require(_canMint(), \"Not authorized to mint.\");\n    require(_amount != 0, \"Minting zero tokens.\");\n\n    _mint(_to, _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Information with Nebula AI in C#\nDESCRIPTION: Shows how to chat with Nebula AI while providing smart contract context, allowing the AI to query and respond about contract-specific information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/nebula/quickstart/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Chat, passing contract context\nvar response2 = await nebula.Chat(\n    message: \"What's the total supply of token id 0 for this contract?\",\n    context: new NebulaContext(contractAddresses: new List<string> { myContractAddress }, chainIds: new List<BigInteger> { myChain })\n);\nConsole.WriteLine($\"Response 2: {response2.Message}\");\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Transaction Costs in C#\nDESCRIPTION: This method calculates the total costs of a transaction, combining the gas costs and the transaction value. Returns a TotalCosts object with values in both ether and wei.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/static/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTotalCosts totalCosts = await ThirdwebTransaction.EstimateTotalCosts(transaction);\n```\n\n----------------------------------------\n\nTITLE: Prefilling Destination Token with Custom Token\nDESCRIPTION: This example shows how to prefill the Pay purchase flow with a specific token on a specific chain (Ethereum on Base network). The configuration also controls whether users can edit the amount, token selection, and chain selection.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/payembed/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { base } from \"thirdweb/chains\";\n\n<PayEmbed\n\tclient={client}\n\tpayOptions={{\n\t\tprefillBuy: {\n\t\t\ttoken: {\n\t\t\t\taddress: \"0x866a087038f7C12cf33EF91aC5b1AcE6Ac1DA788\",\n\t\t\t\tname: \"Base ETH\",\n\t\t\t\tsymbol: \"ETH\",\n\t\t\t\ticon: \"...\", // optional\n\t\t\t},\n\t\t\tchain: base,\n\t\t\tallowEdits: {\n\t\t\t\tamount: true, // allow editing buy amount\n\t\t\t\ttoken: false, // disable selecting buy token\n\t\t\t\tchain: false, // disable selecting buy chain\n\t\t\t},\n\t\t},\n\t}}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Connecting External Wallets in TypeScript\nDESCRIPTION: Demonstrates how to connect external wallets using WalletConnect and read wallet balance using the thirdweb SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient, walletConnect } from \"thirdweb\";\n\n// Create the client (do this once and reuse it)\nconst client = createThirdwebClient({\n  clientId: \"YOUR_CLIENT_ID\",\n});\n\n// Connect WalletConnect\nconst wallet = walletConnect({\n  projectId: \"YOUR_WALLETCONNECT_PROJECT_ID\", // Get from WalletConnect dashboard\n});\n\n// Connect the wallet\nconst walletInstance = await wallet.connect();\nconst address = await walletInstance.getAddress();\nconsole.log(\"Connected to:\", address);\n\n// Read wallet balance\nimport { getWalletBalance, ethereum } from \"thirdweb\";\n\nconst balance = await getWalletBalance({\n  client,\n  chain: ethereum,\n  address: walletInstance.getAddress(),\n});\nconsole.log(`Balance: ${balance.displayValue} ${balance.symbol}`);\n```\n\n----------------------------------------\n\nTITLE: Overriding reveal Function in ERC1155Drop Contract\nDESCRIPTION: This function allows an authorized address to reveal a batch of delayed reveal NFTs. It decrypts the base URI using the provided key and updates the contract state.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/drop/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction reveal(uint256 _index, bytes calldata _key) public virtual override returns (string memory revealedURI) {\n    require(_canReveal(), \"Not authorized\");\n\n    uint256 batchId = getBatchIdAtIndex(_index);\n    revealedURI = getRevealURI(batchId, _key);\n\n    _setEncryptedData(batchId, \"\");\n    _setBaseURI(batchId, revealedURI);\n\n    emit TokenURIRevealed(_index, revealedURI);\n}\n```\n\n----------------------------------------\n\nTITLE: Prefilling Destination Token with ERC20 in thirdweb Universal Bridge\nDESCRIPTION: Shows how to prefill the payment flow with a specific token purchase. This example configures the interface to default to purchasing ETH on Base network while controlling which aspects of the transaction users can edit.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/send-transaction/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { base } from \"thirdweb/chains\";\n\nconst { mutate: sendTransaction } = useSendTransaction({\n\tpayModal: {\n\t\tprefillBuy: {\n\t\t\ttoken: {\n\t\t\t\taddress: \"0x866a087038f7C12cf33EF91aC5b1AcE6Ac1DA788\",\n\t\t\t\tname: \"Base ETH\",\n\t\t\t\tsymbol: \"ETH\",\n\t\t\t\ticon: \"...\", // optional\n\t\t\t},\n\t\t\tchain: base,\n\t\t\tallowEdits: {\n\t\t\t\tamount: true, // allow editing buy amount\n\t\t\t\ttoken: false, // disable selecting buy token\n\t\t\t\tchain: false, // disable selecting buy chain\n\t\t\t},\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Pre-Claim Hook in Solidity\nDESCRIPTION: Internal function that runs before every claim operation, allowing for custom logic implementation before tokens are claimed.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeClaim(\n    uint256 tokenId,\n    address receiver,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Bridge Payment Quote in TypeScript\nDESCRIPTION: Example showing how to set up a quote for buying with fiat currency using Universal Bridge. Demonstrates configuring payment parameters including currency, chain ID, token addresses, and purchase metadata.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/accept-direct-payments/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst quote = await getBuyWithFiatQuote({\n\tclient: client, // thirdweb client\n\tfromCurrencySymbol: \"USD\", // fiat currency symbol\n\ttoChainId: arbnova.id, // arbitrum nova chain id\n\ttoAmount: \"100\", // amount of token to buy\n\ttoTokenAddress: USDC_TOKEN_ADDRESS, // address of payment token\n\tfromAddress: \"<USERS_WALLET_ADDRESS>\",\n\ttoAddress: \"<YOUR_WALLET_ADDRESS>\",\n\tpurchaseData: {\n\t\tnftId: 1\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to MetaMask Wallet in Unity\nDESCRIPTION: Code snippet demonstrating how to connect to a MetaMask wallet in a Unity game using the Thirdweb SDK. This creates wallet options specifying MetaMaskWallet as the provider and Ethereum mainnet (chainId: 1) as the network, then attempts to connect the wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/metamask/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new WalletOptions(provider: WalletProvider.MetaMaskWallet, chainId: 1);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Multicall Function API\nDESCRIPTION: API specification for the multicall function that handles batch execution of contract calls. Takes an array of bytes data as input and returns an array of execution results.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Multicall/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results);\n```\n\n----------------------------------------\n\nTITLE: Defining Token Structure for Multiwrap in Solidity\nDESCRIPTION: This snippet defines the structure for tokens that can be wrapped in the Multiwrap contract. It includes an enum for token types and a struct for token details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/multiwrap/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n/// @notice The type of assets that can be wrapped.\nenum TokenType { ERC20, ERC721, ERC1155 }\n\nstruct Token {\n    address assetContract;\n    TokenType tokenType;\n    uint256 tokenId;\n    uint256 totalAmount;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting In-App Wallet with Custom Auth in React\nDESCRIPTION: Code example showing how to connect to an In-App Wallet using a custom auth endpoint in a React application. This snippet demonstrates how to handle post-login authentication with a JWT and connect to the wallet using the auth_endpoint strategy.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-auth-server/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { useConnect } from \"thirdweb/react\";\n\nconst { connect } = useConnect();\n\nconst handlePostLogin = async (jwt: string) => {\n\tawait connect(() => {\n\t\tconst wallet = inAppWallet();\n\t\twallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"auth_endpoint\",\n\t\t\tpayload: JSON.stringify({ userId: \"ANY_RANDOM_ID_HERE\" }),\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Estimating EIP-1559 Gas Fees in C#\nDESCRIPTION: This method estimates the gas fees for an EIP-1559 transaction, returning both maxFeePerGas and maxPriorityFeePerGas. The withBump parameter can adjust the estimates for network conditions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/static/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n(BigInteger maxFeePerGas, BigInteger maxPriorityFeePerGas) = await ThirdwebTransaction.EstimateGasFees(transaction, withBump);\n```\n\n----------------------------------------\n\nTITLE: TokenURI Implementation\nDESCRIPTION: Function that returns the metadata URI for an NFT, handling both full URIs and batch URIs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/base/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\n    string memory fullUriForToken = fullURI[_tokenId];\n    if (bytes(fullUriForToken).length > 0) {\n        return fullUriForToken;\n    }\n\n    string memory batchUri = _getBaseURI(_tokenId);\n    return string(abi.encodePacked(batchUri, _tokenId.toString()));\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Transaction Status with thirdweb Engine API in TypeScript\nDESCRIPTION: This snippet shows how to check the status of a transaction using its queue ID. It makes a GET request to the Engine API and determines if the transaction is complete based on its status (mined, errored, or cancelled).\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/get-started/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst resp = await fetch(\"<engine_url>/transaction/status/<queue_id>\", {\n\tmethod: \"GET\",\n\theaders: {\n\t\tAuthorization: \"Bearer <access_token>\",\n\t},\n});\n\nconst { result } = await resp.json();\n// status can be: processed, queued, sent, errored, mined, cancelled, retried\nconst isComplete = [\"mined\", \"errored\", \"cancelled\"].includes(result.status);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Transaction Receipt in Thirdweb\nDESCRIPTION: Demonstrates how to wait for a transaction to be mined and get the transaction receipt after sending the transaction separately.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/send/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sendTransaction, waitForReceipt } from \"thirdweb\";\nimport { createWallet } from \"thirdweb/wallets\";\n\nconst wallet = createWallet(\"io.metamask\");\nconst account = await wallet.connect({ client });\n\nconst transactionResult = await sendTransaction({\n\ttransaction,\n\taccount,\n});\n\nconst receipt = await waitForReceipt(transactionResult);\n```\n\n----------------------------------------\n\nTITLE: Transferring Native and ERC20 Tokens with IThirdwebWallet in C#\nDESCRIPTION: Example of how to transfer Wei (native tokens) or ERC20 tokens to a specified address using the IThirdwebWallet interface. The method accepts chain ID, recipient address, amount, and optional ERC20 contract address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/transfer/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Transfer Wei\nvar receipt = await wallet.Transfer(chainId, toAddress, weiAmount);\n// Transfer ERC20\nvar receipt = await wallet.Transfer(chainId, toAddress, weiAmount, erc20ContractAddress);\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Smart Wallet in C# with Thirdweb Unity SDK\nDESCRIPTION: This snippet shows how to connect to a Smart Wallet directly using the Thirdweb Unity SDK. It creates SmartWalletOptions with gas sponsorship enabled and uses ThirdwebManager to connect the wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/account-abstraction/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar smartWalletOptions = new SmartWalletOptions(sponsorGas: true)\nvar options = new WalletOptions(..., smartWalletOptions: smartWalletOptions);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Converting Thirdweb Wallet to EIP1193 Provider\nDESCRIPTION: Demonstrates how to use EIP1193.toProvider to convert a thirdweb account to an EIP1193 provider. This enables using thirdweb wallets with other libraries that accept EIP1193 providers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/adapters/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EIP1193 } from \"thirdweb/wallets\";\n \n// Create an EIP-1193 provider from a Thirdweb wallet\nconst provider = EIP1193.toProvider({\n  wallet,\n  chain: ethereum,\n  client: createThirdwebClient({ clientId: \"...\" }),\n});\n \n// Use with any EIP-1193 compatible library\nconst accounts = await provider.request({\n  method: \"eth_requestAccounts\",\n});\n```\n\n----------------------------------------\n\nTITLE: Preparing Token Transfer Transaction in C#\nDESCRIPTION: Demonstrates how to prepare an executable transaction for transferring tokens using the Transfer_Prepare method. This example prepares a transaction to transfer ETH on zkSync.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/universal-bridge/quickstart/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar preparedTransfer = await bridge.Transfer_Prepare(\n    chainId: 137,\n    tokenAddress: Constants.NATIVE_TOKEN_ADDRESS, // ETH on zkSync\n    transferAmountWei: BigInteger.Parse(\"0.1\".ToWei()),\n    sender: await Utils.GetAddressFromENS(client, \"vitalik.eth\"),\n    receiver: await myWallet.GetAddress()\n);\nConsole.WriteLine($\"Prepared Transfer: {JsonConvert.SerializeObject(preparedTransfer, Formatting.Indented)}\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Address in React with thirdweb\nDESCRIPTION: This React example shows how to get the user's wallet address by using the useActiveAccount hook and accessing the address property of the returned account object.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/interact-with-wallets/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useActiveAccount } from \"thirdweb/react\";\n\nconst account = useActiveAccount();\nconsole.log(\"wallet address\", account.address);\n```\n\n----------------------------------------\n\nTITLE: Interacting with NFT Contract using Smart Account in React\nDESCRIPTION: This snippet demonstrates how to use a connected smart account to interact with an NFT contract. It shows how to claim an NFT using the TransactionButton component and fetch owned NFTs using the useReadContract hook.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/guides/react/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { useActiveAccount, TransactionButton } from \"thirdweb/react\";\nimport { claimTo } from \"thirdweb/extensions/erc721\";\n\nconst contract = getContract({ client, chain, address: \"0x...\" });\n\n// The ThirdwebProvider setup above already handles the connection to the smart account\n// Within the provider, you can use the SDK normally to interact with the blockchain\nexport default function MyComponent() {\n\t// Get the connected smart account\n\tconst smartAccount = useActiveAccount();\n\t// Fetch owned NFTs\n\tconst { data, isLoading } = useReadContract(\n\t\tgetOwnedNFTs,\n\t\t{\n\t\t\tcontract,\n\t\t\taddress: smartAccount.address!,\n\t\t},\n\t\t{\n\t\t\tenabled: !!smartAccount,\n\t\t},\n\t);\n\t// Mint a new NFT\n\treturn (\n\t\t<TransactionButton\n\t\t\ttransaction={() => {\n\t\t\t\tif (!account) return;\n\t\t\t\treturn claimTo({\n\t\t\t\t\tcontract,\n\t\t\t\t\tto: account.address,\n\t\t\t\t\tquantity: 1,\n\t\t\t\t});\n\t\t\t}}\n\t\t\tonTransactionConfirmed={() => {\n\t\t\t\talert(\"NFT Minted!\");\n\t\t\t}}\n\t\t>\n\t\t\tMint NFT\n\t\t</TransactionButton>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Transactions with IThirdwebWallet in C#\nDESCRIPTION: Demonstrates how to use the ExecuteTransaction method to send a raw transaction from a connected wallet and retrieve the transaction receipt. This method requires a ThirdwebTransactionInput object with transaction details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/executetransaction/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar receipt = await wallet.ExecuteTransaction(new ThirdwebTransactionInput(...));\n```\n\n----------------------------------------\n\nTITLE: Prefilling Native Token Purchase in thirdweb Universal Bridge\nDESCRIPTION: Demonstrates how to prefill a transaction with a native token purchase by specifying just the chain without a specific token address. This allows users to purchase the native token of the specified chain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/send-transaction/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { mutate: sendTransaction } = useSendTransaction({\n\tpayModal: {\n\t\tprefillBuy: {\n\t\t\tchain: base,\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for Loyalty Card Contract Documentation in JavaScript\nDESCRIPTION: This code snippet creates metadata for the Loyalty Card contract documentation page. It sets the page title, description, and image properties using the createMetadata function from a custom documentation module.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/loyalty-card/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Loyalty Card contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Loyalty Card contract | thirdweb\",\n\tdescription: `The Loyalty Card contract is suitable for launching loyalty programs. Each NFT represents a loyalty card, and the NFT's metadata contains the loyalty card's information.`,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Claim Conditions in Solidity\nDESCRIPTION: Function to set claim conditions for a specific token ID. It defines a ClaimCondition struct and allows an authorized wallet to set various parameters such as start timestamp, max claimable supply, and price per token.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ClaimCondition {\n    uint256 startTimestamp;\n    uint256 maxClaimableSupply;\n    uint256 supplyClaimed;\n    uint256 quantityLimitPerWallet;\n    bytes32 merkleRoot;\n    uint256 pricePerToken;\n    address currency;\n    string metadata;\n}\n\nfunction setClaimConditions(\n    uint256 tokenId,\n    ClaimCondition calldata phase,\n    bool resetClaimEligibility\n) external;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Events from thirdweb Insight API\nDESCRIPTION: Demonstrates how to fetch events from the Insight API, including getting all events and retrieving contract-specific events with filtering parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Get All Events\nasync function getAllEvents() {\n\tconst response = await fetch(\"https://{{chainId}}.insight.thirdweb.com/v1/events\", {\n\t\theaders: { \"x-client-id\": \"{{clientId}}\" },\n\t});\n\treturn await response.json();\n}\n\n// 2. Get Contract Events with Filtering\nasync function getContractEvents(contractAddress: string) {\n\tconst params = new URLSearchParams({\n\t\tfilter_block_number_gte: blockNumber,\n\t\tsort_by: \"block_timestamp\",\n\t\tsort_order: \"desc\",\n\t\tlimit: \"{{limit}}\",\n\t});\n\n\tconst url = `https://{{chainId}}.insight.thirdweb.com/v1/events/{{contractAddress}}?${params}`;\n\tconst response = await fetch(url, {\n\t\theaders: { \"x-client-id\": \"{{clientId}}\" },\n\t});\n\treturn await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Signature Verification in TypeScript\nDESCRIPTION: TypeScript functions to generate and validate webhook signatures for security purposes. It creates a SHA-256 HMAC signature using the request body, timestamp, and webhook secret to verify that webhook requests are authentic.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/webhooks/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst generateSignature = (\n\tbody: string,\n\ttimestamp: string,\n\tsecret: string,\n): string => {\n\tconst payload = `${timestamp}.${body}`;\n\treturn crypto.createHmac(\"sha256\", secret).update(payload).digest(\"hex\");\n};\n\nconst isValidSignature = (\n\tbody: string,\n\ttimestamp: string,\n\tsignature: string,\n\tsecret: string,\n): boolean => {\n\tconst expectedSignature = generateSignature(body, timestamp, secret);\n\treturn crypto.timingSafeEqual(\n\t\tBuffer.from(expectedSignature),\n\t\tBuffer.from(signature),\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lens Profile Metadata in TypeScript\nDESCRIPTION: Demonstrates how to fetch profile metadata from a Lens protocol profile ID using the thirdweb SDK. Returns profile information including display name and bio.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/examples/lens-protocol/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getProfileMetadata } from \"thirdweb/extensions/lens\";\n\nconst profileData = await getProfileMetadata({ profileId, client });\n\nif (profileData) {\n  console.log(\"Display name: \", profileData.lens.name);\n  console.log(\"Bio: \", profileData.lens.bio);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic In-App Wallet Initialization - TypeScript\nDESCRIPTION: Basic setup for creating an in-app wallet with default configuration supporting email/password, Google, Apple, Facebook login, and passkey.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet();\n```\n\n----------------------------------------\n\nTITLE: Basic Write Transaction with ThirdwebContract\nDESCRIPTION: Basic usage example of ThirdwebContract.Write method showing the essential parameters needed to execute a smart contract transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/contracts/write/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar transactionReceipt = await contract.Write(wallet, contract, \"methodName\", weiValue, parameters);\n```\n\n----------------------------------------\n\nTITLE: Basic Thirdweb Build Command\nDESCRIPTION: The basic command to compile smart contracts and detect implemented extensions using Thirdweb CLI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/build/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb build\n```\n\n----------------------------------------\n\nTITLE: Setting up Ecosystem Wallet in TypeScript\nDESCRIPTION: Demonstrates how to create a unified identity for users with ecosystem wallets supporting multiple apps and games.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient, ecosystemWallet } from \"thirdweb\";\n\n// Create the client (do this once and reuse it)\nconst client = createThirdwebClient({\n  clientId: \"YOUR_CLIENT_ID\",\n});\n\n// Initialize ecosystem wallet\nconst wallet = ecosystemWallet({\n  client,\n  ecosystemId: \"YOUR_ECOSYSTEM_ID\", // Get from your ecosystem dashboard\n});\n\n// Connect with email\nconst emailWallet = await wallet.connect({\n  strategy: \"email\",\n  email: \"user@example.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for IPFS Deployment\nDESCRIPTION: Configuration settings in vite.config.js and package.json for deploying a Vite application to IPFS.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/storage/how-to-use-storage/host-web-app/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nconst defaultConfig = {\n  base: \"./\",\n  plugins: [react()]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"yarn build && npx thirdweb@latest upload dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Claimed Tokens in Solidity\nDESCRIPTION: Internal function to transfer the NFTs being claimed to the appropriate recipient, handling token ID, quantity, and returning the starting token ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transferTokensOnClaim(address to, uint256 tokenId, uint256 quantityBeingClaimed)\n    internal\n    virtual\n    returns (uint256 startTokenId);\n```\n\n----------------------------------------\n\nTITLE: Converting Between Ethers.js v5 and Thirdweb Components\nDESCRIPTION: Demonstrates how to use ethers5Adapter to convert between ethers.js v5 Signers and thirdweb accounts. This enables compatibility with libraries that use ethers.js v5.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/adapters/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers5Adapter } from \"thirdweb/adapters/ethers5\";\n\n// convert an ethers signer to a thirdweb account\nconst signer: ethers.Signer = ...;\nconst account = await ethers5Adapter.signer.fromEthers({\n  signer,\n});\n\n// convert a thirdweb account to ethers signer\nconst ethersSigner = await ethers5Adapter.signer.toEthers({\n  client,\n  chain,\n  account\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Crypto Purchase Test Mode - SendTransaction\nDESCRIPTION: Implementation of test mode for crypto-to-crypto transactions using useSendTransaction hook.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/testing-pay/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst { mutate: sendTransaction } = useSendTransaction({\n\tpayModal: {\n\t\tbuyWithCrypto: {\n\t\t\ttestMode: true, // defaults to false\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Single Offer Details Solidity Interface\nDESCRIPTION: View function that returns full details of a specific offer by its ID, including the offer struct definition.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_27\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Offer {\n    uint256 offerId;\n    address offeror;\n    address assetContract;\n    uint256 tokenId;\n    uint256 quantity;\n    address currency;\n    uint256 totalPrice;\n    uint256 expirationTimestamp;\n    TokenType tokenType;\n    Status status;\n}\n\nfunction getOffer(uint256 offerId) external view returns (Offer memory offer);\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb Package with npm\nDESCRIPTION: Command to install the thirdweb package in a Node.js project for using smart accounts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/guides/typescript/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i thirdweb\n```\n\n----------------------------------------\n\nTITLE: Connecting InAppWallet with Custom Auth Endpoint in Unity\nDESCRIPTION: Shows how to connect a wallet using a generic custom auth endpoint. The code configures InAppWalletOptions with the AuthEndpoint provider type and a payload for authentication through a custom endpoint.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/in-app-wallet/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar inAppWalletOptions = new InAppWalletOptions(\n    authprovider: AuthProvider.AuthEndpoint, \n    jwtOrPayload: \"mypayload\"\n);\nvar options = new WalletOptions(\n    provider: WalletProvider.InAppWallet, \n    chainId: 1, \n    inAppWalletOptions: inAppWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Backend API for Minting NFTs with thirdweb Engine\nDESCRIPTION: This code snippet shows how to implement a backend API endpoint that uses thirdweb Engine to mint an NFT to a user's wallet. It demonstrates proper API call structure and authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/guides/airdrop-nfts/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function POST(request: Request) {\n\tconst { userWalletAddress } = await request.json();\n\n\tawait fetch(\n\t\t\"<engine_url>/contract/<chain_id>/<nft_contract_address>/erc1155/mint-to\",\n\t\t{\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: \"Bearer <thirdweb_secret_key>\",\n\t\t\t\t\"x-backend-wallet-address\": \"<backend_wallet_address>\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\treceiver: userWalletAddress,\n\t\t\t\tmetadataWithSupply: {\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tname: \"Acme Inc. Superfan\",\n\t\t\t\t\t\tdescription: \"Created with thirdweb Engine\",\n\t\t\t\t\t\timage:\n\t\t\t\t\t\t\t\"ipfs://QmciR3WLJsf2BgzTSjbG5zCxsrEQ8PqsHK7JWGWsDSNo46/nft.png\",\n\t\t\t\t\t},\n\t\t\t\t\tsupply: \"1\",\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t);\n\n\treturn NextResponse.json({ message: \"Success!\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface Support Check in ERC721Core Contract\nDESCRIPTION: This Solidity function checks if the ERC721Core contract supports a given interface. It specifically checks for the ERC721 interface ID and delegates to the parent implementation for other interfaces.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/how-it-works/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction supportsInterface(bytes4 interfaceId)\n\tpublic\n\tview\n\toverride(ERC721AUpgradeable, IERC721AUpgradeable, Core)\n\treturns (bool)\n{\n\treturn interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n\t\t|| super.supportsInterface(interfaceId);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PayEmbed Component in React\nDESCRIPTION: Demonstrates how to integrate the PayEmbed component for wallet funding functionality. The component allows users to fund their wallets with crypto or fiat, with customizable options for mode, metadata, and prefill settings.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/pay/fund-wallets/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PayEmbed } from \"thirdweb/react\";\n\nfunction App() {\n  return (\n    <PayEmbed\n      client={client}\n      payOptions={{\n        mode: \"fund_wallet\",\n        metadata: {\n          name: \"Get funds\",\n        },\n        prefillBuy: {\n          chain: base,\n          amount: \"0.01\",\n        },\n        // ... theme, currency, amounts, payment methods, etc.\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Name to Ethereum Address in TypeScript\nDESCRIPTION: Demonstrates how to resolve an ENS domain name to its corresponding Ethereum address using the resolveAddress function from thirdweb/extensions/ens.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/examples/ethereum-name-service/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolveAddress } from \"thirdweb/extensions/ens\";\n\nconst address = await resolveAddress({\n  client,\n  name: \"vitalik.eth\",\n});\n\n// Expected result: \"0x...\"\n```\n\n----------------------------------------\n\nTITLE: Deploying NFT Drop Contract with React Native\nDESCRIPTION: React Native implementation for deploying an NFT Drop contract using thirdweb SDK\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/nft-drop/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst sdk = useSDK(\n\tsdk.deployer.deployBuiltInContract(\"nft-drop\", {\n\t\tname: \"<your_contract_name>\",\n\t\tprimary_sale_recipient: \"<wallet_address>\",\n\t}),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Generated Extension Function in TypeScript\nDESCRIPTION: This snippet shows how to use a generated extension function (permit) in a TypeScript project. It demonstrates importing the function, creating a contract instance, and executing a type-safe permit transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/generate/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { permit } from \"/thirdweb/10/0x0b2c639c533813f4aa9d7837caf62653d097ff85\";\n\nconst contract = getContract({\n\tclient,\n\tchain: optimism,\n\taddress: USDC_ADDRESS,\n});\n\n// Type-safe function to do a permit transaction\nconst transaction = permit({\n  owner: ...,\n  spender: ...,\n  value: ...,\n  deadline: ...,\n  signature: ...,\n});\nawait sendTransaction({ transaction, account });\n```\n\n----------------------------------------\n\nTITLE: Reveal Function Implementation\nDESCRIPTION: Implementation of the reveal function that allows authorized addresses to reveal delayed reveal NFTs, including authorization check.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/delayed-reveal/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n    *  @notice       Lets an authorized address reveal a batch of delayed reveal NFTs.\n    *\n    *  @param _index The ID for the batch of delayed-reveal NFTs to reveal.\n    *  @param _key   The key with which the base URI for the relevant batch of NFTs was encrypted.\n    */\nfunction reveal(uint256 _index, bytes calldata _key) external virtual override returns (string memory revealedURI) {\n    require(_canReveal(), \"Not authorized\");\n\n    uint256 batchId = getBatchIdAtIndex(_index);\n    revealedURI = getRevealURI(batchId, _key);\n\n    _setEncryptedData(batchId, \"\");\n    _setBaseURI(batchId, revealedURI);\n\n    emit TokenURIRevealed(_index, revealedURI);\n}\n\n/// @dev Checks whether NFTs can be revealed in the given execution context.\nfunction _canReveal() internal view virtual returns (bool) {\n    return msg.sender == owner();\n}\n```\n\n----------------------------------------\n\nTITLE: Signature-Based Token Minting Implementation\nDESCRIPTION: Core minting function that processes signed mint requests and handles token distribution with payment collection.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/signature-mint-vote/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n *  @notice           Mints tokens according to the provided mint request.\n *\n *  @param _req       The payload / mint request.\n *  @param _signature The signature produced by an account signing the mint request.\n */\nfunction mintWithSignature(MintRequest calldata _req, bytes calldata _signature)\n    external\n    payable\n    virtual\n    returns (address signer)\n{\n    require(_req.quantity > 0, \"Minting zero tokens.\");\n\n    // Verify and process payload.\n    signer = _processRequest(_req, _signature);\n\n    /**\n        *  Get receiver of tokens.\n        *\n        *  Note: If `_req.to == address(0)`, a `mintWithSignature` transaction sitting in the\n        *        mempool can be frontrun by copying the input data, since the minted tokens\n        *        will be sent to the `_msgSender()` in this case.\n        */\n    address receiver = _req.to == address(0) ? msg.sender : _req.to;\n\n    // Collect price\n    _collectPriceOnClaim(_req.primarySaleRecipient, _req.quantity, _req.currency, _req.pricePerToken);\n\n    // Mint tokens.\n    _mint(receiver, _req.quantity);\n\n    emit TokensMintedWithSignature(signer, receiver, _req);\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Signature Verification in TypeScript\nDESCRIPTION: TypeScript functions for generating and validating webhook signatures using HMAC SHA-256.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/webhooks/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst generateSignature = (\n\tbody: string,\n\ttimestamp: string,\n\tsecret: string,\n): string => {\n\tconst payload = `${timestamp}.${body}`;\n\treturn crypto.createHmac(\"sha256\", secret).update(payload).digest(\"hex\");\n};\n\nconst isValidSignature = (\n\tbody: string,\n\ttimestamp: string,\n\tsignature: string,\n\tsecret: string,\n): boolean => {\n\tconst expectedSignature = generateSignature(body, timestamp, secret);\n\treturn crypto.timingSafeEqual(\n\t\tBuffer.from(expectedSignature),\n\t\tBuffer.from(signature),\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Balances in C# with Thirdweb SDK\nDESCRIPTION: This code snippet demonstrates how to get both native token balance and ERC20 token balance from a wallet using the GetBalance extension method. The method requires a wallet instance and chain ID, with an optional ERC20 contract address parameter.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/getbalance/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Get native balance\nBigInteger nativeBalance = await wallet.GetBalance(chainId);\n\n// Get ERC20 token balance\nBigInteger tokenBalance = await wallet.GetBalance(chainId, erc20ContractAddress);\n```\n\n----------------------------------------\n\nTITLE: Token Transfer Implementation with ThirdwebContract.Write\nDESCRIPTION: Complete example demonstrating how to use ThirdwebContract.Write to execute an ERC20 token transfer, including contract initialization, wallet setup, and transaction execution.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/contracts/write/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nBigInteger chainId = 1; // Ethereum mainnet\nstring contractAddress = \"0x...\"; // Your contract address\nvar client = ThirdwebClient.Create(secretKey: \"yourSecretKey\");\nvar contract = await ThirdwebContract.Create(client, contractAddress, chainId);\n\n// The wallet that signs and sends the transaction\nvar wallet = await PrivateKeyWallet.Create(client, \"yourPrivateKeyHex\");\n\n// Assuming transfer takes an address and an amount as parameters\nstring toAddress = \"0x...\";\nBigInteger amount = new BigInteger(1000); // The amount to transfer\n\n// No ether is being sent in this non-payable transaction, so weiValue is 0\nBigInteger weiValue = BigInteger.Zero;\n\n// Executing the transfer\nvar receipt = await contract.Write(wallet, contract, \"transfer\", weiValue, toAddress, amount);\nConsole.WriteLine($\"Transaction receipt: {receipt}\");\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Side Thirdweb Client\nDESCRIPTION: Code to create a thirdweb client on the server side using the secret key from environment variables.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// thirdwebClient.js\nimport { createThirdwebClient } from \"thirdweb\";\n\nconst secretKey = process.env.THIRDWEB_SECRET_KEY!;\n\nexport const thirdwebClient = createThirdwebClient({ secretKey });\n```\n\n----------------------------------------\n\nTITLE: Disabling Buy With Crypto Payment Option\nDESCRIPTION: This snippet shows how to disable the crypto payment option in the PayEmbed component, which limits users to only fiat payment methods for purchasing onchain goods or services.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/payembed/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<PayEmbed\n\tclient={client}\n\tpayOptions={{\n\t\tbuyWithCrypto: false,\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up ThirdwebProvider in Next.js Layout\nDESCRIPTION: Implementation of the ThirdwebProvider component in the root layout of a Next.js application. This wrapper provides the thirdweb context to all child components in the application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/next/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// app/layout.tsx\nimport { ThirdwebProvider } from \"thirdweb/react\";\n\nconst Layout = ({ children }: { children: React.ReactNode }) => {\n\treturn <ThirdwebProvider>{children}</ThirdwebProvider>;\n};\n\nexport default Layout;\n```\n\n----------------------------------------\n\nTITLE: Getting Wallet Address in TypeScript\nDESCRIPTION: Demonstrates how to access the wallet address from an account instance using TypeScript.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/interact-with-accounts/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = inAppWallet.getAccount();\nconst address = account.address;\n```\n\n----------------------------------------\n\nTITLE: Email Authentication in TypeScript\nDESCRIPTION: This snippet illustrates the process of email authentication in a non-React TypeScript environment, including pre-authentication and connection steps.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/build-your-own-ui/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet, preAuthenticate } from \"thirdweb/wallets/in-app\";\n\n// send email verification code\nawait preAuthenticate({\n\tclient,\n\tstrategy: \"email\",\n\temail,\n});\n\nconst wallet = inAppWallet();\nconst account = await wallet.connect({\n\tclient,\n\tstrategy: \"email_verification\",\n\temail,\n\tverificationCode,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721Supply Contract\nDESCRIPTION: Example smart contract demonstrating how to inherit from ERC721A and implement the totalSupply function. The contract includes constructor initialization and an optional override for the totalSupply function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Supply/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\n\ncontract Contract is ERC721A {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC721A(\n            _name,\n            _symbol\n        )\n    {}\n\n    function totalSupply() public view override returns (uint256) {\n        // Your custom implementation here (overriding this function is optional)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Mint Request Signing Authorization\nDESCRIPTION: Virtual internal function that determines whether a given address is authorized to sign mint requests. Can be overridden by implementing contracts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721SignatureMint/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSignMintRequest(address signer) internal view virtual returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Connecting In-App Wallet with Firebase JWT\nDESCRIPTION: Code to connect thirdweb's In-App Wallet using the Firebase JWT token for authentication, implementing the connectInApp function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/firebase-auth/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { useConnect } from \"thirdweb/react\";\n\nconst { connect } = useConnect();\n\nconst connectInApp = async (jwt: string) => {\n\tawait connect(() => {\n\t\tconst wallet = inAppWallet();\n\t\twallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"jwt\",\n\t\t\tjwt: await getFirebaseJWT(),\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Recovering Signer Address from Mint Request in Solidity\nDESCRIPTION: This internal view function returns the address of the signer of the mint request. It takes a MintRequest struct and a signature as input, and returns the signer's address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155SignatureMint/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _recoverAddress(MintRequest calldata req, bytes calldata signature)\n    internal\n    view\n    returns (address signer)\n```\n\n----------------------------------------\n\nTITLE: Initializing Account in AccountFactory\nDESCRIPTION: This Solidity function _initializeAccount is called in createAccount to initialize the account contract. It demonstrates how to override and customize the initialization process.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account-factory/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initializeAccount(\n    address _account,\n    address _admin,\n    bytes calldata _data\n) internal override {\n    Account(payable(_account)).initialize(_admin, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Transaction Function\nDESCRIPTION: Function to execute a single transaction, callable only by admin or entrypoint.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/AccountExtension/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction execute(\n    address _target,\n    uint256 _value,\n    bytes calldata _calldata\n) external virtual onlyAdminOrEntrypoint {\n    _call(_target, _value, _calldata);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ERC-20 Paymaster in Unity\nDESCRIPTION: This code shows how to connect a wallet in Unity with Base USDC token paymaster. It sets up an in-app wallet with Steam authentication and configures the smart wallet to use Base USDC for gas payments.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/erc-20-paymaster/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar chainId = 8453; // base\n\nvar erc20SmartWallet = await ConnectWallet(\n    new WalletOptions(\n        WalletProvider.InAppWallet,\n        chainId,\n        inAppWalletOptions: new InAppWalletOptions(authprovider: AuthProvider.Steam),\n        smartWalletOptions: new SmartWalletOptions(sponsorGas: true, tokenPaymaster: TokenPaymaster.BASE_USDC)\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Ecosystem Wallet for Allowlisted Partners in TypeScript\nDESCRIPTION: Instantiates an ecosystem wallet for a restricted ecosystem that requires partners to be allowlisted. Partners must provide both the Ecosystem ID and their unique Partner ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/integrating-partners/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ecosystemWallet } from \"thirdweb/wallets\";\n\n// Create a wallet for \"Allowlist\" ecosystems restricted to partners\nconst wallet = ecosystemWallet(\"ecosystem.your-ecosystem-id\", {\n\tpartnerId: \"...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectButton with Auth Configuration in React\nDESCRIPTION: Creates a ConnectButton component with authentication hooks for login, logout, and session management. Requires implementation of server communication functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/deploying-to-production/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\nimport { createThirdwebClient } from \"thirdweb\";\n\nconst client = createThirdwebClient({ clientId });\n\nexport default function Connect() {\n\t<ConnectButton\n\t\tclient={client}\n\t\tauth={{\n\t\t\tgetLoginPayload: async (params) => {\n\t\t\t\tconst address = params.address;\n\t\t\t\t// fetch the login payload here using address\n\t\t\t},\n\t\t\tdoLogin: async (params) => {\n\t\t\t\t// send the signed login payload (params) to the server\n\t\t\t},\n\t\t\tisLoggedIn: async () => {\n\t\t\t\t// fetch the user's login status from the server\n\t\t\t},\n\t\t\tdoLogout: async () => {\n\t\t\t\t// send a logout request to the server\n\t\t\t},\n\t\t}}\n\t/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic In-App Wallet in TypeScript\nDESCRIPTION: A simple example of creating an in-app wallet using the inAppWallet function without custom options. This creates a default wallet that supports email/password login, Google, Apple, Facebook login, and passkey authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/in-app-wallet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet();\n```\n\n----------------------------------------\n\nTITLE: Defining Pack Content Structure in Solidity\nDESCRIPTION: This code snippet defines the structure for pack contents, including token types, asset contracts, and distribution amounts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/pack/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nenum TokenType { ERC20, ERC721, ERC1155 }\n\nstruct Token {\n    address assetContract;\n    TokenType tokenType;\n    uint256 tokenId;\n    uint256 totalAmount;\n}\n\nuint256 perUnitAmount;\n```\n\n----------------------------------------\n\nTITLE: Listing Available Models with OpenAI Models API via thirdweb Nebula\nDESCRIPTION: This snippet shows how to fetch available AI models using OpenAI's Models API through thirdweb Nebula. It initializes the OpenAI client with thirdweb's models endpoint URL and lists all available models.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/plugins/openai/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\n\n# https://nebula-api.thirdweb.com/models\n\nclient = OpenAI(\n    base_url=\"https://nebula-api.thirdweb.com/\",\n    api_key=\"\",\n)\n\nmodels = client.models.list()\nprint(models)\n```\n\n----------------------------------------\n\nTITLE: Connecting InAppWallet with External Siwe Authentication in Unity\nDESCRIPTION: Demonstrates connecting a wallet using external Sign-In with Ethereum (SiweExternal) authentication. The code opens a browser with a thirdweb React page for authentication before redirecting back to the game.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/in-app-wallet/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar inAppWalletOptions = new InAppWalletOptions(authprovider: AuthProvider.SiweExternal)\nvar options = new WalletOptions(\n    provider: WalletProvider.InAppWallet,\n    chainId: 421614,\n    inAppWalletOptions: inAppWalletOptions\n);\nvar wallet = await ConnectWallet(inAppWalletOptions);\n```\n\n----------------------------------------\n\nTITLE: Importing Staking20 Contract in Solidity\nDESCRIPTION: Shows how to import the Staking20 contract extension from thirdweb for implementing ERC20 staking functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20Staking/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/Staking20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Dynamic Method Resolution in TypeScript\nDESCRIPTION: Demonstrates how to dynamically resolve contract methods at runtime using resolveMethod function, trading type safety for flexibility.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/prepare/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareContractCall, resolveMethod, toWei } from \"thirdweb\";\nconst tx = prepareContractCall({\n\tcontract,\n\t// in this case we only pass the name of the method we want to call\n\tmethod: resolveMethod(\"mintTo\"),\n\t// however using this method we lose type safety for our params\n\tparams: [\"0x123...\", toWei(\"100\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectButton with Auth Support\nDESCRIPTION: A React component that implements the thirdweb ConnectButton with authentication functionality, handling login, verification, and session management.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// components/ConnectButtonAuth.tsx\nimport { ConnectButton } from \"thirdweb/react\";\nimport { client } from \"../lib/client\";\nimport { LoginPayload, VerifyLoginPayloadParams } from \"thirdweb/auth\";\nimport { get, post } from \"../lib/api\";\nimport { sepolia } from \"thirdweb/chains\";\n\nexport default function ConnectButtonAuth() {\n\treturn (\n\t\t<ConnectButton\n\t\t\tclient={client}\n\t\t\tauth={{\n\t\t\t\t/**\n\t\t\t\t * \t`getLoginPayload` should @return {VerifyLoginPayloadParams} object.\n\t\t\t\t * \tThis can be generated on the server with the generatePayload method.\n\t\t\t\t */\n\t\t\t\tgetLoginPayload: async (params: {\n\t\t\t\t\taddress: string;\n\t\t\t\t}): Promise<LoginPayload> => {\n\t\t\t\t\treturn get({\n\t\t\t\t\t\turl: process.env.AUTH_API + \"/login\",\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\taddress: params.address,\n\t\t\t\t\t\t\tchainId: sepolia.id.toString(),\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * \t`doLogin` performs any logic necessary to log the user in using the signed payload.\n\t\t\t\t * \tIn this case, this means sending the payload to the server for it to set a JWT cookie for the user.\n\t\t\t\t */\n\t\t\t\tdoLogin: async (params: VerifyLoginPayloadParams) => {\n\t\t\t\t\tawait post({\n\t\t\t\t\t\turl: process.env.AUTH_API + \"/login\",\n\t\t\t\t\t\tparams,\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * \t`isLoggedIn` returns true or false to signal if the user is logged in.\n\t\t\t\t * \tHere, this is done by calling the server to check if the user has a valid JWT cookie set.\n\t\t\t\t */\n\t\t\t\tisLoggedIn: async () => {\n\t\t\t\t\treturn await get({\n\t\t\t\t\t\turl: process.env.AUTH_API + \"/isLoggedIn\",\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * \t`doLogout` performs any logic necessary to log the user out.\n\t\t\t\t * \tIn this case, this means sending a request to the server to clear the JWT cookie.\n\t\t\t\t */\n\t\t\t\tdoLogout: async () => {\n\t\t\t\t\tawait post({\n\t\t\t\t\t\turl: process.env.AUTH_API + \"/logout\",\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t}}\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Ethereum Address to Primary ENS Name in TypeScript\nDESCRIPTION: Shows how to get the primary ENS name associated with an Ethereum address using the resolveName function from thirdweb/extensions/ens.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/examples/ethereum-name-service/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolveName } from \"thirdweb/extensions/ens\";\n\nconst name = await resolveName({\n  client,\n  address: \"0x1234...\",\n});\n\n// Expected result: \"something.eth\"\n```\n\n----------------------------------------\n\nTITLE: React Component Implementation for NFT Claiming\nDESCRIPTION: React component example showing how to implement NFT claiming functionality using ThirdwebProvider and TransactionButton. Demonstrates wallet connection checking and NFT claiming process.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/interact-blockchain/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n\tconst account = useActiveAccount();\n\n\treturn (\n\t\t<div>\n\t\t\t<TransactionButton\n\t\t\t\ttransaction={() => {\n\t\t\t\t\tif (!account) {\n\t\t\t\t\t\treturn alert(\"Please connect your wallet\");\n\t\t\t\t\t}\n\t\t\t\t\treturn claimTo({ contract, to: account.address, quantity: 1 });\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tClaim NFT\n\t\t\t</TransactionButton>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Theme for PayEmbed Component\nDESCRIPTION: This snippet demonstrates how to create and apply a custom theme to the PayEmbed component by importing and extending the darkTheme provider, allowing for more detailed visual customization.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/payembed/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { darkTheme } from 'thirdweb/react';\n\n// Using custom theme\n<PayEmbed theme={darkTheme({ ... })} />\n\n```\n\n----------------------------------------\n\nTITLE: Internal Call Function\nDESCRIPTION: Internal function to make contract calls and handle reverts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/AccountExtension/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _call(\n    address _target,\n    uint256 value,\n    bytes memory _calldata\n) internal {\n    (bool success, bytes memory result) = _target.call{ value: value }(_calldata);\n    if (!success) {\n        assembly {\n            revert(add(result, 32), mload(result))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Converted Ethers Contract\nDESCRIPTION: Demonstrates common contract operations using the converted Ethers.js contract instance.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/ethers-adapter/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Estimate gas\nconst gasLimit = await contract.estimateGas[\"functionName\"](...params);\n\n// Send a transaction\nconst tx = await contract[\"functionName\"](...params, { gasLimit });\n```\n\n----------------------------------------\n\nTITLE: Transaction Filters Interface for Insight API\nDESCRIPTION: Defines the interface for transaction-related filters that can be used in thirdweb Insight API requests, including transaction properties like hash, address, value, and gas.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransactionFilters {\n\tfilter_transaction_index?: number;\n\tfilter_transaction_hash?: string;\n\tfilter_from_address?: string;\n\tfilter_value?: string;    // Value in wei (e.g., \"1000000000000000000\" for 1 ETH)\n\tfilter_value_gte?: string;\n\tfilter_value_gt?: string;\n\tfilter_value_lte?: string;\n\tfilter_value_lt?: string;\n\tfilter_gas_price?: number;\n\tfilter_gas?: number;\n\t// Additional gte, gt, lte, lt variants for numeric fields\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Phone Number in EcosystemWallet for Unity\nDESCRIPTION: Shows how to authenticate a user with a phone number using EcosystemWallet. This will display an OTP verification modal to validate the user's identity.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/ecosystem-wallet/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar ecosystemWalletOptions = new EcosystemWalletOptions(\n    ecosystemId: \"ecosystem.your-ecosystem\", \n    phoneNumber: \"+1234567890\"\n);\nvar options = new WalletOptions(\n    provider: WalletProvider.EcosystemWallet, \n    chainId: 1, \n    ecosystemWalletOptions: ecosystemWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Connecting Wallet in C#\nDESCRIPTION: Connects a wallet using specified WalletOptions and returns an IThirdwebWallet instance for blockchain interactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/thirdwebmanager/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar walletOptions = new WalletOptions(WalletProvider.PrivateKeyWallet, 421614);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(walletOptions);\nvar address = await wallet.GetAddress();\n```\n\n----------------------------------------\n\nTITLE: Configuring Partner ID for Ecosystem Wallet\nDESCRIPTION: Demonstrates how to initialize an ecosystem wallet with a partner ID for closed ecosystems. Partners must provide a valid partnerId to connect to the ecosystem.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/ecosystem-wallet/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst wallet = ecosystemWallet(\"ecosystem.your-ecosystem-id\", {\n\tpartnerId: \"your-partner-id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Approve Function Calls with ABI in Insight Webhooks\nDESCRIPTION: This example shows how to filter Approve function calls on Ethereum for a specific contract address. It includes the function signature hash and ABI for data decoding.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/webhooks/filtering/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  ...\n  filters: {\n    \"v1.transactions\": {\n      chain_ids: [\"1\"],\n      addresses: [\"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\"],\n      signatures: [\n        {\n          sig_hash: \"0x095ea7b3\",\n          abi: '{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"type\":\"function\"}',\n        },\n      ],\n    },\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting In-App Wallet with Custom Auth in TypeScript\nDESCRIPTION: Code example showing how to connect to an In-App Wallet using a custom auth endpoint in any TypeScript framework. This snippet demonstrates how to initialize the wallet and connect using the auth_endpoint strategy.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-auth-server/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet();\n\nconst account = await wallet.connect({\n\tclient,\n\tstrategy: \"auth_endpoint\",\n\tpayload: JSON.stringify({ userId: \"ANY_RANDOM_ID_HERE\" }),\n});\n\n// use the account to send transactions\n```\n\n----------------------------------------\n\nTITLE: ERC20ClaimConditions Contract Implementation\nDESCRIPTION: Example contract showing how to implement ERC20ClaimConditions by inheriting from ERC20 and DropSinglePhase extensions. Includes constructor and overridable functions for claim conditions, price collection, and token transfers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20ClaimConditions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/openzeppelin-presets/token/ERC20/ERC20.sol\";\nimport \"@thirdweb-dev/contracts/extension/DropSinglePhase.sol\";\n\ncontract Contract is ERC20, DropSinglePhase {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC20(\n            _name,\n            _symbol\n        )\n    {}\n\n    function _canSetClaimConditions() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual override {\n        // Your custom implementation here\n    }\n\n    function _transferTokensOnClaim(address _to, uint256 _quantityBeingClaimed)\n        internal\n        virtual\n        override\n        returns (uint256 startTokenId)\n    {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721A Contract\nDESCRIPTION: Shows how to import the ERC721A contract from thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\n```\n\n----------------------------------------\n\nTITLE: Creating and Using EngineWallet in .NET\nDESCRIPTION: Demonstrates how to instantiate an EngineWallet instance with environment variables and perform a basic self-transfer transaction. The wallet requires Engine URL, access token, and wallet address configurations, and is designed for secure backend environments only.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/engine-wallet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// EngineWallet is compatible with IThirdwebWallet and can be used with any SDK method/extension\nvar engineWallet = EngineWallet.Create(\n    client: client,\n    engineUrl: Environment.GetEnvironmentVariable(\"ENGINE_URL\"),\n    authToken: Environment.GetEnvironmentVariable(\"ENGINE_ACCESS_TOKEN\"),\n    walletAddress: Environment.GetEnvironmentVariable(\"ENGINE_BACKEND_WALLET_ADDRESS\"),\n    timeoutSeconds: null, // no timeout\n    additionalHeaders: null // can set things like x-account-address if using basic session keys\n);\n\n// Simple self transfer\nvar receipt = await engineWallet.Transfer(chainId: 11155111, toAddress: await engineWallet.GetAddress(), weiAmount: 0);\nConsole.WriteLine($\"Receipt: {receipt}\");\n```\n\n----------------------------------------\n\nTITLE: Getting Post-Onramp Quote for Crypto Swap in TypeScript\nDESCRIPTION: Shows how to obtain a quote for converting an intermediary token to the destination token using getPostOnRampQuote when a crypto-to-crypto purchase is required after onramping.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/build-a-custom-experience/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst swapQuote = await getPostOnRampQuote({\n\tclient: client,\n\tbuyWithFiatStatus: fiatStatus,\n});\n\nif (!swapQuote) {\n\t// invalid fiatStatus status\n} else {\n\t// Go to step 6 to kick off the \"Swap\" flow\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectButton with Universal Bridge in React\nDESCRIPTION: Code example showing how to implement thirdweb's ConnectButton component which has Universal Bridge enabled by default. This allows users to onramp and purchase crypto directly from the Connect interface after logging in.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\n\nconst client = createThirdwebClient({ clientId: your_client_id });\n\nexport default function App() {\n\treturn (\n\t\t<ThirdwebProvider>\n\t\t\t<ConnectButton client={client} />\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating NFT Listing Function\nDESCRIPTION: Function to update existing listing parameters including price and timing. Uses the same ListingParameters struct as create function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction updateListing(uint256 listingId, ListingParameters memory params) external\n```\n\n----------------------------------------\n\nTITLE: Uploading JSON objects to IPFS using thirdweb SDK\nDESCRIPTION: This code snippet shows how to upload JSON objects to IPFS using the thirdweb SDK. It uses the 'upload' function from the 'thirdweb/storage' module to upload a JSON object with a specified name.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/storage/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { upload } from \"thirdweb/storage\";\n\nconst uris = await upload({\n\tclient,\n\tfiles: [\n\t\t{\n\t\t\tname: \"something\",\n\t\t\tdata: {\n\t\t\t\thello: \"world\",\n\t\t\t},\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Signature Validation\nDESCRIPTION: Implementation for validating user operation signatures.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\n    internal\n    virtual\n    override\n    returns (uint256 validationData)\n{\n    bytes32 hash = userOpHash.toEthSignedMessageHash();\n    address signer = hash.recover(userOp.signature);\n\n    if (!isValidSigner(signer)) return SIG_VALIDATION_FAILED;\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721SignatureMint Contract in Solidity\nDESCRIPTION: Demonstrates how to create a custom NFT contract that inherits from ERC721SignatureMint, including constructor implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/signature-mint/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC721SignatureMint.sol\";\n\ncontract MyNFT is ERC721SignatureMint {\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps,\n        address _primarySaleRecipient\n    )\n        ERC721SignatureMint(\n            _defaultAdmin,\n            _name,\n            _symbol,\n            _royaltyRecipient,\n            _royaltyBps,\n            _primarySaleRecipient\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Wallets with useConnect Hook in React\nDESCRIPTION: This example demonstrates how to build a custom wallet connection UI using the useConnect hook from thirdweb's React SDK. It initializes a thirdweb client, creates a MetaMask wallet instance, and handles the connection process with error and loading states.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/connecting-wallets/hooks/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { useConnect } from \"thirdweb/react\";\nimport { createWallet, injectedProvider } from \"thirdweb/wallets\";\n\nconst client = createThirdwebClient({ clientId });\n\nfunction Example() {\n\tconst { connect, isConnecting, error } = useConnect();\n\treturn (\n\t\t<button\n\t\t\tonClick={() =>\n\t\t\t\tconnect(async () => {\n                    // create a wallet instance\n\t\t\t\t\tconst metamask = createWallet(\"io.metamask\"); // autocomplete the wallet id\n                    // trigger the connection\n\t\t\t\t\tawait metamask.connect({ client });\n\t\t\t\t\t// return the wallet\n\t\t\t\t\treturn metamask;\n\t\t\t\t})\n\t\t\t}\n\t\t>\n\t\t\tConnect\n\t\t</button>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThirdwebProvider Container in React\nDESCRIPTION: Basic setup of the ThirdwebProvider component that wraps the main purchase page component to provide thirdweb functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/guides/nft-checkout/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Home() {\n\treturn (\n\t\t<ThirdwebProvider>\n\t\t\t<PurchasePage />\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Ecosystem Wallet for Non-Gated Ecosystems in TypeScript\nDESCRIPTION: Instantiates an ecosystem wallet for a non-gated (\"Anyone\") ecosystem using the Ecosystem ID. This allows partners to connect to the ecosystem without restrictions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/integrating-partners/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ecosystemWallet } from \"thirdweb/wallets\";\n\n// Create a wallet for a non-gated \"Anyone\" ecosystem\nconst wallet = ecosystemWallet(\"ecosystem.your-ecosystem-id\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Wallet Address with In-App Wallet in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to retrieve the wallet address by first getting the account using the inAppWallet.getAccount() method and then accessing its address property.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/interact-with-wallets/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = inAppWallet.getAccount();\nconst address = account.address;\n```\n\n----------------------------------------\n\nTITLE: Generating JWT with Custom Context in thirdweb Auth\nDESCRIPTION: Example of generating a JWT token with custom context data using thirdweb Auth. This snippet shows how to include additional information (like admin status) in the authentication token.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/next/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst jwt = await thirdwebAuth.generateJWT({\n\tpayload: verifiedPayload.payload,\n\tcontext: {\n\t\tadmin: true,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155SignatureMint Contract in Solidity\nDESCRIPTION: This example demonstrates how to create a custom NFT contract that inherits from ERC1155SignatureMint, including the constructor implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/signature-mint/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC1155SignatureMint.sol\";\n\ncontract MyNFT is ERC1155SignatureMint {\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps,\n        address _primarySaleRecipient\n    )\n        ERC1155SignatureMint(\n            _defaultAdmin,\n            _name,\n            _symbol,\n            _royaltyRecipient,\n            _royaltyBps,\n            _primarySaleRecipient\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Wallet Address in React\nDESCRIPTION: Shows how to get the wallet address from the active account using React hooks.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/interact-with-accounts/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useActiveAccount } from \"thirdweb/react\";\n\nconst account = useActiveAccount();\nconsole.log(\"wallet address\", account.address);\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Function Signature with useReadContract\nDESCRIPTION: How to use the useReadContract hook with a custom function signature when a pre-built extension isn't available. This maintains type safety while allowing interaction with any contract function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/contracts/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nuseReadContract({\n  contract,\n  method: \"function balanceOf(address _owner, uint256 tokenId) view returns (uint256)\",\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding _transferTokensOnClaim Function in ERC20Drop\nDESCRIPTION: This internal function handles the minting of tokens during the claim process. It mints the specified quantity of tokens to the given address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/drop/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transferTokensOnClaim(address _to, uint256 _quantityBeingClaimed)\n    internal\n    virtual\n    override\n    returns (uint256)\n{\n    _mint(_to, _quantityBeingClaimed);\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Mint Request Signature in Solidity\nDESCRIPTION: This function verifies that a mint request is valid and signed by an authorized wallet. It takes a MintRequest struct and a signature as input, and returns a boolean indicating success and the signer's address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155SignatureMint/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verify(MintRequest calldata req, bytes calldata signature)\n    public\n    view\n    returns (bool success, address signer)\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721Burnable Extension\nDESCRIPTION: Example smart contract demonstrating how to implement the IBurnableERC721 interface in an ERC721A contract. Shows constructor setup and burn function implementation structure.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Burnable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IBurnableERC721.sol\";\n\ncontract Contract is ERC721A, IBurnableERC721 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC721A(\n            _name,\n            _symbol\n        )\n    {}\n\n    function burn(uint256 tokenId) external {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Marketplace Listings with Collection Explorer API in TypeScript\nDESCRIPTION: This code demonstrates using the collection explorer API to retrieve NFT collections with pagination. It shows the interface for the returned ListResponse object containing collection data and pagination information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/account-info/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Get marketplace listings\n *\n * @example\n * ```javascript\n * const listings = await sdk.getListings();\n * ```\n *\n * @param options - Options for the request.\n * @returns The listings according to the options\n */\nasync getListings({\n  count = 100,\n  start = 0,\n  tokenContract,\n}: QueryAllParams & { tokenContract?: string }) {\n  return await this.collectionService.getCollections({\n    count,\n    start,\n    parent: tokenContract,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Execution of Bridge Transactions in C#\nDESCRIPTION: Shows how to manually execute and poll the status of a prepared transaction. This example demonstrates converting a prepared transfer to a Thirdweb transaction, sending it, and checking its status.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/universal-bridge/quickstart/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// You may use our extensions to execute yourself...\nvar myTx = await preparedTransfer.Transactions[0].ToThirdwebTransaction(myWallet);\nvar myHash = await ThirdwebTransaction.Send(myTx);\n\n// ...and poll for the status...\nvar status = await bridge.Status(transactionHash: myHash, chainId: 1);\nvar isComplete = status.StatusType == StatusType.COMPLETED;\nConsole.WriteLine($\"Status: {JsonConvert.SerializeObject(status, Formatting.Indented)}\");\n\n// Or use our Execute extensions directly to handle everything for you!\n```\n\n----------------------------------------\n\nTITLE: Creating ThirdwebContract Instance in C#\nDESCRIPTION: Demonstrates how to create an instance of ThirdwebContract using the Create method. This method requires a ThirdwebClient instance, contract address, chain ID, and optionally an ABI. It returns a ThirdwebContract instance ready for blockchain interactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/contracts/create/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar contract = await ThirdwebContract.Create(client, \"contractAddress\", chainId, \"optionalAbi\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Function to Handle Nebula API Response\nDESCRIPTION: A function that processes the Nebula API response, creates a thirdweb client, and executes blockchain transactions using the provided transaction data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/get-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { generateAccount } from \"thirdweb/wallets\";\n\nasync function handleNebulaResponse(response) {\n  const client = createThirdwebClient({\n    secretKey: process.env.THIRDWEB_SECRET_KEY,\n  });\n\n  // You can use any wallet- see https://portal.thirdweb.com/typescript/v5/supported-wallets\n  const account = await generateAccount({ client });\n\n  if (response.actions && response.actions.length > 0) {\n    const action = response.actions[0];\n    const txData = JSON.parse(action.data);\n\n    try {\n      const transaction = prepareTransaction({\n        to: txData.to,\n        data: txData.data,\n        value: BigInt(txData.value),\n        chain: txData.chainId,\n        client,\n      });\n\n      const result = await sendTransaction({\n        transaction,\n        account,\n      });\n\n      console.log(\"Transaction Successful:\", result);\n      return result;\n    } catch (error) {\n      console.error(\"Error executing transaction:\", error);\n      throw error;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155Burnable Contract\nDESCRIPTION: Example contract showing how to implement the IBurnableERC1155 interface with ERC1155 token standard. Includes constructor and burning functions that need custom implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Burnable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IBurnableERC1155.sol\";\n\ncontract Contract is ERC1155, IBurnableERC1155 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC1155(\n            _name,\n            _symbol\n        )\n    {}\n\n    function burn(address account, uint256 id, uint256 value) external override {\n        // Your custom implementation here\n    }\n\n    function burnBatch(\n        address account, uint256[] memory ids, uint256[] memory values) external override {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Progressive Migration with Dual Providers (TypeScript/TSX)\nDESCRIPTION: Example of how to use both v4 and v5 ThirdwebProviders simultaneously for a progressive migration approach.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/installation/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider as ThirdwebProviderV4 } from \"@thirdweb-dev/react\";\nimport { ThirdwebProvider } from \"thirdweb/react\"; // v5\n\n<ThirdwebProviderV4 activeChain={...} clientId={...}>\n  <ThirdwebProvider>\n     ...\n  </ThirdwebProvider>\n</ThirdwebProviderV4>\n```\n\n----------------------------------------\n\nTITLE: Block Filters Interface for Insight API\nDESCRIPTION: Defines the interface for block-related filters that can be used in thirdweb Insight API requests, including block number and block hash filtering options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BlockFilters {\n\tfilter_block_number?: number; // Example: 1000000\n\tfilter_block_number_gte?: number; // Example: 1000000\n\tfilter_block_number_gt?: number; // Example: 1000000\n\tfilter_block_number_lte?: number; // Example: 1000000\n\tfilter_block_number_lt?: number; // Example: 1000000\n\tfilter_block_hash?: string; // Example: \"0x3a1fba5...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Contract Transaction in C#\nDESCRIPTION: Demonstrates how to prepare a transaction using ThirdwebContract.Prepare method. This method creates a ThirdwebTransaction object that can be used for simulating and manipulating transactions before sending them to the blockchain. It requires a wallet signer, contract instance, method name, and Wei value.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/contracts/prepare/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction transaction = await contract.Prepare(wallet, contract, \"methodName\", weiValue, parameters);\n```\n\n----------------------------------------\n\nTITLE: Connecting WalletConnect Wallet in Unity\nDESCRIPTION: Demonstrates how to instantiate and connect a WalletConnect wallet using ThirdwebManager. This code creates a WalletConnect modal that supports connection to over 400 different wallets. Requires proper chain configuration in ThirdwebManager prefab.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/walletconnect/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new WalletOptions(provider: WalletProvider.WalletConnectWallet, chainId: 1);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Configuring PayEmbed Test Mode\nDESCRIPTION: Example of enabling test mode for fiat purchases using the PayEmbed component with testMode configuration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/testing-pay/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<PayEmbed\n\tclient={client}\n\tpayOptions={{\n\t\tbuyWithFiat: {\n\t\t\ttestMode: true, // defaults to false\n\t\t},\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155Supply Contract\nDESCRIPTION: Example implementation of a smart contract that inherits from ERC1155Base and includes the totalSupply function. Shows how to construct the contract with name and symbol parameters and optionally override the totalSupply function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Supply/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base-contracts/ERC71155Base.sol\";\n\ncontract Contract is ERC1155Base {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC1155Base(\n            _name,\n            _symbol\n        )\n    {}\n\n    function totalSupply() public view override returns (uint256) {\n        // Your custom implementation here (overriding this function is optional)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20SignatureMint Contract in Solidity\nDESCRIPTION: This snippet shows how to import the SignatureMintERC20 contract from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20SignatureMint/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/SignatureMintERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155DelayedReveal Contract\nDESCRIPTION: Shows how to import the ERC1155DelayedReveal contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/delayed-reveal/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC1155DelayedReveal.sol\";\n```\n\n----------------------------------------\n\nTITLE: Using Thirdweb React Components in React Native\nDESCRIPTION: Example of importing and using the ThirdwebProvider component from the thirdweb package in a React Native project.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/react-native-adapter/README.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ThirdwebProvider } form \"thirdweb/react\";\n```\n\n----------------------------------------\n\nTITLE: Querying Events Across Multiple Chains\nDESCRIPTION: Example function that retrieves events from both Ethereum (chain ID 1) and Polygon (chain ID 137) networks with a specified limit per chain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/multichain-queries/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst getMultichainEvents = async () => {\n  try {\n    // Query events on Ethereum (1) and Polygon (137)\n    const response = await fetch(\n      'https://insight.thirdweb.com/v1/events?chain=1&chain=137&limit=10',\n      {\n        headers: {\n          'x-client-id': '<YOUR_THIRDWEB_CLIENT_ID>'\n        }\n      }\n    );\n    return await response.json();\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Error Handling in thirdweb Insight API Requests\nDESCRIPTION: Shows how to implement error handling for thirdweb Insight API requests, including checking for successful responses and parsing error data from the API response.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function safeApiCall() {\n\ttry {\n\t\tconst response = await fetch(\"https://{{chainId}}.insight.thirdweb.com/v1/events\", {\n\t\t\theaders: { \"x-client-id\": \"{{clientId}}\" },\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tconst errorData = await response.json();\n\t\t\t// Example error response:\n\t\t\t// { \"error\": \"Invalid client ID\" }\n\t\t\tthrow new Error(errorData.error);\n\t\t}\n\n\t\treturn await response.json();\n\t} catch (error) {\n\t\tconsole.error(\"API Error:\", error.message);\n\t\tthrow error;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to Contract with SDK v5\nDESCRIPTION: Shows how to claim an NFT from a thirdweb Drop contract using the useSendTransaction hook and claimTo extension in SDK v5, demonstrating the new transaction pattern.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Claim an NFT from thirdweb Drop contract\nimport { useSendTransaction } from \"thirdweb/react\";\nimport { claimTo } from \"thirdweb/extensions/erc721\";\n\nconst { mutate: sendTx } = useSendTransaction();\nconst transaction = claimTo({\n  contract,\n  to: \"0x...\",\n  quantity: 1n,\n});\nsendTx(transaction);\n```\n\n----------------------------------------\n\nTITLE: Publishing Smart Contract with thirdweb CLI\nDESCRIPTION: This command uses the thirdweb CLI to publish a smart contract. It compiles the contract, uploads the source code to IPFS, and opens the publish flow in the dashboard.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/publish-contract/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb publish\n```\n\n----------------------------------------\n\nTITLE: ERC1155BatchMintable Contract Implementation\nDESCRIPTION: Example smart contract implementing ERC1155BatchMintable functionality with constructor initialization and mintTo function override. The contract inherits from ERC1155, IMintableERC1155, and Multicall\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155BatchMintable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC1155.sol\";\nimport \"@thirdweb-dev/contracts/extension/Multicall.sol\";\n\ncontract Contract is ERC1155, IMintableERC1155, Multicall {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC1155(\n            _name,\n            _symbol\n        )\n    {}\n\n    function mintTo(\n        address to,\n        uint256 tokenId,\n        string calldata uri,\n        uint256 amount\n    ) external override {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Transaction Execution in C#\nDESCRIPTION: This method simulates the execution of a transaction without actually sending it to the blockchain, returning the raw data result as a string.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/static/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nstring data = await ThirdwebTransaction.Simulate(transaction);\n```\n\n----------------------------------------\n\nTITLE: Getting User Account with In-App Wallet in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to retrieve the user's account using the getAccount method of the inAppWallet instance.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/interact-with-wallets/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = await inAppWallet.getAccount();\n```\n\n----------------------------------------\n\nTITLE: Validating Ethereum Private Keys in C++\nDESCRIPTION: This function determines if a given string is a valid Ethereum private key. It is part of the ThirdwebUtils namespace in the Unreal Engine SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/cpp/thirdweb-utils/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nIsValidPrivateKey(PrivateKey)\n```\n\n----------------------------------------\n\nTITLE: Backend Authentication for Server Wallets in EcosystemWallet for Unity\nDESCRIPTION: Shows how to authenticate using a wallet secret for server wallets, typically used in backend scenarios.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/ecosystem-wallet/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar ecosystemWalletOptions = new EcosystemWalletOptions(\n    ecosystemId: \"ecosystem.your-ecosystem\",\n    authprovider: AuthProvider.Backend, \n    walletSecret: \"very-secret\"\n);\nvar options = new WalletOptions(\n    provider: WalletProvider.EcosystemWallet, \n    chainId: 1, \n    ecosystemWalletOptions: ecosystemWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Solidity Function Signature Examples for Overloaded Functions\nDESCRIPTION: Examples of overloaded function signatures in Solidity. Shows two different 'mintTo' functions with different parameter lists that would require explicit function signatures when called through the Engine API.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/contracts/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mintTo(address to) public\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mintTo(address to, uint256 quantity) public\n```\n\n----------------------------------------\n\nTITLE: Using thirdweb ConnectButton\nDESCRIPTION: Example of importing and using the ConnectButton component from thirdweb with client configuration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\nimport { createThirdwebClient } from \"thirdweb\";\n\nconst client = createThirdwebClient({ clientId: \"your-client-id\" });\n\nexport const YourApp = () => {\n  return <ConnectButton client={client} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectButton with thirdweb Client\nDESCRIPTION: Example of importing and using the ConnectButton component from thirdweb with a client configuration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\nimport { createThirdwebClient } from \"thirdweb\";\n.\n.\n.\n.\nconst Home: NextPage = () => {\n\n  const client = createThirdwebClient({\n    clientId: \"<client_id>\",\n  });\n\n  return (\n      <main>\n        <ConnectButton client={client} />\n      </main>\n\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Making a Request to the Nebula API\nDESCRIPTION: Code that demonstrates how to make a POST request to the Nebula API to interpret a natural language command and retrieve transaction details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/get-started/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst response = await fetch(\"https://nebula-api.thirdweb.com/chat\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"x-secret-key\": process.env.THIRDWEB_SECRET_KEY,\n  },\n  body: JSON.stringify({\n    message: \"send 0.001 ETH on Sepolia to vitalik.eth\",\n    execute_config: {\n      mode: \"client\",\n      signer_wallet_address: \"0xYourWalletAddress\",\n    },\n  }),\n});\n\nconst data = await response.json();\nawait handleNebulaResponse(data);\n```\n\n----------------------------------------\n\nTITLE: Implementing CounterStorage Library\nDESCRIPTION: Creation of a CounterStorage library using ERC-7201 namespace storage layout to store the module's state.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-module-contract/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nlibrary CounterStorage {\n    /// @custom:storage-location erc7201:token.minting.counter\n    bytes32 public constant COUNTER_STORAGE_POSITION =\n        keccak256(abi.encode(uint256(keccak256(\"counter\")) - 1)) &\n            ~bytes32(uint256(0xff));\n\n    struct Data {\n        uint256 step;\n    }\n\n    function data() internal pure returns (Data storage data_) {\n        bytes32 position = COUNTER_STORAGE_POSITION;\n        assembly {\n            data_.slot := position\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ThirdwebProvider in React\nDESCRIPTION: This snippet shows how to wrap your app with ThirdwebProvider to ensure wallet availability, handle connection states, and enable auto-connection on page load.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/build-your-own-ui/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThirdwebProvider } from \"thirdweb/react\";\n\n<ThirdwebProvider>\n\t<YourApp />\n</ThirdwebProvider>;\n```\n\n----------------------------------------\n\nTITLE: Fetching Collection by ID in Collection Explorer API - TypeScript\nDESCRIPTION: This function retrieves a specific collection by its ID from the collection explorer service. It shows how to access a single collection with its detailed information using the collection explorer API.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/account-info/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Get a collection by ID\n *\n * @example\n * ```javascript\n * const collection = await sdk.getCollection(\"{{collection_id}}\");\n * ```\n *\n * @param collectionId - The ID of the collection to get.\n * @returns The collection object\n */\nasync getCollection(collectionId: string) {\n  return await this.collectionService.getCollection(collectionId);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Theme in thirdweb Universal Bridge\nDESCRIPTION: Demonstrates how to implement a custom theme by extending the built-in darkTheme with custom properties. This allows for comprehensive UI customization of the transaction interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/send-transaction/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { darkTheme } from 'thirdweb/react';\n\n// Using custom theme\nconst { mutate: sendTransaction } = useSendTransaction({\n\tpayModal: {\n\t\ttheme: darkTheme({ ... },\n\t}}\n);\n```\n\n----------------------------------------\n\nTITLE: Searching Collections with Filter Parameters in TypeScript\nDESCRIPTION: This method demonstrates searching for collections using various filter criteria like creators, categories, and chains. It provides a flexible interface for filtering collections based on multiple parameters and supports pagination.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/account-info/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Search for collections\n *\n * @example\n * ```javascript\n * const collections = await sdk.searchCollections();\n * ```\n *\n * @param options - Options for the request.\n * @returns The collections matching the search criteria\n */\nasync searchCollections({\n  count = 100,\n  start = 0,\n  creator,\n  category,\n  chains,\n  attributes,\n  search,\n  sortBy = { field: \"created_at\", direction: SortDirection.DESC },\n}: SearchCollectionsParams = {}) {\n  return await this.collectionService.searchCollections({\n    count,\n    start,\n    creator,\n    category,\n    chains,\n    attributes,\n    search,\n    sortBy,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: ContractURI Function Definition\nDESCRIPTION: Function to retrieve the URI for the metadata associated with the smart contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/ContractMetadata/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction contractURI() external view returns (string memory);\n```\n\n----------------------------------------\n\nTITLE: Running the Account Abstraction Script\nDESCRIPTION: Command to run the TypeScript script using Bun, which will deploy the smart account and claim an NFT.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/account-abstraction/get-started/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbun index.ts\n```\n\n----------------------------------------\n\nTITLE: Events API Endpoints Reference\nDESCRIPTION: Provides reference documentation for the Events API endpoints, including getting all events, contract-specific events, and events with specific signatures.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Get All Events\nGET /v1/events\n\ninterface EventsResponse {\n  data: Event[];\n  meta: MetaData;\n}\n\n// 2. Get Contract Events\nGET /v1/events/:contractAddress\n\n// 3. Get Specific Event Type\nGET /v1/events/:contractAddress/:signature\n```\n\n----------------------------------------\n\nTITLE: Polling for Fiat Transaction Status in TypeScript\nDESCRIPTION: Illustrates how to poll for the status of a fiat transaction using getBuyWithFiatStatus, including handling various status codes and appropriate UI updates.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/build-a-custom-experience/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst fiatStatus = await getBuyWithFiatStatus({\n\tclient: client, // thirdweb client\n\tintentId: quote.intentId, // pass intentId from quote\n});\n\nif (fiatStatus.status === \"NOT_FOUND\") {\n\t// invalid intentId\n\t// Show error in your page\n}\n\nif (fiatStatus.status === \"NONE\") {\n\t// No information available yet\n\t// Show \"loading\" status on your page\n\t// keep polling\n}\n\nif (fiatStatus.status === \"PENDING_PAYMENT\") {\n\t// Payment is in progress in the on-ramp provider\n\t// Show \"loading\" status on your page\n\t// keep polling\n}\n\nif (fiatStatus.status === \"PENDING_ON_RAMP_TRANSFER\") {\n\t// payment is done, on-ramp process has not started\n\t// show \"loading\" status on your page\n\t// keep polling\n}\n\nif (fiatStatus.status === \"ON_RAMP_TRANSFER_IN_PROGRESS\") {\n\t// on-ramp provider is doing on-ramp with fiat currency\n\t// show \"loading\" status on your page\n\t// keep polling\n}\n\nif (fiatStatus.status === \"ON_RAMP_TRANSFER_FAILED\") {\n\t// on-ramp provider failed to do onramp\n\t// show error in your UI\n\t// STOP polling\n}\n\nif (fiatStatus.status === \"ON_RAMP_TRANSFER_COMPLETED\") {\n\t// if only on-ramp is required - process is done!\n\tif (!hasTwoSteps) {\n\t\t// show \"success\"\n\t\t// Stop polling\n\t\t// That's it!\n\t} else {\n\t\t// Wait for \"CRYPTO_SWAP_REQUIRED\" state to convert tokens\n\t\t// Show \"loading\" status on your page\n\t\t// Stop polling\n\t}\n}\n\nif (fiatStatus.status === \"CRYPTO_SWAP_REQUIRED\") {\n\t// go to step 5\n\t// Show UI for Buy with Crypto quote.onRampToken to quote.toToken\n\t// Stop polling\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Onramp Provider in thirdweb Universal Bridge\nDESCRIPTION: Shows how to specify a preferred onramp provider for handling fiat-to-crypto transactions. You can select from STRIPE, KADO, or TRANSAK depending on availability in your user's region.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/send-transaction/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst { mutate: sendTransaction } = useSendTransaction({\n\tpayModal: {\n\t\tpreferredProvider: \"STRIPE\" | \"KADO\" | \"TRANSAK\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SendTransaction Test Mode\nDESCRIPTION: Demonstration of enabling test mode for fiat purchases using the useSendTransaction hook with testMode setting.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/testing-pay/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { mutate: sendTransaction } = useSendTransaction({\n\tpayModal: {\n\t\tbuyWithFiat: {\n\t\t\ttestMode: true, // defaults to false\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155Staking Contract in Solidity\nDESCRIPTION: This example demonstrates how to inherit from the Staking1155 extension and override functions to add custom functionality. It includes setting up reward tokens, staking conditions, and implementing the _mintRewards function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Staking/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/Staking1155.sol\";\nimport \"@thirdweb-dev/contracts/eip/interface/IERC20.sol\";\n\ncontract MyContract is Staking1155 {\n    // ERC20 Reward Token address. See {_mintRewards}.\n    address public rewardToken;\n\n    /**\n     *  We store the contract deployer's address only for the purposes of the example\n     *  in the code comment below.\n     *\n     *  Doing this is not necessary to use the `Staking1155` extension.\n     */\n    address public deployer;\n\n    constructor(\n        uint256 _defaultTimeUnit,\n        uint256 _defaultRewardsPerUnitTime,\n        address _stakingToken,\n        address _rewardToken\n    ) Staking1155(_stakingToken) {\n        _setDefaultStakingCondition(_defaultTimeUnit, _defaultRewardsPerUnitTime);\n\n        rewardToken = _rewardToken;\n        deployer = msg.sender;\n    }\n\n    /**\n     *  @dev    Mint/Transfer ERC20 rewards to the staker. Must override.\n     *\n     *  @param _staker    Address for sending rewards to.\n     *  @param _rewards   Amount of tokens to be given out as reward.\n     *\n     */\n    function _mintRewards(address _staker, uint256 _rewards) internal override {\n        IERC20(rewardToken).transfer(_staker, _rewards);\n    }\n\n    // Returns whether staking restrictions can be set in given execution context.\n    function _canSetStakeConditions() internal view override returns (bool) {\n        return msg.sender == deployer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Admin Permissions in TypeScript\nDESCRIPTION: This code snippet demonstrates how to add a new admin to a smart account using the thirdweb SDK. It involves creating a smart wallet, connecting it to a client and personal account, and then sending a transaction to add a new admin.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/account-abstraction/permissions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addAdmin } from \"thirdweb/extensions/erc4337\";\nimport { smartWallet } from \"thirdweb/wallets\";\nimport { sendTransaction, getContract } from \"thirdweb\";\n\nconst smartWallet = new smartWallet(config);\nconst smartAccount = await smartWallet.connect({\n\tclient,\n\tpersonalAccount,\n});\n\nconst transaction = addAdmin({\n\tcontract: getContract({\n\t\taddress: smartAccount.address,\n\t\tchain,\n\t\tclient,\n\t}),\n\taccount: smartAccount,\n\tadminAddress: \"0x...\", // the address of the new admin\n});\nawait sendTransaction({\n\ttransaction,\n\taccount: smartAccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching All Token Types\nDESCRIPTION: Retrieves all tokens (ERC20, ERC721, ERC1155) owned by a specific address across multiple chains.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/insight/quickstart/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Fetch all token types\nvar tokens = await insight.GetTokens(address, chains);\nConsole.WriteLine($\"ERC20 Count: {tokens.erc20Tokens.Length} | ERC721 Count: {tokens.erc721Tokens.Length} | ERC1155 Count: {tokens.erc1155Tokens.Length}\");\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20BatchMintable Dependencies in Solidity\nDESCRIPTION: This snippet shows the necessary imports for implementing the ERC20BatchMintable functionality, including the ERC20 interface, Multicall extension, and IMintableERC20 interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20BatchMintable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/eip/interface/IERC20.sol\"\nimport \"@thirdweb-dev/contracts/extension/multicall.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseAccountFactory in a Custom Contract\nDESCRIPTION: Demonstrates how to inherit from the BaseAccountFactory extension in a custom smart contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWalletFactory/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/smart-wallet/utils/BaseAccountFactory.sol\";\n\ncontract MyAccountFactory is BaseAccountFactory { ... }\n```\n\n----------------------------------------\n\nTITLE: Making NFT Offers Solidity Interface\nDESCRIPTION: Interface for making offers on ERC721/ERC1155 NFTs with parameters for asset contract, token ID, quantity, currency, price and expiration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nstruct OfferParams {\n    address assetContract;\n    uint256 tokenId;\n    uint256 quantity;\n    address currency;\n    uint256 totalPrice;\n    uint256 expirationTimestamp;\n}\n\nfunction makeOffer(OfferParams memory params) external returns (uint256 offerId);\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20Burnable Contract\nDESCRIPTION: Example smart contract demonstrating how to inherit from ERC20 and IBurnableERC20 interface with custom burn functionality implementation\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20Burnable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/openzeppelin-presets/token/ERC20/ERC20.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IBurnableERC20.sol\";\n\ncontract Contract is ERC20, IBurnableERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC20(\n            _name,\n            _symbol\n        )\n    {}\n\n    function burn(uint256 amount) external override {\n        // Your custom implementation here\n    }\n\n    function burnFrom(address account, uint256 amount) external override {\n        // Your custom implementation here\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating thirdweb with Privy authentication\nDESCRIPTION: Example of how to use the thirdweb SDK with Privy by adapting a Privy wallet to a thirdweb wallet. This allows using all thirdweb components and hooks within a Privy-authenticated application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/adapters/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Assumes you've wrapped your application in a `<ThirdwebProvider>`\n\nimport { useEffect } from 'react'\nimport { defineChain } from 'thirdweb'\nimport { useSetActiveWallet } from 'thirdweb/react'\nimport { createWalletAdapter } from 'thirdweb/wallets'\nimport { ethers5Adapter } from 'thirdweb/adapters/ethers5';\nimport { client } from './client'\nimport { useWallets } from \"@privy-io/react-auth\";\n\n\nconst { wallets } = useWallets(); // from privy\nconst setActiveWallet = useSetActiveWallet(); // from thirdweb/react\n\n// whenever the privy wallet changes, \n// we adapt it to a thirdweb account and set it as the active wallet\nuseEffect(() => {\n    const setActive = async () => {\n        const privyWallet = wallets[0];\n        if (privyWallet) {\n          const ethersProvider = await privyWallet.getEthersProvider();\n            // create a thirdweb wallet with the privy provider\n            const thirdwebWallet = EIP1193.fromProvider({\n                provider: ethersProvider,\n            });\n            await thirdwebWallet.connect({\n                client,\n            });\n            setActiveWallet(thirdwebWallet);\n        }\n    };\n    setActive();\n}, [wallets]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top Collections with Collection Explorer API in TypeScript\nDESCRIPTION: This snippet shows the implementation of getTopCollections method, which retrieves top collections based on specific metrics like sales volume. It accepts parameters for pagination, direction, and time window for the calculation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/account-info/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Get collections by sales/volume\n *\n * @example\n * ```javascript\n * const topCollections = await sdk.getTopCollections();\n * ```\n *\n * @param options - Options for the request.\n * @returns The collections sorted by sales volume\n */\nasync getTopCollections({\n  count = 100,\n  start = 0,\n  direction = SortDirection.DESC,\n  window = StatsTimeInterval.DAY,\n}: QueryAllParams & {\n  direction?: SortDirection;\n  window?: StatsTimeInterval;\n}) {\n  return await this.collectionService.getTopCollections({\n    count,\n    start,\n    sortBy: { field: \"sales.volume\", direction },\n    window,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google using thirdweb's useConnect Hook\nDESCRIPTION: This code demonstrates how to use the useConnect hook to handle authentication and connection states for Google login in React and React Native. The same pattern can be used for Apple and Facebook by changing the strategy.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/build-your-own-ui/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { useConnect } from \"thirdweb/react\";\n\nconst { connect } = useConnect();\n\nconst handleLogin = async () => {\n\tawait connect(async () => {\n\t\tconst wallet = inAppWallet();\n\t\tawait wallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"google\",\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up ERC-20 Paymaster in .NET\nDESCRIPTION: This code demonstrates creating a smart wallet in .NET that uses Lisk LSK tokens for gas payments. It requires a private key wallet as the personal wallet and specifies the Lisk chain ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/erc-20-paymaster/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar chainId = 1135; // lisk\n\nvar erc20SmartWallet = await SmartWallet.Create(\n  personalWallet: privateKeyWallet, \n  chainId: chainId, \n  tokenPaymaster: TokenPaymaster.LISK_LSK\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize Function Implementation\nDESCRIPTION: Implementation of the initialize function that sets up the smart contract wallet with an admin and initial data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initialize(address _defaultAdmin, bytes calldata _data) public virtual initializer {\n    factory = msg.sender;\n    _setupRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Public Key in Bash\nDESCRIPTION: Command to display the contents of the public key file to copy for JWK conversion.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-jwt-auth-server/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat keys/rsa.key.pub\n```\n\n----------------------------------------\n\nTITLE: Converting thirdweb Account to Ethers Signer\nDESCRIPTION: Demonstrates how to convert a thirdweb Account instance to an Ethers.js Signer using the ethers5Adapter.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/ethers-adapter/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers5Adapter } from \"thirdweb/adapters/ethers5\";\nimport { useActiveAccount } from \"thirdweb/react\";\n\nconst account = useActiveAccount();\n...\nconst signer = await ethers5Adapter.signer.toEthers({ client, chain, account });\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Chain Configuration in JSON\nDESCRIPTION: This JSON structure defines the configuration for adding a custom chain to thirdweb Engine. It includes chain details such as name, RPC URL, native currency, chain ID, and slug.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/custom-chains/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"chainOverrides\": [\n    {\n      \"name\": \"My Custom Chain\",\n      \"chain\": \"ETH\",\n      \"rpc\": [\n        \"https://my-custom-rpc-url.com\"\n      ],\n      \"nativeCurrency\": {\n        \"name\": \"Ether\",\n        \"symbol\": \"ETH\",\n        \"decimals\": 18\n      },\n      \"chainId\": 678,\n      \"slug\": \"my-custom-chain\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Contract States with thirdweb SDK v5\nDESCRIPTION: Demonstrates how to get a list of owned ERC721 tokens in a wallet using the new SDK v5 approach with useReadContract and getOwnedNFTs extension.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/migrate/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get a list of owned ERC721 tokens in a wallet\nimport { useReadContract } from \"thirdweb/react\";\nimport { getOwnedNFTs } from \"thirdweb/extensions/erc721\";\n\nconst { data } = useReadContract(getOwned, { contract, owner });\n```\n\n----------------------------------------\n\nTITLE: Getting Buy with Fiat Quote in TypeScript\nDESCRIPTION: Demonstrates how to obtain a quote for buying 0.01 Base ETH with USD using the thirdweb client. It includes creating a client, specifying transaction details, and logging quote information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/build-a-custom-experience/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getBuyWithFiatQuote } from \"thirdweb/pay\";\nimport { NATIVE_TOKEN_ADDRESS } from \"thirdweb\";\nimport { base } from \"thirdweb/chains\";\n\n// create a thirdweb client\nconst client = createThirdwebClient({\n\tclientId: \"<your_client_id>\",\n});\n\n// Get a quote for buying 0.01 Base ETH with USD\nconst quote = await getBuyWithFiatQuote({\n\tclient: client, // thirdweb client\n\tfromCurrencySymbol: \"USD\", // fiat currency symbol\n\ttoChainId: base.id, // base chain id\n\ttoAmount: \"0.01\", // amount of token to buy\n\ttoTokenAddress: NATIVE_TOKEN_ADDRESS, // native token\n\ttoAddress: \"0x...\", // user's wallet address\n});\n\n// display quote information to user\nconsole.log(quote.fromCurrencyWithFees);\nconsole.log(quote.processingFees);\nconsole.log(quote.onRampToken);\nconsole.log(quote.toToken);\nconsole.log(quote.estimatedDurationSeconds);\n// etc...\n```\n\n----------------------------------------\n\nTITLE: Adding Core Increment Functionality\nDESCRIPTION: Implementing the main increment function to increase the counter value.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-core-contract/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 public count;\n\nfunction increment() public {\n    count += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Paymaster Logic in SmartWalletOptions\nDESCRIPTION: Code example showing how to provide custom paymaster logic by implementing a paymaster function in SmartWalletOptions overrides. This function receives a UserOperation and can implement custom gas payment handling.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/infrastructure/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: SmartWalletOptions = {\n\tchain,\n\tsponsorGas: true,\n\toverrides: {\n\t\tpaymaster: async (userOp: UserOperation) => {\n\t\t\t// your custom paymaster logic\n\t\t\treturn myPaymasterResultLogic(userOp);\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with Wallet\nDESCRIPTION: Demonstrates how to sign a message using the inAppWallet instance.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/interact-with-accounts/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait inAppWallet.sign(\"Hello World!\");\n```\n\n----------------------------------------\n\nTITLE: Defining FallbackFunction Struct in Solidity\nDESCRIPTION: This code snippet defines the FallbackFunction struct used in the Modular Contracts architecture. It contains fields for the function selector and permission bits.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/modular-contracts/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstruct FallbackFunction {\n    bytes4 selector;\n    uint256 permissionBits;\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Downloading JSON Data from IPFS in C#\nDESCRIPTION: Downloads and deserializes JSON data from an IPFS URI into a Dictionary<string, object>.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/storage/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar jsonData = await ThirdwebStorage.Download<Dictionary<string, object>>(client, \"ipfs://Qm...\");\n```\n\n----------------------------------------\n\nTITLE: Collecting Price on Claim in Solidity Smart Contract\nDESCRIPTION: Internal function to collect and distribute the primary sale value of tokens being claimed.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _collectPriceOnClaim(\n    address primarySaleRecipient,\n    uint256 quantityToClaim,\n    address currency,\n    uint256 pricePerToken\n) internal virtual;\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Payload Generation Route\nDESCRIPTION: Creates a GET route at '/login' to generate a login payload using thirdweb Auth. It requires the user's address and optionally the chain ID as query parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/login\", async (req, res) => {\n\tconst address = req.query.address;\n\tconst chainId = req.query.chainId;\n\n\tif (!address) {\n\t\treturn res.status(400).send(\"Address is required\");\n\t}\n\n\treturn res.send(\n\t\tawait thirdwebAuth.generatePayload({\n\t\t\taddress,\n\t\t\tchainId: chainId ? parseInt(chainId) : undefined,\n\t\t}),\n\t);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring and Rendering ConnectEmbed Component in React\nDESCRIPTION: This code snippet illustrates how to configure wallets for the ConnectEmbed component and render it within a React component. It sets up an array of wallet options and passes them to the ConnectEmbed component along with the client prop.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/ConnectEmbed/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst wallets = [\n\tinAppWallet(),\n\tcreateWallet(\"io.metamask\"),\n\tcreateWallet(\"com.coinbase.wallet\"),\n\tcreateWallet(\"me.rainbow\"),\n];\n\nfunction Example() {\n\treturn (\n\t\t<div>\n\t\t\t<ConnectEmbed client={client} wallets={wallets} />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Transaction Data in Thirdweb\nDESCRIPTION: Demonstrates how to encode transaction data for later use, which can be helpful for preparing transaction data to be used in other contexts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/send/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encode } from \"thirdweb\";\n\nconst data = await encode(transaction);\nconsole.log(\"encoded data\", data);\n```\n\n----------------------------------------\n\nTITLE: Deploying AccountFactory Contract\nDESCRIPTION: JSON payload for deploying an AccountFactory contract that handles deploying individual Account contracts for users. Requires specifying a default admin address and a predefined contract address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/account-abstraction/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"constructorParams\": [\n\t\t\"<default_admin>\",\n\t\t\"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Signing EIP-712 Typed Data with IThirdwebWallet in C#\nDESCRIPTION: Demonstrates how to sign structured data according to the EIP-712 standard using the wallet's private key. The method takes a JSON string of typed data and returns a hexadecimal signature that can be used to verify the data's integrity and the signer's authenticity.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/signtypeddatav4/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring signature = await wallet.SignTypedDataV4(jsonTypedData);\n```\n\n----------------------------------------\n\nTITLE: Events API Implementation\nDESCRIPTION: Demonstrates fetching events from the API, including filtered contract events.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/llmstxt/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Get All Events\nasync function getAllEvents(): Promise<BaseResponse<Event>> {\n\tconst response = await fetch(`https://{{chainId}}.insight.thirdweb.com/v1/events`, {\n\t\theaders: { \"x-client-id\": \"{{clientId}}\" },\n\t});\n\treturn await response.json();\n}\n\n// 2. Get Contract Events with Filtering\nasync function getContractEvents(contractAddress: string): Promise<BaseResponse<Event>> {\n\tconst params = new URLSearchParams({\n\t\tfilter_block_number_gte: \"{{blockNumber}}\",\n\t\tsort_by: \"block_timestamp\",\n\t\tsort_order: \"desc\",\n\t\tlimit: \"50\",\n\t});\n\n\tconst url = `https://{{chainId}}.insight.thirdweb.com/v1/events/${contractAddress}?${params}`;\n\tconst response = await fetch(url, {\n\t\t\theaders: { \"x-client-id\": \"{{clientId}}\" },\n\t});\n\treturn await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721Mintable Interface Example\nDESCRIPTION: Demonstrates a complete example of implementing the IMintableERC721 interface in an ERC721A contract, including constructor setup and mintTo function implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Mintable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC721.sol\";\n\ncontract Contract is ERC721A, IMintableERC721 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC721A(\n            _name,\n            _symbol\n        )\n    {}\n\n    function mintTo(address to, string calldata uri) external override returns (uint256) {\n        // Your custom implementation here\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Crypto Payment Method in thirdweb Universal Bridge\nDESCRIPTION: Shows how to disable the option for users to pay with existing crypto, limiting transactions to fiat payment methods only. This configuration sets buyWithCrypto to false.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/send-transaction/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst { mutate: sendTransaction } = useSendTransaction({\n\tpayModal: {\n\t\tbuyWithCrypto: false,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Route with Authentication\nDESCRIPTION: Demonstrates how to create a secure route that requires authentication. It verifies the JWT token before allowing access to the route.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/secure\", async (req, res) => {\n\tconst jwt = req.cookies?.jwt;\n\n\tif (!jwt) {\n\t\treturn res.status(401).send(\"Unauthorized\");\n\t}\n\n\tconst authResult = await thirdwebAuth.verifyJWT({ jwt });\n\n\tif (!authResult.valid) {\n\t\treturn res.status(401).send(\"Unauthorized\");\n\t}\n\n\t// ...your route logic\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom NFT Contract with ERC721Drop in Solidity\nDESCRIPTION: Example of creating a custom NFT contract by inheriting from ERC721Drop. It includes the constructor with necessary parameters for initialization.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/drop/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC721Drop.sol\";\n\ncontract MyNFT is ERC721Drop {\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps,\n        address _primarySaleRecipient\n    )\n        ERC721Drop(\n            _defaultAdmin,\n            _name,\n            _symbol,\n            _royaltyRecipient,\n            _royaltyBps,\n            _primarySaleRecipient\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Thirdweb Account to Ethers.js v6 Signer\nDESCRIPTION: Shows how to convert a thirdweb account to an ethers.js v6 Signer using ethers6Adapter. This allows using thirdweb wallets with ethers.js v6 functions and libraries.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/adapters/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers6Adapter } from \"thirdweb/adapters/ethers6\";\nimport { createThirdwebClient, inAppWallet } from \"thirdweb/wallets\";\nimport { sepolia } from \"thirdweb/chains\";\n\nconst client = createThirdwebClient({ clientId });\nconst wallet = inAppWallet();\nconst chain = sepolia;\nconst account = await wallet.connect({\n\tclient,\n\tstrategy: \"google\",\n});\n\n// convert a thirdweb account to ethers signer\nconst ethersSigner = await ethers6Adapter.signer.toEthers({\n\tclient,\n\tchain,\n\taccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding _collectPriceOnClaim Function in ERC1155Drop Contract\nDESCRIPTION: This internal function collects and distributes the primary sale value of NFTs being claimed. It handles both native token and ERC20 token payments.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/drop/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _collectPriceOnClaim(\n    address _primarySaleRecipient,\n    uint256 _quantityToClaim,\n    address _currency,\n    uint256 _pricePerToken\n) internal virtual override {\n    if (_pricePerToken == 0) {\n        return;\n    }\n\n    uint256 totalPrice = _quantityToClaim * _pricePerToken;\n\n    if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n        if (msg.value != totalPrice) {\n            revert(\"Must send total price.\");\n        }\n    }\n\n    address saleRecipient = _primarySaleRecipient == address(0) ? primarySaleRecipient() : _primarySaleRecipient;\n    CurrencyTransferLib.transferCurrency(_currency, msg.sender, saleRecipient, totalPrice);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Signer from an Account\nDESCRIPTION: Implements the removeSigner function, which is a callback for an Account to un-register its signers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWalletFactory/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction removeSigner(address _signer) external {\n    address account = msg.sender;\n    bool isAccount = accountsOfSigner[_signer].remove(account);\n    bool isSigner = signersOfAccount[account].remove(_signer);\n    if (!isAccount || !isSigner) {\n        revert(\"AccountFactory: signer not found\");\n    }\n    emit SignerRemoved(account, _signer);\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Signing with Private Key\nDESCRIPTION: TypeScript code for signing a JWT token with the private key using ES256 algorithm\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/keypair-authentication/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport jsonwebtoken from \"jsonwebtoken\";\n\nconst payload = {\n\tiss: publicKey,\n};\nconst accessToken = jsonwebtoken.sign(payload, privateKey, {\n\talgorithm: \"ES256\", // The keypair algorithm\n\texpiresIn: \"15s\", // Invalidate after 15 seconds\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Max Fee Per Gas in C#\nDESCRIPTION: Sets the maximum fee per gas for an EIP-1559 transaction using SetMaxFeePerGas method. Takes a BigInteger as input.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/instance/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction transaction = transaction.SetMaxFeePerGas(1000000000);\n```\n\n----------------------------------------\n\nTITLE: URI Function Implementation\nDESCRIPTION: Implementation of the uri function that returns metadata URI for an NFT, handling both encrypted and unencrypted batches.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/delayed-reveal/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n    *  @notice         Returns the metadata URI for an NFT.\n    *  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\n    *\n    *  @param _tokenId The tokenId of an NFT.\n    */\nfunction uri(uint256 _tokenId) public view override returns (string memory) {\n    (uint256 batchId, ) = _getBatchId(_tokenId);\n    string memory batchUri = _getBaseURI(_tokenId);\n\n    if (isEncryptedBatch(batchId)) {\n        return string(abi.encodePacked(batchUri, \"0\"));\n    } else {\n        return string(abi.encodePacked(batchUri, _tokenId.toString()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EcosystemWallet with Different Authentication Methods\nDESCRIPTION: Examples of creating an EcosystemWallet instance with various authentication methods including email, phone, OAuth providers, custom auth, guest login, server login, and SIWE authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/ecosystem-wallet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// NOTE: All creation examples below may take in an `ecosystemPartnerId` if you are the ecosystem partner integrating with a third-party ecosystem\n\n// Email\nvar wallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", email: \"userEmail\");\n// Phone\nvar wallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", phoneNumber: \"+1234567890\");\n// Google, Apple, Facebook, etc.\nvar wallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", authProvider: AuthProvider.Google);\n// Custom Auth - JWT\nvar wallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", authProvider: AuthProvider.JWT);\n// Custom Auth - AuthEndpoint\nvar wallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", authProvider: AuthProvider.AuthEndpoint);\n// Guest Login\nvar wallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", authProvider: AuthProvider.Guest);\n// Server Login\nvar wallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", authProvider: AuthProvider.Backend, walletSecret: \"very-secret\");\n// Siwe\nvar wallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", authProvider: AuthProvider.Siwe, siweSigner: anyExternalWallet);\n// SiweExternal\nvar wallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", authProvider: AuthProvider.SiweExternal);\n\n// Session resuming supported for all methods\nvar isConnected = await wallet.IsConnected();\n\n// If not connected, initiate login flow based on the auth provider you are using\n\n// Email & Phone (OTP)\nawait wallet.SendOTP(); // and fetch the otp\nvar address = await wallet.LoginWithOtp(\"userEnteredOTP\"); // try catch and retry if needed\n\n// Socials (OAuth)\nvar address = await wallet.LoginWithOauth(\n    // Windows console app example, adaptable to any runtime\n    isMobile: false,\n    browserOpenAction: (url) =>\n    {\n        var psi = new ProcessStartInfo { FileName = url, UseShellExecute = true };\n        _ = Process.Start(psi);\n    },\n    mobileRedirectScheme: \"myBundleId://\"\n);\n\n// Custom Auth (JWT)\nvar address = await wallet.LoginWithCustomAuth(jwt: \"myjwt\");\n\n// Custom Auth (AuthEndpoint)\nvar address = await wallet.LoginWithAuthEndpoint(payload: \"mypayload\");\n\n// Guest Login (Easy onboarding)\nvar address = await wallet.LoginWithGuest();\n\n// Backend (Server Wallets)\nvar address = await wallet.LoginWithBackend();\n\n// SIWE (Wallet)\nvar address = await siweWallet.LoginWithSiwe(chainId: 1);\n\n// SiweExternal (React-only wallet)\nvar address = await wallet.LoginWithSiweExternal(\n    // Windows console app example, adaptable to any runtime\n    isMobile: false,\n    browserOpenAction: (url) =>\n    {\n        var psi = new ProcessStartInfo { FileName = url, UseShellExecute = true };\n         _ = Process.Start(psi);\n    },\n    forceWalletIds: new List<string> { \"io.metamask\", \"com.coinbase.wallet\", \"xyz.abs\" }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Initializing ThirdwebManager in C#\nDESCRIPTION: Initializes the ThirdwebManager instance if not set to initialize on awake.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/thirdwebmanager/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebManager.Instance.Initialize();\n```\n\n----------------------------------------\n\nTITLE: LazyMint Function Implementation\nDESCRIPTION: Implementation of the lazyMint function that allows authorized addresses to lazy mint NFTs with optional encrypted data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/delayed-reveal/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n    *  @notice                  Lets an authorized address lazy mint a given amount of NFTs.\n    *\n    *  @param _amount           The number of NFTs to lazy mint.\n    *  @param _baseURIForTokens The placeholder base URI for the 'n' number of NFTs being lazy minted, where the\n    *                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\n    *  @param _data             The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\n    *  @return batchId          A unique integer identifier for the batch of NFTs lazy minted together.\n    */\nfunction lazyMint(\n    uint256 _amount,\n    string calldata _baseURIForTokens,\n    bytes calldata _data\n) public virtual override returns (uint256 batchId) {\n    if (_data.length > 0) {\n        (bytes memory encryptedURI, bytes32 provenanceHash) = abi.decode(_data, (bytes, bytes32));\n        if (encryptedURI.length != 0 && provenanceHash != \"\") {\n            _setEncryptedData(nextTokenIdToLazyMint + _amount, _data);\n        }\n    }\n\n    return super.lazyMint(_amount, _baseURIForTokens, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Public Key with OpenSSL\nDESCRIPTION: Command to generate a public key from the private key using OpenSSL\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/keypair-authentication/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl ec -in private.key -pubout -out public.key\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155SignatureMint Contract\nDESCRIPTION: Complete implementation of an ERC1155 contract with signature minting functionality. Includes constructor, mintWithSignature function, authorization checks, and price collection logic.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155SignatureMint/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC1155Base.sol\";\nimport \"@thirdweb-dev/contracts/extension/SignatureMintERC1155.sol\";\nimport \"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\";\n\ncontract ERC1155SignatureMint is ERC1155Base, SignatureMintERC1155 {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC1155Base(_name, _symbol, _royaltyRecipient, _royaltyBps) {}\n\n    /// @dev Mints tokens according to the provided mint request.\n    function mintWithSignature(\n        MintRequest calldata _req,\n        bytes calldata _signature\n    ) external payable virtual override returns (address signer) {\n        require(_req.quantity > 0, \"Minting zero tokens.\");\n\n        uint256 tokenIdToMint;\n        uint256 nextIdToMint = nextTokenIdToMint();\n\n        if (_req.tokenId == type(uint256).max) {\n            tokenIdToMint = nextIdToMint;\n            nextTokenIdToMint_ += 1;\n        } else {\n            require(_req.tokenId < nextIdToMint, \"invalid id\");\n            tokenIdToMint = _req.tokenId;\n        }\n\n        // Verify and process payload.\n        signer = _processRequest(_req, _signature);\n\n        address receiver = _req.to;\n\n        // Collect price\n        _collectPriceOnClaim(\n            _req.primarySaleRecipient,\n            _req.quantity,\n            _req.currency,\n            _req.pricePerToken\n        );\n\n        // Set royalties, if applicable.\n        if (_req.royaltyRecipient != address(0)) {\n            _setupRoyaltyInfoForToken(\n                tokenIdToMint,\n                _req.royaltyRecipient,\n                _req.royaltyBps\n            );\n        }\n\n        // Set URI\n        if (_req.tokenId == type(uint256).max) {\n            _setTokenURI(tokenIdToMint, _req.uri);\n        }\n\n        // Mint tokens.\n        _mint(receiver, tokenIdToMint, _req.quantity, \"\");\n\n        emit TokensMintedWithSignature(signer, receiver, tokenIdToMint, _req);\n    }\n\n    /// @dev Returns whether a given address is authorized to sign mint requests.\n    function _canSignMintRequest(address _signer)\n        internal\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _signer == owner();\n    }\n\n    /// @dev Collects and distributes the primary sale value of tokens being claimed.\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual {\n        if (_pricePerToken == 0) {\n            return;\n        }\n\n        uint256 totalPrice = (_quantityToClaim * _pricePerToken) / 1 ether;\n        require(totalPrice > 0, \"quantity too low\");\n\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n            require(msg.value == totalPrice, \"Must send total price.\");\n        }\n\n        address saleRecipient = _primarySaleRecipient;\n        CurrencyTransferLib.transferCurrency(\n            _currency,\n            msg.sender,\n            saleRecipient,\n            totalPrice\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _beforeTokenTransfer Hook in ERC1155Base\nDESCRIPTION: This internal function runs before every token transfer, mint, or burn operation. It updates the total supply for the affected token IDs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/base/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeTokenTransfer(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n) internal virtual override {\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n    if (from == address(0)) {\n        for (uint256 i = 0; i < ids.length; ++i) {\n            totalSupply[ids[i]] += amounts[i];\n        }\n    }\n\n    if (to == address(0)) {\n        for (uint256 i = 0; i < ids.length; ++i) {\n            totalSupply[ids[i]] -= amounts[i];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Email with Thirdweb Wallet\nDESCRIPTION: Demonstrates how to fetch a user's email address using the thirdweb wallet SDK. Requires a client instance and returns the user's email address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/interact-with-accounts/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUserEmail } from \"thirdweb/wallets/in-app\";\n\nconst email = await getUserEmail({ client });\nconsole.log(\"user email\", email);\n```\n\n----------------------------------------\n\nTITLE: Can Set Claim Conditions Function\nDESCRIPTION: Internal function to validate whether claim conditions can be set in the current context.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSetClaimConditions() internal view virtual returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Implementing DropSinglePhase1155 Extension in ERC1155 Contract\nDESCRIPTION: This example demonstrates how to create an ERC1155 token contract that inherits from the DropSinglePhase1155 extension. It includes implementations for required functions and showcases how to customize the claim process.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC1155Base.sol\";\nimport \"@thirdweb-dev/contracts/extension/DropSinglePhase1155.sol\";\nimport \"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\";\n\n/// This is an EXAMPLE of usage of `DropSinglePhase1155` for distributing ERC1155 tokens.\n\ncontract ERC1155Drop is\n    ERC1155Base,\n    DropSinglePhase1155\n{\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC1155Base(_name, _symbol, _royaltyRecipient, _royaltyBps) {}\n\n    /// @dev Runs before every `claim` function call.\n    function _beforeClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual override {\n      // Your custom implementation logic here\n    }\n\n    /// @dev Runs after every `claim` function call.\n    function _afterClaim(\n        uint256 _tokenId,\n        address _receiver,\n        uint256 _quantity,\n        address _currency,\n        uint256 _pricePerToken,\n        AllowlistProof calldata _allowlistProof,\n        bytes memory _data\n    ) internal virtual override {\n      // Your custom implementation logic here\n    }\n\n    /// @dev Collects and distributes the primary sale value of NFTs being claimed.\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual override {\n        if (_pricePerToken == 0) {\n            return;\n        }\n\n        uint256 totalPrice = _quantityToClaim * _pricePerToken;\n\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n            if (msg.value != totalPrice) {\n                revert(\"Must send total price.\");\n            }\n        }\n\n        address saleRecipient = _primarySaleRecipient;\n        CurrencyTransferLib.transferCurrency(_currency, msg.sender, saleRecipient, totalPrice);\n    }\n\n    /// @dev Transfers the NFTs being claimed.\n    function _transferTokensOnClaim(\n        address _to,\n        uint256 _tokenId,\n        uint256 _quantityBeingClaimed\n    ) internal virtual override {\n        _mint(_to, _tokenId, _quantityBeingClaimed, \"\");\n    }\n\n    /// @dev Checks whether platform fee info can be set in the given execution context.\n    function _canSetClaimConditions() internal view virtual override returns (bool) {\n        return msg.sender == owner();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Details by Phone Number in TypeScript\nDESCRIPTION: This snippet illustrates how to use the getUser function from thirdweb to retrieve user details using a phone number. It requires a client object and the user's phone number as parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/get-user-details/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUser } from \"thirdweb\";\n\nconst user = await getUser({\n  client,\n  phone: \"+11234567890\",\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a wallet from a private key\nDESCRIPTION: Creating a wallet instance from a private key using the privateKeyToAccount function to perform blockchain transactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/getting-started/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from \"thirdweb/wallets\"\n\nconst account = privateKeyToAccount({\n\tclient,\n\tprivateKey: process.env.PRIVATE_KEY\n});\n\n// Get the address of the account\nconst address = account.address;\nconsole.log(\"Connected as\", address);\n```\n\n----------------------------------------\n\nTITLE: Get EntryPoint Contract\nDESCRIPTION: Function to return the entry point contract address used by the wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction entryPoint() public view virtual override returns (IEntryPoint) {\n    return entrypointContract;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Gas Settings in JSON for Engine Transactions\nDESCRIPTION: This JSON snippet illustrates how to override gas settings for transactions in Engine. It shows setting a gas limit, max fee per gas, and max priority fee per gas using the 'txOverrides' object.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/faq/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"txOverrides\": {\n    \"gas\": \"210000\",\n    \"maxFeePerGas\": \"1000000000\",\n    \"maxPriorityFeePerGas\": \"1000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Timestamp Validation in TypeScript\nDESCRIPTION: TypeScript function to check if a webhook event has expired based on its timestamp.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/webhooks/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const isExpired = (\n\ttimestamp: string,\n\texpirationInSeconds: number,\n): boolean => {\n\tconst currentTime = Math.floor(Date.now() / 1000);\n\treturn currentTime - parseInt(timestamp) > expirationInSeconds;\n};\n```\n\n----------------------------------------\n\nTITLE: Account Linking in EcosystemWallet for Unity\nDESCRIPTION: Demonstrates how to link multiple authentication methods to a single EcosystemWallet for unified identity across platforms, including linking, fetching linked accounts, and unlinking.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/ecosystem-wallet/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Your main EcosystemWallet account, already authenticated and connected\nEcosystemWallet mainEcosystemWallet = ...\n\n// An EcosystemWallet with a new auth provider to be linked to the main account, not connected\nEcosystemWallet walletToLink = await EcosystemWallet.Create(client: Client, ecosystemId: \"ecosystem.your-ecosystem\", authProvider: AuthProvider.Telegram);\n\n// Link Account - Headless version\nvar linkedAccounts = await mainEcosystemWallet.LinkAccount(walletToLink: walletToLink);\n\n// Link Account - Unity wrapper version\nvar linkedAccounts = await ThirdwebManager.Instance.LinkAccount(mainEcosystemWallet, walletToLink);\n\n// You can also fetch linked accounts at any time\nList<LinkedAccount> linkedAccounts = await mainEcosystemWallet.GetLinkedAccounts();\n\n// Unlink an account\nList<LinkedAccount> linkedAccounts = await mainEcosystemWallet.UnlinkAccount(linkedAccounts[0]);\n```\n\n----------------------------------------\n\nTITLE: Managing Wallet Mapping in C#\nDESCRIPTION: Retrieves, adds, and removes wallets from the ThirdwebManager's wallet mapping.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/thirdwebmanager/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar wallet = ThirdwebManager.Instance.GetWallet(\"wallet-address\");\nvar addedWallet = await ThirdwebManager.Instance.AddWallet(wallet);\nThirdwebManager.Instance.RemoveWallet(\"wallet-address\");\n```\n\n----------------------------------------\n\nTITLE: Structuring Airdrop Data for AirdropERC1155 Contract\nDESCRIPTION: This snippet demonstrates the structure of the data array used when airdropping tokens with the AirdropERC1155 contract. Each object in the array specifies a recipient address, token ID, and amount to be transferred.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/airdrop-erc1155/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n[\n\t{\n\t\trecipient: \"0x123...\",\n\t\ttokenId: 1,\n\t\tamount: 5,\n\t},\n\t{\n\t\trecipient: \"0xabc...\",\n\t\ttokenId: 1,\n\t\tamount: 5,\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Upload Multiple Files via CLI\nDESCRIPTION: Command to upload multiple files simultaneously to IPFS using thirdweb CLI\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/storage/how-to-use-storage/upload-files-to-ipfs/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb upload image1.png image2.png image3.png\n```\n\n----------------------------------------\n\nTITLE: Instantiating ThirdwebBridge in C#\nDESCRIPTION: Creates a new instance of ThirdwebBridge using the Create method. This is the initial step for using the Universal Bridge functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/universal-bridge/quickstart/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Thirdweb.Bridge;\n\n// Create a ThirdwebBridge instance\nvar bridge = await ThirdwebBridge.Create(client);\n```\n\n----------------------------------------\n\nTITLE: Overriding Default RPC in React ThirdwebProvider\nDESCRIPTION: Customizes the RPC endpoint used by ThirdwebProvider in a React application. This allows developers to specify their own RPC provider instead of using thirdweb's default RPC Edge service.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/rpc-edge/get-started/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThirdwebProvider } from \"@thirdweb-dev/react\";\n\nconst App = () => {\n\treturn (\n\t\t<ThirdwebProvider\n\t\t\tactiveChain={{\n\t\t\t\trpc: [\"https://<your-rpc-to-use>.com\"],\n\t\t\t}}\n\t\t>\n\t\t\t<YourApp />\n\t\t</ThirdwebProvider>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Email Authentication in React Native\nDESCRIPTION: Code for handling email authentication with Firebase in React Native, including creating a user account with email and password and a sign-in button component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/firebase-auth/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport auth from \"@react-native-firebase/auth\";\n\nasync function signInWithEmail(email, password) {\n\ttry {\n\t\tawait auth().createUserWithEmailAndPassword(email, password);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\nreturn (\n\t<Button title=\"Sign In\" onPress={() => signInWithEmail(email, password)} />\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Firebase Auth State Listener and JWT Retrieval\nDESCRIPTION: Code to listen for Firebase authentication state changes and retrieve the JWT token from the authenticated user for use with In-App Wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/firebase-auth/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst [user, setUser] = useState();\n\nfunction onAuthStateChanged(user) {\n\tsetUser(user);\n}\n\nuseEffect(() => {\n\t// Listens to AuthStateChanged events\n\tconst subscriber = auth().onAuthStateChanged(onAuthStateChanged);\n\treturn subscriber;\n}, [onAuthStateChanged]);\n\nasync function getFirebaseJWT() {\n\tif (user) {\n\t\treturn await user.getIdToken();\n\t} else {\n\t\tthrow new Error(\"User is not authenticated\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding _beforeClaim Function in ERC1155Drop Contract\nDESCRIPTION: This internal function runs before every `claim` function call. It checks if there are enough minted tokens for the claim.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/drop/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeClaim(\n    uint256 _tokenId,\n    address,\n    uint256,\n    address,\n    uint256,\n    AllowlistProof calldata,\n    bytes memory\n) internal view virtual override {\n    if (_tokenId >= nextTokenIdToLazyMint) {\n        revert(\"Not enough minted tokens\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for thirdweb Auth\nDESCRIPTION: Environment variables configuration required for the thirdweb Auth setup, including domain, client ID, secret key, and auth private key. These credentials are essential for the authentication flow to work securely.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/next/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# the DOMAIN is the domain of the application\nNEXT_PUBLIC_THIRDWEB_AUTH_DOMAIN=\n# Get your client id from the thirdweb dashboard: https://thirdweb.com/create-api-key\nNEXT_PUBLIC_THIRDWEB_CLIENT_ID=\n# Get your secret key from the thirdweb dashboard: https://thirdweb.com/create-api-key\nTHIRDWEB_SECRET_KEY=\n# A private key that will be used to sign the JWT for the `jwt-cookie` authentication method\n# this does *not* need to hold any funds, can be any valid private key to sign with\nAUTH_PRIVATE_KEY=\n```\n\n----------------------------------------\n\nTITLE: SetContractURI Function Definition\nDESCRIPTION: Function to set the metadata URI for the smart contract, with access control checks via _canSetContractURI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/ContractMetadata/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setContractURI(string calldata _uri) external;\n```\n\n----------------------------------------\n\nTITLE: Get Batch ID Internal Function\nDESCRIPTION: Internal function to retrieve the batch ID for a specific token ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/BatchMintMetadata/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _getBatchId(uint256 tokenId) internal view returns (uint256 batchId, uint256 index);\n```\n\n----------------------------------------\n\nTITLE: Implementing Account UI Components with thirdweb React\nDESCRIPTION: This example demonstrates how to use thirdweb's account UI components in a React application. It shows the basic implementation of AccountProvider as the parent component that provides context to child components like AccountAvatar, AccountName, and AccountBalance.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/account/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AccountProvider,\n  AccountAvatar,\n  AccountName,\n  AccountBalance,\n} from \"thirdweb/react\";\n\nconst App = () => (\n<AccountProvider>\n  <AccountAvatar />\n  <AccountName />\n  <AccountBalance />\n</AccountProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Cancelling Transaction via API in TypeScript\nDESCRIPTION: This snippet demonstrates how to cancel a transaction using the thirdweb Engine API. It sends a POST request to the cancel endpoint with the queueId of the transaction to be cancelled. The response status is checked to confirm successful cancellation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/cancelling-transactions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// queueId was returned from a previous write request.\n\nconst resp = await fetch(\"<engine_url>/transaction/cancel\", {\n\tmethod: \"POST\",\n\theaders: {\n\t\t\"Content-Type\": \"application/json\",\n\t\tAuthorization: \"Bearer <access_token>\",\n\t},\n\tbody: JSON.stringify({ queueId }),\n});\nif (resp.status === 200) {\n\tconsole.log(`Transaction ${queueId} was canceled.`);\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving IPFS URIs to HTTPS using thirdweb SDK\nDESCRIPTION: This code snippet shows how to convert an 'ipfs://' URI to an 'https://' URI using the thirdweb SDK. It uses the 'resolveScheme' function from the 'thirdweb/storage' module to resolve the IPFS URI to a protected HTTPS URI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/storage/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resolveScheme } from \"thirdweb/storage\";\n\nconst uri = await resolveScheme(\"ipfs://Qm...\");\n// resolves to https://<clientId>.ipfscdn.io/Qm...\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Chains in Thirdweb\nDESCRIPTION: Importing and using predefined popular chains from the thirdweb/chains entrypoint.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/chain/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { polygon } from \"thirdweb/chains\";\n\nconst myChain = polygon;\n```\n\n----------------------------------------\n\nTITLE: Using ConnectButton in Next.js Home Page\nDESCRIPTION: Implementation of the ConnectButton component in the home page of a Next.js application. This simple example demonstrates how to incorporate the authentication button into a page component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/next/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// app/page.tsx\nimport ConnectButton from \"@/components/ConnectButton\";\n\nconst Home = () => {\n\treturn <ConnectButton />;\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair in Bash\nDESCRIPTION: Command to generate an RSA key pair for JWT signing in PEM format with 2048-bit length.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-jwt-auth-server/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t rsa -b 2048 -m PEM -f keys/rsa.key\n```\n\n----------------------------------------\n\nTITLE: Implementing getSupportedCallbackFunctions\nDESCRIPTION: Adding an empty implementation of the getSupportedCallbackFunctions to satisfy the abstract contract requirement.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-core-contract/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getSupportedCallbackFunctions()\n    public\n    pure\n    override\n    returns (SupportedCallbackFunction[] memory supportedCallbackFunctions)\n{}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Valid Listings\nDESCRIPTION: View function to get all valid listings within a specified ID range, checking for active status and creator ownership.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getAllValidListings(uint256 startId, uint256 endId) external view returns (Listing[] memory listings);\n```\n\n----------------------------------------\n\nTITLE: Managing Active Wallet in C#\nDESCRIPTION: Retrieves the currently active wallet and sets a new active wallet in ThirdwebManager.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/thirdwebmanager/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar wallet = ThirdwebManager.Instance.GetActiveWallet();\nThirdwebManager.Instance.SetActiveWallet(wallet);\n```\n\n----------------------------------------\n\nTITLE: Opening Onramp Experience in Browser\nDESCRIPTION: Demonstrates how to open the onramp experience in a new browser tab using the onRampLink from the quote object.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/build-a-custom-experience/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nwindow.open(quote.onRampLink, \"_blank\");\n```\n\n----------------------------------------\n\nTITLE: Extension Setting Permission Check\nDESCRIPTION: Internal function to check if the sender has permission to set extensions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSetExtension() internal view virtual override returns (bool) {\n    return _hasRole(EXTENSION_ADMIN_ROLE, msg.sender);\n}\n```\n\n----------------------------------------\n\nTITLE: Batch NFT Minting Function\nDESCRIPTION: Function for minting multiple NFTs at once to a recipient with shared baseURI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/base/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction batchMintTo(\n    address _to,\n    uint256 _quantity,\n    string memory _baseURI,\n    bytes memory _data\n) public virtual {\n    require(_canMint(), \"Not authorized to mint.\");\n    _batchMintMetadata(nextTokenIdToMint(), _quantity, _baseURI);\n    _safeMint(_to, _quantity, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Details by Email in TypeScript\nDESCRIPTION: This snippet shows how to use the getUser function from thirdweb to retrieve user details using an email address. It requires a client object and the user's email as parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/get-user-details/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUser } from \"thirdweb\";\n\nconst user = await getUser({\n  client,\n  email: \"user@example.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Basic NFT Contract Implementation\nDESCRIPTION: Simple NFT contract inheriting from ERC721Base with constructor implementation\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/get-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC721Base.sol\";\n\ncontract MyNFT is ERC721Base {\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC721Base(_defaultAdmin, _name, _symbol, _royaltyRecipient, _royaltyBps) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Unlinking Authentication Methods from a User Account\nDESCRIPTION: Demonstrates how to unlink an authentication method from a user's account in EcosystemWallet. This allows users to remove access methods they no longer want to use for authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/ecosystem-wallet/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nList<LinkedAccount> linkedAccounts = await ecosystemWallet.GetLinkedAccounts();\nList<LinkedAccount> linkedAccountsAfterUnlinking = await ecosystemWallet.UnlinkAccount(linkedAccounts[0]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving SmartWallet Signer in C#\nDESCRIPTION: Gets the current signer (personal wallet) associated with a connected SmartWallet instance. Returns an IThirdwebWallet interface representing the current signer that can be used for wallet operations.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/getpersonalwallet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar signer = await smartWallet.GetPersonalWallet();\n```\n\n----------------------------------------\n\nTITLE: Reading wallet balance\nDESCRIPTION: Retrieving the balance of an account on a specific blockchain using the getWalletBalance function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/getting-started/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getWalletBalance } from \"thirdweb/wallets\";\n\n// Get the balance of the account\nconst balance = await getWalletBalance({\n\taccount,\n\tchain: sepolia,\n});\nconsole.log(\"Balance:\", balance.displayValue, balance.symbol);\n```\n\n----------------------------------------\n\nTITLE: Implementing mintTo Function in ERC1155Base\nDESCRIPTION: This function allows an authorized address to mint NFTs to a recipient. It handles minting new NFTs or additional supply of existing NFTs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/base/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mintTo(\n    address _to,\n    uint256 _tokenId,\n    string memory _tokenURI,\n    uint256 _amount\n) public virtual {\n    require(_canMint(), \"Not authorized to mint.\");\n\n    uint256 tokenIdToMint;\n    uint256 nextIdToMint = nextTokenIdToMint();\n\n    if (_tokenId == type(uint256).max) {\n        tokenIdToMint = nextIdToMint;\n        nextTokenIdToMint_ += 1;\n        _setTokenURI(nextIdToMint, _tokenURI);\n    } else {\n        require(_tokenId < nextIdToMint, \"invalid id\");\n        tokenIdToMint = _tokenId;\n    }\n\n    _mint(_to, tokenIdToMint, _amount, \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Smart Wallet in C#\nDESCRIPTION: Upgrades a regular wallet to a SmartWallet instance for enhanced functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/thirdwebmanager/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar smartWallet = await ThirdwebManager.Instance.UpgradeToSmartWallet(wallet, chainId, smartWalletOptions);\n```\n\n----------------------------------------\n\nTITLE: Initializing thirdweb Client with Secret Key for Backend\nDESCRIPTION: Demonstrates how to create a thirdweb client instance using a secret key for backend environments and React Server Components\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/api-keys/use/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\n\nconst client = createThirdwebClient({\n\tsecretKey: \"YOUR_SECRET_KEY\", // Use secret key if using on the server, get it from dashboard settings\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating with IThirdwebWallet in C#\nDESCRIPTION: Demonstrates how to use the Authenticate method of IThirdwebWallet to login to a thirdweb Auth-integrated backend. The method supports various return types and optional parameters for customizing the authentication process.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/authenticate/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar authResult = await wallet.Authenticate<string>(domain: \"https://mydomain.com\", chainId: 1);\n```\n\n----------------------------------------\n\nTITLE: Token Balance API Implementation\nDESCRIPTION: Functions for retrieving ERC20 and NFT token balances for a given address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/llmstxt/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Get ERC20 Balances\nasync function getERC20Balances(ownerAddress: string): Promise<ERC20Response> {\n\tconst response = await fetch(\n\t\t`https://{{chainId}}.insight.thirdweb.com/v1/tokens/erc20/${ownerAddress}`,\n\t\t{ headers: { \"x-client-id\": \"{{clientId}}\" } },\n\t);\n\tconst data = await response.json();\n\treturn data;\n}\n\n// 2. Get NFT Balances\nasync function getNFTBalances(ownerAddress: string) {\n\tconst response = await fetch(\n\t\t`https://{{chainId}}.insight.thirdweb.com/v1/tokens/erc721/${ownerAddress}`,\n\t\t{ headers: { \"x-client-id\": \"{{clientId}}\" } },\n\t);\n\tconst data = await response.json();\n\treturn data;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Signer to an Account\nDESCRIPTION: Implements the addSigner function, which is a callback for an Account to register its signers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWalletFactory/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addSigner(address _signer) external {\n    address account = msg.sender;\n    bool isAlreadyAccount = accountsOfSigner[_signer].add(account);\n    bool isAlreadySigner = signersOfAccount[account].add(_signer);\n    if (!isAlreadyAccount || !isAlreadySigner) {\n        revert(\"AccountFactory: signer already added\");\n    }\n    emit SignerAdded(account, _signer);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IERC721Enumerable Interface in Solidity\nDESCRIPTION: This example demonstrates how to create a smart contract that inherits from ERC721A and implements the IERC721Enumerable interface. It includes constructor initialization and stub implementations for required functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Enumerable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\nimport \"@thirdweb-dev/contracts/eip/interface/IERC721Enumerable.sol\";\n\ncontract Contract is ERC721A, IERC721Enumerable {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC721A(\n            _name,\n            _symbol\n        )\n    {}\n\n    function tokenByIndex(uint256 _index) external view override returns (uint256) {\n        // Your custom implementation here\n    }\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view override returns (uint256) {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Buy Quote for Tokens in C#\nDESCRIPTION: Demonstrates how to get a quote for buying a specific amount of tokens using the Buy_Quote method. This example shows buying ETH on zkSync using USDC from Ethereum.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/universal-bridge/quickstart/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar buyQuote = await bridge.Buy_Quote(\n    originChainId: 1,\n    originTokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC on Ethereum\n    destinationChainId: 324,\n    destinationTokenAddress: Constants.NATIVE_TOKEN_ADDRESS, // ETH on zkSync\n    buyAmountWei: BigInteger.Parse(\"0.1\".ToWei())\n);\nConsole.WriteLine($\"Buy quote: {JsonConvert.SerializeObject(buyQuote, Formatting.Indented)}\");\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Filters\nDESCRIPTION: Configures basic filters for blockchain queries including ENS address resolution and chain selection.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/insight/quickstart/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Setup some filters\nvar address = await Utils.GetAddressFromENS(client, \"vitalik.eth\");\nvar chains = new BigInteger[] { 1, 137, 42161 };\n```\n\n----------------------------------------\n\nTITLE: Forcing Specific Wallet IDs with SiweExternal in EcosystemWallet for Unity\nDESCRIPTION: Shows how to force the SiweExternal page to use specific wallet IDs during the authentication process.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/ecosystem-wallet/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar ecosystemWalletOptions = new EcosystemWalletOptions(\n    ecosystemId: \"ecosystem.your-ecosystem\",\n    authprovider: AuthProvider.SiweExternal,\n    forceSiweExternalWalletIds: new List<string> { \"xyz.abs\" });\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a Wallet in C# using Thirdweb .NET SDK\nDESCRIPTION: This code snippet demonstrates how to use the Disconnect method to end a wallet session. It cleanly disconnects the wallet instance from the blockchain network or related services. For InAppWallet, it clears the session and requires re-authentication. For SmartWallet, it disconnects the personal wallet used as a signer.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/disconnect/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait wallet.Disconnect();\n```\n\n----------------------------------------\n\nTITLE: After Claim Hook in Solidity Smart Contract\nDESCRIPTION: Internal function that runs after every claim function call, allowing custom logic implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _afterClaim(\n    address receiver,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Events with thirdweb in TypeScript\nDESCRIPTION: Example of using getContractEvents and prepareEvent functions to read contract events. This approach provides type safety based on the Solidity event signature and allows specifying a block range for the query.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/read/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContractEvents, prepareEvent } from \"thirdweb\";\n\nconst myEvent = prepareEvent({\n  signature: \"event Transfer(address indexed from, address indexed to, uint256 value)\",\n});\n\nconst events = await getContractEvents({\n  contract: myContract,\n  events: [myEvent],\n  blockRange: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Storage Operations in Unity SDK\nDESCRIPTION: Demonstrates the changes in storage operations from v4 to v5. In v5, an API key is required for storage and RPC services, and the method for downloading data has been simplified.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/migration-guide/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Unity v4\nvar data = await ThirdwebManager.Instance.SDK.Storage.DownloadText<string>(\"{{text_uri}}\");\n\n// Unity v5\nvar data = await ThirdwebStorage.Download<string>(\"{{text_uri}}\");\n```\n\n----------------------------------------\n\nTITLE: Owner Getter Function\nDESCRIPTION: Function to get the current owner of the contract\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Ownable/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction owner() public view override returns (address);\n```\n\n----------------------------------------\n\nTITLE: Checking Signer Authorization for Mint Requests in Solidity\nDESCRIPTION: This internal view function returns whether a given address is authorized to sign mint requests. It takes a signer address as input and returns a boolean indicating authorization.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155SignatureMint/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSignMintRequest(address signer) internal view virtual returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Checking Claim Conditions Setting Permission in Solidity Smart Contract\nDESCRIPTION: Internal view function that runs on every setClaimConditions call to check if the caller has permission to set claim conditions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSetClaimConditions() internal view virtual returns (bool);\n```\n\n----------------------------------------\n\nTITLE: OTP Verification and Login\nDESCRIPTION: Example of verifying an OTP provided by a user to complete the login process with EcosystemWallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/ecosystem-wallet/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar address = await wallet.LoginWithOtp(\"userEnteredOTP\");\n// If this fails, feel free to catch and take in another OTP and retry the login process\n\n```\n\n----------------------------------------\n\nTITLE: Initializing SDK and Claiming NFT with In-App Wallet in React\nDESCRIPTION: This snippet demonstrates how to use the ThirdwebProvider and TransactionButton component to claim an NFT on a smart contract using the connected in-app wallet in a React application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/interact-blockchain/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n\tconst account = useActiveAccount();\n\n\treturn (\n\t\t<div>\n\t\t\t<TransactionButton\n\t\t\t\ttransaction={() => {\n\t\t\t\t\tif (!account) {\n\t\t\t\t\t\treturn alert(\"Please connect your wallet\");\n\t\t\t\t\t}\n\t\t\t\t\treturn claimTo({ contract, to: account.address, quantity: 1 });\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tClaim NFT\n\t\t\t</TransactionButton>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ThirdwebProvider in React\nDESCRIPTION: Wraps the React application with the ThirdwebProvider component for global thirdweb context.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// app.tsx / _app.tsx\nimport { ThirdwebProvider } from \"thirdweb/react\";\nimport { client } from \"./thirdwebClient\";\n\nfunction App() {\n  return (\n    <ThirdwebProvider>\n      <YourApp />\n    </ThirdwebProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: After Claim Hook Function\nDESCRIPTION: Internal hook function that runs after token claims, enabling custom post-claim logic.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _afterClaim(\n    address receiver,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Adding ConnectButton for User Wallet Authentication\nDESCRIPTION: Implements the ConnectButton component to prompt users to connect their wallet. This is necessary before users can sign gasless transactions to be processed by the relayer.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/relayers/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\n\n<ConnectButton client={client} />;\n```\n\n----------------------------------------\n\nTITLE: Collecting Auction Payout for Sellers in EnglishAuctions Contract\nDESCRIPTION: The collectAuctionPayout function allows auction creators to collect the highest bid amount after the auction ends, requiring the auction to be expired and to have received at least one valid bid.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction collectAuctionPayout(uint256 auctionId) external;\n```\n\n----------------------------------------\n\nTITLE: Token Transfer on Claim Implementation\nDESCRIPTION: Internal function that handles the actual minting of tokens during claim process.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/lazy-mint/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transferTokensOnClaim(address _receiver, uint256 _quantity)\n    internal\n    virtual\n    returns (uint256 startTokenId)\n{\n    startTokenId = _currentIndex;\n    _safeMint(_receiver, _quantity);\n}\n```\n\n----------------------------------------\n\nTITLE: Customized Authentication Methods Implementation\nDESCRIPTION: Shows how to customize authentication providers for the wallet connection interface, including email, Facebook, Apple, Google, phone, and passkey authentication options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/connect-users/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst client = createThirdwebClient({ clientId });\nconst wallets = [inAppWallet({\nproviders: [\"email\", \"facebook\", \"apple\", \"google\", \"phone\", \"passkey\"]\n})];\n\nexport default function App() {\n\treturn (\n\t\t<ThirdwebProvider>\n\t\t\t<ConnectButton client={client} wallets={wallets} />\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Upload Files via CLI Command\nDESCRIPTION: Basic command to upload a single file to IPFS using thirdweb CLI\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/storage/how-to-use-storage/upload-files-to-ipfs/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb@latest upload path/to/file.extension\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721Staking Contract in Solidity\nDESCRIPTION: This snippet shows how to import the Staking721 smart contract extension from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Staking/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/Staking721.sol\";\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155Enumerable Contract\nDESCRIPTION: Example smart contract showing how to inherit from ERC1155 and implement the IERC1155Enumerable interface with a custom nextTokenIdToMint function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Enumerable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\nimport \"@thirdweb-dev/contracts/eip/interface/IERC1155Enumerable.sol\";\n\ncontract Contract is ERC1155, IERC1155Enumerable {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC1155(\n            _name,\n            _symbol\n        )\n    {}\n\n    function nextTokenIdToMint() external override view returns (uint256) {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricted Payload Authentication Example\nDESCRIPTION: Advanced example showing how to restrict an access token to a specific payload using SHA256 hashing\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/keypair-authentication/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHash } from \"crypto\";\nimport jsonwebtoken from \"jsonwebtoken\";\n\n// Prepare the request payload body.\nconst body = JSON.stringify({\n\tto: \"0xE68FFAE106cc68A0e36Ba9Fd86f27337E3a71da6\",\n\tcurrencyAddress: \"0x0000000000000000000000000000000000000000\",\n\tamount: \"0.1\",\n});\n\n// Add a hash of `body` to the signed payload.\nconst payload = {\n\tiss: publicKey,\n\tbodyHash: createHash(\"sha256\").update(body).digest(\"hex\"),\n};\nconst accessToken = jsonwebtoken.sign(payload, privateKey, {\n\talgorithm: \"ES256\",\n});\n\n// Call Engine with `body`.\nawait fetch(`${engineBaseUrl}/backend-wallet/137/transfer`, {\n\theaders: {\n\t\t\"Content-Type\": \"application/json\",\n\t\tauthorization: `Bearer ${accessToken}`,\n\t\t\"x-backend-wallet-address\": \"<engine_backend_wallet_address>\",\n\t},\n\tbody,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating thirdweb Auth Instance\nDESCRIPTION: Initializes the thirdweb authentication instance with the necessary configuration, including the client domain, thirdweb client, and admin account details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst thirdwebAuth = createAuth({\n\tdomain: process.env.CLIENT_DOMAIN!,\n\tclient: thirdwebClient,\n\tadminAccount: privateKeyToAccount({\n\t\tclient: thirdwebClient,\n\t\tprivateKey: process.env.ADMIN_PRIVATE_KEY!,\n\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Gasless Transaction Button with Engine in React\nDESCRIPTION: This code snippet demonstrates how to create a TransactionButton component with gasless transaction configuration using Engine. It includes setting up the transaction, handling various transaction states, and configuring the gasless provider with Engine's relayer URL and forwarder address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/gasless/engine/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n    return (\n        <TransactionButton\n        transaction={() => {\n            // Create a transaction object and return it\n            const tx = prepareContractCall({\n            contract,\n            method: \"mint\",\n            params: [address, amount],\n            });\n            return tx;\n        }}\n        onTransactionSent={(result) => {\n            console.log(\"Transaction submitted\", result.transactionHash);\n        }}\n        onTransactionConfirmed={(receipt) => {\n            console.log(\"Transaction confirmed\", receipt.transactionHash);\n        }}\n        onError={(error) => {\n            console.error(\"Transaction error\", error);\n        }}\n        gasless={{\n            provider: \"engine\",\n            relayerUrl: \"...\",\n            relayerForwarderAddress: \"...\",\n        }}\n        >\n        Confirm Transaction\n        </TransactionButton>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom NFT Contract with ERC721LazyMint\nDESCRIPTION: Example of creating a custom NFT contract that inherits from ERC721LazyMint, including constructor and claim verification logic.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/lazy-mint/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC721LazyMint.sol\";\n\ncontract MyNFT is ERC721LazyMint {\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC721LazyMint(_defaultAdmin, _name, _symbol, _royaltyRecipient, _royaltyBps) {}\n\n    function verifyClaim(address _claimer, uint256 _quantity) public view virtual override {\n      // Your custom claim restriction logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Social Providers in EcosystemWallet for Unity\nDESCRIPTION: Demonstrates authentication using social login providers like Google, Apple, or Facebook. This opens a native browser or OAuth session to authenticate the user and redirects back to the game.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/ecosystem-wallet/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar ecosystemWalletOptions = new EcosystemWalletOptions(\n    ecosystemId: \"ecosystem.your-ecosystem\", \n    authprovider: AuthProvider.Google\n);\nvar options = new WalletOptions(\n    provider: WalletProvider.EcosystemWallet, \n    chainId: 1, \n    ecosystemWalletOptions: ecosystemWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Initializing Partner-Restricted Ecosystem Wallet\nDESCRIPTION: Creates an ecosystem wallet instance for an allowlist-restricted ecosystem using both ecosystem ID and partner ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/set-up/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ecosystemWallet } from \"thirdweb/wallets\";\n\n// Create a wallet for \"Allowlist\" ecosystems restricted to partners\nconst wallet = ecosystemWallet(\"ecosystem.your-ecosystem-id\", {\n\tpartnerId: \"...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Authentication Details with EcosystemWallet in C#\nDESCRIPTION: Demonstrates how to fetch user authentication provider details using the EcosystemWallet.GetUserAuthDetails method. Returns a JObject containing provider-specific information such as Google or Github authentication details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/getuserauthdetails/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = ecosystemWallet.GetUserAuthDetails();\n```\n\n----------------------------------------\n\nTITLE: Interacting with Smart Contracts\nDESCRIPTION: Example of reading data from a smart contract using the Thirdweb .NET SDK. Shows how to create a contract instance and call a read method.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/getting-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar contract = await ThirdwebContract.Create(client: client, address: \"contractAddress\", chain: chainId);\nvar readResult = await contract.Read<string>(contract, \"methodName\");\nConsole.WriteLine($\"Contract read result: {readResult}\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Bound Account\nDESCRIPTION: Example implementation of a token bound account by extending the Account contract. Shows custom initialization and signer validation logic.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/smart-wallet/non-upgradable/Account.sol\";\nimport \"@thirdweb-dev/contracts/eip/interface/IERC721.sol\";\n\ncontract TokenBoundAccount is Account {\n    uint256 chainId;\n    address tokenContract;\n    uint256 tokenId;\n\n    constructor(\n        IEntryPoint _entrypoint,\n        address _factory\n    ) Account(_entrypoint, _factory) {\n        _disableInitializers();\n    }\n\n    function isValidSigner(\n        address _signer\n    ) public view override returns (bool) {\n        return (isOwner(_signer));\n    }\n\n    function isOwner(address _signer) public view returns (bool) {\n        if (chainId != block.chainid) {\n            revert(\"Invalid chainId\");\n        }\n        return _signer == IERC721(tokenContract).ownerOf(tokenId);\n    }\n\n    function initialize(\n        address _admin,\n        bytes calldata _data\n    ) public override initializer {\n        super.initialize(_admin);\n        (chainId, tokenContract, tokenId) = abi.decode(\n            _data,\n            (uint256, address, uint256)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Limit for Transactions in C#\nDESCRIPTION: This method estimates the gas limit required for a transaction or user operation, returning the value as a BigInteger.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/static/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nBigInteger estimatedGasLimit = await ThirdwebTransaction.EstimateGasLimit(transaction);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Transaction Receipt in C#\nDESCRIPTION: This method waits for a transaction receipt to be available given the client, chain ID, and transaction hash. It throws an exception if the transaction is reverted and attempts to decode the reason.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/static/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nTransactionReceipt receipt = await ThirdwebTransaction.WaitForTransactionReceipt(client, chainId, txHash);\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Config with In-App Wallet\nDESCRIPTION: Example showing how to set up wagmi configuration with the in-app wallet connector and optional smart account support.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/wagmi-adapter/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { http, createConfig } from \"wagmi\";\nimport { inAppWalletConnector } from \"@thirdweb-dev/wagmi-adapter\";\nimport { createThirdwebClient, defineChain as thirdwebChain } from \"thirdweb\";\n\nconst client = createThirdwebClient({\n  clientId: \"...\",\n});\n\nexport const config = createConfig({\n  chains: [sepolia],\n  connectors: [\n    inAppWalletConnector({\n      client,\n      // optional: turn on smart accounts\n      smartAccounts: {\n        sponsorGas: true,\n        chain: thirdwebChain(sepolia),\n      },\n    }),\n  ],\n  transports: {\n    [sepolia.id]: http(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Guest Authentication in EcosystemWallet for Unity\nDESCRIPTION: Demonstrates how to use Guest authentication for easy onboarding, with the ability to link other accounts later.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/ecosystem-wallet/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar ecosystemWalletOptions = new EcosystemWalletOptions(\n    ecosystemId: \"ecosystem.your-ecosystem\", \n    authprovider: AuthProvider.Guest\n);\nvar options = new WalletOptions(\n    provider: WalletProvider.EcosystemWallet, \n    chainId: 1, \n    ecosystemWalletOptions: ecosystemWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Permissions Extension API: renounceRole Function\nDESCRIPTION: This function allows an account to renounce a role it holds. It revokes the specified role from the calling account.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Permissions/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction renounceRole(bytes32 role, address account) external;\n```\n\n----------------------------------------\n\nTITLE: Preparing Raw Transaction in TypeScript\nDESCRIPTION: Shows how to create a raw transaction for sending ether to an address directly, without involving contract calls.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/prepare/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareTransaction, toWei } from \"thirdweb\";\n\nconst transaction = prepareTransaction({\n\t// The account that will be the receiver\n\tto: \"0x456...\",\n\t// The value is the amount of ether you want to send with the transaction\n\tvalue: toWei(\"1\"),\n\t// The chain to execute the transaction on\n\tchain: defineChain(1),\n\t// Your thirdweb client\n\tclient,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20Base Token Contract\nDESCRIPTION: Example implementation of a custom token contract inheriting from ERC20Base, showing constructor setup with admin, name, and symbol parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/base/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC20Base.sol\";\n\ncontract MyToken is ERC20Base {\n\t  constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol\n    )\n        ERC20Base(\n            _defaultAdmin,\n            _name,\n            _symbol\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: getRoleMemberCount Function Definition\nDESCRIPTION: Function to get the total number of accounts that have a specific role. Can be used with getRoleMember to enumerate all bearers of a role.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PermissionsEnumerable/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRoleMemberCount(bytes32 role) external view returns (uint256 count);\n```\n\n----------------------------------------\n\nTITLE: JSON Request Body for Calling Overloaded Functions in thirdweb Engine\nDESCRIPTION: JSON payload example for calling an overloaded function through the thirdweb Engine API. This demonstrates how to specify the full function signature including parameter types when dealing with overloaded functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/contracts/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"functionName\": \"mintTo(address, uint256)\",\n\t\"args\": [\"0x4Ff9aa707AE1eAeb40E581DF2cf4e14AffcC553d\", \"3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating ThirdwebManager Usage in Unity SDK\nDESCRIPTION: Demonstrates the changes in accessing contract functionality through ThirdwebManager from v4 to v5. In v5, contract access is now asynchronous and can be done directly through ThirdwebContract.Create().\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/migration-guide/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Unity v4\nvar contract = ThirdwebManager.Instance.SDK.GetContract(..);\n\n// Unity v5\nvar contract = await ThirdwebManager.Instance.GetContract(..); // now async\n// or with .NET SDK\nvar contract = await ThirdwebContract.Create(..);\n```\n\n----------------------------------------\n\nTITLE: PrimarySale Implementation Example\nDESCRIPTION: Example smart contract showing how to inherit and implement the PrimarySale extension with custom authorization logic for setting the primary sale recipient\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PrimarySale/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/PrimarySale.sol\";\n\ncontract MyContract is PrimarySale {\n    /**\n     *  We store the contract deployer's address only for the purposes of the example\n     *  in the code comment below.\n     *\n     *  Doing this is not necessary to use the `PrimarySale` extension.\n     */\n    address public deployer;\n\n    constructor() {\n        deployer = msg.sender;\n    }\n\n    /**\n     *  This function returns who is authorized to set primary sale recipient address for your contract.\n     *\n     *  As an EXAMPLE, we'll only allow the contract deployer to set the primary sale recipient address.\n     *\n     *  You MUST complete the body of this function to use the `PrimarySale` extension.\n     */\n    function _canSetPrimarySaleRecipient()\n        internal\n        virtual\n        override\n        returns (bool)\n    {\n        return msg.sender == deployer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Raw Data to IPFS in C#\nDESCRIPTION: Uploads raw byte data to IPFS and pins it, returning an IPFSUploadResult with hash, size, timestamp, and preview URL.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/storage/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar bytes = Encoding.UTF8.GetBytes(\"{{data}}\");\nvar result = await ThirdwebStorage.UploadRaw(client, bytes);\n```\n\n----------------------------------------\n\nTITLE: LazyMint Function Signature in Solidity\nDESCRIPTION: This snippet shows the function signature for the lazyMint function, which lazy mints a given amount of NFTs with a specified base URI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/LazyMint/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction lazyMint(\n    uint256 amount,\n    string calldata baseURIForTokens,\n    bytes calldata extraData\n) external returns (uint256 batchId);\n```\n\n----------------------------------------\n\nTITLE: Getting Sell Quote for Tokens in C#\nDESCRIPTION: Demonstrates how to get a quote for selling a specific amount of tokens using the Sell_Quote method. This example shows selling ETH on zkSync for USDC on Ethereum.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/universal-bridge/quickstart/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar sellQuote = await bridge.Sell_Quote(\n    originChainId: 324,\n    originTokenAddress: Constants.NATIVE_TOKEN_ADDRESS, // ETH on zkSync\n    destinationChainId: 1,\n    destinationTokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC on Ethereum\n    sellAmountWei: BigInteger.Parse(\"0.1\".ToWei())\n);\nConsole.WriteLine($\"Sell quote: {JsonConvert.SerializeObject(sellQuote, Formatting.Indented)}\");\n```\n\n----------------------------------------\n\nTITLE: Implementing burnBatch Function in ERC1155Base\nDESCRIPTION: This function allows an owner or approved operator to burn multiple NFTs of given tokenIds in a batch operation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/base/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burnBatch(\n    address _owner,\n    uint256[] memory _tokenIds,\n    uint256[] memory _amounts\n) external virtual {\n    address caller = msg.sender;\n\n    require(caller == _owner || isApprovedForAll[_owner][caller], \"Unapproved caller\");\n    require(_tokenIds.length == _amounts.length, \"Length mismatch\");\n\n    for (uint256 i = 0; i < _tokenIds.length; i += 1) {\n        require(balanceOf[_owner][_tokenIds[i]] >= _amounts[i], \"Not enough tokens owned\");\n    }\n\n    _burnBatch(_owner, _tokenIds, _amounts);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectButton Test Mode\nDESCRIPTION: Implementation showing how to enable test mode for fiat purchases using the ConnectButton component with testMode flag.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/testing-pay/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton\n\tclient={client}\n\tdetailsModal={{\n\t\tpayOptions: {\n\t\t\tbuyWithFiat: {\n\t\t\t\ttestMode: true, // defaults to false\n\t\t\t},\n\t\t},\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Connecting a Smart Wallet\nDESCRIPTION: Code to create a smart wallet interface and connect it to a personal wallet. It configures properties like chain and gas sponsorship for the smart account.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/guides/typescript/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { smartWallet } from \"thirdweb/wallets\";\n\n// Configure the smart wallet\nconst wallet = smartWallet({\n\tchain: sepolia,\n\tsponsorGas: true,\n});\n\n// Connect the smart wallet\nconst smartAccount = await wallet.connect({\n\tclient,\n\tpersonalAccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling an Auction in EnglishAuctions Contract\nDESCRIPTION: The cancelAuction function allows an auction creator to cancel an auction if no bids have been placed. It requires the auctionId parameter to identify the target auction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cancelAuction(uint256 auctionId) external;\n```\n\n----------------------------------------\n\nTITLE: Overriding tokenURI Function in ERC721Drop\nDESCRIPTION: Implementation of the tokenURI function in ERC721Drop. It handles metadata retrieval for NFTs, including support for encrypted batches.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/drop/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\n    (uint256 batchId, ) = _getBatchId(_tokenId);\n    string memory batchUri = _getBaseURI(_tokenId);\n\n    if (isEncryptedBatch(batchId)) {\n        return string(abi.encodePacked(batchUri, \"0\"));\n    } else {\n        return string(abi.encodePacked(batchUri, _tokenId.toString()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Blueprint and Node Components for Engine Interactions\nDESCRIPTION: Imports the Blueprint component and various node components used for contract interactions. Also imports a utility function to create Unreal Engine metadata.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/engine/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Blueprint } from \"../blueprint\";\nimport { getTransactionReceiptNode, getTransactionStatusNode, readContractNode, writeContractNode } from \"./nodes\";\nimport { createUnrealEngineMetadata } from \"../../util\";\n```\n\n----------------------------------------\n\nTITLE: Signature Minting Implementation\nDESCRIPTION: Core function for minting tokens using signature verification. Processes the mint request, collects payment, and mints tokens to the specified receiver.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/signature-mint/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n *  @notice           Mints tokens according to the provided mint request.\n *\n *  @param _req       The payload / mint request.\n *  @param _signature The signature produced by an account signing the mint request.\n */\nfunction mintWithSignature(MintRequest calldata _req, bytes calldata _signature)\n    external\n    payable\n    virtual\n    returns (address signer)\n{\n    require(_req.quantity > 0, \"Minting zero tokens.\");\n\n    // Verify and process payload.\n    signer = _processRequest(_req, _signature);\n\n    address receiver = _req.to;\n\n    // Collect price\n    _collectPriceOnClaim(_req.primarySaleRecipient, _req.quantity, _req.currency, _req.pricePerToken);\n\n    // Mint tokens.\n    _mint(receiver, _req.quantity);\n\n    emit TokensMintedWithSignature(signer, receiver, _req);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Utility Functions for Unreal Engine in JavaScript\nDESCRIPTION: Imports various utility functions and nodes for use in Unreal Engine blueprints. These functions handle tasks such as address validation, message signing, and OAuth provider conversions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/utilities/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createUnrealEngineMetadata } from \"../../util\";\nimport {\n\tequalityNode,\n\tisChecksummedAddressNode,\n\tisValidAddressNode,\n\tisValidNode,\n\toAuthProviderToStringText,\n\tsignMessageNode,\n\tstringTextToOAuthProvider,\n\ttoChecksummedAddressNode,\n\ttoTextStringNode,\n\tzeroAddressNode,\n} from \"./nodes\";\nimport { Blueprint } from \"../blueprint\";\n\nexport const metadata = createUnrealEngineMetadata({\n\ttitle: \"Utilities\",\n\tdescription: \"Utility & Helper functions\",\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Claim Eligibility in Solidity\nDESCRIPTION: This snippet demonstrates the pseudo-code for checking if a claimer is eligible to claim tokens based on the quantity limit per wallet and the supply already claimed. It ensures that the total claimed quantity doesn't exceed the set limit.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/drop/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// pseudo-code\nsupplyClaimedByWallet = claimCondition.supplyClaimedByWallet[conditionId][claimer];\n\nrequire(quantityToClaim + supplyClaimedByWallet <= quantityLimitPerWallet);\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Route\nDESCRIPTION: Creates a POST route at '/logout' to log the user out by clearing the JWT cookie.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\"/logout\", (req, res) => {\n\tres.clearCookie(\"jwt\");\n\treturn res.send(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Token Types\nDESCRIPTION: Demonstrates how to fetch specific token types (ERC20, ERC721, ERC1155) individually with detailed output.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/insight/quickstart/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Fetch ERC20s only\nvar erc20Tokens = await insight.GetTokens_ERC20(address, chains);\nConsole.WriteLine($\"ERC20 Tokens: {JsonConvert.SerializeObject(erc20Tokens, Formatting.Indented)}\");\n\n// Fetch ERC721s only\nvar erc721Tokens = await insight.GetTokens_ERC721(address, chains);\nConsole.WriteLine($\"ERC721 Tokens: {JsonConvert.SerializeObject(erc721Tokens, Formatting.Indented)}\");\n\n// Fetch ERC1155s only\nvar erc1155Tokens = await insight.GetTokens_ERC1155(address, chains);\nConsole.WriteLine($\"ERC1155 Tokens: {JsonConvert.SerializeObject(erc1155Tokens, Formatting.Indented)}\");\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectButton with Account Abstraction in React\nDESCRIPTION: This snippet demonstrates how to set up the ConnectButton component with account abstraction enabled. It configures the chain and sponsored gas options for all connected wallets.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/account-abstraction/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { sepolia } from \"thirdweb/chains\";\nimport { ThirdwebProvider, ConnectButton } from \"thirdweb/react\";\n\nconst client = createThirdwebClient({\nclientId: \"YOUR_CLIENT_ID\",\n});\n\nexport default function App() {\nreturn (\n    <ThirdwebProvider>\n      <ConnectButton\n\t    client={client}\n\t    accountAbstraction={{\n\t\t\tchain: sepolia, // the chain where your smart accounts will be or is deployed\n            sponsorGas: true // enable or disable sponsored transactions\n        }}\n\t  />\n    </ThirdwebProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Crypto Purchase Test Mode - ConnectButton\nDESCRIPTION: Implementation for enabling test mode for crypto-to-crypto transactions using ConnectButton component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/testing-pay/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton\n\tclient={client}\n\tdetailsModal={{\n\t\tpayOptions: {\n\t\t\tbuyWithCrypto: {\n\t\t\t\ttestMode: true, // defaults to false\n\t\t\t},\n\t\t},\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Connecting InAppWallet with JWT Authentication in Unity\nDESCRIPTION: Demonstrates connecting a wallet using JWT authentication with the InAppWallet provider. The code creates InAppWalletOptions with the JWT auth provider and a JWT string for OIDC-compatible authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/in-app-wallet/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar inAppWalletOptions = new InAppWalletOptions(authprovider: AuthProvider.JWT, jwtOrPayload: \"myjwt\");\nvar options = new WalletOptions(\n    provider: WalletProvider.InAppWallet, \n    chainId: 1, \n    inAppWalletOptions: inAppWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Initializing thirdweb Client with Client Key for Frontend\nDESCRIPTION: Shows how to initialize a thirdweb client instance using a client key for frontend applications\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/api-keys/use/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\n\nconst client = createThirdwebClient({\n\tclientKey: \"YOUR_CLIENT_ID\", // Use client id if using on the client side, get it from dashboard settings\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Ecosystem Wallet with Partner ID in thirdweb\nDESCRIPTION: Initializes an ecosystem wallet with a partner ID parameter, which is required for closed ecosystems where partners need to be invited.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/ecosystem-wallet/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst wallet = ecosystemWallet(\"ecosystem.your-ecosystem-id\", {\n\tpartnerId: \"your-partner-id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding _transferTokensOnClaim Function in ERC1155Drop Contract\nDESCRIPTION: This internal function transfers the NFTs being claimed to the specified address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/drop/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transferTokensOnClaim(\n    address _to,\n    uint256 _tokenId,\n    uint256 _quantityBeingClaimed\n) internal virtual override {\n    _mint(_to, _tokenId, _quantityBeingClaimed, \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Custom ManagedAccountFactory Implementation\nDESCRIPTION: Example of creating a custom ManagedAccountFactory by inheriting from the base contract and implementing the constructor.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account-factory/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/smart-wallet/managed/ManagedAccountFactory.sol\";\n\ncontract MyManagedAccountFactory is ManagedAccountFactory {\n\t  constructor(\n        IEntryPoint _entrypoint\n    )\n        ManagedAccountFactory(\n            _entrypoint\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155Claimable Contract\nDESCRIPTION: Example implementation of a contract that inherits from ERC1155, LazyMint, and IClaimableERC1155 interfaces. Includes constructor and required function implementations for claiming functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Claimable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\nimport \"@thirdweb-dev/contracts/extension/LazyMint.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IClaimableERC1155.sol\";\n\ncontract Contract is ERC1155, LazyMint, IClaimableERC1155 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC1155(\n            _name,\n            _symbol\n        )\n    {}\n\n    function _canLazyMint() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    function verifyClaim(address _claimer, uint256 _quantity) public view virtual override {\n        // Your custom implementation here\n    }\n\n    function claim(address _receiver, uint256 _quantity) public payable virtual override {\n        // Your custom implementation here\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending and Waiting for Transaction Receipt in C#\nDESCRIPTION: This method sends a transaction and waits for its receipt, returning the TransactionReceipt object with detailed execution results.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/static/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nTransactionReceipt receipt = await ThirdwebTransaction.SendAndWaitForTransactionReceipt(transaction);\n```\n\n----------------------------------------\n\nTITLE: Initializing RainbowKit in React Application\nDESCRIPTION: Example of setting up RainbowKit providers and configuration in a React application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport '@rainbow-me/rainbowkit/styles.css';\nimport {\n  getDefaultConfig,\n  RainbowKitProvider,\n} from '@rainbow-me/rainbowkit';\nimport { WagmiProvider } from 'wagmi';\nimport {\n  mainnet,\n  polygon,\n  optimism,\n  arbitrum,\n  base,\n} from 'wagmi/chains';\nimport {\n  QueryClientProvider,\n  QueryClient,\n} from \"@tanstack/react-query\";\n\nconst config = getDefaultConfig({\n  appName: 'My RainbowKit App',\n  projectId: 'YOUR_PROJECT_ID',\n  chains: [mainnet, polygon, optimism, arbitrum, base],\n  ssr: true, // If your dApp uses server side rendering (SSR)\n});\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowKitProvider>\n          {/* Your App */}\n        </RainbowKitProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Transfer Events with ABI in Insight Webhooks\nDESCRIPTION: This example demonstrates how to filter Transfer events on Ethereum for a specific contract address. It includes the event signature hash and ABI for data decoding.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/webhooks/filtering/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  ...\n  filters: {\n    \"v1.events\": {\n      chain_ids: [\"1\"],\n      addresses: [\"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\"],\n      signatures: [\n        {\n          sig_hash:\n            \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n          abi: '{\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}',\n        },\n      ],\n    },\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Personal Wallet Key with privateKeyAccount\nDESCRIPTION: Code to initialize a thirdweb client and create a personal wallet key using privateKeyAccount, which serves as the key to unlock the smart account.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/guides/typescript/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { privateKeyAccount } from \"thirdweb/wallets\";\n\nconst client = createThirdwebClient({\n\tsecretKey: process.env.THIRDWEB_SECRET_KEY as string,\n});\n\nconst personalAccount = privateKeyAccount({\n\tclient,\n\tprivateKey: process.env.PRIVATE_KEY as string,\n});\nconsole.log(\"Personal account address:\", personalAccount.address);\n```\n\n----------------------------------------\n\nTITLE: Revoke Role Function\nDESCRIPTION: Internal function to revoke roles and unregister signers from the factory.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/AccountExtension/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _revokeRole(bytes32 role, address account) internal virtual override {\n    super._revokeRole(role, account);\n    if (role == SIGNER_ROLE && factory.code.length > 0) {\n        IAccountFactory(factory).removeSigner(account);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Signers from Smart Wallet in C#\nDESCRIPTION: Method to fetch all active signers and their associated permissions from a smart wallet. Returns a list of SignerPermissions objects containing signer addresses, approved targets, token limits, and timestamp information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/getallactivesigners/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Get all active signers\nList<SignerPermissions> signers = await smartWallet.GetAllActiveSigners();\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Function for Increment\nDESCRIPTION: Adding a _beforeIncrement function that uses a callback to modify the increment behavior.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-core-contract/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\ninterface BeforeIncrementCallback {\n    function beforeIncrement(uint256 count) external returns (uint256);\n}\n\nfunction _beforeIncrement(\n    uint256 _count\n) internal returns (uint256 newCount) {\n    (, bytes memory returnData) = _executeCallbackFunction(\n        BeforeIncrementCallback.beforeIncrement.selector,\n        abi.encodeCall(BeforeIncrementCallback.beforeIncrement, (_count))\n    );\n\n    newCount = abi.decode(returnData, (uint256));\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions with Extensions\nDESCRIPTION: Shows how to send transactions using Thirdweb extensions, specifically demonstrating an ERC20 token transfer\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/quickstart/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getContract } from \"thirdweb\";\nimport { sepolia } from \"thirdweb/chains\";\nimport { useSendTransaction } from \"thirdweb/react\";\n// 1. import the extension you want to use\nimport { transfer } from \"thirdweb/extensions/erc20\";\n\n// 2. define the target contract\nconst USDC = getContract({ client, address: USDC_ADDRESS, chain: sepolia });\n\nexport default function MyComponent() {\n  // 3. call the useSendTransaction hook\n  const { mutate: sendTransaction, isPending } = useSendTransaction();\n\n  const onClick = () => {\n    // 4. execute the transaction (send 15 USDC to the target address)\n    const transaction = transfer({ contract: USDC, amount: 15, to: \"0x...\" });\n    sendTransaction(transaction);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExtensionConfig Struct in Solidity\nDESCRIPTION: This code snippet defines the ExtensionConfig struct used in the Modular Contracts architecture. It contains fields for required interfaces, callback settings, supported interfaces, and function definitions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/modular-contracts/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ExtensionConfig {\n    bytes4[] requiredInterfaces;\n    bool registerInstallationCallback;\n    bytes4[] supportedInterfaces;\n    CallbackFunction[] callbackFunctions;\n    FallbackFunction[] fallbackFunction;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Converted Ethers Provider\nDESCRIPTION: Demonstrates using the converted Ethers.js provider to get blockchain information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/ethers-adapter/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst blockNumber = await provider.getBlockNumber();\n```\n\n----------------------------------------\n\nTITLE: Getting Account with TypeScript\nDESCRIPTION: Demonstrates how to retrieve the current wallet account using the inAppWallet instance in TypeScript.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/interact-with-accounts/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = await inAppWallet.getAccount();\n```\n\n----------------------------------------\n\nTITLE: SIWE Message Generation in C#\nDESCRIPTION: Generates a Sign-In With Ethereum message from login payload data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar siweMessage = Utils.GenerateSIWE(loginPayloadData);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Signers of an Account\nDESCRIPTION: Implements the getSignersOfAccount function, which returns all signers of an account.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWalletFactory/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getSignersOfAccount(address account) external view returns (address[] memory signers) {\n    return signersOfAccount[account].values();\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying AccountFactory Contract with CLI\nDESCRIPTION: This bash command deploys the AccountFactory contract using the thirdweb CLI. Note that a secret key is required for this command.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account-factory/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb deploy\n```\n\n----------------------------------------\n\nTITLE: Wrapping Tokens Function in Multiwrap Solidity Contract\nDESCRIPTION: This function allows users to wrap multiple tokens into a single NFT. It takes an array of tokens to wrap, a URI for the wrapped token's metadata, and a recipient address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/multiwrap/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction wrap(\n    Token[] memory tokensToWrap,\n    string calldata uriForWrappedToken,\n    address recipient\n) external payable returns (uint256 tokenId);\n```\n\n----------------------------------------\n\nTITLE: NFT Transfer Functions\nDESCRIPTION: Override implementations of transferFrom and safeTransferFrom with operator checks.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/base/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n) public virtual override(ERC721A) onlyAllowedOperator(from) {\n    super.transferFrom(from, to, tokenId);\n}\n\nfunction safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n) public virtual override(ERC721A) onlyAllowedOperator(from) {\n    super.safeTransferFrom(from, to, tokenId);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Timeout Options for ThirdwebClient in C#\nDESCRIPTION: Shows how to configure timeout options for fetching data when initializing a ThirdwebClient. This allows fine-tuning of request performance for storage, RPC, and other requests.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/client/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// You can choose to override default timeout values for storage, rpc, and other requests.\nTimeoutOptions(int? storage = null, int? rpc = null, int? other = null)\n```\n\n----------------------------------------\n\nTITLE: Configuring React package.json for IPFS Deployment\nDESCRIPTION: Configuration settings required in package.json for deploying a React application to IPFS, including homepage setting and deploy script.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/storage/how-to-use-storage/host-web-app/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"homepage\": \".\",\n  \"scripts\": {\n    \"deploy\": \"yarn build && npx thirdweb@latest upload build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Thirdweb .NET SDK via NuGet\nDESCRIPTION: Command to install the Thirdweb .NET SDK package using the .NET CLI. This adds the latest version of the Thirdweb package to your .NET project via NuGet package manager.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Thirdweb\n```\n\n----------------------------------------\n\nTITLE: Batch Mint Metadata Internal Function\nDESCRIPTION: Internal function to mint multiple NFTs and set their common base URI in a single transaction.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/BatchMintMetadata/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _batchMintMetadata(\n    uint256 _startId,\n    uint256 _amountToMint,\n    string memory _baseURIForTokens\n) internal returns (uint256 nextTokenIdToMint, uint256 batchId);\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure\nDESCRIPTION: Shell commands to create and navigate to a new project directory for the application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir my-app\n$ cd my-app\n```\n\n----------------------------------------\n\nTITLE: Connecting with In-App Wallet\nDESCRIPTION: Example demonstrating how to connect to an in-app wallet using a supported strategy in a React component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/wagmi-adapter/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { connect, connectors } = useConnect();\n\nconst onClick = () => {\n  const inAppWallet = connectors.find((x) => x.id === \"in-app-wallet\");\n  connect({\n    connector: inAppWallet,\n    strategy: \"google\",\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing thirdweb Client\nDESCRIPTION: Creating and configuring the thirdweb client instance with client ID from environment variables\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/getting-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// src/client.ts\nimport { createThirdwebClient } from \"thirdweb\";\n\nexport const client = createThirdwebClient({\n  clientId: process.env.NEXT_PUBLIC_THIRDWEB_CLIENT_ID,\n});\n```\n\n----------------------------------------\n\nTITLE: Hex String Concatenation in C#\nDESCRIPTION: Concatenates multiple hexadecimal strings into a single hex string.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar concatenatedHex = Utils.HexConcat(\"0x1234\", \"0x5678\");\n```\n\n----------------------------------------\n\nTITLE: Before Claim Hook in Solidity Smart Contract\nDESCRIPTION: Internal function that runs before every claim function call, allowing custom logic implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeClaim(\n    address receiver,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Using API Secret Key for Authentication in CI Environments\nDESCRIPTION: Example of using an API secret key for authentication in continuous integration environments. This allows for programmatic authentication without requiring manual dashboard intervention.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/login/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb generate --key <secret-key>\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseAccount in a Custom Factory Contract\nDESCRIPTION: Demonstrates how to create a custom account factory contract that inherits from BaseAccount.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWallet/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/smart-wallet/utils/BaseAccountFactory.sol\";\n\ncontract MyAccountFactory is BaseAccountFactory { ... }\n```\n\n----------------------------------------\n\nTITLE: Overriding _collectPriceOnClaim Function in ERC20Drop\nDESCRIPTION: This internal function handles the collection and distribution of the primary sale value for tokens being claimed. It supports both native currency and ERC20 tokens as payment.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/drop/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _collectPriceOnClaim(\n    address _primarySaleRecipient,\n    uint256 _quantityToClaim,\n    address _currency,\n    uint256 _pricePerToken\n) internal virtual override {\n    if (_pricePerToken == 0) {\n        return;\n    }\n\n    uint256 totalPrice = (_quantityToClaim * _pricePerToken) / 1 ether;\n    require(totalPrice > 0, \"quantity too low\");\n\n    if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n        require(msg.value == totalPrice, \"Must send total price.\");\n    }\n\n    address saleRecipient = _primarySaleRecipient == address(0) ? primarySaleRecipient() : _primarySaleRecipient;\n    CurrencyTransferLib.transferCurrency(_currency, msg.sender, saleRecipient, totalPrice);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Nonce in C#\nDESCRIPTION: Sets the nonce for the transaction using SetNonce method. Takes a BigInteger as input.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/instance/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction transaction = transaction.SetNonce(1);\n```\n\n----------------------------------------\n\nTITLE: Example Transaction Webhook Payload in JSON\nDESCRIPTION: Sample JSON response for a transaction webhook showing blockchain transaction data including block information, gas details, and decoded function parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/webhooks/payload/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": 1743165030,\n  \"topic\": \"v1.transactions\",\n  \"data\": [\n    {\n      \"data\": {\n        \"chain_id\": \"1\",\n        \"hash\": \"0xceba210be88785cac0884127cb42d370bcde8248e11e490af0deeb6ded2bb421\",\n        \"nonce\": 5,\n        \"block_hash\": \"0x86cfe1e32fb3e5091bc2533b78d1503a4539936f50ff5a33b09df639f1572fdd\",\n        \"block_number\": 22145183,\n        \"block_timestamp\": 1743162179,\n        \"transaction_index\": 62,\n        \"from_address\": \"0xcd1785a6a49748948059d3c27d8f55ad0ef94c8c\",\n        \"to_address\": \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n        \"value\": \"0\",\n        \"gas\": 50000,\n        \"gas_price\": \"2000000000\",\n        \"data\": \"0xa9059cbb00000000000000000000000028c6c06298d514db089934071355e5743bf21d60000000000000000000000000000000000000000000000024ac7a2466fe6d4000\",\n        \"function_selector\": \"0xa9059cbb\",\n        \"max_fee_per_gas\": \"2000000000\",\n        \"max_priority_fee_per_gas\": \"2000000000\",\n        \"transaction_type\": 2,\n        \"r\": \"93121701149456501424579980283392650303695688563543540003926043202730906996706\",\n        \"s\": \"5712073776861917154895012394334633911928305143620822626852008432451821415527\",\n        \"v\": \"1\",\n        \"access_list_json\": \"[]\",\n        \"contract_address\": null,\n        \"gas_used\": 35318,\n        \"cumulative_gas_used\": 9124496,\n        \"effective_gas_price\": \"2000000000\",\n        \"blob_gas_used\": 0,\n        \"blob_gas_price\": \"0\",\n        \"logs_bloom\": \"0xn        \"status\": 1,\n        \"decoded\": {\n          \"name\": \"transfer\",\n          \"inputs\": {\n            \"dst\": \"0x28c6c06298d514db089934071355e5743bf21d60\",\n            \"rawAmount\": \"676511072800000000000\"\n          }\n        }\n      },\n      \"status\": \"new\",\n      \"type\": \"transaction\",\n      \"id\": \"e922999aff6625e1e26e6eca478b2c6ece33a5b8cf3a3c8bde96c00da8d2acc0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ZkSync Options in C#\nDESCRIPTION: Sets the ZkSync options for the transaction using SetZkSyncOptions method, enabling native ZkSync Account Abstraction with any paymaster.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/instance/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nZkSyncOptions zkSyncOptions = new ZkSyncOptions(\"0xPaymaster\", \"0xPaymasterInput\");\nThirdwebTransaction transaction = transaction.SetZkSyncOptions(zkSyncOptions);\n```\n\n----------------------------------------\n\nTITLE: Basic thirdweb CLI Login Command\nDESCRIPTION: The primary command for authenticating your device with the thirdweb CLI. Running this command opens the dashboard to allow you to link your device to your thirdweb account.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/login/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb login [options]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Device Link with thirdweb CLI\nDESCRIPTION: Command to create a new device link to your thirdweb account. This is useful when you want to create a separate authentication for a different device or environment.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/login/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb login --new\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for OAuth Redirect\nDESCRIPTION: XML configuration for the Android manifest file to enable OAuth redirects on mobile platforms. This snippet shows how to set custom URL schemes matching your app's bundle ID to handle authentication callbacks properly.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/build-instructions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Set your bundle id here -->\n<!-- Replace 'com.thirdweb.unitysdk' with your desired scheme -->\n<data android:scheme=\"com.thirdweb.unitysdk\" />\n```\n\n----------------------------------------\n\nTITLE: Email-based Wallet Pregeneration Request\nDESCRIPTION: Example request body for pregenerating a wallet using an email strategy.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/pregenerate-wallets/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ strategy: \"email\", email: \"user@example.com\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring thirdweb auth with createAuth function\nDESCRIPTION: Sets up the authentication object using createAuth function with necessary parameters like domain, client, and admin account.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/auth/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { createAuth } from \"thirdweb/auth\";\n \nconst client = createThirdwebClient({\n  secretKey, // always use secret key for backend code\n});\n \nconst thirdwebAuth = createAuth({\n  domain: \"localhost:3000\", // your domain\n  client,\n  // your backend wallet to sign login payloads\n  adminAccount: privateKeyToAccount({ client, privateKey }),\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Ethereum Addresses in C++\nDESCRIPTION: These functions check if an Ethereum address is checksummed or valid, and convert an address to its checksummed form. They are part of the ThirdwebUtils namespace in the Unreal Engine SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/cpp/thirdweb-utils/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nIsChecksummedAddress(Address)\nIsValidAddress(Address)\nToChecksummedAddress(Address)\n```\n\n----------------------------------------\n\nTITLE: Overriding Default RPC in TypeScript ThirdwebSDK\nDESCRIPTION: Specifies a custom RPC endpoint when initializing the ThirdwebSDK in TypeScript. This configuration allows developers to use their preferred RPC provider instead of thirdweb's default service.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/rpc-edge/get-started/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\nconst sdk = new ThirdwebSDK({\n\trpc: [\"https://<your-rpc-to-use>.com\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Using ConnectButton Component in React\nDESCRIPTION: Demonstrates the use of the pre-built ConnectButton component for wallet connection UI in React.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\nimport { client } from \"./thirdwebClient\";\n\nfunction YourApp() {\n  return (\n    <div>\n      <h1>My dApp</h1>\n      <ConnectButton client={client} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Method with Custom ABI in JSON\nDESCRIPTION: This JSON snippet demonstrates how to call a contract method on a custom chain by providing the full function signature in the ABI. This is necessary because Engine may not be able to resolve the ABI automatically for custom chains.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/custom-chains/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPOST /contract/:chainId/:address/write\n{\n\t\"functionName\": \"function setTokenURI(string uri)\",\n\t\"args\": [\"ipfs://...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Token Struct Definition in Solidity\nDESCRIPTION: This struct defines the structure of a token in the Pack contract, including the asset contract address, token type, token ID, and total amount.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/pack/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Token {\n    address assetContract; // USDC address\n    TokenType tokenType; // TokenType.ERC20\n    uint256 tokenId; // Not applicable\n    uint256 totalAmount; // 5000\n}\n\nuint256 perUnitAmount; // 1000\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for Insight Webhooks Documentation in JavaScript\nDESCRIPTION: This code snippet initializes metadata for the Insight Webhooks documentation page using the createMetadata function from the @doc module. It sets the title, description, and image properties for the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/webhooks/managing-webhooks/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Insight Webhooks | thirdweb Infrastructure\",\n\tdescription: \"Managing Insight webhooks\",\n  image: {\n    title: \"Insight\",\n    icon: \"insight\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ContractMetadata Extension\nDESCRIPTION: Example implementation of a smart contract inheriting from ContractMetadata extension, demonstrating how to implement the required _canSetContractURI function with custom access control.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/ContractMetadata/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/ContractMetadata.sol\";\n\ncontract MyContract is ContractMetadata {\n\n    /**\n     *  We store the contract deployer's address only for the purposes of the example\n     *  in the code comment below.\n     *\n     *  Doing this is not necessary to use the `ContractMetadata` extension.\n     */\n    address public deployer;\n\n    constructor() {\n        deployer = msg.sender;\n    }\n\n    /**\n     *  This function returns who is authorized to set the metadata for your metadata.\n     *\n     *  As an EXAMPLE, we'll only allow the contract deployer to set the contract's metadata.\n     *\n     *  You MUST complete the body of this function to use the `ContractMetadata` extension.\n     */\n    function _canSetContractURI() internal view virtual override returns (bool){\n        return msg.sender == deployer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155DelayedReveal Contract\nDESCRIPTION: Example of how to create a custom NFT contract that inherits from ERC1155DelayedReveal, including constructor implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/delayed-reveal/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC1155DelayedReveal.sol\";\n\ncontract MyNFT is ERC1155DelayedReveal {\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC1155DelayedReveal(_defaultAdmin, _name, _symbol, _royaltyRecipient, _royaltyBps) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155Drop Contract in Solidity\nDESCRIPTION: This snippet shows how to import the ERC1155Drop contract from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC1155Drop.sol\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Non-Gated Ecosystem Wallet\nDESCRIPTION: Creates an ecosystem wallet instance for a non-gated 'Anyone' permission ecosystem using the ecosystem ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/set-up/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ecosystemWallet } from \"thirdweb/wallets\";\n\n// Create a wallet for a non-gated \"Anyone\" ecosystem\nconst wallet = ecosystemWallet(\"ecosystem.your-ecosystem-id\");\n```\n\n----------------------------------------\n\nTITLE: Defining Module Configuration for MintableModule Contract\nDESCRIPTION: This Solidity function returns the configuration for the MintableModule. It specifies the beforeMint callback function and requires the ERC721 interface, demonstrating how modules declare their capabilities and requirements.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/how-it-works/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getModuleConfig() external pure override returns (ModuleConfig memory config) {\n\tconfig.callbackFunctions = new CallbackFunction[1];\n\tconfig.callbackFunctions[0] = CallbackFunction(this.beforeMint.selector);\n\n\tconfig.requiredInterfaces = new bytes4[1];\n\tconfig.requiredInterfaces[0] = 0x80ac58cd; // ERC721.\n}\n```\n\n----------------------------------------\n\nTITLE: Upload Directory via CLI\nDESCRIPTION: Command to upload an entire directory to IPFS using thirdweb CLI\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/storage/how-to-use-storage/upload-files-to-ipfs/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb upload directory_name\n```\n\n----------------------------------------\n\nTITLE: Collecting Auctioned NFTs for Winning Bidders\nDESCRIPTION: The collectAuctionTokens function allows the winning bidder to collect the auctioned NFTs after the auction ends, requiring the auction to be expired and the caller to be the winning bidder.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction collectAuctionTokens(uint256 auctionId) external;\n```\n\n----------------------------------------\n\nTITLE: Processing Transaction Receipts in thirdweb Engine Contract Subscriptions\nDESCRIPTION: Example JSON structure of a transaction receipt webhook payload sent by thirdweb Engine. It contains transaction details including chain ID, block information, contract interaction data, gas usage, and transaction status.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/contract-subscriptions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"transaction-receipt\",\n\t\"data\": {\n\t\t\"chainId\": 8453,\n\t\t\"blockNumber\": 14306498,\n\t\t\"contractAddress\": \"0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4\",\n\t\t\"transactionHash\": \"0xa2cef7ca09ed9d6b6790fcb8556673e0c3e64ab5b2c127509469231454390e9e\",\n\t\t\"blockHash\": \"0x2302a36de3da9678638e577c35f66c766d5a011512f0644ab0c99a2018a8f2de\",\n\t\t\"timestamp\": 1715402343000,\n\t\t\"data\": \"0xb51d05340000000000000000000000005d5ecf22298e311815f92e0f5d41ae39148e9fc40000000000000000000000000000000000000000000000000000000000000001\",\n\t\t\"value\": \"0\",\n\t\t\"to\": \"0xcf205808ed36593aa40a44f10c7f7c2f67d4a4d4\",\n\t\t\"from\": \"0xc85077441915d1b0bd9bcf92cf03019710d317d9\",\n\t\t\"transactionIndex\": 41,\n\t\t\"gasUsed\": \"77523\",\n\t\t\"effectiveGasPrice\": \"31254333\",\n\t\t\"status\": 1\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Email in EcosystemWallet for Unity\nDESCRIPTION: Demonstrates how to authenticate a user with email using EcosystemWallet. This approach instantiates an EcosystemWalletModal that verifies the user's OTP (One-Time Password).\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/ecosystem-wallet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar ecosystemWalletOptions = new EcosystemWalletOptions(\n    ecosystemId: \"ecosystem.your-ecosystem\", \n    email: \"myepicemail@domain.id\"\n);\nvar options = new WalletOptions(\n    provider: WalletProvider.EcosystemWallet, \n    chainId: 1, \n    ecosystemWalletOptions: ecosystemWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Creating the Base CounterModule Contract\nDESCRIPTION: Initial setup of the CounterModule contract, inheriting from the Module base contract and implementing the required getModuleConfig function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-module-contract/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {Module} from \"@thirdweb-dev/src/Module.sol\";\n\ncontract CounterModule is Module {\n    function getModuleConfig()\n        public\n        pure\n        override\n        returns (ModuleConfig memory config)\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: .NET SDK Core Implementation\nDESCRIPTION: Basic initialization and wallet connection implementation for .NET applications using thirdweb SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nusing Thirdweb;\n\n// For client-side applications:\nvar sdk = new ThirdwebSDK(\"ethereum\", new ThirdwebSDK.Options\n{\n    ClientId = \"YOUR_CLIENT_ID\" // From thirdweb dashboard\n});\n\n// For server-side applications:\n// var sdk = new ThirdwebSDK(\"ethereum\", new ThirdwebSDK.Options\n// {\n//     SecretKey = Environment.GetEnvironmentVariable(\"THIRDWEB_SECRET_KEY\")\n// });\n```\n\n----------------------------------------\n\nTITLE: Handling Streamed Server-Sent Events in JavaScript\nDESCRIPTION: This snippet demonstrates how to handle various event types in a streamed response from the thirdweb API using JavaScript. It covers initializing the EventSource, processing different event types (init, presence, action, delta, error), and accumulating the message text.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/key-concepts/response-handling/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst eventSource = new EventSource(\"/chat\", {\n  headers: {\n    \"x-secret-key\": \"YOUR_THIRDWEB_SECRET_KEY\",\n  },\n});\n\nlet messageText = \"\";\n\neventSource.addEventListener(\"init\", (event) => {\n  const data = JSON.parse(event.data);\n  console.log(\"Stream initialized:\", data);\n});\n\neventSource.addEventListener(\"presence\", (event) => {\n  const data = JSON.parse(event.data);\n  console.log(\"Backend status:\", data.data);\n});\n\neventSource.addEventListener(\"action\", (event) => {\n  const data = JSON.parse(event.data);\n  console.log(\"Received action:\", data);\n  if (data.type === \"sign_transaction\") {\n    // Handle transaction signing\n    handleTransaction(data);\n  }\n});\n\neventSource.addEventListener(\"delta\", (event) => {\n  const data = JSON.parse(event.data);\n  messageText += data.v;\n  console.log(\"Current message:\", messageText);\n});\n\neventSource.addEventListener(\"error\", (event) => {\n  const error = JSON.parse(event.data);\n  console.error(\"Error:\", error);\n  eventSource.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing In-App Wallet Creation in thirdweb\nDESCRIPTION: This snippet shows how to create a customized in-app wallet by passing options to the inAppWallet function, including authentication mode, options, passkey domain, redirect URL, metadata, partner ID, and smart account options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/build-your-own-ui/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet({\n\tauth: {\n        mode, // options are \"popup\" | \"redirect\" | \"window\";\n        options, // ex: [\"discord\", \"farcaster\", \"apple\", \"facebook\", \"google\", \"passkey\"],\n        passkeyDomain, // for passkey, the domain that the passkey is created on\n        redirectUrl, // the URL to redirect to after authentication\n\t},\n\tmetadata, // metadata for the wallet\n\tpartnerId, // partner ID for the wallet\n\tsmartAccount, // smart account options for the wallet\n});\n```\n\n----------------------------------------\n\nTITLE: Transactions API Endpoints Reference\nDESCRIPTION: Provides reference documentation for the Transactions API endpoints, including getting all transactions, contract-specific transactions, and transactions with specific signatures.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Get All Transactions\nGET /v1/transactions\n\n// 2. Get Contract Transactions\nGET /v1/transactions/:contractAddress\n\n// 3. Get Specific Transaction Type\nGET /v1/transactions/:contractAddress/:signature\n```\n\n----------------------------------------\n\nTITLE: Customizing Supported Tokens in ConnectButton\nDESCRIPTION: This snippet demonstrates how to override default tokens for a specific chain by providing custom token configurations to the ConnectButton component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/connectbutton/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton\n\tclient={client}\n\tsupportedTokens={{\n\t\t\"1\": [\n\t\t\t{\n\t\t\t\taddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n\t\t\t\tname: \"USD Coin\",\n\t\t\t\tsymbol: \"USDC\",\n\t\t\t\ticon: usdcIcon,\n\t\t\t},\n\t\t],\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Building Credit Card Form Component with Stripe Elements\nDESCRIPTION: Component that renders the Stripe payment form and handles payment submission, using Stripe Elements to securely collect card information and process payments.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/guides/nft-checkout/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst CreditCardForm = () => {\n\tconst elements = useElements();\n\tconst stripe = useStripe();\n\n\tconst onClick = async () => {\n\t\t// Submit payment to Stripe. The NFT is minted later in the webhook.\n\t\tawait stripe.confirmPayment({\n\t\t\telements,\n\t\t\tconfirmParams: { return_url: \"http://localhost:3000\" },\n\t\t\tredirect: \"if_required\",\n\t\t});\n\t\talert(\"Payment success. The NFT will be delivered to your wallet shortly.\");\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<PaymentElement />\n\t\t\t<button onClick={onClick}>Pay now</button>\n\t\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Ownable Extension Example\nDESCRIPTION: Example contract showing how to inherit and implement the Ownable extension with custom ownership control logic\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Ownable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/Ownable.sol\";\n\ncontract MyContract is Ownable {\n    /**\n     *  This function returns who is authorized to set the owner of your contract.\n     *\n     *  As an EXAMPLE, we'll only allow the current owner to set the contract's new owner.\n     *\n     *  You MUST complete the body of this function to use the `Ownable` extension.\n     */\n    function _canSetOwner() internal virtual view override returns (bool) {\n        return msg.sender == owner();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Data Payload in C#\nDESCRIPTION: Sets the raw encoded data payload for the transaction using SetData method. Takes a hexadecimal string as input.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/instance/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction transaction = transaction.SetData(\"0x\");\n```\n\n----------------------------------------\n\nTITLE: Token Sale Price Collection Implementation\nDESCRIPTION: Internal function that handles the collection and distribution of payment for token minting, supporting both native currency and ERC20 tokens.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/signature-mint-vote/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n/// @dev Collects and distributes the primary sale value of tokens being claimed.\nfunction _collectPriceOnClaim(\n    address _primarySaleRecipient,\n    uint256 _quantityToClaim,\n    address _currency,\n    uint256 _pricePerToken\n) internal virtual {\n    if (_pricePerToken == 0) {\n        return;\n    }\n\n    uint256 totalPrice = (_quantityToClaim * _pricePerToken) / 1 ether;\n    require(totalPrice > 0, \"quantity too low\");\n\n    if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n        require(msg.value == totalPrice, \"Must send total price.\");\n    }\n\n    address saleRecipient = _primarySaleRecipient == address(0) ? primarySaleRecipient() : _primarySaleRecipient;\n    CurrencyTransferLib.transferCurrency(_currency, msg.sender, saleRecipient, totalPrice);\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Implementation\nDESCRIPTION: Demonstrates proper error handling for API calls including response validation and error parsing.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/llmstxt/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync function safeApiCall() {\n\ttry {\n\t\tconst response = await fetch(`https://{{chainId}}.insight.thirdweb.com/v1/events`, {\n\t\t\theaders: { \"x-client-id\": \"{{clientId}}\" },\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tconst errorData = await response.json();\n\t\t\tthrow new Error(errorData.error);\n\t\t}\n\n\t\treturn await response.json();\n\t} catch (error) {\n\t\tconsole.error(\"API Error:\", error.message);\n\t\tthrow error;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions to the Blockchain in C#\nDESCRIPTION: This method sends a transaction to the blockchain without waiting for confirmation, returning only the transaction hash as a string.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/static/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nstring transactionHash = await ThirdwebTransaction.Send(transaction);\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons for Documentation\nDESCRIPTION: This code snippet imports various components and icons used for creating the documentation page. It includes imports for metadata creation, article icon cards, callouts, and various technology-specific icons.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/user-management/link-multiple-identity/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, ArticleIconCard, Callout  } from \"@doc\";\nimport {\n    ReactIcon,\n    TypeScriptIcon,\n    UnityIcon,\n    DotNetIcon,\n    ExternalLinkIcon,\n    UnrealEngineIcon\n} from \"@/icons\"\n```\n\n----------------------------------------\n\nTITLE: Creating Session Keys in Unity with thirdweb SDK\nDESCRIPTION: C# implementation for creating a session key in Unity using the thirdweb SDK. The code demonstrates how to set approved targets, token limits, and time-based permissions for session keys in a game environment.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/permissions/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Thirdweb;\n\n// Reference to your Thirdweb SDK\nvar sdk = ThirdwebManager.Instance.SDK;\n\n// Create a session key\nstring signerAddress = \"0xSignerAddress\";\nList<string> approvedTargets = new List<string> { \"0xTargetAddress\" };\nstring nativeTokenLimitPerTransactionInWei = \"0\";\nstring permissionStartTimestamp = \"0\";\nstring permissionEndTimestamp = Utils.GetUnixTimestampIn10Years().ToString();\nstring reqValidityStartTimestamp = \"0\";\nstring reqValidityEndTimestamp = Utils.GetUnixTimestampIn10Years().ToString();\n\nawait sdk.wallet.CreateSessionKey(\n  \"0xSignerAddress\",\n  approvedTargets,\n  nativeTokenLimitPerTransactionInWei,\n  permissionStartTimestamp,\n  permissionEndTimestamp,\n  reqValidityStartTimestamp,\n  reqValidityEndTimestamp\n);\n```\n\n----------------------------------------\n\nTITLE: Overriding mintWithSignature Function in ERC1155SignatureMint\nDESCRIPTION: This function mints tokens according to the provided mint request and signature. It can be overridden to add custom logic.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/signature-mint/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mintWithSignature(MintRequest calldata _req, bytes calldata _signature)\n    external\n    payable\n    virtual\n    override\n    returns (address signer)\n{\n    require(_req.quantity > 0, \"Minting zero tokens.\");\n\n    uint256 tokenIdToMint;\n    uint256 nextIdToMint = nextTokenIdToMint();\n\n    if (_req.tokenId == type(uint256).max) {\n        tokenIdToMint = nextIdToMint;\n        nextTokenIdToMint_ += 1;\n    } else {\n        require(_req.tokenId < nextIdToMint, \"invalid id\");\n        tokenIdToMint = _req.tokenId;\n    }\n\n    // Verify and process payload.\n    signer = _processRequest(_req, _signature);\n\n    address receiver = _req.to;\n\n    // Collect price\n    _collectPriceOnClaim(_req.primarySaleRecipient, _req.quantity, _req.currency, _req.pricePerToken);\n\n    // Set royalties, if applicable.\n    if (_req.royaltyRecipient != address(0)) {\n        _setupRoyaltyInfoForToken(tokenIdToMint, _req.royaltyRecipient, _req.royaltyBps);\n    }\n\n    // Set URI\n    if (_req.tokenId == type(uint256).max) {\n        _setTokenURI(tokenIdToMint, _req.uri);\n    }\n\n    // Mint tokens.\n    _mint(receiver, tokenIdToMint, _req.quantity, \"\");\n\n    emit TokensMintedWithSignature(signer, receiver, tokenIdToMint, _req);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Admin Permissions with TypeScript in thirdweb\nDESCRIPTION: TypeScript implementation for adding a new admin to a smart account. This code connects to a smart wallet and adds administrator privileges to a specified address using thirdweb's SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/permissions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addAdmin } from \"thirdweb/extensions/erc4337\";\nimport { smartWallet } from \"thirdweb/wallets\";\nimport { sendTransaction, getContract } from \"thirdweb\";\n\nconst wallet = new smartWallet(config);\nconst smartAccount = await wallet.connect({\n\tclient,\n\tpersonalAccount,\n});\n\nconst transaction = addAdmin({\n\tcontract: getContract({\n\t\taddress: smartAccount.address,\n\t\tchain,\n\t\tclient,\n\t}),\n\taccount: smartAccount,\n\tadminAddress: \"0x...\", // the address of the new admin\n});\nawait sendTransaction({\n\ttransaction,\n\taccount: smartAccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Engine Documentation in React\nDESCRIPTION: This code snippet uses the createMetadata function to define the title and description metadata for the thirdweb Engine documentation page. This metadata is likely used for SEO and page information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb Engine\",\n\tdescription: \"An open-source, backend server that reads, writes, and deploys contracts at production scale.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Accounts of a Signer\nDESCRIPTION: Implements the getAccountsOfSigner function, which returns all accounts that the given address is a signer of.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWalletFactory/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getAccountsOfSigner(address signer) external view returns (address[] memory accounts) {\n    return accountsOfSigner[signer].values();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Extension for USDC Contract on Optimism\nDESCRIPTION: This example demonstrates generating an extension for a USDC contract on the Optimism network. It creates a TypeScript file with precompiled, type-safe event and function definitions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/generate/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb generate 10/0x0b2c639c533813f4aa9d7837caf62653d097ff85\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Settings\nDESCRIPTION: Final implementation of the getModuleConfig function to set up callback functions, fallback functions, required interfaces, and installation callback.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-module-contract/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getModuleConfig()\n    public\n    pure\n    override\n    returns (ModuleConfig memory config)\n{\n    config.callbackFunctions = new CallbackFunction[](1);\n    config.fallbackFunctions = new FallbackFunction[](2);\n\n    config.callbackFunctions[0] = CallbackFunction(\n        this.beforeIncrement.selector\n    );\n\n    config.fallbackFunctions[0] = FallbackFunction({\n        selector: this.getStep.selector,\n        permissionBits: 0\n    });\n\n    config.fallbackFunctions[1] = FallbackFunction({\n        selector: this.setStep.selector,\n        permissionBits: Role._MANAGER_ROLE\n    });\n\n    config.requiredInterfaces = new bytes4[](1);\n    config.requiredInterfaces[0] = 0x00000001;\n\n    config.registerInstallationCallback = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information with EcosystemWallet.GetUserDetails in C#\nDESCRIPTION: A code snippet demonstrating how to call the GetUserDetails method on an ecosystemWallet instance to retrieve information about the connected user wallet and its linked accounts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/getuserdetails/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await ecosystemWallet.GetUserDetails();\n```\n\n----------------------------------------\n\nTITLE: Creating Packs Function Signature in Solidity\nDESCRIPTION: This function signature outlines the parameters required to create packs, including token contents, reward units, and distribution settings.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/pack/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createPack(\n    Token[] calldata contents,\n    uint256[] calldata numOfRewardUnits,\n    string calldata packUri,\n    uint128 openStartTimestamp,\n    uint128 amountDistributedPerOpen,\n    address recipient\n) external\n```\n\n----------------------------------------\n\nTITLE: Overriding burnBatch Function in ERC1155Drop Contract\nDESCRIPTION: This function allows an owner or approved operator to burn multiple NFTs of different tokenIds in a single transaction. It performs checks for authorization and token ownership.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/drop/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burnBatch(\n    address _owner,\n    uint256[] memory _tokenIds,\n    uint256[] memory _amounts\n) external virtual {\n    address caller = msg.sender;\n\n    require(caller == _owner || isApprovedForAll[_owner][caller], \"Unapproved caller\");\n    require(_tokenIds.length == _amounts.length, \"Length mismatch\");\n\n    for (uint256 i = 0; i < _tokenIds.length; i += 1) {\n        require(balanceOf[_owner][_tokenIds[i]] >= _amounts[i], \"Not enough tokens owned\");\n    }\n\n    _burnBatch(_owner, _tokenIds, _amounts);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Ecosystem Wallet in TypeScript\nDESCRIPTION: Creates an ecosystem wallet instance using the ecosystemWallet function with an ecosystem ID. The wallet can be used across multiple applications within the same ecosystem.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/ecosystem-wallet/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ecosystemWallet } from \"thirdweb/wallets\";\n\nconst wallet = ecosystemWallet(\"ecosystem.your-ecosystem-id\");\n```\n\n----------------------------------------\n\nTITLE: Implementing burn Function in ERC1155Base\nDESCRIPTION: This function allows an owner or approved operator to burn NFTs of a given tokenId.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/base/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(\n    address _owner,\n    uint256 _tokenId,\n    uint256 _amount\n) external virtual {\n    address caller = msg.sender;\n\n    require(caller == _owner || isApprovedForAll[_owner][caller], \"Unapproved caller\");\n    require(balanceOf[_owner][_tokenId] >= _amount, \"Not enough tokens owned\");\n\n    _burn(_owner, _tokenId, _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Multichain Query Response Format Example\nDESCRIPTION: Shows the JSON structure returned by multichain queries, including metadata with chain IDs, pagination information, and per-item chain identification.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/multichain-queries/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"chain_ids\": [1, 137],     // List of queried chain IDs\n    \"total_items\": 113,        // Total count across all chains\n    \"limit_per_chain\": 100,    // Per-chain limit derived from the request\n    \"page\": 0,\n    \"limit\": 200,\n    \"total_pages\": 1\n  },\n  \"data\": [\n    {\n      \"chain_id\": 1,           // Each item includes its chain ID\n      \"block_number\": \"17859301\",\n      \"transaction_hash\": \"0x123...\",\n      // ... other fields\n    },\n    {\n      \"chain_id\": 137,\n      \"block_number\": \"48392021\",\n      // ... other fields\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multicall Contract\nDESCRIPTION: Example implementation showing how to inherit from the Multicall extension in a custom smart contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Multicall/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/Multicall.sol\";\n\ncontract MyContract is Multicall { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing AuctionParameters Struct for English Auctions in Solidity\nDESCRIPTION: The AuctionParameters struct defines the configuration for creating an English auction, containing parameters like asset contract address, token ID, quantity, currency, bid amounts, time buffers, and timestamps.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nstruct AuctionParameters {\n  address assetContract;\n  uint256 tokenId;\n  uint256 quantity;\n  address currency;\n  uint256 minimumBidAmount;\n  uint256 buyoutBidAmount;\n  uint64 timeBufferInSeconds;\n  uint64 bidBufferBps;\n  uint64 startTimestamp;\n  uint64 endTimestamp;\n}\n\nfunction createAuction(AuctionParameters memory params) external returns (uint256 auctionId);\n```\n\n----------------------------------------\n\nTITLE: Updating Contract Interaction in Unity SDK\nDESCRIPTION: Shows the changes in contract interaction methods from v4 to v5. In v5, specific contract interfaces are handled via ThirdwebContract with more flexible extension methods.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/migration-guide/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Unity v4\nvar balance = await contract.ERC1155.Balance(..);\n\n// Unity v5\nvar balance = await contract.ERC1155_Balance(..);\n\n// contract.Prepare, contract.Read, contract.Write, etc. are available and take in a chain id\n```\n\n----------------------------------------\n\nTITLE: Example Event Webhook Payload in JSON\nDESCRIPTION: Sample JSON response for an event webhook showing blockchain event data including chain information, transaction details, and decoded event parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/webhooks/payload/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": 1743164112,\n  \"topic\": \"v1.events\",\n  \"data\": [\n    {\n      \"data\": {\n        \"chain_id\": \"1\",\n        \"block_number\": 22140383,\n        \"block_hash\": \"0x85bd4045d947c34b6b568fc84c7550c0efa741f71c834bbb3d3950e9da27842e\",\n        \"block_timestamp\": 1743104207,\n        \"transaction_hash\": \"0x460ced3718d0e09145eae8b63fd985dc366adfc4523c791116f24dc051e8363a\",\n        \"transaction_index\": 93,\n        \"log_index\": 230,\n        \"address\": \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n        \"data\": \"0x000000000000000000000000000000000000000000000000009440c61e928cca\",\n        \"topics\": [\n          \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n          \"0x000000000000000000000000d360131b77ead72f1f23fb185b4896fe01dc8cb5\",\n          \"0x00000000000000000000000085cd07ea01423b1e937929b44e4ad8c40bbb5e71\"\n        ],\n        \"decoded\": {\n          \"name\": \"Transfer\",\n          \"indexed_params\": {\n            \"from\": \"0xd360131b77ead72f1f23fb185b4896fe01dc8cb5\",\n            \"to\": \"0x85cd07ea01423b1e937929b44e4ad8c40bbb5e71\"\n          },\n          \"non_indexed_params\": {\n            \"amount\": \"41729516213800138\"\n          }\n        }\n      },\n      \"status\": \"new\",\n      \"type\": \"event\",\n      \"id\": \"76b81da4ec46486f0a6e325596f506cad13ebd629520aded104efcaa37a419d5\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: OTP Authentication Flow Example\nDESCRIPTION: Example of sending and verifying an OTP (One-Time Password) to authenticate a user with EcosystemWallet using email or phone number.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/ecosystem-wallet/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait wallet.SendOTP();\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google in React\nDESCRIPTION: This code demonstrates how to use the useConnect hook to handle authentication and connection with Google in a React application using thirdweb's in-app wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/build-your-own-ui/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { useConnect } from \"thirdweb/react\";\n\nconst { connect } = useConnect();\n\nconst handleLogin = async () => {\n\tawait connect(async () => {\n\t\tconst wallet = inAppWallet();\n\t\tawait wallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"google\",\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding URI Function in ERC1155Base\nDESCRIPTION: This snippet shows the implementation of the uri function in ERC1155Base, which returns the metadata URI for a given tokenId.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/base/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n/// @notice Returns the metadata URI for the given tokenId.\nfunction uri(uint256 _tokenId) public view virtual override returns (string memory) {\n    string memory uriForToken = _uri[_tokenId];\n    if (bytes(uriForToken).length > 0) {\n        return uriForToken;\n    }\n\n    string memory batchUri = _getBaseURI(_tokenId);\n    return string(abi.encodePacked(batchUri, _tokenId.toString()));\n}\n```\n\n----------------------------------------\n\nTITLE: React Provider Import Comparison\nDESCRIPTION: Shows the difference between importing ThirdwebProvider in v4 vs v5\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/cheatsheet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ThirdwebProvider} from @thirdweb-dev/react\n// vs\nimport { ThirdwebProvider } from \"thirdweb/react\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom NFT Contract Inheriting from ERC1155Base\nDESCRIPTION: This example demonstrates how to create a custom NFT contract that inherits from the ERC1155Base contract, including the constructor implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/base/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC1155Base.sol\";\n\ncontract MyNFT is ERC1155Base {\n\t  constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    )\n        ERC1155Base(\n            _defaultAdmin,\n            _name,\n            _symbol,\n            _royaltyRecipient,\n            _royaltyBps\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Login Button in Next.js Home Page\nDESCRIPTION: Simple implementation of a custom login button in the home page of a Next.js application. This example shows how to incorporate the custom authentication component into a page component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/next/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// app/page.tsx\nimport LoginButton from \"@/components/LoginButton\";\n\nconst Home = () => {\n\treturn <LoginButton />;\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Using thirdweb in-app wallet connector in a React component\nDESCRIPTION: Example of how to trigger the in-app wallet connection in a React component using wagmi's useConnect hook. This allows users to connect with various authentication strategies like Google.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/adapters/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { connect, connectors } = useConnect();\n\nconst onClick = () => {\n  // grab the connector\n  const inAppWallet = connectors.find((x) => x.id === \"in-app-wallet\");\n  // call connect with the desired strategy\n  connect({\n    connector: inAppWallet,\n    strategy: \"google\",\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SIWE in EcosystemWallet\nDESCRIPTION: Initiates a login process using Sign-In With Ethereum (SIWE) on an EcosystemWallet instance, prompting the external wallet to sign a message instantly. This provides a simple way to authenticate users with their Ethereum wallets.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/ecosystem-wallet/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar address = await siweWallet.LoginWithSiwe(chainId: 1);\n```\n\n----------------------------------------\n\nTITLE: Creating PrivateKeyWallet in C#\nDESCRIPTION: Basic initialization of a PrivateKeyWallet using a private key. Requires a ThirdwebClient instance and a private key in hexadecimal format.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/private-key/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar wallet = await PrivateKeyWallet.Create(client, \"yourPrivateKeyHex\");\n```\n\n----------------------------------------\n\nTITLE: Price Collection Implementation\nDESCRIPTION: Internal function to handle price collection and distribution during token minting. Supports both native currency and ERC20 tokens as payment methods.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/signature-mint/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n/// @dev Collects and distributes the primary sale value of tokens being claimed.\nfunction _collectPriceOnClaim(\n    address _primarySaleRecipient,\n    uint256 _quantityToClaim,\n    address _currency,\n    uint256 _pricePerToken\n) internal virtual {\n    if (_pricePerToken == 0) {\n        return;\n    }\n\n    uint256 totalPrice = (_quantityToClaim * _pricePerToken) / 1 ether;\n    require(totalPrice > 0, \"quantity too low\");\n\n    if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n        require(msg.value == totalPrice, \"Must send total price.\");\n    }\n\n    address saleRecipient = _primarySaleRecipient == address(0) ? primarySaleRecipient() : _primarySaleRecipient;\n    CurrencyTransferLib.transferCurrency(_currency, msg.sender, saleRecipient, totalPrice);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying JSON Schema Response Format in cURL Request\nDESCRIPTION: This example shows how to specify a custom JSON schema response format when making a request to the thirdweb API using cURL. It demonstrates setting the 'response_format' parameter to request a specific structure for the API response.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/key-concepts/response-handling/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ncurl -X POST https://nebula-api.thirdweb.com/chat \\\n-H \"Content-Type: application/json\" \\\n-H \"x-secret-key: ....\" \\\n-d '{\n  \"message\": \"what is the balance of eimanabdel.eth on contract 0xddC761FEb956Caf62dfa1c8b42e9f33Df424715A on sepolia\",\n  \"stream\": false,\n  \"response_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ens_name\": {\n          \"type\": \"string\",\n          \"description\": \"The ENS name being queried\"\n        },\n        \"balance\": {\n          \"type\": \"integer\",\n          \"description\": \"The balance of the address on the specified contract\"\n        }\n      },\n      \"required\": [\"ens_name\", \"balance\"]\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Estimating Legacy Gas Price in C#\nDESCRIPTION: This method estimates the gas price for a transaction with an optional bump to account for network conditions. The withBump parameter defaults to true if not specified.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/static/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nBigInteger estimatedGasPrice = await ThirdwebTransaction.EstimateGasPrice(transaction, withBump);\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb SDK with pnpm\nDESCRIPTION: This command installs the thirdweb SDK using pnpm package manager, which is a fast, disk space efficient alternative to npm.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/tools/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @thirdweb-dev/sdk ethers@^5\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local WebGL Server for Social Login Testing\nDESCRIPTION: A simple Express.js server script for testing In-App or Ecosystem Wallet Social Login locally with WebGL builds. The script sets the necessary Cross-Origin-Opener-Policy header to same-origin-allow-popups to enable popup windows for authentication flows.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/build-instructions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// YourWebGLOutputFolder/server.js\nconst express = require(\"express\");\nconst app = express();\nconst port = 8000;\n\napp.use((req, res, next) => {\n\tres.header(\"Cross-Origin-Opener-Policy\", \"same-origin-allow-popups\");\n\tnext();\n});\n\napp.use(express.static(\".\"));\napp.listen(port, () =>\n\tconsole.log(`Server running on http://localhost:${port}`),\n);\n\n// run it with `node server.js`\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration for Nebula Documentation in JavaScript\nDESCRIPTION: Sets up the metadata for the Nebula API documentation page using the createMetadata function from the @doc package. This configures the page title, description, and icon for the API reference documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"API Reference\",\n\t\ticon: \"nebula\",\n\t},\n\ttitle: \"thirdweb Nebula API Reference\",\n\tdescription:\n\t\t\"Explore the thirdweb Nebula API reference to unlock the most powerful AI to interact with the blockchain and start building AI powered web3 apps.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for Backend Wallets Documentation\nDESCRIPTION: Sets up metadata for the backend wallets documentation page, defining the title and description that will be used for SEO and page rendering.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/backend-wallets/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, Details } from \"@doc\";\nimport { Callout } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Backend Wallets | thirdweb Engine\",\n\tdescription:\n\t\t\"Engine performs blockchain actions using backend wallets that you own and manage.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Account in React with thirdweb\nDESCRIPTION: This React hook example shows how to retrieve the active account using the useActiveAccount hook from the thirdweb/react module.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/interact-with-wallets/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useActiveAccount } from \"thirdweb/react\";\n\nconst account = useActiveAccount();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Linked Accounts in EcosystemWallet\nDESCRIPTION: Gets a list of all authentication methods linked to a user's account in EcosystemWallet. This allows applications to display and manage all of a user's authentication options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/ecosystem-wallet/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nList<LinkedAccount> linkedAccounts = await ecosystemWalletMain.GetLinkedAccounts();\n```\n\n----------------------------------------\n\nTITLE: Implementing Permissions Extension in Solidity Smart Contract\nDESCRIPTION: This example demonstrates how to inherit from the Permissions extension and use its functionality in a custom smart contract. It includes role creation, constructor setup, and a function with role-based access control.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Permissions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/Permissions.sol\";\n\ncontract MyContract is Permissions {\n    // Any `bytes32` value is a valid role. You can create roles by defining them like this.\n    bytes32 public constant NUMBER_ROLE = keccak256(\"NUMBER_ROLE\");\n\n    // See comments for `setNumber`, below.\n    uint256 public number;\n\n    /**\n     *  The `Permissions` contract makes an already defined role available: the `DEFAULT_ADMIN_ROLE`.\n     *\n     *  As an EXAMPLE, we grant the deployer of the contract this admin role.\n     */\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /**\n     *  EXAMPLE: here we have a function that we want to restrict only to holders of `NUMBER_ROLE`.\n     *\n     *  To accomplish this, we use the `onlyRole` modifier made available by `Permissions`, and\n     *  pass it `NUMBER_ROLE` as an argument.\n     */\n    function setNumber(uint256 _newNumber) public onlyRole(NUMBER_ROLE) {\n        number = _newNumber;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing ThirdwebProvider for v4 and v5 in React\nDESCRIPTION: Shows how to use both v4 and v5 ThirdwebProvider components together in a React application for progressive migration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/migrate/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider} from \"@thirdweb-dev/react\" }\nimport { ThirdwebProvider as ThirdwebProviderV5 } from \"thirdweb/react\"\n\n<ThirdwebProvider activeChain={...} clientId={...}>\n  <ThirdwebProviderV5>\n     ...\n  </ThirdwebProviderV5>\n</V4TWProvider>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Admin Addresses for Smart Wallet in C#\nDESCRIPTION: This code snippet demonstrates how to use the GetAllAdmins method of the SmartWallet class to retrieve a list of all admin addresses for a smart wallet. The method doesn't require any parameters and returns a List<string> containing the admin addresses.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/getalladmins/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Get all admin addresses\nList<string> admins = await smartWallet.GetAllAdmins();\n```\n\n----------------------------------------\n\nTITLE: Setting Localization in ConnectButton\nDESCRIPTION: This snippet shows how to change the language of the ConnectButton component by setting the locale prop to one of the supported locale codes such as en_US, es_ES, de_DE, etc.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/sign-in/customization/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\n\nfunction Example() {\n\treturn (\n\t\t<div>\n\t\t\t<ConnectButton locale={\"en_US\"} />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Burn Function Implementation\nDESCRIPTION: Implementation of burn function that allows token holders to burn their tokens. Includes balance validation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/vote/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n *  @notice          Lets an owner a given amount of their tokens.\n *  @dev             Caller should own the `_amount` of tokens.\n *\n *  @param _amount   The number of tokens to burn.\n */\nfunction burn(uint256 _amount) external virtual {\n    require(balanceOf(_msgSender()) >= _amount, \"not enough balance\");\n    _burn(msg.sender, _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete EcosystemWallet Example with OAuth Authentication\nDESCRIPTION: Complete example of creating an EcosystemWallet with Google OAuth authentication and handling the login flow.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/ecosystem-wallet/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Create EcosystemWallet wallet as signer to unlock web2 auth\nvar ecosystemWallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", authProvider: AuthProvider.Google);\n\n// Resume session (if `EcosystemWallet` wallet was not logged in)\nif (!await ecosystemWallet.IsConnected())\n{\n    try {\n        var address = await ecosystemWallet.LoginWithOauth(\n            isMobile: false,\n            browserOpenAction: (url) =>\n            {\n                var psi = new ProcessStartInfo { FileName = url, UseShellExecute = true };\n                _ = Process.Start(psi);\n            },\n        );\n        Console.WriteLine($\"OAuth login successful. EcosystemWallet address: {address}\");\n    } catch (Exception ex) {\n        Console.WriteLine($\"OAuth login failed: {ex.Message}\");\n        return;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing batchMintTo Function in ERC1155Base\nDESCRIPTION: This function allows an authorized address to mint multiple NEW NFTs at once to a recipient. It handles minting new NFTs or additional supply of existing NFTs in batch.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/base/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction batchMintTo(\n    address _to,\n    uint256[] memory _tokenIds,\n    uint256[] memory _amounts,\n    string memory _baseURI\n) public virtual {\n    require(_canMint(), \"Not authorized to mint.\");\n    require(_amounts.length > 0, \"Minting zero tokens.\");\n    require(_tokenIds.length == _amounts.length, \"Length mismatch.\");\n\n    uint256 nextIdToMint = nextTokenIdToMint();\n    uint256 startNextIdToMint = nextIdToMint;\n\n    uint256 numOfNewNFTs;\n\n    for (uint256 i = 0; i < _tokenIds.length; i += 1) {\n        if (_tokenIds[i] == type(uint256).max) {\n            _tokenIds[i] = nextIdToMint;\n\n            nextIdToMint += 1;\n            numOfNewNFTs += 1;\n        } else {\n            require(_tokenIds[i] < nextIdToMint, \"invalid id\");\n        }\n    }\n\n    if (numOfNewNFTs > 0) {\n        _batchMintMetadata(startNextIdToMint, numOfNewNFTs, _baseURI);\n    }\n\n    nextTokenIdToMint_ = nextIdToMint;\n    _mintBatch(_to, _tokenIds, _amounts, \"\");\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DelayedReveal Extension in Solidity\nDESCRIPTION: Shows how to import the DelayedReveal extension from thirdweb contracts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DelayedReveal/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/DelayedReveal.sol\";\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Tokens Function in Multiwrap Solidity Contract\nDESCRIPTION: This function allows the owner or approved address to unwrap a wrapped NFT, burning it and returning the underlying tokens to a specified recipient.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/multiwrap/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction unwrap(\n    uint256 tokenId,\n    address recipient\n) external;\n```\n\n----------------------------------------\n\nTITLE: MintTo Function Implementation\nDESCRIPTION: Implementation of mintTo function that allows authorized addresses to mint tokens to a recipient. Includes authorization and amount validation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/vote/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n *  @notice          Lets an authorized address mint tokens to a recipient.\n *  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint tokens.\n *\n *  @param _to       The recipient of the tokens to mint.\n *  @param _amount   Quantity of tokens to mint.\n */\nfunction mintTo(address _to, uint256 _amount) public virtual {\n    require(_canMint(), \"Not authorized to mint.\");\n    require(_amount != 0, \"Minting zero tokens.\");\n\n    _mint(_to, _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Custom Auth Server Locally\nDESCRIPTION: Bash command to start the Node.js server locally for testing the custom auth implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-auth-server/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Checking for Buy with Crypto Step in TypeScript\nDESCRIPTION: Shows how to check if a two-step process (onramp to intermediary token, then swap to destination token) is required using the isSwapRequiredPostOnramp function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/build-a-custom-experience/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { isSwapRequiredPostOnramp } from \"thirdweb/pay\";\n\nconst hasTwoSteps = isSwapRequiredPostOnramp(quote);\n\nif (hasTwoSteps) {\n\t// display the two steps to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Ecosystem Wallet in thirdweb\nDESCRIPTION: Creates an ecosystem wallet instance using the ecosystemWallet function by providing an ecosystem ID. This is the main difference compared to standard in-app wallets.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/ecosystem-wallet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ecosystemWallet } from \"thirdweb/wallets\";\n\nconst wallet = ecosystemWallet(\"ecosystem.your-ecosystem-id\");\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Payable Contract Methods with thirdweb Engine\nDESCRIPTION: JSON request body showing how to send native tokens (like ETH) to a payable contract method. The 'txOverrides.value' property specifies the amount of native tokens to send with the transaction in wei.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/contracts/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functionName\": \"...\",\n  \"args\": [ ... ],\n  \"txOverrides\": {\n    \"value\": \"1000000000000000\", // 0.001 ETH in wei\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet Import Comparison\nDESCRIPTION: Shows the difference in wallet import syntax and initialization between versions\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/cheatsheet/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetaMaskWallet } from \"@thirdweb-dev/wallets\"\n// vs\nimport { createWallet } from \"thirdweb/wallets\"\n```\n\n----------------------------------------\n\nTITLE: Getting Contract Instance in C#\nDESCRIPTION: Retrieves a ThirdwebContract instance for interacting with a smart contract, including reading contract data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/thirdwebmanager/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar contract = await ThirdwebManager.Instance.GetContract(\"contract-address\", chainId, \"optional-contract-abi\");\nvar result = await contract.Read<string>(\"name\");\n```\n\n----------------------------------------\n\nTITLE: Google Authentication Implementation - TypeScript\nDESCRIPTION: Implementation of Google authentication using the useConnect hook.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/get-started/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { useConnect } from \"thirdweb/react\";\n\nconst { connect } = useConnect();\n\nconst handleLogin = async () => {\n\tawait connect(async () => {\n\t\tconst wallet = inAppWallet();\n\t\tawait wallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"google\",\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Mechanism with Idempotency Key in TypeScript\nDESCRIPTION: This code snippet demonstrates how to safely retry a request up to three times using an idempotency key. It sends a POST request to thirdweb Engine with necessary headers and handles the response, ensuring that duplicate transactions are prevented.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/preventing-duplicate-transactions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst idempotencyKey = \"27R82mBV\"; // Some unique identifier from your app\nconst numRetries = 3;\nlet queueId: string | undefined;\n\nfor (let i = 0; i < numRetries; i++) {\n\tconst resp = await fetch(url, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${process.env.THIRDWEB_ACCESS_TOKEN}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\"x-backend-wallet-address\": \"0x4Ff9aa707AE1eAeb40E581DF2cf4e14AffcC553d\",\n\t\t\t\"x-idempotency-key\": idempotencyKey,\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tto: \"0x4Ff9aa707AE1eAeb40E581DF2cf4e14AffcC553d\",\n\t\t\tamount: \"42000000000\",\n\t\t}),\n\t});\n\n\t// If 2xx, break. Else try again.\n\tif (resp.ok) {\n\t\tqueueId = (await resp.json()).result;\n\t\tbreak;\n\t}\n}\n\nif (queueId) {\n\tconsole.log(\"Transaction submitted:\", queueId);\n} else {\n\tconsole.error(\"Unable to submit transaction.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Wallet Information\nDESCRIPTION: Reading connected wallet information using hooks to display address and balance\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/getting-started/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useActiveAccount, useWalletBalance } from \"thirdweb/react\";\n\nexport default function App() {\n\tconst account = useActiveAccount();\n\tconst { data: balance, isLoading } = useWalletBalance({\n\t\tclient,\n\t\tchain,\n\t\taddress: account.address,\n\t});\n\n\treturn <div>\n        <p>Wallet address: {account.address}</p>\n        <p>Wallet balance: {balance?.displayValue} {balance?.symbol}</p>\n    </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for React App\nDESCRIPTION: Required environment variables for the client application, including thirdweb client ID and the backend authentication API URL.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Get your client id from the thirdweb dashboard: https://thirdweb.com/create-api-key\nTHIRDWEB_CLIENT_ID=\n# The url of your backend (Express) server for the frontend to interact with\nAUTH_API=\n```\n\n----------------------------------------\n\nTITLE: Switching Networks with IThirdwebWallet in C#\nDESCRIPTION: This code demonstrates how to use the SwitchNetwork method to change the active blockchain network of a wallet. The method requires a chainId parameter that specifies the target blockchain network.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/switchnetwork/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait wallet.SwitchNetwork(chainId);\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Status Check Route\nDESCRIPTION: Creates a GET route at '/isLoggedIn' to check if the user is currently logged in. It verifies the JWT token stored in the cookie to determine the login status.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/isLoggedIn\", async (req, res) => {\n\tconst jwt = req.cookies?.jwt;\n\n\tif (!jwt) {\n\t\treturn res.send(false);\n\t}\n\n\tconst authResult = await thirdwebAuth.verifyJWT({ jwt });\n\n\tif (!authResult.valid) {\n\t\treturn res.send(false);\n\t}\n\n\treturn res.send(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Limit in C#\nDESCRIPTION: Sets the gas limit for the transaction using SetGasLimit method. Takes a BigInteger as input.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/instance/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction transaction = transaction.SetGasLimit(21000);\n```\n\n----------------------------------------\n\nTITLE: Chain Metadata Retrieval in C#\nDESCRIPTION: Fetches blockchain metadata for a specified chain ID using the Thirdweb client.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar chainData = await Utils.GetChainMetadata (client, chainId);\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Engine Security Documentation in JSX\nDESCRIPTION: This code snippet uses the createMetadata function to define the title and description for the thirdweb Engine Security documentation page. The metadata will be used for page SEO and display purposes.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/security/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Security | thirdweb Engine\",\n\tdescription:\n\t\t\"thirdweb Engine is a self-hosted, open-source, and secure wallet solution for your users.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Metadata and GithubButtonLink in TypeScript\nDESCRIPTION: This snippet imports the createMetadata function and GithubButtonLink component from the @doc module. It's used to set up metadata for the documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-721/minting/claimableERC721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Importing Thirdweb Documentation Components\nDESCRIPTION: Imports for documentation components and utility functions to create metadata for Unreal Engine documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/cpp/thirdweb/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Callout } from \"@doc\";\nimport { createUnrealEngineMetadata } from \"../../util\";\n\nexport const metadata = createUnrealEngineMetadata({\n    title: \"Thirdweb Namespace\",\n    description: \"The Core Rust Wrapper\",\n});\n```\n\n----------------------------------------\n\nTITLE: CanLazyMint Function Signature in Solidity\nDESCRIPTION: This snippet shows the function signature for the _canLazyMint function, which determines whether NFTs can be lazy minted in the given execution context.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/LazyMint/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canLazyMint() internal view virtual returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Implementing PermissionsEnumerable Contract\nDESCRIPTION: Example implementation of a smart contract that inherits from PermissionsEnumerable, demonstrating role-based access control with a custom NUMBER_ROLE and restricted function access.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PermissionsEnumerable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/PermissionsEnumerable.sol\";\n\ncontract MyContract is PermissionsEnumerable {\n    // Any `bytes32` value is a valid role. You can create roles by defining them like this.\n    bytes32 public constant NUMBER_ROLE = keccak256(\"NUMBER_ROLE\");\n\n    // See comments for `setNumber`, below.\n    uint256 public number;\n\n    /**\n     *  The `PermissionsEnumerable` contract makes an already defined role available: the `DEFAULT_ADMIN_ROLE`.\n     *\n     *  As an EXAMPLE, we grant the deployer of the contract this admin role.\n     */\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /**\n     *  EXAMPLE: here we have a function that we want to restrict only to holders of `NUMBER_ROLE`.\n     *\n     *  To accomplish this, we use the `onlyRole` modifier made available by `PermissionsEnumerable`, and\n     *  pass it `NUMBER_ROLE` as an argument.\n     */\n    function setNumber(uint256 _newNumber) public onlyRole(NUMBER_ROLE) {\n        number = _newNumber;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding mintWithSignature Function in ERC721SignatureMint\nDESCRIPTION: Shows the implementation of the mintWithSignature function, which can be overridden to add custom logic for minting tokens with a signature.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/signature-mint/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n*  @notice           Mints tokens according to the provided mint request.\n*\n*  @param _req       The payload / mint request.\n*  @param _signature The signature produced by an account signing the mint request.\n*/\nfunction mintWithSignature(MintRequest calldata _req, bytes calldata _signature)\n    external\n    payable\n    virtual\n    override\n    returns (address signer)\n{\n    require(_req.quantity == 1, \"quantity must be 1\");\n\n    uint256 tokenIdToMint = nextTokenIdToMint();\n\n    // Verify and process payload.\n    signer = _processRequest(_req, _signature);\n\n    address receiver = _req.to;\n\n    // Collect price\n    _collectPriceOnClaim(_req.primarySaleRecipient, _req.quantity, _req.currency, _req.pricePerToken);\n\n    // Set royalties, if applicable.\n    if (_req.royaltyRecipient != address(0) && _req.royaltyBps != 0) {\n        _setupRoyaltyInfoForToken(tokenIdToMint, _req.royaltyRecipient, _req.royaltyBps);\n    }\n\n    // Mint tokens.\n    _setTokenURI(tokenIdToMint, _req.uri);\n    _safeMint(receiver, _req.quantity);\n\n    emit TokensMintedWithSignature(signer, receiver, tokenIdToMint, _req);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Admin to a Smart Wallet in C#\nDESCRIPTION: This code demonstrates how to add a new admin to a connected Smart Wallet. The method accepts a hexadecimal string representing the wallet address to grant admin access to, and returns a transaction receipt object.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/addadmin/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar receipt = await SmartWallet.AddAdmin(\"0xNewAdminAddress\");\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme to ConnectButton\nDESCRIPTION: This snippet demonstrates how to apply either a built-in theme (light/dark) or a custom theme configuration to the ConnectButton component using the theme prop.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/sign-in/customization/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\n\nfunction Example() {\n\treturn (\n\t\t<div>\n\t\t\t<ConnectButton theme={yourThemeConfig} />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _beforeClaim Function in ERC721Drop\nDESCRIPTION: Internal function that runs before every claim operation. It checks if there are enough minted tokens to fulfill the claim.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/drop/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeClaim(\n    address,\n    uint256 _quantity,\n    address,\n    uint256,\n    AllowlistProof calldata,\n    bytes memory\n) internal view virtual override {\n    if (_currentIndex + _quantity > nextTokenIdToLazyMint) {\n        revert(\"Not enough minted tokens\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Custom Auth (OIDC Compatible) in EcosystemWallet for Unity\nDESCRIPTION: Demonstrates authentication using a JWT token with an OIDC compatible custom authentication system.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/ecosystem-wallet/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar ecosystemWalletOptions = new EcosystemWalletOptions(\n    ecosystemId: \"ecosystem.your-ecosystem\", \n    authprovider: AuthProvider.JWT, \n    jwtOrPayload: \"myjwt\"\n);\nvar options = new WalletOptions(\n    provider: WalletProvider.EcosystemWallet, \n    chainId: 1, \n    ecosystemWalletOptions: ecosystemWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Disabling Crypto Payment Method\nDESCRIPTION: This code shows how to disable the cryptocurrency payment option in the Universal Bridge ConnectButton, restricting users to fiat payment methods only.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/connectbutton/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton\n\tclient={client}\n\tdetailsModal={{\n\t\tpayOptions: {\n\t\t\tbuyWithCrypto: false,\n\t\t},\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb Dependencies with Basic Command\nDESCRIPTION: Basic command to install thirdweb dependencies into your project. If no path is specified, the current directory will be used.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/install/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb install\n```\n\n----------------------------------------\n\nTITLE: Getting Valid Auctions by ID Range\nDESCRIPTION: The getAllValidAuctions function returns all valid auctions between the start and end IDs, where a valid auction is active and the creator still owns and has approved the marketplace to transfer the NFTs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getAllValidAuctions(uint256 startId, uint256 endId) external view returns (Auction[] memory auctions);\n```\n\n----------------------------------------\n\nTITLE: Querying ERC-20 Token Balances - YAML API Endpoint\nDESCRIPTION: API endpoint for retrieving ERC-20 token balances for a specific wallet address. Requires client ID and owner address as parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/blueprints/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nGET /v1/{clientId}/tokens/erc20/:ownerAddress\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"tokenAddress\": \"…\",\n    \"balance\": \"…\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Time Filters Interface for Insight API\nDESCRIPTION: Defines the interface for time-related filters that can be used in thirdweb Insight API requests, including various timestamp comparison operators.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TimeFilters {\n\tfilter_block_timestamp?: number; // Example: 1715222400\n\tfilter_block_timestamp_gte?: number; // Example: 1715222400\n\tfilter_block_timestamp_gt?: number; // Example: 1715222400\n\tfilter_block_timestamp_lte?: number; // Example: 1715222400\n\tfilter_block_timestamp_lt?: number; // Example: 1715222400\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Thirdweb CLI Logout Command\nDESCRIPTION: Command to log out of the thirdweb CLI and revoke current device access from the associated thirdweb account. This will remove local authentication credentials and invalidate the current session.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/logout/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb logout\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SIWE (Sign-In With Ethereum) in EcosystemWallet for Unity\nDESCRIPTION: Shows how to use an external wallet to sign a message and authenticate with EcosystemWallet using the SIWE protocol.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/ecosystem-wallet/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar ecosystemWalletOptions = new EcosystemWalletOptions(\n    ecosystemId: \"ecosystem.your-ecosystem\", \n    authprovider: AuthProvider.Siwe, \n    siweSigner: anyExternalWallet\n);\nvar options = new WalletOptions(\n    provider: WalletProvider.EcosystemWallet, \n    chainId: 1,\n    ecosystemWalletOptions: ecosystemWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Preparing Sell Transaction for Tokens in C#\nDESCRIPTION: Shows how to prepare a set of executable transactions for selling tokens using the Sell_Prepare method. This example prepares a transaction to sell ETH on zkSync for USDC on Ethereum.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/universal-bridge/quickstart/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar preparedSell = await bridge.Sell_Prepare(\n    originChainId: 324,\n    originTokenAddress: Constants.NATIVE_TOKEN_ADDRESS, // ETH on zkSync\n    destinationChainId: 1,\n    destinationTokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC on Ethereum\n    sellAmountWei: BigInteger.Parse(\"0.1\".ToWei()),\n    sender: await Utils.GetAddressFromENS(client, \"vitalik.eth\"),\n    receiver: await myWallet.GetAddress()\n);\nConsole.WriteLine($\"Prepared Sell contains {preparedSell.Transactions.Count} transaction(s)!\");\n```\n\n----------------------------------------\n\nTITLE: Checking Wallet Connection Status in C#\nDESCRIPTION: This code snippet demonstrates how to use the IsConnected method to check if a wallet is currently connected to the blockchain network. It returns a boolean value indicating the connection status.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/isconnected/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbool isConnected = await wallet.IsConnected();\n```\n\n----------------------------------------\n\nTITLE: Customizing Supported Tokens in PayEmbed Component\nDESCRIPTION: This snippet demonstrates how to override default tokens for Ethereum mainnet by providing custom token configurations. This allows you to control which tokens users can select on a specific chain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/payembed/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<PayEmbed\n\tclient={client}\n\tpayOptions={{\n\t\tsupportedTokens: {\n\t\t\t\"1\": [\n\t\t\t\t{\n\t\t\t\t\taddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n\t\t\t\t\tname: \"USD Coin\",\n\t\t\t\t\tsymbol: \"USDC\",\n\t\t\t\t\ticon: usdcIcon,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Ownable Extension in Solidity\nDESCRIPTION: Shows how to import the Ownable extension from thirdweb contracts\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Ownable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/Ownable.sol\";\n```\n\n----------------------------------------\n\nTITLE: Connecting InAppWallet with Siwe Authentication in Unity\nDESCRIPTION: Shows how to connect a wallet using Sign-In with Ethereum (Siwe) authentication. The code sets up InAppWalletOptions with the Siwe auth provider and an external wallet signer to authenticate the user.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/in-app-wallet/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar inAppWalletOptions = new InAppWalletOptions(authprovider: AuthProvider.Siwe, siweSigner: sdkSupportedExternalWallet);\nvar options = new WalletOptions(\n    provider: WalletProvider.InAppWallet, \n    chainId: 1, \n    inAppWalletOptions: inAppWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Contract Call with ABI Snippet in TypeScript\nDESCRIPTION: Shows how to prepare a contract call using a specific ABI snippet for a single method instead of the full contract ABI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/prepare/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prepareContractCall, toWei } from \"thirdweb\";\n\nconst tx = prepareContractCall({\n\tcontract,\n\t// Pass a snippet of the ABI for the method you want to call.\n\tmethod: {\n\t\tname: \"mintTo\",\n\t\tinputs: [\n\t\t\t{\n\t\t\t\ttype: \"address\",\n\t\t\t\tname: \"to\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"uint256\",\n\t\t\t\tname: \"amount\",\n\t\t\t},\n\t\t],\n\t\ttype: \"function\",\n\t},\n\t// The Types of `params` are automatically inferred based on the ABI inputs.\n\tparams: [\"0x123...\", toWei(\"100\")],\n});\n```\n\n----------------------------------------\n\nTITLE: User Object Response Format (JSON)\nDESCRIPTION: This snippet shows the expected JSON response format when fetching user data from the thirdweb API. It includes user details such as ID, wallet address, creation date, authentication provider, and email.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-users/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"userId\": \"9841a5de-b4a6-44b3-ad14-c4b8745782ca\",\n    \"walletAddress\": \"0x933F5BC72634c55b3643A6Aa0cD5b65ca4915d39\",\n    \"createdAt\": \"2024-11-05T00:55:25.142Z\",\n    \"authProvider\": \"google\",\n    \"authDetails\": {\n        \"id\": \"107302390467834615186\",\n        \"name\": \"Richard Hendricks\",\n        \"type\": \"google\",\n        \"email\": \"richard@piedpiper.com\",\n        \"picture\": \"https://lh3.googleusercontent.com/a/ACg8ocKC1D6ezzzaZxxUk4qtK_HCwVwpNamVopazXwklGBwuuHeSf_c=s96-c\",\n        \"givenName\": \"Richard\",\n        \"emailVerified\": true\n    },\n    \"email\": \"richard@piedpiper.com\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: External Wallet JSON Conversion in C#\nDESCRIPTION: Converts typed data into JSON format suitable for external wallet interactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nvar jsonString = Utils.ToJsonExternalWalletFriendly(typedData, message);\n```\n\n----------------------------------------\n\nTITLE: Setup Role Function\nDESCRIPTION: Internal function to set up roles and register signers in the factory.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/AccountExtension/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setupRole(bytes32 role, address account) internal virtual override {\n    super._setupRole(role, account);\n    if (role == SIGNER_ROLE && factory.code.length > 0) {\n        IAccountFactory(factory).addSigner(account);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721ClaimConditions Contract in Solidity\nDESCRIPTION: Example implementation of a contract using ERC721ClaimConditions functionality. It inherits from ERC721A, LazyMint, and DropSinglePhase, and includes overridable functions for customization.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721ClaimConditions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\nimport \"@thirdweb-dev/contracts/extension/LazyMint.sol\";\nimport \"@thirdweb-dev/contracts/extension/DropSinglePhase.sol\";\n\ncontract Contract is ERC721A, LazyMint, DropSinglePhase {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC721A(\n            _name,\n            _symbol\n        )\n    {}\n\n    function _canLazyMint() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    function _canSetClaimConditions() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    function _collectPriceOnClaim(\n        address _primarySaleRecipient,\n        uint256 _quantityToClaim,\n        address _currency,\n        uint256 _pricePerToken\n    ) internal virtual override {\n        // Your custom implementation here\n    }\n\n    function _transferTokensOnClaim(address _to, uint256 _quantityBeingClaimed)\n        internal\n        virtual\n        override\n        returns (uint256 startTokenId)\n    {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Claim Conditions Function\nDESCRIPTION: Function to set token claim conditions including timing, supply limits, pricing, and allowlist restrictions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ClaimCondition {\n    uint256 startTimestamp;\n    uint256 maxClaimableSupply;\n    uint256 supplyClaimed;\n    uint256 quantityLimitPerWallet;\n    bytes32 merkleRoot;\n    uint256 pricePerToken;\n    address currency;\n    string metadata;\n}\n\nfunction setClaimConditions(ClaimCondition calldata phase, bool resetClaimEligibility) external;\n```\n\n----------------------------------------\n\nTITLE: Importing Metadata Creation Function in JavaScript\nDESCRIPTION: This code snippet imports a function for creating metadata from a custom '@doc' module. It's used to set up metadata for the documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-721/metadata/simpleMetadataERC721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: This snippet imports UI components from the documentation framework to create the layout and card elements for the modular contracts documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/modular/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  ArticleIconCard,\n  Stack\n} from \"@doc\";\nimport {\n\tContractModularContractIcon,\n\tContractInteractIcon,\n\tContractExploreIcon,\n\tContractDeployIcon,\n\tContractPublishIcon,\n    TypeScriptIcon\n} from \"@/icons\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Crypto Purchase Test Mode - PayEmbed\nDESCRIPTION: Example of enabling test mode for crypto-to-crypto transactions using PayEmbed component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/testing-pay/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<PayEmbed\n\tclient={client}\n\tpayOptions={{\n\t\tbuyWithCrypto: {\n\t\t\ttestMode: true, // defaults to false\n\t\t},\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons for Documentation Page in React\nDESCRIPTION: Imports necessary components and icons from various libraries to build the documentation page interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/linking/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMetadata } from \"@doc\";\nimport { ExternalLink } from \"lucide-react\";\nimport { ArticleIconCard, Stack, AuthList } from \"@doc\";\nimport { ReactIcon } from \"@/icons\";\n```\n\n----------------------------------------\n\nTITLE: Setting up ThirdwebProvider in React for Relayer Integration\nDESCRIPTION: Wraps the main application with ThirdwebProvider to enable relayer functionality. This is the first step in setting up a gasless transaction flow in your frontend.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/relayers/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider } from \"thirdweb/react\";\n\n<ThirdwebProvider>\n\t<YourApp />\n</ThirdwebProvider>;\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables\nDESCRIPTION: Adding necessary environment variables for thirdweb client authentication and wallet private key.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/getting-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTHIRDWEB_SECRET_KEY=[YOUR SECRET KEY]\nWALLET_PRIVATE_KEY=[YOUR WALLET PRIVATE KEY]\n```\n\n----------------------------------------\n\nTITLE: Bidding in an English Auction for NFTs\nDESCRIPTION: The bidInAuction function allows users to place bids in an ongoing auction, requiring the auction to not be expired, the caller to own and approve the bid amount transfer, and the bid to be a winning bid amount.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction bidInAuction(uint256 auctionId, uint256 bidAmount) external payable;\n```\n\n----------------------------------------\n\nTITLE: Checking if a Bid Amount Would Win an Auction\nDESCRIPTION: The isNewWinningBid function checks whether a given bid amount would make for a new winning bid in an auction, requiring the auction to not be cancelled or expired.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isNewWinningBid(uint256 auctionId, uint256 bidAmount) external view returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Generating a PrivateKeyWallet in Thirdweb Unity SDK (C#)\nDESCRIPTION: This code snippet demonstrates how to instantiate a PrivateKeyWallet using the Thirdweb Unity SDK. It creates wallet options specifying the private key wallet provider and chain ID, then uses ThirdwebManager to connect the wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/private-key/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar options = new WalletOptions(provider: WalletProvider.PrivateKeyWallet, chainId: 1);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Alternative Initialization with Yarn for Custom Auth Server\nDESCRIPTION: Alternative bash command using yarn to initialize a new Node.js application for the custom auth server.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-auth-server/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn init -y\n```\n\n----------------------------------------\n\nTITLE: Example Mined Transaction Payload in JSON\nDESCRIPTION: Sample JSON payload structure for a mined transaction webhook event, showing additional fields like onchainStatus and blockNumber.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/webhooks/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"queueId\": \"1411246e-b1c8-4f5d-9a25-8c1f40b54e55\",\n\t\"status\": \"mined\",\n\t\"onchainStatus\": \"success\",\n\t\"queuedAt\": \"2023-09-29T22:01:31.031Z\",\n\t\"sentAt\": \"2023-09-29T22:01:41.580Z\",\n\t\"minedAt\": \"2023-09-29T22:01:44.000Z\",\n\t\"errorMessage\": null,\n\t\"cancelledAt\": null,\n\t\"retryCount\": 0,\n\t\"chainId\": 80001,\n\t\"fromAddress\": \"0x3ecdbf3b911d0e9052b64850693888b008e18373\",\n\t\"toAddress\": \"0x365b83d67d5539c6583b9c0266a548926bf216f4\",\n\t\"data\": \"0xa9059cbb0000000000000000000000003ecdbf3b911d0e9052b64850693888b008e183730000000000000000000000000000000000000000000000000000000000000064\",\n\t\"value\": \"0x00\",\n\t\"nonce\": 1786,\n\t\"gasLimit\": \"39580\",\n\t\"maxFeePerGas\": \"2063100466\",\n\t\"maxPriorityFeePerGas\": \"1875545856\",\n\t\"gasPrice\": \"1875545871\",\n\t\"transactionType\": 2,\n\t\"transactionHash\": \"0xc3ffa42dd4734b017d483e1158a2e936c8a97dd1aa4e4ce11df80ac8e81d2c7e\",\n\t\"sentAtBlockNumber\": 40660021,\n\t\"blockNumber\": 40660026}\n```\n\n----------------------------------------\n\nTITLE: Checking if an Auction is Expired\nDESCRIPTION: The isAuctionExpired function returns a boolean indicating whether an auction has expired, which is useful for determining if actions like bidding are still valid.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isAuctionExpired(uint256 auctionId) external view returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Disabling Fiat Payment Method in thirdweb Universal Bridge\nDESCRIPTION: Demonstrates how to disable fiat payment options, restricting users to only use existing crypto for transactions. This configuration sets buyWithFiat to false.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/send-transaction/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst { mutate: sendTransaction } = useSendTransaction({\n\tpayModal: {\n\t\tbuyWithFiat: false,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Fiat Payment Method\nDESCRIPTION: This code shows how to disable the fiat payment option in the Universal Bridge ConnectButton, restricting users to cryptocurrency payment methods only.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/connectbutton/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton\n\tclient={client}\n\tdetailsModal={{\n\t\tpayOptions: {\n\t\t\tbuyWithFiat: false,\n\t\t},\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Contents to Existing Pack in Solidity\nDESCRIPTION: This function allows adding more contents to a created pack until the first transfer occurs. It takes parameters for the pack ID, contents to add, number of reward units, and the recipient address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/pack/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addPackContents(\n    uint256 packId,\n    Token[] calldata contents,\n    uint256[] calldata numOfRewardUnits,\n    address recipient\n) external\n```\n\n----------------------------------------\n\nTITLE: Initializing ThirdwebSDK with Client ID in Unity\nDESCRIPTION: Configures the ThirdwebSDK in Unity using a client ID. This enables Unity applications to utilize RPC Edge capabilities when interacting with the specified blockchain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/rpc-edge/get-started/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebSDK sdk = new ThirdwebSDK(\"<chain_id>\", 5, new ThirdwebSDK.Options()\n{\n  clientId = \"<your_client_id>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Max Priority Fee Per Gas in C#\nDESCRIPTION: Sets the maximum priority fee per gas for an EIP-1559 transaction using SetMaxPriorityFeePerGas method. Takes a BigInteger as input.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/instance/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction transaction = transaction.SetMaxPriorityFeePerGas(1000000000);\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the local development server for the documentation website using PNPM.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: SetupContractURI Internal Function\nDESCRIPTION: Internal function to set the contract metadata URI without access control checks.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/ContractMetadata/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setupContractURI(string memory _uri) internal;\n```\n\n----------------------------------------\n\nTITLE: Preparing Buy Transaction for Tokens in C#\nDESCRIPTION: Shows how to prepare a set of executable transactions for buying tokens using the Buy_Prepare method. This example prepares a transaction to buy ETH on zkSync using USDC from Ethereum.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/universal-bridge/quickstart/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar preparedBuy = await bridge.Buy_Prepare(\n    originChainId: 1,\n    originTokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC on Ethereum\n    destinationChainId: 324,\n    destinationTokenAddress: Constants.NATIVE_TOKEN_ADDRESS, // ETH on zkSync\n    buyAmountWei: BigInteger.Parse(\"0.1\".ToWei()),\n    sender: await Utils.GetAddressFromENS(client, \"vitalik.eth\"),\n    receiver: await myWallet.GetAddress()\n);\nConsole.WriteLine($\"Prepared Buy contains {preparedBuy.Transactions.Count} transaction(s)!\");\n```\n\n----------------------------------------\n\nTITLE: NFT Contract with Permissions Extension\nDESCRIPTION: NFT contract implementing both ERC721Base and Permissions extension with custom minting logic\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/get-started/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC721Base.sol\";\nimport \"@thirdweb-dev/contracts/extension/Permissions.sol\";\n\ncontract MyNFT is ERC721Base, Permissions {\n    bytes32 private constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC721Base(_defaultAdmin, _name, _symbol, _royaltyRecipient, _royaltyBps) {}\n\n    function _canMint() internal view override returns (bool) {\n        return hasRole(MINTER_ROLE, msg.sender);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prefilling Purchase with Native Token\nDESCRIPTION: This snippet shows how to prefill a purchase with a native token by specifying only the chain without passing a token object. This is useful when you want users to directly purchase the native token of a specific chain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/payembed/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<PayEmbed\n\tclient={client}\n\tpayOptions={{\n\t\tprefillBuy: {\n\t\t\tchain: base,\n\t\t},\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Supported Tokens with useSendTransaction in thirdweb\nDESCRIPTION: Demonstrates how to override default tokens in the Universal Bridge interface by specifying an array of supported tokens for a specific chain. This example shows how to configure USDC as a supported token on Ethereum mainnet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/send-transaction/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst { mutate: sendTransaction } = useSendTransaction({\n\tpayModal: {\n\t\tsupportedTokens: {\n\t\t\t\"1\": [\n\t\t\t\t{\n\t\t\t\t\taddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n\t\t\t\t\tname: \"USD Coin\",\n\t\t\t\t\tsymbol: \"USDC\",\n\t\t\t\t\ticon: usdcIcon,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Get Implementation For Function\nDESCRIPTION: Function to retrieve the extension implementation address for a given function selector from the router.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getImplementationForFunction(bytes4 _functionSelector) public view virtual override returns (address) {\n    return Router(payable(factory)).getImplementationForFunction(_functionSelector);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up ThirdwebProvider in React\nDESCRIPTION: Code snippet showing how to wrap a React application with the ThirdwebProvider component for thirdweb integration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// main.tsx\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n\t<React.StrictMode>\n\t\t<ThirdwebProvider>// Your application layout...</ThirdwebProvider>\n\t</React.StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Calculating Random Number in Delayed-Reveal Approach for Pack Opening in Solidity\nDESCRIPTION: This code snippet demonstrates how a random number would be calculated in the delayed-reveal randomness approach. It combines a seed submitted by the pack creator, the message sender address, and the blockhash of a stored block number to generate a random value through keccak256 hashing.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/pack/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 random = uint(keccak256(seed, msg.sender, blockhash(storedBlockNumber)));\n```\n\n----------------------------------------\n\nTITLE: Permissions Extension API: hasRole Function\nDESCRIPTION: This function checks if an account has been granted a specific role. It returns a boolean value indicating whether the account has the role.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Permissions/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction hasRole(bytes32 role, address account) external view returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Message Hashing in C#\nDESCRIPTION: Hashes a message using SHA3 Keccak hashing.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar hashedMessage = message.HashMessage();\n```\n\n----------------------------------------\n\nTITLE: Authorization Check for Primary Sale Recipient\nDESCRIPTION: Virtual function that determines whether a new primary sale recipient can be set in the current execution context\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PrimarySale/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSetPrimarySaleRecipient() internal view virtual returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Claiming Tokens in Solidity\nDESCRIPTION: Function to allow an account to claim a specified quantity of tokens. It handles various parameters including the receiver, token ID, quantity, currency, price, allowlist proof, and additional data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction claim(\n    address receiver,\n    uint256 tokenId,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) external payable;\n```\n\n----------------------------------------\n\nTITLE: Setting Claim Conditions in Solidity\nDESCRIPTION: Function to set claim conditions for the contract. It includes a struct for claim conditions and parameters for token ID, phases array, and reset eligibility flag.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ClaimCondition {\n    uint256 startTimestamp;\n    uint256 maxClaimableSupply;\n    uint256 supplyClaimed;\n    uint256 quantityLimitPerWallet;\n    bytes32 merkleRoot;\n    uint256 pricePerToken;\n    address currency;\n    string metadata;\n}\n\nfunction setClaimConditions(uint256 tokenId, ClaimCondition[] calldata phases, bool resetClaimEligibility) external;\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Ecosystem Owner Query\nDESCRIPTION: Example curl command for ecosystem owners to fetch user details with additional ecosystem headers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/user-management/get-user-profiles/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET 'https://in-app-wallet.thirdweb.com/api/2023-11-30/embedded-wallet/user-details?queryBy=walletAddress&walletAddress=0x123456789abcdef' \\\n  -H 'x-secret-key: YOUR_THIRD_WEB_CLIENT_SECRET' \\\n  -H 'x-ecosystem-id: ecosystem.YOUR_ECOSYSTEM_ID' \\\n  -H 'x-ecosystem-partner-id: YOUR_PARTNER_ID'\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb SDK\nDESCRIPTION: Command to install the thirdweb SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: npm\nCODE:\n```\nnpm install thirdweb\n```\n\n----------------------------------------\n\nTITLE: Uploading File to IPFS in C#\nDESCRIPTION: Uploads a file to IPFS and pins it, returning an IPFSUploadResult with hash, size, timestamp, and preview URL.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/storage/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await ThirdwebStorage.Upload(client, \"{{path/to-file}}\");\n```\n\n----------------------------------------\n\nTITLE: Rendering Stack of ArticleCards in JSX\nDESCRIPTION: This snippet demonstrates how to render a stack of ArticleCard components. Each ArticleCard has properties for title, description, and href. The Stack component is used to arrange the cards vertically.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/cards/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Stack>\n<ArticleCard\n\ttitle=\"Some Title\"\n\tdescription=\"This is a short description about this card and its properties.\"\n\thref=\"/\"\n/>\n\n<ArticleCard\n\ttitle=\"Some Title\"\n\tdescription=\"This is a short description about this card and its properties.\"\n\thref=\"/\"\n/>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Custom ID Wallet Pregeneration Request\nDESCRIPTION: Example request body for pregenerating a wallet using a custom user ID strategy.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/pregenerate-wallets/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ strategy: \"custom_auth_endpoint\", userId: \"some_user_id\" }\n```\n\n----------------------------------------\n\nTITLE: Accepting NFT Offers Solidity Interface\nDESCRIPTION: Interface for accepting an offer made on owned NFTs. Requires ownership and marketplace approval of the NFTs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\nfunction acceptOffer(uint256 offerId) external;\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721SignatureMint Contract in Solidity\nDESCRIPTION: Shows how to import the SignatureMintERC721 contract from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721SignatureMint/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/SignatureMintERC721.sol\";\n```\n\n----------------------------------------\n\nTITLE: Starting the JWT Auth Server in Bash\nDESCRIPTION: Command to start the Node.js JWT authentication server.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-jwt-auth-server/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Getting Active Account in React\nDESCRIPTION: Shows how to access the currently active wallet account using React hooks from thirdweb SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/interact-with-accounts/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useActiveAccount } from \"thirdweb/react\";\n\nconst account = useActiveAccount();\n```\n\n----------------------------------------\n\nTITLE: Overriding _beforeTokenTransfer Function in ERC1155Drop Contract\nDESCRIPTION: This internal function runs before every token transfer, mint, or burn operation. It updates the total supply for the affected token IDs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/drop/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeTokenTransfer(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n) internal virtual override {\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n    if (from == address(0)) {\n        for (uint256 i = 0; i < ids.length; ++i) {\n            totalSupply[ids[i]] += amounts[i];\n        }\n    }\n\n    if (to == address(0)) {\n        for (uint256 i = 0; i < ids.length; ++i) {\n            totalSupply[ids[i]] -= amounts[i];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Auctions by ID Range\nDESCRIPTION: The getAllAuctions function returns all auctions between the start and end IDs provided (inclusive), allowing for efficient batch retrieval of auction information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getAllAuctions(uint256 startId, uint256 endId) external view returns (Auction[] memory auctions);\n```\n\n----------------------------------------\n\nTITLE: CanSetContractURI Virtual Function\nDESCRIPTION: Virtual function that must be implemented to define access control for setting contract metadata.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/ContractMetadata/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSetContractURI() internal view virtual returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Example Response with Chat Action in JSON\nDESCRIPTION: Demonstrates the structure of a response containing a chat action for a blockchain transaction. It includes a message explaining the action and an array of action objects with transaction details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/chat/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"The transaction to transfer 0.0001 ETH to the address resolved from the ENS name `vitalik.eth` (which is `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045`) is set up successfully. The simulation indicates that the transaction is likely to succeed.\\n\\nPlease proceed by signing and confirming the transaction.\",\n  \"actions\": [\n    {\n      \"session_id\": \"437a0df7-d512-4ef4-95b5-6168ccbbe097\",\n      \"request_id\": \"c2b51ed6-da79-49ac-b411-206a42059509\",\n      \"type\": \"sign_transaction\",\n      \"source\": \"executor\",\n      \"data\": \"{\\\"chainId\\\": 11155111, \\\"to\\\": \\\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\\\", \\\"data\\\": \\\"0x\\\", \\\"value\\\": \\\"0x5af3107a4000\\\"}\"\n    }\n  ],\n  \"session_id\": \"437a0df7-d512-4ef4-95b5-6168ccbbe097\",\n  \"request_id\": \"c2b51ed6-da79-49ac-b411-206a42059509\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Claimed Supply Function\nDESCRIPTION: Function to retrieve the number of tokens claimed by a specific wallet under active conditions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getSupplyClaimedByWallet(address claimer) public view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Adding Account Abstraction to ConnectButton\nDESCRIPTION: Code to enhance the ConnectButton with account abstraction capabilities, enabling gas sponsorship and batched transactions for users via smart wallets.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton\n\t// ...\n\taccountAbstraction={{\n\t\tchain: sepolia, // Update this to your chain of choice\n\t\tfactoryAddress: \"0x5cA3b8E5B82D826aF6E8e9BA9E4E8f95cbC177F4\", // Set this to your Account Factory. You can deploy one from Team > Project > Connect > Account Abstraction page\n\t\tgasless: true, // Sponsor gas for your users\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Express Server with CORS and Middleware for thirdweb Auth\nDESCRIPTION: Sets up an Express server with necessary middleware including CORS configuration for proper cookie handling. It imports required dependencies and sets up basic Express configuration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport cors from \"cors\";\nimport express from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport { createAuth, type VerifyLoginPayloadParams } from \"thirdweb/auth\";\nimport { privateKeyToAccount } from \"thirdweb/wallets\";\nimport { thirdwebClient } from \"./thirdwebClient\";\n\nconst app = express();\napp.use(express.json());\napp.use(cookieParser());\napp.use(\n\t// This is important for the cookie to be saved properly!!!\n\tcors({\n\t\torigin: `${process.env.NODE_ENV === \"development\" ? \"http\" : \"https\"}://${process.env.CLIENT_DOMAIN}`,\n\t\tcredentials: true,\n\t}),\n);\n\n// ...we'll add routes here next\n\napp.listen(3000, () => {\n\tconsole.log(`⚡ Auth server listening on port 3000...`);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb Package via npm\nDESCRIPTION: A Bash command to install the 'thirdweb' package using npm (Node Package Manager).\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/code/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i thirdweb\n```\n\n----------------------------------------\n\nTITLE: Unreal Engine C++ Wallet Integration\nDESCRIPTION: Complete wallet integration implementation for Unreal Engine using C++. Includes initialization, connection handling, and balance checking.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"ThirdwebManager.h\"\n#include \"WalletConnection.h\"\n\n// In your game class or controller\nvoid AMyGameController::InitializeThirdweb()\n{\n    // Get the Thirdweb subsystem\n    UThirdwebSubsystem* ThirdwebSubsystem = GEngine->GetEngineSubsystem<UThirdwebSubsystem>();\n    \n    // Initialize with your client ID (configured in project settings)\n    ThirdwebSubsystem->Initialize(\"ethereum\");\n}\n\nvoid AMyGameController::ConnectWallet()\n{\n    UThirdwebSubsystem* ThirdwebSubsystem = GEngine->GetEngineSubsystem<UThirdwebSubsystem>();\n    \n    // Configure wallet connection\n    FWalletConnection WalletOptions;\n    WalletOptions.Provider = EWalletProvider::EmbeddedWallet;\n    WalletOptions.Email = \"user@example.com\";\n    WalletOptions.ChainId = 1; // Ethereum Mainnet\n    \n    // Connect wallet asynchronously\n    ThirdwebSubsystem->ConnectWallet(WalletOptions, FOnWalletConnected::CreateUObject(this, &AMyGameController::OnWalletConnected));\n}\n\nvoid AMyGameController::OnWalletConnected(const FString& Address, const FString& Error)\n{\n    if (Error.IsEmpty())\n    {\n        UE_LOG(LogTemp, Display, TEXT(\"Wallet connected: %s\"), *Address);\n        \n        // Get balance\n        UThirdwebSubsystem* ThirdwebSubsystem = GEngine->GetEngineSubsystem<UThirdwebSubsystem>();\n        ThirdwebSubsystem->GetWalletBalance(FOnWalletBalanceReceived::CreateUObject(this, &AMyGameController::OnBalanceReceived));\n    }\n    else\n    {\n        UE_LOG(LogTemp, Error, TEXT(\"Failed to connect wallet: %s\"), *Error);\n    }\n}\n\nvoid AMyGameController::OnBalanceReceived(const FString& Balance, const FString& Symbol)\n{\n    UE_LOG(LogTemp, Display, TEXT(\"Balance: %s %s\"), *Balance, *Symbol);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Balance Using thirdweb Engine API in TypeScript\nDESCRIPTION: This code sends a GET request to the Engine API to retrieve a wallet's balance on a specified blockchain. It requires an access token for authentication and returns the wallet's balance value.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst resp = await fetch(\n\t\"<engine_url>/backend-wallet/<chain>/<backend_wallet_address>/get-balance\",\n\t{\n\t\theaders: {\n\t\t\tAuthorization: \"Bearer <access_token>\",\n\t\t},\n\t},\n);\n\nconst { result } = await resp.json();\nconsole.log(\"Balance:\", result.value);\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries from thirdweb\nDESCRIPTION: Code snippet showing how to import necessary functions from the thirdweb library for transaction handling.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    createThirdwebClient,\n  prepareTransaction,\n  sendTransaction,\n  privateKeyToAccount,\n} from \"thirdweb\";\n```\n\n----------------------------------------\n\nTITLE: ThirdWeb Wagmi Adapter Package Description\nDESCRIPTION: Markdown documentation describing the purpose of the Wagmi adapter package for ThirdWeb integration\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/wagmi-adapter/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Wagmi Adapter\n\nThis package enables the use of thirdweb's in-app wallets with wagmi.\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Offers Solidity Interface\nDESCRIPTION: View function that returns all offers within a specified ID range.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_28\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getAllOffers(uint256 startId, uint256 endId) external view returns (Offer[] memory offers);\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectButton with Custom Wallets in React\nDESCRIPTION: Example of implementing the ConnectButton component with custom wallet configurations. This demonstrates how to set up multiple wallet options including an in-app wallet, MetaMask, Coinbase Wallet, and Rainbow.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/ConnectButton/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\nimport { createWallet, inAppWallet } from \"thirdweb/wallets\";\n\nconst wallets = [\n\tinAppWallet(),\n\tcreateWallet(\"io.metamask\"),\n\tcreateWallet(\"com.coinbase.wallet\"),\n\tcreateWallet(\"me.rainbow\"),\n];\n\nfunction Example() {\n\treturn (\n\t\t<div>\n\t\t\t<ConnectButton client={client} wallets={wallets} />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New thirdweb Contract Project\nDESCRIPTION: Command to initialize a new thirdweb contract project using npx\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create contract\n```\n\n----------------------------------------\n\nTITLE: String to Hex Conversion in C#\nDESCRIPTION: Converts a regular string to its hexadecimal representation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar hexString = \"Hello\".StringToHex();\n```\n\n----------------------------------------\n\nTITLE: Internal Message Sender Override in Solidity\nDESCRIPTION: Internal function to expose the ability to override the msg.sender.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _dropMsgSender() internal virtual returns (address);\n```\n\n----------------------------------------\n\nTITLE: Getting Active Claim Condition ID in Solidity\nDESCRIPTION: Function to get the ID of the currently active claim condition for a given token ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getActiveClaimConditionId(uint256 tokenId) public view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Defining ClaimCondition Struct in Solidity for Drop Contracts\nDESCRIPTION: This Solidity struct defines the structure of a claim condition used in Drop contracts. It includes parameters such as start timestamp, maximum claimable supply, quantity limit per wallet, and pricing information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/drop/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ClaimCondition {\n  uint256 startTimestamp;\n  uint256 maxClaimableSupply;\n  uint256 supplyClaimed;\n  uint256 quantityLimitPerWallet;\n  bytes32 merkleRoot;\n  uint256 pricePerToken;\n  address currency;\n}\n```\n\n----------------------------------------\n\nTITLE: Theming thirdweb ConnectButton\nDESCRIPTION: Example of applying a theme to thirdweb ConnectButton.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<ConnectButton\n  theme=\"dark\" // \"light\"\n  {...etc}\n/>\n```\n\n----------------------------------------\n\nTITLE: Removing Admin from Smart Wallet using .NET SDK\nDESCRIPTION: Demonstrates how to remove an admin from a Smart Wallet by providing their wallet address. The method returns a transaction receipt confirming the removal operation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/removeadmin/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar receipt = await SmartWallet.RemoveAdmin(\"0xLivedminAddress\");\n```\n\n----------------------------------------\n\nTITLE: Specifying Chain IDs in thirdweb Insight API\nDESCRIPTION: Shows two methods for specifying chain IDs in thirdweb Insight API requests: as a subdomain or as query parameters. The latter supports querying multiple chains simultaneously.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// As a subdomain:\n// Example\nconst baseUrl = `https://{{chainId}}.insight.thirdweb.com`;\n\n// As a query parameter (this is useful if you want to query multiple chains):\n// Example for a single chain\nconst url = `https://insight.thirdweb.com/v1/events?chain={{chainId}}`;\n// Example for multiple chains\nconst url = `https://insight.thirdweb.com/v1/events?chain=1&chain=137`;\n```\n\n----------------------------------------\n\nTITLE: Initializing ThirdwebSDK with Secret Key in TypeScript\nDESCRIPTION: Creates a read-only ThirdwebSDK instance using a secret key for server-side or backend applications. This configuration enables secure RPC Edge capabilities when interacting with the specified blockchain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/rpc-edge/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n  // Read-only mode\n  const readOnlySdk = new ThirdwebSDK(\"<chain_id>\", {\n    secretKey: \"<your_secret_key>\",\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration for ERC721 Airdrop Documentation\nDESCRIPTION: Sets up metadata configuration for the documentation page including title, description, and image properties using the createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/airdrop-erc721-claimable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Airdrop ERC721 Claimable contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Airdrop ERC721 Claimable contract | thirdweb\",\n\tdescription: `AirdropERC721Claimable contract is suitable to use when you want to airdrop ERC721 NFTs to a list of recipient addresses, where these recipients are expected to individually claim their own airdrop.`,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721DelayedReveal Contract\nDESCRIPTION: Example implementation of a custom NFT contract inheriting from ERC721DelayedReveal, including constructor and claim verification override.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/delayed-reveal/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC721DelayedReveal.sol\";\n\ncontract MyNFT is ERC721DelayedReveal {\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC721DelayedReveal(_defaultAdmin, _name, _symbol, _royaltyRecipient, _royaltyBps) {}\n\n    function verifyClaim(address _claimer, uint256 _quantity) public view virtual override {\n      // Your custom claim restriction logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a new thirdweb project\nDESCRIPTION: Basic command to create a new thirdweb project. Running this command will start an interactive prompt to configure your project.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/create/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create\n```\n\n----------------------------------------\n\nTITLE: Testing Login with curl for Custom Auth Server\nDESCRIPTION: Curl command to test the login endpoint of the custom auth server by sending a POST request with user credentials.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-auth-server/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/login -H \"Content-Type: application/json\" -d '{\"email\": \"user@example.com\", \"password\": \"password123\"}'\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Transaction using IThirdwebWallet in C#\nDESCRIPTION: Demonstrates how to use the SendTransaction method of IThirdwebWallet to send a raw transaction from the connected wallet. This method returns a transaction hash as a string. It's recommended to use ThirdwebContract.Write instead when possible.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/sendtransaction/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring transactionHash = await wallet.SendTransaction(new ThirdwebTransactionInput(...));\n```\n\n----------------------------------------\n\nTITLE: Implementing IModularExtension Interface in Solidity\nDESCRIPTION: Defines the basic extension interface with storage handling and extension configuration. Implements a mock extension with increment and index tracking functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/modular-contracts/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IModularExtension is IExtensionConfig {\n    function getExtensionConfig() external pure returns (ExtensionConfig memory);\n}\n\nlibrary MockExtensionStorage {\n    bytes32 public constant MOCK_EXTENSION_STORAGE_POSITION =\n        keccak256(abi.encode(uint256(keccak256(\"mock.extension\")) - 1)) & ~bytes32(uint256(0xff));\n\n    struct Data {\n\t\t\t\tuint256 count;\n    }\n\n    function data() internal pure returns (Data storage data_) {\n        bytes32 position = MOCK_EXTENSION_STORAGE_POSITION;\n        assembly {\n            data_.slot := position\n        }\n    }\n}\n\ncontract MockExtension is IModularExtension {\n\n    function increment() external {\n\t\t\t   MockExtensionStorage.data().count++;\n    }\n\n    function getIndex() external view {\n\t\t    return MockExtensionStorage.data().count++;\n    }\n\n    function getExtensionConfig() external pure override returns (ExtensionConfig memory config) {\n        config.callbackFunctions = new CallbackFunction[](1);\n        config.callbackFunctions[0] = CallbackFunction(this.increment.selector);\n\n        config.fallbackFunctions = new FallbackFunction()[1];\n        config.fallbackFunctions[0] = FallbackFunction(this.getIndex.selector, 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens on Claim in Solidity Smart Contract\nDESCRIPTION: Internal function to transfer the tokens being claimed to the appropriate recipient.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transferTokensOnClaim(address to, uint256 quantityBeingClaimed)\n    internal\n    virtual\n    returns (uint256 startTokenId);\n```\n\n----------------------------------------\n\nTITLE: Installing Thirdweb Core Packages for React Native\nDESCRIPTION: Command to install the main thirdweb packages required for React Native integration using Expo.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/react-native-adapter/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install thirdweb @thirdweb-dev/react-native-adapter\n```\n\n----------------------------------------\n\nTITLE: Linking Accounts in C#\nDESCRIPTION: Links additional InAppWallet or EcosystemWallet accounts to the main wallet for multi-method authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/thirdwebmanager/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar linkedAccounts = await ThirdwebManager.Instance.LinkAccount(mainWallet, walletToLink, otp, chainId, jwtOrPayload);\n```\n\n----------------------------------------\n\nTITLE: Processing Internal Mint Requests\nDESCRIPTION: Internal function that verifies a mint request and marks it as used. Handles the core validation logic for mint requests before actual minting occurs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721SignatureMint/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nstruct MintRequest {\n    address to;\n    address royaltyRecipient;\n    uint256 royaltyBps;\n    address primarySaleRecipient;\n    string uri;\n    uint256 quantity;\n    uint256 pricePerToken;\n    address currency;\n    uint128 validityStartTimestamp;\n    uint128 validityEndTimestamp;\n    bytes32 uid;\n}\n\nfunction _processRequest(MintRequest calldata req, bytes calldata signature)\n    internal\n    returns (address signer)\n```\n\n----------------------------------------\n\nTITLE: Advanced Chain Configuration in Thirdweb\nDESCRIPTION: Configuring chains with custom parameters including RPC endpoints, native currency, and block explorers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/chain/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst myChain = defineChain({\n  id: myChainId,\n  rpc: \"https://my-custom-rpc.com\",\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring thirdweb MCP Server with Command-line Options in Bash\nDESCRIPTION: This snippet showcases various command-line options for configuring the thirdweb MCP server, including transport method, port, chain IDs, and Engine-specific settings.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/mcp-server/get-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Basic usage with default settings (stdio transport with Nebula and Insight)\nTHIRDWEB_SECRET_KEY=... thirdweb-mcp \n\n# Using SSE transport on a custom port\nTHIRDWEB_SECRET_KEY=... thirdweb-mcp --transport sse --port 8080\n\n# Enabling all services with specific chain IDs\nTHIRDWEB_SECRET_KEY=... thirdweb-mcp --chain-id 1 --chain-id 137 \\\n    --engine-url YOUR_ENGINE_URL \\\n    --engine-auth-jwt YOUR_ENGINE_JWT \\ \n    --engine-backend-wallet-address YOUR_ENGINE_BACKEND_WALLET_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Printing 'Hello World' in Python\nDESCRIPTION: A simple Python code snippet that assigns the string 'Hello World' to a variable named 'msg'.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/code/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmsg = \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Social Profiles in C#\nDESCRIPTION: Retrieves social profiles for a given wallet address or ENS name using the Thirdweb client.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar socialProfiles = await Utils.GetSocialProfiles(client, addressOrEns);\n```\n\n----------------------------------------\n\nTITLE: Implementing Connect Button with Ecosystem Wallet\nDESCRIPTION: Shows how to integrate the ecosystem wallet into a ConnectButton component for user authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/set-up/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton\n\tclient={THIRDWEB_CLIENT}\n\twallets={[wallet]} // Pass a non-gated or restricted wallet to the ConnectButton\n\t{...props}\n/>\n```\n\n----------------------------------------\n\nTITLE: Price Collection Implementation for Token Claims\nDESCRIPTION: Internal function that handles the collection and distribution of payment for token claims, supporting both native and ERC20 tokens as payment.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/drop-vote/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _collectPriceOnClaim(\n    address _primarySaleRecipient,\n    uint256 _quantityToClaim,\n    address _currency,\n    uint256 _pricePerToken\n) internal virtual override {\n    if (_pricePerToken == 0) {\n        return;\n    }\n\n    uint256 totalPrice = (_quantityToClaim * _pricePerToken) / 1 ether;\n    require(totalPrice > 0, \"quantity too low\");\n\n    if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n        require(msg.value == totalPrice, \"Must send total price.\");\n    }\n\n    address saleRecipient = _primarySaleRecipient == address(0) ? primarySaleRecipient() : _primarySaleRecipient;\n    CurrencyTransferLib.transferCurrency(_currency, msg.sender, saleRecipient, totalPrice);\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Function Implementation\nDESCRIPTION: Implementation of the initialize function for setting up the smart contract wallet with an admin.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initialize(address _defaultAdmin, bytes calldata _data) public virtual initializer {\n    _setupRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb Engine Typescript SDK\nDESCRIPTION: Instructions for installing the thirdweb Engine Typescript SDK using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/references/typescript/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @thirdweb-dev/engine\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @thirdweb-dev/engine\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm i @thirdweb-dev/engine\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb React SDK\nDESCRIPTION: Package installation commands for different package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create app\n```\n\n----------------------------------------\n\nTITLE: Connecting Smart Accounts in Unity\nDESCRIPTION: This C# code snippet shows how to connect a wallet with account abstraction in a Unity application using the Thirdweb SDK. It includes configuration for the wallet provider, chain, and personal wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/get-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Thirdweb;\n\npublic async void ConnectWallet()\n{\n// Reference to your Thirdweb SDK\nvar sdk = ThirdwebManager.Instance.SDK;\n// Configure the connection\nvar connection = new WalletConnection(\nprovider: WalletProvider.SmartWallet, // The wallet provider you want to connect to (Required)\nchainId: 1, // The chain you want to connect to (Required)\npassword: \"myEpicPassword\", // If using a local wallet as a personal wallet (Optional)\nemail: \"email@email.com\", // If using an email wallet as a personal wallet (Optional)\npersonalWallet: WalletProvider.LocalWallet // The personal wallet you want to use with your Smart Wallet (Optional)\n);\n// Connect the wallet\nstring address = await sdk.wallet.Connect(connection);\n}\n```\n\n----------------------------------------\n\nTITLE: IPFS URI Gateway Replacement in C#\nDESCRIPTION: Replaces an IPFS URI with a specified gateway URL.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar gatewayUri = ipfsUri.ReplaceIPFS(\"https://ipfs.io/ipfs/\");\n```\n\n----------------------------------------\n\nTITLE: Authentication Methods for Insight API\nDESCRIPTION: Shows three different methods for authenticating with the thirdweb Insight API: header authentication with client ID, query parameter authentication, and bearer token authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Header Authentication\nconst headers = {\n\t\"x-client-id\": \"{{clientId}}\", // thirdweb Client ID\n};\n\n// 2. Query Parameter\nconst url = \"https://{{chainId}}.insight.thirdweb.com/v1/events?clientId={{clientId}}\";\n\n// 3. Bearer Token\nconst headers = {\n\tAuthorization: \"Bearer {{jwtToken}}\",\n};\n\n// Example using fetch with header auth\nasync function getEvents() {\n\tconst response = await fetch(\"https://{{chainId}}.insight.thirdweb.com/v1/events\", {\n\t\theaders: {\n\t\t\t\"x-client-id\": \"{{clientId}}\",\n\t\t},\n\t});\n\treturn await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721ClaimPhases Dependencies\nDESCRIPTION: Basic imports required for implementing the ERC721ClaimPhases contract functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721ClaimPhases/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/ERC721.sol\";\nimport \"@thirdweb-dev/contracts/extension/Drop.sol\";\n```\n\n----------------------------------------\n\nTITLE: Verifying Claim in Solidity Smart Contract\nDESCRIPTION: Checks a request to claim tokens against the active claim condition's criteria. Includes an AllowlistProof struct definition and a function to verify the claim.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nstruct AllowlistProof {\n    bytes32[] proof;\n    uint256 quantityLimitPerWallet;\n    uint256 pricePerToken;\n    address currency;\n}\n\nfunction verifyClaim(\n    uint256 conditionId,\n    address claimer,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof\n) public view returns (bool isOverride);\n```\n\n----------------------------------------\n\nTITLE: Permissions Extension API: grantRole Function\nDESCRIPTION: This function grants a role to an account. It can only be called by a holder of the admin role of the role being granted.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Permissions/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction grantRole(bytes32 role, address account) external;\n```\n\n----------------------------------------\n\nTITLE: Wei to Ether Conversion in C#\nDESCRIPTION: Converts Wei values to Ether denomination with optional formatting.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar ethValue = weiValue.ToEth();\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Managed Account Factory in JavaScript\nDESCRIPTION: This snippet demonstrates how to create metadata for the Managed Account Factory using the createMetadata function from the @doc module. It sets the image title, icon, page title, and description for the contract documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/managed-account-factory/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Managed Account Factory\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Managed Account Factory | thirdweb\",\n\tdescription: `The Managed Account Factory contract is used to deploy upgradeable ERC-4337 smart wallets with role based permission control.`,\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding burn Function in ERC1155Drop Contract\nDESCRIPTION: This function allows an owner or approved operator to burn NFTs of a specific tokenId. It checks for proper authorization and token ownership before burning.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/drop/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(\n    address _owner,\n    uint256 _tokenId,\n    uint256 _amount\n) external virtual {\n    address caller = msg.sender;\n\n    require(caller == _owner || isApprovedForAll[_owner][caller], \"Unapproved caller\");\n    require(balanceOf[_owner][_tokenId] >= _amount, \"Not enough tokens owned\");\n\n    _burn(_owner, _tokenId, _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Wallet Using Hooks\nDESCRIPTION: Demonstrates how to use Thirdweb hooks to get the connected wallet address and check wallet balance\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/quickstart/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useActiveAccount, useWalletBalance } from \"thirdweb/react\";\n\nexport default function MyComponent() {\n  // 1. get wallet address\n  const account = useActiveAccount();\n  console.log(\"wallet address\", account?.address);\n\n  // 2. get wallet balance\n  const { data: balance, isLoading } = useWalletBalance({\n    client,\n    chain,\n    address: account?.address,\n  });\n  console.log(\"wallet balance\", balance?.displayValue, balance?.symbol);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Project Directory for Custom Auth Server\nDESCRIPTION: Bash commands for creating a new directory and navigating to it in the CLI to set up a custom auth server project.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-auth-server/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir custom-auth-server\ncd custom-auth-server\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ecosystem Details using .NET SDK\nDESCRIPTION: Method to fetch ecosystem information associated with a wallet, including name, slug, and image URL. Returns an EcosystemDetails object containing the ecosystem metadata.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/getecosystemdetails/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await ecosystemWallet.GetEcosystemDetails();\n```\n\n----------------------------------------\n\nTITLE: Transferring Claimed Tokens in Solidity\nDESCRIPTION: Internal function to transfer the claimed tokens to the appropriate recipient.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transferTokensOnClaim(address to, uint256 tokenId, uint256 quantityBeingClaimed)\n    internal\n    virtual;\n```\n\n----------------------------------------\n\nTITLE: Defining Event Filters for Insight Webhooks in TypeScript\nDESCRIPTION: This snippet demonstrates the structure for defining event filters in Insight Webhooks. It allows filtering by chain IDs, contract addresses, and event signatures. Optional ABI and parameter filtering are also supported.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/webhooks/filtering/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"v1.events\": {\n    chain_ids: string[],          // Filter by specific chains\n    addresses: string[],          // Filter by contract addresses\n    signatures: {                 // Filter by event signatures\n      sig_hash: string,          // Event signature hash\n      abi?: string,             // Optional ABI for data decoding\n      params?: Record<string, any> // Filter on decoded parameters\n    }[]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PlatformFee API - setPlatformFeeInfo\nDESCRIPTION: Function for authorized wallets to set the platform fee recipient and basis points.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PlatformFee/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setPlatformFeeInfo(address platformFeeRecipient, uint256 platformFeeBps) external;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bundle ID in Android Applications\nDESCRIPTION: Code snippet showing where to find the applicationId in an Android project's build.gradle file, which serves as the bundle ID for API key restrictions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/faq/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nandroid {\n    defaultConfig {\n    applicationId \"com.example.yourproject\"\n    ...\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Overriding Message Sender in Solidity\nDESCRIPTION: Internal function that provides the ability to override the msg.sender, allowing for customization of the sender address in certain contexts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _dropMsgSender() internal virtual returns (address);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Details by User ID in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getUser function from thirdweb to retrieve user details using a user ID. It requires a client object and the user's ID as parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/get-user-details/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUser } from \"thirdweb\";\n\nconst user = await getUser({\n  client,\n  id: \"1234567890\",\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Base URL for Nebula API Requests\nDESCRIPTION: Provides the base URL endpoint for all Nebula API requests. All API calls must be directed to this URL to access the Nebula service.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://nebula-api.thirdweb.com\n```\n\n----------------------------------------\n\nTITLE: Future Unix Timestamp in C#\nDESCRIPTION: Gets the Unix timestamp for 10 years from the current time.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar timestampIn10Years = Utils.GetUnixTimeStampIn10Years();\n```\n\n----------------------------------------\n\nTITLE: Creating a Contract Instance with thirdweb SDK v5\nDESCRIPTION: This snippet demonstrates how to create a contract instance using thirdweb SDK v5, which simplifies the contract representation compared to v4. The contract is represented as a ThirdwebContract object containing address, chain, and client information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/contracts/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getContract, createThirdwebClient } from \"thirdweb\";\nimport { ethereum } from \"thirdweb/chains\";\n\nconst client = createThirdwebClient({\n  clientId: process.env.NEXT_PUBLIC_TW_CLIENT_ID,\n});\n\nconst contract = getContract({\n  address: \"0x....\",\n  chain: ethereum,\n  client,\n});\n```\n\n----------------------------------------\n\nTITLE: Linking Multiple Authentication Methods to a Single User Account\nDESCRIPTION: Demonstrates how to link multiple authentication methods (Google, Telegram, Phone) to a single user account in EcosystemWallet. This enables users to access their account using different authentication methods without creating separate accounts for each method.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/ecosystem-wallet/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar ecosystemWalletMain = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", authProvider: AuthProvider.Google);\nif (!await ecosystemWalletMain.IsConnected())\n{\n    _ = await ecosystemWalletMain.LoginWithOauth(\n        isMobile: false,\n        (url) =>\n        {\n            var psi = new ProcessStartInfo { FileName = url, UseShellExecute = true };\n            _ = Process.Start(psi);\n        },\n        \"thirdweb://\",\n        new EcosystemWalletBrowser()\n    );\n}\nConsole.WriteLine($\"Main EcosystemWallet address: {await ecosystemWalletMain.GetAddress()}\");\n\n// Prepare Telegram\nvar socialWallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", authProvider: AuthProvider.Telegram);\n// Link Telegram\n_ = await ecosystemWalletMain.LinkAccount(walletToLink: socialWallet,);\n\n// Prepare Phone\nvar phoneWallet = await EcosystemWallet.Create(client: client, ecosystemId: \"ecosystem.my-ecosystem\", phoneNumber: \"+1234567890\");\n_ = await phoneWallet.SendOTP();\nvar otp = Console.ReadLine();\n// Link Phone\n_ = await ecosystemWalletMain.LinkAccount(walletToLink: phoneWallet, otp: otp);\n```\n\n----------------------------------------\n\nTITLE: Validate Signer Authorization\nDESCRIPTION: Implementation for checking if a signer is authorized to perform transactions using the wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isValidSigner(address _signer) public view virtual returns (bool) {\n    return _hasRole(SIGNER_ROLE, _signer) || _hasRole(DEFAULT_ADMIN_ROLE, _signer);\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Signer Authorization\nDESCRIPTION: Function to check if a given address is authorized to sign transactions for the wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isValidSigner(address _signer) public view virtual returns (bool) {\n    return _hasRole(SIGNER_ROLE, _signer) || _hasRole(DEFAULT_ADMIN_ROLE, _signer);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155Revealable Dependencies\nDESCRIPTION: Required imports for implementing ERC1155 with delayed reveal functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Revealable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\nimport \"@thirdweb-dev/contracts/extension/DelayedReveal.sol\";\n```\n\n----------------------------------------\n\nTITLE: Generating External Login Link with EcosystemWallet\nDESCRIPTION: Method to generate a URL that forwards the logged-in session from .NET to React applications. The generated URL allows for automatic connection when opened in a React application configured with thirdweb Connect. Requires matching ecosystem IDs, partner IDs, and API keys on both ends.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/generateexternalloginlink/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar url = await ecosystemWallet.GenerateExternalLoginLink();\n```\n\n----------------------------------------\n\nTITLE: Forcing Specific External Wallet with SiweExternal in Unity\nDESCRIPTION: Shows how to force specific external wallets when using SiweExternal authentication. The code configures InAppWalletOptions with a list of wallet IDs to be used by the authentication page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/in-app-wallet/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar inAppWalletOptions = new InAppWalletOptions(\n    authprovider: AuthProvider.SiweExternal,\n    forceSiweExternalWalletIds: new List<string> { \"xyz.abs\" });\n```\n\n----------------------------------------\n\nTITLE: Base Response Structure Interface\nDESCRIPTION: Defines the base response interface used across API endpoints with example response structure.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/llmstxt/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BaseResponse<T> {\n  data: T[];\n  meta: {\n    chain_id: number;     // Required\n    page: number;         // Required\n    limit: number;        // Required\n    total_items: number;  // Required\n    total_pages: number;  // Required\n    address?: string;     // Optional\n    signature?: string;   // Optional\n  }\n}\n\n// Example response from getting events\n{\n  \"data\": [\n    {\n      \"chain_id\": 1,\n      \"block_number\": \"17859301\",\n      \"transaction_hash\": \"0x123...\",\n      \"address\": \"0x456...\",\n      \"data\": \"0x789...\",\n      \"topics\": [\"0xabc...\"]\n    }\n  ],\n  \"meta\": {\n    \"chain_id\": 1,\n    \"page\": 0,\n    \"limit\": 20,\n    \"total_items\": 150,\n    \"total_pages\": 8\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decimal Place Adjustment in C#\nDESCRIPTION: Adjusts the decimal places of a numeric value between different scales.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nvar adjustedValue = value.AdjustDecimals(18, 6);\n```\n\n----------------------------------------\n\nTITLE: Message Hashing with Prefix in C#\nDESCRIPTION: Hashes message bytes with Ethereum signing prefix.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar hashedMessage = messageBytes.HashPrefixedMessage();\n```\n\n----------------------------------------\n\nTITLE: Implementing PlatformFee Extension\nDESCRIPTION: Example implementation of a smart contract that inherits from PlatformFee extension, showing how to override the required _canSetPlatformFeeInfo function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PlatformFee/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/PlatformFee.sol\";\n\ncontract MyContract is PlatformFee {\n    /**\n     *  We store the contract deployer's address only for the purposes of the example\n     *  in the code comment below.\n     *\n     *  Doing this is not necessary to use the `PlatformFee` extension.\n     */\n    address public deployer;\n\n    constructor() {\n        deployer = msg.sender;\n    }\n\n    /**\n     *  This function returns who is authorized to set platform fee info for your contract.\n     *\n     *  As an EXAMPLE, we'll only allow the contract deployer to set the platform fee info.\n     *\n     *  You MUST complete the body of this function to use the `PlatformFee` extension.\n     */\n    function _canSetPlatformFeeInfo() internal view virtual override returns (bool) {\n        return msg.sender == deployer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Valid Offers Solidity Interface\nDESCRIPTION: View function that returns all valid offers within a specified ID range, checking ownership and approvals.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_29\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getAllValidOffer(uint256 startId, uint256 endId) external view returns (Offer[] memory offers);\n```\n\n----------------------------------------\n\nTITLE: Permissions Extension API: revokeRole Function\nDESCRIPTION: This function revokes a role from an account. It can only be called by a holder of the admin role of the role being revoked.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Permissions/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction revokeRole(bytes32 role, address account) external;\n```\n\n----------------------------------------\n\nTITLE: Getting Claim Condition by ID in Solidity Smart Contract\nDESCRIPTION: Returns the claim condition for a given condition ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getClaimConditionById(uint256 conditionId) external view returns (ClaimCondition memory);\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Token Contract Documentation in JavaScript\nDESCRIPTION: This code snippet creates metadata for the Token contract documentation page. It sets the image title, icon, page title, and description for the contract documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/token/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Token Contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Token Contract | thirdweb\",\n\tdescription:\n\t\t\"Token contract is suited for creating a digital currency and is compliant with the ERC20 standard\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing reveal Function in ERC721Drop\nDESCRIPTION: The reveal function allows authorized addresses to reveal a batch of delayed reveal NFTs by providing the batch ID and decryption key.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/drop/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction reveal(uint256 _index, bytes calldata _key) public virtual override returns (string memory revealedURI) {\n    require(_canReveal(), \"Not authorized\");\n\n    uint256 batchId = getBatchIdAtIndex(_index);\n    revealedURI = getRevealURI(batchId, _key);\n\n    _setEncryptedData(batchId, \"\");\n    _setBaseURI(batchId, revealedURI);\n\n    emit TokenURIRevealed(_index, revealedURI);\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with External SIWE in EcosystemWallet\nDESCRIPTION: Initiates a browser-based login flow for external wallets that only support web platforms using SIWE. This example demonstrates how to handle browser opening in a Windows console application and how to specify specific wallet IDs to force the user to use.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/ecosystem-wallet/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar address = await wallet.LoginWithSiweExternal(\n    // Windows console app example, adaptable to any runtime\n    isMobile: false,\n    browserOpenAction: (url) =>\n    {\n        var psi = new ProcessStartInfo { FileName = url, UseShellExecute = true };\n        _ = Process.Start(psi);\n    },\n    forceWalletIds: new List<string> { \"io.metamask\", \"com.coinbase.wallet\", \"xyz.abs\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Express Server Directory\nDESCRIPTION: Commands to create and navigate to a new directory for the Express backend server.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir server\n$ cd server\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Custom Auth (Generic Endpoint) in EcosystemWallet for Unity\nDESCRIPTION: Shows how to authenticate using a custom auth endpoint with a payload for generic authentication systems.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/ecosystem-wallet/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar ecosystemWalletOptions = new EcosystemWalletOptions(\n    ecosystemId: \"ecosystem.your-ecosystem\", \n    authprovider: AuthProvider.AuthEndpoint, \n    jwtOrPayload: \"mypayload\"\n);\nvar options = new WalletOptions(\n    provider: WalletProvider.EcosystemWallet, \n    chainId: 1, \n    ecosystemWalletOptions: ecosystemWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Post-Claim Hook in Solidity\nDESCRIPTION: Internal function that runs after every claim operation, allowing for custom logic implementation after tokens are claimed.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _afterClaim(\n    uint256 tokenId,\n    address receiver,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Preparing Transactions with Default Values in C#\nDESCRIPTION: This method prepares a transaction for sending by setting default values for any unspecified fields such as gas limits and prices, returning the fully prepared transaction object.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/static/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction preparedTransaction = await ThirdwebTransaction.Prepare(transaction);\n```\n\n----------------------------------------\n\nTITLE: Authentication Methods for Multichain Queries\nDESCRIPTION: Demonstrates two ways to authenticate with the Insight API: using a client ID in the header or as a query parameter.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/multichain-queries/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using client ID in header\nconst headers = {\n  \"x-client-id\": \"{{clientId}}\"\n};\n\n// Or as a query parameter\nconst url = `https://insight.thirdweb.com/v1/events?chain=1&chain=137&clientId={{clientId}}`;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bundle ID in iOS Applications\nDESCRIPTION: Code snippet showing how to locate the CFBundleIdentifier in an iOS project's Info.plist file, which serves as the bundle ID for API key restrictions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/faq/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<key>CFBundleIdentifier</key>\n<string>com.example.yourproject</string>\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for JWT Auth Server in Bash\nDESCRIPTION: Commands to create a new directory for the JWT auth server project and navigate to it using command line interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-jwt-auth-server/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir jwt-auth-server\ncd jwt-auth-server\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata Configuration for In-App Wallet Documentation\nDESCRIPTION: Configures metadata for the documentation page about exporting private keys from thirdweb in-app wallets, including the page title, description, and image properties.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/export-private-key/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Export private key of In-App Wallet\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"Export private key | thirdweb In-App Wallet\",\n\tdescription:\n\t\t\"Learn how to export private keys for thirdweb in-app wallets\",\n});\n```\n\n----------------------------------------\n\nTITLE: Authentication Methods Implementation\nDESCRIPTION: Shows three different authentication methods: header-based, query parameter, and bearer token authentication.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/llmstxt/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Header Authentication\nconst headers = {\n\t\"x-client-id\": \"{{clientId}}\", // thirdweb Client ID\n};\n\n// 2. Query Parameter\nconst url = `https://{{chainId}}.insight.thirdweb.com/v1/events?clientId={{clientId}}`;\n\n// 3. Bearer Token\nconst headers = {\n\tAuthorization: \"Bearer {{jwtToken}}\",\n};\n\n// Example using fetch with header auth\nasync function getEvents() {\n\tconst response = await fetch(`https://{{chainId}}.insight.thirdweb.com/v1/events`, {\n\t\theaders: {\n\t\t\t\"x-client-id\": \"{{clientId}}\",\n\t\t},\n\t});\n\treturn await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Claim Price in Solidity\nDESCRIPTION: Internal function to collect and distribute the primary sale value of tokens being claimed.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _collectPriceOnClaim(\n    uint256 tokenId,\n    address primarySaleRecipient,\n    uint256 quantityToClaim,\n    address currency,\n    uint256 pricePerToken\n) internal virtual;\n```\n\n----------------------------------------\n\nTITLE: Sending Native Currency with Transaction in JSON\nDESCRIPTION: This JSON snippet shows how to include native currency (e.g., ETH) when making a transaction in Engine. It demonstrates setting the 'value' field in 'txOverrides' to send 0.2 ETH.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/faq/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"txOverrides\": {\n    \"value\": \"200000000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Express.js Webhook Endpoint Implementation in TypeScript\nDESCRIPTION: Full Express.js server implementation for handling webhook notifications from thirdweb Universal Bridge. It includes signature validation, timestamp checking, and response handling with proper security measures.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/webhooks/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport { isValidSignature, isExpired } from \"./webhookHelper\";\n\nconst app = express();\nconst port = 3000;\n\nconst WEBHOOK_SECRET = \"<your_webhook_auth_secret>\";\n\napp.use(bodyParser.text());\n\napp.post(\"/webhook\", (req, res) => {\n\tconst signatureFromHeader = req.header(\"X-Pay-Signature\");\n\tconst timestampFromHeader = req.header(\"X-Pay-Timestamp\");\n\n\tif (!signatureFromHeader || !timestampFromHeader) {\n\t\treturn res.status(401).send(\"Missing signature or timestamp header\");\n\t}\n\n\tif (\n\t\t!isValidSignature(\n\t\t\treq.body,\n\t\t\ttimestampFromHeader,\n\t\t\tsignatureFromHeader,\n\t\t\tWEBHOOK_SECRET,\n\t\t)\n\t) {\n\t\treturn res.status(401).send(\"Invalid signature\");\n\t}\n\n\tif (isExpired(timestampFromHeader, 300)) {\n\t\t// Assuming expiration time is 5 minutes (300 seconds)\n\t\treturn res.status(401).send(\"Request has expired\");\n\t}\n\n\t// Process the request\n\tres.status(200).send(\"Webhook received!\");\n});\n\napp.listen(port, () => {\n\tconsole.log(`Server started on http://localhost:${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Auth in TypeScript\nDESCRIPTION: Example of implementing generic authentication in a TypeScript application using custom payload and direct wallet connection.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/configuration/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet();\n\nconst account = await wallet.connect({\n\tclient,\n\tstrategy: \"auth_endpoint\",\n\t// This is the payload that is sent to the auth endpoint\n\tpayload,\n});\n\n// use the account to send transactions\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721BatchMintable Contract\nDESCRIPTION: Example implementation of a smart contract with ERC721BatchMintable functionality, showing the contract structure, constructor, and mintTo function override. The contract inherits from ERC721A, IMintableERC721, and Multicall.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721BatchMintable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC721.sol\";\nimport \"@thirdweb-dev/contracts/extension/Multicall.sol\";\n\ncontract Contract is ERC721A, IMintableERC721, Multicall {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC721A(\n            _name,\n            _symbol\n        )\n    {}\n\n    function mintTo(address to, string calldata uri) external override returns (uint256) {\n        // Your custom implementation here\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Converting thirdweb Contract to Ethers Contract\nDESCRIPTION: Shows how to convert a thirdweb contract instance to an Ethers.js contract using the ethers5Adapter.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/ethers-adapter/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ethers5Adapter } from \"thirdweb/adapters/ethers5\";\nconst ethersContract = await ethers5Adapter.contract.toEthers({\n  thirdwebContract,\n});\n```\n\n----------------------------------------\n\nTITLE: URI Function Implementation\nDESCRIPTION: Returns the metadata URI for a given tokenId by combining the base URI with the tokenId.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/lazy-mint/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction uri(uint256 _tokenId) public view virtual override returns (string memory) {\n    string memory batchUri = _getBaseURI(_tokenId);\n    return string(abi.encodePacked(batchUri, _tokenId.toString()));\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721Revealable Dependencies in Solidity\nDESCRIPTION: Import statements for the ERC721 and DelayedReveal contracts from the thirdweb-dev library. These imports are necessary to create an ERC721Revealable contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Revealable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/ERC721.sol\";\nimport \"@thirdweb-dev/contracts/extension/DelayedReveal.sol\";\n```\n\n----------------------------------------\n\nTITLE: Migrating Wallet Connection in Unity SDK\nDESCRIPTION: Illustrates the changes in wallet connection process from v4 to v5. In v5, wallet management is more modular, allowing connection to multiple wallets simultaneously.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/migration-guide/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Unity v4\nvar connection = new WalletConnection(..);\nvar address = await ThirdwebManager.Instance.SDK.Wallet.Connect(connection);\n\n// Unity v5\nvar options = new WalletOptions(..);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n// or instantiate the wallet directly with .NET SDK\nvar wallet = await PrivateKeyWallet.Create(..);\n\n// Extensions for common wallet operations are available\nvar address = await wallet.GetAddress();\n```\n\n----------------------------------------\n\nTITLE: Set Owner Function\nDESCRIPTION: External function to set a new owner for the contract, requires authorization check through _canSetOwner\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Ownable/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setOwner(address _newOwner) external;\n```\n\n----------------------------------------\n\nTITLE: Using Context Filters with Chain IDs and Wallet Address in JSX\nDESCRIPTION: This example demonstrates how to structure context filters to focus AI on specific blockchain networks and wallet addresses. It shows the JSON structure for specifying Ethereum mainnet (chain ID 1) and a specific wallet address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/key-concepts/context-filters/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  \"context\": {\n    \"chain_ids\": [\"1\"],  // Ethereum network\n    \"wallet_address\": \"0x123...abc\"  // Specific wallet to analyze\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Byte Array to Hex Conversion in C#\nDESCRIPTION: Converts a byte array to a hexadecimal string representation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar hexString = byteArray.BytesToHex();\n```\n\n----------------------------------------\n\nTITLE: Importing PermissionsEnumerable Extension\nDESCRIPTION: Import statement for including the PermissionsEnumerable contract extension from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PermissionsEnumerable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/PermissionsEnumerable.sol\";\n```\n\n----------------------------------------\n\nTITLE: Approving Buyer for Reserved Listing\nDESCRIPTION: Function to approve specific buyers for reserved listings, allowing listing creators to control who can purchase.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction approveBuyerForListing(\n    uint256 listingId,\n    address buyer,\n    bool toApprove\n) external;\n```\n\n----------------------------------------\n\nTITLE: Setting Chain ID in C#\nDESCRIPTION: Sets the chain ID for the transaction using SetChainId method. Takes a BigInteger as input.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/instance/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction transaction = transaction.SetChainId(1);\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Deploy Contract Documentation\nDESCRIPTION: This snippet defines the metadata for the deploy contract documentation page. It sets the title, description, and image properties for the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/deploy/deploy-contract/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"Deploy Contract | thirdweb deploy\",\n\tdescription: \"deploy a contract using Deploy using thirdweb deploy CLI\",\n\timage: {\n\t\ttitle: \"Deploy Contract\",\n\t\ticon: \"contract\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Approving Currency for Listing\nDESCRIPTION: Function to approve additional currencies as payment methods for a listing, with specific pricing per token.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction approveCurrencyForListing(\n    uint256 listingId,\n    address currency,\n    uint256 pricePerTokenInCurrency,\n) external;\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Connection UI\nDESCRIPTION: Example of implementing wallet connection using the ConnectButton component\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/getting-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/app.tsx\nimport { client }  from \"./client\";\nimport { ConnectButton } from 'thirdweb/react';\n\nfunction App() {\n  return (\n    <div>\n      <ConnectButton client={client} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying NFT Drop Contract via CLI\nDESCRIPTION: Command line instruction for deploying an NFT Drop contract using thirdweb CLI\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/nft-drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb deploy -n --name nft-drop\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SiweExternal in EcosystemWallet for Unity\nDESCRIPTION: Demonstrates how to authenticate using SiweExternal, which opens a browser with a thirdweb React page for authentication before redirecting back to the game.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/ecosystem-wallet/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar ecosystemWalletOptions = new EcosystemWalletOptions(ecosystemId: \"ecosystem.your-ecosystem\", authprovider: AuthProvider.SiweExternal)\nvar options = new WalletOptions(\n    provider: WalletProvider.EcosystemWallet,\n    chainId: 421614,\n    ecosystemWalletOptions: ecosystemWalletOptions\n);\nvar wallet = await ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: PrimarySaleRecipient View Function\nDESCRIPTION: Function to view the current primary sale recipient address stored in the contract\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PrimarySale/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction primarySaleRecipient() public view returns (address);\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Costs using ThirdwebTransaction in C#\nDESCRIPTION: This method estimates the gas costs required for a transaction. It returns a TotalCosts object containing the costs in both ether and wei.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/static/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTotalCosts gasCosts = await ThirdwebTransaction.EstimateGasCosts(transaction);\n```\n\n----------------------------------------\n\nTITLE: Server Verifier Response Format in TypeScript\nDESCRIPTION: Expected JSON response format that your server verifier should return to thirdweb. The response should include a boolean indicating whether the transaction should be sponsored and an optional reason if it's not allowed.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/sponsorship-rules/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// You should respond with the following JSON payload\n{\n\tisAllowed: boolean; // whether the transaction should be sponsored or not\n\treason: string?; // optional reason for why the transaction is not allowed\n}\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb and wagmi adapter packages\nDESCRIPTION: Command to install the thirdweb core library and the wagmi adapter package, which allows integration of thirdweb in-app, ecosystem, and smart wallets with wagmi applications.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/adapters/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install thirdweb @thirdweb-dev/wagmi-adapter\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, pnpm, or bun). After running any of these commands, you can view your application at http://localhost:3000.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/login/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: PlatformFee API - _setupPlatformFeeInfo\nDESCRIPTION: Internal function to set platform fee recipient and basis points without authorization check.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PlatformFee/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setupPlatformFeeInfo(address platformFeeRecipient, uint256 platformFeeBps) internal;\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Metadata for thirdweb Infrastructure Documentation\nDESCRIPTION: Sets up metadata for the thirdweb Infrastructure documentation page using Next.js metadata API. Includes title, description, and image configuration for the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Infrastructure\",\n\t\ticon: \"infra\",\n\t},\n\ttitle: \"thirdweb Infrastructure\",\n\tdescription:\n\t\t\"All the infrastructure to scale and build production grade applications\",\n});\n```\n\n----------------------------------------\n\nTITLE: API Key Option\nDESCRIPTION: CLI option to provide an API key\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/reference/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n-k--key <string>\n```\n\n----------------------------------------\n\nTITLE: Transfer Claimed Tokens Function\nDESCRIPTION: Internal function to handle the transfer of claimed tokens to the recipient.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transferTokensOnClaim(address to, uint256 quantityBeingClaimed)\n    internal\n    virtual\n    returns (uint256 startTokenId);\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155LazyMint Contract\nDESCRIPTION: Import statement for the ERC1155LazyMint base contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/lazy-mint/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC1155LazyMint.sol\";\n```\n\n----------------------------------------\n\nTITLE: Implementing React Native Adapter\nDESCRIPTION: Example of importing and implementing the React Native adapter in the app entry point\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/getting-started/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// file: App.tsx\n\n// this needs to be imported before anything else\nimport \"@thirdweb-dev/react-native-adapter\";\n// ... the rest of your app\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Core Contract Structure\nDESCRIPTION: Initial setup of the CounterCore contract, inheriting from the Core contract and initializing the owner.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-core-contract/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {Core} from \"@thirdweb-dev/src/Core.sol\";\nimport {BeforeIncrementCallback} from \"./interface/BeforeIncrementCallback.sol\";\n\ncontract CounterCore is Core {\n    constructor(address owner) {\n        _initializeOwner(owner);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DelayedReveal Extension in ERC721 Contract\nDESCRIPTION: Demonstrates a full example of implementing the DelayedReveal extension in an ERC721 contract, including custom lazyMint, tokenURI, and reveal functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DelayedReveal/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC721LazyMint.sol\";\nimport \"@thirdweb-dev/contracts/extension/DelayedReveal.sol\";\n\n/// This is just an EXAMPLE contract that uses `DelayedReveal`.\n\ncontract MyContract is ERC721LazyMint, DelayedReveal {\n    using TWStrings for uint256;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC721LazyMint(_name, _symbol, _royaltyRecipient, _royaltyBps) {}\n\n    /**\n     *  We override the `lazyMint` function, and use the `_data` parameter for storing encrypted metadata\n     *  for 'delayed reveal' NFTs.\n     */\n    function lazyMint(\n        uint256 _amount,\n        string calldata _baseURIForTokens,\n        bytes calldata _data\n    ) public override returns (uint256 batchId) {\n        if (_data.length > 0) {\n            (bytes memory encryptedURI, bytes32 provenanceHash) = abi.decode(\n                _data,\n                (bytes, bytes32)\n            );\n            if (encryptedURI.length != 0 && provenanceHash != \"\") {\n                _setEncryptedData(nextTokenIdToLazyMint + _amount, _data);\n            }\n        }\n\n        return super.lazyMint(_amount, _baseURIForTokens, _data);\n    }\n\n    /**\n     *  We override `tokenURI` to return an appropriate URI for NFTs whose true metadata is encrypted.\n     */\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        (uint256 batchId, ) = _getBatchId(_tokenId);\n        string memory batchUri = _getBaseURI(_tokenId);\n\n        if (isEncryptedBatch(batchId)) {\n            return string(abi.encodePacked(batchUri, \"0\"));\n        } else {\n            return string(abi.encodePacked(batchUri, _tokenId.toString()));\n        }\n    }\n\n    /**\n     *  We only let the owner of the contract reveal the metadata for a batch of NFTs.\n     */\n    function reveal(uint256 _index, bytes calldata _key)\n        external\n        override\n        returns (string memory revealedURI)\n    {\n        require(msg.sender == owner(), \"Not authorized\");\n\n        uint256 batchId = getBatchIdAtIndex(_index);\n        revealedURI = getRevealURI(batchId, _key);\n\n        _setEncryptedData(batchId, \"\");\n        _setBaseURI(batchId, revealedURI);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb-ai Python SDK with pip\nDESCRIPTION: Shows how to install the thirdweb-ai Python SDK using pip. It includes options for installing the core package with all framework adapters or specific framework adapters like OpenAI, LangChain, Coinbase Agentkit, and GOAT SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/tools/python-sdk/installation/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install core package with all framework adapters\npip install \"thirdweb-ai[all]\"\n\n# Or install with specific framework adapters\npip install \"thirdweb-ai[openai]\"    # For OpenAI Agents\npip install \"thirdweb-ai[langchain]\" # For LangChain\npip install \"thirdweb-ai[agentkit]\" # For Coinbase Agentkit\npip install \"thirdweb-ai[goat]\" # For GOAT SDK\n# ... many more framework supported\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721Base Contract\nDESCRIPTION: Shows how to import the ERC721Base contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/base/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC721Base.sol\";\n```\n\n----------------------------------------\n\nTITLE: Passkey Authentication in React\nDESCRIPTION: This code shows how to implement passkey authentication in a React application, including checking for existing passkeys and handling both sign-up and sign-in scenarios.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/build-your-own-ui/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet, hasStoredPasskey } from \"thirdweb/wallets/in-app\";\n\nconst { connect } = useConnect();\n\nconst handleLogin = async () => {\n\tawait connect(async () => {\n\t\tconst wallet = inAppWallet();\n\t\tconst hasPasskey = await hasStoredPasskey(client);\n\t\tawait wallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"passkey\",\n\t\t\ttype: hasPasskey ? \"sign-in\" : \"sign-up\",\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Creating ManagedAccountFactory Using CLI\nDESCRIPTION: Command to create a new ManagedAccountFactory contract using thirdweb CLI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account-factory/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create contract\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for thirdweb\nDESCRIPTION: Example of how to set up the necessary environment variable for the thirdweb secret key.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nTHIRDWEB_SECRET_KEY=your_thirdweb_secret_key\n```\n\n----------------------------------------\n\nTITLE: Initializing ThirdwebInsight Instance\nDESCRIPTION: Creates a new instance of ThirdwebInsight using the client object.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/insight/quickstart/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Thirdweb.Indexer;\n\n// Create a ThirdwebInsight instance\nvar insight = await ThirdwebInsight.Create(client);\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721Permit Interface in Solidity\nDESCRIPTION: This snippet shows how to import the IERC20Permit interface from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20Permit/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/interface/IERC20Permit.sol\";\n```\n\n----------------------------------------\n\nTITLE: TokenURI Function Implementation\nDESCRIPTION: Implementation of tokenURI function that returns metadata URI for an NFT, handling both encrypted and unencrypted batch scenarios.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/delayed-reveal/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenURI(uint256 _tokenId) public view override returns (string memory) {\n    (uint256 batchId, ) = _getBatchId(_tokenId);\n    string memory batchUri = _getBaseURI(_tokenId);\n\n    if (isEncryptedBatch(batchId)) {\n        return string(abi.encodePacked(batchUri, \"0\"));\n    } else {\n        return string(abi.encodePacked(batchUri, _tokenId.toString()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to IPFS Using Thirdweb CLI\nDESCRIPTION: Command to upload a specific file to IPFS decentralized storage using the thirdweb CLI tool. This example shows how to upload a PNG file to IPFS.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/upload/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb upload <path/to/file.png>\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721BatchMintable Dependencies\nDESCRIPTION: Core imports required for implementing the ERC721BatchMintable functionality, including the base ERC721 contract and necessary extensions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721BatchMintable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/eip/ERC721.sol\"\nimport \"@thirdweb-dev/contracts/extension/multicall.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC721.sol\";\n```\n\n----------------------------------------\n\nTITLE: Basic BatchMintMetadata Implementation\nDESCRIPTION: Example contract showing how to inherit from the BatchMintMetadata extension.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/BatchMintMetadata/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/BatchMintMetadata.sol\";\n\ncontract MyContract is BatchMintMetadata {}\n```\n\n----------------------------------------\n\nTITLE: Checking Wallet Balance\nDESCRIPTION: Shows how to retrieve the wallet balance for a specific account and chain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/guides/interact-with-accounts/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait getWalletBalance({\n\tclient,\n\tchain,\n\taddress: account.address,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Timeout in JSON for Engine\nDESCRIPTION: This JSON snippet demonstrates how to set a timeout for transactions in Engine. It uses the 'timeoutSeconds' field in 'txOverrides' to specify a 2-hour timeout period.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/faq/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"txOverrides\": {\n    \"timeoutSeconds\": 7200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721ClaimConditions Dependencies in Solidity\nDESCRIPTION: Import statements for the ERC721 and DropSinglePhase extensions, which are required to implement the ERC721ClaimConditions functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721ClaimConditions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/ERC721.sol\";\nimport \"@thirdweb-dev/contracts/extension/DropSinglePhase.sol\";\n```\n\n----------------------------------------\n\nTITLE: PlatformFee API - _canSetPlatformFeeInfo\nDESCRIPTION: Internal virtual function that determines authorization for setting platform fee information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PlatformFee/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSetPlatformFeeInfo() internal view virtual returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Verifying Claims in Solidity\nDESCRIPTION: Function to verify a claim request against the active claim condition's criteria. It includes parameters for condition ID, claimer, token ID, quantity, currency, price, and allowlist proof.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nstruct AllowlistProof {\n    bytes32[] proof;\n    uint256 quantityLimitPerWallet;\n    uint256 pricePerToken;\n    address currency;\n}\n\nfunction verifyClaim(\n    uint256 conditionId,\n    address claimer,\n    uint256 tokenId,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof\n) public view returns (bool isOverride);\n```\n\n----------------------------------------\n\nTITLE: Disabling Buy With Fiat Payment Option\nDESCRIPTION: This snippet demonstrates how to disable the fiat payment option in the PayEmbed component, which limits users to only crypto payment methods for purchasing onchain goods or services.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/payembed/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<PayEmbed\n\tclient={client}\n\tpayOptions={{\n\t\tbuyWithFiat: false,\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Implementation\nDESCRIPTION: Example showing how to create a custom managed account contract by inheriting from AccountExtension.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/AccountExtension/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/smart-wallet/utils/AccountExtension.sol\";\n\ncontract MyManagedAccount is AccountExtension { ... }\n```\n\n----------------------------------------\n\nTITLE: Initializing API Base URL Configuration\nDESCRIPTION: Basic configuration for the API base URL using chain ID in the subdomain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/llmstxt/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseUrl = `https://{{chainId}}.insight.thirdweb.com`;\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Price in C#\nDESCRIPTION: Sets the gas price for a legacy transaction using SetGasPrice method. Takes a BigInteger as input.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/instance/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction transaction = transaction.SetGasPrice(1000000000);\n```\n\n----------------------------------------\n\nTITLE: Permissions Extension API: getRoleAdmin Function\nDESCRIPTION: This function returns the admin role that controls a given role. The holders of the admin role can grant or revoke the specified role from wallets.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Permissions/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRoleAdmin(bytes32 role) external view returns (bytes32);\n```\n\n----------------------------------------\n\nTITLE: Using Provided Theme Options\nDESCRIPTION: This snippet shows how to set the theme for the Universal Bridge component using the built-in 'light' or 'dark' theme options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/connectbutton/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton theme='light' />\n\n<ConnectButton theme='dark' />\n```\n\n----------------------------------------\n\nTITLE: getRoleMember Function Definition\nDESCRIPTION: Function to get an account that has a specific role at a given index. Returns one of the accounts that have the specified role.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PermissionsEnumerable/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getRoleMember(bytes32 role, uint256 index) external view returns (address member);\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20Vote Token\nDESCRIPTION: Example implementation of a custom token contract inheriting from ERC20Vote. Shows constructor setup with admin, name, and symbol parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/vote/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC20Vote.sol\";\n\ncontract MyToken is ERC20Vote {\n\t  constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol\n    )\n        ERC20Vote(\n            _defaultAdmin,\n            _name,\n            _symbol\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foundry for Modular Contracts\nDESCRIPTION: Adding thirdweb modular contracts remapping to the foundry.toml configuration file.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-core-contract/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nremappings = ['@thirdweb-dev=lib/modular-contracts/']\n```\n\n----------------------------------------\n\nTITLE: Getting Auction Details by ID with Auction Struct\nDESCRIPTION: The getAuction function returns detailed information about an auction using the Auction struct, which includes all configuration parameters, auction status, and token type information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Auction {\n  uint256 auctionId;\n  address auctionCreator;\n  address assetContract;\n  uint256 tokenId;\n  uint256 quantity;\n  address currency;\n  uint256 minimumBidAmount;\n  uint256 buyoutBidAmount;\n  uint64 timeBufferInSeconds;\n  uint64 bidBufferBps;\n  uint64 startTimestamp;\n  uint64 endTimestamp;\n  TokenType tokenType;\n  Status status;\n}\n\nfunction getAuction(uint256 auctionId) external view returns (Auction memory auction);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Contract Extensions Usage in C#\nDESCRIPTION: This snippet compares traditional contract interactions with the simplified extensions provided by Thirdweb. It shows examples of writing to and reading from contracts, as well as generating low-level calldata.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/contracts/extensions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Write without extensions\nvar receiver = await wallet.GetAddress();\nvar quantity = BigInteger.One;\nvar currency = Constants.NATIVE_TOKEN_ADDRESS;\nvar pricePerToken = BigInteger.Zero;\nvar allowlistProof = new object[] { new byte[] { }, BigInteger.Zero, BigInteger.Zero, Constants.ADDRESS_ZERO };\nvar data = new byte[] { };\nvar receipt = await contract.Write(smartAccount, contract, \"claim\", 0, receiver, quantity, currency, pricePerToken, allowlistProof, data);\n\n// Write with extensions\nvar receipt = await contract.DropERC20_Claim(wallet, receiver, amount);\n\n// Read without extensions\nvar balance = await contract.Read<string>(\"balanceOf\", \"0xOwnerAddress\");\n\n// Read with extensions\nvar balance = await contract.ERC20_BalanceOf(\"0xOwnerAddress\");\n\n// Generate low level calldata\nvar calldata = contract.CreateCallData(\"myFunction\", param1, param2);\n```\n\n----------------------------------------\n\nTITLE: Preventing Smart Contract Interactions in Solidity\nDESCRIPTION: This code snippet ensures that only external accounts (EOAs) can open packs, preventing potential exploits from smart contracts predicting random numbers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/pack/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nrequire(isTrustedForwarder(msg.sender) || _msgSender() == tx.origin, \"opener cannot be smart contract\");\n```\n\n----------------------------------------\n\nTITLE: Installing Thirdweb .NET Package\nDESCRIPTION: Command to install the Thirdweb SDK package via NuGet package manager in a .NET project.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/getting-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Thirdweb\n```\n\n----------------------------------------\n\nTITLE: Address Resolution from ENS in C#\nDESCRIPTION: Fetches the wallet address associated with an ENS name using the Thirdweb client.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar address = await Utils.GetAddressFromENS(client, ensName);\n```\n\n----------------------------------------\n\nTITLE: Complete PrivateKeyWallet Usage Example in C#\nDESCRIPTION: Comprehensive example showing how to create a PrivateKeyWallet, get the wallet address, and sign a message. Demonstrates client initialization, wallet creation, and message signing functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/private-key/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = ThirdwebClient.Create(\"yourClientId\");\nvar privateKeyHex = \"yourPrivateKeyHex\"; // Should be securely stored and accessed\nvar wallet = await PrivateKeyWallet.Create(client, privateKeyHex);\n\nConsole.WriteLine($\"PrivateKeyWallet address: {await wallet.GetAddress()}\");\n\n// Sign a message\nvar message = \"Hello, Thirdweb!\";\nvar signature = await wallet.PersonalSign(message);\nConsole.WriteLine($\"Signature: {signature}\");\n```\n\n----------------------------------------\n\nTITLE: Using RainbowKit ConnectButton\nDESCRIPTION: Example of importing and using the ConnectButton component from RainbowKit.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\n\nexport const YourApp = () => {\n  return <ConnectButton />;\n};\n```\n\n----------------------------------------\n\nTITLE: Example Response for Multichain Query\nDESCRIPTION: This JSON shows the expected response structure when querying events across multiple chains. The metadata includes a chain_ids array listing the queried chains, and each data item includes its specific chain_id for identification.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/get-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"chain_ids\": [1, 137],\n    \"total_items\": 10,\n    \"limit_per_chain\": 5,\n    \"page\": 0,\n    \"limit\": 10,\n    \"total_pages\": 1\n  },\n  \"data\": [\n    {\n      \"chain_id\": 1,\n      \"block_number\": 14705663,\n      // ... other Ethereum event data\n    },\n    {\n      \"chain_id\": 137,\n      \"block_number\": 25631042,\n      // ... other Polygon event data\n    }\n    // ... more events from both chains\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Resolver\nDESCRIPTION: Metro configuration setup for proper package exports resolution\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/getting-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// file: metro.config.js\n\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require(\"expo/metro-config\");\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\n// ADD THESE 2 PROPERTIES\nconfig.resolver.unstable_enablePackageExports = true;\nconfig.resolver.unstable_conditionNames = [\n\t\"react-native\",\n\t\"browser\",\n\t\"require\",\n];\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Contract URI Permission Check\nDESCRIPTION: Internal function to check if caller can set contract URI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/AccountExtension/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSetContractURI() internal view virtual override returns (bool) {\n    return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\n}\n```\n\n----------------------------------------\n\nTITLE: Can Set Owner Check Function\nDESCRIPTION: Virtual function that must be implemented to define authorization logic for setting new owner\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Ownable/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSetOwner() internal view virtual returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155Staking Contract in Solidity\nDESCRIPTION: This snippet shows how to import the Staking1155 contract from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Staking/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/Staking1155.sol\";\n```\n\n----------------------------------------\n\nTITLE: Using Secret Key in Header for Backend Calls\nDESCRIPTION: Example showing how to pass the thirdweb secret key via HTTP header for backend usage, allowing you to omit the client ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/infrastructure/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nx-secret-key: <your_thirdweb_secret_key>\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20Base Contract\nDESCRIPTION: Basic import statement for the ERC20Base smart contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/base/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC20Base.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155 Contract in Solidity\nDESCRIPTION: This snippet shows how to import the ERC1155 contract from the thirdweb contracts library. It's the first step in using the ERC1155 standard in your smart contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing ManagedAccountFactory Contract\nDESCRIPTION: Shows how to import the ManagedAccountFactory contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account-factory/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/smart-wallet/managed/ManagedAccountFactory.sol\";\n```\n\n----------------------------------------\n\nTITLE: Get Implementation For Function\nDESCRIPTION: Implementation for retrieving the extension implementation address for a given function selector.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getImplementationForFunction(bytes4 _functionSelector) public view virtual override returns (address) {\n    address impl = getExtensionForFunction(_functionSelector).implementation;\n    return impl != address(0) ? impl : defaultExtension;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Supply Claimed by Wallet in Solidity\nDESCRIPTION: Function to get the number of tokens claimed by a wallet under a specific condition for a given token ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getSupplyClaimedByWallet(uint256 tokenId, uint256 conditionId, address claimer) public view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication Flow Implementation\nDESCRIPTION: Example showing how to implement the OAuth authentication flow with EcosystemWallet in different application types.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/providers/ecosystem-wallet/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Windows console app example\nvar address = await ecosystemWallet.LoginWithOauth(\n    isMobile: false,\n    browserOpenAction: (url) =>\n    {\n        var psi = new ProcessStartInfo { FileName = url, UseShellExecute = true };\n        _ = Process.Start(psi);\n    },\n);\n// Godot standalone example\nvar address = await ThirdwebManager.Instance.EcosystemWallet.LoginWithOauth(\n        isMobile: OS.GetName() == \"Android\" || OS.GetName() == \"iOS\",\n        browserOpenAction: (url) => OS.ShellOpen(url),\n        mobileRedirectScheme: \"thirdweb://\"\n);\n\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Target Address in C#\nDESCRIPTION: Sets the target address or contract for the transaction using SetTo method. Takes a hexadecimal string address as input.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/instance/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction transaction = transaction.SetTo(\"0xToAddress\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for ERC1155 Staking Contract Documentation\nDESCRIPTION: Sets up metadata configuration for the contract documentation page including title, description, and image properties using the createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/stake-erc1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Stake ERC1155 contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Stake ERC1155 contract | thirdweb\",\n\tdescription: `This contract allows users to stake their ERC-1155 NFTs and get ERC-20 tokens as staking rewards`,\n});\n```\n\n----------------------------------------\n\nTITLE: Ether to Wei Conversion in C#\nDESCRIPTION: Converts Ether values to Wei denomination.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar weiValue = ethValue.ToWei();\n```\n\n----------------------------------------\n\nTITLE: Connecting InAppWallet with Phone Authentication in Unity\nDESCRIPTION: Shows how to connect a wallet using phone number authentication with the InAppWallet provider. The code creates InAppWalletOptions with a phone number, sets up WalletOptions, and connects the wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/wallets/in-app-wallet/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar inAppWalletOptions = new InAppWalletOptions(phoneNumber: \"+1234567890\");\nvar options = new WalletOptions(\n    provider: WalletProvider.InAppWallet, \n    chainId: 1, \n    inAppWalletOptions: inAppWalletOptions\n);\nvar wallet = await ThirdwebManager.Instance.ConnectWallet(options);\n```\n\n----------------------------------------\n\nTITLE: Using Client ID in Header with thirdweb\nDESCRIPTION: Example showing how to pass the thirdweb client ID via HTTP header as an alternative to including it in the URL.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/infrastructure/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nx-client-id: <your_thirdweb_client_id>\n```\n\n----------------------------------------\n\nTITLE: TokenURI Implementation\nDESCRIPTION: Function that returns the metadata URI for an NFT token.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/lazy-mint/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\n    string memory batchUri = _getBaseURI(_tokenId);\n    return string(abi.encodePacked(batchUri, _tokenId.toString()));\n}\n```\n\n----------------------------------------\n\nTITLE: SDK Initialization Comparison\nDESCRIPTION: Illustrates the change in SDK initialization syntax between versions\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/cheatsheet/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew ThirdwebSDK(...)\n// vs\ncreateThirdwebClient({ ... })\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Setup for Account Abstraction\nDESCRIPTION: Environment variables needed for the script, including the thirdweb secret key and a test wallet private key.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/account-abstraction/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTHIRDWEB_SECRET_KEY=<YOUR_SECRET_KEY>\nPRIVATE_KEY=<A_TEST_WALLET_PRIVATE_KEY>\n```\n\n----------------------------------------\n\nTITLE: Setup Owner Internal Function\nDESCRIPTION: Internal function to set the contract owner without authorization check\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Ownable/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setupOwner(address _newOwner) internal;\n```\n\n----------------------------------------\n\nTITLE: Hex to Byte Array Conversion in C#\nDESCRIPTION: Converts a hexadecimal string to a byte array.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar byteArray = hexString.HexToBytes();\n```\n\n----------------------------------------\n\nTITLE: Accessing the Connected Wallet Account\nDESCRIPTION: Code snippet showing how to access the connected wallet account using the useActiveAccount hook from thirdweb.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/firebase-auth/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useActiveAccount } from \"thirdweb/react\";\n\nconst activeWallet = useActiveAccount();\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155Enumerable Interface\nDESCRIPTION: Import statement for the IERC1155Enumerable interface from thirdweb contracts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Enumerable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/interface/IERC1155Enumerable.sol\";\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb Dependencies with Project Path and Options\nDESCRIPTION: Command with path parameter and options to install thirdweb dependencies into a specific project. Supports options for different package versions and debugging.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/install/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb install <projectpath> [options]\n```\n\n----------------------------------------\n\nTITLE: Setting Modal Size in RainbowKit\nDESCRIPTION: Example of setting modal size for RainbowKit.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<RainbowKitProvider\n  modalSize=\"compact\"\n  {...etc}>\n  {/* Your App */}\n</RainbowKitProvider>\n```\n\n----------------------------------------\n\nTITLE: Pagination and Limits in Multichain Queries\nDESCRIPTION: Explains how the limit parameter applies to each chain individually in multichain queries, potentially returning multiple times the specified limit across all chains.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/multichain-queries/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// This will return up to 20 items from each chain (potentially 40 total items)\nconst url = `https://insight.thirdweb.com/v1/events?chain=1&chain=137&limit=20`;\n```\n\n----------------------------------------\n\nTITLE: Publishing Smart Contracts with thirdweb CLI\nDESCRIPTION: The main command to publish smart contracts using thirdweb CLI. This command compiles the smart contract, uploads the ABI to IPFS, and opens the publish flow in the dashboard.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/reference/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb publish\n```\n\n----------------------------------------\n\nTITLE: Initializing an Account\nDESCRIPTION: Shows the signature of the _initializeAccount function, which is called in createAccount to initialize the newly created account contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWalletFactory/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initializeAccount(\n    address _account,\n    address _admin,\n    bytes calldata _data\n) internal virtual;\n```\n\n----------------------------------------\n\nTITLE: Importing Permissions Extension in Solidity\nDESCRIPTION: This snippet shows how to import the Permissions extension from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Permissions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/Permissions.sol\";\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Claims in Solidity\nDESCRIPTION: Function to verify a claim request against the active claim condition's criteria. It checks various parameters including token ID, claimer address, quantity, currency, price, and allowlist proof.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nstruct AllowlistProof {\n    bytes32[] proof;\n    uint256 quantityLimitPerWallet;\n    uint256 pricePerToken;\n    address currency;\n}\n\nfunction verifyClaim(\n    uint256 tokenId,\n    address claimer,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof\n) public view returns (bool isOverride);\n```\n\n----------------------------------------\n\nTITLE: Getting the Address of a Potential Account\nDESCRIPTION: Implements the getAddress function, which returns the address of an Account that would be deployed with the given admin signer.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWalletFactory/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getAddress(address _adminSigner) public view returns (address) {\n    bytes32 salt = _generateSalt(_admin, _data);\n    return Clones.predictDeterministicAddress(accountImplementation, salt);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb SDK\nDESCRIPTION: Commands for installing the thirdweb SDK using different package managers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/getting-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i thirdweb\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add thirdweb\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm i thirdweb\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun i thirdweb\n```\n\n----------------------------------------\n\nTITLE: Querying ERC-721 Token Balances - YAML API Endpoint\nDESCRIPTION: API endpoint for retrieving ERC-721 NFT token balances for a specific wallet address. Requires client ID and owner address as parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/blueprints/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nGET /v1/{clientId}/tokens/erc721/:ownerAddress\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"collectionAddress\": \"…\",\n    \"tokenId\": \"…\",\n    \"balance\": \"…\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Processing Server Verifier Request Payload in TypeScript\nDESCRIPTION: Example of the JSON payload that thirdweb will send to your server verifier endpoint as a POST request. The payload includes information about the client, chain, and transaction details such as sender address, target contracts, gas limits, and call data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/sponsorship-rules/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// thirdweb will call your server with the following JSON body as a POST request\n{\n\tclientId: string; // the clientId that is making the request\n\tchainId: number; // the chainId of the transaction\n\tuserOp: {\n\t\tsender: string; // the address of the sender\n  \t\ttargets: string[]; // the addresses of the target contracts or wallets\n  \t\tgasLimit: string; // the gas limit of the transaction\n  \t\tgasPrice: string; // the gas price of the transaction in wei\n                data: {\n\t\t  targets: string[], // the targets contracts or wallets called in this operation\n\t\t  callDatas: string[], // the call data of each transaction\n\t\t  values: string[], // the values (in wei) of each transaction\n                }\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721LazyMint Contract\nDESCRIPTION: Shows how to import the ERC721LazyMint contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/lazy-mint/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC721LazyMint.sol\";\n```\n\n----------------------------------------\n\nTITLE: Setting Android Minimum SDK Version in Expo\nDESCRIPTION: JSON configuration for app.json to set the minimum Android SDK version using expo-build-properties plugin.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/troubleshooting/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      \"expo-build-properties\",\n      {\n        \"android\": {\n            \"minSdkVersion\": 26\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Entry Point Getter\nDESCRIPTION: Implementation for retrieving the entry point contract address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction entryPoint() public view virtual override returns (IEntryPoint) {\n    return entrypointContract;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenSourceCard in JSX\nDESCRIPTION: This snippet shows how to use the OpenSourceCard component. It takes a title and href prop to display information about an open-source project or resource.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/cards/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<OpenSourceCard title=\"LoremIpsum\" href=\"/\" />\n```\n\n----------------------------------------\n\nTITLE: Token Balance API Endpoints Reference\nDESCRIPTION: Provides reference documentation for the Token Balance API endpoints, including interfaces for ERC20, ERC721, and ERC1155 token balance responses.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. ERC20 Balances\nGET /v1/tokens/erc20/:ownerAddress\n\ninterface ERC20Response {\n  data: {\n    tokenAddress: string;  // Required\n    balance: string;      // Required\n  }[];\n}\n\n// 2. ERC721 & ERC1155 Balances\nGET /v1/tokens/erc721/:ownerAddress\nGET /v1/tokens/erc1155/:ownerAddress\n\ninterface TokenBalanceResponse {\n  data: {\n    collectionAddress: string;  // Required\n    tokenId: string;           // Required\n    balance: string;           // Required\n  }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Account Factory Contract Documentation\nDESCRIPTION: This code snippet creates metadata for the Account Factory contract documentation page. It sets the title, description, and image properties for the documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/account-factory/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Account Factory Contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Account Factory Contract | thirdweb\",\n\tdescription:\n\t\t\"Account Factory contract is used to deploy immutable ERC-4337 smart accounts with role based permission control\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721Permit in a Custom ERC20 Contract\nDESCRIPTION: This example demonstrates how to create a custom ERC20 contract that implements the IERC20Permit interface. It includes the contract structure and function signatures that need to be implemented.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20Permit/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/openzeppelin-presets/token/ERC20/ERC20.sol\";\nimport \"@thirdweb-dev/contracts/eip/interface/IERC20Permit.sol\";\n\ncontract Contract is ERC20, IERC20Permit {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC20(\n            _name,\n            _symbol\n        )\n    {}\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        // Your custom implementation here\n    }\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256) {\n        // Your custom implementation here\n    }\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\n        // Your custom implementation here\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration Setup\nDESCRIPTION: TypeScript code that sets up the documentation metadata configuration using createMetadata function. It defines the title, description, and visual elements for the documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-721/metadata/delayedRevealBatchMetadataERC721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Running thirdweb MCP Server with pipx in Bash\nDESCRIPTION: This snippet shows how to install the thirdweb MCP server using pipx and then run it. It requires setting the THIRDWEB_SECRET_KEY environment variable.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/mcp-server/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npipx install thirdweb-mcp\n\nTHIRDWEB_SECRET_KEY=... \\\n    thirdweb-mcp\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Bound Account\nDESCRIPTION: Example of creating a token bound account by inheriting from ManagedAccount contract and implementing the constructor.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/smart-wallet/managed/ManagedAccount.sol\";\n\ncontract ManagedTokenBoundAccount is ManagedAccount {\n    constructor(\n        IEntryPoint _entrypoint\n    )\n        ManagedAccount(\n            _entrypoint\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Base Response Structure for Insight API Requests\nDESCRIPTION: Defines the standard response structure for thirdweb Insight API requests, including the data array and metadata containing pagination information and additional optional fields.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BaseResponse<T> {\n  data: T[];\n  meta: {\n    chain_id: number;     // Required\n    page: number;         // Required\n    limit: number;        // Required\n    total_items: number;  // Required\n    total_pages: number;  // Required\n    address?: string;     // Optional\n    signature?: string;   // Optional\n  }\n}\n\n// Example response from getting events\n{\n  \"data\": [\n    {\n      \"chain_id\": 1,\n      \"block_number\": \"{{blockNumber}}\",\n      \"transaction_hash\": \"{{transactionHash}}\",\n      \"address\": \"{{contractAddress}}\",\n      \"data\": \"{{data}}\",\n      \"topics\": [\"{{topic}}\"]\n    }\n  ],\n  \"meta\": {\n    \"chain_id\": 1,\n    \"page\": 0,\n    \"limit\": 20,\n    \"total_items\": 150,\n    \"total_pages\": 8\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155ClaimPhases Dependencies in Solidity\nDESCRIPTION: Import statements for the ERC1155 and Drop1155 contracts, which are the core components of the ERC1155ClaimPhases functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155ClaimPhases/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/ERC721.sol\";\nimport \"@thirdweb-dev/contracts/extension/Drop1155.sol\";\n```\n\n----------------------------------------\n\nTITLE: Getting Claim Condition by ID in Solidity\nDESCRIPTION: Function to retrieve the claim condition for a given token ID and condition ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getClaimConditionById(uint256 tokenId, uint256 conditionId) external view returns (ClaimCondition memory);\n```\n\n----------------------------------------\n\nTITLE: Permissions Extension API: hasRoleWithSwitch Function\nDESCRIPTION: This function checks if an account has a role, with the ability to switch role restrictions on and off. If address(0) has the role, restrictions don't apply, and it always returns true.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Permissions/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction hasRoleWithSwitch(bytes32 role, address account) public view returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Building thirdweb Project for Production\nDESCRIPTION: Command to build the thirdweb project for production deployment. This process compiles and optimizes the code for a production environment.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/dashboard/README.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Importing Steps and Step Components from @doc Package\nDESCRIPTION: Demonstrates how to import the Steps and Step components from the @doc package for creating step-by-step guides in React applications.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/steps/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Steps, Step } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for Solidity SDK Documentation\nDESCRIPTION: Sets up the metadata configuration for the documentation page including title, description, and image settings. Uses the createMetadata helper function to define page metadata.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/overview/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocImage } from \"@doc\";\nimport extensinoModelImage from \"./assets/extension-model.svg\";\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb Solidity SDK\",\n\tdescription:\n\t\t\"Solidity SDK provides the tools needed to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as extensions.\",\n\timage: {\n\t\ttitle: \"thirdweb Solidity SDK\",\n\t\ticon: \"solidity\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ThirdwebProvider with RPC Edge in React Native\nDESCRIPTION: Implements RPC Edge in a React Native application by configuring the ThirdwebProvider with a client ID. This enables mobile applications to utilize enhanced RPC capabilities when interacting with the ethereum blockchain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/rpc-edge/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThirdwebProvider } from \"@thirdweb-dev/react-native\";\n\nfunction MyApp() {\n\treturn (\n\t\t<ThirdwebProvider activeChain=\"ethereum\" clientId=\"your-client-id\">\n\t\t\t<YourApp />\n\t\t</ThirdwebProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: PlatformFee API - getPlatformFeeInfo\nDESCRIPTION: Function to retrieve the platform fee recipient and basis points.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PlatformFee/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getPlatformFeeInfo() public view returns (address, uint16);\n```\n\n----------------------------------------\n\nTITLE: Checking Webhook Payload Age in TypeScript\nDESCRIPTION: A utility function to verify the age of a webhook payload by comparing the timestamp with the current time, useful for rejecting delayed or replay attacks.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/webhooks/payload/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const isExpired = (\n  timestamp: string,\n  expirationInSeconds: number,\n): boolean => {\n  const currentTime = Math.floor(Date.now() / 1000);\n  return currentTime - parseInt(timestamp) > expirationInSeconds;\n};\n```\n\n----------------------------------------\n\nTITLE: File Filter Option\nDESCRIPTION: CLI option to filter contract files by name\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/reference/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-f--file <string>\n```\n\n----------------------------------------\n\nTITLE: NFT Burn Function\nDESCRIPTION: Function allowing token owner or approved operator to burn an NFT.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/base/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(uint256 _tokenId) external virtual {\n    _burn(_tokenId, true);\n}\n\nfunction nextTokenIdToMint() public view virtual returns (uint256) {\n    return _currentIndex;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Drop Extension in Solidity\nDESCRIPTION: Basic import statement for the Drop extension from thirdweb contracts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/Drop.sol\";\n```\n\n----------------------------------------\n\nTITLE: Overriding lazyMint Function in ERC1155Drop Contract\nDESCRIPTION: This function allows an authorized address to lazy mint a given amount of NFTs. It handles the storage of encrypted data for delayed reveal batches.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/drop/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction lazyMint(\n    uint256 _amount,\n    string calldata _baseURIForTokens,\n    bytes calldata _data\n) public virtual override returns (uint256 batchId) {\n    if (_data.length > 0) {\n        (bytes memory encryptedURI, bytes32 provenanceHash) = abi.decode(_data, (bytes, bytes32));\n        if (encryptedURI.length != 0 && provenanceHash != \"\") {\n            _setEncryptedData(nextTokenIdToLazyMint + _amount, _data);\n        }\n    }\n\n    return LazyMint.lazyMint(_amount, _baseURIForTokens, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20 Interface\nDESCRIPTION: Import statement for the ERC20 interface from thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/interface/IERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Checking Claim Condition Setting Permission in Solidity\nDESCRIPTION: Internal function that runs on every setClaimConditions call to determine whether the claim condition can be set in the given execution context.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSetClaimConditions() internal view virtual returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Canceling NFT Offers Solidity Interface\nDESCRIPTION: Interface for canceling an existing offer by its ID. Can only be called by the original offeror.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cancelOffer(uint256 offerId) external;\n```\n\n----------------------------------------\n\nTITLE: Getting Active Claim Condition ID in Solidity Smart Contract\nDESCRIPTION: Returns the ID of the currently active claim condition.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getActiveClaimConditionId() public view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Installing Required Peer Dependencies for React Native\nDESCRIPTION: Command to install all necessary peer dependencies required by thirdweb in React Native projects, including crypto libraries, storage, and UI components.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/react-native-adapter/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install react-native-get-random-values @react-native-community/netinfo expo-application @react-native-async-storage/async-storage expo-web-browser expo-linking react-native-aes-gcm-crypto react-native-quick-crypto@0.7.0-rc.6 amazon-cognito-identity-js @coinbase/wallet-mobile-sdk react-native-mmkv react-native-svg @react-native-clipboard/clipboard\n```\n\n----------------------------------------\n\nTITLE: Creating AccountFactory Contract with CLI\nDESCRIPTION: This bash command uses the thirdweb CLI to create an AccountFactory smart contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account-factory/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create contract\n```\n\n----------------------------------------\n\nTITLE: Rendering Feature Grid Layout\nDESCRIPTION: JSX code for rendering a responsive grid of feature cards with icons and descriptions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n\tclassName=\"my-4 grid gap-2 md:grid-cols-2 lg:grid-cols-2 \"\n>\n\t<FeatureCard\n\t\ttitle=\"Easy-to-Use API\"\n\t\tdescription=\"Easily understandable data API to query blockchain data.\"\n\t\ticonUrl={<Braces />}\n\t/>\n\n    <FeatureCard\n    \ttitle=\"Managed Infrastructure\"\n    \tdescription=\"No need to index blockchains yourself or manage infrastructure and RPC costs.\"\n\t\ticonUrl={<Server />}\n    />\n\n\t<FeatureCard\n    \ttitle=\"Custom Blueprints\"\n    \tdescription=\"Transform and enrich data easily to suit your needs.\"\n\t\ticonUrl={<Album/>}\n    />\n\n    \t<FeatureCard\n    \ttitle=\"Lightning-Fast Queries\"\n    \tdescription=\"Access any transaction, event or token API data\"\n\t\ticonUrl={<Zap/>}\n    />\n\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20ClaimConditions Dependencies\nDESCRIPTION: Required imports for implementing ERC20ClaimConditions functionality, including the IERC20 interface and DropSinglePhase extension.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20ClaimConditions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/interface/IERC20.sol\";\nimport \"@thirdweb-dev/contracts/extension/DropSinglePhase.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Assets for Edition Drop Documentation\nDESCRIPTION: Imports required components from the doc package and local assets for the Edition Drop contract documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-modular/edition-drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, DocImage, Steps, Step, Callout } from \"@doc\";\nimport { ContractDeployCard } from \"@/components/Document/ContractDeployCard\";\nimport editionDropStep1 from './assets/edition_drop_step1.png'\nimport editionDropStep2 from './assets/edition_drop_step2.png'\nimport editionDropStep3 from './assets/edition_drop_step3.png'\nimport editionDropStep4 from './assets/edition_drop_step4.png'\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Creating Metadata in JSX\nDESCRIPTION: This snippet imports necessary components from the '@doc' module and creates metadata for the page using the createMetadata function. It sets the title and description for the security documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/security/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Details, Callout, DocImage } from \"@doc\";\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Security | thirdweb Engine\",\n\tdescription:\n\t\t\"thirdweb Engine provides you with security features to configure and restrict access.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Documentation Page\nDESCRIPTION: This code snippet configures metadata for the documentation page, setting the title, description, and image properties that will be used for SEO and display purposes when sharing the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/create-account/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb - Create Account\",\n\tdescription: \"Learn how to create a thirdweb account and set up your first project.\",\n\timage: {\n\t\ttitle: \"Create Account\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Core Contract with thirdweb CLI\nDESCRIPTION: Command to deploy a core contract using thirdweb CLI. Requires a valid THIRDWEB_API_KEY to be replaced in the command.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/deploy-modular-contract/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb deploy -k \"THIRDWEB_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20DropVote Token Contract\nDESCRIPTION: Example implementation of a custom token contract inheriting from ERC20DropVote, including constructor initialization with required parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/drop-vote/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC20DropVote.sol\";\n\ncontract MyToken is ERC20DropVote {\n\t  constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _primarySaleRecipient\n    )\n        ERC20DropVote(\n            _defaultAdmin,\n            _name,\n            _symbol,\n            _primarySaleRecipient\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Logo in ConnectButton\nDESCRIPTION: This snippet demonstrates how to customize the logo shown on the Connect modal by setting the logoUrl in the appMetadata prop of the ConnectButton component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/sign-in/customization/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\n\nfunction Example() {\n\treturn (\n\t\t<div>\n\t\t\t<ConnectButton\n\t\t\t\tappMetadata={{\n\t\t\t\t\tlogoUrl: \"https://path/to/my-app/logo.svg\",\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PrimarySale Extension\nDESCRIPTION: Shows how to import the PrimarySale extension from thirdweb contracts\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PrimarySale/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/PrimarySale.sol\";\n```\n\n----------------------------------------\n\nTITLE: Getting Single Listing Details\nDESCRIPTION: View function to retrieve details of a specific listing by its ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getListing(uint256 listingId) external view returns (Listing memory listing);\n```\n\n----------------------------------------\n\nTITLE: Crypto Purchase Webhook Response Example in JSON\nDESCRIPTION: Example JSON response for a completed crypto purchase transaction webhook event. Includes details about the swap type, source and destination tokens, transaction hash, and price information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/webhooks/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"buyWithCryptoStatus\": {\n      \"swapType\": \"SAME_CHAIN\",\n      \"source\": {\n        \"transactionHash\": \"0x74d6c619a09e78f03f4bd495f29d5937a2539d0bbe8973e7710dce3e88c30b8b\",\n        \"token\": {\n          \"chainId\": 10,\n          \"tokenAddress\": \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\n          \"decimals\": 18,\n          \"name\": \"ETH\",\n          \"symbol\": \"ETH\",\n          \"priceUSDCents\": 346529\n        },\n        \"amountWei\": \"318486512146714\",\n        \"amount\": \"0.000318486512146714\",\n        \"amountUSDCents\": 110,\n        \"completedAt\": \"2024-06-18T23:44:07.000Z\"\n      },\n      \"status\": \"COMPLETED\",\n      \"subStatus\": \"SUCCESS\",\n      \"fromAddress\": \"0xebfb127320fcbe8e07e5a03a4bfb782219f4735b\",\n      \"toAddress\": \"0xebfb127320fcbe8e07e5a03a4bfb782219f4735b\",\n      \"quote\": {\n        \"fromToken\": {\n          \"chainId\": 10,\n          \"tokenAddress\": \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\n          \"decimals\": 18,\n          \"name\": \"ETH\",\n          \"symbol\": \"ETH\",\n          \"priceUSDCents\": 346529\n        },\n        \"toToken\": {\n          \"chainId\": 10,\n          \"tokenAddress\": \"0x0b2c639c533813f4aa9d7837caf62653d097ff85\",\n          \"decimals\": 6,\n          \"name\": \"USD Coin\",\n          \"symbol\": \"USDC\",\n          \"priceUSDCents\": 99\n        },\n        \"fromAmountWei\": \"318486512146714\",\n        \"fromAmount\": \"0.000318486512146714\",\n        \"toAmountWei\": \"1100000\",\n        \"toAmount\": \"1.1\",\n        \"toAmountMinWei\": \"1100000\",\n        \"toAmountMin\": \"1.1\",\n        \"estimated\": {\n          \"fromAmountUSDCents\": 110,\n          \"toAmountMinUSDCents\": 109,\n          \"toAmountUSDCents\": 109,\n          \"slippageBPS\": 91,\n          \"feesUSDCents\": 32,\n          \"gasCostUSDCents\": 40,\n          \"durationSeconds\": 30\n        },\n        \"createdAt\": \"2024-06-18T23:43:45.900Z\"\n      },\n      \"destination\": {\n        \"transactionHash\": \"0x74d6c619a09e78f03f4bd495f29d5937a2539d0bbe8973e7710dce3e88c30b8b\",\n        \"token\": {\n          \"chainId\": 10,\n          \"tokenAddress\": \"0x0b2c639c533813f4aa9d7837caf62653d097ff85\",\n          \"decimals\": 6,\n          \"name\": \"USD Coin\",\n          \"symbol\": \"USDC\",\n          \"priceUSDCents\": 99\n        },\n        \"amountWei\": \"1100000\",\n        \"amount\": \"1.1\",\n        \"amountUSDCents\": 109,\n        \"completedAt\": \"2024-06-18T23:44:07.000Z\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Express Server\nDESCRIPTION: Required environment variables for the Express server, including thirdweb secret key, client domain, and authentication private key.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Get your client id from the thirdweb dashboard: https://thirdweb.com/create-api-key\nTHIRDWEB_SECRET_KEY=\n# The domain of your frontend -- include the port when running local but nothing else (remember to update this in production)\nCLIENT_DOMAIN=localhost:5173\n# An wallet private key to generate the JWT with\nAUTH_PRIVATE_KEY=\nNODE_ENV=development # Set this to production when you deploy!\n```\n\n----------------------------------------\n\nTITLE: Importing DropSinglePhase Extension in Solidity\nDESCRIPTION: This snippet shows how to import the DropSinglePhase extension from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/DropSinglePhase.sol\";\n```\n\n----------------------------------------\n\nTITLE: Writing to a Contract with SDK v4\nDESCRIPTION: Example of claiming an NFT from a drop collection using thirdweb SDK v4, which requires loading the contract first and then using the useClaimNFT hook with Web3Button.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/contracts/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContract, useClaimNFT } from \"@thirdweb-dev/react\";\n\nfunction App() {\n  const { contract } = useContract(contractAddress);\n  const {\n    mutateAsync: claimNft,\n    isLoading,\n    error,\n  } = useClaimNFT(contract);\n\n  return (\n    <Web3Button\n      contractAddress={contractAddress}\n      action={() =>\n        claimNft({\n          to: \"{{wallet_address}}\", // Use useAddress hook to get current wallet address\n          quantity: 1,\n        })\n      }\n    >\n      Claim NFT\n    </Web3Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Setup Primary Sale Recipient\nDESCRIPTION: Internal function to set up the primary sale recipient without authorization checks\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PrimarySale/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setupPrimarySaleRecipient(address saleRecipient) internal;\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Error Response Interface in TypeScript\nDESCRIPTION: Defines the standard error response interface used for 400 Bad Request and 500 Internal Server Error responses. All error responses include a required error message string.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/llmstxt/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// 400 Bad Request\n// 500 Internal Server Error\ninterface ErrorResponse {\n\terror: string; // Required\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb CLI Reference Page\nDESCRIPTION: This snippet defines metadata for the CLI reference page using the createMetadata function. It sets the page title, icon, and description for the thirdweb CLI reference documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/deploy/reference/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb CLI references\",\n\t\ticon: \"thirdweb\",\n\t},\n\ttitle: \"thirdweb CLI references\",\n\tdescription:\n\t\t\"Use the CLI to deploy your contracts directly to any EVM compatible blockchain by running:\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration for Multiwrap Contract\nDESCRIPTION: Sets up the metadata configuration for the Multiwrap contract documentation page, including title, description, and image settings for the contract interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/multiwrap/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Multiwrap contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Multiwrap contract | thirdweb\",\n\tdescription: `The Multiwrap contract lets you wrap ERC20, ERC721 and ERC1155 tokens into a new wrapped ERC721 NFT`,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for BaseAccount Documentation\nDESCRIPTION: Sets up metadata for the BaseAccount documentation page using createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWallet/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"BaseAccount contract\",\n\t\ticon: \"solidity\",\n\t},\n\ttitle: \"BaseAccount | thirdweb contract\",\n\tdescription:\n\t\t\"The BaseAccount smart contract is an extension that is intended to be used when creating your own smart account contract which does not use one of our ready-to-use base-contract account smart contracts.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding _collectPriceOnClaim Function in ERC1155SignatureMint\nDESCRIPTION: This internal function collects and distributes the primary sale value of NFTs being claimed. It can be overridden to customize price collection logic.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/signature-mint/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _collectPriceOnClaim(\n    address _primarySaleRecipient,\n    uint256 _quantityToClaim,\n    address _currency,\n    uint256 _pricePerToken\n) internal virtual {\n    if (_pricePerToken == 0) {\n        return;\n    }\n\n    uint256 totalPrice = _quantityToClaim * _pricePerToken;\n\n    if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n        require(msg.value == totalPrice, \"Must send total price.\");\n    }\n\n    address saleRecipient = _primarySaleRecipient == address(0) ? primarySaleRecipient() : _primarySaleRecipient;\n    CurrencyTransferLib.transferCurrency(_currency, msg.sender, saleRecipient, totalPrice);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Smart Wallet Deployment Status in C#\nDESCRIPTION: Method to check whether a connected Smart Wallet is deployed on the blockchain. Returns a boolean value indicating the deployment status of the Smart Wallet.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/isdeployed/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbool isDeployed = await SmartWallet.IsDeployed();\n```\n\n----------------------------------------\n\nTITLE: Importing SignatureMintERC1155 Contract\nDESCRIPTION: Import statement for including the SignatureMintERC1155 contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155SignatureMint/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/SignatureMintERC1155.sol\";\n```\n\n----------------------------------------\n\nTITLE: Example Sent Transaction Payload in JSON\nDESCRIPTION: Sample JSON payload structure for a sent transaction webhook event, including queue details, onchain details, user operation details, and off-chain details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/webhooks/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"queueId\": \"1411246e-b1c8-4f5d-9a25-8c1f40b54e55\",\n\t\"status\": \"sent\",\n\t\"onchainStatus\": null,\n\t\"queuedAt\": \"2023-09-29T22:01:31.031Z\",\n\t\"sentAt\": \"2023-09-29T22:01:41.580Z\",\n\t\"minedAt\": null,\n\t\"errorMessage\": null,\n\t\"cancelledAt\": null,\n\t\"retryCount\": 0,\n\t\"chainId\": 80001,\n\t\"fromAddress\": \"0x3ecdbf3b911d0e9052b64850693888b008e18373\",\n\t\"toAddress\": \"0x365b83d67d5539c6583b9c0266a548926bf216f4\",\n\t\"data\": \"0xa9059cbb0000000000000000000000003ecdbf3b911d0e9052b64850693888b008e183730000000000000000000000000000000000000000000000000000000000000064\",\n\t\"value\": \"0x00\",\n\t\"nonce\": 1786,\n\t\"gasLimit\": \"39580\",\n\t\"maxFeePerGas\": \"2063100466\",\n\t\"maxPriorityFeePerGas\": \"1875545856\",\n\t\"gasPrice\": \"1875545871\",\n\t\"transactionType\": null,\n\t\"transactionHash\": \"0xc3ffa42dd4734b017d483e1158a2e936c8a97dd1aa4e4ce11df80ac8e81d2c7e\",\n\t\"sentAtBlockNumber\": 40660021,\n\t\"blockNumber\": null}\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC1155 Tokens with Thirdweb\nDESCRIPTION: Shows how to transfer ERC1155 tokens with quantity specification and optional data parameter. Requires contract instance, owner address, recipient address, token ID, quantity, and optional data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/examples/transfering-tokens/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeTransferFrom } from \"thirdweb/extensions/erc1155\";\nimport { sendAndConfirmTransaction } from \"thirdweb\";\n\nconst quantity = 1n;\nconst optionalData = \"0x\";\n\nconst transaction = safeTransferFrom({\n\tcontract, // the erc1155 contract\n\tfrom: \"0x...\", // owner's wallet address\n\tto: \"0x...\", // recipient address\n\ttokenId: 0n,\n\tvalue: quantity,\n\tdata: optionalData,\n});\n\nconst transactionReceipt = await sendAndConfirmTransaction({\n\taccount, // the account initiating the transaction\n\ttransaction\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Claim Condition Setting Permission in Solidity\nDESCRIPTION: Internal function to check whether the claim condition can be set in the given execution context.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSetClaimConditions() internal view virtual returns (bool);\n```\n\n----------------------------------------\n\nTITLE: Installing Contracts Package - npm\nDESCRIPTION: Command to install thirdweb contracts package using npm\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @thirdweb-dev/contracts\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Contracts with Forge\nDESCRIPTION: Command to install the modular-contracts package using Forge in a Solidity project.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/modular-contracts/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge install https://github.com/thirdweb-dev/modular-contracts\n```\n\n----------------------------------------\n\nTITLE: Reveal Function Implementation\nDESCRIPTION: Implementation of reveal function that allows authorized addresses to reveal a batch of delayed reveal NFTs using the provided key.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/delayed-reveal/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction reveal(uint256 _index, bytes calldata _key) external virtual override returns (string memory revealedURI) {\n    require(_canReveal(), \"Not authorized\");\n\n    uint256 batchId = getBatchIdAtIndex(_index);\n    revealedURI = getRevealURI(batchId, _key);\n\n    _setEncryptedData(batchId, \"\");\n    _setBaseURI(batchId, revealedURI);\n\n    emit TokenURIRevealed(_index, revealedURI);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Royalty Contract in Solidity\nDESCRIPTION: Shows how to import the Royalty contract from thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Royalty/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/Royalty.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Metadata for thirdweb Deploy Documentation\nDESCRIPTION: This snippet imports necessary components and creates metadata for the thirdweb Deploy documentation page. It sets the page title, icon, and description.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/deploy/overview/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, FeatureCard } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Deploy\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"thirdweb Deploy\",\n\tdescription:\n\t\t\"Deploy is a tool to deploy any contract to any EVM compatible chain through one simple command and an easy-to-use interface. Deploy reduces the complexities of deploying a contract by eliminating steps such as hardcoding private keys, managing RPC URLs, or running scripts to deploy your contracts.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Compact Modal Size in ConnectButton\nDESCRIPTION: This snippet shows how to change the Connect modal size from the default \"wide\" to \"compact\" by configuring the connectModal prop of the ConnectButton component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/sign-in/customization/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\n\nfunction Example() {\n\treturn (\n\t\t<div>\n\t\t\t<ConnectButton connectModal={{ size: \"compact\" }} />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Settings in Claude Desktop\nDESCRIPTION: JSON configuration for setting up thirdweb-mcp server in Claude Desktop. Includes environment variables for API keys, engine URL, JWT authentication, and wallet address settings.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/mcp-server/integrations/claude-desktop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"thirdweb-mcp\": {\n      \"command\": \"thirdweb-mcp\",\n      \"args\": [], // add `--chain-id` optionally\n      \"env\": {\n        \"THIRDWEB_SECRET_KEY\": \"your thirdweb secret key from dashboard\",\n        \"THIRDWEB_ENGINE_URL\": \"(OPTIONAL) your engine url\",\n        \"THIRDWEB_ENGINE_AUTH_JWT\": \"(OPTIONAL) your engine auth jwt\",\n        \"THIRDWEB_ENGINE_BACKEND_WALLET_ADDRESS\": \"(OPTIONAL) your engine backend wallet address\"           \n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Theming RainbowKit\nDESCRIPTION: Example of applying a theme to RainbowKit.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ...etc, darkTheme } from '@rainbow-me/rainbowkit';\n\n<RainbowKitProvider\n  theme={darkTheme()}\n  {...etc}>\n  {/* Your App */}\n</RainbowKitProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyMint Extension in Solidity Contract\nDESCRIPTION: This example demonstrates how to inherit from the LazyMint extension and implement the required _canLazyMint function. It allows only the contract deployer to lazy mint NFTs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/LazyMint/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/extension/LazyMint.sol\";\n\ncontract MyContract is LazyMint {\n    /**\n     *  We store the contract deployer's address only for the purposes of the example\n     *  in the code comment below.\n     *\n     *  Doing this is not necessary to use the `LazyMint` extension.\n     */\n    address public deployer;\n\n    constructor() {\n        deployer = msg.sender;\n    }\n\n    /**\n     *  This function returns who is authorized to lazy mint NFTs on this contract.\n     *\n     *  As an EXAMPLE, we'll only allow the contract deployer to lazy mint NFTs.\n     *\n     *  You MUST complete the body of this function to use the `LazyMint` extension.\n     */\n    function _canLazyMint() internal view virtual override returns (bool) {\n        return msg.sender == deployer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests Locally with Playwright\nDESCRIPTION: Command to execute the end-to-end tests locally using Playwright. This is used during development to verify tests work before pushing changes to the repository.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/dashboard/tests/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm playwright\n```\n\n----------------------------------------\n\nTITLE: Current Unix Timestamp in C#\nDESCRIPTION: Gets the current Unix timestamp in seconds.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar timestampNow = Utils.GetUnixTimeStampNow();\n```\n\n----------------------------------------\n\nTITLE: Using ConnectButton in v5 (TypeScript/TSX)\nDESCRIPTION: Example of how to use the new ConnectButton component in v5, which replaces the ConnectWallet component from v4.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/installation/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createThirdwebClient } from \"thirdweb\";\nimport { ConnectButton } from \"thirdweb/react\";\n\nconst client = createThirdwebClient({\n  clientId: process.env.NEXT_PUBLIC_TW_CLIENT_ID,\n});\n\n<ConnectButton client={client} />\n```\n\n----------------------------------------\n\nTITLE: Converting v4 Signer to v5 Account in React\nDESCRIPTION: Demonstrates how to obtain the current signer using the useSigner hook from v4 and convert it for use with the new SDK v5.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/migrate/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSigner } from \"@thirdweb-dev/react\";\nimport { ethers5Adapter } from \"thirdweb/adapters/ethers5\";\n\nconst signer = useSigner();\n\nconst onClick = async () => {\n    // convert the signer to used with the new SDK\n\tconst account = await ethers5Adapter.signer.fromEthers(signer);\n    // then use the new SDK normally\n    const transaction = prepareContractCall({ ... });\n    await sendTransaction({\n\t    transaction,\n\t    account,\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Timestamp Validation in TypeScript\nDESCRIPTION: TypeScript function to check if a webhook event has expired based on its timestamp. It compares the current time with the event timestamp to prevent replay attacks by rejecting events older than a specified duration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/webhooks/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const isExpired = (\n\ttimestamp: string,\n\texpirationInSeconds: number,\n): boolean => {\n\tconst currentTime = Math.floor(Date.now() / 1000);\n\treturn currentTime - parseInt(timestamp) > expirationInSeconds;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Dependencies\nDESCRIPTION: Command to install necessary dependencies for the Express server including express, cors, cookie-parser, and thirdweb.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install express cors cookie-parser thirdweb\n```\n\n----------------------------------------\n\nTITLE: Thirdweb Build Command with Options\nDESCRIPTION: The general syntax for running the Thirdweb build command with optional parameters for customizing the build process.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/build/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb [options]\n```\n\n----------------------------------------\n\nTITLE: Example Response from a Successful Transaction\nDESCRIPTION: An example of the response returned after successfully executing a blockchain transaction using the Nebula API.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/get-started/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nTransaction Successful: {\n  transactionHash: \"0x123abc...\",\n  blockNumber: 1234567,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration in TypeScript\nDESCRIPTION: Configuration code that sets up the documentation metadata for the ClaimableERC20 contract documentation page, including title, description, and visual elements.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-20/minting/claimableERC20/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Callback Function\nDESCRIPTION: Implementation of the beforeIncrement callback function to modify the count before the main increment operation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-module-contract/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction beforeIncrement(uint256 count) external view returns (uint256) {\n    return count + _counterStorage().step;\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet Pregeneration API Response\nDESCRIPTION: Example JSON response format from the wallet pregeneration API showing the wallet address and creation timestamp.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/pregenerate-wallets/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"wallet\": {\n      \"address\": \"string\",\n      \"createdAt\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Feature Cards for Modular Contracts\nDESCRIPTION: This JSX snippet creates a grid of FeatureCard components to display the key features of Modular Contracts. Each card includes a title, description, and an icon from the lucide-react library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/overview/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n\tclassName=\"my-4 grid gap-2 md:grid-cols-2 lg:grid-cols-2 \"\n>\n\t<FeatureCard\n\t\ttitle=\"Customizable\"\n\t\tdescription=\"Build contracts to only add features relevant to your use case\"\n\t\ticonUrl={<PencilRulerIcon />}\n\t/>\n\n    <FeatureCard\n    \ttitle=\"Upgradeable\"\n    \tdescription=\"Enable ability to add, configure, and remove modules post-deployment\"\n\t\ticonUrl={<CirclePlusIcon/>}\n    />\n\n\t<FeatureCard\n    \ttitle=\"Secure\"\n    \tdescription=\"Core & Module contracts published by thirdweb are audited\"\n\t\ticonUrl={<ShieldCheckIcon/>}\n    />\n\n\t<FeatureCard\n    \ttitle=\"Interoperable\"\n    \tdescription=\"Usable with frameworks such as Hardhat and Foundry\"\n    \ticonUrl={<WorkflowIcon/>}\n    />\n\n\t<FeatureCard\n    \ttitle=\"Gas-optimized\"\n    \tdescription=\"Increased gas-savings on deployment and for end-users\"\n    \ticonUrl={<HandCoinsIcon/>}\n    />\n\n\t<FeatureCard\n    \ttitle=\"Integration Options\"\n    \tdescription=\"Deploy through Explore, SDKs, or Contract Wizard (coming soon)\"\n\t\ticonUrl={<BlocksIcon/>}\n    />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Deploying ManagedAccountFactory\nDESCRIPTION: Command to deploy the ManagedAccountFactory contract using thirdweb CLI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account-factory/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create\n```\n\n----------------------------------------\n\nTITLE: Fetching In-App Wallet Users with curl (Bash)\nDESCRIPTION: This snippet demonstrates how to use curl to make a POST request to the thirdweb API for retrieving in-app wallet users. It includes the necessary headers and pagination parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-users/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://in-app-wallet.thirdweb.com/api/v1/users?offset=200&limit=100' \\\n  -H 'x-secret-key: YOUR_SECRET_KEY' \\\n  -H 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Execution in thirdweb-dev/js\nDESCRIPTION: This code snippet shows the structure of the execute_config object used to configure transaction execution behavior. It specifies the mode (currently supporting \"client\") and the signer wallet address that will be used for transaction signing. When mode is set to \"client\", Nebula returns an unsigned transaction for local wallet signing.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/key-concepts/execute-configuration/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"execute_config\": {\n    \"mode\": \"client\",\n    \"signer_wallet_address\": \"0x...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fiat Purchase Webhook Response Example in JSON\nDESCRIPTION: Example JSON response for a completed fiat purchase transaction webhook event. Contains detailed information about the transaction status, including intent ID, source currency, destination token, and transaction details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/webhooks/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"buyWithFiatStatus\": {\n      \"intentId\": \"f4cf8ab7-bb62-4b3b-a180-70fc7d72446c\",\n      \"status\": \"ON_RAMP_TRANSFER_COMPLETED\",\n      \"toAddress\": \"0xebfb127320fcbe8e07e5a03a4bfb782219f4735b\",\n      \"quote\": {\n        \"createdAt\": \"2024-06-18T23:46:46.024Z\",\n        \"fromCurrency\": {\n          \"amountUnits\": \"279\",\n          \"amount\": \"2.79\",\n          \"currencySymbol\": \"USD\",\n          \"decimals\": 2,\n          \"amountUSDCents\": 279\n        },\n        \"fromCurrencyWithFees\": {\n          \"amountUnits\": \"294\",\n          \"amount\": \"2.94\",\n          \"currencySymbol\": \"USD\",\n          \"decimals\": 2,\n          \"amountUSDCents\": 279\n        },\n        \"onRampToken\": {\n          \"chainId\": 137,\n          \"tokenAddress\": \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\n          \"name\": \"Matic\",\n          \"symbol\": \"MATIC\",\n          \"decimals\": 18,\n          \"priceUSDCents\": 54.797200000000004\n        },\n        \"toToken\": {\n          \"chainId\": 137,\n          \"tokenAddress\": \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\n          \"name\": \"Matic\",\n          \"symbol\": \"MATIC\",\n          \"decimals\": 18,\n          \"priceUSDCents\": 54.797200000000004\n        },\n        \"estimatedOnRampAmountWei\": \"5000000000000000000\",\n        \"estimatedOnRampAmount\": \"5\",\n        \"estimatedToTokenAmount\": \"5\",\n        \"estimatedToTokenAmountWei\": \"5000000000000000000\",\n        \"estimatedDurationSeconds\": 30\n      },\n      \"source\": {\n        \"completedAt\": \"2024-06-18T23:49:00.347Z\",\n        \"amount\": \"5\",\n        \"amountWei\": \"5000000000000000000\",\n        \"token\": {\n          \"chainId\": 137,\n          \"tokenAddress\": \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\n          \"name\": \"Matic\",\n          \"symbol\": \"MATIC\",\n          \"decimals\": 18,\n          \"priceUSDCents\": 54.797200000000004\n        },\n        \"transactionHash\": \"0x4bb089f6a60b49235a817b52bf39bc078f1246df15731b85837526bb62cf4e70\",\n        \"explorerLink\": \"https://polygonscan.com/tx/0x4bb089f6a60b49235a817b52bf39bc078f1246df15731b85837526bb62cf4e70\",\n        \"amountUSDCents\": 275\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155 Contract in Solidity\nDESCRIPTION: This example demonstrates how to create a smart contract that inherits from the ERC1155 extension. It includes a constructor that initializes the ERC1155 with a name and symbol.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\n\ncontract Contract is ERC1155 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC1155(\n            _name,\n            _symbol\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Polyfills for Expo Router Projects\nDESCRIPTION: Creating a custom entry point for Expo Router projects to ensure polyfills are loaded before routing is initialized.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/react-native-adapter/README.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// file: app/index.ts\n\n// this needs to be imported before expo-router\nimport \"@thirdweb-dev/react-native-adapter\";\nimport \"expo-router/entry\";\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme\nDESCRIPTION: This code demonstrates how to create and apply a custom theme to the ConnectButton by importing and customizing the darkTheme provider.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/connectbutton/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { darkTheme } from 'thirdweb/react';\n\n// Using custom theme\n<ConnectButton theme={darkTheme({ ... })} />\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for Smart Account Documentation\nDESCRIPTION: Creates metadata configuration for the Smart Account documentation page, including title, description and image properties.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/how-it-works/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"How Smart Accounts Works\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"What is a Smart Account? | thirdweb\",\n\tdescription:\n\t\t\"Smart Account is a wallet that is controlled by a smart contract following the ERC-4337 specification\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20SignatureMint Token Contract\nDESCRIPTION: Example implementation of a custom token contract inheriting from ERC20SignatureMint, including constructor initialization with required parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/signature-mint/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC20SignatureMint.sol\";\n\ncontract MyToken is ERC20SignatureMint {\n\t  constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _primarySaleRecipient\n    )\n        ERC20SignatureMint(\n            _defaultAdmin,\n            _name,\n            _symbol,\n            _primarySaleRecipient\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Multicall Extension\nDESCRIPTION: Import statement for including the Multicall extension from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Multicall/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/Multicall.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing Metadata Creation Function in JavaScript\nDESCRIPTION: This snippet imports the createMetadata function and GithubButtonLink component from a custom @doc module. It then uses createMetadata to define metadata for the documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-721/misc/royaltyERC721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing LazyMint Extension in Solidity\nDESCRIPTION: This snippet shows how to import the LazyMint extension from thirdweb contracts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/LazyMint/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/LazyMint.sol\";\n```\n\n----------------------------------------\n\nTITLE: Example Response for USDT Transfer Events Query\nDESCRIPTION: This JSON shows the expected response structure when querying USDT transfer events. It includes metadata about the query and an array of event data containing detailed information about each transfer, including block details, transaction hashes, and event parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"meta\": {\n        \"chain_id\": 1,\n        \"address\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n        \"signature\": \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n        \"page\": 0,\n        \"limit\": 5,\n        \"total_items\": 5,\n        \"total_pages\": 0\n    },\n    \"data\": [\n        {\n            \"chain_id\": 1,\n            \"block_number\": 14705663,\n            \"block_hash\": \"0x8f7014ff29e3ea83ee03354bd968741d01b92d4c3ddf02bfa5121465b8240736\",\n            \"block_timestamp\": 1651594686,\n            \"transaction_hash\": \"0xf5009000b57b761900010bf7f365c12ce34438ac3afdef9778b46055c26353b3\",\n            \"transaction_index\": 193,\n            \"log_index\": 278,\n            \"address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000005f5e100\",\n            \"topics\": [\n                \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n                \"0x000000000000000000000000b8418cdb539069e075b4c6c6675114879ffd441b\",\n                \"0x000000000000000000000000515ea78a0ff34aef46a5e323d759935e05de4827\"\n            ]\n        },\n        {\n            \"chain_id\": 1,\n            \"block_number\": 14705664,\n            \"block_hash\": \"0x916d67589f2bc37600faf055309fd9f654d0c0030df35d31c04e22fef8d24ff2\",\n            \"block_timestamp\": 1651594701,\n            \"transaction_hash\": \"0x0999f86751fe5b8f2bc5446e38abf3f0e01ee1c7ff5ce6288abbea506ac3cebf\",\n            \"transaction_index\": 41,\n            \"log_index\": 120,\n            \"address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000014dc9380\",\n            \"topics\": [\n                \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n                \"0x0000000000000000000000005041ed759dd4afc3a72b8192c143f72f4724081a\",\n                \"0x0000000000000000000000000f69fce36dc680512d836526fc1abb9cd6bdcdd4\"\n            ]\n        },\n        {\n            \"chain_id\": 1,\n            \"block_number\": 14705664,\n            \"block_hash\": \"0x916d67589f2bc37600faf055309fd9f654d0c0030df35d31c04e22fef8d24ff2\",\n            \"block_timestamp\": 1651594701,\n            \"transaction_hash\": \"0x0f25b357155dca3186700e69a7586ee0153f1d7d75304a158aab9be210b31a56\",\n            \"transaction_index\": 72,\n            \"log_index\": 133,\n            \"address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000643e6c140\",\n            \"topics\": [\n                \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n                \"0x0000000000000000000000007b29bee9cb744122edcd7e8223efcdf8d8d8e0a4\",\n                \"0x0000000000000000000000001724aabcef350d3f3433804e6167d4c4137aab01\"\n            ]\n        },\n        {\n            \"chain_id\": 1,\n            \"block_number\": 14705664,\n            \"block_hash\": \"0x916d67589f2bc37600faf055309fd9f654d0c0030df35d31c04e22fef8d24ff2\",\n            \"block_timestamp\": 1651594701,\n            \"transaction_hash\": \"0x10da03bea7828722c92c86704522c7e1ce7dd2947d633ec6c1fb36680cb256e5\",\n            \"transaction_index\": 145,\n            \"log_index\": 229,\n            \"address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n            \"data\": \"0x00000000000000000000000000000000000000000000000000000000163d3a0d\",\n            \"topics\": [\n                \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n                \"0x00000000000000000000000056eddb7aa87536c09ccc2793473599fd21a8b17f\",\n                \"0x0000000000000000000000002b38e18192a442ed923addb4739e0a7724945d3c\"\n            ]\n        },\n        {\n            \"chain_id\": 1,\n            \"block_number\": 14705664,\n            \"block_hash\": \"0x916d67589f2bc37600faf055309fd9f654d0c0030df35d31c04e22fef8d24ff2\",\n            \"block_timestamp\": 1651594701,\n            \"transaction_hash\": \"0x20967f489b5237c0c6ffcbf7afcd921303e0db9e49382f9dc37809874e674b8b\",\n            \"transaction_index\": 188,\n            \"log_index\": 295,\n            \"address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000011b9e2b6\",\n            \"topics\": [\n                \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n                \"0x0000000000000000000000003cd751e6b0078be393132286c442345e5dc49699\",\n                \"0x0000000000000000000000000e6eeff72188094c78b2478b693bbdbf9b13aaac\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Cards for Extension Documentation\nDESCRIPTION: JSX component structure that creates a grid of navigation cards linking to different sections of the Extensions documentation, including built-in extensions, usage guides, generation tools, and custom extension creation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack>\n<ArticleIconCard\n\ttitle=\"Built-in Extensions\"\n\ticon={BlocksIcon}\n\thref=\"/typescript/v5/extensions/built-in\"\n  description=\"Learn how to use extensions in your application\"\n/>\n\n<ArticleIconCard\n\ttitle=\"Use Extensions\"\n\ticon={PlugZapIcon}\n\thref=\"/typescript/v5/extensions/use\"\n\tdescription=\"Learn how to use extensions in your application\"\n/>\n\n<ArticleIconCard\n\ttitle=\"Generate Extensions\"\n\ticon={BoxIcon}\n\thref=\"/typescript/v5/extensions/generate\"\n\tdescription=\"Generate extensions for any deployed contract\"\n/>\n\n<ArticleIconCard\n\ttitle=\"Write Extensions\"\n\ticon={CodeIcon}\n\thref=\"/typescript/v5/extensions/create\"\n\tdescription=\"Write your own extensions\"\n/>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20Vote Contract\nDESCRIPTION: Shows how to import the ERC20Vote contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/vote/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC20Vote.sol\";\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for AirdropERC1155 Contract Documentation\nDESCRIPTION: This snippet creates metadata for the AirdropERC1155 contract documentation page using the createMetadata function. It sets the image title, icon, page title, and description.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/airdrop-erc1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Airdrop ERC1155 contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Airdrop ERC1155 contract | thirdweb\",\n\tdescription: `AirdropERC1155 contract is suitable to use when you want to transfer ERC1155 NFTs to a list of recipient addresses, where these recipients are not expected to individually claim their airdrop`,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components from thirdweb React SDK\nDESCRIPTION: This snippet demonstrates the import of necessary components from the thirdweb documentation package and the Lucide React icon library. It includes the ArticleIconCard and Stack components for layout, and the ComponentIcon for visual representation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ArticleIconCard, Stack } from \"@doc\";\nimport { ComponentIcon } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Validate Operation Signature\nDESCRIPTION: Internal function to validate the signature of a user operation by recovering the signer and checking authorization.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\n    internal\n    virtual\n    override\n    returns (uint256 validationData)\n{\n    bytes32 hash = userOpHash.toEthSignedMessageHash();\n    address signer = hash.recover(userOp.signature);\n\n    if (!isValidSigner(signer)) return SIG_VALIDATION_FAILED;\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Public Key from Private Key in Bash\nDESCRIPTION: Command to extract and format the public key from the previously generated RSA private key using OpenSSL.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-jwt-auth-server/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rsa -in keys/rsa.key -pubout -outform PEM -out keys/rsa.key.pub\n```\n\n----------------------------------------\n\nTITLE: Full thirdweb create command with options syntax\nDESCRIPTION: Command syntax showing how to use thirdweb create with optional parameters and a project path specification.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/create/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create [options] [projectPath]\n```\n\n----------------------------------------\n\nTITLE: Generating Private Key with OpenSSL\nDESCRIPTION: Command to generate a private key using ES256 algorithm with OpenSSL\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/keypair-authentication/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl ecparam -name prime256v1 -genkey -noout -out private.key\n```\n\n----------------------------------------\n\nTITLE: Installing Thirdweb Package in MAUI Project\nDESCRIPTION: This command adds the Thirdweb package to a MAUI project using the dotnet CLI. It installs the necessary dependencies for integrating the Thirdweb .NET SDK into the MAUI application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/maui/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Thirdweb\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Wallet Credentials Documentation\nDESCRIPTION: This code creates metadata for the Wallet Credentials documentation page. It sets the title and description for the page, which are likely used for SEO and page rendering purposes.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/wallet-credentials/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"Wallet Credentials | thirdweb Engine\",\n\tdescription:\n\t\t\"Engine can securely store and manage wallet credentials for thirdweb backend wallets.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Functions\nDESCRIPTION: Addition of getStep and setStep fallback functions to interact with the module's state.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-module-contract/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getStep() external view returns (uint256) {\n    return _counterStorage().step;\n}\n\nfunction setStep(uint256 _step) external {\n    _counterStorage().step = _step;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721Drop Contract in Solidity\nDESCRIPTION: Import statement for the ERC721Drop base contract from thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC721Drop.sol\";\n```\n\n----------------------------------------\n\nTITLE: Clean Build Option\nDESCRIPTION: CLI option to clear the cache before building\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/reference/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-c--clean\n```\n\n----------------------------------------\n\nTITLE: Generating Thirdweb Contract Extension\nDESCRIPTION: This command generates precompiled functions for a contract at the given address on a specific chain. It creates a new 'thirdweb' directory in the project containing the generated code.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/generate/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb generate <chainId>/<contract-address>\n```\n\n----------------------------------------\n\nTITLE: Account Initialization Override Function\nDESCRIPTION: Implementation of _initializeAccount function that can be overridden to customize account initialization logic.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account-factory/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initializeAccount(\n    address _account,\n    address _admin,\n    bytes calldata _data\n) internal override {\n    ManagedAccount(payable(_account)).initialize(_admin, _data);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Winning Bid Information for an Auction\nDESCRIPTION: The getWinningBid function returns information about the winning bid of an auction, including the bidder's address, currency used, and bid amount.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getWinningBid(uint256 auctionId)\n  external\n  view\n  returns (\n    address bidder,\n    address currency,\n    uint256 bidAmount\n  );\n```\n\n----------------------------------------\n\nTITLE: Importing Smart Wallet Blueprint Nodes\nDESCRIPTION: Imports the necessary blueprint nodes and metadata creation utility for smart wallet functionality in Unreal Engine\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/smart-wallet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Blueprint } from \"../blueprint\";\nimport { createUnrealEngineMetadata } from \"../../util\";\nimport {\n\taddAdminNode,\n\tcreateSessionKeyNode,\n\tcreateSmartWalletNode,\n\tgetActiveSignersNode,\n\tgetAdminsNode,\n\tisActiveSignerNode,\n\tisDeployedNode,\n\tremoveAdminNode,\n\trevokeSessionKeyNode,\n} from \"./nodes\";\n```\n\n----------------------------------------\n\nTITLE: Applying Predefined Themes to PayEmbed Component\nDESCRIPTION: This example shows how to set the theme for the PayEmbed component using the predefined 'light' and 'dark' themes. By default, the component uses the 'dark' theme.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/payembed/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<PayEmbed theme='light' />\n\n<PayEmbed theme='dark' />\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Documentation Page in TypeScript\nDESCRIPTION: This code creates metadata for the documentation page, including title, description, and image information. It uses the createMetadata function imported earlier.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-721/minting/claimableERC721/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Error Response Interface for Insight API\nDESCRIPTION: Defines the standard error response interface for thirdweb Insight API, used when HTTP status codes 400 (Bad Request) or 500 (Internal Server Error) are returned.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// 400 Bad Request\n// 500 Internal Server Error\ninterface ErrorResponse {\n\terror: string; // Required\n}\n```\n\n----------------------------------------\n\nTITLE: Reward Calculation Formula for Stake ERC721 Contract\nDESCRIPTION: This snippet shows the formula used to calculate rewards for staked NFTs. The reward is based on the staking duration, rewards per unit time, and the time unit.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/stake-erc721/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`rewardsPerTokenStaked = (stakingDuration * rewardsPerUnitTime) / timeUnit`\n```\n\n----------------------------------------\n\nTITLE: Public Key Format Example\nDESCRIPTION: Example format of the generated public key file\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/keypair-authentication/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PUBLIC KEY-----\n...\n-----END PUBLIC KEY-----\n```\n\n----------------------------------------\n\nTITLE: Before Claim Hook Function\nDESCRIPTION: Internal hook function that runs before token claims, allowing custom logic implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeClaim(\n    address receiver,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    AllowlistProof calldata allowlistProof,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Get Base URI Count Function\nDESCRIPTION: Function to retrieve the total number of NFT batches with unique base URIs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/BatchMintMetadata/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getBaseURICount() public view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAccountFactory in Solidity\nDESCRIPTION: Shows how to import the BaseAccountFactory contract from the thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWalletFactory/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/smart-wallet/utils/BaseAccountFactory.sol\";\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb TypeScript SDK Documentation\nDESCRIPTION: This code creates metadata for the thirdweb TypeScript SDK documentation page, including title, description, and image details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Connect TS SDK\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"Connect TS SDK | thirdweb\",\n\tdescription:\n\t\t\"Performant & lightweight TypeScript SDK to connect wallets and interact with any EVM chain.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20Mintable Interface\nDESCRIPTION: Import statement for the IMintableERC20 interface from thirdweb contracts\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20Mintable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Initializing New Thirdweb React Native Project\nDESCRIPTION: Command to create a new React Native project with Thirdweb using the CLI\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/getting-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create app --react-native\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Extensions Documentation Page\nDESCRIPTION: Imports necessary UI components from the documentation framework and icon components from lucide-react to build the Extensions documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Details, ArticleIconCard, Stack } from \"@doc\";\nimport {\n\tZapIcon,\n\tScrollTextIcon,\n\tArrowRightLeftIcon,\n\tWalletIcon,\n\tBlocksIcon,\n\tCodeIcon,\n\tRssIcon,\n\tPlugZapIcon,\n\tBoxIcon,\n} from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155Mintable Interface in Solidity\nDESCRIPTION: This snippet shows how to import the IMintableERC721 interface from the thirdweb contracts library. This interface defines the functions required for minting ERC1155 tokens.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Mintable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC721.sol\";\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Open Edition ERC721 Documentation in JavaScript\nDESCRIPTION: This code snippet imports a createMetadata function and uses it to generate metadata for the Open Edition ERC721 documentation page. It sets the image title, icon, page title, and description.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/open-edition/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Open Edition ERC721\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Open Edition ERC721 | thirdweb\",\n\tdescription: `The OpenEditionERC721 contract is an 'open edition' ERC721 NFT collection. The contract uses the ERC-721A standard`,\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Ecosystem Wallet Explorer Image in Markdown\nDESCRIPTION: This markdown snippet includes an image of the Ecosystem Wallet Explorer overview using the DocImage component. It's part of the documentation to visually represent the explorer interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/portal/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<DocImage src={EcosystemWalletOverview} />\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Dependencies for React Native\nDESCRIPTION: Command to add the required Firebase packages for authentication in a React Native project using Yarn.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/firebase-auth/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native-firebase/app @react-native-firebase/auth\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC721Claimable Contract in Solidity\nDESCRIPTION: This example demonstrates how to create a smart contract that inherits from ERC721A and implements the IClaimableERC721 interface. It includes the contract structure and placeholders for custom implementations of required functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Claimable/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IClaimableERC721.sol\";\n\ncontract Contract is ERC721A, IClaimableERC721 {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC721A(\n            _name,\n            _symbol\n        )\n    {}\n\n    function _canLazyMint() internal view override returns (bool) {\n        // Your custom implementation here\n    }\n\n    function verifyClaim(address _claimer, uint256 _quantity) public view virtual {\n        // Your custom implementation here\n    }\n\n    function claim(address _receiver, uint256 _quantity) public payable virtual {\n        // Your custom implementation here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration for Unity SDK Documentation\nDESCRIPTION: Exports metadata configuration for the documentation page, setting the title and description for the Unity SDK interaction guide.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/getting-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"Interacting with Contracts | thirdweb Unity SDK\",\n\tdescription:\n\t\t\"Learn how to interact with smart contracts using the thirdweb Unity SDK.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Tutorial Grid\nDESCRIPTION: JSX code for displaying a grid of video tutorial cards with titles and descriptions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid>\n\n<ArticleCard\n\ttitle=\"Insight Introduction\"\n\tdescription=\"Create your own custom schemas and data to get specific data.\"\n\thref=\"https://www.youtube.com/watch?v=U2aW7YIUJVw\"\n  />\n\n  <ArticleCard\n\ttitle=\"Telegram Bot\"\n\tdescription=\"Build an on-chain Telegram bot that fetches live blockchain data\"\n\thref=\"https://m.youtube.com/watch?v=HvqewXLVRig\"\n  />\n\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Address with Thirdweb .NET SDK\nDESCRIPTION: This code demonstrates how to retrieve the blockchain address associated with a Thirdweb wallet instance. The method returns the wallet's unique hexadecimal address as a string, which can be used for blockchain interactions like transactions or smart contract calls.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/wallets/actions/getaddress/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstring walletAddress = await wallet.GetAddress();\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Navigation Menu with React Components\nDESCRIPTION: Implements a navigation stack with article cards linking to different transaction-related documentation sections using imported UI components and icons.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack>\n\n<ArticleIconCard\n\ttitle=\"Reading State\"\n\ticon={ScrollTextIcon}\n\thref=\"/typescript/v5/transactions/read\"\n/>\n\n<ArticleIconCard\n\ttitle=\"Preparing Transactions\"\n\ticon={BlocksIcon}\n\thref=\"/typescript/v5/transactions/prepare\"\n/>\n\n<ArticleIconCard\n\ttitle=\"Sending Transactions\"\n\ticon={WalletIcon}\n\thref=\"/typescript/v5/transactions/send\"\n/>\n\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Finalizing Core Contract Implementation\nDESCRIPTION: Completing the CounterCore contract by implementing getSupportedCallbackFunctions and supportsInterface functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-core-contract/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getSupportedCallbackFunctions()\n    public\n    pure\n    override\n    returns (SupportedCallbackFunction[] memory supportedCallbackFunctions)\n{\n    supportedCallbackFunctions = new SupportedCallbackFunction[](1);\n    supportedCallbackFunctions[0] = SupportedCallbackFunction({\n        selector: BeforeIncrementCallback.beforeIncrement.selector,\n        mode: CallbackMode.OPTIONAL\n    });\n}\n\nfunction supportsInterface(\n    bytes4 interfaceId\n) public view override returns (bool) {\n    return interfaceId == 0x00000001 || super.supportsInterface(interfaceId);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20DropVote Contract\nDESCRIPTION: Shows how to import the ERC20DropVote contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/drop-vote/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC20DropVote.sol\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Thirdweb Runtime Settings in Unreal Engine\nDESCRIPTION: Configuration settings for the Thirdweb plugin in Unreal Engine's DefaultEngine.ini file. Requires setting up ClientID and BundleID for plugin functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/getting-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[/Script/Thirdweb.ThirdwebRuntimeSettings]\nClientID=\nBundleID=\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Headers for Nebula API\nDESCRIPTION: Demonstrates how to set the required authentication header for Nebula API requests. The thirdweb secret key must be included in the request headers for authorization.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nx-secret-key: YOUR_THIRDWEB_SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Insight Webhooks Documentation Page in JavaScript\nDESCRIPTION: This code snippet sets up the metadata for a documentation page about Insight webhooks. It imports the createMetadata function and defines the page title, description, and image properties.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/webhooks/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Insight Webhooks | thirdweb Infrastructure\",\n\tdescription: \"Getting started with Insight webhooks\",\n  image: {\n    title: \"Insight\",\n    icon: \"insight\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721Burnable Interface\nDESCRIPTION: Shows how to import the IBurnableERC721 interface from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Burnable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/interface/IBurnableERC721.sol\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabbed Interface in JSX\nDESCRIPTION: This snippet demonstrates how to use the imported tab components to create a tabbed interface with three tabs and their respective content.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/tabs/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Tabs defaultValue=\"tab-1\">\n\t<TabsList>\n\t\t<TabsTrigger value=\"tab-1\">Tab 1</TabsTrigger>\n\t\t<TabsTrigger value=\"tab-2\">Tab 2</TabsTrigger>\n\t\t<TabsTrigger value=\"tab-3\">Tab 3</TabsTrigger>\n\t</TabsList>\n\t<TabsContent value=\"tab-1\"> Content for Tab 1 </TabsContent>\n\t<TabsContent value=\"tab-2\"> Content for Tab 2 </TabsContent>\n\t<TabsContent value=\"tab-3\"> Content for Tab 3 </TabsContent>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Onramp Provider\nDESCRIPTION: This snippet demonstrates how to specify which onramp provider (STRIPE, KADO, or TRANSAK) to present to users when making purchases.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/connectbutton/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton\n\tclient={client}\n\tdetailsModal={{\n\t\tpayOptions: {\n\t\t\tpreferredProvider: \"STRIPE\" | \"KADO\" | \"TRANSAK\",\n\t\t},\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Reward Calculation Formula for ERC1155 Staking\nDESCRIPTION: Demonstrates the mathematical formula used to calculate staking rewards based on staking duration, rewards per unit time, and the time unit.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/stake-erc1155/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nrewardsPerTokenStaked = (stakingDuration * rewardsPerUnitTime) / timeUnit\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155ClaimConditions Dependencies in Solidity\nDESCRIPTION: This snippet shows the import statements required for implementing the ERC1155ClaimConditions extension. It imports the ERC1155 and DropSinglePhase1155 contracts from thirdweb.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155ClaimConditions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\nimport \"@thirdweb-dev/contracts/extension/DropSinglePhase1155.sol\";\n```\n\n----------------------------------------\n\nTITLE: Getting Total Listings Count\nDESCRIPTION: View function to return the total number of listings created on the marketplace.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalListings() external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Overriding burn Function in ERC20Drop\nDESCRIPTION: This function allows token owners to burn a specified amount of their tokens. It checks if the caller has sufficient balance before burning.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/drop/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(uint256 _amount) external virtual {\n    require(balanceOf(msg.sender) >= _amount, \"not enough balance\");\n    _burn(msg.sender, _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Predefined Themes in thirdweb Universal Bridge\nDESCRIPTION: Shows how to set the theme for the transaction interface using the built-in \"dark\" or \"light\" themes. By default, the interface uses the dark theme.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/send-transaction/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst { mutate: sendTransaction } = useSendTransaction({\n\tpayModal: {\n\t\ttheme: \"dark\", // or \"light\"\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Navigation Cards with JSX\nDESCRIPTION: Creates a navigation interface using Stack and ArticleIconCard components to display different SDK options. Each card includes an icon, title, link to documentation, and brief description of the specific framework/language implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/blockchain-api/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Stack>\n<ArticleIconCard\n\ttitle=\"TypeScript\"\n\ticon={TypeScriptIcon}\n\thref=\"/typescript/v5\"\n\tdescription=\"Core TypeScript API\"\n/>\n\n<ArticleIconCard\n\ttitle=\"React\"\n\ticon={ReactIcon}\n\thref=\"/react/v5\"\n\tdescription=\"React components and hooks\"\n/>\n\n<ArticleIconCard\n\ttitle=\"React Native\"\n\ticon={ReactIcon}\n\thref=\"/react-native/v5\"\n\tdescription=\"React Native components and hooks\"\n/>\n\n<ArticleIconCard\n\ttitle=\".NET\"\n\ticon={DotNetIcon}\n\thref=\"/dotnet\"\n\tdescription=\"Core C# API for .NET applications\"\n/>\n\n<ArticleIconCard\n\ttitle=\"Unity\"\n\ticon={UnityIcon}\n\thref=\"/unity\"\n\tdescription=\"Unity scripts and prefabs\"\n/>\n\n<ArticleIconCard\n\ttitle=\"Unreal Engine\"\n\ticon={UnrealEngineIcon}\n\thref=\"/unreal-engine\"\n\tdescription=\"Unreal blueprints and C++ API\"\n/>\n\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155BatchMintable Dependencies\nDESCRIPTION: Required imports for implementing ERC1155BatchMintable functionality including the base ERC1155, multicall extension, and mintable interface\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155BatchMintable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/eip/ERC1155.sol\"\nimport \"@thirdweb-dev/contracts/extension/multicall.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC1155.sol\";\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb with React Native using npx command\nDESCRIPTION: Command to quickly create a new React Native application with thirdweb already integrated using the thirdweb CLI tool.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create app --react-native\n```\n\n----------------------------------------\n\nTITLE: Importing OpenSourceCard Component in React\nDESCRIPTION: Import statement for the OpenSourceCard component from the @doc package\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/differences/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OpenSourceCard } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for ERC-20 Staking Contract\nDESCRIPTION: Metadata configuration for the staking contract documentation using createMetadata function. Sets up the page title, icon, and description for the contract documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/stake-erc20/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Stake ERC-20 Contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Stake ERC-20 Contract | thirdweb\",\n\tdescription:\n\t\t\"This contract allows users to stake their ERC-20 tokens and get ERC-20 tokens as staking rewards (different from the staked tokens)\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets\nDESCRIPTION: Initial imports for documentation components and image assets required for the Token Drop deployment guide\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-modular/token-drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, DocImage, Steps, Step, Callout} from \"@doc\";\nimport { ContractDeployCard } from \"@/components/Document/ContractDeployCard\";\nimport tokenDropStep1 from './assets/token_drop_step1.png'\nimport tokenDropStep2 from './assets/token_drop_step2.png'\nimport tokenDropStep3 from './assets/token_drop_step3.png'\nimport tokenDropTransferable from '../assets/erc20_transferable.png'\nimport tokenDropClaimable from '../assets/erc20_claimable.png'\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for Insight Blueprints Documentation in JavaScript\nDESCRIPTION: This code snippet creates metadata for the Insight Blueprints documentation page. It defines the title, description, and visual elements for the page using the createMetadata function from the @doc module.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/blueprints/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Insight Blueprints | thirdweb Infrastructure\",\n\tdescription:\n\t\t\"Learn what are Insight Blueprints and how to use them\",\n  image: {\n    title: \"Insight\",\n    icon: \"insight\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Metadata in JavaScript\nDESCRIPTION: Creates metadata configuration for thirdweb Storage documentation including title, icon, and description settings using the createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/storage/overview/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Storage\",\n\t\ticon: \"storage\",\n\t},\n\ttitle: \"thirdweb Storage\",\n\tdescription:\n\t\t\"Storage is a decentralized file management solution that allows for the storage and retrieval of information off-chain using IPFS\",\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to run the Next.js development server using different package managers. This allows developers to start the local development environment.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/playground-web/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Importing AccountExtension Contract\nDESCRIPTION: Shows how to import the AccountExtension contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/AccountExtension/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/smart-wallet/utils/AccountExtension.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing Assets and Creating Metadata for Alert Notifications Documentation\nDESCRIPTION: This code imports image assets and creates metadata for the Alert Notifications documentation page in the thirdweb Engine project. It sets the page title and description using the createMetadata utility.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/alert-notifications/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport AddAlertImage from \"../../assets/add-alert.png\";\nimport RecentAlertsImage from \"../../assets/recent-alerts.png\";\nimport { createMetadata, DocImage, OpenSourceCard } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Alert Notifications | thirdweb Engine\",\n\tdescription: \"Get notified of issues or events on your cloud-hosted Engine.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Smart Account Contract References\nDESCRIPTION: Core smart contract references for Simple and Managed account implementations, including Account.sol, AccountFactory.sol, ManagedAccount.sol, and ManagedAccountFactory.sol. These contracts provide basic account abstraction features and upgradeability options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nAccount.sol\nAccountFactory.sol\nManagedAccount.sol\nManagedAccountFactory.sol\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Access Restrictions Documentation\nDESCRIPTION: This code creates metadata for the Access Restrictions documentation page. It sets the title, description, and image information for the page using the createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/api-keys/access/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"Access Restrictions\",\n\tdescription: \"Set access restrictions on API keys\",\n\timage: {\n\t\ttitle: \"Access Restrictions on API Keys\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Supported Callback Functions in ERC721Core Contract\nDESCRIPTION: This Solidity function defines the supported callback functions for the ERC721Core contract. It returns an array with the beforeMint callback function selector and sets it as a required callback.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/how-it-works/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getSupportedCallbackFunctions()\n\tpublic\n\tpure\n\toverride\n\treturns (SupportedCallbackFunction[] memory supportedCallbackFunctions)\n{\n\tsupportedCallbackFunctions = new SupportedCallbackFunction[1];\n\tsupportedCallbackFunctions[0] = SupportedCallbackFunction({\n\t\tselector: BeforeMintCallback.beforeMint.selector,\n\t\tmode: CallbackMode.REQUIRED\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155Base Contract in Solidity\nDESCRIPTION: This snippet shows how to import the ERC1155Base contract from the thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/base/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC1155Base.sol\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for Thirdweb .NET SDK MAUI Guide\nDESCRIPTION: This code snippet sets up the metadata for the documentation page using the createMetadata function. It specifies the title and description for the guide on integrating Thirdweb .NET SDK into MAUI projects.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/maui/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"Thirdweb .NET SDK in MAUI\",\n\tdescription:\n\t\t\"A guide on how to integrate the Thirdweb .NET SDK into your MAUI projects to add blockchain functionality.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL for Insight API\nDESCRIPTION: Demonstrates how to construct the base URL for the thirdweb Insight API using chain ID as a subdomain parameter.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseUrl = `https://{{chainId}}.insight.thirdweb.com`;\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Listings\nDESCRIPTION: View function to get all listings within a specified ID range, including listing status and token information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nenum TokenType {\n    ERC721,\n    ERC1155\n}\n\nenum Status {\n    UNSET,\n    CREATED,\n    COMPLETED,\n    CANCELLED\n}\n\nstruct Listing {\n    uint256 listingId;\n    address listingCreator;\n    address assetContract;\n    uint256 tokenId;\n    uint256 quantity;\n    address currency;\n    uint256 pricePerToken;\n    uint128 startTimestamp;\n    uint128 endTimestamp;\n    bool reserved;\n    TokenType tokenType;\n    Status status;\n}\n\nfunction getAllListings(uint256 startId, uint256 endId) external view returns (Listing[] memory listings);\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Creating Metadata in JSX\nDESCRIPTION: This snippet imports necessary components and creates metadata for the RPC Edge documentation page. It sets up the page title, icon, and description.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/rpc-edge/overview/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout, DocImage } from \"@doc\";\nimport { createMetadata } from \"@doc\";\nimport rpcDiagramImage from \"./assets/rpc-diagram.svg\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb RPC Edge\",\n\t\ticon: \"rpc\",\n\t},\n\ttitle: \"thirdweb RPC Edge\",\n\tdescription:\n\t\t\"Remote Procedure Call (RPC) Edge provides reliable access to querying data and interacting with the blockchain through global edge RPCs.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Claim Phases in Markdown\nDESCRIPTION: This snippet defines claim phases and their functionality in thirdweb's drop contracts. It explains how claim phases allow configuration of various aspects of a drop, such as token claiming permissions, quantity, price, and release date.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/glossary/claim-phases/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Claim Phases\n\nClaim phases or \"claim conditions\" allow you to configure various aspects of a [drop](/glossary/drop); such as who can claim tokens,\nhow many tokens will be released, the price of each token, release date, etc.\n\nThey are available to use for any smart contract that implements the [Drop Single Phase](/contracts/build/extensions/general/DropSinglePhase)\nor [Drop](/contracts/build/extensions/general/Drop) extension smart contracts, which includes our ready-to-deploy smart contracts like the\n[NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20), and [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155) smart contracts.\n```\n\n----------------------------------------\n\nTITLE: Creating Page Metadata Configuration\nDESCRIPTION: Exports metadata configuration for the documentation page including title, description and image settings\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/overview/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Wallets\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"thirdweb Wallets | thirdweb\",\n\tdescription:\n\t\t\"thirdweb wallets provide a comprehensive toolkit for connecting users to applications and games. We offer a way to let users sign in however you want. Be it, connecting an external wallet, or creating a seamless login experiences for brand new users, or enabling you to own your web3 identity stack, we have a solution for you.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing EndpointMetadata Component in React\nDESCRIPTION: This snippet imports the EndpointMetadata component from a local file. It's likely that this component is used to display metadata information for an endpoint in a web application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/list-session/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { EndpointMetadata } from './EndpointMetadata';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Chain Import Comparison\nDESCRIPTION: Demonstrates the updated chain import syntax between SDK versions\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/cheatsheet/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sepolia } from \"@thirdweb-dev/chains\"\n// vs\nimport { sepolia } from \"thirdweb/chains\"\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155ClaimCustom Dependencies\nDESCRIPTION: Basic imports required for implementing ERC1155ClaimCustom functionality including the core ERC1155 contract and claimable interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155ClaimCustom/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/ERC1155.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IClaimableERC1155.sol\";\n```\n\n----------------------------------------\n\nTITLE: Getting Total Offers Count Solidity Interface\nDESCRIPTION: View function that returns the total number of offers created on the marketplace.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_26\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalOffers() external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Overriding uri Function in ERC1155Drop Contract\nDESCRIPTION: This function returns the metadata URI for an NFT. It handles both encrypted and non-encrypted batches, appending the tokenId to the base URI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/drop/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction uri(uint256 _tokenId) public view virtual override returns (string memory) {\n    (uint256 batchId, ) = _getBatchId(_tokenId);\n    string memory batchUri = _getBaseURI(_tokenId);\n\n    if (isEncryptedBatch(batchId)) {\n        return string(abi.encodePacked(batchUri, \"0\"));\n    } else {\n        return string(abi.encodePacked(batchUri, _tokenId.toString()));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CI Mode Option\nDESCRIPTION: CLI option to enable Continuous Integration mode\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/reference/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n--ci\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155Supply Interface\nDESCRIPTION: Import statement for the ERC1155Supply interface from thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Supply/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/interface/IERC721Supply.sol\"\n```\n\n----------------------------------------\n\nTITLE: Chain ID Implementation Examples\nDESCRIPTION: Demonstrates different methods of specifying chain IDs in API requests, including subdomain and query parameter approaches.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/llmstxt/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Example\nconst baseUrl = `https://{{chainId}}.insight.thirdweb.com`;\n\n// Example for a single chain\nconst url = `https://insight.thirdweb.com/v1/events?chain={{chainId}}`;\n// Example for multiple chains\nconst url = `https://insight.thirdweb.com/v1/events?chain=1&chain=137`;\n```\n\n----------------------------------------\n\nTITLE: Importing ContractMetadata Extension\nDESCRIPTION: Shows how to import the ContractMetadata extension from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/ContractMetadata/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/ContractMetadata.sol\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for Pack Contract Documentation in JavaScript\nDESCRIPTION: This code snippet creates metadata for the Pack contract documentation page. It sets the image title, icon, page title, and description using the createMetadata function from the @doc module.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/pack/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Pack contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Pack contract | thirdweb\",\n\tdescription: `The packs are ERC1155 NFTs themselves, which can have the metadata you'd expect of an NFT, such as a name, image, description, etc.`,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering EndpointMetadata Component in JSX\nDESCRIPTION: This snippet renders the EndpointMetadata component in JSX. The component is used without any props, suggesting it might have default behavior or fetch its own data internally.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/list-session/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<EndpointMetadata />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons for Modular Contracts Documentation\nDESCRIPTION: This snippet imports necessary components and icons from various modules for use in the Modular Contracts documentation page. It includes custom components from the @doc module and icons from the lucide-react library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/overview/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DocImage, createMetadata, FeatureCard } from \"@doc\";\nimport { PencilRulerIcon, HandCoinsIcon, BlocksIcon, WorkflowIcon, ShieldCheckIcon, CirclePlusIcon } from \"lucide-react\";\nimport OverviewImage from \"./assets/overview-image.png\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Router Entry Point\nDESCRIPTION: Setup for integrating Thirdweb with Expo Router\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/getting-started/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// file: index.js\n\n// this needs to be imported before expo-router\nimport \"@thirdweb-dev/react-native-adapter\";\nimport \"expo-router/entry\";\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721ClaimCustom Dependencies in Solidity\nDESCRIPTION: These import statements bring in the necessary contracts for implementing the ERC721ClaimCustom functionality, including the ERC721 standard and the IClaimableERC721 interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721ClaimCustom/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/ERC721.sol\";\nimport \"@thirdweb-dev/contracts/extension/interface/IClaimableERC721.sol\";\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155LazyMint Contract\nDESCRIPTION: Example implementation of a custom NFT contract inheriting from ERC1155LazyMint with constructor and verifyClaim override.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/lazy-mint/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC1155LazyMint.sol\";\n\ncontract MyNFT is ERC1155LazyMint {\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC1155LazyMint(_defaultAdmin, _name, _symbol, _royaltyRecipient, _royaltyBps) {}\n\n    function verifyClaim(address _claimer, uint256 _tokenId, uint256 _quantity) public view virtual override {\n      // Your custom claim restriction logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using EndpointMetadata React Component\nDESCRIPTION: Demonstrates how to import and render the EndpointMetadata component in a React application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/clear-session/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EndpointMetadata } from './EndpointMetadata';\n\n<EndpointMetadata />\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for thirdweb Universal Bridge Documentation\nDESCRIPTION: Sets up metadata for the documentation page including title, description, and image configuration using the createMetadata helper function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/onramp-providers/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Universal Bridge - Onramp Providers\",\n\t\ticon: \"thirdweb\",\n\t},\n\ttitle: \"thirdweb Universal Bridge - Onramp Providers | thirdweb\",\n\tdescription:\n\t\t\"Integrate onramp providers for any onchain transaction and set preferred providers\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb Package for React Native\nDESCRIPTION: Command to install the thirdweb package in a React Native project, which is required for using In-App Wallet functionality.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/firebase-auth/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i thirdweb\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb API Keys Documentation (JavaScript)\nDESCRIPTION: This code snippet creates metadata for the thirdweb API Keys documentation page. It sets the title, description, and image properties for the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/api-keys/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb API Keys\",\n\tdescription:\n\t\t\"API Keys are required to use thirdweb's infrastructure services\",\n\timage: {\n\t\ttitle: \"thirdweb API Keys\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Module Configuration for TransferableModule Contract\nDESCRIPTION: This Solidity function returns the configuration for the TransferableModule. It specifies the beforeTransfer callback function and requires the ERC721 interface, illustrating how different modules can have distinct configurations.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/how-it-works/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getModuleConfig() external pure override returns (ModuleConfig memory config) {\n\tconfig.callbackFunctions = new CallbackFunction[1];\n\tconfig.callbackFunctions[0] = CallbackFunction(this.beforeTransfer.selector);\n\n\tconfig.requiredInterfaces = new bytes4[1];\n\tconfig.requiredInterfaces[0] = 0x80ac58cd; // ERC721.\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Account Contract\nDESCRIPTION: Shows how to import the Account smart contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/smart-wallet/non-upgradeable/Account.sol\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up React App with Vite\nDESCRIPTION: Commands to create a new React application with TypeScript template using Vite and navigate to the client directory.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ npm create vite@latest client -- --template react-ts\n$ cd client\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Documentation Layout in JSX\nDESCRIPTION: Imports the Stack and ArticleIconCard components from the @doc library, along with various icon components from the @/icons directory. These components are used to structure the documentation page layout.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/blockchain-api/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Stack, ArticleIconCard } from \"@doc\";\nimport { TypeScriptIcon, ReactIcon, UnityIcon, UnrealEngineIcon, DotNetIcon } from \"@/icons\";\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Access Function\nDESCRIPTION: Implementation of the _counterStorage function to access the CounterStorage library data.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-module-contract/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _counterStorage()\n    internal\n    pure\n    returns (CounterStorage.Data storage)\n{\n    return CounterStorage.data();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Metadata for ThirdwebCommon Module in TypeScript\nDESCRIPTION: Sets up metadata for the ThirdwebCommon module documentation by importing a utility function and defining the title and description for the module.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/cpp/common/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUnrealEngineMetadata } from \"../../util\";\n\nexport const metadata = createUnrealEngineMetadata({ title: \"ThirdwebCommon\", description: \"Common enums.\" });\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20Drop Contract in Solidity\nDESCRIPTION: This snippet shows how to import the ERC20Drop contract from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC20Drop.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing Metadata and GitHub Button Link in JavaScript\nDESCRIPTION: This code snippet imports necessary components for creating metadata and a GitHub button link. It then creates metadata for the thirdweb Modular Contracts documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-1155/misc/royaltyERC1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration for Documentation Page\nDESCRIPTION: Sets up the metadata for the documentation page including title, description, and image details using createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/register-walletconnect/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Ecosystem Wallet\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"Register with WalletConnect - Ecosystem Wallet | thirdweb\",\n\tdescription: \"Ecosystem Wallet - Own your own web3 identity stack\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Metadata and GithubButtonLink Components in JavaScript\nDESCRIPTION: This code snippet imports the createMetadata function and GithubButtonLink component from a custom module. It then uses createMetadata to define metadata for the documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-721/misc/transferableERC721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155Burnable Interface\nDESCRIPTION: Import statement for the IBurnableERC721 interface from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Burnable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/interface/IBurnableERC721.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Creating Metadata in JavaScript\nDESCRIPTION: This snippet imports necessary components and creates metadata for the Modular Contracts design document. It sets up the page title, description, and associated images.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/modular-contracts/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DocImage, Callout } from \"@doc\";\nimport { createMetadata } from \"@doc\";\nimport modularContractsAnalogyImage from \"./assets/modular-contracts-analogy.png\";\nimport modularContractsFlowImage from \"./assets/modular-contracts-flow.png\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Modular Contracts design document\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Modular Contracts design document | thirdweb\",\n\tdescription:\n\t\t\"This is a live document that explains the technical design details of the Modular Contract architecture\",\n});\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Option\nDESCRIPTION: CLI option to show debug logs\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/reference/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-d--debug\n```\n\n----------------------------------------\n\nTITLE: Importing AccountFactory Contract in Solidity\nDESCRIPTION: This snippet shows how to import the AccountFactory contract from the thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account-factory/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/prebuilts/account/non-upgradeable/AccountFactory.sol\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration\nDESCRIPTION: Configuration code that sets up the metadata for the documentation page, including title, description and image settings.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-1155/misc/sequentialTokenIdERC1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Insight Documentation\nDESCRIPTION: Sets up metadata for the thirdweb Insight documentation page using the createMetadata function. Defines the title, description and image for the documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb Insight For Agents & LLMs\",\n\tdescription:\n\t\t\"thirdweb Insight query documentation formatted for use with LLMs and agents\",\n\timage: {\n\t\ttitle: \"Insight\",\n\t\ticon: \"insight\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Modular Contracts Documentation\nDESCRIPTION: This code creates metadata for the Modular Contracts documentation page using the createMetadata function. It sets the title, description, and image properties for the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/overview/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb Modular Contracts\",\n\tdescription:\n\t\t\"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n\timage: {\n\t\ttitle: \"thirdweb Modular Contracts\",\n\t\ticon: \"solidity\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata with React Components\nDESCRIPTION: Imports and configures metadata and UI components for the pre-built contracts documentation page. Sets up page metadata including title, description and icon configuration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/overview/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArticleCard, createMetadata, Grid, FeatureCard } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Pre-built Contracts\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"thirdweb Pre-built Contracts | Explore\",\n\tdescription:\n\t\t\"Pre-built contracts are proxy contracts created by the thirdweb team to cover most common use cases and patterns for smart contracts\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for thirdweb Modular Contracts Documentation\nDESCRIPTION: This code snippet sets up the metadata for the documentation page, including title, description, and image details for the thirdweb Modular Contracts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-20/misc/creatorTokenERC20/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Wallet Address Query\nDESCRIPTION: Example curl command to fetch user details by wallet address using the thirdweb API endpoint.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/user-management/get-user-profiles/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET 'https://in-app-wallet.thirdweb.com/api/2023-11-30/embedded-wallet/user-details?queryBy=walletAddress&walletAddress=0x123456789abcdef' \\\n  -H 'x-secret-key: YOUR_THIRD_WEB_CLIENT_SECRET'\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155SignatureMint Contract in Solidity\nDESCRIPTION: This snippet shows how to import the ERC1155SignatureMint contract from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/signature-mint/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC1155SignatureMint.sol\";\n```\n\n----------------------------------------\n\nTITLE: Airdrop Recipients Array Structure\nDESCRIPTION: Example structure for defining recipients and amounts for token airdrop. Amounts are specified in wei units.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/airdrop-erc20/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n[\n\t{\n\t\trecipient: \"0x123...\",\n\t\tamount: 1, // these amounts are in wei\n\t},\n\t{\n\t\trecipient: \"0xabc...\",\n\t\tamount: 10, // these amounts are in wei\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: JWKS JSON Structure for Public Key in JSON\nDESCRIPTION: JSON structure for the JWKS (JSON Web Key Set) file that will contain the converted JWK from the public key.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-jwt-auth-server/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\n    {\n       ... JWK ...\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb Package\nDESCRIPTION: Command to install the thirdweb package in a Node.js project for using smart accounts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/account-abstraction/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i thirdweb\n```\n\n----------------------------------------\n\nTITLE: Getting Total Number of Auctions Created\nDESCRIPTION: The totalAuctions function returns the total number of auctions created on the platform so far, with no parameters required.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalAuctions() external view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for thirdweb Modular Contracts Documentation\nDESCRIPTION: This snippet creates metadata for the documentation page using the createMetadata function from the @doc package. It sets the title, description, and image properties for the thirdweb Modular Contracts documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/how-it-works/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb Modular Contracts\",\n\tdescription:\n\t\t\"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n\timage: {\n\t\ttitle: \"thirdweb Modular Contracts\",\n\t\ticon: \"solidity\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721Mintable Interface in Solidity\nDESCRIPTION: Shows how to import the IMintableERC721 interface from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Mintable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC721.sol\";\n```\n\n----------------------------------------\n\nTITLE: Running Expo Development Build Commands\nDESCRIPTION: Commands to create and run development builds for iOS and Android platforms using Expo CLI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/troubleshooting/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo prebuild\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo run:ios\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo run:android\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js package.json for IPFS Deployment\nDESCRIPTION: Deploy script configuration in package.json for deploying a Next.js application to IPFS.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/storage/how-to-use-storage/host-web-app/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"yarn build && npx thirdweb@latest upload build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Batch ID at Index Function\nDESCRIPTION: Function to get the batch ID at a specific index in the array of batch IDs.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/BatchMintMetadata/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getBatchIdAtIndex(uint256 _index) public view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb SDK using npm\nDESCRIPTION: Command to install the thirdweb TypeScript SDK using npm package manager.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install thirdweb\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets in JSX\nDESCRIPTION: This code snippet imports various components and assets used in the documentation page. It includes custom components for creating metadata, displaying images, and structuring the content.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-modular/edition/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMetadata, DocImage, Steps, Step, Callout} from \"@doc\";\nimport { ContractDeployCard } from \"@/components/Document/ContractDeployCard\";\nimport editionStep1 from './assets/edition_step1.png'\nimport editionStep2 from './assets/edition_step2.png'\nimport editionStep3 from './assets/edition_step3.png'\nimport editionStep4 from './assets/edition_step4.png'\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration in TypeScript\nDESCRIPTION: Configuration setup for the documentation metadata using thirdweb's createMetadata function. Defines the title, description, and visual elements for the contract documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/core-contracts/erc-721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration in TypeScript\nDESCRIPTION: Sets up metadata configuration for the Marketplace V3 documentation page using thirdweb's createMetadata function. Configures page title, description, and visual elements.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/marketplace/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Marketplace V3 design document\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Marketplace V3 design document | thirdweb\",\n\tdescription:\n\t\t\"This is a live document that explains what the thirdweb Marketplace V3 smart contract is, how it works and can be used, and why it is written the way it is\",\n});\n```\n\n----------------------------------------\n\nTITLE: Dry Run Option\nDESCRIPTION: CLI option to perform a dry run without actually publishing\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/reference/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--dry-run\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Import statements for documentation components and image assets used in the deployment guide interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/tutorials/deploy-erc20-core/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Steps, Step, DocImage} from \"@doc\";\nimport ModularContracts from './assets/modular-contracts.png';\nimport ERC20Base from './assets/erc-20-base.png';\nimport ContractMetadata from './assets/contract-metadata.png';\nimport DeployedContract from './assets/deployed-contract.png';\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration in JavaScript\nDESCRIPTION: Sets up metadata configuration for the thirdweb modular contracts documentation using the createMetadata function. Defines title, description, and image properties for the documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/core-contracts/erc-20/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Metadata for thirdweb Documentation\nDESCRIPTION: This code snippet imports necessary functions from the @doc module and creates metadata for the thirdweb Modular Contracts documentation page. It sets the title, description, and image properties for the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-721/metadata/openEditionMetadataERC721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description: \n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a Typed 'Hello World' Variable in TypeScript\nDESCRIPTION: A TypeScript code snippet that declares a constant variable 'msg' with an explicit string type and assigns it the value 'Hello World'.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/code/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst msg: string = \"Hello World\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for Ecosystem Wallet Explorer in JavaScript\nDESCRIPTION: This code snippet sets up the metadata for the Ecosystem Wallet Explorer page. It imports necessary functions and assets, then creates metadata including image details, title, and description.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/portal/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, DocImage } from \"@doc\";\nimport EcosystemWalletOverview from \"../assets/wallet-explorer.png\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Ecosystem Wallet\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"Wallet Explorer - Ecosystem Wallet | thirdweb\",\n\tdescription: \"Ecosystem Wallet - Own your own web3 identity stack\",\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Utility Function Blueprints in JSX\nDESCRIPTION: Renders various utility function blueprints using the Blueprint component. Each blueprint represents a specific utility function such as signing messages, validating addresses, and handling OAuth providers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/utilities/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Blueprint code={signMessageNode} className='w-full h-48' />\n\n<Blueprint code={toTextStringNode} className='w-full h-40' />\n\n<Blueprint code={isValidAddressNode} className='w-full h-32' />\n\n<Blueprint code={isChecksummedAddressNode} className='w-full h-32' />\n\n<Blueprint code={toChecksummedAddressNode} className='w-full h-32' />\n\n<Blueprint code={isValidNode} className='w-full h-48' />\n\n<Blueprint code={equalityNode} className='w-full h-60' />\n\n<Blueprint code={zeroAddressNode} className='w-full h-28' />\n\n<Blueprint code={oAuthProviderToStringText} className=\"w-full h-32\" />\n\n<Blueprint code={stringTextToOAuthProvider} className=\"w-full h-32\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for Engine Admin Documentation in JSX\nDESCRIPTION: Creates metadata for the admin management documentation page in thirdweb Engine, including the title and description fields that will be used for SEO and page identification.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/admins/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"@doc\";\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Admins | thirdweb Engine\",\n\tdescription: \"Manage dashboard access to your Engine instance.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration in JavaScript\nDESCRIPTION: Sets up metadata for the documentation page including title, description and image configuration using the createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/publish-options/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from \"@doc\";\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Publish options\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Publish Options | thirdweb Publish\",\n\tdescription:\n\t\t\"The deployment options you choose will determine how users deploy your contract\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component in JSX\nDESCRIPTION: A JSX code snippet that defines a React functional component 'Msg' which renders a div with a text prop, and demonstrates its usage.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/code/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst Msg = ({ text }) => {\n\treturn <div>{text}</div>;\n};\n\n<Msg text=\"hello world\" />;\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for thirdweb Modular Contracts Documentation\nDESCRIPTION: This code snippet imports necessary functions and creates metadata for the documentation page. It sets the title, description, and image properties for the Modular Contracts documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DocImage, createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb Modular Contracts\",\n\tdescription:\n\t\t\"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n\timage: {\n\t\ttitle: \"thirdweb Modular Contracts\",\n\t\ticon: \"solidity\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Forge and thirdweb Modular Contracts\nDESCRIPTION: Commands to install Forge from Foundry and the thirdweb modular contracts library. Also includes the remapping configuration for the foundry.toml file.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-module-contract/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge init\nforge install thirdweb-dev/modular-contracts --no-commit\n```\n\nLANGUAGE: toml\nCODE:\n```\nremappings = ['@thirdweb-dev=lib/modular-contracts/']\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for MintableERC721 Documentation\nDESCRIPTION: This code creates metadata for the MintableERC721 documentation page, including title, description, and image information. It uses the createMetadata function imported earlier.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-721/minting/mintableERC721/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing burn Function in ERC721Drop\nDESCRIPTION: The burn function allows an owner or approved operator to burn an NFT by its tokenId. It uses ERC721A's internal _burn function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/drop/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(uint256 _tokenId) external virtual {\n    _burn(_tokenId, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration for ERC-20 Airdrop Contract\nDESCRIPTION: Configuration setup for the contract documentation metadata including title, icon, and description.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/airdrop-erc20/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Airdrop ERC-20 Contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Airdrop ERC-20 Contract | thirdweb\",\n\tdescription:\n\t\t\"Airdrop ERC-20 tokens or the chain's native token (e.g. ether for Ethereum mainnet) to a list of recipients\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Details by Wallet Address in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getUser function from thirdweb to retrieve user details using a wallet address. It requires a client object and the wallet address as parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/get-user-details/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUser } from \"thirdweb\";\n\nconst user = await getUser({\n  client,\n  walletAddress: \"0x123...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Testing JWKS Endpoint with cURL in Bash\nDESCRIPTION: Command to test the JWKS endpoint of the JWT auth server using cURL, which retrieves the JSON Web Key Set.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-jwt-auth-server/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000/.well-known/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Importing Drop1155 Extension\nDESCRIPTION: Basic import statement for the Drop1155 contract extension\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/Drop1155.sol\";\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Contracts with npm\nDESCRIPTION: Command to install the @thirdweb-dev/contracts package using npm in a Hardhat project.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/modular-contracts/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @thirdweb-dev/contracts\n```\n\n----------------------------------------\n\nTITLE: Rendering First-Party Wallet Cards in JSX\nDESCRIPTION: This JSX code renders a grid of wallet cards for thirdweb's first-party wallets (Smart Wallet, In App Wallet, and Ecosystem Wallet). Each card includes a label, link to reference documentation, and an icon.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/supported-wallets/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<WalletCardGrid>\n\t<WalletCard\n\t\tlabel=\"Smart Wallet\"\n\t\thref=\"/references/typescript/v5/smartWallet\"\n\t\ticon={SmartWalletIcon}\n\t/>\n\t<WalletCard\n\t\tlabel=\"In App Wallet\"\n\t\thref=\"/references/typescript/v5/inAppWallet\"\n\t\ticon={EmbeddedWalletIcon}\n\t/>\n\t<WalletCard\n\t\tlabel=\"Ecosystem Wallet\"\n\t\thref=\"/references/typescript/v5/ecosystemWallet\"\n\t\ticon={EmbeddedWalletIcon}\n\t/>\n</WalletCardGrid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata\nDESCRIPTION: Sets up the page metadata including title, description, and image configuration for the documentation page using the createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/api-keys/delete/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"Delete API Key\",\n\tdescription:\n\t\t\"Deleting an API key will invalidate it, making it no longer usable.\",\n\timage: {\n\t\ttitle: \"Delete thirdweb API Key\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSSL Version for iOS in Expo\nDESCRIPTION: JSON configuration for app.json to specify OpenSSL version compatibility for different Xcode versions using expo-build-properties plugin.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react-native/v5/troubleshooting/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      \"expo-build-properties\",\n      {\n        \"ios\": {\n          \"extraPods\": [\n            {\n              \"name\": \"OpenSSL-Universal\",\n              \"configurations\": [\"Release\", \"Debug\"],\n              \"modular_headers\": true,\n              \"version\": \"<OPENSSL_VERSION>\"\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb MCP Server from Source in Bash\nDESCRIPTION: This snippet demonstrates how to clone the thirdweb AI repository, navigate to the thirdweb-mcp directory, and synchronize dependencies using uv.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/mcp-server/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/thirdweb-dev/ai.git thirdweb-ai\ncd thirdweb-ai/python/thirdweb-mcp\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets for NFT Drop Documentation\nDESCRIPTION: Imports necessary components and assets for the NFT Drop contract documentation page. This includes metadata creation, custom components, and image assets for the step-by-step guide.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-modular/nft-drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, DocImage, Steps, Step, Callout } from \"@doc\";\nimport { ContractDeployCard } from \"@/components/Document/ContractDeployCard\";\n\nimport nftDropStep1 from './assets/nft_drop_step1.png'\nimport nftDropStep2 from './assets/nft_drop_step2.png'\nimport nftDropStep3 from './assets/nft_drop_step3.png'\n```\n\n----------------------------------------\n\nTITLE: Cloning thirdweb Auth Express Example\nDESCRIPTION: Command to create a new application using thirdweb's Auth Express template via npx.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx thirdweb create app --template thirdweb-auth-express\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom NFT Contract with ERC1155Drop in Solidity\nDESCRIPTION: This example demonstrates how to create a custom NFT contract by inheriting from the ERC1155Drop base contract. It includes the constructor with necessary parameters for initialization.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-1155/drop/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/base/ERC1155Drop.sol\";\n\ncontract MyNFT is ERC1155Drop {\n    constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps,\n        address _primarySaleRecipient\n    )\n        ERC1155Drop(\n            _defaultAdmin,\n            _name,\n            _symbol,\n            _royaltyRecipient,\n            _royaltyBps,\n            _primarySaleRecipient\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Name Filter Option\nDESCRIPTION: CLI option to filter contracts by contract name\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/reference/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-cn--contract-name <string>\n```\n\n----------------------------------------\n\nTITLE: Converting OAuth Provider Enums in C++\nDESCRIPTION: These functions convert EThirdwebOAuthProvider enum values to their text or string representations. They are part of the ThirdwebUtils namespace in the Unreal Engine SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/cpp/thirdweb-utils/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nToText(Provider)\nToString(Provider)\n```\n\n----------------------------------------\n\nTITLE: Importing AutoConnect Dependencies\nDESCRIPTION: Import statements for AutoConnect component and its dependencies including thirdweb wallet utilities and React components.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/AutoConnect/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TablePropertiesIcon } from \"lucide-react\";\nimport {\n\tDetails,\n\tBreadcrumb,\n\tCallout,\n\tSteps,\n\tStep,\n\tDocImage,\n\tcreateMetadata,\n\tArticleIconCard,\n\tStack,\n} from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Localizing thirdweb ConnectButton\nDESCRIPTION: Example of setting localization for thirdweb ConnectButton.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<ConnectButton\n  locale={\"es-ES\"}\n  {...etc}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Airdrop ERC-721 Documentation in TypeScript\nDESCRIPTION: This snippet creates metadata for the Airdrop ERC-721 documentation page using the createMetadata function. It sets the image title, icon, page title, and description for the documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/airdrop-erc721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Airdrop ERC-721\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Airdrop ERC-721 | thirdweb\",\n\tdescription: `AirdropERC721 contract is suitable to use when you want to transfer ERC721 NFTs to a list of recipient addresses, where these recipients are not expected to individually claim their airdrop; they just receive it in a transfer`,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Icons\nDESCRIPTION: Imports required documentation components from @doc and icons from lucide-react library for use in the documentation interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/connecting-wallets/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArticleIconCard, createMetadata, DocImage, Stack } from \"@doc\";\nimport {\n\tZapIcon,\n\tScrollTextIcon,\n\tArrowRightLeftIcon,\n\tWalletIcon,\n\tBlocksIcon,\n\tCodeIcon,\n\tFolderTreeIcon,\n\tPlugZapIcon,\n\tComponentIcon,\n\tCableIcon,\n} from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Using Paymaster & Bundler URL Pattern in thirdweb\nDESCRIPTION: Example of the URL pattern for Paymaster & Bundler services in thirdweb. This pattern is used to construct the endpoint URL for both paymaster and bundler operations based on chain ID and client ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/infrastructure/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://<chain_id>.bundler.thirdweb.com/v2/<thirdweb-client-id>\n```\n\n----------------------------------------\n\nTITLE: React Component Import Configuration\nDESCRIPTION: Imports various React components and utilities used for documentation rendering, including custom components for steps, callouts, and metadata creation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/getting-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\tCallout,\n\tSteps,\n\tStep,\n\tDocImage,\n\tArticleIconCard,\n\tcreateMetadata,\n} from \"@doc\";\nimport { GraduationCap } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Account Abstraction Extensions\nDESCRIPTION: Table listing account abstraction related extensions including AccountExtension, BaseAccount, and BaseAccountFactory with their descriptions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                                          | Description                                                                                                    |\n| ----------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------- |\n| [AccountExtension](/contracts/build/extensions/erc-4337/AccountExtension)     | Batch minting of new tokens                                                                                    |\n| [BaseAccount](/contracts/build/extensions/erc-4337/SmartWallet)               | Implementation of the `IAccount` interface used to detect the `SmartWallet` Dashboard extension.               |\n| [BaseAccountFactory](/contracts/build/extensions/erc-4337/SmartWalletFactory) | Implementation of the `IAccountFactory` interface used to detect the `SmartWalletFactory` Dashboard extension. |\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets in JSX\nDESCRIPTION: This code snippet imports various components and assets used in the documentation page. It includes custom components from the @doc package, an image file, and an icon from the lucide-react library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GithubTemplateCard, ExpandableGrid, createMetadata, OpenSourceCard, DocImage, ArticleIconCard, Grid } from \"@doc\";\nimport SupportedChains from \"../_images/supported-chains.png\";\nimport { ExternalLink } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for TransferableERC20 Documentation\nDESCRIPTION: TypeScript code that creates metadata for the documentation page using thirdweb's documentation framework. Sets the title, description and icon for the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-20/misc/transferableERC20/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Forge and Modular Contracts Framework\nDESCRIPTION: Commands to initialize Forge and install thirdweb's modular contracts framework.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/create-core-contract/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge init\nforge install thirdweb-dev/modular-contracts --no-commit\n```\n\n----------------------------------------\n\nTITLE: Rendering Feature Cards Grid Component\nDESCRIPTION: JSX component that displays a grid of feature cards highlighting the key benefits of thirdweb's pre-built contracts. Each card contains a title, description and icon.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/overview/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n\tclassName=\"my-4 grid gap-2 md:grid-cols-2 lg:grid-cols-2 \"\n>\n\t<FeatureCard\n\t\ttitle=\"Increased security\"\n\t\tdescription=\"Audited contracts with ongoing bug-bounty programs\"\n\t\ticonUrl=\"/icons/feature-cards/verified.svg\"\n\t/>\n\t    <FeatureCard\n    \ttitle=\"Retain ownership\"\n    \tdescription=\"All contracts are fully owned by the contract deployer (you)\"\n\t\t\ticonUrl=\"/icons/feature-cards/ownership.svg\"\n    />\n\n    <FeatureCard\n    \ttitle=\"Easily deployable\"\n    \tdescription=\"Deploy any contract through a UI, CLI, or programmatically\"\n\t\t\ticonUrl=\"/icons/feature-cards/deployable.svg\"\n    />\n\t\t\t<FeatureCard\n\t\ttitle=\"Built with protocols\"\n\t\tdescription=\"Use contracts published by protocols for a wide range of use cases\"\n\t\ticonUrl=\"/icons/feature-cards/protocols.svg\"\n\t/>\n\t\t<FeatureCard\n\t\ttitle=\"Manage contracts\"\n\t\tdescription=\"Use a custom interface post-deployment to interact with contracts\"\n\t\ticonUrl=\"/icons/feature-cards/manage-contracts.svg\"\n\t/>\n\n    <FeatureCard\n    \ttitle=\"Default library\"\n    \tdescription=\"All thirdweb pre-built contracts are available with custom UIs and SDK functionality\"\n\t\t\ticonUrl=\"/icons/feature-cards/default-library.svg\"\n    />\n\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Stake ERC721 Contract in JavaScript\nDESCRIPTION: This snippet creates metadata for the Stake ERC721 contract using the createMetadata function. It sets the image title, icon, page title, and description for the contract documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/stake-erc721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Stake ERC721 contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Stake ERC721 | thirdweb\",\n\tdescription: `This contract allows users to stake their ERC-721 NFTs and get ERC-20 tokens as staking rewards. Contract admin should set the NFT and Reward-token addresses during deployment`,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Creating Metadata in JavaScript\nDESCRIPTION: This snippet imports necessary components and creates metadata for the documentation page. It sets the title and description for the Engine Access Tokens page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/access-tokens/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from \"@doc\";\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Access Tokens | thirdweb Engine\",\n\tdescription: \"Manage API access to your Engine instance.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for AirdropERC20Claimable Contract in JavaScript\nDESCRIPTION: This snippet creates metadata for the AirdropERC20Claimable contract documentation page. It specifies the image, title, and description for the contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/airdrop-erc20-claimable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Airdrop ERC-20 (Claimable) Contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Airdrop ERC-20 (Claimable) Contract | thirdweb\",\n\tdescription:\n\t\t\"The AirdropERC20Claimable contract is suitable to use when you want to airdrop ERC20 tokens to a list of recipient addresses, where these recipients are expected to individually claim their own airdrop\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721DelayedReveal Contract\nDESCRIPTION: Basic import statement for the ERC721DelayedReveal contract from thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/delayed-reveal/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC721DelayedReveal.sol\";\n```\n\n----------------------------------------\n\nTITLE: React Metadata Configuration\nDESCRIPTION: React component metadata configuration using createMetadata function to define title, description and image properties for the thirdweb Modular Contracts documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-1155/metadata/openEditionMetadataERC1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description: \n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for Edition Contract Documentation in JavaScript\nDESCRIPTION: This code snippet creates metadata for the Edition contract documentation page. It sets the image title, icon, page title, and description using the createMetadata function from the @doc module.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/edition/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Edition contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Edition contract | thirdweb\",\n\tdescription: `The Edition contract is best used when you want to release many NFTs based on the same asset, but you don't want to \"drop\" or \"release\" them for your community to claim`,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata for API Key Documentation\nDESCRIPTION: Sets up the page metadata including title, description, and image properties for the API key documentation page using the createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/api-keys/edit-services/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"Edit thirdweb API Key\",\n\tdescription:\n\t\t\"All services on API keys are enabled by default. You can disable any services or edit settings for each service.\",\n\timage: {\n\t\ttitle: \"Edit thirdweb API Key\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb Connect SDK\nDESCRIPTION: Commands to install the thirdweb Connect SDK using different package managers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: npm\nCODE:\n```\nnpm i thirdweb\n```\n\nLANGUAGE: npm\nCODE:\n```\nyarn add thirdweb\n```\n\nLANGUAGE: npm\nCODE:\n```\npnpm i thirdweb\n```\n\nLANGUAGE: npm\nCODE:\n```\nbun i thirdweb\n```\n\n----------------------------------------\n\nTITLE: Running thirdweb CLI Command\nDESCRIPTION: This command demonstrates how to run the thirdweb CLI with options. It allows users to deploy contracts directly to any EVM compatible blockchain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/deploy/reference/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb [options]\n```\n\n----------------------------------------\n\nTITLE: Getting Supply Claimed by Wallet in Solidity Smart Contract\nDESCRIPTION: Returns the number of tokens claimed by a wallet under a specific condition.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getSupplyClaimedByWallet(uint256 conditionId, address claimer) public view returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Importing Assets and Components in Markdown\nDESCRIPTION: This snippet imports image assets and custom components used in the Markdown document. It demonstrates how to integrate external resources and custom React components into a documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/why-thirdweb/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BundleSizeImage from \"./assets/bundlesize-transparent.png\";\nimport PerformanceImage from \"./assets/performance-transparent.png\";\n\nimport { Callout, DocImage, OpenSourceCard } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration in JavaScript\nDESCRIPTION: Creates metadata configuration for the thirdweb Modular Contracts documentation using the createMetadata function\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-1155/metadata/simpleMetadataERC1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Feature Cards Grid\nDESCRIPTION: JSX code for rendering a responsive grid of feature cards describing wallet capabilities\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/overview/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n\tclassName=\"my-4 grid gap-2 md:grid-cols-2 lg:grid-cols-2 \"\n>\n\t<FeatureCard\n\t\ttitle=\"Wallet Support\"\n\t\tdescription=\"500+ wallet providers supported\"\n\t\ticonUrl=\"/icons/feature-cards/wallet.svg\"\n\t/>\n\t<FeatureCard\n\t\ttitle=\"Fiat On-Ramp\"\n\t\tdescription=\"Enable purchase options directly in modal\"\n\t\t\ticonUrl=\"/icons/feature-cards/fiat-ramp.svg\"\n\t/>\n\t<FeatureCard\n\t\ttitle=\"Seamless onboarding\"\n\t\tdescription=\"Email, phone, social, and passkey options\"\n\t\t\ticonUrl=\"/icons/feature-cards/fingerprint.svg\"\n\t/>\n\t<FeatureCard\n\t\ttitle=\"Customizable\"\n\t\tdescription=\"Match your applications branding\"\n\t\ticonUrl=\"/icons/feature-cards/customize.svg\"\n\t/>\n\t<FeatureCard\n\t\ttitle=\"Gasless\"\n\t\tdescription=\"Enable free transactions with smart accounts\"\n\t\ticonUrl=\"/icons/feature-cards/gasless.svg\"\n\t/>\n\t<FeatureCard\n\t\ttitle=\"Localization\"\n\t\tdescription=\"Support for multiple languages\"\n\t\t\ticonUrl=\"/icons/feature-cards/localization.svg\"\n\t/>\n\t<FeatureCard\n\t\ttitle=\"Cross-Chain Support\"\n\t\tdescription=\"Enable end users to view assets, balances, and activities for apps and games across any EVM-compatible chain\"\n\t\ticonUrl=\"/icons/feature-cards/compatibility.svg\"\n\t/>\n\t<FeatureCard\n\t\ttitle=\"User Attribution & Analytics\"\n\t\tdescription=\"Unlock analytics for developers and end user activity across your ecosystem\"\n\t\ticonUrl=\"/icons/feature-cards/compatibility.svg\"\n\t/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to IPFS using thirdweb CLI\nDESCRIPTION: This command demonstrates how to use the thirdweb CLI to upload a file to IPFS and obtain its IPFS URI. It's a prerequisite step for using the MediaRenderer component with IPFS-hosted assets.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/MediaRenderer/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb upload <path/to/file>\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating Metadata for Unreal Engine Documentation\nDESCRIPTION: This snippet imports a utility function and creates metadata for Unreal Engine documentation. It sets the title and description for the ThirdwebUtils namespace documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/cpp/thirdweb-utils/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUnrealEngineMetadata } from \"../../util\";\n\nexport const metadata = createUnrealEngineMetadata({ title: \"ThirdwebUtils Namespace\", description: \"Utility functions\" });\n```\n\n----------------------------------------\n\nTITLE: User Profile Strategy Response Format\nDESCRIPTION: JSON structure showing the standard format for user profile strategy responses, containing strategy type and associated details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/user-management/get-user-profiles/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"strategy\": \"email\",\n\t\"details\": {\n\t\t\"email\": \"user@example.com\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing RainbowKit\nDESCRIPTION: Example of setting localization for RainbowKit.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<RainbowKitProvider\n  locale=\"zh-CN\"\n  {...etc}>\n  {/* Your App */}\n</RainbowKitProvider>\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for Edition Drop Contract Documentation\nDESCRIPTION: Creates metadata configuration for the Edition Drop contract documentation page using the createMetadata function from the @doc package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/edition-drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Edition Drop contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Edition Drop contract | thirdweb\",\n\tdescription: `The Edition Drop contract is best used when you want to release many NFTs with the same metadata that you want users to be able to claim`,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Details Component in Markdown\nDESCRIPTION: Import statement for the Details component used throughout the FAQ document for collapsible sections\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/faqs/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Details } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: Import statement for the required documentation components including metadata creator and GitHub link button.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-20/misc/transferableERC20/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb SDK v5 (TypeScript)\nDESCRIPTION: Commands for installing the latest version of thirdweb SDK (v5) using different package managers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/installation/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i thirdweb\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add thirdweb\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i thirdweb\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun i thirdweb\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for In-App Wallet FAQs Page in JavaScript\nDESCRIPTION: This code snippet creates metadata for the In-App Wallet FAQs page using the createMetadata function from the @doc module. It sets the title, description, and image properties for the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/in-app-wallet/faq/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"In-App Wallet FAQs\",\n\tdescription: \"Frequently asked questions about thirdweb's In-App Wallet\",\n\timage: {\n\t\ttitle: \"FAQs for thirdweb In-App Wallet\",\n\t\ticon: \"wallets\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for thirdweb API Key Creation Guide\nDESCRIPTION: This code snippet sets up the metadata for the documentation page, including the title, description, and image details for the guide on creating a thirdweb API key.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/api-keys/create/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DocImage, Callout, Steps, Step } from \"@doc\";\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Create an API Key\",\n\tdescription:\n\t\t\"Log in to the dashboard and navigate to Settings > API Keys view\",\n\timage: {\n\t\ttitle: \"Create thirdweb API Key\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration for Documentation Page\nDESCRIPTION: Configuration object that defines the metadata for the documentation page, including title, description and image properties using createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/factories/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Account Factories\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"Deploy your own ERC-4337 Account Factories | thirdweb\",\n\tdescription:\n\t\t\"Customize the behavior of smart accounts by deploying your own account factory contracts.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Querying ERC-1155 Token Balances - YAML API Endpoint\nDESCRIPTION: API endpoint for retrieving ERC-1155 NFT token balances for a specific wallet address. Requires client ID and owner address as parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/blueprints/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nGET /v1/{clientId}/tokens/erc1155/:ownerAddress\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"collectionAddress\": \"…\",\n    \"tokenId\": \"…\",\n    \"balance\": \"…\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Marketplace Metadata in TypeScript\nDESCRIPTION: Metadata configuration for the Marketplace contract documentation page. Sets up the page title, description, and visual elements using the createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/marketplace/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Marketplace contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Marketplace contract | thirdweb\",\n\tdescription: `A Marketplace is a contract where you can buy and sell NFTs, such as OpenSea or Rarible`,\n});\n```\n\n----------------------------------------\n\nTITLE: Token Transfer Implementation for Claims\nDESCRIPTION: Internal function that handles the minting of tokens during the claim process, returning 0 as the quantity of tokens to mint next.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/drop-vote/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transferTokensOnClaim(address _to, uint256 _quantityBeingClaimed)\n    internal\n    virtual\n    override\n    returns (uint256)\n{\n    _mint(_to, _quantityBeingClaimed);\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Adapter at App Entry Point\nDESCRIPTION: Example of importing the React Native adapter at the top of the main application file to ensure all required polyfills are loaded before the rest of the app.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/react-native-adapter/README.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// this needs to be imported before anything else\nimport \"@thirdweb-dev/react-native-adapter\";\n// the rest of your app\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons for External Wallet Documentation\nDESCRIPTION: This snippet imports necessary components and icons for the external wallet documentation page. It includes imports from custom doc components and various wallet-related icons.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/sign-in-methods/external-wallets/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata, ArticleIconCard, Callout, Grid } from \"@doc\";\nimport { \n  WalletsAuthIcon, \n  WalletsConnectIcon,     \n  ReactIcon,\n  TypeScriptIcon,\n  UnityIcon,\n  DotNetIcon,\n  ExternalLinkIcon,\n  UnrealEngineIcon \n} from \"@/icons\"\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20SignatureMintVote Contract\nDESCRIPTION: Basic import statement for the ERC20SignatureMintVote contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/signature-mint-vote/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC20SignatureMintVote.sol\";\n```\n\n----------------------------------------\n\nTITLE: Image Import Configuration for Documentation\nDESCRIPTION: Imports required components from documentation utilities and image assets for the account linking guide.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/link-accounts/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout, createMetadata, Step, Steps, DocImage } from \"@doc\";\nimport LinkAccount from \"./assets/link-account.png\";\nimport LinkAccountConfirm from \"./assets/link-account-confirm.png\";\nimport LinkedAccountDash from \"./assets/linked-account-dash.png\";\nimport MyAccountTab from \"./assets/my-account-tab.png\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration in JavaScript\nDESCRIPTION: Configuration code that sets up the metadata for the documentation page, including title, description and visual elements.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-1155/minting/claimableERC1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets in React\nDESCRIPTION: This code snippet imports various components and assets used in the document, including metadata creation functions, custom React components, and image assets.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-modular/nft-collection/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, DocImage, Steps, Step, Callout } from \"@doc\";\nimport { ContractDeployCard } from \"@/components/Document/ContractDeployCard\";\nimport collectionStep1 from './assets/nft_collection_step1.png'\nimport collectionStep2 from './assets/nft_collection_step2.png'\nimport collectionStep3 from './assets/nft_collection_step3.png'\nimport collectionTransferable from '../assets/erc721_transferable.png'\nimport collectionBatchMetadata from '../assets/erc721_batchmetadata.png'\nimport collectionMintable from '../assets/erc721_mintable.png'\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets in JavaScript\nDESCRIPTION: This code snippet imports various components and assets needed for the documentation page. It includes custom components from the @doc package and image assets for visual aids.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/api-keys/access/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DocImage, Steps, Step } from \"@doc\";\nimport allowedDomainsImage from \"../assets/allowed-domains.png\";\nimport { createMetadata } from \"@doc\";\nimport AccessRestrictions from \"./assets/access-restrictions.png\";\nimport ProjectOverview from \"../assets/project-overview.png\";\n```\n\n----------------------------------------\n\nTITLE: Setting up ThirdwebProvider in React Native\nDESCRIPTION: Wraps the React Native application with the ThirdwebProvider component for global thirdweb context.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThirdwebProvider } from \"thirdweb/react\";\nimport { client } from \"./thirdwebClient\";\n\nfunction App() {\n  return (\n    <ThirdwebProvider>\n      <YourApp />\n    </ThirdwebProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: thirdweb CLI Options Reference\nDESCRIPTION: This section lists all available options for the thirdweb CLI command. It includes options for specifying project path, clearing cache, dry runs, debugging, CI mode, and various deployment and filtering options.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/deploy/reference/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-p--path <string>\n\n-c--clean\n\n--dry-run\n\n-d--debug\n\n--ci\n\n--dist-path <string>\n\n-n--name <string>\n\n-f--file <string>\n\n-cn--contract-name <string>\n\n-cv--contract-version <string>\n\n--app\n\n--contract\n\n--dynamic\n\n-k--key <string>\n```\n\n----------------------------------------\n\nTITLE: Feature Comparison Table in Markdown\nDESCRIPTION: This Markdown table compares features of thirdweb, Wagmi + Viem, and Ethers@6. It covers various aspects like contract API, wallet functionality, and ecosystem support, highlighting thirdweb's comprehensive feature set.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/why-thirdweb/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                                           | thirdweb | Wagmi + Viem              | Ethers@6 |\n| ----------------------------------------- | -------- | ------------------ | -------- |\n| Type safe contract API                    | ✅       | ✅                 | ✅       |\n| Type safe wallet API                      | ✅       | ✅                 | ✅       |\n| EVM utils                                 | ✅       | ✅                 | ✅       |\n| RPC for any EVM                           | ✅       | ⚠️ public RPC only  | ❌       |\n| Automatic ABI Resolution                  | ✅       | ❌                 | ❌       |\n| IPFS Upload/Download                      | ✅       | ❌                 | ❌       |\n| In-app wallet (email/ social login)       | ✅       | ⚠️ via 3rd party   | ❌       |\n| Account abstraction (ERC4337) support     | ✅       | ⚠️ via 3rd party   | ❌       |\n| Web3 wallet connectors                    | ✅       | ✅                 | ❌       |\n| Local wallet creation                     | ✅       | ✅                 | ✅       |\n| Auth (SIWE)                               | ✅       | ✅                 | ❌       |\n| Extensions functions for common standards | ✅       | ✅                 | ❌       |\n| React Hooks                               | ✅       | ✅                 | ❌       |\n| React UI components                       | ✅       | ❌                 | ❌       |\n| React Native Hooks                        | ✅       | ✅                 | ❌       |\n| React Native UI Components                | ✅       | ❌                 | ❌       |\n| CLI (codegen)                             | ✅       | ✅                 | ❌       |\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Assets for Nebula Documentation\nDESCRIPTION: Imports necessary UI components from 'lucide-react' and custom '@doc' package, along with image assets for the documentation page. These imports are used throughout the documentation to render various UI elements.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Wallet, File, MessageCircle, Braces, Bot, Blocks } from \"lucide-react\";\nimport { DocImage, createMetadata, FeatureCard, GithubTemplateCard, Stack, Grid, ArticleCard } from \"@doc\";\nimport NebulaDiagram from \"./assets/nebula-diagram.png\";\nimport SupportedChains from \"../_images/supported-chains.png\";\n```\n\n----------------------------------------\n\nTITLE: Feature Cards Grid Layout for Universal Bridge in JSX/Markdown\nDESCRIPTION: This code defines a responsive grid layout showcasing the key features of Universal Bridge using FeatureCard components. Each card displays a feature title, description, and an icon from Lucide React library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/overview/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n\tclassName=\"my-4 grid gap-2 md:grid-cols-2 lg:grid-cols-2 \"\n>\n\t<FeatureCard\n\t\ttitle=\"Avoid chargeback & liability\"\n\t\tdescription=\"Automatic screening for sanctioned wallets and regions to ensure application safety.\"\n\t\ticonUrl={<Rocket />}\n\t/>\n\n    <FeatureCard\n    \ttitle=\"Global Coverage\"\n    \tdescription=\"Bridging support in over 160+ countries to reach a truly global audience.\"\n    \t\ticonUrl={<Globe/>}\n    />\n    \t    <FeatureCard\n    \ttitle=\"Earn revenue\"\n    \tdescription=\"Monetize your application and earn swap fees on each transaction.\"\n    \t\ticonUrl={<PiggyBank />}\n    />\n    \t\t<FeatureCard\n    \ttitle=\"Transact Securely\"\n    \tdescription=\"Strict one-time approvals ensuring funds are not at risk of exploits.\"\n    \ticonUrl={<ShieldCheck />}\n    />\n    \t<FeatureCard\n    \ttitle=\"Easy-to-integrate Components\"\n    \tdescription=\"Easily integrate components for buying funds, e-commerce checkouts, and more.\"\n    \ticonUrl={<Component />}\n    />\n\n    <FeatureCard\n    \ttitle=\"Customizable Flows\"\n    \tdescription=\"Create your own customized headless flows using the Universal Bridge SDK or API.\"\n    \t\ticonUrl={<Pencil/>}\n    />\n        <FeatureCard\n    \ttitle=\"Flexible Wallet Payments\"\n    \tdescription=\"Enable payments with any wallet that has funds not just the one connected.\"\n    \t\ticonUrl= {<Wallet />}\n    />\n        <FeatureCard\n    \ttitle=\"Multi-hop Routing\"\n    \tdescription=\"Handle multiple swaps at once within one session for a seamless swap experience.\"\n    \t\ticonUrl={<ArrowLeftRight />}\n    />\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Metadata and GitHub Button Link in JavaScript\nDESCRIPTION: This code snippet imports the createMetadata function and GithubButtonLink component, and creates metadata for the thirdweb Modular Contracts documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-1155/misc/transferableERC1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb SDK with npm\nDESCRIPTION: This command installs the thirdweb SDK using npm package manager, which is the standard package manager for Node.js projects.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/tools/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @thirdweb-dev/sdk ethers@^5\n```\n\n----------------------------------------\n\nTITLE: Rendering Get Transaction Receipt Blueprint Component\nDESCRIPTION: Renders a Blueprint component for retrieving transaction receipt information from a transaction hash on a blockchain.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/engine/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Blueprint code={getTransactionReceiptNode} className='w-full h-48' />\n```\n\n----------------------------------------\n\nTITLE: Comparing Single-Chain and Multichain Query URLs in TypeScript\nDESCRIPTION: Shows the difference between traditional single-chain queries using subdomains and multichain queries using the base URL with multiple chain parameters.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/multichain-queries/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Traditional single-chain query (using subdomain)\nconst singleChainUrl = `https://1.insight.thirdweb.com/v1/events`;\n\n// Multichain query (using base URL with chain parameters)\nconst multiChainUrl = `https://insight.thirdweb.com/v1/events?chain=1&chain=137`;\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Wallet Metadata\nDESCRIPTION: Defines metadata for the Smart Wallets blueprint collection including title and description\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/smart-wallet/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createUnrealEngineMetadata({\n\ttitle: \"Smart Wallets\",\n\tdescription: \"Smart Wallet Blueprints\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for External Wallets Documentation Page\nDESCRIPTION: This code creates metadata for the external wallets documentation page, including the page title, description, and associated image information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/sign-in-methods/external-wallets/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"External Wallets\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"External Wallets | thirdweb\",\n\tdescription:\n\t\t\"Learn how to connect and authenticate with external wallets using thirdweb.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Universal Bridge Supported Chains Page in JavaScript\nDESCRIPTION: This code creates metadata for the Universal Bridge supported chains documentation page. It defines the page title, description, and image properties that will be used for SEO and display purposes.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/supported-chains/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Universal Bridge - Supported Chains\",\n\t\ticon: \"thirdweb\",\n\t},\n\ttitle: \"thirdweb Universal Bridge - Supported Chains | thirdweb\",\n\tdescription: \"List of chains supported by Universal Bridge.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Metadata and UI Components in JSX\nDESCRIPTION: This snippet imports necessary components and functions for creating metadata and UI elements in the documentation. It includes imports for createMetadata, Details, and Callout components.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/wallet-credentials/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMetadata, Details } from \"@doc\";\nimport { Callout } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb Package\nDESCRIPTION: Commands for installing the thirdweb package using different package managers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i thirdweb\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add thirdweb\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm i thirdweb\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun i thirdweb\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for FAQ Page in JavaScript\nDESCRIPTION: This code snippet initializes metadata for the FAQ page using the createMetadata function from the @doc package. It sets the page title, description, and image properties for the documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/faq/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"FAQs about Account abstraction\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"FAQs | thirdweb\",\n\tdescription:\n\t\t\"Find answers to frequently asked questions about account abstraction and smart accounts.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Wallet FAQ Page in JavaScript\nDESCRIPTION: This code snippet imports a createMetadata function and uses it to generate metadata for the thirdweb Wallet FAQ page. It sets the title, description, and image properties for the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/faq/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"FAQ for thirdweb Wallet\",\n\tdescription: \"Frequently asked questions about thirdweb's Wallet\",\n\timage: {\n\t\ttitle: \"FAQs for thirdweb Wallet\",\n\t\ticon: \"wallets\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Documentation Page with JSX/TypeScript\nDESCRIPTION: This code snippet creates metadata for the documentation page about thirdweb storage. It imports components from the documentation system and sets up the page title and description.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/infrastructure/storage/how-storage-works/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout, DocImage } from \"@doc\";\nimport { createMetadata } from \"@doc\";\nimport storageDiagramImage from \"./assets/storage-diagram.svg\";\n\nexport const metadata = createMetadata({\n\ttitle: \"how storage works | thirdweb\",\n\tdescription:\n\t\t\"Storage is a tool that simplifies the uploading, pinning, and downloading of files to and from IPFS. It utilizes a pinning service, Pinata, to pin files to IPFS and other solutions simultaneously.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Creating Metadata in JavaScript\nDESCRIPTION: This snippet imports necessary components and creates metadata for the Token Drop contract documentation page. It sets up the page title, description, and image properties.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/token-drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from \"@doc\";\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Token Drop Contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Token Drop Contract | thirdweb\",\n\tdescription:\n\t\t\" Token Drop contract is a way of releasing your ERC20 tokens for a set price.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Creating Metadata in thirdweb\nDESCRIPTION: This code imports necessary components and icons from thirdweb libraries and creates metadata for the documentation page, including title and description for SEO purposes.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/onchain/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ReactIcon } from \"@/icons\";\nimport { createMetadata } from \"@doc\";\nimport { ArticleIconCard, Stack } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Onchain Data UI Components | thirdweb\",\n\tdescription: \"UI components for displaying onchain data\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAccount Contract in Solidity\nDESCRIPTION: Shows how to import the BaseAccount contract from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-4337/SmartWallet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/smart-wallet/utils/BaseAccount.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Creating Metadata for Split Contract Documentation\nDESCRIPTION: This snippet imports necessary components and creates metadata for the Split contract documentation page. It sets up the page title, description, and image details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/split/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from \"@doc\";\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Split contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Split contract | thirdweb\",\n\tdescription: `The Split contract lets you specify multiple wallet addresses that are recipients of any revenue or royalty split`,\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Hello World in Warning Callout\nDESCRIPTION: A simple TypeScript console log statement used within a warning variant Callout component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/callouts/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration in TypeScript\nDESCRIPTION: TypeScript code that creates metadata configuration for the documentation page using createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-721/metadata/batchMetadataERC721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description: \n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Node.js Application for Custom Auth Server\nDESCRIPTION: Bash commands for initializing a new Node.js application using npm or yarn in the custom auth server directory.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-auth-server/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata\nDESCRIPTION: Sets up the page metadata including title, description, and image configuration for the Insight documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb Insight\",\n\tdescription: \"Query, transform and analyze blockchain data\",\n  image: {\n    title: \"Insight\",\n    icon: \"insight\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Login Endpoint with cURL in Bash\nDESCRIPTION: Command to test the login endpoint of the JWT auth server using cURL, providing user credentials in JSON format.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-jwt-auth-server/page.mdx#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/login -H \"Content-Type: application/json\" -d '{\"email\": \"user@example.com\", \"password\": \"password123\"}'\n```\n\n----------------------------------------\n\nTITLE: Progressive Migration: Mixing SDK v4 and v5\nDESCRIPTION: Demonstrates how to use both SDK v4 and v5 side by side, sharing the same wallet using the ethers5adapter utility.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/migrate/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\nimport { prepareContractCall, sendTransaction } from \"thirdweb\";\nimport { ethers5Adapter } from \"thirdweb/adapters/ethers5\";\n\nconst sdk = ThirdwebSDK.fromPrivateKey(pkey, chain);\n\n// convert the signer to be used with the new thirdweb SDK\nconst account = await ethers5Adapter.signer.fromEthers(sdk.getSigner());\n\n// then use the new thirdweb SDK normally\nconst transaction = prepareContractCall({ ... });\nawait sendTransaction({\n\ttransaction,\n\taccount,\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Module Contract with thirdweb CLI\nDESCRIPTION: Command to publish a module contract using thirdweb CLI. Requires a valid THIRDWEB_API_KEY to be replaced in the command.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/get-started/deploy-modular-contract/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb publish -k \"THIRDWEB_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Tutorials Section with ArticleCard Components in JSX\nDESCRIPTION: Creates a grid layout of tutorial cards that link to video resources. Each card includes a title, description, and href link to YouTube tutorials related to Nebula implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid>\n\n<ArticleCard\n\ttitle=\"Blockchain Explorer\"\n\tdescription=\"Learn how to use Nebula to create an AI-powered block explorer\"\n\thref=\"https://www.youtube.com/watch?v=vBooJytkXa4&t=596s\"\n/>\n\n<ArticleCard\n\ttitle=\"Telegram AI Bot\"\n\tdescription=\"Learn how to use Nebula to deploy contracts and transact on Telegram\"\n\thref=\"https://www.youtube.com/watch?v=xrm0emiRGMk&t=1s\"\n/>\n\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Private Key Format Example\nDESCRIPTION: Example format of the generated private key file\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/keypair-authentication/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid of ArticleCards in JSX\nDESCRIPTION: This snippet shows how to create a grid layout of ArticleCard components. The Grid component is used to arrange multiple ArticleCards in a responsive grid format.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/cards/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid>\n<ArticleCard\n\ttitle=\"Some Title\"\n\tdescription=\"This is a short description about this card and its properties.\"\n\thref=\"/\"\n/>\n\n<ArticleCard\n\ttitle=\"Some Title\"\n\tdescription=\"This is a short description about this card and its properties.\"\n\thref=\"/\"\n/>\n\n<ArticleCard\n\ttitle=\"Some Title\"\n\tdescription=\"This is a short description about this card and its properties.\"\n\thref=\"/\"\n/>\n\n<ArticleCard\n\ttitle=\"Some Title\"\n\tdescription=\"This is a short description about this card and its properties.\"\n\thref=\"/\"\n/>\n\n<ArticleCard\n\ttitle=\"Some Title\"\n\tdescription=\"This is a short description about this card and its properties.\"\n\thref=\"/\"\n/>\n\n<ArticleCard\n\ttitle=\"Some Title\"\n\tdescription=\"This is a short description about this card and its properties.\"\n\thref=\"/\"\n/>\n\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Importing thirdweb React Components\nDESCRIPTION: TypeScript import statements for thirdweb React components and icons required for the SDK implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Details, ArticleIconCard, Stack, GithubTemplateCard, Callout, InstallTabs } from \"@doc\";\nimport {\n\tZapIcon,\n\tScrollTextIcon,\n\tArrowRightLeftIcon,\n\tWalletIcon,\n\tBlocksIcon,\n\tCodeIcon,\n\tFolderTreeIcon,\n\tPlugZapIcon,\n\tComponentIcon,\n\tCableIcon,\n\tExternalLink\n} from \"lucide-react\";\nimport { TypeScriptIcon } from \"@/icons\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component\nDESCRIPTION: Import statement for the Callout component from the @doc package, used for displaying informational messages in the documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/migrate-to-thirdweb/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Callout} from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in React\nDESCRIPTION: Shows how to import the Callout component from the '@doc' module for use in React applications.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/callouts/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration in thirdweb JS\nDESCRIPTION: Defines metadata configuration for the documentation page including title, description and image details for thirdweb account linking documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/link-accounts/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb - Link Accounts\",\n\tdescription: \"Learn how to link multiple accounts to a single billing profile.\",\n\timage: {\n\t\ttitle: \"Link Account\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Required Components and Assets - JavaScript/React\nDESCRIPTION: Imports necessary components from the doc module and image assets for the WalletConnect integration guide.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/register-walletconnect/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout, DocImage, createMetadata, Steps, Step } from \"@doc\";\nimport WalletconnectCreate from \"../assets/walletconnect-create.png\";\nimport WalletconnectUrl from \"../assets/walletconnect-url.png\";\nimport WalletconnectWallet from \"../assets/walletconnect-wallet.png\";\nimport WalletconnectGuide from \"../assets/walletconnect-guide.png\";\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration in TypeScript\nDESCRIPTION: Sets up the documentation metadata for the MintableERC20 module page, including title, description, and visual elements.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-20/minting/mintableERC20/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Imports required documentation components and assets including images for wallet creation and scoping illustrations.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/security/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocImage, Callout, createMetadata } from \"@doc\";\nimport EnclaveWalletCreation from \"./assets/enclave-wallet-creation.png\";\nimport AppScoped from \"./assets/app-scoped.svg\";\nimport EcosystemScoped from \"./assets/ecosystem-scoped.svg\";\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb SDK\nDESCRIPTION: Commands to install the thirdweb SDK using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install thirdweb\n# or\nyarn add thirdweb\n# or\npnpm add thirdweb\n```\n\n----------------------------------------\n\nTITLE: Structuring Thirdweb Service Utils in Markdown\nDESCRIPTION: Outlines the organization of utility modules for different types of thirdweb services. It specifies directories for Cloudflare Worker services, self-hosted services, and core utilities applicable to any service.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/service-utils/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Service Utils\n\nThis repository contains utilities that handle common requirements for thirdweb services.\n\n- `/cf-worker`: for use only in Cloudflare Worker services\n- `/node`: for use in self-hosted services\n- `/core`: for use in any service\n```\n\n----------------------------------------\n\nTITLE: Displaying Image for Alert History Section in Documentation\nDESCRIPTION: This code renders a DocImage component showing the Recent Alerts interface, with styling applied to control its maximum width and center it on the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/alert-notifications/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocImage\n\tsrc={RecentAlertsImage}\n\talt=\"Recent alerts\"\n\tclassName=\"max-w-[700px] mx-auto\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration in JSX\nDESCRIPTION: Sets up page metadata including title, description and image configuration for the wallet security documentation page. Uses the createMetadata helper function to define page properties.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/security/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"In App wallet and Ecosystem Security\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"thirdweb Wallet Security\",\n\tdescription:\n\t\t\"Learn how thirdweb protects your user's private keys across applications using nitro Enclaves\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components\nDESCRIPTION: Import statements for documentation-related components and assets used in the guide, including metadata creation, images, and UI components.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-modular/open-edition/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMetadata, DocImage, Steps, Step, Callout } from \"@doc\";\nimport { ContractDeployCard } from \"@/components/Document/ContractDeployCard\";\nimport openEditionStep1 from './assets/oe_step1.png'\nimport openEditionStep2 from './assets/oe_step2.png'\nimport openEditionStep3 from './assets/oe_step3.png'\nimport openEditionStep4 from './assets/oe_step4.png'\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Onramp Provider\nDESCRIPTION: This example demonstrates how to specify which onramp provider to present to users. By default, thirdweb chooses a recommended provider based on user location, KYC status, and currency.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/payembed/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<PayEmbed\n\tclient={client}\n\tpayOptions={{\n\t\tpreferredProvider: \"STRIPE\" | \"KADO\" | \"TRANSAK\",\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering EndpointMetadata Component in TypeScript/JSX\nDESCRIPTION: This snippet imports the EndpointMetadata component from a local module and renders it as a JSX element. This pattern is commonly used in React applications to include metadata or documentation components.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/delete-session/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { EndpointMetadata } from './EndpointMetadata';\n\n<EndpointMetadata />\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata for Billing Documentation\nDESCRIPTION: Sets up metadata for the billing management documentation page, including title, description, and image configuration using thirdweb's createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/billing/manage-billing/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"Manage billing for thirdweb Account\",\n\tdescription:\n\t\t\"Update billing information, view past invoices, and view account usage.\",\n\timage: {\n\t\ttitle: \"Manage billing for thirdweb Account\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Stack of GithubTemplateCards in JSX\nDESCRIPTION: This snippet demonstrates how to create a vertical stack of GithubTemplateCard components using the Stack component. Each GithubTemplateCard represents a GitHub template with a title and href.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/cards/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Stack>\n\n<GithubTemplateCard title=\"SomeTitle\" href=\"/\" />\n<GithubTemplateCard title=\"SomeTitle\" href=\"/\" />\n\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates Section with GithubTemplateCard Components in JSX\nDESCRIPTION: Creates a grid layout of template cards linking to example GitHub repositories. Each card includes a title and href link to GitHub templates that demonstrate Nebula implementations.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid>\n\n<GithubTemplateCard title=\"Bouncer Eliza Agent\" href=\"https://github.com/thirdweb-example/bouncer-eliza-agent\" />\n<GithubTemplateCard title=\"Block Explorer\" href=\"https://github.com/thirdweb-example/nebula-block-explorer\" />\n<GithubTemplateCard title=\"ERC-20 Token Deployer\" href=\"https://github.com/thirdweb-example/erc20-token-deployer\" />\n\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Assets in JSX\nDESCRIPTION: Imports necessary React components from the @doc library and image assets for use in the ecosystem wallet documentation page. These imports include components for creating callouts, displaying images, managing metadata, and creating step-by-step guides.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/permissions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Callout, DocImage, createMetadata, Steps, Step } from \"@doc\";\nimport CreateEcosystemWallet from \"../assets/create-ecosystem-wallet.png\";\nimport EcosystemWalletPermissions from \"../assets/ecosystem-wallet-permissions.png\";\nimport AddAPartner from \"../assets/add-partner.png\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration for thirdweb Bridge FAQ Page\nDESCRIPTION: TypeScript code that creates metadata for the FAQ page using thirdweb's documentation system. Sets up page title, icon, and description for the Universal Bridge FAQ section.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/faqs/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata, Details } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Universal Bridge - FAQs\",\n\t\ticon: \"thirdweb\",\n\t},\n\ttitle: \"thirdweb Universal Bridge - FAQs - thirdweb\",\n\tdescription: \"thirdweb Universal Bridge - Frequently Asked Questions\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Wallet Integration Documentation\nDESCRIPTION: This code snippet creates metadata for the wallet integration documentation page. It sets the page title, description, and associated image information using a custom createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Get started with wallets\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"Get started with wallets\",\n\tdescription: \"Get started with wallets\",\n});\n```\n\n----------------------------------------\n\nTITLE: Comparison Table of thirdweb React APIs\nDESCRIPTION: A markdown table comparing equivalent functionality between the @thirdweb-dev/react package and the newer thirdweb package. Each row shows a common blockchain integration task and the corresponding API calls in both libraries.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/migrate/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Task                 | `@thirdweb-dev/react`                                 | `thirdweb`                                          |\n| ---------------------| ----------------------------------------------------- | --------------------------------------------------- |\n| Provider             | `import { ThirdwebProvider} from @thirdweb-dev/react` | [`import { ThirdwebProvider } from \"thirdweb/react\"`](/react/v5/ThirdwebProvider) |\n| Contract             | `useContract(...)`                                    | [`getContract(...) // not a hook`](/references/typescript/v5/getContract)                    |\n| Address              | `useAddress(...)`                                     | [`useActiveAccount(...) // account?.address`](/references/typescript/v5/useActiveAccount)         |\n| Read                 | `useContractRead(...)`                                | [`useReadContract(...)`](/references/typescript/v5/useReadContract)                              |\n| Write                | `useContractWrite(...)`                               | [`useSendTransaction()`](/references/typescript/v5/useSendTransaction)                             |\n| Extensions           | `useNFTs(...)`                                        | [`useReadContract(getNFTs, { ... })`](/references/typescript/v5/useReadContract)                |\n| Get Signer           | `useSigner()`                                         | [`useActiveAccount()`](/references/typescript/v5/useActiveAccount)                                |\n| Get Wallet           | `useWallet()`                                         | [`useActiveWallet()`](/references/typescript/v5/useActiveWallet)                                 |\n| Button               | `Web3Button`                                          | [`TransactionButton`](/react/v5/TransactionButton)                                 |\n| Connect              | `ConnectWallet`                                       | [`ConnectButton`](/react/v5/ConnectButton)                                     |\n| Connection Status    | `useConnectionStatus()`                               | [`useActiveWalletConnectionStatus()`](/references/typescript/v5/useActiveWalletConnectionStatus)                 |\n| Switch Chain         | `useSwitchChain()`                                    | [`useSwitchActiveWalletChain()`](/references/typescript/v5/useSwitchActiveWalletChain)                      |\n| Get Connected Chain  | `useChain()`                                          | [`useActiveWalletChain()`](/references/typescript/v5/useActiveWalletChain)                  |\n```\n\n----------------------------------------\n\nTITLE: Importing Card Components and Layout Structures in JSX\nDESCRIPTION: This snippet shows the import statements for various card components and layout structures from the @doc package. These components are used throughout the document to showcase different card layouts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/cards/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport {\n\tArticleCard,\n\tGrid,\n\tExpandableGrid,\n\tGithubTemplateCard,\n\tOpenSourceCard,\n\tStack,\n} from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Email Query\nDESCRIPTION: Example curl command to fetch user details by email address using the thirdweb API endpoint.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/user-management/get-user-profiles/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET 'https://in-app-wallet.thirdweb.com/api/2023-11-30/embedded-wallet/user-details?queryBy=email&email=user@example.com' \\\n  -H 'x-secret-key: YOUR_THIRD_WEB_CLIENT_SECRET'\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Modular Contracts Documentation\nDESCRIPTION: This code creates metadata for the documentation page, including title, description, and image information. It uses the imported createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-721/metadata/simpleMetadataERC721/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for thirdweb Publish Documentation in JavaScript\nDESCRIPTION: This code snippet sets up the metadata for the thirdweb Publish documentation page. It imports a createMetadata function and uses it to define the page's title, description, and image properties.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/overview/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Publish\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"thirdweb Publish\",\n\tdescription:\n\t\t\"Publish allows developers to share their contract for others to deploy. Publishing a contract allows it to be shareable, verifiable, and deployable by other users\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Assets\nDESCRIPTION: Imports necessary components and image assets for the billing documentation page, including DocImage component and billing-related images.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/billing/manage-billing/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DocImage } from \"@doc\";\nimport billingSettings from \"../assets/billing-settings.png\";\nimport invoicesSettings from \"../assets/invoices-settings.png\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript Hello World in Danger Callout\nDESCRIPTION: A simple TypeScript console log statement used within a danger variant Callout component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/callouts/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration for Account Abstraction Page\nDESCRIPTION: Configuration of page metadata including title, description and image settings using the createMetadata helper function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/overview/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Account Abstraction\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"Account Abstraction | thirdweb\",\n\tdescription:\n\t\t\"Everything you need to leverage account abstraction technology to enable seamless user experiences\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets for Token Documentation\nDESCRIPTION: Import statements for React components and image assets used in the token contract documentation page\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-modular/token/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata, DocImage, Steps, Step, Callout } from \"@doc\";\nimport { ContractDeployCard } from \"@/components/Document/ContractDeployCard\";\nimport tokenStep1 from './assets/token_step1.png'\nimport tokenStep2 from './assets/token_step2.png'\nimport tokenStep3 from './assets/token_step3.png'\nimport tokenTransferable from '../assets/erc20_transferable.png'\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Import statement for React components used in the documentation page, including cards and grid layout components along with icons.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unity/v5/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OpenSourceCard, ArticleIconCard, ArticleCard, Grid } from \"@doc\";\nimport { GraduationCap } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb SDK with yarn\nDESCRIPTION: This command installs the thirdweb SDK using yarn package manager, which is an alternative to npm for managing JavaScript dependencies.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/tools/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @thirdweb-dev/sdk ethers@^5\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation\nDESCRIPTION: Markdown changelog entries documenting version changes, including pull request links, commit hashes, and descriptions of changes made to the service-utils package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/service-utils/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @thirdweb-dev/service-utils\n\n## 0.9.1\n\n### Patch Changes\n\n- [#6704](https://github.com/thirdweb-dev/js/pull/6704) [`3ab31c8`](https://github.com/thirdweb-dev/js/commit/3ab31c82104ceb2f6c11998555953e886f13d380) Thanks [@jnsdls](https://github.com/jnsdls)! - fix incrby\n\n## 0.9.0\n\n### Minor Changes\n\n- [#6702](https://github.com/thirdweb-dev/js/pull/6702) [`d036b87`](https://github.com/thirdweb-dev/js/commit/d036b87ae163dd80f58224e4b507e6f4ac01ce62) Thanks [@jnsdls](https://github.com/jnsdls)! - update rateLimit function\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using the PNPM package manager. Requires PNPM and Bun to be installed on the system.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Nebula Prompt Guide in JavaScript\nDESCRIPTION: This code snippet creates metadata for the thirdweb Nebula Prompt Guide page. It sets the image title and icon, page title, and description using the createMetadata function from the @doc module.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/prompt-guide/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createMetadata} from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Prompt Guide\",\n\t\ticon: \"nebula\",\n\t},\n\ttitle: \"thirdweb Nebula Prompt Guide\",\n\tdescription:\n\t\t\"A comprehensive prompt guide to help you unlock the most powerful AI to interact with the blockchain & build AI powered web3 apps.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Three-Step Guide Using Steps and Step Components\nDESCRIPTION: Shows how to structure a sequential guide using the Steps wrapper component and individual Step components. Each Step has a title attribute and content between opening and closing tags.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/steps/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Steps>\n\n<Step title=\"Step 1\" >\n\nContent for step 1.\n\n</Step>\n\n<Step title=\"Step 2\" >\n\ncontent for step 2\n\n</Step>\n\n<Step title=\"Step 3\" >\n\ncontent for step 3\n\n</Step>\n\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Custom Authentication Documentation Page\nDESCRIPTION: Sets up the metadata for the documentation page about Custom Authentication with In-App Wallet. It defines the title, description, and associated image with icon.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/overview/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Custom Authentication with In-App Wallet\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"Custom Authentication | thirdweb In-App Wallet\",\n\tdescription:\n\t\t\"In-App wallets already support most popular login methods out of the box, but we also give app developers the flexibility to use in-app wallets with any authentication method\",\n});\n```\n\n----------------------------------------\n\nTITLE: API Response Format\nDESCRIPTION: JSON structure showing the standard format for API responses when querying user details.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/user-management/get-user-profiles/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"userId\": \"string\",\n    \"walletAddress\": \"string\",\n    \"email\": \"string (optional)\",\n    \"phone\": \"string (optional)\",\n    \"createdAt\": \"string\",\n    \"linkedAccounts\": [\n      {\n        \"type\": \"string\",\n        \"details\": {\n          \"phone\": \"string\",\n          \"email\": \"string\",\n          \"address\": \"string\",\n          \"id\": \"string\"\n        }\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Engine Blueprints Documentation\nDESCRIPTION: Creates metadata for the Engine Blueprints documentation page using the createUnrealEngineMetadata utility function, providing a title and description.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/engine/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const metadata = createUnrealEngineMetadata({ title: \"Engine\", description: \"Engine Blueprints\" });\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Assets\nDESCRIPTION: Imports required components for documentation layout and image assets for visual documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/api-keys/edit-services/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DocImage, Steps, Step } from \"@doc\";\nimport ProjectOverview from '../assets/project-overview.png';\nimport EnabledServices from './assets/enabled-services.png';\n```\n\n----------------------------------------\n\nTITLE: Markdown Table General Extensions\nDESCRIPTION: Table listing general smart contract extensions including batch minting, contract metadata, delayed reveal, drops, and other core functionalities with their descriptions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                                               | Description                                                                                              |\n| ---------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- |\n| [BatchMintMetadata](/contracts/build/extensions/general/BatchMintMetadata)         | Batch minting of new tokens                                                                              |\n| [ContractMetadata](/contracts/build/extensions/general/ContractMetadata)           | Define metadata for your smart contract                                                                  |\n| [DelayedReveal](/contracts/build/extensions/general/DelayedReveal)                 | create batches of 'delayed-reveal' NFTs                                                                  |\n| [Drop](/contracts/build/extensions/general/Drop)                                   | for distributing ERC20 or ERC721 tokens to set up multiple claim phases                                  |\n| [DropSinglePhase](/contracts/build/extensions/general/DropSinglePhase)             | for distributing ERC20 or ERC721 tokens to set up a single claim phase                                   |\n| [LazyMint](/contracts/build/extensions/general/LazyMint)                           | Pre define the metadata for NFTs before they are minted & upload to IPFS                                 |\n| [Multicall](/contracts/build/extensions/general/Multicall)                         | Batch together multiple calls in a single external call                                                  |\n| [Ownable](/contracts/build/extensions/general/Ownable)                             | Set an owner for your smart contract                                                                     |\n| [Permissions](/contracts/build/extensions/general/Permissions)                     | Provide role-based access control                                                                        |\n| [PermissionsEnumerable](/contracts/build/extensions/general/PermissionsEnumerable) | Provide role-based access control, plus the capability to view all the addresses holding a specific role |\n| [PlatformFee](/contracts/build/extensions/general/PlatformFee)                     | Charge a percentage fee wherever there is a transfer of currency                                         |\n| [PrimarySale](/contracts/build/extensions/general/PrimarySale)                     | Set a recipient for any sale value you intend to collect                                                 |\n| [Royalty](/contracts/build/extensions/general/Royalty)                             | Take a percentage fee of secondary sales of your NFTs by giving royalty support on NFT marketplaces      |\n```\n\n----------------------------------------\n\nTITLE: Rendering Features Section with FeatureCard Components in JSX\nDESCRIPTION: Creates a grid layout of feature cards highlighting Nebula's capabilities. Each card includes a title, description, and icon displaying the key features of the Nebula platform.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n\tclassName=\"my-4 grid gap-2 md:grid-cols-2 lg:grid-cols-2 \"\n>\n\t<FeatureCard\n\t\ttitle=\"Proprietary Blockchain Model\"\n\t\tdescription=\"Trained on every EVM network and 1M+ contracts\"\n\t\ticonUrl={<File />}\n\t/>\n\n    <FeatureCard\n    \ttitle=\"Execute Transactions\"\n    \tdescription=\"Deploy contracts, send transactions, and more with natural language\"\n\t\ticonUrl={<MessageCircle/>}\n    />\n\n\t<FeatureCard\n    \ttitle=\"Wallet Integration\"\n    \tdescription=\"Connect with over 500+ EOAs, in-app wallets, and smart wallets with session keys\"\n\t\ticonUrl={<Wallet/>}\n    />\n\n\t<FeatureCard\n    \ttitle=\"Framework Integration\"\n    \tdescription=\"Integrate with popular AI orchestration frameworks\"\n\t\ticonUrl={<Blocks/>}\n    />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Linking Multiple Identities Documentation\nDESCRIPTION: This code snippet creates metadata for the documentation page. It sets the page title, description, and specifies an icon for the page image.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/user-management/link-multiple-identity/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Linking Multiple Identities\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"Linking Multiple Identities\",\n\tdescription:\n\t\t\"Learn how to associate multiple social profiles with a single wallet address.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets for Universal Bridge Documentation\nDESCRIPTION: This code imports necessary components and assets for the Universal Bridge documentation page, including metadata creation utilities, UI components, images, and icons from Lucide React.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/overview/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMetadata, DocImage, Grid, SDKCard, FeatureCard } from \"@doc\";\nimport PayOverviewImage from \"../assets/pay-overview.png\";\nimport SupportedChains from \"../../../_images/supported-chains.png\";\nimport {Rocket, ArrowLeftRight, Wallet, Pencil, ShieldCheck, PiggyBank, Globe, Component} from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Connect Documentation\nDESCRIPTION: This code exports metadata for the documentation page, setting the title, description, and image properties that will be used for SEO and display purposes.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb Connect\",\n\tdescription: \"Everything you need for your web3 frontend.\",\n\timage: {\n\t\ttitle: \"thirdweb Connect\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Required Node.js Packages in Bash\nDESCRIPTION: Command to install the express and jsonwebtoken packages required for the JWT auth server.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-jwt-auth-server/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express jsonwebtoken\n```\n\n----------------------------------------\n\nTITLE: Adding Thirdweb Package Reference to Godot Project\nDESCRIPTION: Configuration snippet showing how to add the Thirdweb NuGet package reference to a Godot project's .csproj file. The package enables blockchain functionality within the Godot application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/godot/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <!-- Other NuGet package references -->\n  <PackageReference Include=\"Thirdweb\" Version=\"2.4.0\" />\n  <!-- Update with the latest version when necessary -->\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Version Updates and Patch Changes - Markdown\nDESCRIPTION: Changelog entries detailing version updates and patch changes made to the JS service utilities package. Includes pull request references, commit hashes, and descriptions of changes.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/service-utils/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#2988](https://github.com/thirdweb-dev/js/pull/2988) [`02c0319`](https://github.com/thirdweb-dev/js/commit/02c03196ad38de888ff86311c68fa010018bda60) Thanks [@jnsdls](https://github.com/jnsdls)! - bump all to fix release\n\n## 0.4.28\n\n### Patch Changes\n\n- [#2832](https://github.com/thirdweb-dev/js/pull/2832) [`773b70a`](https://github.com/thirdweb-dev/js/commit/773b70aa1c113c775a1c44f3262b5de0547b5359) Thanks [@farhanW3](https://github.com/farhanW3)! - added httpMethod to usage-tracker\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Ecosystem Wallet FAQs Documentation using createMetadata\nDESCRIPTION: This code snippet creates metadata for the Ecosystem Wallet FAQs documentation page. It uses the createMetadata function from the @doc module to define the title, description, and image settings for the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/faq/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Ecosystem Wallet FAQs\",\n\tdescription: \"Frequently asked questions about thirdweb's Ecosystem Wallet\",\n\timage: {\n\t\ttitle: \"FAQs for thirdweb Ecosystem Wallet\",\n\t\ticon: \"wallets\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Write Contract Blueprint Component\nDESCRIPTION: Renders a Blueprint component for the Write Contract functionality, which allows calling the Write Contract endpoint on an engine instance.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/engine/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Blueprint code={writeContractNode} className='w-full h-64' />\n```\n\n----------------------------------------\n\nTITLE: Rendering ExpandableGrid of ArticleCards in JSX\nDESCRIPTION: This snippet demonstrates the use of an ExpandableGrid component to display a large number of ArticleCard components. The ExpandableGrid allows for a collapsible view of multiple cards, improving user experience for long lists.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/cards/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<ExpandableGrid>\n\n<ArticleCard\n\ttitle=\"Some Title\"\n\tdescription=\"This is a short description about this card and its properties.\"\n\thref=\"/\"\n/>\n\n<ArticleCard\n\ttitle=\"Some Title\"\n\tdescription=\"This is a short description about this card and its properties.\"\n\thref=\"/\"\n/>\n\n<!-- Additional ArticleCard components omitted for brevity -->\n\n</ExpandableGrid>\n```\n\n----------------------------------------\n\nTITLE: Creating Metro Config File with Expo\nDESCRIPTION: Command to create a custom Metro configuration file using Expo's CLI tool.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/react-native-adapter/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo customize metro.config.js\n```\n\n----------------------------------------\n\nTITLE: Importing Metadata and GitHub Button Link in JavaScript\nDESCRIPTION: This snippet imports the createMetadata function and GithubButtonLink component, likely used for generating documentation metadata and creating a link to the GitHub repository.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-721/minting/mintableERC721/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Blueprint Metadata in TypeScript\nDESCRIPTION: Creates metadata configuration for the Unreal Engine Blueprint documentation using the createUnrealEngineMetadata utility function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUnrealEngineMetadata } from \"../util\";\n\nexport const metadata = createUnrealEngineMetadata({\n    title: \"Blueprint Overview\",\n    description: \"Overview of the Thirdweb Unreal Engine SDK Blueprint system.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ConnectEmbed and Wallet Functions in React\nDESCRIPTION: This snippet demonstrates how to import the ConnectEmbed component and necessary wallet functions from the thirdweb React SDK. It shows the basic setup for using the ConnectEmbed component in a React application.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/ConnectEmbed/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectEmbed } from \"thirdweb/react\";\nimport { createWallet, inAppWallet } from \"thirdweb/wallets\";\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for thirdweb Dashboard\nDESCRIPTION: Command to start a local development server for the thirdweb dashboard. It requires navigating to the project root folder before running the command.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/dashboard/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd <path/to/thirdweb-dev/js>\npnpm dashboard\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules for Thirdweb Portal\nDESCRIPTION: Standard robots.txt configuration that allows all user agents to crawl all pages on the site, specifies the canonical host URL, and provides the sitemap location for search engine crawlers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# *\nUser-agent: *\nAllow: /\n\n# Host\nHost: https://portal.thirdweb.com\n\n# Sitemaps\nSitemap: https://portal.thirdweb.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Application in Bash\nDESCRIPTION: Commands to initialize a new Node.js application using npm or yarn package managers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/custom-jwt-auth-server/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nyarn init -y\n```\n\n----------------------------------------\n\nTITLE: Setting up ThirdwebProvider in React Application\nDESCRIPTION: Example of wrapping a React application with ThirdwebProvider and removing RainbowKitProvider.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThirdwebProvider } from \"thirdweb/react\";\n.\n.\n.\n.\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <ThirdwebProvider>\n      <WagmiProvider config={config}>\n        <QueryClientProvider client={client}>\n            <Component {...pageProps} />\n        </QueryClientProvider>\n      </WagmiProvider>\n    </ThirdwebProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Functions for Web3 Social Identities in React\nDESCRIPTION: This code snippet imports necessary components and functions from various modules to set up the web3 social identities documentation page. It includes imports for icons, metadata creation, and UI components.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/social/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactIcon } from \"@/icons\";\nimport { createMetadata } from \"@doc\";\nimport { ExternalLink } from \"lucide-react\";\nimport { ArticleIconCard, Stack } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Prefilling Native Token Purchase\nDESCRIPTION: This snippet shows how to prefill a purchase with a native token by setting only the chain without specifying a token address.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/connectbutton/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ConnectButton\n\tclient={client}\n\tdetailsModal={{\n\t\tpayOptions: {\n\t\t\tprefillBuy: {\n\t\t\t\tchain: base,\n\t\t\t},\n\t\t},\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for ERC1155 Airdrop Documentation\nDESCRIPTION: Creates metadata configuration for the documentation page of the AirdropERC1155Claimable contract, including title, description, and image settings.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/airdrop-erc1155-claimable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Airdrop ERC1155 Claimable contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Airdrop ERC1155 Claimable contract | thirdweb\",\n\tdescription: `The AirdropERC1155Claimable contract is suitable to use when you want to airdrop ERC1155 NFTs to a list of recipient addresses, where these recipients are expected to individually claim their own airdrop`,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Node Project for Backend\nDESCRIPTION: Command to initialize a new Node.js project for the Express backend server.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/auth/frameworks/react-express/page.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ npm init\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Contracts Page\nDESCRIPTION: This snippet creates metadata for the thirdweb Contracts page using the createMetadata function. It sets the title and description for the page, which are likely used for SEO purposes.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb Contracts\",\n\tdescription:\n\t\t\"Tools to easily create, deploy, and manage smart contracts on any EVM compatible blockchain.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using EndpointMetadata Component in React\nDESCRIPTION: Demonstrates importing the EndpointMetadata component from a relative path and using it as a self-closing component in JSX.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/get-session/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { EndpointMetadata } from './EndpointMetadata';\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<EndpointMetadata />\n```\n\n----------------------------------------\n\nTITLE: Creating Unreal Engine Metadata for Documentation\nDESCRIPTION: Code snippet that creates and exports metadata for the Thirdweb Wallet Handles documentation page using the createUnrealEngineMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/cpp/wallet-handles/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const metadata = createUnrealEngineMetadata({\n    title: \"Thirdweb Wallet Handles\",\n    description: \"Manage wallet handles and operations.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Other Supported Wallets Component\nDESCRIPTION: This JSX code renders a section for other supported wallets using the AllSupportedWallets component, with a spacer div to create vertical separation between wallet sections.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/supported-wallets/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"h-10\" />\n\n## Other wallets\n\n<AllSupportedWallets />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Assets in React\nDESCRIPTION: Imports required components from doc utility and image assets for the documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/billing/credits/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, DocImage, Steps, Step } from \"@doc\";\nimport TeamSettings from './assets/team-settings.png';\nimport Credits from './assets/credits-page.png';\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb Connect SDK\nDESCRIPTION: Instructions for installing the thirdweb Connect SDK using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/guides/build-a-custom-experience/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i thirdweb\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add thirdweb\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm i thirdweb\n```\n\n----------------------------------------\n\nTITLE: Reading Contract States with SDK v5\nDESCRIPTION: Demonstrates how to get a list of owned ERC721 tokens in a wallet using the new SDK v5 approach with useReadContract hook and the getOwnedNFTs extension.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get a list of owned ERC721 tokens in a wallet\nimport { useReadContract } from \"thirdweb/react\";\nimport { getOwnedNFTs } from \"thirdweb/extensions/erc721\";\n\nconst { data } = useReadContract(getOwned, { contract, owner });\n```\n\n----------------------------------------\n\nTITLE: Using an ERC1155 Extension to Check Token Balance\nDESCRIPTION: Example of using a pre-built contract extension in thirdweb SDK v5 to check the balance of an ERC1155 token. Contract extensions represent contract methods that return a PreparedTransaction object which can be executed with React hooks.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/contracts/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { balanceOf } from \"thirdweb/extensions/erc1155\";\n\nconst transaction = balanceOf({\n  contract,\n  owner: \"0x...\",\n  tokenId: 0n,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Assets\nDESCRIPTION: Imports required components from the documentation framework and local assets including icons and images\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/overview/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tArticleCard,\n\tCallout,\n\tDocImage,\n\tcreateMetadata,\n\tFeatureCard,\n} from \"@doc\";\nimport { WalletsConnectIcon } from \"@/icons\";\nimport customModal from \"./assets/custom-modals.png\";\nimport EcosystemWalletOverview from \"./assets/ecosystem-wallet.png\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid of GithubTemplateCards in JSX\nDESCRIPTION: This snippet shows how to create a grid layout of GithubTemplateCard components using the Grid component. It allows for a responsive display of multiple GitHub templates in a grid format.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/cards/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<Grid>\n\n<GithubTemplateCard title=\"SomeTitle\" href=\"/\" />\n<GithubTemplateCard title=\"SomeTitle\" href=\"/\" />\n<GithubTemplateCard title=\"SomeTitle\" href=\"/\" />\n<GithubTemplateCard title=\"SomeTitle\" href=\"/\" />\n<GithubTemplateCard title=\"SomeTitle\" href=\"/\" />\n<GithubTemplateCard title=\"SomeTitle\" href=\"/\" />\n\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Importing ERC1155Claimable Interface\nDESCRIPTION: Import statement for the IMintableERC721 interface from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155Claimable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/interface/IMintableERC721.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons for Wallet Integration Documentation\nDESCRIPTION: This code snippet imports various components and icons used in the documentation for wallet integration. It includes components from a custom documentation library and icons for different programming languages and frameworks.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Callout, OpenSourceCard, createMetadata, InstallTabs, SDKCard, Grid, ArticleIconCard, Tabs, TabsList, TabsTrigger, TabsContent } from \"@doc\";\nimport {\n    ReactIcon,\n    TypeScriptIcon,\n    UnityIcon,\n    DotNetIcon,\n    UnrealEngineIcon\n} from \"@/icons\"\nimport { ExternalLink } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Declaring a 'Hello World' Variable in Go\nDESCRIPTION: A Go code snippet that declares and initializes a variable 'msg' with the string 'Hello World' using short variable declaration.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/code/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmsg := \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components and Assets\nDESCRIPTION: Imports required components from the documentation framework and image assets for the documentation UI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/api-keys/delete/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DocImage, Steps, Step } from \"@doc\";\nimport confirmDeleteImage from \"../assets/confirm-delete.png\";\nimport ProjectOverview from \"../assets/project-overview.png\";\nimport DeleteProject from \"./assets/delete-project.png\";\nimport { createMetadata } from \"@doc\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access and Sitemap for thirdweb.com\nDESCRIPTION: This code snippet defines the robot.txt configuration for thirdweb.com. It allows all web crawlers to access the site, specifies the host domain as https://thirdweb.com, and provides the location of the sitemap file.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/dashboard/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# *\nUser-agent: *\nAllow: /\n\n# Host\nHost: https://thirdweb.com\n\n# Sitemaps\nSitemap: https://thirdweb.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Phone-based Wallet Pregeneration Request\nDESCRIPTION: Example request body for pregenerating a wallet using a phone number strategy.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/pregenerate-wallets/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ strategy: \"phone\", phone: \"+1321123321\" }\n```\n\n----------------------------------------\n\nTITLE: Exporting Unreal Engine Metadata in TypeScript\nDESCRIPTION: Creates and exports metadata for the ThirdwebRuntimeSettings documentation page. The metadata includes the title and description for the page about ThirdwebRuntimeSettings configuration in the Thirdweb Unreal Engine SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/cpp/runtime-settings/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUnrealEngineMetadata } from \"../../util\";\n\nexport const metadata = createUnrealEngineMetadata({\n    title: \"ThirdwebRuntimeSettings\",\n    description: \"Overview and configuration of the ThirdwebRuntimeSettings in the Thirdweb Unreal Engine SDK.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Insight Documentation Page in JSX\nDESCRIPTION: This code snippet creates metadata for the Insight Use Cases documentation page using the createMetadata function. It sets the title, description, and custom image properties for the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/use-cases/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Insight Use Cases | thirdweb Infrastructure\",\n\tdescription: \"Example use cases for thirdweb Insight\",\n  image: {\n    title: \"Insight\",\n    icon: \"insight\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: zkSync Chain Verification in C#\nDESCRIPTION: Checks if a given chain ID corresponds to zkSync network.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar isZkSync = Utils.IsZkSync(chainId);\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Universal Bridge Documentation in JSX\nDESCRIPTION: This code snippet defines metadata for the thirdweb Universal Bridge documentation page, including the page title, description, and image configuration. It uses a createMetadata function to set up SEO and display information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/overview/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Universal Bridge\",\n\t\ticon: \"thirdweb\",\n\t},\n\ttitle: \"thirdweb Universal Bridge Docs: Web3 Payments, On-ramping, bridging & swapping\",\n\tdescription:\n\t\t\"Learn everything about thirdweb's web3 payments solution, Universal Bridge. Technical docs on onramping, bridging + swapping.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering EndpointMetadata Component in React/JSX\nDESCRIPTION: This snippet imports the EndpointMetadata component from a relative path and renders it without any props. This is likely used as part of documentation or API reference implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/execute/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EndpointMetadata } from './EndpointMetadata';\n\n<EndpointMetadata />\n```\n\n----------------------------------------\n\nTITLE: Cloning the Eliza Starter Repository with Git\nDESCRIPTION: Command to clone the Eliza starter repository from GitHub to begin setting up a project with Eliza framework.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/plugins/eliza/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/elizaos/eliza-starter.git\n```\n\n----------------------------------------\n\nTITLE: Installing Thirdweb Connect SDK\nDESCRIPTION: Command to install the Thirdweb package using npm\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/quickstart/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i thirdweb\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Auth in React\nDESCRIPTION: Example of implementing generic authentication in a React application using custom payload and auth endpoint strategy.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/in-app-wallet/custom-auth/configuration/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\nimport { useConnect } from \"thirdweb/react\";\n\nconst { connect } = useConnect();\n\nconst handlePostLogin = async (jwt: string) => {\n\tawait connect(async () => {\n\t\tconst wallet = inAppWallet();\n\t\tawait wallet.connect({\n\t\t\tclient,\n\t\t\tstrategy: \"auth_endpoint\",\n\t\t\t// This is the payload that is sent to the auth endpoint\n\t\t\tpayload,\n\t\t});\n\t\treturn wallet;\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Extension for USDC on Optimism\nDESCRIPTION: Specific example of generating an extension for a USDC contract deployed on Optimism (chain ID 10). This creates a type-safe extension file in the thirdweb directory of your project.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/extensions/generate/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb generate 10/0x0b2c639c533813f4aa9d7837caf62653d097ff85\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Web3 Social Identities Documentation\nDESCRIPTION: This snippet creates metadata for the web3 social identities documentation page. It sets the title and description for the page using the createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/social/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"Web3 Social Identities | thirdweb\",\n\tdescription: \"Query all web3 social identities for a given address\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for thirdweb Integration\nDESCRIPTION: Example of creating a .env file with the thirdweb secret key required for the Nebula plugin to function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/plugins/eliza/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTHIRDWEB_SECRET_KEY=your_secret_key\n```\n\n----------------------------------------\n\nTITLE: TypeScript Hello World in Info Callout\nDESCRIPTION: A simple TypeScript console log statement used within an info variant Callout component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/callouts/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"hello world\");\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Engine Documentation\nDESCRIPTION: This code snippet initializes the metadata for the documentation page about gasless transactions in thirdweb Engine. It sets the title and description for the page using the createMetadata function from the @doc package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/gasless-transactions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Gasless Transactions | thirdweb Engine\",\n\tdescription:\n\t\t\"Attract a broader audience by removing the need to have gas to use your application. Engine offers multiple options for developers looking to sponsor gas for their users' transactions.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a 'Hello World' Variable in JavaScript\nDESCRIPTION: A JavaScript code snippet that declares a constant variable 'msg' and assigns it the string 'Hello World'.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/code/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconst msg = \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering EndpointMetadata Component in JSX\nDESCRIPTION: This code imports the EndpointMetadata component from a local file and renders it as a standalone component. It appears to be used for displaying API endpoint documentation or metadata in a web interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/create-session/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { EndpointMetadata } from './EndpointMetadata';\n\n<EndpointMetadata />\n```\n\n----------------------------------------\n\nTITLE: Drop Message Sender Function\nDESCRIPTION: Internal function providing the ability to override the message sender.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/DropSinglePhase/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _dropMsgSender() internal virtual returns (address);\n```\n\n----------------------------------------\n\nTITLE: Extension Setting Permission Check\nDESCRIPTION: Implementation of _canSetExtension function that determines if an extension can be set based on admin role.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account-factory/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _canSetExtension() internal view virtual override returns (bool) {\n    return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using EndpointMetadata Component\nDESCRIPTION: Imports the EndpointMetadata component from a local file and renders it as a React component.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/api-reference/update-session/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { EndpointMetadata } from './EndpointMetadata';\n\n<EndpointMetadata />\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components and Icons for Wallet Documentation\nDESCRIPTION: This code snippet imports necessary UI components and SVG icons for displaying wallet information in the documentation. It includes Breadcrumb, WalletCard components, and various wallet icons.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/supported-wallets/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Breadcrumb, createMetadata } from \"@doc\";\nimport { WalletCard, WalletCardGrid } from \"@/components/others/WalletCard\";\nimport SmartWalletIcon from \"@public/icons/wallets/smartwallet.svg\";\nimport EmbeddedWalletIcon from \"@public/icons/wallets/embeddedwallet.svg\";\nimport { AllSupportedWallets } from \"@/components/others/AllSupportedWallets\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: Command to install all required dependencies for the Eliza project using pnpm package manager.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/plugins/eliza/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting Metadata for thirdweb Glossary Page in JavaScript\nDESCRIPTION: This code imports the createMetadata function from the documentation package and uses it to configure metadata for a glossary page. The metadata includes a title, description, and image information with a title and icon. The configured metadata is then exported for use in the documentation system.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/glossary/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\ttitle: \"Glossary\",\n\tdescription:\n\t\t\"This section aims to guide you through web3 concepts, including EIPs and thirdweb-specific innovations\",\n\timage: {\n\t\ttitle: \"thirdweb Glossary\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons for thirdweb Documentation\nDESCRIPTION: Import statements for various UI components, icons, and utilities used in the documentation interface\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/sign-in-methods/configure/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArticleIconCard, AuthList, Callout, DocImage, Grid, Stack } from \"@doc\";\nimport {UserIcon} from 'lucide-react'\nimport {\n    ReactIcon,\n    TypeScriptIcon,\n    UnityIcon,\n    DotNetIcon,\n    ExternalLinkIcon,\n    UnrealEngineIcon,\n    EcosystemWalletsIcon,\n    WalletsConnectIcon\n} from \"@/icons\"\nimport EcosystemSocialConfig from '../assets/social-config.png'\nimport { getSocialIcon } from \"thirdweb/wallets/in-app\";\n```\n\n----------------------------------------\n\nTITLE: Importing IBurnableERC20 Interface\nDESCRIPTION: Shows how to import the IBurnableERC20 interface from thirdweb contracts\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20Burnable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/interface/IBurnableERC20.sol\";\n```\n\n----------------------------------------\n\nTITLE: Prefilling Token Purchase with Custom Token\nDESCRIPTION: This code shows how to prefill the Universal Bridge purchase flow with a specific token on a specific chain. It configures what users can edit in the purchase interface.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/pay/customization/connectbutton/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { base } from \"thirdweb/chains\";\n\n<ConnectButton\n\tclient={client}\n\tdetailsModal={{\n\t\tpayOptions: {\n\t\t\tprefillBuy: {\n\t\t\t\ttoken: {\n\t\t\t\t\taddress: \"0x866a087038f7C12cf33EF91aC5b1AcE6Ac1DA788\",\n\t\t\t\t\tname: \"Base ETH\",\n\t\t\t\t\tsymbol: \"ETH\",\n\t\t\t\t\ticon: \"...\", // optional\n\t\t\t\t},\n\t\t\t\tchain: base,\n\t\t\t\tallowEdits: {\n\t\t\t\t\tamount: true, // allow editing buy amount\n\t\t\t\t\ttoken: false, // disable selecting buy token\n\t\t\t\t\tchain: false, // disable selecting buy chain\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Ecosystem Wallet Documentation Page\nDESCRIPTION: Sets up the page metadata including title, description, and image details for the ecosystem wallet documentation. This ensures proper SEO and display when the page is shared or indexed.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/ecosystem/permissions/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Ecosystem Wallet\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"Managing Ecosystem Permissions - Ecosystem Wallet | thirdweb\",\n\tdescription: \"Ecosystem Wallet - Own your own web3 identity stack\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for Guest Mode Documentation\nDESCRIPTION: Sets up metadata for the guest mode documentation page including title, description, and associated icons using the createMetadata function.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/sign-in-methods/guest/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createMetadata, ArticleIconCard, Callout } from \"@doc\";\nimport {\n    ReactIcon,\n    TypeScriptIcon,\n    UnityIcon,\n    DotNetIcon,\n    ExternalLinkIcon,\n    UnrealEngineIcon\n} from \"@/icons\"\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Guest Mode\",\n\t\ticon: \"wallets\",\n\t},\n\ttitle: \"Guest Mode\",\n\tdescription:\n\t\t\"Learn how to get users started in thirdweb wallets without requiring sign-in.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Set Primary Sale Recipient Function\nDESCRIPTION: External function that allows an authorized wallet to set the primary sale recipient address\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PrimarySale/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setPrimarySaleRecipient(address saleRecipient) external;\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed React Component in TSX\nDESCRIPTION: A TSX code snippet that defines a React functional component 'Msg' with TypeScript props typing, which renders a div with a text prop, and demonstrates its usage.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/code/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst Msg: React.FC<{ text: string }> = ({text }) => {\n\treturn <div>{text}</div>;\n}\n\n<Msg text=\"hello world\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Diff Syntax\nDESCRIPTION: A diff block showing a line removal and addition, typically used in version control systems to represent changes in code.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/code/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- foo bar bazz\n+ fizz buzz\n```\n\n----------------------------------------\n\nTITLE: Installing RainbowKit and Dependencies\nDESCRIPTION: Command to install RainbowKit and its required dependencies.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/rainbow-kit-migrate/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: npm\nCODE:\n```\nnpm install @rainbow-me/rainbowkit wagmi viem@2.x @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Importing Blueprint Components for In-App Wallets in Unreal Engine\nDESCRIPTION: Imports the Blueprint component and various wallet-related node functions for Unreal Engine integration. This code sets up all the necessary components to implement in-app wallet functionality in Unreal Engine projects through the thirdweb SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/in-app-wallet/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Blueprint } from \"../blueprint\";\nimport {\n\tcreateWalletNode,\n\tdisconnectNode,\n\tfetchOAuthLoginLinkNode,\n\tisConnectedNode,\n\tlinkWalletNode,\n\tsendOtpNode,\n\tsignInNode,\n} from \"./nodes\";\nimport { createUnrealEngineMetadata } from \"../../util\";\n\nexport const metadata = createUnrealEngineMetadata({\n\ttitle: \"In-App Wallets\",\n\tdescription: \"In-App Wallet Blueprints\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Images in Markdown\nDESCRIPTION: This code snippet imports various React components and image assets used throughout the markdown document. It includes custom components for documentation structure and images for visual guidance.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/cross-chain/agglayer/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Step, Steps, DocImage, OpenSourceCard, Callout } from \"@doc\";\nimport RestrictTransfer from './assets/restrict-transfers.png';\nimport ApproveFunction from './assets/approve-function.png';\nimport AgglayerModule from './assets/agglayer-module.png';\nimport GrantMinter from './assets/grant-minter.png';   \nimport MintTokens from './assets/mint-tokens.png';\n```\n\n----------------------------------------\n\nTITLE: VerifyClaim Function Template\nDESCRIPTION: Virtual function to be overridden for implementing custom claim verification logic.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/lazy-mint/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyClaim(address _claimer, uint256 _quantity) public view virtual {}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for thirdweb Documentation\nDESCRIPTION: This code imports necessary components and assets for creating interactive documentation pages in the thirdweb platform, including Callout, metadata creator, Steps components, and various image assets for the tutorial.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/create-account/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout, createMetadata, Step, Steps, DocImage } from \"@doc\";\nimport LoginScreen from \"./assets/login-screen.png\";\nimport SetupTeam from \"./assets/setup-team.png\";\nimport InviteTeam from \"./assets/invite-team.png\";\nimport AllowedDomains from \"./assets/allowed-domains.png\";\nimport SecretKey from \"./assets/secret-key.png\";\n```\n\n----------------------------------------\n\nTITLE: Importing DocImage Component and Image Asset in JavaScript\nDESCRIPTION: This snippet shows how to import a custom DocImage component and an image asset in a JavaScript/React file. It also sets metadata with robots directive to prevent indexing and following.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DocImage } from \"@doc\";\nimport testImage from \"./test.jpg\";\n\nexport const metadata = {\n\trobots: \"noindex, nofollow\",\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the Eliza Application\nDESCRIPTION: Command to start the Eliza application after setup is complete, which will initialize the AI agent with the thirdweb Nebula plugin.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/plugins/eliza/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Rendering Contract Deploy Card in JSX\nDESCRIPTION: This code snippet renders a ContractDeployCard component for the Modular Edition contract. It includes the contract name and a link to deploy the contract with specific modules.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-modular/edition/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ContractDeployCard contractName=\"Modular Edition\" href=\"https://thirdweb.com/thirdweb.eth/ERC1155CoreInitializable?module=eyJwdWJsaXNoZXIiOiJkZXBsb3llci50aGlyZHdlYi5ldGgiLCJtb2R1bGVJZCI6Ik1pbnRhYmxlRVJDMTE1NSJ9&module=eyJwdWJsaXNoZXIiOiJkZXBsb3llci50aGlyZHdlYi5ldGgiLCJtb2R1bGVJZCI6IkJhdGNoTWV0YWRhdGFFUkMxMTU1In0%3D&module=eyJwdWJsaXNoZXIiOiJkZXBsb3llci50aGlyZHdlYi5ldGgiLCJtb2R1bGVJZCI6IlRyYW5zZmVyYWJsZUVSQzExNTUifQ%3D%3D&module=eyJwdWJsaXNoZXIiOiJkZXBsb3llci50aGlyZHdlYi5ldGgiLCJtb2R1bGVJZCI6IlNlcXVlbnRpYWxUb2tlbklkRVJDMTE1NSJ9&displayName=Modular+Edition\" />\n```\n\n----------------------------------------\n\nTITLE: ENS Name Resolution in C#\nDESCRIPTION: Retrieves the ENS name for a given wallet address using the Thirdweb client.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar ensName = await Utils.GetENSFromAddress(client, address);\n```\n\n----------------------------------------\n\nTITLE: Displaying Image for Add Alert Section in Documentation\nDESCRIPTION: This code renders a DocImage component showing the Add Alert interface, with styling applied to control its maximum width and center it on the page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/engine/features/alert-notifications/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocImage\n\tsrc={AddAlertImage}\n\talt=\"Add alert\"\n\tclassName=\"max-w-[500px] mx-auto\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for ERC20BatchMintable Documentation in JavaScript\nDESCRIPTION: This snippet uses the createMetadata function to generate metadata for the ERC20BatchMintable contract documentation, including title, description, and image information.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-20/ERC20BatchMintable/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"ERC20BatchMintable contract\",\n\t\ticon: \"solidity\",\n\t},\n\ttitle: \"ERC20BatchMintable | thirdweb contract\",\n\tdescription:\n\t\t\"Enable minting multiple NFTs at once in a single transaction by Implementing ERC20, IMintableERC20, and Multicall extensions\",\n});\n```\n\n----------------------------------------\n\nTITLE: Ethereum Address Checksum in C#\nDESCRIPTION: Converts an Ethereum address to its checksum format for validation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/utils/page.mdx#2025-04-14_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvar checksummedAddress = address.ToChecksumAddress();\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Configuration in JavaScript\nDESCRIPTION: Sets up metadata configuration for the documentation page using JavaScript, defining title, description and image properties for the thirdweb Modular Contracts documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-1155/metadata/batchMetadataERC1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description: \n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ManagedAccount Contract\nDESCRIPTION: Shows how to import the ManagedAccount contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/managed-account/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/smart-wallet/managed/ManagedAccount.sol\";\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Value in C#\nDESCRIPTION: Sets the value of the payable transaction in Wei using SetValue method. Takes a BigInteger as input.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/dotnet/transactions/instance/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nThirdwebTransaction transaction = transaction.SetValue(1000000000000000000);\n```\n\n----------------------------------------\n\nTITLE: Importing Custom React Components for Documentation in TypeScript/JSX\nDESCRIPTION: This snippet imports custom React components and assets used for structuring the documentation page. It includes components for metadata creation, step-by-step instructions, callouts, and image display.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/billing/upgrade-plan/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata, Steps, Step, Callout, DocImage } from \"@doc\";\nimport growthPlan from \"./assets/growth-plan.png\";\nimport confirmDowngrade from \"./assets/confirm-downgrade.png\";\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721Claimable Interface in Solidity\nDESCRIPTION: This snippet shows how to import the IClaimableERC721 interface from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Claimable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/interface/IClaimableERC721.sol\";\n```\n\n----------------------------------------\n\nTITLE: Component Imports for Account Abstraction Page\nDESCRIPTION: Import statements for React components and icons used in the account abstraction documentation page.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/overview/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { OpenSourceCard, Grid, SDKCard, createMetadata, FeatureCard } from \"@doc\";\nimport { ReactIcon, TypeScriptIcon, UnityIcon } from \"@/icons\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom In-App Wallet Options in TypeScript\nDESCRIPTION: Demonstrates how to create an in-app wallet with custom configuration options including authentication methods, mode, redirect URL, passkey domain, metadata, and smart account settings for gasless transactions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/in-app-wallet/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { inAppWallet } from \"thirdweb/wallets\";\n\nconst wallet = inAppWallet({\n\tauth: {\n        mode, // options are \"popup\" | \"redirect\" | \"window\";\n        options, // ex: [\"discord\", \"farcaster\", \"apple\", \"facebook\", \"google\", \"passkey\"],\n        passkeyDomain, // for passkey, the domain that the passkey is created on\n        redirectUrl, // the URL to redirect to after authentication\n\t},\n\tmetadata, // metadata for the wallet (name, icon, etc.)\n\tsmartAccount, // smart account options for the wallet (for gasless tx)\n});\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721Supply Interface\nDESCRIPTION: Import statement for the ERC721Supply interface from thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Supply/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/interface/IERC721Supply.sol\"\n```\n\n----------------------------------------\n\nTITLE: Importing DropSinglePhase1155 Extension in Solidity\nDESCRIPTION: This snippet shows how to import the DropSinglePhase1155 extension from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/DropSinglePhase1155.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing ERC20SignatureMint Contract\nDESCRIPTION: Basic import statement for the ERC20SignatureMint contract from thirdweb contracts package.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/signature-mint/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC20SignatureMint.sol\";\n```\n\n----------------------------------------\n\nTITLE: Importing IERC721Enumerable Interface in Solidity\nDESCRIPTION: This snippet shows how to import the IERC721Enumerable interface from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721Enumerable/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/eip/interface/IERC721Enumerable.sol\";\n```\n\n----------------------------------------\n\nTITLE: Implementing _collectPriceOnClaim Function in ERC721Drop\nDESCRIPTION: Internal function to collect and distribute the primary sale value of NFTs being claimed. It handles both native token and ERC20 token payments.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/drop/page.mdx#2025-04-14_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _collectPriceOnClaim(\n    address _primarySaleRecipient,\n    uint256 _quantityToClaim,\n    address _currency,\n    uint256 _pricePerToken\n) internal virtual override {\n    if (_pricePerToken == 0) {\n        return;\n    }\n\n    uint256 totalPrice = _quantityToClaim * _pricePerToken;\n\n    if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\n        if (msg.value != totalPrice) {\n            revert(\"Must send total price\");\n        }\n    }\n\n    address saleRecipient = _primarySaleRecipient == address(0) ? primarySaleRecipient() : _primarySaleRecipient;\n    CurrencyTransferLib.transferCurrency(_currency, msg.sender, saleRecipient, totalPrice);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Read Contract Blueprint Component\nDESCRIPTION: Renders a Blueprint component for the Read Contract functionality, which allows calling the Read Contract endpoint on an engine instance.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/engine/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Blueprint code={readContractNode} className='w-full h-48' />\n```\n\n----------------------------------------\n\nTITLE: Importing ERC721SignatureMint Contract in Solidity\nDESCRIPTION: Shows how to import the ERC721SignatureMint contract from the thirdweb contracts library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-721/signature-mint/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/base/ERC721SignatureMint.sol\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Get Transaction Status Blueprint Component\nDESCRIPTION: Renders a Blueprint component for retrieving transaction status information from a queue ID on an engine instance.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/unreal-engine/blueprints/engine/page.mdx#2025-04-14_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<Blueprint code={getTransactionStatusNode} className='w-full h-48' />\n```\n\n----------------------------------------\n\nTITLE: Importing BatchMintMetadata Contract\nDESCRIPTION: Import statement for including the BatchMintMetadata extension in a Solidity contract.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/BatchMintMetadata/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/BatchMintMetadata.sol\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Package Exports in React Native\nDESCRIPTION: Metro bundler configuration to properly resolve named exports in the thirdweb packages, enabling compatibility with React Native.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/packages/react-native-adapter/README.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// file: metro.config.js\n\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require(\"expo/metro-config\");\n\n/** @type {import('expo/metro-config').MetroConfig} */\nconst config = getDefaultConfig(__dirname);\n\n// ADD THESE 2 PROPERTIES\nconfig.resolver.unstable_enablePackageExports = true;\nconfig.resolver.unstable_conditionNames = [\n\t\"react-native\",\n\t\"browser\",\n\t\"require\",\n];\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Specifying Airdrop Recipients and Token IDs in TypeScript\nDESCRIPTION: This code snippet demonstrates the structure for specifying recipients and token IDs when airdropping ERC-721 NFTs. It shows an array of objects, each containing a recipient address and a token ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/airdrop-erc721/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n[\n\t{\n\t\trecipient: \"0x123...\",\n\t\ttokenId: 1,\n\t},\n\t{\n\t\trecipient: \"0xabc...\",\n\t\ttokenId: 2,\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Importing PlatformFee Contract\nDESCRIPTION: Shows how to import the PlatformFee extension from thirdweb contracts.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/PlatformFee/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@thirdweb-dev/contracts/extension/PlatformFee.sol\";\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for thirdweb\nDESCRIPTION: Environment variables configuration for the thirdweb secret key and a test wallet private key in a .env file.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/guides/typescript/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTHIRDWEB_SECRET_KEY=<YOUR_SECRET_KEY>\nPRIVATE_KEY=<A_TEST_WALLET_PRIVATE_KEY>\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Email with In-App Wallet in TypeScript\nDESCRIPTION: This snippet demonstrates how to get the user's email address using the getUserEmail function from the thirdweb/wallets/in-app module. It requires a client object as a parameter.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/how-to/interact-with-wallets/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUserEmail } from \"thirdweb/wallets/in-app\";\n\nconst email = await getUserEmail({ client });\nconsole.log(\"user email\", email);\n```\n\n----------------------------------------\n\nTITLE: Basic ERC721A Contract Implementation\nDESCRIPTION: Demonstrates a basic implementation of an ERC721A contract that inherits from the base ERC721A contract. It includes a constructor for initializing the token name and symbol.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-721/ERC721/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@thirdweb-dev/contracts/eip/ERC721A.sol\";\n\ncontract Contract is ERC721A {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    )\n        ERC721A(\n            _name,\n            _symbol\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Get Base URI Internal Function\nDESCRIPTION: Internal function to get the base metadata URI for a specific token ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/BatchMintMetadata/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _getBaseURI(uint256 _tokenId) internal view returns (string memory);\n```\n\n----------------------------------------\n\nTITLE: Using ConnectButton Component in React Native\nDESCRIPTION: Demonstrates the use of the pre-built ConnectButton component for wallet connection UI in React Native.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/wallet/get-started/page.mdx#2025-04-14_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from \"thirdweb/react\";\nimport { client } from \"./thirdwebClient\";\nimport { View, Text } from \"react-native\";\n\nfunction YourApp() {\n  return (\n    <View>\n      <Text>My Mobile dApp</Text>\n      <ConnectButton client={client} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Token Burn Function Implementation\nDESCRIPTION: Implementation of the burn function that allows token holders to burn (destroy) their tokens after checking for sufficient balance.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-20/drop-vote/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n/**\n *  @notice          Lets an owner a given amount of their tokens.\n *  @dev             Caller should own the `_amount` of tokens.\n *\n *  @param _amount   The number of tokens to burn.\n */\nfunction burn(uint256 _amount) external virtual {\n    require(balanceOf(msg.sender) >= _amount, \"not enough balance\");\n    _burn(msg.sender, _amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting from AccountFactory in Solidity\nDESCRIPTION: This Solidity code snippet demonstrates how to create a custom AccountFactory by inheriting from the base AccountFactory contract. It includes the constructor implementation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/base-contracts/erc-4337/account-factory/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"@thirdweb-dev/contracts/prebuilts/account/non-upgradeable/AccountFactory.sol\";\n\ncontract MyAccountFactory is AccountFactory {\n\t  constructor(\n\taddress _defaultAdmin,\n        IEntryPoint _entrypoint\n    )\n        AccountFactory(\n\t    _defaultAdmin,\n            _entrypoint\n        )\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Thirdweb Upload Command Syntax\nDESCRIPTION: General syntax for the thirdweb upload command, showing the format with optional parameters and the path argument for the file or directory to upload.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/upload/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb upload [options] [path]\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata for thirdweb Extensions Documentation\nDESCRIPTION: Creates metadata configuration for the documentation page using the createMetadata helper function, setting the page title, description and image properties.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: { title: \"thirdweb Extension contracts\", icon: \"solidity\" },\n\ttitle: \"Extensions | thirdweb contract\",\n\tdescription: \"List of all the thirdweb contract extensions\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons in TypeScript/JSX\nDESCRIPTION: This snippet demonstrates importing various components, icons, and utilities for use in a React application with the thirdweb SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tCallout,\n\tArticleIconCard,\n\tStack,\n\tOpenSourceCard,\n\tInstallTabs,\n\tcreateMetadata,\n} from \"@doc\";\nimport {\n\tZapIcon,\n\tScrollTextIcon,\n\tArrowRightLeftIcon,\n\tWalletIcon,\n\tBlocksIcon,\n\tCodeIcon,\n\tRssIcon,\n\tPlugZapIcon,\n\tBoxIcon,\n\tKeyRoundIcon,\n} from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\n\nimport { ReactIcon } from \"@/icons\";\n```\n\n----------------------------------------\n\nTITLE: Complex Event Filtering Implementation\nDESCRIPTION: Example of using multiple filter parameters to query events with specific criteria.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/agents-and-llms/llmstxt/page.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getFilteredEvents() {\n\tconst params = new URLSearchParams({\n\t\tfilter_block_number_gte: \"{{startBlock}}\",\n\t\tfilter_block_number_lte: \"{{endBlock}}\",\n\t\tfilter_block_timestamp_gte: \"{{startTimestamp}}\",\n\t\tfilter_from_address: \"{{fromAddress}}\",\n\t\tfilter_value_gte: \"{{minValue}}\",\n\t\tpage: \"0\",\n\t\tlimit: \"20\",\n\t\tsort_by: \"block_timestamp\",\n\t\tsort_order: \"desc\",\n\t});\n\n\tconst response = await fetch(\n\t\t`https://{{chainId}}.insight.thirdweb.com/v1/events?${params}`,\n\t\t{ headers: { \"x-client-id\": \"{{clientId}}\" } },\n\t);\n\treturn await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Event in TypeScript\nDESCRIPTION: This example demonstrates how to use a generated event (transferEvent) in a TypeScript project. It shows importing the event, creating a contract instance, and setting up a type-safe event listener.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/cli/generate/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transferEvent } from \"/thirdweb/10/0x0b2c639c533813f4aa9d7837caf62653d097ff85\";\n\nconst contract = getContract({\n\tclient,\n\tchain: optimism,\n\taddress: USDC_ADDRESS,\n});\n\n// Type-safe event listener\nconst events = await getContractEvents({\n  contract,\n  events: [\n    transferEvent({\n      from: ...,\n      to: ...,\n    })\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Thirdweb Client (TypeScript)\nDESCRIPTION: Example of how to create a reusable thirdweb client object in a separate file for better code organization.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/installation/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @lib/client.ts\n\nimport { createThirdwebClient } from \"thirdweb\";\n\nexport const client = createThirdwebClient({\n  clientId: process.env.NEXT_PUBLIC_TW_CLIENT_ID,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Claimed Supply in Solidity\nDESCRIPTION: Function to retrieve the number of tokens claimed by a specific wallet under the active condition for a given token ID.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/erc-1155/ERC1155DropSinglePhase/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getSupplyClaimedByWallet(uint256 tokenId, address claimer)\n    public\n    view\n    returns (uint256);\n```\n\n----------------------------------------\n\nTITLE: Programmatically Retrieving Bundle ID in React Native\nDESCRIPTION: Code snippet showing how to programmatically retrieve the application bundle ID using the expo-application package from the thirdweb React Native SDK.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/faq/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Application from \"expo-application\";\n\nconst bundleId = Application.applicationId;\n```\n\n----------------------------------------\n\nTITLE: Using Converted Ethers Signer\nDESCRIPTION: Shows common operations with the converted Ethers.js signer, including getting balance and signing messages.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/ethers-adapter/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Get balance\nconst balance = await signer.getBalance();\n\n// Sign message\nconst signature = await signer.signMessage(message);\n```\n\n----------------------------------------\n\nTITLE: Running the Node Script with Bun\nDESCRIPTION: Command to execute the TypeScript file using Bun, which will deploy the smart account when the first transaction is initiated.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/guides/typescript/page.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbun index.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoConnect Metadata\nDESCRIPTION: Metadata configuration for the AutoConnect component documentation, including page title, description, and icon settings.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/AutoConnect/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"AutoConnect\",\n\t\ticon: \"react\",\n\t},\n\ttitle: \"AutoConnect | thirdweb React SDK\",\n\tdescription: \"API Reference for the AutoConnect component\",\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Drop Message Sender in Solidity Smart Contract\nDESCRIPTION: Internal function that exposes the ability to override the msg sender.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/extensions/general/Drop/page.mdx#2025-04-14_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _dropMsgSender() internal virtual returns (address);\n```\n\n----------------------------------------\n\nTITLE: Running thirdweb Deploy Command\nDESCRIPTION: This snippet shows the command to run thirdweb Deploy at the root of a contract directory. It demonstrates the simplicity of deploying contracts using thirdweb.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/deploy/overview/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb deploy\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Link Profiles Documentation Page in React\nDESCRIPTION: Sets up the metadata for the Link Profiles documentation page including title and description for SEO purposes.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/linking/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"Link Profiles | thirdweb\",\n\tdescription: \"Link profiles to your account\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Nebula AI Plugins Page\nDESCRIPTION: This code snippet creates metadata for the thirdweb Nebula AI Plugins page. It sets the page title, description, and image properties using the createMetadata function from the @doc module.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/plugins/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Plugins & Integrations\",\n\t\ticon: \"nebula\",\n\t},\n\ttitle: \"thirdweb Nebula Compatible AI Plugins\",\n\tdescription:\n\t\t\"Learn about AI plugins supported by thirdweb Nebula, such as OpenAI & Eliza.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Extension Functions using CLI\nDESCRIPTION: Command to generate optimized functions for contract calls using Thirdweb CLI.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/transactions/prepare/page.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx thirdweb generate <contractId>/<contractAddress>\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Components in JavaScript\nDESCRIPTION: This snippet imports the necessary components for creating a tabbed interface from a custom UI library.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/styleguide/tabs/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\n```\n\n----------------------------------------\n\nTITLE: ThirdwebProvider Setup - React\nDESCRIPTION: Basic setup of ThirdwebProvider for app-wide wallet availability and connection state management.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/in-app-wallet/get-started/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ThirdwebProvider } from \"thirdweb/react\";\n\n<ThirdwebProvider>\n\t<YourApp />\n</ThirdwebProvider>;\n```\n\n----------------------------------------\n\nTITLE: Defining CallbackFunction Struct in Solidity\nDESCRIPTION: This code snippet defines the CallbackFunction struct used in the Modular Contracts architecture. It contains a field for the function selector.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/modular-contracts/page.mdx#2025-04-14_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nstruct CallbackFunction {\n    bytes4 selector;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing thirdweb SDK v4 (TypeScript)\nDESCRIPTION: Commands for installing thirdweb SDK v4 using different package managers.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/migrate/installation/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @thirdweb-dev/sdk @thirdweb-dev/react ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @thirdweb-dev/sdk @thirdweb-dev/react ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @thirdweb-dev/sdk @thirdweb-dev/react ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun i @thirdweb-dev/sdk @thirdweb-dev/react ethers@5.7.2\n```\n\n----------------------------------------\n\nTITLE: Project Path Option\nDESCRIPTION: CLI option to specify the path to the project directory\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/reference/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-p--path <string>\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for thirdweb Publish Documentation\nDESCRIPTION: This code snippet creates metadata for the thirdweb Publish documentation page. It sets the image title, icon, page title, and description using the createMetadata function from the @doc module.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/publish/publish-contract/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"thirdweb Publish\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"CLI | thirdweb Publish\",\n\tdescription:\n\t\t\"Use the CLI to publish your contracts directly to Any EVM compatible chain using the dashboard\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Contracts with Forge\nDESCRIPTION: Command to install modular-contracts package using Forge package manager\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/modular-contracts/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge install https://github.com/thirdweb-dev/modular-contracts\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Icons\nDESCRIPTION: Imports various React components from custom doc components and Lucide icons for use in the documentation.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/insight/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OpenSourceCard, DocImage, Grid, ArticleCard, FeatureCard } from \"@doc\";\nimport { createMetadata } from \"@/components/Document\";\nimport SupportedChains from \"..//_images/supported-chains.png\";\nimport { Wallet, File, MessageCircle, Braces, Bot, Blocks, Album, Server, Zap } from \"lucide-react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Contracts with NPM\nDESCRIPTION: Command to install thirdweb contracts package using NPM package manager\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/modular-contracts/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @thirdweb-dev/contracts\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata with TypeScript\nDESCRIPTION: Creates metadata configuration for the documentation page using TypeScript, including title, description and image settings.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/modular-contracts/module-contracts/erc-1155/minting/mintableERC1155/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMetadata, GithubButtonLink } from \"@doc\";\n\nexport const metadata = createMetadata({\n    title: \"thirdweb Modular Contracts\",\n    description:\n        \"Modular Contract provides a framework to build custom smart contracts more efficiently by offering a set of pre-built base contracts and reusable components, better known as modules.\",\n    image: {\n        title: \"thirdweb Modular Contracts\",\n        icon: \"solidity\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata for Nebula Documentation in React/JSX\nDESCRIPTION: Defines metadata for the Nebula documentation page, including title, description, and image information using the createMetadata function. This metadata is used for SEO and page rendering purposes.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/nebula/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Nebula Documentation\",\n\t\ticon: \"nebula\",\n\t},\n\ttitle: \"thirdweb Nebula Documentation\",\n\tdescription:\n\t\t\"thirdweb Nebula Docs : explore the Nebula API Reference and unlock the most powerful AI to interact with the blockchain & build AI powered web3 apps.\",\n});\n```\n\n----------------------------------------\n\nTITLE: React Component Import Configuration\nDESCRIPTION: Import statements for React components and utilities used in the documentation page, including Grid, Callout, Cards and metadata creation functions.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/account-abstraction/factories/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tGrid,\n\tCallout,\n\tOpenSourceCard,\n\tArticleIconCard,\n\tcreateMetadata,\n} from \"@doc\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { WalletsSmartIcon } from \"@/icons\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for Vote Contract Documentation in JavaScript\nDESCRIPTION: This code snippet sets up the metadata for the Vote contract documentation page. It imports a createMetadata function and configures the page title, description, and image properties.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/explore/pre-built-contracts/vote/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetadata } from \"@doc\";\n\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Vote contract\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Vote contract | thirdweb\",\n\tdescription: `The Vote contract is designed for groups such as DAOs to vote on proposals`,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering UI Component Cards using ArticleIconCard\nDESCRIPTION: This code block showcases the usage of the ArticleIconCard component to display information about various UI components. Each card includes a title, icon, link, and description for a specific component like ConnectButton, ConnectEmbed, TransactionButton, and MediaRenderer.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/react/v5/components/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Stack>\n\n<ArticleIconCard\n\ttitle=\"ConnectButton\"\n\ticon={ComponentIcon}\n\thref=\"/react/v5/ConnectButton\"\n\tdescription=\"A button that opens the Modal to connect to various wallets\"\n/>\n\n<ArticleIconCard\n\ttitle=\"ConnectEmbed\"\n\ticon={ComponentIcon}\n\thref=\"/react/v5/ConnectEmbed\"\n\tdescription=\"Embeddable component to connect to various wallets to create a sign-in UI\"\n/>\n\n<ArticleIconCard\n\ttitle=\"TransactionButton\"\n\ticon={ComponentIcon}\n\thref=\"/react/v5/TransactionButton\"\n\tdescription=\"A button that triggers given transaction on click\"\n/>\n\n<ArticleIconCard\n\ttitle=\"MediaRenderer\"\n\ticon={ComponentIcon}\n\thref=\"/react/v5/MediaRenderer\"\n\tdescription=\"Render any media from IPFS or URL\"\n/>\n\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Initializing Page Metadata in React/JSX\nDESCRIPTION: Sets up page metadata including title, description, and image properties for the credits documentation page using thirdweb's metadata creation utility.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/billing/credits/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"thirdweb - Credits\",\n\tdescription: \"Learn about how credits will be applied to your bill\",\n\timage: {\n\t\ttitle: \"Credits\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components for Connect Documentation\nDESCRIPTION: This snippet shows the component imports used to build the thirdweb Connect documentation page. It includes various card components, layout containers, and utility functions from the documentation framework.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/connect/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\tArticleCard,\n\tGithubTemplateCard,\n\tGrid,\n\tExpandableGrid,\n\tcreateMetadata,\n\tOpenSourceCard,\n\tStack,\n\tConnectCard,\n\tSDKCard,\n\tCallout,\n\tArticleIconCard,\n\tDocImage\n} from \"@doc\";\nimport { ExternalLink } from \"lucide-react\";\nimport {\n\tTypeScriptIcon,\n\tReactIcon,\n\tDotNetIcon,\n\tUnityIcon,\n\tUnrealEngineIcon,\n} from \"@/icons\";\nimport { cn } from \"@/lib/utils\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\nimport SupportedChains from \"..//_images/supported-chains.png\";\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata for Documentation Page in TypeScript\nDESCRIPTION: This code creates metadata for the documentation page, including the title, description, and image information. It uses the createMetadata function, likely a custom utility for generating consistent metadata across documentation pages.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/account/billing/upgrade-plan/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createMetadata({\n\ttitle: \"Billing & Plan Upgrades\",\n\tdescription: \"Learn how to upgrade your thirdweb plan\",\n\timage: {\n\t\ttitle: \"Billing & Plan Upgrades\",\n\t\ticon: \"thirdweb\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Metadata Configuration for Wallet Documentation Page\nDESCRIPTION: This code snippet configures the metadata for the Supported Wallets documentation page, including the page title, description, and image information with a TypeScript icon.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/typescript/v5/supported-wallets/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Supported Wallets\",\n\t\ticon: \"typescript\",\n\t},\n\ttitle: \"Supported Wallets | Connect SDK\",\n\tdescription: \"List of all the supported wallets in Connect SDK.\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Contracts Package - Forge\nDESCRIPTION: Command to install thirdweb contracts package using Forge\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/build/get-started/page.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge install https://github.com/thirdweb-dev/contracts\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Drop Contract Documentation in JavaScript\nDESCRIPTION: This code snippet creates metadata for the Drop contract design document, including the title, description, and image information. It uses the createMetadata function from a custom module.\nSOURCE: https://github.com/thirdweb-dev/js/blob/main/apps/portal/src/app/contracts/design-docs/drop/page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const metadata = createMetadata({\n\timage: {\n\t\ttitle: \"Drop contract design document\",\n\t\ticon: \"contract\",\n\t},\n\ttitle: \"Drop contract design document | thirdweb\",\n\tdescription:\n\t\t\"This is a live document that explains what the thirdweb Drop smart contracts are, how they work and can be used, and why they are written the way they are\",\n});\n```"
  }
]