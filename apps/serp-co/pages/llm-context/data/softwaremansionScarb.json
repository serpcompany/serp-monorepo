[
  {
    "owner": "software-mansion",
    "repo": "scarb",
    "content": "TITLE: Defining the Executable Entry Point in Cairo - Cairo\nDESCRIPTION: This snippet demonstrates the implementation of the single required entry-point function for a Cairo executable project. The function must be annotated with `#[executable]` and is the only function with this annotation in the project. It takes an unsigned 8-bit integer as input and returns it. No additional dependencies beyond the standard Cairo execution context and plugin are required. The function is meant to serve as the project's main entry point and will be invoked via Scarb's execution workflow.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/creating-executable-package.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\n#[executable]\nfn main(num: u8) -> u8 {\n    num\n}\n```\n\n----------------------------------------\n\nTITLE: Example Scarb.lock File Locking Dependencies to Specific Versions (TOML)\nDESCRIPTION: This TOML snippet illustrates the structure of a Scarb.lock file generated automatically by Scarb. It locks all packages, their exact versions, source URLs including commit hashes, and dependency relationships. The file begins with autogenerated comments and versioning metadata. It includes each package once with fields 'name', 'version', 'source' (including precise commit hashes), and optional 'dependencies' array. This lockfile ensures reproducible builds by resolving dependencies to fixed revisions instead of floating branch heads.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/lockfile.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# Code generated by scarb DO NOT EDIT.\nversion = 1\n\n[[package]]\nname = \"alexandria_data_structures\"\nversion = \"0.1.0\"\nsource = \"git+https://github.com/keep-starknet-strange/alexandria.git#3356bf0c5c1a089167d7d3c28d543e195325e596\"\n\n[[package]]\nname = \"alexandria_math\"\nversion = \"0.2.0\"\nsource = \"git+https://github.com/keep-starknet-strange/alexandria.git#3356bf0c5c1a089167d7d3c28d543e195325e596\"\ndependencies = [\n \"alexandria_data_structures\",\n]\n\n[[package]]\nname = \"hello_world\"\nversion = \"0.1.0\"\ndependencies = [\n \"alexandria_data_structures\",\n \"alexandria_math\",\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Package Manifest with Dependencies in Scarb.toml (TOML)\nDESCRIPTION: This TOML snippet shows an example of a Scarb.toml package manifest for a project named 'hello_world' with version '0.1.0'. It declares dependencies on two Git-based packages, 'alexandria_math' and 'alexandria_data_structures', by specifying their Git repository URLs. This manifest is the input for Scarb's dependency resolver, which reads broad dependency requirements without locking specific versions. This snippet forms the input basis for generating the Scarb.lock file.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/lockfile.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\n\n[dependencies]\nalexandria_math = { git = \"https://github.com/keep-starknet-strange/alexandria.git\" }\nalexandria_data_structures = { git = \"https://github.com/keep-starknet-strange/alexandria.git\" }\n```\n\n----------------------------------------\n\nTITLE: Rust: Simple Procedural Macro Implementation\nDESCRIPTION: This Rust code snippet shows a basic implementation of a procedural macro. It defines a function `some` decorated with `#[inline_macro]`, indicating it's an inline macro. The function takes a `TokenStream` as input and returns a `ProcMacroResult`. In this example, it's a no-op macro that simply returns the input token stream unchanged. It depends on the `cairo_lang_macro` crate.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/procedural-macro.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// src/lib.rs\nuse cairo_lang_macro::{ProcMacroResult, TokenStream, inline_macro};\n\n/// The entry point of procedural macro implementation.\n#[inline_macro]\npub fn some(token_stream: TokenStream) -> ProcMacroResult {\n    // no-op\n    ProcMacroResult::new(token_stream)\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Setup for Scarb (YAML)\nDESCRIPTION: This snippet demonstrates a GitHub Actions workflow for setting up and using Scarb. It uses the `software-mansion/setup-scarb` action to install Scarb, specifying the version with `scarb-version`.  It then executes `scarb fmt --check` and `scarb test` commands. The `rel.sampleVersion` variable (from the import statement) is used to set the Scarb version. The workflow triggers on push, merge_group, and pull_request events.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/using-scarb-in-ci.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: CI\non:\n  push:\n  merge_group:\n  pull_request:\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: software-mansion/setup-scarb@v1\n        with:\n          scarb-version: \"{{ rel.sampleVersion }}\"\n      - run: scarb fmt --check\n      - run: scarb test\n```\n\n----------------------------------------\n\nTITLE: Creating a new Scarb project\nDESCRIPTION: This command creates a new Scarb project in the specified directory. Use `scarb init` to initialize a project in the current directory.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nscarb new project/directory\n```\n\n----------------------------------------\n\nTITLE: Emitting Diagnostics in Cairo\nDESCRIPTION: This snippet demonstrates emitting compiler diagnostics using the `cairo_lang_macro` crate. It shows how to create a `Diagnostic` with an error message and attach it to the `ProcMacroResult`. The macro author can inform users about mistakes in Cairo code using the diagnostics functionality.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/procedural-macro.md#_snippet_6\n\nLANGUAGE: cairo\nCODE:\n```\nuse cairo_lang_macro::{ProcMacroResult, TokenStream, attribute_macro, Diagnostic};\n\n#[attribute_macro]\npub fn some(_attr: TokenStream, token_stream: TokenStream) -> ProcMacroResult {\n  let diag = Diagnostic::error(\"Some error from macro.\");\n  ProcMacroResult::new(token_stream)\n    .with_diagnostics(diag.into())\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Development Dependency (Scarb)\nDESCRIPTION: This snippet shows how to declare a development dependency using the `[dev-dependencies]` section. Development dependencies are only used during compilation for tests and are not included when building the package itself.  This allows using development dependencies such as testing frameworks.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/specifying-dependencies.md#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[dev-dependencies]\nalexandria_math = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Cairo Compiler Configuration in Scarb (TOML)\nDESCRIPTION: This snippet demonstrates how to override the default 'sierra-replace-ids' property for the Cairo compiler in the 'dev' profile by setting it to 'true'. Requires a valid Scarb.toml manifest and assumes the profile section structure as per Scarb's convention. The input is a TOML configuration section; it directly affects the build outputs by altering the naming behavior in the generated Sierra code.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/profiles.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[profile.dev.cairo]\n# Replace all names in generated Sierra code with dummy counterparts.\nsierra-replace-ids = true\n\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Setup for Scarb (YAML)\nDESCRIPTION: This snippet showcases a GitLab CI configuration for integrating Scarb.  It defines a `SCARB_VERSION` variable. The configuration uses an Ubuntu image, installs `curl`, and installs Scarb using a `curl` command, pointing to the official install script, and sets the `PATH`. The script then runs `scarb fmt --check` and `scarb build` commands.  The `SCARB_VERSION` variable is used to specify the Scarb version.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/using-scarb-in-ci.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nvariables:\n  SCARB_VERSION: \"{{ rel.sampleVersion }}\"\n\nstages:\n  - check\n\nscarb:\n  stage: check\n  image: ubuntu:jammy\n  script:\n    - apt-get update && apt-get install -y curl\n    - export PATH=\"$HOME/.local/bin:$PATH\" && curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | bash -s -- -v $SCARB_VERSION\n    - scarb fmt --check\n    - scarb build\n```\n\n----------------------------------------\n\nTITLE: Building Starknet contracts in Scarb\nDESCRIPTION: To build Starknet contracts, add the `starknet` dependency and a `[[target.starknet-contract]]` section to `Scarb.toml`. Replace `{{ rel.stable.starknetPackageVersionReq }}` with a valid Starknet package version requirement.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nstarknet = \"{{ rel.stable.starknetPackageVersionReq }}\"\n\n[[target.starknet-contract]]\n```\n\n----------------------------------------\n\nTITLE: Using `scarb fmt` to Format Cairo Files\nDESCRIPTION: Demonstrates how to invoke the Scarb formatter to format Cairo source files in the project directory, ensuring code style consistency. It also shows how to check formatting without making changes, suitable for CI integration.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/formatting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nscarb fmt\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tool Section in Scarb.toml - TOML\nDESCRIPTION: Provides an example of defining a custom [tool.snforge] section in Scarb.toml to configure package-specific settings for external tools. Scarb ignores unused keys in this section and accepts any valid TOML value. No constraints unless required by the third-party tool.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_24\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.snforge]\nexit-first = true\n\n```\n\n----------------------------------------\n\nTITLE: Cairo-version example in TOML\nDESCRIPTION: This TOML snippet illustrates how to specify the required Cairo compiler version for a package using the `cairo-version` field within the `[package]` section. The example demonstrates using the `rel.preview.version` variable to specify the version requirement which allows for flexibility with version control.  This setting ensures compatibility and displays an error if there is a version mismatch.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\ncairo-version = \"^{{ rel.preview.version }}\"\n```\n\n----------------------------------------\n\nTITLE: Adding a registry dependency in Scarb.toml\nDESCRIPTION: This example shows how to add a dependency hosted on the official scarbs.xyz registry to the `Scarb.toml` file.  Specify the dependency name and version.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nalexandria_math = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Scarb Manifest File (Toml) Configuration\nDESCRIPTION: A sample 'Scarb.toml' manifest file defining project name, version, edition, and dependencies in TOML format. It provides metadata and dependency management for the project, essential for compilation and package management.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/creating-a-new-package.md#_snippet_1\n\nLANGUAGE: Toml\nCODE:\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"{{ constants.edition }}\"\n\n[dependencies]\n```\n\n----------------------------------------\n\nTITLE: Configuring Starknet Contract Target and Dependency in TOML\nDESCRIPTION: TOML configuration snippet adding a 'starknet-contract' target and 'starknet' dependency for Starknet contract compilation within the project. It enables Scarb to generate Starknet-specific artifacts.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/creating-a-new-package.md#_snippet_4\n\nLANGUAGE: Toml\nCODE:\n```\n[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"{{ constants.edition }}\"\n\n[dependencies]\nstarknet = \"{{ rel.stable.starknetPackageVersionReq }}\"\n\n[[target.starknet-contract]]\n```\n\n----------------------------------------\n\nTITLE: Declaring a Git Repository Dependency with Rev (Scarb)\nDESCRIPTION: This snippet shows how to specify a Git repository dependency using the `rev` key. The `rev` key can take a commit hash or a named reference like a pull request ref.  The dependencies are defined within the `[dependencies]` section of the `Scarb.toml` file.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/specifying-dependencies.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nalexandria_math = { git = \"https://github.com/keep-starknet-strange/alexandria.git\", branch = \"next\" }\n```\n\n----------------------------------------\n\nTITLE: Declaring a Registry Dependency with Version Key (Scarb)\nDESCRIPTION: This snippet shows an alternative method of declaring a dependency on a package from a registry.  It uses the `version` key within a table to specify the dependency's version, which is semantically equivalent to the previous example. The dependencies are defined within the `[dependencies]` section of the `Scarb.toml` file.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/specifying-dependencies.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nalexandria_math = { version = \"0.1.0\" }\n```\n\n----------------------------------------\n\nTITLE: Scarb New Project Initialization Command\nDESCRIPTION: Shell command to create a new Scarb package with default settings, including package directory and optional VCS initialization. It sets up 'Scarb.toml' and 'src/lib.cairo' files for further development.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/creating-a-new-package.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nscarb new hello_world\n```\n\n----------------------------------------\n\nTITLE: Enabling allow-warnings in Scarb Cairo Compiler - TOML\nDESCRIPTION: Shows how to enable the allow-warnings flag in the [cairo] section, allowing Scarb to complete compilation even when compiler warnings are present. This feature requires only Scarb and is useful for development environments. Flag is a boolean and defaults to true.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_17\n\nLANGUAGE: TOML\nCODE:\n```\n[cairo]\nallow-warnings = true\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Profile Settings (TOML)\nDESCRIPTION: This snippet demonstrates how to override the default settings of a profile in the `Scarb.toml` file. In this example, the `sierra-replace-ids` setting for the `dev` profile's `cairo` section is set to `false`.  This allows customization of built-in profiles.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/defining-custom-profiles.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev.cairo]\nsierra-replace-ids = false\n```\n\n----------------------------------------\n\nTITLE: Inheriting Properties from Built-in Profiles (TOML)\nDESCRIPTION: This snippet demonstrates how to inherit properties from a built-in profile when defining a custom profile. The `inherits` property is used to specify the profile to inherit from, such as `release` in this example. The custom profile can then override specific settings, inheriting the rest from the specified profile. `sierra-replace-ids` is set to `true` overriding the inherited property.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/defining-custom-profiles.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[profile.custom-profile]\ninherits = \"release\"\n\n[profile.custom-profile.cairo]\nsierra-replace-ids = true\n```\n\n----------------------------------------\n\nTITLE: Cargo Manifest File for Macro Package\nDESCRIPTION: This TOML snippet is a Cargo manifest (`Cargo.toml`) for a procedural macro package. It defines the package metadata and specifies `cdylib` as the crate type under the `[lib]` section. This setting is crucial for building the Rust code into a dynamically linked library, which is required for procedural macros to interact with Scarb.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/procedural-macro.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[package]\nname = \"some_macro\"\nversion = \"0.1.0\"\nedition = \"2021\"\npublish = false\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\ncairo-lang-macro = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Building external Starknet contracts with wildcards using TOML\nDESCRIPTION: Demonstrates alternative ways to specify external contracts to build from dependencies within the `build-external-contracts` property of the `starknet-contract` target configuration. The first snippet lists individual full contract paths, while the second shows the syntactic sugar to use the wildcard character `*` to build all contracts within a given module subtree. Wildcards can only appear at the end.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/starknet/contract-target.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[target.starknet-contract]]\nbuild-external-contracts = [\n    \"dojo_erc::erc721::components::Balance\",\n    \"dojo_erc::erc721::components::OperatorApproval\",\n    \"dojo_erc::erc721::components::Owner\",\n    \"dojo_erc::erc721::components::TokenApproval\",\n    \"dojo_erc::erc721::erc721::ERC721\",\n    \"dojo_erc::erc721::systems::erc721_approve\",\n    \"dojo_erc::erc721::systems::erc721_burn\",\n    \"dojo_erc::erc721::systems::erc721_mint\",\n    \"dojo_erc::erc721::systems::erc721_set_approval_for_all\",\n    \"dojo_erc::erc721::systems::erc721_transfer_from\",\n]\n```\n\nLANGUAGE: toml\nCODE:\n```\n[[target.starknet-contract]]\nbuild-external-contracts = [\n    \"dojo_erc::erc721::*\",\n]\n```\n\n----------------------------------------\n\nTITLE: Executing Scarb Build with JSON Output (Shell)\nDESCRIPTION: Demonstrates running the `scarb build` command with the `--json` flag. This outputs compilation status, diagnostic messages (like syntax errors), and final error summaries as separate newline-delimited JSON objects, providing a machine-readable format for build results.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/writing-extensions/json-output.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ scarb --json build\n{\"status\":\"compiling\",\"message\":\"hello v0.1.0 ([..]Scarb.toml)\"}\n{\"type\":\"diagnostic\",\"message\":\"error: Skipped tokens. Expected: Module/Use/FreeFunction/ExternFunction/ExternType/Trait/Impl/Struct/Enum or an attribute.\\n --> lib.cairo:1:1\\nnot_a_keyword\\n^***********^\\n\\n\"}\n{\"type\":\"error\",\"message\":\"could not compile `hello` due to previous error\"}\n```\n\n----------------------------------------\n\nTITLE: Using imported package item in Cairo code (Cairo)\nDESCRIPTION: Demonstrates how to use a dependency declared in `Scarb.toml` within a Cairo source file (`src/lib.cairo`). It shows importing a specific type (`PedersenCHasher`) from the `openzeppelin_merkle_tree` package and then using one of its associated functions (`commutative_hash`). This snippet illustrates how to access functionality provided by external libraries in your Cairo code.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/dependencies.md#_snippet_3\n\nLANGUAGE: Cairo\nCODE:\n```\nuse openzeppelin_merkle_tree::hashes::PedersenCHasher;\nfn hash() {\n    let a = 'a';\n    let b = 'b';\n    let _hash = PedersenCHasher::commutative_hash(a, b);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Scarb Lint Static Analysis Tool in Shell\nDESCRIPTION: This snippet demonstrates the command to run the Scarb lint static code analyzer on the current Cairo project. Running `scarb lint` performs a code quality check based on predefined linting rules and outputs warnings or suggestions about code improvements. No dependencies or parameters are required other than having Scarb installed and a valid Cairo project in the working directory. The output consists of plugin diagnostics, highlighting specific source code lines and messages. This command does not modify code but points out issues that can be subsequently addressed.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/linter.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nscarb lint\n```\n\n----------------------------------------\n\nTITLE: Declaring a Path Dependency (Scarb)\nDESCRIPTION: This snippet illustrates how to specify a dependency on a local package using the `path` key.  The path is relative to the location of the `Scarb.toml` file.  Changes to the path dependency are immediately reflected in builds.  The dependencies are defined within the `[dependencies]` section of the `Scarb.toml` file.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/specifying-dependencies.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\n----------------------------------------\n\nTITLE: Add Scarb Plugin to asdf (Shell)\nDESCRIPTION: Use this command with the asdf version manager to add the official Scarb plugin. This plugin enables asdf to download and manage multiple Scarb versions on macOS and Linux systems.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add scarb\n```\n\n----------------------------------------\n\nTITLE: Checking Scarb Package with scarb check\nDESCRIPTION: This snippet shows how to check a Scarb package for errors using the `scarb check` command. The command performs a faster check of the package and its dependencies without generating output files. It will print the result for each dependency being checked.  This is useful for a quick validation before building.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/working-on-an-existing-package.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ scarb check\n    Checking alexandria_ascii v0.1.0 (/path/to/package/alexandria/src/ascii/Scarb.toml)\n    Checking alexandria_data_structures v0.1.0 (/path/to/package/alexandria/src/data_structures/Scarb.toml)\n    Checking alexandria_encoding v0.1.0 (/path/to/package/alexandria/src/encoding/Scarb.toml)\n    Checking alexandria_linalg v0.1.0 (/path/to/package/alexandria/src/linalg/Scarb.toml)\n    Checking alexandria_math v0.2.0 (/path/to/package/alexandria/src/math/Scarb.toml)\n    Checking alexandria_numeric v0.1.0 (/path/to/package/alexandria/src/numeric/Scarb.toml)\n    Checking alexandria_searching v0.1.0 (/path/to/package/alexandria/src/searching/Scarb.toml)\n    Checking alexandria_sorting v0.1.0 (/path/to/package/alexandria/src/sorting/Scarb.toml)\n    Checking alexandria_storage v0.2.0 (/path/to/package/alexandria/src/storage/Scarb.toml)\n    Finished checking `dev` profile target(s) in 4 seconds\n```\n\n----------------------------------------\n\nTITLE: Adding Git dependency via `scarb add` command (Shell)\nDESCRIPTION: Demonstrates adding a dependency sourced directly from a Git repository using the `scarb add` command. It specifies the package name, the Git repository URL, and a specific tag or commit to use. While registries are preferred, this command shows the alternative method for including dependencies directly from Git sources.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/dependencies.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nscarb add openzeppelin_merkle_tree --git https://github.com/OpenZeppelin/cairo-contracts.git --tag 0.17.0\n```\n\n----------------------------------------\n\nTITLE: Allowing Prebuilt Plugins in [tool.scarb] Section - TOML\nDESCRIPTION: Shows how to allow use of prebuilt plugins via the [tool.scarb] section by specifying package names in the allow-prebuilt-plugins array. Enables Scarb to load binaries from trusted dependencies, supporting both direct and transitive relationships. Only applies to the building package; list trusted packages only due to security risks.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_25\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.scarb]\nallow-prebuilt-plugins = [\"snforge_std\"]\n\n```\n\n----------------------------------------\n\nTITLE: Implementing multiple executable entry points in Cairo\nDESCRIPTION: Example of how to define multiple functions with the #[executable] attribute to serve as entry points for different executable targets.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/targets.md#_snippet_7\n\nLANGUAGE: cairo\nCODE:\n```\n#[executable]\nfn main() -> felt252 {\n    12\n}\n\n#[executable]\nfn secondary() -> felt252 {\n    34\n}\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Profile with the `--profile` Flag (Shell)\nDESCRIPTION: This snippet demonstrates how to specify a profile to use when running Scarb commands like `scarb build`. The `--profile` flag (or `-P`) is used to select the desired profile, such as `release` in this example. This allows for building with different compiler settings based on the selected profile.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/defining-custom-profiles.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nscarb --profile release build\n```\n\n----------------------------------------\n\nTITLE: Build Command Output for Cairo Package\nDESCRIPTION: Terminal output showing the compilation process of the Cairo package via 'scarb build', indicating successful generation of Sierra code in specified target directory.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/creating-a-new-package.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ scarb build\n   Compiling hello_world v0.1.0 (/path/to/package/hello_world/Scarb.toml)\n    Finished `dev` profile target(s) in 2 seconds\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Profile (TOML)\nDESCRIPTION: This snippet shows how to define a custom profile with a custom name in the `Scarb.toml` file. Here, a profile named `custom-profile` is defined, and the `sierra-replace-ids` setting for its `cairo` section is set to `false`. This allows for creating entirely new profiles with specific settings.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/defining-custom-profiles.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[profile.custom-profile.cairo]\nsierra-replace-ids = false\n```\n\n----------------------------------------\n\nTITLE: Adding a local path dependency via scarb add\nDESCRIPTION: This command adds a dependency located in a local path to the `Scarb.toml` file using the `scarb add` command. Specify the path using the `--path` flag.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nscarb add alexandria_math --path ../path-to-alexandria-checkout/alexandria\n```\n\n----------------------------------------\n\nTITLE: Verify Scarb Installation (Shell)\nDESCRIPTION: Run this command in your terminal after installing Scarb to check its installed version. This also verifies that the Scarb executable is correctly added to your system's PATH environment variable.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nscarb --version\n```\n\n----------------------------------------\n\nTITLE: Checking Cairo formatting with Scarb\nDESCRIPTION: This command checks the Cairo code formatting in the project and exits with a non-zero status code if the formatting is not correct. Used for CI.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nscarb fmt -c\n```\n\n----------------------------------------\n\nTITLE: Install Scarb via Starkup Script (Shell)\nDESCRIPTION: Execute this command on macOS or Linux to download and run the starkup installation script via `curl`. This script automates the installation of Scarb along with other essential Cairo development tools.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.starkup.dev | sh\n```\n\n----------------------------------------\n\nTITLE: Removing development dependency via `scarb rm --dev` (Shell)\nDESCRIPTION: Uses the `scarb rm` command with the `--dev` flag to remove a dependency specifically from the `[dev-dependencies]` section of the `Scarb.toml` file. This command provides a command-line method for removing development-only dependencies, mirroring the functionality for regular dependencies.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/dependencies.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nscarb rm --dev openzeppelin_merkle_tree\n```\n\n----------------------------------------\n\nTITLE: Defining both library and contract targets in Scarb.toml\nDESCRIPTION: Example showing how to define both a library target and a starknet-contract target in a Scarb.toml file when overriding default targets.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/targets.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\n\n[[target.starknet-contract]]\n\n```\n\n----------------------------------------\n\nTITLE: Adding a registry dependency via scarb add\nDESCRIPTION: This command adds a dependency from the official scarbs.xyz registry to the `Scarb.toml` file using the `scarb add` command. Specify the dependency name and version.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nscarb add alexandria_math@0.1.0\n```\n\n----------------------------------------\n\nTITLE: Running a Defined Script Using scarb run Command in Bash\nDESCRIPTION: This snippet demonstrates how to run a defined script named 'foo' using the scarb run command. The command invokes the scripts shell to execute the script's associated command string, using a cross-platform shell environment.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/scripts.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nscarb run foo\n```\n\n----------------------------------------\n\nTITLE: Updating locked dependencies with Scarb\nDESCRIPTION: This command updates the locked dependencies in the Scarb project.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nscarb update\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files with `.cairofmtignore`\nDESCRIPTION: Guides users on excluding specific files or directories from formatting by creating `.cairofmtignore` files, similar to `.gitignore`, to specify ignore rules at different directory levels.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/formatting.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Publish example in TOML\nDESCRIPTION: This TOML snippet shows how to set the `publish` field in the `[package]` section. Setting `publish = true` allows publishing the package to a registry, while `publish = false` prevents it. This influences whether the package can be shared or made available for others to use.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\npublish = true\n```\n\n----------------------------------------\n\nTITLE: Declaring a Git Repository Dependency (Scarb)\nDESCRIPTION: This snippet illustrates how to declare a dependency on a package hosted in a Git repository. The `git` key is used to specify the repository's location. Scarb fetches the repository and searches for a `Scarb.toml` file within it. The dependencies are defined within the `[dependencies]` section of the `Scarb.toml` file.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/specifying-dependencies.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nalexandria_math = { git = \"https://github.com/keep-starknet-strange/alexandria.git\" }\n```\n\n----------------------------------------\n\nTITLE: Enabling Starknet Contract Compilation Dependency in Scarb.toml\nDESCRIPTION: Example of how to declare dependency on the official `starknet` package in `Scarb.toml` to enable Starknet contract compilation. The version string is dynamically linked to the imported `rel` data representing the stable Starknet package version requirement to ensure compatibility with the Cairo version used by Scarb.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/starknet/contract-target.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nstarknet = \"{{ rel.stable.starknetPackageVersionReq }}\"\n```\n\n----------------------------------------\n\nTITLE: Install Stable Scarb via Official Script (Shell)\nDESCRIPTION: Download and run the official Scarb installation script via `curl` to install the latest stable Scarb release quickly on macOS or Linux systems. This script handles downloading and placing the executable.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Lines Using `#[cairofmt::skip]` Attribute\nDESCRIPTION: Shows how to mark specific code statements or expressions in Cairo source files to be skipped during formatting by using the `#[cairofmt::skip]` attribute, useful for preserving manual formatting or special cases.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/formatting.md#_snippet_7\n\nLANGUAGE: cairo\nCODE:\n```\n#[cairofmt::skip]\nlet a = array![\n    1,\n    2,\n    3\n];\n```\n\n----------------------------------------\n\nTITLE: Readme example in TOML\nDESCRIPTION: This TOML snippet explains the use of the `readme` field in the `[package]` section.  This field indicates the path to a file (usually `README.md` or similar) providing general package information. If not set explicitly, Scarb will automatically try to locate a README file in the package's root.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_8\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nreadme = \"README.md\"\n```\n\n----------------------------------------\n\nTITLE: Building project with Scarb after adding dependencies (Shell)\nDESCRIPTION: Executes the `scarb build` command in the shell, which triggers the fetching of declared dependencies (including transitive ones) and then compiles the Scarb project. The output shows the download progress of dependencies and the compilation of the main package. This command is used to integrate new dependencies into the project build.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/dependencies.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ scarb build\n Downloading openzeppelin_account v0.17.0\n Downloading openzeppelin_merkle_tree v0.17.0\n Downloading openzeppelin_utils v0.17.0\n Downloading openzeppelin_introspection v0.17.0\n   Compiling hello_world v0.1.0 (/path/to/package/hello_world/Scarb.toml)\n    Finished `dev` profile target(s) in 4 seconds\n```\n\n----------------------------------------\n\nTITLE: Configuring Prebuilt Macro Usage\nDESCRIPTION: This snippet shows how to configure the use of prebuilt procedural macros in a Scarb project. It specifies a list of package names for which prebuilt plugins are allowed. This section is added in the `[tool.scarb]` section of Scarb manifest in the top-level package. This configuration enables the use of precompiled macro binaries.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/procedural-macro.md#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tool.scarb]\nallow-prebuilt-plugins = [\"snforge_std\"]\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Scripts in Scarb.toml Using TOML\nDESCRIPTION: This snippet demonstrates how to define custom scripts within the [scripts] section of the Scarb.toml configuration file. Each command name is mapped to a string that will be executed by the scripts shell. The commands should be simple strings without subtables, arrays, or other types. These scripts act as named tasks runnable using the scarb command line tool.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/scripts.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[scripts]foo = \"echo 'Hello'\"bar = \"echo 'World!'\"\n```\n\n----------------------------------------\n\nTITLE: Urls example in TOML\nDESCRIPTION: This TOML snippet shows how to use the `urls` field in the `[package]` section. The `urls` field allows you to include a map of additional internet links, providing human-readable names as keys and URLs as values. These links can provide extra context about the package.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_13\n\nLANGUAGE: TOML\nCODE:\n```\n[package.urls]\n\"We can help you build your project\" = \"https://swmansion.com/services/\"\n\"We're hiring\" = \"https://swmansion.com/careers/\"\n\n```\n\n----------------------------------------\n\nTITLE: Install Specific Scarb Version via Official Script (Shell)\nDESCRIPTION: Download and run the official Scarb installation script via `curl` to install a specific version of Scarb on macOS or Linux. Replace `{{ rel.sampleVersion }}` with the desired version number, passing it using the `-v` flag. This snippet uses templating.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh -s -- -v {{ rel.sampleVersion }}\n```\n\n----------------------------------------\n\nTITLE: Setting inlining-strategy for Cairo Compiler in Scarb - Avoid Strategy - TOML\nDESCRIPTION: Configures the inlining-strategy in the [cairo] section to 'avoid', ensuring that only functions explicitly marked with #[inline(always)] are inlined. No additional dependencies required; use with caution as it may slow down code execution. Accepts 'default', 'avoid', or a numeric value and defaults to 'default'.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_19\n\nLANGUAGE: TOML\nCODE:\n```\n[cairo]\ninlining-strategy = \"avoid\"\n\n```\n\n----------------------------------------\n\nTITLE: Description example in TOML\nDESCRIPTION: This TOML snippet presents how to use the `description` field within the `[package]` section.  The `description` field offers a brief overview of the package's purpose, for display on registries and other indexes. It helps users quickly understand what the package is about.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_6\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\ndescription = \"A short description of my package.\"\n```\n\n----------------------------------------\n\nTITLE: Running a script with additional arguments using 'scarb run' and '--' separator\nDESCRIPTION: This snippet illustrates how to execute a specific script with extra command-line arguments by appending '--' followed by the arguments. It ensures that arguments are passed correctly to the script, which can then use them internally.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/defining-custom-scripts.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nscarb run foo -- hello world\n```\n\n----------------------------------------\n\nTITLE: Setting inlining-strategy for Cairo Compiler in Scarb - Numerical Value - TOML\nDESCRIPTION: Sets the inlining-strategy to a numerical value (e.g., 18) in Scarb's [cairo] section, specifying a custom inlining threshold for the compiler. The exact meaning of the number is compiler-defined and subject to change. No dependencies needed; default is 'default'.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_20\n\nLANGUAGE: TOML\nCODE:\n```\n[cairo]\ninlining-strategy = 18\n\n```\n\n----------------------------------------\n\nTITLE: Install Latest Scarb via asdf (Shell)\nDESCRIPTION: Execute this asdf command to download and install the most recent stable version of Scarb available via the asdf plugin. This command requires asdf to be installed and the Scarb plugin added.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf install scarb latest\n```\n\n----------------------------------------\n\nTITLE: Install Nightly Scarb via Official Script (Shell)\nDESCRIPTION: Download and run the official Scarb installation script via `curl`, specifically requesting the latest nightly build. Pass the `-v nightly` flag to the script to install the most recent development version on macOS or Linux.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh -s -- -v nightly\n```\n\n----------------------------------------\n\nTITLE: Automatically Fixing Issues with Scarb Lint in Shell\nDESCRIPTION: This snippet provides the command to run the Scarb lint tool with the `--fix` flag, enabling automatic correction of some detected issues in the project’s Cairo code. It requires the same setup as the basic lint command but extends functionality by modifying code to address fixable lint problems. This accelerates code quality improvement by automatically applying changes as suggested by the linter. Users should verify changes after running to ensure correctness.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/linter.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nscarb lint --fix\n```\n\n----------------------------------------\n\nTITLE: Building or Serving mdBook Documentation\nDESCRIPTION: Runs `mdbook build` to compile the Markdown documentation generated by `scarb doc` into a static site, or `mdbook serve` to build and serve it locally. This command should be executed within the generated documentation target directory (`/target/doc/<PACKAGE-NAME>`).\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/documentation-generation.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmdbook build\n```\n\nLANGUAGE: shell\nCODE:\n```\nmdbook serve\n```\n\n----------------------------------------\n\nTITLE: Defining Environment and Shell Variables in Script Commands in TOML\nDESCRIPTION: This snippet exemplifies the difference between shell variables and environment variables within script command definitions in the [scripts] section of Scarb.toml. Shell variables are assigned without 'export' and not inherited by spawned commands, while environment variables are exported and inherited. The example shows setting and exporting variables combined with echo and env commands.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/scripts.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[scripts]foo = \"USER=SWMANSION && export HELLO=Hello && echo $HELLO $USER!\"bar = \"USER=SWMANSION && export HELLO=Hello && env\"\n```\n\n----------------------------------------\n\nTITLE: Running Cairo Program with Scarb\nDESCRIPTION: This command executes the Cairo program using Scarb. The `--available-gas` flag limits the amount of gas available to the program during execution. This command requires a compiled Scarb project and a valid Cairo program entry point.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/examples/hello_world/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nscarb cairo-run --available-gas 200000\n```\n\n----------------------------------------\n\nTITLE: Installing mdBook using Cargo\nDESCRIPTION: Installs the `mdBook` tool using the Rust package manager, Cargo. This is a prerequisite for manually building documentation from the Markdown output generated by `scarb doc`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/documentation-generation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install mdbook\n```\n\n----------------------------------------\n\nTITLE: Specifying Profile Inheritance in Scarb (TOML)\nDESCRIPTION: This snippet enables a custom profile ('my-profile') to inherit all properties from the 'release' built-in profile by setting the 'inherits' property. It assumes the presence of built-in profiles in Scarb and proper TOML structure in the manifest. The input is the custom profile section; output is a configuration where 'my-profile' duplicates 'release' unless explicitly overridden.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/profiles.md#_snippet_7\n\nLANGUAGE: TOML\nCODE:\n```\n[profile.my-profile]\ninherits = \"release\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Starknet Contract Target with TOML\nDESCRIPTION: Provides default example configuration for the `starknet-contract` target in Scarb's `Scarb.toml` file. The snippet shows how to enable Sierra and CASM code generation options, Python hint emission, allowed libfuncs validation, and external contract builds. This TOML configuration sets key boolean properties controlling compilation behavior and validation rules.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/starknet/contract-target.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[target.starknet-contract]]\n# Enable Sierra codegen.\nsierra = true\n\n# Enable CASM codegen.\ncasm = false\n# Emit Python-powered hints in order to run compiled CASM class with legacy Cairo VM.\ncasm-add-pythonic-hints = false\n\n# Enable allowed libfuncs validation.\nallowed-libfuncs = true\n# Raise errors instead of warnings if disallowed libfuncs are found.\nallowed-libfuncs-deny = false\n# Reference to the libfuncs allowlist used for validation.\n# - Use `allowed-libfuncs-list.name` to use built-in named allowlist.\n# - Use `allowed-libfuncs-list.path` to read an allowlist from file.\nallowed-libfuncs-list = {} # Cairo compiler defined\n\n# Emit Starknet artifacts for contracts defined in dependencies.\nbuild-external-contracts = []\n```\n\n----------------------------------------\n\nTITLE: Importing constants and rel data\nDESCRIPTION: This snippet imports data from external files, likely used for dynamic content within the Vue.js template. It fetches 'constants' and 'rel' data, which are probably used to populate values or control the presentation of the documentation.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport {data as constants} from \"../../constants.data\";\nimport { data as rel } from \"../../github.data\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Set Global Scarb Version via asdf (Shell)\nDESCRIPTION: Configure asdf to use the latest installed Scarb version globally across all shell sessions. This command updates your `~/.tool-versions` file to set the default Scarb version.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nasdf set -u scarb latest\n```\n\n----------------------------------------\n\nTITLE: Declaring multiple dependencies in Scarb.toml (TOML)\nDESCRIPTION: Shows how to list multiple package dependencies within the `[dependencies]` section of a `Scarb.toml` file. Each line specifies a package name and its version requirement. This is the standard method for defining several required libraries for a Scarb project simultaneously under a single section.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/dependencies.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[dependencies]\nopenzeppelin_merkle_tree = \"0.17.0\"\nopenzeppelin_account = \"0.17.0\"\n```\n\n----------------------------------------\n\nTITLE: Original Scarb.toml Dependency Specification\nDESCRIPTION: This TOML snippet shows an example dependency declaration within the original `Scarb.toml` file, including a non-registry source property (`path`). This format exists before the manifest normalization occurs during the `scarb package` process.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/registries/package-tarball.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nfoobar = { version = \"1.2.3\", path = \"../foobar\" }\n```\n\n----------------------------------------\n\nTITLE: Listing all available scripts with 'scarb run' CLI command\nDESCRIPTION: This snippet exhibits the command to execute 'scarb run' without arguments, which lists all defined scripts in the codebase. It helps users verify available scripts and their associated commands for further execution.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/defining-custom-scripts.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ scarb run\nScripts available via `scarb run`:\nfoo                 : echo 'Hello, world!'\n```\n\n----------------------------------------\n\nTITLE: Configuring Formatting Options in `Scarb.toml`\nDESCRIPTION: Illustrates how to override default formatter settings by adding a `[tool.fmt]` section in the `Scarb.toml` configuration file, including options like sorting imports and line length.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/formatting.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tool.fmt]\nsort-module-level-items = true\n```\n\n----------------------------------------\n\nTITLE: Feature Configuration - TOML\nDESCRIPTION: This code snippet showcases a `[features]` section within a `Scarb.toml` file. This section allows the definition of named features and their dependencies. The example defines three features: `poseidon`, `pedersen`, and `keccak`, which can be used to conditionally compile specific parts of the code.  Each feature can also list other features that should be enabled with it.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/conditional-compilation.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[features]\nposeidon = []\npedersen = []\nkeccak = []\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation using cfg Attribute - Cairo\nDESCRIPTION: This snippet demonstrates using the `cfg` attribute to conditionally include different implementations of a function based on the target environment.  The `cfg` attribute checks a configuration predicate, rewriting the item if true and removing it if false.  The example shows two implementations of an `example` function, one for the 'lib' target and another for the 'starknet-contract' target.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/conditional-compilation.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\n#[cfg(target: 'lib')]\nfn example() -> felt252 {\n    42\n}\n\n#[cfg(target: 'starknet-contract')]\nfn example() -> felt252 {\n    512\n}\n```\n\n----------------------------------------\n\nTITLE: Using Feature Flags - Cairo\nDESCRIPTION: This snippet demonstrates using `cfg` attributes with feature flags. These flags, defined in the `Scarb.toml` file, enable the conditional inclusion of modules and functions during compile time. For example, the module `poseidon` is conditionally included if the `poseidon` feature is enabled. Similarly, the function `hash_pedersen` is conditionally defined when the `pedersen` feature is selected.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/conditional-compilation.md#_snippet_2\n\nLANGUAGE: cairo\nCODE:\n```\n// Conditionally include a module\n#[cfg(feature: 'poseidon')]\nmod poseidon;\n\n// Conditionally define a function\n#[cfg(feature: 'pedersen')]\nfn hash_pedersen(value: felt252) -> felt252 {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Keywords example in TOML\nDESCRIPTION: This TOML snippet describes the `keywords` field in the `[package]` section. The `keywords` field allows specifying an array of strings that describe your package for search purposes on package registries. It suggests using ASCII, alphanumeric, and hyphenated text, limiting the length of each keyword and the number of keywords provided.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_12\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nkeywords = [\"account\", \"wallet\", \"erc-20\"]\n\n```\n\n----------------------------------------\n\nTITLE: Adding development dependency via `scarb add --dev` (Shell)\nDESCRIPTION: Uses the `scarb add` command with the `--dev` flag to add a dependency specifically to the `[dev-dependencies]` section of the `Scarb.toml` file. This command provides a command-line method for managing development-only dependencies, similar to adding regular dependencies with `scarb add`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/dependencies.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nscarb add --dev openzeppelin_merkle_tree@0.17.0\n```\n\n----------------------------------------\n\nTITLE: Install Specific Scarb Version via asdf (Shell)\nDESCRIPTION: Install a particular version of Scarb using asdf on macOS or Linux, replacing `{{ rel.sampleVersion }}` with the specific version string you wish to install. This snippet uses templating from the source file to insert the version.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nasdf install scarb {{ rel.sampleVersion }}\n```\n\n----------------------------------------\n\nTITLE: Normalized Scarb.toml Dependency Specification\nDESCRIPTION: This TOML snippet illustrates how a dependency declaration is simplified during the `Scarb.toml` normalization process for tarball creation. Non-registry source properties, like `path`, are removed, leaving only essential information like the version for registry use.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/registries/package-tarball.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies.foobar]\nversion = \"1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Preventing package from publishing - TOML\nDESCRIPTION: This snippet demonstrates how to prevent a Scarb package from being published by setting the `publish` field to `false` in the `Scarb.toml` manifest file. This configuration ensures that the package cannot be accidentally published to any registry.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/registries/publishing.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[package]\npublish = false\n```\n\n----------------------------------------\n\nTITLE: Scarb Manifest File for Macro Package\nDESCRIPTION: This TOML snippet is a Scarb manifest (`Scarb.toml`) for a procedural macro package. It defines the package name, version, and specifies `cairo-plugin` as the target type. This indicates that the package is a procedural macro and does not contain standard Cairo code.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/procedural-macro.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n# Scarb.toml\n[package]\nname = \"some_macro\"\nversion = \"0.1.0\"\n\n[cairo-plugin]\n```\n\n----------------------------------------\n\nTITLE: Publishing package using API token - Shell\nDESCRIPTION: This command demonstrates how to publish a Scarb package to the default registry using an API token for authentication. The token is passed via the `SCARB_REGISTRY_AUTH_TOKEN` environment variable. Ensure that the token has the `publish` scope.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/registries/publishing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSCARB_REGISTRY_AUTH_TOKEN=scrb_mytoken scarb publish\n```\n\n----------------------------------------\n\nTITLE: Scarb Manifest File Example\nDESCRIPTION: This TOML snippet demonstrates a Scarb manifest file (`Scarb.toml`) that declares dependencies on procedural macro packages. It showcases how to include macros like `add-macro`, `tracing-macro`, and `to-value-macro` as dependencies for a Cairo project. The specified version constraints ensure compatibility between the project and the macros.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/procedural-macro.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"hello-macros\"\nversion = \"0.1.0\"\n\n[dependencies]\nadd-macro = \"0.1.0\"\ntracing-macro = \"0.1.0\"\nto-value-macro = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Compiling a Scarb project\nDESCRIPTION: This command compiles the Scarb project. The compiled Sierra code is written to the `target/dev` directory. `scarb clean` removes the `target` directory, and `scarb check` checks for errors without compiling.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscarb build\n```\n\n----------------------------------------\n\nTITLE: Cloning Scarb Package using Git\nDESCRIPTION: This snippet clones a Scarb package repository (alexandria) from GitHub using the `git clone` command.  It then navigates into the package directory using `cd`. The command downloads the source code of the specified repository to the local machine. After that, the `cat Scarb.toml` command could be used to display the Scarb manifest.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/working-on-an-existing-package.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/keep-starknet-strange/alexandria\ncd alexandria\ncat Scarb.toml\n```\n\n----------------------------------------\n\nTITLE: CircleCI Setup for Scarb (YAML)\nDESCRIPTION: This snippet shows a CircleCI workflow for setting up and using Scarb.  It defines a parameter `scarb_version`.  The workflow uses a Docker image, checks out the code, sets up Scarb using a `curl` command to the installation script. It executes `scarb fmt --check` and `scarb build` commands after. The `pipeline.parameters.scarb_version` parameter specifies the Scarb version.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/using-scarb-in-ci.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nversion: 2.1\n\nparameters:\n  scarb_version:\n    type: string\n    default: \"{{ rel.sampleVersion }}\"\n\njobs:\n  check:\n    docker:\n      - image: cimg/base:2023.03\n    steps:\n      - checkout\n      - run:\n          name: Setup Scarb\n          command: |\n            echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >> \"$BASH_ENV\"\n            source \"$BASH_ENV\"\n            curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | bash -s -- -v << pipeline.parameters.scarb_version >>\n      - run: scarb fmt --check\n      - run: scarb build\n\nworkflows:\n  ci:\n    jobs:\n      - check\n```\n\n----------------------------------------\n\nTITLE: Configuring Executable Target in Scarb Manifest - TOML\nDESCRIPTION: This snippet shows the required entries in the `Scarb.toml` manifest to define an executable package for Cairo. Dependencies should include the `cairo_execute` plugin at the specified version. Set `[cairo].enable-gas` to false, as gas metering is not supported for executable targets. The configuration must include an `[executable]` target and package identification details. The expected file is `Scarb.toml`, and version details are templated for runtime insertion.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/creating-executable-package.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"test_execute\"\nversion = \"0.1.0\"\nedition = \"{{ constants.edition }}\"\n\n[[target.executable]]\n\n[cairo]\nenable-gas = false\n\n[dependencies]\ncairo_execute = \"{{ rel.stable.starknetPackageVersionReq }}\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Specific Packages or Workspaces\nDESCRIPTION: Explains how to target specific packages or the entire workspace using command-line arguments, affecting all Cairo files within the specified scope for formatting.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/formatting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nscarb fmt --package <package_name>\n```\n\nLANGUAGE: shell\nCODE:\n```\nscarb fmt --workspace\n```\n\n----------------------------------------\n\nTITLE: Declaring a Registry Dependency (Scarb)\nDESCRIPTION: This snippet demonstrates how to declare a dependency on a package from the default Cairo package registry, `scarbs.xyz`. The `alexandria_math` package with version `0.1.0` is specified.  The dependencies are defined within the `[dependencies]` section of the `Scarb.toml` file.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/specifying-dependencies.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nalexandria_math = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Serializing Circle to Array of felt252 in Cairo\nDESCRIPTION: Declares the serialize function for the CircleSerde implementation that takes a Circle instance and an output reference to an array of felt252. This function converts the Circle's data members into a serialized form appended or stored into the output array. The purpose is to enable efficient storage or transmission of Circle data in a low-level format compatible with Cairo's felt252 type system.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-CircleSerde.md#_snippet_1\n\nLANGUAGE: Cairo\nCODE:\n```\nfn serialize(self: Circle, ref output: Array&lt;felt252&gt;)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Vue Component in Vitepress - JavaScript\nDESCRIPTION: This snippet shows the setup script block used in a Vue 3 single file component within a Vitepress page. It imports the 'Home' Vue component from a local directory and renders it within the page template. The snippet requires Vue 3 compatible tooling and the Vitepress static site generator framework. There are no parameters; the snippet simply includes the component for display. The output is the rendered Home component on the page.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Home from \"./.vitepress/components/Home.vue\";\n```\n\n----------------------------------------\n\nTITLE: Version Requirement with Path Dependency (Scarb)\nDESCRIPTION: This snippet shows how to combine `path` dependencies with version constraints.  Although not strictly related, this example provides a complete usage of `version` and `path` in the same declaration within the `[dependencies]` section of the `Scarb.toml` file.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/specifying-dependencies.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nhello_utils = { version = \"1.0.0\", path = \"hello_utils\" }\n```\n\n----------------------------------------\n\nTITLE: Example Stack Overflow Error Output\nDESCRIPTION: Shows typical error output when a Rust process, like the Cairo compiler invoked by Scarb, exceeds its allocated stack space. This often indicates a need to increase the stack size or signals a potential compiler bug.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/troubleshooting.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nthread 'main' has overflowed its stack\nfatal runtime error: stack overflow\nAborted (core dumped)\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape trait for Circle in Rust\nDESCRIPTION: This snippet likely details the implementation of the Shape trait for a Circle struct, enabling geometric calculations or shape properties. It depends on the definition of the Shape trait and Circle struct, and provides core shape functionalities such as area or perimeter calculations. It expects a Circle data structure and the Shape trait to be defined elsewhere, with inputs being circle parameters and outputs being shape properties.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-impls.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n// Implementation of the Shape trait for the Circle struct\nimpl Shape for Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * self.radius * self.radius\n    }\n    fn perimeter(&self) -> f64 {\n        2.0 * std::f64::consts::PI * self.radius\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Documentation example in TOML\nDESCRIPTION: This TOML snippet shows how to set the `documentation` field within the `[package]` section. This field contains a URL pointing to the documentation website of the package, enabling users to access detailed information about the crate's features and usage.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_7\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\ndocumentation = \"https://john.github.io/cairo-package\"\n```\n\n----------------------------------------\n\nTITLE: Merging Tool Metadata with Merge Strategy in Scarb (TOML)\nDESCRIPTION: This example shows how to use the 'merge-strategy' property set to 'merge' to combine the tool's base configuration with profile-specific overrides. Both sections must be present in the manifest for correct operation. The primary key 'merge-strategy' determines that 'debug' is set to 'true' while keeping 'local' from the base config. Inputs and outputs are TOML tables reflecting the merged properties upon build.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/profiles.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.some-tool]\nlocal = false\ndebug = false\n\n[profile.dev.tool.some-tool]\nmerge-strategy = \"merge\"\ndebug = true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring multiple executable targets with different entry points\nDESCRIPTION: Configuration for defining multiple executable targets, each with a different main function specified by the function property.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/targets.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[executable]\nfunction = \"hello_world::main\"\n\n[[target.executable]]\nname = \"secondary\"\nfunction = \"hello_world::secondary\"\n\n```\n\n----------------------------------------\n\nTITLE: Declaring the FOO Constant in Cairo\nDESCRIPTION: This Cairo code snippet declares a constant named `FOO`. It assigns the type `u32` (unsigned 32-bit integer) to the constant and initializes it with the immutable value `42`. This constant can be referenced elsewhere in the Cairo code.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-FOO.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nconst FOO: u32 = 42;\n```\n\n----------------------------------------\n\nTITLE: Implementing CircleSerde Trait for Circle in Cairo\nDESCRIPTION: Defines an implementation of the Serde trait specifically for the Circle type, enabling serialization and deserialization functionalities. This implementation provides the foundation for converting Circle objects to and from a serialized representation using felt252 as the underlying data type.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-CircleSerde.md#_snippet_0\n\nLANGUAGE: Cairo\nCODE:\n```\nimpl CircleSerde of Serde&lt;<a href=\"hello_world-Circle.html\">Circle</a>&gt;;\n```\n\n----------------------------------------\n\nTITLE: Using Starknet Foundry as Test Runner in Scarb TOML Configuration\nDESCRIPTION: This snippet shows how to configure Scarb to use Starknet Foundry's `snforge` as the test runner instead of the default Cairo test runner. It updates the `[scripts]` section in Scarb.toml by specifying `test = \"snforge test\"`. This setup requires prior installation and configuration of Starknet Foundry in the project. It enables advanced testing features for Starknet contracts, including fuzz testing and state management.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/testing.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[scripts]  test = \"snforge test\"\n```\n\n----------------------------------------\n\nTITLE: Using `scarb fmt --check` for CI Format Verification\nDESCRIPTION: Shows how to verify existing Cairo file formatting without modifying files, which is useful for continuous integration workflows to enforce formatting standards.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/formatting.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscarb fmt --check\n```\n\n----------------------------------------\n\nTITLE: Defining Constant FOO in Rust\nDESCRIPTION: This snippet defines an unsigned 32-bit integer constant named `FOO` and assigns it the value 42. This constant can be accessed via the fully qualified path `hello_world::FOO`. It serves as a simple, fixed value within the module.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-FOO.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nconst FOO: u32 = 42;\n```\n\n----------------------------------------\n\nTITLE: Defining the Shape Trait in Cairo\nDESCRIPTION: Defines the Shape trait for objects to implement an area method. It requires implementing the area function that returns a u32 value representing the shape's area. This trait serves as a common interface for shape objects.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-Shape.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\ntrait Shape&lt;T&gt;\n```\n\n----------------------------------------\n\nTITLE: Building Scarb Package with scarb build\nDESCRIPTION: This snippet demonstrates how to build a Scarb package using the `scarb build` command. The command compiles the package and all its dependencies.  The output shows the compilation progress, including each package and its version. The expected output is a set of compiled target files in the target directory.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/working-on-an-existing-package.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ scarb build\n   Compiling alexandria_ascii v0.1.0 (/path/to/package/alexandria/src/ascii/Scarb.toml)\n   Compiling alexandria_data_structures v0.1.0 (/path/to/package/alexandria/src/data_structures/Scarb.toml)\n   Compiling alexandria_encoding v0.1.0 (/path/to/package/alexandria/src/encoding/Scarb.toml)\n   Compiling alexandria_linalg v0.1.0 (/path/to/package/alexandria/src/linalg/Scarb.toml)\n   Compiling alexandria_math v0.2.0 (/path/to/package/alexandria/src/math/Scarb.toml)\n   Compiling alexandria_numeric v0.1.0 (/path/to/package/alexandria/src/numeric/Scarb.toml)\n   Compiling alexandria_searching v0.1.0 (/path/to/package/alexandria/src/searching/Scarb.toml)\n   Compiling alexandria_sorting v0.1.0 (/path/to/package/alexandria/src/sorting/Scarb.toml)\n   Compiling alexandria_storage v0.2.0 (/path/to/package/alexandria/src/storage/Scarb.toml)\n    Finished `dev` profile target(s) in 5 seconds\n```\n\n----------------------------------------\n\nTITLE: Overriding Tool Metadata for a Profile in Scarb (TOML)\nDESCRIPTION: This snippet defines default tool metadata in the '[tool.some-tool]' section and overrides the 'debug' property for the 'dev' profile by setting it to 'true'. Scarb.toml must include both sections for correct behavior. Inputs are TOML key-value pairs: 'local' and 'debug'. The resulting configuration replaces the tool subsection with the profile's version during build.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/profiles.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.some-tool]\nlocal = false\ndebug = false\n\n[profile.dev.tool.some-tool]\ndebug = true\n\n```\n\n----------------------------------------\n\nTITLE: Executing the Cairo Project with Scarb - Shell Command\nDESCRIPTION: This command demonstrates how to execute the main entry-point of a Cairo project using the Scarb package manager. It invokes the package named `test_execute`, prints the program's output, and provides an argument ('5') to the executable function. Required prerequisites include a compiled Scarb project with a valid executable entry-point. The output will be saved to the corresponding directory as per Scarb's documentation. Input arguments must match the main function signature.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/creating-executable-package.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nscarb execute -p test_execute --print-program-output --arguments 5\n```\n\n----------------------------------------\n\nTITLE: Package edition example in TOML\nDESCRIPTION: This TOML snippet demonstrates how to use the `edition` field within the `[package]` section of a `Scarb.toml` file.  The `edition` field is set to a value pulled from the `constants.edition` variable, which will indicate the Cairo edition used for compilation. This is an example of using a variable or some kind of templating within TOML.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nedition = \"{{ constants.edition }}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PartialEq trait for Circle in Rust\nDESCRIPTION: This snippet enables the comparison of two Circle instances for equality, based on their attributes like radius. It requires the implementation of the PartialEq trait and the Circle struct with comparable fields. Inputs are two Circle objects, and the output indicates whether they are equal or not according to the defined criteria.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-impls.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n// Implementing equality comparison for Circle\nimpl PartialEq for Circle {\n    fn eq(&self, other: &Self) -> bool {\n        self.radius == other.radius\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing CircleSerde Trait in Cairo\nDESCRIPTION: Defines the implementation of the Serde trait for the Circle type, enabling serialization and deserialization capabilities specific to Circle geometry objects within Cairo smart contracts. It sets the foundation for converting Circle instances to a serialized format and vice versa.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-CircleSerde.md#_snippet_0\n\nLANGUAGE: Cairo\nCODE:\n```\nimpl CircleSerde of Serde&lt;Circle&gt;;\n```\n\n----------------------------------------\n\nTITLE: ShapePair type alias in Cairo for grouping two shapes\nDESCRIPTION: Defines a type alias 'ShapePair' representing a pair of shape objects. This facilitates working with tuples or pairs of shapes, enabling operations involving two shapes simultaneously. The alias enhances code clarity and type safety.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-Shape.md#_snippet_3\n\nLANGUAGE: cairo\nCODE:\n```\ntype ShapePair;\n```\n\n----------------------------------------\n\nTITLE: Defining Equality Function eq for Circle in Cairo\nDESCRIPTION: Defines the eq function that compares two Circle instances, lhs and rhs, and returns a boolean indicating whether they are equal. This function is part of the CirclePartialEq implementation of PartialEq. The function accepts two parameters of type Circle and returns true if they are considered equal according to the implemented logic, otherwise false.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-CirclePartialEq.md#_snippet_1\n\nLANGUAGE: Cairo\nCODE:\n```\nfn eq(lhs: Circle, rhs: Circle) -&gt; bool\n```\n\n----------------------------------------\n\nTITLE: Overriding Nested Tool Sub-Tables in Scarb Profiles (TOML)\nDESCRIPTION: This snippet demonstrates how to override properties within a nested sub-table (e.g., '[tool.some-tool.environment]') using a profile-specific section '[profile.dev.tool.some-tool.environment]'. Both sections must exist in the manifest for the override to occur. Inputs are key-value pairs under each table; the output is a TOML config where only the 'debug' property from the profile remains in the resulting sub-table after build.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/profiles.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.some-tool]\ntop-level-key = \"top-level-value\"\n\n[tool.some-tool.environment]\nlocal = false\ndebug = false\n\n[profile.dev.tool.some-tool.environment]\ndebug = true\n\n```\n\n----------------------------------------\n\nTITLE: Include example in TOML\nDESCRIPTION: This TOML snippet illustrates the use of the `include` field within the `[package]` section. It specifies files and subdirectories to be included in the package tarball when using the `scarb package` command. The `include` field overrides ignore rules specified by `.gitignore` or `.scarbignore`, ensuring specific files are included in a published package.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\ninclude = [\"target/some/file.txt\"]\n```\n\n----------------------------------------\n\nTITLE: Example Starknet artifacts metadata JSON structure\nDESCRIPTION: Shows the JSON structure of the version 1 `.starknet_artifacts.json` file generated by the `starknet-contract` target. This file records metadata for compiled contracts including unique IDs, package and contract names, module paths, and paths to generated Sierra and CASM contract class JSON files. It serves as a machine-readable manifest of build outputs.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/starknet/contract-target.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 1,\n  \"contracts\": [\n    {\n      \"id\": \"<opaque>\",\n      \"package_name\": \"mypackage\",\n      \"contract_name\": \"Contract2\",\n      \"module_path\": \"mypackage::path::to::module::Contract2\",\n      \"artifacts\": {\n        \"sierra\": \"mypackage_Contract2.contract_class.json\",\n        \"casm\": null\n      }\n    },\n    {\n      \"id\": \"<opaque>\",\n      \"package_name\": \"mypackage\",\n      \"contract_name\": \"Contract1\",\n      \"module_path\": \"mypackage::Contract1\",\n      \"artifacts\": {\n        \"sierra\": \"mypackage_Contract1.contract_class.json\",\n        \"casm\": null\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PartialEq Interface for Circle in Cairo\nDESCRIPTION: Defines an implementation of the PartialEq interface for the Circle struct in Cairo, enabling structural equality checks. This requires the Circle struct and the PartialEq trait to be defined prior. It establishes that Circle conforms to the PartialEq interface, supporting equality operations within the Cairo environment.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-CirclePartialEq.md#_snippet_0\n\nLANGUAGE: Cairo\nCODE:\n```\nimpl CirclePartialEq of PartialEq&lt;Circle&gt;;\n```\n\n----------------------------------------\n\nTITLE: Defining Cairo Test Function\nDESCRIPTION: This Cairo code snippet defines a test function named `it_works`. This function likely serves to validate the correct operation of other components in the same Cairo project. The function has no parameters and presumably executes some internal operations to be tested. It's part of a testing framework within a Scarb project.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-tests-it_works.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn it_works()\n```\n\n----------------------------------------\n\nTITLE: Implementing CircleDrop Trait for Circle in Cairo\nDESCRIPTION: Implements the CircleDrop trait for the Circle type using Cairo syntax, linking CircleDrop with Circle to define custom drop or cleanup functionality. The snippet requires the Circle type definition and the Drop trait, specifically parametrized by Circle. Input is Circle instances, and output defines behavior on resource release or destruction related to Circle. No additional constraints are visible in this short snippet.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-CircleDrop.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nimpl CircleDrop of Drop&lt;<a href=\"hello_world-Circle.html\">Circle</a>&gt;;\n```\n\n----------------------------------------\n\nTITLE: Implementing area Function in Cairo\nDESCRIPTION: This code snippet implements the `area` function for the `Circle` structure. It takes a `Circle` as input (`self: Circle`) and is expected to return a `u32` representing the area of the circle.  The implementation details of the `area` function are not provided here; it's a function signature.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-CircleShape.md#_snippet_2\n\nLANGUAGE: cairo\nCODE:\n```\nfn area(self: <a href=\"hello_world-Circle.html\">Circle</a>) -> u32\n```\n\n----------------------------------------\n\nTITLE: Consuming Auxiliary Data in Cairo\nDESCRIPTION: This snippet demonstrates how a post-process callback can consume the `AuxData` emitted by a procedural macro. The callback retrieves the auxiliary data, deserializes it from JSON, and uses it. This part of the post-processing will be executed as the last step of the project build after Cairo code is compiled.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/procedural-macro.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#[post_process]\npub fn callback(context: PostProcessContext) {\n    let aux_data = context.aux_data.into_iter()\n        .map(|aux_data| {\n            let value: Vec<u8> = aux_data.into();\n            let aux_data: SomeMacroDataFormat = serde_json::from_slice(&value).unwrap();\n            aux_data\n        })\n        .collect::<Vec<_>>();\n    println!(\"{:?}\", aux_data);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Git dependency via scarb add\nDESCRIPTION: This command adds a dependency hosted on a Git repository to the `Scarb.toml` file using the `scarb add` command. Specify the Git URL using the `--git` flag.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nscarb add alexandria_math --git https://github.com/keep-starknet-strange/alexandria.git\n```\n\n----------------------------------------\n\nTITLE: Shape Constant Declaration in Rust\nDESCRIPTION: Declares a constant `SHAPE_CONST` of type `felt252` within the `Shape` trait. This constant is associated with the shape type. The fully qualified path for this constant is `hello_world::Shape::SHAPE_CONST`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-Shape.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nconst SHAPE_CONST: felt252;\n```\n\n----------------------------------------\n\nTITLE: Merging Nested Tool Sub-Tables with Merge Strategy in Scarb (TOML)\nDESCRIPTION: This advanced configuration illustrates merging both the top-level tool table and its nested sub-table using 'merge-strategy = \"merge\"' in the profile sections. Requires the base and profile versions of each sub-table to be defined. Each section uses the merge strategy to combine properties, so values like 'top-level-key', 'local', and 'debug' persist as configured. Output is a TOML manifest with merged sections as specified.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/profiles.md#_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.some-tool]\ntop-level-key = \"top-level-value\"\n\n[tool.some-tool.environment]\nlocal = false\ndebug = false\n\n[profile.dev.tool.some-tool]\nmerge-strategy = \"merge\"\n\n[profile.dev.tool.some-tool.environment]\nmerge-strategy = \"merge\"\ndebug = true\n\n```\n\n----------------------------------------\n\nTITLE: Declaring a Git Repository Dependency with Branch (Scarb)\nDESCRIPTION: This snippet demonstrates how to specify a specific branch for a Git repository dependency. The `branch` key is used to fetch a specific branch from the Git repository. This allows referencing a specific commit in the specified branch.  The dependencies are defined within the `[dependencies]` section of the `Scarb.toml` file.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/specifying-dependencies.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nalexandria_math = { git = \"https://github.com/keep-starknet-strange/alexandria.git\", branch = \"next\" }\n```\n\n----------------------------------------\n\nTITLE: Specifying Git Dependency in Scarb.toml Manifest (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to declare a dependency that points to a Git repository and branch in a Scarb.toml manifest file. It allows specifying a package dependency that will track the 'next' branch of a remote repository. This declaration does not lock the dependency to a specific commit, hence the need for a lockfile to ensure reproducible builds. Inputs consist of package name and git URL with branch; no additional outputs are expected from this snippet alone.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/lockfile.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nalexandria_math = { git = \"https://github.com/keep-starknet-strange/alexandria.git\", branch = \"next\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Circle Struct with Radius in Cairo\nDESCRIPTION: Defines a `Circle` struct with a single member `radius` of type `u32`. It derives the `Drop`, `Serde`, and `PartialEq` traits, enabling memory management, serialization/deserialization, and equality comparisons respectively. This struct represents a circle and its radius.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-Circle.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\n#[derive(Drop, Serde, PartialEq)]\nstruct Circle {\n    radius: u32,\n}\n```\n\n----------------------------------------\n\nTITLE: Use Scarb via Nix Shell (Shell)\nDESCRIPTION: Use the Nix package manager to enter a temporary shell environment that includes Scarb. This command leverages the community-maintained `cairo-nix` overlay on NixOS or systems with Nix installed to provide a ready-to-use Scarb binary.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnix shell github:cairo-nix/cairo-nix\n```\n\n----------------------------------------\n\nTITLE: Adding a local path dependency in Scarb.toml\nDESCRIPTION: This example shows how to add a dependency located in a local path to the `Scarb.toml` file. Specify the path to the dependency.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nalexandria_math = { path = \"../path-to-alexandria-checkout/alexandria\" }\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Test Runners Sequentially from Scarb TOML Scripts\nDESCRIPTION: This snippet details how to run multiple test runners in sequence by chaining commands in the `test` script inside Scarb.toml. It runs the default Cairo test runner (`scarb cairo-test`) followed by the `pytest` test runner by joining them with `&&` operator. This allows combining native Cairo tests with other testing tools seamlessly through a single `scarb test` invocation.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/testing.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[scripts]  test = \"scarb cairo-test && pytest\"\n```\n\n----------------------------------------\n\nTITLE: ShapePair Type Alias in Rust\nDESCRIPTION: Defines a type alias `ShapePair` within the `Shape` trait. This type alias likely represents a pair of shapes, though the exact type is not specified in the given snippet.  The fully qualified path for this type alias is `hello_world::Shape::ShapePair`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-Shape.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ntype ShapePair;\n```\n\n----------------------------------------\n\nTITLE: Serialize Function for CircleSerde in Rust\nDESCRIPTION: This function serializes a Circle object into a byte array of felt252 elements. It takes the Circle instance and a mutable reference to an output array where the serialized data is stored. The function is used for data persistence or transmission processes that require converting complex data structures into a byte stream.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-CircleSerde.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nfn serialize(self: Circle, ref output: Array&lt;felt252&gt;)\n```\n\n----------------------------------------\n\nTITLE: Creating Type Alias for a Pair of Circles in Rust\nDESCRIPTION: This snippet introduces a type alias ShapePair that represents a tuple containing two Circle instances. This improves code readability and type safety when working with pairs of circles. Prerequisite: Circle type must be defined. Useful in functions or structures that operate on two circles simultaneously.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-CircleShape.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ntype ShapePair = (Circle, Circle);\n```\n\n----------------------------------------\n\nTITLE: Running Pre-Contribution Checks in Rust\nDESCRIPTION: Executes standard Rust development checks required before submitting a contribution. `cargo fmt` ensures code formatting consistency, `cargo clippy` performs static analysis for potential issues and style improvements, and `cargo test` runs the project's automated test suite. Passing these checks is mandatory for a pull request to be considered for merging.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo fmt\ncargo clippy\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Disabling gas calculation for executable targets\nDESCRIPTION: Configuration to disable Cairo gas calculation for executable targets, which is recommended for non-contract packages.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/targets.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[cairo]\nenable-gas = false\n\n```\n\n----------------------------------------\n\nTITLE: Importing data in Vue 3 script setup syntax\nDESCRIPTION: Demonstrates how to import a named export `data` as `rel` from a relative path in the Vue 3 `<script setup>` context, enabling access to external data within the component.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/starknet/contract-target.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { data as rel } from \"../../../github.data\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Type Alias for Pair of Shapes in Cairo\nDESCRIPTION: Defines ShapePair as a type alias representing a tuple or pair of shape objects. This facilitates handling multiple shapes collectively, such as in composite structures or algorithms requiring shape pairs.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-Shape.md#_snippet_3\n\nLANGUAGE: cairo\nCODE:\n```\ntype ShapePair;\n```\n\n----------------------------------------\n\nTITLE: Example of Accessing Help for Scarb Build Command\nDESCRIPTION: Shows a specific example of how to access help information for the 'build' command in Scarb. This displays detailed information about the build command and its available options.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nscarb build --help\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for Specific Scarb Commands\nDESCRIPTION: Demonstrates how to get detailed help information for a specific Scarb command. This pattern works for any command in Scarb's CLI interface.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nscarb COMMAND --help\n```\n\n----------------------------------------\n\nTITLE: Blue Variant of Color Enum in Cairo\nDESCRIPTION: This snippet defines the 'Blue' variant of the Color enum, representing the blue color. It includes a documentation path and serves as a constant within the enum. The purpose is to implement a complete set of color variants in Cairo, enabling color selection via enum variants.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-Color.md#_snippet_3\n\nLANGUAGE: cairo\nCODE:\n```\nBlue\n```\n\n----------------------------------------\n\nTITLE: Configuring sierra-replace-ids in Scarb Cairo Compiler - TOML\nDESCRIPTION: Demonstrates how to explicitly set the sierra-replace-ids flag in the [cairo] section of Scarb.toml, to control whether generated Sierra code uses dummy names for identifiers. No dependencies are required except Scarb; this option only affects how Sierra names are generated and has no effect when the package is a dependency. Accepts boolean values and defaults to false.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_16\n\nLANGUAGE: TOML\nCODE:\n```\n[cairo]\nsierra-replace-ids = false\n\n```\n\n----------------------------------------\n\nTITLE: Cairo Source File Example\nDESCRIPTION: This Cairo code snippet illustrates how to use procedural macros within a Cairo source file. It demonstrates the usage of `#[derive(ToValue)]`, `#[instrument]`, and `add!` macros. The code defines a struct `Input`, a function `main`, and calls macros to perform operations on `Input` instances.  It depends on the macros defined in the dependencies section of the Scarb manifest.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/procedural-macro.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\n#[derive(ToValue)]\nstruct Input {\n    value: felt252,\n}\n\n#[instrument]\nfn main() -> felt252 {\n    let a = Input { value: 1 };\n    let b = Input { value: 2 };\n    add!(a.to_value(), b.to_value());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an executable entry point with the #[executable] attribute\nDESCRIPTION: Example of how to mark a function as the entry point for an executable target using the #[executable] attribute.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/targets.md#_snippet_5\n\nLANGUAGE: cairo\nCODE:\n```\n#[executable]\nfn main() {\n    // Your code goes here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Radius Member Definition in Cairo\nDESCRIPTION: Defines the `radius` member of the `Circle` struct as an unsigned 32-bit integer (`u32`). This member represents the radius of the circle and is a fundamental property of the `Circle` struct. No dependencies or external libraries are explicitly required.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-Circle.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nradius: u32\n```\n\n----------------------------------------\n\nTITLE: Integrating Local Cairo Compiler Changes with Scarb\nDESCRIPTION: Executes a custom Scarb task (`xtask`) to modify the project's `Cargo.toml`. This command updates the Cairo compiler dependency to use a local development version located at the specified path (`../path/to/cairo`). It's used for testing Scarb's integration with modified or unreleased Cairo compiler versions.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo xtask upgrade cairo --path ../path/to/cairo\n```\n\n----------------------------------------\n\nTITLE: Overriding Scarb Test Runner with Custom Command in TOML\nDESCRIPTION: This snippet demonstrates how to override the default Scarb test runner by specifying a custom test command inside the Scarb.toml configuration file. By adding a `test` script in the `[scripts]` section, developers can replace the default behavior of `scarb test` with any desired test execution command. This feature requires a valid Scarb.toml manifest and is intended to facilitate custom or third-party test frameworks.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/testing.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[scripts]  test = \"command-to-run-tests\"\n```\n\n----------------------------------------\n\nTITLE: Using built-in allow-list for Starknet libfuncs validation with TOML\nDESCRIPTION: Example snippet showing how to configure the `starknet-contract` target to use a built-in allowlist named `experimental` for allowed libfuncs validation to control which libfuncs are permitted in contract code during compilation.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/starknet/contract-target.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[target.starknet-contract]]\nallowed-libfuncs-list.name = \"experimental\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Fibonacci Function in Rust\nDESCRIPTION: A function declaration for calculating the nth Fibonacci number. The function takes a mutable unsigned 32-bit integer parameter and returns an unsigned 32-bit integer result.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-mdbook/tests/data/hello_world/input/src/hello_world-fib.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn fib(mut n: u32) -> u32\n```\n\n----------------------------------------\n\nTITLE: Defining the main function in Cairo for binary execution\nDESCRIPTION: This snippet declares the 'main' function in Cairo, serving as the entry point for the binary executable. It is essential for running the program and tying together different modules or packages. Dependencies are implied through project structure, with no parameters or return values specified.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_no_features/src/hello_world_sub_package-main.md#_snippet_0\n\nLANGUAGE: Cairo\nCODE:\n```\nfn main()\n```\n\n----------------------------------------\n\nTITLE: Listing Available Scripts Using scarb run with Shell Output\nDESCRIPTION: This snippet shows the output from listing available scripts in a Scarb project by running the `scarb run` command in the shell. It lists all defined scripts along with their commands, aiding discovery of runnable tasks defined in Scarb.toml.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/scripts.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ scarb run\nScripts available via `scarb run`:\nbar                 : echo 'World!'\nfoo                 : echo 'Hello'\n```\n\n----------------------------------------\n\nTITLE: Defining custom scripts in 'Scarb.toml' using TOML syntax\nDESCRIPTION: This snippet demonstrates how to specify custom scripts in the 'Scarb.toml' configuration file for use with the 'scarb run' command. It shows the basic syntax for defining a 'scripts' table with command key-value pairs, allowing users to automate tasks such as echoing messages.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/defining-custom-scripts.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[scripts]\nfoo = \"echo 'Hello, world!'\"\n```\n\n----------------------------------------\n\nTITLE: Running Scarb Lint Including Test Code Analysis in Shell\nDESCRIPTION: This snippet shows how to run Scarb lint on the project including the analysis of test code, specifically Cairo code under `#[cfg(test)]` attributes, by using the `--test` option. This allows developers to ensure test code quality alongside the main codebase. It requires understanding that additional code is analyzed and might produce more lint output. This command helps maintain consistency and quality in testing modules.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/linter.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nscarb lint --test\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for Tuple in Rust\nDESCRIPTION: This code snippet creates a type alias called Pair for a tuple that holds two u32 values. It requires the Rust programming language and no additional dependencies. The Pair alias improves readability by replacing the generic tuple syntax (u32, u32) with a named type, making it clear that the data represents a pair of unsigned 32-bit integers. There are no configurable parameters, and inputs/outputs are determined by usage context where Pair is referenced.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-Pair.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ntype Pair = (u32, u32);\n```\n\n----------------------------------------\n\nTITLE: Main Binary Entrypoint in Cairo\nDESCRIPTION: Specifies the main function which serves as the entrypoint when the Cairo sub-package is executed as a binary. This function is the starting point for program execution, making calls to other functions such as test. It expects no input parameters and typically does not return a value, orchestrating the primary flow within the sub-package context.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_no_features/src/hello_world_sub_package.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Example Undefined Symbol Error Output\nDESCRIPTION: Illustrates an 'undefined symbol' error that can occur during Scarb builds involving procedural macros. This type of error suggests linking issues, potentially resolvable by using specific `RUSTFLAGS` like `-C link-dead-code` or `-C link-args=-znostart-stop-gc`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/troubleshooting.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nundefined symbol: __start_linkm2_MACRO_DEFINITIONS_SLICE\n```\n\n----------------------------------------\n\nTITLE: Verify Windows Manual Installation (Shell)\nDESCRIPTION: After manually installing Scarb on Windows and adding its `bin` directory to the system's PATH, open a new terminal session and run this command. It should print the Scarb and Cairo language versions, confirming the installation and PATH configuration.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nscarb --version\n```\n\n----------------------------------------\n\nTITLE: Sample Cairo Source Code for Fibonacci Function\nDESCRIPTION: A Cairo source code snippet defining a recursive Fibonacci function, demonstrating functional programming in Cairo. This file is the main source file for the Cairo package, used to generate Sierra code upon compilation.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/creating-a-new-package.md#_snippet_2\n\nLANGUAGE: Cairo\nCODE:\n```\nfn fib(a: felt252, b: felt252, n: felt252) -> felt252 {\n    match n {\n        0 => a,\n        _ => fib(b, a + b, n - 1),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring panic-backtrace in Scarb Cairo Compiler - TOML\nDESCRIPTION: Shows how to disable panic-backtrace in the [cairo] section of Scarb.toml, which determines if panic backtrace code is included. Typically set to false, especially for Starknet targets. No extra dependencies; accepts boolean values.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_21\n\nLANGUAGE: TOML\nCODE:\n```\n[cairo]\npanic-backtrace = false\n\n```\n\n----------------------------------------\n\nTITLE: Enabling unstable-add-statements-functions-debug-info in Scarb - TOML\nDESCRIPTION: Demonstrates how to set the unstable-add-statements-functions-debug-info flag in the [cairo] section, enabling experimental mapping from Sierra statement indices to involved Cairo function call paths. For use by tools like cairo-profiler and forge. Default is false; enabling increases compilation time, memory, and artifact size.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_22\n\nLANGUAGE: TOML\nCODE:\n```\n[cairo]\nunstable-add-statements-functions-debug-info = false\n\n```\n\n----------------------------------------\n\nTITLE: Defining Trait Uganda Cairo\nDESCRIPTION: Defines the generic Cairo trait named `Uganda`, parameterized by type `T`. Traits are used to define shared behavior that can be implemented by different types.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Uganda.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\ntrait Uganda<T>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Profile in Scarb (TOML)\nDESCRIPTION: This minimalistic snippet defines a custom profile called 'my-profile' by introducing a new '[profile.my-profile]' section in the Scarb.toml file. There are no required properties for an empty custom profile, but further configuration may be added within this section. Input and output are the TOML definition of the custom profile.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/profiles.md#_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n[profile.my-profile]\n\n```\n\n----------------------------------------\n\nTITLE: Removing package dependency via `scarb rm` command (Shell)\nDESCRIPTION: Executes the `scarb rm` (or `scarb remove`) command in the shell to automatically remove a dependency entry from the project's `Scarb.toml` file. The command takes the package name as an argument. This provides a convenient command-line interface for removing previously added dependencies without manual file editing.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/dependencies.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nscarb rm openzeppelin_merkle_tree\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with Scarb (Default)\nDESCRIPTION: Executes the `scarb doc` command in the project root to generate documentation based on Cairo source code comments. By default, it produces Markdown output suitable for mdBook in the `/target/doc/<PACKAGE-NAME>` directory.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/documentation-generation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nscarb doc\n```\n\n----------------------------------------\n\nTITLE: Printing a Test Message in Cairo\nDESCRIPTION: Defines a function named test that prints the string \"test\" followed by a newline to standard output. This function demonstrates basic output capabilities in Cairo and can be invoked within other functions, such as main. It requires the Cairo runtime environment for execution. The function does not take any parameters and does not return a value.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_no_features/src/hello_world_sub_package.md#_snippet_0\n\nLANGUAGE: Cairo\nCODE:\n```\nfn main() {\n    test();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Trait Function rwanda Cairo\nDESCRIPTION: Declares a function named `rwanda` within the `Uganda` trait. It is a generic function parameterized by `T` (appears duplicated in signature) that takes `self` of type `T` and returns a `u32`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Uganda.md#_snippet_4\n\nLANGUAGE: cairo\nCODE:\n```\nfn rwanda<T, T>(self: T) -> u32\n```\n\n----------------------------------------\n\nTITLE: Example of declaring dependencies on procedural macro packages in Scarb manifest\nDESCRIPTION: This code snippet shows how a Cairo project's Scarb manifest declares dependencies on external procedural macro packages, which are used within Cairo source code to enhance functionality via macros. The dependencies are specified in the `[dependencies]` section, referencing macro packages like `add-macro`, `tracing-macro`, and `to_value-macro`. These dependencies enable macro functionality in the Cairo code without requiring the user to have Rust knowledge.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/design/01-proc-macro.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nname = \"hello-macros\"\nversion = \"0.1.0\"\n\n[dependencies]\nadd-macro = \"0.1.0\"\ntracing-macro = \"0.1.0\"\nto-value-macro = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Registry Dependency (Scarb)\nDESCRIPTION: This snippet defines a dependency on a package from a custom, non-official registry.  It specifies the `registry` url address along with the `version` requirement. The dependencies are defined within the `[dependencies]` section of the `Scarb.toml` file.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/specifying-dependencies.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nalexandria_math = { registry = \"https://example.com/\", version = \"0.1.0\" }\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Documentation with Scarb\nDESCRIPTION: Executes the `scarb doc` command with the `--output-format json` flag to generate documentation as a single JSON file instead of the default Markdown format. The output JSON file is placed in the target directory.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/documentation-generation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nscarb doc --output-format json\n```\n\n----------------------------------------\n\nTITLE: Constant for Shape Type Identifier in Cairo\nDESCRIPTION: Declares a constant SHAPE_CONST that uniquely identifies the shape type. This constant is used to differentiate shape objects within the system or for type checking purposes.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-Shape.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nconst SHAPE_CONST: felt252;\n```\n\n----------------------------------------\n\nTITLE: Printing a Message in Cairo\nDESCRIPTION: Defines a function named test() which prints the string \"test\" to the standard output with a newline character. It is designed to show a basic output operation in Cairo. The snippet includes usage by calling this function inside the main function. There are no special dependencies beyond the Cairo language environment.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-test.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn test()\n```\n\nLANGUAGE: cairo\nCODE:\n```\n    fn main() {\n        test();\n    }\n```\n\n----------------------------------------\n\nTITLE: Available Formatting Configuration Options\nDESCRIPTION: Lists the configurable formatter options: `sort-module-level-items` to reorder import statements, `max-line-length` to set line width, and `tab-size` for indentation, along with their default values.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/formatting.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Deserializing felt252 Span into Circle Instance in Cairo\nDESCRIPTION: Defines a deserialize function that accepts a reference to a Span of felt252 elements representing serialized Circle data and attempts to reconstruct the original Circle instance. It returns an Option wrapping the Circle, signaling success or failure of deserialization. This function enables rebuilding complex data structures from serialized low-level representations.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-CircleSerde.md#_snippet_2\n\nLANGUAGE: Cairo\nCODE:\n```\nfn deserialize(ref serialized: Span&lt;felt252&gt;) -&gt; Option&lt;Circle&gt;\n```\n\n----------------------------------------\n\nTITLE: Calculating nth Fibonacci Number - Cairo\nDESCRIPTION: This Cairo function `fib` calculates the nth Fibonacci number.  It accepts an unsigned 32-bit integer `n` as input, representing the desired Fibonacci number's index. The function then returns the calculated Fibonacci number, also as an unsigned 32-bit integer.  There are no specific dependencies required for this implementation.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-fib.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn fib(mut n: u32) -> u32\n```\n\n----------------------------------------\n\nTITLE: Building Scarb Project\nDESCRIPTION: This command compiles the Scarb project, creating the necessary build artifacts. It ensures that the Cairo code is correctly translated into executable form. No specific dependencies are mentioned, but a valid Scarb project setup is expected.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/examples/hello_world/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nscarb build\n```\n\n----------------------------------------\n\nTITLE: Rust Example: Parsing Token Streams\nDESCRIPTION: This Rust code snippet shows how to parse Cairo code using the `cairo-lang-parser` crate within a procedural macro. It uses `SimpleParserDatabase` to parse a `TokenStream`, demonstrating both retrieving the parsed node with diagnostics and retrieving the parsed node only. It depends on `cairo_lang_macro` and `cairo_lang_parser` crates.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/procedural-macro.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse cairo_lang_macro::{ProcMacroResult, TokenStream, inline_macro};\nuse cairo_lang_parser::utils::SimpleParserDatabase;\n\n#[inline_macro]\npub fn some(token_stream: TokenStream) -> ProcMacroResult {\n    let db = SimpleParserDatabase::default();\n    // To obtain parser diagnostics alongside parsed node.\n    let (parsed_node, diagnostics) = db.parse_virtual_with_diagnostics(token_stream);\n    // To obtain parsed node only, returning any diagnostics as an error.\n    let parsed_node = db.parse_virtual(token_stream).unwrap();\n    (...)\n}\n```\n\n----------------------------------------\n\nTITLE: Experimental Features example in TOML\nDESCRIPTION: This TOML snippet shows the `experimental-features` field inside the `[package]` section. This allows setting experimental flags for the package to be used by the compiler, allowing developers to enable/disable features not yet fully released or stabilized.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_14\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nexperimental-features = [\"negative_impls\"]\n\n```\n\n----------------------------------------\n\nTITLE: Repository example in TOML\nDESCRIPTION: This TOML snippet exemplifies the `repository` field within the `[package]` section. This field specifies the URL to the package's source code repository, such as a GitHub URL. It allows users to easily access the source code.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_10\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nrepository = \"https://github.com/software-mansion/scarb\"\n```\n\n----------------------------------------\n\nTITLE: Generated Cargo.toml for Procedural Macro Compilation\nDESCRIPTION: Example of an automatically generated Cargo manifest file created by Scarb for compiling the procedural macro package, showing the required crate-type and dependencies.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/design/01-proc-macro.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# Code generated by scarb fetch; DO NOT EDIT.\n#\n# The Cargo.toml file for Cairo procedural macros crates is entirely managed by Scarb,\n# the Cairo package manager. Scarb regenerates this file whenever it processes Scarb.toml.\n# The simplest way to trigger this, is to run the `scarb fetch` command.\n#\n# If you want to provide custom data in this file, include it in Scarb.toml under\n# [tool.cargo.pkg] section. For example, to add Rust dependencies, type the following:\n#\n#     [tool.cargo.pkg.dependencies]\n#     serde = \"1\"\n#     serde_json = \"1\"\n\n[package]\nname = \"ignore-plugin\"\nversion = \"0.1.0\"\n\n[lib]\ncrate-type = \"dylib\"\n\n[dependencies]\ncairo-lang-macro = \"1.0.0-alpha.7\"\n```\n\n----------------------------------------\n\nTITLE: Serializing Circle Instances to felt252 Array in Cairo\nDESCRIPTION: Provides a function serialize that takes a Circle instance and a reference to an output Array of felt252 elements, transforming the Circle's data into a serialized form stored in the output array. This function is essential for persisting or transmitting Circle objects in a compact, low-level format.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-CircleSerde.md#_snippet_1\n\nLANGUAGE: Cairo\nCODE:\n```\nfn serialize(self: Circle, ref output: Array&lt;felt252&gt;)\n```\n\n----------------------------------------\n\nTITLE: Specifying Release Profile with `--release` Flag (Shell)\nDESCRIPTION: This snippet shows a shortcut for using the `release` profile in Scarb. Instead of using `--profile release`, the `--release` flag can be used directly. This is a more concise way to build with the release profile settings.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/defining-custom-profiles.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscarb --release build\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Trait for Circle in Rust\nDESCRIPTION: This snippet defines an implementation (impl) block that attaches the Shape trait to the Circle type, allowing Circle to inherit the functionality described by Shape. Requires the Shape trait and Circle type to be defined in scope. This is foundational for trait-based polymorphism in Rust.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-CircleShape.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nimpl CircleShape of Shape<Circle>\n```\n\n----------------------------------------\n\nTITLE: Re-export Cairo plugins example in TOML\nDESCRIPTION: This TOML snippet showcases the use of the `re-export-cairo-plugins` field, found within the `[package]` section. This field declares re-exports of package dependencies. If a package declares a re-export, all packages depending on it will also depend on that re-export. Only packages implementing the `cairo-plugin` target can be re-exported, and it can be done only for direct dependencies.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_15\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nre-export-cairo-plugins = [\"proc_macro_package\"]\n\n```\n\n----------------------------------------\n\nTITLE: Telegram Announcement Template\nDESCRIPTION: This template is for announcing a Scarb release on the Starknet Telegram channel. The announcement shares similar information to the Twitter announcement, but omits mentions and includes the Tweet link.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/MAINTAINING.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAnnouncing Scarb vX.Y.Z!\n\n🔥 blahblah\n🚀 even more blahblah\n\nDownload: https://docs.swmansion.com/scarb/download.html\nRelease notes: https://github.com/software-mansion/scarb/releases/tag/vX.Y.Z\nTweet: https://twitter.com/...\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Trait for Circle Struct in Cairo\nDESCRIPTION: This snippet demonstrates the implementation of the Drop trait specifically for a custom Circle struct using Cairo. Dependencies include the definition of the Circle type in the project and the availability of the Drop trait. No explicit parameters are shown as the impl statement binds the trait to the type, enabling custom drop behavior. Expected behavior is to allow the Circle type to participate in Cairo's resource cleanup process, although the implementation details would be in the corresponding impl block. Limitations may include that only publicly available types and traits can be used in this way.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-CircleDrop.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nimpl CircleDrop of Drop<Circle>;\n```\n\n----------------------------------------\n\nTITLE: Scarb Package Source Types Class Diagram (Mermaid)\nDESCRIPTION: Class diagram illustrating the package source abstraction in Scarb. It defines the `Source` trait with `query` and `download` methods, and shows concrete implementations like `PathSource`, `GitSource`, `RegistrySource`, and `StandardLibSource`, each responsible for fetching packages from different locations.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/ARCHITECTURE.md#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    direction BT\n    class Source {\n       <<Trait>>\n       + query(&ManifestDependency) Vec~Summary~\n       + download(PackageId) Package\n    }\n    class PathSource\n    class GitSource\n    class RegistrySource\n    class StandardLibSource {\n        /embedded/\n    }\n\n    PathSource ..|> Source\n    GitSource ..|> Source\n    RegistrySource ..|> Source\n    StandardLibSource ..|> Source\n```\n\n----------------------------------------\n\nTITLE: Defining Area Method for Circle Trait Implementation in Rust\nDESCRIPTION: This function defines the area method for the Circle implementation of the Shape trait, taking self as a Circle and returning an unsigned 32-bit integer (u32), likely representing the area of the circle. Dependencies include the Circle struct/class and necessary trait bindings. Parameters: self (an instance of Circle); Output: u32 (area value).\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-CircleShape.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn area(self: Circle) -> u32\n```\n\n----------------------------------------\n\nTITLE: Printing \"test\" to stdout in Cairo\nDESCRIPTION: The `test()` function prints \"test\" to standard output, followed by a newline character. It's designed to be called within a Cairo program, and its primary function is to demonstrate basic output.  This function has no explicit input parameters. It's a simple example meant for testing.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_with_features/src/hello_world-sub_package-free_functions.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\n```cairo\n    fn main() {\n        test();\n    }\n```\n```\n\n----------------------------------------\n\nTITLE: Authors example in TOML\nDESCRIPTION: This TOML snippet demonstrates the `authors` field within the `[package]` section. This field lists the authors or maintainers of the package, along with optional email addresses. It provides metadata about the creators or maintainers of the package, which can be useful for version control and attribution.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nauthors = [\"Software Mansion <contact@swmansion.com>\", \"Starkware\"]\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Cairo Code with `scarb doc` Comments\nDESCRIPTION: This Cairo code demonstrates how to use `///` (for following items) and `//!` (for enclosing items, like modules or functions) documentation comments. It shows documentation for modules, enums, structs (with public/private fields), and functions. It also illustrates linking to other items like `[ExampleStruct]` and `[test]`, and embedding runnable code examples within documentation using fenced code blocks (` ```cairo ... ````).\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/documentation-generation.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\n//! This module is an example one.\n//! It tries to show how documentation comments work.\n\n\n/// Example Enum. It's really similar to [ExampleStruct]\nenum ExampleEnum {\n    /// First enum variant.\n    VARIANT_A,\n    /// Second enum variant.\n    VARIANT_B\n}\n\n/// Example struct. Contains a public field and a private one.\nstruct ExampleStruct {\n    /// Private field.\n    field_a: felt252,\n    /// Public field.\n    pub field_b: felt252,\n    /// [`ExampleEnum`] field\n    field_c: ExampleEnum\n}\n\n/// Function that prints \"test\" to stdout with endline.\n/// Can invoke it like that:\n/// ```cairo\n///     fn main() {\n///         test();\n///     }\n/// ```\nfn test() {\n    println!(\"test\");\n}\n\n/// Main function that Cairo runs as a binary entrypoint.\n/// This function uses [test] function.\nfn main() {\n    //! This is an inner comment. It refers to it's parent which is the main function.\n    println!(\"hello_world\");\n    test();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Circle Struct in Cairo\nDESCRIPTION: This code snippet defines a `Circle` struct in Cairo. It includes a `radius` field of type `u32`. The `#[derive]` attribute automatically implements the `Drop`, `Serde`, and `PartialEq` traits for the struct. These traits enable functionalities such as dropping the struct from memory, serialization/deserialization, and comparison for equality.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-Circle.md#_snippet_0\n\nLANGUAGE: Cairo\nCODE:\n```\n#[derive(Drop, Serde, PartialEq)]\nstruct Circle {\n    radius: u32,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Trait Constant UGANDA Cairo\nDESCRIPTION: Declares a constant named `UGANDA` within the `Uganda` trait. This constant is of type `felt252` and its value must be defined by any type implementing the trait.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Uganda.md#_snippet_2\n\nLANGUAGE: cairo\nCODE:\n```\nconst UGANDA: felt252;\n```\n\n----------------------------------------\n\nTITLE: License and license-file in TOML\nDESCRIPTION: This TOML snippet demonstrates how to use the `license` and `license-file` fields within the `[package]` section. The `license` field specifies the software license using an SPDX expression (e.g., MIT, Apache-2.0). The `license-file` field gives the path to the license file when a standard SPDX license is not used, providing details about the software license terms.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_11\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nlicense = \"MIT OR Apache-2.0\"\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nlicense-file = \"LICENSE.txt\"\n```\n\n----------------------------------------\n\nTITLE: Defining DuplicatedTraitName Trait in Cairo\nDESCRIPTION: This snippet declares a trait named DuplicatedTraitName using the Cairo language. It defines a reusable interface or set of method signatures for implementation by other Cairo contracts or modules. There are no method bodies or members included, indicating an abstract interface definition or a placeholder for further expansion. No additional dependencies are required beyond standard Cairo tooling and syntax.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/duplicated_item_names/src/hello_world-sub_module-DuplicatedTraitName.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\ntrait DuplicatedTraitName\n```\n\n----------------------------------------\n\nTITLE: Defining Main Function in Cairo\nDESCRIPTION: The main function that serves as the binary entrypoint for the Cairo program. It is defined in the hello_world_sub_package module without parameters.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_without_features/src/hello_world_sub_package-main.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn main()\n```\n\n----------------------------------------\n\nTITLE: Calculating Fibonacci Numbers in Cairo\nDESCRIPTION: This function calculates the nth Fibonacci number using an unsigned 32-bit integer as input and returning an unsigned 32-bit integer result. The parameter 'n' represents the index of the Fibonacci number to calculate.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-fib.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn fib(mut n: u32) -> u32\n```\n\n----------------------------------------\n\nTITLE: Enabling unstable-add-statements-code-locations-debug-info in Scarb - TOML\nDESCRIPTION: Shows how to enable the unstable-add-statements-code-locations-debug-info flag in the [cairo] section to generate mappings between Sierra statement indices and code locations for debugging. Highly experimental and increases resource usage. Default is false; use only if required by profiling tools.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_23\n\nLANGUAGE: TOML\nCODE:\n```\n[cairo]\nunstable-add-statements-code-locations-debug-info = false\n\n```\n\n----------------------------------------\n\nTITLE: Defining SHAPE_CONST Constant in Cairo\nDESCRIPTION: This snippet defines a constant named `SHAPE_CONST` of type felt252 and sets its value to 'xyz'. This represents a constant value associated with the CircleShape. There are no specific inputs or outputs for constants; it is a fixed value.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-CircleShape.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nconst SHAPE_CONST: felt252 = &apos;xyz&apos;;\n```\n\n----------------------------------------\n\nTITLE: Using the test function in Cairo\nDESCRIPTION: Example showing how to invoke the test function within a Cairo main function. The test function prints \"test\" to stdout with an endline character.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-free_functions.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn main() {\n    test();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Color Enum in Cairo\nDESCRIPTION: This snippet demonstrates the declaration of an enum named Color with three variants: Red, Green, and Blue. Requires the Cairo programming language and its enum support. No parameters are required; the enum itself serves as a type to distinguish different colors with strictly defined values.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-Color.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nenum Color {\n    Red,\n    Green,\n    Blue,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Guinea Enum in Cairo\nDESCRIPTION: This snippet defines a Cairo enum named `Guinea`. It contains two possible variants: `Guinea` and `Equatorial`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Guinea.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nenum Guinea {\n    Guinea,\n    Equatorial,\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Circle Shape Constant in Rust\nDESCRIPTION: This snippet declares a constant SHAPE_CONST associated with CircleShape, assigning it a felt252 value of 'xyz'. It is used to provide shape-specific compile-time data. Make sure the felt252 type and the value 'xyz' are valid and imported. This constant can be used throughout the module as a fixed identifier.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-CircleShape.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nconst SHAPE_CONST: felt252 = 'xyz';\n```\n\n----------------------------------------\n\nTITLE: Red Variant of Color Enum in Cairo\nDESCRIPTION: This snippet defines the 'Red' variant of the Color enum with a description indicating it represents red color. It includes a fully qualified path for documentation and navigation purposes. The core functionality is to declare a variant as part of the enum with no additional parameters, serving as a constant identifier.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-Color.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nRed\n```\n\n----------------------------------------\n\nTITLE: Defining Color Enum in Cairo\nDESCRIPTION: This snippet defines a Cairo enumeration named 'Color' with three variants: Red, Green, and Blue. It sets up a simple enum structure to represent different color options. Dependencies are minimal, relying only on Cairo syntax. Inputs are enum variants; output is the enum type itself.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-Color.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nenum Color {\n    Red,\n    Green,\n    Blue,\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Green Variant of Color Enum in Cairo\nDESCRIPTION: This snippet presents the Green variant of the Color enum. Intended for use wherever the explicit value for Green is required within the enum context. Dependent on the Color enum definition; directly yields the Green value.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-Color.md#_snippet_2\n\nLANGUAGE: cairo\nCODE:\n```\nGreen\n```\n\n----------------------------------------\n\nTITLE: Default Feature Configuration - TOML\nDESCRIPTION: This TOML snippet shows how to set a default feature within the `[features]` section of a `Scarb.toml` file.  When the package is built without any specific feature flags, the default feature (and its dependencies) will be enabled. In this example, `poseidon` and `pedersen` are the default features. The `--no-default-features` flag can be used to disable this default behavior.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/conditional-compilation.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[features]\ndefault = [\"poseidon\", \"pedersen\"]\nposeidon = []\npedersen = []\nkeccak = []\n```\n\n----------------------------------------\n\nTITLE: Creating Type Aliases for Country Compositions in Cairo\nDESCRIPTION: Defines type aliases Rwanda and Uganda as tuples representing combined country types. Rwanda is a tuple of (Guinea, Congo), while Uganda is (Congo, Congo), establishing structured composite data types that model relationships or combined domain entities. These type aliases simplify referencing compound geographic constructs in the Cairo code.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-CongoUganda.md#_snippet_3\n\nLANGUAGE: cairo\nCODE:\n```\ntype Rwanda = (Guinea, Congo);\n```\n\nLANGUAGE: cairo\nCODE:\n```\ntype Uganda = (Congo, Congo);\n```\n\n----------------------------------------\n\nTITLE: Release Notes Template (Markdown)\nDESCRIPTION: This markdown template provides a structure for writing release notes. It includes sections for Cairo release notes, a highlight point title, a Cairo version, and a changelog. It is intended to be used within the GitHub release process.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/MAINTAINING.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Cairo release notes ➡️](https://github.com/starkware-libs/cairo/releases/tag/vX.Y.Z)\n\nWelcome to the release notes for Scarb vX.Y.Z!\nThis release is all about blahblah\n\n* **Blah blah** - Why this blah is so much blah.\n* **Even more blah blah** - Everything is awesome.\n    * **Sometimes some sub-blah is cool** - Yeah.\n\n## Highlight Point Title\n\nElaborate what this is about, what has changed, etc.\nBe as descriptive as you can.\n\n## Cairo Version\n\nThis version of Scarb comes with Cairo [`vX.Y.Z`](https://github.com/starkware-libs/cairo/releases/tag/vX.Y.Z).\n\n## What's Changed\n\n<!-- Here goes output from `Generate release notes` button. -->\n\n**Full Changelog**: https://github.com/software-mansion/scarb/compare/...\n```\n\n----------------------------------------\n\nTITLE: Defining Pair Type Alias in Cairo\nDESCRIPTION: This Cairo code defines a type alias called `Pair`. The `Pair` type alias is a tuple consisting of two unsigned 32-bit integers (`u32`). This is a fundamental data structure used for representing ordered pairs of numbers.  There are no dependencies for this definition.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-Pair.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\ntype Pair = (u32, u32);\n```\n\n----------------------------------------\n\nTITLE: Printing string to stdout in Cairo\nDESCRIPTION: Defines a function test in Cairo that prints the string \"test\" followed by a newline to the standard output. The snippet includes an example showing how to call test from a main function. This function requires no parameters and outputs its result directly to stdout. It is useful for simple console output in Cairo programs.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_no_features/src/hello_world_sub_package-test.md#_snippet_0\n\nLANGUAGE: Cairo\nCODE:\n```\nfn test()\n```\n\nLANGUAGE: Cairo\nCODE:\n```\nfn main() {\n    test();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding cairo_execute dependency for executable targets\nDESCRIPTION: Adding the cairo_execute package as a dependency to enable the #[executable] attribute for defining main functions.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/targets.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncairo_execute = \"{{ rel.stable.starknetPackageVersionReq }}\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Congo Struct in Cairo\nDESCRIPTION: This code snippet defines a struct named `Congo`. The struct has one member named `Congo` which is of type `felt252`. The `pub` keyword indicates that this struct is publicly accessible within the module.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Congo.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nstruct Congo {\n    pub Congo: felt252,\n}\n```\n\n----------------------------------------\n\nTITLE: Scarb Command-Line Interface Structure (Mermaid)\nDESCRIPTION: Flowchart illustrating the structure of the Scarb CLI. It shows the main `scarb` entrypoint branching into built-in commands (like build, check, update, fmt, etc.) and an external subcommand system for tools like Cairo Language Server, `scarb run`, `scarb doc`, and testing frameworks.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/ARCHITECTURE.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    scarb([scarb CLI])\n    scarb---BUILTIN_CMDS\n    scarb---EXT_CMDS\n    subgraph BUILTIN_CMDS [\"Built-in commands\"]\n        direction LR\n        BLD[scarb build]\n        CHK[scarb check]\n        UPD[scarb update]\n        FTH[scarb fetch]\n        FMT[scarb fmt]\n        CLN[scarb clean]\n        CAC[scarb cache]\n        NEW[scarb init/new]\n        UPD[scarb add/rm/update]\n        PUB[scarb package/publish]\n        MET[scarb metadata]\n        CMD[scarb commands]\n        MAN[scarb manifest-path]\n    end\n    subgraph EXT_CMDS [\"External subcommands system\"]\n        direction LR\n        CAIRO_LS[\"Cairo Language Server\"]\n        CAIRO_RUN[\"scarb run\"]\n        SCARB_DOC[\"scarb doc\"]\n        SNFORGE[\"scarb test\\n(can redirect to either snforge,\\ncairo-test or other runner)\"]\n    end\n```\n\n----------------------------------------\n\nTITLE: Defining Constant FOO in Cairo\nDESCRIPTION: This snippet defines a constant named `FOO` in the Cairo programming language. It is declared as a 32-bit unsigned integer (`u32`) and initialized with the value `42`. This constant is likely used elsewhere in the codebase.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-FOO.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nconst FOO: u32 = 42;\n```\n\n----------------------------------------\n\nTITLE: Defining Main Function - Cairo\nDESCRIPTION: This Cairo code defines the `main` function, which serves as the entry point of the program. The function is expected to return an unsigned 32-bit integer (`u32`). There are no dependencies explicitly mentioned in the snippet. The output of the function is the 16th Fibonacci number (though not implemented here).\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-main.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn main() -> u32\n```\n\n----------------------------------------\n\nTITLE: Emitting Auxiliary Data in Cairo\nDESCRIPTION: This Rust snippet demonstrates the usage of `AuxData` within a procedural macro. It serializes data to JSON and then includes this auxiliary data, consumed by a post-process callback. This is how procedural macros can emit auxiliary data.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/procedural-macro.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse cairo_lang_macro::{ProcMacroResult, TokenStream, attribute_macro, AuxData, PostProcessContext, post_process};\nuse serde::{Serialize, Deserialize};\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct SomeMacroDataFormat {\n    msg: String\n}\n\n#[attribute_macro]\npub fn some(_attr: TokenStream, token_stream: TokenStream) -> ProcMacroResult {\n    let value = SomeMacroDataFormat { msg: \"Hello from some macro!\".to_string() };\n    let value = serde_json::to_string(&value).unwrap();\n    let value: Vec<u8> = value.into_bytes();\n    let aux_data = AuxData::new(value);\n    ProcMacroResult::new(token_stream).with_aux_data(aux_data)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Guinea Variant in Cairo\nDESCRIPTION: This snippet shows the `Guinea` variant identifier, which is one of the possible values for the `Guinea` enum defined elsewhere.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Guinea.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nGuinea\n```\n\n----------------------------------------\n\nTITLE: Defining the eq Function for Circle Equality in Cairo\nDESCRIPTION: This snippet defines the `eq` function, which is part of the `PartialEq` implementation for the `Circle` struct.  It takes two `Circle` instances as input, `lhs` and `rhs`, and returns a boolean value indicating whether they are equal. The function likely contains logic to compare the relevant fields of the two `Circle` instances to determine equality. There are no dependencies explicitly shown in this implementation detail.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-CirclePartialEq.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nfn eq(lhs: Circle, rhs: Circle) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining ShapePair Type Alias in Cairo\nDESCRIPTION: This snippet defines a type alias called `ShapePair` which represents a tuple of two `Circle` structures. It's designed to simplify the type signatures or make the code more readable when working with pairs of circles. It is a simple type alias definition.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-CircleShape.md#_snippet_3\n\nLANGUAGE: cairo\nCODE:\n```\ntype ShapePair = (Circle, Circle);\n```\n\n----------------------------------------\n\nTITLE: Generating Compilation Units - Mermaid Diagram\nDESCRIPTION: This Mermaid diagram illustrates the process of generating compilation units within Scarb. It depicts the flow from the workspace to resolving the workspace, iterating through each package, collecting dependencies, setting unit components, profile, compiler configuration, and finally constructing the compilation unit for each target. The diagram provides a visual representation of the compilation process.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/compilation-model.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    workspace([Workspace])\n    resolve[\"Resolve workspace\"]\n\n    workspace-->resolve\n    resolve-->member\n\n\n    subgraph member[for each package in workspace]\n        direction TB\n        submember([\"Package\"])\n\n        deps[\"Collect dependencies\\n for package\"]\n        submember --> deps\n\n        libdeps[\"Set unit components to current package,\\n corelib and transitive dependencies\"]\n        deps --> libdeps\n\n        profile[\"Set current profile\"]\n        libdeps --> profile\n\n        compconfig[\"Set compiler configuration\"]\n        profile --> compconfig\n\n        compconfig --> target\n        subgraph target[For each package target]\n            subtarget([\"Target\"])\n\n            cfg[\"Set Cfg attributes\\n for target\"]\n            subtarget-->cfg\n\n            depstargets[\"Fetch targets\\n for components\"]\n            cfg --> depstargets\n\n            targetunits([\"Collect units for target\"])\n            depstargets-->targetunits\n        end\n    end\n\n    allunits([Collect all units])\n    member-->allunits\n```\n\n----------------------------------------\n\nTITLE:  definition of Shape trait in Cairo language\nDESCRIPTION: Defines the 'Shape' trait with a generic parameter for objects that have an area calculation method. It provides the interface for shape objects, requiring an implementation of the 'area' function. This snippet establishes the core structure of shape-related types in Cairo.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-Shape.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\ntrait Shape&lt;T&gt;\n```\n\n----------------------------------------\n\nTITLE: Area Function Signature in Rust\nDESCRIPTION: Defines the `area` function within the `Shape` trait. This function takes a generic type `T` as input (self: T) and returns a `u32` value representing the area. The fully qualified path is `hello_world::Shape::area`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-Shape.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn area&lt;T, T&gt;(self: T) -&gt; u32\n```\n\n----------------------------------------\n\nTITLE: Defining Trait Associated Type Uganda Cairo\nDESCRIPTION: Declares an associated type named `Uganda` within the `Uganda` trait. Any type implementing the `Uganda` trait must define a concrete type for `Uganda`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Uganda.md#_snippet_7\n\nLANGUAGE: cairo\nCODE:\n```\ntype Uganda;\n```\n\n----------------------------------------\n\nTITLE: Defining the area Function Signature for CircleShape (Cairo)\nDESCRIPTION: Defines the function signature for the `area` method as part of the `CircleShape` implementation. It specifies that the function takes an instance of `Circle` (referred to as `self`) and returns a `u32`, presumably the area. The implementation details are not shown.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-CircleShape.md#_snippet_2\n\nLANGUAGE: cairo\nCODE:\n```\nfn area(self: Circle) -> u32\n```\n\n----------------------------------------\n\nTITLE: Scarb Core Data Model Class Diagram (Mermaid)\nDESCRIPTION: Class diagram depicting the core data structures used within Scarb. It shows relationships between key entities like `Config`, `Workspace`, `Package`, `PackageId`, `SourceId`, `Manifest`, `Target`, `CompilationUnit`, `Resolve`, `WorkspaceResolve`, `CodegenRepository`, and various compiler types. This model represents the project state and configuration.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/ARCHITECTURE.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class PackageId {\n        + String name\n        + Version\n        + SourceId\n    }\n    class SourceId {\n        +SourceKind\n        +Url\n    }\n    class Config~'c~ {\n        - manifest path\n        - app exe path\n        - app dirs, like config, cache, PATH, etc.\n        - target directory handle\n        - ui\n        - logging configuration \n        - cairo plugins \n        - current profile\n        - global locks\n        - tokio runtime\n    }\n    class CodegenRepository {\n        - compilers\n    }\n    class CairoPluginRepository {\n        - built-in compiler macro plugins\n    }\n    class StarknetContractCompiler {\n    }\n    class LibCompiler {\n    }\n    class TestCompiler {\n    }\n    class Workspace~'c~ {\n        + members() Iter~Package~\n    }\n    class Package {\n        + PackageId\n        + Manifest\n    }\n    class Manifest {\n        + Summary\n        + Vec~Target~\n        + compiler config\n        + profile definitions\n        + scripts\n        + not important metadata\n    }\n    class TomlManifest {\n       Serialization of Scarb.toml\n    }\n    class Summary {\n        + PackageID\n        + Vec~ManifestDependency~\n        + metadata important for version solving\n    }\n    class ManifestDependency {\n        + String name\n        + VersionReq\n        + SourceId\n        + DepKind\n    }\n    class Target {\n        + TargetKind\n        + String name\n        + Optional group_id\n        + BTreeMap<String, *> params\n    }\n    class CompilationUnit {\n        Contains all information\n        needed to compile a Target\n    }\n    class Resolve {\n        Version solver output,\n        dependency graph.\n    }\n    class WorkspaceResolve {\n        + Resolve resolve\n        + Vec~Package~ packages\n    }\n\n    Workspace~'c~ *-- Config~'c~\n    Workspace~'c~ o-- * Package\n    Config~'c~ *-- CodegenRepository\n    Config~'c~ *-- CairoPluginRepository\n    Package -- Manifest\n    Manifest -- Summary\n    Manifest o-- * Target\n    Summary o-- * ManifestDependency\n    %% Package .. PackageId\n    %% ManifestDependency .. SourceId\n    PackageId -- SourceId\n    Manifest ..> TomlManifest : is created from\n    WorkspaceResolve *-- Resolve\n    WorkspaceResolve *-- Package\n    CompilationUnit ..> WorkspaceResolve : is created from\n    CompilationUnit ..> Target : is created from\n    CodegenRepository *-- StarknetContractCompiler \n    CodegenRepository *-- LibCompiler \n    CodegenRepository *-- TestCompiler\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Trait for CircleDrop in Rust\nDESCRIPTION: This code snippet defines an implementation block for the `CircleDrop` type that implements the `Drop` trait. This trait is crucial in Rust for managing resource lifecycles. Implementing `Drop` allows executing custom code just before a value goes out of scope, usually for deallocating memory or closing files. This implementation is for the `Circle` struct defined elsewhere.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-CircleDrop.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nimpl CircleDrop of Drop&lt;<a href=\"hello_world-Circle.html\">Circle</a>&gt;;\n```\n\n----------------------------------------\n\nTITLE: Defining Pair Type Alias in Cairo\nDESCRIPTION: This Cairo code snippet defines a type alias `Pair` which is equivalent to a tuple containing two unsigned 32-bit integers (`u32`). This alias can be used to improve code readability by giving a meaningful name to a common tuple structure.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-Pair.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\ntype Pair = (u32, u32);\n```\n\n----------------------------------------\n\nTITLE: Implementing CongoUganda Interface in Cairo\nDESCRIPTION: Defines the implementation block for the CongoUganda interface for the Congo type, establishing the interface inheritance and overall structure within the Cairo environment. This snippet serves as the basis for all constants, functions, and types defined later that relate to the CongoUganda entity.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-CongoUganda.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nimpl CongoUganda of Uganda<Congo>;;\n```\n\n----------------------------------------\n\nTITLE: Proving Cairo Execution with Scarb Prover - Shell\nDESCRIPTION: This shell command runs the Scarb prover to generate a cryptographic proof of a specific Cairo execution. It requires a completed Cairo execution with information saved in the target directory, which is referenced using the --execution-id flag. The output is a proof.json file placed inside the selected execution directory. This command assumes that Scarb is already installed and properly configured. The <index of the relevant execution> parameter must be replaced with the correct execution directory number based on prior executions.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/prove-and-verify.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nscarb prove --execution-id <index of the relevant execution>\n\n```\n\n----------------------------------------\n\nTITLE: Example of using procedural macros in Cairo source code\nDESCRIPTION: This Cairo code demonstrates importing macro packages and applying macro attributes and derives. The example defines a struct annotated with `#[derive(ToValue)]` and a function annotated with `#[instrument]`, showing how procedural macros are invoked via attribute syntax or derive macros. The macros generate or modify code during compilation, helping streamline code generation and instrumentation without requiring users to understand Rust internals.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/design/01-proc-macro.md#_snippet_1\n\nLANGUAGE: Cairo\nCODE:\n```\nuse add_macro::add;\nuse tracing_macro::instrument;\nuse to_value_macro::ToValue;\n\n#[derive(ToValue)]\nstruct Input {\n    value: felt252,\n}\n\n#[instrument]\nfn main() -> felt252 {\n    let a = Input { value: 1 };\n    let b = Input { value: 2 };\n    add!(a.to_value(), b.to_value());\n}\n```\n\n----------------------------------------\n\nTITLE: area function signature in Shape trait for Cairo objects\nDESCRIPTION: Declares the 'area' function, which calculates and returns the area of a shape object as a u32. It takes a generic type parameter and a self-reference, indicating it must be implemented for shape types. This function is fundamental for shape area computations.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-Shape.md#_snippet_2\n\nLANGUAGE: cairo\nCODE:\n```\nfn area&lt;T, T&gt;(self: T) -&gt; u32\n```\n\n----------------------------------------\n\nTITLE: Calculating Shape Area Function in Cairo\nDESCRIPTION: Implements the area function for shape objects, returning an unsigned 32-bit integer representing the shape's area. It is generic over types T, indicating flexibility in the input object types.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-Shape.md#_snippet_2\n\nLANGUAGE: cairo\nCODE:\n```\nfn area&lt;T, T&gt;(self: T) -&gt; u32\n```\n\n----------------------------------------\n\nTITLE: Implementing Shape Trait for Circle in Cairo\nDESCRIPTION: Declares the implementation of the `Shape` trait for the `Circle` struct, named `CircleShape`. This indicates that the subsequent definitions pertain to this specific trait implementation for the `Circle` type.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-CircleShape.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nimpl CircleShape of Shape<Circle>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop trait for Circle in Rust\nDESCRIPTION: This snippet likely implements the Drop trait for the Circle struct, managing cleanup when a Circle instance goes out of scope. It ensures proper release of resources if Circle includes heap-allocated members. It relies on the Drop trait being available and is invoked automatically during object destruction, with no explicit inputs or outputs.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-impls.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n// Custom cleanup logic for Circle when it is dropped\nimpl Drop for Circle {\n    fn drop(&mut self) {\n        // cleanup code here\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deserializing Circle from Span of felt252 in Cairo\nDESCRIPTION: Defines the deserialize function which takes a reference to a Span of felt252 elements representing the serialized Circle data and attempts to reconstruct the original Circle instance. It returns an Option&lt;Circle&gt; to indicate potential failure if the input data does not represent a valid Circle. This function allows the conversion of a raw serialized form back into a high-level Circle struct within Cairo.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-CircleSerde.md#_snippet_2\n\nLANGUAGE: Cairo\nCODE:\n```\nfn deserialize(ref serialized: Span&lt;felt252&gt;) -&gt; Option&lt;Circle&gt;\n```\n\n----------------------------------------\n\nTITLE: Verifying Cairo Proof with Scarb Verifier - Shell\nDESCRIPTION: This shell command runs the Scarb verifier to validate a previously generated cryptographic proof of Cairo execution. It takes the path of a proof.json file produced by the Scarb prover and checks its correctness. Dependencies include the proof file and properly installed Scarb with the integrated stwo-cairo prover. Replace <path to proof json file> with the actual path to your proof.json. The command outputs verification status but does not modify any files.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/prove-and-verify.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscarb verify <path to proof json file>\n\n```\n\n----------------------------------------\n\nTITLE: Deserialize Function for CircleSerde in Rust\nDESCRIPTION: This function deserializes a byte span into a Circle object, returning an Option that contains the Circle if deserialization succeeds. It takes a reference to a serialized data span of felt252 elements and reconstructs the original Circle object, useful for reading persisted data or received transmissions.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-CircleSerde.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nfn deserialize(ref serialized: Span&lt;felt252&gt;) -&gt; Option&lt;Circle&gt;\n```\n\n----------------------------------------\n\nTITLE: Defining Trait Associated Type Rwanda Cairo\nDESCRIPTION: Declares an associated type named `Rwanda` within the `Uganda` trait. Any type implementing the `Uganda` trait must define a concrete type for `Rwanda`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Uganda.md#_snippet_6\n\nLANGUAGE: cairo\nCODE:\n```\ntype Rwanda;\n```\n\n----------------------------------------\n\nTITLE: Defining Radius Member of Circle Struct in Cairo\nDESCRIPTION: This code snippet defines the `radius` member of the `Circle` struct. The `radius` represents the radius of the circle, and it's data type is specified as `u32` which is an unsigned 32-bit integer.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-Circle.md#_snippet_1\n\nLANGUAGE: Cairo\nCODE:\n```\nradius: u32\n```\n\n----------------------------------------\n\nTITLE: Example Output Demonstrating Variable Scope Differences in Shell\nDESCRIPTION: This shell snippet shows the runtime behavior of scripts defined earlier with shell and environment variables. Running `scarb run foo` outputs the concatenated variables, demonstrating both are visible in the current shell. Running `scarb run bar` outputs the environment variables via env command, highlighting only exported variables like HELLO appear, while shell-only variables like USER do not.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/scripts.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ scarb run foo\nHello SWMANSION!\n```\n\n----------------------------------------\n\nTITLE: Defining a Type Alias in CircleShape Implementation (Cairo)\nDESCRIPTION: Defines a type alias named `ShapePair` within the `CircleShape` implementation. This alias represents a tuple consisting of two `Circle` instances, providing a shorthand for this structure within the context of the `Shape` trait implementation for `Circle`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-CircleShape.md#_snippet_3\n\nLANGUAGE: cairo\nCODE:\n```\ntype ShapePair = (Circle, Circle);\n```\n\n----------------------------------------\n\nTITLE: Example of procedural macro implementation function using the Cairo macro API\nDESCRIPTION: This Rust code illustrates how a procedural macro is implemented as a library function marked with `#[inline_macro]`. The macro takes a `TokenStream` as input, processes it, and returns a `ProcMacroResult`. In this example, the macro performs no transformation and returns `ProcMacroResult::Leave`. This simplified pattern serves as a template for macro authors to define custom macro expansion logic, enabling code generation or modifications during compilation.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/design/01-proc-macro.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nuse cairo_lang_macro::{ProcMacroResult, TokenStream, inline_macro};\n\n/// The entry point of procedural macro implementation.\n#[inline_macro]\npub fn some_macro(token_stream: TokenStream) -> ProcMacroResult {\n    // no-op\n    ProcMacroResult::Leave\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CongoUganda Function Signatures in Cairo\nDESCRIPTION: Specifies function signatures for burundi, rwanda, and uganda within the CongoUganda interface. The burundi and rwanda functions each accept an instance of Congo and return a 32-bit unsigned integer, implying some computational or lookup operation related to these geographic entities. The uganda function takes no parameters and has an unspecified return, indicating either side-effects or void behavior. These definitions outline the interface for geographic operations.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-CongoUganda.md#_snippet_2\n\nLANGUAGE: cairo\nCODE:\n```\nfn burundi(self: Congo) -> u32\n```\n\nLANGUAGE: cairo\nCODE:\n```\nfn rwanda(self: Congo) -> u32\n```\n\nLANGUAGE: cairo\nCODE:\n```\nfn uganda()\n```\n\n----------------------------------------\n\nTITLE: Defining Congo Member in Cairo\nDESCRIPTION: This code snippet defines a public member `Congo` within a struct. The member's type is `felt252`, indicating that it will store a field element. The `pub` keyword makes this member accessible from outside the struct.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Congo.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\npub Congo: felt252\n```\n\n----------------------------------------\n\nTITLE: Defining the Main Function in Cairo\nDESCRIPTION: This Cairo code snippet defines the `main` function, which is the starting point of execution for the program. It requires no specific dependencies and takes no input parameters. The function's output will depend on its implementation, though the given snippet has no actual code.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/duplicated_item_names/src/hello_world-main.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn main()\n```\n\n----------------------------------------\n\nTITLE: Defining Trait Constant RWANDA Cairo\nDESCRIPTION: Declares a constant named `RWANDA` within the `Uganda` trait. This constant is of type `felt252` and its value must be defined by any type implementing the trait.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Uganda.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nconst RWANDA: felt252;\n```\n\n----------------------------------------\n\nTITLE: Declaring CongoUganda Constants in Cairo\nDESCRIPTION: Declares immutable constants RWANDA and UGANDA within the CongoUganda interface implementation, representing string-like fixed values using the felt252 type. RWANDA is set to 'Central Africa', symbolizing a regional designation, while UGANDA holds 'neighbour country', likely indicating geographical or relational metadata. These constants provide named, readable references in the Cairo code.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-CongoUganda.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nconst RWANDA: felt252 = 'Central Africa';\n```\n\nLANGUAGE: cairo\nCODE:\n```\nconst UGANDA: felt252 = 'neighbour country';\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Enum Using Cairo - Cairo\nDESCRIPTION: This snippet defines an enumeration named DuplicatedEnumName in Cairo without any variants, serving as a template for enum declarations. It requires the Cairo language toolchain, but no external dependencies are needed. The enum accepts no parameters and does not define any functionality, making it a foundational demonstration of Cairo's enum syntax. The expected output is simply the type definition with no runtime behavior or instantiable values.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/duplicated_item_names/src/hello_world-DuplicatedEnumName.md#_snippet_0\n\nLANGUAGE: Cairo\nCODE:\n```\nenum DuplicatedEnumName {}\n```\n\n----------------------------------------\n\nTITLE: Example VCS.json Content for Git Repository\nDESCRIPTION: This JSON object represents the content of the `VCS.json` metadata file included in a Scarb package tarball when the project uses Git. It contains the commit SHA (`sha1`) corresponding to the packaged source and the package's path relative to the Git repository root (`path_in_vcs`), which is empty if the package root is the repo root.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/registries/package-tarball.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"git\": {\n    \"sha1\": \"a928d5ba03fc09d3316b39f04f30ee135df0c606\"\n  },\n  \"path_in_vcs\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking test function from main - Cairo\nDESCRIPTION: This Cairo snippet illustrates how to call the `test` function from the program's main entry point. The `test` function is described as printing 'test' followed by a newline to standard output. This serves as a basic example of function invocation within a Cairo program.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_with_features/src/hello_world_sub_package.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn main() {\n    test();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling 'test' Function - Cairo\nDESCRIPTION: This Cairo code snippet defines a 'main' function which calls the 'test' function. The 'test' function is intended to print a string, though the implementation is not explicitly provided here. To use this code, you will need a Cairo environment setup and the relevant project files.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_with_features/src/hello_world_sub_package-test.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn main() {\n    test();\n}\n```\n\n----------------------------------------\n\nTITLE: Twitter Announcement Template\nDESCRIPTION: This is a template for a tweet announcing a new Scarb release. It includes placeholders for the version number, release details, and links. It's recommended to customize the copy and mention relevant accounts for broader reach.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/MAINTAINING.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHappy to announce that Scarb vX.Y.Z is live!\n\n🔥 blahblah\n🚀 even more blahblah\n\nGo check it out: https://docs.swmansion.com/scarb/download.html\nRelease notes: https://github.com/software-mansion/scarb/releases/tag/vX.Y.Z\n\n@swmansionxyz @StarkWareLtd\n```\n\n----------------------------------------\n\nTITLE: Calling the test Function (Cairo)\nDESCRIPTION: This snippet demonstrates how to invoke the `test()` function, which prints output to stdout, from the main entrypoint of a Cairo program. It shows a standard function call within the body of the `main` function.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_no_features/src/hello_world-sub_package-free_functions.md#_snippet_0\n\nLANGUAGE: Cairo\nCODE:\n```\nfn main() {\n    test();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Enum `DuplicatedEnumName` in Cairo\nDESCRIPTION: This snippet defines an empty enum named `DuplicatedEnumName` using the Cairo programming language. It declares the enum type without specifying any variants within its scope.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/duplicated_item_names/src/hello_world-sub_module-DuplicatedEnumName.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nenum DuplicatedEnumName {}\n```\n\n----------------------------------------\n\nTITLE: Defining Trait Function burundi Cairo\nDESCRIPTION: Declares a function named `burundi` within the `Uganda` trait. It is a generic function parameterized by `T` (appears duplicated in signature) that takes `self` of type `T` and returns a `u32`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Uganda.md#_snippet_3\n\nLANGUAGE: cairo\nCODE:\n```\nfn burundi<T, T>(self: T) -> u32\n```\n\n----------------------------------------\n\nTITLE: Defining the Cairo Function it_works\nDESCRIPTION: This snippet declares a Cairo function named it_works which appears to be a placeholder or a stub without implementation. It serves as a basic structure for creating a function within a Cairo program, potentially to be expanded later.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-tests-it_works.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn it_works()\n```\n\n----------------------------------------\n\nTITLE: Configuring syscalls for executable targets\nDESCRIPTION: Configuration to allow or disallow syscalls in executable targets, with a warning that execution with syscalls cannot be reliably proven.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/targets.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[cairo]\nallow-syscalls = false\n\n```\n\n----------------------------------------\n\nTITLE: Defining the main function signature in Rust\nDESCRIPTION: This snippet defines the 'main' function in Rust which serves as the entry point of the program. It returns a value of type 'u32', an unsigned 32-bit integer. There are no dependencies indicated. The function signature sets up the contract that the main function returns a numerical status code, commonly used in CLI applications to signal success or failure. No parameters are passed to 'main'.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-mdbook/tests/data/hello_world/input/src/hello_world-main.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nfn main() -> u32\n```\n\n----------------------------------------\n\nTITLE: Configuring enable-gas in Scarb Cairo Compiler - TOML\nDESCRIPTION: Illustrates setting the enable-gas flag in the [cairo] section, which determines whether gas calculation code is added during compilation. Set to true to enable gas-related instructions; cannot be disabled when building the starknet-contract target. Only Scarb is required. Takes a boolean value and defaults to true.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_18\n\nLANGUAGE: TOML\nCODE:\n```\n[cairo]\nenable-gas = true\n\n```\n\n----------------------------------------\n\nTITLE: Defining Trait Function uganda Cairo\nDESCRIPTION: Declares a function named `uganda` within the `Uganda` trait. It is a generic function parameterized by `T` (appears duplicated in signature) that takes no arguments and returns nothing (unit type `()`).\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Uganda.md#_snippet_5\n\nLANGUAGE: cairo\nCODE:\n```\nfn uganda<T, T>()\n```\n\n----------------------------------------\n\nTITLE: Publishing package to a custom registry - Shell\nDESCRIPTION: This command shows how to publish a Scarb package to a custom registry using the `--index` argument. The argument specifies the path to a local directory serving as the custom registry.  Ensure the specified directory is a valid registry endpoint.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/registries/publishing.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscarb publish --index file:///Users/foo/bar\n```\n\n----------------------------------------\n\nTITLE: Declaring development dependency in Scarb.toml (TOML)\nDESCRIPTION: Shows how to specify dependencies that are only needed for development or testing purposes in a Scarb project. These dependencies are listed under the `[dev-dependencies]` section in `Scarb.toml` and follow the same format as regular dependencies. They are typically not included when the package is used as a dependency by another project.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/dependencies.md#_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[dev-dependencies]\nopenzeppelin_merkle_tree = \"0.17.0\"\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Profile on the Command Line (Shell)\nDESCRIPTION: This shell snippet demonstrates invoking Scarb with a custom profile by specifying it with the '--profile' flag. The example assumes that 'my-profile' is already defined in Scarb.toml. The command's input is the profile name, and its output is the result of the 'scarb build' process with selected configuration overrides.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/profiles.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nscarb --profile my-profile build\n\n```\n\n----------------------------------------\n\nTITLE: Defining the eq Function for Circle PartialEq Implementation in Rust\nDESCRIPTION: This snippet provides the function signature for the `eq` method, which is required when implementing the `PartialEq` trait. This function takes two instances of the `Circle` struct (`lhs` for left-hand side and `rhs` for right-hand side) and returns a boolean value indicating whether they are considered equal.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-CirclePartialEq.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn eq(lhs: Circle, rhs: Circle) -> bool\n```\n\n----------------------------------------\n\nTITLE: Implementing Serialize trait for Circle in Rust\nDESCRIPTION: This snippet adds serialization capabilities to the Circle struct, allowing it to be converted into formats like JSON or binary. It depends on the serde crate for serialization attributes and functions. The implementation specifies how Circle's data fields (e.g., radius) are serialized, taking inputs as Circle instances and producing serialized outputs.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-impls.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n#[derive(Serialize)]\nstruct Circle {\n    radius: f64\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring single dependency in Scarb.toml (TOML)\nDESCRIPTION: Demonstrates how to add a single package dependency to the `[dependencies]` section of a `Scarb.toml` file. It specifies the package name (`openzeppelin_merkle_tree`) and a version requirement (`\"0.17.0\"`), indicating compatibility up to the next major version (exclusive). This is the standard way to define a required library for a Scarb project.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/dependencies.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[dependencies]\nopenzeppelin_merkle_tree = \"0.17.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Procedural Macro Package in Scarb.toml\nDESCRIPTION: Example of a Scarb manifest file for a procedural macro package, showing the minimal required configuration using the cairo-plugin target type.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/design/01-proc-macro.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"some-macro\"\nversion = \"0.1.0\"\n\n[cairo-plugin]\n```\n\n----------------------------------------\n\nTITLE: Implementing PartialEq for Circle in Cairo\nDESCRIPTION: This snippet defines the `PartialEq` implementation for the `Circle` struct.  It specifies that `Circle` implements the `PartialEq` trait using the `impl` keyword. There are no parameters or dependencies explicitly shown in this implementation detail. The output is used as a basis for equality comparisons between two `Circle` instances.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-CirclePartialEq.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nimpl CirclePartialEq of PartialEq&lt;<a href=\"hello_world-Circle.html\">Circle</a>&gt;;\n```\n\n----------------------------------------\n\nTITLE: Calculating Fibonacci Number in Rust\nDESCRIPTION: Defines a Rust function `fib` that calculates the nth Fibonacci number using an unsigned 32-bit integer as both input and output. The function takes a mutable parameter `n` representing the Fibonacci sequence index and returns the computed Fibonacci number as a u32 integer. The snippet is self-contained and requires Rust's standard library with no external dependencies.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-fib.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn fib(mut n: u32) -> u32\n```\n\n----------------------------------------\n\nTITLE: Adding package dependency via `scarb add` command (Shell)\nDESCRIPTION: Executes the `scarb add` command in the shell to automatically add a dependency entry to the project's `Scarb.toml` file. The command specifies the package name (`openzeppelin_merkle_tree`) and the desired version (`@0.17.0`). This provides a convenient command-line interface for managing dependencies without manual file editing.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/dependencies.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nscarb add openzeppelin_merkle_tree@0.17.0\n```\n\n----------------------------------------\n\nTITLE: Cairo Binary Entrypoint: Main Function\nDESCRIPTION: The `main()` function serves as the entry point for a Cairo binary. It's the function that the Cairo runtime executes when the program is run. This snippet is intended for demonstration purposes, likely within the context of a larger hello world example.  This function would typically take no input parameters and return nothing.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_with_features/src/hello_world-sub_package-free_functions.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Defining the Main Function Signature in Rust\nDESCRIPTION: This Rust code snippet defines the signature for the `main` function located at `hello_world::main`. It takes no arguments and is declared to return an unsigned 32-bit integer (`u32`). According to the surrounding text, this return value represents the calculated 16th Fibonacci number.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-main.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn main() -> u32\n```\n\n----------------------------------------\n\nTITLE: Using external allow-list JSON file for libfuncs validation in TOML\nDESCRIPTION: Example configuration demonstrating how to specify a path to a user-provided JSON file for the allowed libfuncs list. This enables custom validation during Starknet contract compilation, supplementing or replacing the built-in allow lists.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/starknet/contract-target.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[[target.starknet-contract]]\nallowed-libfuncs-list.path = \"path/to/list.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Rust Test Function 'it_works'\nDESCRIPTION: This code snippet declares a Rust function named 'it_works' intended for testing purposes within the 'hello_world' module. It serves as a placeholder for test logic to verify code correctness.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-tests-it_works.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nfn it_works()\n```\n\n----------------------------------------\n\nTITLE: Defining a Constant in CircleShape Implementation (Cairo)\nDESCRIPTION: Defines a constant named `SHAPE_CONST` of type `felt252` with the value `'xyz'` within the `CircleShape` implementation block. This constant is specifically associated with the implementation of the `Shape` trait for the `Circle` type.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-CircleShape.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nconst SHAPE_CONST: felt252 = 'xyz';\n```\n\n----------------------------------------\n\nTITLE: Increasing Stack Size for Scarb Builds (Bash)\nDESCRIPTION: Runs the `scarb build` command with an increased stack size (128MB) by setting the `RUST_MIN_STACK` environment variable (134217728 bytes). This is a temporary workaround for stack overflow errors encountered during Cairo compilation, especially with large codebases.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRUST_MIN_STACK=134217728 scarb build\n```\n\n----------------------------------------\n\nTITLE: Green Variant of Color Enum in Cairo\nDESCRIPTION: This snippet declares the 'Green' variant of the Color enum with a description stating it represents green color. It also provides a fully qualified path for documentation. The variant functions as a simple constant value within the enum, useful for distinguishing the green color option.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-Color.md#_snippet_2\n\nLANGUAGE: cairo\nCODE:\n```\nGreen\n```\n\n----------------------------------------\n\nTITLE: Formatting Cairo code with Scarb\nDESCRIPTION: This command formats the Cairo code in the project using the Scarb formatter.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nscarb fmt\n```\n\n----------------------------------------\n\nTITLE: Implementing Serde Trait for CircleSerde in Rust\nDESCRIPTION: This snippet shows the implementation of the Serde trait for the CircleSerde struct, enabling it to serialize and deserialize Circle objects. It provides the structure for the methods required to perform these operations, relying on the Serde trait's interface within the hello_world namespace.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-CircleSerde.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nimpl CircleSerde of Serde&lt;hello_world::Circle&gt;;\n```\n\n----------------------------------------\n\nTITLE: Defining Cairo Main Function\nDESCRIPTION: This snippet defines the `main` function, which serves as the entry point of the Cairo program.  It is the function that is executed when the program is run. No specific dependencies are declared in this snippet. The function takes no arguments and returns nothing, as specified by the Cairo language syntax.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_with_features/src/hello_world_sub_package-main.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn main()\n```\n\n----------------------------------------\n\nTITLE: Using the Blue Variant of Color Enum in Cairo\nDESCRIPTION: This snippet demonstrates usage of the Blue variant of the Color enum. Appropriate for referring to the Blue value in logical conditions or functions accepting Color values. Assumes the Color enum is available in scope.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-Color.md#_snippet_3\n\nLANGUAGE: cairo\nCODE:\n```\nBlue\n```\n\n----------------------------------------\n\nTITLE: Adding a Git dependency in Scarb.toml\nDESCRIPTION: This example shows how to add a dependency hosted on a Git repository to the `Scarb.toml` file. Specify the Git URL.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nalexandria_math = { git = \"https://github.com/keep-starknet-strange/alexandria.git\" }\n```\n\n----------------------------------------\n\nTITLE: Accessing the Equatorial Variant in Cairo\nDESCRIPTION: This snippet shows the `Equatorial` variant identifier, which is one of the possible values for the `Guinea` enum defined elsewhere.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_linked_items/src/hello_world-Guinea.md#_snippet_2\n\nLANGUAGE: cairo\nCODE:\n```\nEquatorial\n```\n\n----------------------------------------\n\nTITLE: Defining duplicated_function_name Function in Cairo\nDESCRIPTION: This Cairo code snippet declares a function called `duplicated_function_name`. It is a basic function definition, and the specifics of its implementation (what it does) are not present.  The function has no input parameters.  The output and return type depend on its implementation in the larger project.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/duplicated_item_names/src/hello_world-sub_module-duplicated_function_name.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn duplicated_function_name()\n```\n\n----------------------------------------\n\nTITLE: Using the Red Variant of Color Enum in Cairo\nDESCRIPTION: This snippet shows the usage of the Red variant from the Color enum. Useful in contexts requiring explicit selection or reference to the Red color. No dependencies beyond the definition of the Color enum; output is the specific enum value representing Red.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-Color.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nRed\n```\n\n----------------------------------------\n\nTITLE: Using Vue Component in Template - Vue\nDESCRIPTION: This snippet demonstrates the usage of the Home component in the template section of a Vue component file. It renders the Home component as the page content. This requires Vue 3 and proper component registration/import. The rendered output is the user interface defined by the Home component.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/index.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Home/>\n```\n\n----------------------------------------\n\nTITLE: Implementing CircleShape for Shape Trait in Cairo\nDESCRIPTION: This snippet implements the CircleShape for Shape trait in Cairo. This allows the Circle structure to be used with the Shape trait. It indicates that the CircleShape implements the Shape trait and can be used to define circle-related functionality, such as calculating the area.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-CircleShape.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nimpl CircleShape of Shape&lt;<a href=\"hello_world-Circle.html\">Circle</a>&gt;;\n```\n\n----------------------------------------\n\nTITLE: Using `--emit stdout` for Non-Destructive Formatting Output\nDESCRIPTION: Specifies how to output formatted Cairo code to stdout instead of disk, useful for integration with external tools or scripts that process formatted content without altering source files.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/guides/formatting.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nscarb fmt --emit stdout\n```\n\n----------------------------------------\n\nTITLE: Suggested Scarb Installation Path (Windows Batch)\nDESCRIPTION: This path indicates a common location within the user's `%LOCALAPPDATA%` directory on Windows systems. It is suggested as a suitable default folder for extracting the Scarb archive during a manual installation.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_10\n\nLANGUAGE: batch\nCODE:\n```\n%LOCALAPPDATA%\\Programs\\scarb\n```\n\n----------------------------------------\n\nTITLE: Accessing Basic Scarb Command-line Help\nDESCRIPTION: Shows how to display basic help information for Scarb using the terminal. This command provides a quick overview of available commands and flags.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nscarb -h\n```\n\n----------------------------------------\n\nTITLE: Constant SHAPE_CONST for shape type identification in Cairo\nDESCRIPTION: Defines a constant 'SHAPE_CONST' representing the shape type as a felt252. It serves as a unique identifier or marker for shape objects within the Cairo codebase. This constant is essential for type discrimination or tagging in shape-related operations.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_with_features/src/hello_world-Shape.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nconst SHAPE_CONST: felt252;\n```\n\n----------------------------------------\n\nTITLE: Testing Scarb Project\nDESCRIPTION: This command runs the tests defined within the Scarb project. It executes the test suite to verify the correctness of the Cairo code. A properly configured Scarb project with defined tests is required for this command to execute successfully.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/examples/hello_world/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nscarb test\n```\n\n----------------------------------------\n\nTITLE: Implementing PartialEq Trait for Circle Struct in Rust\nDESCRIPTION: This snippet declares the implementation of the `PartialEq` trait for the `hello_world::Circle` struct. It signifies that instances of `Circle` can be compared for equality using the `==` and `!=` operators.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-CirclePartialEq.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nimpl CirclePartialEq of PartialEq<Circle>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Detailed Scarb Command-line Help\nDESCRIPTION: Shows how to display comprehensive help information for Scarb using the terminal. This command provides detailed descriptions of all available commands and flags.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscarb --help\n```\n\n----------------------------------------\n\nTITLE: Defining Shape Trait in Rust\nDESCRIPTION: Defines the `Shape` trait with a generic type parameter `T`.  Objects implementing this trait are expected to have an area. The fully qualified path for this trait is `hello_world::Shape`.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_without_features/src/hello_world-Shape.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ntrait Shape&lt;<a href=\"hello_world-Shape.html\">T</a>&gt;\n```\n\n----------------------------------------\n\nTITLE: Defining the `unique_function_name` Function Signature in Cairo\nDESCRIPTION: This snippet shows the function signature for `unique_function_name` in Cairo. It declares a function with this name that takes no arguments. The implementation details and return type are not provided in this snippet.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/duplicated_item_names/src/hello_world-unique_function_name.md#_snippet_0\n\nLANGUAGE: Cairo\nCODE:\n```\nfn unique_function_name()\n```\n\n----------------------------------------\n\nTITLE: Building CASM in Scarb\nDESCRIPTION: To build CASM code, add `casm = true` to the `[lib]` section of `Scarb.toml`. Setting `sierra = false` in the `[lib]` section will prevent Sierra code from being built.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/cheatsheet.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\ncasm = true\n```\n\nLANGUAGE: toml\nCODE:\n```\nsierra = false\n```\n\n----------------------------------------\n\nTITLE: Defining the 'test' Function - Cairo\nDESCRIPTION: This Cairo snippet presents the definition of the 'test' function. This is a function declaration with no body or functionality specified. The user should expect this function to handle print statements for testing purposes.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_sub_package_with_features/src/hello_world_sub_package-test.md#_snippet_1\n\nLANGUAGE: cairo\nCODE:\n```\nfn test()\n```\n\n----------------------------------------\n\nTITLE: List Available Scarb Versions via asdf (Shell)\nDESCRIPTION: Run this command using the asdf version manager to display a list of all Scarb versions that are available for installation through the `scarb` plugin.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/download.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf list all scarb\n```\n\n----------------------------------------\n\nTITLE: Cairo Function Declaration: duplicated_function_name\nDESCRIPTION: This code snippet shows the declaration of a Cairo function named `duplicated_function_name`. The function takes no arguments and returns no value (implicit unit return type). It serves as a placeholder or interface definition.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/duplicated_item_names/src/hello_world-duplicated_function_name.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn duplicated_function_name()\n```\n\n----------------------------------------\n\nTITLE: Generating and Building mdBook Documentation with Scarb\nDESCRIPTION: Executes the `scarb doc` command with the `--build` flag. This single command generates the Markdown documentation and automatically invokes `mdBook` to build the final documentation site.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/extensions/documentation-generation.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nscarb doc --build\n```\n\n----------------------------------------\n\nTITLE: Configuring Sierra and CASM generation for library targets\nDESCRIPTION: Configuration options for the library target to control Sierra and CASM code generation with default values for the release profile.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/targets.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\nsierra = true        # Enable Sierra codegen.\ncasm = false         # Enable CASM codegen.\nsierra-text = false  # Enable textual Sierra codegen.\n\n```\n\n----------------------------------------\n\nTITLE: Defining the DuplicatedTraitName Trait in Cairo\nDESCRIPTION: This snippet declares a trait named 'DuplicatedTraitName' in the Cairo programming language. Traits in Cairo define an interface consisting of method signatures that concrete types can later implement.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/duplicated_item_names/src/hello_world-DuplicatedTraitName.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\ntrait DuplicatedTraitName\n```\n\n----------------------------------------\n\nTITLE: Defining Cairo Main Function for Fibonacci Calculation\nDESCRIPTION: A Cairo function named 'main' that calculates the 16th Fibonacci number and returns the result as an unsigned 32-bit integer.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/extensions/scarb-doc/tests/data/hello_world_no_features/src/hello_world-main.md#_snippet_0\n\nLANGUAGE: cairo\nCODE:\n```\nfn main() -> u32\n```\n\n----------------------------------------\n\nTITLE: Configuring a test target\nDESCRIPTION: Example of how to configure a test target with the test-type property set to unit tests.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/targets.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[[test]]\ntest-type = \"unit\"\n\n```\n\n----------------------------------------\n\nTITLE: Homepage example in TOML\nDESCRIPTION: This TOML snippet highlights the use of the `homepage` field, located within the `[package]` section. The `homepage` field contains the URL of the package's home page, providing a central place to find additional information and resources related to the package.\nSOURCE: https://github.com/software-mansion/scarb/blob/main/website/docs/reference/manifest.md#_snippet_9\n\nLANGUAGE: TOML\nCODE:\n```\n[package]\nhomepage = \"https://example.com/\"\n```"
  }
]