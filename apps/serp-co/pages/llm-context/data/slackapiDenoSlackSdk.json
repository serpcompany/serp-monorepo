[
  {
    "owner": "slackapi",
    "repo": "deno-slack-sdk",
    "content": "TITLE: Initializing Slack Application Manifest in TypeScript\nDESCRIPTION: Demonstrates how to create a basic Slack application manifest configuration. The example shows setting up essential properties like name, description, icon path, and bot scopes, along with registering custom functions.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/manifest.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Manifest } from \"slack-cloud-sdk/mod.ts\";\nimport { ReverseString } from \"./functions/reverse_definition.ts\";\n\nexport default Manifest({\n  name: \"heuristic-tortoise-312\",\n  description: \"A demo showing how to use Slack functions\",\n  icon: \"assets/icon.png\",\n  botScopes: [\"commands\", \"chat:write\", \"chat:write.public\"],\n  functions: [ReverseString],\n  datastores: [],\n  outgoing_domains: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an App Manifest in Deno Slack SDK\nDESCRIPTION: Defines the app manifest which includes metadata like name, description, icon, workflows, and required scopes. This configuration provides Slack with the necessary information to manage the app and its permissions.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Contents of manifest.ts\nimport { Manifest } from \"deno-slack-sdk/mod.ts\";\nimport HelloWorldWorkflow from \"./workflows/hello_world.ts\";\n\nexport default Manifest({\n  name: \"my-app\",\n  description: \"A Hello World app\",\n  icon: \"assets/default_new_app_icon.png\",\n  workflows: [HelloWorldWorkflow],\n  outgoingDomains: [],\n  botScopes: [\"chat:write\", \"chat:write.public\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Slack App Manifest in TypeScript\nDESCRIPTION: This snippet creates a manifest for a Slack app using the Deno Slack SDK. It specifies the app's name, description, icon, workflows, and required bot scopes. This manifest is essential for managing the app within Slack.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/src/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Manifest } from \"deno-slack-sdk/mod.ts\";\nimport HelloWorldWorkflow from \"./workflows/hello_world.ts\";\n\nexport default Manifest({\n  name: \"my-app\",\n  description: \"A Hello World app\",\n  icon: \"assets/default_new_app_icon.png\",\n  workflows: [HelloWorldWorkflow],\n  outgoingDomains: [],\n  botScopes: [\"chat:write\", \"chat:write.public\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Workflow Structure in TypeScript\nDESCRIPTION: Shows how to create a basic workflow definition with metadata and input parameters, and register it in the manifest. Demonstrates setting up required string and channel ID parameters.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/workflows.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefineWorkflow, Manifest, Schema } from \"slack-cloud-sdk/mod.ts\";\n\nconst workflow = DefineWorkflow({\n  callback_id: \"my_workflow\",\n  title: \"My Workflow\",\n  description: \"A sample workflow\",\n  input_parameters: {\n    properties: {\n      a_string: {\n        type: Schema.types.string,\n      },\n      a_channel: {\n        type: Schema.slack.types.channel_id,\n      }\n    },\n    required: [\"a_string\", \"a_channel\"],\n  },\n});\n\n// register your workflow in your manifest\nexport default Manifest({\n  ...,\n  workflows: [\n    workflow,\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Slack Function in TypeScript\nDESCRIPTION: Example of defining a custom function using DefineFunction that converts a name input into a dinosaur name. Shows required parameters including callback_id, title, description, and input/output parameter definitions.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefineFunction, Schema } from \"slack-cloud-sdk/mod.ts\";\n\nexport const DinoFunction = DefineFunction({\n  callback_id: \"dino\",\n  title: \"Dino\",\n  description: \"Turns a name into a dinosaur name\",\n  source_file: \"functions/dino.ts\",\n  input_parameters: {\n    name: {\n      type: Schema.types.string,\n      description: \"The provided name\",\n    },\n  },\n  output_parameters: {\n    dinoname: {\n      type: Schema.types.string,\n      description: \"The new dinosaur name\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Function in Deno Slack SDK\nDESCRIPTION: Defines a Hello World function using DefineFunction and SlackFunction. This custom function takes no inputs and returns a simple message output. The function is structured with a definition containing metadata and an implementation that returns the output.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Contents of ./functions/hello_world.ts\nimport { DefineFunction, Schema, SlackFunction } from \"deno-slack-sdk/mod.ts\";\n\nexport const HelloWorldFunctionDef = DefineFunction({\n  callback_id: \"hello_world_function\",\n  title: \"Hello World\",\n  source_file: \"functions/hello_world.ts\",\n  input_parameters: {\n    properties: {},\n    required: [],\n  },\n  output_parameters: {\n    properties: {\n      message: {\n        type: Schema.types.string,\n        description: \"Hello world message\",\n      },\n    },\n    required: [\"message\"],\n  },\n});\n\nexport default SlackFunction(\n  HelloWorldFunctionDef,\n  () => {\n    return {\n      outputs: { message: \"Hello World!\" },\n    };\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Function in TypeScript for Slack\nDESCRIPTION: This snippet defines a custom 'Hello World' function using the Deno Slack SDK. It demonstrates how to use DefineFunction and SlackFunction to create a Slack-usable custom function that returns a simple message.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/src/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefineFunction, Schema, SlackFunction } from \"deno-slack-sdk/mod.ts\";\n\nexport const HelloWorldFunctionDef = DefineFunction({\n  callback_id: \"hello_world_function\",\n  title: \"Hello World\",\n  source_file: \"functions/hello_world.ts\",\n  input_parameters: {\n    properties: {},\n    required: [],\n  },\n  output_parameters: {\n    properties: {\n      message: {\n        type: Schema.types.string,\n        description: \"Hello world message\",\n      },\n    },\n    required: [\"message\"],\n  },\n});\n\nexport default SlackFunction(\n  HelloWorldFunctionDef,\n  () => {\n    return {\n      outputs: { message: \"Hello World!\" },\n    };\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow in Deno Slack SDK\nDESCRIPTION: Defines a Hello World workflow that uses the previously defined custom function and Slack's built-in SendMessage function. The workflow takes a channel input parameter, executes the Hello World function, and then sends the resulting message to the specified channel.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Contents of ./workflows/hello_world.ts\nimport { DefineWorkflow, Schema } from \"deno-slack-sdk/mod.ts\";\nimport { HelloWorldFunctionDef } from \"../functions/hello_world.ts\";\n\nconst HelloWorldWorkflowDef = DefineWorkflow({\n  callback_id: \"hello_world_workflow\",\n  title: \"Hello World Workflow\",\n  input_parameters: {\n    properties: {\n      channel: {\n        type: Schema.slack.types.channel_id,\n      },\n    },\n    required: [\"channel\"],\n  },\n});\n\nconst helloWorldStep = HelloWorldWorkflowDef.addStep(HelloWorldFunctionDef, {});\n\nHelloWorldWorkflowDef.addStep(Schema.slack.functions.SendMessage, {\n  channel_id: HelloWorldWorkflowDef.inputs.channel,\n  message: helloWorldStep.outputs.message,\n});\n\nexport default HelloWorldWorkflowDef;\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow in TypeScript for Slack\nDESCRIPTION: This snippet defines a 'Hello World' workflow using the Deno Slack SDK. It demonstrates how to use DefineWorkflow to create a workflow that includes a custom function step and a SendMessage step to post the result to a Slack channel.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/src/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefineWorkflow, Schema } from \"deno-slack-sdk/mod.ts\";\nimport { HelloWorldFunctionDef } from \"../functions/hello_world.ts\";\n\nconst HelloWorldWorkflowDef = DefineWorkflow({\n  callback_id: \"hello_world_workflow\",\n  title: \"Hello World Workflow\",\n  input_parameters: {\n    properties: {\n      channel: {\n        type: Schema.slack.types.channel_id,\n      },\n    },\n    required: [\"channel\"],\n  },\n});\n\nconst helloWorldStep = HelloWorldWorkflowDef.addStep(HelloWorldFunctionDef, {});\n\nHelloWorldWorkflowDef.addStep(Schema.slack.functions.SendMessage, {\n  channel_id: HelloWorldWorkflowDef.inputs.channel,\n  message: helloWorldStep.outputs.message,\n});\n\nexport default HelloWorldWorkflowDef;\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger in Deno Slack SDK\nDESCRIPTION: Defines a shortcut trigger that invokes the Hello World workflow. The trigger configuration specifies the type, name, description, workflow reference, and input mappings. When detected by the Slack CLI, users will be prompted to create this trigger.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Contents of ./triggers/hello_world.ts\nimport { Trigger } from \"deno-slack-sdk/types.ts\";\nimport { TriggerContextData, TriggerTypes } from \"deno-slack-api/mod.ts\";\nimport HelloWorldWorkflow from \"../workflows/hello_world.ts\";\n\nconst trigger: Trigger<typeof HelloWorldWorkflow.definition> = {\n  type: TriggerTypes.Shortcut,\n  name: \"Reverse a string\",\n  description: \"Starts the workflow to reverse a string\",\n  workflow: `#/workflows/${HelloWorldWorkflow.definition.callback_id}`,\n  inputs: {\n    channel: {\n      value: TriggerContextData.Shortcut.channel_id,\n    },\n  },\n};\n\nexport default trigger;\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger for Slack Workflow in TypeScript\nDESCRIPTION: This snippet defines a trigger for a Slack workflow using the Deno Slack SDK. It creates a shortcut trigger that will invoke the HelloWorldWorkflow when activated, demonstrating how to link triggers to workflows in a Slack app.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/src/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Trigger } from \"deno-slack-sdk/types.ts\";\nimport { TriggerContextData, TriggerTypes } from \"deno-slack-api/mod.ts\";\nimport HelloWorldWorkflow from \"../workflows/hello_world.ts\";\n\nconst trigger: Trigger<typeof HelloWorldWorkflow.definition> = {\n  type: TriggerTypes.Shortcut,\n  name: \"Reverse a string\",\n  description: \"Starts the workflow to reverse a string\",\n  workflow: `#/workflows/${HelloWorldWorkflow.definition.callback_id}`,\n  inputs: {\n    channel: {\n      value: TriggerContextData.Shortcut.channel_id,\n    },\n  },\n};\n\nexport default trigger;\n```\n\n----------------------------------------\n\nTITLE: Defining a Datastore in Slack SDK for Deno\nDESCRIPTION: This snippet demonstrates how to define a datastore using the DefineDatastore function from the deno-slack-sdk. It sets up a 'reversals' datastore with string attributes for id, original, and reversed values.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/datastores.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefineDatastore, Schema } from \"deno-slack-sdk/mod.ts\";\n\nexport const ReversalsDatastore = DefineDatastore({\n  name: \"reversals\",\n  attributes: {\n    id: {\n      type: Schema.types.string,\n    },\n    original: {\n      type: Schema.types.string,\n    },\n    reversed: {\n      type: Schema.types.string,\n    },\n  },\n  primary_key: \"id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type in TypeScript for Slack SDK\nDESCRIPTION: Demonstrates how to define a custom type for an incident management system using DefineType. The type includes properties for ID, title, summary, severity and creation date with specific schema validations.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/types.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst IncidentType = DefineType({\n  name: \"incident\",\n  title: \"Incident Ticket\",\n  description: \"Use this to enter an Incident Ticket\",\n  type: Schema.types.object,\n  properties: {\n    id: {\n      type: Schema.types.string,\n      minLength: 3,\n    },\n    title: {\n      type: Schema.types.string,\n    },\n    summary: {\n      type: Schema.types.string,\n    },\n    severity: {\n      type: Schema.types.string,\n    },\n    date_created: {\n      type: Schema.types.number,\n    },\n  },\n  required: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Event in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a custom event called 'IncidentEvent' using the DefineEvent function. It specifies the event's properties, required fields, and additional constraints.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/events.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst IncidentEvent = DefineEvent({\n  name: \"incident\",\n  title: \"Incident\",\n  type: Schema.types.object,\n  properties: {\n    id: { type: Schema.types.string },\n    title: { type: Schema.types.string },\n    summary: { type: Schema.types.string },\n    severity: { type: Schema.types.string },\n    date_created: { type: Schema.types.number },\n  },\n  required: [\"id\", \"title\", \"summary\", \"severity\"],\n  additionalProperties: false, // Setting this to false forces the validation to catch any additional properties\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Slack Function Handler in TypeScript\nDESCRIPTION: Implementation of a custom function handler that processes the input parameters and returns the required output. Shows how to access function context and properly structure the return object.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SlackFunction } from \"deno-slack-sdk/mod.ts\";\n\nexport default SlackFunction(\n  // Pass along the function definition you created earlier using `DefineFunction`\n  DinoFunction,\n  ({ inputs }) => { // Provide any context properties, like `inputs`, `env`, or `token`\n    // Implement your function\n    const { name } = inputs;\n    const dinoname = `${name}asaurus`;\n\n    // Don't forget any required output parameters\n    return { outputs: { dinoname } };\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Approval Function with Input/Output Parameters in TypeScript\nDESCRIPTION: This code defines a Slack function for handling approvals. It specifies the function's callback ID, title, description, source file, and both input and output parameters with their data types and requirements.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-action-handlers.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefineFunction, Schema } from \"deno-slack-sdk/mod.ts\";\n\nexport const ApprovalFunction = DefineFunction({\n  callback_id: \"review_approval\",\n  title: \"Approval\",\n  description: \"Get approval for a request\",\n  source_file: \"functions/approval/mod.ts\", // <-- important! Make sure this is where the logic for your function - which we will write in the next section - exists.\n  input_parameters: {\n    properties: {\n      requester_id: {\n        type: Schema.slack.types.user_id,\n        description: \"Requester\",\n      },\n      approval_channel_id: {\n        type: Schema.slack.types.channel_id,\n        description: \"Approval channel\",\n      },\n    },\n    required: [\n      \"requester_id\",\n      \"approval_channel_id\",\n    ],\n  },\n  output_parameters: {\n    properties: {\n      approved: {\n        type: Schema.types.boolean,\n        description: \"Approved\",\n      },\n      reviewer: {\n        type: Schema.slack.types.user_id,\n        description: \"Reviewer\",\n      },\n      message_ts: {\n        type: Schema.types.string,\n        description: \"Request Message TS\",\n      },\n    },\n    required: [\"approved\", \"reviewer\", \"message_ts\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Slack Function in TypeScript\nDESCRIPTION: This code snippet shows how to define a Slack function using DefineFunction from the Deno Slack SDK, including input and output parameters. The function is designed to handle inspirational quote requests.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-suggestion-handlers.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefineFunction, Schema } from \"deno-slack-sdk/mod.ts\";\n\nexport const QuoteFunction = DefineFunction({\n  callback_id: \"quote\",\n  title: \"Inspire Me\",\n  description: \"Get an inspirational quote\",\n  source_file: \"functions/quote/mod.ts\", // <-- important! Make sure this is where the logic for your function - which we will write in the next section - exists.\n  input_parameters: {\n    properties: {\n      requester_id: {\n        type: Schema.slack.types.user_id,\n        description: \"Requester\",\n      },\n      channel_id: {\n        type: Schema.slack.types.channel_id,\n        description: \"Channel\",\n      },\n    },\n    required: [\n      \"requester_id\",\n      \"channel_id\",\n    ],\n  },\n  output_parameters: {\n    properties: {\n      quote: {\n        type: Schema.types.string,\n        description: \"Quote\",\n      },\n    },\n    required: [\"quote\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Slack Function with Interactivity Support in TypeScript\nDESCRIPTION: This code defines a Slack function that supports interactivity for diary entries. It specifies the callback ID, title, description, source file location, and required input parameters including interactivity and channel_id.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-view-handlers.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefineFunction, Schema } from \"deno-slack-sdk/mod.ts\";\n\nexport const DiaryFunction = DefineFunction({\n  callback_id: \"diary\",\n  title: \"Diary\",\n  description: \"Write a diary entry\",\n  source_file: \"functions/diary/mod.ts\", // <-- important! Make sure this is where the logic for your function - which we will write in the next section - exists.\n  input_parameters: {\n    properties: {\n      interactivity: { // <-- important! This gives Slack a hint that your function will create interactive elements like views\n        type: Schema.slack.types.interactivity,\n      },\n      channel_id: {\n        type: Schema.slack.types.channel_id,\n      },\n    },\n    required: [\"interactivity\"],\n  },\n  output_parameters: {\n    properties: {},\n    required: [],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Datastore in Slack App Manifest\nDESCRIPTION: This code snippet shows how to register a defined datastore in the Slack app manifest. It adds the ReversalsDatastore to the datastores array and includes necessary bot scopes for datastore operations.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/datastores.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default Manifest({\n  name: \"admiring-ox-50\",\n  description: \"Reverse a string\",\n  icon: \"assets/icon.png\",\n  functions: [ReverseFunction],\n  outgoingDomains: [],\n  datastores: [ReversalsDatastore],\n  botScopes: [\n    \"commands\",\n    \"chat:write\",\n    \"chat:write.public\",\n    \"datastore:read\",\n    \"datastore:write\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Type in Manifest\nDESCRIPTION: Shows how to register a custom type in the app's manifest by adding it to the types array. This registration is required for using custom types in the application.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/types.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nManifest({\n  ...\n  types: [IncidentType],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Event in the App Manifest\nDESCRIPTION: This snippet shows how to register the custom event 'IncidentEvent' in the app's manifest using the Manifest function.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/events.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nManifest({\n  ...\n  events: [IncidentEvent],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Function to Slack App Manifest\nDESCRIPTION: Example showing how to register a custom function in the Slack app manifest configuration, including required scopes and function registration.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReverseString } from \"./functions/reverse_definition.ts\";\n\nManifest({\n  name: \"heuristic-tortoise\",\n  description: \"A demo showing how to use custom functions\",\n  icon: \"assets/icon.png\",\n  botScopes: [\"commands\", \"chat:write\", \"chat:write.public\"],\n  functions: [ReverseString], // <-- don't forget this!\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Approval Function with Block Kit Buttons in TypeScript\nDESCRIPTION: This snippet implements the approval function that posts a message containing Block Kit interactive elements (buttons). It posts a message with two buttons (Approve and Deny) and sets the function as incomplete to be completed later by action handlers.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-action-handlers.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SlackFunction } from \"deno-slack-sdk/mod.ts\";\n// ApprovalFunction is the function we defined in the previous section\nimport { ApprovalFunction } from \"./definition.ts\";\n\nexport default SlackFunction(ApprovalFunction, async ({ inputs, client }) => {\n  console.log(\"Incoming approval!\");\n\n  await client.chat.postMessage({\n    channel: inputs.approval_channel_id,\n    blocks: [{\n      \"type\": \"actions\",\n      \"block_id\": \"mah-buttons\",\n      \"elements\": [{\n        type: \"button\",\n        text: {\n          type: \"plain_text\",\n          text: \"Approve\",\n        },\n        action_id: \"approve_request\",\n        style: \"primary\",\n      }, {\n        type: \"button\",\n        text: {\n          type: \"plain_text\",\n          text: \"Deny\",\n        },\n        action_id: \"deny_request\",\n        style: \"danger\",\n      }],\n    }],\n  });\n  // Important to set completed: false! We will set the function's complete\n  // status later - in our action handler\n  return {\n    completed: false,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Slack Function with Block Kit Elements\nDESCRIPTION: This snippet shows the implementation of a Slack function that posts a message containing interactive Block Kit elements, specifically an external select dropdown menu and a button.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-suggestion-handlers.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SlackFunction } from \"deno-slack-sdk/mod.ts\";\n// QuoteFunction is the function we defined in the previous section\nimport { QuoteFunction } from \"./definition.ts\";\n\nexport default SlackFunction(QuoteFunction, async ({ inputs, client }) => {\n  console.log(\"Incoming quote request!\");\n\n  await client.chat.postMessage({\n    channel: inputs.channel_id,\n    blocks: [{\n      \"type\": \"actions\",\n      \"block_id\": \"so-inspired\",\n      \"elements\": [{\n        type: \"external_select\",\n        placeholder: {\n          type: \"plain_text\",\n          text: \"Inspire\",\n        },\n        action_id: \"ext_select_input\",\n      }, {\n        type: \"button\",\n        text: {\n          type: \"plain_text\",\n          text: \"Post\",\n        },\n        action_id: \"post_quote\",\n      }],\n    }],\n  });\n  // Important to set completed: false! We should set the function's complete\n  // status later - in the action handler responding to the button click\n  return {\n    completed: false,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Opening a View from a Slack Function in TypeScript\nDESCRIPTION: This code implements a Slack function that opens a modal view using the interactivity_pointer from the function inputs. It creates a diary entry form with a multiline text input and configures submit/close buttons with a callback ID for event routing.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-view-handlers.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SlackFunction } from \"deno-slack-sdk/mod.ts\";\n// DiaryFunction is the function we defined in the previous section\nimport { DiaryFunction } from \"./definition.ts\";\n\nexport default SlackFunction(DiaryFunction, async ({ inputs, client }) => {\n  console.log('Someone might want to write a diary entry...');\n\n  await client.views.open({\n    trigger_id: inputs.interactivity.interactivity_pointer,\n    view: {\n      \"type\": \"modal\",\n      \"title\": {\n        \"type\": \"plain_text\",\n        \"text\": \"Modal title\",\n      },\n      \"blocks\": [\n        {\n          \"type\": \"input\",\n          \"block_id\": \"section1\",\n          \"element\": {\n            \"type\": \"plain_text_input\",\n            \"action_id\": \"diary_input\",\n            \"multiline\": true,\n            \"placeholder\": {\n              \"type\": \"plain_text\",\n              \"text\": \"What is on your mind today?\",\n            },\n          },\n          \"label\": {\n            \"type\": \"plain_text\",\n            \"text\": \"Diary Entry\",\n          },\n          \"hint\": {\n            \"type\": \"plain_text\",\n            \"text\": \"Don't worry, no one but you will see this.\",\n          },\n        },\n      ],\n      \"close\": {\n        \"type\": \"plain_text\",\n        \"text\": \"Cancel\",\n      },\n      \"submit\": {\n        \"type\": \"plain_text\",\n        \"text\": \"Save\",\n      },\n      \"callback_id\": \"view_identifier_12\", // <-- remember this ID, we will use it to route events to handlers!\n      \"notify_on_close\": true, // <-- this must be defined in order to trigger `view_closed` events!\n    },\n  });\n  // Important to set completed: false! We will set the function's complete\n  // status later - in our view submission handler\n  return {\n    completed: false,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Datastore in Slack Custom Function\nDESCRIPTION: This snippet illustrates how to use a datastore within a custom Slack function. It demonstrates creating a new record in the 'reversals' datastore using the client.apps.datastore.put method, with error handling.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/datastores.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SlackFunction } from \"deno_slack_api/mod.ts\";\n\nexport default SlackFunction(ReverseFunction, async ({ client, inputs }) => {\n  const original = inputs.stringToReverse;\n  const recordId = crypto.randomUUID();\n  const reversed = inputs.stringToReverse.split(\"\").reverse().join(\"\");\n\n  const putResp = await client.apps.datastore.put({\n    datastore: \"reversals\",\n    item: {\n      id: recordId,\n      original,\n      reversed,\n    },\n  });\n  if (!putResp.ok) {\n    return {\n      error: putResp.error,\n    };\n  }\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Type as Function Parameter\nDESCRIPTION: Example of how to reference and use a custom type as a function parameter, including how to override specific properties from the type definition.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/types.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninput_parameters: {\n  incident: : {\n    title: 'A Special Incident',\n    type: IncidentType\n  }\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Event in Workflow Step for Posting Message\nDESCRIPTION: This example demonstrates how to use the custom event 'IncidentEvent' when adding a step to post a message in a workflow, including the event metadata.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/events.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nMyWorkflow.addStep(Schema.slack.functions.SendMessage, {\n  channel_id: MyWorkflow.inputs.channel_id,\n  message: \"We have an incident!\",\n  metadata: {\n    event_type: IncidentEvent,\n    event_payload: {\n      id: MyWorkflow.inputs.incident_id,\n      title: MyWorkflow.inputs.incident_title,\n      summary: MyWorkflow.inputs.incident_summary,\n      severity: MyWorkflow.inputs.incident_severity,\n      date_created: MyWorkflow.inputs.incident_date, // Since this isn't required, it doesn't need to exist to pass validation\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Block Action Handlers to Slack Function in TypeScript\nDESCRIPTION: This code demonstrates how to add Block Kit action handlers to a Slack function. It handles user interactions with the Approve/Deny buttons, updates the original message to show the approval result, and completes the function with appropriate outputs.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-action-handlers.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default SlackFunction(ApprovalFunction, async ({ inputs, client }) => {\n  // ... the rest of your ApprovalFunction logic here ...\n}).addBlockActionsHandler(\n  [\"approve_request\", \"deny_request\"], // The first argument to addBlockActionsHandler can accept an array of action_id strings, among many other formats!\n  // Check the API reference at the end of this document for the full list of supported options\n  async ({ action, body, client }) => { // The second argument is the handler function itself\n    console.log(\"Incoming action handler invocation\", action);\n\n    const outputs = {\n      reviewer: body.user.id,\n      // Based on which button was pressed - determined via action_id - we can\n      // determine whether the request was approved or not.\n      approved: action.action_id === \"approve_request\",\n      message_ts: body.message.ts,\n    };\n\n    // Remove the button from the original message using the chat.update API\n    // and replace its contents with the result of the approval.\n    await client.chat.update({\n      channel: body.function_data.inputs.approval_channel_id,\n      ts: outputs.message_ts,\n      blocks: [{\n        type: \"context\",\n        elements: [\n          {\n            type: \"mrkdwn\",\n            text: `${\n              outputs.approved ? \" :white_check_mark: Approved\" : \":x: Denied\"\n            } by <@${outputs.reviewer}>`,\n          },\n        ],\n      }],\n    });\n\n    // And now we can mark the function as 'completed' - which is required as\n    // we explicitly marked it as incomplete in the main function handler.\n    await client.functions.completeSuccess({\n      function_execution_id: body.function_data.execution_id,\n      outputs,\n    });\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Block Kit Suggestion Handler for Dynamic Dropdown Options\nDESCRIPTION: This code demonstrates how to add a Block Suggestion Handler to a Slack function that fetches dynamic options from an external API and formats them for a dropdown menu.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-suggestion-handlers.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default SlackFunction(QuoteFunction, async ({ inputs, client }) => {\n  // ... the rest of your QuoteFunction logic here ...\n}).addBlockSuggestionHandler(\n  \"ext_select_input\", // The first argument to addBlockActionsHandler can accept an action_id string, among many other formats!\n  // Check the API reference at the end of this document for the full list of supported options\n  async ({ body, client }) => { // The second argument is the handler function itself\n    console.log(\"Incoming suggestion handler invocation\", body);\n    // Fetch some inspirational quotes\n    const apiResp = await fetch(\n      \"https://motivational-quote-api.herokuapp.com/quotes\",\n    );\n    const quotes = await apiResp.json();\n    console.log(\"Returning\", quotes.length, \"quotes\");\n    const opts = {\n      \"options\": quotes.map((q) => ({\n        value: `${q.id}`,\n        text: { type: \"plain_text\", text: q.quote.slice(0, 70) },\n      })),\n    };\n    return opts;\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Block Actions Handler to Open a View in TypeScript\nDESCRIPTION: This code demonstrates how to add a Block Actions Handler to a Slack function for opening a view. It uses the interactivity_pointer from the action handler's body parameter instead of the function's inputs to obtain the trigger_id.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-view-handlers.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default SlackFunction(DiaryFunction, async ({ inputs, client }) => {\n  // ... the rest of your DiaryFunction logic here ...\n}).addBlockActionsHandler(\n  \"deny_request\",\n  async ({ action, body, client }) => {\n    await client.views.open({\n      trigger_id: body.interactivity.interactivity_pointer,\n      view: {/* your view object goes here */},\n    });\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Function Step to Workflow\nDESCRIPTION: Demonstrates how to add a custom function (DinoFunction) as a workflow step, using workflow input parameters as function inputs.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/workflows.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefineWorkflow } from \"slack-cloud-sdk/mod.ts\";\nimport { DinoFunction } from '../functions/dino.ts';\n\nconst workflow = DefineWorkflow({...});\n\nconst step1 = workflow.addStep(DinoFunction, {\n  name: workflow.inputs.a_string,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Slack Message Step to Workflow\nDESCRIPTION: Shows how to add a Slack-provided function (send_message) as a workflow step, using both workflow inputs and outputs from previous steps.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/workflows.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst step1 = workflow.addStep(...);\n\nworkflow.addStep(\"slack#/functions/send_message\", {\n  channel: workflow.inputs.a_channel,\n  message: `A dinosaur name: ${step1.outputs.dinoname}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Event in Function Runtime for Posting Message\nDESCRIPTION: This snippet shows how to use the custom event 'IncidentEvent' when posting a message at function runtime using the Slack client.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/events.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.chat.postMessage({\n  channel_id: inputs.channel_id,\n  message: \"We have an incident!\",\n  metadata: {\n    event_type: IncidentEvent,\n    event_payload: {\n      id: inputs.incident_id,\n      title: inputs.incident_title,\n      summary: inputs.incident_summary,\n      severity: inputs.incident_severity,\n      date_created: inputs.incident_date, // Since this isn't required, it doesn't need to exist to pass validation\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining BlockActionConstraintObject Type in TypeScript\nDESCRIPTION: This type definition specifies the structure of a BlockActionConstraintObject. It can have two optional properties: block_id and action_id, both of type BlockActionConstraintField. These properties are used to match incoming actions in Slack apps.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-action-handlers.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype BlockActionConstraintObject = {\n  block_id?: BlockActionConstraintField;\n  action_id?: BlockActionConstraintField;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BlockActionConstraintObject Type in TypeScript\nDESCRIPTION: Defines a TypeScript type for block action constraints that can contain optional action_id and block_id fields. Both fields must match incoming suggestions if provided, or only the provided field must match if only one is specified.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-suggestion-handlers.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype BlockActionConstraintObject = {\n  block_id?: BlockActionConstraintField;\n  action_id?: BlockActionConstraintField;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing View Handlers with SlackFunction in TypeScript\nDESCRIPTION: Example of implementing both view submission and view closed handlers in a Slack Function. The handlers are chained off the SlackFunction definition and use regular expressions to match the view's callback_id.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-view-handlers.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default SlackFunction(DiaryFunction, async ({ inputs, client }) => {\n  // ... the rest of your DiaryFunction logic here ...\n}).addViewSubmissionHandler(\n  /view/, // The first argument to any of the addView*Handler methods can accept a string, array of strings, or RegExp.\n  // This first argument will be used to match the view's `callback_id`\n  // Check the API reference at the end of this document for the full list of supported options\n  async ({ view, body, token }) => { // The second argument is the handler function itself\n    console.log(\"Incoming view submission handler invocation\", body);\n  },\n)\n  .addViewClosedHandler(\n    /view/,\n    async ({ view, body, token }) => {\n      console.log(\"Incoming view closed handler invocation\", body);\n    },\n  );\n```\n\n----------------------------------------\n\nTITLE: Using Function Reference String in Workflow\nDESCRIPTION: Demonstrates how to add a workflow step using a local reference string instead of a direct function reference. Shows alternative syntax for referencing custom functions.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/workflows.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst step1 = workflow.addStep(\"#/functions/my_workflow\", {\n  name: workflow.inputs.a_string,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Metadata Trigger Using Custom Event\nDESCRIPTION: This example demonstrates how to create a trigger that watches for messages with metadata matching the custom event 'IncidentEvent' schema and executes a workflow when the conditions are met.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/events.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IncidentEvent } from \"./manifest.ts\";\n\nconst trigger: Trigger = {\n  type: \"event\",\n  name: \"Incident Metadata Posted\",\n  inputs: {\n    id: \"{{data.metadata.event_payload.incident_id}}\",\n    title: \"{{data.metadata.event_payload.incident_title}}\",\n    summary: \"{{data.metadata.event_payload.incident_summary}}\",\n    severity: \"{{data.metadata.event_payload.incident_severity}}\",\n    date_created: \"{{data.metadata.event_payload.incident_date}}\",\n  },\n  workflow: \"#/workflows/start_incident\",\n  event: {\n    event_type: \"slack#/events/message_metadata_posted\",\n    metadata_event_type: IncidentEvent,\n    channel_ids: [\"C012354\"], // The channel that needs to be watched for message metadata being posted\n  },\n};\n\nexport default trigger;\n```\n\n----------------------------------------\n\nTITLE: Comparing API vs Response Actions for View Modifications in TypeScript\nDESCRIPTION: Demonstrates two equivalent methods for pushing a new view: one using the client.views.push API method and another using the response_action return value. Both approaches yield identical behavior.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-view-handlers.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default SlackFunction(DiaryFunction, async ({ inputs, client }) => {\n  // ... the rest of your DiaryFunction logic here ...\n}).addViewSubmissionHandler(/view/, async ({ client, body }) => {\n  // A view submission handler that pushes a new view using the API\n  await client.views.push({\n    trigger_id: body.trigger_id,\n    view: {/* your view object goes here */},\n  });\n}).addSubmissionHandler(/view/, async () => {\n  // A view submission handler that pushes a new view using the `response_action`\n  return {\n    response_action: \"push\",\n    view: {/* your view object goes here */},\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Registering View Submission Handler in TypeScript\nDESCRIPTION: Example of registering a view submission handler using the addViewSubmissionHandler method. The handler is triggered when a view with a matching callback_id is submitted.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-view-handlers.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nSlackFunction({ ... }).addViewSubmissionHandler(\"my_view_callback_id\", async (ctx) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Registering View Closed Handler in TypeScript\nDESCRIPTION: Example of registering a view closed handler using the addViewClosedHandler method. The handler is triggered when a view with a matching callback_id is closed and notify_on_close is set to true.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/docs/functions-view-handlers.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nSlackFunction({ ... }).addViewClosedHandler(\"my_view_callback_id\", async (ctx) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Running the Generate Script for Slack Functions\nDESCRIPTION: Command to execute the generate script from the _scripts directory, which creates TypeScript files for Slack functions based on functions.json data.\nSOURCE: https://github.com/slackapi/deno-slack-sdk/blob/main/src/schema/slack/functions/_scripts/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n> ./generate\n```"
  }
]