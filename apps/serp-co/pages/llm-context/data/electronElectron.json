[
  {
    "owner": "electron",
    "repo": "electron",
    "content": "TITLE: Creating and Loading a Basic BrowserWindow in Electron\nDESCRIPTION: Demonstrates how to create a new browser window in the main process and load either a remote URL or local HTML file. This is the most basic initialization pattern for Electron windows.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In the main process.\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ width: 800, height: 600 })\n\n// Load a remote URL\nwin.loadURL('https://github.com')\n\n// Or load a local HTML file\nwin.loadFile('index.html')\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Updater in Electron\nDESCRIPTION: JavaScript code snippet demonstrating how to import required modules, construct the update server URL, and set up the auto-updater in an Electron application's main process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, autoUpdater, dialog } = require('electron')\n\nconst server = 'https://your-deployment-url.com'\nconst url = `${server}/update/${process.platform}/${app.getVersion()}`\n\nautoUpdater.setFeedURL({ url })\n\nsetInterval(() => {\n  autoUpdater.checkForUpdates()\n}, 60000)\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Headers in Electron\nDESCRIPTION: This code snippet demonstrates how to modify the User-Agent header for specific URLs using the `webRequest.onBeforeSendHeaders` method in Electron. It shows how to define a filter to target specific URLs and a listener function to modify the request headers before they are sent.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-request.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session } = require('electron')\n\n// Modify the user agent for all requests to the following urls.\nconst filter = {\n  urls: ['https://*.github.com/*', '*://electron.github.io/*']\n}\n\nsession.defaultSession.webRequest.onBeforeSendHeaders(filter, (details, callback) => {\n  details.requestHeaders['User-Agent'] = 'MyAgent'\n  callback({ requestHeaders: details.requestHeaders })\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing Electron APIs Securely in Preload Scripts\nDESCRIPTION: This snippet demonstrates the correct way to expose Electron APIs to web content using contextBridge. It shows bad practices of directly exposing IPC methods, and a good practice of wrapping the IPC call to limit exposure of the event object.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\ncontextBridge.exposeInMainWorld('electronAPI', {\n  on: ipcRenderer.on\n})\n\n// Also bad\ncontextBridge.exposeInMainWorld('electronAPI', {\n  onUpdateCounter: (callback) => ipcRenderer.on('update-counter', callback)\n})\n\n// Good\ncontextBridge.exposeInMainWorld('electronAPI', {\n  onUpdateCounter: (callback) => ipcRenderer.on('update-counter', (_event, value) => callback(value))\n})\n```\n\n----------------------------------------\n\nTITLE: Quick Start Electron Project Setup\nDESCRIPTION: Commands to clone and run the electron-quick-start repository, which demonstrates a minimal Electron application setup.\nSOURCE: https://github.com/electron/electron/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/electron/electron-quick-start\ncd electron-quick-start\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Exposing IPC Communication via Preload Script for File Dialog\nDESCRIPTION: Uses contextBridge to safely expose the ipcRenderer.invoke API to the renderer process. Creates an electronAPI object with an openFile method that returns a Promise with the selected file path.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  openFile: () => ipcRenderer.invoke('dialog:openFile')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring BrowserWindow with Secure Web Preferences Using Preload Script\nDESCRIPTION: Recommended secure configuration for a BrowserWindow using a preload script instead of enabling Node.js integration directly in the renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Good\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    preload: path.join(app.getAppPath(), 'preload.js')\n  }\n})\n\nmainWindow.loadURL('https://example.com')\n```\n\n----------------------------------------\n\nTITLE: Safe ipcRenderer Exposure Pattern\nDESCRIPTION: Security-focused example showing how to safely expose specific ipcRenderer functionality through contextBridge rather than sending the entire module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Preload (Isolated World)\ncontextBridge.exposeInMainWorld('electron', {\n  onMyEventName: (callback) => ipcRenderer.on('MyEventName', (e, ...args) => callback(args))\n})\n```\n\n----------------------------------------\n\nTITLE: Main to Renderer Communication with WebContents\nDESCRIPTION: Implements a counter application demonstrating main-to-renderer process communication using WebContents.send. Includes menu integration and bidirectional messaging.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, Menu, ipcMain } = require('electron')\nconst path = require('node:path')\n\nfunction createWindow () {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  const menu = Menu.buildFromTemplate([\n    {\n      label: app.name,\n      submenu: [\n        {\n          click: () => mainWindow.webContents.send('update-counter', 1),\n          label: 'Increment'\n        },\n        {\n          click: () => mainWindow.webContents.send('update-counter', -1),\n          label: 'Decrement'\n        }\n      ]\n    }\n  ])\n  Menu.setApplicationMenu(menu)\n\n  mainWindow.loadFile('index.html')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  onUpdateCounter: (callback) => ipcRenderer.on('update-counter', (_event, value) => callback(value)),\n  counterValue: (value) => ipcRenderer.send('counter-value', value)\n})\n```\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\">\n    <title>Menu Counter</title>\n  </head>\n  <body>\n    Current value: <strong id=\"counter\">0</strong>\n    <script src=\"./renderer.js\"></script>\n  </body>\n</html>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst counter = document.getElementById('counter')\n\nwindow.electronAPI.onUpdateCounter((value) => {\n  const oldValue = Number(counter.innerText)\n  const newValue = oldValue + value\n  counter.innerText = newValue.toString()\n  window.electronAPI.counterValue(newValue)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Invokable IPC Calls in Main Process with ipcMain\nDESCRIPTION: This snippet demonstrates how to use ipcMain.handle() to process invokable IPC calls from renderer processes. The handler returns a Promise whose result will be sent back to the caller.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nipcMain.handle('my-invokable-ipc', async (event, ...args) => {\n  const result = await somePromise(...args)\n  return result\n})\n```\n\n----------------------------------------\n\nTITLE: Loading URL in Electron BrowserWindow - JavaScript\nDESCRIPTION: This snippet demonstrates how to load a URL in an Electron BrowserWindow instance using the 'loadURL' method. Dependencies include the 'electron' module. The URL can be either a local file path or a remote address. The method supports options like 'httpReferrer' and 'userAgent', and utilizes the Node 'url.format' for formatting file URLs. Expected input is a URL string and optional configuration options, and it returns a Promise resolving upon successful loading.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\nconst url = require('url').format({\n  protocol: 'file',\n  slashes: true,\n  pathname: require('node:path').join(__dirname, 'index.html')\n})\n\nwin.loadURL(url)\n```\n\n----------------------------------------\n\nTITLE: Exposing API from Preload Script to Renderer\nDESCRIPTION: Example of exposing an API from an isolated preload script to a renderer, creating a bridge between the isolated context and main world using the contextBridge module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Preload (Isolated World)\nconst { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld(\n  'electron',\n  {\n    doThing: () => ipcRenderer.send('do-a-thing')\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: WebView Element Configuration for Web Security\nDESCRIPTION: HTML examples showing insecure configuration with disabled web security and the recommended secure configuration.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- Bad -->\n<webview disablewebsecurity src=\"page.html\"></webview>\n\n<!-- Good -->\n<webview src=\"page.html\"></webview>\n```\n\n----------------------------------------\n\nTITLE: Secure BrowserWindow Configuration with Default Settings\nDESCRIPTION: Recommended way to create a BrowserWindow with default security settings that maintain web security features.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Good\nconst mainWindow = new BrowserWindow()\n```\n\n----------------------------------------\n\nTITLE: Exposing IPC Communication via Preload Script for Window Title Setting\nDESCRIPTION: Uses contextBridge to safely expose the ipcRenderer.send API to the renderer process. Creates an electronAPI object with a setTitle method that can be called from the renderer.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  setTitle: (title) => ipcRenderer.send('set-title', title)\n})\n```\n\n----------------------------------------\n\nTITLE: Limiting Navigation in Electron App\nDESCRIPTION: Demonstrates how to restrict navigation to specific domains using URL validation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst { URL } = require('url')\nconst { app } = require('electron')\n\napp.on('web-contents-created', (event, contents) => {\n  contents.on('will-navigate', (event, navigationUrl) => {\n    const parsedUrl = new URL(navigationUrl)\n\n    if (parsedUrl.origin !== 'https://example.com') {\n      event.preventDefault()\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Making Buttons Non-Draggable in CSS\nDESCRIPTION: This CSS snippet ensures buttons remain clickable by setting them as non-draggable regions within a draggable window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbutton {\n  app-region: no-drag;\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing APIs with Context Isolation using contextBridge in JavaScript\nDESCRIPTION: Demonstrates how to safely expose APIs from the preload script to the renderer process using contextBridge when context isolation is enabled.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// preload with contextIsolation enabled\nconst { contextBridge } = require('electron')\n\ncontextBridge.exposeInMainWorld('myAPI', {\n  doAThing: () => {}\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// use the exposed API in the renderer\nwindow.myAPI.doAThing()\n```\n\n----------------------------------------\n\nTITLE: Using Typed APIs in Renderer Process with TypeScript\nDESCRIPTION: Demonstrates how to use the typed API in the renderer process, benefiting from TypeScript's type checking.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.electronAPI.loadPreferences()\n```\n\n----------------------------------------\n\nTITLE: Unsafe API Exposure with contextBridge in JavaScript\nDESCRIPTION: An example of unsafe code that directly exposes a powerful API without argument filtering, which should be avoided.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ Bad code\ncontextBridge.exposeInMainWorld('myAPI', {\n  send: ipcRenderer.send\n})\n```\n\n----------------------------------------\n\nTITLE: Renderer to Renderer Communication Patterns in Electron\nDESCRIPTION: Documentation explaining two methods for enabling communication between renderer processes: using the main process as a message broker, or utilizing MessagePort for direct communication after initial setup.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n* Use the main process as a message broker between renderers. This would involve sending a message\\nfrom one renderer to the main process, which would forward the message to the other renderer.\\n* Pass a [MessagePort][] from the main process to both renderers. This will allow direct communication\\nbetween renderers after the initial setup.\n```\n\n----------------------------------------\n\nTITLE: Implementing Two-Way IPC with ipcMain.handle for File Dialog\nDESCRIPTION: Sets up a two-way IPC handler in the main process using ipcMain.handle. When invoked, it opens a native file dialog and returns the selected file path to the renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, dialog, ipcMain } = require('electron')\nconst path = require('node:path')\n\n// ...\n\nasync function handleFileOpen () {\n  const { canceled, filePaths } = await dialog.showOpenDialog({})\n  if (!canceled) {\n    return filePaths[0]\n  }\n}\n\nfunction createWindow () {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n  mainWindow.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  ipcMain.handle('dialog:openFile', handleFileOpen)\n  createWindow()\n})\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Safe ipcRenderer Bridge in Renderer\nDESCRIPTION: Example showing how to use a safely exposed ipcRenderer event handler in the main world renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Renderer (Main World)\nwindow.electron.onMyEventName(data => { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: Setting Permission Check Handler in Electron's Session API\nDESCRIPTION: Configures a handler function to respond to permission checks for an Electron session. The example shows how to allow notifications for specific hosts while denying all other permission requests.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session } = require('electron')\nconst url = require('url')\nsession.fromPartition('some-partition').setPermissionCheckHandler((webContents, permission, requestingOrigin) => {\n  if (new URL(requestingOrigin).hostname === 'some-host' && permission === 'notifications') {\n    return true // granted\n  }\n\n  return false // denied\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Windows in Electron Main Process\nDESCRIPTION: This snippet demonstrates how to create a browser window in the main process using the BrowserWindow module. It initializes a window with specified dimensions, loads a URL, and accesses the window's webContents object.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ width: 800, height: 1500 })\nwin.loadURL('https://github.com')\n\nconst contents = win.webContents\nconsole.log(contents)\n```\n\n----------------------------------------\n\nTITLE: Exposing Dark Mode API in Electron Preload Script\nDESCRIPTION: This JavaScript snippet is a preload script for Electron that exposes a darkMode API to the renderer process. It uses contextBridge to securely expose methods for toggling dark mode and resetting to system theme.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('darkMode', {\n  toggle: () => ipcRenderer.invoke('dark-mode:toggle'),\n  system: () => ipcRenderer.invoke('dark-mode:system')\n})\n```\n\n----------------------------------------\n\nTITLE: Handling App Commands in Windows Browser Window\nDESCRIPTION: Example of handling app-command events in Electron BrowserWindow on Windows, specifically implementing backward navigation when the mouse back button is pressed.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.on('app-command', (e, cmd) => {\n  // Navigate the window back when the user hits their mouse back button\n  if (cmd === 'browser-backward' && win.webContents.canGoBack()) {\n    win.webContents.goBack()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Dark Mode Toggle in Electron Renderer Process\nDESCRIPTION: This JavaScript snippet adds event listeners to the dark mode toggle and reset buttons in the renderer process. It uses the exposed darkMode API to communicate with the main process and update the UI accordingly.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('toggle-dark-mode').addEventListener('click', async () => {\n  const isDarkMode = await window.darkMode.toggle()\n  document.getElementById('theme-source').innerHTML = isDarkMode ? 'Dark' : 'Light'\n})\n\ndocument.getElementById('reset-to-system').addEventListener('click', async () => {\n  await window.darkMode.system()\n  document.getElementById('theme-source').innerHTML = 'System'\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application File Paths in Electron\nDESCRIPTION: The app.getPath(name) method retrieves paths to special directories or files based on the provided name parameter. It returns a string path or throws an Error on failure.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napp.getPath(name)\n```\n\n----------------------------------------\n\nTITLE: Validating IPC Message Senders\nDESCRIPTION: Demonstrates how to properly validate IPC message senders to prevent unauthorized access.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\nipcMain.handle('get-secrets', () => {\n  return getSecrets()\n})\n\n// Good\nipcMain.handle('get-secrets', (e) => {\n  if (!validateSender(e.senderFrame)) return null\n  return getSecrets()\n})\n\nfunction validateSender (frame) {\n  // Value the host of the URL using an actual URL parser and an allowlist\n  if ((new URL(frame.url)).host === 'electronjs.org') return true\n  return false\n}\n```\n\n----------------------------------------\n\nTITLE: Properly Exposing APIs from Preload to Renderer using contextBridge\nDESCRIPTION: This snippet demonstrates the correct way to expose APIs from a preload script to a renderer process using the contextBridge module. This safely exposes functionality across contextIsolation boundaries.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { contextBridge } = require('electron')\n\ncontextBridge.exposeInMainWorld('myAPI', {\n  desktop: true\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Application Menu with Template API in Electron\nDESCRIPTION: Example demonstrating how to create an application menu in Electron using the template API. This snippet shows platform-specific menu structures for macOS and Windows/Linux with predefined roles for common menu functions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, Menu } = require('electron')\n\nconst isMac = process.platform === 'darwin'\n\nconst template = [\n  // { role: 'appMenu' }\n  ...(isMac\n    ? [{\n        label: app.name,\n        submenu: [\n          { role: 'about' },\n          { type: 'separator' },\n          { role: 'services' },\n          { type: 'separator' },\n          { role: 'hide' },\n          { role: 'hideOthers' },\n          { role: 'unhide' },\n          { type: 'separator' },\n          { role: 'quit' }\n        ]\n      }]\n    : []),\n  // { role: 'fileMenu' }\n  {\n    label: 'File',\n    submenu: [\n      isMac ? { role: 'close' } : { role: 'quit' }\n    ]\n  },\n  // { role: 'editMenu' }\n  {\n    label: 'Edit',\n    submenu: [\n      { role: 'undo' },\n      { role: 'redo' },\n      { type: 'separator' },\n      { role: 'cut' },\n      { role: 'copy' },\n      { role: 'paste' },\n      ...(isMac\n        ? [\n            { role: 'pasteAndMatchStyle' },\n            { role: 'delete' },\n            { role: 'selectAll' },\n            { type: 'separator' },\n            {\n              label: 'Speech',\n              submenu: [\n                { role: 'startSpeaking' },\n                { role: 'stopSpeaking' }\n              ]\n            }\n          ]\n        : [\n            { role: 'delete' },\n            { type: 'separator' },\n            { role: 'selectAll' }\n          ])\n    ]\n  },\n  // { role: 'viewMenu' }\n  {\n    label: 'View',\n    submenu: [\n      { role: 'reload' },\n      { role: 'forceReload' },\n      { role: 'toggleDevTools' },\n      { type: 'separator' },\n      { role: 'resetZoom' },\n      { role: 'zoomIn' },\n      { role: 'zoomOut' },\n      { type: 'separator' },\n      { role: 'togglefullscreen' }\n    ]\n  },\n  // { role: 'windowMenu' }\n  {\n    label: 'Window',\n    submenu: [\n      { role: 'minimize' },\n      { role: 'zoom' },\n      ...(isMac\n        ? [\n            { type: 'separator' },\n            { role: 'front' },\n            { type: 'separator' },\n            { role: 'window' }\n          ]\n        : [\n            { role: 'close' }\n          ])\n    ]\n  },\n  {\n    role: 'help',\n    submenu: [\n      {\n        label: 'Learn More',\n        click: async () => {\n          const { shell } = require('electron')\n          await shell.openExternal('https://electronjs.org')\n        }\n      }\n    ]\n  }\n]\n\nconst menu = Menu.buildFromTemplate(template)\nMenu.setApplicationMenu(menu)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom macOS Dock Menu in Electron\nDESCRIPTION: This example demonstrates how to create a custom dock menu for a macOS Electron application. It shows how to build a menu with various options including nested submenus, then set it using app.dock.setMenu. The code also includes standard Electron application lifecycle handling.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/macos-dock.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, Menu } = require('electron/main')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\nconst dockMenu = Menu.buildFromTemplate([\n  {\n    label: 'New Window',\n    click () { console.log('New Window') }\n  }, {\n    label: 'New Window with Settings',\n    submenu: [\n      { label: 'Basic' },\n      { label: 'Pro' }\n    ]\n  },\n  { label: 'New Command...' }\n])\n\napp.whenReady().then(() => {\n  app.dock?.setMenu(dockMenu)\n}).then(createWindow)\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Controlling Window Creation in Electron\nDESCRIPTION: Shows how to handle window creation requests and safely handle external URL opening.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, shell } = require('electron')\n\napp.on('web-contents-created', (event, contents) => {\n  contents.setWindowOpenHandler(({ url }) => {\n    if (isSafeForExternalOpen(url)) {\n      setImmediate(() => {\n        shell.openExternal(url)\n      })\n    }\n\n    return { action: 'deny' }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Complex API with contextBridge\nDESCRIPTION: Example of creating a complex API with nested objects, promises, async functions, and data structures using contextBridge.exposeInMainWorld.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld(\n  'electron',\n  {\n    doThing: () => ipcRenderer.send('do-a-thing'),\n    myPromises: [Promise.resolve(), Promise.reject(new Error('whoops'))],\n    anAsyncFunction: async () => 123,\n    data: {\n      myFlags: ['a', 'b', 'c'],\n      bootTime: 1234\n    },\n    nestedAPI: {\n      evenDeeper: {\n        youCanDoThisAsMuchAsYouWant: {\n          fn: () => ({\n            returnData: 123\n          })\n        }\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Exposed API in Renderer\nDESCRIPTION: Example of how to access an API that was exposed through contextBridge from the main world renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Renderer (Main World)\n\nwindow.electron.doThing()\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Windows in Electron\nDESCRIPTION: Shows how to create a modal window that disables its parent window while active. This requires setting both the parent and modal options when creating the window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst top = new BrowserWindow()\nconst child = new BrowserWindow({ parent: top, modal: true, show: false })\nchild.loadURL('https://github.com')\nchild.once('ready-to-show', () => {\n  child.show()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Loading a BrowserWindow in Electron\nDESCRIPTION: Example of creating a new BrowserWindow instance with specific dimensions and loading a URL into it. This demonstrates the basic window initialization pattern in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n// In this example `win` is our instance\nconst win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com')\n```\n\n----------------------------------------\n\nTITLE: Registering Global Keyboard Shortcuts in Electron\nDESCRIPTION: This snippet shows how to register global keyboard shortcuts using the globalShortcut module in Electron. Global shortcuts are triggered even when the application does not have keyboard focus. The CommandOrControl combination handles the difference between macOS (Command) and Windows/Linux (Control).\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, globalShortcut } = require('electron/main')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  globalShortcut.register('Alt+CommandOrControl+I', () => {\n    console.log('Electron loves global shortcuts!')\n  })\n}).then(createWindow)\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete main.js with BrowserWindow Implementation\nDESCRIPTION: Full main.js file that creates a browser window and loads the HTML file. It imports necessary Electron modules, defines a window creation function, and executes it when the app is ready.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\n\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  createWindow()\n})\n```\n\n----------------------------------------\n\nTITLE: DNS Configuration in Electron\nDESCRIPTION: Example demonstrating how to configure secure DNS settings in an Electron application using the configureHostResolver API. Shows setup for secure DNS mode with CloudFlare DNS server.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.whenReady().then(() => {\n  app.configureHostResolver({\n    secureDnsMode: 'secure',\n    secureDnsServers: [\n      'https://cloudflare-dns.com/dns-query'\n    ]\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: In-App Purchase Integration in Electron JS\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `inAppPurchase` module in Electron to implement in-app purchases. It initializes the module, listens for transaction updates, handles different transaction states (purchasing, purchased, failed, restored, deferred), retrieves product information, and initiates a purchase. Replace the `PRODUCT_IDS` with your actual product identifiers defined in iTunes Connect.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/in-app-purchases.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Main process\nconst { inAppPurchase } = require('electron')\nconst PRODUCT_IDS = ['id1', 'id2']\n\n// Listen for transactions as soon as possible.\ninAppPurchase.on('transactions-updated', (event, transactions) => {\n  if (!Array.isArray(transactions)) {\n    return\n  }\n\n  // Check each transaction.\n  for (const transaction of transactions) {\n    const payment = transaction.payment\n\n    switch (transaction.transactionState) {\n      case 'purchasing':\n        console.log(`Purchasing ${payment.productIdentifier}...`)\n        break\n\n      case 'purchased': {\n        console.log(`${payment.productIdentifier} purchased.`)\n\n        // Get the receipt url.\n        const receiptURL = inAppPurchase.getReceiptURL()\n\n        console.log(`Receipt URL: ${receiptURL}`)\n\n        // Submit the receipt file to the server and check if it is valid.\n        // @see https://developer.apple.com/library/content/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html\n        // ...\n        // If the receipt is valid, the product is purchased\n        // ...\n\n        // Finish the transaction.\n        inAppPurchase.finishTransactionByDate(transaction.transactionDate)\n\n        break\n      }\n\n      case 'failed':\n\n        console.log(`Failed to purchase ${payment.productIdentifier}.`)\n\n        // Finish the transaction.\n        inAppPurchase.finishTransactionByDate(transaction.transactionDate)\n\n        break\n      case 'restored':\n\n        console.log(`The purchase of ${payment.productIdentifier} has been restored.`)\n\n        break\n      case 'deferred':\n\n        console.log(`The purchase of ${payment.productIdentifier} has been deferred.`)\n\n        break\n      default:\n        break\n    }\n  }\n})\n\n// Check if the user is allowed to make in-app purchase.\nif (!inAppPurchase.canMakePayments()) {\n  console.log('The user is not allowed to make in-app purchase.')\n}\n\n// Retrieve and display the product descriptions.\ninAppPurchase.getProducts(PRODUCT_IDS).then(products => {\n  // Check the parameters.\n  if (!Array.isArray(products) || products.length <= 0) {\n    console.log('Unable to retrieve the product information.')\n    return\n  }\n\n  // Display the name and price of each product.\n  for (const product of products) {\n    console.log(`The price of ${product.localizedTitle} is ${product.formattedPrice}.`)\n  }\n\n  // Ask the user which product they want to purchase.\n  const selectedProduct = products[0]\n  const selectedQuantity = 1\n\n  // Purchase the selected product.\n  inAppPurchase.purchaseProduct(selectedProduct.productIdentifier, selectedQuantity).then(isProductValid => {\n    if (!isProductValid) {\n      console.log('The product is not valid.')\n      return\n    }\n\n    console.log('The payment has been added to the payment queue.')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Application Name in Electron\nDESCRIPTION: The app.setName method overrides the current application's name used internally by Electron, without affecting the name used by the operating system.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napp.setName(name)\n```\n\n----------------------------------------\n\nTITLE: Handling Certificate Errors in Electron\nDESCRIPTION: This code demonstrates how to handle SSL certificate errors in an Electron application. It listens for the 'certificate-error' event and implements custom verification logic, allowing trusted certificates for specific URLs while rejecting others.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.on('certificate-error', (event, webContents, url, error, certificate, callback) => {\n  if (url === 'https://github.com') {\n    // Verification logic.\n    event.preventDefault()\n    callback(true)\n  } else {\n    callback(false)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode Control in Electron Main Process\nDESCRIPTION: This JavaScript snippet shows the main process implementation of dark mode control in Electron. It sets up IPC handlers for toggling dark mode and resetting to system theme, utilizing the nativeTheme API to manage the application's appearance.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, ipcMain, nativeTheme } = require('electron')\nconst path = require('node:path')\n\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  win.loadFile('index.html')\n\n  ipcMain.handle('dark-mode:toggle', () => {\n    if (nativeTheme.shouldUseDarkColors) {\n      nativeTheme.themeSource = 'light'\n    } else {\n      nativeTheme.themeSource = 'dark'\n    }\n    return nativeTheme.shouldUseDarkColors\n  })\n\n  ipcMain.handle('dark-mode:system', () => {\n    nativeTheme.themeSource = 'system'\n  })\n}\n\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a BrowserWindow with Preload Script in Electron\nDESCRIPTION: This snippet shows how to attach a preload script to a BrowserWindow in the main process. The preload script is specified in the webPreferences option of the BrowserWindow constructor.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n// ...\nconst win = new BrowserWindow({\n  webPreferences: {\n    preload: 'path/to/preload.js'\n  }\n})\n// ...\n```\n\n----------------------------------------\n\nTITLE: Handle Drag Events in renderer.js (Electron)\nDESCRIPTION: This JavaScript code sets up an event listener for the 'dragstart' event on the element with id 'drag'.  When the drag starts, it calls the `startDrag` function (exposed via `contextBridge`) with a filename and prevents the default drag behavior.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.getElementById('drag').ondragstart = (event) => {\n  event.preventDefault()\n  window.electron.startDrag('drag-and-drop.md')\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Crash Reporter in Electron\nDESCRIPTION: Basic example of setting up the crash reporter in Electron to submit crash reports to a remote server. The crashReporter.start() method must be called before using any other crashReporter APIs.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/crash-reporter.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { crashReporter } = require('electron')\n\ncrashReporter.start({ submitURL: 'https://your-domain.com/url-to-submit' })\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tray Icon with Context Menu in Electron\nDESCRIPTION: Demonstrates how to create a basic system tray icon with a context menu containing radio menu items. Shows initialization of tray icon when the app is ready and setting up a context menu.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, Menu, Tray } = require('electron')\n\nlet tray = null\napp.whenReady().then(() => {\n  tray = new Tray('/path/to/my/icon')\n  const contextMenu = Menu.buildFromTemplate([\n    { label: 'Item1', type: 'radio' },\n    { label: 'Item2', type: 'radio' },\n    { label: 'Item3', type: 'radio', checked: true },\n    { label: 'Item4', type: 'radio' }\n  ])\n  tray.setToolTip('This is my application.')\n  tray.setContextMenu(contextMenu)\n})\n```\n\n----------------------------------------\n\nTITLE: Intercepting Keyboard Events in Electron Main Process\nDESCRIPTION: This snippet shows how to intercept keyboard events in the main process before they are dispatched to the page, using the 'before-input-event' event of the webContents. This allows for catching and handling custom shortcuts that are not visible in the menu. It prevents the default behavior of the intercepted keys.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron/main')\n\napp.whenReady().then(() => {\n  const win = new BrowserWindow({ width: 800, height: 600 })\n\n  win.loadFile('index.html')\n  win.webContents.on('before-input-event', (event, input) => {\n    if (input.control && input.key.toLowerCase() === 'i') {\n      console.log('Pressed Control+I')\n      event.preventDefault()\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Privileged Protocol Schemes in Electron\nDESCRIPTION: Shows how to register a custom protocol scheme with specific privileges, such as bypassing Content Security Policy. Must be called before app ready event.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { protocol } = require('electron')\nprotocol.registerSchemesAsPrivileged([\n  { scheme: 'foo', privileges: { bypassCSP: true } }\n])\n```\n\n----------------------------------------\n\nTITLE: Safe API Exposure with contextBridge in JavaScript\nDESCRIPTION: A secure way to expose IPC-based APIs by providing one method per IPC message, ensuring better control and safety.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ Good code\ncontextBridge.exposeInMainWorld('myAPI', {\n  loadPreferences: () => ipcRenderer.invoke('load-prefs')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a BrowserView in Electron's Main Process\nDESCRIPTION: This example demonstrates how to create a BrowserWindow and a BrowserView, set the BrowserView's bounds, and load a URL into its web contents.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-view.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In the main process.\nconst { app, BrowserView, BrowserWindow } = require('electron')\n\napp.whenReady().then(() => {\n  const win = new BrowserWindow({ width: 800, height: 600 })\n\n  const view = new BrowserView()\n  win.setBrowserView(view)\n  view.setBounds({ x: 0, y: 0, width: 300, height: 300 })\n  view.webContents.loadURL('https://electronjs.org')\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Sandbox in Electron\nDESCRIPTION: Shows how to force sandbox mode for all renderer processes using app.enableSandbox() API before the app's ready event.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/sandbox.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.enableSandbox()\napp.whenReady().then(() => {\n  // any sandbox:false calls are overridden since `app.enableSandbox()` was called.\n  const win = new BrowserWindow()\n  win.loadURL('https://google.com')\n})\n```\n\n----------------------------------------\n\nTITLE: Printing Webview Content in Electron\nDESCRIPTION: The print method allows printing of webview content with various options like silent printing, background printing, device selection, color mode, margins, and more.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.print([options])\n```\n\n----------------------------------------\n\nTITLE: Registering Custom File Protocol in Electron\nDESCRIPTION: Shows how to register a custom file protocol ('atom://') using the session.protocol API. This example demonstrates handling requests and mapping them to local file paths.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, session } = require('electron')\nconst path = require('node:path')\n\napp.whenReady().then(() => {\n  const protocol = session.fromPartition('some-partition').protocol\n  if (!protocol.registerFileProtocol('atom', (request, callback) => {\n    const url = request.url.substr(7)\n    callback({ path: path.normalize(path.join(__dirname, url)) })\n  })) {\n    console.error('Failed to register protocol')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing session.setPreloads() in Electron\nDESCRIPTION: This JavaScript code snippet illustrates how to replace the deprecated `session.setPreloads()` method with `session.registerPreloadScript()` in Electron. The new API allows registering preload scripts without replacing existing scripts and enables specifying preload targets beyond 'frame'. It requires `path` module for constructing the file path.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nsession.setPreloads([path.join(__dirname, 'preload.js')])\n\n// Replace with:\nsession.registerPreloadScript({\n  type: 'frame',\n  id: 'app-preload',\n  filePath: path.join(__dirname, 'preload.js')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Renderer Process Logic for File Dialog\nDESCRIPTION: Adds event handling logic to the renderer process that triggers the file dialog via the exposed electronAPI.openFile method and displays the selected file path in the UI when resolved.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst btn = document.getElementById('btn')\nconst filePathElement = document.getElementById('filePath')\n\nbtn.addEventListener('click', async () => {\n  const filePath = await window.electronAPI.openFile()\n  filePathElement.innerText = filePath\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Application Lifecycle in Electron Main Process\nDESCRIPTION: This snippet shows how to handle the application lifecycle using Electron's app module. It specifically demonstrates implementing the window-all-closed event to quit the application when all windows are closed, except on macOS.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// quitting the app when no windows are open on non-macOS platforms\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})\n```\n\n----------------------------------------\n\nTITLE: Registering and Handling APNS Notifications in Electron\nDESCRIPTION: This snippet demonstrates how to register for APNS notifications and handle received notifications using the pushNotifications module in Electron. It shows the registration process and setting up an event listener for received notifications.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/push-notifications.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { pushNotifications, Notification } = require('electron')\n\npushNotifications.registerForAPNSNotifications().then((token) => {\n  // forward token to your remote notification server\n})\n\npushNotifications.on('received-apns-notification', (event, userInfo) => {\n  // generate a new Notification object with the relevant userInfo fields\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Parent and Child Windows in Electron\nDESCRIPTION: Demonstrates how to create a parent-child relationship between windows using the parent option. Child windows will always show on top of their parent window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst top = new BrowserWindow()\nconst child = new BrowserWindow({ parent: top })\nchild.show()\ntop.show()\n```\n\n----------------------------------------\n\nTITLE: Navigating Through History in Electron\nDESCRIPTION: This code demonstrates how to implement back and forward navigation functionality using the NavigationHistory API. It checks if navigation is possible before attempting to navigate.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Go back\nif (navigationHistory.canGoBack()) {\n  navigationHistory.goBack()\n}\n\n// Go forward\nif (navigationHistory.canGoForward()) {\n  navigationHistory.goForward()\n}\n```\n\n----------------------------------------\n\nTITLE: Using found-in-page Event for Search Functionality in JavaScript\nDESCRIPTION: Demonstrates how to handle search results from the findInPage method in a WebView. The example shows initiating a search and handling the found-in-page event.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst webview = document.querySelector('webview')\nwebview.addEventListener('found-in-page', (e) => {\n  webview.stopFindInPage('keepSelection')\n})\n\nconst requestId = webview.findInPage('test')\nconsole.log(requestId)\n```\n\n----------------------------------------\n\nTITLE: Getting Application Version in Electron\nDESCRIPTION: The app.getVersion method returns the version of the loaded application from package.json, or falls back to the current bundle or executable version.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napp.getVersion()\n```\n\n----------------------------------------\n\nTITLE: Checking Available Clipboard Formats in Electron\nDESCRIPTION: Shows how to check the available formats in the system clipboard using the clipboard.availableFormats() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nconst formats = clipboard.availableFormats()\nconsole.log(formats)\n// [ 'text/plain', 'text/html' ]\n```\n\n----------------------------------------\n\nTITLE: Loading React Developer Tools Extension in Electron\nDESCRIPTION: This code snippet demonstrates how to load the React Developer Tools extension in an Electron application using the session.loadExtension API. It includes setting up the path to the extension and loading it when the app is ready.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/devtools-extension.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, session } = require('electron')\nconst path = require('node:path')\nconst os = require('node:os')\n\n// on macOS\nconst reactDevToolsPath = path.join(\n  os.homedir(),\n  '/Library/Application Support/Google/Chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.9.0_0'\n)\n\napp.whenReady().then(async () => {\n  await session.defaultSession.loadExtension(reactDevToolsPath)\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Secure Content in Renderer Process HTML\nDESCRIPTION: Shows the proper way to include external resources like scripts and stylesheets using HTTPS in the renderer process HTML. Demonstrates both incorrect (HTTP) and correct (HTTPS) approaches.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Bad -->\n<script crossorigin src=\"http://example.com/react.js\"></script>\n<link rel=\"stylesheet\" href=\"http://example.com/style.css\">\n\n<!-- Good -->\n<script crossorigin src=\"https://example.com/react.js\"></script>\n<link rel=\"stylesheet\" href=\"https://example.com/style.css\">\n```\n\n----------------------------------------\n\nTITLE: Setting Device Permission Handler in Electron\nDESCRIPTION: This snippet demonstrates how to set a device permission handler for a session in Electron. It includes logic for handling HID, serial, and USB device permissions, as well as persisting granted devices.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\n\nlet win = null\n\napp.whenReady().then(() => {\n  win = new BrowserWindow()\n\n  win.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {\n    if (permission === 'hid') {\n      // Add logic here to determine if permission should be given to allow HID selection\n      return true\n    } else if (permission === 'serial') {\n      // Add logic here to determine if permission should be given to allow serial port selection\n    } else if (permission === 'usb') {\n      // Add logic here to determine if permission should be given to allow USB device selection\n    }\n    return false\n  })\n\n  // Optionally, retrieve previously persisted devices from a persistent store\n  const grantedDevices = fetchGrantedDevices()\n\n  win.webContents.session.setDevicePermissionHandler((details) => {\n    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'hid') {\n      if (details.device.vendorId === 123 && details.device.productId === 345) {\n        // Always allow this type of device (this allows skipping the call to `navigator.hid.requestDevice` first)\n        return true\n      }\n\n      // Search through the list of devices that have previously been granted permission\n      return grantedDevices.some((grantedDevice) => {\n        return grantedDevice.vendorId === details.device.vendorId &&\n              grantedDevice.productId === details.device.productId &&\n              grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber\n      })\n    } else if (details.deviceType === 'serial') {\n      if (details.device.vendorId === 123 && details.device.productId === 345) {\n        // Always allow this type of device (this allows skipping the call to `navigator.hid.requestDevice` first)\n        return true\n      }\n    }\n    return false\n  })\n\n  win.webContents.session.on('select-hid-device', (event, details, callback) => {\n    event.preventDefault()\n    const selectedDevice = details.deviceList.find((device) => {\n      return device.vendorId === 9025 && device.productId === 67\n    })\n    callback(selectedDevice?.deviceId)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Printing to PDF with webContents.printToPDF in Electron\nDESCRIPTION: This code snippet demonstrates how to print the content of a BrowserWindow to a PDF file using the `webContents.printToPDF` method. It sets up a basic Electron application, loads a webpage, and then prints it to a PDF file in the user's Desktop directory.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\nconst fs = require('node:fs')\nconst path = require('node:path')\nconst os = require('node:os')\n\napp.whenReady().then(() => {\n  const win = new BrowserWindow()\n  win.loadURL('https://github.com')\n\n  win.webContents.on('did-finish-load', () => {\n    // Use default printing options\n    const pdfPath = path.join(os.homedir(), 'Desktop', 'temp.pdf')\n    win.webContents.printToPDF({}).then(data => {\n      fs.writeFile(pdfPath, data, (error) => {\n        if (error) throw error\n        console.log(`Wrote PDF successfully to ${pdfPath}`)\n      })\n    }).catch(error => {\n      console.log(`Failed to write PDF to ${pdfPath}: `, error)\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Different Background Color Types in BrowserWindow\nDESCRIPTION: Shows different valid formats for setting the backgroundColor property of a BrowserWindow, including HSL, RGB, hexadecimal, and named color values.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst win = new BrowserWindow()\nwin.setBackgroundColor('hsl(230, 100%, 50%)')\nwin.setBackgroundColor('rgb(255, 145, 145)')\nwin.setBackgroundColor('#ff00a3')\nwin.setBackgroundColor('blueviolet')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom File Protocol Handler in Electron\nDESCRIPTION: Example of implementing a custom 'atom://' protocol that behaves similar to the file:// protocol. Uses app.whenReady() to ensure protocol registration happens after app initialization.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, protocol, net } = require('electron')\nconst path = require('node:path')\nconst url = require('node:url')\n\napp.whenReady().then(() => {\n  protocol.handle('atom', (request) => {\n    const filePath = request.url.slice('atom://'.length)\n    return net.fetch(url.pathToFileURL(path.join(__dirname, filePath)).toString())\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Global Shortcuts in Electron\nDESCRIPTION: Demonstrates how to register, check, and unregister global keyboard shortcuts in an Electron application. The example shows enabling Wayland support, registering a CommandOrControl+X shortcut, checking its registration status, and proper cleanup when the app quits.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/global-shortcut.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, globalShortcut } = require('electron')\n\n// Enable usage of Portal's globalShortcuts. This is essential for cases when\n// the app runs in a Wayland session.\napp.commandLine.appendSwitch('enable-features', 'GlobalShortcutsPortal')\n\napp.whenReady().then(() => {\n  // Register a 'CommandOrControl+X' shortcut listener.\n  const ret = globalShortcut.register('CommandOrControl+X', () => {\n    console.log('CommandOrControl+X is pressed')\n  })\n\n  if (!ret) {\n    console.log('registration failed')\n  }\n\n  // Check whether a shortcut is registered.\n  console.log(globalShortcut.isRegistered('CommandOrControl+X'))\n})\n\napp.on('will-quit', () => {\n  // Unregister a shortcut.\n  globalShortcut.unregister('CommandOrControl+X')\n\n  // Unregister all shortcuts.\n  globalShortcut.unregisterAll()\n})\n```\n\n----------------------------------------\n\nTITLE: Registering File Stream Protocol in Electron\nDESCRIPTION: Example of registering a custom 'atom' protocol that returns a file stream as a response. It demonstrates using fs.createReadStream to return a file.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nprotocol.registerStreamProtocol('atom', (request, callback) => {\n  callback(fs.createReadStream('index.html'))\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bars in Electron Applications with JavaScript\nDESCRIPTION: This example creates an Electron application with a progress bar that increments over time using Node.js timers. It demonstrates how to create a window, set up a timer to update the progress bar value, and properly clean up timers before the application quits.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/progress-bar.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron/main')\n\nlet progressInterval\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n\n  const INCREMENT = 0.03\n  const INTERVAL_DELAY = 100 // ms\n\n  let c = 0\n  progressInterval = setInterval(() => {\n    // update progress bar to next value\n    // values between 0 and 1 will show progress, >1 will show indeterminate or stick at 100%\n    win.setProgressBar(c)\n\n    // increment or reset progress bar\n    if (c < 2) {\n      c += INCREMENT\n    } else {\n      c = (-INCREMENT * 5) // reset to a bit less than 0 to show reset state\n    }\n  }, INTERVAL_DELAY)\n}\n\napp.whenReady().then(createWindow)\n\n// before the app is terminated, clear both timers\napp.on('before-quit', () => {\n  clearInterval(progressInterval)\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Context Menu to Tray in Electron\nDESCRIPTION: This snippet shows how to create a context menu for the Tray using Menu.buildFromTemplate() and attach it to the Tray using setContextMenu(). It creates four radio-type menu items.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst contextMenu = Menu.buildFromTemplate([\n  { label: 'Item1', type: 'radio' },\n  { label: 'Item2', type: 'radio' },\n  { label: 'Item3', type: 'radio', checked: true },\n  { label: 'Item4', type: 'radio' }\n])\n\ntray.setContextMenu(contextMenu)\n```\n\n----------------------------------------\n\nTITLE: Set Window Open Handler - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to intercept and customize the creation of new windows requested by the renderer process in Electron.  It overrides the default window creation by attaching a BrowserView to the main window instead of creating a new BrowserWindow. It uses `setWindowOpenHandler` to handle the `window.open()` calls and related actions. Requires the BrowserView and BrowserWindow modules.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserView, BrowserWindow } = require('electron')\n\nconst mainWindow = new BrowserWindow()\n\nmainWindow.webContents.setWindowOpenHandler((details) => {\n  return {\n    action: 'allow',\n    createWindow: (options) => {\n      const browserView = new BrowserView(options)\n      mainWindow.addBrowserView(browserView)\n      browserView.setBounds({ x: 0, y: 0, width: 640, height: 480 })\n      return browserView.webContents\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Protocol Handler with Security Checks in Electron\nDESCRIPTION: Comprehensive example of handling custom app:// protocol with security checks, HTML responses, and API proxying. Includes path traversal protection and content-type handling.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, net, protocol } = require('electron')\nconst path = require('node:path')\nconst { pathToFileURL } = require('url')\n\nprotocol.registerSchemesAsPrivileged([\n  {\n    scheme: 'app',\n    privileges: {\n      standard: true,\n      secure: true,\n      supportFetchAPI: true\n    }\n  }\n])\n\napp.whenReady().then(() => {\n  protocol.handle('app', (req) => {\n    const { host, pathname } = new URL(req.url)\n    if (host === 'bundle') {\n      if (pathname === '/') {\n        return new Response('<h1>hello, world</h1>', {\n          headers: { 'content-type': 'text/html' }\n        })\n      }\n      // NB, this checks for paths that escape the bundle, e.g.\n      // app://bundle/../../secret_file.txt\n      const pathToServe = path.resolve(__dirname, pathname)\n      const relativePath = path.relative(__dirname, pathToServe)\n      const isSafe = relativePath && !relativePath.startsWith('..') && !path.isAbsolute(relativePath)\n      if (!isSafe) {\n        return new Response('bad', {\n          status: 400,\n          headers: { 'content-type': 'text/html' }\n        })\n      }\n\n      return net.fetch(pathToFileURL(pathToServe).toString())\n    } else if (host === 'api') {\n      return net.fetch('https://api.my-server.com/' + pathname, {\n        method: req.method,\n        headers: req.headers,\n        body: req.body\n      })\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color to Prevent Flash on Window Load\nDESCRIPTION: Demonstrates setting a backgroundColor property when creating a BrowserWindow to prevent white flashing during window loading. This is recommended even when using the ready-to-show event.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ backgroundColor: '#2e2c29' })\nwin.loadURL('https://github.com')\n```\n\n----------------------------------------\n\nTITLE: Publishing Release Metadata for macOS in JSON\nDESCRIPTION: Example of the releases.json file format for Squirrel.Mac to receive updates. It includes version information, release notes, and download URLs for different versions of the application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"currentRelease\": \"1.2.3\",\n  \"releases\": [\n    {\n      \"version\": \"1.2.1\",\n      \"updateTo\": {\n        \"version\": \"1.2.1\",\n        \"pub_date\": \"2023-09-18T12:29:53+01:00\",\n        \"notes\": \"Theses are some release notes innit\",\n        \"name\": \"1.2.1\",\n        \"url\": \"https://mycompany.example.com/myapp/releases/myrelease\"\n      }\n    },\n    {\n      \"version\": \"1.2.3\",\n      \"updateTo\": {\n        \"version\": \"1.2.3\",\n        \"pub_date\": \"2024-09-18T12:29:53+01:00\",\n        \"notes\": \"Theses are some more release notes innit\",\n        \"name\": \"1.2.3\",\n        \"url\": \"https://mycompany.example.com/myapp/releases/myrelease3\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Show Notification in Renderer Process\nDESCRIPTION: This snippet demonstrates how to display a notification from the renderer process using the web Notifications API. It creates a new Notification object with a title and body, and attaches an onclick handler to log a message to the console when the notification is clicked.  This code snippet can be directly used in HTML page inside a <script> tag.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst NOTIFICATION_TITLE = 'Title'\nconst NOTIFICATION_BODY =\n  'Notification from the Renderer process. Click to log to console.'\nconst CLICK_MESSAGE = 'Notification clicked'\n\nnew Notification(NOTIFICATION_TITLE, { body: NOTIFICATION_BODY }).onclick =\n  () => console.log(CLICK_MESSAGE)\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML for Dark Mode Toggle in Electron\nDESCRIPTION: This HTML snippet sets up the basic structure for a dark mode toggle interface in an Electron application. It includes buttons for toggling dark mode and resetting to system theme, along with a display for the current theme source.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World!</title>\n    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline';\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./styles.css\">\n</head>\n<body>\n    <h1>Hello World!</h1>\n    <p>Current theme source: <strong id=\"theme-source\">System</strong></p>\n\n    <button id=\"toggle-dark-mode\">Toggle Dark Mode</button>\n    <button id=\"reset-to-system\">Reset to System Theme</button>\n\n    <script src=\"renderer.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Clearing Authentication Cache in Electron Session\nDESCRIPTION: Clears the session's HTTP authentication cache. It returns a Promise that resolves when the cache has been cleared.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nses.clearAuthCache()\n```\n\n----------------------------------------\n\nTITLE: Defining Types for Exposed APIs in TypeScript\nDESCRIPTION: Shows how to create a declaration file to extend the Window interface with types for the exposed API, ensuring type safety in the renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IElectronAPI {\n  loadPreferences: () => Promise<void>,\n}\n\ndeclare global {\n  interface Window {\n    electronAPI: IElectronAPI\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Node.js Integration in Web Workers for Electron\nDESCRIPTION: This code snippet demonstrates how to create a new BrowserWindow in Electron with Node.js integration enabled for Web Workers. It sets the 'nodeIntegrationInWorker' option to true in the webPreferences.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/multithreading.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst win = new BrowserWindow({\n  webPreferences: {\n    nodeIntegrationInWorker: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing APIs with Context Isolation using contextBridge in TypeScript\nDESCRIPTION: Example of exposing APIs using contextBridge in a TypeScript preload script, demonstrating type-safe API exposure.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncontextBridge.exposeInMainWorld('electronAPI', {\n  loadPreferences: () => ipcRenderer.invoke('load-prefs')\n})\n```\n\n----------------------------------------\n\nTITLE: Using ipcRenderer.invoke with Promise in Electron\nDESCRIPTION: Example showing how to use ipcRenderer.invoke in the renderer process to communicate with the main process and receive a Promise-based response. The main process handles the request using ipcMain.handle.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-renderer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Renderer process\nipcRenderer.invoke('some-name', someArgument).then((result) => {\n  // ...\n})\n\n// Main process\nipcMain.handle('some-name', async (event, someArgument) => {\n  const result = await doSomeWork(someArgument)\n  return result\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Application Locale in Electron\nDESCRIPTION: The app.getLocale method returns the current application locale using Chromium's l10n_util library. This API must be called after the ready event is emitted.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\napp.getLocale()\n```\n\n----------------------------------------\n\nTITLE: Creating a NativeImage instance from a file path\nDESCRIPTION: This code demonstrates how to create a `NativeImage` instance from a file path using the `nativeImage.createFromPath` method. It logs the created image object to the console.  The image path must be valid and the file must be a supported image format for the operation to succeed.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/native-image.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { nativeImage } = require('electron')\n\nconst image = nativeImage.createFromPath('/Users/somebody/images/icon.png')\nconsole.log(image)\n```\n\n----------------------------------------\n\nTITLE: Accessing Properly Exposed API in Renderer\nDESCRIPTION: This snippet shows how to access an API that was properly exposed from a preload script using contextBridge. The API is now available on the window object in the renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(window.myAPI)\n// => { desktop: true }\n```\n\n----------------------------------------\n\nTITLE: Accessing Security Scoped Resources in Electron (JavaScript)\nDESCRIPTION: Demonstrates how to start and stop accessing a security scoped resource in an Electron app packaged for the Mac App Store. It shows file dialog usage, reading a file, and proper resource management.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, dialog } = require('electron')\nconst fs = require('node:fs')\n\nlet filepath\nlet bookmark\n\ndialog.showOpenDialog(null, { securityScopedBookmarks: true }).then(({ filePaths, bookmarks }) => {\n  filepath = filePaths[0]\n  bookmark = bookmarks[0]\n  fs.readFileSync(filepath)\n})\n\n// ... restart app ...\n\nconst stopAccessingSecurityScopedResource = app.startAccessingSecurityScopedResource(bookmark)\nfs.readFileSync(filepath)\nstopAccessingSecurityScopedResource()\n```\n\n----------------------------------------\n\nTITLE: Creating a Separate GUI Thread with Win32 Window Setup\nDESCRIPTION: Initializes a GUI thread to prevent blocking the Node.js event loop, sets up DPI awareness, registers a window class, and creates a window with a message loop for processing Windows events.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nvoid hello_gui() {\n  // Launch GUI in a separate thread\n  std::thread guiThread([]() {\n    // Enable Per-Monitor DPI awareness\n    SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);\n\n    // Initialize Common Controls\n    INITCOMMONCONTROLSEX icex;\n    icex.dwSize = sizeof(INITCOMMONCONTROLSEX);\n    icex.dwICC = ICC_STANDARD_CLASSES | ICC_WIN95_CLASSES;\n    InitCommonControlsEx(&icex);\n\n    // Register window class\n    WNDCLASSEXW wc = {};\n    wc.cbSize = sizeof(WNDCLASSEXW);\n    wc.lpfnWndProc = WindowProc;\n    wc.hInstance = GetModuleHandle(nullptr);\n    wc.lpszClassName = L\"TodoApp\";\n    RegisterClassExW(&wc);\n\n    // Get the DPI for the monitor\n    UINT dpi = GetDpiForSystem();\n\n    // Create window\n    HWND hwnd = CreateWindowExW(\n      0, L\"TodoApp\", L\"Todo List\",\n      WS_OVERLAPPEDWINDOW,\n      CW_USEDEFAULT, CW_USEDEFAULT,\n      Scale(500, dpi), Scale(500, dpi),\n      nullptr, nullptr,\n      GetModuleHandle(nullptr), nullptr\n    );\n\n    if (hwnd == nullptr) {\n      return;\n    }\n\n    // Controls go here! The window is currently empty,\n    // we'll add controls in the next step.\n\n    ShowWindow(hwnd, SW_SHOW);\n\n    // Message loop\n    MSG msg = {};\n    while (GetMessage(&msg, nullptr, 0, 0)) {\n      TranslateMessage(&msg);\n      DispatchMessage(&msg);\n    }\n\n    // Clean up\n    DeleteObject(hFont);\n  });\n\n  // Detach the thread so it runs independently\n  guiThread.detach();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Auto-Update Errors in Electron\nDESCRIPTION: JavaScript code snippet demonstrating how to handle and log errors that occur during the auto-update process in an Electron application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nautoUpdater.on('error', (message) => {\n  console.error('There was a problem updating the application')\n  console.error(message)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Download Events in Electron Session\nDESCRIPTION: Demonstrates how to listen for the 'will-download' event on the default session, prevent the default download behavior, and implement custom download handling using the 'got' library.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session } = require('electron')\nsession.defaultSession.on('will-download', (event, item, webContents) => {\n  event.preventDefault()\n  require('got')(item.getURL()).then((response) => {\n    require('node:fs').writeFileSync('/somewhere', response.body)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Thumbnail Toolbar in Electron for Windows\nDESCRIPTION: This example demonstrates how to set a thumbnail toolbar with custom buttons for a BrowserWindow in Electron. It creates two buttons with different properties and click handlers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow, nativeImage } = require('electron')\nconst path = require('node:path')\n\nconst win = new BrowserWindow()\n\nwin.setThumbarButtons([\n  {\n    tooltip: 'button1',\n    icon: nativeImage.createFromPath(path.join(__dirname, 'button1.png')),\n    click () { console.log('button1 clicked') }\n  }, {\n    tooltip: 'button2',\n    icon: nativeImage.createFromPath(path.join(__dirname, 'button2.png')),\n    flags: ['enabled', 'dismissonclick'],\n    click () { console.log('button2 clicked.') }\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Selecting Previous Tab in Electron for macOS\nDESCRIPTION: Selects the previous tab when native tabs are enabled and there are multiple tabs in the window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nwin.selectPreviousTab()\n```\n\n----------------------------------------\n\nTITLE: Basic Webview Implementation in HTML\nDESCRIPTION: Simple example showing how to embed a webpage using the webview tag with basic styling.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<webview id=\"foo\" src=\"https://www.github.com/\" style=\"display:inline-flex; width:640px; height:480px\"></webview>\n```\n\n----------------------------------------\n\nTITLE: Listening for IPC Events with ipcMain.on in Electron's Main Process\nDESCRIPTION: Sets up an IPC listener in the main process that handles 'set-title' messages sent from renderer processes. When a message is received, it retrieves the sender's BrowserWindow and updates its title.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, ipcMain } = require('electron')\nconst path = require('node:path')\n\n// ...\n\nfunction handleSetTitle (event, title) {\n  const webContents = event.sender\n  const win = BrowserWindow.fromWebContents(webContents)\n  win.setTitle(title)\n}\n\nfunction createWindow () {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n  mainWindow.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  ipcMain.on('set-title', handleSetTitle)\n  createWindow()\n})\n// ...\n```\n\n----------------------------------------\n\nTITLE: Accessing WebContents from BrowserWindow in Electron\nDESCRIPTION: This code snippet demonstrates how to access the WebContents object from a BrowserWindow in Electron. It creates a new BrowserWindow instance, loads a URL, and then logs the WebContents object to the console.  This allows interaction and control over the rendered web page.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ width: 800, height: 1500 })\nwin.loadURL('https://github.com')\n\nconst contents = win.webContents\nconsole.log(contents)\n```\n\n----------------------------------------\n\nTITLE: Setting Display Media Request Handler in Electron\nDESCRIPTION: Implements a handler for display media access requests via navigator.mediaDevices.getDisplayMedia API. This example shows how to grant access to the first available screen source using desktopCapturer API.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session, desktopCapturer } = require('electron')\n\nsession.defaultSession.setDisplayMediaRequestHandler((request, callback) => {\n  desktopCapturer.getSources({ types: ['screen'] }).then((sources) => {\n    // Grant access to the first screen found.\n    callback({ video: sources[0] })\n  })\n  // Use the system picker if available.\n  // Note: this is currently experimental. If the system picker\n  // is available, it will be used and the media request handler\n  // will not be invoked.\n}, { useSystemPicker: true })\n```\n\n----------------------------------------\n\nTITLE: Setting Draggable Region for Entire Window Body in CSS\nDESCRIPTION: This CSS snippet makes the entire window draggable by applying the app-region: drag property to the body element.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  app-region: drag;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Electron ChromeDriver for Selenium Testing\nDESCRIPTION: Commands to install and run electron-chromedriver, which is needed to test Electron applications with Selenium. It starts a ChromeDriver server on port 9515.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev electron-chromedriver\n./node_modules/.bin/chromedriver\nStarting ChromeDriver (v2.10.291558) on port 9515\nOnly local connections are allowed.\n```\n\n----------------------------------------\n\nTITLE: Loading URLs in Electron Webview\nDESCRIPTION: Methods for loading and downloading content in a webview element. Includes loadURL for navigation and downloadURL for initiating downloads without navigation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.loadURL(url[, options])\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.downloadURL(url[, options])\n```\n\n----------------------------------------\n\nTITLE: Implementing a Worker Process with MessagePorts in Electron\nDESCRIPTION: An example of using MessagePorts to set up a worker process implemented as a hidden window. This pattern allows the main application to communicate directly with the worker process without going through the main process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow, app, ipcMain, MessageChannelMain } = require('electron')\n\napp.whenReady().then(async () => {\n  // The worker process is a hidden BrowserWindow, so that it will have access\n  // to a full Blink context (including e.g. <canvas>, audio, fetch(), etc.)\n  const worker = new BrowserWindow({\n    show: false,\n    webPreferences: { nodeIntegration: true }\n  })\n  await worker.loadFile('worker.html')\n\n  // The main window will send work to the worker process and receive results\n  // over a MessagePort.\n  const mainWindow = new BrowserWindow({\n    webPreferences: { nodeIntegration: true }\n  })\n  mainWindow.loadFile('app.html')\n\n  // We can't use ipcMain.handle() here, because the reply needs to transfer a\n  // MessagePort.\n  // Listen for message sent from the top-level frame\n  mainWindow.webContents.mainFrame.ipc.on('request-worker-channel', (event) => {\n    // Create a new channel ...\n    const { port1, port2 } = new MessageChannelMain()\n    // ... send one end to the worker ...\n    worker.webContents.postMessage('new-client', null, [port1])\n    // ... and the other end to the main window.\n    event.senderFrame.postMessage('provide-worker-channel', null, [port2])\n    // Now the main window and the worker can communicate with each other\n    // without going through the main process!\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Auto-Update in Electron\nDESCRIPTION: JavaScript code snippet showing how to implement basic auto-update functionality using the update-electron-app module in an Electron application's main process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('update-electron-app')()\n```\n\n----------------------------------------\n\nTITLE: Implementing Renderer Process Logic for Window Title Setting\nDESCRIPTION: Adds event handling logic to the renderer process that captures input field values and sends them to the main process via the exposed electronAPI.setTitle method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst setButton = document.getElementById('btn')\nconst titleInput = document.getElementById('title')\nsetButton.addEventListener('click', () => {\n  const title = titleInput.value\n  window.electronAPI.setTitle(title)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing API in Custom Isolated World\nDESCRIPTION: Example of accessing an API exposed through contextBridge.exposeInIsolatedWorld in a renderer process running in that specific isolated world.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Renderer (In isolated world id1004)\n\nwindow.electron.doThing()\n```\n\n----------------------------------------\n\nTITLE: Setting Represented File in Electron BrowserWindow on macOS\nDESCRIPTION: This code demonstrates how to set a represented filename and document edited state for an Electron window on macOS. It creates a window, sets the current user's home directory as the represented file, marks it as edited, and handles basic application lifecycle events.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/represented-file.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron/main')\nconst os = require('node:os')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.setRepresentedFilename(os.homedir())\n  win.setDocumentEdited(true)\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Application Paths in Electron\nDESCRIPTION: The app.setPath method overrides the path to a special directory associated with the given name. This allows customizing where application data is stored.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.setPath(name, path)\n```\n\n----------------------------------------\n\nTITLE: Removing Default Title Bar in Electron\nDESCRIPTION: Configures an Electron BrowserWindow with a hidden title bar by setting the titleBarStyle parameter to 'hidden' in the constructor. This removes the default OS chrome while keeping functionality.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    titleBarStyle: 'hidden'\n  })\n  win.loadFile('index.html')\n})\n```\n\n----------------------------------------\n\nTITLE: Showing Asynchronous Message Box in Electron\nDESCRIPTION: This function displays an asynchronous message box in Electron. It accepts optional window and options parameters, and returns a Promise with information about the user's response and checkbox state (if applicable).\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ndialog.showMessageBox([window, ]options)\n```\n\n----------------------------------------\n\nTITLE: Installing Updates in Electron\nDESCRIPTION: Restarts the application and installs the downloaded update. Should only be called after the update-downloaded event has been emitted. Closes all application windows and quits the app.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### `autoUpdater.quitAndInstall()`\n\nRestarts the app and installs the update after it has been downloaded. It\nshould only be called after `update-downloaded` has been emitted.\n\nUnder the hood calling `autoUpdater.quitAndInstall()` will close all application\nwindows first, and automatically call `app.quit()` after all windows have been\nclosed.\n\n**Note:** It is not strictly necessary to call this function to apply an update,\nas a successfully downloaded update will always be applied the next time the\napplication starts.\n```\n\n----------------------------------------\n\nTITLE: Clearing Code Caches in Electron Session\nDESCRIPTION: Clears the code caches for specified URLs or all entries if no URLs are provided. Returns a Promise that resolves when the clear operation is complete.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nses.clearCodeCaches(options)\n```\n\n----------------------------------------\n\nTITLE: Handling Update Notifications in Electron\nDESCRIPTION: JavaScript code snippet showing how to handle the 'update-downloaded' event and display a dialog to the user when an update is available in an Electron application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nautoUpdater.on('update-downloaded', (event, releaseNotes, releaseName) => {\n  const dialogOpts = {\n    type: 'info',\n    buttons: ['Restart', 'Later'],\n    title: 'Application Update',\n    message: process.platform === 'win32' ? releaseNotes : releaseName,\n    detail:\n      'A new version has been downloaded. Restart the application to apply the updates.'\n  }\n\n  dialog.showMessageBox(dialogOpts).then((returnValue) => {\n    if (returnValue.response === 0) autoUpdater.quitAndInstall()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Window Bounds with Electron BrowserWindow\nDESCRIPTION: Demonstrates how to use the setBounds method to adjust window position and size. The example shows setting all bounds properties at once, then updating just a single property, and finally retrieving the current bounds using getBounds.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BaseWindow } = require('electron')\nconst win = new BaseWindow()\n\n// set all bounds properties\nwin.setBounds({ x: 440, y: 225, width: 800, height: 600 })\n\n// set a single bounds property\nwin.setBounds({ width: 100 })\n\n// { x: 440, y: 225, width: 100, height: 600 }\nconsole.log(win.getBounds())\n```\n\n----------------------------------------\n\nTITLE: Styling for Dark Mode using CSS Media Queries\nDESCRIPTION: This CSS snippet uses the prefers-color-scheme media query to apply different styles based on the system's color scheme preference. It sets background and text colors for both dark and light modes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@media (prefers-color-scheme: dark) {\n  body { background: #333; color: white; }\n}\n\n@media (prefers-color-scheme: light) {\n  body { background: #ddd; color: black; }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing APIs without Context Isolation in JavaScript\nDESCRIPTION: Example of how APIs were exposed from the preload script to the renderer process when context isolation was disabled. This method is no longer recommended.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// preload with contextIsolation disabled\nwindow.myAPI = {\n  doAThing: () => {}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// use the exposed API in the renderer\nwindow.myAPI.doAThing()\n```\n\n----------------------------------------\n\nTITLE: Handling Basic Authentication in Electron\nDESCRIPTION: This snippet shows how to respond to the 'login' event in an Electron application. It prevents the default behavior of canceling all authentications and supplies hardcoded credentials when a webpage or utility process requests authentication.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.on('login', (event, webContents, details, authInfo, callback) => {\n  event.preventDefault()\n  callback('username', 'secret')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Tray and BrowserWindow Icons from NativeImage Instances (Main Process)\nDESCRIPTION: This code demonstrates how to create a Tray and a BrowserWindow in Electron, setting their icons by first creating `NativeImage` instances from file paths using `nativeImage.createFromPath`. It showcases the alternative method of using `NativeImage` objects instead of direct file paths for setting icons.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/native-image.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow, nativeImage, Tray } = require('electron')\n\nconst trayIcon = nativeImage.createFromPath('/Users/somebody/images/icon.png')\nconst appIcon = nativeImage.createFromPath('/Users/somebody/images/window.png')\nconst tray = new Tray(trayIcon)\nconst win = new BrowserWindow({ icon: appIcon })\n```\n\n----------------------------------------\n\nTITLE: Expose startDrag function in preload.js (Electron)\nDESCRIPTION: This code snippet uses Electron's contextBridge to expose a function named `startDrag` to the renderer process. The `startDrag` function sends an IPC message to the main process with the specified filename.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electron', {\n  startDrag: (fileName) => ipcRenderer.send('ondragstart', fileName)\n})\n```\n\n----------------------------------------\n\nTITLE: Preventing Unload with dialog in Electron\nDESCRIPTION: This code snippet demonstrates how to use the 'will-prevent-unload' event to display a dialog box asking the user if they want to leave the site when a `beforeunload` event is triggered. Calling `event.preventDefault()` will prevent the unload if the user chooses to stay.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow, dialog } = require('electron')\nconst win = new BrowserWindow({ width: 800, height: 600 })\nwin.webContents.on('will-prevent-unload', (event) => {\n  const choice = dialog.showMessageBoxSync(win, {\n    type: 'question',\n    buttons: ['Leave', 'Stay'],\n    title: 'Do you want to leave this site?',\n    message: 'Changes you made may not be saved.',\n    defaultId: 0,\n    cancelId: 1\n  })\n  const leave = (choice === 0)\n  if (leave) {\n    event.preventDefault()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting NODE_EXTRA_CA_CERTS Environment Variable for Electron\nDESCRIPTION: Example of setting the path to additional certificate authority certificates for Node.js in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport NODE_EXTRA_CA_CERTS=/path/to/cert.pem \n```\n\n----------------------------------------\n\nTITLE: Querying and Setting Cookies in Electron\nDESCRIPTION: This example demonstrates how to access the Cookies API through a Session object, query all cookies, query cookies for a specific URL, and set a new cookie. Each operation returns a Promise that must be handled properly.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/cookies.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session } = require('electron')\n\n// Query all cookies.\nsession.defaultSession.cookies.get({})\n  .then((cookies) => {\n    console.log(cookies)\n  }).catch((error) => {\n    console.log(error)\n  })\n\n// Query all cookies associated with a specific url.\nsession.defaultSession.cookies.get({ url: 'https://www.github.com' })\n  .then((cookies) => {\n    console.log(cookies)\n  }).catch((error) => {\n    console.log(error)\n  })\n\n// Set a cookie with the given cookie data;\n// may overwrite equivalent cookies if they exist.\nconst cookie = { url: 'https://www.github.com', name: 'dummy_name', value: 'dummy' }\nsession.defaultSession.cookies.set(cookie)\n  .then(() => {\n    // success\n  }, (error) => {\n    console.error(error)\n  })\n```\n\n----------------------------------------\n\nTITLE: Loading Unpacked Extensions in Electron\nDESCRIPTION: Demonstrates how to load an unpacked Chrome extension in Electron using the session API. This code snippet shows the process of loading an extension and handling the returned promise with the extension ID.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session } = require('electron')\n\nsession.defaultSession.loadExtension('path/to/unpacked/extension').then(({ id }) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Window Creation in Main Process\nDESCRIPTION: Example showing how to use setWindowOpenHandler in the main process to control window creation. Demonstrates filtering URLs and setting custom window options.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/window-open.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nconst mainWindow = new BrowserWindow()\n\n// In this example, only windows with the `about:blank` url will be created.\n// All other urls will be blocked.\nmainWindow.webContents.setWindowOpenHandler(({ url }) => {\n  if (url === 'about:blank') {\n    return {\n      action: 'allow',\n      overrideBrowserWindowOptions: {\n        frame: false,\n        fullscreenable: false,\n        backgroundColor: 'black',\n        webPreferences: {\n          preload: 'my-child-window-preload-script.js'\n        }\n      }\n    }\n  }\n  return { action: 'deny' }\n})\n```\n\n----------------------------------------\n\nTITLE: Theme Color Meta Tag Example in HTML\nDESCRIPTION: Shows the HTML meta tag format used to set a theme color, which triggers the did-change-theme-color event in WebView.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<meta name='theme-color' content='#ff0000'>\n```\n\n----------------------------------------\n\nTITLE: Getting System Locale in Electron\nDESCRIPTION: The app.getSystemLocale method returns the current system locale, which is used for formatting numbers, dates, and times. This API must be called after the ready event is emitted.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\napp.getSystemLocale()\n```\n\n----------------------------------------\n\nTITLE: Disabling Node Integration in Electron BrowserWindow\nDESCRIPTION: Demonstrates how to disable Node.js integration in Electron's BrowserWindow to avoid conflicts with libraries that use similar global symbols.\nSOURCE: https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  webPreferences: {\n    nodeIntegration: false\n  }\n})\nwin.show()\n```\n\n----------------------------------------\n\nTITLE: Generating PDF from Webview in Electron\nDESCRIPTION: The printToPDF method converts webview content to PDF format with customizable options such as orientation, headers/footers, background, scale, page size, and margins.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.printToPDF(options)\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color in Electron BrowserWindow\nDESCRIPTION: Explains how to set the background color of a BrowserWindow using various color formats including Hex, RGB, RGBA, HSL, HSLA, and named CSS colors.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setBackgroundColor(backgroundColor)\n```\n\n----------------------------------------\n\nTITLE: Load URL with Extra Headers in Electron\nDESCRIPTION: This code snippet demonstrates how to load a URL in an Electron BrowserWindow with custom HTTP headers, specifically to bypass the HTTP cache using the 'pragma: no-cache' header. The `extraHeaders` option allows setting additional headers for the request.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst win = new BrowserWindow()\nconst options = { extraHeaders: 'pragma: no-cache\\n' }\nwin.webContents.loadURL('https://github.com', options)\n```\n\n----------------------------------------\n\nTITLE: Setting DevTools WebContents with BrowserWindow\nDESCRIPTION: This snippet shows how to use a BrowserWindow to host DevTools.  It creates two BrowserWindows, one for the main content and the other for the DevTools. The `setDevToolsWebContents` method associates the DevTools with the main window's webContents.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\n\nlet win = null\nlet devtools = null\n\napp.whenReady().then(() => {\n  win = new BrowserWindow()\n  devtools = new BrowserWindow()\n  win.loadURL('https://github.com')\n  win.webContents.setDevToolsWebContents(devtools.webContents)\n  win.webContents.openDevTools({ mode: 'detach' })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Wrapper for Native Addon in Electron\nDESCRIPTION: Implements a JavaScript wrapper for the native addon, providing a simpler API and handling platform-specific concerns. It uses the 'bindings' module to load the compiled native addon and extends EventEmitter for potential future event-based functionality.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst EventEmitter = require('events')\n\n// Load the native addon using the 'bindings' module\n// This will look for the compiled .node file in various places\nconst bindings = require('bindings')\nconst native = bindings('my_addon')\n\n// Create a nice JavaScript wrapper\nclass MyNativeAddon extends EventEmitter {\n  constructor () {\n    super()\n\n    // Create an instance of our C++ class\n    this.addon = new native.MyAddon()\n  }\n\n  // Wrap the C++ method with a nicer JavaScript API\n  helloWorld (input = '') {\n    if (typeof input !== 'string') {\n      throw new TypeError('Input must be a string')\n    }\n    return this.addon.helloWorld(input)\n  }\n}\n\n// Export a singleton instance\nif (process.platform === 'win32' || process.platform === 'darwin' || process.platform === 'linux') {\n  module.exports = new MyNativeAddon()\n} else {\n  // Provide a fallback for unsupported platforms\n  console.warn('Native addon not supported on this platform')\n\n  module.exports = {\n    helloWorld: (input) => `Hello from JS! You said: ${input}`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Draggable Regions for Custom Title Bar\nDESCRIPTION: Shows how to make a custom title bar draggable by adding the CSS style 'app-region: drag', which allows repositioning the application window by dragging the custom title bar.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    titleBarStyle: 'hidden',\n    titleBarOverlay: true\n  })\n  win.loadFile('index.html')\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Encryption Availability in Electron\nDESCRIPTION: This method checks if encryption is available on the current platform. It returns true if the necessary conditions are met for the respective operating system.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsafeStorage.isEncryptionAvailable()\n```\n\n----------------------------------------\n\nTITLE: Quitting Electron Application When Last Window Closes\nDESCRIPTION: This code snippet demonstrates how to quit an Electron application automatically when all windows are closed. It imports the app module from Electron and listens for the 'window-all-closed' event to trigger app.quit().\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\napp.on('window-all-closed', () => {\n  app.quit()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Main World Message Handler in HTML\nDESCRIPTION: HTML script that sets up the message handler in the main world to receive and handle the MessagePort for direct communication with the main process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script>\nwindow.onmessage = (event) => {\n  // event.source === window means the message is coming from the preload\n  // script, as opposed to from an <iframe> or other source.\n  if (event.source === window && event.data === 'main-world-port') {\n    const [ port ] = event.ports\n    // Once we have the port, we can communicate directly with the main\n    // process.\n    port.onmessage = (event) => {\n      console.log('from main process:', event.data)\n      port.postMessage(event.data.test * 2)\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Managing Serial Port Selection and Permissions in Electron\nDESCRIPTION: This snippet shows how to handle serial port selection, set permission checks, and manage device permissions for serial ports in an Electron application. It includes event listeners for 'select-serial-port' and uses session methods to control access.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\n\nlet win = null\n\napp.whenReady().then(() => {\n  win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {\n    if (permission === 'serial') {\n      // Add logic here to determine if permission should be given to allow serial selection\n      return true\n    }\n    return false\n  })\n\n  // Optionally, retrieve previously persisted devices from a persistent store\n  const grantedDevices = fetchGrantedDevices()\n\n  win.webContents.session.setDevicePermissionHandler((details) => {\n    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'serial') {\n      if (details.device.vendorId === 123 && details.device.productId === 345) {\n        // Always allow this type of device (this allows skipping the call to `navigator.serial.requestPort` first)\n        return true\n      }\n\n      // Search through the list of devices that have previously been granted permission\n      return grantedDevices.some((grantedDevice) => {\n        return grantedDevice.vendorId === details.device.vendorId &&\n              grantedDevice.productId === details.device.productId &&\n              grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber\n      })\n    }\n    return false\n  })\n\n  win.webContents.session.on('select-serial-port', (event, portList, webContents, callback) => {\n    event.preventDefault()\n    const selectedPort = portList.find((device) => {\n      return device.vendorId === '9025' && device.productId === '67'\n    })\n    if (!selectedPort) {\n      callback('')\n    } else {\n      callback(selectedPort.portId)\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Menu in Electron Application\nDESCRIPTION: Shows how to disable Electron's default menu before app initialization for better startup performance. This should be called when using a custom menu or frameless window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/performance.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMenu.setApplicationMenu(null)\n```\n\n----------------------------------------\n\nTITLE: Basic File Selection Dialog Example\nDESCRIPTION: Shows how to display a basic file selection dialog that allows multiple file selection\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dialog } = require('electron')\nconsole.log(dialog.showOpenDialog({ properties: ['openFile', 'multiSelections'] }))\n```\n\n----------------------------------------\n\nTITLE: Managing Recent Documents in Electron Application\nDESCRIPTION: This code demonstrates how to add a document to the recent files list and clear it when the application closes. It creates a Markdown file, adds it to the recent documents, and sets up event handlers to manage the application lifecycle.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/recent-documents.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron/main')\nconst fs = require('node:fs')\nconst path = require('node:path')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\nconst fileName = 'recently-used.md'\nfs.writeFile(fileName, 'Lorem Ipsum', () => {\n  app.addRecentDocument(path.join(__dirname, fileName))\n})\n\napp.whenReady().then(createWindow)\n\napp.on('window-all-closed', () => {\n  app.clearRecentDocuments()\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Forking Utility Process in Electron - JavaScript\nDESCRIPTION: The `utilityProcess.fork` method is used to spawn a new child process in an Electron application, similar to Node.js's `child_process.fork`. It supports various options, including setting environment variables, execution arguments, and configuring stdio modes. This method should be invoked after Electron's `ready` event is emitted, and it returns a UtilityProcess instance.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/utility-process.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"const child = utilityProcess.fork(path.join(__dirname, 'test.js'))\\nchild.stdout.on('data', (data) => {\\n  console.log(`Received chunk ${data}`)\\n})\"\n```\n\n----------------------------------------\n\nTITLE: Custom Protocol with Session Handling in Electron\nDESCRIPTION: Demonstrates how to register a custom protocol with a specific session partition. Shows proper session handling for custom protocols in combination with BrowserWindow creation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, net, protocol, session } = require('electron')\nconst path = require('node:path')\nconst url = require('url')\n\napp.whenReady().then(() => {\n  const partition = 'persist:example'\n  const ses = session.fromPartition(partition)\n\n  ses.protocol.handle('atom', (request) => {\n    const filePath = request.url.slice('atom://'.length)\n    return net.fetch(url.pathToFileURL(path.resolve(__dirname, filePath)).toString())\n  })\n\n  const mainWindow = new BrowserWindow({ webPreferences: { partition } })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring WebdriverIO for Electron Testing\nDESCRIPTION: Example configuration file for WebdriverIO that sets up Electron service and capabilities. This configuration allows WebdriverIO to find and interact with your Electron application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  // ...\n  services: ['electron'],\n  capabilities: [{\n    browserName: 'electron',\n    'wdio:electronServiceOptions': {\n      // WebdriverIO can automatically find your bundled application\n      // if you use Electron Forge or electron-builder, otherwise you\n      // can define it here, e.g.:\n      // appBinaryPath: './path/to/bundled/application.exe',\n      appArgs: ['foo', 'bar=baz']\n    }\n  }]\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Test Suite Setup with Custom TestDriver\nDESCRIPTION: Example of setting up a test suite using the custom TestDriver with the AVA testing framework. This shows how to initialize the test driver, wait for app readiness, and handle cleanup.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst test = require('ava')\nconst electronPath = require('electron')\nconst { TestDriver } = require('./testDriver')\n\nconst app = new TestDriver({\n  path: electronPath,\n  args: ['./app'],\n  env: {\n    NODE_ENV: 'test'\n  }\n})\ntest.before(async t => {\n  await app.isReady\n})\ntest.after.always('cleanup', async t => {\n  await app.stop()\n})\n```\n\n----------------------------------------\n\nTITLE: Single Instance Lock Management in Electron\nDESCRIPTION: Example showing how to handle single instance application behavior in Electron. The code demonstrates requesting a single instance lock and handling secondary instance launches by focusing the primary window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\nlet myWindow = null\n\nconst additionalData = { myKey: 'myValue' }\nconst gotTheLock = app.requestSingleInstanceLock(additionalData)\n\nif (!gotTheLock) {\n  app.quit()\n} else {\n  app.on('second-instance', (event, commandLine, workingDirectory, additionalData) => {\n    // Print out data received from the second instance.\n    console.log(additionalData)\n\n    // Someone tried to run a second instance, we should focus our window.\n    if (myWindow) {\n      if (myWindow.isMinimized()) myWindow.restore()\n      myWindow.focus()\n    }\n  })\n\n  app.whenReady().then(() => {\n    myWindow = new BrowserWindow({})\n    myWindow.loadURL('https://electronjs.org')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Local Keyboard Shortcuts in Electron\nDESCRIPTION: This snippet demonstrates how to register local keyboard shortcuts using the Menu and MenuItem modules in Electron. The accelerator property is used to define the shortcut, which is triggered only when the application is focused. The accelerator is set differently depending on the operating system.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, Menu, MenuItem } = require('electron/main')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\nconst menu = new Menu()\nmenu.append(new MenuItem({\n  label: 'Electron',\n  submenu: [{\n    role: 'help',\n    accelerator: process.platform === 'darwin' ? 'Alt+Cmd+I' : 'Alt+Shift+I',\n    click: () => { console.log('Electron rocks!') }\n  }]\n}))\n\nMenu.setApplicationMenu(menu)\n\napp.whenReady().then(createWindow)\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: WebView Configuration Properties\nDESCRIPTION: Configuration options for Electron WebView including transparency settings, deprecated paste command support, and experimental corner smoothing CSS. The transparent option controls background transparency, enableDeprecatedPaste enables legacy paste command support, and enableCornerSmoothingCSS controls corner smoothing CSS rules.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/web-preferences.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `transparent` boolean (optional) - Whether to enable background transparency for the guest page. Default is `true`. **Note:** The guest page's text and background colors are derived from the [color scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme) of its root element. When transparency is enabled, the text color will still change accordingly but the background will remain transparent.\n* `enableDeprecatedPaste` boolean (optional) _Deprecated_ - Whether to enable the `paste` [execCommand](https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand). Default is `false`.\n* `enableCornerSmoothingCSS` boolean (optional) _Experimental_ - Whether the [`-electron-corner-smoothing` CSS rule](../corner-smoothing-css.md) is enabled. Default is `true`.\n```\n\n----------------------------------------\n\nTITLE: Setting Window Focusability in Electron for macOS and Windows\nDESCRIPTION: Changes whether the window can be focused by the user. On macOS, this doesn't remove focus from the window if it already has focus.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setFocusable(focusable)\n```\n\n----------------------------------------\n\nTITLE: Using Fetch API in Electron Session\nDESCRIPTION: Demonstrates how to use the session's fetch API to make network requests using Chrome's network stack. Includes error handling and response processing.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function example () {\n  const response = await net.fetch('https://my.app')\n  if (response.ok) {\n    const body = await response.json()\n    // ... use the result.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MessagePort Usage Between Renderer and Main Process in Electron\nDESCRIPTION: Demonstrates the fundamental usage of MessagePort in Electron, showing how to create a channel in the renderer process and pass one end to the main process. The main process receives the port and can communicate with the renderer through this direct channel.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// MessagePorts are created in pairs. A connected pair of message ports is\n// called a channel.\nconst channel = new MessageChannel()\n\n// The only difference between port1 and port2 is in how you use them. Messages\n// sent to port1 will be received by port2 and vice-versa.\nconst port1 = channel.port1\nconst port2 = channel.port2\n\n// It's OK to send a message on the channel before the other end has registered\n// a listener. Messages will be queued until a listener is registered.\nport2.postMessage({ answer: 42 })\n\n// Here we send the other end of the channel, port1, to the main process. It's\n// also possible to send MessagePorts to other frames, or to Web Workers, etc.\nipcRenderer.postMessage('port', null, [port1])\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// In the main process, we receive the port.\nipcMain.on('port', (event) => {\n  // When we receive a MessagePort in the main process, it becomes a\n  // MessagePortMain.\n  const port = event.ports[0]\n\n  // MessagePortMain uses the Node.js-style events API, rather than the\n  // web-style events API. So .on('message', ...) instead of .onmessage = ...\n  port.on('message', (event) => {\n    // data is { answer: 42 }\n    const data = event.data\n  })\n\n  // MessagePortMain queues messages until the .start() method has been called.\n  port.start()\n})\n```\n\n----------------------------------------\n\nTITLE: Expose Event Handler with contextBridge in Electron\nDESCRIPTION: This JavaScript snippet demonstrates how to safely expose an event handler using the `contextBridge` in Electron, preventing direct exposure of the `ipcRenderer` module for security reasons. It defines a wrapper function that subscribes to a specific IPC event and invokes a callback function with the event arguments.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontextBridge.exposeInMainWorld('app', {\n  onEvent: (cb) => ipcRenderer.on('foo', (e, ...args) => cb(args))\n})\n```\n\n----------------------------------------\n\nTITLE: Permission Request Handling in Electron\nDESCRIPTION: Demonstrates how to implement a permission request handler for various web API permissions like notifications, media access, and geolocation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session } = require('electron')\nsession.fromPartition('some-partition').setPermissionRequestHandler((webContents, permission, callback) => {\n  if (webContents.getURL() === 'some-host' && permission === 'notifications') {\n    return callback(false) // denied.\n  }\n\n  callback(true)\n})\n```\n\n----------------------------------------\n\nTITLE: Preload Script for Handling MessagePorts in Renderer Processes\nDESCRIPTION: A preload script that receives a MessagePort from the main process and makes it globally available in the renderer. It sets up a message handler for incoming messages from the other end of the channel.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ipcRenderer } = require('electron')\n\nipcRenderer.on('port', e => {\n  // port received, make it globally available.\n  window.electronMessagePort = e.ports[0]\n\n  window.electronMessagePort.onmessage = messageEvent => {\n    // handle message\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Showing Save Dialog in Electron\nDESCRIPTION: This function displays a save dialog in Electron. It accepts optional window and options parameters, and returns a Promise with information about the selected file path and whether the dialog was canceled.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ndialog.showSaveDialog([window, ]options)\n```\n\n----------------------------------------\n\nTITLE: PowerMonitor isOnBatteryPower Method\nDESCRIPTION: Method that returns a boolean indicating whether the system is currently running on battery power.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npowerMonitor.isOnBatteryPower()\n```\n\n----------------------------------------\n\nTITLE: Handling Protocol URLs in Windows and Linux\nDESCRIPTION: Implementation for Windows and Linux to handle protocol URLs using the single instance lock pattern. When a second instance is launched with a protocol URL, it brings the existing window to focus and displays the URL.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst gotTheLock = app.requestSingleInstanceLock()\n\nif (!gotTheLock) {\n  app.quit()\n} else {\n  app.on('second-instance', (event, commandLine, workingDirectory) => {\n    // Someone tried to run a second instance, we should focus our window.\n    if (mainWindow) {\n      if (mainWindow.isMinimized()) mainWindow.restore()\n      mainWindow.focus()\n    }\n    // the commandLine is array of strings in which last element is deep link url\n    dialog.showErrorBox('Welcome Back', `You arrived from: ${commandLine.pop()}`)\n  })\n\n  // Create mainWindow, load the rest of the app, etc...\n  app.whenReady().then(() => {\n    createWindow()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Window Close Prevention Example - JavaScript\nDESCRIPTION: Demonstrates how to handle window closing events and prevent window closure using the beforeunload event.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onbeforeunload = (e) => {\n  console.log('I do not want to be closed')\n\n  // Unlike usual browsers that a message box will be prompted to users, returning\n  // a non-void value will silently cancel the close.\n  // It is recommended to use the dialog API to let the user confirm closing the\n  // application.\n  e.returnValue = false\n}\n```\n\n----------------------------------------\n\nTITLE: DevTools Management for Webview\nDESCRIPTION: Methods to control the DevTools window for the webview, including opening, closing, checking status, and inspecting elements or workers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.openDevTools()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.closeDevTools()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.isDevToolsOpened()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.isDevToolsFocused()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.inspectElement(x, y)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.inspectSharedWorker()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.inspectServiceWorker()\n```\n\n----------------------------------------\n\nTITLE: Setting Up a MessageChannel Between Two Renderers in Electron\nDESCRIPTION: Shows how the main process can set up a MessageChannel and send each port to different renderer processes, enabling direct communication between renderer processes without using the main process as an intermediary.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow, app, MessageChannelMain } = require('electron')\n\napp.whenReady().then(async () => {\n  // create the windows.\n  const mainWindow = new BrowserWindow({\n    show: false,\n    webPreferences: {\n      contextIsolation: false,\n      preload: 'preloadMain.js'\n    }\n  })\n\n  const secondaryWindow = new BrowserWindow({\n    show: false,\n    webPreferences: {\n      contextIsolation: false,\n      preload: 'preloadSecondary.js'\n    }\n  })\n\n  // set up the channel.\n  const { port1, port2 } = new MessageChannelMain()\n\n  // once the webContents are ready, send a port to each webContents with postMessage.\n  mainWindow.once('ready-to-show', () => {\n    mainWindow.webContents.postMessage('port', null, [port1])\n  })\n\n  secondaryWindow.once('ready-to-show', () => {\n    secondaryWindow.webContents.postMessage('port', null, [port2])\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Adjusting Text Selection - JavaScript\nDESCRIPTION: This example demonstrates how to adjust the current text selection in a BrowserWindow's web contents. It adjusts both the starting and ending points of the selection by specified amounts.  A positive amount moves the selection towards the end of the document, while a negative amount moves it towards the beginning.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst win = new BrowserWindow()\n\n// Adjusts the beginning of the selection 1 letter forward,\n// and the end of the selection 5 letters forward.\nwin.webContents.adjustSelection({ start: 1, end: 5 })\n\n// Adjusts the beginning of the selection 2 letters forward,\n// and the end of the selection 3 letters backward.\nwin.webContents.adjustSelection({ start: 2, end: -3 })\n```\n\n----------------------------------------\n\nTITLE: Certificate Verification in Electron Session\nDESCRIPTION: Example of implementing custom certificate verification logic for an Electron session, demonstrating how to accept or reject certificates based on hostname.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\nwin.webContents.session.setCertificateVerifyProc((request, callback) => {\n  const { hostname } = request\n  if (hostname === 'github.com') {\n    callback(0)\n  } else {\n    callback(-2)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Electron Test Driver using Node.js IPC\nDESCRIPTION: Implementation of a custom test driver using Node.js child_process to spawn an Electron application and communicate via IPC. This shows the basic setup for establishing communication between test and app.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst childProcess = require('node:child_process')\nconst electronPath = require('electron')\n\n// spawn the process\nconst env = { /* ... */ }\nconst stdio = ['inherit', 'inherit', 'inherit', 'ipc']\nconst appProcess = childProcess.spawn(electronPath, ['./app'], { stdio, env })\n\n// listen for IPC messages from the app\nappProcess.on('message', (msg) => {\n  // ...\n})\n\n// send an IPC message to the app\nappProcess.send({ my: 'message' })\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots of Electron Windows with Playwright\nDESCRIPTION: Example of accessing the first BrowserWindow in an Electron application and taking a screenshot. This demonstrates how to interact with renderer processes using Playwright's Page API.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test, _electron: electron } = require('@playwright/test')\n\ntest('save screenshot', async () => {\n  const electronApp = await electron.launch({ args: ['main.js'] })\n  const window = await electronApp.firstWindow()\n  await window.screenshot({ path: 'intro.png' })\n  // close app\n  await electronApp.close()\n})\n```\n\n----------------------------------------\n\nTITLE: Object Serialization in Electron IPC\nDESCRIPTION: Documentation detailing the object serialization process in Electron's IPC implementation using the Structured Clone Algorithm, including limitations on serializable object types.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nElectron's IPC implementation uses the HTML standard\\n[Structured Clone Algorithm][sca] to serialize objects passed between processes, meaning that\\nonly certain types of objects can be passed through IPC channels.\\n\\nIn particular, DOM objects (e.g. `Element`, `Location` and `DOMMatrix`), Node.js objects\\nbacked by C++ classes (e.g. `process.env`, some members of `Stream`), and Electron objects\\nbacked by C++ classes (e.g. `WebContents`, `BrowserWindow` and `WebFrame`) are not serializable\\nwith Structured Clone.\n```\n\n----------------------------------------\n\nTITLE: Synchronous Open Dialog with Window\nDESCRIPTION: Example showing how to open a synchronous file/directory selection dialog attached to a window\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.showOpenDialogSync(mainWindow, {\n  properties: ['openFile', 'openDirectory']\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Window Bounds in Electron\nDESCRIPTION: Demonstrates how to set the bounds (position and size) of a BrowserWindow instance. It shows setting all bounds properties at once and setting a single property individually.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\n// set all bounds properties\nwin.setBounds({ x: 440, y: 225, width: 800, height: 600 })\n\n// set a single bounds property\nwin.setBounds({ width: 100 })\n\n// { x: 440, y: 225, width: 100, height: 600 }\nconsole.log(win.getBounds())\n```\n\n----------------------------------------\n\nTITLE: Transferring MessagePort from Renderer to Main Process in Electron\nDESCRIPTION: Example demonstrating how to transfer MessagePort objects from the renderer process to the main process using ipcRenderer.postMessage. The main process receives the ports through the event object.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-renderer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Renderer process\nconst { port1, port2 } = new MessageChannel()\nipcRenderer.postMessage('port', { message: 'hello' }, [port1])\n\n// Main process\nipcMain.on('port', (e, msg) => {\n  const [port] = e.ports\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Windows JSON Resource Configuration for ASAR Integrity\nDESCRIPTION: This JSON snippet illustrates how to define a resource of type Integrity for ASAR validation in a Windows application, specifying the file, algorithm, and hash.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"file\": \"resources\\\\app.asar\",\n    \"alg\": \"sha256\",\n    \"value\": \"9d1f61ea03c4bb62b4416387a521101b81151da0cfbe18c9f8c8b818c5cebfac\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Information\nDESCRIPTION: Method to fetch product descriptions from the Mac App Store using product identifiers. Returns a Promise resolving to an array of Product objects.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninAppPurchase.getProducts(productIDs)\n```\n\n----------------------------------------\n\nTITLE: Implementing Preload Script for Context-Isolated Communication\nDESCRIPTION: Preload script that bridges communication between the isolated world and main world, handling port transfer for direct main process communication.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ipcRenderer } = require('electron')\n\n// We need to wait until the main world is ready to receive the message before\n// sending the port. We create this promise in the preload so it's guaranteed\n// to register the onload listener before the load event is fired.\nconst windowLoaded = new Promise(resolve => {\n  window.onload = resolve\n})\n\nipcRenderer.on('main-world-port', async (event) => {\n  await windowLoaded\n  // We use regular window.postMessage to transfer the port from the isolated\n  // world to the main world.\n  window.postMessage('main-world-port', '*', event.ports)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Bluetooth Device Selection in Electron\nDESCRIPTION: This snippet demonstrates how to listen for the 'select-bluetooth-device' event on a WebContents object and handle Bluetooth device selection.  It prevents the default selection behavior, finds a device named 'test' in the device list, and calls the callback with either the device ID or an empty string to cancel the request.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\n\nlet win = null\n\napp.whenReady().then(() => {\n  win = new BrowserWindow({ width: 800, height: 600 })\n  win.webContents.on('select-bluetooth-device', (event, deviceList, callback) => {\n    event.preventDefault()\n    const result = deviceList.find((device) => {\n      return device.deviceName === 'test'\n    })\n    if (!result) {\n      // The device wasn't found so we need to either wait longer (eg until the\n      // device is turned on) or cancel the request by calling the callback\n      // with an empty string.\n      callback('')\n    } else {\n      callback(result.deviceId)\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Server URL in Electron\nDESCRIPTION: JavaScript code snippet showing how to construct and set the update server URL for both Windows and macOS platforms in an Electron application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, autoUpdater } = require('electron')\n\nconst server = 'https://your-deployment-url.com'\n// e.g. for Windows and app version 1.2.3\n// https://your-deployment-url.com/update/win32/1.2.3\nconst url = `${server}/update/${process.platform}/${app.getVersion()}`\n\nautoUpdater.setFeedURL({ url })\n```\n\n----------------------------------------\n\nTITLE: Setting Google API Key for Geolocation in Electron\nDESCRIPTION: Example of setting a Google API key in the main process to enable geolocation support in Electron. This should be done before opening any browser windows that will make geolocation requests.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nprocess.env.GOOGLE_API_KEY = 'YOUR_KEY_HERE'\n```\n\n----------------------------------------\n\nTITLE: Using Electron process-specific module aliases in JavaScript\nDESCRIPTION: Demonstrates how to import process-specific modules using Electron's subpath exports. This example shows importing 'app' from the main process and 'shell' from the common modules.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron/main')\nconst { shell } = require('electron/common')\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeunload Handler to Prevent Window Closing\nDESCRIPTION: Demonstrates how to use the beforeunload event handler to prevent a window from closing by returning a non-undefined value. This is useful for confirming unsaved changes before closing.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onbeforeunload = (e) => {\n  console.log('I do not want to be closed')\n\n  // Unlike usual browsers that a message box will be prompted to users, returning\n  // a non-void value will silently cancel the close.\n  // It is recommended to use the dialog API to let the user confirm closing the\n  // application.\n  e.returnValue = false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Context Menu in Electron Renderer Process\nDESCRIPTION: Example showing how to create and display a context menu initiated by the renderer process. This pattern uses IPC to communicate between renderer and main processes to show a context menu when a user right-clicks the page.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// renderer\nwindow.addEventListener('contextmenu', (e) => {\n  e.preventDefault()\n  ipcRenderer.send('show-context-menu')\n})\n\nipcRenderer.on('context-menu-command', (e, command) => {\n  // ...\n})\n\n// main\nipcMain.on('show-context-menu', (event) => {\n  const template = [\n    {\n      label: 'Menu Item 1',\n      click: () => { event.sender.send('context-menu-command', 'menu-item-1') }\n    },\n    { type: 'separator' },\n    { label: 'Menu Item 2', type: 'checkbox', checked: true }\n  ]\n  const menu = Menu.buildFromTemplate(template)\n  menu.popup({ window: BrowserWindow.fromWebContents(event.sender) })\n})\n```\n\n----------------------------------------\n\nTITLE: Constructing TouchBarPopover Instance in Electron\nDESCRIPTION: Creates a new TouchBarPopover instance with configurable options including label, icon, items, and close button visibility. Used to display interactive popovers in the MacOS Touch Bar.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-popover.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew TouchBarPopover({\n  label: 'Optional Button Text',\n  icon: nativeImage,\n  items: touchBarInstance,\n  showCloseButton: true\n})\n```\n\n----------------------------------------\n\nTITLE: Using Mousetrap Library for Advanced Key Detection in Electron\nDESCRIPTION: This snippet demonstrates how to use the Mousetrap library for advanced key detection in an Electron renderer process. It showcases binding single keys, combinations, sequences, and preventing default behavior. Mousetrap provides a convenient way to manage keyboard shortcuts.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMousetrap.bind('4', () => { console.log('4') })\nMousetrap.bind('?', () => { console.log('show shortcuts!') })\nMousetrap.bind('esc', () => { console.log('escape') }, 'keyup')\n\n// combinations\nMousetrap.bind('command+shift+k', () => { console.log('command shift k') })\n\n// map multiple combinations to the same callback\nMousetrap.bind(['command+k', 'ctrl+k'], () => {\n  console.log('command k or control k')\n\n  // return false to prevent default behavior and stop event from bubbling\n  return false\n})\n\n// gmail style sequences\nMousetrap.bind('g i', () => { console.log('go to inbox') })\nMousetrap.bind('* a', () => { console.log('select all') })\n\n// konami code!\nMousetrap.bind('up up down down left right left right b a enter', () => {\n  console.log('konami code')\n})\n```\n\n----------------------------------------\n\nTITLE: Asynchronous ESM Import in Electron Main Process\nDESCRIPTION: Demonstrates the need to use 'await' for dynamic ESM imports in the main process to ensure code execution before the app's 'ready' event.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/esm.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// add an await call here to guarantee that path setup will finish before `ready`\nimport('./set-up-paths.mjs')\n\napp.whenReady().then(() => {\n  console.log('This code may execute before the above import')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Process with Preload Script in Electron\nDESCRIPTION: Shows how to configure the main process to use a preload script by setting it in the BrowserWindow constructor options.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\nconst path = require('node:path')\n\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  createWindow()\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Serial Port Revocation in Electron\nDESCRIPTION: This snippet demonstrates how to handle the 'serial-port-revoked' event in an Electron application. It shows both the main process and renderer process code for revoking access to a serial port.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Browser Process\nconst { app, BrowserWindow } = require('electron')\n\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.webContents.session.on('serial-port-revoked', (event, details) => {\n    console.log(`Access revoked for serial device from origin ${details.origin}`)\n  })\n})\n\n// Renderer Process\n\nconst portConnect = async () => {\n  // Request a port.\n  const port = await navigator.serial.requestPort()\n\n  // Wait for the serial port to open.\n  await port.open({ baudRate: 9600 })\n\n  // ...later, revoke access to the serial port.\n  await port.forget()\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Command Line Switches in Electron Main Script\nDESCRIPTION: Example demonstrating how to use app.commandLine.appendSwitch to add command line switches to an Electron application before the app's ready event is emitted.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\napp.commandLine.appendSwitch('remote-debugging-port', '8315')\napp.commandLine.appendSwitch('host-rules', 'MAP * 127.0.0.1')\n\napp.whenReady().then(() => {\n  // Your code here\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing app.makeSingleInstance with app.requestSingleInstanceLock in Electron\nDESCRIPTION: This snippet demonstrates the replacement of `app.makeSingleInstance` with `app.requestSingleInstanceLock` and `app.on('second-instance')`. The newer API provides a more robust mechanism for handling single instance applications.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_87\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\napp.makeSingleInstance((argv, cwd) => {\n  /* ... */\n})\n// Replace with\napp.requestSingleInstanceLock()\napp.on('second-instance', (event, argv, cwd) => {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Comprehensive TestDriver Class Implementation\nDESCRIPTION: A complete implementation of a TestDriver class that wraps the child process IPC communication with RPC-style method calls. This provides a higher-level API for test suites to interact with the Electron application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclass TestDriver {\n  constructor ({ path, args, env }) {\n    this.rpcCalls = []\n\n    // start child process\n    env.APP_TEST_DRIVER = 1 // let the app know it should listen for messages\n    this.process = childProcess.spawn(path, args, { stdio: ['inherit', 'inherit', 'inherit', 'ipc'], env })\n\n    // handle rpc responses\n    this.process.on('message', (message) => {\n      // pop the handler\n      const rpcCall = this.rpcCalls[message.msgId]\n      if (!rpcCall) return\n      this.rpcCalls[message.msgId] = null\n      // reject/resolve\n      if (message.reject) rpcCall.reject(message.reject)\n      else rpcCall.resolve(message.resolve)\n    })\n\n    // wait for ready\n    this.isReady = this.rpc('isReady').catch((err) => {\n      console.error('Application failed to start', err)\n      this.stop()\n      process.exit(1)\n    })\n  }\n\n  // simple RPC call\n  // to use: driver.rpc('method', 1, 2, 3).then(...)\n  async rpc (cmd, ...args) {\n    // send rpc request\n    const msgId = this.rpcCalls.length\n    this.process.send({ msgId, cmd, args })\n    return new Promise((resolve, reject) => this.rpcCalls.push({ resolve, reject }))\n  }\n\n  stop () {\n    this.process.kill()\n  }\n}\n\nmodule.exports = { TestDriver }\n```\n\n----------------------------------------\n\nTITLE: Loading URL in WebContentsView\nDESCRIPTION: Shows how to create a WebContentsView instance and load a URL into its WebContents. Demonstrates basic usage of the webContents property.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents-view.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { WebContentsView } = require('electron')\nconst view = new WebContentsView()\nview.webContents.loadURL('https://electronjs.org/')\n```\n\n----------------------------------------\n\nTITLE: macOS ASAR Archive Structure\nDESCRIPTION: Demonstrates the file structure required when using an ASAR archive in a macOS Electron application.  The `app.asar` archive, containing the application's source code, is placed within the `Resources` directory of the Electron application bundle.  Electron will then load the application from this archive.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-21_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\n\"electron/Electron.app/Contents/Resources/\n└── app.asar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Settings for Electron Session\nDESCRIPTION: Sets the SSL configuration for the session. It allows specifying minimum and maximum SSL versions, and disabling specific cipher suites. All subsequent network requests will use the new configuration.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nses.setSSLConfig(config)\n```\n\n----------------------------------------\n\nTITLE: Using autoUpdater.setFeedURL Method in Electron\nDESCRIPTION: Sets the URL for updates and initializes the auto updater with optional configuration parameters. For macOS, allows setting HTTP headers and server type.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `autoUpdater.setFeedURL(options)`\n\n* `options` Object\n  * `url` string\n  * `headers` Record\\<string, string\\> (optional) _macOS_ - HTTP request headers.\n  * `serverType` string (optional) _macOS_ - Can be `json` or `default`, see the [Squirrel.Mac][squirrel-mac]\n    README for more information.\n```\n\n----------------------------------------\n\nTITLE: Handle IPC and Start Drag in main.js (Electron)\nDESCRIPTION: This JavaScript code in the main process sets up an IPC listener for the 'ondragstart' event. When the event is received, it retrieves the file path, constructs the full file path, sets the icon, and calls `event.sender.startDrag` to initiate the native drag and drop operation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { app, BrowserWindow, ipcMain } = require('electron/main')\nconst path = require('node:path')\nconst fs = require('node:fs')\nconst https = require('node:https')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  win.loadFile('index.html')\n}\n\nconst iconName = path.join(__dirname, 'iconForDragAndDrop.png')\nconst icon = fs.createWriteStream(iconName)\n\n// Create a new file to copy - you can also copy existing files.\nfs.writeFileSync(path.join(__dirname, 'drag-and-drop-1.md'), '# First file to test drag and drop')\nfs.writeFileSync(path.join(__dirname, 'drag-and-drop-2.md'), '# Second file to test drag and drop')\n\nhttps.get('https://img.icons8.com/ios/452/drag-and-drop.png', (response) => {\n  response.pipe(icon)\n})\n\napp.whenReady().then(createWindow)\n\nipcMain.on('ondragstart', (event, filePath) => {\n  event.sender.startDrag({\n    file: path.join(__dirname, filePath),\n    icon: iconName\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring RELEASES Response for Squirrel.Windows Update Server\nDESCRIPTION: Example of the RELEASES artifact content that should be returned by the update server for Windows Electron applications. This response includes the hash, download URL, and file size of the latest update package.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nB0892F3C7AC91D72A6271FF36905FEF8FE993520 https://your-static.storage/your-app-1.2.3-full.nupkg 103298365\n```\n\n----------------------------------------\n\nTITLE: Registering Stream Protocol in Electron\nDESCRIPTION: Example of registering a custom 'atom' protocol that sends a stream as a response. It demonstrates creating a PassThrough stream and returning it with custom headers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { protocol } = require('electron')\nconst { PassThrough } = require('stream')\n\nfunction createStream (text) {\n  const rv = new PassThrough() // PassThrough is also a Readable stream\n  rv.push(text)\n  rv.push(null)\n  return rv\n}\n\nprotocol.registerStreamProtocol('atom', (request, callback) => {\n  callback({\n    statusCode: 200,\n    headers: {\n      'content-type': 'text/html'\n    },\n    data: createStream('<h5>Response</h5>')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling ASAR Integrity in Electron Build\nDESCRIPTION: This JavaScript code snippet demonstrates how to enable ASAR integrity validation during the build process by flipping the necessary fuses using Electron's fuses package.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { flipFuses, FuseVersion, FuseV1Options } = require('@electron/fuses')\n\nflipFuses(\n  // E.g. /a/b/Foo.app\n  pathToPackagedApp,\n  {\n    version: FuseVersion.V1,\n    [FuseV1Options.EnableEmbeddedAsarIntegrityValidation]: true,\n    [FuseV1Options.OnlyLoadAppFromAsar]: true\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Handling USB Device Selection and Permissions in Electron\nDESCRIPTION: This snippet demonstrates how to handle USB device selection and permissions in an Electron application. It sets up permission handlers for USB devices and manages the selection process when a USB device needs to be chosen.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\n\nlet win = null\n\napp.whenReady().then(() => {\n  win = new BrowserWindow()\n\n  win.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {\n    if (permission === 'usb') {\n      // Add logic here to determine if permission should be given to allow USB selection\n      return true\n    }\n    return false\n  })\n\n  // Optionally, retrieve previously persisted devices from a persistent store (fetchGrantedDevices needs to be implemented by developer to fetch persisted permissions)\n  const grantedDevices = fetchGrantedDevices()\n\n  win.webContents.session.setDevicePermissionHandler((details) => {\n    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'usb') {\n      if (details.device.vendorId === 123 && details.device.productId === 345) {\n        // Always allow this type of device (this allows skipping the call to `navigator.usb.requestDevice` first)\n        return true\n      }\n\n      // Search through the list of devices that have previously been granted permission\n      return grantedDevices.some((grantedDevice) => {\n        return grantedDevice.vendorId === details.device.vendorId &&\n              grantedDevice.productId === details.device.productId &&\n              grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber\n      })\n    }\n    return false\n  })\n\n  win.webContents.session.on('select-usb-device', (event, details, callback) => {\n    event.preventDefault()\n    const selectedDevice = details.deviceList.find((device) => {\n      return device.vendorId === 9025 && device.productId === 67\n    })\n    if (selectedDevice) {\n      // Optionally, add this to the persisted devices (updateGrantedDevices needs to be implemented by developer to persist permissions)\n      grantedDevices.push(selectedDevice)\n      updateGrantedDevices(grantedDevices)\n    }\n    callback(selectedDevice?.deviceId)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Offscreen Rendering Example in Electron\nDESCRIPTION: This example demonstrates how to use offscreen rendering in Electron to capture a screenshot of a webpage. It disables hardware acceleration and sets up a BrowserWindow with offscreen rendering enabled. It then loads a URL, listens for the 'paint' event, saves the rendered image to a file, and sets the frame rate.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/offscreen-rendering.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron/main')\nconst fs = require('node:fs')\nconst path = require('node:path')\n\napp.disableHardwareAcceleration()\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      offscreen: true\n    }\n  })\n\n  win.loadURL('https://github.com')\n  win.webContents.on('paint', (event, dirty, image) => {\n    fs.writeFileSync('ex.png', image.toPNG())\n  })\n  win.webContents.setFrameRate(60)\n  console.log(`The screenshot has been successfully saved to ${path.join(process.cwd(), 'ex.png')}`)\n}\n\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Preventing keydown/keyup events with before-input-event in Electron\nDESCRIPTION: This code snippet demonstrates how to prevent default keydown/keyup events and menu shortcuts in an Electron application using the 'before-input-event' event. The code checks for Ctrl/Cmd key presses and selectively ignores menu shortcuts based on these modifier keys.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ width: 800, height: 600 })\n\nwin.webContents.on('before-input-event', (event, input) => {\n  // For example, only enable application menu keyboard shortcuts when\n  // Ctrl/Cmd are down.\n  win.webContents.setIgnoreMenuShortcuts(!input.control && !input.meta)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Desktop Capture in Electron Main Process\nDESCRIPTION: This snippet shows how to set up the main process to handle display media requests using desktopCapturer. It configures a request handler to programmatically provide access to screen capture sources.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/desktop-capturer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nconst { app, BrowserWindow, desktopCapturer, session } = require('electron')\n\napp.whenReady().then(() => {\n  const mainWindow = new BrowserWindow()\n\n  session.defaultSession.setDisplayMediaRequestHandler((request, callback) => {\n    desktopCapturer.getSources({ types: ['screen'] }).then((sources) => {\n      // Grant access to the first screen found.\n      callback({ video: sources[0], audio: 'loopback' })\n    })\n    // If true, use the system picker if available.\n    // Note: this is currently experimental. If the system picker\n    // is available, it will be used and the media request handler\n    // will not be invoked.\n  }, { useSystemPicker: true })\n\n  mainWindow.loadFile('index.html')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Zoom Factor in Electron WebFrame\nDESCRIPTION: Example showing how to zoom the current page to 200% using webFrame's setZoomFactor method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { webFrame } = require('electron')\n\nwebFrame.setZoomFactor(2)\n```\n\n----------------------------------------\n\nTITLE: Handling HID Device Selection and Permission in Electron\nDESCRIPTION: This snippet demonstrates how to handle HID device selection, set permission checks, and manage device permissions in an Electron application. It includes event listeners for 'select-hid-device' and uses session methods to control access.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\n\nlet win = null\n\napp.whenReady().then(() => {\n  win = new BrowserWindow()\n\n  win.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {\n    if (permission === 'hid') {\n      // Add logic here to determine if permission should be given to allow HID selection\n      return true\n    }\n    return false\n  })\n\n  // Optionally, retrieve previously persisted devices from a persistent store\n  const grantedDevices = fetchGrantedDevices()\n\n  win.webContents.session.setDevicePermissionHandler((details) => {\n    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'hid') {\n      if (details.device.vendorId === 123 && details.device.productId === 345) {\n        // Always allow this type of device (this allows skipping the call to `navigator.hid.requestDevice` first)\n        return true\n      }\n\n      // Search through the list of devices that have previously been granted permission\n      return grantedDevices.some((grantedDevice) => {\n        return grantedDevice.vendorId === details.device.vendorId &&\n              grantedDevice.productId === details.device.productId &&\n              grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber\n      })\n    }\n    return false\n  })\n\n  win.webContents.session.on('select-hid-device', (event, details, callback) => {\n    event.preventDefault()\n    const selectedDevice = details.deviceList.find((device) => {\n      return device.vendorId === 9025 && device.productId === 67\n    })\n    callback(selectedDevice?.deviceId)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Main Process: Creating the Browser Window\nDESCRIPTION: This JavaScript code runs in the Main process and creates the Electron browser window. It uses the `electron` module to create a `BrowserWindow` instance, loads the `index.html` file into it, and handles window activation and closing events. It requires the electron module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\n\nconst createWindow = () => {\n  const onlineStatusWindow = new BrowserWindow()\n\n  onlineStatusWindow.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Requiring Node builtins via remote in sandboxed Electron renderers\nDESCRIPTION: This snippet shows how to require Node.js built-in modules in sandboxed renderers. Previously, `require('child_process')` (or similar) could be used directly, but now `require('electron').remote.require('child_process')` must be used. This change enforces stricter isolation of the renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_77\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nrequire('child_process')\n// Replace with\nrequire('electron').remote.require('child_process')\n\n// Deprecated\nrequire('fs')\n// Replace with\nrequire('electron').remote.require('fs')\n\n// Deprecated\nrequire('os')\n// Replace with\nrequire('electron').remote.require('os')\n\n// Deprecated\nrequire('path')\n// Replace with\nrequire('electron').remote.require('path')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules in Electron Main Process\nDESCRIPTION: Initial setup code for the main process that imports necessary Electron modules for application lifecycle management and window creation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, shell } = require('electron')\nconst path = require('node:path')\n```\n\n----------------------------------------\n\nTITLE: Displaying Synchronous Message Box in Electron\nDESCRIPTION: This function shows a synchronous message box in Electron. It accepts optional window and options parameters, and returns the index of the clicked button. It blocks the process until the message box is closed.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndialog.showMessageBoxSync([window, ]options)\n```\n\n----------------------------------------\n\nTITLE: Custom Protocol Handling with Fetch\nDESCRIPTION: Shows how to implement custom protocol handling with the fetch API, including the ability to bypass custom protocol handlers using the bypassCustomProtocolHandlers option.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nprotocol.handle('https', (req) => {\n  if (req.url === 'https://my-app.com') {\n    return new Response('<body>my app</body>')\n  } else {\n    return net.fetch(req, { bypassCustomProtocolHandlers: true })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Opening URL with Electron Shell Module\nDESCRIPTION: Demonstrates how to use the shell module to open a URL in the system's default browser.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/shell.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { shell } = require('electron')\n\nshell.openExternal('https://github.com')\n```\n\n----------------------------------------\n\nTITLE: Navigating to Specific History Entries in Electron\nDESCRIPTION: This code demonstrates how to navigate to specific points in the browsing history using either absolute indexes or relative offsets from the current position.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Navigate to the 5th entry in the history, if the index is valid\nnavigationHistory.goToIndex(4)\n\n// Navigate to the 2nd entry forward from the current position\nif (navigationHistory.canGoToOffset(2)) {\n  navigationHistory.goToOffset(2)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Child Windows - Electron JavaScript\nDESCRIPTION: Returns an array of child windows associated with the current window, allowing for management of multiple windows in a parent-child relationship.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nwin.getChildWindows()\n```\n\n----------------------------------------\n\nTITLE: Loading a Chrome Extension in Electron\nDESCRIPTION: Example of loading a React DevTools extension in Electron using the Extensions API. The code demonstrates how to load an unpacked extension from a directory path, with the allowFileAccess option enabled to permit access to file:// URLs.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/extensions-api.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, session } = require('electron')\nconst path = require('node:path')\n\napp.whenReady().then(async () => {\n  await session.defaultSession.extensions.loadExtension(\n    path.join(__dirname, 'react-devtools'),\n    // allowFileAccess is required to load the devtools extension on file:// URLs.\n    { allowFileAccess: true }\n  )\n  // Note that in order to use the React DevTools extension, you'll need to\n  // download and unzip a copy of the extension.\n})\n```\n\n----------------------------------------\n\nTITLE: Node Module Version Error Example\nDESCRIPTION: Example error message shown when a native module is compiled against a different Node.js version than what Electron requires.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nError: The module '/path/to/native/module.node'\nwas compiled against a different Node.js version using\nNODE_MODULE_VERSION $XYZ. This version of Node.js requires\nNODE_MODULE_VERSION $ABC. Please try re-compiling or re-installing\nthe module (for instance, using `npm rebuild` or `npm install`).\n```\n\n----------------------------------------\n\nTITLE: Setting Visual Zoom Level Limits - JavaScript\nDESCRIPTION: This code snippet demonstrates how to set the minimum and maximum pinch-to-zoom level for a BrowserWindow's web contents.  It initializes a new BrowserWindow and then calls setVisualZoomLevelLimits to configure the zoom range. This functionality is disabled by default and must be explicitly enabled.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst win = new BrowserWindow()\nwin.webContents.setVisualZoomLevelLimits(1, 3)\n```\n\n----------------------------------------\n\nTITLE: Getting Tray Bounds Electron JavaScript\nDESCRIPTION: This snippet retrieves the `bounds` of the tray icon as a `Rectangle` object on macOS and Windows. It provides the dimensions and position of the tray icon on the screen. The method returns an object type. No external dependencies are required.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntray.getBounds()\n```\n\n----------------------------------------\n\nTITLE: Prompt Touch ID for Authentication JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `systemPreferences.promptTouchID` method to request Touch ID authentication from the user.  It requires the `electron` module. Upon successful authentication, a success message is logged. If authentication fails, an error message is logged.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { systemPreferences } = require('electron')\n\nsystemPreferences.promptTouchID('To get consent for a Security-Gated Thing').then(success => {\n  console.log('You have successfully authenticated with Touch ID!')\n}).catch(err => {\n  console.log(err)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Content Security Policy via Meta Tag in HTML\nDESCRIPTION: Example showing how to set a Content Security Policy directly in HTML using a meta tag, useful for file:// protocol where HTTP headers aren't available.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'\">\n```\n\n----------------------------------------\n\nTITLE: Handling custom protocol URLs on Windows\nDESCRIPTION: This example demonstrates the changes required for handling custom protocol URLs on Windows due to Chromium updates.  The deprecated `protocol.registerFileProtocol` and direct `loadURL` calls with file paths are replaced with `protocol.handle` and `net.fetch` to correctly resolve file URLs.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No longer works\nprotocol.registerFileProtocol('other', () => {\n  callback({ filePath: '/path/to/my/file' })\n})\n\nconst mainWindow = new BrowserWindow()\nmainWindow.loadURL('data:text/html,<script src=\"loaded-from-dataurl.js\"></script>', { baseURLForDataURL: 'other://C:\\\\myapp' })\nmainWindow.loadURL('other://C:\\\\myapp\\\\index.html')\n\n// Replace with\nconst path = require('node:path')\nconst nodeUrl = require('node:url')\nprotocol.handle(other, (req) => {\n  const srcPath = 'C:\\\\myapp\\\\'\n  const reqURL = new URL(req.url)\n  return net.fetch(nodeUrl.pathToFileURL(path.join(srcPath, reqURL.pathname)).toString())\n})\n\nmainWindow.loadURL('data:text/html,<script src=\"loaded-from-dataurl.js\"></script>', { baseURLForDataURL: 'other://' })\nmainWindow.loadURL('other://index.html')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Information from Webview\nDESCRIPTION: Methods to get current page information from a webview element, including URL, title, and various loading states.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.getURL()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.getTitle()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.isLoading()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.isLoadingMainFrame()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.isWaitingForResponse()\n```\n\n----------------------------------------\n\nTITLE: Load Local HTML File in Electron\nDESCRIPTION: This code shows how to load a local HTML file into an Electron BrowserWindow. The `loadFile` method expects a file path relative to the application's root directory.  This example assumes a directory structure with an 'src' folder containing 'index.html'.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst win = new BrowserWindow()\nwin.loadFile('src/index.html')\n```\n\n----------------------------------------\n\nTITLE: Reading HTML from Clipboard in Electron\nDESCRIPTION: Demonstrates how to read HTML markup from the system clipboard using the clipboard.readHTML() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nclipboard.writeHTML('<b>Hi</b>')\nconst html = clipboard.readHTML()\n\nconsole.log(html)\n// <meta charset='utf-8'><b>Hi</b>\n```\n\n----------------------------------------\n\nTITLE: Handling IPC Messages in Guest Page with Electron\nDESCRIPTION: Shows how to receive messages from the embedder page and send responses back using the Electron IPC renderer.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// In guest page.\nconst { ipcRenderer } = require('electron')\nipcRenderer.on('ping', () => {\n  ipcRenderer.sendToHost('pong')\n})\n```\n\n----------------------------------------\n\nTITLE: Making webContents.getZoomFactor synchronous in Electron\nDESCRIPTION: This snippet shows the change of `webContents.getZoomFactor` to a synchronous function that returns the zoom factor directly, instead of using a callback.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_86\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nwebContents.getZoomFactor((factor) => {\n  console.log(factor)\n})\n// Replace with\nconst factor = webContents.getZoomFactor()\nconsole.log(factor)\n```\n\n----------------------------------------\n\nTITLE: Creating Interrupted Download in Electron Session\nDESCRIPTION: Allows resuming cancelled or interrupted downloads from previous sessions. It generates a DownloadItem that can be accessed with the 'will-download' event. The download starts when the 'resume' API is called on the DownloadItem.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nses.createInterruptedDownload(options)\n```\n\n----------------------------------------\n\nTITLE: Implementing Inter-Process Communication with parentPort in Electron\nDESCRIPTION: Example of bidirectional communication between a main process and a utility process using parentPort. The main process sends a message to the child process, which then processes the message and sends a response back to the parent.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/parent-port.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Main process\nconst child = utilityProcess.fork(path.join(__dirname, 'test.js'))\nchild.postMessage({ message: 'hello' })\nchild.on('message', (data) => {\n  console.log(data) // hello world!\n})\n\n// Child process\nprocess.parentPort.on('message', (e) => {\n  process.parentPort.postMessage(`${e.data} world!`)\n})\n```\n\n----------------------------------------\n\nTITLE: Finding Text in Webview\nDESCRIPTION: Methods to search for text within the webview's page and control the search process, including options for case sensitivity and navigation direction.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.findInPage(text[, options])\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.stopFindInPage(action)\n```\n\n----------------------------------------\n\nTITLE: Creating a GET request to GitHub.com using net.request in Electron\nDESCRIPTION: This example demonstrates how to create an HTTP request to GitHub.com by specifying the protocol, hostname, port, and path. The request uses the HTTPS protocol on port 443 with a GET method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = net.request({\n  method: 'GET',\n  protocol: 'https:',\n  hostname: 'github.com',\n  port: 443,\n  path: '/'\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw HTTP Headers in Electron IncomingMessage\nDESCRIPTION: Demonstrates how to access and log raw HTTP headers from an IncomingMessage response object. The rawHeaders property returns an array where even indices contain header names and odd indices contain corresponding values, preserving the original case and duplicate headers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/incoming-message.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(response.rawHeaders)\n```\n\n----------------------------------------\n\nTITLE: Electron Forge Configuration for Protocol Handlers\nDESCRIPTION: JSON configuration for Electron Forge that specifies the custom protocol handler for both macOS (via packagerConfig) and Linux (via maker-deb configuration).\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"forge\": {\n      \"packagerConfig\": {\n        \"protocols\": [\n          {\n            \"name\": \"Electron Fiddle\",\n            \"schemes\": [\"electron-fiddle\"]\n          }\n        ]\n      },\n      \"makers\": [\n        {\n          \"name\": \"@electron-forge/maker-deb\",\n          \"config\": {\n            \"mimeType\": [\"x-scheme-handler/electron-fiddle\"]\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing BrowserWindow extension APIs with session APIs\nDESCRIPTION: Shows how to replace the deprecated `BrowserWindow` extension APIs (e.g., `addExtension`, `removeExtension`) with the corresponding session APIs (e.g., `loadExtension`, `removeExtension`).\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed in Electron 13\nBrowserWindow.addExtension(path)\nBrowserWindow.addDevToolsExtension(path)\n// Replace with\nsession.defaultSession.loadExtension(path)\n```\n\n----------------------------------------\n\nTITLE: Loading Chrome Extension in Electron\nDESCRIPTION: Demonstrates how to load an unpacked Chrome extension into an Electron app using the session.defaultSession.loadExtension method. It includes options for allowing file access and notes on extension compatibility.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, session } = require('electron')\nconst path = require('node:path')\n\napp.whenReady().then(async () => {\n  await session.defaultSession.loadExtension(\n    path.join(__dirname, 'react-devtools'),\n    // allowFileAccess is required to load the devtools extension on file:// URLs.\n    { allowFileAccess: true }\n  )\n  // Note that in order to use the React DevTools extension, you'll need to\n  // download and unzip a copy of the extension.\n})\n```\n\n----------------------------------------\n\nTITLE: Auth Server Whitelist Example in Electron\nDESCRIPTION: Example showing how to use the --auth-server-whitelist flag to specify a comma-separated list of servers for which integrated authentication is enabled.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n--auth-server-whitelist='*example.com, *foobar.com, *baz'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Buttons on Hover for macOS Title Bar\nDESCRIPTION: Sets up a macOS-specific title bar style that hides traffic lights (window controls) until hovered over, useful for creating custom traffic lights while still using native UI controls.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ titleBarStyle: 'customButtonsOnHover' })\n```\n\n----------------------------------------\n\nTITLE: Custom Protocol Handling with Net Fetch\nDESCRIPTION: Example showing how to handle custom protocols with net.fetch, including the ability to bypass custom protocol handlers for specific requests.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/net.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nprotocol.handle('https', (req) => {\n  if (req.url === 'https://my-app.com') {\n    return new Response('<body>my app</body>')\n  } else {\n    return net.fetch(req, { bypassCustomProtocolHandlers: true })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Window on an External Display in Electron\nDESCRIPTION: This example shows how to detect an external display and create a window on it. It finds a display that is not at position (0,0) and positions a new window on that external display.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/screen.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, screen } = require('electron')\n\nlet win\n\napp.whenReady().then(() => {\n  const displays = screen.getAllDisplays()\n  const externalDisplay = displays.find((display) => {\n    return display.bounds.x !== 0 || display.bounds.y !== 0\n  })\n\n  if (externalDisplay) {\n    win = new BrowserWindow({\n      x: externalDisplay.bounds.x + 50,\n      y: externalDisplay.bounds.y + 50\n    })\n    win.loadURL('https://github.com')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Writing Binary Data to Clipboard in Electron\nDESCRIPTION: Demonstrates how to write binary data to the clipboard as a Buffer using the experimental clipboard.writeBuffer() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nconst buffer = Buffer.from('writeBuffer', 'utf8')\nclipboard.writeBuffer('public/utf8-plain-text', buffer)\n```\n\n----------------------------------------\n\nTITLE: Loading a Web Page from ASAR Archive using Electron\nDESCRIPTION: This code snippet illustrates how to load a web page contained in an ASAR archive into an Electron BrowserWindow.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\nwin.loadURL('file:///path/to/example.asar/static/index.html')\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Events in Electron Preload Script\nDESCRIPTION: This JavaScript preload script adds event listeners to toggle mouse event ignoring based on mouse enter and leave events on a specific element.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('DOMContentLoaded', () => {\n  const el = document.getElementById('clickThroughElement')\n  el.addEventListener('mouseenter', () => {\n    ipcRenderer.send('set-ignore-mouse-events', true, { forward: true })\n  })\n  el.addEventListener('mouseleave', () => {\n    ipcRenderer.send('set-ignore-mouse-events', false)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Relaunching an Electron Application with Arguments\nDESCRIPTION: This snippet demonstrates how to restart the current Electron application instance with additional command line arguments. It calls relaunch() with the current arguments plus a '--relaunch' flag, then immediately exits the application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.relaunch({ args: process.argv.slice(1).concat(['--relaunch']) })\napp.exit(0)\n```\n\n----------------------------------------\n\nTITLE: Accessing Electron Main Process with Playwright\nDESCRIPTION: Example of accessing and evaluating code in Electron's main process using Playwright. This snippet shows how to check if the app is packaged by accessing the app object from the main process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test, _electron: electron } = require('@playwright/test')\n\ntest('get isPackaged', async () => {\n  const electronApp = await electron.launch({ args: ['main.js'] })\n  const isPackaged = await electronApp.evaluate(async ({ app }) => {\n    // This runs in Electron's main process, parameter here is always\n    // the result of the require('electron') in the main app script.\n    return app.isPackaged\n  })\n  console.log(isPackaged) // false (because we're in development mode)\n  // close app\n  await electronApp.close()\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Forge Scripts to package.json\nDESCRIPTION: Scripts added to package.json by Electron Forge for starting, packaging, and making the application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"electron-forge start\",\n    \"package\": \"electron-forge package\",\n    \"make\": \"electron-forge make\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Electron App Properties\nDESCRIPTION: This snippet demonstrates how to access various properties of the Electron app module. These properties provide information about the application's state, allow manipulation of the app's appearance, and offer system-level information.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.badgeCount = 5; // Set badge count (Linux, macOS)\nconst cmdLine = app.commandLine; // Access command line arguments\nconst dock = app.dock; // Access dock object (macOS)\nconst isPackaged = app.isPackaged; // Check if app is packaged\nconst appName = app.name; // Get application name\napp.userAgentFallback = 'Custom User Agent'; // Set fallback user agent\nconst isARM64Translated = app.runningUnderARM64Translation; // Check if running under ARM64 translation\n```\n\n----------------------------------------\n\nTITLE: Creating a MenuItem Instance in Electron\nDESCRIPTION: Demonstrates how to create a new MenuItem instance with various options including click handler, role, type, label, and other properties.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/menu-item.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew MenuItem({\n  click: (menuItem, window, event) => {\n    // Handle click event\n  },\n  role: 'copy',\n  type: 'normal',\n  label: 'Copy',\n  sublabel: 'Copy selected text',\n  accelerator: 'CommandOrControl+C',\n  enabled: true,\n  visible: true\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Text from Clipboard in Electron\nDESCRIPTION: Demonstrates how to read plain text content from the system clipboard using the clipboard.readText() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nclipboard.writeText('hello i am a bit of text!')\n\nconst text = clipboard.readText()\nconsole.log(text)\n// hello i am a bit of text!'\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium WebDriver for Electron Testing\nDESCRIPTION: Example code that configures Selenium WebDriver to connect to ChromeDriver and target an Electron application. It includes setting the ChromeDriver server URL and specifying the path to the Electron binary.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst webdriver = require('selenium-webdriver')\nconst driver = new webdriver.Builder()\n  // The \"9515\" is the port opened by ChromeDriver.\n  .usingServer('http://localhost:9515')\n  .withCapabilities({\n    'goog:chromeOptions': {\n      // Here is the path to your Electron binary.\n      binary: '/Path-to-Your-App.app/Contents/MacOS/Electron'\n    }\n  })\n  .forBrowser('chrome') // note: use .forBrowser('electron') for selenium-webdriver <= 3.6.0\n  .build()\ndriver.get('https://www.google.com')\ndriver.findElement(webdriver.By.name('q')).sendKeys('webdriver')\ndriver.findElement(webdriver.By.name('btnG')).click()\ndriver.wait(() => {\n  return driver.getTitle().then((title) => {\n    return title === 'webdriver - Google Search'\n  })\n}, 1000)\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Checking for Command Line Switch Presence in Electron (JavaScript)\nDESCRIPTION: This example shows how to check if a specific command line switch is present using the CommandLine class in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.commandLine.appendSwitch('remote-debugging-port', '8315')\nconst hasPort = app.commandLine.hasSwitch('remote-debugging-port')\nconsole.log(hasPort) // true\n```\n\n----------------------------------------\n\nTITLE: Invalid Dynamic ESM Imports in Unsandboxed Preload Scripts\nDESCRIPTION: Demonstrates dynamic ESM imports that won't work in unsandboxed preload scripts without context isolation enabled.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/esm.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ these won't work without context isolation\nconst fs = await import('node:fs')\nawait import('./foo')\n```\n\n----------------------------------------\n\nTITLE: Setting NODE_OPTIONS Environment Variable for Electron\nDESCRIPTION: Example of setting Node.js options to disable warnings and set the maximum old space size to 2048 MB.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport NODE_OPTIONS=\"--no-warnings --max-old-space-size=2048\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Response for Squirrel.Mac Update Server\nDESCRIPTION: Example of the JSON response expected by Squirrel.Mac clients when an update is available. The response includes the download URL, version name, release notes, and publication date of the update.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"url\": \"https://your-static.storage/your-app-1.2.3-darwin.zip\",\n    \"name\": \"1.2.3\",\n    \"notes\": \"Theses are some release notes innit\",\n    \"pub_date\": \"2024-09-18T12:29:53+01:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Find In Page Request - JavaScript\nDESCRIPTION: This code snippet illustrates how to use `webContents.stopFindInPage` to stop a `findInPage` request.  It listens for the `found-in-page` event and calls `stopFindInPage` with the 'clearSelection' action when the final update is received.  A request id is generated when `findInPage` is invoked.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst win = new BrowserWindow()\nwin.webContents.on('found-in-page', (event, result) => {\n  if (result.finalUpdate) win.webContents.stopFindInPage('clearSelection')\n})\n\nconst requestId = win.webContents.findInPage('api')\nconsole.log(requestId)\n```\n\n----------------------------------------\n\nTITLE: Checking Focusability - Electron JavaScript\nDESCRIPTION: Returns a boolean indicating whether the window is currently focusable. This applies to both macOS and Windows platforms.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nwin.isFocusable()\n```\n\n----------------------------------------\n\nTITLE: Implementing Electron Fuses with @electron/fuses Module\nDESCRIPTION: Example code demonstrating how to use the @electron/fuses module to flip fuses in an Electron application. This snippet shows disabling the RunAsNode fuse, which prevents the ELECTRON_RUN_AS_NODE environment variable from being respected.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/fuses.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { flipFuses, FuseVersion, FuseV1Options } = require('@electron/fuses')\n\nflipFuses(\n  // Path to electron\n  require('electron'),\n  // Fuses to flip\n  {\n    version: FuseVersion.V1,\n    [FuseV1Options.RunAsNode]: false\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using exposeInIsolatedWorld for Custom Worlds\nDESCRIPTION: Example of using contextBridge.exposeInIsolatedWorld to expose an API to a specific isolated world ID rather than the main world.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInIsolatedWorld(\n  1004,\n  'electron',\n  {\n    doThing: () => ipcRenderer.send('do-a-thing')\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Writing Bookmarks to Clipboard in Electron\nDESCRIPTION: Demonstrates how to write a bookmark with title and URL to the clipboard on macOS and Windows using the clipboard.writeBookmark() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nclipboard.writeBookmark('Electron Homepage', 'https://electronjs.org')\n```\n\n----------------------------------------\n\nTITLE: Setting Tooltip and Title for Tray in Electron\nDESCRIPTION: This code demonstrates how to set a tooltip and title for the Tray icon using setToolTip() and setTitle() methods.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntray.setToolTip('This is my application')\ntray.setTitle('This is my title')\n```\n\n----------------------------------------\n\nTITLE: Node Binding Integration for API\nDESCRIPTION: Adds the new API module to Electron's built-in modules in node_bindings.cc\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#define ELECTRON_BROWSER_MODULES(V)      \\\n  V(electron_browser_{api_name})\n```\n\n----------------------------------------\n\nTITLE: Creating a BrowserWindow Function in Electron\nDESCRIPTION: Function that creates a new BrowserWindow instance with specified dimensions and loads the index.html file. This defines the appearance and content of the application window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjcAddon Class with N-API\nDESCRIPTION: This code defines the ObjcAddon class, inheriting from Napi::ObjectWrap. It includes a static Init method to register JavaScript methods with N-API, and a CallbackData structure for passing data between threads when callbacks are triggered.  The Init method defines and registers the native methods helloWorld, helloGui and on.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_15\n\nLANGUAGE: objective-c++\nCODE:\n```\n#include <napi.h>\n#include <string>\n#include \"../include/objc_code.h\"\n\nclass ObjcAddon : public Napi::ObjectWrap<ObjcAddon> {\npublic:\n    static Napi::Object Init(Napi::Env env, Napi::Object exports) {\n        Napi::Function func = DefineClass(env, \"ObjcMacosAddon\", {\n            InstanceMethod(\"helloWorld\", &ObjcAddon::HelloWorld),\n            InstanceMethod(\"helloGui\", &ObjcAddon::HelloGui),\n            InstanceMethod(\"on\", &ObjcAddon::On)\n        });\n\n        Napi::FunctionReference* constructor = new Napi::FunctionReference();\n        *constructor = Napi::Persistent(func);\n        env.SetInstanceData(constructor);\n\n        exports.Set(\"ObjcMacosAddon\", func);\n        return exports;\n    }\n\n    struct CallbackData {\n        std::string eventType;\n        std::string payload;\n        ObjcAddon* addon;\n    };\n\n    // More code to follow later...\n    // Specifically, we'll add ObjcAddon here in the next step\n};\n\nNapi::Object Init(Napi::Env env, Napi::Object exports) {\n    return ObjcAddon::Init(env, exports);\n}\n\nNODE_API_MODULE(objc_addon, Init)\n```\n\n----------------------------------------\n\nTITLE: Setting DevTools WebContents with webview\nDESCRIPTION: This code shows how to use a `<webview>` tag to display DevTools. It involves setting up two `<webview>` elements, one for the browser content and another for DevTools. The `ipcRenderer` is used to communicate with the main process to associate the DevTools with the browser content.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_26\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<head>\n  <style type=\"text/css\">\n    * { margin: 0; }\n    #browser { height: 70%; }\n    #devtools { height: 30%; }\n  </style>\n</head>\n<body>\n  <webview id=\"browser\" src=\"https://github.com\"></webview>\n  <webview id=\"devtools\" src=\"about:blank\"></webview>\n  <script>\n    const { ipcRenderer } = require('electron')\n    const emittedOnce = (element, eventName) => new Promise(resolve => {\n      element.addEventListener(eventName, event => resolve(event), { once: true })\n    })\n    const browserView = document.getElementById('browser')\n    const devtoolsView = document.getElementById('devtools')\n    const browserReady = emittedOnce(browserView, 'dom-ready')\n    const devtoolsReady = emittedOnce(devtoolsView, 'dom-ready')\n    Promise.all([browserReady, devtoolsReady]).then(() => {\n      const targetId = browserView.getWebContentsId()\n      const devtoolsId = devtoolsView.getWebContentsId()\n      ipcRenderer.send('open-devtools', targetId, devtoolsId)\n    })\n  </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Webview Event Handling Implementation\nDESCRIPTION: JavaScript code demonstrating how to handle loading events in a webview element with loading indicator functionality.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  onload = () => {\n    const webview = document.querySelector('webview')\n    const indicator = document.querySelector('.indicator')\n\n    const loadstart = () => {\n      indicator.innerText = 'loading...'\n    }\n\n    const loadstop = () => {\n      indicator.innerText = ''\n    }\n\n    webview.addEventListener('did-start-loading', loadstart)\n    webview.addEventListener('did-stop-loading', loadstop)\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Traffic Light Position on macOS\nDESCRIPTION: Provides granular control over the positioning of macOS window controls (traffic lights) by specifying exact coordinates using the trafficLightPosition option in the BrowserWindow constructor.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  titleBarStyle: 'hidden',\n  trafficLightPosition: { x: 10, y: 10 }\n})\n```\n\n----------------------------------------\n\nTITLE: Navigation Control in Webview\nDESCRIPTION: Methods to control page navigation within a webview, including stop, reload, and history manipulation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.stop()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.reload()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.reloadIgnoringCache()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.canGoBack()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.canGoForward()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.canGoToOffset(offset)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.clearHistory()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.goBack()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.goForward()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.goToIndex(index)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.goToOffset(offset)\n```\n\n----------------------------------------\n\nTITLE: Handling ready-to-show Event for Graceful Window Display\nDESCRIPTION: Shows how to prevent visual flashing when loading a page by initially creating a hidden window and only showing it when the content is ready to be displayed. This event fires when the renderer has rendered the page for the first time.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ show: false })\nwin.once('ready-to-show', () => {\n  win.show()\n})\n```\n\n----------------------------------------\n\nTITLE: Initiating URL Download in Electron Session\nDESCRIPTION: Initiates a download of a resource at the specified URL. It generates a DownloadItem that can be accessed with the 'will-download' event. Optional HTTP request headers can be specified.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nses.downloadURL(url[, options])\n```\n\n----------------------------------------\n\nTITLE: Accessing WebContents Session in Electron\nDESCRIPTION: Demonstrates how to create a BrowserWindow, load a URL, and access the session of its WebContents to log the user agent.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com')\n\nconst ses = win.webContents.session\nconsole.log(ses.getUserAgent())\n```\n\n----------------------------------------\n\nTITLE: Show Notification in Main Process\nDESCRIPTION: This snippet demonstrates how to display a basic notification from the main process using Electron's Notification module. It requires the electron module and displays a notification when executed. The title and body of the notification are defined as constants and passed to the Notification constructor. The `show()` method displays the notification to the user.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Notification } = require('electron')\n\nconst NOTIFICATION_TITLE = 'Basic Notification'\nconst NOTIFICATION_BODY = 'Notification from the Main process'\n\nnew Notification({\n  title: NOTIFICATION_TITLE,\n  body: NOTIFICATION_BODY\n}).show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Flash Frame Effect in Electron for Windows\nDESCRIPTION: This snippet shows how to use the flashFrame API to highlight the taskbar button of a BrowserWindow in Electron. It starts flashing and stops when the window gains focus.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow()\n\nwin.once('focus', () => win.flashFrame(false))\nwin.flashFrame(true)\n```\n\n----------------------------------------\n\nTITLE: Closing Tray Context Menu Electron JavaScript\nDESCRIPTION: This snippet closes the currently open context menu for the tray icon. It requires that a context menu has been previously set using `tray.setContextMenu()`. No external dependencies are required.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntray.closeContextMenu()\n```\n\n----------------------------------------\n\nTITLE: Registering Global Keyboard Shortcut in Electron\nDESCRIPTION: Example showing how to register a global keyboard shortcut using the globalShortcut module in Electron. The code demonstrates registering a 'CommandOrControl+Y' accelerator that executes a callback function when triggered.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/accelerator.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, globalShortcut } = require('electron')\n\napp.whenReady().then(() => {\n  // Register a 'CommandOrControl+Y' shortcut listener.\n  globalShortcut.register('CommandOrControl+Y', () => {\n    // Do stuff when Y and either Command/Control is pressed.\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Example of Locale and Language API Return Values in Electron (Windows)\nDESCRIPTION: This example demonstrates the different return values from Electron's locale and language APIs on Windows with German application locale, Finnish regional format, and specific preferred system languages.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\napp.getLocale() // 'de'\napp.getSystemLocale() // 'fi-FI'\napp.getPreferredSystemLanguages() // ['fr-CA', 'en-US', 'zh-Hans-CN', 'fi', 'es-419']\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Screen Capture Application\nDESCRIPTION: The HTML template that provides the user interface for the screen capture demo, including start and stop buttons and a video element to display the captured content. It includes necessary CSP settings and script references.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/desktop-capturer.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n<html>\n<meta http-equiv=\"content-security-policy\" content=\"script-src 'self' 'unsafe-inline'\" />\n  <body>\n    <button id=\"startButton\" class=\"button\">Start</button>\n    <button id=\"stopButton\" class=\"button\">Stop</button>\n    <video width=\"320\" height=\"240\" autoplay></video>\n    <script src=\"renderer.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Working with External Libraries in Electron\nDESCRIPTION: Shows how to properly include external libraries like jQuery while maintaining Node.js and Electron API access by renaming conflicting symbols.\nSOURCE: https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n<script>\nwindow.nodeRequire = require;\ndelete window.require;\ndelete window.exports;\ndelete window.module;\n</script>\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Get Effective Appearance JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the effective appearance (light or dark mode) of the system using `systemPreferences.getEffectiveAppearance()`. This is a simple example showing the basic usage of the `systemPreferences` module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { systemPreferences } = require('electron')\nconsole.log(systemPreferences.getEffectiveAppearance())\n```\n\n----------------------------------------\n\nTITLE: Control Content Protection - Electron JavaScript\nDESCRIPTION: Prevents other applications from capturing the window's contents by enabling content protection. This impacts behavior on both macOS and Windows.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setContentProtection(enable)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Interface for Native Addon in Electron\nDESCRIPTION: Creates a header file 'cpp_code.h' that defines the C++ interface for the native addon. It includes a namespace and a function declaration for a simple 'hello_world' function.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n#pragma once\n#include <string>\n\nnamespace cpp_code {\n    // A simple function that takes a string input and returns a string\n    std::string hello_world(const std::string& input);\n} // namespace cpp_code\n```\n\n----------------------------------------\n\nTITLE: Creating a macOS Notification with Reply Feature\nDESCRIPTION: Example showing how to create a notification with inline reply functionality on macOS. This demonstrates platform-specific features including reply capability and custom sounds.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Notification } = require('electron');\n\n// Create a macOS notification with reply functionality\nconst notification = new Notification({\n  title: 'Message Received',\n  subtitle: 'From: User',\n  body: 'Would you like to respond?',\n  hasReply: true,\n  replyPlaceholder: 'Type your reply here...',\n  sound: 'Basso',  // Using a built-in macOS sound\n  closeButtonText: 'Dismiss'\n});\n\n// Show the notification\nnotification.show();\n\n// Handle reply event\nnotification.on('reply', (event, reply) => {\n  console.log(`User replied: ${reply}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Updated package.json with Start Script for Electron\nDESCRIPTION: Modified package.json that includes a start script to run the Electron application. The script uses the electron command to execute the main.js file in development mode.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Hello World!\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Jane Doe\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"electron\": \"23.1.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Inserted CSS - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to insert and then remove CSS from a BrowserWindow's WebContents. It listens for the 'did-finish-load' event, inserts CSS to change the background color, stores the key returned by `insertCSS`, and then removes the CSS using that key. This requires the BrowserWindow module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst win = new BrowserWindow()\n\nwin.webContents.on('did-finish-load', async () => {\n  const key = await win.webContents.insertCSS('html, body { background-color: #f00; }')\n  win.webContents.removeInsertedCSS(key)\n})\n```\n\n----------------------------------------\n\nTITLE: Capturing Webview Screenshot in Electron\nDESCRIPTION: The capturePage method takes a snapshot of the webview content, optionally within a specified rectangle, and returns a Promise resolving with a NativeImage.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.capturePage([rect])\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Electron App\nDESCRIPTION: HTML structure for the Electron application including necessary security policies and element for version information display.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    />\n    <meta\n      http-equiv=\"X-Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    />\n    <title>Hello from Electron renderer!</title>\n  </head>\n  <body>\n    <h1>Hello from Electron renderer!</h1>\n    <p>👋</p>\n    <p id=\"info\"></p>\n  </body>\n  <script src=\"./renderer.js\"></script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Tabbed Window in Electron for macOS\nDESCRIPTION: Adds a window as a tab on the current window, after the tab for the window instance. Used for native macOS tab functionality.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nwin.addTabbedWindow(browserWindow)\n```\n\n----------------------------------------\n\nTITLE: Getting File Icons in Electron\nDESCRIPTION: The app.getFileIcon method fetches a file's associated icon as a NativeImage. It accepts a file path and optional options for specifying icon size.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.getFileIcon(path[, options])\n```\n\n----------------------------------------\n\nTITLE: Testing Native Addon in Electron\nDESCRIPTION: Creates a simple test script to verify the functionality of the native addon. It loads the addon, calls the 'helloWorld' function, and logs the result to the console.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Load our addon\nconst myAddon = require('./js')\n\n// Try the helloWorld function\nconst result = myAddon.helloWorld('This is a test')\n\n// Should print: \"Hello from C++! You said: This is a test\"\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Purchasing Products with inAppPurchase API\nDESCRIPTION: Method to purchase products through Mac App Store. Takes a product ID and optional quantity/username parameters. Returns a Promise resolving to boolean indicating if product was added to payment queue.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninAppPurchase.purchaseProduct(productID[, opts])\n```\n\n----------------------------------------\n\nTITLE: Popping Up Tray Context Menu Electron JavaScript\nDESCRIPTION: This snippet pops up the context menu of the tray icon. If a `menu` is provided, it overrides the tray icon's default context menu. The `position` parameter is optional and only applicable on Windows, defaulting to (0, 0). No external dependencies are required.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntray.popUpContextMenu([menu, position])\n```\n\n----------------------------------------\n\nTITLE: Setting Taskbar Thumbnail Buttons in Electron for Windows\nDESCRIPTION: Shows how to add thumbnail toolbar buttons to a window's taskbar button layout on Windows. This can include up to 7 buttons with icons, tooltips, and various states and behaviors.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setThumbarButtons(buttons)\n```\n\n----------------------------------------\n\nTITLE: Auto-Hiding Menu Bar - Electron JavaScript\nDESCRIPTION: Sets whether the window's menu bar should hide itself automatically in Windows and Linux. A boolean parameter 'hide' determines the behavior. The menu bar will only show when the user presses the 'Alt' key.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setAutoHideMenuBar(hide)\n```\n\n----------------------------------------\n\nTITLE: Replacing protocol.registerFileProtocol with protocol.handle (JavaScript)\nDESCRIPTION: The `protocol.registerFileProtocol` method has been deprecated in favor of `protocol.handle`. This snippet demonstrates replacing the older protocol registration with the new `protocol.handle` API using `net.fetch` with a file URL.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated in Electron 25\nprotocol.registerFileProtocol('some-protocol', () => {\n  callback({ filePath: '/path/to/my/file' })\n})\n\n// Replace with\nprotocol.handle('some-protocol', () => {\n  return net.fetch('file:///path/to/my/file')\n})\n```\n\n----------------------------------------\n\nTITLE: Windows ASAR Archive Structure\nDESCRIPTION: Demonstrates the file structure required when using an ASAR archive in a Windows Electron application.  The `app.asar` archive, containing the application's source code, is placed within the `resources` directory of the Electron application directory.  Electron will then load the application from this archive.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-21_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n\"electron/resources/\n└── app.asar\"\n```\n\n----------------------------------------\n\nTITLE: Code Signing with electron-wix-msi (WiX MSI)\nDESCRIPTION: This snippet illustrates how to use `electron-wix-msi` to create an MSI installer and configure code signing. It defines metadata about the application, such as its name, description, and version, and specifies the signing parameters. It utilizes the `electron-wix-msi` package, and needs application metadata and signing configuration.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { MSICreator } from 'electron-wix-msi'\n\n// Step 1: Instantiate the MSICreator\nconst msiCreator = new MSICreator({\n  appDirectory: '/path/to/built/app',\n  description: 'My amazing Kitten simulator',\n  exe: 'kittens',\n  name: 'Kittens',\n  manufacturer: 'Kitten Technologies',\n  version: '1.1.2',\n  outputDirectory: '/path/to/output/folder',\n  windowsSign: {\n    signWithParams: '--my=custom --parameters',\n    // If signtool.exe does not work for you, customize!\n    signToolPath: 'C:\\\\Path\\\\To\\\\my-custom-tool.exe'\n  }\n})\n\n// Step 2: Create a .wxs template file\nconst supportBinaries = await msiCreator.create()\n\n// 🆕 Step 2a: optionally sign support binaries if you\n// sign you binaries as part of of your packaging script\nfor (const binary of supportBinaries) {\n  // Binaries are the new stub executable and optionally\n  // the Squirrel auto updater.\n  await signFile(binary)\n}\n\n// Step 3: Compile the template to a .msi file\nawait msiCreator.compile()\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Window in Electron\nDESCRIPTION: Function to create a new browser window and load the app's HTML file. Sets up window dimensions and preload script configuration.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet mainWindow\n\nconst createWindow = () => {\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  mainWindow.loadFile('index.html')\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Focusability - Electron JavaScript\nDESCRIPTION: Changes whether the window can receive focus based on a boolean 'focusable' parameter, with specific behavior for macOS and Windows.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setFocusable(focusable)\n```\n\n----------------------------------------\n\nTITLE: Replacing File.path with webUtils.getPathForFile\nDESCRIPTION: This example demonstrates the removal of the nonstandard `File.path` property and its replacement with `webUtils.getPathForFile`.  It shows how to securely access the file path from the renderer process by exposing a function through contextBridge and using `webUtils.getPathForFile` in the preload script.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Before (renderer)\n\nconst file = document.querySelector('input[type=file]').files[0]\nalert(`Uploaded file path was: ${file.path}`)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// After (renderer)\n\nconst file = document.querySelector('input[type=file]').files[0]\nelectron.showFilePath(file)\n\n// (preload)\nconst { contextBridge, webUtils } = require('electron')\n\ncontextBridge.exposeInMainWorld('electron', {\n  showFilePath (file) {\n    // It's best not to expose the full file path to the web content if\n    // possible.\n    const path = webUtils.getPathForFile(file)\n    alert(`Uploaded file path was: ${path}`)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing webContents from webview using IPC - JavaScript\nDESCRIPTION: Demonstrates how to securely access the webContents of a `<webview>` using IPC, avoiding the deprecated `webview.getWebContents()` method. It includes both the main and renderer process code. Requires `electron` to be installed to provide `ipcMain`, `webContents` and `ipcRenderer` modules.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// main\nconst { ipcMain, webContents } = require('electron')\n\nconst getGuestForWebContents = (webContentsId, contents) => {\n  const guest = webContents.fromId(webContentsId)\n  if (!guest) {\n    throw new Error(`Invalid webContentsId: ${webContentsId}`)\n  }\n  if (guest.hostWebContents !== contents) {\n    throw new Error('Access denied to webContents')\n  }\n  return guest\n}\n\nipcMain.handle('openDevTools', (event, webContentsId) => {\n  const guest = getGuestForWebContents(webContentsId, event.sender)\n  guest.openDevTools()\n})\n\n// renderer\nconst { ipcRenderer } = require('electron')\n\nipcRenderer.invoke('openDevTools', webview.getWebContentsId())\n```\n\n----------------------------------------\n\nTITLE: Writing Text to Clipboard in Electron\nDESCRIPTION: Shows how to write plain text content to the system clipboard using the clipboard.writeText() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nconst text = 'hello i am a bit of text!'\nclipboard.writeText(text)\n```\n\n----------------------------------------\n\nTITLE: Implementing C++ Node.js Addon Class\nDESCRIPTION: Core C++ implementation of the Node.js addon class that bridges native Win32 functionality with JavaScript. Includes thread-safe function handling, event emission, and method definitions for GUI interactions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\n#include <napi.h>\n#include <string>\n#include \"cpp_code.h\"\n\nclass CppAddon : public Napi::ObjectWrap<CppAddon> {\npublic:\n    static Napi::Object Init(Napi::Env env, Napi::Object exports) {\n        Napi::Function func = DefineClass(env, \"CppWin32Addon\", {\n            InstanceMethod(\"helloWorld\", &CppAddon::HelloWorld),\n            InstanceMethod(\"helloGui\", &CppAddon::HelloGui),\n            InstanceMethod(\"on\", &CppAddon::On)\n        });\n\n        Napi::FunctionReference* constructor = new Napi::FunctionReference();\n        *constructor = Napi::Persistent(func);\n        env.SetInstanceData(constructor);\n\n        exports.Set(\"CppWin32Addon\", func);\n        return exports;\n    }\n\n    struct CallbackData {\n        std::string eventType;\n        std::string payload;\n        CppAddon* addon;\n    };\n\n    CppAddon(const Napi::CallbackInfo& info)\n        : Napi::ObjectWrap<CppAddon>(info)\n        , env_(info.Env())\n        , emitter(Napi::Persistent(Napi::Object::New(info.Env())))\n        , callbacks(Napi::Persistent(Napi::Object::New(info.Env())))\n        , tsfn_(nullptr) {\n\n        napi_status status = napi_create_threadsafe_function(\n            env_,\n            nullptr,\n            nullptr,\n            Napi::String::New(env_, \"CppCallback\"),\n            0,\n            1,\n            nullptr,\n            nullptr,\n            this,\n            [](napi_env env, napi_value js_callback, void* context, void* data) {\n                auto* callbackData = static_cast<CallbackData*>(data);\n                if (!callbackData) return;\n\n                Napi::Env napi_env(env);\n                Napi::HandleScope scope(napi_env);\n\n                auto addon = static_cast<CppAddon*>(context);\n                if (!addon) {\n                    delete callbackData;\n                    return;\n                }\n\n                try {\n                    auto callback = addon->callbacks.Value().Get(callbackData->eventType).As<Napi::Function>();\n                    if (callback.IsFunction()) {\n                        callback.Call(addon->emitter.Value(), {Napi::String::New(napi_env, callbackData->payload)});\n                    }\n                } catch (...) {}\n\n                delete callbackData;\n            },\n            &tsfn_\n        );\n\n        if (status != napi_ok) {\n            Napi::Error::New(env_, \"Failed to create threadsafe function\").ThrowAsJavaScriptException();\n            return;\n        }\n\n        // Set up the callbacks here\n        auto makeCallback = [this](const std::string& eventType) {\n            return [this, eventType](const std::string& payload) {\n                if (tsfn_ != nullptr) {\n                    auto* data = new CallbackData{\n                        eventType,\n                        payload,\n                        this\n                    };\n                    napi_call_threadsafe_function(tsfn_, data, napi_tsfn_blocking);\n                }\n            };\n        };\n\n        cpp_code::setTodoAddedCallback(makeCallback(\"todoAdded\"));\n    }\n\n    ~CppAddon() {\n        if (tsfn_ != nullptr) {\n            napi_release_threadsafe_function(tsfn_, napi_tsfn_release);\n            tsfn_ = nullptr;\n        }\n    }\n\nprivate:\n    Napi::Env env_;\n    Napi::ObjectReference emitter;\n    Napi::ObjectReference callbacks;\n    napi_threadsafe_function tsfn_;\n\n    Napi::Value HelloWorld(const Napi::CallbackInfo& info) {\n        Napi::Env env = info.Env();\n\n        if (info.Length() < 1 || !info[0].IsString()) {\n            Napi::TypeError::New(env, \"Expected string argument\").ThrowAsJavaScriptException();\n            return env.Null();\n        }\n\n        std::string input = info[0].As<Napi::String>();\n        std::string result = cpp_code::hello_world(input);\n\n        return Napi::String::New(env, result);\n    }\n\n    void HelloGui(const Napi::CallbackInfo& info) {\n        cpp_code::hello_gui();\n    }\n\n    Napi::Value On(const Napi::CallbackInfo& info) {\n        Napi::Env env = info.Env();\n\n        if (info.Length() < 2 || !info[0].IsString() || !info[1].IsFunction()) {\n            Napi::TypeError::New(env, \"Expected (string, function) arguments\").ThrowAsJavaScriptException();\n            return env.Undefined();\n        }\n\n        callbacks.Value().Set(info[0].As<Napi::String>(), info[1].As<Napi::Function>());\n        return env.Undefined();\n    }\n};\n\nNapi::Object Init(Napi::Env env, Napi::Object exports) {\n    return CppAddon::Init(env, exports);\n}\n\nNODE_API_MODULE(cpp_addon, Init)\n```\n\n----------------------------------------\n\nTITLE: Using powerSaveBlocker in Electron\nDESCRIPTION: Example of how to use the powerSaveBlocker module to prevent display sleep, check the blocker's status, and then stop the blocker when done.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/power-save-blocker.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { powerSaveBlocker } = require('electron')\n\nconst id = powerSaveBlocker.start('prevent-display-sleep')\nconsole.log(powerSaveBlocker.isStarted(id))\n\npowerSaveBlocker.stop(id)\n```\n\n----------------------------------------\n\nTITLE: Implementing Chrome DevTools Debugging in Electron\nDESCRIPTION: Example showing how to attach a debugger to an Electron BrowserWindow, handle debugger events, and send debugging commands. Demonstrates attaching the debugger, listening for detach and message events, and enabling network monitoring.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/debugger.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\ntry {\n  win.webContents.debugger.attach('1.1')\n} catch (err) {\n  console.log('Debugger attach failed : ', err)\n}\n\nwin.webContents.debugger.on('detach', (event, reason) => {\n  console.log('Debugger detached due to : ', reason)\n})\n\nwin.webContents.debugger.on('message', (event, method, params) => {\n  if (method === 'Network.requestWillBeSent') {\n    if (params.request.url === 'https://www.github.com') {\n      win.webContents.debugger.detach()\n    }\n  }\n})\n\nwin.webContents.debugger.sendCommand('Network.enable')\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Native Addon Build\nDESCRIPTION: Package.json configuration with build scripts for a native Node.js addon. Includes clean and build scripts, dependencies (bindings, node-addon-api), and devDependencies (node-gyp).\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-native-addon\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A native addon for Electron\",\n  \"main\": \"js/index.js\",\n  \"scripts\": {\n    \"clean\": \"node -e \\\"require('fs').rmSync('build', { recursive: true, force: true })\\\"\",\n    \"build\": \"node-gyp configure && node-gyp build\"\n  },\n  \"dependencies\": {\n    \"bindings\": \"^1.5.0\",\n    \"node-addon-api\": \"^8.3.0\"\n  },\n  \"devDependencies\": {\n    \"node-gyp\": \"^11.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Windows - JavaScript\nDESCRIPTION: Demonstrates creation of modal windows that disable their parent window using both parent and modal options.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BaseWindow } = require('electron')\n\nconst parent = new BaseWindow()\nconst child = new BaseWindow({ parent, modal: true })\n```\n\n----------------------------------------\n\nTITLE: Save Page to HTMLComplete\nDESCRIPTION: This snippet shows how to save the current web page content using `webContents.savePage` to a local file in HTMLComplete format. It captures the 'did-finish-load' event, triggers the save operation, and then handles the promise resolution to log success or any error during the save process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\nwin.loadURL('https://github.com')\n\nwin.webContents.on('did-finish-load', async () => {\n  win.webContents.savePage('/tmp/test.html', 'HTMLComplete').then(() => {\n    console.log('Page was saved successfully.')\n  }).catch(err => {\n    console.log(err)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Launching Electron App with Playwright\nDESCRIPTION: Basic example of launching an Electron application using Playwright's electron.launch API and closing it after initialization. This demonstrates the minimal setup required to start testing an Electron app.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test, _electron: electron } = require('@playwright/test')\n\ntest('launch app', async () => {\n  const electronApp = await electron.launch({ args: ['main.js'] })\n  // close app\n  await electronApp.close()\n})\n```\n\n----------------------------------------\n\nTITLE: IPC Serialization: Sending Objects over IPC - JavaScript\nDESCRIPTION: Illustrates the change in behavior when sending objects containing functions over IPC using `ipcRenderer.send`.  Prior to Electron 8, functions were silently converted to `undefined`.  From Electron 8 onwards, this throws an error.  No dependencies are explicitly required, but this code runs within the render process of an Electron application, so the `ipcRenderer` module must be available.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n// Previously:\nipcRenderer.send('channel', { value: 3, someFunction: () => {} })\n// => results in { value: 3 } arriving in the main process\n\n// From Electron 8:\nipcRenderer.send('channel', { value: 3, someFunction: () => {} })\n// => throws Error(\"() => {} could not be cloned.\")\n```\n\n----------------------------------------\n\nTITLE: Writing HTML to Clipboard in Electron\nDESCRIPTION: Shows how to write HTML markup to the system clipboard using the clipboard.writeHTML() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nclipboard.writeHTML('<b>Hi</b>')\n```\n\n----------------------------------------\n\nTITLE: Opening DevTools in Electron Renderer Process - JavaScript\nDESCRIPTION: This snippet demonstrates how to programmatically open Chromium Developer Tools for a renderer process in an Electron application using the `openDevTools()` API on a `BrowserWindow` instance's webContents. This requires Electron as a dependency. Ensure that Electron is installed and correctly set up in your project. The main input is the `BrowserWindow` instance, and there are no specific outputs, but the Developer Tools will be opened.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow()\nwin.webContents.openDevTools()\n```\n\n----------------------------------------\n\nTITLE: Signing Electron App with Apple Distribution Certificate in JavaScript\nDESCRIPTION: This code snippet shows how to sign an Electron app with the Apple Distribution certificate using the @electron/osx-sign module. This is necessary for submitting the app to the Mac App Store.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { signAsync } = require('@electron/osx-sign')\n\nsignAsync({\n  app: 'path/to/your.app',\n  identity: 'Apple Distribution'\n})\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Open Dialog with Promise\nDESCRIPTION: Demonstrates using the asynchronous dialog API with promises to handle file selection results\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndialog.showOpenDialog(mainWindow, {\n  properties: ['openFile', 'openDirectory']\n}).then(result => {\n  console.log(result.canceled)\n  console.log(result.filePaths)\n}).catch(err => {\n  console.log(err)\n})\n```\n\n----------------------------------------\n\nTITLE: Post Message to Renderer Process with Port Transfer\nDESCRIPTION: This example illustrates how to send a message to the renderer process from the main process, along with transferring ownership of MessagePortMain objects. The transferred ports are then accessible in the renderer process via the `e.ports` array, allowing for direct communication between ports.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Main process\nconst win = new BrowserWindow()\nconst { port1, port2 } = new MessageChannelMain()\nwin.webContents.postMessage('port', { message: 'hello' }, [port1])\n\n// Renderer process\nipcRenderer.on('port', (e, msg) => {\n  const [port] = e.ports\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Reply Stream Pattern in Electron Renderer\nDESCRIPTION: Demonstrates how to create a streaming request from the renderer process using MessageChannel. Sets up a communication channel that can receive multiple responses from a single request.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst makeStreamingRequest = (element, callback) => {\n  // MessageChannels are lightweight--it's cheap to create a new one for each\n  // request.\n  const { port1, port2 } = new MessageChannel()\n\n  // We send one end of the port to the main process ...\n  ipcRenderer.postMessage(\n    'give-me-a-stream',\n    { element, count: 10 },\n    [port2]\n  )\n\n  // ... and we hang on to the other end. The main process will send messages\n  // to its end of the port, and close it when it's finished.\n  port1.onmessage = (event) => {\n    callback(event.data)\n  }\n  port1.onclose = () => {\n    console.log('stream ended')\n  }\n}\n\nmakeStreamingRequest(42, (data) => {\n  console.log('got response data:', data)\n})\n// We will see \"got response data: 42\" 10 times.\n```\n\n----------------------------------------\n\nTITLE: Disabling HID Blocklist in Electron\nDESCRIPTION: Code snippet showing how to disable the default HID blocklist in Electron by setting the 'disable-hid-blocklist' command line flag.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/devices.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.commandLine.appendSwitch('disable-hid-blocklist')\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Project to Latest Stable Electron (npm/yarn)\nDESCRIPTION: Command to update an existing project to use the latest stable version of Electron as a dev dependency using npm or yarn.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/electron-versioning.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev electron@latest\n```\n\n----------------------------------------\n\nTITLE: Programmatic Usage of Electron in Node.js\nDESCRIPTION: JavaScript code demonstrating how to programmatically spawn Electron from Node.js scripts by requiring the electron module and using child_process.\nSOURCE: https://github.com/electron/electron/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst electron = require('electron')\nconst proc = require('node:child_process')\n\n// will print something similar to /Users/maf/.../Electron\nconsole.log(electron)\n\n// spawn Electron\nconst child = proc.spawn(electron)\n```\n\n----------------------------------------\n\nTITLE: Publishing Release Metadata for Windows\nDESCRIPTION: Example of the RELEASES file format for Squirrel.Windows to receive updates. It contains a hash, the full package name, and the package size.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nB0892F3C7AC91D72A6271FF36905FEF8FE993520 electron-fiddle-0.36.3-full.nupkg 103298365\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Template in JavaScript\nDESCRIPTION: A simple menu template array defining four menu items with IDs and labels. This creates a straightforward linear menu structure.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { id: '1', label: 'one' },\n  { id: '2', label: 'two' },\n  { id: '3', label: 'three' },\n  { id: '4', label: 'four' }\n]\n```\n\n----------------------------------------\n\nTITLE: Looking up WebContents by DevTools Target ID in Electron\nDESCRIPTION: This code snippet demonstrates how to look up a WebContents instance by its Chrome DevTools Protocol TargetID. It attaches the debugger to the WebContents, retrieves the TargetID using the debugger API, and then uses the fromDevToolsTargetId method to get the WebContents instance.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function lookupTargetId (browserWindow) {\n  const wc = browserWindow.webContents\n  await wc.debugger.attach('1.3')\n  const { targetInfo } = await wc.debugger.sendCommand('Target.getTargetInfo')\n  const { targetId } = targetInfo\n  const targetWebContents = await wc.fromDevToolsTargetId(targetId)\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple Data Types to Clipboard in Electron\nDESCRIPTION: Shows how to write multiple data types (text, HTML, RTF, and bookmark) to the clipboard simultaneously using the clipboard.write() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nclipboard.write({\n  text: 'test',\n  html: '<b>Hi</b>',\n  rtf: '{\\\\rtf1\\\\utf8 text}',\n  bookmark: 'a title'\n})\n\nconsole.log(clipboard.readText())\n// 'test'\n\nconsole.log(clipboard.readHTML())\n// <meta charset='utf-8'><b>Hi</b>\n\nconsole.log(clipboard.readRTF())\n// '{\\\\rtf1\\\\utf8 text}'\n\nconsole.log(clipboard.readBookmark())\n// { title: 'a title', url: 'test' }\n```\n\n----------------------------------------\n\nTITLE: Instantiating TouchBarOtherItemsProxy in Electron\nDESCRIPTION: Creates a new instance of TouchBarOtherItemsProxy which serves as a special proxy for nesting Chromium-inherited TouchBar elements. Only one instance can be added per TouchBar, and it's typically added at the end of the input by default.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-other-items-proxy.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew TouchBarOtherItemsProxy()\n```\n\n----------------------------------------\n\nTITLE: Replace renderer-process-crashed event with render-process-gone in Electron\nDESCRIPTION: This JavaScript snippet illustrates replacing the deprecated `renderer-process-crashed` event with the new `render-process-gone` event in Electron's `app` module. It showcases how to listen for the `render-process-gone` event and handle renderer process termination with additional details.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed\napp.on('renderer-process-crashed', (event, webContents, killed) => { /* ... */ })\n\n// Replace with\napp.on('render-process-gone', (event, webContents, details) => { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: Setting Window Visibility Across Workspaces in Electron for macOS and Linux\nDESCRIPTION: Controls whether a window should be visible on all workspaces. Accepts optional configuration for macOS to control visibility above fullscreen windows and process type transformation behavior.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setVisibleOnAllWorkspaces(visible[, options])\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications with Action Buttons on macOS\nDESCRIPTION: Example showing how to create notifications with custom action buttons on macOS. This demonstrates how to define interactive actions and handle action selection events.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Notification } = require('electron');\n\n// Create a macOS notification with custom actions\nconst notification = new Notification({\n  title: 'New Update Available',\n  body: 'Version 2.0 is ready to install',\n  actions: [\n    {\n      type: 'button',\n      text: 'Install Now'\n    },\n    {\n      type: 'button',\n      text: 'Remind Later'\n    }\n  ]\n});\n\n// Show the notification\nnotification.show();\n\n// Handle action selection\nnotification.on('action', (event, index) => {\n  if (index === 0) {\n    console.log('User chose to install now');\n    // Perform installation\n  } else if (index === 1) {\n    console.log('User chose to be reminded later');\n    // Schedule a reminder\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Protocol Handler in Electron\nDESCRIPTION: Code to register the application as the default handler for the 'electron-fiddle://' protocol, with different handling for default app mode.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.defaultApp) {\n  if (process.argv.length >= 2) {\n    app.setAsDefaultProtocolClient('electron-fiddle', process.execPath, [path.resolve(process.argv[1])])\n  }\n} else {\n  app.setAsDefaultProtocolClient('electron-fiddle')\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Execution in Webview\nDESCRIPTION: Method to execute JavaScript code in the context of the webview's page, with optional user gesture context creation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.executeJavaScript(code[, userGesture])\n```\n\n----------------------------------------\n\nTITLE: Handling Download Events in Electron's Main Process\nDESCRIPTION: This snippet demonstrates how to use the DownloadItem class to control and monitor file downloads in Electron's main process. It shows how to set a save path, handle download state changes, and log download progress and completion.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/download-item.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In the main process.\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.webContents.session.on('will-download', (event, item, webContents) => {\n  // Set the save path, making Electron not to prompt a save dialog.\n  item.setSavePath('/tmp/save.pdf')\n\n  item.on('updated', (event, state) => {\n    if (state === 'interrupted') {\n      console.log('Download is interrupted but can be resumed')\n    } else if (state === 'progressing') {\n      if (item.isPaused()) {\n        console.log('Download is paused')\n      } else {\n        console.log(`Received bytes: ${item.getReceivedBytes()}`)\n      }\n    }\n  })\n  item.once('done', (event, state) => {\n    if (state === 'completed') {\n      console.log('Download successfully')\n    } else {\n      console.log(`Download failed: ${state}`)\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Installing WebdriverIO Test Runner for Electron Testing\nDESCRIPTION: Command to initialize WebdriverIO in your project. This starter toolkit helps set up the right configuration for Electron application testing.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init wdio@latest ./\n```\n\n----------------------------------------\n\nTITLE: Implementing Spellchecker Context Menu in Electron\nDESCRIPTION: Example of creating a context menu with spelling suggestions and dictionary management options using the context-menu event.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Menu, MenuItem } = require('electron')\n\nmyWindow.webContents.on('context-menu', (event, params) => {\n  const menu = new Menu()\n\n  // Add each spelling suggestion\n  for (const suggestion of params.dictionarySuggestions) {\n    menu.append(new MenuItem({\n      label: suggestion,\n      click: () => myWindow.webContents.replaceMisspelling(suggestion)\n    }))\n  }\n\n  // Allow users to add the misspelled word to the dictionary\n  if (params.misspelledWord) {\n    menu.append(\n      new MenuItem({\n        label: 'Add to dictionary',\n        click: () => myWindow.webContents.session.addWordToSpellCheckerDictionary(params.misspelledWord)\n      })\n    )\n  }\n\n  menu.popup()\n})\n```\n\n----------------------------------------\n\nTITLE: Checking for Updates in Electron\nDESCRIPTION: Queries the server to determine if an update is available. Requires setFeedURL to be called first. Will download updates automatically if available.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `autoUpdater.checkForUpdates()`\n\nAsks the server whether there is an update. You must call `setFeedURL` before\nusing this API.\n\n**Note:** If an update is available it will be downloaded automatically.\nCalling `autoUpdater.checkForUpdates()` twice will download the update two times.\n```\n\n----------------------------------------\n\nTITLE: Get Current URL of WebContents\nDESCRIPTION: This code snippet demonstrates how to retrieve the current URL of a WebContents after loading a URL.  The `getURL()` method is used to obtain the URL after the page has finished loading. The code also shows that `loadURL` returns a Promise.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com').then(() => {\n  const currentURL = win.webContents.getURL()\n  console.log(currentURL)\n})\n```\n\n----------------------------------------\n\nTITLE: Restoring Completed Transactions\nDESCRIPTION: Method to restore previously completed transactions for reinstalled apps or additional devices.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninAppPurchase.restoreCompletedTransactions()\n```\n\n----------------------------------------\n\nTITLE: Replacing empty urls array in WebRequestFilter with '<all_urls>' in Electron\nDESCRIPTION: This JavaScript code demonstrates replacing the deprecated empty `urls` array in `WebRequestFilter` with the `<all_urls>` pattern to explicitly include all URLs in Electron. This clarifies the intent and ensures predictable behavior by using a designated URL pattern.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nconst deprecatedFilter = {\n  urls: []\n}\n\n// Replace with\nconst newFilter = {\n  urls: ['<all_urls>']\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Content Protection in Electron Windows for macOS and Windows\nDESCRIPTION: Prevents window contents from being captured by other applications. On macOS it sets NSWindow's sharingType to NSWindowSharingNone, while on Windows it calls SetWindowDisplayAffinity with WDA_EXCLUDEFROMCAPTURE.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setContentProtection(enable)\n```\n\n----------------------------------------\n\nTITLE: Appending Command Line Switch in Electron (JavaScript)\nDESCRIPTION: This example shows how to append a command line switch with a value to Chromium's command line using the CommandLine class in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.commandLine.appendSwitch('remote-debugging-port', '8315')\n```\n\n----------------------------------------\n\nTITLE: FileFilter Object Structure Definition in Markdown\nDESCRIPTION: Defines the structure of a FileFilter object used in Electron's dialog modules. The object contains a name property for display in file dialogs and an extensions array listing the allowed file extensions without periods.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/file-filter.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# FileFilter Object\n\n* `name` string\n* `extensions` string[]\n```\n\n----------------------------------------\n\nTITLE: Tracking Upload Progress in Electron HTTP Requests\nDESCRIPTION: The getUploadProgress() method returns an object with information about the current upload progress. It includes boolean flags for activity and start status, as well as integers for current and total bytes uploaded. This method is useful for monitoring file uploads or other data transfers in POST requests.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.getUploadProgress()\n```\n\n----------------------------------------\n\nTITLE: Accessing History Entries in Electron\nDESCRIPTION: This snippet shows how to retrieve and display all entries in the browsing history. Each entry contains information such as the page title and URL.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = navigationHistory.getAllEntries()\n\nentries.forEach((entry) => {\n  console.log(`${entry.title}: ${entry.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Safely Preventing Native Module Loading in Web Workers\nDESCRIPTION: This code snippet shows how to prevent loading native Node.js modules in Web Workers by overriding the process.dlopen function. It then creates a new Web Worker instance.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/multithreading.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.dlopen = () => {\n  throw new Error('Load native module is not safe')\n}\nconst worker = new Worker('script.js')\n```\n\n----------------------------------------\n\nTITLE: Installing Electron as a development dependency with npm\nDESCRIPTION: Command to install Electron as a development dependency in your application using npm. This is the preferred method for including Electron in your projects.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install electron --save-dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Main Process Communication with Context-Isolated Page\nDESCRIPTION: Configures a BrowserWindow with context isolation and establishes a MessageChannel for direct communication with the main world of the renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow, app, MessageChannelMain } = require('electron')\nconst path = require('node:path')\n\napp.whenReady().then(async () => {\n  // Create a BrowserWindow with contextIsolation enabled.\n  const bw = new BrowserWindow({\n    webPreferences: {\n      contextIsolation: true,\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n  bw.loadURL('index.html')\n\n  // We'll be sending one end of this channel to the main world of the\n  // context-isolated page.\n  const { port1, port2 } = new MessageChannelMain()\n\n  // It's OK to send a message on the channel before the other end has\n  // registered a listener. Messages will be queued until a listener is\n  // registered.\n  port2.postMessage({ test: 21 })\n\n  // We can also receive messages from the main world of the renderer.\n  port2.on('message', (event) => {\n    console.log('from renderer main world:', event.data)\n  })\n  port2.start()\n\n  // The preload script will receive this IPC message and transfer the port\n  // over to the main world.\n  bw.webContents.postMessage('main-world-port', null, [port1])\n})\n```\n\n----------------------------------------\n\nTITLE: Renderer Process: Updating Connection Status\nDESCRIPTION: This JavaScript code runs in the Renderer process and updates the connection status displayed in the HTML.  It adds event listeners for the 'online' and 'offline' events on the window object, and updates the content of the `<strong id='status'>` element based on the value of `navigator.onLine`. It also calls `updateOnlineStatus` to set the initial status when the page loads.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst updateOnlineStatus = () => {\n  document.getElementById('status').innerHTML = navigator.onLine ? 'online' : 'offline'\n}\n\nwindow.addEventListener('online', updateOnlineStatus)\nwindow.addEventListener('offline', updateOnlineStatus)\n\nupdateOnlineStatus()\n```\n\n----------------------------------------\n\nTITLE: Menu Template with Before/After Item Positioning\nDESCRIPTION: A menu template that demonstrates the use of 'before' and 'after' positioning properties to control the specific ordering of menu items relative to each other.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { id: '1', label: 'one', after: ['3'] },\n  { id: '2', label: 'two', before: ['1'] },\n  { id: '3', label: 'three' }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Native Addon\nDESCRIPTION: Command to install node-addon-api (C++ wrapper for Node.js API) and bindings (helper for loading compiled native addons) packages needed for developing native Node.js addons.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install node-addon-api bindings\n```\n\n----------------------------------------\n\nTITLE: Accessing ServiceWorkers through Session in Electron\nDESCRIPTION: Example demonstrating how to access the ServiceWorkers class through a Session object, get all running service workers, and handle console messages from service workers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/service-workers.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session } = require('electron')\n\n// Get all service workers.\nconsole.log(session.defaultSession.serviceWorkers.getAllRunning())\n\n// Handle logs and get service worker info\nsession.defaultSession.serviceWorkers.on('console-message', (event, messageDetails) => {\n  console.log(\n    'Got service worker message',\n    messageDetails,\n    'from',\n    session.defaultSession.serviceWorkers.getFromVersionID(messageDetails.versionId)\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Electron View\nDESCRIPTION: Demonstrates basic usage of the View class including creation, styling, and adding to a window. Shows how to set background color, define bounds, and add the view to a BaseWindow's content view.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/view.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BaseWindow, View } = require('electron')\nconst win = new BaseWindow()\nconst view = new View()\n\nview.setBackgroundColor('red')\nview.setBounds({ x: 0, y: 0, width: 100, height: 100 })\nwin.contentView.addChildView(view)\n```\n\n----------------------------------------\n\nTITLE: Changing Window Icon - Electron JavaScript\nDESCRIPTION: Changes the window icon to the specified icon, which can be a NativeImage object or a string path to the icon image. This method is applicable on both Windows and Linux operating systems.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setIcon(icon)\n```\n\n----------------------------------------\n\nTITLE: Setting USB Protected Classes Handler in Electron\nDESCRIPTION: This code snippet shows how to set a USB protected classes handler for a session in Electron. It allows customization of which USB classes are considered protected and not available in the renderer.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\n\nlet win = null\n\napp.whenReady().then(() => {\n  win = new BrowserWindow()\n\n  win.webContents.session.setUSBProtectedClassesHandler((details) => {\n    // Allow all classes:\n    // return []\n    // Keep the current set of protected classes:\n    // return details.protectedClasses\n    // Selectively remove classes:\n    return details.protectedClasses.filter((usbClass) => {\n      // Exclude classes except for audio classes\n      return usbClass.indexOf('audio') === -1\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatically Showing and Hiding Traffic Lights on macOS\nDESCRIPTION: Demonstrates how to programmatically control the visibility of macOS window controls (traffic lights) from the main process using the win.setWindowButtonVisibility method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n// hides the traffic lights\nwin.setWindowButtonVisibility(false)\n```\n\n----------------------------------------\n\nTITLE: Restoring Navigation History in Electron\nDESCRIPTION: This snippet shows how to implement an \"undo close tab\" feature by restoring navigation history from one window to another. It captures the history entries and active index from the first window and applies them to a second window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst firstWindow = new BrowserWindow()\n\n// Later, you want a second window to have the same history and navigation position\nasync function restore () {\n  const entries = firstWindow.webContents.navigationHistory.getAllEntries()\n  const index = firstWindow.webContents.navigationHistory.getActiveIndex()\n\n  const secondWindow = new BrowserWindow()\n  await secondWindow.webContents.navigationHistory.restore({ index, entries })\n}\n```\n\n----------------------------------------\n\nTITLE: Windows and Linux Application Structure\nDESCRIPTION: Illustrates the file structure required for a Windows and Linux Electron application. It shows where to place the `package.json`, `main.js`, and `index.html` files within the Electron application directory. These files form the core of the Electron application and are essential for the application to function.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-21_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n\"electron/resources/app\n├── package.json\n├── main.js\n└── index.html\"\n```\n\n----------------------------------------\n\nTITLE: Accessing TouchBarSlider Properties\nDESCRIPTION: Examples of accessing and modifying TouchBarSlider instance properties to update the slider in real-time.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-slider.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Updating slider properties\ntouchBarSlider.label = 'New Label';\ntouchBarSlider.value = 75;\ntouchBarSlider.minValue = 20;\ntouchBarSlider.maxValue = 200;\n```\n\n----------------------------------------\n\nTITLE: Add Draggable Element in index.html (HTML)\nDESCRIPTION: This HTML snippet adds a draggable div element with the id 'drag' to the page. The `draggable` attribute is set to 'true', and a renderer script is included.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"border:2px solid black;border-radius:3px;padding:5px;display:inline-block\" draggable=\"true\" id=\"drag\">Drag me</div>\n<script src=\"renderer.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Overlay Icon for Windows Taskbar in Electron\nDESCRIPTION: This example demonstrates how to set an overlay icon for a BrowserWindow's taskbar button using the setOverlayIcon API in Electron. It sets an image as the overlay with a description.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow, nativeImage } = require('electron')\n\nconst win = new BrowserWindow()\n\nwin.setOverlayIcon(nativeImage.createFromPath('path/to/overlay.png'), 'Description for overlay')\n```\n\n----------------------------------------\n\nTITLE: IPC Message Handling in Electron Main Process\nDESCRIPTION: Code for the Electron main process to handle IPC messages from a test driver. This shows how to set up communication handlers in the application being tested.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// listen for messages from the test suite\nprocess.on('message', (msg) => {\n  // ...\n})\n\n// send a message to the test suite\nprocess.send({ my: 'message' })\n```\n\n----------------------------------------\n\nTITLE: Insecure BrowserWindow Configuration with WebSecurity Disabled\nDESCRIPTION: Example showing how not to configure a BrowserWindow by disabling webSecurity, which would compromise same-origin policy and allow insecure content execution.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    webSecurity: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Tab Bar Visibility in Electron for macOS\nDESCRIPTION: Toggles the visibility of the tab bar when native tabs are enabled and there is only one tab in the current window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nwin.toggleTabBar()\n```\n\n----------------------------------------\n\nTITLE: Setting Code Cache Path in Electron Session\nDESCRIPTION: Sets the directory to store the V8 generated JS code cache from the renderer. The directory will be created if it doesn't exist. If the directory cannot be created, code cache will not be used.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nses.setCodeCachePath(path)\n```\n\n----------------------------------------\n\nTITLE: Signing Electron App with Apple Development Certificate in JavaScript\nDESCRIPTION: This code snippet demonstrates how to sign an Electron app with the Apple Development certificate using the @electron/osx-sign module. It includes specifying the app path, identity, and provisioning profile.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { signAsync } = require('@electron/osx-sign')\n\nsignAsync({\n  app: '/path/to/your.app',\n  identity: 'Apple Development',\n  provisioningProfile: '/path/to/your.provisionprofile'\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Tray Object Garbage Collection in Electron\nDESCRIPTION: Shows how to prevent Electron tray icons from disappearing due to garbage collection by using global variables instead of local ones.\nSOURCE: https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, Tray } = require('electron')\napp.whenReady().then(() => {\n  const tray = new Tray('/path/to/icon.png')\n  tray.setTitle('hello world')\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, Tray } = require('electron')\nlet tray = null\napp.whenReady().then(() => {\n  tray = new Tray('/path/to/icon.png')\n  tray.setTitle('hello world')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Wrapper for C++ Addon\nDESCRIPTION: JavaScript wrapper class that extends EventEmitter to provide a cleaner interface for the C++ addon. Handles platform-specific initialization, event forwarding, and data parsing.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst EventEmitter = require('events')\n\nclass CppWin32Addon extends EventEmitter {\n  constructor() {\n    super()\n\n    if (process.platform !== 'win32') {\n      throw new Error('This module is only available on Windows')\n    }\n\n    const native = require('bindings')('cpp_addon')\n    this.addon = new native.CppWin32Addon();\n\n    this.addon.on('todoAdded', (payload) => {\n      this.emit('todoAdded', this.#parse(payload))\n    });\n\n    this.addon.on('todoUpdated', (payload) => {\n      this.emit('todoUpdated', this.#parse(payload))\n    });\n\n    this.addon.on('todoDeleted', (payload) => {\n      this.emit('todoDeleted', this.#parse(payload))\n    });\n  }\n\n  helloWorld(input = \"\") {\n    return this.addon.helloWorld(input)\n  }\n\n  helloGui() {\n    this.addon.helloGui()\n  }\n\n  #parse(payload) {\n    const parsed = JSON.parse(payload)\n\n    return { ...parsed, date: new Date(parsed.date) }\n  }\n}\n\nif (process.platform === 'win32') {\n  module.exports = new CppWin32Addon()\n} else {\n  module.exports = {}\n}\n```\n\n----------------------------------------\n\nTITLE: Package Configuration for Native Win32 Addon\nDESCRIPTION: The package.json configuration for a native Win32 addon project, including script commands for building and cleaning the project and dependencies on bindings and node-addon-api libraries.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cpp-win32\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A demo module that exposes C++ code to Electron\",\n  \"main\": \"js/index.js\",\n  \"author\": \"Your Name\",\n  \"scripts\": {\n    \"clean\": \"rm -rf build_swift && rm -rf build\",\n    \"build-electron\": \"electron-rebuild\",\n    \"build\": \"node-gyp configure && node-gyp build\"\n  },\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"bindings\": \"^1.5.0\",\n    \"node-addon-api\": \"^8.3.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Webview Renderer in Electron\nDESCRIPTION: The send and sendToFrame methods allow asynchronous communication with the webview's renderer process through specified channels.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.send(channel, ...args)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.sendToFrame(frameId, channel, ...args)\n```\n\n----------------------------------------\n\nTITLE: Excluding Window from Application Menu in Electron\nDESCRIPTION: Example showing how to exclude a specific BrowserWindow from being shown in the application's Windows menu on macOS by setting the excludedFromShownWindowsMenu property.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst win = new BrowserWindow({ height: 600, width: 600 })\n\nconst template = [\n  {\n    role: 'windowmenu'\n  }\n]\n\nwin.excludedFromShownWindowsMenu = true\n\nconst menu = Menu.buildFromTemplate(template)\nMenu.setApplicationMenu(menu)\n```\n\n----------------------------------------\n\nTITLE: Creating Tray and BrowserWindow Icons from File Paths (Main Process)\nDESCRIPTION: This code demonstrates how to create a Tray and a BrowserWindow in Electron, setting their icons by providing the file paths to the icon images.  It uses the `require('electron')` method to import the necessary modules.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/native-image.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow, Tray } = require('electron')\n\nconst tray = new Tray('/Users/somebody/images/icon.png')\nconst win = new BrowserWindow({ icon: '/Users/somebody/images/window.png' })\n```\n\n----------------------------------------\n\nTITLE: Capturing WebFrame Content in Display Media Request Handler\nDESCRIPTION: Demonstrates how to implement a display media request handler that allows a tab to capture itself by returning the requesting frame as the video source.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session } = require('electron')\n\nsession.defaultSession.setDisplayMediaRequestHandler((request, callback) => {\n  // Allow the tab to capture itself.\n  callback({ video: request.frame })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Reply Stream Pattern in Electron Main Process\nDESCRIPTION: Shows the main process implementation of the streaming response pattern. Handles incoming requests by sending multiple messages through the MessagePort and properly closing the connection.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nipcMain.on('give-me-a-stream', (event, msg) => {\n  // The renderer has sent us a MessagePort that it wants us to send our\n  // response over.\n  const [replyPort] = event.ports\n\n  // Here we send the messages synchronously, but we could just as easily store\n  // the port somewhere and send messages asynchronously.\n  for (let i = 0; i < msg.count; i++) {\n    replyPort.postMessage(msg.element)\n  }\n\n  // We close the port when we're done to indicate to the other end that we\n  // won't be sending any more messages. This isn't strictly necessary--if we\n  // didn't explicitly close the port, it would eventually be garbage\n  // collected, which would also trigger the 'close' event in the renderer.\n  replyPort.close()\n})\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Smoke Tests in Electron\nDESCRIPTION: Commands to run full Node.js test suite or individual tests within Electron's Node.js environment\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ node script/node-spec-runner.js\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ node script/node-spec-runner.js parallel/test-crypto-keygen\n```\n\n----------------------------------------\n\nTITLE: Controlling Webview Zoom in Electron\nDESCRIPTION: Methods for adjusting and retrieving zoom factor and level, as well as setting zoom limits for the webview content.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.setZoomFactor(factor)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.setZoomLevel(level)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.getZoomFactor()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.getZoomLevel()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.setVisualZoomLevelLimits(minimumLevel, maximumLevel)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Storage Updates in Electron\nDESCRIPTION: JavaScript code snippet demonstrating how to configure the update-electron-app module for static storage updates. It sets the base URL for the update metadata files.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { updateElectronApp, UpdateSourceType } = require('update-electron-app')\n\nupdateElectronApp({\n  updateSource: {\n    type: UpdateSourceType.StaticStorage,\n    baseUrl: `https://my-bucket.s3.amazonaws.com/my-app-updates/${process.platform}/${process.arch}`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Window in Electron\nDESCRIPTION: Sets a parent window for the current window. Passing null will turn the current window into a top-level window with no parent.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setParentWindow(parent)\n```\n\n----------------------------------------\n\nTITLE: Updating Tray Context Menu Items in Linux\nDESCRIPTION: Shows how to properly update individual menu items in the tray context menu on Linux platforms. Demonstrates the need to reset the context menu after making changes to menu items.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, Menu, Tray } = require('electron')\n\nlet appIcon = null\napp.whenReady().then(() => {\n  appIcon = new Tray('/path/to/my/icon')\n  const contextMenu = Menu.buildFromTemplate([\n    { label: 'Item1', type: 'radio' },\n    { label: 'Item2', type: 'radio' }\n  ])\n\n  // Make a change to the context menu\n  contextMenu.items[1].checked = false\n\n  // Call this again for Linux because we modified the context menu\n  appIcon.setContextMenu(contextMenu)\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Box in Electron\nDESCRIPTION: This function shows a modal error dialog in Electron. It accepts title and content parameters, and can be called safely before the app's 'ready' event.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ndialog.showErrorBox(title, content)\n```\n\n----------------------------------------\n\nTITLE: Getting Child Windows in Electron\nDESCRIPTION: Returns an array of all child BrowserWindow instances that belong to the current window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nwin.getChildWindows()\n```\n\n----------------------------------------\n\nTITLE: Set Background Throttling for WebContents - Electron\nDESCRIPTION: This method controls whether a WebContents instance will throttle animations and timers when the page is backgrounded. It also affects the Page Visibility API. Setting `allowed` to `true` enables throttling, while `false` disables it.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ncontents.setBackgroundThrottling(allowed)\n```\n\n----------------------------------------\n\nTITLE: Worker HTML Implementation with MessagePort Handling\nDESCRIPTION: HTML file for the worker process that handles incoming client connections via MessagePorts. It receives work requests, processes them, and sends results back through the MessagePort.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script>\nconst { ipcRenderer } = require('electron')\n\nconst doWork = (input) => {\n  // Something cpu-intensive.\n  return input * 2\n}\n\n// We might get multiple clients, for instance if there are multiple windows,\n// or if the main window reloads.\nipcRenderer.on('new-client', (event) => {\n  const [ port ] = event.ports\n  port.onmessage = (event) => {\n    // The event data can be any serializable object (and the event could even\n    // carry other MessagePorts with it!)\n    const result = doWork(event.data)\n    port.postMessage(result)\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Publisher in Forge Config\nDESCRIPTION: Sets up the GitHub Publisher in the Forge configuration file, specifying the repository details and release settings.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  publishers: [\n    {\n      name: '@electron-forge/publisher-github',\n      config: {\n        repository: {\n          owner: 'github-user-name',\n          name: 'github-repo-name'\n        },\n        prerelease: false,\n        draft: true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting a String in Electron\nDESCRIPTION: This method encrypts a plaintext string and returns a Buffer containing the encrypted bytes. It throws an error if encryption fails.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsafeStorage.encryptString(plainText)\n```\n\n----------------------------------------\n\nTITLE: Setting Client Certificate Request Password Handler in Electron (JavaScript)\nDESCRIPTION: Demonstrates how to set a handler for client certificate password requests in an Electron app. The handler prompts the user for a password when a client certificate needs to be unlocked for authentication.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\nasync function passwordPromptUI (text) {\n  return new Promise((resolve, reject) => {\n    // display UI to prompt user for password\n    // ...\n    // ...\n    resolve('the password')\n  })\n}\n\napp.setClientCertRequestPasswordHandler(async ({ hostname, tokenName, isRetry }) => {\n  const text = `Please sign in to ${tokenName} to authenticate to ${hostname} with your certificate`\n  const password = await passwordPromptUI(text)\n  return password\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication in ClientRequest with the 'login' Event\nDESCRIPTION: This example shows how to handle authentication requests by listening for the 'login' event on a ClientRequest object. The callback provides credentials when an authenticating proxy asks for them.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.on('login', (authInfo, callback) => {\n  callback('username', 'password')\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing systemPreferences appLevelAppearance (JavaScript)\nDESCRIPTION: The `systemPreferences.getAppLevelAppearance` and `systemPreferences.setAppLevelAppearance` methods, and the `systemPreferences.appLevelAppearance` property have been deprecated. Use the `nativeTheme` module instead. This snippet provides replacements using `nativeTheme.shouldUseDarkColors` and `nativeTheme.themeSource`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nsystemPreferences.getAppLevelAppearance()\n// Replace with\nnativeTheme.shouldUseDarkColors\n\n// Deprecated\nsystemPreferences.appLevelAppearance\n// Replace with\nnativeTheme.shouldUseDarkColors\n\n// Deprecated\nsystemPreferences.setAppLevelAppearance('dark')\n// Replace with\nnativeTheme.themeSource = 'dark'\n```\n\n----------------------------------------\n\nTITLE: Replacing the deprecated remote module with @electron/remote\nDESCRIPTION: Illustrates how to replace the deprecated `remote` module with the `@electron/remote` module. It shows importing BrowserWindow from `@electron/remote` and initializing the remote module in the main process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Replace with:\nconst { BrowserWindow } = require('@electron/remote')\n\n// In the main process:\nrequire('@electron/remote/main').initialize()\n```\n\n----------------------------------------\n\nTITLE: Clearing Recent Documents in Electron (macOS and Windows)\nDESCRIPTION: The app.clearRecentDocuments method clears the operating system's recent documents list on macOS and Windows platforms.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\napp.clearRecentDocuments()\n```\n\n----------------------------------------\n\nTITLE: Implementing 'Add Todo' Functionality in Objective-C\nDESCRIPTION: This Objective-C code demonstrates the implementation of the `addTodo:` method, which is triggered by the 'Add' button. It retrieves the text from the text field and the date from the date picker, creates a new todo item with a unique ID, adds it to an array, reloads the table view to display the new todo, and clears the text field for the next entry.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_9\n\nLANGUAGE: objc\nCODE:\n```\n// Previous code...\n\n// Action method for the Add button\n- (void)addTodo:(id)sender {\n    NSString *text = [_textField stringValue];\n    if ([text length] > 0) {\n        NSDate *date = [_datePicker dateValue];\n\n        // Create a unique ID\n        NSUUID *uuid = [NSUUID UUID];\n\n        // Create a dictionary to store the todo\n        NSDictionary *todo = @{\n            @\"id\": [uuid UUIDString],\n            @\"text\": text,\n            @\"date\": date\n        };\n\n        // Add to our array\n        [_todos addObject:todo];\n\n        // Reload the table\n        [_tableView reloadData];\n\n        // Reset the text field\n        [_textField setStringValue:@\"\"];\n\n        // Next, we'll notify our JavaScript world here...\n    }\n}\n\n// More code to follow later...\n```\n\n----------------------------------------\n\nTITLE: Handling Window Closure in Electron (Windows & Linux)\nDESCRIPTION: Event handler to quit the application when all windows are closed on Windows and Linux platforms. Uses the window-all-closed event to check the platform and quit appropriately.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Publish Command to npm Scripts\nDESCRIPTION: Adds the Electron Forge publish command to the package.json scripts for easy execution.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"electron-forge start\",\n    \"package\": \"electron-forge package\",\n    \"make\": \"electron-forge make\",\n    \"publish\": \"electron-forge publish\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Dependencies in Node.js\nDESCRIPTION: This snippet shows an optimized version of the previous example, using lazy loading and asynchronous operations to defer work until it's actually needed, improving performance and resource allocation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/performance.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('node:fs')\n\nclass Parser {\n  async getFiles () {\n    this.files = this.files || await fs.promises.readdir('.')\n\n    return this.files\n  }\n\n  async getParsedFiles () {\n    const fooParser = require('foo-parser')\n    const files = await this.getFiles()\n\n    return fooParser.parse(files)\n  }\n}\n\nconst parser = new Parser()\n\nmodule.exports = { parser }\n```\n\n----------------------------------------\n\nTITLE: Safe Usage of shell.openExternal\nDESCRIPTION: Examples showing unsafe and safe ways to use shell.openExternal to open external URLs.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n//  Bad\nconst { shell } = require('electron')\nshell.openExternal(USER_CONTROLLED_DATA_HERE)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n//  Good\nconst { shell } = require('electron')\nshell.openExternal('https://example.com/index.html')\n```\n\n----------------------------------------\n\nTITLE: Basic Node.js Addon Structure in C++\nDESCRIPTION: Creates the basic skeleton for a Node.js addon using node-addon-api, setting up the initialization function and module exports.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\n#include <napi.h>\n#include <string>\n#include \"cpp_code.h\"\n\nNapi::Object Init(Napi::Env env, Napi::Object exports) {\n    // We'll add code here later\n    return exports;\n}\n\nNODE_API_MODULE(cpp_addon, Init)\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Wrapper\nDESCRIPTION: This snippet creates a JavaScript wrapper for the native addon. It extends EventEmitter to provide event support, checks if the platform is macOS, loads the native addon, sets up event listeners and forwards them, provides a clean API for the functions, and parses JSON payloads, converting timestamps to JavaScript Date objects.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst EventEmitter = require('events')\n\nclass ObjcMacosAddon extends EventEmitter {\n  constructor () {\n    super()\n\n    if (process.platform !== 'darwin') {\n      throw new Error('This module is only available on macOS')\n    }\n\n    const native = require('bindings')('objc_addon')\n    this.addon = new native.ObjcMacosAddon()\n\n    this.addon.on('todoAdded', (payload) => {\n      this.emit('todoAdded', this.parse(payload))\n    })\n  }\n\n  helloWorld (input = '') {\n    return this.addon.helloWorld(input)\n  }\n\n  helloGui () {\n    this.addon.helloGui()\n  }\n\n  parse (payload) {\n    const parsed = JSON.parse(payload)\n\n    return { ...parsed, date: new Date(parsed.date) }\n  }\n}\n\nif (process.platform === 'darwin') {\n  module.exports = new ObjcMacosAddon()\n} else {\n  module.exports = {}\n}\n```\n\n----------------------------------------\n\nTITLE: Objective-C TodoWindowController Implementation\nDESCRIPTION: This code implements an Objective-C `TodoWindowController` class that manages a window containing a text field, date picker, add button, and table view for displaying todo items. It includes methods for initializing the window, setting up the UI elements with auto layout, handling user input through the \"Add\" button, and managing the table view data source and delegate. It also converts data to JSON to send it to the callback.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_13\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Foundation/Foundation.h>\n#import <AppKit/AppKit.h>\n#import <string>\n#import <functional>\n#import \"../include/objc_code.h\"\n\nusing TodoCallback = std::function<void(const std::string&)>;\n\nstatic TodoCallback g_todoAddedCallback;\n\n// Forward declaration of our custom classes\n@interface TodoWindowController : NSWindowController\n@property (strong) NSTextField *textField;\n@property (strong) NSDatePicker *datePicker;\n@property (strong) NSButton *addButton;\n@property (strong) NSTableView *tableView;\n@property (strong) NSMutableArray<NSDictionary*> *todos;\n@end\n\n// Controller for the main window\n@implementation TodoWindowController\n\n- (instancetype)init {\n    self = [super initWithWindowNibName:\"\"];\n    if (self) {\n        // Create an array to store todos\n        _todos = [NSMutableArray array];\n        [self setupWindow];\n    }\n    return self;\n}\n\n- (void)setupWindow {\n    // Create a window\n    NSRect frame = NSMakeRect(0, 0, 400, 300);\n    NSWindow *window = [[NSWindow alloc] initWithContentRect:frame\n                                         styleMask:NSWindowStyleMaskTitled | NSWindowStyleMaskClosable | NSWindowStyleMaskResizable\n                                         backing:NSBackingStoreBuffered\n                                         defer:NO];\n    [window setTitle:@\"Todo List\"];\n    [window center];\n    self.window = window;\n\n    // Set up the content view with auto layout\n    NSView *contentView = [window contentView];\n\n    // Create text field\n    _textField = [[NSTextField alloc] initWithFrame:NSMakeRect(20, 260, 200, 24)];\n    [_textField setPlaceholderString:@\"Enter a todo...\"];\n    [contentView addSubview:_textField];\n\n    // Create date picker\n    _datePicker = [[NSDatePicker alloc] initWithFrame:NSMakeRect(230, 260, 100, 24)];\n    [_datePicker setDatePickerStyle:NSDatePickerStyleTextField];\n    [_datePicker setDatePickerElements:NSDatePickerElementFlagYearMonthDay];\n    [contentView addSubview:_datePicker];\n\n    // Create add button\n    _addButton = [[NSButton alloc] initWithFrame:NSMakeRect(340, 260, 40, 24)];\n    [_addButton setTitle:@\"Add\"];\n    [_addButton setBezelStyle:NSBezelStyleRounded];\n    [_addButton setTarget:self];\n    [_addButton setAction:@selector(addTodo:)];\n    [contentView addSubview:_addButton];\n\n    // Create a scroll view for the table\n    NSScrollView *scrollView = [[NSScrollView alloc] initWithFrame:NSMakeRect(20, 20, 360, 230)];\n    [scrollView setBorderType:NSBezelBorder];\n    [scrollView setHasVerticalScroller:YES];\n    [contentView addSubview:scrollView];\n\n    // Create table view\n    _tableView = [[NSTableView alloc] initWithFrame:NSMakeRect(0, 0, 360, 230)];\n\n    // Add a column for the todo text\n    NSTableColumn *textColumn = [[NSTableColumn alloc] initWithIdentifier:@\"text\"];\n    [textColumn setWidth:240];\n    [textColumn setTitle:@\"Todo\"];\n    [_tableView addTableColumn:textColumn];\n\n    // Add a column for the date\n    NSTableColumn *dateColumn = [[NSTableColumn alloc] initWithIdentifier:@\"date\"];\n    [dateColumn setWidth:100];\n    [dateColumn setTitle:@\"Date\"];\n    [_tableView addTableColumn:dateColumn];\n\n    // Set the table's delegate and data source\n    [_tableView setDataSource:self];\n    [_tableView setDelegate:self];\n\n    // Add the table to the scroll view\n    [scrollView setDocumentView:_tableView];\n}\n\n// Action method for the Add button\n- (void)addTodo:(id)sender {\n    NSString *text = [_textField stringValue];\n    if ([text length] > 0) {\n        NSDate *date = [_datePicker dateValue];\n\n        // Create a unique ID\n        NSUUID *uuid = [NSUUID UUID];\n\n        // Create a dictionary to store the todo\n        NSDictionary *todo = @{\n            @\"id\": [uuid UUIDString],\n            @\"text\": text,\n            @\"date\": date\n        };\n\n        // Add to our array\n        [_todos addObject:todo];\n\n        // Reload the table\n        [_tableView reloadData];\n\n        // Reset the text field\n        [_textField setStringValue:@\"\"];\n\n        // Call the callback if it exists\n        if (g_todoAddedCallback) {\n            // Convert the todo to JSON\n            NSError *error;\n            NSData *jsonData = [NSJSONSerialization dataWithJSONObject:@{\n                @\"id\": [uuid UUIDString],\n                @\"text\": text,\n                @\"date\": @((NSTimeInterval)[date timeIntervalSince1970] * 1000)\n            } options:0 error:&error;\n\n            if (!error) {\n                NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n                std::string cppJsonString = [jsonString UTF8String];\n                g_todoAddedCallback(cppJsonString);\n            }\n        }\n    }\n}\n\n// NSTableViewDataSource methods\n- (NSInteger)numberOfRowsInTableView:(NSTableView *)tableView {\n    return [_todos count];\n}\n\n- (id)tableView:(NSTableView *)tableView objectValueForTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row {\n    NSDictionary *todo = _todos[row];\n    NSString *identifier = [tableColumn identifier];\n\n    if ([identifier isEqualToString:@\"text\"]) {\n        return todo[@\"text\"];\n    } else if ([identifier isEqualToString:@\"date\"]) {\n        NSDate *date = todo[@\"date\"];\n        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n        [formatter setDateStyle:NSDateFormatterShortStyle];\n        return [formatter stringFromDate:date];\n    }\n\n    return nil;\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Creating a ShareMenu Instance in Electron\nDESCRIPTION: Initializes a new ShareMenu instance with a sharing item that defines the content to be shared.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/share-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `new ShareMenu(sharingItem)`\n\n* `sharingItem` SharingItem - The item to share.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Permission Handler for Electron Sessions\nDESCRIPTION: Code sample demonstrating how to implement a custom permission request handler for Electron sessions, which allows control over which websites can request specific permissions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session } = require('electron')\nconst { URL } = require('url')\n\nsession\n  .fromPartition('some-partition')\n  .setPermissionRequestHandler((webContents, permission, callback) => {\n    const parsedUrl = new URL(webContents.getURL())\n\n    if (permission === 'notifications') {\n      // Approves the permissions request\n      callback(true)\n    }\n\n    // Verify URL\n    if (parsedUrl.protocol !== 'https:' || parsedUrl.host !== 'example.com') {\n      // Denies the permissions request\n      return callback(false)\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Network Logging in Electron\nDESCRIPTION: Example showing how to start network logging to a file path and stop it after some network events have occurred. The logged file path is then output to the console. This demonstrates the basic workflow of the netLog module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/net-log.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, netLog } = require('electron')\n\napp.whenReady().then(async () => {\n  await netLog.startLogging('/path/to/net-log')\n  // After some network events\n  const path = await netLog.stopLogging()\n  console.log('Net-logs written to', path)\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript Engine Flags in Electron\nDESCRIPTION: Example of passing flags to the V8 JavaScript engine when launching an Electron application. This demonstrates enabling harmony proxies and collections features.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ electron --js-flags=\"--harmony_proxies --harmony_collections\" your-app\n```\n\n----------------------------------------\n\nTITLE: Handling Application Closure in Electron\nDESCRIPTION: Event listener for window closure that implements the platform-specific behavior of quitting the app when all windows are closed (except on macOS).\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})\n```\n\n----------------------------------------\n\nTITLE: DesktopCapturer.getSources: Removed in Renderer\nDESCRIPTION: This snippet demonstrates how to replace the usage of `desktopCapturer.getSources` in the renderer process by moving it to the main process and using `ipcMain.handle` and `ipcRenderer.invoke` for inter-process communication.  It also suggests further restricting the information returned to the renderer for security purposes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// Main process\nconst { ipcMain, desktopCapturer } = require('electron')\n\nipcMain.handle(\n  'DESKTOP_CAPTURER_GET_SOURCES',\n  (event, opts) => desktopCapturer.getSources(opts)\n)\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Renderer process\nconst { ipcRenderer } = require('electron')\n\nconst desktopCapturer = {\n  getSources: (opts) => ipcRenderer.invoke('DESKTOP_CAPTURER_GET_SOURCES', opts)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Window Mouse Event Handling in Electron\nDESCRIPTION: Configures a window to ignore mouse events, passing them through to windows below. Even with mouse events ignored, the window will still receive keyboard events if it has focus. Supports optional mouse move forwarding on macOS and Windows.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setIgnoreMouseEvents(ignore[, options])\n```\n\n----------------------------------------\n\nTITLE: Showing Certificate Trust Dialog in Electron (macOS and Windows)\nDESCRIPTION: This function displays a certificate trust dialog on macOS and Windows. It accepts optional window and options parameters, and returns a Promise that resolves when the dialog is shown.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ndialog.showCertificateTrustDialog([window, ]options)\n```\n\n----------------------------------------\n\nTITLE: Setting Tray Context Menu Electron JavaScript\nDESCRIPTION: This snippet sets a new context menu for the tray icon. The `menu` parameter accepts a `Menu` object or `null`. The functionality has no specific dependencies beyond the Electron framework itself.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntray.setContextMenu(menu)\n```\n\n----------------------------------------\n\nTITLE: Making webContents.getZoomLevel synchronous in Electron\nDESCRIPTION: This snippet illustrates the transition of `webContents.getZoomLevel` from an asynchronous function using a callback to a synchronous function that returns the zoom level directly.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_85\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nwebContents.getZoomLevel((level) => {\n  console.log(level)\n})\n// Replace with\nconst level = webContents.getZoomLevel()\nconsole.log(level)\n```\n\n----------------------------------------\n\nTITLE: Accessing System Theme Properties Example\nDESCRIPTION: Example showing the three main theme source options available in the nativeTheme API for controlling dark/light mode.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/native-theme.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Follow OS\nnativeTheme.themeSource = 'system'\n\n// Dark Mode\nnativeTheme.themeSource = 'dark'\n\n// Light Mode\nnativeTheme.themeSource = 'light'\n```\n\n----------------------------------------\n\nTITLE: Running Publish Command\nDESCRIPTION: Executes the publish command to create distributables and publish them to GitHub releases.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run publish\n```\n\n----------------------------------------\n\nTITLE: Handling Shared Texture with the Paint Event\nDESCRIPTION: This snippet demonstrates how to use shared textures with the 'paint' event in Electron. It creates a BrowserWindow with `offscreen.useSharedTexture` enabled. The event handler retrieves the texture and its information, which can be passed to other processes using IPC. It also demonstrates calling `texture.release()` to manage the texture lifecycle.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ webPreferences: { offscreen: { useSharedTexture: true } } })\nwin.webContents.on('paint', async (e, dirty, image) => {\n  if (e.texture) {\n    // By managing lifecycle yourself, you can handle the event in async handler or pass the `e.texture.textureInfo`\n    // to other processes (not `e.texture`, the `e.texture.release` function is not passable through IPC).\n    await new Promise(resolve => setTimeout(resolve, 50))\n\n    // You can send the native texture handle to native code for importing into your rendering pipeline.\n    // Read more at https://github.com/electron/electron/blob/main/shell/browser/osr/README.md\n    // importTextureHandle(dirty, e.texture.textureInfo)\n\n    // You must call `e.texture.release()` as soon as possible, before the underlying frame pool is drained.\n    e.texture.release()\n  }\n})\nwin.loadURL('https://github.com')\n```\n\n----------------------------------------\n\nTITLE: Checking for Command Line Switch in Electron (JavaScript)\nDESCRIPTION: This snippet demonstrates how to check if the '--disable-gpu' flag is set using the CommandLine class in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\napp.commandLine.hasSwitch('disable-gpu')\n```\n\n----------------------------------------\n\nTITLE: BrowserWindow extension removal API deprecation\nDESCRIPTION: The `BrowserWindow` extension APIs are deprecated and should be replaced with the `session` APIs. This snippet shows how to replace the deprecated API with `session.defaultSession.removeExtension`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_63\n\nLANGUAGE: js\nCODE:\n```\n// Deprecated in Electron 9\nBrowserWindow.removeExtension(name)\nBrowserWindow.removeDevToolsExtension(name)\n// Replace with\nsession.defaultSession.removeExtension(extension_id)\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color for Better Font Rendering\nDESCRIPTION: Shows how to improve font rendering on LCD screens by setting a background color in the BrowserWindow constructor to enable sub-pixel anti-aliasing.\nSOURCE: https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  backgroundColor: '#fff'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Title Bar in Electron\nDESCRIPTION: Implements a simple custom title bar using HTML and CSS in an Electron application, replacing the native title bar with a custom UI element.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    titleBarStyle: 'hidden',\n    titleBarOverlay: true\n  })\n  win.loadFile('index.html')\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Offscreen BrowserWindow in Electron\nDESCRIPTION: Creates a BrowserWindow instance with offscreen rendering enabled using shared texture mode\nSOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwebPreferences: {\n  offscreen: true,\n  useSharedTexture: true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Touch Bar in Electron for macOS\nDESCRIPTION: Sets the TouchBar layout for the current window on macOS. Specifying null clears the touch bar. Only has an effect on machines with a touch bar.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setTouchBar(touchBar)\n```\n\n----------------------------------------\n\nTITLE: Setting Window Background Material in Electron for Windows\nDESCRIPTION: Sets the browser window's system-drawn background material on Windows 11, including behind non-client areas. Supports materials like mica, acrylic, and tabbed, or can be set to auto or none.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setBackgroundMaterial(material)\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Signing for macOS in Forge\nDESCRIPTION: Configuration for code signing macOS apps in the Forge config file, including notarization settings.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  packagerConfig: {\n    osxSign: {},\n    // ...\n    osxNotarize: {\n      tool: 'notarytool',\n      appleId: process.env.APPLE_ID,\n      appleIdPassword: process.env.APPLE_PASSWORD,\n      teamId: process.env.APPLE_TEAM_ID\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Command Line Switch in Electron (JavaScript)\nDESCRIPTION: This example shows how to remove a specified command line switch using the CommandLine class in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.commandLine.appendSwitch('remote-debugging-port', '8315')\nconsole.log(app.commandLine.hasSwitch('remote-debugging-port')) // true\n\napp.commandLine.removeSwitch('remote-debugging-port')\nconsole.log(app.commandLine.hasSwitch('remote-debugging-port')) // false\n```\n\n----------------------------------------\n\nTITLE: Initializing TouchBarButton Constructor\nDESCRIPTION: Creates a new TouchBarButton instance with configurable options including label, accessibility features, styling, and click behavior. Available only in the main process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-button.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew TouchBarButton({\n  label: string,\n  accessibilityLabel: string,\n  backgroundColor: string,\n  icon: NativeImage | string,\n  iconPosition: string,\n  click: Function,\n  enabled: boolean\n})\n```\n\n----------------------------------------\n\nTITLE: Getting all WebContents instances in Electron\nDESCRIPTION: This code shows how to retrieve an array containing all WebContents instances in the Electron application. This includes web contents for windows, webviews, opened devtools, and devtools extension background pages. It requires the electron module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { webContents } = require('electron')\nconsole.log(webContents)\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Stable Electron (npm/yarn)\nDESCRIPTION: Command to install the most recent stable build of Electron as a dev dependency using npm or yarn.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/electron-versioning.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev electron\n```\n\n----------------------------------------\n\nTITLE: Setting Window Button Position - Electron JavaScript\nDESCRIPTION: Sets a custom position for the traffic light buttons (close, minimize, maximize) in frameless windows on macOS. A null parameter resets the position to default.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setWindowButtonPosition(position)\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Storage and JavaScript Callback Notification\nDESCRIPTION: Defines a global vector to store Todo items and provides a function to notify JavaScript callbacks when todos are added or modified, ensuring proper message processing.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n  // Global vector to store todos\n  static std::vector<TodoItem> g_todos;\n\n  void NotifyCallback(const TodoCallback &callback, const std::string &json)\n  {\n    if (callback)\n    {\n      callback(json);\n      // Process pending messages\n      MSG msg;\n      while (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE))\n      {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Navigation Actions - Electron NavigationHistory\nDESCRIPTION: Methods to perform navigation actions like going back, forward, or to a specific index in history.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnavigationHistory.goBack()\nnavigationHistory.goForward()\nnavigationHistory.goToIndex(index)\nnavigationHistory.goToOffset(offset)\n```\n\n----------------------------------------\n\nTITLE: Importing Electron Modules for Tray Creation\nDESCRIPTION: This snippet shows how to import the required modules from Electron to create a Tray icon.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, Tray, Menu, nativeImage } = require('electron')\n```\n\n----------------------------------------\n\nTITLE: Enabling Read-Write Access for User-Selected Files in Electron Apps (XML)\nDESCRIPTION: This XML snippet enables read-write access to user-selected files for an Electron app, typically used with dialog.showSaveDialog. It sets the 'com.apple.security.files.user-selected.read-write' key to true in the app's entitlements.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.security.files.user-selected.read-write</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Errors in ClientRequest\nDESCRIPTION: This example demonstrates how to cancel authentication by providing empty credentials, which will result in an authentication error. It includes handling both the response and error events.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.on('response', (response) => {\n  console.log(`STATUS: ${response.statusCode}`)\n  response.on('error', (error) => {\n    console.log(`ERROR: ${JSON.stringify(error)}`)\n  })\n})\nrequest.on('login', (authInfo, callback) => {\n  callback()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Window - Electron JavaScript\nDESCRIPTION: Sets a specified window as the parent of the current window, or null to designate it as a top-level window. It allows for hierarchical window management.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setParentWindow(parent)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spell Checker in Electron Session\nDESCRIPTION: Sets whether to enable the built-in spell checker and configures the languages for spell checking. These methods allow enabling/disabling the spell checker and setting specific languages.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nses.setSpellCheckerEnabled(enable)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nses.setSpellCheckerLanguages(languages)\n```\n\n----------------------------------------\n\nTITLE: Log Frame ID in Renderer Process\nDESCRIPTION: This snippet demonstrates how to retrieve and log the frame ID (routingId) within a renderer process using Electron's webFrame module. The frame ID can be used to identify the specific frame when sending messages or handling events.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In a renderer process\nconsole.log('My frameId is:', require('electron').webFrame.routingId)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in POSIX Shell for Electron\nDESCRIPTION: Example of setting the ELECTRON_ENABLE_LOGGING environment variable to true in a POSIX shell before launching Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ export ELECTRON_ENABLE_LOGGING=true\n$ electron\n```\n\n----------------------------------------\n\nTITLE: Closing MessagePortMain Connection\nDESCRIPTION: Disconnects the port, so it is no longer active.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nport.close()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Web Views in BaseWindow - JavaScript\nDESCRIPTION: Demonstrates how to create a BaseWindow with two WebContentsViews side by side, loading different URLs. Shows basic window initialization and view management.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BaseWindow, WebContentsView } = require('electron')\n\nconst win = new BaseWindow({ width: 800, height: 600 })\n\nconst leftView = new WebContentsView()\nleftView.webContents.loadURL('https://electronjs.org')\nwin.contentView.addChildView(leftView)\n\nconst rightView = new WebContentsView()\nrightView.webContents.loadURL('https://github.com/electron/electron')\nwin.contentView.addChildView(rightView)\n\nleftView.setBounds({ x: 0, y: 0, width: 400, height: 600 })\nrightView.setBounds({ x: 400, y: 0, width: 400, height: 600 })\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Jump List in Electron\nDESCRIPTION: Demonstrates how to create a custom Jump List for an Electron application on Windows using the app.setJumpList() method. The example includes custom categories, file items, task items, and built-in frequent items.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.setJumpList([\n  {\n    type: 'custom',\n    name: 'Recent Projects',\n    items: [\n      { type: 'file', path: 'C:\\\\Projects\\\\project1.proj' },\n      { type: 'file', path: 'C:\\\\Projects\\\\project2.proj' }\n    ]\n  },\n  { // has a name so `type` is assumed to be \"custom\"\n    name: 'Tools',\n    items: [\n      {\n        type: 'task',\n        title: 'Tool A',\n        program: process.execPath,\n        args: '--run-tool-a',\n        iconPath: process.execPath,\n        iconIndex: 0,\n        description: 'Runs Tool A'\n      },\n      {\n        type: 'task',\n        title: 'Tool B',\n        program: process.execPath,\n        args: '--run-tool-b',\n        iconPath: process.execPath,\n        iconIndex: 0,\n        description: 'Runs Tool B'\n      }\n    ]\n  },\n  { type: 'frequent' },\n  { // has no name and no type so `type` is assumed to be \"tasks\"\n    items: [\n      {\n        type: 'task',\n        title: 'New Project',\n        program: process.execPath,\n        args: '--new-project',\n        description: 'Create a new project.'\n      },\n      { type: 'separator' },\n      {\n        type: 'task',\n        title: 'Recover Project',\n        program: process.execPath,\n        args: '--recover-project',\n        description: 'Recover Project'\n      }\n    ]\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Setting Content Security Policy via HTTP Headers in Electron\nDESCRIPTION: Example showing how to set a Content Security Policy via HTTP headers by intercepting and modifying response headers in the main process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session } = require('electron')\n\nsession.defaultSession.webRequest.onHeadersReceived((details, callback) => {\n  callback({\n    responseHeaders: {\n      ...details.responseHeaders,\n      'Content-Security-Policy': ['default-src \\'none\\'']\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Electron Packager CLI Command for Protocol Handlers\nDESCRIPTION: Shell command demonstrating how to configure protocol handlers using Electron Packager's command-line interface with the --protocol and --protocol-name flags.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx electron-packager . --protocol=electron-fiddle --protocol-name=\"Electron Fiddle\"\n```\n\n----------------------------------------\n\nTITLE: Handling Session Creation in Electron\nDESCRIPTION: This snippet demonstrates how to listen for the 'session-created' event in an Electron application. It logs the newly created session object to the console whenever Electron creates a new session.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.on('session-created', (session) => {\n  console.log(session)\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing BrowserWindow scroll-touch events with input-event (JavaScript)\nDESCRIPTION: The `scroll-touch-begin`, `scroll-touch-end` and `scroll-touch-edge` events on BrowserWindow have been removed. Instead, use the newly available `input-event` event on WebContents. This snippet shows how to migrate to the `input-event`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed in Electron 23.0\nwin.on('scroll-touch-begin', scrollTouchBegin)\nwin.on('scroll-touch-edge', scrollTouchEdge)\nwin.on('scroll-touch-end', scrollTouchEnd)\n\n// Replace with\nwin.webContents.on('input-event', (_, event) => {\n  if (event.type === 'gestureScrollBegin') {\n    scrollTouchBegin()\n  } else if (event.type === 'gestureScrollUpdate') {\n    scrollTouchEdge()\n  } else if (event.type === 'gestureScrollEnd') {\n    scrollTouchEnd()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Preferred System Languages in Electron\nDESCRIPTION: The app.getPreferredSystemLanguages method returns an array of the user's preferred system languages from most to least preferred, including country codes if applicable.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\napp.getPreferredSystemLanguages()\n```\n\n----------------------------------------\n\nTITLE: SerialPort Object Properties in Electron\nDESCRIPTION: Defines the properties of the SerialPort object in Electron, including unique identifiers, display information, USB details, and platform-specific attributes for macOS and Windows.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/serial-port.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `portId` string - Unique identifier for the port.\n* `portName` string - Name of the port.\n* `displayName` string (optional) - A string suitable for display to the user for describing this device.\n* `vendorId` string (optional) - The USB vendor ID.\n* `productId` string (optional) - The USB product ID.\n* `serialNumber` string (optional) - The USB device serial number.\n* `usbDriverName` string (optional) _macOS_ - Represents a single serial port on macOS can be enumerated by multiple drivers.\n* `deviceInstanceId` string (optional) _Windows_ - A stable identifier on Windows that can be used for device permissions.\n```\n\n----------------------------------------\n\nTITLE: Accessing WebFrameMain properties in IPC events\nDESCRIPTION: This example shows the correct way to access WebFrameMain properties immediately upon receiving an IPC event to avoid issues with detached frames and null returns due to cross-origin navigations. The first `ipcMain.on` shows immediate access while the second demonstrates late access leading to a `null` return.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nipcMain.on('unload-event', (event) => {\n  event.senderFrame // ✅ accessed immediately\n})\n\nipcMain.on('unload-event', async (event) => {\n  await crossOriginNavigationPromise\n  event.senderFrame // ❌ returns `null` due to late access\n})\n```\n\n----------------------------------------\n\nTITLE: Webview New-Window Event: Removed in Electron 22\nDESCRIPTION: This snippet illustrates the removal of the `new-window` event of `<webview>` and demonstrates how to handle new window requests using `webContents.setWindowOpenHandler()` and `ipcRenderer` for communication between the main, preload, and renderer processes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed in Electron 22\nwebview.addEventListener('new-window', (event) => {})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Replace with\n\n// main.js\nmainWindow.webContents.on('did-attach-webview', (event, wc) => {\n  wc.setWindowOpenHandler((details) => {\n    mainWindow.webContents.send('webview-new-window', wc.id, details)\n    return { action: 'deny' }\n  })\n})\n\n// preload.js\nconst { ipcRenderer } = require('electron')\nipcRenderer.on('webview-new-window', (e, webContentsId, details) => {\n  console.log('webview-new-window', webContentsId, details)\n  document.getElementById('webview').dispatchEvent(new Event('new-window'))\n})\n\n// renderer.js\ndocument.getElementById('webview').addEventListener('new-window', () => {\n  console.log('got new-window event')\n})\n```\n\n----------------------------------------\n\nTITLE: Reading RTF from Clipboard in Electron\nDESCRIPTION: Demonstrates how to read Rich Text Format (RTF) content from the system clipboard using the clipboard.readRTF() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nclipboard.writeRTF('{\\\\rtf1\\\\ansi{\\\\fonttbl\\\\f0\\\\fswiss Helvetica;}\\\\f0\\\\pard\\nThis is some {\\\\b bold} text.\\\\par\\n}')\n\nconst rtf = clipboard.readRTF()\nconsole.log(rtf)\n// {\\\\rtf1\\\\ansi{\\\\fonttbl\\\\f0\\\\fswiss Helvetica;}\\\\f0\\\\pard\\nThis is some {\\\\b bold} text.\\\\par\\n}\n```\n\n----------------------------------------\n\nTITLE: Code Signing with Electron Packager (Windows)\nDESCRIPTION: This snippet shows how to configure Electron Packager to sign a Windows application. It includes parameters for customizing the signing process, such as `signWithParams` and `signToolPath`.  It uses the `@electron/packager` package and needs the path to the application and the signing tool.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst packager = require('@electron/packager')\n\npackager({\n  dir: '/path/to/my/app',\n  windowsSign: {\n    signWithParams: '--my=custom --parameters',\n    // If signtool.exe does not work for you, customize!\n    signToolPath: 'C:\\\\Path\\\\To\\\\my-custom-tool.exe'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Thumbnail Toolbar in Electron for Windows\nDESCRIPTION: This snippet shows how to clear the thumbnail toolbar buttons for a BrowserWindow by passing an empty array to setThumbarButtons in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow()\nwin.setThumbarButtons([])\n```\n\n----------------------------------------\n\nTITLE: BrowserWindow extension APIs deprecation\nDESCRIPTION: The `BrowserWindow` extension APIs are deprecated and should be replaced with the `session` APIs. This snippet shows how to replace the deprecated API with `session.defaultSession.loadExtension`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_62\n\nLANGUAGE: js\nCODE:\n```\n// Deprecated in Electron 9\nBrowserWindow.addExtension(path)\nBrowserWindow.addDevToolsExtension(path)\n// Replace with\nsession.defaultSession.loadExtension(path)\n```\n\n----------------------------------------\n\nTITLE: App Command Event Handling - JavaScript\nDESCRIPTION: Shows how to handle app commands like browser back button on Windows and Linux platforms.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BaseWindow } = require('electron')\nconst win = new BaseWindow()\nwin.on('app-command', (e, cmd) => {\n  // Navigate the window back when the user hits their mouse back button\n  if (cmd === 'browser-backward') {\n    // Find the appropriate WebContents to navigate.\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using MessageChannelMain for Inter-Process Communication in Electron\nDESCRIPTION: Example demonstrating how to create a MessageChannel in the main process and send one of its ports to a renderer process. The main process creates the channel and sends port2 to the renderer, while using port1 to post messages. The renderer process receives the port and sets up a message handler.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/message-channel-main.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Main process\nconst { BrowserWindow, MessageChannelMain } = require('electron')\nconst w = new BrowserWindow()\nconst { port1, port2 } = new MessageChannelMain()\nw.webContents.postMessage('port', null, [port2])\nport1.postMessage({ some: 'message' })\n\n// Renderer process\nconst { ipcRenderer } = require('electron')\nipcRenderer.on('port', (e) => {\n  // e.ports is a list of ports sent along with this message\n  e.ports[0].onmessage = (messageEvent) => {\n    console.log(messageEvent.data)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Utility Process - JavaScript\nDESCRIPTION: The `child.postMessage` method allows sending messages and transferring `MessagePortMain` objects to a child process. This facilitates asynchronous communication between the main process and utility processes, enabling complex interactions and data exchanges across process boundaries.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/utility-process.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"const { port1, port2 } = new MessageChannelMain()\\nconst child = utilityProcess.fork(path.join(__dirname, 'test.js'))\\nchild.postMessage({ message: 'hello' }, [port1])\"\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript Methods in Objective-C++\nDESCRIPTION: This snippet implements three methods that can be called from JavaScript: `HelloWorld`, which takes a string as input and returns a string; `HelloGui`, which is a simple wrapper around an Objective-C function; and `On`, which allows JavaScript to register event listeners. These methods create a bridge between Objective-C code and the JavaScript world.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_17\n\nLANGUAGE: objectivec\nCODE:\n```\nNapi::Value HelloWorld(const Napi::CallbackInfo& info) {\n    Napi::Env env = info.Env();\n\n    if (info.Length() < 1 || !info[0].IsString()) {\n        Napi::TypeError::New(env, \"Expected string argument\").ThrowAsJavaScriptException();\n        return env.Null();\n    }\n\n    std::string input = info[0].As<Napi::String>();\n    std::string result = objc_code::hello_world(input);\n\n    return Napi::String::New(env, result);\n}\n\nvoid HelloGui(const Napi::CallbackInfo& info) {\n    objc_code::hello_gui();\n}\n\nNapi::Value On(const Napi::CallbackInfo& info) {\n    Napi::Env env = info.Env();\n\n    if (info.Length() < 2 || !info[0].IsString() || !info[1].IsFunction()) {\n        Napi::TypeError::New(env, \"Expected (string, function) arguments\").ThrowAsJavaScriptException();\n        return env.Undefined();\n    }\n\n    callbacks.Value().Set(info[0].As<Napi::String>(), info[1].As<Napi::Function>());\n    return env.Undefined();\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Node APIs through contextBridge\nDESCRIPTION: Example demonstrating how to expose Node.js functionality (crypto in this case) to the renderer process using contextBridge, with caution about security implications.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { contextBridge } = require('electron')\nconst crypto = require('node:crypto')\ncontextBridge.exposeInMainWorld('nodeCrypto', {\n  sha256sum (data) {\n    const hash = crypto.createHash('sha256')\n    hash.update(data)\n    return hash.digest('hex')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Tab Bar Visibility - Electron JavaScript\nDESCRIPTION: Toggles the visibility of the tab bar for windows with native tab support in macOS, specifically when there is only one tab. This function is useful for decluttering the interface.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nwin.toggleTabBar()\n```\n\n----------------------------------------\n\nTITLE: Canceling HTTP Transactions in Electron\nDESCRIPTION: The abort() method cancels an ongoing HTTP transaction. If the request has already emitted the close event, the abort operation will have no effect. Otherwise, it will emit abort and close events. If there's an ongoing response object, it will emit the aborted event.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.abort()\n```\n\n----------------------------------------\n\nTITLE: Using webRequest.onErrorOccurred Method in Electron\nDESCRIPTION: This method registers a listener that will be called when an error occurs during a web request. The listener receives a details object containing information about the failed request, including the error description, resource type, and related web contents.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-request.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwebRequest.onErrorOccurred([filter, ]listener)\n```\n\n----------------------------------------\n\nTITLE: Adding Recent Documents Menu to macOS Application\nDESCRIPTION: This JSON snippet shows the menu template structure for adding a Recent Documents menu to a macOS application. It includes options for accessing recent documents and clearing the recent documents list.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/recent-documents.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"submenu\":[\n    {\n      \"label\":\"Open Recent\",\n      \"role\":\"recentdocuments\",\n      \"submenu\":[\n        {\n          \"label\":\"Clear Recent\",\n          \"role\":\"clearrecentdocuments\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: WebContents PrintToPDF: Arguments Changed\nDESCRIPTION: This snippet showcases the changes made to the arguments of `webContents.printToPDF()` to conform to the Chrome DevTools Protocol. It highlights the removed and added arguments, providing an example of how to use the updated API.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// Main process\nconst { webContents } = require('electron')\n\nwebContents.printToPDF({\n  landscape: true,\n  displayHeaderFooter: true,\n  printBackground: true,\n  scale: 2,\n  pageSize: 'Ledger',\n  margins: {\n    top: 2,\n    bottom: 2,\n    left: 2,\n    right: 2\n  },\n  pageRanges: '1-5, 8, 11-13',\n  headerTemplate: '<h1>Title</h1>',\n  footerTemplate: '<div><span class=\"pageNumber\"></span></div>',\n  preferCSSPageSize: true\n}).then(data => {\n  fs.writeFile(pdfPath, data, (error) => {\n    if (error) throw error\n    console.log(`Wrote PDF successfully to ${pdfPath}`)\n  })\n}).catch(error => {\n  console.log(`Failed to write PDF to ${pdfPath}: `, error)\n})\n```\n\n----------------------------------------\n\nTITLE: Show All Tabs - Electron JavaScript\nDESCRIPTION: Displays or hides the tab overview in a window with native tab support on macOS. This function provides an overview of all open tabs.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nwin.showAllTabs()\n```\n\n----------------------------------------\n\nTITLE: Running Basic Clang-Tidy Check\nDESCRIPTION: Command to run clang-tidy analysis on all C++ files in the Electron project. Requires specifying the build output directory to access compilation information.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/clang-tidy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint:clang-tidy --out-dir ../out/Testing\n```\n\n----------------------------------------\n\nTITLE: Complete Playwright Test for Electron Applications\nDESCRIPTION: A complete test example combining main process evaluation and window interaction with assertions. This shows a practical test that verifies if the app is in development mode and captures a screenshot.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test, expect, _electron: electron } = require('@playwright/test')\n\ntest('example test', async () => {\n  const electronApp = await electron.launch({ args: ['.'] })\n  const isPackaged = await electronApp.evaluate(async ({ app }) => {\n    // This runs in Electron's main process, parameter here is always\n    // the result of the require('electron') in the main app script.\n    return app.isPackaged\n  })\n\n  expect(isPackaged).toBe(false)\n\n  // Wait for the first BrowserWindow to open\n  // and return its Page object\n  const window = await electronApp.firstWindow()\n  await window.screenshot({ path: 'intro.png' })\n\n  // close app\n  await electronApp.close()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Clang-Tidy Checks\nDESCRIPTION: Example of using the --checks flag to customize which clang-tidy checks are performed. Shows how to disable all default checks and enable only specific categories.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/clang-tidy.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n--checks=-*,performance*\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous Messages to Service Worker in Electron\nDESCRIPTION: This method sends an asynchronous message to the service worker process. It takes a channel name and optional arguments, which are serialized using the Structured Clone Algorithm.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/service-worker-main.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nserviceWorker.send(channel, ...args)\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceConfig for Chrome DevTools-like Recording in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a TraceConfig object that approximately matches the tracing configuration used by Chrome DevTools. It sets the recording mode and specifies included and excluded tracing categories.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/trace-config.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  recording_mode: 'record-until-full',\n  included_categories: [\n    'devtools.timeline',\n    'disabled-by-default-devtools.timeline',\n    'disabled-by-default-devtools.timeline.frame',\n    'disabled-by-default-devtools.timeline.stack',\n    'v8.execute',\n    'blink.console',\n    'blink.user_timing',\n    'latencyInfo',\n    'disabled-by-default-v8.cpu_profiler',\n    'disabled-by-default-v8.cpu_profiler.hires'\n  ],\n  excluded_categories: ['*']\n}\n```\n\n----------------------------------------\n\nTITLE: Get Accent Color JavaScript\nDESCRIPTION: This snippet retrieves the system's accent color in RGBA hexadecimal format using `systemPreferences.getAccentColor()` and then extracts the red, green, blue, and alpha components. This API is available on macOS 10.14 Mojave or newer.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst color = systemPreferences.getAccentColor() // \\\"aabbccdd\\\"\nconst red = color.substr(0, 2) // \\\"aa\\\"\nconst green = color.substr(2, 2) // \\\"bb\\\"\nconst blue = color.substr(4, 2) // \\\"cc\\\"\nconst alpha = color.substr(6, 2) // \\\"dd\\\"\n```\n\n----------------------------------------\n\nTITLE: Setting Sheet Offset Example in Electron\nDESCRIPTION: Demonstrates how to adjust the attachment point for sheets on macOS by setting an offset based on a toolbar's height.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\nconst toolbarRect = document.getElementById('toolbar').getBoundingClientRect()\nwin.setSheetOffset(toolbarRect.height)\n```\n\n----------------------------------------\n\nTITLE: Rebuilding for Custom Electron Build\nDESCRIPTION: Command to rebuild native modules against a custom build of Electron using local Node headers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm rebuild --nodedir=/path/to/src/out/Default/gen/node_headers\n```\n\n----------------------------------------\n\nTITLE: Running WebdriverIO Tests for Electron\nDESCRIPTION: Command to execute WebdriverIO tests against an Electron application. WebdriverIO handles launching and shutting down the application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ npx wdio run wdio.conf.js\n```\n\n----------------------------------------\n\nTITLE: Replacing webContents.getPrinters with getPrintersAsync (JavaScript)\nDESCRIPTION: The `webContents.getPrinters` method has been deprecated. Use `webContents.getPrintersAsync` instead. This snippet shows the synchronous deprecated method and its asynchronous replacement using Promises.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst w = new BrowserWindow({ show: false })\n\n// Deprecated\nconsole.log(w.webContents.getPrinters())\n// Replace with\nw.webContents.getPrintersAsync().then((printers) => {\n  console.log(printers)\n})\n```\n\n----------------------------------------\n\nTITLE: IPC Communication in Renderer Process\nDESCRIPTION: Shows how to use the exposed ping function to communicate with the main process from the renderer.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst func = async () => {\n  const response = await window.versions.ping()\n  console.log(response) // prints out 'pong'\n}\n\nfunc()\n```\n\n----------------------------------------\n\nTITLE: Managing Window Creation on macOS Activation\nDESCRIPTION: Implementation of macOS-specific window management that creates a new window when the app is activated with no windows open. Handles the activate event within the app.whenReady() callback.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing WebContents navigation APIs\nDESCRIPTION: This example demonstrates the deprecation of direct navigation-related APIs on `WebContents` and their replacement with the `navigationHistory` property.  It showcases how to use the new `navigationHistory` API for common navigation tasks such as clearing history, going back/forward, and navigating to a specific index.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nwin.webContents.clearHistory()\nwin.webContents.canGoBack()\nwin.webContents.goBack()\nwin.webContents.canGoForward()\nwin.webContents.goForward()\nwin.webContents.goToIndex(index)\nwin.webContents.canGoToOffset()\nwin.webContents.goToOffset(index)\n\n// Replace with\nwin.webContents.navigationHistory.clear()\nwin.webContents.navigationHistory.canGoBack()\nwin.webContents.navigationHistory.goBack()\nwin.webContents.navigationHistory.canGoForward()\nwin.webContents.navigationHistory.goForward()\nwin.webContents.navigationHistory.canGoToOffset()\nwin.webContents.navigationHistory.goToOffset(index)\n```\n\n----------------------------------------\n\nTITLE: Replacing BrowserWindow.setTrafficLightPosition with setWindowButtonPosition (JavaScript)\nDESCRIPTION: `BrowserWindow.setTrafficLightPosition(position)` has been deprecated. Use `BrowserWindow.setWindowButtonPosition(position)` instead, which accepts `null` instead of `{ x: 0, y: 0 }` to reset the position to system default. This code snippet details the required changes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated in Electron 25\nwin.setTrafficLightPosition({ x: 10, y: 10 })\nwin.setTrafficLightPosition({ x: 0, y: 0 })\n\n// Replace with\nwin.setWindowButtonPosition({ x: 10, y: 10 })\nwin.setWindowButtonPosition(null)\n```\n\n----------------------------------------\n\nTITLE: PowerMonitor getSystemIdleTime Method\nDESCRIPTION: Method that calculates and returns the system idle time in seconds as an integer value.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npowerMonitor.getSystemIdleTime()\n```\n\n----------------------------------------\n\nTITLE: Disabling USB Blocklist in Electron\nDESCRIPTION: Code snippet showing how to disable the default USB device blocklist in Electron by setting the 'disable-usb-blocklist' command line flag.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/devices.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.commandLine.appendSwitch('disable-usb-blocklist')\n```\n\n----------------------------------------\n\nTITLE: Configuring Combined Symbol Path with Microsoft and Electron Servers\nDESCRIPTION: Configures Windbg symbol path to use both Microsoft's symbol server and Electron's symbol server with local caching.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-with-symbol-server.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSRV*c:\\code\\symbols\\*https://msdl.microsoft.com/download/symbols;SRV*c:\\code\\symbols\\*https://symbols.electronjs.org\n```\n\n----------------------------------------\n\nTITLE: Replacing systemPreferences.accessibilityDisplayShouldReduceTransparency\nDESCRIPTION: This example demonstrates the deprecation of `systemPreferences.accessibilityDisplayShouldReduceTransparency` and its replacement with `nativeTheme.prefersReducedTransparency`. This provides a cross-platform way to check for reduced transparency preferences.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nconst shouldReduceTransparency = systemPreferences.accessibilityDisplayShouldReduceTransparency\n\n// Replace with:\nconst prefersReducedTransparency = nativeTheme.prefersReducedTransparency\n```\n\n----------------------------------------\n\nTITLE: Checking Window Focusability in Electron for macOS and Windows\nDESCRIPTION: Returns a boolean indicating whether the window can be focused by the user.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nwin.isFocusable()\n```\n\n----------------------------------------\n\nTITLE: Reading Binary Data from Clipboard in Electron\nDESCRIPTION: Shows how to read binary data from the clipboard as a Buffer using the experimental clipboard.readBuffer() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nconst buffer = Buffer.from('this is binary', 'utf8')\nclipboard.writeBuffer('public/utf8-plain-text', buffer)\n\nconst ret = clipboard.readBuffer('public/utf8-plain-text')\n\nconsole.log(buffer.equals(ret))\n// true\n```\n\n----------------------------------------\n\nTITLE: Printing WebContents - JavaScript\nDESCRIPTION: This snippet demonstrates how to print the contents of a BrowserWindow using `webContents.print` with specified options. The `silent` option is set to true, the `deviceName` is specified, and a page range is defined.  A callback function handles the success or failure of the print operation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst win = new BrowserWindow()\nconst options = {\n  silent: true,\n  deviceName: 'My-Printer',\n  pageRanges: [{\n    from: 0,\n    to: 1\n  }]\n}\nwin.webContents.print(options, (success, errorType) => {\n  if (!success) console.log(errorType)\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Electron Modules\nDESCRIPTION: Code snippet showing how to import the app and BrowserWindow modules from Electron using CommonJS syntax. These modules are essential for controlling the application lifecycle and creating windows.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\n```\n\n----------------------------------------\n\nTITLE: Modify CFBundleIdentifier for IAP Testing XML\nDESCRIPTION: This XML snippet shows how to modify the CFBundleIdentifier in the Electron application's Info.plist file. This is required for testing In-App Purchases (IAP) in development. Replace `com.github.electron` with the bundle identifier of your application created in iTunes Connect.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/in-app-purchases.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleIdentifier</key>\n<string>com.example.app</string>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu <20.04\nDESCRIPTION: Command to install required development libraries and tools on Ubuntu versions before 20.04.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install build-essential clang libdbus-1-dev libgtk-3-dev \\\n                       libnotify-dev libgnome-keyring-dev \\\n                       libasound2-dev libcap-dev libcups2-dev libxtst-dev \\\n                       libxss1 libnss3-dev gcc-multilib g++-multilib curl \\\n                       gperf bison python-dbusmock openjdk-8-jre\n```\n\n----------------------------------------\n\nTITLE: Programmatic Usage of electron-installer-snap\nDESCRIPTION: JavaScript example showing how to use electron-installer-snap programmatically in a build pipeline.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst snap = require('electron-installer-snap')\n\nsnap(options)\n  .then(snapPath => console.log(`Created snap at ${snapPath}!`))\n```\n\n----------------------------------------\n\nTITLE: Checking Window Snap Status in Electron on Windows\nDESCRIPTION: Determines whether a window is arranged via Windows Snap feature. This method checks if the window has been snapped to screen edges or via the maximize hover buttons.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nwin.isSnapped()\n```\n\n----------------------------------------\n\nTITLE: Replacing app.getAppMemoryInfo with app.getAppMetrics in Electron\nDESCRIPTION: This snippet illustrates the replacement of `app.getAppMemoryInfo()` with `app.getAppMetrics()` in Electron. The older function has been replaced with a function that provides more comprehensive application metrics.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_90\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\napp.getAppMemoryInfo()\n// Replace with\napp.getAppMetrics()\n\n// Deprecated\nconst metrics = app.getAppMetrics()\nconst { memory } = metrics[0] // Deprecated property\n```\n\n----------------------------------------\n\nTITLE: Log Frame ID in Main Process on IPC Message\nDESCRIPTION: This snippet shows how to access the frame ID from an incoming IPC message in the main process. The `event.frameId` property of the event object provides the ID of the frame that sent the message. This allows the main process to identify the origin of the message.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In the main process\nipcMain.on('ping', (event) => {\n  console.info('Message came from frameId:', event.frameId)\n})\n```\n\n----------------------------------------\n\nTITLE: Profiling Module Loading Performance with Node.js\nDESCRIPTION: Command to generate CPU and heap profiles when loading a module, which can be analyzed using Chrome Developer Tools. The example demonstrates profiling the 'request' module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/performance.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode --cpu-prof --heap-prof -e \"require('request')\"\n```\n\n----------------------------------------\n\nTITLE: Handling Invokable IPC Messages with ipcMainServiceWorker.handle()\nDESCRIPTION: Registers a handler for invokable IPC messages on a specific channel. The handler can return a value or a Promise that resolves to a value.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nipcMainServiceWorker.handle(channel, listener)\n```\n\n----------------------------------------\n\nTITLE: Using system-ui Keyword for OS-Specific Corner Smoothing in Electron\nDESCRIPTION: CSS example showing how to use the system-ui keyword with -electron-corner-smoothing to match the operating system's design language (60% on macOS, 0% on Windows/Linux).\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/corner-smoothing-css.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.box {\n  width: 128px;\n  height: 128px;\n  background-color: cornflowerblue;\n  border-radius: 24px;\n  -electron-corner-smoothing: system-ui;  /* Match the system UI design. */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Package for Native Addon\nDESCRIPTION: Shell commands to create a new directory, initialize a Node.js package with npm, and install the required dependencies (node-addon-api and bindings) for building a native addon.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-native-addon\ncd my-native-addon\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Setting Window Vibrancy Effect in Electron for macOS\nDESCRIPTION: Adds a vibrancy effect to the browser window on macOS. Supports various vibrancy types like titlebar, menu, sidebar, etc. Can be animated with a specified duration.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setVibrancy(type[, options])\n```\n\n----------------------------------------\n\nTITLE: V8 Optimization Tracing in Electron\nDESCRIPTION: Example showing how to use JavaScript flags to enable tracing of V8 optimization and deoptimization events for debugging performance issues.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ electron --js-flags=\"--trace-opt --trace-deopt\" your-app\n```\n\n----------------------------------------\n\nTITLE: Getting Locale Country Code in Electron\nDESCRIPTION: The app.getLocaleCountryCode method returns the user's operating system locale as a two-letter ISO 3166 country code, taken from native OS APIs.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\napp.getLocaleCountryCode()\n```\n\n----------------------------------------\n\nTITLE: Creating a Tray Icon with High DPI Support (Main Process)\nDESCRIPTION: This code demonstrates how to create a Tray icon in Electron, specifying an image path with support for different DPI densities.  The Electron framework will automatically select the appropriate image based on the screen's DPI. It depends on the existence of `icon.png`, `icon@2x.png`, and `icon@3x.png` in the specified directory.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/native-image.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Tray } = require('electron')\nconst appTray = new Tray('/Users/somebody/images/icon.png')\n```\n\n----------------------------------------\n\nTITLE: Terminating Utility Process - JavaScript\nDESCRIPTION: The `child.kill` method is designed to terminate a spawned child process gracefully. It uses SIGTERM on POSIX systems and returns a boolean indicating the success of the termination. This is crucial for resource cleanup and ensures the process exits correctly.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/utility-process.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"const success = child.kill() // Terminates the child process\"\n```\n\n----------------------------------------\n\nTITLE: Visibility Across Workspaces - Electron JavaScript\nDESCRIPTION: Sets the window's visibility across all workspaces, with options for fullscreen behavior and event transformation handling. The function is applicable to macOS and Linux.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setVisibleOnAllWorkspaces(visible[, options])\n```\n\n----------------------------------------\n\nTITLE: Frame Navigation Event Handling in Electron\nDESCRIPTION: Example showing how to listen for frame navigation events and execute JavaScript in specific frames. Uses webFrameMain.fromId() to locate frames and modify their content.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame-main.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow, webFrameMain } = require('electron')\n\nconst win = new BrowserWindow({ width: 800, height: 1500 })\nwin.loadURL('https://twitter.com')\n\nwin.webContents.on(\n  'did-frame-navigate',\n  (event, url, httpResponseCode, httpStatusText, isMainFrame, frameProcessId, frameRoutingId) => {\n    const frame = webFrameMain.fromId(frameProcessId, frameRoutingId)\n    if (frame) {\n      const code = 'document.body.innerHTML = document.body.innerHTML.replaceAll(\"heck\", \"h*ck\")'\n      frame.executeJavaScript(code)\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: BrowserWindow Scroll-Touch Events: Deprecated\nDESCRIPTION: This snippet demonstrates the deprecation of `scroll-touch-begin`, `scroll-touch-end`, and `scroll-touch-edge` events on BrowserWindow. It shows how to use the `input-event` event on WebContents to achieve the same functionality.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nwin.on('scroll-touch-begin', scrollTouchBegin)\nwin.on('scroll-touch-edge', scrollTouchEdge)\nwin.on('scroll-touch-end', scrollTouchEnd)\n\n// Replace with\nwin.webContents.on('input-event', (_, event) => {\n  if (event.type === 'gestureScrollBegin') {\n    scrollTouchBegin()\n  } else if (event.type === 'gestureScrollUpdate') {\n    scrollTouchEdge()\n  } else if (event.type === 'gestureScrollEnd') {\n    scrollTouchEnd()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Querying GPU Information in Electron\nDESCRIPTION: Example of basic GPU information response object structure showing device details, machine model and auxiliary attributes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  auxAttributes:\n   {\n     amdSwitchable: true,\n     canSupportThreadedTextureMailbox: false,\n     directComposition: false,\n     directRendering: true,\n     glResetNotificationStrategy: 0,\n     inProcessGpu: true,\n     initializationTime: 0,\n     jpegDecodeAcceleratorSupported: false,\n     optimus: false,\n     passthroughCmdDecoder: false,\n     sandboxed: false,\n     softwareRendering: false,\n     supportsOverlays: false,\n     videoDecodeAcceleratorFlags: 0\n   },\n  gpuDevice:\n   [{ active: true, deviceId: 26657, vendorId: 4098 },\n     { active: false, deviceId: 3366, vendorId: 32902 }],\n  machineModelName: 'MacBookPro',\n  machineModelVersion: '11.5'\n}\n```\n\n----------------------------------------\n\nTITLE: Replace app.runningUnderRosettaTranslation with app.runningUnderARM64Translation in Electron\nDESCRIPTION: This JavaScript snippet demonstrates replacing the deprecated `app.runningUnderRosettaTranslation` property with `app.runningUnderARM64Translation` in Electron. It shows how to check if the application is running under ARM64 translation using the updated API.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed\nconsole.log(app.runningUnderRosettaTranslation)\n// Replace with\nconsole.log(app.runningUnderARM64Translation)\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Electron Renderer Process\nDESCRIPTION: Basic HTML file that will be displayed in the Electron window. It includes Content Security Policy headers and simple content that will be rendered in the application window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->\n    <meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    />\n    <meta\n      http-equiv=\"X-Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    />\n    <title>Hello from Electron renderer!</title>\n  </head>\n  <body>\n    <h1>Hello from Electron renderer!</h1>\n    <p>👋</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Decrypting an Encrypted String in Electron\nDESCRIPTION: This method decrypts a previously encrypted buffer back into a string. It throws an error if decryption fails.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsafeStorage.decryptString(encrypted)\n```\n\n----------------------------------------\n\nTITLE: Migrating session.setPermissionCheckHandler parameter\nDESCRIPTION: Illustrates how to migrate `session.setPermissionCheckHandler` to handle cases where the first parameter, previously always a `webContents`, can now be `null`. It emphasizes using `requestingOrigin`, `embeddingOrigin` and `securityOrigin`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old code\nsession.setPermissionCheckHandler((webContents, permission) => {\n  if (webContents.getURL().startsWith('https://google.com/') && permission === 'notification') {\n    return true\n  }\n  return false\n})\n\n// Replace with\nsession.setPermissionCheckHandler((webContents, permission, requestingOrigin) => {\n  if (new URL(requestingOrigin).hostname === 'google.com' && permission === 'notification') {\n    return true\n  }\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: Invoking IPC Calls from Renderer Process\nDESCRIPTION: This snippet shows how to invoke an IPC call from a renderer process using ipcRenderer.invoke(). The function returns a Promise that resolves with the result from the main process handler.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync () => {\n  const result = await ipcRenderer.invoke('my-invokable-ipc', arg1, arg2)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Replace systemPreferences appLevelAppearance with nativeTheme in Electron\nDESCRIPTION: This JavaScript snippet demonstrates replacing the deprecated `systemPreferences.getAppLevelAppearance`, `systemPreferences.appLevelAppearance`, and `systemPreferences.setAppLevelAppearance` with the `nativeTheme` module properties in Electron. It shows how to get and set the application's theme using the new API.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed\nsystemPreferences.getAppLevelAppearance()\n// Replace with\nnativeTheme.shouldUseDarkColors\n\n// Removed\nsystemPreferences.appLevelAppearance\n// Replace with\nnativeTheme.shouldUseDarkColors\n\n// Removed\nsystemPreferences.setAppLevelAppearance('dark')\n// Replace with\nnativeTheme.themeSource = 'dark'\n```\n\n----------------------------------------\n\nTITLE: Handling Keypress Events within a BrowserWindow using Web APIs\nDESCRIPTION: This snippet demonstrates how to handle keypress events within a BrowserWindow using web APIs. It adds an event listener to the window that listens for the keyup event. The event handler function can then process the key press.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleKeyPress (event) {\n  // You can put code here to handle the keypress.\n  document.getElementById('last-keypress').innerText = event.key\n  console.log(`You pressed ${event.key}`)\n}\n\nwindow.addEventListener('keyup', handleKeyPress, true)\n```\n\n----------------------------------------\n\nTITLE: Replace webContents.getPrinters with getPrintersAsync in Electron\nDESCRIPTION: This JavaScript snippet shows how to replace the synchronous `webContents.getPrinters` method with the asynchronous `webContents.getPrintersAsync` method in Electron. It demonstrates how to retrieve a list of printers using the promise-based `getPrintersAsync` function.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst w = new BrowserWindow({ show: false })\n\n// Removed\nconsole.log(w.webContents.getPrinters())\n// Replace with\nw.webContents.getPrintersAsync().then((printers) => {\n  console.log(printers)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple WebContentsViews in Electron Window\nDESCRIPTION: Demonstrates how to create two WebContentsViews within a BaseWindow, set their bounds, and load different URLs into each view. Shows the basic setup for creating a split-view interface.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents-view.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BaseWindow, WebContentsView } = require('electron')\nconst win = new BaseWindow({ width: 800, height: 400 })\n\nconst view1 = new WebContentsView()\nwin.contentView.addChildView(view1)\nview1.webContents.loadURL('https://electronjs.org')\nview1.setBounds({ x: 0, y: 0, width: 400, height: 400 })\n\nconst view2 = new WebContentsView()\nwin.contentView.addChildView(view2)\nview2.webContents.loadURL('https://github.com/electron/electron')\nview2.setBounds({ x: 400, y: 0, width: 400, height: 400 })\n```\n\n----------------------------------------\n\nTITLE: Selecting Next Tab in Electron for macOS\nDESCRIPTION: Selects the next tab when native tabs are enabled and there are multiple tabs in the window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nwin.selectNextTab()\n```\n\n----------------------------------------\n\nTITLE: Excluding a Window from the Application's Windows Menu in macOS\nDESCRIPTION: Shows how to exclude a specific window from the application's Windows menu on macOS using the excludedFromShownWindowsMenu property.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Menu, BaseWindow } = require('electron')\nconst win = new BaseWindow({ height: 600, width: 600 })\n\nconst template = [\n  {\n    role: 'windowmenu'\n  }\n]\n\nwin.excludedFromShownWindowsMenu = true\n\nconst menu = Menu.buildFromTemplate(template)\nMenu.setApplicationMenu(menu)\n```\n\n----------------------------------------\n\nTITLE: Full Main Process Notification Example\nDESCRIPTION: This example shows a complete Electron application that displays a notification from the main process. It initializes a BrowserWindow and then shows a notification when the app is ready. It also includes standard window management event handlers. The example requires the electron/main module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, Notification } = require('electron/main')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\nconst NOTIFICATION_TITLE = 'Basic Notification'\nconst NOTIFICATION_BODY = 'Notification from the Main process'\n\nfunction showNotification () {\n  new Notification({ title: NOTIFICATION_TITLE, body: NOTIFICATION_BODY }).show()\n}\n\napp.whenReady().then(createWindow).then(showNotification)\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying a ShareMenu as a Context Menu in Electron\nDESCRIPTION: Displays the share menu as a context menu in a BrowserWindow with optional positioning and callback parameters.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/share-menu.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### `shareMenu.popup([options])`\n\n* `options` PopupOptions (optional)\n  * `browserWindow` [BrowserWindow](browser-window.md) (optional) - Default is the focused window.\n  * `x` number (optional) - Default is the current mouse cursor position.\n    Must be declared if `y` is declared.\n  * `y` number (optional) - Default is the current mouse cursor position.\n    Must be declared if `x` is declared.\n  * `positioningItem` number (optional) _macOS_ - The index of the menu item to\n    be positioned under the mouse cursor at the specified coordinates. Default\n    is -1.\n  * `callback` Function (optional) - Called when menu is closed.\n```\n\n----------------------------------------\n\nTITLE: Proxy Bypass List Configuration in Electron\nDESCRIPTION: Example showing how to configure proxy bypass lists programmatically using app.commandLine.appendSwitch. This allows specifying hosts that should bypass the configured proxy server.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\napp.commandLine.appendSwitch('proxy-bypass-list', '<local>;*.google.com;*foo.com;1.2.3.4:5678')\n```\n\n----------------------------------------\n\nTITLE: Deprecated gpu-process-crashed event replacement in Electron\nDESCRIPTION: This JavaScript snippet illustrates the deprecation of the `gpu-process-crashed` event on the `app` module in Electron. It shows how to replace it with the `child-process-gone` event, which provides more detailed information about GPU process termination.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\napp.on('gpu-process-crashed', (event, killed) => { /* ... */ })\n\n// Replace with\napp.on('child-process-gone', (event, details) => { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: Getting BrowserView in Electron (Deprecated)\nDESCRIPTION: Returns the BrowserView attached to a window or null if none is attached. Throws an error if multiple BrowserViews are attached. This method is deprecated and replaced by WebContentsView.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nwin.getBrowserView()\n```\n\n----------------------------------------\n\nTITLE: Notifying JavaScript of New Todos in Objective-C\nDESCRIPTION: This code extends the `addTodo:` method in Objective-C to notify the JavaScript world when a new todo is added. It converts the todo data to JSON format, including converting the date to milliseconds since the epoch, and then calls a JavaScript callback function (g_todoAddedCallback) with the JSON string as an argument.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_10\n\nLANGUAGE: objc\nCODE:\n```\n// Previous code...\n\n// Action method for the Add button\n- (void)addTodo:(id)sender {\n    NSString *text = [_textField stringValue];\n    if ([text length] > 0) {\n        // Previous addTodo() code...\n\n        // Call the callback if it exists\n        if (g_todoAddedCallback) {\n            // Convert the todo to JSON\n            NSError *error;\n            NSData *jsonData = [NSJSONSerialization dataWithJSONObject:@{\n                @\"id\": [uuid UUIDString],\n                @\"text\": text,\n                @\"date\": @((NSTimeInterval)[date timeIntervalSince1970] * 1000)\n            } options:0 error:&error];\n\n            if (!error) {\n                NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n                std::string cppJsonString = [jsonString UTF8String];\n                g_todoAddedCallback(cppJsonString);\n            }\n        }\n    }\n}\n\n// More code to follow later...\n```\n\n----------------------------------------\n\nTITLE: Replacing webFrame.setIsolatedWorld* with webFrame.setIsolatedWorldInfo in Electron\nDESCRIPTION: This snippet illustrates the replacement of multiple `webFrame.setIsolatedWorld*` methods with the single `webFrame.setIsolatedWorldInfo` method. The new method takes an object containing configuration options instead of separate calls for CSP, name, and origin.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_83\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nwebFrame.setIsolatedWorldContentSecurityPolicy(worldId, csp)\nwebFrame.setIsolatedWorldHumanReadableName(worldId, name)\nwebFrame.setIsolatedWorldSecurityOrigin(worldId, securityOrigin)\n// Replace with\nwebFrame.setIsolatedWorldInfo(\n  worldId,\n  {\n    securityOrigin: 'some_origin',\n    name: 'human_readable_name',\n    csp: 'content_security_policy'\n  })\n```\n\n----------------------------------------\n\nTITLE: Adding Recent Documents in Electron (macOS and Windows)\nDESCRIPTION: The app.addRecentDocument method adds a file path to the operating system's recent documents list, accessible from the Windows task bar or macOS dock menu.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\napp.addRecentDocument(path)\n```\n\n----------------------------------------\n\nTITLE: Synchronous protocol.registerFileProtocol API\nDESCRIPTION: The `protocol.registerFileProtocol` API is now synchronous and the optional callback is no longer needed.  This snippet compares the deprecated asynchronous usage with the new synchronous usage of the API.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_60\n\nLANGUAGE: js\nCODE:\n```\n// Deprecated\nprotocol.registerFileProtocol(scheme, handler, () => { /* ... */ })\n// Replace with\nprotocol.registerFileProtocol(scheme, handler)\n```\n\n----------------------------------------\n\nTITLE: Menu Structure Output for Basic Template\nDESCRIPTION: Shows the resulting menu structure from the basic template with four linear menu items.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n- 1\n- 2\n- 3\n- 4\n```\n\n----------------------------------------\n\nTITLE: Setting China CDN mirror for Electron downloads\nDESCRIPTION: Shell command to set the ELECTRON_MIRROR environment variable to use China's CDN mirror for downloading Electron binaries.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nELECTRON_MIRROR=\"https://npmmirror.com/mirrors/electron/\"\n```\n\n----------------------------------------\n\nTITLE: Replace crashed event with render-process-gone event in Electron WebContents\nDESCRIPTION: This JavaScript snippet demonstrates the replacement of the deprecated `crashed` event on `WebContents` and `<webview>` with the new `render-process-gone` event in Electron. It includes examples of how to listen for the `render-process-gone` event on both `WebContents` and `<webview>` to handle renderer process termination.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed\nwin.webContents.on('crashed', (event, killed) => { /* ... */ })\nwebview.addEventListener('crashed', (event) => { /* ... */ })\n\n// Replace with\nwin.webContents.on('render-process-gone', (event, details) => { /* ... */ })\nwebview.addEventListener('render-process-gone', (event) => { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: Resetting GUI Controls in Win32 C++\nDESCRIPTION: This function resets the text input and date picker controls in the Todo List application. It clears the text input and sets the date picker to the current date.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n  void ResetControls(HWND hwnd)\n  {\n    HWND hEdit = GetDlgItem(hwnd, 1);\n    HWND hDatePicker = GetDlgItem(hwnd, 4);\n    HWND hAddButton = GetDlgItem(hwnd, 2);\n\n    // Clear text\n    SetWindowTextW(hEdit, L\"\");\n\n    // Reset date to current\n    SYSTEMTIME currentTime;\n    GetLocalTime(&currentTime);\n    DateTime_SetSystemtime(hDatePicker, GDT_VALID, &currentTime);\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Long Paths\nDESCRIPTION: Git configuration command to enable support for long pathnames on Windows systems.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-windows.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$ git config --system core.longpaths true\n```\n\n----------------------------------------\n\nTITLE: Logging Network Activity in Electron\nDESCRIPTION: Demonstrates how to use the session.netLog API to start and stop logging network activity in an Electron app. It shows capturing net logs to a file and retrieving the log file path.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, session } = require('electron')\n\napp.whenReady().then(async () => {\n  const netLog = session.fromPartition('some-partition').netLog\n  netLog.startLogging('/path/to/net-log')\n  // After some network events\n  const path = await netLog.stopLogging()\n  console.log('Net-logs written to', path)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining BluetoothDevice Object Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the BluetoothDevice object in Electron. It specifies two string properties: deviceName and deviceId, which are used to identify and represent Bluetooth devices in the application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/bluetooth-device.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# BluetoothDevice Object\n\n* `deviceName` string\n* `deviceId` string\n```\n\n----------------------------------------\n\nTITLE: Getting Command Line Switch Value in Electron (JavaScript)\nDESCRIPTION: This snippet demonstrates how to obtain the value of a command line switch using the CommandLine class in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.commandLine.appendSwitch('remote-debugging-port', '8315')\nconst portValue = app.commandLine.getSwitchValue('remote-debugging-port')\nconsole.log(portValue) // '8315'\n```\n\n----------------------------------------\n\nTITLE: Checking Auto-Hide Menu Bar Status - Electron JavaScript\nDESCRIPTION: Returns a boolean indicating whether the menu bar is set to auto-hide in Windows and Linux.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nwin.isMenuBarAutoHide()\n```\n\n----------------------------------------\n\nTITLE: Composing custom download URL in @electron/get\nDESCRIPTION: JavaScript code showing how @electron/get composes the URL for downloading Electron binaries. This demonstrates how environment variables like ELECTRON_MIRROR, ELECTRON_CUSTOM_DIR, and ELECTRON_CUSTOM_FILENAME affect the download URL.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nurl = ELECTRON_MIRROR + ELECTRON_CUSTOM_DIR + '/' + ELECTRON_CUSTOM_FILENAME\n```\n\n----------------------------------------\n\nTITLE: Adding New Patches in Electron\nDESCRIPTION: Bash commands demonstrating how to create and export a new patch to the Electron patch system. Creates a commit and exports it as a patch file.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd src/third_party/electron_node\n$ vim some/code/file.cc\n$ git commit\n$ ../../electron/script/git-export-patches -o ../../electron/patches/node\n```\n\n----------------------------------------\n\nTITLE: Documenting contextBridge API History with Markdown\nDESCRIPTION: Example of how to document changes to the contextBridge API with YAML history block in Markdown, showing a breaking change where ipcRenderer can no longer be sent over the contextBridge.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n# contextBridge\n\n<!--\n```YAML history\nchanges:\n  - pr-url: https://github.com/electron/electron/pull/40330\n    description: \"`ipcRenderer` can no longer be sent over the `contextBridge`\"\n    breaking-changes-header: behavior-changed-ipcrenderer-can-no-longer-be-sent-over-the-contextbridge\n```\n-->\n\n> Create a safe, bi-directional, synchronous bridge across isolated contexts\n```\n\n----------------------------------------\n\nTITLE: NativeImage toPng/toJpeg Method Update\nDESCRIPTION: This snippet shows the deprecated nativeImage.toPng() and nativeImage.toJpeg() methods replaced by nativeImage.toPNG() and nativeImage.toJPEG() respectively. The capitalization of the file extensions in method names was updated to uppercase.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed\nnativeImage.toPng()\n// Replaced with\nnativeImage.toPNG()\n\n// Removed\nnativeImage.toJpeg()\n// Replaced with\nnativeImage.toJPEG()\n```\n\n----------------------------------------\n\nTITLE: Handling additionalFeatures in did-create-window event\nDESCRIPTION: Demonstrates how to handle the removal of the `additionalFeatures` property in the `new-window` and `did-create-window` events by accessing window features through the `options` object.  Illustrates old and new methods.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed in Electron 14\n// Triggered by window.open('...', '', 'my-key')\nwebContents.on('did-create-window', (window, details) => {\n  if (details.additionalFeatures.includes('my-key')) {\n    // ...\n  }\n})\n\n// Replace with\nwebContents.on('did-create-window', (window, details) => {\n  if (details.options['my-key']) {\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Full Renderer Process Notification Example\nDESCRIPTION: This example shows a complete snippet that displays a notification from the renderer process using the web Notifications API. It creates a new Notification object and assigns an onclick handler to update the text content of an HTML element with id 'output' when the notification is clicked. This code requires a corresponding HTML element with id 'output'.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst NOTIFICATION_TITLE = 'Title'\nconst NOTIFICATION_BODY = 'Notification from the Renderer process. Click to log to console.'\nconst CLICK_MESSAGE = 'Notification clicked!'\n\nnew window.Notification(NOTIFICATION_TITLE, { body: NOTIFICATION_BODY })\n  .onclick = () => { document.getElementById('output').innerText = CLICK_MESSAGE }\n```\n\n----------------------------------------\n\nTITLE: Appending Command Line Argument in Electron (JavaScript)\nDESCRIPTION: This snippet demonstrates how to append a command line argument to Chromium's command line using the CommandLine class in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.commandLine.appendArgument('--enable-experimental-web-platform-features')\n```\n\n----------------------------------------\n\nTITLE: Replacing powerMonitor.querySystemIdleState with powerMonitor.getSystemIdleState in Electron\nDESCRIPTION: This snippet demonstrates the replacement of the deprecated `powerMonitor.querySystemIdleState` with `powerMonitor.getSystemIdleState`. The `querySystemIdleState` function with a callback has been replaced with a synchronous API using `getSystemIdleState`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_78\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\npowerMonitor.querySystemIdleState(threshold, callback)\n// Replace with synchronous API\nconst idleState = powerMonitor.getSystemIdleState(threshold)\n```\n\n----------------------------------------\n\nTITLE: Defining IpcMainEvent Object Properties in Markdown\nDESCRIPTION: This snippet lists the properties of the IpcMainEvent object, including their types and descriptions. It covers important attributes like processId, frameId, sender, and methods like reply for handling IPC communication.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/ipc-main-event.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# IpcMainEvent Object extends `Event`\n\n* `type` String - Possible values include `frame`\n* `processId` Integer - The internal ID of the renderer process that sent this message\n* `frameId` Integer - The ID of the renderer frame that sent this message\n* `returnValue` any - Set this to the value to be returned in a synchronous message\n* `sender` [WebContents](../web-contents.md) - Returns the `webContents` that sent the message\n* `senderFrame` [WebFrameMain](../web-frame-main.md) | null _Readonly_ - The frame that sent this message. May be `null` if accessed after the frame has either navigated or been destroyed.\n* `ports` [MessagePortMain](../message-port-main.md)[] - A list of MessagePorts that were transferred with this message\n* `reply` Function - A function that will send an IPC message to the renderer frame that sent the original message that you are currently handling.  You should use this method to \"reply\" to the sent message in order to guarantee the reply will go to the correct process and frame.\n  * `channel` string\n  * `...args` any[]\n```\n\n----------------------------------------\n\nTITLE: Enabling Spellchecker in Electron BrowserWindow\nDESCRIPTION: Shows how to enable the spellchecker in Electron 8 through webPreferences configuration when creating a new BrowserWindow instance.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myWindow = new BrowserWindow({\n  webPreferences: {\n    spellcheck: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: WebContents setZoomLevelLimits Update\nDESCRIPTION: This snippet shows the removed webContents.setZoomLevelLimits(1, 2) replaced with webContents.setVisualZoomLevelLimits(1, 2). The method name was updated to include 'Visual' to clarify its purpose.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed\nwebContents.setZoomLevelLimits(1, 2)\n// Replaced with\nwebContents.setVisualZoomLevelLimits(1, 2)\n```\n\n----------------------------------------\n\nTITLE: Setting Application Details - Electron JavaScript\nDESCRIPTION: Sets the application's details for the window's taskbar button. Required 'options' include appId, appIconPath, appIconIndex, relaunchCommand, and relaunchDisplayName, with specific requirements for the pairing of relaunchCommand and relaunchDisplayName. This function is designed for use on Windows.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setAppDetails(options)\n```\n\n----------------------------------------\n\nTITLE: Creating a Window that Fills the Screen in Electron\nDESCRIPTION: This example demonstrates how to create an Electron window that fills the entire available work area of the primary display. It retrieves the primary display's workAreaSize and creates a window with those dimensions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/screen.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Retrieve information about screen size, displays, cursor position, etc.\n//\n// For more info, see:\n// https://www.electronjs.org/docs/latest/api/screen\n\nconst { app, BrowserWindow, screen } = require('electron/main')\n\nlet mainWindow = null\n\napp.whenReady().then(() => {\n  // Create a window that fills the screen's available work area.\n  const primaryDisplay = screen.getPrimaryDisplay()\n  const { width, height } = primaryDisplay.workAreaSize\n\n  mainWindow = new BrowserWindow({ width, height })\n  mainWindow.loadURL('https://electronjs.org')\n})\n```\n\n----------------------------------------\n\nTITLE: Launching Debug Build of Electron Application\nDESCRIPTION: Command to start a debugging session by executing a debug build of Electron with an application parameter using PowerShell or CMD.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-windows.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$ ./out/Testing/electron.exe ~/my-electron-app/\n```\n\n----------------------------------------\n\nTITLE: Editing Commands in Webview\nDESCRIPTION: Methods to execute standard editing commands in the webview's page, such as undo, redo, cut, copy, paste, and selection operations.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.undo()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.redo()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.cut()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.copy()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.centerSelection()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.paste()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.pasteAndMatchStyle()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.delete()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.selectAll()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.unselect()\n```\n\n----------------------------------------\n\nTITLE: Capturing Frame Updates with the Paint Event\nDESCRIPTION: This snippet shows how to listen for the 'paint' event on a WebContents object to capture frame updates. It creates a new BrowserWindow with offscreen rendering enabled, attaches a listener to the 'paint' event, and loads a URL. The event provides the dirty rectangle and the image data of the frame.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ webPreferences: { offscreen: true } })\nwin.webContents.on('paint', (event, dirty, image) => {\n  // updateBitmap(dirty, image.toBitmap())\n})\nwin.loadURL('https://github.com')\n```\n\n----------------------------------------\n\nTITLE: Window Procedure for Todo List Application in Win32 C++\nDESCRIPTION: This function handles Windows messages for the Todo List application. It processes commands like adding a new todo item, updates the UI, and notifies JavaScript callbacks when changes occur.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n  LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\n  {\n    switch (uMsg)\n    {\n      case WM_COMMAND:\n      {\n        HWND hListBox = GetDlgItem(hwnd, 3);\n        int cmd = LOWORD(wParam);\n\n        switch (cmd)\n        {\n          case 2: // Add button\n          {\n            wchar_t buffer[256];\n            GetDlgItemTextW(hwnd, 1, buffer, 256);\n\n            if (wcslen(buffer) > 0)\n            {\n              SYSTEMTIME st;\n              HWND hDatePicker = GetDlgItem(hwnd, 4);\n              DateTime_GetSystemtime(hDatePicker, &st);\n\n              TodoItem todo;\n              CoCreateGuid(&todo.id);\n              todo.text = buffer;\n              todo.date = SystemTimeToMillis(st);\n\n              g_todos.push_back(todo);\n\n              std::wstring displayText = FormatTodoDisplay(buffer, st);\n              SendMessageW(hListBox, LB_ADDSTRING, 0, (LPARAM)displayText.c_str());\n\n              ResetControls(hwnd);\n              NotifyCallback(g_todoAddedCallback, todo.toJson());\n            }\n            break;\n          }\n        }\n        break;\n      }\n\n      case WM_DESTROY:\n      {\n        PostQuitMessage(0);\n        return 0;\n      }\n    }\n\n    return DefWindowProcW(hwnd, uMsg, wParam, lParam);\n  }\n```\n\n----------------------------------------\n\nTITLE: Getting Update Feed URL in Electron\nDESCRIPTION: Returns the current update feed URL that was previously set with setFeedURL.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `autoUpdater.getFeedURL()`\n\nReturns `string` - The current update feed URL.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Spell Check Provider\nDESCRIPTION: Implementation example of a custom spell check provider using node-spellchecker library to check spelling asynchronously.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { webFrame } = require('electron')\nconst spellChecker = require('spellchecker')\nwebFrame.setSpellCheckProvider('en-US', {\n  spellCheck (words, callback) {\n    setTimeout(() => {\n      const misspelled = words.filter(x => spellchecker.isMisspelled(x))\n      callback(misspelled)\n    }, 0)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Title Bar Overlay in Electron for Windows and Linux\nDESCRIPTION: Updates the style of the title bar overlay for a window with Window Controls Overlay already enabled. Allows customization of color, symbol color, and height. On Linux, the symbolColor is automatically calculated for accessibility if not set.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setTitleBarOverlay(options)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Blob Data in Electron Session\nDESCRIPTION: Retrieves blob data for a given identifier. It returns a Promise that resolves with the blob data as a Buffer.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nses.getBlobData(identifier)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Connection Status Indicator\nDESCRIPTION: This HTML file creates the basic structure for the Electron application, including a title, a meta tag for Content Security Policy, and a heading to display the connection status. The status is updated by the renderer.js script. The `Content-Security-Policy` allows inline scripts for simplicity of this example.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World!</title>\n    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline';\" />\n</head>\n<body>\n    <h1>Connection status: <strong id='status'></strong></h1>\n    <script src=\"renderer.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing electron.screen via remote in Electron renderer process\nDESCRIPTION: This snippet illustrates the change in accessing `electron.screen` in the renderer process.  Previously, it was accessed directly, but now it should be accessed through the `remote` module. This is part of the effort to isolate the renderer process from direct access to Node.js APIs.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_76\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nrequire('electron').screen\n// Replace with\nrequire('electron').remote.screen\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessibility via Objective-C in Electron\nDESCRIPTION: This Objective-C code snippet demonstrates how to enable or disable accessibility features in an Electron application on macOS by setting the `AXManualAccessibility` attribute. It takes a boolean `enable` and an `NSRunningApplication` object as input and uses the Accessibility API to set the attribute.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/accessibility.md#_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\nCFStringRef kAXManualAccessibility = CFSTR(\"AXManualAccessibility\");\n\n+ (void)enableAccessibility:(BOOL)enable inElectronApplication:(NSRunningApplication *)app\n{\n    AXUIElementRef appRef = AXUIElementCreateApplication(app.processIdentifier);\n    if (appRef == nil)\n        return;\n\n    CFBooleanRef value = enable ? kCFBooleanTrue : kCFBooleanFalse;\n    AXUIElementSetAttributeValue(appRef, kAXManualAccessibility, value);\n    CFRelease(appRef);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Child Process PID - JavaScript\nDESCRIPTION: The `child.pid` property provides access to the process identifier of the child process. It is `undefined` until the process is successfully spawned, useful for monitoring process state and ensuring the process is active.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/utility-process.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"const child = utilityProcess.fork(path.join(__dirname, 'test.js'))\\nchild.on('spawn', () => {\\n  console.log(child.pid) // Integer\\n})\"\n```\n\n----------------------------------------\n\nTITLE: Checking Window Snap Status - Electron JavaScript\nDESCRIPTION: Returns a boolean indicating if the window is currently arranged via the Snap feature on Windows. This provides insights into how the window is currently displayed.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nwin.isSnapped()\n```\n\n----------------------------------------\n\nTITLE: Complete API History with added, changed, deprecated in Markdown with YAML\nDESCRIPTION: This markdown snippet shows a comprehensive API history block, including `added`, `changes`, and `deprecated` entries, providing a complete timeline of the API's evolution. It links to the associated pull requests and breaking changes headers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`````markdown\n#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_\n\n<!--\n```YAML history\nadded:\n  - pr-url: https://github.com/electron/electron/pull/22533\nchanges:\n  - pr-url: https://github.com/electron/electron/pull/26789\n    description: \"Made `trafficLightPosition` option work for `customButtonOnHover` window.\"\n    breaking-changes-header: behavior-changed-draggable-regions-on-macos\ndeprecated:\n  - pr-url: https://github.com/electron/electron/pull/37878\n    breaking-changes-header: deprecated-browserwindowgettrafficlightposition\n```\n-->\n\nReturns `Point` - The custom position for the traffic light buttons in\nframeless window, `{ x: 0, y: 0 }` will be returned when there is no custom\nposition.\n`````\n```\n\n----------------------------------------\n\nTITLE: Setting Sheet Offset for macOS Windows in Electron\nDESCRIPTION: Demonstrates how to change the attachment point for sheets on macOS windows. This allows positioning sheets beneath HTML-rendered toolbars instead of the default position below the window frame.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BaseWindow } = require('electron')\nconst win = new BaseWindow()\n\nconst toolbarRect = document.getElementById('toolbar').getBoundingClientRect()\nwin.setSheetOffset(toolbarRect.height)\n```\n\n----------------------------------------\n\nTITLE: Ignoring Mouse Events - Electron JavaScript\nDESCRIPTION: Configures the window to ignore all mouse events, forwarding mouse move messages to underlying windows if specified. This is dependent on boolean parameters and is platform-sensitive.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setIgnoreMouseEvents(ignore[, options])\n```\n\n----------------------------------------\n\nTITLE: BrowserWindow TitleBarStyle Configuration (Deprecated)\nDESCRIPTION: This snippet demonstrates the deprecated 'hidden-inset' value for the 'titleBarStyle' option in BrowserWindow and its replacement with 'hiddenInset'.  The camelCase naming convention is now required.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nconst optionsA = { titleBarStyle: 'hidden-inset' }\nconst windowA = new BrowserWindow(optionsA)\n// Replace with\nconst optionsB = { titleBarStyle: 'hiddenInset' }\nconst windowB = new BrowserWindow(optionsB)\n```\n\n----------------------------------------\n\nTITLE: Defining ProxyConfig Rules in Electron\nDESCRIPTION: This snippet outlines the structure and syntax for defining proxy rules in the ProxyConfig object. It specifies the format for schemeProxies, urlScheme, proxyURIList, and proxyURL.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/proxy-config.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nproxyRules = schemeProxies[\";\"<schemeProxies>]\nschemeProxies = [<urlScheme>\"=\"]<proxyURIList>\nurlScheme = \"http\" | \"https\" | \"ftp\" | \"socks\"\nproxyURIList = <proxyURL>[\",\"<proxyURIList>]\nproxyURL = [<proxyScheme>\"://\"]<proxyHost>[\":\"<proxyPort>]\n```\n\n----------------------------------------\n\nTITLE: Disabling Text Selection in Draggable Regions using CSS\nDESCRIPTION: This CSS snippet prevents text selection within a draggable title bar to avoid conflicts with the dragging behavior.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.titlebar {\n  user-select: none;\n  app-region: drag;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Entitlements for Electron App Files in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set custom entitlements for different files in an Electron app during the signing process using @electron/osx-sign. It includes a function to determine the entitlements file based on the file path.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { signAsync } = require('@electron/osx-sign')\n\nfunction getEntitlementsForFile (filePath) {\n  if (filePath.startsWith('my-path-1')) {\n    return './my-path-1.plist'\n  } else {\n    return './alternate.plist'\n  }\n}\n\nsignAsync({\n  optionsForFile: (filePath) => ({\n    // Ensure you return the right entitlements path here based on the file being signed.\n    entitlements: getEntitlementsForFile(filePath)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining DesktopCapturerSource Object Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the DesktopCapturerSource object, including their types and descriptions. It covers the id, name, thumbnail, display_id, and appIcon properties, explaining their formats and usage in desktop capturing scenarios.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/desktop-capturer-source.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# DesktopCapturerSource Object\n\n* `id` string - The identifier of a window or screen that can be used as a\n  `chromeMediaSourceId` constraint when calling\n  [`navigator.getUserMedia`](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia). The format of the identifier will be\n  `window:XX:YY` or `screen:ZZ:0`. XX is the windowID/handle. YY is 1 for\n  the current process, and 0 for all others. ZZ is a sequential number\n  that represents the screen, and it does not equal to the index in the\n  source's name.\n* `name` string - A screen source will be named either `Entire Screen` or\n  `Screen <index>`, while the name of a window source will match the window\n  title.\n* `thumbnail` [NativeImage](../native-image.md) - A thumbnail image. **Note:**\n  There is no guarantee that the size of the thumbnail is the same as the\n  `thumbnailSize` specified in the `options` passed to\n  `desktopCapturer.getSources`. The actual size depends on the scale of the\n  screen or window.\n* `display_id` string - A unique identifier that will correspond to the `id` of\n  the matching [Display](display.md) returned by the [Screen API](../screen.md).\n  On some platforms, this is equivalent to the `XX` portion of the `id` field\n  above and on others it will differ. It will be an empty string if not\n  available.\n* `appIcon` [NativeImage](../native-image.md) - An icon image of the\n  application that owns the window or null if the source has a type screen.\n  The size of the icon is not known in advance and depends on what\n  the application provides.\n```\n\n----------------------------------------\n\nTITLE: Unpacking Files in ASAR Archive using Shell\nDESCRIPTION: This shell command demonstrates how to pack an application directory into an ASAR archive while leaving native Node.js modules unpacked.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ asar pack app app.asar --unpack *.node\n```\n\n----------------------------------------\n\nTITLE: Setting User Tasks for Windows JumpList in Electron\nDESCRIPTION: This snippet demonstrates how to set user tasks for the application's JumpList using the app.setUserTasks API in Electron. It creates a task for opening a new window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.setUserTasks([\n  {\n    program: process.execPath,\n    arguments: '--new-window',\n    iconPath: process.execPath,\n    iconIndex: 0,\n    title: 'New Window',\n    description: 'Create a new window'\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Installing and Using @electron/rebuild\nDESCRIPTION: Commands to install @electron/rebuild package and use it to rebuild native modules for Electron compatibility.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @electron/rebuild\n\n# Every time you run \"npm install\", run this:\n./node_modules/.bin/electron-rebuild\n\n# If you have trouble on Windows, try:\n.\\node_modules\\.bin\\electron-rebuild.cmd\n```\n\n----------------------------------------\n\nTITLE: Defining InputEvent Object Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the InputEvent object. It specifies the 'type' property as a string with various possible values representing different input events, and the 'modifiers' property as an optional array of strings representing event modifiers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/input-event.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `type` string - Can be `undefined`, `mouseDown`, `mouseUp`, `mouseMove`,\n  `mouseEnter`, `mouseLeave`, `contextMenu`, `mouseWheel`, `rawKeyDown`,\n  `keyDown`, `keyUp`, `char`, `gestureScrollBegin`, `gestureScrollEnd`,\n  `gestureScrollUpdate`, `gestureFlingStart`, `gestureFlingCancel`,\n  `gesturePinchBegin`, `gesturePinchEnd`, `gesturePinchUpdate`,\n  `gestureTapDown`, `gestureShowPress`, `gestureTap`, `gestureTapCancel`,\n  `gestureShortPress`, `gestureLongPress`, `gestureLongTap`,\n  `gestureTwoFingerTap`, `gestureTapUnconfirmed`, `gestureDoubleTap`,\n  `touchStart`, `touchMove`, `touchEnd`, `touchCancel`, `touchScrollStarted`,\n  `pointerDown`, `pointerUp`, `pointerMove`, `pointerRawUpdate`,\n  `pointerCancel` or `pointerCausedUaAction`.\n* `modifiers` string[] (optional) - An array of modifiers of the event, can\n  be `shift`, `control`, `ctrl`, `alt`, `meta`, `command`, `cmd`, `iskeypad`,\n  `isautorepeat`, `leftbuttondown`, `middlebuttondown`, `rightbuttondown`,\n  `capslock`, `numlock`, `left`, `right`.\n```\n\n----------------------------------------\n\nTITLE: Initializing TouchBarScrubber in Electron\nDESCRIPTION: Constructor for creating a new TouchBarScrubber instance with configurable options including items, selection handlers, styles, and behavior modes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-scrubber.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew TouchBarScrubber({\n  items: scrubberItems,\n  select: (selectedIndex) => {\n    // Handle selection\n  },\n  highlight: (highlightedIndex) => {\n    // Handle highlight\n  },\n  selectedStyle: 'background',\n  overlayStyle: 'none',\n  showArrowButtons: false,\n  mode: 'free',\n  continuous: true\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Electron API Header File\nDESCRIPTION: Header file template for new Electron API module showing class definition with Wrappable integration\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#ifndef ELECTRON_SHELL_BROWSER_API_ELECTRON_API_{API_NAME}_H_\n#define ELECTRON_SHELL_BROWSER_API_ELECTRON_API_{API_NAME}_H_\n\n#include \"gin/handle.h\"\n#include \"gin/wrappable.h\"\n\nnamespace electron {\n\nnamespace api {\n\nclass ApiName : public gin::Wrappable<ApiName>  {\n public:\n  static gin::Handle<ApiName> Create(v8::Isolate* isolate);\n\n  // gin::Wrappable\n  static gin::WrapperInfo kWrapperInfo;\n  gin::ObjectTemplateBuilder GetObjectTemplateBuilder(\n      v8::Isolate* isolate) override;\n  const char* GetTypeName() override;\n} // namespace api\n} // namespace electron\n```\n\n----------------------------------------\n\nTITLE: Removing app.enableMixedSandbox() in Electron\nDESCRIPTION: This snippet shows that `app.enableMixedSandbox()` is no longer needed as mixed-sandbox mode is enabled by default.  The call can simply be removed.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_80\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\napp.enableMixedSandbox()\n```\n\n----------------------------------------\n\nTITLE: Setting Window Button Visibility - Electron JavaScript\nDESCRIPTION: Sets the visibility of the window's traffic light buttons (close, minimize, maximize) in macOS. Takes a boolean parameter to determine visibility.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setWindowButtonVisibility(visible)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Application Menu in Electron for Recent Documents\nDESCRIPTION: This code shows how to create an application menu from a template and set it as the application menu after the app is ready. This is important for the Recent Documents menu to work properly.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/recent-documents.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, Menu } = require('electron')\n\nconst template = [\n  // Menu template here\n]\nconst menu = Menu.buildFromTemplate(template)\n\napp.whenReady().then(() => {\n  Menu.setApplicationMenu(menu)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Slot Machine Game with Electron TouchBar\nDESCRIPTION: A complete example showing how to create an interactive slot machine game using Electron's TouchBar API. The implementation includes spinning reels, result display, and win condition checking. It demonstrates usage of TouchBarLabel, TouchBarButton, and TouchBarSpacer components.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, TouchBar } = require('electron')\n\nconst { TouchBarLabel, TouchBarButton, TouchBarSpacer } = TouchBar\n\nlet spinning = false\n\n// Reel labels\nconst reel1 = new TouchBarLabel({ label: '' })\nconst reel2 = new TouchBarLabel({ label: '' })\nconst reel3 = new TouchBarLabel({ label: '' })\n\n// Spin result label\nconst result = new TouchBarLabel({ label: '' })\n\n// Spin button\nconst spin = new TouchBarButton({\n  label: '🎰 Spin',\n  backgroundColor: '#7851A9',\n  click: () => {\n    // Ignore clicks if already spinning\n    if (spinning) {\n      return\n    }\n\n    spinning = true\n    result.label = ''\n\n    let timeout = 10\n    const spinLength = 4 * 1000 // 4 seconds\n    const startTime = Date.now()\n\n    const spinReels = () => {\n      updateReels()\n\n      if ((Date.now() - startTime) >= spinLength) {\n        finishSpin()\n      } else {\n        // Slow down a bit on each spin\n        timeout *= 1.1\n        setTimeout(spinReels, timeout)\n      }\n    }\n\n    spinReels()\n  }\n})\n\nconst getRandomValue = () => {\n  const values = ['🍒', '💎', '7️⃣', '🍊', '🔔', '⭐', '🍇', '🍀']\n  return values[Math.floor(Math.random() * values.length)]\n}\n\nconst updateReels = () => {\n  reel1.label = getRandomValue()\n  reel2.label = getRandomValue()\n  reel3.label = getRandomValue()\n}\n\nconst finishSpin = () => {\n  const uniqueValues = new Set([reel1.label, reel2.label, reel3.label]).size\n  if (uniqueValues === 1) {\n    // All 3 values are the same\n    result.label = '💰 Jackpot!'\n    result.textColor = '#FDFF00'\n  } else if (uniqueValues === 2) {\n    // 2 values are the same\n    result.label = '😍 Winner!'\n    result.textColor = '#FDFF00'\n  } else {\n    // No values are the same\n    result.label = '🙁 Spin Again'\n    result.textColor = null\n  }\n  spinning = false\n}\n\nconst touchBar = new TouchBar({\n  items: [\n    spin,\n    new TouchBarSpacer({ size: 'large' }),\n    reel1,\n    new TouchBarSpacer({ size: 'small' }),\n    reel2,\n    new TouchBarSpacer({ size: 'small' }),\n    reel3,\n    new TouchBarSpacer({ size: 'large' }),\n    result\n  ]\n})\n\nlet window\n\napp.whenReady().then(() => {\n  window = new BrowserWindow({\n    frame: false,\n    titleBarStyle: 'hiddenInset',\n    width: 200,\n    height: 200,\n    backgroundColor: '#000'\n  })\n  window.loadURL('about:blank')\n  window.setTouchBar(touchBar)\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility Across Workspaces - Electron JavaScript\nDESCRIPTION: Returns a boolean indicating whether the window is currently visible on all workspaces, with behavior specified for macOS and Linux.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nwin.isVisibleOnAllWorkspaces()\n```\n\n----------------------------------------\n\nTITLE: Accessing NavigationHistory in Electron\nDESCRIPTION: This snippet demonstrates how to access the NavigationHistory instance via the WebContents object of a BrowserWindow. NavigationHistory provides methods to interact with the browsing history of a specific window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nconst mainWindow = new BrowserWindow()\nconst { navigationHistory } = mainWindow.webContents\n```\n\n----------------------------------------\n\nTITLE: Defining PostBody Object Structure in Markdown\nDESCRIPTION: This snippet defines the structure of the PostBody object, including its properties and their types. It specifies the data array, contentType string, and optional boundary string.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/post-body.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PostBody Object\n\n* `data` ([UploadRawData](upload-raw-data.md) | [UploadFile](upload-file.md))[] - The post data to be sent to the\n  new window.\n* `contentType` string - The `content-type` header used for the data. One of\n  `application/x-www-form-urlencoded` or `multipart/form-data`. Corresponds to\n  the `enctype` attribute of the submitted HTML form.\n* `boundary` string (optional) - The boundary used to separate multiple parts of\n  the message. Only valid when `contentType` is `multipart/form-data`.\n```\n\n----------------------------------------\n\nTITLE: Example Beta Release Versioning Sequence\nDESCRIPTION: Demonstrates the typical version sequence for a major or minor Electron release, including beta versions and stable releases with patches.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/electron-versioning.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n2.0.0-beta.1\n2.0.0-beta.2\n2.0.0-beta.3\n2.0.0\n2.0.1\n2.0.2\n```\n\n----------------------------------------\n\nTITLE: Updating webFrame.setSpellCheckProvider with an asynchronous callback in Electron\nDESCRIPTION: This snippet demonstrates updating the `webFrame.setSpellCheckProvider` to use an asynchronous callback. The `autoCorrectWord` parameter has been removed, and the callback is now responsible for filtering misspelled words from a list.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_84\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nwebFrame.setSpellCheckProvider('en-US', true, {\n  spellCheck: (text) => {\n    return !spellchecker.isMisspelled(text)\n  }\n})\n// Replace with\nwebFrame.setSpellCheckProvider('en-US', {\n  spellCheck: (words, callback) => {\n    callback(words.filter(text => spellchecker.isMisspelled(text)))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Dictionary Download URL in Electron\nDESCRIPTION: Shows how to configure a custom URL for downloading spellchecker dictionary files instead of using the default Google CDN.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyWindow.webContents.session.setSpellCheckerDictionaryDownloadURL('https://example.com/dictionaries/')\n```\n\n----------------------------------------\n\nTITLE: Setting Spellchecker Languages in Electron\nDESCRIPTION: Demonstrates how to set specific languages for the spellchecker and retrieve available language codes using session APIs.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Sets the spellchecker to check English US and French\nmyWindow.webContents.session.setSpellCheckerLanguages(['en-US', 'fr'])\n\n// An array of all available language codes\nconst possibleLanguages = myWindow.webContents.session.availableSpellCheckerLanguages\n```\n\n----------------------------------------\n\nTITLE: WebContents OpenDevTools Options (Deprecated)\nDESCRIPTION: This snippet demonstrates the deprecated detach: true option in webContents.openDevTools() and its replacement with mode: 'detach'.  Using the 'mode' property is now required to properly detach the DevTools window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nwebContents.openDevTools({ detach: true })\n// Replace with\nwebContents.openDevTools({ mode: 'detach' })\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright for Electron Testing\nDESCRIPTION: Command to install Microsoft Playwright, an end-to-end testing framework with experimental Electron support. It uses Electron's support for the Chrome DevTools Protocol.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @playwright/test\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Dependencies in Node.js\nDESCRIPTION: This snippet demonstrates traditional Node.js development with eager loading of dependencies, which can lead to unnecessary work being executed as soon as the file is loaded.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/performance.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('node:fs')\nconst fooParser = require('foo-parser')\n\nclass Parser {\n  constructor () {\n    this.files = fs.readdirSync('.')\n  }\n\n  getParsedFiles () {\n    return fooParser.parse(this.files)\n  }\n}\n\nconst parser = new Parser()\n\nmodule.exports = { parser }\n```\n\n----------------------------------------\n\nTITLE: webview.getWebContents() removal\nDESCRIPTION: The `webview.getWebContents()` API is removed.  This snippet shows the correct way to get the web contents using `remote.webContents.fromId()`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_65\n\nLANGUAGE: js\nCODE:\n```\n// Removed in Electron 9.0\nwebview.getWebContents()\n// Replace with\nconst { remote } = require('electron')\nremote.webContents.fromId(webview.getWebContentsId())\n```\n\n----------------------------------------\n\nTITLE: Disabling Serial Blocklist in Electron\nDESCRIPTION: Code snippet showing how to disable the default serial device blocklist in Electron by setting the 'disable-serial-blocklist' command line flag.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/devices.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.commandLine.appendSwitch('disable-serial-blocklist')\n```\n\n----------------------------------------\n\nTITLE: Debug Build Configuration in GN\nDESCRIPTION: GN build configuration file for enabling debug mode with symbols. Sets debug flags and symbol levels for detailed debugging.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging.md#2025-04-21_snippet_2\n\nLANGUAGE: gn\nCODE:\n```\nimport(\"//electron/build/args/testing.gn\")\nis_debug = true\nsymbol_level = 2\nforbid_non_component_debug_builds = false\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Window in Renderer Process\nDESCRIPTION: Example of creating a modal window from the renderer process and writing content to it.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/window-open.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// renderer process (mainWindow)\nconst childWindow = window.open('', 'modal')\nchildWindow.document.write('<h1>Hello</h1>')\n```\n\n----------------------------------------\n\nTITLE: Adding API History with multiple entries in Markdown with YAML\nDESCRIPTION: This markdown snippet showcases an API history block with both `added` and `changes` entries.  This example includes the relevant pull request and a description of the changes made.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`````markdown\n#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_\n\n<!--\n```YAML history\nadded:\n  - pr-url: https://github.com/electron/electron/pull/22533\nchanges:\n  - pr-url: https://github.com/electron/electron/pull/26789\n    description: \"Made `trafficLightPosition` option work for `customButtonOnHover` window.\"\n    breaking-changes-header: behavior-changed-draggable-regions-on-macos\n```\n-->\n\nReturns `Point` - The custom position for the traffic light buttons in\nframeless window, `{ x: 0, y: 0 }` will be returned when there is no custom\nposition.\n`````\n```\n\n----------------------------------------\n\nTITLE: POST Request with Load URL in Electron - JavaScript\nDESCRIPTION: This code shows how to perform a POST request while loading a URL in an Electron BrowserWindow using the 'loadURL' method. It uses 'postData' for sending raw data bytes and specifies additional headers like 'Content-Type'. The primary input is the URL of the target server and the POST data, and it outputs a Promise. This functionality allows for more dynamic and interactive web page loading inside the Electron application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\nwin.loadURL('http://localhost:8000/post', {\n  postData: [{\n    type: 'rawData',\n    bytes: Buffer.from('hello=world')\n  }],\n  extraHeaders: 'Content-Type: application/x-www-form-urlencoded'\n})\n```\n\n----------------------------------------\n\nTITLE: Deprecating Tray.setHighlightMode in Electron\nDESCRIPTION: This snippet indicates that `Tray.setHighlightMode` is deprecated and will be removed without replacement due to changes in macOS Catalina's tray implementation.  The highlighting behavior is no longer customizable.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_81\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\ntray.setHighlightMode(mode)\n// API will be removed in v7.0 without replacement.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Declaration for Process\nDESCRIPTION: Adds TypeScript type definition for the new API module in the Process interface\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Process {\n    _linkedBinding(name: 'electron_browser_{api_name}'): Electron.ApiName;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Files in ASAR Archive using Node.js\nDESCRIPTION: This JavaScript code snippet shows how to list all files in the root directory of an ASAR archive.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require('node:fs')\nfs.readdirSync('/path/to/example.asar')\n```\n\n----------------------------------------\n\nTITLE: JavaScript Call Stack Collection in Electron\nDESCRIPTION: Example showing how to collect JavaScript call stacks from potentially unresponsive frames using the experimental collectJavaScriptCallStack() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame-main.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.commandLine.appendSwitch('enable-features', 'DocumentPolicyIncludeJSCallStacksInCrashReports')\n\napp.on('web-contents-created', (_, webContents) => {\n  webContents.on('unresponsive', async () => {\n    // Interrupt execution and collect call stack from unresponsive renderer\n    const callStack = await webContents.mainFrame.collectJavaScriptCallStack()\n    console.log('Renderer unresponsive\\n', callStack)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Electron Patches\nDESCRIPTION: Shows the filesystem layout for patch files in the Electron project, demonstrating how patches are organized by upstream project with a .patches file controlling application order.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npatches\n├── config.json   <-- this describes which patchset directory is applied to what project\n├── chromium\n│   ├── .patches\n│   ├── accelerator.patch\n│   ├── add_contentgpuclient_precreatemessageloop_callback.patch\n│   ⋮\n├── node\n│   ├── .patches\n│   ├── add_openssl_is_boringssl_guard_to_oaep_hash_check.patch\n│   ├── build_add_gn_build_files.patch\n│   ⋮\n⋮\n```\n\n----------------------------------------\n\nTITLE: Disabling Sandbox for Single Browser Window in Electron\nDESCRIPTION: Example showing how to disable the sandbox for a specific renderer process using the BrowserWindow constructor with sandbox:false option.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/sandbox.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    webPreferences: {\n      sandbox: false\n    }\n  })\n  win.loadURL('https://google.com')\n})\n```\n\n----------------------------------------\n\nTITLE: Closing a ShareMenu Context Menu in Electron\nDESCRIPTION: Closes the previously opened share menu context menu in the specified BrowserWindow.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/share-menu.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#### `shareMenu.closePopup([browserWindow])`\n\n* `browserWindow` [BrowserWindow](browser-window.md) (optional) - Default is the focused window.\n```\n\n----------------------------------------\n\nTITLE: Cloning and Opening Electron Quick Start Project in VS Code\nDESCRIPTION: Commands to clone the Electron Quick Start repository and open it in Visual Studio Code.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/debugging-vscode.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone git@github.com:electron/electron-quick-start.git\n$ code electron-quick-start\n```\n\n----------------------------------------\n\nTITLE: Visual Studio Linker Tool Settings for Native Addon\nDESCRIPTION: Configuration for Visual Studio's linker tool within the binding.gyp file, enabling generation of debug information for better debugging experience and human-readable stack traces.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"VCLinkerTool\": {\n  \"GenerateDebugInformation\": \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Window and Basic UI in Objective-C\nDESCRIPTION: This code snippet demonstrates the setup of the main window and initial UI elements, including a text field, date picker, and add button, using Objective-C and the Cocoa framework. It instantiates the UI controls and adds them as subviews to the content view of the main window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_7\n\nLANGUAGE: objc\nCODE:\n```\n// Previous code...\n\n- (void)setupWindow {\n    // Create a window\n    NSRect frame = NSMakeRect(0, 0, 400, 300);\n    NSWindow *window = [[NSWindow alloc] initWithContentRect:frame\n                                         styleMask:NSWindowStyleMaskTitled | NSWindowStyleMaskClosable | NSWindowStyleMaskResizable\n                                         backing:NSBackingStoreBuffered\n                                         defer:NO];\n    [window setTitle:@\"Todo List\"];\n    [window center];\n    self.window = window;\n\n    // Set up the content view with auto layout\n    NSView *contentView = [window contentView];\n\n    // Create text field\n    _textField = [[NSTextField alloc] initWithFrame:NSMakeRect(20, 260, 200, 24)];\n    [_textField setPlaceholderString:@\"Enter a todo...\"];\n    [contentView addSubview:_textField];\n\n    // Create date picker\n    _datePicker = [[NSDatePicker alloc] initWithFrame:NSMakeRect(230, 260, 100, 24)];\n    [_datePicker setDatePickerStyle:NSDatePickerStyleTextField];\n    [_datePicker setDatePickerElements:NSDatePickerElementFlagYearMonthDay];\n    [contentView addSubview:_datePicker];\n\n    // Create add button\n    _addButton = [[NSButton alloc] initWithFrame:NSMakeRect(340, 260, 40, 24)];\n    [_addButton setTitle:@\"Add\"];\n    [_addButton setBezelStyle:NSBezelStyleRounded];\n    [_addButton setTarget:self];\n    [_addButton setAction:@selector(addTodo:)];\n    [contentView addSubview:_addButton];\n\n    // More UI elements to follow in the next step...\n}\n\n// More code to follow later...\n```\n\n----------------------------------------\n\nTITLE: Configuring LLDB for Electron Debugging\nDESCRIPTION: LLDB initialization configuration to enable proper source mapping of Chromium code. This should be added to ~/.lldbinit file.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# e.g: ['~/electron/src/tools/lldb']\nscript sys.path[:0] = ['<...path/to/electron/src/tools/lldb>']\nscript import lldbinit\n```\n\n----------------------------------------\n\nTITLE: Defining ProtocolResponse Object Structure in Markdown\nDESCRIPTION: This snippet outlines the structure and properties of the ProtocolResponse object used in Electron for handling HTTP responses. It includes optional fields for error handling, status codes, response body, headers, and various other HTTP-related properties.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/protocol-response.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ProtocolResponse Object\n\n* `error` Integer (optional) - When assigned, the `request` will fail with the\n  `error` number . For the available error numbers you can use, please see the\n  [net error list][net-error].\n* `statusCode` number (optional) - The HTTP response code, default is 200.\n* `charset` string (optional) - The charset of response body, default is\n  `\"utf-8\"`.\n* `mimeType` string (optional) - The MIME type of response body, default is\n  `\"text/html\"`. Setting `mimeType` would implicitly set the `content-type`\n  header in response, but if `content-type` is already set in `headers`, the\n  `mimeType` would be ignored.\n* `headers` Record<string, string | string[]> (optional) - An object containing the response headers. The\n  keys must be string, and values must be either string or Array of string.\n* `data` (Buffer | string | ReadableStream) (optional) - The response body. When\n  returning stream as response, this is a Node.js readable stream representing\n  the response body. When returning `Buffer` as response, this is a `Buffer`.\n  When returning `string` as response, this is a `string`. This is ignored for\n  other types of responses.\n* `path` string (optional) - Path to the file which would be sent as response\n  body. This is only used for file responses.\n* `url` string (optional) - Download the `url` and pipe the result as response\n  body. This is only used for URL responses.\n* `referrer` string (optional) - The `referrer` URL. This is only used for file\n  and URL responses.\n* `method` string (optional) - The HTTP `method`. This is only used for file\n  and URL responses.\n* `session` Session (optional) - The session used for requesting URL.\n  The HTTP request will reuse the current session by default.\n* `uploadData` [ProtocolResponseUploadData](protocol-response-upload-data.md) (optional) - The data used as upload data. This is only\n  used for URL responses when `method` is `\"POST\"`.\n\n[net-error]: https://source.chromium.org/chromium/chromium/src/+/main:net/base/net_error_list.h\n```\n\n----------------------------------------\n\nTITLE: Handling Application Move Conflicts in Electron (JavaScript)\nDESCRIPTION: Shows how to use the moveToApplicationsFolder method with a custom conflict handler. The handler allows for user confirmation when moving the app to the Applications folder if an app with the same name already exists.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, dialog } = require('electron')\n\napp.moveToApplicationsFolder({\n  conflictHandler: (conflictType) => {\n    if (conflictType === 'exists') {\n      return dialog.showMessageBoxSync({\n        type: 'question',\n        buttons: ['Halt Move', 'Continue Move'],\n        defaultId: 0,\n        message: 'An app of this name already exists'\n      }) === 1\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Process GetProcessMemoryInfo Usage (Deprecated)\nDESCRIPTION: This snippet shows the deprecated process.getProcessMemoryInfo() method.  No direct replacement is provided in the document, indicating a change in how memory information should be accessed.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nconst info = process.getProcessMemoryInfo()\n```\n\n----------------------------------------\n\nTITLE: Replace BrowserWindow.getTrafficLightPosition with getWindowButtonPosition in Electron\nDESCRIPTION: This JavaScript snippet illustrates replacing the deprecated `BrowserWindow.getTrafficLightPosition` with `BrowserWindow.getWindowButtonPosition` in Electron. It shows how to retrieve the window button position using the new API and check if a custom position is set by checking for a `null` return value.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed in Electron 28\nconst pos = win.getTrafficLightPosition()\nif (pos.x === 0 && pos.y === 0) {\n  // No custom position.\n}\n\n// Replace with\nconst ret = win.getWindowButtonPosition()\nif (ret === null) {\n  // No custom position.\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Menu Bar Visibility - Electron JavaScript\nDESCRIPTION: Returns a boolean value indicating the current visibility status of the menu bar, applicable for Windows and Linux.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nwin.isMenuBarVisible()\n```\n\n----------------------------------------\n\nTITLE: Setting Plain Text Encryption Usage in Electron\nDESCRIPTION: This method forces the use of an in-memory password for encryption on Linux when a valid OS password manager is not available. It has no effect on Windows and macOS.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsafeStorage.setUsePlainTextEncryption(usePlainText)\n```\n\n----------------------------------------\n\nTITLE: Defining UserDefaultTypes Object in TypeScript for Electron\nDESCRIPTION: This code snippet defines the UserDefaultTypes object, which maps various data types to their corresponding JavaScript/TypeScript types. It's used as a helper alias and no actual object of this type will be instantiated.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/user-default-types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n# UserDefaultTypes Object\n\n* `string` string\n* `boolean` boolean\n* `integer` number\n* `float` number\n* `double` number\n* `url` string\n* `array` Array\\<unknown>\n* `dictionary` Record\\<string, unknown>\n\nThis type is a helper alias, no object will ever exist of this type.\n```\n\n----------------------------------------\n\nTITLE: Building 32-bit Electron with GN Args\nDESCRIPTION: Command to generate 32-bit build configuration using GN build system with release arguments and x86 target CPU.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-windows.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$ gn gen out/Release-x86 --args=\"import(\\\"//electron/build/args/release.gn\\\") target_cpu=\\\"x86\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Build Configuration for Windows-Specific Native Addon\nDESCRIPTION: The binding.gyp configuration file for building a Windows-specific native addon, including compiler settings, linker options, library dependencies (comctl32.lib and shcore.lib), and Windows version definitions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": [\n    {\n      \"target_name\": \"cpp_addon\",\n      \"conditions\": [\n        ['OS==\"win\"', {\n          \"sources\": [\n            \"src/cpp_addon.cc\",\n            \"src/cpp_code.cc\"\n          ],\n          \"include_dirs\": [\n            \"<!@(node -p \\\"require('node-addon-api').include\\\")\",\n            \"include\"\n          ],\n          \"libraries\": [\n            \"comctl32.lib\",\n            \"shcore.lib\"\n          ],\n          \"dependencies\": [\n            \"<!(node -p \\\"require('node-addon-api').gyp\\\")\"\n          ],\n          \"msvs_settings\": {\n            \"VCCLCompilerTool\": {\n              \"ExceptionHandling\": 1,\n              \"DebugInformationFormat\": \"OldStyle\",\n              \"AdditionalOptions\": [\n                \"/FS\"\n              ]\n            },\n            \"VCLinkerTool\": {\n              \"GenerateDebugInformation\": \"true\"\n            }\n          },\n          \"defines\": [\n            \"NODE_ADDON_API_CPP_EXCEPTIONS\",\n            \"WINVER=0x0A00\",\n            \"_WIN32_WINNT=0x0A00\"\n          ]\n        }]\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners with ipcMainServiceWorker.removeAllListeners()\nDESCRIPTION: Removes all listeners for a specified channel. If no channel is provided, it can remove listeners from all channels.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nipcMainServiceWorker.removeAllListeners([channel])\n```\n\n----------------------------------------\n\nTITLE: Creating HTML UI for Window Title Setting in Electron\nDESCRIPTION: Builds a simple HTML interface with an input field and button for setting the window title. Includes proper Content Security Policy headers and loads the renderer.js script.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\">\n    <title>Hello World!</title>\n  </head>\n  <body>\n    Title: <input id=\"title\"/>\n    <button id=\"btn\" type=\"button\">Set</button>\n    <script src=\"./renderer.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Windows 10 Node Headers and Library Setup\nDESCRIPTION: PowerShell commands for compiling Node headers and setting up the electron library for Windows 10 testing environment\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nninja -C out\\Testing electron:node_headers\n```\n\nLANGUAGE: powershell\nCODE:\n```\ncd out\\Testing\nmkdir gen\\node_headers\\Release\ncopy electron.lib gen\\node_headers\\Release\\node.lib\n```\n\n----------------------------------------\n\nTITLE: Converting File Object to Filesystem Path in Electron\nDESCRIPTION: Demonstrates the transition from using the deprecated File.path property to the new webUtils.getPathForFile() method for obtaining filesystem paths from File objects in Electron's renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-utils.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nconst oldPath = document.querySelector('input').files[0].path\n\n// After\nconst { webUtils } = require('electron')\nconst newPath = webUtils.getPathForFile(document.querySelector('input').files[0])\n```\n\n----------------------------------------\n\nTITLE: Using ipcMainServiceWorker.on() to Listen for Messages\nDESCRIPTION: Sets up a listener for incoming messages on a specified channel from service workers. When a message arrives, the listener function is called with the event object and any additional arguments.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nipcMainServiceWorker.on(channel, listener)\n```\n\n----------------------------------------\n\nTITLE: Documenting Publish to NPM Script in Markdown\nDESCRIPTION: Explains the 'publish-to-npm' script, which completes the release process by publishing a new npm package.\nSOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### `publish-to-npm`\n\nThis script finishes the release process by publishing a new `npm` package.\n```\n\n----------------------------------------\n\nTITLE: Using MessagePortMain postMessage Method in Electron\nDESCRIPTION: Sends a message from the port, optionally transferring ownership of objects to other browsing contexts. This is the main process equivalent of DOM MessagePort's postMessage.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nport.postMessage(message, [transfer])\n```\n\n----------------------------------------\n\nTITLE: Resolving Patch Conflicts in Electron\nDESCRIPTION: Commands for handling patch conflicts during dependency updates, using git's 3-way merge capability and manual conflict resolution.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd src/third_party/electron_node\n# If the patch application failed midway through, you can reset it with:\n$ git am --abort\n# And then retry with 3-way merge:\n$ ../../electron/script/git-import-patches -3 ../../electron/patches/node\n```\n\n----------------------------------------\n\nTITLE: Listing Files in ASAR Archive using Shell\nDESCRIPTION: This shell command lists all files within the specified ASAR archive, showcasing its contents.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ asar list /path/to/example.asar\n/app.js\n/file.txt\n/dir/module.js\n/static/index.html\n/static/main.css\n/static/jquery.min.js\n```\n\n----------------------------------------\n\nTITLE: Deprecated crashReporter.getCrashesDirectory() in Electron\nDESCRIPTION: The `crashReporter.getCrashesDirectory()` method is deprecated and replaced by `app.getPath('crashDumps')`. This snippet illustrates the old and new ways to get the crash dumps directory in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_57\n\nLANGUAGE: js\nCODE:\n```\n// Deprecated in Electron 10\ncrashReporter.getCrashesDirectory()\n// Replace with\napp.getPath('crashDumps')\n```\n\n----------------------------------------\n\nTITLE: Defining MimeTypedBuffer Object Structure in Markdown\nDESCRIPTION: This snippet outlines the properties of the MimeTypedBuffer object. It includes optional MIME type and charset strings, as well as the required Buffer data.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/mime-typed-buffer.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# MimeTypedBuffer Object\n\n* `mimeType` string (optional) - MIME type of the buffer.\n* `charset` string (optional) - Charset of the buffer.\n* `data` Buffer - The actual Buffer content.\n```\n\n----------------------------------------\n\nTITLE: Auto-Hiding Cursor Control - Electron JavaScript\nDESCRIPTION: Controls whether the cursor should hide when typing, with a boolean parameter applicable in macOS. This function enhances user experience during text input.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setAutoHideCursor(autoHide)\n```\n\n----------------------------------------\n\nTITLE: CrashReporter AutoSubmit Configuration (Deprecated)\nDESCRIPTION: This snippet shows the deprecated 'autoSubmit' option in crashReporter.start() and its replacement with 'uploadToServer'. Switching to 'uploadToServer' ensures that crash reports are correctly submitted to the specified URL.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\ncrashReporter.start({\n  companyName: 'Crashly',\n  submitURL: 'https://crash.server.com',\n  autoSubmit: true\n})\n// Replace with\ncrashReporter.start({\n  companyName: 'Crashly',\n  submitURL: 'https://crash.server.com',\n  uploadToServer: true\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on RHEL/CentOS\nDESCRIPTION: Command to install required development libraries and tools on RHEL or CentOS systems.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo yum install clang dbus-devel gtk3-devel libnotify-devel \\\n                   libgnome-keyring-devel xorg-x11-server-utils libcap-devel \\\n                   cups-devel libXtst-devel alsa-lib-devel libXrandr-devel \\\n                   nss-devel python-dbusmock openjdk-8-jre\n```\n\n----------------------------------------\n\nTITLE: Basic main.js Entry Point for Testing\nDESCRIPTION: A simple main.js file that logs a message to verify the Electron setup is working properly. This script runs in the main process when the application starts.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconsole.log('Hello from Electron 👋')\n```\n\n----------------------------------------\n\nTITLE: Accessing TouchBarSpacer Properties\nDESCRIPTION: Demonstrates how to access the size property of a TouchBarSpacer instance. The size property returns a string value indicating the current spacer size configuration.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-spacer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntouchBarSpacer.size // Returns 'small', 'large', or 'flexible'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Arch Linux/Manjaro\nDESCRIPTION: Command to install required development libraries and tools on Arch Linux or Manjaro systems.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -Syu base-devel clang libdbus gtk2 libnotify \\\n                   libgnome-keyring alsa-lib libcap libcups libxtst \\\n                   libxss nss gcc-multilib curl gperf bison \\\n                   python2 python-dbusmock jdk8-openjdk\n```\n\n----------------------------------------\n\nTITLE: Configuring China non-CDN mirror with custom directory format\nDESCRIPTION: Shell commands to configure both the mirror URL and custom directory format for downloading Electron binaries from China's non-CDN mirror.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nELECTRON_MIRROR=\"https://npmmirror.com/mirrors/electron/\"\nELECTRON_CUSTOM_DIR=\"{{ version }}\"\n```\n\n----------------------------------------\n\nTITLE: BrowserWindow App Command Handling (Deprecated)\nDESCRIPTION: This snippet illustrates the deprecated 'media-play_pause' app-command name and its replacement with 'media-play-pause'. Updating the event listener with the new command name ensures the expected behavior for media play/pause events.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nwindow.on('app-command', (e, cmd) => {\n  if (cmd === 'media-play_pause') {\n    // do something\n  }\n})\n// Replace with\nwindow.on('app-command', (e, cmd) => {\n  if (cmd === 'media-play-pause') {\n    // do something\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Forwarding Mouse Events in Electron Main Process\nDESCRIPTION: This JavaScript code for the main process sets up an IPC listener to toggle mouse event ignoring with optional forwarding.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow, ipcMain } = require('electron')\nconst path = require('node:path')\n\nconst win = new BrowserWindow({\n  webPreferences: {\n    preload: path.join(__dirname, 'preload.js')\n  }\n})\n\nipcMain.on('set-ignore-mouse-events', (event, ignore, options) => {\n  const win = BrowserWindow.fromWebContents(event.sender)\n  win.setIgnoreMouseEvents(ignore, options)\n})\n```\n\n----------------------------------------\n\nTITLE: History Restoration - Electron NavigationHistory\nDESCRIPTION: Method to restore navigation history with specified entries and state, including form values and scroll positions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnavigationHistory.restore({\n  entries: NavigationEntry[],\n  index: Integer // optional\n})\n```\n\n----------------------------------------\n\nTITLE: Deprecated shell.moveItemToTrash() in Electron\nDESCRIPTION: The synchronous `shell.moveItemToTrash()` is deprecated and should be replaced with the asynchronous `shell.trashItem()`. This snippet demonstrates the old and new methods for moving an item to the trash in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_55\n\nLANGUAGE: js\nCODE:\n```\n// Deprecated in Electron 12\nshell.moveItemToTrash(path)\n// Replace with\nshell.trashItem(path).then(/* ... */)\n```\n\n----------------------------------------\n\nTITLE: Forcefully Crash Renderer - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to forcefully crash the renderer process associated with a BrowserWindow's WebContents. It includes a dialog to prompt the user before crashing and reloading the page, which is useful for handling unresponsive applications. It relies on the 'unresponsive' event and the BrowserWindow and dialog modules.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst win = new BrowserWindow()\n\nwin.webContents.on('unresponsive', async () => {\n  const { response } = await dialog.showMessageBox({\n    message: 'App X has become unresponsive',\n    title: 'Do you want to try forcefully reloading the app?',\n    buttons: ['OK', 'Cancel'],\n    cancelId: 1\n  })\n  if (response === 0) {\n    win.webContents.forcefullyCrashRenderer()\n    win.webContents.reload()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CrashReport Object Structure in Markdown\nDESCRIPTION: This snippet outlines the properties of the CrashReport object. It includes a 'date' property of type Date and an 'id' property of type string.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/crash-report.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CrashReport Object\n\n* `date` Date\n* `id` string\n```\n\n----------------------------------------\n\nTITLE: Adding a Tabbed Window - Electron JavaScript\nDESCRIPTION: Adds a specified window as a tab to the current window, enhancing user experience with tabbed interfaces in macOS.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nwin.addTabbedWindow(baseWindow)\n```\n\n----------------------------------------\n\nTITLE: Replace gpu-process-crashed event with child-process-gone in Electron\nDESCRIPTION: This JavaScript snippet demonstrates replacing the deprecated `gpu-process-crashed` event on `app` with the new `child-process-gone` event in Electron. It provides examples of how to listen for the `child-process-gone` event to handle GPU process termination.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed\napp.on('gpu-process-crashed', (event, killed) => { /* ... */ })\n\n// Replace with\napp.on('child-process-gone', (event, details) => { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: Installing Electron Forge CLI and Importing Project\nDESCRIPTION: Commands to install Electron Forge's CLI as a dev dependency and import an existing project using the conversion script.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @electron-forge/cli\nnpx electron-forge import\n```\n\n----------------------------------------\n\nTITLE: Creating HTML UI for File Dialog in Electron\nDESCRIPTION: Builds a simple HTML interface with a button to trigger the file dialog and an element to display the selected file path. Includes proper Content Security Policy headers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\">\n    <title>Dialog</title>\n  </head>\n  <body>\n    <button type=\"button\" id=\"btn\">Open a File</button>\n    File path: <strong id=\"filePath\"></strong>\n    <script src='./renderer.js'></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Parent and Child Windows - JavaScript\nDESCRIPTION: Shows how to create parent and child window relationships using the parent option in BaseWindow constructor.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BaseWindow } = require('electron')\n\nconst parent = new BaseWindow()\nconst child = new BaseWindow({ parent })\n```\n\n----------------------------------------\n\nTITLE: Event Documentation Format\nDESCRIPTION: Template showing the standard format for documenting events and their return values.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Event: 'wake-up'\n\nReturns:\n\n* `time` string\n\n...\n```\n\n----------------------------------------\n\nTITLE: Defining MouseWheelInputEvent Object Properties in Markdown\nDESCRIPTION: This snippet lists the properties of the MouseWheelInputEvent object, which extends the MouseInputEvent object. It includes the event type and various optional properties related to mouse wheel movement and acceleration.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/mouse-wheel-input-event.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# MouseWheelInputEvent Object extends `MouseInputEvent`\n\n* `type` string - The type of the event, can be `mouseWheel`.\n* `deltaX` Integer (optional)\n* `deltaY` Integer (optional)\n* `wheelTicksX` Integer (optional)\n* `wheelTicksY` Integer (optional)\n* `accelerationRatioX` Integer (optional)\n* `accelerationRatioY` Integer (optional)\n* `hasPreciseScrollingDeltas` boolean (optional)\n* `canScroll` boolean (optional)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Direct API Exposure in Preload Script\nDESCRIPTION: This example demonstrates an incorrect approach to exposing APIs from a preload script to a renderer due to contextIsolation. Directly attaching properties to the window object won't work with contextIsolation enabled.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.myAPI = {\n  desktop: true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Electron with specific architecture\nDESCRIPTION: Command to install Electron with a specific architecture (e.g., ia32 on an x64 machine) using the --arch flag with npm.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --arch=ia32 electron\n```\n\n----------------------------------------\n\nTITLE: Complete Todo List Application Implementation in Win32 C++\nDESCRIPTION: This code snippet contains the full implementation of the Todo List application, including necessary headers, data structures, helper functions, and the main GUI creation and message loop.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\n#include <windows.h>\n#include <windowsx.h>\n#include <string>\n#include <functional>\n#include <chrono>\n#include <vector>\n#include <commctrl.h>\n#include <shellscalingapi.h>\n#include <thread>\n\n#pragma comment(lib, \"comctl32.lib\")\n#pragma comment(linker, \"\\\"/manifestdependency:type='win32' \\\nname='Microsoft.Windows.Common-Controls' version='6.0.0.0' \\\nprocessorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'\\\"\")\n\nusing TodoCallback = std::function<void(const std::string &)>;\n\nstatic TodoCallback g_todoAddedCallback;\nstatic TodoCallback g_todoUpdatedCallback;\nstatic TodoCallback g_todoDeletedCallback;\n\nstruct TodoItem\n{\n  GUID id;\n  std::wstring text;\n  int64_t date;\n\n  std::string toJson() const\n  {\n    OLECHAR *guidString;\n    StringFromCLSID(id, &guidString);\n    std::wstring widGuid(guidString);\n    CoTaskMemFree(guidString);\n\n    // Convert wide string to narrow for JSON\n    std::string guidStr(widGuid.begin(), widGuid.end());\n    std::string textStr(text.begin(), text.end());\n\n    return \"{\"\n           \"\\\"id\\\":\\\"\" + guidStr + \"\\\",\"\n           \"\\\"text\\\":\\\"\" + textStr + \"\\\",\"\n           \"\\\"date\\\":\" + std::to_string(date) +\n           \"}\";\n  }\n};\n\nnamespace cpp_code\n{\n\n  std::string hello_world(const std::string &input)\n  {\n    return \"Hello from C++! You said: \" + input;\n  }\n\n  void setTodoAddedCallback(TodoCallback callback)\n  {\n    g_todoAddedCallback = callback;\n  }\n\n  void setTodoUpdatedCallback(TodoCallback callback)\n  {\n    g_todoUpdatedCallback = callback;\n  }\n\n  void setTodoDeletedCallback(TodoCallback callback)\n  {\n    g_todoDeletedCallback = callback;\n  }\n\n  LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);\n\n  // Helper function to scale a value based on DPI\n  int Scale(int value, UINT dpi)\n  {\n    return MulDiv(value, dpi, 96); // 96 is the default DPI\n  }\n\n  // Helper function to convert SYSTEMTIME to milliseconds since epoch\n  int64_t SystemTimeToMillis(const SYSTEMTIME &st)\n  {\n    FILETIME ft;\n    SystemTimeToFileTime(&st, &ft);\n    ULARGE_INTEGER uli;\n    uli.LowPart = ft.dwLowDateTime;\n    uli.HighPart = ft.dwHighDateTime;\n    return (uli.QuadPart - 116444736000000000ULL) / 10000;\n  }\n\n  void ResetControls(HWND hwnd)\n  {\n    HWND hEdit = GetDlgItem(hwnd, 1);\n    HWND hDatePicker = GetDlgItem(hwnd, 4);\n    HWND hAddButton = GetDlgItem(hwnd, 2);\n\n    // Clear text\n    SetWindowTextW(hEdit, L\"\");\n\n    // Reset date to current\n    SYSTEMTIME currentTime;\n    GetLocalTime(&currentTime);\n    DateTime_SetSystemtime(hDatePicker, GDT_VALID, &currentTime);\n  }\n\n  void hello_gui() {\n    // Launch GUI in a separate thread\n    std::thread guiThread([]() {\n      // Enable Per-Monitor DPI awareness\n      SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);\n\n      // Initialize Common Controls\n      INITCOMMONCONTROLSEX icex;\n      icex.dwSize = sizeof(INITCOMMONCONTROLSEX);\n      icex.dwICC = ICC_STANDARD_CLASSES | ICC_WIN95_CLASSES;\n      InitCommonControlsEx(&icex);\n\n      // Register window class\n      WNDCLASSEXW wc = {};\n      wc.cbSize = sizeof(WNDCLASSEXW);\n      wc.lpfnWndProc = WindowProc;\n      wc.hInstance = GetModuleHandle(nullptr);\n      wc.lpszClassName = L\"TodoApp\";\n      RegisterClassExW(&wc);\n\n      // Get the DPI for the monitor\n      UINT dpi = GetDpiForSystem();\n\n      // Create window\n      HWND hwnd = CreateWindowExW(\n        0, L\"TodoApp\", L\"Todo List\",\n        WS_OVERLAPPEDWINDOW,\n        CW_USEDEFAULT, CW_USEDEFAULT,\n        Scale(500, dpi), Scale(500, dpi),\n        nullptr, nullptr,\n        GetModuleHandle(nullptr), nullptr\n      );\n\n      if (hwnd == nullptr) {\n        return;\n      }\n\n      // Create the modern font with DPI-aware size\n      HFONT hFont = CreateFontW(\n        -Scale(14, dpi),              // Height (scaled)\n        0,                            // Width\n        0,                            // Escapement\n        0,                            // Orientation\n        FW_NORMAL,                    // Weight\n        FALSE,                        // Italic\n        FALSE,                        // Underline\n        FALSE,                        // StrikeOut\n        DEFAULT_CHARSET,              // CharSet\n        OUT_DEFAULT_PRECIS,           // OutPrecision\n        CLIP_DEFAULT_PRECIS,          // ClipPrecision\n        CLEARTYPE_QUALITY,            // Quality\n        DEFAULT_PITCH | FF_DONTCARE,  // Pitch and Family\n        L\"Segoe UI\"                   // Font face name\n      );\n\n      // Create input controls with scaled positions and sizes\n      HWND hEdit = CreateWindowExW(0, WC_EDITW, L\"\",\n        WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,\n        Scale(10, dpi), Scale(10, dpi),\n        Scale(250, dpi), Scale(25, dpi),\n        hwnd, (HMENU)1, GetModuleHandle(nullptr), nullptr);\n      SendMessageW(hEdit, WM_SETFONT, (WPARAM)hFont, TRUE);\n\n      // Create date picker\n      HWND hDatePicker = CreateWindowExW(0, DATETIMEPICK_CLASSW, L\"\",\n        WS_CHILD | WS_VISIBLE | DTS_SHORTDATECENTURYFORMAT,\n        Scale(270, dpi), Scale(10, dpi),\n        Scale(100, dpi), Scale(25, dpi),\n        hwnd, (HMENU)4, GetModuleHandle(nullptr), nullptr);\n      SendMessageW(hDatePicker, WM_SETFONT, (WPARAM)hFont, TRUE);\n\n      HWND hButton = CreateWindowExW(0, WC_BUTTONW, L\"Add\",\n        WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,\n        Scale(380, dpi), Scale(10, dpi),\n        Scale(50, dpi), Scale(25, dpi),\n        hwnd, (HMENU)2, GetModuleHandle(nullptr), nullptr);\n      SendMessageW(hButton, WM_SETFONT, (WPARAM)hFont, TRUE);\n\n      HWND hListBox = CreateWindowExW(0, WC_LISTBOXW, L\"\",\n        WS_CHILD | WS_VISIBLE | WS_BORDER | WS_VSCROLL | LBS_NOTIFY,\n        Scale(10, dpi), Scale(45, dpi),\n        Scale(460, dpi), Scale(400, dpi),\n        hwnd, (HMENU)3, GetModuleHandle(nullptr), nullptr);\n      SendMessageW(hListBox, WM_SETFONT, (WPARAM)hFont, TRUE);\n\n      ShowWindow(hwnd, SW_SHOW);\n\n      // Message loop\n      MSG msg = {};\n      while (GetMessage(&msg, nullptr, 0, 0)) {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n      }\n\n      // Clean up\n      DeleteObject(hFont);\n    });\n\n    // Detach the thread so it runs independently\n    guiThread.detach();\n  }\n\n  // Global vector to store todos\n  static std::vector<TodoItem> g_todos;\n\n  void NotifyCallback(const TodoCallback &callback, const std::string &json)\n  {\n    if (callback)\n    {\n      callback(json);\n      // Process pending messages\n      MSG msg;\n      while (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE))\n      {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n      }\n    }\n  }\n\n  std::wstring FormatTodoDisplay(const std::wstring &text, const SYSTEMTIME &st)\n  {\n    wchar_t dateStr[64];\n    GetDateFormatW(LOCALE_USER_DEFAULT, DATE_SHORTDATE, &st, nullptr, dateStr, 64);\n    return text + L\" - \" + dateStr;\n  }\n\n  LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\n  {\n    switch (uMsg)\n    {\n      case WM_COMMAND:\n      {\n        HWND hListBox = GetDlgItem(hwnd, 3);\n        int cmd = LOWORD(wParam);\n\n        switch (cmd)\n        {\n          case 2: // Add button\n          {\n            wchar_t buffer[256];\n            GetDlgItemTextW(hwnd, 1, buffer, 256);\n\n            if (wcslen(buffer) > 0)\n            {\n              SYSTEMTIME st;\n              HWND hDatePicker = GetDlgItem(hwnd, 4);\n              DateTime_GetSystemtime(hDatePicker, &st);\n\n              TodoItem todo;\n              CoCreateGuid(&todo.id);\n              todo.text = buffer;\n\n```\n\n----------------------------------------\n\nTITLE: Deprecated BrowserWindow function in Markdown\nDESCRIPTION: This markdown snippet shows an example entry in `breaking-changes.md` describing the deprecation of `BrowserWindow.getTrafficLightPosition()`. It highlights that `BrowserWindow.getWindowButtonPosition()` should be used instead.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n<!-- docs/breaking-changes.md -->\n### Deprecated: `BrowserWindow.getTrafficLightPosition()`\n\n`BrowserWindow.getTrafficLightPosition()` has been deprecated, the\n`BrowserWindow.getWindowButtonPosition()` API should be used instead\nwhich returns `null` instead of `{ x: 0, y: 0 }` when there is no custom\nposition.\n\n<!-- docs/api/browser-window.md  -->\n#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_\n\nReturns `Point` - The custom position for the traffic light buttons in\nframeless window, `{ x: 0, y: 0 }` will be returned when there is no custom\nposition.\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Window Visibility Across Workspaces in Electron for macOS and Linux\nDESCRIPTION: Returns whether the window is visible on all workspaces. Always returns false on Windows as this functionality is not supported on that platform.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nwin.isVisibleOnAllWorkspaces()\n```\n\n----------------------------------------\n\nTITLE: Setting Sheet Offset in Electron for macOS Dialogs\nDESCRIPTION: Example of how to adjust the position where sheet dialogs attach to a window in Electron on macOS. This allows developers to control the vertical offset of dialog sheets from the window frame.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nBaseWindow.getCurrentWindow().setSheetOffset(offset)\n```\n\n----------------------------------------\n\nTITLE: Clipboard RTF Read/Write (Deprecated)\nDESCRIPTION: This snippet demonstrates the deprecated clipboard.readRtf() and clipboard.writeRtf() methods and their replacements clipboard.readRTF() and clipboard.writeRTF(), respectively.  The case of the function names has changed, so it's necessary to update to the new casing to ensure the correct function is called.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nclipboard.readRtf()\n// Replace with\nclipboard.readRTF()\n\n// Deprecated\nclipboard.writeRtf()\n// Replace with\nclipboard.writeRTF()\n```\n\n----------------------------------------\n\nTITLE: Updating Title Bar Overlay - Electron JavaScript\nDESCRIPTION: Updates the style of the title bar overlay for windows with overlay enabled in Windows and Linux. This method supports additional styling options defined in the 'options' parameter.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setTitleBarOverlay(options)\n```\n\n----------------------------------------\n\nTITLE: Finding commit history with git log in Bash\nDESCRIPTION: This bash command utilizes `git log` to trace the history of `GetTrafficLightPosition` within `shell/browser/native_window_mac.mm`. It helps identify the commits that introduced or modified the functionality.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git log --reverse -L :GetTrafficLightPosition:shell/browser/native_window_mac.mm\ncommit e01b1831d96d5d68f54af879b00c617358df5372\nAuthor: Cheng Zhao <zcbenz@gmail.com>\nDate:   Wed Dec 16 14:30:39 2020 +0900\n\n    feat: make trafficLightPosition work for customButtonOnHover (#26789)\n```\n\n----------------------------------------\n\nTITLE: Installing Electron with npm\nDESCRIPTION: Commands to install Electron as a development dependency in your application using npm package manager.\nSOURCE: https://github.com/electron/electron/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install electron --save-dev\n```\n\n----------------------------------------\n\nTITLE: Rebasing Branch with Upstream Changes\nDESCRIPTION: Commands to synchronize local branch with the main repository using git rebase.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git fetch upstream\n$ git rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Defining UploadData Object Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the UploadData object, including the bytes buffer for content, optional file path, and optional blob UUID. It also references the ses.getBlobData method for retrieving blob data.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/upload-data.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# UploadData Object\n\n* `bytes` Buffer - Content being sent.\n* `file` string (optional) - Path of file being uploaded.\n* `blobUUID` string (optional) - UUID of blob data. Use [ses.getBlobData](../session.md#sesgetblobdataidentifier) method\n  to retrieve the data.\n```\n\n----------------------------------------\n\nTITLE: Showing Tab Overview in Electron for macOS\nDESCRIPTION: Shows or hides the tab overview when native tabs are enabled in macOS.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nwin.showAllTabs()\n```\n\n----------------------------------------\n\nTITLE: Re-enabling webviewTag in Electron\nDESCRIPTION: This snippet shows how to re-enable the `webviewTag` feature in Electron when the default value changes to `false`. This is done through the `webPreferences` option of the `BrowserWindow` constructor.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_82\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst w = new BrowserWindow({\n  webPreferences: {\n    webviewTag: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Electron with unsafe permissions\nDESCRIPTION: Command to install Electron with the unsafe-perm flag set to true, which may be necessary if you encounter EACCESS errors during installation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo npm install electron --unsafe-perm=true\n```\n\n----------------------------------------\n\nTITLE: Defining ProtocolRequest Object Structure in Markdown\nDESCRIPTION: Defines the structure of a ProtocolRequest object with its properties including url, referrer, method, optional uploadData, and headers. Used in Electron for handling protocol-related requests.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/protocol-request.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `url` string\n* `referrer` string\n* `method` string\n* `uploadData` [UploadData[]](upload-data.md) (optional)\n* `headers` Record\\<string, string\\>\n```\n\n----------------------------------------\n\nTITLE: Handling Message Events with MessagePortMain\nDESCRIPTION: Event listener for receiving messages on a MessagePortMain object. Unlike DOM MessagePort, MessagePortMain uses Node.js EventEmitter pattern.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nport.on('message', (messageEvent) => {\n  // messageEvent contains:\n  // data - the message content\n  // ports - array of MessagePortMain objects\n})\n```\n\n----------------------------------------\n\nTITLE: Reading a File from ASAR Archive using Node.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to read a specific file from an ASAR archive using Node's fs module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require('node:fs')\nfs.readFileSync('/path/to/example.asar/file.txt')\n```\n\n----------------------------------------\n\nTITLE: Defining UploadFile Object Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the UploadFile object used in Electron. It includes the type, filePath, offset, length, and modificationTime properties, along with their data types and default values where applicable.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/upload-file.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# UploadFile Object\n\n* `type` 'file' - `file`.\n* `filePath` string - Path of file to be uploaded.\n* `offset` Integer (optional) - Defaults to `0`.\n* `length` Integer (optional) - Number of bytes to read from `offset`.\n  Defaults to `0`.\n* `modificationTime` Double (optional) - Last Modification time in\n  number of seconds since the UNIX epoch. Defaults to `0`.\n```\n\n----------------------------------------\n\nTITLE: Replacing the deprecated remote module in Electron (Deprecated)\nDESCRIPTION: Demonstrates the deprecated usage of the `remote` module in Electron 12, which is scheduled for removal in Electron 14. It imports BrowserWindow from electron's remote module. Developers should migrate to `@electron/remote`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated in Electron 12:\nconst { BrowserWindow } = require('electron').remote\n```\n\n----------------------------------------\n\nTITLE: Testing Electron Window Behavior with WebdriverIO\nDESCRIPTION: Example test that interacts with Electron's BrowserWindow API to verify window resizing functionality. It captures window bounds before and after clicking a button.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { browser, $, expect } from '@wdio/globals'\n\ndescribe('when the make smaller button is clicked', () => {\n  it('should decrease the window height and width by 10 pixels', async () => {\n    const boundsBefore = await browser.electron.browserWindow('getBounds')\n    expect(boundsBefore.width).toEqual(210)\n    expect(boundsBefore.height).toEqual(310)\n\n    await $('.make-smaller').click()\n    const boundsAfter = await browser.electron.browserWindow('getBounds')\n    expect(boundsAfter.width).toEqual(200)\n    expect(boundsAfter.height).toEqual(300)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: API Documentation for Session Module\nDESCRIPTION: Example of proper API documentation structure for a module with classes, including title, description, methods and events.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# session\n\n> Manage browser sessions, cookies, cache, proxy settings, etc.\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Symbol Path in Windbg for Electron\nDESCRIPTION: Sets up the basic symbol path in Windbg to use the Electron symbol server with a local cache directory.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-with-symbol-server.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSRV*c:\\code\\symbols\\*https://symbols.electronjs.org\n```\n\n----------------------------------------\n\nTITLE: Running Clang-Tidy on Specific File\nDESCRIPTION: Command to run clang-tidy analysis on a specific C++ source file. Shows how to target individual files for analysis while providing the required build output directory.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/clang-tidy.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint:clang-tidy --out-dir ../out/Testing shell/browser/api/electron_api_app.cc\n```\n\n----------------------------------------\n\nTITLE: Accessing TouchBarButton Properties\nDESCRIPTION: Shows how to access and modify TouchBarButton instance properties that control the button's appearance and behavior in the touch bar.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-button.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntouchBarButton.accessibilityLabel = 'Button Description';\ntouchBarButton.label = 'Button Text';\ntouchBarButton.backgroundColor = '#ABCDEF';\ntouchBarButton.icon = nativeImage;\ntouchBarButton.iconPosition = 'left';\ntouchBarButton.enabled = true;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application Name in Electron\nDESCRIPTION: The app.getName method returns the current application's name from the package.json file, with preference given to the productName field if available.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.getName()\n```\n\n----------------------------------------\n\nTITLE: Clearing User Tasks List in Electron\nDESCRIPTION: This snippet shows how to clear the user tasks list for the application's JumpList by passing an empty array to app.setUserTasks in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.setUserTasks([])\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Tracing in Electron\nDESCRIPTION: Code example demonstrating how to start recording tracing data, wait for a duration, and then stop recording. The example initializes tracing with all categories enabled, waits for 5 seconds, then stops the recording and logs the path where trace data is saved.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/content-tracing.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, contentTracing } = require('electron')\n\napp.whenReady().then(() => {\n  (async () => {\n    await contentTracing.startRecording({\n      included_categories: ['*']\n    })\n    console.log('Tracing started')\n    await new Promise(resolve => setTimeout(resolve, 5000))\n    const path = await contentTracing.stopRecording()\n    console.log('Tracing data recorded to ' + path)\n  })()\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Secure Content in Main Process with Electron BrowserWindow\nDESCRIPTION: Demonstrates the correct way to load content using HTTPS instead of HTTP in the main process. The example shows both insecure and secure approaches to loading URLs in a BrowserWindow.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\nbrowserWindow.loadURL('http://example.com')\n\n// Good\nbrowserWindow.loadURL('https://example.com')\n```\n\n----------------------------------------\n\nTITLE: Handling File System Access Restrictions in Electron\nDESCRIPTION: Illustrates how to create a BrowserWindow, load a URL, and handle file system access restrictions by listening to the 'file-system-access-restricted' event on the default session.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, dialog, BrowserWindow, session } = require('electron')\n\nasync function createWindow () {\n  const mainWindow = new BrowserWindow()\n\n  await mainWindow.loadURL('https://buzzfeed.com')\n\n  session.defaultSession.on('file-system-access-restricted', async (e, details, callback) => {\n    const { origin, path } = details\n    const { response } = await dialog.showMessageBox({\n      message: `Are you sure you want ${origin} to open restricted path ${path}?`,\n      title: 'File System Access Restricted',\n      buttons: ['Choose a different folder', 'Allow', 'Cancel'],\n      cancelId: 2\n    })\n\n    if (response === 0) {\n      callback('tryAgain')\n    } else if (response === 1) {\n      callback('allow')\n    } else {\n      callback('deny')\n    }\n  })\n\n  mainWindow.webContents.executeJavaScript(`\n    window.showDirectoryPicker({\n      id: 'electron-demo',\n      mode: 'readwrite',\n      startIn: 'downloads',\n    }).catch(e => {\n      console.log(e)\n    })`, true\n  )\n}\n\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\napp.on('window-all-closed', function () {\n  if (process.platform !== 'darwin') app.quit()\n})\n```\n\n----------------------------------------\n\nTITLE: Defining KeyboardInputEvent Object Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the KeyboardInputEvent object, including the event type and keyCode. It specifies the possible values for the type property and references the Accelerator documentation for valid key codes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/keyboard-input-event.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# KeyboardInputEvent Object extends `InputEvent`\n\n* `type` string - The type of the event, can be `rawKeyDown`, `keyDown`, `keyUp` or `char`.\n* `keyCode` string - The character that will be sent\n  as the keyboard event. Should only use the valid key codes in\n  [Accelerator](../accelerator.md).\n```\n\n----------------------------------------\n\nTITLE: Displaying Platform and Action Support Table in Markdown\nDESCRIPTION: This snippet presents a table that details the support for different action types across platforms. It includes information on platform support, usage of the 'text' property, default text values, and limitations for each action type.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/notification-action.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Action Type | Platform Support | Usage of `text` | Default `text` | Limitations |\n|-------------|------------------|-----------------|----------------|-------------|\n| `button`    | macOS            | Used as the label for the button | \"Show\" (or a localized string by system default if first of such `button`, otherwise empty) | Only the first one is used. If multiple are provided, those beyond the first will be listed as additional actions (displayed when mouse active over the action button). Any such action also is incompatible with `hasReply` and will be ignored if `hasReply` is `true`. |\n```\n\n----------------------------------------\n\nTITLE: Checking Payment Capability\nDESCRIPTION: Method to verify if user can make payments. Returns a boolean value.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninAppPurchase.canMakePayments()\n```\n\n----------------------------------------\n\nTITLE: CSS Manipulation in Webview\nDESCRIPTION: Methods to inject and remove CSS from the page loaded in the webview. Provides promise-based interfaces for tracking insertion and removal operations.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.insertCSS(css)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.removeInsertedCSS(key)\n```\n\n----------------------------------------\n\nTITLE: Configuring GN Build Files for Electron Module\nDESCRIPTION: Demonstrates how to add new API files to Electron's build configuration in filenames.gni, including platform-specific implementations.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nlib_sources = [\n    \"path/to/api/api_name.cc\",\n    \"path/to/api/api_name.h\",\n]\n\nlib_sources_mac = [\n    \"path/to/api/api_name_mac.h\",\n    \"path/to/api/api_name_mac.mm\",\n]\n\nlib_sources_win = [\n    \"path/to/api/api_name_win.cc\",\n    \"path/to/api/api_name_win.h\",\n]\n\nlib_sources_linux = [\n    \"path/to/api/api_name_linux.cc\",\n    \"path/to/api/api_name_linux.h\",\n]\n```\n\n----------------------------------------\n\nTITLE: Replacing BrowserWindow extension APIs with session APIs (GetAllExtensions)\nDESCRIPTION: Final part of extension API replacement. Demonstrates the removal of the `getExtensions` API and the replacement with `session.defaultSession.getAllExtensions`\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed in Electron 13\nBrowserWindow.getExtensions()\nBrowserWindow.getDevToolsExtensions()\n// Replace with\nsession.defaultSession.getAllExtensions()\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools for macOS\nDESCRIPTION: Command to install the Xcode Command Line Tools on macOS, which provides the necessary compilers and build tools (clang, clang++, and make) for building native Node.js addons.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: BrowserWindow extension getter API deprecation\nDESCRIPTION: The `BrowserWindow` extension APIs are deprecated and should be replaced with the `session` APIs. This snippet shows how to replace the deprecated API with `session.defaultSession.getAllExtensions`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_64\n\nLANGUAGE: js\nCODE:\n```\n// Deprecated in Electron 9\nBrowserWindow.getExtensions()\nBrowserWindow.getDevToolsExtensions()\n// Replace with\nsession.defaultSession.getAllExtensions()\n```\n\n----------------------------------------\n\nTITLE: Setting Background Material - Electron JavaScript\nDESCRIPTION: Sets the system-drawn background material for the window in Windows platforms. Several material options are available, with behavior constrained to Windows 11 22H2 and later.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setBackgroundMaterial(material)\n```\n\n----------------------------------------\n\nTITLE: Generating XCode Project using GN for Electron Debugging\nDESCRIPTION: Command to generate an XCode workspace for debugging Electron source code. This creates electron.ninja.xcworkspace which can be used for setting breakpoints and inspection, though it cannot be used to build code.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-with-xcode.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ gn gen out/Testing --ide=xcode\n```\n\n----------------------------------------\n\nTITLE: Documentation Lint Command\nDESCRIPTION: Command to verify documentation formatting.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/coding-style.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run lint:docs\n```\n\n----------------------------------------\n\nTITLE: Accessing TouchBarSegmentedControl Properties\nDESCRIPTION: Examples of accessing and modifying TouchBarSegmentedControl instance properties including segment style, segments array, selected index, and selection mode.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-segmented-control.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Accessing properties\ntouchBarSegmentedControl.segmentStyle = 'rounded';\ntouchBarSegmentedControl.segments = [];\ntouchBarSegmentedControl.selectedIndex = 1;\ntouchBarSegmentedControl.mode = 'multiple';\n```\n\n----------------------------------------\n\nTITLE: WebFrame NextSibling Property Definition\nDESCRIPTION: Read-only property that represents the next sibling frame. Returns null if webFrame is the last frame in its parent or if the next sibling is not in the current renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nwebFrame.nextSibling: WebFrame | null\n```\n\n----------------------------------------\n\nTITLE: Displaying Electron Scripts Directory Structure\nDESCRIPTION: Shows the organization of Electron's script directory which contains various utility scripts for development, testing, and release management purposes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/source-code-directory-structure.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nscript/ - The set of all scripts Electron runs for a variety of purposes.\n├── codesign/ - Fakes codesigning for Electron apps; used for testing.\n├── lib/ - Miscellaneous python utility scripts.\n└── release/ - Scripts run during Electron's release process.\n    ├── notes/ - Generates release notes for new Electron versions.\n    └── uploaders/ - Uploads various release-related files during release.\n```\n\n----------------------------------------\n\nTITLE: Setting Top BrowserView in Electron (Deprecated)\nDESCRIPTION: Raises a BrowserView above other BrowserViews attached to the window. Throws an error if the BrowserView is not attached to the window. This method is deprecated and replaced by WebContentsView.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setTopBrowserView(browserView)\n```\n\n----------------------------------------\n\nTITLE: Illustrating PrinterInfo Object Structure in JavaScript\nDESCRIPTION: This example demonstrates the structure of a PrinterInfo object, including core properties and various platform-specific options. It shows how printer information is represented, including network details, job settings, and printer state.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/printer-info.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'Austin_4th_Floor_Printer___C02XK13BJHD4',\n  displayName: 'Austin 4th Floor Printer @ C02XK13BJHD4',\n  description: 'TOSHIBA ColorMFP',\n  options: {\n    copies: '1',\n    'device-uri': 'dnssd://Austin%204th%20Floor%20Printer%20%40%20C02XK13BJHD4._ipps._tcp.local./?uuid=71687f1e-1147-3274-6674-22de61b110bd',\n    finishings: '3',\n    'job-cancel-after': '10800',\n    'job-hold-until': 'no-hold',\n    'job-priority': '50',\n    'job-sheets': 'none,none',\n    'marker-change-time': '0',\n    'number-up': '1',\n    'printer-commands': 'ReportLevels,PrintSelfTestPage,com.toshiba.ColourProfiles.update,com.toshiba.EFiling.update,com.toshiba.EFiling.checkPassword',\n    'printer-info': 'Austin 4th Floor Printer @ C02XK13BJHD4',\n    'printer-is-accepting-jobs': 'true',\n    'printer-is-shared': 'false',\n    'printer-is-temporary': 'false',\n    'printer-location': '',\n    'printer-make-and-model': 'TOSHIBA ColorMFP',\n    'printer-state': '3',\n    'printer-state-change-time': '1573472937',\n    'printer-state-reasons': 'offline-report,com.toshiba.snmp.failed',\n    'printer-type': '10531038',\n    'printer-uri-supported': 'ipp://localhost/printers/Austin_4th_Floor_Printer___C02XK13BJHD4',\n    system_driverinfo: 'T'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebRequestFilter Object Properties in Markdown\nDESCRIPTION: This snippet outlines the structure of a WebRequestFilter object, including the 'urls' array for URL patterns to include, optional 'excludeUrls' array for URL patterns to exclude, and optional 'types' array for filtering request types.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/web-request-filter.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# WebRequestFilter Object\n\n* `urls` string[] - Array of [URL patterns](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns) used to include requests that match these patterns. Use the pattern `<all_urls>` to match all URLs.\n* `excludeUrls` string[] (optional) - Array of [URL patterns](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns) used to exclude requests that match these patterns.\n* `types` string[] (optional) - Array of types that will be used to filter out the requests that do not match the types. When not specified, all types will be matched. Can be `mainFrame`, `subFrame`, `stylesheet`, `script`, `image`, `font`, `object`, `xhr`, `ping`, `cspReport`, `media` or `webSocket`.\n```\n\n----------------------------------------\n\nTITLE: WebFrame Register URL Scheme (Deprecated)\nDESCRIPTION: This snippet showcases the deprecated webFrame.registerURLSchemeAsSecure() and webFrame.registerURLSchemeAsPrivileged() methods and their replacement with protocol.registerStandardSchemes().  protocol.registerStandardSchemes() is now the recommended approach to register custom URL schemes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nwebFrame.registerURLSchemeAsSecure('app')\n// Replace with\nprotocol.registerStandardSchemes(['app'], { secure: true })\n\n// Deprecated\nwebFrame.registerURLSchemeAsPrivileged('app', { secure: true })\n// Replace with\nprotocol.registerStandardSchemes(['app'], { secure: true })\n```\n\n----------------------------------------\n\nTITLE: Replacing win.setMenu(null) with win.removeMenu() in Electron\nDESCRIPTION: This snippet demonstrates the replacement of the deprecated `win.setMenu(null)` with `win.removeMenu()` in Electron. The `setMenu(null)` function was used to remove the menu from a window, but it has been replaced with a more explicit `removeMenu()` function.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_75\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nwin.setMenu(null)\n// Replace with\nwin.removeMenu()\n```\n\n----------------------------------------\n\nTITLE: Adding a workspace to DevTools\nDESCRIPTION: This code snippet demonstrates how to add a workspace to the DevTools using `webContents.addWorkSpace`. It creates a BrowserWindow and adds the current directory (__dirname) to the DevTools workspace when DevTools is opened.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.webContents.on('devtools-opened', () => {\n  win.webContents.addWorkSpace(__dirname)\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Export Configuration\nDESCRIPTION: Configures module export in the browser API module list\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const browserModuleList: ElectronInternal.ModuleEntry[] = [\n  { name: 'apiName', loader: () => require('./api-name') },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating npm Directory Fix\nDESCRIPTION: Command to create missing npm directory to resolve ENOENT error during build process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-windows.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$ mkdir ~\\AppData\\Roaming\\npm\n```\n\n----------------------------------------\n\nTITLE: Text Manipulation in Webview\nDESCRIPTION: Methods to manipulate text in the webview, including replacing text, correcting misspellings, and inserting new text at the focused element.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.replace(text)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.replaceMisspelling(text)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.insertText(text)\n```\n\n----------------------------------------\n\nTITLE: Setting Touch Bar Layout - Electron JavaScript\nDESCRIPTION: Sets the layout of the touch bar for the current window, applicable only if the machine has a touch bar. Specifying null clears the touch bar configuration. This API is currently experimental.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setTouchBar(touchBar)\n```\n\n----------------------------------------\n\nTITLE: Removing a Handler with ipcMainServiceWorker.removeHandler()\nDESCRIPTION: Removes any handler for the specified channel if one is present. This is useful for cleaning up handlers that are no longer needed.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nipcMainServiceWorker.removeHandler(channel)\n```\n\n----------------------------------------\n\nTITLE: Menu Popup API Update\nDESCRIPTION: This snippet shows the removed usage of numerical parameters for menu.popup, replaced by an options object with x, y, and positioningItem properties. The updated method offers a more structured way to specify the popup's position and behavior.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed\nmenu.popup(browserWindow, 100, 200, 2)\n// Replaced with\nmenu.popup(browserWindow, { x: 100, y: 200, positioningItem: 2 })\n```\n\n----------------------------------------\n\nTITLE: Documenting Context Menu Event Parameters in Electron\nDESCRIPTION: Comprehensive documentation of the context-menu event parameters including coordinates, URLs, media flags, edit flags, and various contextual properties. This event is emitted when a new context menu needs to be handled in an Electron application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n### Event: 'context-menu'\n\nReturns:\n\n* `params` Object\n  * `x` Integer - x coordinate.\n  * `y` Integer - y coordinate.\n  * `linkURL` string - URL of the link that encloses the node the context menu\n    was invoked on.\n  * `linkText` string - Text associated with the link. May be an empty\n    string if the contents of the link are an image.\n  * `pageURL` string - URL of the top level page that the context menu was\n    invoked on.\n  * `frameURL` string - URL of the subframe that the context menu was invoked\n    on.\n  * `srcURL` string - Source URL for the element that the context menu\n    was invoked on. Elements with source URLs are images, audio and video.\n  * `mediaType` string - Type of the node the context menu was invoked on. Can\n    be `none`, `image`, `audio`, `video`, `canvas`, `file` or `plugin`.\n  * `hasImageContents` boolean - Whether the context menu was invoked on an image\n    which has non-empty contents.\n  * `isEditable` boolean - Whether the context is editable.\n  * `selectionText` string - Text of the selection that the context menu was\n    invoked on.\n  * `titleText` string - Title text of the selection that the context menu was\n    invoked on.\n  * `altText` string - Alt text of the selection that the context menu was\n    invoked on.\n  * `suggestedFilename` string - Suggested filename to be used when saving file through 'Save\n    Link As' option of context menu.\n  * `selectionRect` [Rectangle](structures/rectangle.md) - Rect representing the coordinates in the document space of the selection.\n  * `selectionStartOffset` number - Start position of the selection text.\n  * `referrerPolicy` [Referrer](structures/referrer.md) - The referrer policy of the frame on which the menu is invoked.\n  * `misspelledWord` string - The misspelled word under the cursor, if any.\n  * `dictionarySuggestions` string[] - An array of suggested words to show the\n    user to replace the `misspelledWord`.  Only available if there is a misspelled\n    word and spellchecker is enabled.\n  * `frameCharset` string - The character encoding of the frame on which the\n    menu was invoked.\n  * `formControlType` string - The source that the context menu was invoked on.\n    Possible values include `none`, `button-button`, `field-set`,\n    `input-button`, `input-checkbox`, `input-color`, `input-date`,\n    `input-datetime-local`, `input-email`, `input-file`, `input-hidden`,\n    `input-image`, `input-month`, `input-number`, `input-password`, `input-radio`,\n    `input-range`, `input-reset`, `input-search`, `input-submit`, `input-telephone`,\n    `input-text`, `input-time`, `input-url`, `input-week`, `output`, `reset-button`,\n    `select-list`, `select-list`, `select-multiple`, `select-one`, `submit-button`,\n    and `text-area`,\n  * `spellcheckEnabled` boolean - If the context is editable, whether or not spellchecking is enabled.\n  * `menuSourceType` string - Input source that invoked the context menu.\n    Can be `none`, `mouse`, `keyboard`, `touch`, `touchMenu`, `longPress`, `longTap`, `touchHandle`, `stylus`, `adjustSelection`, or `adjustSelectionReset`.\n  * `mediaFlags` Object - The flags for the media element the context menu was\n    invoked on.\n    * `inError` boolean - Whether the media element has crashed.\n    * `isPaused` boolean - Whether the media element is paused.\n    * `isMuted` boolean - Whether the media element is muted.\n    * `hasAudio` boolean - Whether the media element has audio.\n    * `isLooping` boolean - Whether the media element is looping.\n    * `isControlsVisible` boolean - Whether the media element's controls are\n      visible.\n    * `canToggleControls` boolean - Whether the media element's controls are\n      toggleable.\n    * `canPrint` boolean - Whether the media element can be printed.\n    * `canSave` boolean - Whether or not the media element can be downloaded.\n    * `canShowPictureInPicture` boolean - Whether the media element can show picture-in-picture.\n    * `isShowingPictureInPicture` boolean - Whether the media element is currently showing picture-in-picture.\n    * `canRotate` boolean - Whether the media element can be rotated.\n    * `canLoop` boolean - Whether the media element can be looped.\n  * `editFlags` Object - These flags indicate whether the renderer believes it\n    is able to perform the corresponding action.\n    * `canUndo` boolean - Whether the renderer believes it can undo.\n    * `canRedo` boolean - Whether the renderer believes it can redo.\n    * `canCut` boolean - Whether the renderer believes it can cut.\n    * `canCopy` boolean - Whether the renderer believes it can copy.\n    * `canPaste` boolean - Whether the renderer believes it can paste.\n    * `canDelete` boolean - Whether the renderer believes it can delete.\n    * `canSelectAll` boolean - Whether the renderer believes it can select all.\n    * `canEditRichly` boolean - Whether the renderer believes it can edit text richly.\n```\n\n----------------------------------------\n\nTITLE: Checking if Clipboard Supports a Format in Electron\nDESCRIPTION: Demonstrates how to check if the clipboard supports a specific format using the experimental clipboard.has() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nconst hasFormat = clipboard.has('public/utf8-plain-text')\nconsole.log(hasFormat)\n// 'true' or 'false'\n```\n\n----------------------------------------\n\nTITLE: Defining PreloadScriptRegistration Object Structure in Markdown\nDESCRIPTION: This snippet describes the structure of the PreloadScriptRegistration object, including its properties and their types. It specifies the context type, optional ID, and required file path for preload scripts in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/preload-script-registration.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PreloadScriptRegistration Object\n\n* `type` string - Context type where the preload script will be executed.\n  Possible values include `frame` or `service-worker`.\n* `id` string (optional) - Unique ID of preload script. Defaults to a random UUID.\n* `filePath` string - Path of the script file. Must be an absolute path.\n```\n\n----------------------------------------\n\nTITLE: Defining Referrer Object Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the Referrer object in Electron. It specifies the 'url' property as a string representing the HTTP Referrer URL, and the 'policy' property as a string with possible values and their meanings.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/referrer.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `url` string - HTTP Referrer URL.\n* `policy` string - Can be `default`, `unsafe-url`,\n  `no-referrer-when-downgrade`, `no-referrer`, `origin`,\n  `strict-origin-when-cross-origin`, `same-origin` or `strict-origin`.\n  See the [Referrer-Policy spec][1] for more details on the\n  meaning of these values.\n```\n\n----------------------------------------\n\nTITLE: macOS Info.plist Configuration for ASAR Integrity\nDESCRIPTION: This XML snippet shows how to configure the ASAR integrity settings in the Info.plist file for a macOS application, including the algorithm and hash values.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>ElectronAsarIntegrity</key>\n<dict>\n  <key>Resources/app.asar</key>\n  <dict>\n    <key>algorithm</key>\n    <string>SHA256</string>\n    <key>hash</key>\n    <string>9d1f61ea03c4bb62b4416387a521101b81151da0cfbe18c9f8c8b818c5cebfac</string>\n  </dict>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Webview DevTools Access Example\nDESCRIPTION: JavaScript code showing how to access DevTools for a webview element after it has loaded.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst webview = document.querySelector('webview')\nwebview.addEventListener('dom-ready', () => {\n  webview.openDevTools()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta 2 Command for MacOS arm64\nDESCRIPTION: Command to install Rosetta 2 on arm64 machines for cross-compilation support between x64 and arm64 architectures.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-macos.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ softwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Listener with ipcMainServiceWorker.removeListener()\nDESCRIPTION: Removes a specified listener function from the listener array for a particular channel, maintaining other listeners that might be registered for the same channel.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nipcMainServiceWorker.removeListener(channel, listener)\n```\n\n----------------------------------------\n\nTITLE: WebFrame setZoomLevelLimits Update\nDESCRIPTION: This snippet shows the removed webFrame.setZoomLevelLimits(1, 2) replaced with webFrame.setVisualZoomLevelLimits(1, 2). The method name was updated to include 'Visual' to clarify its purpose.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed\nwebFrame.setZoomLevelLimits(1, 2)\n// Replaced with\nwebFrame.setVisualZoomLevelLimits(1, 2)\n```\n\n----------------------------------------\n\nTITLE: Documenting Prepare for Release Script in Markdown\nDESCRIPTION: Details the 'prepare-for-release' script, which creates git tags and initiates release builds on GitHub Actions.\nSOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `prepare-for-release`\n\nThis script creates all the requisite tags and CI builds that will populate required release assets.\n\n* Creates the git tag\n* Kicks off all release builds on GitHub Actions\n```\n\n----------------------------------------\n\nTITLE: WebView Configuration Examples in Electron\nDESCRIPTION: Examples showing insecure and secure ways to configure WebView elements in HTML, demonstrating why Node.js integration should be disabled.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Bad -->\n<webview nodeIntegration src=\"page.html\"></webview>\n\n<!-- Good -->\n<webview src=\"page.html\"></webview>\n```\n\n----------------------------------------\n\nTITLE: Starting Message Queue in MessagePortMain\nDESCRIPTION: Starts the sending of messages queued on the port. Messages will be queued until this method is called.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nport.start()\n```\n\n----------------------------------------\n\nTITLE: Defining UploadRawData Object Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the UploadRawData object. It specifies the type of data and the buffer containing the actual data to be uploaded.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/upload-raw-data.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# UploadRawData Object\n\n* `type` 'rawData' - `rawData`.\n* `bytes` Buffer - Data to be uploaded.\n```\n\n----------------------------------------\n\nTITLE: Merging All Windows - Electron JavaScript\nDESCRIPTION: Merges multiple open windows into a single window with multiple tabs in macOS. This function enhances organization for users with multiple windows open.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nwin.mergeAllWindows()\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Electron Development\nDESCRIPTION: Commands to fork and clone the Electron repository, set up remote tracking, and fetch upstream changes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone git@github.com:username/electron.git\n$ cd electron\n$ git remote add upstream https://github.com/electron/electron.git\n$ git fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Texture in OpenGL (macOS)\nDESCRIPTION: This snippet illustrates how to import a shared texture handle into an OpenGL rendering program on macOS. It covers creating a texture from an IOSurface and setting up the necessary OpenGL parameters.\nSOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n// macOS\nIOSurfaceRef handle = *reinterpret_cast<IOSurfaceRef*>(handleBufferData);\n\n// Assume you have created a GL context.\n\nGLuint io_surface_tex;\nglGenTextures(1, &io_surface_tex);\nglEnable(GL_TEXTURE_RECTANGLE_ARB);\nglBindTexture(GL_TEXTURE_RECTANGLE_ARB, io_surface_tex);\n\nCGLContextObj cgl_context = CGLGetCurrentContext();\n\nGLsizei width = (GLsizei)IOSurfaceGetWidth(io_surface);\nGLsizei height = (GLsizei)IOSurfaceGetHeight(io_surface);\n\nCGLTexImageIOSurface2D(cgl_context, GL_TEXTURE_RECTANGLE_ARB, GL_RGBA8, width,\n                        height, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV,\n                        io_surface, 0);\n\nglTexParameteri(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\nglTexParameteri(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\nglBindTexture(GL_TEXTURE_RECTANGLE_ARB, 0);\n\n// Copy to a intermediate texture from io_surface_tex\n// ...\n```\n\n----------------------------------------\n\nTITLE: Deprecated API - Go to Offset\nDESCRIPTION: This YAML snippet provides deprecation details for the `contents.goToOffset(offset)` API in Electron, including the pull request URL and breaking changes header.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\ndeprecated:\n  - pr-url: https://github.com/electron/electron/pull/41752\n    breaking-changes-header: deprecated-clearhistory-cangoback-goback-cangoforward-goforward-gotoindex-cangotooffset-gotooffset-on-webcontents\n```\n\n----------------------------------------\n\nTITLE: Handling Close Events with MessagePortMain\nDESCRIPTION: Event listener for detecting when the remote end of a MessagePortMain object becomes disconnected.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nport.on('close', () => {\n  // Handle port closing\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Win32 GUI with Headers, Structures and TodoItem Implementation\nDESCRIPTION: Sets up necessary headers, links required libraries, and defines the TodoItem structure with a method to convert to JSON format. This provides the foundation for the Win32 GUI application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n#include <windows.h>\n#include <windowsx.h>\n#include <string>\n#include <functional>\n#include <chrono>\n#include <vector>\n#include <commctrl.h>\n#include <shellscalingapi.h>\n#include <thread>\n\n#pragma comment(lib, \"comctl32.lib\")\n#pragma comment(linker, \"\\\"/manifestdependency:type='win32' \\\nname='Microsoft.Windows.Common-Controls' version='6.0.0.0' \\\nprocessorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'\\\"\") \n\nusing TodoCallback = std::function<void(const std::string &)>;\n\nstatic TodoCallback g_todoAddedCallback;\n\nstruct TodoItem\n{\n  GUID id;\n  std::wstring text;\n  int64_t date;\n\n  std::string toJson() const\n  {\n    OLECHAR *guidString;\n    StringFromCLSID(id, &guidString);\n    std::wstring widGuid(guidString);\n    CoTaskMemFree(guidString);\n\n    // Convert wide string to narrow for JSON\n    std::string guidStr(widGuid.begin(), widGuid.end());\n    std::string textStr(text.begin(), text.end());\n\n    return \"{\"\n           \"\\\"id\\\":\\\"\" + guidStr + \"\\\",\"\n           \"\\\"text\\\":\\\"\" + textStr + \"\\\",\"\n           \"\\\"date\\\":\" + std::to_string(date) +\n           \"}\";\n  }\n};\n\nnamespace cpp_code\n{\n  // More code to follow later...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Visual Studio Project with GN\nDESCRIPTION: Command to generate Visual Studio 2017 project files using GN build system.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-windows.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$ gn gen out/Testing --ide=vs2017\n```\n\n----------------------------------------\n\nTITLE: Defining Point Object Structure in Markdown\nDESCRIPTION: Defines the structure of a Point object with x and y numeric properties. It also includes a note about automatic rounding of x and y values to whole integers when used in Electron APIs.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/point.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Point Object\n\n* `x` number\n* `y` number\n\n**Note:** Both `x` and `y` must be whole integers, when providing a point object\nas input to an Electron API we will automatically round your `x` and `y` values\nto the nearest whole integer.\n```\n\n----------------------------------------\n\nTITLE: Menu Structure Output with Group Positioning\nDESCRIPTION: Displays the resulting menu structure from the advanced template using group positioning, showing how items are arranged with separators between groups.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n- 3\n- 4\n- ---\n- 1\n- ---\n- 2\n```\n\n----------------------------------------\n\nTITLE: Restoring Utility Process crash on unhandled rejection in Electron\nDESCRIPTION: This JavaScript code snippet restores the previous behavior of crashing Utility Processes when an unhandled rejection occurs, instead of issuing a warning.  It attaches an 'unhandledRejection' event listener to the process and exits the process with code 1 if an unhandled rejection is caught. This provides a way to maintain existing error handling behavior.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nprocess.on('unhandledRejection', () => {\n  process.exit(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Merging All Windows into Tabs in Electron for macOS\nDESCRIPTION: Merges all open windows into one window with multiple tabs when native tabs are enabled and there are multiple open windows.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nwin.mergeAllWindows()\n```\n\n----------------------------------------\n\nTITLE: Checking Navigation State - Electron NavigationHistory\nDESCRIPTION: Methods to check if navigation actions are possible in the browser history.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnavigationHistory.canGoBack()\nnavigationHistory.canGoForward()\nnavigationHistory.canGoToOffset(offset)\n```\n\n----------------------------------------\n\nTITLE: Deprecated API - Go to Index\nDESCRIPTION: This YAML snippet shows the deprecation information for the `contents.goToIndex(index)` API in Electron, pointing to the relevant pull request and breaking changes header.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\ndeprecated:\n  - pr-url: https://github.com/electron/electron/pull/41752\n    breaking-changes-header: deprecated-clearhistory-cangoback-goback-cangoforward-goforward-gotoindex-cangotooffset-gotooffset-on-webcontents\n```\n\n----------------------------------------\n\nTITLE: Moving Tab to New Window in Electron for macOS\nDESCRIPTION: Moves the current tab into a new window when native tabs are enabled and there are multiple tabs in the current window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nwin.moveTabToNewWindow()\n```\n\n----------------------------------------\n\nTITLE: Defining TraceCategoriesAndOptions Object Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the TraceCategoriesAndOptions object, detailing its properties 'categoryFilter' and 'traceOptions'. It explains how to use these properties to configure tracing behavior, including filtering categories and setting trace recording modes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/trace-categories-and-options.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# TraceCategoriesAndOptions Object\n\n* `categoryFilter` string - A filter to control what category groups\n  should be traced. A filter can have an optional '-' prefix to exclude\n  category groups that contain a matching category. Having both included\n  and excluded category patterns in the same list is not supported. Examples:\n  `test_MyTest*`, `test_MyTest*,test_OtherStuff`, `-excluded_category1,-excluded_category2`.\n* `traceOptions` string - Controls what kind of tracing is enabled,\n  it is a comma-delimited sequence of the following strings:\n  `record-until-full`, `record-continuously`, `trace-to-console`, `enable-sampling`, `enable-systrace`,\n  e.g. `'record-until-full,enable-sampling'`.\n  The first 3 options are trace recording modes and hence mutually exclusive.\n  If more than one trace recording modes appear in the `traceOptions` string,\n  the last one takes precedence. If none of the trace recording modes are\n  specified, recording mode is `record-until-full`.\n  The trace option will first be reset to the default option (`record_mode` set\n  to `record-until-full`, `enable_sampling` and `enable_systrace`\n  set to `false`) before options parsed from `traceOptions` are applied on it.\n```\n\n----------------------------------------\n\nTITLE: Handling Client Certificate Selection in Electron\nDESCRIPTION: This snippet demonstrates how to handle the 'select-client-certificate' event in an Electron application. It prevents the default behavior of using the first certificate and explicitly selects the first certificate from the provided list.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\n\napp.on('select-client-certificate', (event, webContents, url, list, callback) => {\n  event.preventDefault()\n  callback(list[0])\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing TouchBarLabel with Options\nDESCRIPTION: Constructor for creating a new TouchBarLabel instance with configurable options for label text, accessibility label, and text color.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-label.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew TouchBarLabel({\n  label: 'My Label',\n  accessibilityLabel: 'Description for screen readers',\n  textColor: '#ABCDEF'\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Snapcraft Configuration\nDESCRIPTION: Extended Snapcraft YAML configuration showing desktop application setup with dependencies and environment configuration.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: myApp\nversion: '2.0.0'\nsummary: A little description for the app.\ndescription: |\n You know what? This app is amazing! It does all the things\n for you. Some say it keeps you young, maybe even happy.\n\ngrade: stable\nconfinement: classic\n\nparts:\n  slack:\n    plugin: dump\n    source: my-deb.deb\n    source-type: deb\n    after:\n      - desktop-gtk3\n    stage-packages:\n      - libasound2\n      - libnotify4\n      - libnspr4\n      - libnss3\n      - libpcre3\n      - libpulse0\n      - libxss1\n      - libxtst6\n  electron-launch:\n    plugin: dump\n    source: files/\n    prepare: |\n      chmod +x bin/electron-launch\n\napps:\n  myApp:\n    command: bin/electron-launch $SNAP/usr/lib/myApp/myApp\n    desktop: usr/share/applications/myApp.desktop\n    environment:\n      TMPDIR: $XDG_RUNTIME_DIR\n```\n\n----------------------------------------\n\nTITLE: Decrement Capturer Count: Deprecated in Electron 23\nDESCRIPTION: This snippet demonstrates the deprecated `webContents.decrementCapturerCount()` method, which is now automatically handled by `webContents.capturePage`. The code shows how to replace the old method with the new approach by only using `webContents.capturePage()`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst w = new BrowserWindow({ show: false })\n\n// Removed in Electron 23\nw.webContents.incrementCapturerCount()\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n  w.webContents.decrementCapturerCount()\n})\n\n// Replace with\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n})\n```\n\n----------------------------------------\n\nTITLE: Setting LLDB Breakpoint\nDESCRIPTION: Example of setting a breakpoint in browser.cc file for debugging the Browser::SetName() function.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n(lldb) breakpoint set --file browser.cc --line 117\nBreakpoint 1: where = Electron Framework`atom::Browser::SetName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) + 20 at browser.cc:118, address = 0x000000000015fdb4\n```\n\n----------------------------------------\n\nTITLE: Verifying WebView Options in Main Process\nDESCRIPTION: Shows how to control WebView creation by validating webPreferences and URL parameters before attachment.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\napp.on('web-contents-created', (event, contents) => {\n  contents.on('will-attach-webview', (event, webPreferences, params) => {\n    // Strip away preload scripts if unused or verify their location is legitimate\n    delete webPreferences.preload\n\n    // Disable Node.js integration\n    webPreferences.nodeIntegration = false\n\n    // Verify URL being loaded\n    if (!params.src.startsWith('https://example.com/')) {\n      event.preventDefault()\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: macOS Application Structure\nDESCRIPTION: Illustrates the file structure required for a macOS Electron application. It shows where to place the `package.json`, `main.js`, and `index.html` files within the Electron application bundle. These files form the core of the Electron application and are essential for the application to function.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n\"electron/Electron.app/Contents/Resources/app/\n├── package.json\n├── main.js\n└── index.html\"\n```\n\n----------------------------------------\n\nTITLE: Defining ProductSubscriptionPeriod Object Structure in Electron\nDESCRIPTION: Defines the structure of a ProductSubscriptionPeriod object which contains two properties: numberOfUnits (number) that specifies the quantity of time units, and unit (string) that specifies the type of time increment (day, week, month, or year).\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/product-subscription-period.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ProductSubscriptionPeriod Object\n\n* `numberOfUnits` number - The number of units per subscription period.\n* `unit` string - The increment of time that a subscription period is specified in. Can be `day`, `week`, `month`, `year`.\n```\n\n----------------------------------------\n\nTITLE: Getting Window Button Position - Electron JavaScript\nDESCRIPTION: Returns the current custom position of the traffic light buttons in a frameless window on macOS or null if no custom position is set.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nwin.getWindowButtonPosition()\n```\n\n----------------------------------------\n\nTITLE: Initializing TouchBarSlider Constructor\nDESCRIPTION: Creates a new TouchBarSlider instance with configurable options including label, value range, and change callback function.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-slider.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew TouchBarSlider({\n  label: 'Slider Label',\n  value: 50,\n  minValue: 0,\n  maxValue: 100,\n  change: (newValue) => {\n    console.log(`Slider value changed to ${newValue}`);\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing ARM64 Cross-Compilation Dependencies\nDESCRIPTION: Commands to install dependencies for cross-compiling to ARM64 architecture.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install libc6-dev-arm64-cross linux-libc-dev-arm64-cross \\\n                       g++-aarch64-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Extension Object Properties in Electron\nDESCRIPTION: The properties available on the Extension object in Electron, which represents a Chrome extension. It includes identifiers, path information, metadata from the manifest, and the chrome-extension URL.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/extension.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `id` string\n* `manifest` any - Copy of the [extension's manifest data](https://developer.chrome.com/extensions/manifest).\n* `name` string\n* `path` string - The extension's file path.\n* `version` string\n* `url` string - The extension's `chrome-extension://` URL.\n```\n\n----------------------------------------\n\nTITLE: Creating a BaseWindow Instance in JavaScript\nDESCRIPTION: Demonstrates how to create a new BaseWindow instance with specified dimensions using the Electron module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BaseWindow } = require('electron')\n// In this example `win` is our instance\nconst win = new BaseWindow({ width: 800, height: 600 })\n```\n\n----------------------------------------\n\nTITLE: Bouncing an App Icon in the macOS Dock with Electron\nDESCRIPTION: Example showing how to bounce your application's icon in the macOS dock using Electron's API. The optional chaining operator ensures the code works even if the dock API is not available on the current platform.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/dock.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\napp.dock?.bounce()\n```\n\n----------------------------------------\n\nTITLE: Defining IpcMainServiceWorkerInvokeEvent Object Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the IpcMainServiceWorkerInvokeEvent object, which extends the Event object. It includes the type, serviceWorker, versionId, and session properties, along with their descriptions and types.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/ipc-main-service-worker-invoke-event.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# IpcMainServiceWorkerInvokeEvent Object extends `Event`\n\n* `type` String - Possible values include `service-worker`.\n* `serviceWorker` [ServiceWorkerMain](../service-worker-main.md) _Readonly_ - The service worker that sent this message\n* `versionId` Number - The service worker version ID.\n* `session` Session - The [`Session`](../session.md) instance with which the event is associated.\n```\n\n----------------------------------------\n\nTITLE: Creating Linux Notifications with Custom Urgency\nDESCRIPTION: Example demonstrating Linux-specific notification options including urgency levels. This code shows how to set notification priority on Linux systems.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Notification } = require('electron');\n\n// Create a Linux notification with critical urgency\nconst notification = new Notification({\n  title: 'System Alert',\n  body: 'Critical system update required',\n  urgency: 'critical',  // Can be 'normal', 'critical', or 'low'\n  timeoutType: 'never'  // Won't time out automatically\n});\n\n// Show the notification\nnotification.show();\n\n// Close the notification programmatically after 10 seconds\nsetTimeout(() => {\n  notification.close();\n}, 10000);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows Console for Electron\nDESCRIPTION: Example of setting the ELECTRON_ENABLE_LOGGING environment variable to true in Windows PowerShell before launching Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n> set ELECTRON_ENABLE_LOGGING=true\n> electron\n```\n\n----------------------------------------\n\nTITLE: Using a Module from ASAR Archive in Node.js\nDESCRIPTION: This snippet demonstrates how to require a JavaScript module located in an ASAR archive.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire('./path/to/example.asar/dir/module.js')\n```\n\n----------------------------------------\n\nTITLE: Complete Objective-C++ Addon Implementation\nDESCRIPTION: This snippet showcases the complete implementation of the Objective-C++ addon, including the class definition, initialization, method bindings, and callback handling. It establishes a thread-safe communication mechanism between Objective-C and JavaScript using Napi and threadsafe functions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_18\n\nLANGUAGE: objectivec\nCODE:\n```\n#include <napi.h>\n#include <string>\n#include \"../include/objc_code.h\"\n\nclass ObjcAddon : public Napi::ObjectWrap<ObjcAddon> {\npublic:\n    static Napi::Object Init(Napi::Env env, Napi::Object exports) {\n        Napi::Function func = DefineClass(env, \"ObjcMacosAddon\", {\n            InstanceMethod(\"helloWorld\", &ObjcAddon::HelloWorld),\n            InstanceMethod(\"helloGui\", &ObjcAddon::HelloGui),\n            InstanceMethod(\"on\", &ObjcAddon::On)\n        });\n\n        Napi::FunctionReference* constructor = new Napi::FunctionReference();\n        *constructor = Napi::Persistent(func);\n        env.SetInstanceData(constructor);\n\n        exports.Set(\"ObjcMacosAddon\", func);\n        return exports;\n    }\n\n    struct CallbackData {\n        std::string eventType;\n        std::string payload;\n        ObjcAddon* addon;\n    };\n\n    ObjcAddon(const Napi::CallbackInfo& info)\n        : Napi::ObjectWrap<ObjcAddon>(info)\n        , env_(info.Env())\n        , emitter(Napi::Persistent(Napi::Object::New(info.Env())))\n        , callbacks(Napi::Persistent(Napi::Object::New(info.Env())))\n        , tsfn_(nullptr) {\n\n        napi_status status = napi_create_threadsafe_function(\n            env_,\n            nullptr,\n            nullptr,\n            Napi::String::New(env_, \"ObjcCallback\"),\n            0,\n            1,\n            nullptr,\n            nullptr,\n            this,\n            [](napi_env env, napi_value js_callback, void* context, void* data) {\n                auto* callbackData = static_cast<CallbackData*>(data);\n                if (!callbackData) return;\n\n                Napi::Env napi_env(env);\n                Napi::HandleScope scope(napi_env);\n\n                auto addon = static_cast<ObjcAddon*>(context);\n                if (!addon) {\n                    delete callbackData;\n                    return;\n                }\n\n                try {\n                    auto callback = addon->callbacks.Value().Get(callbackData->eventType).As<Napi::Function>();\n                    if (callback.IsFunction()) {\n                        callback.Call(addon->emitter.Value(), {Napi::String::New(napi_env, callbackData->payload)});\n                    }\n                } catch (...) {}\n\n                delete callbackData;\n            },\n            &tsfn_\n        );\n\n        if (status != napi_ok) {\n            Napi::Error::New(env_, \"Failed to create threadsafe function\").ThrowAsJavaScriptException();\n            return;\n        }\n\n        // Set up the callbacks\n        auto makeCallback = [this](const std::string& eventType) {\n            return [this, eventType](const std::string& payload) {\n                if (tsfn_ != nullptr) {\n                    auto* data = new CallbackData{\n                        eventType,\n                        payload,\n                        this\n                    };\n                    napi_call_threadsafe_function(tsfn_, data, napi_tsfn_blocking);\n                }\n            };\n        };\n\n        objc_code::setTodoAddedCallback(makeCallback(\"todoAdded\"));\n    }\n\n    ~ObjcAddon() {\n        if (tsfn_ != nullptr) {\n            napi_release_threadsafe_function(tsfn_, napi_tsfn_release);\n            tsfn_ = nullptr;\n        }\n    }\n\nprivate:\n    Napi::Env env_;\n    Napi::ObjectReference emitter;\n    Napi::ObjectReference callbacks;\n    napi_threadsafe_function tsfn_;\n\n    Napi::Value HelloWorld(const Napi::CallbackInfo& info) {\n        Napi::Env env = info.Env();\n\n        if (info.Length() < 1 || !info[0].IsString()) {\n            Napi::TypeError::New(env, \"Expected string argument\").ThrowAsJavaScriptException();\n            return env.Null();\n        }\n\n        std::string input = info[0].As<Napi::String>();\n        std::string result = objc_code::hello_world(input);\n\n        return Napi::String::New(env, result);\n    }\n\n    void HelloGui(const Napi::CallbackInfo& info) {\n        objc_code::hello_gui();\n    }\n\n    Napi::Value On(const Napi::CallbackInfo& info) {\n        Napi::Env env = info.Env();\n\n        if (info.Length() < 2 || !info[0].IsString() || !info[1].IsFunction()) {\n            Napi::TypeError::New(env, \"Expected (string, function) arguments\").ThrowAsJavaScriptException();\n            return env.Undefined();\n        }\n\n        callbacks.Value().Set(info[0].As<Napi::String>(), info[1].As<Napi::Function>());\n        return env.Undefined();\n    }\n};\n\nNapi::Object Init(Napi::Env env, Napi::Object exports) {\n    return ObjcAddon::Init(env, exports);\n}\n\nNODE_API_MODULE(objc_addon, Init)\n```\n\n----------------------------------------\n\nTITLE: Skipping Electron binary download with npm\nDESCRIPTION: Command to install project dependencies without downloading the Electron binary. Useful in CI environments or when you only need to use mocked Electron functionality.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nELECTRON_SKIP_BINARY_DOWNLOAD=1 npm install\n```\n\n----------------------------------------\n\nTITLE: Finding commit using grep and git blame in Bash\nDESCRIPTION: These bash commands demonstrate how to use `grep` and `git blame` to find the commit associated with the deprecation of `BrowserWindow.getTrafficLightPosition()`. The commands help identify the pull request that introduced the breaking change.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ grep -n \"BrowserWindow.getTrafficLightPosition\" docs/breaking-changes.md \n523:### Deprecated: `BrowserWindow.getTrafficLightPosition()`\n525:`BrowserWindow.getTrafficLightPosition()` has been deprecated, the\n\n$ git blame -L523,524 -- docs/breaking-changes.md\n1e206deec3e (Keeley Hammond 2023-04-06 21:23:29 -0700 523) ### Deprecated: `BrowserWindow.getTrafficLightPosition()`\n1e206deec3e (Keeley Hammond 2023-04-06 21:23:29 -0700 524)\n\n$ git log -1 1e206deec3e\ncommit 1e206deec3ef142460c780307752a84782f9baed (tag: v26.0.0-nightly.20230407)\nAuthor: Keeley Hammond <vertedinde@electronjs.org>\nDate:   Thu Apr 6 21:23:29 2023 -0700\n\n    docs: update E24/E25 breaking changes (#37878) <-- This is the associated Pull Request\n```\n\n----------------------------------------\n\nTITLE: Accessing Electron App Metadata in WebdriverIO Tests\nDESCRIPTION: Example test that retrieves application metadata through Electron APIs. It compares app name and version with values from package.json and verifies command-line arguments.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport { browser, expect } from '@wdio/globals'\n\nconst packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), { encoding: 'utf-8' }))\nconst { name, version } = packageJson\n\ndescribe('electron APIs', () => {\n  it('should retrieve app metadata through the electron API', async () => {\n    const appName = await browser.electron.app('getName')\n    expect(appName).toEqual(name)\n    const appVersion = await browser.electron.app('getVersion')\n    expect(appVersion).toEqual(version)\n  })\n\n  it('should pass args through to the launched application', async () => {\n    // custom args are set in the wdio.conf.js file as they need to be set before WDIO starts\n    const argv = await browser.electron.mainProcess('argv')\n    expect(argv).toContain('--foo')\n    expect(argv).toContain('--bar=baz')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining SegmentedControlSegment Object Properties in Electron\nDESCRIPTION: Specification of the properties available for configuring a segment within a segmented control in Electron applications. Properties include label text, icon image, and enabled state with their types and defaults.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/segmented-control-segment.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `label` string (optional) - The text to appear in this segment.\n* `icon` NativeImage (optional) - The image to appear in this segment.\n* `enabled` boolean (optional) - Whether this segment is selectable. Default: true.\n```\n\n----------------------------------------\n\nTITLE: Replacing app.releaseSingleInstance with app.releaseSingleInstanceLock in Electron\nDESCRIPTION: This snippet shows the replacement of the deprecated `app.releaseSingleInstance` with `app.releaseSingleInstanceLock` in Electron. This change aligns with the new single instance lock API introduced.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_88\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\napp.releaseSingleInstance()\n// Replace with\napp.releaseSingleInstanceLock()\n```\n\n----------------------------------------\n\nTITLE: Audio Control in Webview\nDESCRIPTION: Methods to manage audio state in the webview, including muting and checking the current audio state.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.setAudioMuted(muted)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.isAudioMuted()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.isCurrentlyAudible()\n```\n\n----------------------------------------\n\nTITLE: Accessing Incorrectly Exposed API in Renderer\nDESCRIPTION: This snippet shows what happens when trying to access an API that was incorrectly exposed from a preload script in the renderer process. Due to contextIsolation, the API is undefined.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(window.myAPI)\n// => undefined\n```\n\n----------------------------------------\n\nTITLE: Complete Objective-C File Snippet (objc_code.mm)\nDESCRIPTION: This is a complete code snippet showing the basic file structure and implementation for the TodoWindowController in Objective-C. It imports necessary frameworks, declares the controller interface, and initializes it by setting up the window and creating the todos array.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_6\n\nLANGUAGE: objc\nCODE:\n```\n#import <Foundation/Foundation.h>\n#import <AppKit/AppKit.h>\n#import <string>\n#import <functional>\n#import \"../include/objc_code.h\"\n\nusing TodoCallback = std::function<void(const std::string&)>;\n\nstatic TodoCallback g_todoAddedCallback;\n\n// Forward declaration of our custom classes\n@interface TodoWindowController : NSWindowController\n@property (strong) NSTextField *textField;\n@property (strong) NSDatePicker *datePicker;\n@property (strong) NSButton *addButton;\n@property (strong) NSTableView *tableView;\n@property (strong) NSMutableArray<NSDictionary*> *todos;\n@end\n\n// Controller for the main window\n@implementation TodoWindowController\n\n- (instancetype)init {\n    self = [super initWithWindowNibName:@\"\"];\n    if (self) {\n        // Create an array to store todos\n        _todos = [NSMutableArray array];\n        [self setupWindow];\n    }\n    return self;\n}\n\n// More code to follow later...\n```\n\n----------------------------------------\n\nTITLE: Building the Addon\nDESCRIPTION: This snippet shows the command to build the addon using npm.  It is important to note that you cannot call this script from Node.js directly; instead, it must be called from Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Product Object Properties in Markdown\nDESCRIPTION: This snippet outlines the structure and properties of the Product object used for Apple App Store integration in Electron applications. It includes details on product identification, pricing, localization, subscription information, and downloadable content attributes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/product.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Product Object\n\n* `productIdentifier` string - The string that identifies the product to the Apple App Store.\n* `localizedDescription` string - A description of the product.\n* `localizedTitle` string - The name of the product.\n* `price` number - The cost of the product in the local currency.\n* `formattedPrice` string - The locale formatted price of the product.\n* `currencyCode` string - 3 character code presenting a product's currency based on the ISO 4217 standard.\n* `introductoryPrice` [ProductDiscount](product-discount.md) (optional) - The object containing introductory price information for the product.\navailable for the product.\n* `discounts` [ProductDiscount](product-discount.md)[] - An array of discount offers\n* `subscriptionGroupIdentifier` string - The identifier of the subscription group to which the subscription belongs.\n* `subscriptionPeriod` [ProductSubscriptionPeriod](product-subscription-period.md) (optional) - The period details for products that are subscriptions.\n* `isDownloadable` boolean - A boolean value that indicates whether the App Store has downloadable content for this product. `true` if at least one file has been associated with the product.\n* `downloadContentVersion` string - A string that identifies the version of the content.\n* `downloadContentLengths` number[] - The total size of the content, in bytes.\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: Renders the DocCardList component in the documentation page layout.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/window-customization.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Adding API History in Markdown with YAML\nDESCRIPTION: This markdown snippet demonstrates how to add an API history block to the documentation for `win.getTrafficLightPosition()`. It includes a YAML block indicating the API was deprecated, linking to the relevant pull request and breaking changes header.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`````markdown\n#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_\n\n<!--\n```YAML history\ndeprecated:\n  - pr-url: https://github.com/electron/electron/pull/37878\n    breaking-changes-header: deprecated-browserwindowgettrafficlightposition\n```\n-->\n\nReturns `Point` - The custom position for the traffic light buttons in\nframeless window, `{ x: 0, y: 0 }` will be returned when there is no custom\nposition.\n`````\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Capture Controls in Electron Renderer Process\nDESCRIPTION: This renderer.js file contains the JavaScript code that handles the UI interactions for starting and stopping screen capture. It uses the navigator.mediaDevices.getDisplayMedia API to request screen sharing access.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/desktop-capturer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// renderer.js\nconst startButton = document.getElementById('startButton')\nconst stopButton = document.getElementById('stopButton')\nconst video = document.querySelector('video')\n\nstartButton.addEventListener('click', () => {\n  navigator.mediaDevices.getDisplayMedia({\n    audio: true,\n    video: {\n      width: 320,\n      height: 240,\n      frameRate: 30\n    }\n  }).then(stream => {\n    video.srcObject = stream\n    video.onloadedmetadata = (e) => video.play()\n  }).catch(e => console.log(e))\n})\n\nstopButton.addEventListener('click', () => {\n  video.pause()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing ARM Cross-Compilation Dependencies\nDESCRIPTION: Commands to install dependencies for cross-compiling to ARM architecture.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install libc6-dev-armhf-cross linux-libc-dev-armhf-cross \\\n                       g++-arm-linux-gnueabihf\n```\n\n----------------------------------------\n\nTITLE: Objective-C++ Namespace Functions Implementation\nDESCRIPTION: This code snippet implements functions within the `objc_code` namespace, providing functionality to display a native GUI, set a callback for todo additions, and return a greeting string.  It leverages Grand Central Dispatch (GCD) to ensure UI operations are executed on the main thread. It takes a string input for hello_world and a callback function pointer.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_12\n\nLANGUAGE: objective-c++\nCODE:\n```\nnamespace objc_code {\n\nstd::string hello_world(const std::string& input) {\n    return \"Hello from Objective-C! You said: \" + input;\n}\n\nvoid setTodoAddedCallback(TodoCallback callback) {\n    g_todoAddedCallback = callback;\n}\n\nvoid hello_gui() {\n    // Create and run the GUI on the main thread\n    dispatch_async(dispatch_get_main_queue(), ^{\n        // Create our window controller\n        TodoWindowController *windowController = [[TodoWindowController alloc] init];\n\n        // Show the window\n        [windowController showWindow:nil];\n\n        // Keep a reference to prevent it from being deallocated\n        // Note: in a real app, you'd store this reference more carefully\n        static TodoWindowController *staticController = nil;\n        staticController = windowController;\n    });\n}\n\n} // namespace objc_code\n```\n\n----------------------------------------\n\nTITLE: Deprecated crashReporter.start() with companyName in Electron\nDESCRIPTION: The `companyName` argument in `crashReporter.start()` is deprecated.  This snippet shows how to move the company name to the `globalExtra` option for `crashReporter.start()` in Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_56\n\nLANGUAGE: js\nCODE:\n```\n// Deprecated in Electron 10\ncrashReporter.start({ companyName: 'Umbrella Corporation' })\n// Replace with\ncrashReporter.start({ globalExtra: { _companyName: 'Umbrella Corporation' } })\n```\n\n----------------------------------------\n\nTITLE: WebFrame RoutingId Property Definition\nDESCRIPTION: Read-only property that represents the unique frame id as an Integer in the current renderer process. Multiple WebFrame instances referring to the same underlying frame share the same routingId.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nwebFrame.routingId: Integer\n```\n\n----------------------------------------\n\nTITLE: Objective-C Interface Definition (objc_code.h)\nDESCRIPTION: This C++ header file defines the interface for the Objective-C code. It includes a basic hello_world function, a hello_gui function for creating a native macOS GUI, callback types for Todo operations, and setter functions for these callbacks. It also uses include guards to prevent multiple inclusions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#pragma once\n#include <string>\n#include <functional>\n\nnamespace objc_code {\n\nstd::string hello_world(const std::string& input);\nvoid hello_gui();\n\n// Callback function types\nusing TodoCallback = std::function<void(const std::string&)>;\n\n// Callback setters\nvoid setTodoAddedCallback(TodoCallback callback);\n\n} // namespace objc_code\n```\n\n----------------------------------------\n\nTITLE: Xcode Architecture Error Example\nDESCRIPTION: Error output showing incompatible architecture issues when building on arm64 with incorrect Xcode version. Shows mismatch between x86_64 and arm64e architectures.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-macos.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nxcrun: error: unable to load libxcrun\\n(dlopen(/Users/<user>/.electron_build_tools/third_party/Xcode/Xcode.app/Contents/Developer/usr/lib/libxcrun.dylib (http://xcode.app/Contents/Developer/usr/lib/libxcrun.dylib), 0x0005):\\n tried: '/Users/<user>/.electron_build_tools/third_party/Xcode/Xcode.app/Contents/Developer/usr/lib/libxcrun.dylib (http://xcode.app/Contents/Developer/usr/lib/libxcrun.dylib)'\\n (mach-o file, but is an incompatible architecture (have (x86_64), need (arm64e))), '/Users/<user>/.electron_build_tools/third_party/Xcode/Xcode-11.1.0.app/Contents/Developer/usr/lib/libxcrun.dylib (http://xcode-11.1.0.app/Contents/Developer/usr/lib/libxcrun.dylib)' (mach-o file, but is an incompatible architecture (have (x86_64), need (arm64e))).\n```\n\n----------------------------------------\n\nTITLE: Running the Electron Application\nDESCRIPTION: Command to start the Electron application using the npm script defined in package.json. This executes the main.js file in the Electron environment.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: NativeImage createFromBuffer Scale Factor (Deprecated)\nDESCRIPTION: This snippet illustrates the deprecated way of passing the scale factor to nativeImage.createFromBuffer() as a separate argument, and its replacement with an options object containing the scaleFactor. Using the options object ensures correct interpretation of the scaling value.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nnativeImage.createFromBuffer(buffer, 1.0)\n// Replace with\nnativeImage.createFromBuffer(buffer, {\n  scaleFactor: 1.0\n})\n```\n\n----------------------------------------\n\nTITLE: Electron Packager API Configuration for Protocol Handlers\nDESCRIPTION: JavaScript code showing how to configure protocol handlers when using Electron Packager's programmatic API, establishing 'electron-fiddle://' as a custom protocol.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst packager = require('@electron/packager')\n\npackager({\n  // ...other options...\n  protocols: [\n    {\n      name: 'Electron Fiddle',\n      schemes: ['electron-fiddle']\n    }\n  ]\n\n}).then(paths => console.log(`SUCCESS: Created ${paths.join(', ')}`)) \n  .catch(err => console.error(`ERROR: ${err.message}`))\n```\n\n----------------------------------------\n\nTITLE: Adding Native Window Controls in Electron for Windows and Linux\nDESCRIPTION: Demonstrates how to add native window controls back into an Electron BrowserWindow on Windows and Linux after removing the title bar by using the titleBarOverlay parameter.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require('electron')\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    titleBarStyle: 'hidden',\n    titleBarOverlay: true\n  })\n  win.loadFile('index.html')\n})\n```\n\n----------------------------------------\n\nTITLE: Updating app.getGPUInfo behavior in Electron\nDESCRIPTION: This snippet indicates that `app.getGPUInfo('complete')` now behaves the same as `app.getGPUInfo('basic')` on macOS. The 'complete' option provides only basic information, same as using the `basic` parameter.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_89\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.getGPUInfo('complete')\n// Now behaves the same with `basic` on macOS\napp.getGPUInfo('basic')\n```\n\n----------------------------------------\n\nTITLE: Implementing C++ Function for Native Addon in Electron\nDESCRIPTION: Implements the 'hello_world' function defined in the header file. This function concatenates a greeting message with the input string and returns the result.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n#include <string>\n#include \"../include/cpp_code.h\"\n\nnamespace cpp_code {\n    std::string hello_world(const std::string& input) {\n        // Simply concatenate strings and return\n        return \"Hello from C++! You said: \" + input;\n    }\n} // namespace cpp_code\n```\n\n----------------------------------------\n\nTITLE: Configuring System Clang Path\nDESCRIPTION: Command to configure GN build system to use system-installed Clang instead of downloaded binaries.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngn gen out/Testing --args='import(\"//electron/build/args/testing.gn\") clang_base_path = \"/usr/local/bin\"'\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for libtinfo.so.5\nDESCRIPTION: Command to create a symbolic link for resolving libtinfo.so.5 dependency issues.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo ln -s /usr/lib/libncurses.so.5 /usr/lib/libtinfo.so.5\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Texture in Direct3D (Windows)\nDESCRIPTION: This code snippet shows how to import a shared texture handle into a Direct3D rendering program on Windows. It demonstrates opening the shared resource, extracting texture description, and creating a staging texture for efficient copying.\nSOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n// Windows\nHANDLE handle = *reinterpret_cast<HANDLE*>(handleBufferData);\nMicrosoft::WRL::ComPtr<ID3D11Texture2D> shared_texture = nullptr;\nHRESULT hr = device1->OpenSharedResource1(handle, IID_PPV_ARGS(&shared_texture)); \n\n// Extract the texture description\nD3D11_TEXTURE2D_DESC desc;\nshared_texture->GetDesc(&desc);\n\n// Cache the staging texture if it does not exist or size has changed\nif (!cached_staging_texture || cached_width != desc.Width ||\n    cached_height != desc.Height) {\n  if (cached_staging_texture) {\n    cached_staging_texture->Release();\n  }\n\n  desc.CPUAccessFlags = D3D11_CPU_ACCESS_READ;\n  desc.Usage = D3D11_USAGE_STAGING;\n  desc.BindFlags = 0;\n  desc.MiscFlags = 0;\n\n  std::cout << \"Create staging Texture2D width=\" << desc.Width\n            << \" height=\" << desc.Height << std::endl;\n  hr = device->CreateTexture2D(&desc, nullptr, &cached_staging_texture);\n\n  cached_width = desc.Width;\n  cached_height = desc.Height;\n}\n\n// Copy to a intermediate texture\ncontext->CopyResource(cached_staging_texture.Get(), shared_texture.Get());\n```\n\n----------------------------------------\n\nTITLE: Replacing console-message event on WebContents in Electron\nDESCRIPTION: This JavaScript code shows how to update the `console-message` event listener on `WebContents` to use the new event structure in Electron. The updated event provides details on the `Event` argument and uses string values for the `level` property.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nwebContents.on('console-message', (event, level, message, line, sourceId) => {})\n\n// Replace with:\nwebContents.on('console-message', ({ level, message, lineNumber, sourceId, frame }) => {})\n```\n\n----------------------------------------\n\nTITLE: Deprecated webContents.incrementCapturerCount (JavaScript)\nDESCRIPTION: `webContents.incrementCapturerCount(stayHidden, stayAwake)` has been deprecated. It is now automatically handled by `webContents.capturePage` when a page capture completes. This snippet demonstrates removing the calls to these functions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst w = new BrowserWindow({ show: false })\n\n// Removed in Electron 23\nw.webContents.incrementCapturerCount()\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n  w.webContents.decrementCapturerCount()\n})\n\n// Replace with\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling ASAR support in Node.js\nDESCRIPTION: This code demonstrates how to disable ASAR support in the fs module by setting process.noAsar to true.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require('node:fs')\nprocess.noAsar = true\nfs.readFileSync('/path/to/example.asar')\n```\n\n----------------------------------------\n\nTITLE: Finding commit when API was added using git log in Bash\nDESCRIPTION: This bash command again uses `git log` to find the commit that originally added the `GetTrafficLightPosition` functionality. This is achieved by using the `--reverse` option to show the earliest commit first.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git log --reverse -L :GetTrafficLightPosition:shell/browser/native_window_mac.mm\ncommit 3e2cec83d927b991855e21cc311ca9046e332601\nAuthor: Samuel Attard <sattard@slack-corp.com>\nDate:   Thu Mar 5 14:22:12 2020 -0800\n\n    feat: programmatically modify traffic light positioning (#22533)\n```\n\n----------------------------------------\n\nTITLE: PowerMonitor getSystemIdleState Method\nDESCRIPTION: Method that returns the system's current idle state as a string. Takes an idleThreshold parameter in seconds to determine when system is considered idle. Returns 'active', 'idle', 'locked' or 'unknown'.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npowerMonitor.getSystemIdleState(idleThreshold)\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium WebDriver for Electron Testing\nDESCRIPTION: Command to install Selenium WebDriver package, which provides bindings to interact with WebDriver APIs for automated testing of Electron applications.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev selenium-webdriver\n```\n\n----------------------------------------\n\nTITLE: Renamed macOS App Structure\nDESCRIPTION: Shows the file and directory structure after rebranding an Electron application on macOS. This includes renaming the application bundle (`MyApp.app`) and the helper app bundle (`MyApp Helper.app`). It highlights the location of the main executable and helper executable files, as well as the `Info.plist` files which need to be updated.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-21_snippet_4\n\nLANGUAGE: plain\nCODE:\n```\n\"MyApp.app/Contents\n├── Info.plist\n├── MacOS/\n│   └── MyApp\n└── Frameworks/\n    └── MyApp Helper.app\n        ├── Info.plist\n        └── MacOS/\n            └── MyApp Helper\"\n```\n\n----------------------------------------\n\nTITLE: VS Code Debug Configuration for Electron\nDESCRIPTION: Launch configuration for debugging both main and renderer processes in VS Code. Sets up compound debugging tasks with Chrome DevTools for renderer process and Node debugger for main process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"compounds\": [\n    {\n      \"name\": \"Main + renderer\",\n      \"configurations\": [\"Main\", \"Renderer\"],\n      \"stopAll\": true\n    }\n  ],\n  \"configurations\": [\n    {\n      \"name\": \"Renderer\",\n      \"port\": 9222,\n      \"request\": \"attach\",\n      \"type\": \"chrome\",\n      \"webRoot\": \"${workspaceFolder}\"\n    },\n    {\n      \"name\": \"Main\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron\",\n      \"windows\": {\n        \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron.cmd\"\n      },\n      \"args\": [\".\", \"--remote-debugging-port=9222\"],\n      \"outputCapture\": \"std\",\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Node.js Addon Bridge for C++ in Electron\nDESCRIPTION: Defines the addon code that bridges the C++ implementation with Node.js. It creates a class that wraps the C++ function and exposes it to JavaScript, handling type conversions and argument validation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n#include <napi.h>\n#include <string>\n#include \"../include/cpp_code.h\"\n\n// Create a class that will be exposed to JavaScript\nclass MyAddon : public Napi::ObjectWrap<MyAddon> {\npublic:\n    // This static method defines the class for JavaScript\n    static Napi::Object Init(Napi::Env env, Napi::Object exports) {\n        // Define the JavaScript class with method(s)\n        Napi::Function func = DefineClass(env, \"MyAddon\", {\n            InstanceMethod(\"helloWorld\", &MyAddon::HelloWorld)\n        });\n\n        // Create a persistent reference to the constructor\n        Napi::FunctionReference* constructor = new Napi::FunctionReference();\n        *constructor = Napi::Persistent(func);\n        env.SetInstanceData(constructor);\n\n        // Set the constructor on the exports object\n        exports.Set(\"MyAddon\", func);\n        return exports;\n    }\n\n    // Constructor\n    MyAddon(const Napi::CallbackInfo& info)\n        : Napi::ObjectWrap<MyAddon>(info) {}\n\nprivate:\n    // Method that will be exposed to JavaScript\n    Napi::Value HelloWorld(const Napi::CallbackInfo& info) {\n        Napi::Env env = info.Env();\n\n        // Validate arguments (expecting one string)\n        if (info.Length() < 1 || !info[0].IsString()) {\n            Napi::TypeError::New(env, \"Expected string argument\").ThrowAsJavaScriptException();\n            return env.Null();\n        }\n\n        // Convert JavaScript string to C++ string\n        std::string input = info[0].As<Napi::String>();\n\n        // Call our C++ function\n        std::string result = cpp_code::hello_world(input);\n\n        // Convert C++ string back to JavaScript string and return\n        return Napi::String::New(env, result);\n    }\n};\n\n// Initialize the addon\nNapi::Object Init(Napi::Env env, Napi::Object exports) {\n    return MyAddon::Init(env, exports);\n}\n\n// Register the initialization function\nNODE_API_MODULE(my_addon, Init)\n```\n\n----------------------------------------\n\nTITLE: Accessing Node.js REPL in Electron's Main Process\nDESCRIPTION: Demonstrates how to start an interactive REPL session for Electron's main process using the --interactive CLI flag. This command assumes Electron is installed as a local project dependency.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/repl.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./node_modules/.bin/electron --interactive\n```\n\n----------------------------------------\n\nTITLE: WebFrame FirstChild Property Definition\nDESCRIPTION: Read-only property that represents the first child frame of webFrame. Returns null if webFrame has no children or if first child is not in the current renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwebFrame.firstChild: WebFrame | null\n```\n\n----------------------------------------\n\nTITLE: Validating Electron Fuses Using Command Line\nDESCRIPTION: Command to read and verify the current state of fuses in an installed Electron application using the @electron/fuses CLI tool.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/fuses.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @electron/fuses read --app /Applications/Foo.app\n```\n\n----------------------------------------\n\nTITLE: Replacing crashReporter.getCrashesDirectory with app.getPath\nDESCRIPTION: Illustrates the removal of `crashReporter.getCrashesDirectory()` and its replacement by `app.getPath('crashDumps')`\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed in Electron 12\ncrashReporter.getCrashesDirectory()\n// Replace with\napp.getPath('crashDumps')\n```\n\n----------------------------------------\n\nTITLE: Documenting Print Next Version Script in Markdown\nDESCRIPTION: Explains the 'print-next-version' script, which outputs the theoretical next version for a release.\nSOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `print-next-version`\n\nThis script just outputs the theoretical \"next\" version that a release would use.\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Notifications with Custom Toast XML\nDESCRIPTION: Example showing how to create a Windows notification using custom Toast XML for full control over notification appearance and behavior. This allows for advanced customization specific to Windows.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Notification } = require('electron');\n\n// Create a Windows notification with custom Toast XML\nconst notification = new Notification({\n  toastXml: `\n    <toast>\n      <visual>\n        <binding template=\"ToastGeneric\">\n          <text>Custom Windows Notification</text>\n          <text>This notification uses custom Toast XML</text>\n          <image placement=\"appLogoOverride\" src=\"file:///C:/path/to/image.png\"/>\n        </binding>\n      </visual>\n      <actions>\n        <action content=\"View\" arguments=\"view-action\"/>\n        <action content=\"Dismiss\" arguments=\"dismiss-action\"/>\n      </actions>\n    </toast>\n  `,\n  timeoutType: 'never'  // Notification won't expire automatically\n});\n\n// Show the notification\nnotification.show();\n\n// Handle failure event\nnotification.on('failed', (event, error) => {\n  console.error(`Notification failed: ${error}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Replace systemPreferences events with nativeTheme events in Electron\nDESCRIPTION: This JavaScript snippet demonstrates how to replace deprecated `systemPreferences` events related to color scheme changes with the `updated` event on the `nativeTheme` module in Electron. It shows how to listen for theme updates using the new API.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed\nsystemPreferences.on('inverted-color-scheme-changed', () => { /* ... */ })\nsystemPreferences.on('high-contrast-color-scheme-changed', () => { /* ... */ })\n\n// Replace with\nnativeTheme.on('updated', () => { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: protocol.isProtocolHandled deprecation\nDESCRIPTION: The `protocol.isProtocolHandled` API is deprecated.  This snippet illustrates how to replace the deprecated API with `protocol.isProtocolRegistered` and `protocol.isProtocolIntercepted`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_61\n\nLANGUAGE: js\nCODE:\n```\n// Deprecated\nprotocol.isProtocolHandled(scheme).then(() => { /* ... */ })\n// Replace with\nconst isRegistered = protocol.isProtocolRegistered(scheme)\nconst isIntercepted = protocol.isProtocolIntercepted(scheme)\n```\n\n----------------------------------------\n\nTITLE: Deprecated renderer-process-crashed event replacement in Electron\nDESCRIPTION: This JavaScript snippet illustrates the deprecation of the `renderer-process-crashed` event on the `app` module in Electron. It shows how to replace it with the `render-process-gone` event, which provides more detailed information about renderer process termination.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\napp.on('renderer-process-crashed', (event, webContents, killed) => { /* ... */ })\n\n// Replace with\napp.on('render-process-gone', (event, webContents, details) => { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: Setting Window Button Position in Electron for macOS\nDESCRIPTION: Sets a custom position for the traffic light buttons in a frameless window on macOS. Passing null resets the position to default.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setWindowButtonPosition(position)\n```\n\n----------------------------------------\n\nTITLE: Setting Diagnostic Directory in Electron Command Line\nDESCRIPTION: The '--diagnostic-dir' flag specifies the directory where Node.js diagnostic output files will be written. By default, it uses the current working directory.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n--diagnostic-dir=directory\n```\n\n----------------------------------------\n\nTITLE: Registering Preload Script in Electron Session\nDESCRIPTION: Registers a preload script that will be executed in its associated context type in the session. For 'frame' contexts, this runs prior to any preload defined in the web preferences of a WebContents.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nses.registerPreloadScript(script)\n```\n\n----------------------------------------\n\nTITLE: Handling a Single Invokable IPC Message with ipcMainServiceWorker.handleOnce()\nDESCRIPTION: Registers a one-time handler for an invokable IPC message on a specific channel. After handling a single invocation, the handler is automatically removed.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nipcMainServiceWorker.handleOnce(channel, listener)\n```\n\n----------------------------------------\n\nTITLE: Sample package.json Configuration for Electron App\nDESCRIPTION: Example package.json file after initializing the project and installing Electron. It defines the main entry point as main.js and includes basic metadata for the application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Hello World!\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Jane Doe\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"electron\": \"23.1.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Structure Output with Before/After Positioning\nDESCRIPTION: Shows the resulting menu structure from the template using 'before' and 'after' positioning, demonstrating how the order differs from the declaration order in the template.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n- ---\n- 3\n- 2\n- 1\n```\n\n----------------------------------------\n\nTITLE: Synchronous IPC Communication with ipcRenderer.sendSync\nDESCRIPTION: Shows synchronous IPC communication pattern using ipcRenderer.sendSync. While simpler to implement, this approach blocks the renderer process until receiving a response and is not recommended for performance reasons.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ipcMain } = require('electron')\nipcMain.on('synchronous-message', (event, arg) => {\n  console.log(arg) // prints \"ping\" in the Node console\n  event.returnValue = 'pong'\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ipcRenderer } = require('electron')\n\nconst result = ipcRenderer.sendSync('synchronous-message', 'ping')\nconsole.log(result) // prints \"pong\" in the DevTools console\n```\n\n----------------------------------------\n\nTITLE: Replacing systemPreferences.getColor usage (JavaScript)\nDESCRIPTION: The `alternate-selected-control-text` value for `systemPreferences.getColor` has been removed. Use `selected-content-background` instead. This snippet shows the deprecated usage and the recommended replacement.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed\nsystemPreferences.getColor('alternate-selected-control-text')\n// Replace with\nsystemPreferences.getColor('selected-content-background')\n```\n\n----------------------------------------\n\nTITLE: Logging Debug Information in Chromium C++\nDESCRIPTION: Examples of using Chromium's logging macros to print debug information to console. Demonstrates different logging severity levels (INFO, WARN, ERROR) and variable value output.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nLOG(INFO) << \"bitmap.width(): \" << bitmap.width();\n\nLOG(INFO, bitmap.width() > 10) << \"bitmap.width() is greater than 10!\";\n```\n\n----------------------------------------\n\nTITLE: WebContents SetSize Removal\nDESCRIPTION: This snippet shows the removed webContents.setSize(options) method. The comment indicates that there is no direct replacement for this API, suggesting an alternative approach to resizing web contents is necessary.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed\nwebContents.setSize(options)\n// There is no replacement for this API\n```\n\n----------------------------------------\n\nTITLE: WebView setZoomLevelLimits Update\nDESCRIPTION: This snippet shows the removed webview.setZoomLevelLimits(1, 2) replaced with webview.setVisualZoomLevelLimits(1, 2). The method name was updated to include 'Visual' to clarify its purpose.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed\nwebview.setZoomLevelLimits(1, 2)\n// Replaced with\nwebview.setVisualZoomLevelLimits(1, 2)\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js and npm Installation\nDESCRIPTION: Command line instructions to verify successful installation of Node.js and npm by checking their versions using the -v flag. The expected output shows Node.js v16.14.2 and npm 8.7.0.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-1-prerequisites.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ node -v\nv16.14.2\n$ npm -v\n8.7.0\n```\n\n----------------------------------------\n\nTITLE: Error message from gclient sync about rebasing\nDESCRIPTION: This shows the error message that appears when gclient sync encounters a rebase conflict in the git tree. This typically happens when a previous sync operation was interrupted.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n2> Conflict while rebasing this branch.\n2> Fix the conflict and run gclient again.\n2> See man git-rebase for details.\n```\n\n----------------------------------------\n\nTITLE: Defining CustomScheme Object Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the CustomScheme object, including its properties and optional privileges. It specifies the 'scheme' string and various boolean options that can be set for the custom scheme.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/custom-scheme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CustomScheme Object\n\n* `scheme` string - Custom schemes to be registered with options.\n* `privileges` Object (optional)\n  * `standard` boolean (optional) - Default false.\n  * `secure` boolean (optional) - Default false.\n  * `bypassCSP` boolean (optional) - Default false.\n  * `allowServiceWorkers` boolean (optional) - Default false.\n  * `supportFetchAPI` boolean (optional) - Default false.\n  * `corsEnabled` boolean (optional) - Default false.\n  * `stream` boolean (optional) - Default false.\n  * `codeCache` boolean (optional) - Enable V8 code cache for the scheme, only\n    works when `standard` is also set to true. Default false.\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for Electron Native Debugging on Windows\nDESCRIPTION: JSON configuration for debugging the native Electron codebase on Windows using Visual Studio Code. It includes settings for the C++ debugger, program arguments, and environment variables.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/debugging-vscode.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"(Windows) Launch\",\n      \"type\": \"cppvsdbg\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}\\\\out\\\\your-executable-location\\\\electron.exe\",\n      \"args\": [\"your-electron-project-path\"],\n      \"stopAtEntry\": false,\n      \"cwd\": \"${workspaceFolder}\",\n      \"environment\": [\n          {\"name\": \"ELECTRON_ENABLE_LOGGING\", \"value\": \"true\"},\n          {\"name\": \"ELECTRON_ENABLE_STACK_DUMPING\", \"value\": \"true\"},\n          {\"name\": \"ELECTRON_RUN_AS_NODE\", \"value\": \"\"},\n      ],\n      \"externalConsole\": false,\n      \"sourceFileMap\": {\n          \"o:\\\\\": \"${workspaceFolder}\",\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Parent Window - Electron JavaScript\nDESCRIPTION: Returns the current window's parent as a BaseWindow object or null if it does not have a parent. This is essential for understanding window hierarchies.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nwin.getParentWindow()\n```\n\n----------------------------------------\n\nTITLE: App.RunningUnderRosettaTranslation: Deprecated\nDESCRIPTION: This snippet shows that `app.runningUnderRosettaTranslation` has been deprecated and replaced with `app.runningUnderARM64Translation`. The example shows how to switch from the old property to the new one.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nconsole.log(app.runningUnderRosettaTranslation)\n// Replace with\nconsole.log(app.runningUnderARM64Translation)\n```\n\n----------------------------------------\n\nTITLE: Deprecated API - Go Forward\nDESCRIPTION: This YAML snippet documents the deprecation of the `contents.goForward()` API in Electron, specifying the pull request and breaking changes header.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\ndeprecated:\n  - pr-url: https://github.com/electron/electron/pull/41752\n    breaking-changes-header: deprecated-clearhistory-cangoback-goback-cangoforward-goforward-gotoindex-cangotooffset-gotooffset-on-webcontents\n```\n\n----------------------------------------\n\nTITLE: Setting Frame Pool Capacity in C++\nDESCRIPTION: Defines the maximum number of frames that can be captured if the consumer doesn't consume them in time\nSOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nkFramePoolCapacity = 10\n```\n\n----------------------------------------\n\nTITLE: Window Controller Implementation (objc_code.mm)\nDESCRIPTION: This Objective-C implementation initializes the TodoWindowController.  It uses initWithWindowNibName with an empty string because it is not using a nib file. It creates an empty array to store todos and calls the setupWindow method, which is to be implemented later.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_5\n\nLANGUAGE: objc\nCODE:\n```\n// Previous code...\n\n// Controller for the main window\n@implementation TodoWindowController\n\n- (instancetype)init {\n    self = [super initWithWindowNibName:@\"\"];\n    if (self) {\n        // Create an array to store todos\n        _todos = [NSMutableArray array];\n        [self setupWindow];\n    }\n    return self;\n}\n\n// More code to follow later...\n```\n\n----------------------------------------\n\nTITLE: Playwright Test Console Output\nDESCRIPTION: Example of console output from running Playwright tests for Electron applications. This shows what a successful test run looks like in the terminal.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n☁  $ npx playwright test\n\nRunning 1 test using 1 worker\n\n  ✓  example.spec.js:4:1 › example test (1s)\n```\n\n----------------------------------------\n\nTITLE: Moving Tab to New Window - Electron JavaScript\nDESCRIPTION: Moves the currently selected tab into a new window if multiple tabs are open in the current window. This function is designed to improve tab management in macOS.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nwin.moveTabToNewWindow()\n```\n\n----------------------------------------\n\nTITLE: Getting Receipt URL\nDESCRIPTION: Method to retrieve the path to the purchase receipt.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ninAppPurchase.getReceiptURL()\n```\n\n----------------------------------------\n\nTITLE: Replacing session.serviceWorkers.fromVersionID() in Electron\nDESCRIPTION: This JavaScript code shows how to replace the deprecated `session.serviceWorkers.fromVersionID(versionId)` API with `session.serviceWorkers.getInfoFromVersionID(versionId)` in Electron. The change aims to clarify the return object when using `session.serviceWorkers.getWorkerFromVersionID(versionId)` API.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nsession.serviceWorkers.fromVersionID(versionId)\n\n// Replace with\nsession.serviceWorkers.getInfoFromVersionID(versionId)\n```\n\n----------------------------------------\n\nTITLE: Valid URL Examples\nDESCRIPTION: This code snippet provides examples of valid URLs that can be used within the filter object when working with Electron's WebRequest API. These examples illustrate the different URL patterns that can be used to target specific requests for interception and modification.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-request.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'<all_urls>'\n'http://foo:1234/'\n'http://foo.com/'\n'http://foo:1234/bar'\n'*://*/*'\n'*://example.com/*'\n'*://example.com/foo/*'\n'http://*.foo:1234/'\n'file://foo:1234/bar'\n'http://foo:*/'\n'*://www.foo.com/'\n```\n\n----------------------------------------\n\nTITLE: Deprecated: webview.getWebContents() Replacement - JavaScript\nDESCRIPTION: Shows the deprecated `webview.getWebContents()` and its recommended replacement using `remote.webContents.fromId(webview.getWebContentsId())`. This change addresses performance and security concerns associated with the remote module. Requires `electron` to be installed to provide `remote` module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nwebview.getWebContents()\n// Replace with\nconst { remote } = require('electron')\nremote.webContents.fromId(webview.getWebContentsId())\n```\n\n----------------------------------------\n\nTITLE: Running electron-installer-snap CLI\nDESCRIPTION: Command to run electron-installer-snap with the required source parameter pointing to the packaged Electron application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx electron-installer-snap --src=out/myappname-linux-x64\n```\n\n----------------------------------------\n\nTITLE: Removing BrowserWindow extension APIs with session APIs (Removal)\nDESCRIPTION: Continuation of extension API replacements. Demonstrates the removal of the `removeExtension` API and the replacement with `session.defaultSession.removeExtension`\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed in Electron 13\nBrowserWindow.removeExtension(name)\nBrowserWindow.removeDevToolsExtension(name)\n// Replace with\nsession.defaultSession.removeExtension(extension_id)\n```\n\n----------------------------------------\n\nTITLE: Adding BrowserView in Electron (Deprecated)\nDESCRIPTION: Adds a BrowserView to a window, supporting multiple browser views. This is a replacement API for setBrowserView but is also deprecated in favor of WebContentsView.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nwin.addBrowserView(browserView)\n```\n\n----------------------------------------\n\nTITLE: Starting LLDB with Electron\nDESCRIPTION: Command to launch LLDB debugger with a testing build of Electron application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ lldb ./out/Testing/Electron.app\n(lldb) target create \"./out/Testing/Electron.app\"\nCurrent executable set to './out/Testing/Electron.app' (x86_64).\n```\n\n----------------------------------------\n\nTITLE: Advanced Menu Template with Group Positioning\nDESCRIPTION: A menu template that uses 'beforeGroupContaining' and 'afterGroupContaining' positioning properties along with separators to create a more complex menu structure with grouped items.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { id: '1', label: 'one' },\n  { type: 'separator' },\n  { id: '3', label: 'three', beforeGroupContaining: ['1'] },\n  { id: '4', label: 'four', afterGroupContaining: ['2'] },\n  { type: 'separator' },\n  { id: '2', label: 'two' }\n]\n```\n\n----------------------------------------\n\nTITLE: Replacing shell.moveItemToTrash with shell.trashItem\nDESCRIPTION: Demonstrates the removal of the synchronous `shell.moveItemToTrash()` API and its replacement with the asynchronous `shell.trashItem()`. Shows how to use the asynchronous version with a promise.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed in Electron 13\nshell.moveItemToTrash(path)\n// Replace with\nshell.trashItem(path).then(/* ... */)\n```\n\n----------------------------------------\n\nTITLE: Objective-C++ Namespace Functions Implementation (Repetition)\nDESCRIPTION: This code snippet implements functions within the `objc_code` namespace, providing functionality to display a native GUI, set a callback for todo additions, and return a greeting string.  It leverages Grand Central Dispatch (GCD) to ensure UI operations are executed on the main thread. It takes a string input for hello_world and a callback function pointer. This is a repetition of the first code snippet.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_14\n\nLANGUAGE: objective-c++\nCODE:\n```\nnamespace objc_code {\n\nstd::string hello_world(const std::string& input) {\n    return \"Hello from Objective-C! You said: \" + input;\n}\n\nvoid setTodoAddedCallback(TodoCallback callback) {\n    g_todoAddedCallback = callback;\n}\n\nvoid hello_gui() {\n    // Create and run the GUI on the main thread\n    dispatch_async(dispatch_get_main_queue(), ^{\n        // Create our window controller\n        TodoWindowController *windowController = [[TodoWindowController alloc] init];\n\n        // Show the window\n        [windowController showWindow:nil];\n\n        // Keep a reference to prevent it from being deallocated\n        // Note: in a real app, you'd store this reference more carefully\n        static TodoWindowController *staticController = nil;\n        staticController = windowController;\n    });\n}\n\n} // namespace objc_code\n```\n\n----------------------------------------\n\nTITLE: Checking Tray Icon Destruction State Electron JavaScript\nDESCRIPTION: This snippet checks if the tray icon is destroyed, returning a boolean value. It simply evaluates the existence of the tray icon. No additional parameters are required, and it has no dependencies.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ntray.isDestroyed()\n```\n\n----------------------------------------\n\nTITLE: Insecure BrowserWindow Configuration with AllowRunningInsecureContent\nDESCRIPTION: Example of insecure BrowserWindow configuration that allows HTTPS pages to load resources via HTTP, which creates mixed content vulnerabilities.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    allowRunningInsecureContent: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Version in Electron\nDESCRIPTION: Demonstrates how to get the host operating system version using process.getSystemVersion(). Returns actual OS version on macOS and differs from os.release().\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/process.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst version = process.getSystemVersion()\nconsole.log(version)\n// On macOS -> '10.13.6'\n// On Windows -> '10.0.17763'\n// On Linux -> '4.15.0-45-generic'\n```\n\n----------------------------------------\n\nTITLE: Writing RTF to Clipboard in Electron\nDESCRIPTION: Shows how to write Rich Text Format (RTF) content to the system clipboard using the clipboard.writeRTF() method.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nconst rtf = '{\\\\rtf1\\\\ansi{\\\\fonttbl\\\\f0\\\\fswiss Helvetica;}\\\\f0\\\\pard\\nThis is some {\\\\b bold} text.\\\\par\\n}'\nclipboard.writeRTF(rtf)\n```\n\n----------------------------------------\n\nTITLE: Defining PreloadScript Object Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the PreloadScript object in Electron. It includes the context type where the script will be executed, a unique ID for the script, and the absolute file path of the script.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/preload-script.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PreloadScript Object\n\n* `type` string - Context type where the preload script will be executed.\n  Possible values include `frame` or `service-worker`.\n* `id` string - Unique ID of preload script.\n* `filePath` string - Path of the script file. Must be an absolute path.\n```\n\n----------------------------------------\n\nTITLE: Disabling Sandbox via Node Integration in Electron\nDESCRIPTION: Demonstrates how to disable sandboxing by enabling Node.js integration in the renderer process through the BrowserWindow constructor.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/sandbox.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    webPreferences: {\n      nodeIntegration: true\n    }\n  })\n  win.loadURL('https://google.com')\n})\n```\n\n----------------------------------------\n\nTITLE: Running Electron in Debug Mode\nDESCRIPTION: Output showing Electron launching and hitting a breakpoint in the Browser::SetName function.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n(lldb) run\nProcess 25244 launched: '/Users/fr/Code/electron/out/Testing/Electron.app/Contents/MacOS/Electron' (x86_64)\nProcess 25244 stopped\n* thread #1: tid = 0x839a4c, 0x0000000100162db4 Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 20 at browser.cc:118, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000100162db4 Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 20 at browser.cc:118\n   115 \t}\n   116 \t\n   117 \tvoid Browser::SetName(const std::string& name) {\n-> 118 \t  name_override_ = name;\n   119 \t}\n   120 \t\n   121 \tint Browser::GetBadgeCount() {\n```\n\n----------------------------------------\n\nTITLE: Visual Studio Compiler Tool Settings for Native Addon\nDESCRIPTION: Configuration for Visual Studio's C++ compiler tool within the binding.gyp file, enabling exception handling, setting debug information format, and adding file serialization options for reliable parallel builds.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"VCCLCompilerTool\": {\n  \"ExceptionHandling\": 1,\n  \"DebugInformationFormat\": \"OldStyle\",\n  \"AdditionalOptions\": [\n    \"/FS\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Task to Keep Service Worker Alive in Electron\nDESCRIPTION: This method starts a task to keep the service worker alive until explicitly ended. It returns an object with an 'end' function that should be called when the task is complete.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/service-worker-main.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserviceWorker.startTask()\n```\n\n----------------------------------------\n\nTITLE: Session Certificate Verification (Deprecated)\nDESCRIPTION: This snippet details the deprecated session.setCertificateVerifyProc() callback signature and its replacement. The callback now receives a request object instead of a hostname and certificate, providing more context for verification. Returning 0 from the callback indicates successful verification.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nses.setCertificateVerifyProc((hostname, certificate, callback) => {\n  callback(true)\n})\n// Replace with\nses.setCertificateVerifyProc((request, callback) => {\n  callback(0)\n})\n```\n\n----------------------------------------\n\nTITLE: Structuring Markdown Headers in Electron Docs\nDESCRIPTION: Example showing the correct hierarchy and formatting of markdown headers in Electron documentation using Quick Start guide as an example.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Quick Start\n\n...\n\n## Main process\n\n...\n\n## Renderer process\n\n...\n\n## Run your app\n\n...\n\n### Run as a distribution\n\n...\n\n### Manually downloaded Electron binary\n\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Login Items with Squirrel\nDESCRIPTION: Example demonstrating how to set up login item settings for an Electron app using Squirrel on Windows, including path configuration and arguments.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\nconst path = require('node:path')\n\nconst appFolder = path.dirname(process.execPath)\nconst ourExeName = path.basename(process.execPath)\nconst stubLauncher = path.resolve(appFolder, '..', ourExeName)\n\napp.setLoginItemSettings({\n  openAtLogin: true,\n  path: stubLauncher,\n  args: [\n    // You might want to pass a parameter here indicating that this\n    // app was launched via login, but you don't have to\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing protocol.registerHttpProtocol with protocol.handle (JavaScript)\nDESCRIPTION: The `protocol.registerHttpProtocol` method has been deprecated in favor of `protocol.handle`. This snippet demonstrates replacing the older protocol registration with the new `protocol.handle` API using `net.fetch`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated in Electron 25\nprotocol.registerHttpProtocol('some-protocol', () => {\n  callback({ url: 'https://electronjs.org' })\n})\n\n// Replace with\nprotocol.handle('some-protocol', () => {\n  return net.fetch('https://electronjs.org')\n})\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentDiscount Object Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the PaymentDiscount object. It includes the identifier, keyIdentifier, nonce, signature, and timestamp, each with a description of its purpose and format.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/payment-discount.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PaymentDiscount Object\n\n* `identifier` string - A string used to uniquely identify a discount offer for a product.\n* `keyIdentifier` string - A string that identifies the key used to generate the signature.\n* `nonce` string - A universally unique ID (UUID) value that you define.\n* `signature` string - A UTF-8 string representing the properties of a specific discount offer, cryptographically signed.\n* `timestamp` number - The date and time of the signature's creation in milliseconds, formatted in Unix epoch time.\n```\n\n----------------------------------------\n\nTITLE: Adding ElectronTeamID to Info.plist in XML\nDESCRIPTION: This XML snippet shows how to add the ElectronTeamID key to the Info.plist file of an Electron app bundle. This is required for app sandboxing and should contain the Apple Developer account's Team ID.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<plist version=\"1.0\">\n<dict>\n  ...\n  <key>ElectronTeamID</key>\n  <string>TEAM_ID</string>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Replacing BrowserWindow.getTrafficLightPosition with getWindowButtonPosition (JavaScript)\nDESCRIPTION: `BrowserWindow.getTrafficLightPosition()` has been deprecated.  `BrowserWindow.getWindowButtonPosition()` should be used instead which returns `null` instead of `{ x: 0, y: 0 }` when there is no custom position. This snippet demonstrates the updated approach.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated in Electron 25\nconst pos = win.getTrafficLightPosition()\nif (pos.x === 0 && pos.y === 0) {\n  // No custom position.\n}\n\n// Replace with\nconst ret = win.getWindowButtonPosition()\nif (ret === null) {\n  // No custom position.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Click-Through Window in Electron\nDESCRIPTION: This JavaScript snippet demonstrates how to create a click-through window in Electron by ignoring mouse events.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.setIgnoreMouseEvents(true)\n```\n\n----------------------------------------\n\nTITLE: Finishing All Transactions\nDESCRIPTION: Method to complete all pending transactions in the payment queue.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ninAppPurchase.finishAllTransactions()\n```\n\n----------------------------------------\n\nTITLE: Resolving gclient sync rebase conflicts in Electron\nDESCRIPTION: When gclient sync is interrupted, you may need to abort an in-progress git am process in the src directory. This snippet shows how to navigate to the parent directory, abort the git am command, return to the electron directory, and force a resync.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cd ../\n$ git am --abort\n$ cd electron\n$ gclient sync -f\n```\n\n----------------------------------------\n\nTITLE: Replacing NativeImage.getBitmap() with NativeImage.toBitmap() in Electron\nDESCRIPTION: This JavaScript code demonstrates the deprecation of `NativeImage.getBitmap()` and its replacement with `NativeImage.toBitmap()` in Electron. Both functions return a copy of the bitmap, but `NativeImage.toBitmap()` is the preferred method. The code shows both the deprecated and the recommended usage for clarity.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nbitmap = image.getBitmap()\n// Use this instead\nbitmap = image.toBitmap()\n```\n\n----------------------------------------\n\nTITLE: WebContents New-Window Event: Removed in Electron 22\nDESCRIPTION: This snippet shows the removal of the `new-window` event of WebContents and its replacement with `webContents.setWindowOpenHandler()`. The code demonstrates how to prevent the creation of new windows using the old event and how to achieve the same using the new handler.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed in Electron 22\nwebContents.on('new-window', (event) => {\n  event.preventDefault()\n})\n\n// Replace with\nwebContents.setWindowOpenHandler((details) => {\n  return { action: 'deny' }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining OpenExternalPermissionRequest Object in Electron (Markdown)\nDESCRIPTION: This snippet defines the OpenExternalPermissionRequest object, which extends the PermissionRequest object. It includes a single optional property 'externalURL' of type string, representing the URL of the openExternal request.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/open-external-permission-request.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# OpenExternalPermissionRequest Object extends `PermissionRequest`\n\n* `externalURL` string (optional) - The url of the `openExternal` request.\n```\n\n----------------------------------------\n\nTITLE: Getting Parent Window in Electron\nDESCRIPTION: Returns the parent BrowserWindow instance or null if there is no parent window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nwin.getParentWindow()\n```\n\n----------------------------------------\n\nTITLE: BrowserWindow BlinkFeatures Configuration (Deprecated)\nDESCRIPTION: This snippet shows the deprecated way of setting BlinkFeatures in BrowserWindow options and the recommended replacement using enableBlinkFeatures. The older method is deprecated and should be updated to use enableBlinkFeatures for correct functionality.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nconst optionsA = { webPreferences: { blinkFeatures: '' } }\nconst windowA = new BrowserWindow(optionsA)\n// Replace with\nconst optionsB = { webPreferences: { enableBlinkFeatures: '' } }\nconst windowB = new BrowserWindow(optionsB)\n```\n\n----------------------------------------\n\nTITLE: Installing Electron for specific platform\nDESCRIPTION: Command to install Electron for a specific platform (e.g., Windows) using the --platform flag with npm.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --platform=win32 electron\n```\n\n----------------------------------------\n\nTITLE: Handling Protocol URLs in macOS\nDESCRIPTION: Implementation for macOS to handle protocol URLs using the 'open-url' event. Creates the main window when the app is ready and shows a dialog when a URL with the custom protocol is opened.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  createWindow()\n})\n\n// Handle the protocol. In this case, we choose to show an Error Box.\napp.on('open-url', (event, url) => {\n  dialog.showErrorBox('Welcome Back', `You arrived from: ${url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Native Win32 Addon\nDESCRIPTION: The recommended folder structure for organizing a native Win32 addon project, showing the key files and directories needed including binding.gyp, header files, JavaScript interface, and C++ source files.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nmy-native-win32-addon/\n├── binding.gyp\n├── include/\n│   └── cpp_code.h\n├── js/\n│   └── index.js\n├── package.json\n└── src/\n    ├── cpp_addon.cc\n    └── cpp_code.cc\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Native Addon Project\nDESCRIPTION: Shell commands to create the necessary directory structure for a native Node.js addon project, including src (for source files), include (for header files), and js (for JavaScript wrapper).\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmkdir src\nmkdir include\nmkdir js\n```\n\n----------------------------------------\n\nTITLE: Set Image Animation Policy - Electron\nDESCRIPTION: This method sets the image animation policy for a given WebContents. The policy affects new images loaded into the WebContents. Existing animations are unaffected unless `img.src = img.src` is called to force a recalculation. The `policy` parameter can be 'animate', 'animateOnce', or 'noAnimation'.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ncontents.setImageAnimationPolicy(policy)\n```\n\n----------------------------------------\n\nTITLE: Insecure BrowserWindow Configuration with Blink Features\nDESCRIPTION: Example showing how not to configure a BrowserWindow by enabling specific Blink features that are disabled by default, which may cause security issues.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    enableBlinkFeatures: 'ExecCommandInJavaScript'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Visual Studio 2017 Developer Command Prompt Environment Output\nDESCRIPTION: This snippet shows the expected output when launching a correctly configured Visual Studio 2017 Developer Command Prompt for ARM64 cross-compilation.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-arm.md#2025-04-21_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n**********************************************************************\n** Visual Studio 2017 Developer Command Prompt v15.9.15\n** Copyright (c) 2017 Microsoft Corporation\n**********************************************************************\n[vcvarsall.bat] Environment initialized for: 'x64_arm64'\n```\n\n----------------------------------------\n\nTITLE: Formatting Todos for Display in Windows GUI\nDESCRIPTION: Provides a helper function that formats todo text and timestamp into a user-friendly display string for the listbox, using Windows locale-aware date formatting.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n  std::wstring FormatTodoDisplay(const std::wstring &text, const SYSTEMTIME &st)\n  {\n    wchar_t dateStr[64];\n    GetDateFormatW(LOCALE_USER_DEFAULT, DATE_SHORTDATE, &st, nullptr, dateStr, 64);\n    return text + L\" - \" + dateStr;\n  }\n```\n\n----------------------------------------\n\nTITLE: Replacing protocol.registerBufferProtocol with protocol.handle (JavaScript)\nDESCRIPTION: The `protocol.registerBufferProtocol` method has been deprecated in favor of `protocol.handle`. This snippet demonstrates replacing the older protocol registration with the new `protocol.handle` API using `Response` objects.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated in Electron 25\nprotocol.registerBufferProtocol('some-protocol', () => {\n  callback({ mimeType: 'text/html', data: Buffer.from('<h5>Response</h5>') })\n})\n\n// Replace with\nprotocol.handle('some-protocol', () => {\n  return new Response(\n    Buffer.from('<h5>Response</h5>'), // Could also be a string or ReadableStream.\n    { headers: { 'content-type': 'text/html' } }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Frame Content in Electron BrowserWindow\nDESCRIPTION: Demonstrates how to access and filter frames within a webpage using the mainFrame property of WebContents. Shows filtering YouTube embeds from Reddit page frames.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame-main.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\n\nasync function main () {\n  const win = new BrowserWindow({ width: 800, height: 600 })\n  await win.loadURL('https://reddit.com')\n\n  const youtubeEmbeds = win.webContents.mainFrame.frames.filter((frame) => {\n    try {\n      const url = new URL(frame.url)\n      return url.host === 'www.youtube.com'\n    } catch {\n      return false\n    }\n  })\n\n  console.log(youtubeEmbeds)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Objective-C Code Structure (objc_code.mm)\nDESCRIPTION: This Objective-C++ file implements the native macOS GUI. It imports necessary frameworks (Foundation and AppKit), defines the callback type, and declares a static variable to store the JavaScript callback function. It sets up the basic structure required to create a native macOS GUI using AppKit.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_3\n\nLANGUAGE: objc\nCODE:\n```\n#import <Foundation/Foundation.h>\n#import <AppKit/AppKit.h>\n#import <string>\n#import <functional>\n#import \"../include/objc_code.h\"\n\nusing TodoCallback = std::function<void(const std::string&)>;\n\nstatic TodoCallback g_todoAddedCallback;\n\n// More code to follow later...\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in Electron HTTP Requests\nDESCRIPTION: The followRedirect() method continues any pending redirection. It can only be called during a 'redirect' event, allowing for programmatic control over HTTP redirects.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.followRedirect()\n```\n\n----------------------------------------\n\nTITLE: Testing Keyboard Input with WebdriverIO in Electron\nDESCRIPTION: Example test that detects keyboard input in an Electron application using WebdriverIO. It simulates key presses and verifies the application's response.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { browser, $, expect } from '@wdio/globals'\n\ndescribe('keyboard input', () => {\n  it('should detect keyboard input', async () => {\n    await browser.keys(['y', 'o'])\n    await expect($('keypress-count')).toHaveText('YO')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Possible GPUFeatureStatus Values in Markdown\nDESCRIPTION: This snippet enumerates the possible status values for GPU features. Each value represents a different state of hardware acceleration or availability, with a brief description and color indication (red, yellow, or green) for visual representation in user interfaces.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/gpu-feature-status.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* `disabled_software` - Software only. Hardware acceleration disabled (yellow)\n* `disabled_off` - Disabled (red)\n* `disabled_off_ok` - Disabled (yellow)\n* `unavailable_software` - Software only, hardware acceleration unavailable (yellow)\n* `unavailable_off` - Unavailable (red)\n* `unavailable_off_ok` - Unavailable (yellow)\n* `enabled_readback` - Hardware accelerated but at reduced performance (yellow)\n* `enabled_force` - Hardware accelerated on all pages (green)\n* `enabled` - Hardware accelerated (green)\n* `enabled_on` - Enabled (green)\n* `enabled_force_on` - Force enabled (green)\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for Electron Main Process Debugging\nDESCRIPTION: JSON configuration for debugging the main process of an Electron application in Visual Studio Code. It specifies the runtime executable and arguments for launching the app.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/debugging-vscode.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Main Process\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron\",\n      \"windows\": {\n        \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron.cmd\"\n      },\n      \"args\" : [\".\"],\n      \"outputCapture\": \"std\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy IPC Communication Using ipcRenderer.send\nDESCRIPTION: Demonstrates two-way communication between renderer and main process using ipcRenderer.send. This pattern was commonly used before Electron 7 but has limitations with message tracking and response handling.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ipcRenderer } = require('electron')\n\nipcRenderer.on('asynchronous-reply', (_event, arg) => {\n  console.log(arg) // prints \"pong\" in the DevTools console\n})\nipcRenderer.send('asynchronous-message', 'ping')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nipcMain.on('asynchronous-message', (event, arg) => {\n  console.log(arg) // prints \"ping\" in the Node console\n  event.reply('asynchronous-reply', 'pong')\n})\n```\n\n----------------------------------------\n\nTITLE: Example of Locale and Language API Return Values in Electron (macOS)\nDESCRIPTION: This example demonstrates the different return values from Electron's locale and language APIs on macOS with German application locale, Finland region, and specific preferred system languages.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\napp.getLocale() // 'de'\napp.getSystemLocale() // 'fr-FI'\napp.getPreferredSystemLanguages() // ['fr-CA', 'en-US', 'zh-Hans-FI', 'es-419']\n```\n\n----------------------------------------\n\nTITLE: Manual Module Building with node-gyp\nDESCRIPTION: Command to manually rebuild a native module for Electron using node-gyp with specific target version and architecture.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd /path-to-module/\nHOME=~/.electron-gyp node-gyp rebuild --target=1.2.3 --arch=x64 --dist-url=https://electronjs.org/headers\n```\n\n----------------------------------------\n\nTITLE: Defining FilePathWithHeaders Object Structure in Markdown\nDESCRIPTION: Documentation for the FilePathWithHeaders object with its properties. It consists of a required 'path' string for specifying file path and an optional 'headers' object for additional HTTP headers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/file-path-with-headers.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# FilePathWithHeaders Object\n\n* `path` string - The path to the file to send.\n* `headers` Record\\<string, string\\> (optional) - Additional headers to be sent.\n```\n\n----------------------------------------\n\nTITLE: Setting DNS Result Order in Electron Command Line\nDESCRIPTION: The '--dns-result-order' flag sets the default value of the 'verbatim' parameter in Node.js DNS lookup functions. It can be set to 'ipv4first' or 'verbatim' to control IP address resolution behavior.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n--dns-result-order=order\n```\n\n----------------------------------------\n\nTITLE: ObjcAddon Constructor and Threadsafe Callback Setup\nDESCRIPTION: This code defines the constructor for the ObjcAddon class. It initializes member variables, creates a threadsafe function using N-API to handle callbacks from other threads, defines a lambda for creating callback functions for specific event types, and registers the 'todoAdded' callback with the Objective-C code. The constructor makes use of napi_create_threadsafe_function for handling asynchronous callbacks.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_16\n\nLANGUAGE: objective-c++\nCODE:\n```\nObjcAddon(const Napi::CallbackInfo& info)\n    : Napi::ObjectWrap<ObjcAddon>(info)\n    , env_(info.Env())\n    , emitter(Napi::Persistent(Napi::Object::New(info.Env())))\n    , callbacks(Napi::Persistent(Napi::Object::New(info.Env())))\n    , tsfn_(nullptr) {\n\n    napi_status status = napi_create_threadsafe_function(\n        env_,\n        nullptr,\n        nullptr,\n        Napi::String::New(env_, \"ObjcCallback\"),\n        0,\n        1,\n        nullptr,\n        nullptr,\n        this,\n        [](napi_env env, napi_value js_callback, void* context, void* data) {\n            auto* callbackData = static_cast<CallbackData*>(data);\n            if (!callbackData) return;\n\n            Napi::Env napi_env(env);\n            Napi::HandleScope scope(napi_env);\n\n            auto addon = static_cast<ObjcAddon*>(context);\n            if (!addon) {\n                delete callbackData;\n                return;\n            }\n\n            try {\n                auto callback = addon->callbacks.Value().Get(callbackData->eventType).As<Napi::Function>();\n                if (callback.IsFunction()) {\n                    callback.Call(addon->emitter.Value(), {Napi::String::New(napi_env, callbackData->payload)});\n                }\n            } catch (...) {}\n\n            delete callbackData;\n        },\n        &tsfn_\n    );\n\n    if (status != napi_ok) {\n        Napi::Error::New(env_, \"Failed to create threadsafe function\").ThrowAsJavaScriptException();\n        return;\n    }\n\n    // Set up the callbacks\n    auto makeCallback = [this](const std::string& eventType) {\n        return [this, eventType](const std::string& payload) {\n            if (tsfn_ != nullptr) {\n                auto* data = new CallbackData{\n                    eventType,\n                    payload,\n                    this\n                };\n                napi_call_threadsafe_function(tsfn_, data, napi_tsfn_blocking);\n            }\n        };\n    };\n\n    objc_code::setTodoAddedCallback(makeCallback(\"todoAdded\"));\n}\n\n~ObjcAddon() {\n    if (tsfn_ != nullptr) {\n        napi_release_threadsafe_function(tsfn_, napi_tsfn_release);\n        tsfn_ = nullptr;\n    }\n}\n\nprivate:\n    Napi::Env env_;\n    Napi::ObjectReference emitter;\n    Napi::ObjectReference callbacks;\n    napi_threadsafe_function tsfn_;\n```\n\n----------------------------------------\n\nTITLE: Installing Electron as a Development Dependency\nDESCRIPTION: Command to install Electron as a development dependency. Electron is added to devDependencies as production apps will be bundled with the Electron binary.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install electron --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing update-electron-app Module\nDESCRIPTION: Installs the update-electron-app module as a runtime dependency for easy autoUpdater configuration.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install update-electron-app\n```\n\n----------------------------------------\n\nTITLE: WebView Keyboard Listener Removal\nDESCRIPTION: This snippet indicates that keyboard listeners no longer function directly on the webview tag.  Developers must find alternative methods for handling keyboard input within the webview.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\n// Keyboard listeners no longer work on webview tag\nwebview.onkeydown = () => { /* handler */ }\nwebview.onkeyup = () => { /* handler */ }\n```\n\n----------------------------------------\n\nTITLE: Setting Vibrancy Effect - Electron JavaScript\nDESCRIPTION: Adds a vibrancy effect to the current window in macOS. The effect type is specified, with removal options available. This enhances the aesthetic appeal of the window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setVibrancy(type)\n```\n\n----------------------------------------\n\nTITLE: Code Patch for Electron contextBridge Usage\nDESCRIPTION: A patch example showing how to modify code to handle the breaking change where ipcRenderer can no longer be directly exposed through contextBridge, requiring a wrapper function instead.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_9\n\nLANGUAGE: patch\nCODE:\n```\n  contextBridge.exposeInMainWorld('app', {\n-   ipcRenderer,\n+   onEvent: (cb) => ipcRenderer.on('foo', (e, ...args) => cb(args))\n  })\n```\n\n----------------------------------------\n\nTITLE: Deprecated API - History\nDESCRIPTION: This YAML snippet documents the deprecation of the `contents.goBack()` API in Electron, indicating the pull request that introduced the change and the breaking changes header associated with it.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\ndeprecated:\n  - pr-url: https://github.com/electron/electron/pull/41752\n    breaking-changes-header: deprecated-clearhistory-cangoback-goback-cangoforward-goforward-gotoindex-cangotooffset-gotooffset-on-webcontents\n```\n\n----------------------------------------\n\nTITLE: Screen GetMenuBarHeight Replacement\nDESCRIPTION: This snippet highlights the deprecated screen.getMenuBarHeight() method and its suggested replacement using screen.getPrimaryDisplay().workArea. Accessing workArea provides the available screen space excluding system UI elements like the menu bar.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nscreen.getMenuBarHeight()\n// Replace with\nscreen.getPrimaryDisplay().workArea\n```\n\n----------------------------------------\n\nTITLE: Replacing WebContents new-window event with setWindowOpenHandler\nDESCRIPTION: Demonstrates the deprecation of the `new-window` event of WebContents and its replacement with `webContents.setWindowOpenHandler()`.  Illustrates both the deprecated and current method of handling new windows.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated in Electron 13\nwebContents.on('new-window', (event) => {\n  event.preventDefault()\n})\n\n// Replace with\nwebContents.setWindowOpenHandler((details) => {\n  return { action: 'deny' }\n})\n```\n\n----------------------------------------\n\nTITLE: Deprecated session.clearAuthCache() Options - JavaScript\nDESCRIPTION: Illustrates the removal of options from `session.clearAuthCache()`.  The API now unconditionally clears the whole cache instead of selectively clearing based on the type. Requires `electron` to be installed to provide `session` module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nsession.clearAuthCache({ type: 'password' })\n// Replace with\nsession.clearAuthCache()\n```\n\n----------------------------------------\n\nTITLE: Running Electron Tests with xvfb-maybe\nDESCRIPTION: Command demonstrating how to run Electron-Mocha tests using xvfb-maybe, which automatically configures Xvfb on Linux systems while doing nothing on Windows/macOS\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/testing-on-headless-ci.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n## On Windows or macOS, this invokes electron-mocha\n## On Linux, if we are in a headless environment, this will be equivalent\n## to xvfb-run electron-mocha ./test/*.js\nxvfb-maybe electron-mocha ./test/*.js\n```\n\n----------------------------------------\n\nTITLE: Method Documentation Format\nDESCRIPTION: Template showing the standard format for documenting methods and their arguments.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### `objectName.methodName(required[, optional]))`\n\n* `required` string - A parameter description.\n* `optional` Integer (optional) - Another parameter description.\n\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shared Texture Handle in C++\nDESCRIPTION: This snippet demonstrates how to retrieve the shared texture handle from JavaScript arguments in a node native addon. It extracts the handle information from the provided texture info object.\nSOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nauto textureInfo = args[0];\nauto sharedTextureHandle =\n    NAPI_GET_PROPERTY_VALUE(textureInfo, \"sharedTextureHandle\");\n\nsize_t handleBufferSize;\nuint8_t* handleBufferData;\nnapi_get_buffer_info(env, sharedTextureHandle,\n                      reinterpret_cast<void**>(&handleBufferData),\n                      &handleBufferSize);\n```\n\n----------------------------------------\n\nTITLE: Initializing TouchBarColorPicker in Electron\nDESCRIPTION: Constructor for creating a new TouchBarColorPicker instance with configuration options including available colors, selected color, and change event handler.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-color-picker.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew TouchBarColorPicker({\n  availableColors: ['#FFFFFF', '#000000'], // Array of hex colors\n  selectedColor: '#FFFFFF',  // Initial selected color\n  change: (color) => {\n    // Handle color selection\n    console.log('Selected color:', color);\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Logging Resource Usage\nDESCRIPTION: Example showing how to log memory usage information for various resource types like images, scripts, and stylesheets.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { webFrame } = require('electron')\nconsole.log(webFrame.getResourceUsage())\n```\n\n----------------------------------------\n\nTITLE: Synchronous protocol.unregisterProtocol API\nDESCRIPTION: The `protocol.unregisterProtocol` API is now synchronous, and the optional callback is no longer needed. This snippet shows the old deprecated asynchronous version and the new synchronous version of the API.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_59\n\nLANGUAGE: js\nCODE:\n```\n// Deprecated\nprotocol.unregisterProtocol(scheme, () => { /* ... */ })\n// Replace with\nprotocol.unregisterProtocol(scheme)\n```\n\n----------------------------------------\n\nTITLE: WebView Attributes Removal\nDESCRIPTION: This snippet highlights the removal of the 'disableguestresize' and 'guestinstance' attributes from the `<webview>` tag. The comment indicates that there are no direct replacements for these APIs, suggesting an alternative approach to managing webview resizing and instances is necessary.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed\nwebview.setAttribute('disableguestresize', '')\n// There is no replacement for this API\n\n// Removed\nwebview.setAttribute('guestinstance', instanceId)\n// There is no replacement for this API\n```\n\n----------------------------------------\n\nTITLE: Building Electron in Debug Mode\nDESCRIPTION: Shell commands for generating and building Electron in debug mode using GN and Ninja build systems.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ gn gen out/Debug --args=\"import(\\\"//electron/.git/info/exclude/debug.gn\\\") $GN_EXTRA_ARGS\"\n$ ninja -C out/Debug electron\n```\n\n----------------------------------------\n\nTITLE: Creating a Tray Icon with NativeImage in Electron\nDESCRIPTION: This code demonstrates how to create a Tray icon using a NativeImage when the Electron app is ready. It uses app.whenReady() to ensure the app is initialized before creating the Tray.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet tray\n\napp.whenReady().then(() => {\n  const icon = nativeImage.createFromPath('path/to/asset.png')\n  tray = new Tray(icon)\n\n  // note: your contextMenu, Tooltip and Title code will go here!\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Incoming Network Connections in Electron Apps (XML)\nDESCRIPTION: This XML snippet enables incoming network connections for an Electron app, allowing it to open a network listening socket. It sets the 'com.apple.security.network.server' key to true in the app's entitlements.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.security.network.server</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Initializing npm Project for Electron App\nDESCRIPTION: Commands to create a new folder for the Electron application and initialize an npm project within it. This creates the initial package.json file that serves as the entry point for the application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-electron-app && cd my-electron-app\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Implementing Table View Data Source in Objective-C\nDESCRIPTION: These Objective-C methods implement the data source for the table view.  `numberOfRowsInTableView:` returns the number of todos in the data source. `tableView:objectValueForTableColumn:row:` provides the text or formatted date for each cell in the table based on the column identifier.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_11\n\nLANGUAGE: objc\nCODE:\n```\n// Previous code...\n\n// NSTableViewDataSource methods\n- (NSInteger)numberOfRowsInTableView:(NSTableView *)tableView {\n    return [_todos count];\n}\n\n- (id)tableView:(NSTableView *)tableView objectValueForTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row {\n    NSDictionary *todo = _todos[row];\n    NSString *identifier = [tableColumn identifier];\n\n    if ([identifier isEqualToString:@\"text\"]) {\n        return todo[@\"text\"];\n    } else if ([identifier isEqualToString:@\"date\"]) {\n        NSDate *date = todo[@\"date\"];\n        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n        [formatter setDateStyle:NSDateFormatterShortStyle];\n        return [formatter stringFromDate:date];\n    }\n\n    return nil;\n}\n\n@end\n\n// More code to follow later...\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessibility via Swift in Electron\nDESCRIPTION: This Swift code snippet demonstrates how to enable accessibility features in an Electron application on macOS by setting the `AXManualAccessibility` attribute. It retrieves the process identifier of the Electron application and uses the Accessibility API to set the attribute to `true`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/accessibility.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport Cocoa\nlet name = CommandLine.arguments.count >= 2 ? CommandLine.arguments[1] : \"Electron\"\nlet pid = NSWorkspace.shared.runningApplications.first(where: {$0.localizedName == name})!.processIdentifier\nlet axApp = AXUIElementCreateApplication(pid)\nlet result = AXUIElementSetAttributeValue(axApp, \"AXManualAccessibility\" as CFString, true as CFTypeRef)\nprint(\"Setting 'AXManualAccessibility' \\(error.rawValue == 0 ? \\\"succeeded\\\" : \\\"failed\\\")\")\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Storage Backend in Electron (Linux Only)\nDESCRIPTION: This Linux-specific method returns a string indicating the selected password manager or storage backend being used for encryption.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsafeStorage.getSelectedStorageBackend()\n```\n\n----------------------------------------\n\nTITLE: Enabling Outgoing Network Connections in Electron Apps (XML)\nDESCRIPTION: This XML snippet enables outgoing network connections for an Electron app, allowing it to connect to a server. It sets the 'com.apple.security.network.client' key to true in the app's entitlements.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.security.network.client</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Documenting Publish to GitHub Script in Markdown\nDESCRIPTION: Details the 'publish-to-github' script, which finalizes the GitHub release by uploading headers, updating the assets CDN, and publishing the release.\nSOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### `publish-to-github`\n\nThis script finalizes the GitHub release, in the process it:\n\n* Uploads the header SHASUMs to the CDN\n* Updates the `index.json` file on the assets CDN with the new version via metadumper\n* Publishes the actual GitHub release\n```\n\n----------------------------------------\n\nTITLE: Defining WindowSessionEndEvent Object Structure in Electron\nDESCRIPTION: Specifies the structure of WindowSessionEndEvent object that extends Event class. Contains a reasons array property that lists possible shutdown scenarios including shutdown, close-app, critical, or logoff. Note that Windows cannot distinguish between shutdown and reboot events.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/window-session-end-event.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WindowSessionEndEvent extends Event {\n  reasons: Array<'shutdown' | 'close-app' | 'critical' | 'logoff'>\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pull Request with New Changes\nDESCRIPTION: Commands for adding new commits and pushing updates to an existing pull request.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ git add my/changed/files\n$ git commit\n$ git push origin my-branch\n```\n\n----------------------------------------\n\nTITLE: Running Electron ad-hoc using npx\nDESCRIPTION: Command to run Electron in the current working directory without installing it as a dependency. Note that this method won't install any dependencies your app might need.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx electron .\n```\n\n----------------------------------------\n\nTITLE: Configuring binding.gyp for Native Addon Build\nDESCRIPTION: Node-gyp configuration file that defines how to build the native addon. Includes target name, source files, include directories, dependencies, and platform-specific compiler settings for handling C++ exceptions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": [\n    {\n      \"target_name\": \"my_addon\",\n      \"sources\": [\n        \"src/my_addon.cc\",\n        \"src/cpp_code.cc\"\n      ],\n      \"include_dirs\": [\n        \"<!@(node -p \\\"require('node-addon-api').include\\\")\",\n        \"include\"\n      ],\n      \"dependencies\": [\n        \"<!(node -p \\\"require('node-addon-api').gyp\\\")\"\n      ],\n      \"defines\": [\n        \"NODE_ADDON_API_CPP_EXCEPTIONS\"\n      ],\n      \"cflags!\": [\"-fno-exceptions\"],\n      \"cflags_cc!\": [\"-fno-exceptions\"],\n      \"xcode_settings\": {\n        \"GCC_ENABLE_CPP_EXCEPTIONS\": \"YES\",\n        \"CLANG_CXX_LIBRARY\": \"libc++\",\n        \"MACOSX_DEPLOYMENT_TARGET\": \"10.14\"\n      },\n      \"msvs_settings\": {\n        \"VCCLCompilerTool\": {\n          \"ExceptionHandling\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Patches in Electron\nDESCRIPTION: Process for removing a patch from the patch set, including resetting the repository state and regenerating the patch files.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ vim src/electron/patches/node/.patches\n# Delete the line with the name of the patch you want to remove\n$ cd src/third_party/electron_node\n$ git reset --hard refs/patches/upstream-head\n$ ../../electron/script/git-import-patches ../../electron/patches/node\n$ ../../electron/script/git-export-patches -o ../../electron/patches/node\n```\n\n----------------------------------------\n\nTITLE: Electron Launch Script\nDESCRIPTION: Shell script used to launch the Electron application within the Snap container.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\nexec \"$@\" --executed-from=\"$(pwd)\" --pid=$$ > /dev/null 2>&1 &\n```\n\n----------------------------------------\n\nTITLE: Sending Messages Using GlobalMessagePort in Renderer\nDESCRIPTION: Shows how to send a message using a globally available MessagePort in a renderer process, which will be received by another renderer that has the other end of the channel.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// elsewhere in your code to send a message to the other renderers message handler\nwindow.electronMessagePort.postMessage('ping')\n```\n\n----------------------------------------\n\nTITLE: Configuring BrowserWindow with Insecure Web Preferences in Electron\nDESCRIPTION: Example of insecure configuration for a BrowserWindow that enables Node.js integration in the renderer process, which is not recommended for security reasons.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    contextIsolation: false,\n    nodeIntegration: true,\n    nodeIntegrationInWorker: true\n  }\n})\n\nmainWindow.loadURL('https://example.com')\n```\n\n----------------------------------------\n\nTITLE: Get WebContents Type - Electron\nDESCRIPTION: This method returns a string indicating the type of the WebContents. The possible values are 'backgroundPage', 'window', 'browserView', 'remote', 'webview', or 'offscreen'.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ncontents.getType()\n```\n\n----------------------------------------\n\nTITLE: Creating Preload Script with Context Bridge in Electron\nDESCRIPTION: Demonstrates how to expose selected Node.js process versions to the renderer process using contextBridge in a preload script.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { contextBridge } = require('electron')\n\ncontextBridge.exposeInMainWorld('versions', {\n  node: () => process.versions.node,\n  chrome: () => process.versions.chrome,\n  electron: () => process.versions.electron\n  // we can also expose variables, not just functions\n})\n```\n\n----------------------------------------\n\nTITLE: Window Controller Interface (objc_code.mm)\nDESCRIPTION: This Objective-C interface declares the TodoWindowController class, which manages the window and UI components. The properties include a text field (NSTextField) for entering todo text, a date picker (NSDatePicker) for selecting the date, an \"Add\" button (NSButton), a table view to display the todos (NSTableView), and an array to store the todo items (NSMutableArray).\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\n// Previous code...\n\n// Forward declaration of our custom classes\n@interface TodoWindowController : NSWindowController\n@property (strong) NSTextField *textField;\n@property (strong) NSDatePicker *datePicker;\n@property (strong) NSButton *addButton;\n@property (strong) NSTableView *tableView;\n@property (strong) NSMutableArray<NSDictionary*> *todos;\n@end\n\n// More code to follow later...\n```\n\n----------------------------------------\n\nTITLE: Enabling remote module in BrowserWindow WebPreferences\nDESCRIPTION: The remote module is disabled by default in Electron 10.  This snippet demonstrates how to enable the remote module by setting `enableRemoteModule: true` in the `webPreferences` of a `BrowserWindow` constructor.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_58\n\nLANGUAGE: js\nCODE:\n```\nconst w = new BrowserWindow({\n  webPreferences: {\n    enableRemoteModule: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Window Creation When App is Ready\nDESCRIPTION: Code that waits for the Electron app to be ready before creating a window. It uses app.whenReady() which returns a promise that resolves when the app is initialized.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\napp.whenReady().then(() => {\n  createWindow()\n})\n```\n\n----------------------------------------\n\nTITLE: Using ipcMainServiceWorker.once() for One-time Listening\nDESCRIPTION: Adds a one-time listener function that will be invoked only the next time a message is sent to the specified channel, after which it is automatically removed.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nipcMainServiceWorker.once(channel, listener)\n```\n\n----------------------------------------\n\nTITLE: Temporary Directory Reference Example\nDESCRIPTION: Shows platform-independent way to reference temporary directory using Node.js os module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/coding-style.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nos.tmpdir()\n```\n\n----------------------------------------\n\nTITLE: Displaying Electron Main Source Directory Structure\nDESCRIPTION: Shows the hierarchical layout of Electron's main source code directory, including build configuration, documentation, source code (JS/TS and C++), tests, and patches directories. Each directory's purpose and contents are annotated.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/source-code-directory-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nElectron\n├── build/ - Build configuration files needed to build with GN.\n├── buildflags/ - Determines the set of features that can be conditionally built.\n├── chromium_src/ - Source code copied from Chromium that isn't part of the content layer.\n├── default_app/ - A default app run when Electron is started without\n|                  providing a consumer app.\n├── docs/ - Electron's documentation.\n|   ├── api/ - Documentation for Electron's externally-facing modules and APIs.\n|   ├── development/ - Documentation to aid in developing for and with Electron.\n|   ├── fiddles/ - A set of code snippets one can run in Electron Fiddle.\n|   ├── images/ - Images used in documentation.\n|   └── tutorial/ - Tutorial documents for various aspects of Electron.\n├── lib/ - JavaScript/TypeScript source code.\n|   ├── browser/ - Main process initialization code.\n|   |   ├── api/ - API implementation for main process modules.\n|   |   └── remote/ - Code related to the remote module as it is\n|   |                 used in the main process.\n|   ├── common/ - Relating to logic needed by both main and renderer processes.\n|   |   └── api/ - API implementation for modules that can be used in\n|   |              both the main and renderer processes\n|   ├── isolated_renderer/ - Handles creation of isolated renderer processes when\n|   |                        contextIsolation is enabled.\n|   ├── renderer/ - Renderer process initialization code.\n|   |   ├── api/ - API implementation for renderer process modules.\n|   |   ├── extension/ - Code related to use of Chrome Extensions\n|   |   |                in Electron's renderer process.\n|   |   ├── remote/ - Logic that handles use of the remote module in\n|   |   |             the main process.\n|   |   └── web-view/ - Logic that handles the use of webviews in the\n|   |                   renderer process.\n|   ├── sandboxed_renderer/ - Logic that handles creation of sandboxed renderer\n|   |   |                     processes.\n|   |   └── api/ - API implementation for sandboxed renderer processes.\n|   └── worker/ - Logic that handles proper functionality of Node.js\n|                 environments in Web Workers.\n├── patches/ - Patches applied on top of Electron's core dependencies\n|   |          in order to handle differences between our use cases and\n|   |          default functionality.\n|   ├── boringssl/ - Patches applied to Google's fork of OpenSSL, BoringSSL.\n|   ├── chromium/ - Patches applied to Chromium.\n|   ├── node/ - Patches applied on top of Node.js.\n|   └── v8/ - Patches applied on top of Google's V8 engine.\n├── shell/ - C++ source code.\n|   ├── app/ - System entry code.\n|   ├── browser/ - The frontend including the main window, UI, and all of the\n|   |   |          main process things. This talks to the renderer to manage web\n|   |   |          pages.\n|   |   ├── ui/ - Implementation of UI stuff for different platforms.\n|   |   |   ├── cocoa/ - Cocoa specific source code.\n|   |   |   ├── win/ - Windows GUI specific source code.\n|   |   |   └── x/ - X11 specific source code.\n|   |   ├── api/ - The implementation of the main process APIs.\n|   |   ├── net/ - Network related code.\n|   |   ├── mac/ - Mac specific Objective-C source code.\n|   |   └── resources/ - Icons, platform-dependent files, etc.\n|   ├── renderer/ - Code that runs in renderer process.\n|   |   └── api/ - The implementation of renderer process APIs.\n|   └── common/ - Code that used by both the main and renderer processes,\n|       |         including some utility functions and code to integrate node's\n|       |         message loop into Chromium's message loop.\n|       └── api/ - The implementation of common APIs, and foundations of\n|                  Electron's built-in modules.\n├── spec/ - Components of Electron's test suite run in the main process.\n└── BUILD.gn - Building rules of Electron.\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Symbol Loading in Windbg\nDESCRIPTION: Commands to diagnose symbol loading issues in Windbg by enabling verbose symbol logging and forcing reload of electron.exe symbols.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-with-symbol-server.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n> !sym noisy\n> .reload /f electron.exe\n```\n\n----------------------------------------\n\nTITLE: Replacing powerMonitor.querySystemIdleTime with powerMonitor.getSystemIdleTime in Electron\nDESCRIPTION: This snippet illustrates replacing the deprecated `powerMonitor.querySystemIdleTime` with the synchronous `powerMonitor.getSystemIdleTime`. The old method used a callback to return the idle time, while the new method returns the value directly.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_79\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\npowerMonitor.querySystemIdleTime(callback)\n// Replace with synchronous API\nconst idleTime = powerMonitor.getSystemIdleTime()\n```\n\n----------------------------------------\n\nTITLE: Getting All BrowserViews in Electron (Deprecated)\nDESCRIPTION: Returns a z-index sorted array of all BrowserViews attached to the window. The top-most BrowserView is the last element of the array. This method is deprecated and replaced by WebContentsView.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nwin.getBrowserViews()\n```\n\n----------------------------------------\n\nTITLE: Documenting Run Release Build Script in Markdown\nDESCRIPTION: Describes the 'run-release-build' script, used to re-run specific release builds after failures.\nSOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### `run-release-build`\n\nThis script is used to re-kick specific release builds after they fail. Sudowoodo is responsible for prompting the release team as to whether or not to run this script.\n```\n\n----------------------------------------\n\nTITLE: Getting Window Button Position in Electron for macOS\nDESCRIPTION: Returns the custom position for the traffic light buttons in a frameless window on macOS. Returns null when there is no custom position set.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nwin.getWindowButtonPosition()\n```\n\n----------------------------------------\n\nTITLE: Example Electron app directory structure\nDESCRIPTION: Shows the typical file structure of a packaged Electron application. This structure is the expected input for the electron-windows-store tool.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-store-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n├── Ghost.exe\n├── LICENSE\n├── content_resources_200_percent.pak\n├── content_shell.pak\n├── d3dcompiler_47.dll\n├── ffmpeg.dll\n├── icudtl.dat\n├── libEGL.dll\n├── libGLESv2.dll\n├── locales\n│   ├── am.pak\n│   ├── ar.pak\n│   ├── [...]\n├── node.dll\n├── resources\n│   └── app.asar\n├── v8_context_snapshot.bin\n├── squirrel.exe\n└── ui_resources_200_percent.pak\n```\n\n----------------------------------------\n\nTITLE: Initializing TouchBarGroup Constructor in Electron\nDESCRIPTION: Constructor signature for creating a new TouchBarGroup instance in the main process. Takes an options object with a TouchBar items array to display as a grouped unit in the macOS touch bar.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-group.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew TouchBarGroup(options: {\n  items: TouchBar\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting Next Tab - Electron JavaScript\nDESCRIPTION: Selects the next tab in a window with native tab support on macOS. This function is useful for navigating through multiple tabs.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nwin.selectNextTab()\n```\n\n----------------------------------------\n\nTITLE: Defining MemoryInfo Object Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the MemoryInfo object, including workingSetSize, peakWorkingSetSize, and privateBytes. It specifies the data types and provides brief descriptions for each property. The privateBytes property is noted as Windows-specific and optional.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/memory-info.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# MemoryInfo Object\n\n* `workingSetSize` Integer - The amount of memory currently pinned to actual physical RAM.\n* `peakWorkingSetSize` Integer - The maximum amount of memory that has ever been pinned\n  to actual physical RAM.\n* `privateBytes` Integer (optional) _Windows_ - The amount of memory not shared by other processes, such as\n  JS heap or HTML content.\n\nNote that all statistics are reported in Kilobytes.\n```\n\n----------------------------------------\n\nTITLE: Tray Highlight Mode Configuration (Deprecated)\nDESCRIPTION: This snippet illustrates the deprecated boolean values for tray.setHighlightMode() and their string replacements 'on' and 'off'. Using the string values ensures compatibility with the updated API for controlling tray highlight behavior.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\ntray.setHighlightMode(true)\n// Replace with\ntray.setHighlightMode('on')\n\n// Deprecated\ntray.setHighlightMode(false)\n// Replace with\ntray.setHighlightMode('off')\n```\n\n----------------------------------------\n\nTITLE: C++ Header Interface for Win32 Native Addon\nDESCRIPTION: The C++ header file defining the interface between JavaScript and native code, including functions for basic string manipulation, GUI creation, and callback mechanisms for Todo operations.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n#pragma once\n#include <string>\n#include <functional>\n\nnamespace cpp_code {\n\nstd::string hello_world(const std::string& input);\nvoid hello_gui();\n\n// Callback function types\nusing TodoCallback = std::function<void(const std::string&)>;\n\n// Callback setters\nvoid setTodoAddedCallback(TodoCallback callback);\n\n} // namespace cpp_code\n```\n\n----------------------------------------\n\nTITLE: Scrolling and Selection in Webview\nDESCRIPTION: Methods to control scrolling and text selection in the webview, including scrolling to extremes and adjusting selection boundaries.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.scrollToTop()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.scrollToBottom()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.adjustSelection(options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Spell Check Provider\nDESCRIPTION: Example demonstrating how to disable the built-in spellchecker and configure a custom spell check provider using node-spellchecker.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    spellcheck: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting Previous Tab - Electron JavaScript\nDESCRIPTION: Selects the previous tab in a window with native tab support on macOS. This function enhances navigation within tabbed interfaces.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nwin.selectPreviousTab()\n```\n\n----------------------------------------\n\nTITLE: Checking Service Worker Destruction Status in Electron\nDESCRIPTION: This method checks whether the service worker has been destroyed. It returns a boolean value indicating the destruction status.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/service-worker-main.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserviceWorker.isDestroyed()\n```\n\n----------------------------------------\n\nTITLE: Defining USBDevice Object Properties in Markdown\nDESCRIPTION: This snippet lists all the properties of the USBDevice object, including their types and descriptions. It covers unique identifiers, vendor and product information, version numbers, and USB protocol details.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/usb-device.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# USBDevice Object\n\n* `deviceId` string - Unique identifier for the device.\n* `vendorId` Integer - The USB vendor ID.\n* `productId` Integer - The USB product ID.\n* `productName` string (optional) - Name of the device.\n* `serialNumber` string (optional) - The USB device serial number.\n* `manufacturerName` string (optional) - The manufacturer name of the device.\n* `usbVersionMajor` Integer - The USB protocol major version supported by the device\n* `usbVersionMinor` Integer - The USB protocol minor version supported by the device\n* `usbVersionSubminor` Integer - The USB protocol subminor version supported by the device\n* `deviceClass` Integer - The device class for the communication interface supported by the device\n* `deviceSubclass` Integer - The device subclass for the communication interface supported by the device\n* `deviceProtocol` Integer - The device protocol for the communication interface supported by the device\n* `deviceVersionMajor` Integer - The major version number of the device as defined by the device manufacturer.\n* `deviceVersionMinor` Integer - The minor version number of the device as defined by the device manufacturer.\n* `deviceVersionSubminor` Integer - The subminor version number of the device as defined by the device manufacturer.\n```\n\n----------------------------------------\n\nTITLE: Initializing TouchBarSpacer in Electron\nDESCRIPTION: Creates a new TouchBarSpacer instance with configurable size options. The spacer can be small (default), large, or flexible to take up remaining space. This class is used to add spacing between Touch Bar items in macOS applications.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-spacer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew TouchBarSpacer({\n  size: 'small' // or 'large' or 'flexible'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Session from Partition in Electron\nDESCRIPTION: Shows how to create a Session object from a partition string using the session module and log the user agent.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { session } = require('electron')\nconst ses = session.fromPartition('persist:name')\nconsole.log(ses.getUserAgent())\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Fedora\nDESCRIPTION: Command to install required development libraries and tools on Fedora systems.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install clang dbus-devel gperf gtk3-devel \\\n                   libnotify-devel libgnome-keyring-devel libcap-devel \\\n                   cups-devel libXtst-devel alsa-lib-devel libXrandr-devel \\\n                   nss-devel python-dbusmock\n```\n\n----------------------------------------\n\nTITLE: Defining MemoryUsageDetails Object Properties in Markdown\nDESCRIPTION: Specifies the properties of the MemoryUsageDetails object, including count, size, and liveSize. All properties are of type number.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/memory-usage-details.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# MemoryUsageDetails Object\n\n* `count` number\n* `size` number\n* `liveSize` number\n```\n\n----------------------------------------\n\nTITLE: Documenting ipcRenderer API History with Markdown\nDESCRIPTION: Example of how to document changes to the ipcRenderer API with YAML history block in Markdown, showing the same breaking change that affects both ipcRenderer and contextBridge.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n# ipcRenderer\n\n<!--\n```YAML history\nchanges:\n  - pr-url: https://github.com/electron/electron/pull/40330\n    description: \"`ipcRenderer` can no longer be sent over the `contextBridge`\"\n    breaking-changes-header: behavior-changed-ipcrenderer-can-no-longer-be-sent-over-the-contextbridge\n```\n-->\n\nProcess: [Renderer](../glossary.md#renderer-process)\n```\n\n----------------------------------------\n\nTITLE: Invalid ESM Import in Electron Renderer Process\nDESCRIPTION: Shows an example of an ESM import that will not work in the renderer process due to lack of access to Node.js built-in modules.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/esm.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n    import { exists } from 'node:fs' // ❌ will not work!\n</script>\n```\n\n----------------------------------------\n\nTITLE: File Path Concatenation Example\nDESCRIPTION: Demonstrates platform-independent file path handling using Node.js path module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/coding-style.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npath.join()\n```\n\n----------------------------------------\n\nTITLE: Exporting Node.js V8 Patches Using Git Commands\nDESCRIPTION: Commands to extract patches made to V8 engine in Node.js. The process involves finding the last V8 update commit and creating a patch file containing all subsequent V8-related changes, excluding gypfiles directory. The patches are formatted to apply cleanly to the V8 repository.\nSOURCE: https://github.com/electron/electron/blob/main/patches/v8/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\n$ cd third_party/electron_node\n$ CURRENT_NODE_VERSION=vX.Y.Z  # e.g. v10.11.0\n\n# Find the last commit with the message \"deps: update V8 to <some version>\"\n# This commit corresponds to node resetting V8 to its pristine upstream\n# state at the stated version.\n$ LAST_V8_UPDATE=\"$(git log --grep='^deps: update V8' --format='%H' -1 deps/v8)\"\n\n# This creates a patch file containing all changes in deps/v8 from\n# $LAST_V8_UPDATE up to the current node version, formatted in a way that\n# it will apply cleanly to the V8 repository (i.e. with `deps/v8`\n# stripped off the path and excluding the v8/gypfiles directory, which\n# isn't present in V8.\n$ git format-patch \\\n    --relative=deps/v8 \\\n    $LAST_V8_UPDATE..$CURRENT_NODE_VERSION \\\n    deps/v8 \\\n    ':(exclude)deps/v8/gypfiles' \\\n    --stdout\n```\n\n----------------------------------------\n\nTITLE: Setting Cursor Auto-Hide When Typing in Electron for macOS\nDESCRIPTION: Controls whether the cursor should automatically hide when the user is typing in the window.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setAutoHideCursor(autoHide)\n```\n\n----------------------------------------\n\nTITLE: Webview State and User Agent Management\nDESCRIPTION: Methods to check the webview's crashed state and manage the user agent string used for requests.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.isCrashed()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.setUserAgent(userAgent)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<webview>.getUserAgent()\n```\n\n----------------------------------------\n\nTITLE: Windows Delay-Load Hook Linker Configuration\nDESCRIPTION: Example linker command configuration for setting up delay-load hooks in Windows native modules.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n link.exe /OUT:\"foo.node\" \"...\\node.lib\" delayimp.lib /DELAYLOAD:node.exe /DLL\n     \"my_addon.obj\" \"win_delay_load_hook.obj\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WebView Tags in HTML\nDESCRIPTION: Demonstrates proper usage of WebView tags by avoiding the allowpopups attribute for better security.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!-- Bad -->\n<webview allowpopups src=\"page.html\"></webview>\n\n<!-- Good -->\n<webview src=\"page.html\"></webview>\n```\n\n----------------------------------------\n\nTITLE: Content Security Policy Examples\nDESCRIPTION: Examples of bad and good Content Security Policy (CSP) headers that help protect against cross-site scripting and data injection attacks.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n// Bad\nContent-Security-Policy: '*'\n\n// Good\nContent-Security-Policy: script-src 'self' https://apis.example.com\n```\n\n----------------------------------------\n\nTITLE: Removing webContents.incrementCapturerCount and decrementCapturerCount (JavaScript)\nDESCRIPTION: The `webContents.incrementCapturerCount(stayHidden, stayAwake)` and `webContents.decrementCapturerCount(stayHidden, stayAwake)` functions have been removed. They are now automatically handled by `webContents.capturePage` when a page capture completes. This snippet demonstrates removing the calls to these functions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst w = new BrowserWindow({ show: false })\n\n// Removed in Electron 23\nw.webContents.incrementCapturerCount()\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n  w.webContents.decrementCapturerCount()\n})\n\n// Replace with\nw.capturePage().then(image => {\n  console.log(image.toDataURL())\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Update in Main Process\nDESCRIPTION: Imports and calls the update-electron-app module in the main process to set up automatic updates.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('update-electron-app')()\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationAction Object Structure in Markdown\nDESCRIPTION: This snippet outlines the properties of the NotificationAction object, including the 'type' and 'text' fields. It specifies that the 'type' must be 'button' and 'text' is optional.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/notification-action.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NotificationAction Object\n\n* `type` string - The type of action, can be `button`.\n* `text` string (optional) - The label for the given action.\n```\n\n----------------------------------------\n\nTITLE: Checking Architecture in JavaScript for Electron on Windows\nDESCRIPTION: This code snippet demonstrates how to check the processor architecture in an Electron app running on Windows. It shows a common pattern that needs to be updated to properly handle ARM64 architecture.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-arm.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.arch === 'x64') {\n  // Do 64-bit thing...\n} else {\n  // Do 32-bit thing...\n}\n```\n\n----------------------------------------\n\nTITLE: Insecure BrowserWindow Configuration with Experimental Features\nDESCRIPTION: Example showing how not to configure a BrowserWindow by enabling experimental Chromium features, which may have unknown security implications.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad\nconst mainWindow = new BrowserWindow({\n  webPreferences: {\n    experimentalFeatures: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining MediaAccessPermissionRequest Object in Markdown\nDESCRIPTION: This snippet defines the MediaAccessPermissionRequest object, which extends the PermissionRequest object. It specifies two optional properties: securityOrigin (a string) and mediaTypes (an array of strings that can be 'video' or 'audio').\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/media-access-permission-request.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# MediaAccessPermissionRequest Object extends `PermissionRequest`\n\n* `securityOrigin` string (optional) - The security origin of the request.\n* `mediaTypes` string[] (optional) - The types of media access being requested - elements can be `video`\n  or `audio`.\n```\n\n----------------------------------------\n\nTITLE: Initializing TouchBarSegmentedControl in Electron\nDESCRIPTION: Constructor for creating a new TouchBarSegmentedControl instance with customizable options including segment style, selection mode, segments array, and event handling.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-segmented-control.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew TouchBarSegmentedControl({\n  segmentStyle: 'automatic',\n  mode: 'single',\n  segments: [],\n  selectedIndex: 0,\n  change: (selectedIndex, isSelected) => {\n    // Handle segment selection\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Snapcraft Configuration\nDESCRIPTION: Sample Snapcraft YAML configuration for a basic Electron application showing required fields, permissions, and build settings.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: electron-packager-hello-world\nversion: '0.1'\nsummary: Hello World Electron app\ndescription: |\n  Simple Hello World Electron app as an example\nbase: core22\nconfinement: strict\ngrade: stable\n\napps:\n  electron-packager-hello-world:\n    command: electron-quick-start/electron-quick-start --no-sandbox\n    extensions: [gnome]\n    plugs:\n    - browser-support\n    - network\n    - network-bind\n    environment:\n      TMPDIR: $XDG_RUNTIME_DIR\n\nparts:\n  electron-quick-start:\n    plugin: nil\n    source: https://github.com/electron/electron-quick-start.git\n    override-build: |\n        npm install electron @electron/packager\n        npx electron-packager . --overwrite --platform=linux --output=release-build --prune=true\n        cp -rv ./electron-quick-start-linux-* $SNAPCRAFT_PART_INSTALL/electron-quick-start\n    build-snaps:\n    - node/14/stable\n    build-packages:\n    - unzip\n    stage-packages:\n    - libnss3\n    - libnspr4\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Publisher for Electron Forge\nDESCRIPTION: Installs the GitHub Publisher plugin for Electron Forge as a dev dependency.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @electron-forge/publisher-github\n```\n\n----------------------------------------\n\nTITLE: Enabling Read-Only Access for User-Selected Files in Electron Apps (XML)\nDESCRIPTION: This XML snippet enables read-only access to user-selected files for an Electron app, typically used with dialog.showOpenDialog. It sets the 'com.apple.security.files.user-selected.read-only' key to true in the app's entitlements.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.security.files.user-selected.read-only</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Deprecated powerMonitor.querySystemIdleTime - JavaScript\nDESCRIPTION: Shows the replacement of the asynchronous `powerMonitor.querySystemIdleTime` with the synchronous `powerMonitor.getSystemIdleTime`. Requires `electron` to be installed to provide `powerMonitor` module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed in Electron 7.0\npowerMonitor.querySystemIdleTime(callback)\n// Replace with synchronous API\nconst idleTime = powerMonitor.getSystemIdleTime()\n```\n\n----------------------------------------\n\nTITLE: Defining ProcessMetric Object Structure in Markdown\nDESCRIPTION: This snippet outlines the structure and properties of the ProcessMetric object used in Electron. It includes details on process identification, type classification, resource usage, and platform-specific attributes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/process-metric.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ProcessMetric Object\n\n* `pid` Integer - Process id of the process.\n* `type` string - Process type. One of the following values:\n  * `Browser`\n  * `Tab`\n  * `Utility`\n  * `Zygote`\n  * `Sandbox helper`\n  * `GPU`\n  * `Pepper Plugin`\n  * `Pepper Plugin Broker`\n  * `Unknown`\n* `serviceName` string (optional) - The non-localized name of the process.\n* `name` string (optional) - The name of the process.\n    Examples for utility: `Audio Service`, `Content Decryption Module Service`, `Network Service`, `Video Capture`, etc.\n* `cpu` [CPUUsage](cpu-usage.md) - CPU usage of the process.\n* `creationTime` number - Creation time for this process.\n    The time is represented as number of milliseconds since epoch.\n    Since the `pid` can be reused after a process dies,\n    it is useful to use both the `pid` and the `creationTime` to uniquely identify a process.\n* `memory` [MemoryInfo](memory-info.md) - Memory information for the process.\n* `sandboxed` boolean (optional) _macOS_ _Windows_ - Whether the process is sandboxed on OS level.\n* `integrityLevel` string (optional) _Windows_ - One of the following values:\n  * `untrusted`\n  * `low`\n  * `medium`\n  * `high`\n  * `unknown`\n```\n\n----------------------------------------\n\nTITLE: Defining JumpListItem Object Properties in Markdown\nDESCRIPTION: This snippet outlines the structure and properties of a JumpListItem object used in Electron. It includes details on the type, path, program, args, title, description, iconPath, iconIndex, and workingDirectory properties, along with their descriptions and usage constraints.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/jump-list-item.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# JumpListItem Object\n\n* `type` string (optional) - One of the following:\n  * `task` - A task will launch an app with specific arguments.\n  * `separator` - Can be used to separate items in the standard `Tasks`\n    category.\n  * `file` - A file link will open a file using the app that created the\n    Jump List, for this to work the app must be registered as a handler for\n    the file type (though it doesn't have to be the default handler).\n* `path` string (optional) - Path of the file to open, should only be set if `type` is\n  `file`.\n* `program` string (optional) - Path of the program to execute, usually you should\n  specify `process.execPath` which opens the current program. Should only be\n  set if `type` is `task`.\n* `args` string (optional) - The command line arguments when `program` is executed. Should\n  only be set if `type` is `task`.\n* `title` string (optional) - The text to be displayed for the item in the Jump List.\n  Should only be set if `type` is `task`.\n* `description` string (optional) - Description of the task (displayed in a tooltip).\n  Should only be set if `type` is `task`. Maximum length 260 characters.\n* `iconPath` string (optional) - The absolute path to an icon to be displayed in a\n  Jump List, which can be an arbitrary resource file that contains an icon\n  (e.g. `.ico`, `.exe`, `.dll`). You can usually specify `process.execPath` to\n  show the program icon.\n* `iconIndex` number (optional) - The index of the icon in the resource file. If a\n  resource file contains multiple icons this value can be used to specify the\n  zero-based index of the icon that should be displayed for this task. If a\n  resource file contains only one icon, this property should be set to zero.\n* `workingDirectory` string (optional) - The working directory. Default is empty.\n```\n\n----------------------------------------\n\nTITLE: Printing Stack Traces in Chromium C++\nDESCRIPTION: Example of using Chromium's stack trace helper to print call stacks to console without program interruption. Requires including the stack_trace header.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"base/debug/stack_trace.h\"\n...\nbase::debug::StackTrace().Print();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Constant Declaration Example\nDESCRIPTION: Example showing preferred constant naming convention using uppercase for primitive values.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/coding-style.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst NUMBER_OF_RETRIES = 5\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationEntry Object Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the NavigationEntry object, including its properties: url, title, and an optional pageState. The pageState is a base64 encoded string containing Chromium page state information.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/navigation-entry.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NavigationEntry Object\n\n* `url` string\n* `title` string\n* `pageState` string (optional) - A base64 encoded data string containing Chromium page state\n  including information like the current scroll position or form values. It is committed by\n  Chromium before a navigation event and on a regular interval.\n```\n\n----------------------------------------\n\nTITLE: Defining IpcMainInvokeEvent Object Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the IpcMainInvokeEvent object, including type, processId, frameId, sender, and senderFrame. It provides details on the data types and possible values for each property.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/ipc-main-invoke-event.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# IpcMainInvokeEvent Object extends `Event`\n\n* `type` String - Possible values include `frame`\n* `processId` Integer - The internal ID of the renderer process that sent this message\n* `frameId` Integer - The ID of the renderer frame that sent this message\n* `sender` [WebContents](../web-contents.md) - Returns the `webContents` that sent the message\n* `senderFrame` [WebFrameMain](../web-frame-main.md) | null _Readonly_ - The frame that sent this message. May be `null` if accessed after the frame has either navigated or been destroyed.\n```\n\n----------------------------------------\n\nTITLE: Inspecting Variables in LLDB\nDESCRIPTION: Example of using frame variable command to inspect function arguments and local variables.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n(lldb) frame variable\n(atom::Browser *) this = 0x0000000108b14f20\n(const string &) name = \"Electron\": {\n    [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated powerMonitor.querySystemIdleState - JavaScript\nDESCRIPTION: Shows the replacement of the asynchronous `powerMonitor.querySystemIdleState` with the synchronous `powerMonitor.getSystemIdleState`. Requires `electron` to be installed to provide `powerMonitor` module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed in Electron 7.0\npowerMonitor.querySystemIdleState(threshold, callback)\n// Replace with synchronous API\nconst idleState = powerMonitor.getSystemIdleState(threshold)\n```\n\n----------------------------------------\n\nTITLE: API Documentation Structure for AutoUpdater\nDESCRIPTION: Example showing how to document module methods and events for non-class modules.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# autoUpdater\n\n## Events\n\n### Event: 'error'\n\n## Methods\n\n### `autoUpdater.setFeedURL(url[, requestHeaders])`\n```\n\n----------------------------------------\n\nTITLE: Defining WebSource Object Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the WebSource object. It includes a required 'code' property of type string and an optional 'url' property also of type string.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/web-source.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# WebSource Object\n\n* `code` string\n* `url` string (optional)\n```\n\n----------------------------------------\n\nTITLE: WebFrame Parent Property Definition\nDESCRIPTION: Read-only property that represents the parent frame of the current webFrame. Returns null if webFrame is top or if parent is not in the current renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nwebFrame.parent: WebFrame | null\n```\n\n----------------------------------------\n\nTITLE: Defining IpcMainServiceWorkerEvent Object Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the IpcMainServiceWorkerEvent object, including their types and descriptions. It covers essential attributes like type, serviceWorker, versionId, session, returnValue, ports, and the reply function.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/ipc-main-service-worker-event.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# IpcMainServiceWorkerEvent Object extends `Event`\n\n* `type` String - Possible values include `service-worker`.\n* `serviceWorker` [ServiceWorkerMain](../service-worker-main.md) _Readonly_ - The service worker that sent this message\n* `versionId` Number - The service worker version ID.\n* `session` Session - The [`Session`](../session.md) instance with which the event is associated.\n* `returnValue` any - Set this to the value to be returned in a synchronous message\n* `ports` [MessagePortMain](../message-port-main.md)[] - A list of MessagePorts that were transferred with this message\n* `reply` Function - A function that will send an IPC message to the renderer frame that sent the original message that you are currently handling.  You should use this method to \"reply\" to the sent message in order to guarantee the reply will go to the correct process and frame.\n  * `channel` string\n  * `...args` any[]\n```\n\n----------------------------------------\n\nTITLE: Defining ProtocolResponseUploadData Object Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the ProtocolResponseUploadData object, which is used in Electron for handling protocol responses that include upload data. It specifies two properties: contentType for the MIME type, and data for the actual content to be sent.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/protocol-response-upload-data.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ProtocolResponseUploadData Object\n\n* `contentType` string - MIME type of the content.\n* `data` string | Buffer - Content to be sent.\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Electron Repository\nDESCRIPTION: Basic git commands for staging and committing changes to the repository.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git add my/changed/files\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: V8 Profiler Command Line Options\nDESCRIPTION: Common V8 profiler command line flags used for performance profiling and debugging. These options enable various tracing and logging capabilities for inspecting V8's behavior.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/v8-development.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--prof --trace-ic --trace-opt --trace-deopt --print-bytecode --print-opt-code\n```\n\n----------------------------------------\n\nTITLE: Certificate Verification Error Example\nDESCRIPTION: Error output showing SSL certificate verification failures when running Python update scripts, indicating the need to install certifi package.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-macos.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n________ running 'python3 src/tools/clang/scripts/update.py' in '/Users/<user>/electron'\\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\\nRetrying in 5 s ...\\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\\nRetrying in 10 s ...\\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\\nRetrying in 20 s ...\n```\n\n----------------------------------------\n\nTITLE: Setting BrowserView in Electron (Deprecated)\nDESCRIPTION: Attaches a BrowserView to a window, removing any previously attached views. This method is deprecated and replaced by WebContentsView.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setBrowserView(browserView)\n```\n\n----------------------------------------\n\nTITLE: Running Example in Electron Fiddle\nDESCRIPTION: This code snippet demonstrates how to include a Fiddle example in the documentation. It uses a custom 'fiddle' language identifier to reference an external Fiddle file.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/examples.md#2025-04-21_snippet_0\n\nLANGUAGE: fiddle\nCODE:\n```\ndocs/fiddles/quick-start\n```\n\n----------------------------------------\n\nTITLE: Defining ScrubberItem Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of a ScrubberItem object in Electron. It specifies two optional properties: 'label' for text content and 'icon' for image content.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/scrubber-item.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ScrubberItem Object\n\n* `label` string (optional) - The text to appear in this item.\n* `icon` NativeImage (optional) - The image to appear in this item.\n```\n\n----------------------------------------\n\nTITLE: Disabling -electron-corner-smoothing Feature in Electron's BrowserWindow\nDESCRIPTION: JavaScript example showing how to disable the -electron-corner-smoothing CSS rule by setting the enableCornerSmoothingCSS web preference to false when creating a BrowserWindow.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/corner-smoothing-css.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst myWindow = new BrowserWindow({\n  // [...]\n  webPreferences: {\n    enableCornerSmoothingCSS: false // Disables the `-electron-corner-smoothing` CSS rule\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Reading ASAR Archive as a Normal File using original-fs\nDESCRIPTION: This snippet showcases how to read the content of an ASAR archive as a regular file using the original-fs module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst originalFs = require('original-fs')\noriginalFs.readFileSync('/path/to/example.asar')\n```\n\n----------------------------------------\n\nTITLE: Determine System Image Name on macOS\nDESCRIPTION: This shell code helps to determine the correct string representation of an `NSImageName` on macOS.  It compiles and runs a simple Objective-C program that logs the string representation of the specified system image name.  This is necessary because some `NSImageName` constants do not directly match their string representations.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/native-image.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\necho -e '#import <Cocoa/Cocoa.h>\\nint main() { NSLog(@\"%@\", SYSTEM_IMAGE_NAME); }' | clang -otest -x objective-c -framework Cocoa - && ./test\n```\n\n----------------------------------------\n\nTITLE: WebFrame Opener Property Definition\nDESCRIPTION: Read-only property that represents the frame which opened the current webFrame. Returns null if there's no opener or if the opener is not in the current renderer process.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwebFrame.opener: WebFrame | null\n```\n\n----------------------------------------\n\nTITLE: API History Documentation Format\nDESCRIPTION: Example showing how to document API changes using YAML blocks within HTML comments.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n#### `win.setTrafficLightPosition(position)` _macOS_\n\n<!--\n```YAML history\nadded:\n  - pr-url: https://github.com/electron/electron/pull/22533\nchanges:\n  - pr-url: https://github.com/electron/electron/pull/26789\n    description: \"Made `trafficLightPosition` option work for `customButtonOnHover` window.\"\ndeprecated:\n  - pr-url: https://github.com/electron/electron/pull/37094\n    breaking-changes-header: deprecated-browserwindowsettrafficlightpositionposition\n```\n-->\n\n* `position` [Point](structures/point.md)\n\nSet a custom position for the traffic light buttons. Can only be used with `titleBarStyle` set to `hidden`.\n```\n\n----------------------------------------\n\nTITLE: Finishing Transaction by Date\nDESCRIPTION: Method to complete specific pending transactions by their ISO formatted date.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ninAppPurchase.finishTransactionByDate(date)\n```\n\n----------------------------------------\n\nTITLE: Defining OffscreenSharedTexture Object Structure in Markdown\nDESCRIPTION: This snippet outlines the structure and properties of the OffscreenSharedTexture object, including texture info, metadata, and platform-specific attributes. It also describes the release function for managing texture lifecycle.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/offscreen-shared-texture.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# OffscreenSharedTexture Object\n\n* `textureInfo` Object - The shared texture info.\n  * `widgetType` string - The widget type of the texture. Can be `popup` or `frame`.\n  * `pixelFormat` string - The pixel format of the texture. Can be `rgba` or `bgra`.\n  * `codedSize` [Size](size.md) - The full dimensions of the video frame.\n  * `visibleRect` [Rectangle](rectangle.md) - A subsection of [0, 0, codedSize.width(), codedSize.height()]. In OSR case, it is expected to have the full section area.\n  * `contentRect` [Rectangle](rectangle.md) - The region of the video frame that capturer would like to populate. In OSR case, it is the same with `dirtyRect` that needs to be painted.\n  * `timestamp` number - The time in microseconds since the capture start.\n  * `metadata` Object - Extra metadata. See comments in src\\media\\base\\video_frame_metadata.h for accurate details.\n    * `captureUpdateRect` [Rectangle](rectangle.md) (optional) - Updated area of frame, can be considered as the `dirty` area.\n    * `regionCaptureRect` [Rectangle](rectangle.md) (optional) - May reflect the frame's contents origin if region capture is used internally.\n    * `sourceSize` [Rectangle](rectangle.md) (optional) - Full size of the source frame.\n    * `frameCount` number (optional) - The increasing count of captured frame. May contain gaps if frames are dropped between two consecutively received frames.\n  * `sharedTextureHandle` Buffer _Windows_ _macOS_ - The handle to the shared texture.\n  * `planes` Object[] _Linux_ - Each plane's info of the shared texture.\n    * `stride` number - The strides and offsets in bytes to be used when accessing the buffers via a memory mapping. One per plane per entry.\n    * `offset` number - The strides and offsets in bytes to be used when accessing the buffers via a memory mapping. One per plane per entry.\n    * `size` number - Size in bytes of the plane. This is necessary to map the buffers.\n    * `fd` number - File descriptor for the underlying memory object (usually dmabuf).\n  * `modifier` string _Linux_ - The modifier is retrieved from GBM library and passed to EGL driver.\n* `release` Function - Release the resources. The `texture` cannot be directly passed to another process, users need to maintain texture lifecycles in\n  main process, but it is safe to pass the `textureInfo` to another process. Only a limited number of textures can exist at the same time, so it's important\n  that you call `texture.release()` as soon as you're done with the texture.\n```\n\n----------------------------------------\n\nTITLE: Deprecated crashed event replacement in Electron WebContents\nDESCRIPTION: This JavaScript snippet illustrates the deprecation of the `crashed` event on `WebContents` and `<webview>` in Electron. It demonstrates how to replace it with the `render-process-gone` event, which provides more detailed information about renderer process termination.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Deprecated\nwin.webContents.on('crashed', (event, killed) => { /* ... */ })\nwebview.addEventListener('crashed', (event) => { /* ... */ })\n\n// Replace with\nwin.webContents.on('render-process-gone', (event, details) => { /* ... */ })\nwebview.addEventListener('render-process-gone', (event) => { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Object Structure in Markdown\nDESCRIPTION: This snippet defines the structure of a Transaction Object in Electron, including its properties and nested objects. It details transaction identifiers, dates, states, error information, and payment details including product information and discount offers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/transaction.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Transaction Object\n\n* `transactionIdentifier` string - A string that uniquely identifies a successful payment transaction.\n* `transactionDate` string - The date the transaction was added to the App Store's payment queue.\n* `originalTransactionIdentifier` string - The identifier of the restored transaction by the App Store.\n* `transactionState` string - The transaction state, can be `purchasing`, `purchased`, `failed`, `restored` or `deferred`.\n* `errorCode` Integer - The error code if an error occurred while processing the transaction.\n* `errorMessage` string - The error message if an error occurred while processing the transaction.\n* `payment` Object\n  * `productIdentifier` string - The identifier of the purchased product.\n  * `quantity` Integer  - The quantity purchased.\n  * `applicationUsername` string - An opaque identifier for the user's account on your system.\n  * `paymentDiscount` [PaymentDiscount](payment-discount.md) (optional) - The details of the discount offer to apply to the payment.\n```\n\n----------------------------------------\n\nTITLE: Installing electron-windows-store CLI\nDESCRIPTION: Command to install the electron-windows-store CLI tool globally using npm. This tool is essential for packaging Electron apps for the Windows Store.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-store-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g electron-windows-store\n```\n\n----------------------------------------\n\nTITLE: Removing BrowserView in Electron (Deprecated)\nDESCRIPTION: Removes a BrowserView from a window. This method is deprecated and replaced by WebContentsView.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nwin.removeBrowserView(browserView)\n```\n\n----------------------------------------\n\nTITLE: Accessing TouchBarPopover Properties\nDESCRIPTION: Demonstrates how to access and modify the label and icon properties of a TouchBarPopover instance. Changes to these properties are immediately reflected in the Touch Bar.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-popover.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Accessing and modifying properties\ntouchBarPopover.label = 'New Label';\ntouchBarPopover.icon = newNativeImage;\n```\n\n----------------------------------------\n\nTITLE: Package Configuration (package.json)\nDESCRIPTION: This JSON configuration file defines the metadata for the Node.js package, including its name, version, description, entry point, author, scripts, license, and dependencies. The scripts define commands for cleaning, building for Electron, and building using node-gyp. It specifies dependencies on 'bindings' and 'node-addon-api'.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"objc-macos\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A demo module that exposes Objective-C code to Electron\",\n  \"main\": \"js/index.js\",\n  \"author\": \"Your Name\",\n  \"scripts\": {\n    \"clean\": \"rm -rf build\",\n    \"build-electron\": \"electron-rebuild\",\n    \"build\": \"node-gyp configure && node-gyp build\"\n  },\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"bindings\": \"^1.5.0\",\n    \"node-addon-api\": \"^8.3.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Lint Command\nDESCRIPTION: Command to run code style checking using cpplint and eslint.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/coding-style.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Setting ARM Target in GN Build Configuration\nDESCRIPTION: Command to configure GN build system for ARM target architecture.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngn gen out/Testing --args='import(...) target_cpu=\"arm\"'\n```\n\n----------------------------------------\n\nTITLE: Accessing TouchBarColorPicker Properties\nDESCRIPTION: Example of accessing and modifying the color picker's available colors and selected color properties.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-color-picker.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Getting and setting available colors\ntouchBarColorPicker.availableColors = ['#FF0000', '#00FF00', '#0000FF'];\n\n// Getting and setting selected color\ntouchBarColorPicker.selectedColor = '#FF0000';\n```\n\n----------------------------------------\n\nTITLE: Clipboard HTML Read/Write (Deprecated)\nDESCRIPTION: This snippet demonstrates the deprecated clipboard.readHtml() and clipboard.writeHtml() methods and their replacements clipboard.readHTML() and clipboard.writeHTML(), respectively. The case of the function names has changed, so it's necessary to update to the new casing to ensure the correct function is called.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nclipboard.readHtml()\n// Replace with\nclipboard.readHTML()\n\n// Deprecated\nclipboard.writeHtml()\n// Replace with\nclipboard.writeHTML()\n```\n\n----------------------------------------\n\nTITLE: RenderProcessGoneDetails Object Properties in Electron\nDESCRIPTION: Defines the structure of the RenderProcessGoneDetails object which provides details about why a render process has terminated. The object contains a 'reason' string indicating the termination cause and an 'exitCode' Integer with the process exit code.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/render-process-gone-details.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `reason` string - The reason the render process is gone.  Possible values:\n  * `clean-exit` - Process exited with an exit code of zero\n  * `abnormal-exit` - Process exited with a non-zero exit code\n  * `killed` - Process was sent a SIGTERM or otherwise killed externally\n  * `crashed` - Process crashed\n  * `oom` - Process ran out of memory\n  * `launch-failed` - Process never successfully launched\n  * `integrity-failure` - Windows code integrity checks failed\n* `exitCode` Integer - The exit code of the process, unless `reason` is\n  `launch-failed`, in which case `exitCode` will be a platform-specific\n  launch failure error code.\n```\n\n----------------------------------------\n\nTITLE: Defining SharingItem Object Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the SharingItem object used in Electron for sharing content. It includes optional arrays for texts, file paths, and URLs to be shared.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/sharing-item.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# SharingItem Object\n\n* `texts` string[] (optional) - An array of text to share.\n* `filePaths` string[] (optional) - An array of files to share.\n* `urls` string[] (optional) - An array of URLs to share.\n```\n\n----------------------------------------\n\nTITLE: Installing Electron with verbose output\nDESCRIPTION: Command to install Electron with the verbose flag, which displays download progress. This is useful on slower networks to monitor the installation progress.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --verbose electron\n```\n\n----------------------------------------\n\nTITLE: Marking Experimental API Reference in Markdown\nDESCRIPTION: Demonstrates how experimental APIs are tagged in Electron's documentation using the _Experimental_ keyword.\nSOURCE: https://github.com/electron/electron/blob/main/docs/experimental.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n_Experimental_\n```\n\n----------------------------------------\n\nTITLE: Implementing -electron-corner-smoothing CSS Rule in Electron\nDESCRIPTION: Example CSS that applies corner smoothing to a blue box with rounded corners. The smoothing percentage is controlled by a CSS variable.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/corner-smoothing-css.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.box {\n  width: 128px;\n  height: 128px;\n  background-color: cornflowerblue;\n  border-radius: 24px;\n  -electron-corner-smoothing: var(--percent);  /* Column header in table below. */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GPUFeatureStatus Object Properties in Markdown\nDESCRIPTION: This snippet lists the properties of the GPUFeatureStatus object, each representing a specific GPU feature. The properties are of type string and include various aspects of GPU functionality such as canvas, flash, compositing, and video processing.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/gpu-feature-status.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `2d_canvas` string - Canvas.\n* `flash_3d` string - Flash.\n* `flash_stage3d` string - Flash Stage3D.\n* `flash_stage3d_baseline` string - Flash Stage3D Baseline profile.\n* `gpu_compositing` string - Compositing.\n* `multiple_raster_threads` string - Multiple Raster Threads.\n* `native_gpu_memory_buffers` string - Native GpuMemoryBuffers.\n* `rasterization` string - Rasterization.\n* `video_decode` string - Video Decode.\n* `video_encode` string - Video Encode.\n* `vpx_decode` string - VPx Video Decode.\n* `webgl` string - WebGL.\n* `webgl2` string - WebGL2.\n```\n\n----------------------------------------\n\nTITLE: Defining SharedDictionaryInfo Object Properties in Markdown\nDESCRIPTION: This snippet lists and describes the properties of the SharedDictionaryInfo object. It includes details about matching patterns, destinations, identifiers, URLs, timestamps, expiration, size, and hash information.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/shared-dictionary-info.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# SharedDictionaryInfo Object\n\n* `match` string - The matching path pattern for the dictionary which was declared in 'use-as-dictionary' response header's `match` option.\n* `matchDestinations` string[] - An array of matching destinations for the dictionary which was declared in 'use-as-dictionary' response header's `match-dest` option.\n* `id` string - The Id for the dictionary which was declared in 'use-as-dictionary' response header's `id` option.\n* `dictionaryUrl` string - URL of the dictionary.\n* `lastFetchTime` Date - The time of when the dictionary was received from the network layer.\n* `responseTime` Date - The time of when the dictionary was received from the server. For cached responses, this time could be \"far\" in the past.\n* `expirationDuration` number - The expiration time for the dictionary which was declared in 'use-as-dictionary' response header's `expires` option in seconds.\n* `lastUsedTime` Date - The time when the dictionary was last used.\n* `size` number - The amount of bytes stored for this shared dictionary information object in Chromium's internal storage (usually Sqlite).\n* `hash` string - The sha256 hash of the dictionary binary.\n```\n\n----------------------------------------\n\nTITLE: Running Electron Test Suite\nDESCRIPTION: Commands for running the full test suite and running specific test specs.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run test\n$ npm run test -match=menu\n```\n\n----------------------------------------\n\nTITLE: Setting Menu Bar Visibility - Electron JavaScript\nDESCRIPTION: Sets visibility for the menu bar on Windows and Linux using a boolean 'visible' parameter. This allows users to toggle the display of the menu bar.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nwin.setMenuBarVisibility(visible)\n```\n\n----------------------------------------\n\nTITLE: Defining ProductDiscount Object Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the ProductDiscount object using a Markdown list. It includes details about the identifier, type, price, locale, payment mode, number of periods, and an optional subscription period.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/product-discount.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `identifier` string - A string used to uniquely identify a discount offer for a product.\n* `type` number - The type of discount offer.\n* `price` number - The discount price of the product in the local currency.\n* `priceLocale` string - The locale used to format the discount price of the product.\n* `paymentMode` string - The payment mode for this product discount. Can be `payAsYouGo`, `payUpFront`, or `freeTrial`.\n* `numberOfPeriods` number - An integer that indicates the number of periods the product discount is available.\n* `subscriptionPeriod` [ProductSubscriptionPeriod](product-subscription-period.md) (optional) - An object that defines the period for the product discount.\n```\n\n----------------------------------------\n\nTITLE: Running Autoninja Build with Reclient\nDESCRIPTION: Command to execute Electron build using autoninja with Reclient integration. Sets a concurrent job limit of 200, which is the maximum allowed value for the RBE system.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/reclient.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nautoninja -C out/Testing electron -j 200\n```\n\n----------------------------------------\n\nTITLE: Defining ASAR Header Integrity\nDESCRIPTION: This JSON snippet describes the structure of the header expected in an ASAR archive, including algorithm, hash, block size, and block hashes.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"algorithm\": \"SHA256\",\n  \"hash\": \"...\",\n  \"blockSize\": 1024,\n  \"blocks\": [\"...\", \"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Desktop Actions in Linux .desktop File\nDESCRIPTION: This snippet demonstrates how to add custom shortcut menu entries to a Linux .desktop file. It defines three actions (PlayPause, Next, Previous) for an audio player, specifying the action name, executable command, and display environment.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/linux-desktop-actions.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nActions=PlayPause;Next;Previous\n\n[Desktop Action PlayPause]\nName=Play-Pause\nExec=audacious -t\nOnlyShowIn=Unity;\n\n[Desktop Action Next]\nName=Next\nExec=audacious -f\nOnlyShowIn=Unity;\n\n[Desktop Action Previous]\nName=Previous\nExec=audacious -r\nOnlyShowIn=Unity;\n```\n\n----------------------------------------\n\nTITLE: C++ Class Wrapper for Node.js Integration\nDESCRIPTION: Implements a class that wraps C++ code for JavaScript exposure, inheriting from Napi::ObjectWrap with basic initialization setup.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nclass CppAddon : public Napi::ObjectWrap<CppAddon> {\npublic:\n    static Napi::Object Init(Napi::Env env, Napi::Object exports) {\n        Napi::Function func = DefineClass(env, \"CppWin32Addon\", {\n            // We'll add methods here later\n        });\n\n        Napi::FunctionReference* constructor = new Napi::FunctionReference();\n        *constructor = Napi::Persistent(func);\n        env.SetInstanceData(constructor);\n\n        exports.Set(\"CppWin32Addon\", func);\n        return exports;\n    }\n\n    CppAddon(const Napi::CallbackInfo& info)\n        : Napi::ObjectWrap<CppAddon>(info) {\n        // Constructor logic will go here\n    }\n\nprivate:\n    // Will add private members and methods later\n};\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JSX\nDESCRIPTION: Imports the DocCardList component from the theme directory, used for rendering documentation cards in the page layout.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/window-customization.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Running example in Electron Fiddle\nDESCRIPTION: This code snippet demonstrates how to embed an Electron Fiddle example in the documentation. It uses a special syntax to load an example from the 'docs/fiddles/quick-start' directory.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```fiddle docs/fiddles/quick-start\n```\n```\n\n----------------------------------------\n\nTITLE: FilesystemPermissionRequest Object Definition in Electron\nDESCRIPTION: Defines the properties of the FilesystemPermissionRequest object which extends the PermissionRequest interface. This object is used when handling filesystem permission requests in Electron applications.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/filesystem-permission-request.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# FilesystemPermissionRequest Object extends `PermissionRequest`\n\n* `filePath` string (optional) - The path of the `fileSystem` request.\n* `isDirectory` boolean (optional) - Whether the `fileSystem` request is a directory.\n* `fileAccessType` string (optional) - The access type of the `fileSystem` request. Can be `writable` or `readable`.\n```\n\n----------------------------------------\n\nTITLE: Defining Task Object Properties in Markdown\nDESCRIPTION: This snippet describes the properties of a Task object in Electron. It includes fields for program execution, command line arguments, display information, icon settings, and working directory.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/task.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Object\n\n* `program` string - Path of the program to execute, usually you should\n  specify `process.execPath` which opens the current program.\n* `arguments` string - The command line arguments when `program` is\n  executed.\n* `title` string - The string to be displayed in a JumpList.\n* `description` string - Description of this task.\n* `iconPath` string - The absolute path to an icon to be displayed in a\n  JumpList, which can be an arbitrary resource file that contains an icon. You\n  can usually specify `process.execPath` to show the icon of the program.\n* `iconIndex` number - The icon index in the icon file. If an icon file\n  consists of two or more icons, set this value to identify the icon. If an\n  icon file consists of one icon, this value is 0.\n* `workingDirectory` string (optional) - The working directory. Default is empty.\n```\n\n----------------------------------------\n\nTITLE: Using Linux Selection Clipboard in Electron\nDESCRIPTION: Example showing how to read and write text to the Linux selection clipboard by passing the 'selection' argument to clipboard methods.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clipboard } = require('electron')\n\nclipboard.writeText('Example string', 'selection')\nconsole.log(clipboard.readText('selection'))\n```\n\n----------------------------------------\n\nTITLE: Defining KeyboardEvent Object Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the KeyboardEvent object used in Electron. It includes boolean flags for control, meta, shift, and alt keys, as well as a flag indicating if the event was triggered by an accelerator.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/keyboard-event.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# KeyboardEvent Object\n\n* `ctrlKey` boolean (optional) - whether the Control key was used in an accelerator to trigger the Event\n* `metaKey` boolean (optional) - whether a meta key was used in an accelerator to trigger the Event\n* `shiftKey` boolean (optional) - whether a Shift key was used in an accelerator to trigger the Event\n* `altKey` boolean (optional) - whether an Alt key was used in an accelerator to trigger the Event\n* `triggeredByAccelerator` boolean (optional) - whether an accelerator was used to trigger the event as opposed to another user gesture like mouse click\n```\n\n----------------------------------------\n\nTITLE: Deprecated systemPreferences Events Replacement - JavaScript\nDESCRIPTION: Demonstrates replacing deprecated `systemPreferences` events (`inverted-color-scheme-changed`, `high-contrast-color-scheme-changed`) with the new `updated` event on the `nativeTheme` module. Requires `electron` to be installed to provide `systemPreferences` and `nativeTheme` modules.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nsystemPreferences.on('inverted-color-scheme-changed', () => { /* ... */ })\nsystemPreferences.on('high-contrast-color-scheme-changed', () => { /* ... */ })\n\n// Replace with\nnativeTheme.on('updated', () => { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu 20.04+\nDESCRIPTION: Command to install required development libraries and tools on Ubuntu 20.04 or newer versions.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get install build-essential clang libdbus-1-dev libgtk-3-dev \\\n                       libnotify-dev libasound2-dev libcap-dev \\\n                       libcups2-dev libxtst-dev \\\n                       libxss1 libnss3-dev gcc-multilib g++-multilib curl \\\n                       gperf bison python3-dbusmock openjdk-8-jre\n```\n\n----------------------------------------\n\nTITLE: Installing electron-installer-snap Package\nDESCRIPTION: Command to install the electron-installer-snap package as a development dependency using npm.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev electron-installer-snap\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Functions and Helper Methods for Win32 GUI\nDESCRIPTION: Contains functions for callback registration, window message handling, DPI scaling, and time conversion between Windows SYSTEMTIME and JavaScript milliseconds since epoch format.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace cpp_code\n{\n  std::string hello_world(const std::string &input)\n  {\n    return \"Hello from C++! You said: \" + input;\n  }\n\n  void setTodoAddedCallback(TodoCallback callback)\n  {\n    g_todoAddedCallback = callback;\n  }\n\n  // Window procedure function that handles window messages\n  // hwnd: Handle to the window\n  // uMsg: Message code\n  // wParam: Additional message-specific information\n  // lParam: Additional message-specific information\n  LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);\n\n  // Helper function to scale a value based on DPI\n  int Scale(int value, UINT dpi)\n  {\n    return MulDiv(value, dpi, 96); // 96 is the default DPI\n  }\n\n  // Helper function to convert SYSTEMTIME to milliseconds since epoch\n  int64_t SystemTimeToMillis(const SYSTEMTIME &st)\n  {\n    FILETIME ft;\n    SystemTimeToFileTime(&st, &ft);\n    ULARGE_INTEGER uli;\n    uli.LowPart = ft.dwLowDateTime;\n    uli.HighPart = ft.dwHighDateTime;\n    return (uli.QuadPart - 116444736000000000ULL) / 10000;\n  }\n\n  // More code to follow later...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ResolvedHost Object Structure in Markdown\nDESCRIPTION: Describes the structure of the ResolvedHost object, which has a single property 'endpoints' that is an array of ResolvedEndpoint objects. The endpoints represent resolved DNS entries for a given hostname.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/resolved-host.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ResolvedHost Object\n\n* `endpoints` [ResolvedEndpoint[]](resolved-endpoint.md) - resolved DNS entries for the hostname\n```\n\n----------------------------------------\n\nTITLE: Defining ShortcutDetails Object Properties in Markdown\nDESCRIPTION: Lists and describes the properties of the ShortcutDetails object, including required and optional fields. This object is likely used when creating or modifying shortcuts for Electron applications on Windows systems.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/shortcut-details.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ShortcutDetails Object\n\n* `target` string - The target to launch from this shortcut.\n* `cwd` string (optional) - The working directory. Default is empty.\n* `args` string (optional) - The arguments to be applied to `target` when\nlaunching from this shortcut. Default is empty.\n* `description` string (optional) - The description of the shortcut. Default\nis empty.\n* `icon` string (optional) - The path to the icon, can be a DLL or EXE. `icon`\nand `iconIndex` have to be set together. Default is empty, which uses the\ntarget's icon.\n* `iconIndex` number (optional) - The resource ID of icon when `icon` is a\nDLL or EXE. Default is 0.\n* `appUserModelId` string (optional) - The Application User Model ID. Default\nis empty.\n* `toastActivatorClsid` string (optional) - The Application Toast Activator CLSID. Needed\nfor participating in Action Center.\n```\n\n----------------------------------------\n\nTITLE: Renderer Process Script in Electron\nDESCRIPTION: Renderer script that uses the exposed versions API to display Chrome, Node.js, and Electron version information.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst information = document.getElementById('info')\ninformation.innerText = `This app is using Chrome (v${versions.chrome()}), Node.js (v${versions.node()}), and Electron (v${versions.electron()})`\n```\n\n----------------------------------------\n\nTITLE: Setting BrowserWindow Options with setWindowOpenHandler\nDESCRIPTION: Shows how to explicitly set BrowserWindow constructor options using `webContents.setWindowOpenHandler` instead of relying on inheriting options from the parent window. This is required starting in Electron 14.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nwebContents.setWindowOpenHandler((details) => {\n  return {\n    action: 'allow',\n    overrideBrowserWindowOptions: {\n      // ...\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Finding origin of API with git blame in Bash\nDESCRIPTION: These bash commands demonstrate an alternative approach using `git blame` to find when the `getTrafficLightPosition` was added to the `browser-window.md` documentation.  It involves checking out specific commits to determine the introduction point of the API.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout 1e206deec3e^\nHEAD is now at e8c87859c4 fix: showAboutPanel also on linux (#37828)\n\n$ grep -n \"getTrafficLightPosition\" docs/api/browser-window.md\n1867:#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_\n\n$ git blame -L1867,1868 -- docs/api/browser-window.md\n0de1012280e (Cheng Zhao    2023-02-17 19:06:32 +0900 1867) #### `win.getTrafficLightPosition()` _macOS_ _Deprecated_\n3e2cec83d92 (Samuel Attard 2020-03-05 14:22:12 -0800 1868) \n\n$ git checkout 0de1012280e^\nHEAD is now at 0a5e634736 test: rename & split internal module tests (#37318)\n\n$ grep -n \"getTrafficLightPosition\" docs/api/browser-window.md \n1851:#### `win.getTrafficLightPosition()` _macOS_\n\n$ git blame -L1851,1852 -- docs/api/browser-window.md\n3e2cec83d92 (Samuel Attard 2020-03-05 14:22:12 -0800 1851) #### `win.getTrafficLightPosition()` _macOS_\n3e2cec83d92 (Samuel Attard 2020-03-05 14:22:12 -0800 1852)\n\n$ git checkout 3e2cec83d92^\nHEAD is now at 1811751c6c docs: clean up dark mode related docs (#22489)\n\n$ grep -n \"getTrafficLightPosition\" docs/api/browser-window.md\n(Nothing)\n\n$ git checkout 3e2cec83d92\nHEAD is now at 3e2cec83d9 feat: programmatically modify traffic light positioning (#22533)\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationResponse Object Structure in Markdown\nDESCRIPTION: This snippet outlines the properties of the NotificationResponse object, including action identifier, delivery date, unique identifier, custom information, and optional user text. It provides a comprehensive structure for handling notification responses in Electron applications.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/notification-response.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NotificationResponse Object\n\n* `actionIdentifier` string - The identifier string of the action that the user selected.\n* `date` number - The delivery date of the notification.\n* `identifier` string - The unique identifier for this notification request.\n* `userInfo` Record\\<string, any\\> - A dictionary of custom information associated with the notification.\n* `userText` string (optional) - The text entered or chosen by the user.\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Repository\nDESCRIPTION: Command to push local branch changes to the forked repository on GitHub.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ git push origin my-branch\n```\n\n----------------------------------------\n\nTITLE: Build Configuration (binding.gyp)\nDESCRIPTION: This JSON configuration file defines the build settings for the native addon. It specifies the target name, source files, include directories, libraries, dependencies, Xcode settings, and defines. It includes macOS-specific settings like compiler flags for Objective-C/C++ support and framework dependencies on Foundation and AppKit. The condition ensures compilation only on macOS.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": [\n    {\n      \"target_name\": \"objc_addon\",\n      \"conditions\": [\n        ['OS==\"mac\"', {\n          \"sources\": [\n            \"src/objc_addon.mm\",\n            \"src/objc_code.mm\"\n          ],\n          \"include_dirs\": [\n            \"<!@(node -p \\\"require('node-addon-api').include\\\")\",\n            \"include\"\n          ],\n          \"libraries\": [\n            \"-framework Foundation\",\n            \"-framework AppKit\"\n          ],\n          \"dependencies\": [\n            \"<!(node -p \\\"require('node-addon-api').gyp\\\")\"\n          ],\n          \"xcode_settings\": {\n            \"GCC_ENABLE_CPP_EXCEPTIONS\": \"YES\",\n            \"CLANG_CXX_LIBRARY\": \"libc++\",\n            \"MACOSX_DEPLOYMENT_TARGET\": \"11.0\",\n            \"CLANG_ENABLE_OBJC_ARC\": \"YES\",\n            \"OTHER_CFLAGS\": [\n              \"-ObjC++\",\n              \"-std=c++17\"\n            ]\n          },\n          \"defines\": [\n            \"NODE_ADDON_API_CPP_EXCEPTIONS\"\n          ]\n        }]\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Management Example - JavaScript\nDESCRIPTION: Shows proper resource management by closing WebContents when BaseWindow is closed to prevent memory leaks.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BaseWindow, WebContentsView } = require('electron')\n\nconst win = new BaseWindow({ width: 800, height: 600 })\n\nconst view = new WebContentsView()\nwin.contentView.addChildView(view)\n\nwin.on('closed', () => {\n  view.webContents.close()\n})\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to execute JavaScript within a BrowserWindow's WebContents to fetch data from a URL. It utilizes the 'executeJavaScript' method with the 'userGesture' flag set to true. It requires the BrowserWindow module and makes an HTTP request to 'https://jsonplaceholder.typicode.com/users/1'.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst win = new BrowserWindow()\n\nwin.webContents.executeJavaScript('fetch(\"https://jsonplaceholder.typicode.com/users/1\").then(resp => resp.json())', true)\n  .then((result) => {\n    console.log(result) // Will be the JSON object from the fetch call\n  })\n```\n\n----------------------------------------\n\nTITLE: Documenting Validate Before Publish Script in Markdown\nDESCRIPTION: Explains the 'validate-before-publish' script, which checks for asset existence, checksum matching, and successful header and symbol uploads before publishing.\nSOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### `validate-before-publish`\n\nThis script ensures that a release is in a valid state before publishing it anywhere. Specifically it checks:\n\n* All assets exist\n* All checksums match uploaded assets\n* Headers have been uploaded to the header CDN\n* Symbols have been uploaded to the symbol CDN\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request with Electron Net Module\nDESCRIPTION: Example showing how to make an HTTP request using Electron's net module. The code demonstrates creating a request to GitHub, handling the response including status code, headers and body data.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/net.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app } = require('electron')\napp.whenReady().then(() => {\n  const { net } = require('electron')\n  const request = net.request('https://github.com')\n  request.on('response', (response) => {\n    console.log(`STATUS: ${response.statusCode}`)\n    console.log(`HEADERS: ${JSON.stringify(response.headers)}`)\n    response.on('data', (chunk) => {\n      console.log(`BODY: ${chunk}`)\n    })\n    response.on('end', () => {\n      console.log('No more data in response.')\n    })\n  })\n  request.end()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting DevTools WebContents via IPC in Main Process\nDESCRIPTION: This code snippet demonstrates the main process code for setting the DevTools WebContents using `webContents.setDevToolsWebContents` after receiving an IPC message. It retrieves the target and DevTools WebContents based on their IDs and then associates them.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Main process\nconst { ipcMain, webContents } = require('electron')\nipcMain.on('open-devtools', (event, targetContentsId, devtoolsContentsId) => {\n  const target = webContents.fromId(targetContentsId)\n  const devtools = webContents.fromId(devtoolsContentsId)\n  target.setDevToolsWebContents(devtools)\n  target.openDevTools()\n})\n```\n\n----------------------------------------\n\nTITLE: Thread-safe Function Implementation for C++/Node.js Communication\nDESCRIPTION: Sets up thread-safe function handling for cross-thread communication between C++ and Node.js, including callback management and event system setup.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nCppAddon(const Napi::CallbackInfo& info)\n    : Napi::ObjectWrap<CppAddon>(info)\n    , env_(info.Env())\n    , emitter(Napi::Persistent(Napi::Object::New(info.Env())))\n    , callbacks(Napi::Persistent(Napi::Object::New(info.Env())))\n    , tsfn_(nullptr) {\n\n    napi_status status = napi_create_threadsafe_function(\n        env_,\n        nullptr,\n        nullptr,\n        Napi::String::New(env_, \"CppCallback\"),\n        0,\n        1,\n        nullptr,\n        nullptr,\n        this,\n        [](napi_env env, napi_value js_callback, void* context, void* data) {\n            auto* callbackData = static_cast<CallbackData*>(data);\n            if (!callbackData) return;\n\n            Napi::Env napi_env(env);\n            Napi::HandleScope scope(napi_env);\n\n            auto addon = static_cast<CppAddon*>(context);\n            if (!addon) {\n                delete callbackData;\n                return;\n            }\n\n            try {\n                auto callback = addon->callbacks.Value().Get(callbackData->eventType).As<Napi::Function>();\n                if (callback.IsFunction()) {\n                    callback.Call(addon->emitter.Value(), {Napi::String::New(napi_env, callbackData->payload)});\n                }\n            } catch (...) {}\n\n            delete callbackData;\n        },\n        &tsfn_\n    );\n```\n\n----------------------------------------\n\nTITLE: Insert CSS - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to insert CSS into a BrowserWindow's WebContents after the page has finished loading. It listens for the 'did-finish-load' event and then injects CSS to change the background color of the HTML and body elements. It requires the BrowserWindow module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst win = new BrowserWindow()\nwin.webContents.on('did-finish-load', () => {\n  win.webContents.insertCSS('html, body { background-color: #f00; }')\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Service Workers for Specific Scopes in Electron\nDESCRIPTION: Example showing how to start service workers for specific scopes when a browser window is created, and sending messages to the service workers.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/service-workers.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, session } = require('electron')\nconst { serviceWorkers } = session.defaultSession\n\n// Collect service workers scopes\nconst workerScopes = Object.values(serviceWorkers.getAllRunning()).map((info) => info.scope)\n\napp.on('browser-window-created', async (event, window) => {\n  for (const scope of workerScopes) {\n    try {\n      // Ensure worker is started\n      const serviceWorker = await serviceWorkers.startWorkerForScope(scope)\n      serviceWorker.send('window-created', { windowId: window.id })\n    } catch (error) {\n      console.error(`Failed to start service worker for ${scope}`)\n      console.error(error)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Electron API Source File\nDESCRIPTION: Source file template for new Electron API module showing implementation of Wrappable methods and Node initialization\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"shell/browser/api/electron_api_safe_storage.h\"\n\n#include \"shell/browser/browser.h\"\n#include \"shell/common/gin_converters/base_converter.h\"\n#include \"shell/common/gin_converters/callback_converter.h\"\n#include \"shell/common/gin_helper/dictionary.h\"\n#include \"shell/common/gin_helper/object_template_builder.h\"\n#include \"shell/common/node_includes.h\"\n#include \"shell/common/platform_util.h\"\n\nnamespace electron {\n\nnamespace api {\n\ngin::WrapperInfo ApiName::kWrapperInfo = {gin::kEmbedderNativeGin};\n\ngin::ObjectTemplateBuilder ApiName::GetObjectTemplateBuilder(\n    v8::Isolate* isolate) {\n  return gin::ObjectTemplateBuilder(isolate)\n      .SetMethod(\"methodName\", &ApiName::methodName);\n}\n\nconst char* ApiName::GetTypeName() {\n  return \"ApiName\";\n}\n\n// static\ngin::Handle<ApiName> ApiName::Create(v8::Isolate* isolate) {\n  return gin::CreateHandle(isolate, new ApiName());\n}\n\n} // namespace api\n\n} // namespace electron\n\nnamespace {\n\nvoid Initialize(v8::Local<v8::Object> exports,\n                v8::Local<v8::Value> unused,\n                v8::Local<v8::Context> context,\n                void* priv) {\n  v8::Isolate* isolate = context->GetIsolate();\n  gin_helper::Dictionary dict(isolate, exports);\n  dict.Set(\"apiName\", electron::api::ApiName::Create(isolate));\n}\n\n}  // namespace\n```\n\n----------------------------------------\n\nTITLE: Editing Existing Patches in Electron\nDESCRIPTION: Commands for modifying an existing patch through git fixup and rebase workflow, followed by re-exporting the updated patch set.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd src/v8\n$ vim some/code/file.cc\n$ git log\n# Find the commit sha of the patch you want to edit.\n$ git commit --fixup [COMMIT_SHA]\n$ git rebase --autosquash -i [COMMIT_SHA]^\n$ ../electron/script/git-export-patches -o ../electron/patches/v8\n```\n\n----------------------------------------\n\nTITLE: File Filter Configuration Example\nDESCRIPTION: Demonstrates how to configure file type filters for dialog windows to limit selectable file types\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  filters: [\n    { name: 'Images', extensions: ['jpg', 'png', 'gif'] },\n    { name: 'Movies', extensions: ['mkv', 'avi', 'mp4'] },\n    { name: 'Custom File Type', extensions: ['as'] },\n    { name: 'All Files', extensions: ['*'] }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Cleanup Release Script in Markdown\nDESCRIPTION: Describes the 'cleanup-release' script, which reverts a failed or unreleasable version by deleting the draft release and git tag if they exist.\nSOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `cleanup-release`\n\nThis script completely reverts a failed or otherwise unreleasable version. It does this by:\n\n* Deleting the draft release if it exists\n* Deleting the git tag if it exists\n\n> [!NOTE]\n> This is the only script / case where an existing tag will be deleted. Tags are only considered immutable after the release is published.\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributable with Electron Forge\nDESCRIPTION: Command to create a distributable using the 'make' script added by Electron Forge.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run make\n```\n\n----------------------------------------\n\nTITLE: Defining JumpListCategory Object Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the JumpListCategory object, including its properties and their possible values. It also provides important notes about property assumptions and limitations.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/jump-list-category.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# JumpListCategory Object\n\n* `type` string (optional) - One of the following:\n  * `tasks` - Items in this category will be placed into the standard `Tasks`\n    category. There can be only one such category, and it will always be\n    displayed at the bottom of the Jump List.\n  * `frequent` - Displays a list of files frequently opened by the app, the\n    name of the category and its items are set by Windows.\n  * `recent` - Displays a list of files recently opened by the app, the name\n    of the category and its items are set by Windows. Items may be added to\n    this category indirectly using `app.addRecentDocument(path)`.\n  * `custom` - Displays tasks or file links, `name` must be set by the app.\n* `name` string (optional) - Must be set if `type` is `custom`, otherwise it should be\n  omitted.\n* `items` JumpListItem[] (optional) - Array of [`JumpListItem`](jump-list-item.md) objects if `type` is `tasks` or\n  `custom`, otherwise it should be omitted.\n\n**Note:** If a `JumpListCategory` object has neither the `type` nor the `name`\nproperty set then its `type` is assumed to be `tasks`. If the `name` property\nis set but the `type` property is omitted then the `type` is assumed to be\n`custom`.\n\n**Note:** The maximum length of a Jump List item's `description` property is\n260 characters. Beyond this limit, the item will not be added to the Jump\nList, nor will it be displayed.\n```\n\n----------------------------------------\n\nTITLE: NPM Environment Configuration for Electron\nDESCRIPTION: Environment variable configuration for installing native modules directly with npm for Electron.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Electron's version.\nexport npm_config_target=1.2.3\n# The architecture of your machine\nexport npm_config_arch=x64\nexport npm_config_target_arch=x64\n# Download headers for Electron.\nexport npm_config_disturl=https://electronjs.org/headers\n# Tell node-pre-gyp that we are building for Electron.\nexport npm_config_runtime=electron\n# Tell node-pre-gyp to build module from source code.\nexport npm_config_build_from_source=true\n# Install all dependencies, and store cache to ~/.electron-gyp.\nHOME=~/.electron-gyp npm install\n```\n\n----------------------------------------\n\nTITLE: Single-Stepping Through Code\nDESCRIPTION: Example showing step-by-step debugging through the Browser::SetName function using LLDB commands.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n(lldb) step\nProcess 25244 stopped\n* thread #1: tid = 0x839a4c, 0x0000000100162dcc Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 44 at browser.cc:119, queue = 'com.apple.main-thread', stop reason = step in\n    frame #0: 0x0000000100162dcc Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 44 at browser.cc:119\n   116\n   117 \tvoid Browser::SetName(const std::string& name) {\n   118 \t  name_override_ = name;\n-> 119 \t}\n   120 \t\n   121 \tint Browser::GetBadgeCount() {\n   122 \t  return badge_count_;\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited App Sandbox Entitlements in XML\nDESCRIPTION: This XML snippet demonstrates the structure of an entitlements file for binaries and helpers in an Electron app bundle. It includes keys for app sandboxing and inheritance of entitlements.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>com.apple.security.app-sandbox</key>\n    <true/>\n    <key>com.apple.security.inherit</key>\n    <true/>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Code Signing and Notarizing with Electron Packager (macOS)\nDESCRIPTION: This snippet demonstrates how to configure Electron Packager to sign and notarize a macOS application. It specifies the `appleId` and `appleIdPassword` for notarization.  It uses the `@electron/packager` package and requires the application's directory path.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst packager = require('@electron/packager')\n\npackager({\n  dir: '/path/to/my/app',\n  osxSign: {},\n  osxNotarize: {\n    appleId: 'felix@felix.fun',\n    appleIdPassword: 'my-apple-id-password'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling WebView Close Events in JavaScript\nDESCRIPTION: Shows how to respond when a guest page attempts to close itself. The example navigates the WebView to about:blank when the close event is triggered.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst webview = document.querySelector('webview')\nwebview.addEventListener('close', () => {\n  webview.src = 'about:blank'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Notification in Electron\nDESCRIPTION: Example demonstrating how to create a new Notification instance in Electron's main process. This shows the basic pattern of creating and showing a notification.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Notification } = require('electron');\n\n// Check if notifications are supported\nif (Notification.isSupported()) {\n  // Create a new notification\n  const notification = new Notification({\n    title: 'Notification Title',\n    body: 'Notification Body Text',\n    silent: false,\n    icon: '/path/to/icon.png'\n  });\n\n  // Show the notification\n  notification.show();\n\n  // Listen for events\n  notification.on('show', () => console.log('Notification shown'));\n  notification.on('click', () => console.log('Notification clicked'));\n  notification.on('close', () => console.log('Notification closed'));\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Traffic Light Position with hiddenInset Style on macOS\nDESCRIPTION: Modifies the position of macOS window controls (traffic lights) by applying the 'hiddenInset' title bar style, which shifts the vertical inset of the controls by a fixed amount.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ titleBarStyle: 'hiddenInset' })\n```\n\n----------------------------------------\n\nTITLE: IPC Communication between Embedder and Guest Page in JavaScript\nDESCRIPTION: Demonstrates how to set up bidirectional communication between the embedder page and guest page using the send method and ipc-message event.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// In embedder page.\nconst webview = document.querySelector('webview')\nwebview.addEventListener('ipc-message', (event) => {\n  console.log(event.channel)\n  // Prints \"pong\"\n})\nwebview.send('ping')\n```\n\n----------------------------------------\n\nTITLE: Complex Class Documentation Structure\nDESCRIPTION: Comprehensive example showing documentation structure for multiple classes with various components like methods, events, and properties.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# session\n\n## Methods\n\n### session.fromPartition(partition)\n\n## Static Properties\n\n### session.defaultSession\n\n## Class: Session\n\n### Instance Events\n\n#### Event: 'will-download'\n\n### Instance Methods\n\n#### `ses.getCacheSize()`\n\n### Instance Properties\n\n#### `ses.cookies`\n\n## Class: Cookies\n\n### Instance Methods\n\n#### `cookies.get(filter, callback)`\n```\n\n----------------------------------------\n\nTITLE: Replacing systemPreferences methods with nativeTheme properties\nDESCRIPTION: Demonstrates how to replace the deprecated `systemPreferences` methods (e.g., `isDarkMode`, `isInvertedColorScheme`) with the corresponding `nativeTheme` properties (e.g., `shouldUseDarkColors`, `shouldUseInvertedColorScheme`).\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed in Electron 13\nsystemPreferences.isDarkMode()\n// Replace with\nnativeTheme.shouldUseDarkColors\n\n// Removed in Electron 13\nsystemPreferences.isInvertedColorScheme()\n// Replace with\nnativeTheme.shouldUseInvertedColorScheme\n\n// Removed in Electron 13\nsystemPreferences.isHighContrastColorScheme()\n// Replace with\nnativeTheme.shouldUseHighContrastColors\n```\n\n----------------------------------------\n\nTITLE: Running electron-windows-store to package Electron app\nDESCRIPTION: PowerShell command to run electron-windows-store with required parameters. This command packages the Electron app into an AppX format, specifying input and output directories, package version, and name.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-store-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nelectron-windows-store `\n    --input-directory C:\\myelectronapp `\n    --output-directory C:\\output\\myelectronapp `\n    --package-version 1.0.0.0 `\n    --package-name myelectronapp\n```\n\n----------------------------------------\n\nTITLE: IPC Implementation in Preload Script\nDESCRIPTION: Shows how to implement secure IPC communication by exposing a ping function through the context bridge.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('versions', {\n  node: () => process.versions.node,\n  chrome: () => process.versions.chrome,\n  electron: () => process.versions.electron,\n  ping: () => ipcRenderer.invoke('ping')\n  // we can also expose variables, not just functions\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Signing for Windows in Forge\nDESCRIPTION: Configuration for code signing Windows installers in the Forge config file, specifying certificate file and password.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  makers: [\n    {\n      name: '@electron-forge/maker-squirrel',\n      config: {\n        certificateFile: './cert.pfx',\n        certificatePassword: process.env.CERTIFICATE_PASSWORD\n      }\n    }\n  ]\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer Format Preference for Video Capture\nDESCRIPTION: Specifies the preferred buffer format for video capture to enable shared texture mode\nSOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nviz::mojom::BufferFormatPreference::kPreferGpuMemoryBuffer\n```\n\n----------------------------------------\n\nTITLE: Setting Bluetooth Pairing Handler in Electron (Windows and Linux)\nDESCRIPTION: This snippet demonstrates how to set a Bluetooth pairing handler for a session in Electron on Windows and Linux. It allows handling of devices that require additional validation before pairing.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, session } = require('electron')\nconst path = require('node:path')\n\nfunction createWindow () {\n  let bluetoothPinCallback = null\n\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  mainWindow.webContents.session.setBluetoothPairingHandler((details, callback) => {\n    bluetoothPinCallback = callback\n    // Send a IPC message to the renderer to prompt the user to confirm the pairing.\n    // Note that this will require logic in the renderer to handle this message and\n    // display a prompt to the user.\n    mainWindow.webContents.send('bluetooth-pairing-request', details)\n  })\n\n  // Listen for an IPC message from the renderer to get the response for the Bluetooth pairing.\n  mainWindow.webContents.ipc.on('bluetooth-pairing-response', (event, response) => {\n    bluetoothPinCallback(response)\n  })\n}\n\napp.whenReady().then(() => {\n  createWindow()\n})\n```\n\n----------------------------------------\n\nTITLE: Defining HIDDevice Object Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the HIDDevice object, including device identifiers, name, USB vendor and product IDs, and optional serial number and GUID. It provides a comprehensive overview of the object's structure for developers working with HID devices in Electron applications.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/hid-device.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# HIDDevice Object\n\n* `deviceId` string - Unique identifier for the device.\n* `name` string - Name of the device.\n* `vendorId` Integer - The USB vendor ID.\n* `productId` Integer - The USB product ID.\n* `serialNumber` string (optional) - The USB device serial number.\n* `guid` string (optional) - Unique identifier for the HID interface.  A device may have multiple HID interfaces.\n```\n\n----------------------------------------\n\nTITLE: Deprecated systemPreferences Methods Replacement - JavaScript\nDESCRIPTION: Shows the replacement of deprecated `systemPreferences` methods (`isDarkMode()`, `isInvertedColorScheme()`, `isHighContrastColorScheme()`) with corresponding properties on the `nativeTheme` module. Requires `electron` to be installed to provide `systemPreferences` and `nativeTheme` modules.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nsystemPreferences.isDarkMode()\n// Replace with\nnativeTheme.shouldUseDarkColors\n\n// Deprecated\nsystemPreferences.isInvertedColorScheme()\n// Replace with\nnativeTheme.shouldUseInvertedColorScheme\n\n// Deprecated\nsystemPreferences.isHighContrastColorScheme()\n// Replace with\nnativeTheme.shouldUseHighContrastColors\n```\n\n----------------------------------------\n\nTITLE: Handling Console Messages from WebView in JavaScript\nDESCRIPTION: Shows how to listen for and handle console messages from a guest page in a WebView. The example forwards all log messages to the embedder's console.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst webview = document.querySelector('webview')\nwebview.addEventListener('console-message', (e) => {\n  console.log('Guest page logged a message:', e.message)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Window with window.open()\nDESCRIPTION: Basic example of using window.open() to create a new window with custom positioning, frame settings, and Node integration options.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/window-open.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.open('https://github.com', '_blank', 'top=500,left=200,frame=false,nodeIntegration=no')\n```\n\n----------------------------------------\n\nTITLE: Customizing Window Controls Appearance in Electron\nDESCRIPTION: Shows how to customize the height, color, and symbol colors of window controls in an Electron application using the titleBarOverlay object with detailed styling options.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  titleBarStyle: 'hidden',\n  titleBarOverlay: {\n    color: '#2f3241',\n    symbolColor: '#74b1be',\n    height: 60\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Development Branch in Electron\nDESCRIPTION: Command to create and checkout a new development branch tracked against the upstream main branch.\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ git checkout -b my-branch -t upstream/main\n```\n\n----------------------------------------\n\nTITLE: Launching Electron with the --inspect Flag for Main Process Debugging\nDESCRIPTION: This command demonstrates how to start Electron with the --inspect flag to enable debugging of the main process on port 9229. An external debugger needs to connect to this port to debug the application.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/debugging-main-process.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nelectron --inspect=9229 your/app\n```\n\n----------------------------------------\n\nTITLE: Adding a Table View to the Objective-C Window\nDESCRIPTION: This Objective-C code snippet extends the `setupWindow` method by adding a table view within a scroll view. It configures the table with two columns: one for the todo text and one for the date, sets up the data source and delegate for the table view, and adds the table to the scroll view before adding the scroll view to the content view.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_8\n\nLANGUAGE: objc\nCODE:\n```\n// Previous code...\n\n- (void)setupWindow {\n  // Previous setupWindow() code...\n\n  // Create a scroll view for the table\n    NSScrollView *scrollView = [[NSScrollView alloc] initWithFrame:NSMakeRect(20, 20, 360, 230)];\n    [scrollView setBorderType:NSBezelBorder];\n    [scrollView setHasVerticalScroller:YES];\n    [contentView addSubview:scrollView];\n\n    // Create table view\n    _tableView = [[NSTableView alloc] initWithFrame:NSMakeRect(0, 0, 360, 230)];\n\n    // Add a column for the todo text\n    NSTableColumn *textColumn = [[NSTableColumn alloc] initWithIdentifier:@\"text\"];\n    [textColumn setWidth:240];\n    [textColumn setTitle:@\"Todo\"];\n    [_tableView addTableColumn:textColumn];\n\n    // Add a column for the date\n    NSTableColumn *dateColumn = [[NSTableColumn alloc] initWithIdentifier:@\"date\"];\n    [dateColumn setWidth:100];\n    [dateColumn setTitle:@\"Date\"];\n    [_tableView addTableColumn:dateColumn];\n\n    // Set the table's delegate and data source\n    [_tableView setDataSource:self];\n    [_tableView setDelegate:self];\n\n    // Add the table to the scroll view\n    [scrollView setDocumentView:_tableView];\n}\n\n// More code to follow later...\n```\n\n----------------------------------------\n\nTITLE: Deprecated webFrame isolated world methods - JavaScript\nDESCRIPTION: Illustrates the replacement of separate `webFrame` methods for setting isolated world information with the unified `webFrame.setIsolatedWorldInfo` method. Requires `electron` to be installed to provide `webFrame` module.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed in Electron 7.0\nwebFrame.setIsolatedWorldContentSecurityPolicy(worldId, csp)\nwebFrame.setIsolatedWorldHumanReadableName(worldId, name)\nwebFrame.setIsolatedWorldSecurityOrigin(worldId, securityOrigin)\n// Replace with\nwebFrame.setIsolatedWorldInfo(\n  worldId,\n  {\n    securityOrigin: 'some_origin',\n    name: 'human_readable_name',\n    csp: 'content_security_policy'\n  })\n```\n\n----------------------------------------\n\nTITLE: Using Fetch API with Electron Net Module\nDESCRIPTION: Example demonstrating how to use the fetch API with Electron's net module for making HTTP requests. Shows handling of response with async/await pattern.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/net.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function example () {\n  const response = await net.fetch('https://my.app')\n  if (response.ok) {\n    const body = await response.json()\n    // ... use the result.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App Sandbox Entitlements in XML\nDESCRIPTION: This XML snippet shows the structure of an entitlements.plist file for enabling App Sandbox in an Electron app. It includes the necessary keys for app sandboxing and application groups.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>com.apple.security.app-sandbox</key>\n    <true/>\n    <key>com.apple.security.application-groups</key>\n    <array>\n      <string>TEAM_ID.your.bundle.id</string>\n    </array>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: History Management - Electron NavigationHistory\nDESCRIPTION: Methods for managing navigation history entries including clearing, getting entries, and removing specific entries.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigationHistory.clear()\nnavigationHistory.getActiveIndex()\nnavigationHistory.getEntryAtIndex(index)\nnavigationHistory.length()\nnavigationHistory.removeEntryAtIndex(index)\nnavigationHistory.getAllEntries()\n```\n\n----------------------------------------\n\nTITLE: Electron Main Process RPC Handler Implementation\nDESCRIPTION: Implementation of an RPC handler in the Electron main process to respond to test driver requests. This code sets up method dispatching and error handling for communication with the test suite.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst METHODS = {\n  isReady () {\n    // do any setup needed\n    return true\n  }\n  // define your RPC-able methods here\n}\n\nconst onMessage = async ({ msgId, cmd, args }) => {\n  let method = METHODS[cmd]\n  if (!method) method = () => new Error('Invalid method: ' + cmd)\n  try {\n    const resolve = await method(...args)\n    process.send({ msgId, resolve })\n  } catch (err) {\n    const reject = {\n      message: err.message,\n      stack: err.stack,\n      name: err.name\n    }\n    process.send({ msgId, reject })\n  }\n}\n\nif (process.env.APP_TEST_DRIVER) {\n  process.on('message', onMessage)\n}\n```\n\n----------------------------------------\n\nTITLE: nativeImage.createThumbnailFromPath parameter change (JavaScript)\nDESCRIPTION: The `maxSize` parameter of `nativeImage.createThumbnailFromPath(path, size)` has been changed to `size` to reflect that the size passed in will be the actual size of the thumbnail created.  This snippet demonstrates the updated and previous behaviors with regards to scaling.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// a 128x128 image.\nconst imagePath = path.join('path', 'to', 'capybara.png')\n\n// Scaling up a smaller image.\nconst upSize = { width: 256, height: 256 }\nnativeImage.createThumbnailFromPath(imagePath, upSize).then(result => {\n  console.log(result.getSize()) // { width: 256, height: 256 }\n})\n\n// Scaling down a larger image.\nconst downSize = { width: 64, height: 64 }\nnativeImage.createThumbnailFromPath(imagePath, downSize).then(result => {\n  console.log(result.getSize()) // { width: 64, height: 64 }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// a 128x128 image\nconst imagePath = path.join('path', 'to', 'capybara.png')\nconst size = { width: 256, height: 256 }\nnativeImage.createThumbnailFromPath(imagePath, size).then(result => {\n  console.log(result.getSize()) // { width: 128, height: 128 }\n})\n```\n\n----------------------------------------\n\nTITLE: PowerMonitor getCurrentThermalState Method\nDESCRIPTION: macOS-specific method that returns the system's current thermal state as a string. Possible values are 'unknown', 'nominal', 'fair', 'serious', or 'critical'.\nSOURCE: https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npowerMonitor.getCurrentThermalState()\n```\n\n----------------------------------------\n\nTITLE: Main Application HTML with MessagePort Communication\nDESCRIPTION: HTML file for the main application that requests a MessagePort channel from the main process to communicate with the worker. It sends work to the worker and handles the results.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script>\nconst { ipcRenderer } = require('electron')\n\n// We request that the main process sends us a channel we can use to\n// communicate with the worker.\nipcRenderer.send('request-worker-channel')\n\nipcRenderer.once('provide-worker-channel', (event) => {\n  // Once we receive the reply, we can take the port...\n  const [ port ] = event.ports\n  // ... register a handler to receive results ...\n  port.onmessage = (event) => {\n    console.log('received result:', event.data)\n  }\n  // ... and start sending it work!\n  port.postMessage(21)\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding UI Controls to Win32 GUI for Todo Application\nDESCRIPTION: Creates and configures a set of DPI-aware UI controls including a text input field, date picker, add button, and list box for the Todo application interface.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nvoid hello_gui() {\n    // ...\n    // All the code above \"Controls go here!\"\n\n    // Create the modern font with DPI-aware size\n    HFONT hFont = CreateFontW(\n      -Scale(14, dpi),              // Height (scaled)\n      0,                            // Width\n      0,                            // Escapement\n      0,                            // Orientation\n      FW_NORMAL,                    // Weight\n      FALSE,                        // Italic\n      FALSE,                        // Underline\n      FALSE,                        // StrikeOut\n      DEFAULT_CHARSET,              // CharSet\n      OUT_DEFAULT_PRECIS,           // OutPrecision\n      CLIP_DEFAULT_PRECIS,          // ClipPrecision\n      CLEARTYPE_QUALITY,            // Quality\n      DEFAULT_PITCH | FF_DONTCARE,  // Pitch and Family\n      L\"Segoe UI\"                   // Font face name\n    );\n\n    // Create input controls with scaled positions and sizes\n    HWND hEdit = CreateWindowExW(0, WC_EDITW, L\"\",\n      WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,\n      Scale(10, dpi), Scale(10, dpi),\n      Scale(250, dpi), Scale(25, dpi),\n      hwnd, (HMENU)1, GetModuleHandle(nullptr), nullptr);\n    SendMessageW(hEdit, WM_SETFONT, (WPARAM)hFont, TRUE);\n\n    // Create date picker\n    HWND hDatePicker = CreateWindowExW(0, DATETIMEPICK_CLASSW, L\"\",\n      WS_CHILD | WS_VISIBLE | DTS_SHORTDATECENTURYFORMAT,\n      Scale(270, dpi), Scale(10, dpi),\n      Scale(100, dpi), Scale(25, dpi),\n      hwnd, (HMENU)4, GetModuleHandle(nullptr), nullptr);\n    SendMessageW(hDatePicker, WM_SETFONT, (WPARAM)hFont, TRUE);\n\n    HWND hButton = CreateWindowExW(0, WC_BUTTONW, L\"Add\",\n      WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,\n      Scale(380, dpi), Scale(10, dpi),\n      Scale(50, dpi), Scale(25, dpi),\n      hwnd, (HMENU)2, GetModuleHandle(nullptr), nullptr);\n    SendMessageW(hButton, WM_SETFONT, (WPARAM)hFont, TRUE);\n\n    HWND hListBox = CreateWindowExW(0, WC_LISTBOXW, L\"\",\n      WS_CHILD | WS_VISIBLE | WS_BORDER | WS_VSCROLL | LBS_NOTIFY,\n      Scale(10, dpi), Scale(45, dpi),\n      Scale(460, dpi), Scale(400, dpi),\n      hwnd, (HMENU)3, GetModuleHandle(nullptr), nullptr);\n    SendMessageW(hListBox, WM_SETFONT, (WPARAM)hFont, TRUE);\n\n    // Store menu handle in window's user data\n    SetWindowLongPtr(hwnd, GWLP_USERDATA, (LONG_PTR)hContextMenu);\n\n    // All the code below \"Controls go here!\"\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Code Signing with electron-winstaller (Squirrel.Windows)\nDESCRIPTION: This snippet demonstrates how to use `electron-winstaller` to create a Windows installer and configure code signing. It specifies the application directory, output directory, authors, executable name, and signing parameters. It uses the `electron-winstaller` package and needs the appropriate application and signing details.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst electronInstaller = require('electron-winstaller')\n// NB: Use this syntax within an async function, Node does not have support for\n//     top-level await as of Node 12.\ntry {\n  await electronInstaller.createWindowsInstaller({\n    appDirectory: '/tmp/build/my-app-64',\n    outputDirectory: '/tmp/build/installer64',\n    authors: 'My App Inc.',\n    exe: 'myapp.exe',\n    windowsSign: {\n      signWithParams: '--my=custom --parameters',\n      // If signtool.exe does not work for you, customize!\n      signToolPath: 'C:\\\\Path\\\\To\\\\my-custom-tool.exe'\n    }\n  })\n  console.log('It worked!')\n} catch (e) {\n  console.log(`No dice: ${e.message}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Replace BrowserWindow.setTrafficLightPosition with setWindowButtonPosition in Electron\nDESCRIPTION: This JavaScript snippet illustrates replacing the deprecated `BrowserWindow.setTrafficLightPosition` with `BrowserWindow.setWindowButtonPosition` in Electron. It demonstrates how to set the window button position using the new API and how to reset it to the system default using `null`.\nSOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Removed in Electron 28\nwin.setTrafficLightPosition({ x: 10, y: 10 })\nwin.setTrafficLightPosition({ x: 0, y: 0 })\n\n// Replace with\nwin.setWindowButtonPosition({ x: 10, y: 10 })\nwin.setWindowButtonPosition(null)\n```\n\n----------------------------------------\n\nTITLE: Directory References in Electron Documentation\nDESCRIPTION: References to key documentation and directory locations within the Electron project structure\nSOURCE: https://github.com/electron/electron/blob/main/docs/development/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Issues](issues.md)\n* [Pull Requests](pull-requests.md)\n* [Documentation Styleguide](coding-style.md#documentation)\n* [Source Code Directory Structure](source-code-directory-structure.md)\n* [Coding Style](coding-style.md)\n* [Using clang-tidy on C++ Code](clang-tidy.md)\n* [Build Instructions](build-instructions-gn.md)\n  * [macOS](build-instructions-macos.md)\n  * [Windows](build-instructions-windows.md)\n  * [Linux](build-instructions-linux.md)\n* [Chromium Development](chromium-development.md)\n* [V8 Development](v8-development.md)\n* [Testing](testing.md)\n* [Debugging](debugging.md)\n* [Patches](patches.md)\n```\n\n----------------------------------------\n\nTITLE: Installing Visual Studio Components for ARM64 Development\nDESCRIPTION: This PowerShell command installs the necessary Visual Studio 2017 components for cross-compiling native modules for ARM64 architecture on Windows.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-arm.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nvs_installer.exe ^\n--add Microsoft.VisualStudio.Workload.NativeDesktop ^\n--add Microsoft.VisualStudio.Component.VC.ATLMFC ^\n--add Microsoft.VisualStudio.Component.VC.Tools.ARM64 ^\n--add Microsoft.VisualStudio.Component.VC.MFC.ARM64 ^\n--includeRecommended\n```\n\n----------------------------------------\n\nTITLE: IPC Handler Setup in Main Process\nDESCRIPTION: Demonstrates how to set up an IPC handler in the main process to respond to ping requests from the renderer.\nSOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow, ipcMain } = require('electron/main')\nconst path = require('node:path')\n\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n  win.loadFile('index.html')\n}\napp.whenReady().then(() => {\n  ipcMain.handle('ping', () => 'pong')\n  createWindow()\n})\n```"
  }
]