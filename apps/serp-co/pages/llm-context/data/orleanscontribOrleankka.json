[
  {
    "owner": "orleanscontrib",
    "repo": "orleankka",
    "content": "TITLE: Consuming the Greeter Actor\nDESCRIPTION: This C# code configures Orleans and Orleankka, starts the Orleans silo and client, obtains a reference to the `Greeter` actor, and sends it messages. The `SiloHostBuilder` configures the Orleans server, while `ClientBuilder` configures the client.  The `ActorSystem` is used to obtain a proxy to the actor. Both `Ask` and `Tell` are used to interact with the actor.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Docs/articles/intro/getting-started-csharp.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\n\nusing Orleankka;\nusing Orleankka.Playground;\n\nnamespace ConsoleApplication11\n{\n    [Serializable]\n    public class Greet\n    {\n        public string Who { get; set; }\n    }\n\n    [Serializable]\n    public class Sleep\n    {}\n\n    public class Greeter : ActorGrain, IGreeter\n    {\n        public override Task<object> Receive(object message)\n        {\n            switch (message)\n            {\n                case Greet greet:\n                    return Result(\"Hello, {msg.Who}!\");\n\n                case Sleep _:\n                    Console.WriteLine(\"Sleeeeping ...\");\n                    return TaskResult.Done;\n\n                default:\n                    return Unhandled;\n            }\n        }\n    }\n\n    class Program\n    {\n        const string DemoClusterId = \"localhost-demo\";\n        const string DemoServiceId = \"localhost-demo-service\";\n        const int LocalhostSiloPort = 11111;\n        const int LocalhostGatewayPort = 30000;\n        static readonly IPAddress LocalhostSiloAddress = IPAddress.Loopback;\n\n        static void Main(string[] args)\n        {\n            var host = await new SiloHostBuilder()\n                .Configure(options => {\n                    options.ClusterId = DemoClusterId;\n                    options.ServiceId = DemoServiceId;\n                })\n                .UseDevelopmentClustering(options => options.PrimarySiloEndpoint = new IPEndPoint(LocalhostSiloAddress, LocalhostSiloPort))\n                .ConfigureEndpoints(LocalhostSiloAddress, LocalhostSiloPort, LocalhostGatewayPort)\n                .ConfigureApplicationParts(x => x\n                    .AddApplicationPart(Assembly.GetExecutingAssembly())\n                    .WithCodeGeneration())\n                .UseOrleankka()  // register Orleankka extension\n                .Build();\n\n            // start Orleans server (silo)\n            await host.StartAsync();\n\n            var client = new ClientBuilder()\n                .ConfigureCluster(options => {\n                    options.ClusterId = DemoClusterId;\n                    options.ServiceId = DemoServiceId\n                })\n                .UseStaticClustering(options => options.Gateways.Add(new IPEndPoint(LocalhostSiloAddress, LocalhostGatewayPort).ToGatewayUri()))\n                .ConfigureApplicationParts(x => x\n                    .AddApplicationPart(Assembly.GetExecutingAssembly())\n                    .WithCodeGeneration())\n                .UseOrleankka()\n                .Build();\n\n            // start (connect) Orleans client\n            await client.Connect();\n\n            // get reference to ActorSystem\n            var system = client.ActorSystem();\n\n            // get proxy reference for IGreeter actor\n            var greeter = system.ActorOf<IGreeter>(\"id\");\n\n            // send query to actor (ie Ask)\n            Console.WriteLine(await greeter.Ask<string>(new Greet {Who = \"world\"}));\n\n            // send command to actor (ie Tell)\n            await greeter.Tell(new Sleep());\n\n            Console.Write(\"\\n\\nPress any key to terminate ...\");\n            Console.ReadKey(true);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Greeter Actor\nDESCRIPTION: This C# code defines the `IGreeter` interface and the `Greeter` actor class, which implements the interface.  The `Receive` method handles incoming messages, responding to `Greet` messages with a greeting and handling `Sleep` messages by writing to the console.  Unhandled messages are returned using `Unhandled`.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Docs/articles/intro/getting-started-csharp.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\n\nusing Orleankka;\n\nnamespace ConsoleApplication11\n{\n    // Create custom actor interface and implement IActorGrain\n    public interface IGreeter : IActorGrain {}\n\n    // Create actor class by inheriting from ActorGrain and implementing custom actor interface\n    public class Greeter : ActorGrain, IGreeter\n    {\n        // Implement receive function (use pattern matching or any other message matching approach)\n        public override Task<object> Receive(object message)\n        {\n            switch (message)\n            {\n                case Greet greet:\n                    return Result(\"Hello, {msg.Who}!\");\n\n                case Sleep _:\n                    Console.WriteLine(\"Sleeeeping ...\");\n                    return TaskResult.Done;\n                    break;\n\n                default:\n                    return Unhandled;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Orleankka Packages\nDESCRIPTION: These commands install the necessary Orleankka runtime and Microsoft Orleans server packages using the Package Manager Console. These packages provide the core functionality for building and running Orleankka actors.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Docs/articles/intro/getting-started-csharp.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Install-Package Orleankka.Runtime\nPM> Install-Package Microsoft.Orleans.Server\n```\n\n----------------------------------------\n\nTITLE: Installing Orleankka Runtime via NuGet\nDESCRIPTION: This command installs the server-side Orleankka runtime library using the NuGet package manager console. It adds the necessary runtime assemblies to your Orleans grain project, enabling you to define and host Orleankka actors.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/README.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Install-Package Orleankka.Runtime\n```\n\n----------------------------------------\n\nTITLE: Installing Orleankka Client via NuGet\nDESCRIPTION: This command installs the client-side Orleankka library using the NuGet package manager console. It adds the necessary client-side assemblies to your project, enabling you to interact with Orleankka actors from your Orleans client application.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/README.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Install-Package Orleankka.Client\n```\n\n----------------------------------------\n\nTITLE: Defining Actor Message Types\nDESCRIPTION: This C# code defines the message types (`Greet` and `Sleep`) that the actor will respond to.  The `[Serializable]` attribute is required for message types used in Orleans/Orleankka. `Greet` contains a `Who` property, while `Sleep` is a simple marker class.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Docs/articles/intro/getting-started-csharp.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace ConsoleApplication11\n{\n    // Create a message types that your actor will respond to\n    // and mark them with [Serializable] attribute. This is smilar to\n    // object-oriented interface signatures (eg Greet(string who)) but with classes\n\n    [Serializable]\n    public class Greet\n    {\n        public string Who { get; set; }\n    }\n\n    [Serializable]\n    public class Sleep\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Bootstrap\nDESCRIPTION: This snippet shows how to use Open Iconic icons within a Bootstrap context.  It uses the `oi` class and `oi-icon-name` class to display a specific icon.  The `title` and `aria-hidden` attributes are included for accessibility.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Samples/CSharp/FSM/ProcessManager/wwwroot/css/open-iconic/README.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Foundation\nDESCRIPTION: This snippet demonstrates how to use Open Iconic icons within a Foundation context. It uses the `fi-icon-name` class to display a specific icon. The `title` and `aria-hidden` attributes are included for accessibility.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Samples/CSharp/FSM/ProcessManager/wwwroot/css/open-iconic/README.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic on its own\nDESCRIPTION: This snippet demonstrates how to use Open Iconic icons using the default stylesheet. It uses the `oi` class and `data-glyph` attribute to specify the icon. The `title` and `aria-hidden` attributes are included for accessibility.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Samples/CSharp/FSM/ProcessManager/wwwroot/css/open-iconic/README.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVG Sprite\nDESCRIPTION: This snippet shows how to use the Open Iconic SVG sprite to display icons. It uses the `<svg>` and `<use>` elements to reference an icon from the sprite. CSS is used for styling, including sizing and coloring the icon.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Samples/CSharp/FSM/ProcessManager/wwwroot/css/open-iconic/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Linking Foundation Stylesheet for Open Iconic\nDESCRIPTION: This snippet shows how to link the Foundation stylesheet for Open Iconic in HTML. This enables using Open Iconic icons with Foundation's styling conventions.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Samples/CSharp/FSM/ProcessManager/wwwroot/css/open-iconic/README.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Linking Bootstrap Stylesheet for Open Iconic\nDESCRIPTION: This snippet demonstrates how to link the Bootstrap stylesheet for Open Iconic in HTML. This allows using Open Iconic icons with Bootstrap's styling conventions.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Samples/CSharp/FSM/ProcessManager/wwwroot/css/open-iconic/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Linking Default Stylesheet for Open Iconic\nDESCRIPTION: This snippet shows how to link the default Open Iconic stylesheet in HTML. This allows using Open Iconic icons with its default styling.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Samples/CSharp/FSM/ProcessManager/wwwroot/css/open-iconic/README.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Iconic SVG\nDESCRIPTION: This snippet demonstrates how to display an Open Iconic SVG image in HTML. It uses the `<img>` tag with the `src` attribute pointing to the SVG file and includes an `alt` attribute for accessibility.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Samples/CSharp/FSM/ProcessManager/wwwroot/css/open-iconic/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Styling Open Iconic SVG Sprite Icons\nDESCRIPTION: This snippet shows how to style Open Iconic icons from an SVG sprite using CSS. It sets the width, height, and fill color of the icon using CSS rules applied to the `<svg>` and `<use>` elements.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/Samples/CSharp/FSM/ProcessManager/wwwroot/css/open-iconic/README.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Orleankka Sources with Nake\nDESCRIPTION: This command is used to build the Orleankka source code. It restores dependencies and compiles the solution in debug mode. VS2019 and .NET Core 3.x are required.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/README.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Nake.bat\n```\n\n----------------------------------------\n\nTITLE: Building Orleankka Sources on MacOS/Linux\nDESCRIPTION: This script is used to build, package, or run tests for Orleankka on MacOS or Linux distributions. It utilizes the nake.sh script for performing these operations.\nSOURCE: https://github.com/orleanscontrib/orleankka/blob/master/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$> ./nake.sh\n```"
  }
]