[
  {
    "owner": "openzeppelin",
    "repo": "openzeppelin-sdk",
    "content": "TITLE: Deploying and Upgrading Smart Contracts with OpenZeppelin SDK\nDESCRIPTION: Example demonstrating how to create an upgradeable contract instance, deploy it, and perform an upgrade using the OpenZeppelin SDK. Shows initialization, proxy creation, and contract upgrading process.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/lib/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Web3 = require('web3');\nconst { Contracts, ProxyAdminProject, ZWeb3 } = require('@openzeppelin/upgrades')\n\nasync function main() {\n  // Create web3 provider and initialize OpenZeppelin upgrades\n  const web3 = new Web3('http://localhost:8545');\n  ZWeb3.initialize(web3.currentProvider)\n\n  // Create an OpenZeppelin project\n  const [from] = await ZWeb3.eth.getAccounts();\n  const project = new ProxyAdminProject('MyProject', null, null, { from, gas: 1e6, gasPrice: 1e9 });\n\n  // Deploy an instance of MyContractV0\n  console.log('Creating an upgradeable instance of v0...');\n  const MyContractV0 = Contracts.getFromLocal('MyContractV0');\n  const instance = await project.createProxy(MyContractV0, { initArgs: [42] });\n  const address = instance.options.address;\n  console.log(`Contract created at ${address}`);\n\n  // And check its initial value\n  const initialValue = await instance.methods.value().call();\n  console.log(`Initial value is ${initialValue.toString()}\\n`);\n\n  // Upgrade it to V1\n  console.log('Upgrading to v1...');\n  const MyContractV1 = Contracts.getFromLocal('MyContractV1');\n  const instanceV1 = await project.upgradeProxy(instance.options.address, MyContractV1);\n  console.log(`Contract upgraded at ${instanceV1.options.address}`);\n\n  // And check its new `add` method, note that we use instanceV1 since V0 has no `add` in its ABI\n  await instanceV1.methods.add(10).send({ from, gas: 1e5, gasPrice: 1e9 });\n  const newValue = await instance.methods.value().call();\n  console.log(`Updated value is ${newValue.toString()}\\n`);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Creating and Upgrading a Smart Contract with OpenZeppelin SDK\nDESCRIPTION: This code snippet demonstrates how to create a proxy for an initial smart contract (MyContractV0) with initialization arguments and then upgrade it to a new version (MyContractV1) using the OpenZeppelin SDK project object.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/examples/upgrades-library/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = await project.createProxy(MyContractV0, { initArgs: [42] });\nawait project.upgradeProxy(instance.options.address, MyContractV1);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Deploying Smart Contract with OpenZeppelin SDK in Truffle\nDESCRIPTION: Registers the initial version (v0) of MyContract in the OpenZeppelin SDK project, pushes the implementation contract to the network, and creates an instance with an initial value of 42.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/examples/truffle-migrate/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Register v0 of MyContract in the OpenZeppelin SDK project\nadd({ contractsData: [{ name: 'MyContract_v0', alias: 'MyContract' }] });\n\n// Push implementation contracts to the network\nawait push(options);\n\n// Create an instance of MyContract, setting initial value to 42\nawait create(Object.assign({ contractAlias: 'MyContract', methodName: 'initialize', methodArgs: [42] }, options));\n```\n\n----------------------------------------\n\nTITLE: Upgrading Smart Contract with OpenZeppelin SDK in Truffle\nDESCRIPTION: Registers a new version (v1) of MyContract in the OpenZeppelin SDK project, pushes the updated implementation to the network, and upgrades the existing instance with a method call to add 10 to the current value.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/examples/truffle-migrate/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Register v1 of MyContract in the OpenZeppelin SDK project as MyContract\nadd({ contractsData: [{ name: 'MyContract_v1', alias: 'MyContract' }] });\n\n// Push implementation contracts to the network\nawait push(options);\n\n// Update instance, adding +10 to value as part of the migration\nawait update(Object.assign({ contractAlias: 'MyContract', methodName: 'add', methodArgs: [10] }, options));\n```\n\n----------------------------------------\n\nTITLE: Creating and initializing an OpenZeppelin SDK project\nDESCRIPTION: Series of commands to create a new project directory, initialize a package.json file, and set up an OpenZeppelin SDK project. This prepares the environment for developing smart contracts using the OpenZeppelin platform.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-project\ncd my-project\nnpm init\nopenzeppelin init my-project\n```\n\n----------------------------------------\n\nTITLE: Setting up and executing OpenZeppelin SDK CREATE2 commands\nDESCRIPTION: A series of OpenZeppelin SDK commands that demonstrate how to initialize a session, push a contract, query predictable addresses, and deploy contracts using the CREATE2 opcode with and without signatures.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/examples/cli-create2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ openzeppelin session --network dev-1554478908078 --from undefined\n> Initialized session on network dev-1554478908078\n\n$ openzeppelin push\n> Pushed logic contract to the network\n\n$ openzeppelin create2 --salt 823\n> Instance using salt 823 will be deployed at 0x34839B781F16Bc40eD33d894762bEeDdc49eCa74\n\n$ openzeppelin create2 Sample --salt 823 --init --args 10\n> Instance deployed at 0x34839B781F16Bc40eD33d894762bEeDdc49eCa74 with value 10\n\n$ openzeppelin create2 Sample --query --salt 938 --signature 0x6980f8b0991446c6cf2967f615915c07e6658f5ab071d33539b729f5fe87f9432aabc363960b6bef3942af7519a6763e389f05a010108e493f60e7e4410408581c --init --args 20\n> Instance of Sample initialized with 'initialize(20)' with salt 938 and signature 0x6980f8b0991446c6cf2967f615915c07e6658f5ab071d33539b729f5fe87f9432aabc363960b6bef3942af7519a6763e389f05a010108e493f60e7e4410408581c will be deployed at 0x0FBb9E5C3aE4C82E7a75211ED8Aba3bdDa3703a3\n\n$ openzeppelin create2 Sample --salt 938 --signature 0x6980f8b0991446c6cf2967f615915c07e6658f5ab071d33539b729f5fe87f9432aabc363960b6bef3942af7519a6763e389f05a010108e493f60e7e4410408581c --init --args 20\n> Instance deployed at 0x0FBb9E5C3aE4C82E7a75211ED8Aba3bdDa3703a3 with value 20 using signature 0x6980f8b0991446c6cf2967f615915c07e6658f5ab071d33539b729f5fe87f9432aabc363960b6bef3942af7519a6763e389f05a010108e493f60e7e4410408581c\n```\n\n----------------------------------------\n\nTITLE: Initializing an OpenZeppelin SDK project\nDESCRIPTION: This command initializes a new OpenZeppelin SDK project. It sets up the necessary configuration files and directory structure for using OpenZeppelin SDK.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/cli/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nopenzeppelin init my-project\n```\n\n----------------------------------------\n\nTITLE: Deploying Counter Contract with OpenZeppelin SDK\nDESCRIPTION: Command to deploy the Counter contract to the development network using OpenZeppelin SDK's deploy functionality.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/examples/first-project/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx openzeppelin deploy Counter --network development\n```\n\n----------------------------------------\n\nTITLE: Installing OpenZeppelin CLI using npm\nDESCRIPTION: This command installs the OpenZeppelin CLI globally using npm. It requires Node.js and npm to be installed beforehand.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/cli/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --global @openzeppelin/cli\n```\n\n----------------------------------------\n\nTITLE: Installing OpenZeppelin CLI using npm\nDESCRIPTION: Command to install the OpenZeppelin SDK Command-Line Interface globally using npm. This allows users to interact with the OpenZeppelin platform from the command line.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --global @openzeppelin/cli\n```\n\n----------------------------------------\n\nTITLE: Installing OpenZeppelin SDK\nDESCRIPTION: Command to install the OpenZeppelin SDK JavaScript library via npm package manager\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/lib/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @openzeppelin/upgrades\n```\n\n----------------------------------------\n\nTITLE: Running OpenZeppelin SDK CREATE2 Example Project\nDESCRIPTION: Commands for setting up and running the sample project to demonstrate CREATE2 functionality. Requires installing dependencies, starting a Ganache instance, and executing the sample script with Truffle.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/examples/cli-create2/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n# or\nlerna bootstrap\nganache-cli --port 9545 --deterministic\nnpx truffle exec index.js --network local\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OpenZeppelin SDK Project\nDESCRIPTION: Command to install the necessary dependencies for running the OpenZeppelin SDK example project.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/examples/first-project/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Ganache Blockchain for Development\nDESCRIPTION: Command to start a local Ganache blockchain instance on port 8545 with deterministic addresses for development purposes.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/examples/first-project/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx ganache-cli -p 8545 -d\n```\n\n----------------------------------------\n\nTITLE: Running the Main Project Script\nDESCRIPTION: Command to execute the main JavaScript file that interacts with the deployed Counter contract.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/examples/first-project/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode src/index.js\n```\n\n----------------------------------------\n\nTITLE: Running Tests for OpenZeppelin SDK Packages\nDESCRIPTION: Commands to run test suites for both the CLI and library packages to ensure all tests pass before submitting a pull request.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenzeppelin-sdk/packages/cli$ yarn test\nopenzeppelin-sdk/packages/lib$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Project with Yarn\nDESCRIPTION: Command to install all project dependencies using Yarn package manager.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Syncing Fork with Upstream Repository in Bash\nDESCRIPTION: Commands to ensure your fork is up to date with the main OpenZeppelin SDK repository before starting work on a new feature or fix.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/OpenZeppelin/openzeppelin-sdk.git\ngit fetch upstream\ngit pull --rebase upstream master\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to Fork\nDESCRIPTION: Git commands to stage, commit, and push changes to your forked repository, with proper commit message referencing the issue number.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add SomeFile.js\ngit commit \"Fix some bug #123\"\ngit push origin fix/some-bug-#123\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git\nDESCRIPTION: Command to create a new branch from master for working on a specific issue, following the project's branch naming convention.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b fix/some-bug-#123\n```\n\n----------------------------------------\n\nTITLE: Creating a new project directory\nDESCRIPTION: These commands create a new directory for the project and change into it. This is the first step in setting up a new OpenZeppelin SDK project.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/cli/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-project\ncd my-project\n```\n\n----------------------------------------\n\nTITLE: Initializing a new npm project\nDESCRIPTION: This command initializes a new npm project by creating a package.json file. It's a prerequisite for using OpenZeppelin SDK in the project.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/cli/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Testing Import Styles in Solidity Contracts\nDESCRIPTION: Example code showing two different import statement styles that should be supported by the OpenZeppelin SDK compiler. The first import uses an absolute path with the 'contracts/' prefix, while the second uses a relative path with the './' prefix.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/cli/mocks/mock-project-to-compile/README.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// contracts/subfolder/GreeterImpl.sol\nimport \"contracts/subfolder/GreeterLib.sol\";\nimport \"./GreeterLib2.sol\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Import Styles in Solidity Contracts\nDESCRIPTION: This code snippet shows two different import styles supported by the Solidity compiler: an absolute import path and a relative import path. These are used to test compiler behavior in dependency projects.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/packages/cli/mocks/mock-dependency-to-compile/README.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// contracts/subfolder/GreeterImpl.sol\nimport \"contracts/subfolder/GreeterLib.sol\";\nimport \"./GreeterLib2.sol\";\n```\n\n----------------------------------------\n\nTITLE: Referencing OpenZeppelin Contracts Package in Markdown\nDESCRIPTION: This code snippet shows the reference to the @openzeppelin/contracts-ethereum-package used in the project for deploying an upgradeable ERC20 token. It's part of a Markdown file explaining the project's purpose and linking to further documentation.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-sdk/blob/master/examples/linking-contracts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@openzeppelin/contracts-ethereum-package`\n```"
  }
]