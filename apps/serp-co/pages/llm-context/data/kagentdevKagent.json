[
  {
    "owner": "kagent-dev",
    "repo": "kagent",
    "content": "TITLE: Get Node Metrics - Bash\nDESCRIPTION: This command retrieves metrics for Kubernetes nodes, such as CPU and memory usage.  It supports sorting by CPU or memory utilization.  This requires the `metrics-server` to be installed in the cluster.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl top nodes [--sort-by=cpu|memory]\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Resource YAML - Bash\nDESCRIPTION: This command retrieves the YAML configuration of a specified Kubernetes resource. This is useful for exporting or inspecting resource definitions.  It requires the resource type, name, and optionally a namespace.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get [resource] [name] -o yaml [-n namespace]\n```\n\n----------------------------------------\n\nTITLE: Health Checks - Bash\nDESCRIPTION: These commands perform health checks on the Kubernetes cluster, displaying component statuses and node details. The componentstatuses command shows the health of Kubernetes components, and the nodes command shows the status of cluster nodes.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get componentstatuses\nkubectl get nodes -o wide\n```\n\n----------------------------------------\n\nTITLE: List Kubernetes Resources - Bash\nDESCRIPTION: This command lists Kubernetes resources of a specified type within a given namespace.  It provides a basic overview of available resources. The resource type and namespace can be specified as parameters.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get [resource] [-n namespace] [-o format]\n```\n\n----------------------------------------\n\nTITLE: Advanced Kubernetes Operations with Kubectl\nDESCRIPTION: These commands represent advanced Kubernetes operations with `kubectl` offering features for node management (draining, cordon/uncordon), port forwarding, authorization checks, and debugging. They require elevated privileges and are used for maintenance and troubleshooting.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kube-expert-system-prompt.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl drain <node>\nkubectl cordon/uncordon <node>\nkubectl port-forward\nkubectl auth can-i\nkubectl debug\n```\n\n----------------------------------------\n\nTITLE: Describe Kubernetes Resources - Bash\nDESCRIPTION: This command provides detailed information about a specific Kubernetes resource. The resource type, name, and namespace are required parameters to identify the resource.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe [resource] [name] [-n namespace]\n```\n\n----------------------------------------\n\nTITLE: Installing CRDs in Kubernetes\nDESCRIPTION: This command installs the Custom Resource Definitions (CRDs) into the Kubernetes cluster. It allows the controller to manage custom resources defined by the CRDs. It requires `kubectl` and access to a Kubernetes cluster.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image\nDESCRIPTION: This command builds and pushes the Docker image for the controller to a specified registry.  The `IMG` variable should be replaced with the actual registry path and tag. It assumes Docker is installed and configured.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake docker-build docker-push IMG=<some-registry>/controller:tag\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes and Istio Agent Team\nDESCRIPTION: Defines a team of agents for Kubernetes and Istio tasks. Includes a planning agent responsible for breaking down complex tasks, a Kubernetes agent for interacting with a Kubernetes cluster, and a user proxy for human interaction. The team uses a SelectorGroupChat to manage communication and task delegation, with termination conditions to end the conversation.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/istio_agent.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen_agentchat.agents import AssistantAgent, UserProxyAgent\nfrom autogen_agentchat.conditions import MaxMessageTermination, TextMentionTermination\nfrom autogen_agentchat.teams import SelectorGroupChat\nfrom autogen_agentchat.ui import Console\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\n\nmodel_client = OpenAIChatCompletionClient(\n    model=\"gpt-4o\",\n)\n\nplanning_agent = AssistantAgent(\n    \"PlanningAgent\",\n    description=\"An agent for planning tasks, this agent should be the first to engage when given a new task.\",\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a planning agent.\n    Your job is to break down complex tasks into smaller, manageable subtasks that can be executed by the team members. DO NOT MAKE UP ADDITIONAL AND UNNECESSARY SUBTASKS.\n    Your team members are:\n        istio_agent: Performs Istio resource generation tasks.\n        k8s_agent: Performs Kubernetes tasks.\n\n    You only plan and delegate tasks - you do not execute them yourself.\n\n    When assigning tasks, use this format:\n    1. <agent> : <task>\n\n    After all tasks are complete, summarize the findings and end with \\\"TERMINATE\\\".\n    \"\"\",\n)\n\nk8s_agent = AssistantAgent(\n    \"k8s_agent\",\n    description=\"An agent for k8s operations\",\n    tools=[],\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a k8s agent. You know how to interact with a Kubernetes cluster.\n    \"\"\",\n)\n\n# istio_agent = AssistantAgent(\n#     \"istio_agent\",\n#     description=\"An agent for creating Istio resources\",\n#     tools=[BuiltInTool(\"istio.generate_resource\")],\n#     model_client=model_client,\n#     system_message=\"\"\"\n#     You are an Istio agent that knows how to generate YAML for Istio resources.\n#     You only respond with YAML for Istio resources and nothing else. If you don't know the answer, say \"I don't know\".\n\n#     The resources you can generate are:\n#     - Gateway\n#     - VirtualService\n#     - AuthorizationPolicy\n#     - PeerAuthentication\n#     \"\"\",\n# )\n\nuser_proxy = UserProxyAgent(\"user_proxy\", input_func=input)\n\ntext_mention_termination = TextMentionTermination(\"TERMINATE\")\nmax_messages_termination = MaxMessageTermination(max_messages=25)\ntermination = text_mention_termination | max_messages_termination\n\n\nteam = SelectorGroupChat(\n    [planning_agent, user_proxy, k8s_agent],\n    model_client=model_client,\n    termination_condition=termination,\n    allow_repeated_speaker=True,\n)\n\ntask = \"Expose the productpage through the ingress gateway and create an authorizationpolicy that denies all traffic to the productpage service\"\n\n# Use asyncio.run(...) if you are running this in a script.\n# await Console(team.run_stream(task=task))\n\n```\n\n----------------------------------------\n\nTITLE: Build Docker Image for Controller (Makefile)\nDESCRIPTION: This command builds a Docker image for the Kagent controller using `make`.  It leverages a Dockerfile within the project to create the image. The image can then be pushed to a container registry.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Docker image\nmake docker-build\n```\n\n----------------------------------------\n\nTITLE: Deploy Controller to Kubernetes (Makefile)\nDESCRIPTION: These commands deploy the Kagent controller to a Kubernetes cluster using `make`. The `install` target installs the CRDs (Custom Resource Definitions), and the `deploy` target deploys the controller itself.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Install CRDs\nmake install\n\n# Deploy the controller\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Get Pod Logs with Timestamps - Bash\nDESCRIPTION: This command fetches logs from a specified pod and includes timestamps for each log entry. This aids in tracing events and identifying timing issues.  The pod name and namespace are required.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs [pod] [-n namespace] --timestamps=true\n```\n\n----------------------------------------\n\nTITLE: Common Prometheus API Endpoints\nDESCRIPTION: Lists common API endpoints for querying Prometheus data and retrieving metadata. Includes endpoints for executing queries, querying data within a time range, retrieving series data, accessing target information, and obtaining rules. These endpoints are essential for interacting with Prometheus programmatically.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/prometheus-expert-system-prompt.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n/api/v1/query\n/api/v1/query_range\n/api/v1/series\n/api/v1/targets\n/api/v1/rules\n```\n\n----------------------------------------\n\nTITLE: Deploying the Controller Manager\nDESCRIPTION: This command deploys the controller manager to the Kubernetes cluster using a specified image. The `IMG` variable defines the image location. It requires `kubectl` and access to a Kubernetes cluster with appropriate permissions.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake deploy IMG=<some-registry>/controller:tag\n```\n\n----------------------------------------\n\nTITLE: Applying Sample Instances\nDESCRIPTION: This command applies sample instances of the solution from the `config/samples/` directory.  This allows users to test the controller with pre-configured resources. It requires `kubectl` and assumes sample configurations exist in the specified directory.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies\nDESCRIPTION: Imports necessary modules for creating agents, defining termination conditions, managing agent teams, and integrating with Kubernetes tools. These modules are used to build the agent team and define its behavior.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/k8s_agent.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom autogen_agentchat.agents import AssistantAgent, UserProxyAgent\nfrom autogen_agentchat.conditions import MaxMessageTermination, TextMentionTermination\nfrom autogen_agentchat.teams import SelectorGroupChat, MagenticOneGroupChat\nfrom autogen_agentchat.ui import Console\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\nfrom kagent.tools.k8s import (\n    GetPods,\n    GetServices,\n    GetResources,\n    GetPodLogs,\n    DescribeResource,\n    ExecuteCommand,\n    GetResourceYAML,\n    GetEvents,\n    CreateResource,\n    PatchResource,\n    CheckServiceConnectivity(),\n)\n```\n\n----------------------------------------\n\nTITLE: Resource Description - Bash\nDESCRIPTION: These commands provide detailed information about specific Kubernetes pods, deployments, and services within a given namespace. The resource name and namespace are required parameters.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod podname -n namespace\nkubectl describe deployment deployname -n namespace\nkubectl describe service servicename -n namespace\n```\n\n----------------------------------------\n\nTITLE: Defining Planning Agent\nDESCRIPTION: Defines the 'PlanningAgent', which is responsible for breaking down user queries into smaller, manageable tasks. The agent is configured with a system message that outlines its responsibilities and provides instructions for task breakdown and assignment.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/k8s_agent.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nplanning_agent = AssistantAgent(\n    \"PlanningAgent\",\n    description=\"An agent for planning tasks, this agent should be the first to engage when given a new task.\",\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a planning agent responsible for taking the users query and breaking it down tasks into logical, sequential steps.\n    \n    Please follow these instructions:\n    1. **Carefully review the task and identify key components** to ensure all necessary steps are included.\n    2. **Break down the task into smaller, manageable sub-tasks** that can be assigned to different team members.\n    3. **Order and prioritize the sub-tasks** based on dependencies and requirements.\n    4. **Assign each sub-task to the appropriate team member** based on their expertise and role.\n    5. **Provide clear instructions and success criteria** for each sub-task to ensure accurate completion.\n    6. **Verify the results of each sub-task** to confirm successful completion before proceeding to the next step.\n    7. **Summarize the findings** and ensure all components of the task have been addressed.\n\n    When assigning tasks, use this format:\n    1. <agent> : <specific task with clear success criteria>\n\n    After all tasks have been completed, please summarize the findings and end with \\\"TERMINATE\\\".\n\n    Your team members are:\n        k8s_agent: Handles Kubernetes operations and resource verification\n    \"\"\",\n)\n```\n\n----------------------------------------\n\nTITLE: Get Pod Logs - Bash\nDESCRIPTION: This command fetches logs from a specified pod.  It supports filtering logs by time, accessing previous logs, and including timestamps. The pod name and namespace are required.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs [pod] [-n namespace] [--tail=N] [--since=duration]\n```\n\n----------------------------------------\n\nTITLE: Running the Agent Team\nDESCRIPTION: Runs the agent team with a specific task. The task is to troubleshoot and fix an issue where the frontend service reports problems with the backend service.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/k8s_agent.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntask = \"When I call the frontend service at http://frontend-v1:8080 I see an error message telling about issues in the 'backend-v1' service. Can you fix this issue?\"\n\n# Use asyncio.run(...) if you are running this in a script.\nawait Console(team.run_stream(task=task))\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Agent\nDESCRIPTION: Defines the 'k8s_agent', an expert in Kubernetes operations. It's equipped with various tools for interacting with Kubernetes resources, such as retrieving logs, describing resources, applying patches, and checking connectivity. The system message guides the agent to prioritize troubleshooting steps and avoid direct modifications to pods.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/k8s_agent.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nk8s_agent = AssistantAgent(\n    \"k8s_agent\",\n    description=\"An agent for k8s operations\",\n    tools=[\n        GetResources(),\n        GetPodLogs(),\n        GetResourceYAML(),\n        DescribeResource(),\n        GetEvents(),\n        CreateResource(),\n        PatchResource(),\n        CheckServiceConnectivity(),\n    ],\n    model_client=model_client,\n    system_message=\"\"\"\nYou are a kubernetes expert. You are expected to solve Kubernetes related problems.\n\n# GENERAL RULES:\n- You have access to several tools you can use to fix problems.\n- Try to reproduce the issue before making changes.\n- Prioritize troubleshooting steps in this order:\n  1. **Pod deployment issues** (check Deployment, ReplicaSet, StatefulSet status)\n  2. **Networking issues** (services misconfigured, selectors not matching)\n  3. **Storage issues** (PVC not bound, PV unavailable)\n  4. **Permission issues** (service account lacking permissions)\n- Issues can be related to Kubernetes objects referenced inside other Kubernetes objects.\n- **Do NOT create new namespaces**, use the existing ones.\n- **Do NOT modify a pod directly.**, always do the change in the corresponding Deployment, ReplicaSet or StatefulSet.\n    \"\"\",\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Kubernetes Operations with Kubectl\nDESCRIPTION: These commands represent fundamental Kubernetes operations performed using `kubectl`. They cover retrieving resource information, inspecting details, accessing logs, executing commands within pods, applying configurations, and deleting resources.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kube-expert-system-prompt.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get <resource>\nkubectl describe <resource>\nkubectl logs <pod>\nkubectl exec -it <pod> -- <command>\nkubectl apply -f <manifest>\nkubectl delete <resource>\n```\n\n----------------------------------------\n\nTITLE: Resource Status - Bash\nDESCRIPTION: These commands retrieve the status of Kubernetes deployments and pods within a specified namespace. They provide insights into the current state of these resources. The namespace is a required parameter.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get deployments -n namespace -o wide\nkubectl get pods -n namespace -o wide\n```\n\n----------------------------------------\n\nTITLE: Push Docker Image to Registry (Makefile)\nDESCRIPTION: This command pushes the built Docker image to a specified container registry using `make`. It requires that the image has been built previously.  Environment variables can be set to customize the registry, repository, image name, and version.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Push the Docker image to a registry\nmake docker-push\n```\n\n----------------------------------------\n\nTITLE: Undeploy Controller from Kubernetes (Makefile)\nDESCRIPTION: These commands undeploy the Kagent controller from a Kubernetes cluster using `make`.  The `undeploy` target removes the controller deployment, and the `uninstall` target removes the CRDs.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Undeploy the controller\nmake undeploy\n\n# Uninstall CRDs\nmake uninstall\n```\n\n----------------------------------------\n\nTITLE: Applying the Installer YAML\nDESCRIPTION: This command applies the generated 'install.yaml' from a remote URL. It installs the project and its associated resources. It requires `kubectl` and access to the internet to download the YAML file.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/README.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/<org>/controller/<tag or branch>/dist/install.yaml\n```\n\n----------------------------------------\n\nTITLE: PromQL Query Example\nDESCRIPTION: Demonstrates the basic structure of a PromQL query, including filtering by label, rate calculation with error handling, and aggregation across multiple dimensions.  It illustrates how to construct effective and performant queries for monitoring cloud-native environments using Prometheus.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/prometheus-expert-system-prompt.txt#_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\n# Basic metric with filtering\nmetric_name{label=\"value\"}\n\n# Rate calculation with error handling\nrate(metric_name{job=\"job\"}[5m])\n\n# Aggregation with multiple dimensions\nsum by (instance) (\n  rate(metric_name{job=\"job\"}[5m])\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Log Queries - Bash\nDESCRIPTION: These commands retrieve logs from a specified Kubernetes pod, allowing filtering by time and specifying a container. The pod name and namespace are required. The container name is needed if the pod has multiple containers.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs podname -n namespace --since=1h\nkubectl logs podname -n namespace -c containername\n```\n\n----------------------------------------\n\nTITLE: Prometheus Operations with Promtool & Prometheus\nDESCRIPTION: Shows basic Prometheus operations including checking rule files, configuration files, and running the Prometheus server. `promtool` is used to validate the configuration and rules, while `prometheus` is used to start the Prometheus server with the specified configuration file.  Also shows `amtool` is used for alertmanager config checks.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/prometheus-expert-system-prompt.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npromtool check rules rules.yml\npromtool check config prometheus.yml\nprometheus --config.file=prometheus.yml\namtool check-config alertmanager.yml\n```\n\n----------------------------------------\n\nTITLE: Resource Configuration - Bash\nDESCRIPTION: These commands retrieve the YAML configuration of specified Kubernetes configmaps and secrets within a given namespace. This allows for inspecting the configuration details. The resource name and namespace are required.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get configmap configname -n namespace -o yaml\nkubectl get secret secretname -n namespace -o yaml\n```\n\n----------------------------------------\n\nTITLE: Run Controller Locally (Makefile)\nDESCRIPTION: This command runs the Kagent controller locally using `make`. This likely starts the controller process directly on the host machine, using configuration files within the project.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubernetes Assistant Agent (Python)\nDESCRIPTION: This snippet initializes an AssistantAgent named 'k8s_agent' with a specific description, a set of Kubernetes tools (GetPods, GetServices, ProxyConfig), and the previously initialized model client. The agent is configured with a system message to guide its behavior and instruct it to return 'TERMINATE' when no explicit tasks remain.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/kubectl.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nk8s_agent = AssistantAgent(\n    \"k8s_agent\",\n    description=\"An agent for k8s operations\",\n    tools=[GetPods(), GetServices(), ProxyConfig()],\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a k8s agent. You know how to interact with a Kubernetes cluster.\n\n    If you don't have any explicit tasks left to complete, return TERMINATE.\n    \"\"\",\n)\n```\n\n----------------------------------------\n\nTITLE: Generate Kubernetes Manifests (Makefile)\nDESCRIPTION: This command generates Kubernetes manifests (CRDs, RBAC, etc.) using `make`. This likely uses tools like `controller-gen` to create the YAML files based on Go code and annotations.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Generate manifests (CRDs, RBAC, etc.)\nmake manifests\n```\n\n----------------------------------------\n\nTITLE: Get Pod Metrics - Bash\nDESCRIPTION: This command retrieves metrics for Kubernetes pods, such as CPU and memory usage.  It supports displaying metrics for individual containers within pods. This requires the `metrics-server` to be installed in the cluster.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl top pods [-n namespace] [--containers=true]\n```\n\n----------------------------------------\n\nTITLE: Running Task in Console (Python)\nDESCRIPTION: This snippet runs a task within the console using the 'team' group chat. The task is to 'get all services in the default namespace'.  The `run_stream` method is presumably used for streaming the results to the console.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/kubectl.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait Console(team.run_stream(task=\"get all services in the default namespace\"))\n```\n\n----------------------------------------\n\nTITLE: Build Installer YAML (Makefile)\nDESCRIPTION: This command generates a consolidated YAML file (install.yaml) for installing Kagent using `make`. This bundles all necessary Kubernetes resources into a single file for easier deployment.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmake build-installer\n```\n\n----------------------------------------\n\nTITLE: Get Previous Pod Logs - Bash\nDESCRIPTION: This command retrieves the logs from the previous instance of a pod. This is useful for debugging applications after a restart.  The pod name and namespace are required.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs [pod] [-n namespace] --previous\n```\n\n----------------------------------------\n\nTITLE: Deleting Sample Instances\nDESCRIPTION: This command deletes the sample instances (CRs) from the cluster.  It cleans up the resources created by the apply command and prepares the cluster for uninstallation.  It requires `kubectl` and access to the Kubernetes cluster.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl delete -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Basic Log Retrieval - Bash\nDESCRIPTION: This command retrieves the logs from a specified Kubernetes pod within a given namespace. It provides a basic view of the pod's logs. The pod name and namespace are required.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs podname -n namespace\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Sets the OpenAI API key as an environment variable. This is a prerequisite for using the OpenAI models for the agents.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/prometheus.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%env OPENAI_API_KEY=key here\n```\n\n----------------------------------------\n\nTITLE: Undeploying the Controller\nDESCRIPTION: This command undeploys the controller from the Kubernetes cluster. It removes the controller manager from the cluster. It requires `kubectl` and access to the Kubernetes cluster.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake undeploy\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Sets the OpenAI API key as an environment variable. This allows the agents to authenticate with the OpenAI API for tasks like generating plans and executing tasks within the cluster. This must be set before running the rest of the code.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/istio_agent.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%env OPENAI_API_KEY=\"keyhere\"\n```\n\n----------------------------------------\n\nTITLE: Generate DeepCopy Methods (Makefile)\nDESCRIPTION: This command generates DeepCopy methods for the Kagent project's Go types using `make`. This likely uses `deepcopy-gen` or similar tooling to automatically create these methods, enabling efficient object copying.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Generate DeepCopy methods\nmake generate\n```\n\n----------------------------------------\n\nTITLE: Agent Initialization with OpenAI and Tools (Python)\nDESCRIPTION: This snippet initializes an `AssistantAgent` with the OpenAI GPT-4o model and two tools: `GetPods` and `ProxyConfig`. The agent is configured to use these tools to solve tasks, as specified in the `system_message`. An `OpenAIChatCompletionClient` instance is created to interact with the OpenAI model, although the api_key is set to 'fake' in this example.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/print_tool.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_agentchat.conditions import MaxMessageTermination\nfrom autogen_agentchat.teams import RoundRobinGroupChat\nfrom autogen_core import ComponentModel\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\n\nfrom kagent.tools.istio import ProxyConfig\nfrom kagent.tools.k8s import GetPods\n\n# Create an agent that uses the OpenAI GPT-4o model.\nmodel_client = OpenAIChatCompletionClient(\n    model=\"gpt-4o\",\n    api_key=\"fake\",\n)\nagent = AssistantAgent(\n    name=\"assistant\",\n    model_client=model_client,\n    tools=[GetPods(), ProxyConfig()],\n    system_message=\"Use tools to solve tasks.\",\n)\n```\n\n----------------------------------------\n\nTITLE: Detailed Resource Listing - Bash\nDESCRIPTION: These commands provide detailed listings of Kubernetes pods and nodes, including more information than the basic listing.  The `wide` output format displays additional columns of data.  The namespace is required for pods.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n namespace -o wide\nkubectl get nodes -o wide\n```\n\n----------------------------------------\n\nTITLE: Running Kagent Autogen Backend\nDESCRIPTION: This snippet demonstrates how to run the Kagent autogen backend using the `uv` package manager. It first synchronizes all extras and then starts the backend service.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/DEVELOPMENT.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-extras\n\n# Run the autogen backend\nuv run kagent-engine serve\n```\n\n----------------------------------------\n\nTITLE: Creating RoundRobinGroupChat for Task Execution (Python)\nDESCRIPTION: This snippet creates a RoundRobinGroupChat named 'team' with a maximum of 3 turns, the 'k8s_agent' as a participant, and a TextMentionTermination condition that triggers when the text 'TERMINATE' is mentioned. The purpose is to manage the interaction flow and termination of the conversation among the agents.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/kubectl.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nteam = RoundRobinGroupChat(\n    max_turns=3,\n    participants=[k8s_agent],\n    termination_condition=TextMentionTermination(text=\"TERMINATE\"),\n)\n```\n\n----------------------------------------\n\nTITLE: JSONPath Queries - Bash\nDESCRIPTION: This command retrieves Kubernetes resources and extracts specific data using JSONPath expressions. It requires familiarity with JSONPath syntax. The resource type is a required parameter.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get [resource] -o jsonpath='{.items[*].metadata.name}'\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metric Types Example\nDESCRIPTION: Illustrates the definition of common Prometheus metric types using YAML.  The examples cover counters, gauges, histograms, and summaries.  These examples showcase how to define various metric types to represent different aspects of system performance and application behavior.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/prometheus-expert-system-prompt.txt#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Counter for accumulated values\nhttp_requests_total{method=\"GET\"}\n\n# Gauge for current values\nnode_memory_available_bytes\n\n# Histogram for distribution\nhttp_request_duration_seconds\n\n# Summary for percentile calculations\nhttp_request_duration_quantile\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Diagnostic Tools\nDESCRIPTION: These tools are used for diagnosing issues within a Kubernetes cluster. `crictl` interacts with the container runtime, `kubelet logs` retrieves logs from the kubelet, `journalctl` accesses system logs, and `tcpdump` and `netstat` are network analysis tools.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kube-expert-system-prompt.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrictl\nkubelet logs\njournalctl\ntcpdump\nnetstat\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests (Makefile)\nDESCRIPTION: This command runs the unit tests for the Kagent project using `make`. This executes the `go test` command on the codebase, ensuring individual components function correctly.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Run unit tests\nmake test\n```\n\n----------------------------------------\n\nTITLE: Dumping GroupChat Configuration to JSON\nDESCRIPTION: This snippet dumps the configuration of the SelectorGroupChat to a JSON string.  It uses the `model_dump_json` method to serialize the object into a JSON format with an indent of 2 spaces for readability. This can be helpful for debugging or saving the configuration of the agent team.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/prometheus.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(team.dump_component().model_dump_json(indent=2))\n```\n\n----------------------------------------\n\nTITLE: Planning a Workflow in YAML\nDESCRIPTION: This YAML snippet outlines the workflow planning structure, defining phases, assigned agents with their types and specific tasks, and dependencies between phases. It allows the orchestrator to manage the execution order and dependencies of tasks within a workflow.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/planning-agent-system-prompt.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nworkflow:\n  phases:\n    - name: \"phase-1\"\n      agents:\n        - type: \"agent-type\"\n          task: \"specific task\"\n      dependencies: []\n    - name: \"phase-2\"\n      agents:\n        - type: \"agent-type\"\n          task: \"specific task\"\n      dependencies: [\"phase-1\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing CNCF Docs Agent with Tools - Python\nDESCRIPTION: This code initializes an assistant agent named `kubernetes_docs_agent` with the ability to query CNCF documentation.  It imports necessary classes from `autogen_agentchat` and `kagent`, sets up an OpenAI model client, configures a documentation query tool, and defines the agent's system message with instructions and available tools (searchDocumentation).\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/all_docs_agent.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen_agentchat.agents import AssistantAgent, UserProxyAgent\nfrom autogen_agentchat.conditions import MaxMessageTermination, TextMentionTermination\nfrom autogen_agentchat.teams import RoundRobinGroupChat\nfrom autogen_agentchat.ui import Console\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\n\nfrom kagent.tools.docs import Config, QueryTool\n\nmodel_client = OpenAIChatCompletionClient(\n    model=\"gpt-4o\",\n)\n\ndocs_config = Config(\n    docs_path=\"\",  # empty string means the database will be downloaded\n)\n\ncncf_docs_agent = AssistantAgent(\n    \"kubernetes_docs_agent\",\n    description=\"This agent allows you to get data from the CNCF docs databases.\",\n    tools=[\n        QueryTool(config=docs_config),\n    ],\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a support agent.\n\n    You have access to several tools:\n    - 'searchDocumentation' to search in the documentation.\n\n    Execute all the following steps:\n    1. Product identification\n    - Check if you know what product the question is about (Only supported products are: 'kubernetes', 'istio', 'argo', 'helm', 'prometheus')\n    - If it's not the case, ask what the product is\n\n    2. Information Gathering\n    - Search in the documentation for information related to the question the user has submitted\n\n    3. Answer the question\n    - Use all the information you gathered to provide a valuable answer to the user\n    - Provide links to the documentation whenever possible`,\n    \"\"\",\n)\n\nuser_proxy = UserProxyAgent(\"user_proxy\", input_func=input)\n\ntext_mention_termination = TextMentionTermination(\"TERMINATE\")\nmax_messages_termination = MaxMessageTermination(max_messages=25)\ntermination = text_mention_termination | max_messages_termination\n\n\nteam = RoundRobinGroupChat(\n    [\n        cncf_docs_agent,\n    ],\n    termination_condition=termination,\n)\n\n# task = \"How do I do a canary upgrade of a pod in kubernetes using argo rollouts?\"\n# task = \"How to I install a helm chart in it doesn't exist or upgrade it if it does?\"\ntask = \"Write a Prometheus query to check if Istio requests are using mTLS?\"\n\n# Use asyncio.run(...) if you are running this in a script.\nawait Console(team.run_stream(task=task))\n```\n\n----------------------------------------\n\nTITLE: Install NPM Dependencies\nDESCRIPTION: This command installs all the necessary dependencies for the Kagent UI, as defined in the `package.json` file. It needs `npm` to be installed in the system. It downloads and installs all required packages into the `node_modules` directory.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/ui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building the Installer\nDESCRIPTION: This command builds the installer YAML file for the project.  The installer bundles all the resources necessary to install the project without dependencies.  The `IMG` variable defines the image location. It utilizes kustomize to generate the 'install.yaml' in the dist directory.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake build-installer IMG=<some-registry>/controller:tag\n```\n\n----------------------------------------\n\nTITLE: Run CLI Locally (Go)\nDESCRIPTION: This command executes the Kagent CLI directly using `go run`. It allows running the CLI as a REPL (Read-Eval-Print Loop) without prior building. This is helpful for quick testing and development iterations.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run cli/cmd/kagent/main.go\n```\n\n----------------------------------------\n\nTITLE: Initializing Autogen Agents for K8s and Prometheus\nDESCRIPTION: This snippet initializes the Autogen agents, including the PlanningAgent, prometheus_agent, and k8s_agent. It configures each agent with specific tools and system messages to define their roles and responsibilities. It also sets up a SelectorGroupChat to enable communication and collaboration between the agents. Dependencies include autogen_agentchat, kagent, and datetime.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/prometheus.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom autogen_agentchat.agents import AssistantAgent, UserProxyAgent\nfrom autogen_agentchat.conditions import MaxMessageTermination, TextMentionTermination\nfrom autogen_agentchat.teams import SelectorGroupChat\nfrom autogen_agentchat.ui import Console\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\nfrom kagent.tools.istio import GenerateResource\nfrom kagent.tools.k8s import GetPods, GetServices, GetResources, GetPodLogs, ApplyManifest\nfrom kagent.tools.prometheus import QueryTool, QueryRangeTool, Config, SeriesQueryTool, LabelNamesTool\n\nmodel_client = OpenAIChatCompletionClient(\n    model=\"gpt-4o\",\n)\n\nplanning_agent = AssistantAgent(\n    \"PlanningAgent\",\n    description=\"An agent for planning tasks, this agent should be the first to engage when given a new task.\",\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a planning agent responsible for orchestrating complex Kubernetes and monitoring tasks.\n    Your primary responsibility is to break down tasks into logical, sequential steps that ensure proper verification\n    and execution order. Always prioritize verification of resources before querying metrics or making changes.\n\n    Your team members are:\n        k8s_agent: Handles Kubernetes operations and resource verification\n        prometheus_agent: Performs Prometheus metrics queries and analysis\n\n    Task Planning Guidelines:\n    1. For any metrics or monitoring tasks:\n        - First verify the existence of services/pods through k8s_agent\n        - Only proceed with prometheus_agent queries if resources exist\n    2. For resource modifications:\n        - First check current state through k8s_agent\n        - Verify changes after application\n    3. Always ensure prerequisites are met before proceeding with subsequent steps\n\n    When assigning tasks, use this format:\n    1. <agent> : <specific task with clear success criteria>\n\n    After task completion:\n    1. Verify all steps were completed successfully\n    2. Summarize the findings\n    3. End with \\\"TERMINATE\\\"\n    \"\"\",\n)\n\nprometheus_config = Config(\n    name=\"prom_config\",\n    base_url=\"http://localhost:9090/api/v1\",\n)\n\nprometheus_agent = AssistantAgent(\n    \"prometheus_agent\",\n    description=\"An agent for Prometheus\",\n    tools=[\n        QueryTool(config=prometheus_config),\n        QueryRangeTool(config=prometheus_config),\n        SeriesQueryTool(config=prometheus_config),\n        LabelNamesTool(config=prometheus_config),\n    ],\n    model_client=model_client,\n    system_message=f\"\"\"\n    # Prometheus Monitoring Specialist\n\n    You are a Prometheus monitoring specialist focused on metric analysis, troubleshooting, and performance optimization. Use available tools to query, analyze, and provide actionable insights.\n    Today's date is {datetime.now().strftime(\"%Y-%m-%d\")}.\n\n    ## Core Capabilities\n    - Instant and range queries for metrics analysis\n    - Series and label discovery for metric exploration\n    - Target and alert monitoring\n    - Resource utilization tracking\n    - Performance analysis and recommendations\n\n    ## Query Guidelines\n    1. Validate metric existence and labels first\n    2. Use appropriate time windows and aggregations\n    3. Consider query efficiency and performance\n    4. Follow PromQL best practices\n\n    ## Response Format\n\n    ### Basic Queries\n    ```\n    Query:\n    <PromQL code block>\n\n    Results:\n    - Current value with units\n    - Context/threshold comparison\n    - Key insights\n    - Recommendations if needed\n    ```\n\n    ### Complex Analysis\n    ```\n    1. Query Details\n    <PromQL code block>\n    - Purpose and components\n    - Key parameters used\n\n    2. Results\n    - Current values and trends\n    - Comparisons to thresholds\n    - Notable patterns\n\n    3. Analysis & Recommendations\n    - Performance interpretation\n    - Action items if needed\n    - Additional metrics to watch\n    ```\n\n    ## Example Patterns\n\n    ### Service Performance\n    ```promql\n    # Latency (p95)\n    histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{{service=\"$service\"}}[5m])) by (le))\n\n    # Error Rate\n    sum(rate(http_requests_total{{status=~\"5..\",service=\"$service\"}}[5m])) \n    / \n    sum(rate(http_requests_total{{service=\"$service\"}}[5m])) * 100\n    ```\n\n    ### Resource Usage\n    ```promql\n    # Memory Usage\n    sum by (pod) (container_memory_usage_bytes{{container!=\"\"}}) / 1024^3\n\n    # CPU Utilization\n    sum by (pod) (rate(container_cpu_usage_seconds_total{{container!=\"\"}}[5m])) * 100\n    ```\n\n    ## Example Response\n\n    **Query**: \\\"Check auth service latency\\\"\n\n    ```promql\n    histogram_quantile(0.95, \n    sum by (le) (rate(http_request_duration_seconds_bucket{{service=\\\"auth\\\"}}[5m]))\n    )\n    ```\n\n    **Results**:\n    - P95 Latency: 245ms (SLO: 300ms)\n    - Hourly avg: 198ms\n    - Status: Healthy\n\n    **Analysis**:\n    - Within SLO but trending up\n    - No correlated error increase\n    - Monitor for sustained elevation\n\n    **Recommendations**:\n    - Continue standard monitoring\n    - Investigate if exceeds 250ms for >30min\n    - Check recent changes if trend continues\n\n    ## Best Practices\n    - Validate assumptions\n    - Provide clear explanations\n    - Consider business impact\n    - Suggest proactive improvements\n    - Document significant findings\n    \"\"\",\n)\n\n\nk8s_agent = AssistantAgent(\n    \"k8s_agent\",\n    description=\"An agent for k8s operations\",\n    tools=[GetPods(), GetServices(), GetResources(), GetPodLogs(), ApplyManifest()],\n    model_client=model_client,\n    system_message=\"\"\"\n    You are a Kubernetes specialist agent responsible for cluster operations and resource verification.\n\n    Key Responsibilities:\n    1. Resource Verification:\n        - Check existence of services, pods, and other resources\n        - Verify resource state and configuration\n        - Report detailed status of resources\n\n    2. Resource Management:\n        - Apply and modify Kubernetes manifests\n        - Monitor resource changes\n        - Verify successful application of changes\n\n    3. Diagnostic Operations:\n        - Retrieve pod logs\n        - Check resource status\n        - Verify service endpoints\n\n    Always:\n    - Confirm resource existence before operations\n    - Provide detailed status reports\n    - Verify changes after application\n    - Report any issues or anomalies immediately\n\n    Response Format:\n    - Include resource name, namespace, and relevant details\n    - Clearly indicate success/failure of operations\n    - Provide context for any errors encountered\n    \"\"\",\n)\n\n\ntext_mention_termination = TextMentionTermination(\"TERMINATE\")\nmax_messages_termination = MaxMessageTermination(max_messages=25)\ntermination = text_mention_termination | max_messages_termination\n\n\nteam = SelectorGroupChat(\n    [planning_agent, prometheus_agent, k8s_agent],\n    model_client=model_client,\n    termination_condition=termination,\n    allow_repeated_speaker=True,\n)\n\ntask = \"show me the RED metrics for productpage and reviews\"\n\n# Use asyncio.run(...) if you are running this in a script.\nawait Console(team.run_stream(task=task))\n\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Kagent UI using Kubectl\nDESCRIPTION: This command sets up port forwarding from your local machine to the Kagent service within a Kubernetes cluster. It forwards local port 8001 to port 80 of the Kagent service. Replace `{{ .Release.Namespace }}` and `{{ .Release.Name }}` with the actual namespace and release name.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/helm/kagent/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl -n {{ .Release.Namespace }} port-forward svc/{{ .Release.Name }} 8001:80\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Client\nDESCRIPTION: Initializes the OpenAI chat completion client with the 'gpt-4o-mini' model. This client is used by the agents for generating responses and completing tasks.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/k8s_agent.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmodel_client = OpenAIChatCompletionClient(\n    model=\"gpt-4o-mini\",\n)\n```\n\n----------------------------------------\n\nTITLE: Task Analysis YAML Schema\nDESCRIPTION: Defines the YAML schema for task analysis, including objective, requirements, constraints, and success criteria. This schema outlines the necessary fields for describing a task and its associated attributes for planning and execution.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntask:\n  objective: \"main goal\"\n  requirements:\n    - technical_requirements\n    - operational_requirements\n    - security_requirements\n  constraints:\n    - resource_constraints\n    - time_constraints\n    - security_constraints\n  success_criteria:\n    - measurable_outcomes\n    - quality_metrics\n```\n\n----------------------------------------\n\nTITLE: Structured Data Output Format - YAML\nDESCRIPTION: This is a structured YAML format for representing successful command execution results.  It includes fields for success status, command executed, output, format, timestamp, and duration.  This provides a standardized way to represent command outcomes.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nresult:\n  success: boolean\n  command: \"executed command\"\n  output: \"command output\"\n  format: \"output format\"\n  timestamp: \"execution time\"\n  duration: \"execution duration\"\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to UI\nDESCRIPTION: This snippet details how to set up port forwarding to access the Kagent UI in a Kubernetes environment. It forwards port 8001 on localhost to port 80 of the app service.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/DEVELOPMENT.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/app 8001:80\n```\n\n----------------------------------------\n\nTITLE: Creating a new feature branch\nDESCRIPTION: Creates a new branch for developing a specific feature.  This isolates changes and prevents conflicts with the main codebase. The branch name should be descriptive and related to the feature being implemented. The user should replace `feature/your-feature-name` with an appropriate name.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/CONTRIBUTION.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Criteria in YAML\nDESCRIPTION: This YAML snippet illustrates the structure for defining validation criteria, including the criteria name, status (passed or failed), verification method, dependencies with their status (verified or unverified), and data consistency checks with their status (passed or failed). This enables comprehensive verification of task completion and data integrity.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/planning-agent-system-prompt.txt#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  criteria:\n    - name: \"criterion name\"\n      status: \"passed|failed\"\n      verification_method: \"method description\"\n  dependencies:\n    - name: \"dependency\"\n      status: \"verified|unverified\"\n  data_consistency:\n    - check: \"consistency check\"\n      status: \"passed|failed\"\n```\n\n----------------------------------------\n\nTITLE: Resource Assessment YAML Schema\nDESCRIPTION: Defines the YAML schema for assessing available resources, including agents, their capabilities, tools, and dependencies.  This schema is used to evaluate the resources available for task execution, including agent types, capabilities, and required external dependencies.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  agents:\n    - type: \"agent_type\"\n      capabilities: [\"capability1\", \"capability2\"]\n      tools: [\"tool1\", \"tool2\"]\n  dependencies:\n    - external_systems\n    - required_access\n    - necessary_data\n```\n\n----------------------------------------\n\nTITLE: Initialize OpenAI Client for Kubernetes Agent\nDESCRIPTION: This snippet initializes the OpenAI client for use with the Kubernetes agent. It specifies the 'gpt-4o' model to be used for chat completions.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/mcp.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodel_client = OpenAIChatCompletionClient(\n    model=\"gpt-4o\",\n)\n```\n\n----------------------------------------\n\nTITLE: Execution Strategy YAML Schema\nDESCRIPTION: Defines the YAML schema for outlining the execution strategy, including phases, agent assignments, dependencies, and validation steps.  The execution strategy schema defines the structure for planning and coordinating tasks across different phases, agents, and dependencies.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy:\n  phases:\n    - name: \"phase_name\"\n      agents:\n        - type: \"agent_type\"\n          tasks: [\"task1\", \"task2\"]\n      dependencies: []\n      validation: [\"check1\", \"check2\"]\n\n  parallel_execution:\n    - independent_tasks\n    - concurrent_operations\n\n  sequential_requirements:\n    - dependent_operations\n    - critical_path\n```\n\n----------------------------------------\n\nTITLE: Reporting Task Status in YAML\nDESCRIPTION: This YAML snippet defines the format for reporting task status, including the task ID, overall progress, current phase, active agents with their status and progress, completed phases, pending phases, and any issues encountered.  It facilitates comprehensive monitoring and reporting on task execution.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/planning-agent-system-prompt.txt#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  task_id: \"unique-task-id\"\n  overall_progress: percentage\n  current_phase: \"phase name\"\n  active_agents:\n    - agent: \"agent-type\"\n      status: \"status\"\n      progress: percentage\n  completed_phases:\n    - \"phase-1\"\n  pending_phases:\n    - \"phase-2\"\n  issues:\n    - \"issue description\"\n```\n\n----------------------------------------\n\nTITLE: Task Assignment YAML Schema\nDESCRIPTION: Defines the YAML schema for assigning tasks to agents, specifying required tools, expected output, and validation criteria.  This schema describes the necessary information for assigning a specific task to an agent, including tools, expected output, and validation criteria.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nassignment:\n  agent: \"agent_type\"\n  task: \"specific_task\"\n  tools_required: [\"tool1\", \"tool2\"]\n  expected_output: \"output_format\"\n  validation_criteria: [\"criterion1\", \"criterion2\"]\n```\n\n----------------------------------------\n\nTITLE: Phase Completion YAML Schema\nDESCRIPTION: Defines the YAML schema for verifying phase completion, including status, validations, and artifacts.  This schema outlines the status of a phase, the results of validation checks, and the artifacts generated during that phase.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nphase_completion:\n  name: \"phase_name\"\n  status: \"status\"\n  validations:\n    - criterion: \"criterion_name\"\n      status: \"passed|failed\"\n  artifacts:\n    - type: \"artifact_type\"\n      location: \"artifact_location\"\n```\n\n----------------------------------------\n\nTITLE: Progress Tracking YAML Schema\nDESCRIPTION: Defines the YAML schema for tracking the progress of tasks, including status, completed tasks, pending tasks, blockers, and next steps.  The progress tracking schema is used to monitor the status of tasks and identify any issues or blockers that may arise during execution.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprogress:\n  phase: \"current_phase\"\n  status: \"in_progress|complete|failed\"\n  completed_tasks: [\"task1\", \"task2\"]\n  pending_tasks: [\"task3\"]\n  blockers: [\"blocker_description\"]\n  next_steps: [\"step1\", \"step2\"]\n```\n\n----------------------------------------\n\nTITLE: Configure Stdio Server Parameters for MCP\nDESCRIPTION: This snippet configures the parameters for the Stdio server, which is part of the MCP (Model Control Plane) toolchain. It defines the command to execute ('npx') and the arguments to pass to it ('mcp-server-kubernetes').\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/mcp.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nparams = StdioServerParams(\n    command=\"npx\",\n    args=[\"mcp-server-kubernetes\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Integration Management YAML Schema\nDESCRIPTION: Defines the YAML schema for managing integration between agents, including data flow and handoffs with specific requirements.  This schema describes the data flow and handoff requirements between different agents and tasks to ensure proper integration.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nintegration:\n  data_flow:\n    - source: \"agent_A\"\n      destination: \"agent_B\"\n      format: \"data_format\"\n\n  handoffs:\n    - from: \"task_1\"\n      to: \"task_2\"\n      requirements: [\"requirement1\"]\n```\n\n----------------------------------------\n\nTITLE: Status Updates YAML Schema\nDESCRIPTION: Defines the YAML schema for providing status updates, including phase, progress, achievements, issues, and next steps.  The status update schema facilitates communication between agents by conveying current progress, achievements, encountered issues, and planned next steps.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_update:\n  phase: \"current_phase\"\n  progress: percentage\n  achievements: [\"achievement1\"]\n  issues: [\"issue1\"]\n  next_steps: [\"step1\"]\n```\n\n----------------------------------------\n\nTITLE: Run CLI (Direct Execution)\nDESCRIPTION: These commands demonstrate how to execute the built Kagent CLI binaries directly from the `bin` directory.  Platform-specific binaries are provided for Linux, macOS, and Windows.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Linux/macOS\n./bin/kagent-linux-amd64 [command]\n# or\n./bin/kagent-darwin-arm64 [command]\n\n# Windows\n./bin/kagent-windows-amd64.exe [command]\n```\n\n----------------------------------------\n\nTITLE: Overall Success Verification YAML Schema\nDESCRIPTION: Defines the YAML schema for verifying overall success, including objectives met, quality checks, performance metrics, and documentation. This schema documents the evidence of successfully meeting objectives and maintaining quality standards.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsuccess_verification:\n  objectives_met: [\"objective1\", \"objective2\"]\n  quality_checks: [\"check1\", \"check2\"]\n  performance_metrics: [\"metric1\", \"metric2\"]\n  documentation: [\"doc1\", \"doc2\"]\n```\n\n----------------------------------------\n\nTITLE: Planning Response YAML Schema\nDESCRIPTION: Defines the YAML schema for a planning response, including objective, phases, agents, timeline, and dependencies. This schema structures the plan that outlines the objective, phases, responsible agents, timeline and dependencies.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nplan:\n  objective: \"main goal\"\n  phases:\n    - name: \"phase name\"\n      tasks: [\"task1\", \"task2\"]\n      agents: [\"agent1\", \"agent2\"]\n  timeline: \"estimated timeline\"\n  dependencies: [\"dependency1\"]\n```\n\n----------------------------------------\n\nTITLE: Task Instructions YAML Schema\nDESCRIPTION: Defines the YAML schema for providing task instructions to agents, including recipient, task description, context, dependencies, and expectations.  This schema provides a structured format for communicating task details to specific agents, outlining necessary context, dependencies, and expected outcomes.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ninstruction:\n  recipient: \"agent_type\"\n  task: \"task_description\"\n  context: \"relevant_context\"\n  dependencies: [\"dependency1\"]\n  expectations: [\"expectation1\"]\n```\n\n----------------------------------------\n\nTITLE: Progress Response YAML Schema\nDESCRIPTION: Defines the YAML schema for a progress response, including current phase, progress percentage, completed tasks, pending tasks, issues, and next steps. This schema facilitates the communication of the progress.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/internal/autogen/planning-agent-system-prompt.txt#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  current_phase: \"phase name\"\n  progress: percentage\n  completed: [\"task1\"]\n  pending: [\"task2\"]\n  issues: [\"issue1\"]\n  next_steps: [\"step1\"]\n```\n\n----------------------------------------\n\nTITLE: Customize Docker Build/Push (Makefile)\nDESCRIPTION: This example demonstrates how to customize the Docker build and push process using `make` and environment variables. It allows setting the Docker registry, repository, image name, and version.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Example with custom values\nmake docker-build docker-push \\\n  DOCKER_REGISTRY=my-registry.io \\\n  DOCKER_REPO=my-org/kagent \\\n  IMAGE_NAME=controller \\\n  VERSION=v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining System Signals in YAML\nDESCRIPTION: This YAML snippet defines the format for system signals, including the signal type (status, completion, error, or terminate), content, timestamp, source, and priority level. It provides a structured way for the system to communicate events and information.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/planning-agent-system-prompt.txt#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsignal:\n  type: \"status|completion|error|terminate\"\n  content: \"signal details\"\n  timestamp: \"signal time\"\n  source: \"signal source\"\n  priority: \"priority level\"\n```\n\n----------------------------------------\n\nTITLE: Adding upstream remote\nDESCRIPTION: Adds the original Kagent repository as a remote called 'upstream'. This enables fetching updates from the main repository and rebasing local branches.  It's essential for staying up-to-date with the latest changes.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/CONTRIBUTION.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/kagent-dev/kagent.git\n```\n\n----------------------------------------\n\nTITLE: Initializing a Task in YAML\nDESCRIPTION: This YAML snippet defines the structure for initializing a task, including its unique ID, description, requirements, success criteria, and dependencies. It provides a structured way to define the necessary information for the orchestrator to begin processing a task.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/planning-agent-system-prompt.txt#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntask:\n  id: \"unique-task-id\"\n  description: \"task description\"\n  requirements:\n    - \"required capability 1\"\n    - \"required capability 2\"\n  success_criteria:\n    - \"criterion 1\"\n    - \"criterion 2\"\n  dependencies:\n    - \"dependency 1\"\n    - \"dependency 2\"\n```\n\n----------------------------------------\n\nTITLE: Providing Agent Instructions in YAML\nDESCRIPTION: This YAML snippet defines the format for providing instructions to agents, including the agent type, task description, parameters with their names and values, constraints, and dependencies. It allows the orchestrator to communicate specific tasks and requirements to individual agents.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/planning-agent-system-prompt.txt#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ninstruction:\n  agent: \"agent-type\"\n  task: \"task description\"\n  parameters:\n    - name: \"param-name\"\n      value: \"param-value\"\n  constraints:\n    - \"constraint description\"\n  dependencies:\n    - \"dependency description\"\n```\n\n----------------------------------------\n\nTITLE: Updating fork with upstream changes\nDESCRIPTION: Fetches the latest changes from the upstream repository and rebases the current branch on top of it. This ensures the local branch is up-to-date and minimizes merge conflicts during the pull request process. This command assumes 'upstream' is the name of the remote and 'main' is the main branch in the upstream repository.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/CONTRIBUTION.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Error Format - YAML\nDESCRIPTION: This is a structured YAML format for representing errors encountered during command execution. It includes fields for the failed command, error message, error code, timestamp, and a suggested recovery action. This provides a standardized way to report and handle errors.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nerror:\n  command: \"failed command\"\n  message: \"error description\"\n  code: \"error code\"\n  timestamp: \"error time\"\n  suggestion: \"recovery suggestion\"\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to fork\nDESCRIPTION: Pushes the changes from the local branch to the forked repository on GitHub. This makes the changes available for creating a pull request. The user should replace `feature/your-feature-name` with the actual branch name.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/CONTRIBUTION.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Creating Kind Kubernetes Cluster\nDESCRIPTION: This snippet shows how to create a local Kubernetes cluster using Kind, which is useful for development and testing purposes.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/DEVELOPMENT.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake create-kind-cluster\n```\n\n----------------------------------------\n\nTITLE: Tracking Progress in YAML\nDESCRIPTION: This YAML snippet describes the structure for tracking the progress of a task, including the current phase, status (in-progress, complete, or failed), completed tasks, pending tasks, and any blockers. It enables the orchestrator to monitor the execution and identify potential issues.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/planning-agent-system-prompt.txt#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprogress:\n  phase: \"current-phase\"\n  status: \"in-progress|complete|failed\"\n  completed_tasks:\n    - \"task-1\"\n    - \"task-2\"\n  pending_tasks:\n    - \"task-3\"\n  blockers:\n    - \"blocker description\"\n```\n\n----------------------------------------\n\nTITLE: Running the Kagent Engine\nDESCRIPTION: This command runs the kagent engine in serve mode using the uv package manager. It starts the main application process, making it accessible for interaction.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run kagent-engine serve\n```\n\n----------------------------------------\n\nTITLE: Create Kubernetes Agent with Tools and OpenAI Client\nDESCRIPTION: This snippet creates an AssistantAgent instance named 'k8s_agent' for Kubernetes operations. It provides the agent with a description, a set of tools (obtained from mcp_server_tools), the OpenAI client, and a system message to guide its behavior. The tools are assumed to allow the agent to interact with the Kubernetes API.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/mcp.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntools = await mcp_server_tools(params)\nk8s_agent = AssistantAgent(\n    \"k8s_agent\",\n    description=\"An agent for k8s operations\",\n    tools=tools,\n    model_client=model_client,\n    system_message=\"\"\"\n  You are a k8s agent. You know how to interact with the Kubernetes API.\n\n  Always prefer wide output format.\n\n  If you don't have any explicit tasks left to complete, return TERMINATE.\n  \"\"\",\n)\n```\n\n----------------------------------------\n\nTITLE: Build CLI for Multiple Platforms (Makefile)\nDESCRIPTION: This command builds the Kagent CLI for various supported platforms (Linux, macOS, Windows) using the `make` command. The resulting binaries are placed in the `bin/` directory with platform-specific names.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build for all supported platforms\nmake build\n```\n\n----------------------------------------\n\nTITLE: Run Kubernetes Agent with Console Interface\nDESCRIPTION: This snippet runs the Kubernetes agent with a specified task using a console interface. The task is to \"List all pods in the default namespace\". The run_stream method is used, indicating that the agent's output is streamed to the console.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/mcp.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait Console(k8s_agent.run_stream(task=\"List all pods in the default namespace\"))\n```\n\n----------------------------------------\n\nTITLE: Run Linters (Makefile)\nDESCRIPTION: This command executes linters on the Kagent codebase using `make`. Linters analyze the code for style issues, potential errors, and adherence to best practices.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Run linters\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Alertmanager Alert Rule Example\nDESCRIPTION: This YAML snippet shows an example of an Alertmanager alert rule for detecting a high HTTP error rate.  The rule calculates the error rate based on HTTP request status codes and triggers an alert if it exceeds a specified threshold over a 5-minute period. It defines labels and annotations to provide context and severity for the alert.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/prometheus-expert-system-prompt.txt#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n- name: example\n  rules:\n  - alert: HighErrorRate\n    expr: |\n      rate(http_requests_total{status=~\"5..\"}[5m])\n      / rate(http_requests_total[5m]) > 0.1\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: High HTTP error rate\n      description: Error rate is {{ $value | humanize }}%\n```\n\n----------------------------------------\n\nTITLE: Fix Linting Issues (Makefile)\nDESCRIPTION: This command attempts to automatically fix linting issues in the Kagent codebase using `make`. This leverages tools like `gofmt` or `goimports` to apply automated fixes where possible.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Fix linting issues automatically where possible\nmake lint-fix\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Tests\nDESCRIPTION: This command executes the pytest test suite for the project using the uv package manager. It runs all tests located in the 'tests/' directory to verify the functionality of the codebase.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest tests/\n```\n\n----------------------------------------\n\nTITLE: Deploying Kagent using Helm\nDESCRIPTION: This snippet demonstrates how to build images, load them into the Kind cluster, and deploy the Kagent application using Helm. This assumes a properly configured Helm setup.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/DEVELOPMENT.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake helm-install\n```\n\n----------------------------------------\n\nTITLE: Run End-to-End Tests (Makefile)\nDESCRIPTION: This command runs end-to-end (e2e) tests for the Kagent project using `make`.  It requires a running Kind (Kubernetes in Docker) cluster for testing the integration of different components.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Run end-to-end tests (requires a running Kind cluster)\nmake test-e2e\n```\n\n----------------------------------------\n\nTITLE: Run Frontend Development Server\nDESCRIPTION: This command starts the frontend development server for the Kagent UI. It typically uses a script defined in the `package.json` file under the `dev` key. It compiles the frontend code and serves it, usually with hot-reloading for development.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/ui/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Editing with Helm Plugin\nDESCRIPTION: This command enables the helm plugin in kubebuilder.  It creates a helm chart in the dist directory that can be used to deploy and manage the controller. It requires `kubebuilder` to be installed.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/README.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder edit --plugins=helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment\nDESCRIPTION: This command creates a Python virtual environment named '.venv' using the uv package manager. Virtual environments isolate project dependencies and ensure consistent execution across different systems.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv .venv\n```\n\n----------------------------------------\n\nTITLE: Dumping Component Model\nDESCRIPTION: Dumps the component model of the agent team as a JSON string. This provides a serialized representation of the team's configuration.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/k8s_agent.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(team.dump_component().model_dump_json(indent=2))\n```\n\n----------------------------------------\n\nTITLE: Addressing review comments\nDESCRIPTION: Stages all changed files, commits them with a message indicating that review comments are being addressed, and pushes the updated branch to the remote repository. This allows updating the pull request with the requested changes.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/CONTRIBUTION.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"address review comments\"\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Cloning a forked repository\nDESCRIPTION: Clones a forked repository from GitHub to the local machine. This allows developers to work on their own copy of the project without directly affecting the main repository.  The user must replace `YOUR-USERNAME` with their actual GitHub username.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/CONTRIBUTION.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/kagent.git\ncd kagent\n```\n\n----------------------------------------\n\nTITLE: Frontend Setup\nDESCRIPTION: This snippet details the steps to set up the Kagent frontend, which involves installing npm dependencies and running the development server.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/DEVELOPMENT.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Chat Completion Client (Python)\nDESCRIPTION: This snippet initializes an OpenAIChatCompletionClient with the 'gpt-4o' model. This client is used for interacting with the OpenAI API for chat completion tasks. It is a dependency for the AssistantAgent.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/kubectl.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodel_client = OpenAIChatCompletionClient(\n    model=\"gpt-4o\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Termination Conditions\nDESCRIPTION: Defines the termination conditions for the agent team. The conversation will terminate either when the word 'TERMINATE' is mentioned or after a maximum of 25 messages.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/k8s_agent.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntext_mention_termination = TextMentionTermination(\"TERMINATE\")\nmax_messages_termination = MaxMessageTermination(max_messages=25)\ntermination = text_mention_termination | max_messages_termination\n```\n\n----------------------------------------\n\nTITLE: Creating SelectorGroupChat\nDESCRIPTION: Creates a 'SelectorGroupChat' instance, which manages the interaction between the 'planning_agent' and 'k8s_agent'.  It is configured with a termination condition to stop the conversation when necessary.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/k8s_agent.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nteam = SelectorGroupChat(\n    [planning_agent, k8s_agent],\n    model_client=model_client,\n    termination_condition=termination,\n)\n```\n\n----------------------------------------\n\nTITLE: Dumping Component Model to JSON - Python\nDESCRIPTION: This code snippet dumps the component model of the `team` object to a JSON string with an indentation of 2 spaces. This is likely used for debugging or serialization purposes. The `model_dump_json` method is part of the pydantic model.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/all_docs_agent.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(team.dump_component().model_dump_json(indent=2))\n```\n\n----------------------------------------\n\nTITLE: Custom Column Output - Bash\nDESCRIPTION: This command retrieves Kubernetes resources and displays specific fields using custom column names.  It requires knowledge of the resource's data structure.  The resource type is a required parameter.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get [resource] -o custom-columns=NAME:.metadata.name,STATUS:.status.phase\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Listing - Bash\nDESCRIPTION: These commands list Kubernetes pods, deployments, and services within a specified namespace. They provide a basic overview of available resources.  The namespace is a required parameter.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/test/e2e/systemprompts/kubectl-user-system-prompt.txt#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n namespace\nkubectl get deployments -n namespace\nkubectl get services -n namespace\n```\n\n----------------------------------------\n\nTITLE: Uninstalling CRDs\nDESCRIPTION: This command uninstalls the Custom Resource Definitions (CRDs) from the Kubernetes cluster.  This removes the definitions of the custom resources managed by the controller.  It requires `kubectl` and access to the Kubernetes cluster.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/go/controller/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake uninstall\n```\n\n----------------------------------------\n\nTITLE: Dumping Team Configuration to JSON\nDESCRIPTION: Dumps the configuration of the agent team to a JSON string. This can be used for debugging, auditing, or persisting the agent configuration. The JSON is formatted with an indent of 2 for readability.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/istio_agent.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(team.dump_component().model_dump_json(indent=2))\n```\n\n----------------------------------------\n\nTITLE: Round-Robin Group Chat Setup (Python)\nDESCRIPTION: This snippet creates a `RoundRobinGroupChat` with the previously initialized `agent` as a participant. The chat is configured to terminate after a maximum of 2 messages, as defined by `MaxMessageTermination`. The team configuration is then dumped into a JSON format and printed to the console, providing a serialized representation of the team structure.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/print_tool.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nteam = RoundRobinGroupChat(participants=[agent], termination_condition=MaxMessageTermination(2))\n\nteam_config: ComponentModel = team.dump_component()  # dump component\nprint(team_config.model_dump_json(indent=2))\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: Sets the OpenAI API key as an environment variable. This is a prerequisite for using the OpenAI models with the agents.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/k8s_agent.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%env OPENAI_API_KEY=key-here\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: This snippet shows how to set the OPENAI_API_KEY environment variable, which is likely required for the Kagent application to interact with the OpenAI API.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/DEVELOPMENT.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=your-openai-api-key\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Python Version\nDESCRIPTION: This command installs Python version 3.12 using the uv package manager. This ensures the project uses a specific Python version for compatibility and consistency.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv python install 3.12\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Dependencies\nDESCRIPTION: This command synchronizes the project dependencies using the uv package manager, including all extras specified in the project configuration. It ensures all required packages are installed.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --all-extras\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in IPython\nDESCRIPTION: This IPython magic command sets the OPENAI_API_KEY environment variable to \"keyhere\". This environment variable is likely used to authenticate with the OpenAI API. This snippet is helpful in interactive development environments.\nSOURCE: https://github.com/kagent-dev/kagent/blob/main/python/notebooks/all_docs_agent.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%env OPENAI_API_KEY=keyhere\n```"
  }
]