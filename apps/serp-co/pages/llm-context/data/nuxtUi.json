[
  {
    "owner": "nuxt",
    "repo": "ui",
    "content": "TITLE: Integrating Custom Inputs with Nuxt UI Form using useFormField Composable\nDESCRIPTION: This snippet demonstrates how to use the useFormField composable to integrate custom inputs with a Form component in Nuxt UI. It destructures the composable to access inputId and emit functions for form events.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-form-field.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { inputId, emitFormBlur, emitFormInput, emitFormChange } = useFormField()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Mode Toggle Button in Vue\nDESCRIPTION: This code demonstrates how to create a button that toggles between light and dark modes using the useColorMode composable. It includes a computed property for tracking the dark mode state and a UI button with dynamic icon based on the current theme.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/6.color-mode/1.nuxt.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst colorMode = useColorMode()\n\nconst isDark = computed({\n  get() {\n    return colorMode.value === 'dark'\n  },\n  set(_isDark) {\n    colorMode.preference = _isDark ? 'dark' : 'light'\n  }\n})\n</script>\n\n<template>\n  <ClientOnly v-if=\"!colorMode?.forced\">\n    <UButton\n      :icon=\"isDark ? 'i-lucide-moon' : 'i-lucide-sun'\"\n      color=\"neutral\"\n      variant=\"ghost\"\n      @click=\"isDark = !isDark\"\n    />\n\n    <template #fallback>\n      <div class=\"size-8\" />\n    </template>\n  </ClientOnly>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Example in TypeScript\nDESCRIPTION: A sample TypeScript schema definition for form validation using object notation. This demonstrates how nested validation rules are defined that correspond to FormField components with dot notation names.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n{ user: z.object({ email: z.string() }) }\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI Package with yarn\nDESCRIPTION: This command installs the @nuxt/ui package using the yarn package manager. @nuxt/ui provides pre-built UI components and utilities for Vue applications.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @nuxt/ui\n```\n\n----------------------------------------\n\nTITLE: Configure Color Aliases in Vue with Nuxt UI\nDESCRIPTION: This TypeScript snippet demonstrates how to configure color aliases in a Vue application using Vite.  It configures the Nuxt UI plugin to set the `primary` color to 'blue' and the `neutral` color to 'zinc'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui({\n      ui: {\n        colors: {\n          primary: 'blue',\n          neutral: 'zinc'\n        }\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI Package with pnpm\nDESCRIPTION: This command installs the @nuxt/ui package using the pnpm package manager.  @nuxt/ui provides pre-built UI components and utilities for Vue applications.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @nuxt/ui\n```\n\n----------------------------------------\n\nTITLE: Table with Column Sorting in Vue\nDESCRIPTION: Demonstrates how to implement column sorting in the Table component using TanStack Table Sorting APIs.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n{\n  accessorKey: 'amount',\n  header: ({ column }) => h(UButton, {\n    icon: column.getIsSorted() === 'desc' ? 'i-heroicons-bars-arrow-down-20-solid' : 'i-heroicons-bars-arrow-up-20-solid',\n    color: column.getIsSorted() ? 'primary' : 'gray',\n    variant: 'ghost',\n    label: 'Amount',\n    onClick: column.getToggleSortingHandler()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Fuse Search in CommandPalette (TypeScript)\nDESCRIPTION: Example of customizing the Fuse.js search options in the CommandPalette component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  fuseOptions: {\n    ignoreLocation: true,\n    threshold: 0.1,\n    keys: ['label', 'suffix']\n  },\n  resultLimit: 12,\n  matchAllWhenSearchEmpty: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NavigationMenu with Arrow in Vue\nDESCRIPTION: This snippet demonstrates how to use the 'arrow' prop to display an arrow on the NavigationMenu content when items have children. It includes a complex configuration of menu items with nested structures.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\ncollapse: true\nignore:\n  - items\n  - arrow\n  - class\nexternal:\n  - items\nexternalTypes:\n  - NavigationMenuItem[]\nprops:\n  arrow: true\n  items:\n    - label: Guide\n      icon: i-lucide-book-open\n      to: /getting-started\n      children:\n        - label: Introduction\n          description: Fully styled and customizable components for Nuxt.\n          icon: i-lucide-house\n        - label: Installation\n          description: Learn how to install and configure Nuxt UI in your application.\n          icon: i-lucide-cloud-download\n        - label: 'Icons'\n          icon: 'i-lucide-smile'\n          description: 'You have nothing to do, @nuxt/icon will handle it automatically.'\n        - label: 'Colors'\n          icon: 'i-lucide-swatch-book'\n          description: 'Choose a primary and a neutral color from your Tailwind CSS theme.'\n        - label: 'Theme'\n          icon: 'i-lucide-cog'\n          description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'\n    - label: Composables\n      icon: i-lucide-database\n      to: /composables\n      children:\n        - label: defineShortcuts\n          icon: i-lucide-file-text\n          description: Define shortcuts for your application.\n          to: /composables/define-shortcuts\n        - label: useOverlay\n          icon: i-lucide-file-text\n          description: Display a modal/slideover within your application.\n          to: /composables/use-overlay\n        - label: useToast\n          icon: i-lucide-file-text\n          description: Display a toast within your application.\n          to: /composables/use-toast\n    - label: Components\n      icon: i-lucide-box\n      to: /components\n      active: true\n      children:\n        - label: Link\n          icon: i-lucide-file-text\n          description: Use NuxtLink with superpowers.\n          to: /components/link\n        - label: Modal\n          icon: i-lucide-file-text\n          description: Display a modal within your application.\n          to: /components/modal\n        - label: NavigationMenu\n          icon: i-lucide-file-text\n          description: Display a list of links.\n          to: /components/navigation-menu\n        - label: Pagination\n          icon: i-lucide-file-text\n          description: Display a list of pages.\n          to: /components/pagination\n        - label: Popover\n          icon: i-lucide-file-text\n          description: Display a non-modal dialog that floats around a trigger element.\n          to: /components/popover\n        - label: Progress\n          icon: i-lucide-file-text\n          description: Show a horizontal bar to indicate task progression.\n          to: /components/progress\n  class: 'w-full justify-center'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Component Instance with useTemplateRef in Vue\nDESCRIPTION: This snippet demonstrates how to access the typed Form component instance using the useTemplateRef helper from Vue. This gives access to form methods such as submit(), validate(), clear(), and others.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst form = useTemplateRef('form')\n</script>\n\n<template>\n  <UForm ref=\"form\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Carousel Component Instance with useTemplateRef\nDESCRIPTION: This snippet demonstrates how to access the typed component instance of the Carousel using Vue's useTemplateRef function. This gives access to the emblaRef and emblaApi properties, allowing programmatic control of the carousel.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/carousel.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst carousel = useTemplateRef('carousel')\n</script>\n\n<template>\n  <UCarousel ref=\"carousel\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Textarea v-model Usage (Vue)\nDESCRIPTION: Demonstrates the basic usage of the Textarea component with the `v-model` directive for two-way data binding. The `modelValue` prop controls the value of the Textarea.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n---\nignore:\n  - modelValue\nexternal:\n  - modelValue\nprops:\n  modelValue: ''\n---\n\n```\n\n----------------------------------------\n\nTITLE: Basic SelectMenu Implementation with String Items\nDESCRIPTION: Demonstrates how to implement a basic SelectMenu component with an array of string items. The component uses v-model to control its value.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Required Checkbox with Label in Vue/Nuxt\nDESCRIPTION: This snippet demonstrates adding an asterisk to a checkbox label when using the `required` property. When the `required` prop is present, the checkbox is considered mandatory, and the asterisk visually indicates this requirement to the user.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - label\nprops:\n  required: true\n  label: Check me\n---\n```\n\n----------------------------------------\n\nTITLE: Checkbox Usage with v-model in Vue/Nuxt\nDESCRIPTION: This snippet demonstrates how to use the `v-model` directive to control the checked state of the Checkbox component.  It relies on the `modelValue` prop to bind the checkbox state. The `external` property indicates that `modelValue` is expected from outside.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - modelValue\nexternal:\n  - modelValue\nprops:\n  modelValue: true\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Usage with v-model in Vue\nDESCRIPTION: Demonstrates how to use the v-model directive to control the checked state of the Switch component. The modelValue prop is set to true to show the component in its checked state.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch v-model=\"modelValue\" />\n</template>\n\n<script setup>\n  const modelValue = ref(true)\n</script>\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Object Items - Vue\nDESCRIPTION: Illustrates using the RadioGroup component with an array of objects as items. Each object has `label`, `description`, and `value` properties. The `v-model` or `default-value` should reference the `value` property. The initial value is set to 'system'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  modelValue: 'system'\n  items:\n    - label: 'System'\n      description: 'This is the first option.'\n      value: 'system'\n    - label: 'Light'\n      description: 'This is the second option.'\n      value: 'light'\n    - label: 'Dark'\n      description: 'This is the third option.'\n      value: 'dark'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue I18n Plugin in main.ts\nDESCRIPTION: This snippet demonstrates how to set up the Vue I18n plugin in the main.ts file of a Vue application. It creates an i18n instance with English and German locales and integrates it with the Vue application.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createRouter, createWebHistory } from 'vue-router'\nimport { createI18n } from 'vue-i18n'\nimport ui from '@nuxt/ui/vue-plugin'\nimport App from './App.vue'\n\nconst app = createApp(App)\n\nconst router = createRouter({\n  routes: [],\n  history: createWebHistory()\n})\n\nconst i18n = createI18n({\n  legacy: false,\n  locale: 'en',\n  availableLocales: ['en', 'de'],\n  messages: {\n    en: {\n      // ...\n    },\n    de: {\n      // ...\n    }\n  }\n})\n\napp.use(router)\napp.use(i18n)\napp.use(ui)\n\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt UI Module in nuxt.config.ts\nDESCRIPTION: Adding the Nuxt UI module to the Nuxt configuration file. This is required to enable the module in a Nuxt project.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui']\n})\n```\n\n----------------------------------------\n\nTITLE: Use Nuxt UI Vue Plugin in main.ts\nDESCRIPTION: This code snippet integrates the Nuxt UI Vue plugin into a Vue application's `main.ts` file. It imports necessary modules like `createApp`, `createRouter`, `createWebHistory`, the `ui` plugin from `@nuxt/ui/vue-plugin`, and the main `App` component. It then creates a Vue app instance, configures a router, uses both the router and the UI plugin, and finally mounts the app to the element with the ID 'app'.  This makes Nuxt UI components and styling available throughout the Vue application.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createRouter, createWebHistory } from 'vue-router'\nimport ui from '@nuxt/ui/vue-plugin'\nimport App from './App.vue'\n\nconst app = createApp(App)\n\nconst router = createRouter({\n  routes: [],\n  history: createWebHistory()\n})\n\napp.use(router)\napp.use(ui)\n\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Theme Configuration\nDESCRIPTION: This CSS snippet demonstrates how to configure the Tailwind CSS theme using the `@theme` directive. It sets custom font, breakpoint, and color variables for the application.  It is intended to be placed in the `app/assets/css/main.css` file.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n\n@theme static {\n  --font-sans: 'Public Sans', sans-serif;\n\n  --breakpoint-3xl: 1920px;\n\n  --color-green-50: #EFFDF5;\n  --color-green-100: #D9FBE8;\n  --color-green-200: #B3F5D1;\n  --color-green-300: #75EDAE;\n  --color-green-400: #00DC82;\n  --color-green-500: #00C16A;\n  --color-green-600: #00A155;\n  --color-green-700: #007F45;\n  --color-green-800: #016538;\n  --color-green-900: #0A5331;\n  --color-green-950: #052E16;\n}\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Multiple Selection\nDESCRIPTION: Shows how to implement a SelectMenu that allows multiple selections using the multiple prop. The selected items will be displayed separated by commas in the trigger.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  multiple\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Textarea Autoresize Feature (Vue)\nDESCRIPTION: Explains how to enable the autoresize feature of the Textarea component using the `autoresize` prop. This allows the Textarea height to adjust automatically based on the content. The `modelValue` contains the initial text, and `autoresize` enables dynamic height adjustment.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_3\n\nLANGUAGE: Vue\nCODE:\n```\n---\nignore:\n  - modelValue\nexternal:\n  - modelValue\nprops:\n  modelValue: 'This is a long text that will autoresize the height of the Textarea.'\n  autoresize: true\n---\n\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation with v-model\nDESCRIPTION: Demonstrates basic usage of the Slider component with v-model directive for value binding\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  modelValue: 50\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with String Items - Vue\nDESCRIPTION: Demonstrates using the RadioGroup component with a simple array of strings as items.  It uses the `v-model` directive to bind the selected value to the `modelValue` prop or the `default-value` prop to set initial value. This example shows setting the initial value to 'System'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  modelValue: 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection InputMenu in Vue\nDESCRIPTION: Demonstrates how to create an InputMenu that allows multiple selections. The selected items are displayed as badges within the input field.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<InputMenu\n  v-model=\"modelValue\"\n  :multiple=\"true\"\n  :items=\"['Backlog', 'Todo', 'In Progress', 'Done']\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Shortcuts in Vue Context Menu\nDESCRIPTION: Example of implementing keyboard shortcuts in a Vue context menu component using defineShortcuts and extractShortcuts utilities. Shows how to define menu items with keyboard shortcuts and their corresponding actions.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/context-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst items = [\n  [{\n    label: 'Show Sidebar',\n    kbds: ['meta', 'S'],\n    onSelect() {\n      console.log('Show Sidebar clicked')\n    }\n  }, {\n    label: 'Show Toolbar',\n    kbds: ['shift', 'meta', 'D'],\n    onSelect() {\n      console.log('Show Toolbar clicked')\n    }\n  }, {\n    label: 'Collapse Pinned Tabs',\n    disabled: true\n  }], [{\n    label: 'Refresh the Page'\n  }, {\n    label: 'Clear Cookies and Refresh'\n  }, {\n    label: 'Clear Cache and Refresh'\n  }, {\n    type: 'separator' as const\n  }, {\n    label: 'Developer',\n    children: [[{\n      label: 'View Source',\n      kbds: ['option', 'meta', 'U'],\n      onSelect() {\n        console.log('View Source clicked')\n      }\n    }, {\n      label: 'Developer Tools',\n      kbds: ['option', 'meta', 'I'],\n      onSelect() {\n        console.log('Developer Tools clicked')\n      }\n    }], [{\n      label: 'Inspect Elements',\n      kbds: ['option', 'meta', 'C'],\n      onSelect() {\n        console.log('Inspect Elements clicked')\n      }\n    }], [{\n      label: 'JavaScript Console',\n      kbds: ['option', 'meta', 'J'],\n      onSelect() {\n        console.log('JavaScript Console clicked')\n      }\n    }]]\n  }]\n]\n\ndefineShortcuts(extractShortcuts(items))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Component with String Items in Vue\nDESCRIPTION: Example of using the Select component with a basic array of string items. The component uses v-model for binding the selected value.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Backlog'\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Defining CSS variables for dark mode colors in Nuxt UI\nDESCRIPTION: This code snippet defines CSS variables for primary, secondary, success, info, warning, and error colors in dark mode using the Nuxt UI framework. It sets the default shade for each color to 400 within the `.dark` class.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.dark {\n  --ui-primary: var(--ui-color-primary-400);\n  --ui-secondary: var(--ui-color-secondary-400);\n  --ui-success: var(--ui-color-success-400);\n  --ui-info: var(--ui-color-info-400);\n  --ui-warning: var(--ui-color-warning-400);\n  --ui-error: var(--ui-color-error-400);\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Label in Vue/Nuxt\nDESCRIPTION: This snippet demonstrates how to set the label for the Checkbox using the `label` prop. The label provides a textual description of the checkbox's purpose. The text provided in the `label` property will be rendered next to the checkbox.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  label: Check me\n---\n```\n\n----------------------------------------\n\nTITLE: Modal Basic Usage with Button and Placeholder - Vue\nDESCRIPTION: Demonstrates basic usage of the Modal component with a button to open it and a placeholder component in the content slot. This snippet shows how to define content within the modal.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n\n#content\n:placeholder{class=\"h-48 m-4\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Keyboard Shortcuts Implementation\nDESCRIPTION: Example showing multiple shortcut definitions including help modal, command palette, and dashboard navigation.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/define-shortcuts.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefineShortcuts({\n  '?': () => openHelpModal(),\n  'meta_k': () => openCommandPalette(),\n  'g-d': () => navigateToDashboard()\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Nuxt App with UApp Component\nDESCRIPTION: Using the UApp component to wrap a Nuxt application. This component is required for Toast, Tooltip components and Programmatic Overlays to work properly.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UApp>\n    <NuxtPage />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Legend - Vue\nDESCRIPTION: Demonstrates how to add a legend to the RadioGroup using the `legend` prop. This provides a descriptive title for the group of radio buttons. The initial value is set to 'System'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  legend: 'Theme'\n  defaultValue: 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n```\n\n----------------------------------------\n\nTITLE: Form Field Usage in Vue Templates\nDESCRIPTION: Examples of how to use the FormField component within Vue templates, demonstrating both standard field naming and nested object field naming using dot notation.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<FormField name=\"email\">\n```\n\nLANGUAGE: vue\nCODE:\n```\n<FormField name=\"user.email\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Mode Toggle Button in Vue\nDESCRIPTION: This snippet demonstrates how to create a button component that toggles between light and dark modes using the useColorMode composable from VueUse.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/6.color-mode/2.vue.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useColorMode } from '@vueuse/core'\n\nconst mode = useColorMode()\n</script>\n\n<template>\n  <UButton\n    :icon=\"mode === 'dark' ? 'i-lucide-moon' : 'i-lucide-sun'\"\n    color=\"neutral\"\n    variant=\"ghost\"\n    @click=\"mode = mode === 'dark' ? 'light' : 'dark'\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configure Color Aliases in Nuxt\nDESCRIPTION: This TypeScript snippet demonstrates how to configure color aliases at runtime in a Nuxt application using the `app.config.ts` file.  It sets the `primary` color to 'blue' and the `neutral` color to 'zinc'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineAppConfig({\n  ui: {\n    colors: {\n      primary: 'blue',\n      neutral: 'zinc'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing a Nuxt UI Vue Starter Project\nDESCRIPTION: This command uses npx and nuxi to initialize a new project based on the nuxt-ui-vue-starter template from GitHub. Replace `<my-app>` with the desired name for your project directory. This sets up a new Vue project with Nuxt UI pre-configured.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi init -t github:nuxtlabs/nuxt-ui-vue-starter <my-app>\n```\n\n----------------------------------------\n\nTITLE: Table with Custom Columns in Vue\nDESCRIPTION: Shows how to define custom columns for the Table component using the columns prop and the Vue h function.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst columns = [\n  {\n    key: 'id',\n    label: 'Order',\n    sortable: true\n  },\n  {\n    key: 'date',\n    label: 'Date',\n    sortable: true\n  },\n  {\n    key: 'status',\n    label: 'Status',\n    sortable: true\n  },\n  {\n    key: 'customer',\n    label: 'Customer',\n    sortable: true\n  },\n  {\n    key: 'amount',\n    label: 'Amount',\n    sortable: true\n  },\n  {\n    key: 'actions',\n    label: 'Actions',\n    sortable: false\n  }\n]\n</script>\n\n<template>\n  <Table :columns=\"columns\" :data=\"data\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Table Usage in Vue\nDESCRIPTION: Demonstrates the basic usage of the Table component with a data prop containing an array of objects.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<Table :data=\"data\" class=\"flex-1\" />\n```\n\n----------------------------------------\n\nTITLE: PinInput with Mask for Password Input\nDESCRIPTION: Configures the PinInput to mask the entered values, useful for PIN codes and passwords.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UPinInput :mask=\"true\" :default-value=\"defaultValue\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Implementation with Total Items\nDESCRIPTION: Shows how to implement pagination by setting the current page and total number of items. Uses v-model:page directive to control current page and sets the total to 100 items.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<Pagination v-model:page=\"page\" :total=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Defining AccordionItem Type in TypeScript\nDESCRIPTION: TypeScript type definition for the properties of an Accordion item, including label, icon, content, and other configuration options.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/accordion.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlabel?: string\nicon?: string\ntrailingIcon?: string\ncontent?: string\nvalue?: string\ndisabled?: boolean\nslot?: string\n```\n\n----------------------------------------\n\nTITLE: Rendering FormField with Label in Vue\nDESCRIPTION: Demonstrates how to use the FormField component with a label and an input field. The label is set using the 'label' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<UInput placeholder=\"Enter your email\" />\n```\n\n----------------------------------------\n\nTITLE: Import Tailwind CSS and Nuxt UI in CSS\nDESCRIPTION: This code shows how to import both Tailwind CSS and Nuxt UI's styles into your main CSS file. This ensures that both Tailwind's utility classes and Nuxt UI's component styling are applied to your application.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n```\n\n----------------------------------------\n\nTITLE: Popover Basic Usage - Vue\nDESCRIPTION: Demonstrates the basic usage of the Popover component with a button in the default slot and placeholder content in the content slot.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/popover.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"size-48 m-4 inline-flex\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring InputMenu with Typed Items\nDESCRIPTION: Demonstrates how to configure InputMenu with labeled sections and separators using the type property. Shows structuring of items with labels and separators between different categories.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  modelValue: 'Apple',\n  items: [\n    { type: 'label', label: 'Fruits' },\n    'Apple',\n    'Banana',\n    'Blueberry',\n    'Grapes',\n    'Pineapple',\n    { type: 'separator' },\n    { type: 'label', label: 'Vegetables' },\n    'Aubergine',\n    'Broccoli',\n    'Carrot',\n    'Courgette',\n    'Leek'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Arrow in Select Component\nDESCRIPTION: Shows how to display an arrow indicator on the Select component using the arrow prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Backlog'\narrow: true\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Value Key Binding\nDESCRIPTION: Shows how to bind a single property of an object rather than the whole object using the value-key prop. This allows selecting items by a specific property like 'id'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  value-key=\"id\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS theme configuration for color aliases\nDESCRIPTION: This code snippet shows how the Tailwind CSS theme is generated for each color alias in Nuxt UI, defining multiple shades (50-950) for each color based on the corresponding UI color variables.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n@theme default {\n  --color-primary: var(--ui-primary);\n  --color-primary-50: var(--ui-color-primary-50);\n  --color-primary-100: var(--ui-color-primary-100);\n  --color-primary-200: var(--ui-color-primary-200);\n  --color-primary-300: var(--ui-color-primary-300);\n  --color-primary-400: var(--ui-color-primary-400);\n  --color-primary-500: var(--ui-color-primary-500);\n  --color-primary-600: var(--ui-color-primary-600);\n  --color-primary-700: var(--ui-color-primary-700);\n  --color-primary-800: var(--ui-color-primary-800);\n  --color-primary-900: var(--ui-color-primary-900);\n  --color-primary-950: var(--ui-color-primary-950);\n  --color-secondary: var(--ui-secondary);\n  --color-secondary-50: var(--ui-color-secondary-50);\n  --color-secondary-100: var(--ui-color-secondary-100);\n  --color-secondary-200: var(--ui-color-secondary-200);\n  --color-secondary-300: var(--ui-color-secondary-300);\n  --color-secondary-400: var(--ui-color-secondary-400);\n  --color-secondary-500: var(--ui-color-secondary-500);\n  --color-secondary-600: var(--ui-color-secondary-600);\n  --color-secondary-700: var(--ui-color-secondary-700);\n  --color-secondary-800: var(--ui-color-secondary-800);\n  --color-secondary-900: var(--ui-color-secondary-900);\n  --color-secondary-950: var(--ui-color-secondary-950);\n  --color-success: var(--ui-success);\n  --color-success-50: var(--ui-color-success-50);\n  --color-success-100: var(--ui-color-success-100);\n  --color-success-200: var(--ui-color-success-200);\n  --color-success-300: var(--ui-color-success-300);\n  --color-success-400: var(--ui-color-success-400);\n  --color-success-500: var(--ui-color-success-500);\n  --color-success-600: var(--ui-color-success-600);\n  --color-success-700: var(--ui-color-success-700);\n  --color-success-800: var(--ui-color-success-800);\n  --color-success-900: var(--ui-color-success-900);\n  --color-success-950: var(--ui-color-success-950);\n  --color-info: var(--ui-info);\n  --color-info-50: var(--ui-color-info-50);\n  --color-info-100: var(--ui-color-info-100);\n  --color-info-200: var(--ui-color-info-200);\n  --color-info-300: var(--ui-color-info-300);\n  --color-info-400: var(--ui-color-info-400);\n  --color-info-500: var(--ui-color-info-500);\n  --color-info-600: var(--ui-color-info-600);\n  --color-info-700: var(--ui-color-info-700);\n  --color-info-800: var(--ui-color-info-800);\n  --color-info-900: var(--ui-color-info-900);\n  --color-info-950: var(--ui-color-info-950);\n  --color-warning: var(--ui-warning);\n  --color-warning-50: var(--ui-color-warning-50);\n  --color-warning-100: var(--ui-color-warning-100);\n  --color-warning-200: var(--ui-color-warning-200);\n  --color-warning-300: var(--ui-color-warning-300);\n  --color-warning-400: var(--ui-color-warning-400);\n  --color-warning-500: var(--ui-color-warning-500);\n  --color-warning-600: var(--ui-color-warning-600);\n  --color-warning-700: var(--ui-color-warning-700);\n  --color-warning-800: var(--ui-color-warning-800);\n  --color-warning-900: var(--ui-color-warning-900);\n  --color-warning-950: var(--ui-color-warning-950);\n  --color-error: var(--ui-error);\n  --color-error-50: var(--ui-color-error-50);\n  --color-error-100: var(--ui-color-error-100);\n  --color-error-200: var(--ui-color-error-200);\n  --color-error-300: var(--ui-color-error-300);\n  --color-error-400: var(--ui-color-error-400);\n  --color-error-500: var(--ui-color-error-500);\n  --color-error-600: var(--ui-color-error-600);\n  --color-error-700: var(--ui-color-error-700);\n  --color-error-800: var(--ui-color-error-800);\n  --color-error-900: var(--ui-color-error-900);\n  --color-error-950: var(--ui-color-error-950);\n  --color-neutral-50: var(--ui-color-neutral-50);\n  --color-neutral-100: var(--ui-color-neutral-100);\n  --color-neutral-200: var(--ui-color-neutral-200);\n  --color-neutral-300: var(--ui-color-neutral-300);\n  --color-neutral-400: var(--ui-color-neutral-400);\n  --color-neutral-500: var(--ui-color-neutral-500);\n  --color-neutral-600: var(--ui-color-neutral-600);\n  --color-neutral-700: var(--ui-color-neutral-700);\n  --color-neutral-800: var(--ui-color-neutral-800);\n  --color-neutral-900: var(--ui-color-neutral-900);\n  --color-neutral-950: var(--ui-color-neutral-950);\n}\n```\n\n----------------------------------------\n\nTITLE: Define Avatar Component Slots and Variants in TypeScript\nDESCRIPTION: This TypeScript code defines the slots and variants for the Avatar component in Nuxt UI. It specifies the default Tailwind CSS classes for the root and image slots. The `variants` object allows the size of the avatar to be changed based on the `size` prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  slots: {\n    root: 'inline-flex items-center justify-center shrink-0 select-none overflow-hidden rounded-full align-middle bg-elevated',\n    image: 'h-full w-full rounded-[inherit] object-cover'\n  },\n  variants: {\n    size: {\n      sm: {\n        root: 'size-7 text-sm'\n      },\n      md: {\n        root: 'size-8 text-base'\n      },\n      lg: {\n        root: 'size-9 text-lg'\n      }\n    }\n  },\n  defaultVariants: {\n    size: 'md'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering FormField with Error Message in Vue\nDESCRIPTION: Illustrates the use of the 'error' prop to display an error message below the form control in the FormField component. This takes precedence over the 'help' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<UInput placeholder=\"Enter your email\" class=\"w-full\" />\n```\n\n----------------------------------------\n\nTITLE: SCSS: Tailwind Theme Generation\nDESCRIPTION: This SCSS snippet demonstrates how the `@theme` is generated for each design token in Tailwind CSS. It maps Nuxt UI's CSS variables (e.g., `--ui-text-dimmed`) to Tailwind CSS's theme variables (e.g., `--text-color-dimmed`). This ensures that Tailwind CSS utilities can use the defined color values.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_19\n\nLANGUAGE: scss\nCODE:\n```\n@theme default {\n  --text-color-dimmed: var(--ui-text-dimmed);\n  --text-color-muted: var(--ui-text-muted);\n  --text-color-toned: var(--ui-text-toned);\n  --text-color-default: var(--ui-text);\n  --text-color-highlighted: var(--ui-text-highlighted);\n  --text-color-inverted: var(--ui-text-inverted);\n  --background-color-default: var(--ui-bg);\n  --background-color-muted: var(--ui-bg-muted);\n  --background-color-elevated: var(--ui-bg-elevated);\n  --background-color-accented: var(--ui-bg-accented);\n  --background-color-inverted: var(--ui-bg-inverted);\n  --background-color-border: var(--ui-border);\n  --border-color-default: var(--ui-border);\n  --border-color-muted: var(--ui-border-muted);\n  --border-color-accented: var(--ui-border-accented);\n  --border-color-inverted: var(--ui-border-inverted);\n  --border-color-bg: var(--ui-bg);\n  --ring-color-default: var(--ui-border);\n  --ring-color-muted: var(--ui-border-muted);\n  --ring-color-accented: var(--ui-border-accented);\n  --ring-color-inverted: var(--ui-border-inverted);\n  --ring-color-bg: var(--ui-bg);\n  --divide-color-default: var(--ui-border);\n  --divide-color-muted: var(--ui-border-muted);\n  --divide-color-accented: var(--ui-border-accented);\n  --divide-color-inverted: var(--ui-border-inverted);\n  --divide-color-bg: var(--ui-bg);\n  --outline-color-default: var(--ui-border);\n  --outline-color-inverted: var(--ui-border-inverted);\n  --stroke-color-default: var(--ui-border);\n  --stroke-color-inverted: var(--ui-border-inverted);\n  --fill-color-default: var(--ui-border);\n  --fill-color-inverted: var(--ui-border-inverted);\n}\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Avatar Display\nDESCRIPTION: Demonstrates how to display an Avatar inside the SelectMenu using the avatar prop, which adds a visual representation alongside the selected value.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  :avatar=\"{\n    src: 'https://github.com/nuxt.png'\n  }\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Input with Placeholder in Vue\nDESCRIPTION: Demonstrates setting a placeholder text for the Input component using the 'placeholder' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<UInput placeholder=\"Search...\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Card Component in Vue with Nuxt UI\nDESCRIPTION: Example of using the Card component with different sections (header, default content, and footer). Each section uses a Placeholder component to simulate content with specific heights.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/card.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n#header\n:placeholder{class=\"h-8\"}\n\n#default\n:placeholder{class=\"h-32\"}\n\n#footer\n:placeholder{class=\"h-8\"}\n```\n\n----------------------------------------\n\nTITLE: Wrap App with UApp Component\nDESCRIPTION: This code snippet demonstrates wrapping the main application content within the `<UApp>` component provided by Nuxt UI. The `<RouterView />` component displays the current route's content. The UApp component provides global configurations and is required for components such as Toast and Tooltip to work correctly, as well as Programmatic Overlays.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UApp>\n    <RouterView />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Component with Object Items in Vue\nDESCRIPTION: Example of using the Select component with an array of objects that have label and value properties. This approach allows for more complex item representation.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'backlog'\nitems:\n  - label: 'Backlog'\n    value: 'backlog'\n  - label: 'Todo'\n    value: 'todo'\n  - label: 'In Progress'\n    value: 'in_progress'\n  - label: 'Done'\n    value: 'done'\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Using Tabs Component with Item Properties in TypeScript\nDESCRIPTION: Defines the TypeScript type properties available for configuring Tabs items, including label, icon, avatar, content, value, disabled, and slot options.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tabs.md#2025-04-21_snippet_0\n\nLANGUAGE: ts-type\nCODE:\n```\nlabel?: string\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nicon?: string\n```\n\nLANGUAGE: ts-type\nCODE:\n```\navatar?: AvatarProps\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ncontent?: string\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nvalue?: string | number\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ndisabled?: boolean\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nslot?: string\n```\n\n----------------------------------------\n\nTITLE: Modal without Overlay - Vue\nDESCRIPTION: Illustrates how to disable the overlay of the Modal component using the `overlay` prop. A button click opens the modal and a placeholder is used for its body.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n\n#body\n:placeholder{class=\"h-48\"}\n```\n\n----------------------------------------\n\nTITLE: Using Text Fallback in Avatar Component in Vue\nDESCRIPTION: Demonstrates how to set a text fallback for the Avatar component using the text prop. This approach displays the provided text when the image fails to load.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  text: '+1'\n  size: md\n```\n\n----------------------------------------\n\nTITLE: Accessing Stepper Component Instance with useTemplateRef in Vue\nDESCRIPTION: This snippet demonstrates how to access the typed Stepper component instance using the useTemplateRef helper from Vue.js. This gives access to methods like next(), prev(), and reactive properties like hasNext and hasPrev.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/stepper.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst stepper = useTemplateRef('stepper')\n</script>\n\n<template>\n  <UStepper ref=\"stepper\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Table with Column Pinning in Vue\nDESCRIPTION: Shows how to implement column pinning in the Table component using TanStack Table Pinning APIs.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#2025-04-23_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n{\n  accessorKey: 'id',\n  header: ({ column }) => h('div', { class: 'flex items-center gap-2' }, [\n    h(UTooltip, { text: column.getIsPinned() ? 'Unpin column' : 'Pin column' }, {\n      default: () => h(UButton, {\n        icon: column.getIsPinned() ? 'i-heroicons-lock-closed-20-solid' : 'i-heroicons-lock-open-20-solid',\n        color: column.getIsPinned() ? 'primary' : 'gray',\n        variant: 'ghost',\n        size: 'xs',\n        onClick: () => column.pin(column.getIsPinned() ? false : 'left')\n      })\n    }),\n    h('span', 'Order')\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Input with Loading State in Vue\nDESCRIPTION: Shows how to display a loading state in the Input component using the 'loading' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<UInput :loading=\"true\" :trailing=\"false\" placeholder=\"Search...\" />\n```\n\n----------------------------------------\n\nTITLE: Slideover Non-Dismissible\nDESCRIPTION: Demonstrates how to prevent the Slideover from being closed by clicking outside or pressing escape using the `dismissible` prop. Setting `dismissible` to `false` achieves this. A button triggers the Slideover, and a placeholder occupies the body section.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"h-full\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Selected Item Icon in Select Component\nDESCRIPTION: Demonstrates how to customize the icon displayed for selected items in the dropdown using the selectedIcon prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Backlog'\nselectedIcon: 'i-lucide-flame'\nsize: md\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in CommandPalette\nDESCRIPTION: Example of using the multiple prop in the CommandPalette component to allow multiple selections. This also shows how to initialize the modelValue as an empty array for multiple selections.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  multiple: true\n  modelValue: []\n```\n\n----------------------------------------\n\nTITLE: Updating Modal Props in Vue\nDESCRIPTION: Example showing how to create a modal with initial props and update them later using the patch method.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-overlay.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst overlay = useOverlay()\n\nconst modal = overlay.create(MyModal, {\n  title: 'Welcome'\n})\n\nfunction openModal() {\n  modal.open()\n}\n\nfunction updateModalTitle() {\n  modal.patch({ title: 'Updated Title' })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Table with Row Selection in Vue\nDESCRIPTION: Demonstrates how to add row selection functionality to the Table component using TanStack Table Row Selection APIs.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n{\n  id: 'select',\n  header: ({ table }) => h(UCheckbox, {\n    checked: table.getIsAllRowsSelected(),\n    indeterminate: table.getIsSomeRowsSelected(),\n    onUpdate: (value) => table.toggleAllRowsSelected(!!value)\n  }),\n  cell: ({ row }) => h(UCheckbox, {\n    checked: row.getIsSelected(),\n    onUpdate: (value) => row.toggleSelected(!!value)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Textarea Size Configuration (Vue)\nDESCRIPTION: Shows how to adjust the size of the Textarea component using the `size` prop. Different size options are available to fit various layout needs. The `placeholder` prop sets the placeholder text.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_7\n\nLANGUAGE: Vue\nCODE:\n```\n---\nignore:\n  - placeholder\nprops:\n  size: xl\n  placeholder: 'Type something...'\n---\n\n```\n\n----------------------------------------\n\nTITLE: Basic Input Usage with v-model in Vue\nDESCRIPTION: Demonstrates how to use the v-model directive to control the value of the Input component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<UInput v-model=\"modelValue\" />\n```\n\n----------------------------------------\n\nTITLE: Modal with Customized Close Icon - Vue\nDESCRIPTION: Shows how to customize the close icon of the Modal component using the `closeIcon` prop. A button opens the modal, with a placeholder component in the body.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n\n#body\n:placeholder{class=\"h-48\"}\n```\n\n----------------------------------------\n\nTITLE: Textarea Color Configuration (Vue)\nDESCRIPTION: Illustrates how to change the ring color of the Textarea component when focused using the `color` prop. The `highlight` prop is used internally to indicate focus state, often triggered by validation errors. The `placeholder` prop sets the placeholder text.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_5\n\nLANGUAGE: Vue\nCODE:\n```\n---\nignore:\n  - placeholder\nprops:\n  color: neutral\n  highlight: true\n  placeholder: 'Type something...'\n---\n\n```\n\n----------------------------------------\n\nTITLE: Customizing CommandPalette Placeholder and Icon\nDESCRIPTION: Examples of customizing the placeholder text and icon for the CommandPalette component. This demonstrates the use of the placeholder and icon props.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  placeholder: 'Search an app...'\n  icon: 'i-lucide-box'\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useOverlay Composable in Vue\nDESCRIPTION: Basic example showing how to create and open a modal using the useOverlay composable.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-overlay.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst overlay = useOverlay()\n\nconst modal = overlay.create(MyModal)\n\nasync function openModal() {\n  modal.open()\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Grouped Items in Select Component\nDESCRIPTION: Demonstration of using arrays of arrays to create grouped items in the Select component, allowing for logical separation of options.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Apple'\nitems:\n  - - Apple\n    - Banana\n    - Blueberry\n    - Grapes\n    - Pineapple\n  - - Aubergine\n    - Broccoli\n    - Carrot\n    - Courgette\n    - Leek\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Customize Button Font Globally in Nuxt config\nDESCRIPTION: This TypeScript code shows how to customize the font weight of all buttons globally in a Nuxt application using the `app.config.ts` file. It overrides the default `base` slot of the button component to apply the `font-bold` class.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineAppConfig({\n  ui: {\n    button: {\n      slots: {\n        base: 'font-bold'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Add Nuxt UI Vite Plugin\nDESCRIPTION: This code snippet configures the Vite build tool to use the Nuxt UI plugin.  It imports the necessary modules from 'vite', '@vitejs/plugin-vue', and '@nuxt/ui/vite', and then adds the 'vue()' and 'ui()' plugins to the 'plugins' array within the 'defineConfig' object. This allows Nuxt UI components and functionality to be properly processed during the build process.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Placeholder Text\nDESCRIPTION: Demonstrates how to set a placeholder text for the SelectMenu when no item is selected, using the placeholder prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  placeholder=\"Select status\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Controlling Active Item in NavigationMenu\nDESCRIPTION: This example demonstrates how to control the active item in the NavigationMenu using the 'default-value' prop or the 'v-model' directive with the index of the item. It also mentions the use of 'defineShortcuts' for keyboard navigation.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n::component-example\n---\ncollapse: true\nname: 'navigation-menu-model-value-example'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Slideover Basic Usage - Slots Example\nDESCRIPTION: Demonstrates the basic usage of the Slideover component with default and content slots. It opens a Slideover with a button and displays a placeholder inside the content area.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"h-full m-4\" />\n```\n\n----------------------------------------\n\nTITLE: Changing Variant Style in Select Component\nDESCRIPTION: Example of using the variant prop to change the visual style of the Select component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Backlog'\ncolor: neutral\nvariant: subtle\nhighlight: false\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Vertical ButtonGroup Orientation in Vue\nDESCRIPTION: Demonstrates the use of the 'orientation' prop to change the button group orientation to vertical.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button-group.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<UButton color=\"neutral\" variant=\"subtle\" label=\"Submit\" />\n<UButton color=\"neutral\" variant=\"outline\" label=\"Cancel\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar Implementation in Nuxt UI\nDESCRIPTION: Basic implementation of a Progress component using v-model to control the value. This snippet shows a progress bar at 50% completion.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 50\n```\n\n----------------------------------------\n\nTITLE: Adding Toast Notification Example\nDESCRIPTION: Demonstrates how to add a new toast notification with title, description, and color properties.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-toast.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst toast = useToast()\n\nfunction showToast() {\n  toast.add({\n    title: 'Success',\n    description: 'Your action was completed successfully.',\n    color: 'success'\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Value Key in Select Component\nDESCRIPTION: Example showing how to use the valueKey prop to specify which property of the item objects should be used as the value in the selection.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'backlog'\nvalueKey: 'id'\nitems:\n  - label: 'Backlog'\n    id: 'backlog'\n  - label: 'Todo'\n    id: 'todo'\n  - label: 'In Progress'\n    id: 'in_progress'\n  - label: 'Done'\n    id: 'done'\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Render Container Component in Vue\nDESCRIPTION: This Vue code renders the Container component using the base style defined in the theme. It uses the `container` helper function to apply the classes to the root element. The `<slot>` element allows content to be inserted into the container.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_33\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div :class=\"container({ class: props.class })\">\n    <slot />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Opening Modal with Props in Vue\nDESCRIPTION: Example demonstrating how to open a modal with custom props using the overlay instance.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-overlay.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst overlay = useOverlay()\n\nconst modal = overlay.create(MyModalContent)\n\nfunction openModal() {\n  modal.open({\n    title: 'Welcome'\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup with Legend\nDESCRIPTION: Example of CheckboxGroup usage with a legend. The `legend` prop is used to set the legend of the CheckboxGroup, providing a clear label for the group of checkboxes.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nprettier: true\nignore:\n  - defaultValue\n  - items\nexternal:\n  - items\nexternalTypes:\n  - CheckboxGroupItem[]\nprops:\n  legend: 'Theme'\n  defaultValue:\n    - 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Textarea with Custom Loading Icon (Vue)\nDESCRIPTION: Explains how to customize the loading icon within the Textarea component using the `loadingIcon` prop when the `loading` prop is set to true. The default loading icon is `i-lucide-refresh-cw`. The `placeholder` and `rows` props also contribute to the Textarea's appearance.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_12\n\nLANGUAGE: Vue\nCODE:\n```\n---\nignore:\n  - placeholder\nprops:\n  loading: true\n  loadingIcon: 'i-lucide-repeat-2'\n  placeholder: 'Search...'\n  rows: 1\n---\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar Color in Nuxt UI\nDESCRIPTION: Changes the color of the progress bar using the color prop. This example uses a neutral color scheme instead of the default.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\ncolor: neutral\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup with Indicator\nDESCRIPTION: Example of CheckboxGroup usage with a specific indicator position. The `indicator` prop is used to change the position or hide the indicator. Defaults to `start`.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nprettier: true\nignore:\n  - defaultValue\n  - items\nexternal:\n  - items\nexternalTypes:\n  - CheckboxGroupItem[]\nitems:\n  indicator:\n    - start\n    - end\n    - hidden\n  variant:\n    - list\n    - card\nprops:\n  indicator: 'end'\n  variant: 'card'\n  defaultValue:\n    - 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Text in Select Component\nDESCRIPTION: Demonstrates how to set a placeholder text for the Select component when no item is selected.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\nplaceholder: 'Select status'\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: PinInput with Custom Color\nDESCRIPTION: Customizes the focus ring color of the PinInput component with the highlight flag enabled to show the focus state.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UPinInput color=\"neutral\" :highlight=\"true\" placeholder=\"○\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Controlling Select Open State in Vue\nDESCRIPTION: This example demonstrates how to control the open state of the Select component using the 'default-open' prop or the 'v-model:open' directive. It also shows how to toggle the Select using a keyboard shortcut.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n::component-example\n---\nname: 'select-open-example'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Modal Non-Dismissible - Vue\nDESCRIPTION: Shows how to prevent the Modal from being closed when clicking outside of it or pressing escape, using the `dismissible` prop.  A button opens the modal, and a placeholder is used for content.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n\n#body\n:placeholder{class=\"h-48\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Size for ColorPicker in Vue\nDESCRIPTION: Demonstrates how to set the size of the ColorPicker using the size prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ColorPicker size=\"xl\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running the Tailwind CSS Upgrade Tool\nDESCRIPTION: Command to run the official Tailwind CSS upgrade tool that automates much of the migration process from v3 to v4.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tailwindcss/upgrade\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Labeled Steps in Nuxt UI\nDESCRIPTION: Creates a progress bar with labeled steps using an array of strings as the max prop. The active step is displayed underneath the bar, and the maximum value is automatically set to the array length.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 3\nmax:\n  - 'Waiting...'\n  - 'Cloning...'\n  - 'Migrating...'\n  - 'Deploying...'\n  - 'Done!'\n```\n\n----------------------------------------\n\nTITLE: Modal with Title and Description - Vue\nDESCRIPTION: Shows how to add both a title and a description to the Modal component. A button triggers the modal and a placeholder is present for the body.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n\n#body\n:placeholder{class=\"h-48\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing DropdownMenu with Custom Items in Vue\nDESCRIPTION: This snippet demonstrates how to use the DropdownMenu component with custom items, including avatars, icons, and nested menus. It showcases various item properties and how to structure the items array.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/dropdown-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<UButton icon=\"i-lucide-menu\" color=\"neutral\" variant=\"outline\" />\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Color Customization - Vue\nDESCRIPTION: Shows how to change the color of the RadioGroup using the `color` prop. Available colors are based on your UI theme. The initial value is set to 'System'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  color: neutral\n  defaultValue: 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n```\n\n----------------------------------------\n\nTITLE: CSS: Customizing Neutral Colors (app/assets/css/main.css)\nDESCRIPTION: This CSS snippet shows how to customize the neutral color variables in the `app/assets/css/main.css` file. It imports Tailwind CSS and Nuxt UI (or Nuxt UI Pro) and then overrides the default values of `--ui-bg` and `--ui-text` for both light and dark modes.  It requires Tailwind CSS and Nuxt UI (or Nuxt UI Pro) to be installed.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n\n:root {\n  --ui-bg: var(--ui-color-neutral-50);\n  --ui-text: var(--ui-color-neutral-900);\n}\n\n.dark {\n  --ui-bg: var(--ui-color-neutral-950);\n  --ui-border: var(--ui-color-neutral-900);\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Size, Variant, Default Value and Label in Vue/Nuxt\nDESCRIPTION: This snippet demonstrates changing the size and variant of the Checkbox component. It uses props `size` to control the visual size of the checkbox and `variant` to control the visual style of the checkbox.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - label\n  - defaultValue\nprops:\n  size: xl\n  variant: list\n  defaultValue: true\n  label: Check me\n---\n```\n\n----------------------------------------\n\nTITLE: Textarea with Loading Indicator (Vue)\nDESCRIPTION: Demonstrates how to display a loading indicator inside the Textarea component using the `loading` prop. The `trailing` prop can be used to control whether the loading indicator appears on the trailing side. The `placeholder` and `rows` props configure the appearance of the Textarea.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_11\n\nLANGUAGE: Vue\nCODE:\n```\n---\nignore:\n  - placeholder\nprops:\n  loading: true\n  trailing: false\n  placeholder: 'Search...'\n  rows: 1\n---\n\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Size Prop in Vue\nDESCRIPTION: Shows how to use the 'size' prop to change the size of all buttons within the ButtonGroup.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button-group.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<UButton color=\"neutral\" variant=\"subtle\" label=\"Button\" />\n<UButton color=\"neutral\" variant=\"outline\" icon=\"i-lucide-chevron-down\" />\n```\n\n----------------------------------------\n\nTITLE: Using Continuous Preview Releases in package.json\nDESCRIPTION: How to modify package.json to use Nuxt UI continuous preview releases. This allows accessing the latest features and bug fixes without waiting for official releases.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n-   \"@nuxt/ui\": \"^3.0.0\",\n+   \"@nuxt/ui\": \"https://pkg.pr.new/@nuxt/ui@4c96909\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Table with Expandable Rows in Vue\nDESCRIPTION: Shows how to implement expandable rows in the Table component using TanStack Table Expanding APIs.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n{\n  id: 'expander',\n  header: () => null,\n  cell: ({ row }) => h(UButton, {\n    icon: row.getIsExpanded() ? 'i-heroicons-chevron-up-20-solid' : 'i-heroicons-chevron-down-20-solid',\n    color: 'gray',\n    variant: 'ghost',\n    onClick: row.getToggleExpandedHandler()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fonts in Nuxt UI CSS\nDESCRIPTION: CSS configuration for setting up fonts in a Nuxt UI application. Imports required dependencies and defines the sans-serif font family using Public Sans.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/5.fonts.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n\n@theme {\n  --font-sans: 'Public Sans', sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled RadioGroup - Vue\nDESCRIPTION: Demonstrates how to disable the entire RadioGroup using the `disabled` prop.  When disabled, no options can be selected. The initial value is set to 'System'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  disabled: true\n  defaultValue: 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n```\n\n----------------------------------------\n\nTITLE: Calendar with Default Value in Vue\nDESCRIPTION: Shows how to set an initial value for the Calendar component using the default-value prop when state control is not needed.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Calendar :default-value=\"defaultValue\" />\n</template>\n\n<script setup>\nconst defaultValue = [2022, 2, 6]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Default Value Slider Implementation\nDESCRIPTION: Shows how to set an initial value using the default-value prop when state control isn't needed\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  defaultValue: 50\n```\n\n----------------------------------------\n\nTITLE: Switch with Custom Icons in Vue\nDESCRIPTION: Shows how to customize the icons displayed when the Switch is in checked and unchecked states. The checkedIcon displays a check mark when on, and uncheckedIcon displays an X when off.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch\n    unchecked-icon=\"i-lucide-x\"\n    checked-icon=\"i-lucide-check\"\n    :default-value=\"true\"\n    label=\"Check me\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup with Custom Value Key\nDESCRIPTION: Example of CheckboxGroup usage with a custom value key. The `value-key` prop is used to specify which property of the item object should be used as the value. This is useful when the value property has a different name, such as `id` in this case.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nignore:\n  - modelValue\n  - items\n  - valueKey\nexternal:\n  - items\n  - modelValue\nexternalTypes:\n  - CheckboxGroupItem[]\n  - CheckboxGroupValue[]\nprops:\n  modelValue:\n    - 'light'\n  valueKey: 'id'\n  items:\n    - label: 'System'\n      description: 'This is the first option.'\n      id: 'system'\n    - label: 'Light'\n      description: 'This is the second option.'\n      id: 'light'\n    - label: 'Dark'\n      description: 'This is the third option.'\n      id: 'dark'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Using Item Types for Grouping in Select Component\nDESCRIPTION: Advanced example showing how to use the type property to create labels and separators within the items list for better organization.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Apple'\nitems:\n  - type: 'label'\n    label: 'Fruits'\n  - Apple\n  - Banana\n  - Blueberry\n  - Grapes\n  - Pineapple\n  - type: 'separator'\n  - type: 'label'\n    label: 'Vegetables'\n  - Aubergine\n  - Broccoli\n  - Carrot\n  - Courgette\n  - Leek\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Selection in Select Component\nDESCRIPTION: Shows how to enable multiple selection in the Select component by using the multiple prop. The v-model binds to an array of selected values.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue:\n  - Backlog\n  - Todo\nmultiple: true\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Using v-model with ColorPicker in Vue\nDESCRIPTION: Demonstrates how to use the v-model directive to control the value of the ColorPicker component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ColorPicker v-model=\"modelValue\" />\n</template>\n\n<script setup>\nconst modelValue = ref('#00C16A')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Popover Arrow Configuration - Vue\nDESCRIPTION: Illustrates how to display an arrow on the Popover using the `arrow` prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/popover.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"size-48 m-4 inline-flex\" />\n```\n\n----------------------------------------\n\nTITLE: Range Slider Implementation\nDESCRIPTION: Creates a range slider with multiple values using an array\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  modelValue: [25, 75]\n```\n\n----------------------------------------\n\nTITLE: Implementing Select with Chip in Vue\nDESCRIPTION: This example shows how to use the Select component with chips in the items. The '#leading' slot is used to display the selected chip.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n::component-example\n---\ncollapse: true\nname: 'select-items-chip-example'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Nuxt UI Collapsible Component with Unmount Prevention in Vue\nDESCRIPTION: Shows how to use the unmount-on-hide prop to prevent content from being unmounted when the Collapsible is collapsed.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/collapsible.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" trailing-icon=\"i-lucide-chevron-down\" block />\n\n#content\n<Placeholder class=\"h-48\" />\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Size Customization - Vue\nDESCRIPTION: Demonstrates how to change the size of the RadioGroup using the `size` prop and uses `variant` to apply list style.  Common sizes include 'xs', 'sm', 'md', 'lg', 'xl'. The initial value is set to 'System'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  size: 'xl'\n  variant: 'list'\n  defaultValue: 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n```\n\n----------------------------------------\n\nTITLE: Rendering FormField with Required Label in Vue\nDESCRIPTION: Shows how to use the FormField component with a required label. The 'required' prop adds an asterisk next to the label.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<UInput placeholder=\"Enter your email\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Throttle for ColorPicker in Vue\nDESCRIPTION: Shows how to set a throttle value for the ColorPicker using the throttle prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ColorPicker v-model=\"modelValue\" :throttle=\"100\" />\n</template>\n\n<script setup>\nconst modelValue = ref('#00C16A')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering FormField with Custom Size in Vue\nDESCRIPTION: Demonstrates how to use the 'size' prop to change the size of the FormField and its child form control.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<UInput placeholder=\"Enter your email\" class=\"w-full\" />\n```\n\n----------------------------------------\n\nTITLE: Table with Sticky Header in Vue\nDESCRIPTION: Shows how to create a Table with a sticky header using the sticky prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<Table\n  :sticky=\"true\"\n  :data=\"data\"\n  class=\"flex-1 max-h-[312px]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Pagination with Always Visible Edge Pages\nDESCRIPTION: Demonstrates enabling the show-edges prop to always display the first and last pages with ellipsis indicators, useful for better navigation in large page sets.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<Pagination v-model:page=\"page\" :show-edges=\"true\" :sibling-count=\"1\" :total=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Inverted Slider Implementation\nDESCRIPTION: Creates a visually inverted slider component\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  inverted: true\n  defaultValue: 25\n```\n\n----------------------------------------\n\nTITLE: Complete Overlay Management Example in Vue\nDESCRIPTION: Comprehensive example demonstrating multiple overlay management including modals and slideovers with async operations.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-overlay.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst overlay = useOverlay()\n\n// Create with default props\nconst modalA = overlay.create(ModalA, { title: 'Welcome' })\nconst modalB = overlay.create(modalB)\n\nconst slideoverA = overlay.create(SlideoverA)\n\nconst openModalA = () => {\n  // Open  Modal A, but override the title prop\n  modalA.open({ title: 'Hello' })\n}\n\nconst openModalB = async () => {\n  // Open modalB, and wait for its result\n  const input = await modalB.open()\n\n  // Pass the result from modalB to the slideover, and open it.\n  slideoverA.open({ input })\n}\n</script>\n\n<template>\n  <div>\n    <button @click=\"openModal\">Open Modal</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Input with Icon in Vue\nDESCRIPTION: Demonstrates adding an icon to the Input component using the 'icon' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<UInput\n  icon=\"i-lucide-search\"\n  size=\"md\"\n  variant=\"outline\"\n  placeholder=\"Search...\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring NavigationMenu with Highlight in Vue\nDESCRIPTION: Demonstrates how to use the 'highlight' and 'highlight-color' props to display a highlighted border for the active item in a NavigationMenu component. It also shows the usage of other props like 'orientation' and 'items'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NavigationMenu\n    :highlight=\"true\"\n    highlight-color=\"primary\"\n    orientation=\"horizontal\"\n    :items=\"items\"\n    class=\"data-[orientation=horizontal]:border-b border-default data-[orientation=horizontal]:w-full data-[orientation=vertical]:w-48\"\n  />\n</template>\n\n<script setup>\n// Items array definition would go here\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic PinInput Usage with v-model\nDESCRIPTION: Demonstrates how to use the PinInput component with v-model for controlled state management.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UPinInput v-model=\"modelValue\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabled Switch in Vue\nDESCRIPTION: Demonstrates how to disable the Switch component using the disabled prop. When disabled, the switch cannot be interacted with by the user.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch :disabled=\"true\" label=\"Check me\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering FormField with Help Text in Vue\nDESCRIPTION: Shows how to use the 'help' prop to display a help message below the form control in the FormField component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<UInput placeholder=\"Enter your email\" class=\"w-full\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Switch in Vue\nDESCRIPTION: Shows how to set the initial value of the Switch component using the defaultValue prop when you don't need to control its state. The defaultValue is set to true to initialize the switch in checked state.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch :default-value=\"true\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Slot Usage in NavigationMenu\nDESCRIPTION: This snippet shows how to use the 'slot' property to customize specific items in the NavigationMenu. It provides information on available slots for customization, including item-specific and general slots.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n::component-example\n---\nname: 'navigation-menu-custom-slot-example'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Input with Avatar in Vue\nDESCRIPTION: Demonstrates adding an avatar to the Input component using the 'avatar' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<UInput\n  :avatar=\"{ src: 'https://github.com/nuxt.png' }\"\n  size=\"md\"\n  variant=\"outline\"\n  placeholder=\"Search...\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Slideover with Customized Close Button\nDESCRIPTION: Explains how to customize the close button in the Slideover's header using the `close` prop.  The example shows how to change the color, variant, and class of the close button.  A button triggers the Slideover, and a placeholder occupies the body section.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"h-full\" />\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Customized Search Input\nDESCRIPTION: Shows how to customize the search input in the SelectMenu by passing properties from the Input component, such as placeholder and icon.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  :search-input=\"{\n    placeholder: 'Filter...',\n    icon: 'i-lucide-search'\n  }\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Select with Rotating Icon in Vue\nDESCRIPTION: This example shows how to implement a Select component with a rotating icon that indicates the open state of the Select.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n::component-example\n---\nname: 'select-icon-example'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: InputMenu with Value Key in Vue\nDESCRIPTION: Shows how to use the value-key prop to bind a specific property of the item objects. This is useful when working with complex item structures and you need to control which value is actually selected.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<InputMenu\n  v-model=\"modelValue\"\n  value-key=\"id\"\n  :items=\"[\n    { label: 'Backlog', id: 'backlog' },\n    { label: 'Todo', id: 'todo' },\n    { label: 'In Progress', id: 'in_progress' },\n    { label: 'Done', id: 'done' }\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Variant Customization - Vue\nDESCRIPTION: Illustrates how to modify the appearance of the RadioGroup using the `variant` prop. This example uses the 'table' variant and sets the color to 'primary'. The initial value is set to 'pro'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  color: 'primary'\n  variant: 'table'\n  defaultValue: 'pro'\n  items:\n    - label: 'Pro'\n      value: 'pro'\n      description: 'Tailored for indie hackers, freelancers and solo founders.'\n    - label: 'Startup'\n      value: 'startup'\n      description: 'Best suited for small teams, startups and agencies.'\n    - label: 'Enterprise'\n      value: 'enterprise'\n      description: 'Ideal for larger teams and organizations.'\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup with Color\nDESCRIPTION: Example of CheckboxGroup usage with a specific color. The `color` prop is used to change the color of the CheckboxGroup. The available colors are defined in the `items.color` array.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nprettier: true\nignore:\n  - defaultValue\n  - items\nexternal:\n  - items\nexternalTypes:\n  - CheckboxGroupItem[]\nitems:\n  color:\n    - primary\n    - secondary\n    - success\n    - info\n    - warning\n    - error\n    - neutral\nprops:\n  color: neutral\n  defaultValue:\n    - 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Slideover with Title and Description Props\nDESCRIPTION: Illustrates how to use both `title` and `description` props to add a title and a description to the Slideover's header. A button triggers the Slideover, and a placeholder occupies the body section.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"h-full\" />\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Label and Description in Vue/Nuxt\nDESCRIPTION: This snippet shows how to add both a label and a description to the Checkbox. The `description` prop allows for providing additional context or instructions related to the checkbox's function.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - label\nprops:\n  label: Check me\n  description: 'This is a checkbox.'\n---\n```\n\n----------------------------------------\n\nTITLE: Overriding primary color shade in main.css (Nuxt UI)\nDESCRIPTION: This code snippet demonstrates how to override the default primary color shade in both light and dark modes within the `main.css` file when using Nuxt UI. It imports tailwindcss and nuxt/ui.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n\n:root {\n  --ui-primary: var(--ui-color-primary-700);\n}\n\n.dark {\n  --ui-primary: var(--ui-color-primary-200);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Modal Close Event in Vue.js\nDESCRIPTION: Demonstrates the new approach to handling modal close events and retrieving results using async/await with the useOverlay composable.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ModalExampleComponent } from '#components'\n\n- const modal = useModal()\n+ const overlay = useOverlay()\n\n+ const modal = overlay.create(ModalExampleComponent)\n\n- function openModal() {\n-   modal.open(ModalExampleComponent, {\n-     onSuccess() {\n-       toast.add({ title: 'Success!' })\n-     }\n-   })\n- }\n+ async function openModal() {\n+   const result = await modal.open(ModalExampleComponent, {\n+     count: count.value\n+   })\n+\n+   if (result) {\n+     toast.add({ title: 'Success!' })\n+   }\n+ }\n</script>\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup with Object Items\nDESCRIPTION: Example of CheckboxGroup usage with an array of objects for the items. Each object contains label, description, and value properties. This demonstrates a more structured way to define checkbox options.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nignore:\n  - modelValue\n  - items\nexternal:\n  - items\n  - modelValue\nexternalTypes:\n  - CheckboxGroupItem[]\n  - CheckboxGroupValue[]\nprops:\n  modelValue:\n    - 'system'\n  items:\n    - label: 'System'\n      description: 'This is the first option.'\n      value: 'system'\n    - label: 'Light'\n      description: 'This is the second option.'\n      value: 'light'\n    - label: 'Dark'\n      description: 'This is the third option.'\n      value: 'dark'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Orientation Customization - Vue\nDESCRIPTION: Shows how to change the orientation of the RadioGroup using the `orientation` prop. You can set it to 'horizontal' or 'vertical' (default). The initial value is set to 'System'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  orientation: 'horizontal'\n  variant: 'list'\n  defaultValue: 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n```\n\n----------------------------------------\n\nTITLE: Adding Close Button to CommandPalette\nDESCRIPTION: Example of adding and customizing a close button for the CommandPalette component. This demonstrates the use of the close prop and its customization options.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  close:\n    color: primary\n    variant: outline\n    class: 'rounded-full'\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Custom Value Key - Vue\nDESCRIPTION: Shows how to use the `value-key` prop to specify a different property name for the item's value. In this example, the `value-key` is set to 'id', so the `v-model` or `default-value` should bind to the 'id' property of each item. The initial value is set to 'light'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  modelValue: 'light'\n  valueKey: 'id'\n  items:\n    - label: 'System'\n      description: 'This is the first option.'\n      id: 'system'\n    - label: 'Light'\n      description: 'This is the second option.'\n      id: 'light'\n    - label: 'Dark'\n      description: 'This is the third option.'\n      id: 'dark'\n```\n\n----------------------------------------\n\nTITLE: Textarea Variant Configuration (Vue)\nDESCRIPTION: Explains how to change the variant of the Textarea component using the `variant` prop. The `variant` prop alters the visual style of the Textarea. The `color` and `highlight` props provide additional styling, and `placeholder` adds placeholder text.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_6\n\nLANGUAGE: Vue\nCODE:\n```\n---\nignore:\n  - placeholder\nprops:\n  color: neutral\n  variant: subtle\n  highlight: false\n  placeholder: 'Type something...'\n---\n\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Content Positioning\nDESCRIPTION: Demonstrates how to control the positioning of the SelectMenu dropdown content using the content prop to specify align, side, and sideOffset properties.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  :content=\"{\n    align: center,\n    side: bottom,\n    sideOffset: 8\n  }\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Content Positioning in Select Component\nDESCRIPTION: Example of customizing the dropdown content positioning with the content prop, controlling alignment, side, and offset.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Backlog'\ncontent:\n  align: center\n  side: bottom\n  sideOffset: 8\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Menu Items Shortcut Extraction\nDESCRIPTION: Example showing how to extract and define shortcuts from menu items using the extractShortcuts utility.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/define-shortcuts.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst items = [{\n  label: 'Save',\n  icon: 'i-lucide-file-down',\n  kbds: ['meta', 'S'],\n  onSelect() {\n    save()\n  }\n}, {\n  label: 'Copy',\n  icon: 'i-lucide-copy',\n  kbds: ['meta', 'C'],\n  onSelect() {\n    copy()\n  }\n}]\n\ndefineShortcuts(extractShortcuts(items))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Including Avatar in Select Component\nDESCRIPTION: Example of adding an avatar to the Select component using the avatar prop, which accepts Avatar component properties.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Nuxt'\navatar:\n  src: 'https://github.com/nuxt.png'\nitems:\n  - Nuxt\n  - NuxtHub\n  - NuxtLabs\n  - Nuxt Modules\n  - Nuxt Community\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Custom Size\nDESCRIPTION: Demonstrates how to change the size of the SelectMenu component using the size prop, which affects the overall dimensions of the component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  size=\"xl\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Post-Filtered Items in CommandPalette (Vue)\nDESCRIPTION: Demonstrates the use of the postFilter field to filter items after the search has occurred.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Example code not provided in the original content -->\n```\n\n----------------------------------------\n\nTITLE: Import CSS File in main.ts\nDESCRIPTION: This imports the main CSS file within the `main.ts` file, ensuring that all styles, including Tailwind CSS and Nuxt UI styles, are applied to the application when it's initialized. The CSS import must be the first import.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport './assets/main.css'\n\nimport { createApp } from 'vue'\nimport { createRouter, createWebHistory } from 'vue-router'\nimport ui from '@nuxt/ui/vue-plugin'\nimport App from './App.vue'\n\nconst app = createApp(App)\n\nconst router = createRouter({\n  routes: [],\n  history: createWebHistory()\n})\n\napp.use(router)\napp.use(ui)\n\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Textarea with Icon (Vue)\nDESCRIPTION: Demonstrates how to add an icon inside the Textarea component using the `icon` prop. The `size`, `variant`, `placeholder` and `rows` props are also used to configure the appearance of the Textarea.  The `prettier` flag indicates code formatting preference.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_8\n\nLANGUAGE: Vue\nCODE:\n```\n---\nprettier: true\nignore:\n  - placeholder\nprops:\n  icon: 'i-lucide-search'\n  size: md\n  variant: outline\n  placeholder: 'Search...'\n  rows: 1\n---\n\n```\n\n----------------------------------------\n\nTITLE: Adjusting Size of Select Component\nDESCRIPTION: Shows how to change the size of the Select component using the size prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Backlog'\nsize: xl\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: PinInput with OTP Support\nDESCRIPTION: Enables One-Time Password functionality on the PinInput component, allowing mobile devices to automatically detect and fill OTP codes.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UPinInput :otp=\"true\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type for Form Component Methods and Properties\nDESCRIPTION: Various TypeScript type definitions for methods and properties exposed by the Form component, including submit(), validate(), clear(), getErrors(), setErrors(), and reactive properties like errors, disabled, dirty, and field tracking sets.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form.md#2025-04-21_snippet_1\n\nLANGUAGE: ts-type\nCODE:\n```\nsubmit()\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nPromise<void>\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nvalidate(opts: { name?: keyof T \\| (keyof T)[], silent?: boolean, nested?: boolean, transform?: boolean })\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nPromise<T>\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nclear(path?: keyof T)\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ngetErrors(path?: keyof T)\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nFormError[]\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nsetErrors(errors: FormError[], name?: keyof T)\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nerrors\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nRef<FormError[]>\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ndisabled\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nRef<boolean>\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ndirty\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ndirtyFields\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nDeepReadonly<Set<keyof T>>\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ntouchedFields\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nblurredFields\n```\n\n----------------------------------------\n\nTITLE: Setting Size of Avatar Component in Vue\nDESCRIPTION: Demonstrates how to set the size of the Avatar component using the size prop. The xl value creates a larger avatar, and the component automatically sets the width and height attributes of the img element.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nignore:\n  - src\nprops:\n  src: 'https://github.com/benjamincanac.png'\n  size: xl\n```\n\n----------------------------------------\n\nTITLE: Input Focus Handling with Shortcuts\nDESCRIPTION: Example demonstrating how to handle shortcuts with specific input focus requirements using the usingInput option.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/define-shortcuts.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UInput v-model=\"query\" name=\"queryInput\" />\n</template>\n\n<script setup lang=\"ts\">\nconst query = ref('')\n\ndefineShortcuts({\n  enter: {\n    usingInput: 'queryInput',\n    handler: () => performSearch()\n  },\n  escape: {\n    usingInput: true,\n    handler: () => clearSearch()\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Toast Duration Property in Vue.js\nDESCRIPTION: Demonstrates the renaming of the 'timeout' prop to 'duration' in the useToast composable.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n<script setup lang=\"ts\">\nconst toast = useToast()\n\n- toast.add({ title: 'Invitation sent', timeout: 0 })\n+ toast.add({ title: 'Invitation sent', duration: 0 })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Locale with Nuxt UI\nDESCRIPTION: This snippet demonstrates how to set the locale in a Vue application using the UApp component from Nuxt UI. It imports the French locale from the @nuxt/ui/locale package and applies it to the application.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { fr } from '@nuxt/ui/locale'\n</script>\n\n<template>\n  <UApp :locale=\"fr\">\n    <RouterView />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Custom Icon, Default Value and Label in Vue/Nuxt\nDESCRIPTION: This snippet demonstrates how to customize the icon displayed when the Checkbox is checked using the `icon` prop. Additionally, it shows setting the initial value and label of the checkbox. When the checkbox is checked it uses the `i-lucide-heart` icon instead of the default one.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - label\n  - defaultValue\nprops:\n  icon: 'i-lucide-heart'\n  defaultValue: true\n  label: Check me\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring CommandPalette Groups in Vue\nDESCRIPTION: Example of configuring groups for the CommandPalette component in Vue. This snippet demonstrates how to structure the groups prop with user data.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\ngroups:\n  - id: 'users'\n    label: 'Users'\n    items:\n      - label: 'Benjamin Canac'\n        suffix: 'benjamincanac'\n        avatar:\n          src: 'https://github.com/benjamincanac.png'\n      - label: 'Sylvain Marroufin'\n        suffix: 'smarroufin'\n        avatar:\n          src: 'https://github.com/smarroufin.png'\n      # ... more users\n```\n\n----------------------------------------\n\nTITLE: Badge with Icon in Vue\nDESCRIPTION: Adds a rocket icon to a Badge component, using a solid variant with primary color and medium size.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  icon: i-lucide-rocket\n  size: md\n  color: primary\n  variant: solid\nslots:\n  default: Badge\n---\n```\n\n----------------------------------------\n\nTITLE: Changing Chip Position with Button in Vue\nDESCRIPTION: Demonstrates positioning a Chip component at the bottom-left of a Button component using the position prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/chip.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n:u-button{icon=\"i-lucide-mail\" color=\"neutral\" variant=\"subtle\"}\n```\n\n----------------------------------------\n\nTITLE: Vue Template: Background Color Variations\nDESCRIPTION: This Vue template demonstrates the usage of the defined neutral color variables for background colors using Tailwind CSS classes.  It shows different background variations, such as default, muted, elevated, accented and inverted by applying corresponding classes to the `<div>` elements.  It requires Tailwind CSS and Nuxt UI to be configured.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"bg-default\">Default</div>\n  <div class=\"bg-muted\">Muted</div>\n  <div class=\"bg-elevated\">Elevated</div>\n  <div class=\"bg-accented\">Accented</div>\n  <div class=\"bg-inverted text-inverted\">Inverted</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabled Input in Vue\nDESCRIPTION: Shows how to disable the Input component using the 'disabled' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<UInput :disabled=\"true\" placeholder=\"Search...\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing useToast Composable in Vue\nDESCRIPTION: Basic setup of the useToast composable in a Vue component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-toast.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst toast = useToast()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Switch with Description in Vue\nDESCRIPTION: Demonstrates how to add a description to the Switch component using the description prop. The description provides additional information about the purpose of the switch.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch label=\"Check me\" description=\"This is a checkbox.\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabled Textarea (Vue)\nDESCRIPTION: Shows how to disable the Textarea component using the `disabled` prop. A disabled Textarea cannot be interacted with. The `placeholder` prop can still be used to display placeholder text.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_13\n\nLANGUAGE: Vue\nCODE:\n```\n---\nignore:\n  - placeholder\nprops:\n  disabled: true\n  placeholder: 'Type something...'\n---\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Select with Fetched Items in Vue\nDESCRIPTION: This example demonstrates how to fetch items from an API and use them in the Select component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n::component-example\n---\nname: 'select-fetch-example'\ncollapse: true\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Table with Row Actions in Vue\nDESCRIPTION: Demonstrates how to add a column with row actions using a DropdownMenu component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n{\n  accessorKey: 'actions',\n  header: 'Actions',\n  cell: ({ row }) => h(UDropdown, null, {\n    default: () => h(UButton, { color: 'gray', variant: 'ghost', icon: 'i-heroicons-ellipsis-horizontal-20-solid' }),\n    content: () => h('div', [\n      h(UDropdownItem, { icon: 'i-heroicons-pencil-square-20-solid' }, () => 'Edit'),\n      h(UDropdownItem, { icon: 'i-heroicons-trash-20-solid', color: 'red' }, () => 'Delete')\n    ])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Badge with Avatar in Vue\nDESCRIPTION: Incorporates an avatar image from GitHub within a medium-sized Badge with neutral color and outline variant.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n---\nprettier: true\nprops:\n  avatar:\n    src: 'https://github.com/nuxt.png'\n  size: md\n  color: neutral\n  variant: outline\nslots:\n  default: |\n\n    Badge\n---\n```\n\n----------------------------------------\n\nTITLE: PinInput with Custom Length\nDESCRIPTION: Changes the number of input boxes in the PinInput component by setting the length prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UPinInput :length=\"6\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Separator with Custom Color in Vue\nDESCRIPTION: Example showing how to customize the Separator's color. The color prop is set to 'primary' and the type is set to 'solid' to demonstrate color customization.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/separator.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nclass: 'p-8'\nprops:\n  color: primary\n  type: solid\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Defining Neutral Color Variables (Light Mode)\nDESCRIPTION: This CSS snippet defines the neutral color palette for light mode using CSS variables. It provides fine-grained control over text, background, and border colors, referencing neutral color values from Nuxt UI's design tokens. These variables are meant to be used within Tailwind CSS.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --ui-text-dimmed: var(--ui-color-neutral-400);\n  --ui-text-muted: var(--ui-color-neutral-500);\n  --ui-text-toned: var(--ui-color-neutral-600);\n  --ui-text: var(--ui-color-neutral-700);\n  --ui-text-highlighted: var(--ui-color-neutral-900);\n  --ui-text-inverted: var(--color-white);\n\n  --ui-bg: var(--color-white);\n  --ui-bg-muted: var(--ui-color-neutral-50);\n  --ui-bg-elevated: var(--ui-color-neutral-100);\n  --ui-bg-accented: var(--ui-color-neutral-200);\n  --ui-bg-inverted: var(--ui-color-neutral-900);\n\n  --ui-border: var(--ui-color-neutral-200);\n  --ui-border-muted: var(--ui-color-neutral-200);\n  --ui-border-accented: var(--ui-color-neutral-300);\n  --ui-border-inverted: var(--ui-color-neutral-900);\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Color, Variant, Default Value and Label in Vue/Nuxt\nDESCRIPTION: This snippet demonstrates changing the color and variant of the Checkbox. The `variant` prop allows for different visual styles of the checkbox component such as a 'card' style. The `color` prop sets the color of the checkbox to 'primary'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - label\n  - defaultValue\nprops:\n  color: 'primary'\n  variant: 'card'\n  defaultValue: true\n  label: Check me\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Compodium Module for Nuxt UI\nDESCRIPTION: Command to install the Compodium module, which enhances Nuxt DevTools with Nuxt UI component inspection and live preview capabilities.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/1.index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module add compodium\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Custom Trailing Icon\nDESCRIPTION: Demonstrates how to customize the trailing icon of the SelectMenu using the trailing-icon prop. By default, it uses a chevron-down icon.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  trailing-icon=\"i-lucide-arrow-down\"\n  size=\"md\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Component Usage in Vue\nDESCRIPTION: Demonstrates how to use the Icon component with name prop to display an icon with custom sizing.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/2.vue.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<Icon name=\"i-lucide-lightbulb\" class=\"size-5\" />\n```\n\n----------------------------------------\n\nTITLE: CSS: Customizing Neutral Colors (app/assets/css/main.css - Pro Version)\nDESCRIPTION: This CSS snippet shows how to customize the neutral color variables in the `app/assets/css/main.css` file using Nuxt UI Pro. It imports Tailwind CSS and Nuxt UI Pro and then overrides the default values of `--ui-bg` and `--ui-text` for both light and dark modes.  It requires Tailwind CSS and Nuxt UI Pro to be installed.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui-pro\";\n\n:root {\n  --ui-bg: var(--ui-color-neutral-50);\n  --ui-text: var(--ui-color-neutral-900);\n}\n\n.dark {\n  --ui-bg: var(--ui-color-neutral-950);\n  --ui-border: var(--ui-color-neutral-900);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS variables for light mode colors in Nuxt UI\nDESCRIPTION: This code snippet defines CSS variables for primary, secondary, success, info, warning, and error colors in light mode using the Nuxt UI framework. It sets the default shade for each color to 500.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --ui-primary: var(--ui-color-primary-500);\n  --ui-secondary: var(--ui-color-secondary-500);\n  --ui-success: var(--ui-color-success-500);\n  --ui-info: var(--ui-color-info-500);\n  --ui-warning: var(--ui-color-warning-500);\n  --ui-error: var(--ui-color-error-500);\n}\n```\n\n----------------------------------------\n\nTITLE: Using alt Text with Initials Fallback in Avatar Component in Vue\nDESCRIPTION: Shows how the Avatar component extracts initials from the alt text to use as a fallback when no image, icon, or text is provided. The alt text is also used as the alt attribute for accessibility.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  alt: 'Benjamin Canac'\n  size: md\n```\n\n----------------------------------------\n\nTITLE: Adding Nuxt UI Vite plugin\nDESCRIPTION: This code snippet adds the Nuxt UI Vite plugin to a Vue application's `vite.config.ts` file.  This plugin integrates Nuxt UI with the Vite build process.\nSOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Close Icon in CommandPalette (Vue)\nDESCRIPTION: Example of customizing the close icon in the CommandPalette component using the 'close-icon' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <CommandPalette\n    :autofocus=\"false\"\n    :close=\"true\"\n    close-icon=\"i-lucide-arrow-right\"\n    :groups=\"groups\"\n    class=\"flex-1\"\n  />\n</template>\n\n<script setup>\nconst groups = [\n  {\n    id: 'apps',\n    items: [\n      { label: 'Calendar', icon: 'i-lucide-calendar' },\n      { label: 'Music', icon: 'i-lucide-music' },\n      { label: 'Maps', icon: 'i-lucide-map' }\n    ]\n  }\n]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Button Color Props\nDESCRIPTION: Update button color props to use the new color aliases in the design system instead of deprecated color names.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- <UButton color=\"black\" />\n+ <UButton color=\"neutral\" />\n\n- <UButton color=\"gray\" />\n+ <UButton color=\"neutral\" variant=\"subtle\" />\n\n- <UButton color=\"white\" />\n+ <UButton color=\"neutral\" variant=\"outline\" />\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS classes for text colors in Vue\nDESCRIPTION: This code snippet demonstrates how to use Tailwind CSS classes within a Vue template to apply different text colors based on the defined color aliases (primary, secondary, success, info, warning, error).\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <span class=\"text-primary\">Primary</span>\n  <span class=\"text-secondary\">Secondary</span>\n  <span class=\"text-success\">Success</span>\n  <span class=\"text-info\">Info</span>\n  <span class=\"text-warning\">Warning</span>\n  <span class=\"text-error\">Error</span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Extending Colors in Nuxt\nDESCRIPTION: These TypeScript snippets demonstrate how to add a custom color alias in a Nuxt application using `app.config.ts` and `nuxt.config.ts`.  It defines a `tertiary` color alias and registers it within the UI theme configuration.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineAppConfig({\n  ui: {\n    colors: {\n      tertiary: 'indigo'\n    }\n  }\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default defineNuxtConfig({\n  ui: {\n    theme: {\n      colors: [\n        'primary',\n        'secondary',\n        'tertiary',\n        'info',\n        'success',\n        'warning',\n        'error'\n      ]\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Tooltip with Keyboard Shortcuts in Vue\nDESCRIPTION: Shows how to add keyboard shortcut indicators to a tooltip using the 'kbds' prop, which renders Kbd components inside the tooltip.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tooltip.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Pagination Control Variant\nDESCRIPTION: Shows how to change the visual variant of inactive pagination controls from the default outline style to subtle, affecting the appearance of all non-active controls.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<Pagination v-model:page=\"page\" color=\"neutral\" variant=\"subtle\" :total=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Positioned Tooltip in Vue\nDESCRIPTION: Shows how to control tooltip positioning with the 'content' prop, configuring alignment, side, and offset parameters.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tooltip.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS and Nuxt UI in CSS\nDESCRIPTION: How to import Tailwind CSS and Nuxt UI in a CSS file and configure it in nuxt.config.ts. Both steps are necessary for proper styling.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui'],\n  css: ['~/assets/css/main.css']\n})\n```\n\n----------------------------------------\n\nTITLE: PinInput with Number Type\nDESCRIPTION: Configures the PinInput to accept only numeric input by setting the type to 'number'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UPinInput type=\"number\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Custom Selected Icon\nDESCRIPTION: Shows how to customize the icon displayed when an item is selected in the dropdown using the selected-icon prop. By default, it uses a check icon.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  selected-icon=\"i-lucide-flame\"\n  size=\"md\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Badge with Custom Class in Vue\nDESCRIPTION: Demonstrates how to override the base styles of a Badge by applying custom CSS classes for bold text and rounded corners.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  class: 'font-bold rounded-full'\nslots:\n  default: Badge\n---\n```\n\n----------------------------------------\n\nTITLE: Input with Custom Loading Icon in Vue\nDESCRIPTION: Demonstrates customizing the loading icon of the Input component using the 'loadingIcon' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<UInput :loading=\"true\" loadingIcon=\"i-lucide-repeat-2\" placeholder=\"Search...\" />\n```\n\n----------------------------------------\n\nTITLE: Badge with Trailing Icon in Vue\nDESCRIPTION: Creates a medium-sized Badge with a right arrow icon positioned at the trailing end.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  trailingIcon: i-lucide-arrow-right\n  size: md\nslots:\n  default: Badge\n---\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton Component in Nuxt UI\nDESCRIPTION: Example of how to implement the Skeleton component in Nuxt UI to create a placeholder while content is loading.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/skeleton.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n:component-example{name=\"skeleton-example\"}\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup with Orientation\nDESCRIPTION: Example of CheckboxGroup usage with a specific orientation. The `orientation` prop is used to change the orientation of the CheckboxGroup. Defaults to `vertical`.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nprettier: true\nignore:\n  - defaultValue\n  - items\nexternal:\n  - items\nexternalTypes:\n  - CheckboxGroupItem[]\nitems:\n  variant:\n    - list\n    - card\nprops:\n  orientation: 'horizontal'\n  variant: 'list'\n  defaultValue:\n    - 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Updating Text Color Classes for Neutral Palette\nDESCRIPTION: Update text color classes to use the new neutral palette instead of gray colors, adapting to the new design system.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n<template>\n- <p class=\"text-gray-500 dark:text-gray-400\" />\n+ <p class=\"text-neutral-500 dark:text-neutral-400\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Iconify Collections with Package Managers\nDESCRIPTION: Commands for installing Iconify icon collections using different package managers, making icons available locally for better performance.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @iconify-json/{collection_name}\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @iconify-json/{collection_name}\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @iconify-json/{collection_name}\n```\n\n----------------------------------------\n\nTITLE: Rendering FormField with Description in Vue\nDESCRIPTION: Illustrates the use of the 'description' prop to provide additional information below the label in the FormField component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<UInput placeholder=\"Enter your email\" class=\"w-full\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Component UI Props\nDESCRIPTION: Update the UI prop structure for components to target specific slots using the new theming system.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n<template>\n- <UButton :ui=\"{ font: 'font-bold' }\" />\n+ <UButton :ui=\"{ base: 'font-bold' }\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring AvatarGroup Size in Vue\nDESCRIPTION: This example shows how to use the 'size' prop to change the size of all avatars within the AvatarGroup to 'xl'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar-group.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n:u-avatar{src=\"https://github.com/benjamincanac.png\" alt=\"Benjamin Canac\"}\n:u-avatar{src=\"https://github.com/romhml.png\" alt=\"Romain Hamel\"}\n:u-avatar{src=\"https://github.com/noook.png\" alt=\"Neil Richter\"}\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Input Component in Vue\nDESCRIPTION: Shows how to combine an Input component with a Button within a ButtonGroup.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button-group.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<UInput color=\"neutral\" variant=\"outline\" placeholder=\"Enter token\" />\n\n<UButton color=\"neutral\" variant=\"subtle\" icon=\"i-lucide-clipboard\" />\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Custom Variant\nDESCRIPTION: Shows how to change the visual variant of the SelectMenu using the variant prop, which alters the appearance of the component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  color=\"neutral\"\n  variant=\"subtle\"\n  highlight=\"false\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Icon Fallback in Avatar Component in Vue\nDESCRIPTION: Shows how to use the icon prop to display a fallback icon when the image fails to load. This example uses a Lucide image icon with a medium size.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  icon: 'i-lucide-image'\n  size: md\n```\n\n----------------------------------------\n\nTITLE: Updating Toast Notification Example\nDESCRIPTION: Shows how to update an existing toast notification by its ID with new title and description.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-toast.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst toast = useToast()\n\nfunction updateToast(id: string | number) {\n  toast.update(id, {\n    title: 'Updated Toast',\n    description: 'This toast has been updated.'\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Focus Color in Select Component\nDESCRIPTION: Demonstrates changing the ring color when the Select component is focused using the color and highlight props.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Backlog'\ncolor: neutral\nhighlight: true\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Source Configuration\nDESCRIPTION: This CSS snippet shows how to use the `@source` directive to specify additional source files for Tailwind CSS class detection. This is particularly useful when using `@nuxt/content` to ensure Tailwind classes in markdown files are properly processed. Placed in `app/assets/css/main.css`\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n\n@source \"../../../content\";\n/* Use this if you're not using compatibilityVersion: 4: https://nuxt.com/docs/getting-started/upgrade#opting-in-to-nuxt-4 */\n@source \"../../content\";\n```\n\n----------------------------------------\n\nTITLE: Displaying an Icon using the Icon Component in Vue\nDESCRIPTION: This snippet demonstrates how to use the Icon component to display an icon from Iconify. The 'name' prop is used to specify the icon, and additional classes can be applied for styling.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/icon.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Icon\n    name=\"i-lucide-lightbulb\"\n    class=\"size-5\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup with Variant\nDESCRIPTION: Example of CheckboxGroup usage with a specific variant. The `variant` prop is used to change the visual style of the CheckboxGroup. The available variants are defined in the `items.variant` array.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nprettier: true\nignore:\n  - defaultValue\n  - items\nexternal:\n  - items\nexternalTypes:\n  - CheckboxGroupItem[]\nitems:\n  color:\n    - primary\n    - secondary\n    - success\n    - info\n    - warning\n    - error\n    - neutral\n  variant:\n    - list\n    - card\nprops:\n  color: 'primary'\n  variant: 'card'\n  defaultValue:\n    - 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Using Chip with Inset Property on Avatar in Vue\nDESCRIPTION: Shows how to display a Chip inside an Avatar component using the inset prop, useful for rounded components.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/chip.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n:u-avatar{src=\"https://github.com/benjamincanac.png\"}\n```\n\n----------------------------------------\n\nTITLE: Loading Switch in Vue\nDESCRIPTION: Demonstrates how to show a loading state on the Switch component using the loading prop. When set to true, a loading icon will be displayed on the switch.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch :loading=\"true\" :default-value=\"true\" label=\"Check me\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Update tsconfig.app.json to include generated type definitions\nDESCRIPTION: This configuration updates the `tsconfig.app.json` file to include the auto-generated type declaration files `auto-imports.d.ts` and `components.d.ts`. This ensures that TypeScript recognizes the types for auto-imported components and functions provided by Nuxt UI, preventing type errors during development.  You'll want to gitignore these files.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\", \"src/**/*.vue\", \"auto-imports.d.ts\", \"components.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Leading Icon\nDESCRIPTION: Shows how to add a leading icon to the SelectMenu using the icon prop, which displays an icon at the start of the select input.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  icon=\"i-lucide-search\"\n  size=\"md\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Locale Implementation with useI18n\nDESCRIPTION: Implementation of dynamic locale switching using useI18n composable with Nuxt UI.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport * as locales from '@nuxt/ui/locale'\n\nconst { locale } = useI18n()\n</script>\n\n<template>\n  <UApp :locale=\"locales[locale]\">\n    <NuxtPage />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI Package with Package Managers\nDESCRIPTION: Commands to install the latest version of Nuxt UI using different package managers including pnpm, yarn, npm, and bun.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @nuxt/ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @nuxt/ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nuxt/ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @nuxt/ui\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Locale in Nuxt UI\nDESCRIPTION: This snippet demonstrates how to create a custom locale for a Vue application using Nuxt UI. It uses the defineLocale composable to define a new locale with a name, code, direction, and message pairs.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { Messages } from '@nuxt/ui'\nimport { defineLocale } from '@nuxt/ui/composables/defineLocale.js'\n\nconst locale = defineLocale<Messages>({\n  name: 'My custom locale',\n  code: 'en',\n  dir: 'ltr',\n  messages: {\n    // implement pairs\n  }\n})\n</script>\n\n<template>\n  <UApp :locale=\"locale\">\n    <RouterView />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Calendar Color in Vue\nDESCRIPTION: Shows how to change the color of the Calendar component using the color prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Calendar color=\"neutral\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Input with Trailing Icon in Vue\nDESCRIPTION: Shows how to add a trailing icon to the Input component using the 'trailingIcon' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<UInput\n  trailingIcon=\"i-lucide-at-sign\"\n  placeholder=\"Enter your email\"\n  size=\"md\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Neutral Color Variables (Dark Mode)\nDESCRIPTION: This CSS snippet defines the neutral color palette for dark mode using CSS variables. It provides fine-grained control over text, background, and border colors, referencing neutral color values from Nuxt UI's design tokens. This is intended to be used in conjunction with the `dark` class, typically applied to the `<html>` element or the `<body>` element.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.dark {\n  --ui-text-dimmed: var(--ui-color-neutral-500);\n  --ui-text-muted: var(--ui-color-neutral-400);\n  --ui-text-toned: var(--ui-color-neutral-300);\n  --ui-text: var(--ui-color-neutral-200);\n  --ui-text-highlighted: var(--color-white);\n  --ui-text-inverted: var(--ui-color-neutral-900);\n\n  --ui-bg: var(--ui-color-neutral-900);\n  --ui-bg-muted: var(--ui-color-neutral-800);\n  --ui-bg-elevated: var(--ui-color-neutral-800);\n  --ui-bg-accented: var(--ui-color-neutral-700);\n  --ui-bg-inverted: var(--color-white);\n\n  --ui-border: var(--ui-color-neutral-800);\n  --ui-border-muted: var(--ui-color-neutral-700);\n  --ui-border-accented: var(--ui-color-neutral-700);\n  --ui-border-inverted: var(--color-white);\n}\n```\n\n----------------------------------------\n\nTITLE: Modal with Title - Vue\nDESCRIPTION: Illustrates how to add a title to the Modal component using the `title` prop.  A button opens the modal and a placeholder is used for the body content.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n\n#body\n:placeholder{class=\"h-48\"}\n```\n\n----------------------------------------\n\nTITLE: Disable Color Mode Integration in vite.config.ts\nDESCRIPTION: This code disables the color mode integration from `@vueuse/core` within the Nuxt UI Vite plugin configuration. Setting `colorMode` to `false` prevents Nuxt UI from automatically handling color mode (light/dark) switching, allowing for manual control or integration with a different color mode system.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui({\n      colorMode: false\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Define Card Component Slots in TypeScript\nDESCRIPTION: This TypeScript code defines the slots for the Card component in Nuxt UI. It specifies the default Tailwind CSS classes for the root, header, body, and footer slots. These classes control the appearance of the card's different sections.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  slots: {\n    root: 'bg-default ring ring-default divide-y divide-default rounded-lg',\n    header: 'p-4 sm:px-6',\n    body: 'p-4 sm:p-6',\n    footer: 'p-4 sm:px-6'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ColorPicker in Vue\nDESCRIPTION: Shows how to disable the ColorPicker using the disabled prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ColorPicker :disabled=\"true\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling Calendar in Vue\nDESCRIPTION: Demonstrates how to disable the Calendar component using the disabled prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Calendar :disabled=\"true\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Template: Border Color Variations\nDESCRIPTION: This Vue template demonstrates the usage of the defined neutral color variables for border colors using Tailwind CSS classes. It displays different border variations, such as default, muted, accented, and inverted, by applying corresponding classes to the `<div>` elements. It requires Tailwind CSS and Nuxt UI.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"border border-default\">Default</div>\n  <div class=\"border border-muted\">Muted</div>\n  <div class=\"border border-accented\">Accented</div>\n  <div class=\"border border-inverted\">Inverted</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Indeterminate State in Vue/Nuxt\nDESCRIPTION: This snippet illustrates how to set the Checkbox to an indeterminate state using the `default-value` prop with the value 'indeterminate'.  The indeterminate state is often used to represent a mixed selection in a group of checkboxes. The actual rendering of the indeterminate state depends on the component library's implementation.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - defaultValue\nprops:\n  defaultValue: 'indeterminate'\n---\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Icon in Select Component\nDESCRIPTION: Example of customizing the loading indicator icon using the loadingIcon prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Backlog'\nloading: true\nloadingIcon: 'i-lucide-repeat-2'\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Textarea Max Rows with Autoresize (Vue)\nDESCRIPTION: Demonstrates how to limit the maximum number of rows when using the autoresize feature. The `maxrows` prop is used to set the maximum height of the Textarea. The `autoresize` prop needs to be enabled for this to work.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_4\n\nLANGUAGE: Vue\nCODE:\n```\n---\nignore:\n  - modelValue\nexternal:\n  - modelValue\nprops:\n  modelValue: 'This is a long text that will autoresize the height of the Textarea with a maximum of 4 rows.'\n  maxrows: 4\n  autoresize: true\n---\n\n```\n\n----------------------------------------\n\nTITLE: Input with Custom Color and Highlight in Vue\nDESCRIPTION: Shows how to customize the Input's color and highlight state using props.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<UInput color=\"neutral\" :highlight=\"true\" placeholder=\"Search...\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Mode in Nuxt Configuration\nDESCRIPTION: This snippet shows how to disable the built-in color mode module by setting the ui.colorMode option to false in the Nuxt configuration file. This is useful when you want to implement your own color mode solution or don't need this feature.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/6.color-mode/1.nuxt.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui'],\n  css: ['~/assets/css/main.css'],\n  ui: {\n    colorMode: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CommandPalette Group Types in TypeScript\nDESCRIPTION: TypeScript type definitions for the groups and items in the CommandPalette component. This includes properties for group configuration and individual command items.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nid: string\nlabel?: string\nslot?: string\nitems?: CommandPaletteItem[]\nignoreFilter?: boolean\npostFilter?: (searchTerm: string, items: T[]) => T[]\nhighlightedIcon?: string\n```\n\nLANGUAGE: typescript\nCODE:\n```\nprefix?: string\nlabel?: string\nsuffix?: string\nicon?: string\navatar?: AvatarProps\nchip?: ChipProps\nkbds?: string[] | KbdProps[]\nactive?: boolean\nloading?: boolean\ndisabled?: boolean\nslot?: string\nonSelect?(e?: Event): void\n```\n\n----------------------------------------\n\nTITLE: Date Range Selection Calendar in Vue\nDESCRIPTION: Demonstrates how to use the Calendar component for selecting a range of dates using the range prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Calendar v-model=\"modelValue\" :range=\"true\" />\n</template>\n\n<script setup>\nconst modelValue = ref({\n  start: [2022, 2, 3],\n  end: [2022, 2, 20]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nuxt I18n Module Installation\nDESCRIPTION: Package installation commands for @nuxtjs/i18n module using different package managers.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @nuxtjs/i18n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Locale Switching with Nuxt UI\nDESCRIPTION: This snippet shows how to dynamically switch between languages in a Vue application using Vue I18n with Nuxt UI. It uses the useI18n composable to access the current locale and applies it to the UApp component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useI18n } from 'vue-i18n'\nimport * as locales from '@nuxt/ui/locale'\n\nconst { locale } = useI18n()\n</script>\n\n<template>\n  <UApp :locale=\"locales[locale]\">\n    <RouterView />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Slideover with Title Prop\nDESCRIPTION: Shows how to use the `title` prop to add a title to the Slideover's header. The example includes a button to open the Slideover and a placeholder for the body content.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"h-full\" />\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup Disabled\nDESCRIPTION: Example of CheckboxGroup usage in a disabled state. The `disabled` prop is used to disable the entire CheckboxGroup, preventing user interaction.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nprettier: true\nignore:\n  - defaultValue\n  - items\nexternal:\n  - items\nexternalTypes:\n  - CheckboxGroupItem[]\nprops:\n  disabled: true\n  defaultValue:\n    - 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for ColorPicker in Vue\nDESCRIPTION: Shows how to set an initial value for the ColorPicker using the default-value prop when state control is not needed.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ColorPicker :default-value=\"'#00BCD4'\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI with Package Managers\nDESCRIPTION: Commands for installing the Nuxt UI package using different package managers (pnpm, yarn, npm, and bun).\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @nuxt/ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @nuxt/ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nuxt/ui\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @nuxt/ui\n```\n\n----------------------------------------\n\nTITLE: Dashed Type Separator in Vue\nDESCRIPTION: Example showing how to change the Separator's line type to dashed. The type prop is set to 'dashed' to create a dashed line instead of the default solid line.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/separator.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nclass: 'p-8'\nprops:\n  type: dashed\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Textarea Placeholder Text (Vue)\nDESCRIPTION: Demonstrates how to set a placeholder text inside the Textarea component using the `placeholder` prop. This provides a hint to the user about the expected input.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_2\n\nLANGUAGE: Vue\nCODE:\n```\n---\nprops:\n  placeholder: 'Type something...'\n---\n\n```\n\n----------------------------------------\n\nTITLE: Using Icon Prop on Button Component in Vue\nDESCRIPTION: Example of setting the icon prop on the Button component to display a sun icon from the Lucide icon set with a subtle variant.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<UButton icon=\"i-lucide-sun\" variant=\"subtle\">Button</UButton>\n```\n\n----------------------------------------\n\nTITLE: Using Icon Component with Name Prop in Vue\nDESCRIPTION: Example of using the Icon component with a name prop to display a lightbulb icon from the Lucide icon set.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<UIcon name=\"i-lucide-lightbulb\" class=\"size-5\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Items Per Page in Pagination\nDESCRIPTION: Demonstrates how to set the number of items per page with the itemsPerPage prop. Defaults to 10 but can be customized, in this case to 20 items per page.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Pagination v-model:page=\"page\" :items-per-page=\"20\" :total=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Table Component with Template Ref in Vue\nDESCRIPTION: Demonstrates how to set up a UTable component and access its typed instance using useTemplateRef. This allows access to the table's DOM element and API instance.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst table = useTemplateRef('table')\n</script>\n\n<template>\n  <UTable ref=\"table\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Usage with Default Slot in Vue\nDESCRIPTION: Creates a basic Badge component using the default slot to set the label text.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n---\nslots:\n  default: Badge\n---\n```\n\n----------------------------------------\n\nTITLE: Adjusting Progress Bar Size in Nuxt UI\nDESCRIPTION: Changes the size of the progress bar using the size prop. This example uses the extra-large (xl) size for increased visibility.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\nsize: xl\n```\n\n----------------------------------------\n\nTITLE: Input with Custom Variant in Vue\nDESCRIPTION: Demonstrates changing the Input's variant using the 'variant' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<UInput color=\"neutral\" variant=\"subtle\" :highlight=\"false\" placeholder=\"Search...\" />\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup with String Items\nDESCRIPTION: Example of CheckboxGroup usage with a simple array of strings for the items. It demonstrates how the component can be used to select from a predefined list of string options.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nprettier: true\nignore:\n  - modelValue\n  - items\nexternal:\n  - items\n  - modelValue\nexternalTypes:\n  - CheckboxGroupItem[]\n  - CheckboxGroupValue[]\nprops:\n  modelValue:\n    - 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Modal with Customized Close Button - Vue\nDESCRIPTION: Demonstrates customizing the close button of the Modal by setting properties like color, variant, and class.  The modal is opened by a button, and a placeholder is used for the body content.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n\n#body\n:placeholder{class=\"h-48\"}\n```\n\n----------------------------------------\n\nTITLE: Gitignore auto-generated type declaration files\nDESCRIPTION: This snippet adds auto-imports.d.ts and components.d.ts to your .gitignore file. These files are generated and should not be committed to the repository.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Auto-generated type declarations\nauto-imports.d.ts\ncomponents.d.ts\n```\n\n----------------------------------------\n\nTITLE: Setting primary color to black and white in main.css (Nuxt UI)\nDESCRIPTION: This code snippet demonstrates how to override the primary color to black in light mode and white in dark mode within the `main.css` file when using Nuxt UI. It imports tailwindcss and nuxt/ui.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n\n:root {\n  --ui-primary: black;\n}\n\n.dark {\n  --ui-primary: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vue I18n Package\nDESCRIPTION: This snippet shows how to install the Vue I18n package using different package managers including pnpm, yarn, npm, and bun. Vue I18n is required for dynamic locale switching.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm add vue-i18n@10\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add vue-i18n@10\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vue-i18n@10\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add vue-i18n@10\n```\n\n----------------------------------------\n\nTITLE: Step Value Slider Configuration\nDESCRIPTION: Sets the increment value for the slider movement\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  step: 10\n  defaultValue: 50\n```\n\n----------------------------------------\n\nTITLE: Basic Keyboard Shortcut Definition in Vue\nDESCRIPTION: Simple example showing how to define a keyboard shortcut that toggles a boolean value using meta+k combination.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/define-shortcuts.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst open = ref(false)\n\ndefineShortcuts({\n  meta_k: () => {\n    open.value = !open.value\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Replacing Tailwind Colors with Color Aliases\nDESCRIPTION: Replace direct Tailwind CSS color references with semantic color aliases from the new design system.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- <UButton color=\"red\" />\n+ <UButton color=\"error\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing UApp Component in Vue.js\nDESCRIPTION: Demonstrates the replacement of global Modals, Slideovers, and Notifications components with the UApp component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n<template>\n+  <UApp>\n+    <NuxtPage />\n+  </UApp>\n-  <UModals />\n-  <USlideovers />\n-  <UNotifications />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Trailing Icon in NavigationMenu\nDESCRIPTION: Shows how to use the 'trailing-icon' prop to customize the trailing icon of each item in the NavigationMenu. This example uses a custom icon and demonstrates a more complex item structure.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NavigationMenu\n    trailing-icon=\"i-lucide-arrow-down\"\n    :items=\"items\"\n    class=\"w-full justify-center\"\n  />\n</template>\n\n<script setup>\n// Items array definition would go here\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Fetched Items in CommandPalette (Vue)\nDESCRIPTION: Demonstrates how to use items fetched from an API in the CommandPalette component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Example code not provided in the original content -->\n```\n\n----------------------------------------\n\nTITLE: Adding Nuxt UI module in nuxt.config.ts\nDESCRIPTION: This code snippet configures a Nuxt 3 application to use the `@nuxt/ui` module. By adding it to the `modules` array, Nuxt UI's components and composables become available in your application.\nSOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui']\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Template: Radius Variations\nDESCRIPTION: This Vue template demonstrates the usage of the `--ui-radius` CSS variable by displaying different border radius variations using Tailwind CSS classes. It shows `xs`, `sm`, `md`, `lg`, `xl`, `2xl`, and `3xl` radius sizes.  It requires Tailwind CSS and Nuxt UI to be configured to work properly.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"rounded-xs\">xs</div>\n  <div class=\"rounded-sm\">sm</div>\n  <div class=\"rounded-md\">md</div>\n  <div class=\"rounded-lg\">lg</div>\n  <div class=\"rounded-xl\">xl</div>\n  <div class=\"rounded-2xl\">2xl</div>\n  <div class=\"rounded-3xl\">3xl</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Active Page Button Variant\nDESCRIPTION: Shows how to set a custom variant for the active page button using the active-variant prop, changing it from the default solid to subtle.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<Pagination v-model:page=\"page\" active-color=\"primary\" active-variant=\"subtle\" :total=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI with Yarn\nDESCRIPTION: This command installs the `@nuxt/ui` package using the Yarn package manager. It adds Nuxt UI as a dependency to your project.\nSOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @nuxt/ui\n```\n\n----------------------------------------\n\nTITLE: Input with Custom Type in Vue\nDESCRIPTION: Shows how to change the input type using the 'type' prop. The example uses a file input type.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<UInput type=\"file\" />\n```\n\n----------------------------------------\n\nTITLE: Modal in Fullscreen Mode - Vue\nDESCRIPTION: Demonstrates how to display the Modal component in fullscreen mode using the `fullscreen` prop. Includes a button to open the modal and a placeholder in its body.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n\n#body\n:placeholder{class=\"h-full\"}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Slots in Accordion Items\nDESCRIPTION: Template syntax for accessing custom slot names in Accordion items, useful for targeted content customization.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/accordion.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n#{{ item.slot }}\n```\n\nLANGUAGE: vue\nCODE:\n```\n#{{ item.slot }}-body\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI with Bun\nDESCRIPTION: This command installs the `@nuxt/ui` package using the Bun package manager. It adds Nuxt UI as a dependency to your project.\nSOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add @nuxt/ui\n```\n\n----------------------------------------\n\nTITLE: Define Container Base Style in TypeScript\nDESCRIPTION: This TypeScript code defines the base style for the Container component in Nuxt UI. It specifies the maximum width, horizontal margin, and padding for the container. This ensures that the content is centered and has consistent spacing.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  base: 'max-w-(--ui-container) mx-auto px-4 sm:px-6 lg:px-8'\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing NavigationMenu Color in Vue\nDESCRIPTION: Shows how to change the color of the NavigationMenu using the 'color' prop. This example sets the color to 'neutral' and demonstrates the structure of the 'items' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NavigationMenu\n    color=\"neutral\"\n    :items=\"items\"\n    class=\"w-full\"\n  />\n</template>\n\n<script setup>\n// Items array definition would go here\n</script>\n```\n\n----------------------------------------\n\nTITLE: Required Switch with Label in Vue\nDESCRIPTION: Shows how to make a Switch required using the required prop. When set to true, an asterisk will be added next to the label to indicate that the field is required.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch :required=\"true\" label=\"Check me\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Icon Usage in Button Component\nDESCRIPTION: Shows how to incorporate an icon within a Button component using the icon prop with subtle variant styling.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/2.vue.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Button icon=\"i-lucide-sun\" variant=\"subtle\">Button</Button>\n```\n\n----------------------------------------\n\nTITLE: Using HSL Format with ColorPicker in Vue\nDESCRIPTION: Shows how to configure the ColorPicker to use HSL format using the format prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ColorPicker v-model=\"modelValue\" format=\"hsl\" />\n</template>\n\n<script setup>\nconst modelValue = ref('hsl(153, 100%, 37.8%)')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Arrow to DropdownMenu in Vue\nDESCRIPTION: This snippet illustrates how to add an arrow to the DropdownMenu using the 'arrow' prop. It enhances the visual appearance of the menu by adding a pointing arrow.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/dropdown-menu.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" icon=\"i-lucide-menu\" color=\"neutral\" variant=\"outline\" />\n```\n\n----------------------------------------\n\nTITLE: Slideover with Side Prop\nDESCRIPTION: Shows how to control the side from which the Slideover slides in using the `side` prop. This example sets the side to 'left'. A button triggers the Slideover, and a placeholder occupies the body section.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"h-full min-h-48\" />\n```\n\n----------------------------------------\n\nTITLE: Badge with Outline Variant in Vue\nDESCRIPTION: Shows how to create a Badge with an outline variant, changing its visual style while maintaining the neutral color.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  color: neutral\n  variant: outline\nslots:\n  default: Badge\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliSense for Link Component Classes in VSCode\nDESCRIPTION: JSON configuration that adds Tailwind CSS class attributes 'active-class' and 'inactive-class' to VSCode's IntelliSense for better autocompletion when working with the Link component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/link.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwindCSS.classAttributes\": [\n    \"active-class\",\n    \"inactive-class\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Content Orientation for NavigationMenu in Vue\nDESCRIPTION: This example shows how to use the 'content-orientation' prop to change the orientation of the content in the NavigationMenu. It's important to note that this prop only works when the 'orientation' is set to 'horizontal'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\ncollapse: true\nignore:\n  - items\n  - arrow\n  - class\nexternal:\n  - items\nexternalTypes:\n  - NavigationMenuItem[]\nprops:\n  arrow: true\n  contentOrientation: 'vertical'\n  items:\n    - label: Guide\n      icon: i-lucide-book-open\n      to: /getting-started\n      children:\n        - label: Introduction\n          description: Fully styled and customizable components for Nuxt.\n          icon: i-lucide-house\n        - label: Installation\n          description: Learn how to install and configure Nuxt UI in your application.\n          icon: i-lucide-cloud-download\n        - label: 'Icons'\n          icon: 'i-lucide-smile'\n          description: 'You have nothing to do, @nuxt/icon will handle it automatically.'\n    - label: Composables\n      icon: i-lucide-database\n      to: /composables\n      children:\n        - label: defineShortcuts\n          icon: i-lucide-file-text\n          description: Define shortcuts for your application.\n          to: /composables/define-shortcuts\n        - label: useOverlay\n          icon: i-lucide-file-text\n          description: Display a modal/slideover within your application.\n          to: /composables/use-overlay\n        - label: useToast\n          icon: i-lucide-file-text\n          description: Display a toast within your application.\n          to: /composables/use-toast\n    - label: Components\n      icon: i-lucide-box\n      to: /components\n      active: true\n      children:\n        - label: Link\n          icon: i-lucide-file-text\n          description: Use NuxtLink with superpowers.\n          to: /components/link\n        - label: Modal\n          icon: i-lucide-file-text\n          description: Display a modal within your application.\n          to: /components/modal\n        - label: NavigationMenu\n          icon: i-lucide-file-text\n          description: Display a list of links.\n          to: /components/navigation-menu\n        - label: Pagination\n          icon: i-lucide-file-text\n          description: Display a list of pages.\n          to: /components/pagination\n  class: 'w-full justify-center'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic AvatarGroup in Vue\nDESCRIPTION: This snippet demonstrates the basic usage of the AvatarGroup component, wrapping multiple Avatar components to stack them together.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar-group.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n:u-avatar{src=\"https://github.com/benjamincanac.png\" alt=\"Benjamin Canac\"}\n:u-avatar{src=\"https://github.com/romhml.png\" alt=\"Romain Hamel\"}\n:u-avatar{src=\"https://github.com/noook.png\" alt=\"Neil Richter\"}\n```\n\n----------------------------------------\n\nTITLE: Customize Button Font Globally in Vite config (UI)\nDESCRIPTION: This TypeScript code shows how to customize the font weight of all buttons globally in a Vue application using the `vite.config.ts` file and the `@nuxt/ui/vite` plugin. It overrides the default `base` slot of the button component to apply the `font-bold` class.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui({\n      ui: {\n        button: {\n          slots: {\n            base: 'font-bold'\n          }\n        }\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Slideover without Transition\nDESCRIPTION: Explains how to disable the animation transition of the Slideover using the `transition` prop. This is done by setting `transition` to `false`. A button triggers the Slideover, and a placeholder occupies the body section.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"h-full\" />\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with UApp Component\nDESCRIPTION: Wrap your Nuxt application with the UApp component to ensure proper functioning of UI components.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UApp>\n    <NuxtPage />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Slideover with Custom Close Icon\nDESCRIPTION: Demonstrates how to change the close button icon using the `close-icon` prop. It showcases replacing the default icon with a custom one. A button triggers the Slideover, and a placeholder occupies the body section.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"h-full\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Fonts Module in Nuxt UI\nDESCRIPTION: Configuration for disabling the @nuxt/fonts module in Nuxt UI. The module is enabled by default.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui'],\n  css: ['~/assets/css/main.css'],\n  ui: {\n    fonts: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Calendar with Non-Fixed Weeks\nDESCRIPTION: Shows how to display the Calendar component without fixed weeks by setting the fixed-weeks prop to false.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#2025-04-23_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Calendar :fixed-weeks=\"false\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating v-model Directive for Visibility Control in Vue.js\nDESCRIPTION: Shows the change from v-model to v-model:open for controlling component visibility.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n<template>\n- <UModal v-model=\"open\" />\n+ <UModal v-model:open=\"open\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dynamic HTML Direction with Nuxt UI\nDESCRIPTION: This snippet demonstrates how to dynamically set the language and direction attributes on the HTML element based on the current locale using the useHead composable with Nuxt UI. It computes the lang and dir values from the current locale.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport { useHead } from '@unhead/vue'\nimport * as locales from '@nuxt/ui/locale'\n\nconst { locale } = useI18n()\n\nconst lang = computed(() => locales[locale.value].code)\nconst dir = computed(() => locales[locale.value].dir)\n\nuseHead({\n  htmlAttrs: {\n    lang,\n    dir\n  }\n})\n</script>\n\n<template>\n  <UApp :locale=\"locales[locale]\">\n    <RouterView />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Custom Indeterminate Icon in Vue/Nuxt\nDESCRIPTION: This snippet shows how to customize the icon used to represent the indeterminate state of the Checkbox using the `indeterminate-icon` prop.  This allows developers to visually distinguish the indeterminate state with a different icon. The default icon is `i-lucide-minus`, which is being overridden to `i-lucide-plus`.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - defaultValue\nprops:\n  defaultValue: 'indeterminate'\n  indeterminateIcon: 'i-lucide-plus'\n---\n```\n\n----------------------------------------\n\nTITLE: Indeterminate Progress Bar in Nuxt UI\nDESCRIPTION: Creates an indeterminate progress bar by setting modelValue to null. This is useful when the progress cannot be determined but you want to show that an operation is in progress.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: null\n```\n\n----------------------------------------\n\nTITLE: Textarea with Avatar (Vue)\nDESCRIPTION: Shows how to include an Avatar component inside the Textarea using the `avatar` prop. The `size`, `variant`, `placeholder`, and `rows` props can be used to further style the Textarea. The `prettier` flag indicates code formatting preference.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_10\n\nLANGUAGE: Vue\nCODE:\n```\n---\nprettier: true\nignore:\n  - placeholder\nprops:\n  avatar:\n    src: 'https://github.com/nuxt.png'\n  size: md\n  variant: outline\n  placeholder: 'Search...'\n  rows: 1\n---\n\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Collection Directory Structure\nDESCRIPTION: Example directory structure for organizing custom SVG icon files that can be used as a custom Iconify collection.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nassets/icons\n├── add.svg\n└── remove.svg\n```\n\n----------------------------------------\n\nTITLE: TypeScript Types for Select Items in Nuxt UI\nDESCRIPTION: TypeScript interface showing the available properties that can be used when defining items for the Select component as objects.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_19\n\nLANGUAGE: ts-type\nCODE:\n```\nlabel?: string\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nvalue?: string\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ntype?: \"label\" | \"separator\" | \"item\"\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nicon?: string\n```\n\nLANGUAGE: ts-type\nCODE:\n```\navatar?: AvatarProps\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nchip?: ChipProps\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ndisabled?: boolean\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI with pnpm\nDESCRIPTION: This command installs the `@nuxt/ui` package using the pnpm package manager.  It adds Nuxt UI as a dependency to your project.\nSOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @nuxt/ui\n```\n\n----------------------------------------\n\nTITLE: Adjusting Calendar Size in Vue\nDESCRIPTION: Illustrates how to change the size of the Calendar component using the size prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Calendar size=\"xl\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Active Styles in app.config.ts\nDESCRIPTION: Example of how to configure global active styles for buttons in your app.config.ts file under the ui.button.variants.active key.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineAppConfig({\n  ui: {\n    button: {\n      variants: {\n        active: {\n          true: {\n            base: 'font-bold'\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationMenu Item Types in TypeScript\nDESCRIPTION: This snippet defines the types for the items that can be passed to the NavigationMenu component. It includes properties for labels, icons, avatars, badges, and more.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n- `label?: string`\n- `icon?: string`\n- `avatar?: AvatarProps`\n- `badge?: string | number | BadgeProps`\n- `trailingIcon?: string`\n- `type?: 'label' | 'link'`\n- `value?: string`\n- `disabled?: boolean`\n- `class?: any`\n- `slot?: string`\n- `onSelect?(e: Event): void`\n- `children?: NavigationMenuChildItem[]`\n```\n\n----------------------------------------\n\nTITLE: Badge with Label Prop in Vue\nDESCRIPTION: Creates a Badge component using the label prop instead of the default slot to set the text.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  label: Badge\n---\n```\n\n----------------------------------------\n\nTITLE: Controlling Selected Items in CommandPalette (Vue)\nDESCRIPTION: Demonstrates how to control selected items in the CommandPalette using v-model or the @update:model-value event.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Example code not provided in the original content -->\n```\n\n----------------------------------------\n\nTITLE: Using Design Tokens for Light/Dark Mode\nDESCRIPTION: Replace explicit color classes with semantic design tokens that automatically handle light and dark mode differences.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n<template>\n- <p class=\"text-gray-500 dark:text-gray-400\" />\n+ <p class=\"text-muted\" />\n\n- <p class=\"text-gray-900 dark:text-white\" />\n+ <p class=\"text-highlighted\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customize Button Font Globally in Vite config (UI Pro)\nDESCRIPTION: This TypeScript code shows how to customize the font weight of all buttons globally in a Vue application using the `vite.config.ts` file and the `@nuxt/ui-pro/vite` plugin. It overrides the default `base` slot of the button component to apply the `font-bold` class.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport uiPro from '@nuxt/ui-pro/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    uiPro({\n      ui: {\n        button: {\n          slots: {\n            base: 'font-bold'\n          }\n        }\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Mode Plugin in Vite Config for Nuxt UI Pro\nDESCRIPTION: This configuration snippet demonstrates how to disable the color mode plugin in a Vite project using Nuxt UI Pro. It shows setting the colorMode option to false in the uiPro plugin configuration.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/6.color-mode/2.vue.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport uiPro from '@nuxt/ui-pro/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    uiPro({\n      colorMode: false\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkbox with Label in Vue/Nuxt\nDESCRIPTION: This snippet shows how to disable the Checkbox using the `disabled` prop. A disabled checkbox cannot be interacted with by the user. When disabled, it can not be checked or unchecked.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - label\nprops:\n  disabled: true\n  label: Check me\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Select with Avatar in Vue\nDESCRIPTION: This example demonstrates how to use the Select component with avatars in the items. The avatar is computed from the 'value' property of the selected item.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n::component-example\n---\ncollapse: true\nname: 'select-items-avatar-example'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Basic InputMenu Usage with String Items in Vue\nDESCRIPTION: Demonstrates how to use the InputMenu component with a v-model directive and an array of string items. It shows the basic setup for creating a dropdown menu with selectable options.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<InputMenu\n  v-model=\"modelValue\"\n  :items=\"['Backlog', 'Todo', 'In Progress', 'Done']\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using CIELab Format with ColorPicker in Vue\nDESCRIPTION: Demonstrates how to configure the ColorPicker to use CIELab format using the format prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ColorPicker v-model=\"modelValue\" format=\"lab\" />\n</template>\n\n<script setup>\nconst modelValue = ref('lab(68.88% -60.41% 32.55%)')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Structured Slots to Modal in Vue.js\nDESCRIPTION: Shows the addition of #header, #body, and #footer slots inside the #content slot for Modal and Slideover components.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n<template>\n- <UModal>\n+ <UModal title=\"Title\" description=\"Description\">\n-   <div class=\"p-4\">\n+   <template #body>\n      <Placeholder class=\"h-48\" />\n+   </template>\n-   </div>\n  </UModal>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Keyboard Key with Value Prop\nDESCRIPTION: Demonstrates using the value prop instead of the default slot to display a keyboard key.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/kbd.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  value: K\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Item Value for Multiple Selection\nDESCRIPTION: TypeScript type annotation showing that AccordionItem[] should be used as the type for the items prop in multiple selection mode.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/accordion.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nAccordionItem[]\n```\n\n----------------------------------------\n\nTITLE: Disabling Nuxt Fonts Module Configuration\nDESCRIPTION: TypeScript configuration to disable the @nuxt/fonts module in Nuxt UI using the nuxt.config.ts file.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/5.fonts.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  ui: {\n    fonts: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Color, Default Value and Label in Vue/Nuxt\nDESCRIPTION: This snippet shows how to change the color of the Checkbox using the `color` prop. It also sets the default value and label. This allows for theming the checkbox according to the application's design.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - label\n  - defaultValue\nprops:\n  color: neutral\n  defaultValue: true\n  label: Check me\n---\n```\n\n----------------------------------------\n\nTITLE: Content Slot Customization in NavigationMenu\nDESCRIPTION: This example demonstrates how to use the '#item-content' slot or the 'slot' property to customize the content of specific items in the NavigationMenu. It includes a note about dynamic width adjustment using CSS classes.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n::component-example\n---\nname: 'navigation-menu-content-slot-example'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Defining User Agent Access Rules in robots.txt\nDESCRIPTION: This snippet sets the user agent access rule for web crawlers. It allows all user agents (*) full access to crawl the website without restrictions.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nuser-agent: *\n```\n\n----------------------------------------\n\nTITLE: Slideover without Overlay\nDESCRIPTION: Illustrates how to remove the overlay from the Slideover using the `overlay` prop.  This is done by setting `overlay` to `false`. A button triggers the Slideover, and a placeholder occupies the body section.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slideover.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"h-full\" />\n```\n\n----------------------------------------\n\nTITLE: Using CMYK Format with ColorPicker in Vue\nDESCRIPTION: Illustrates how to set the ColorPicker to use CMYK format using the format prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ColorPicker v-model=\"modelValue\" format=\"cmyk\" />\n</template>\n\n<script setup>\nconst modelValue = ref('cmyk(100%, 0%, 45.08%, 24.31%)')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack for Nuxt UI Development\nDESCRIPTION: Command to enable Corepack, which is required for package management in the Nuxt UI project.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Running Type Checking for Nuxt UI\nDESCRIPTION: Command to check for TypeScript type errors in the Nuxt UI codebase.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\npnpm run typecheck\n```\n\n----------------------------------------\n\nTITLE: Clearing All Toast Notifications\nDESCRIPTION: Demonstrates how to remove all active toast notifications at once.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-toast.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst toast = useToast()\n\nfunction clearAllToasts() {\n  toast.clear()\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using RGB Format with ColorPicker in Vue\nDESCRIPTION: Demonstrates how to set the ColorPicker to use RGB format using the format prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/color-picker.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ColorPicker v-model=\"modelValue\" format=\"rgb\" />\n</template>\n\n<script setup>\nconst modelValue = ref('rgb(0, 193, 106)')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Inverted Progress Bar in Nuxt UI\nDESCRIPTION: Creates a visually inverted progress bar using the inverted prop. This changes the visual representation of the progress indicator while maintaining the same value tracking.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\ninverted: true\nmodelValue: 25\n```\n\n----------------------------------------\n\nTITLE: Disabling Pagination Controls\nDESCRIPTION: Shows how to disable all pagination controls using the disabled prop, which prevents user interaction with the pagination component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<Pagination v-model:page=\"page\" :total=\"100\" :disabled=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Components in Playground\nDESCRIPTION: Command to run the development server for testing Vue components using the playground.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev:vue\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Locale in Nuxt UI Pro\nDESCRIPTION: This snippet shows how to create a custom locale for a Vue application using Nuxt UI Pro. It uses the defineLocale composable to define a new locale with a name, code, direction, and message pairs.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { Messages } from '@nuxt/ui-pro'\nimport { defineLocale } from '@nuxt/ui/composables/defineLocale.js'\n\nconst locale = defineLocale<Messages>({\n  name: 'My custom locale',\n  code: 'en',\n  dir: 'ltr',\n  messages: {\n    // implement pairs\n  }\n})\n</script>\n\n<template>\n  <UApp :locale=\"locale\">\n    <RouterView />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: VSCode Configuration for ESLint Auto-fix\nDESCRIPTION: JSON configuration for VSCode to enable auto-fix and formatting with ESLint when saving your code, recommended for development with Nuxt UI.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll\": false,\n    \"source.fixAll.eslint\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Locales with Nuxt UI CLI\nDESCRIPTION: Command syntax for creating new locales using the Nuxt UI CLI, requiring a language code and name.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnuxt-ui make locale --code <code> --name <name>\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Select Component\nDESCRIPTION: Demonstrates how to create a disabled Select component using the disabled prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\ndisabled: true\nplaceholder: 'Select status'\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Disabled Slider Implementation\nDESCRIPTION: Renders a disabled slider component\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  disabled: true\n  defaultValue: 50\n```\n\n----------------------------------------\n\nTITLE: Popover Mode Configuration - Vue\nDESCRIPTION: Illustrates how to configure the Popover component's mode to 'hover'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/popover.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"size-48 m-4 inline-flex\" />\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory and Starting Development Server\nDESCRIPTION: These commands first navigate into the newly created project directory (replace `<my-app>` with the actual directory name) and then start the development server using npm. This allows you to view and interact with the application in your web browser during development.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd <my-app>\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Text to Chip with Button in Vue\nDESCRIPTION: Shows how to add text to a Chip component when wrapped around a Button using the text prop, with a value of 5.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/chip.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n:u-button{icon=\"i-lucide-mail\" color=\"neutral\" variant=\"subtle\"}\n```\n\n----------------------------------------\n\nTITLE: Colored Badge in Vue\nDESCRIPTION: Demonstrates how to change the color of a Badge component using the color prop set to neutral.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  color: neutral\nslots:\n  default: Badge\n---\n```\n\n----------------------------------------\n\nTITLE: VSCode Configuration for Tailwind CSS IntelliSense\nDESCRIPTION: Recommended VSCode settings for using Tailwind CSS IntelliSense with Nuxt UI. These settings improve developer experience with proper autocomplete and syntax highlighting.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files.associations\": {\n    \"*.css\": \"tailwindcss\"\n  },\n  \"editor.quickSuggestions\": {\n    \"strings\": \"on\"\n  },\n  \"tailwindCSS.classAttributes\": [\"class\", \"ui\"],\n  \"tailwindCSS.experimental.classRegex\": [\n    [\"ui:\\\\s*{([^)]*)\\\\s*}\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI Package with bun\nDESCRIPTION: This command installs the @nuxt/ui package using the bun package manager. @nuxt/ui provides pre-built UI components and utilities for Vue applications.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add @nuxt/ui\n```\n\n----------------------------------------\n\nTITLE: Dynamic Locale Switching with Nuxt UI Pro\nDESCRIPTION: This snippet demonstrates dynamic language switching in a Vue application using Vue I18n with Nuxt UI Pro. It imports all available locales from the UI Pro package and uses the current locale to set the UApp component's locale.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useI18n } from 'vue-i18n'\nimport * as locales from '@nuxt/ui-pro/locale'\n\nconst { locale } = useI18n()\n</script>\n\n<template>\n  <UApp :locale=\"locales[locale]\">\n    <RouterView />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Textarea with Trailing Icon (Vue)\nDESCRIPTION: Explains how to add a trailing icon inside the Textarea component using the `trailingIcon` prop. The `placeholder`, `size`, and `rows` props are also used to configure the appearance of the Textarea. The `prettier` flag indicates code formatting preference.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_9\n\nLANGUAGE: Vue\nCODE:\n```\n---\nprettier: true\nignore:\n  - placeholder\nprops:\n  trailingIcon: i-lucide-at-sign\n  placeholder: 'Enter your email'\n  size: md\n  rows: 1\n---\n\n```\n\n----------------------------------------\n\nTITLE: Extra Large Size Switch in Vue\nDESCRIPTION: Shows how to change the size of the Switch component using the size prop. Setting size to 'xl' makes the switch larger than the default size.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch size=\"xl\" :default-value=\"true\" label=\"Check me\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Declaring Breadcrumb Items Type in TypeScript\nDESCRIPTION: TypeScript type definitions for Breadcrumb component items, showing the available properties like label, icon, avatar, class, and slot that can be passed to each breadcrumb item.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/breadcrumb.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlabel?: string\n```\n\nLANGUAGE: typescript\nCODE:\n```\nicon?: string\n```\n\nLANGUAGE: typescript\nCODE:\n```\navatar?: AvatarProps\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass?: any\n```\n\nLANGUAGE: typescript\nCODE:\n```\nslot?: string\n```\n\n----------------------------------------\n\nTITLE: Exploring Nuxt UI Documentation Structure\nDESCRIPTION: This snippet shows the directory structure of the documentation part of the Nuxt UI project, which is built as a Nuxt app using @nuxt/content v3 to generate pages from Markdown files.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n├── app/\n│   ├── assets/\n│   ├── components/\n│   │   └── content/\n│   │       └── examples   # Components used in documentation as examples\n│   ├── composables/\n│   └── ...\n├── content/\n│   ├── 1.getting-started\n│   ├── 2.composables\n│   └── 3.components       # Components documentation\n```\n\n----------------------------------------\n\nTITLE: CSS: Default Radius Value\nDESCRIPTION: This CSS snippet defines the default border radius value using the `--ui-radius` CSS variable. This variable is used as the base for the `rounded-*` utilities in Tailwind CSS, allowing for centralized control over border radii.  The default value is 0.25rem.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --ui-radius: 0.25rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Type Stubs for Nuxt UI\nDESCRIPTION: Command to generate TypeScript type stubs for the Nuxt UI project, which is a necessary step before starting development.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev:prepare\n```\n\n----------------------------------------\n\nTITLE: Setting Locale with Nuxt UI Pro\nDESCRIPTION: This snippet shows how to set the locale in a Vue application using the UApp component from Nuxt UI Pro. It imports the French locale from the @nuxt/ui-pro/locale package and applies it to the application.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { fr } from '@nuxt/ui-pro/locale'\n</script>\n\n<template>\n  <UApp :locale=\"fr\">\n    <RouterView />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icon Collection in Vue Template\nDESCRIPTION: Example of using a custom icon from a local collection in a Vue template after setting up the custom collection in the Nuxt config.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UIcon name=\"i-custom-add\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: InputMenu with Object Items in Vue\nDESCRIPTION: Shows how to use the InputMenu with an array of object items. Each item has a label property, allowing for more complex data structures in the dropdown options.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<InputMenu\n  v-model=\"modelValue\"\n  :items=\"[\n    { label: 'Backlog' },\n    { label: 'Todo' },\n    { label: 'In Progress' },\n    { label: 'Done' }\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Slots in CommandPalette (Vue)\nDESCRIPTION: Shows how to use custom slots to customize specific items or groups in the CommandPalette.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Example code not provided in the original content -->\n```\n\n----------------------------------------\n\nTITLE: Multi-Month Calendar Display in Vue\nDESCRIPTION: Shows how to display multiple months in the Calendar component using the numberOfMonths prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#2025-04-23_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Calendar :numberOfMonths=\"3\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Development for Nuxt UI\nDESCRIPTION: Command to start the development server for working on the Nuxt UI documentation located in the docs folder.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\npnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Customizing Component Prefix in Nuxt UI\nDESCRIPTION: Configuration for changing the default prefix of Nuxt UI components. The default prefix is 'U'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui'],\n  css: ['~/assets/css/main.css'],\n  ui: {\n    prefix: 'Nuxt'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading State in Select Component\nDESCRIPTION: Shows how to indicate a loading state in the Select component using the loading prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Backlog'\nloading: true\ntrailing: false\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: PinInput with Placeholder\nDESCRIPTION: Adds a placeholder character to each input field in the PinInput component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UPinInput placeholder=\"○\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: CSS: Customizing Container Width (app/assets/css/main.css)\nDESCRIPTION: This CSS snippet shows how to customize the container width in the `app/assets/css/main.css` file. It imports Tailwind CSS and Nuxt UI (or Nuxt UI Pro), defines a new container size (`--container-8xl`), and then overrides the default value of `--ui-container` to use the new container size. This impacts the Container component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n\n@theme {\n  --container-8xl: 90rem;\n}\n\n:root {\n  --ui-container: var(--container-8xl);\n}\n```\n\n----------------------------------------\n\nTITLE: Input with Custom Size in Vue\nDESCRIPTION: Shows how to change the size of the Input component using the 'size' prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<UInput size=\"xl\" placeholder=\"Search...\" />\n```\n\n----------------------------------------\n\nTITLE: Overriding primary color shade in main.css (Nuxt UI Pro)\nDESCRIPTION: This code snippet demonstrates how to override the default primary color shade in both light and dark modes within the `main.css` file when using Nuxt UI Pro. It imports tailwindcss and nuxt/ui-pro.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui-pro\";\n\n:root {\n  --ui-primary: var(--ui-color-primary-700);\n}\n\n.dark {\n  --ui-primary: var(--ui-color-primary-200);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Nuxt UI Options in vite.config.ts\nDESCRIPTION: This code configures the `ui` option for the Nuxt UI Vite plugin in `vite.config.ts`.  The `ui` option allows you to provide configuration for Nuxt UI, such as theme colors. In this example, the primary color is set to 'green' and the neutral color is set to 'slate'. This customizes the default color scheme of Nuxt UI components.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui({\n      ui: {\n        colors: {\n          primary: 'green',\n          neutral: 'slate'\n        }\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI Dependencies\nDESCRIPTION: Command to install all the necessary dependencies for the Nuxt UI project using pnpm.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Exploring Nuxt UI Module Structure\nDESCRIPTION: This snippet outlines the directory structure of the Nuxt UI module code located in the 'src' folder, showing the organization of components, composables, and theme files.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n├── plugins/\n├── runtime/\n│   ├── components/        # Where all the components are located\n│   │   ├── Accordion.vue\n│   │   ├── Alert.vue\n│   │   └── ...\n│   ├── composables/\n│   ├── locale/\n│   ├── plugins/\n│   ├── types/\n│   ├── utils/\n│   └── vue/\n│       ├── components/\n│       └── plugins/\n├── theme/                 # This where the theme for each component is located\n│   ├── accordion.ts       # Theme for Accordion component\n│   ├── alert.ts\n│   └── ...\n└── module.ts\n```\n\n----------------------------------------\n\nTITLE: Setting primary color to black and white in main.css (Nuxt UI Pro)\nDESCRIPTION: This code snippet demonstrates how to override the primary color to black in light mode and white in dark mode within the `main.css` file when using Nuxt UI Pro. It imports tailwindcss and nuxt/ui-pro.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui-pro\";\n\n:root {\n  --ui-primary: black;\n}\n\n.dark {\n  --ui-primary: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Switch with Label in Vue\nDESCRIPTION: Demonstrates how to add a label to the Switch component using the label prop. The label text 'Check me' will be displayed next to the switch.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch label=\"Check me\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Popover Content Configuration - Vue\nDESCRIPTION: Demonstrates how to configure the Popover content's alignment and side placement using the `content` prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/popover.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"size-48 m-4 inline-flex\" />\n```\n\n----------------------------------------\n\nTITLE: Component Creation Examples with Nuxt UI CLI\nDESCRIPTION: Examples of using the Nuxt UI CLI to create different types of components, including basic components, pro components, prose components, and content components.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Create a basic component\nnuxt-ui make component my-component\n\n# Create a pro component\nnuxt-ui make component page-section --pro\n\n# Create a pro prose component\nnuxt-ui make component heading --pro --prose\n\n# Create a pro content component\nnuxt-ui make component block --pro --content\n\n# Generate only documentation template\nnuxt-ui make component my-component --template=docs\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI Package with npm\nDESCRIPTION: This command installs the @nuxt/ui package using the npm package manager. @nuxt/ui provides pre-built UI components and utilities for Vue applications.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nuxt/ui\n```\n\n----------------------------------------\n\nTITLE: Separator with Icon in Vue\nDESCRIPTION: Example showing how to add an icon to the Separator component. The icon prop is used to display the Nuxt.js icon in the middle of the separator.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/separator.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nclass: 'p-8'\nprops:\n  icon: 'i-simple-icons-nuxtdotjs'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Tooltip with Arrow in Vue\nDESCRIPTION: Demonstrates adding a visual arrow pointer to the tooltip using the 'arrow' prop, which helps indicate the tooltip's target element.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tooltip.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Locale Definition for Nuxt UI\nDESCRIPTION: Example of defining a custom locale using defineLocale with TypeScript support for Nuxt UI.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { Messages } from '@nuxt/ui'\n\nconst locale = defineLocale<Messages>({\n  name: 'My custom locale',\n  code: 'en',\n  dir: 'ltr',\n  messages: {\n    // implement pairs\n  }\n})\n</script>\n\n<template>\n  <UApp :locale=\"locale\">\n    <NuxtPage />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dynamic HTML Direction with Nuxt UI Pro\nDESCRIPTION: This snippet shows how to dynamically set the language and direction attributes on the HTML element based on the current locale using the useHead composable with Nuxt UI Pro. It handles UI directionality for right-to-left languages.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/2.vue.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport { useHead } from '@unhead/vue'\nimport * as locales from '@nuxt/ui-pro/locale'\n\nconst { locale } = useI18n()\n\nconst lang = computed(() => locales[locale.value].code)\nconst dir = computed(() => locales[locale.value].dir)\n\nuseHead({\n  htmlAttrs: {\n    lang,\n    dir\n  }\n})\n</script>\n\n<template>\n  <UApp :locale=\"locales[locale]\">\n    <RouterView />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Loading State\nDESCRIPTION: Shows how to display a loading indicator on the SelectMenu using the loading prop, which is useful for asynchronous operations.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  loading\n  trailing=\"false\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering FormField with Hint in Vue\nDESCRIPTION: Demonstrates how to use the 'hint' prop to display a hint message next to the label in the FormField component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/form-field.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<UInput placeholder=\"Enter your email\" />\n```\n\n----------------------------------------\n\nTITLE: Vertical Progress Bar in Nuxt UI\nDESCRIPTION: Changes the orientation of the progress bar from horizontal to vertical using the orientation prop. A height class is added to ensure proper display of the vertical bar.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\norientation: vertical\nclass: 'h-48'\n```\n\n----------------------------------------\n\nTITLE: Basic Locale Implementation with Nuxt UI\nDESCRIPTION: Demonstrates how to set up basic locale configuration using the @nuxt/ui package's built-in French locale.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { fr } from '@nuxt/ui/locale'\n</script>\n\n<template>\n  <UApp :locale=\"fr\">\n    <NuxtPage />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Nuxt UI Vue plugin in main.ts\nDESCRIPTION: This code snippet registers the Nuxt UI Vue plugin in the `main.ts` file of a Vue application. This makes Nuxt UI components available for use in your Vue templates.  It also sets up Vue Router.\nSOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createRouter, createWebHistory } from 'vue-router'\nimport ui from '@nuxt/ui/vue-plugin'\nimport App from './App.vue'\n\nconst app = createApp(App)\n\nconst router = createRouter({\n  routes: [],\n  history: createWebHistory()\n})\n\napp.use(router)\napp.use(ui)\n\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Vertical Slider Configuration\nDESCRIPTION: Changes the slider orientation to vertical\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  orientation: vertical\n  defaultValue: 50\n  class: 'h-48'\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Status Display in Nuxt UI\nDESCRIPTION: Enables displaying the current progress value above the bar using the status prop set to true. The component shows the numeric progress at 50%.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 50\nstatus: true\n```\n\n----------------------------------------\n\nTITLE: Starting the Nuxt Development Server\nDESCRIPTION: Terminal commands to navigate to the project directory and start the development server.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd <my-app>\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Modal without Transition - Vue\nDESCRIPTION: Demonstrates how to disable the transition animation of the Modal component using the `transition` prop. Includes a button to open the modal and a placeholder in its body.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/modal.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n\n#body\n:placeholder{class=\"h-48\"}\n```\n\n----------------------------------------\n\nTITLE: Setting NavigationMenu Variant in Vue\nDESCRIPTION: Demonstrates how to use the 'variant' prop to change the appearance of the NavigationMenu. This example uses the 'link' variant and disables the highlight feature.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NavigationMenu\n    color=\"neutral\"\n    variant=\"link\"\n    :highlight=\"false\"\n    :items=\"items\"\n    class=\"w-full\"\n  />\n</template>\n\n<script setup>\n// Items array definition would go here\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Mode Module in Nuxt UI\nDESCRIPTION: Configuration for disabling the @nuxt/color-mode module in Nuxt UI. The module is enabled by default.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui'],\n  css: ['~/assets/css/main.css'],\n  ui: {\n    colorMode: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Leading Icon to Select Component\nDESCRIPTION: Example of adding a leading icon to the Select component using the icon prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Backlog'\nicon: 'i-lucide-search'\nsize: md\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: Multi-Thumb Range Slider with Minimum Steps\nDESCRIPTION: Implements a range slider with multiple thumbs and minimum distance between thumbs\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  modelValue: [25, 50, 75]\n  minStepsBetweenThumbs: 10\n```\n\n----------------------------------------\n\nTITLE: Customizing Trailing Icon in Select Component\nDESCRIPTION: Shows how to customize the trailing icon displayed in the Select component using the trailingIcon prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 'Backlog'\ntrailingIcon: 'i-lucide-arrow-down'\nsize: md\nitems:\n  - Backlog\n  - Todo\n  - In Progress\n  - Done\nclass: 'w-48'\n```\n\n----------------------------------------\n\nTITLE: CSS: Customizing Base Radius (app/assets/css/main.css - Pro Version)\nDESCRIPTION: This CSS snippet shows how to customize the base radius value in the `app/assets/css/main.css` file using Nuxt UI Pro. It imports Tailwind CSS and Nuxt UI Pro and then overrides the default value of `--ui-radius` to `0.5rem`. This will affect all components using the `rounded-*` utilities.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui-pro\";\n\n:root {\n  --ui-radius: 0.5rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Custom Animation in Nuxt UI\nDESCRIPTION: Changes the animation style of the progress bar using the animation prop. This example uses the 'swing' animation instead of the default 'carousel'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\nanimation: swing\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Icon Collections in Nuxt Config\nDESCRIPTION: Configuration for setting up custom icon collections in the Nuxt config file, allowing use of local SVG files as icons.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/4.icons/1.nuxt.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui'],\n  css: ['~/assets/css/main.css'],\n  icon: {\n    customCollections: [{\n      prefix: 'custom',\n      dir: './assets/icons'\n    }]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Render Card Component with Slots in Vue\nDESCRIPTION: This Vue code renders the Card component using the slots defined in the theme. It uses the `ui` prop to apply classes to the root, header, body, and footer elements. The `<slot>` elements allow content to be inserted into the different sections of the card.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_31\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div :class=\"ui.root({ class: [props.class, props.ui?.root] })\">\n    <div :class=\"ui.header({ class: props.ui?.header })\">\n      <slot name=\"header\" />\n    </div>\n\n    <div :class=\"ui.body({ class: props.ui?.body })\">\n      <slot />\n    </div>\n\n    <div :class=\"ui.footer({ class: props.ui?.footer })\">\n      <slot name=\"footer\" />\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adjusting DropdownMenu Size in Vue\nDESCRIPTION: This example demonstrates how to control the size of the DropdownMenu using the 'size' prop. It shows how to create an extra-large sized dropdown menu.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/dropdown-menu.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<UButton size=\"xl\" label=\"Open\" icon=\"i-lucide-menu\" color=\"neutral\" variant=\"outline\" />\n```\n\n----------------------------------------\n\nTITLE: Table with Row Selection Event in Vue\nDESCRIPTION: Shows how to handle row selection events in the Table component using the @select listener.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#2025-04-23_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<Table\n  :columns=\"columns\"\n  :data=\"data\"\n  @select=\"onSelect\"\n/>\n\n<script setup>\nfunction onSelect (row) {\n  console.log('Selected row:', row.original)\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic ButtonGroup Usage in Vue\nDESCRIPTION: Demonstrates the basic usage of ButtonGroup component with two buttons inside.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/button-group.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<UButton color=\"neutral\" variant=\"subtle\" label=\"Button\" />\n<UButton color=\"neutral\" variant=\"outline\" icon=\"i-lucide-chevron-down\" />\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Indicator, Variant, Default Value and Label in Vue/Nuxt\nDESCRIPTION: This snippet demonstrates customizing the position of the checkbox indicator using the `indicator` prop. It also sets the variant and default value.  The indicator is the visual element that changes based on the checkbox's checked state.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - label\n  - defaultValue\nprops:\n  indicator: 'end'\n  variant: 'card'\n  defaultValue: true\n  label: Check me\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading State in CommandPalette\nDESCRIPTION: Examples of implementing and customizing the loading state for the CommandPalette component. This includes setting the loading prop and customizing the loading icon.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  loading: true\n  loadingIcon: 'i-lucide-repeat-2'\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Arrow Display\nDESCRIPTION: Shows how to display an arrow on the SelectMenu dropdown using the arrow prop, which adds a visual indicator pointing to the trigger element.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  arrow\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Hiding Month Controls in Calendar\nDESCRIPTION: Illustrates how to hide the month controls in the Calendar component by setting the month-controls prop to false.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Calendar :month-controls=\"false\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: RadioGroup with Indicator Customization - Vue\nDESCRIPTION: Illustrates how to change the position of the indicator using the `indicator` prop and applies the card variant. You can set it to 'start' (default) or 'end'. The initial value is set to 'System'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/radio-group.md#_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  indicator: 'end'\n  variant: 'card'\n  defaultValue: 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n```\n\n----------------------------------------\n\nTITLE: Custom Colored Switch in Vue\nDESCRIPTION: Demonstrates how to change the color of the Switch component using the color prop. Setting color to 'neutral' changes the Switch from the default color to a neutral tone.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch color=\"neutral\" :default-value=\"true\" label=\"Check me\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Popover Delay Configuration - Vue\nDESCRIPTION: Shows how to configure open and close delays for the Popover component when using the 'hover' mode.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/popover.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<Placeholder class=\"size-48 m-4 inline-flex\" />\n```\n\n----------------------------------------\n\nTITLE: Using src Prop with Avatar Component in Vue\nDESCRIPTION: Example showing how to set an image URL using the src prop in the Avatar component. The component renders either via NuxtImg or falls back to a standard img element.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  src: 'https://github.com/benjamincanac.png'\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Nuxt UI Collapsible Component in Vue\nDESCRIPTION: Demonstrates the basic usage of the Collapsible component with a Button in the default slot and a Placeholder in the content slot.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/collapsible.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" trailing-icon=\"i-lucide-chevron-down\" block />\n\n#content\n<Placeholder class=\"h-48\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Component Props in Vue.js\nDESCRIPTION: Demonstrates the renaming of 'options' and 'links' props to 'items' for consistency across multiple components.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n<template>\n- <USelect :options=\"countries\" />\n+ <USelect :items=\"countries\" />\n\n- <UHorizontalNavigation :links=\"links\" />\n+ <UNavigationMenu :items=\"links\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Chip Color with Button in Vue\nDESCRIPTION: Shows how to change the color of a Chip component when wrapped around a Button component using the color prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/chip.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n:u-button{icon=\"i-lucide-mail\" color=\"neutral\" variant=\"subtle\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Mode Plugin in Vite Config for Nuxt UI\nDESCRIPTION: This configuration snippet shows how to disable the color mode plugin in a Vite project using Nuxt UI. It demonstrates setting the colorMode option to false in the ui plugin configuration.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/6.color-mode/2.vue.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui({\n      colorMode: false\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Pagination Without Navigation Controls\nDESCRIPTION: Shows how to hide the first, previous, next, and last navigation buttons by setting show-controls to false while keeping the edge pages visible.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<Pagination v-model:page=\"page\" :show-controls=\"false\" :show-edges=\"true\" :total=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: CSS: Customizing Container Width (app/assets/css/main.css - Pro Version)\nDESCRIPTION: This CSS snippet shows how to customize the container width in the `app/assets/css/main.css` file, utilizing Nuxt UI Pro. It imports Tailwind CSS and Nuxt UI Pro, defines a new container size (`--container-8xl`), and then overrides the default value of `--ui-container` to use the new container size. It affects the Container component's width.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui-pro\";\n\n@theme {\n  --container-8xl: 90rem;\n}\n\n:root {\n  --ui-container: var(--container-8xl);\n}\n```\n\n----------------------------------------\n\nTITLE: CSS: Default Container Width\nDESCRIPTION: This CSS snippet defines the default container width using the `--ui-container` CSS variable. It references a Tailwind CSS container size (in this case `--container-7xl`), which provides a consistent maximum width for the [Container](/components/container) component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --ui-container: var(--container-7xl);\n}\n```\n\n----------------------------------------\n\nTITLE: Tooltip with Custom Delay in Vue\nDESCRIPTION: Demonstrates setting a custom delay duration (0 in this case) for tooltip appearance using the 'delayDuration' prop, making the tooltip appear instantly.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tooltip.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Colors in Vue\nDESCRIPTION: These TypeScript snippets demonstrate how to add a custom color alias in a Vue application using `vite.config.ts`.  It defines a `tertiary` color alias and registers it within the UI theme configuration using the nuxt ui vite plugin.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui({\n      ui: {\n        colors: {\n          tertiary: 'indigo'\n        }\n      },\n      theme: {\n        colors: [\n          'primary',\n          'secondary',\n          'tertiary',\n          'info',\n          'success',\n          'warning',\n          'error'\n        ]\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Table with Loading State in Vue\nDESCRIPTION: Demonstrates how to display a loading state for the Table component using the loading, loadingColor, and loadingAnimation props.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/table.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<Table\n  :loading=\"true\"\n  loading-color=\"primary\"\n  loading-animation=\"carousel\"\n  :data=\"data\"\n  class=\"flex-1\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring DropdownMenu Content Alignment in Vue\nDESCRIPTION: This example shows how to control the DropdownMenu content rendering, including alignment and positioning. It demonstrates the use of the 'content' prop to adjust the menu's appearance.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/dropdown-menu.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" icon=\"i-lucide-menu\" color=\"neutral\" variant=\"outline\" />\n```\n\n----------------------------------------\n\nTITLE: Hiding Year Controls in Calendar\nDESCRIPTION: Demonstrates how to hide the year controls in the Calendar component by setting the year-controls prop to false.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#2025-04-23_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Calendar :year-controls=\"false\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using CommandPalette in Popover, Modal, and Drawer (Vue)\nDESCRIPTION: Examples of using the CommandPalette component within Popover, Modal, and Drawer components.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Example code not provided in the original content -->\n```\n\n----------------------------------------\n\nTITLE: Setting Max Value for Progress Bar in Nuxt UI\nDESCRIPTION: Sets a maximum value for the Progress component using the max prop. This example shows a progress bar at value 3 with a maximum of 4.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/progress.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\nmodelValue: 3\nmax: 4\n```\n\n----------------------------------------\n\nTITLE: Switch with Custom Loading Icon in Vue\nDESCRIPTION: Shows how to customize the loading icon of the Switch component using the loadingIcon prop. This example uses a different icon 'i-lucide-repeat-2' instead of the default loading icon.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/switch.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Switch\n    :loading=\"true\"\n    loading-icon=\"i-lucide-repeat-2\"\n    :default-value=\"true\"\n    label=\"Check me\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using UApp Component in Nuxt Application\nDESCRIPTION: An example showing how to implement the UApp component at the root of a Nuxt application to provide global configuration to all components. The component wraps the NuxtPage component to apply configurations to the entire application.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/0.app.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UApp>\n    <NuxtPage />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Typed Items - Vue\nDESCRIPTION: Implementation of SelectMenu with typed items including separators and labels to organize the menu structure.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n{\n  modelValue: 'Apple',\n  items: [\n    { type: 'label', label: 'Fruits' },\n    'Apple',\n    'Banana',\n    'Blueberry',\n    'Grapes',\n    'Pineapple',\n    { type: 'separator' },\n    { type: 'label', label: 'Vegetables' },\n    'Aubergine',\n    'Broccoli',\n    'Carrot',\n    'Courgette',\n    'Leek'\n  ],\n  class: 'w-48'\n}\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Custom Color\nDESCRIPTION: Demonstrates how to change the ring color of the SelectMenu when it's focused using the color prop. The highlight prop is used to show the focus state.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  color=\"neutral\"\n  highlight\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip with Text in Vue\nDESCRIPTION: Demonstrates implementing a basic tooltip with text content using the UButton component as trigger. Uses the 'text' prop to set the tooltip content.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tooltip.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Active Page Button Color\nDESCRIPTION: Demonstrates setting a custom color for the active page button using the active-color prop, changing it from the default primary to neutral.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<Pagination v-model:page=\"page\" active-color=\"neutral\" :total=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Object Items\nDESCRIPTION: Shows how to use the SelectMenu with an array of objects containing label properties. The component expects the whole object to be passed to v-model by default.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: PinInput with Default Value\nDESCRIPTION: Shows how to initialize a PinInput with default values when state control is not needed.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UPinInput :default-value=\"defaultValue\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Usage with v-model in Vue\nDESCRIPTION: Demonstrates how to use the Calendar component with v-model directive to control the selected date.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Calendar v-model=\"modelValue\" />\n</template>\n\n<script setup>\nconst modelValue = ref([2022, 2, 3])\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Control Colors\nDESCRIPTION: Demonstrates setting the color of inactive pagination controls using the color prop. Changes from the default neutral to primary color in this example.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<Pagination v-model:page=\"page\" color=\"primary\" :total=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Separator Component in Vue\nDESCRIPTION: Basic implementation of the Separator component to separate content. This shows the default horizontal orientation without any custom props.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/separator.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nclass: 'p-8'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Shortcut Configuration Interface Definition\nDESCRIPTION: TypeScript interface defining the structure for shortcut configuration with handler and optional input focus handling.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/define-shortcuts.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ShortcutConfig {\n  handler: () => void\n  usingInput?: boolean | string\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Shortcuts from DropdownMenu Items in Vue and TypeScript\nDESCRIPTION: This code snippet demonstrates how to extract keyboard shortcuts from DropdownMenu items and use them with the defineShortcuts composable. It shows how to set up items with keyboard shortcuts and handle their selection.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/dropdown-menu.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DropdownMenuItem } from '@nuxt/ui'\n\nconst items: DropdownMenuItem[] = [{\n  label: 'Invite users',\n  icon: 'i-lucide-user-plus',\n  children: [{\n    label: 'Invite by email',\n    icon: 'i-lucide-send-horizontal',\n    kbds: ['meta', 'e'],\n    onSelect() {\n      console.log('Invite by email clicked')\n    }\n  }, {\n    label: 'Invite by link',\n    icon: 'i-lucide-link',\n    kbds: ['meta', 'i'],\n    onSelect() {\n      console.log('Invite by link clicked')\n    }\n  }]\n}, {\n  label: 'New team',\n  icon: 'i-lucide-plus',\n  kbds: ['meta', 'n'],\n  onSelect() {\n    console.log('New team clicked')\n  }\n}]\n\ndefineShortcuts(extractShortcuts(items))\n```\n\n----------------------------------------\n\nTITLE: Vertical Orientation Separator in Vue\nDESCRIPTION: Example showing how to change the Separator's orientation to vertical using the orientation prop. Additional class is applied to set the height to ensure the vertical separator is visible.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/separator.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nignore:\n  - class\nclass: 'p-8'\nprops:\n  orientation: vertical\n  class: 'h-48'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Disabled Tooltip in Vue\nDESCRIPTION: Shows how to disable a tooltip using the 'disabled' prop, preventing it from appearing when the user interacts with the trigger element.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tooltip.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Grouped Items\nDESCRIPTION: Demonstrates how to create a SelectMenu with grouped items by passing an array of arrays. This allows displaying separated groups of items in the dropdown.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Controlling Unmounting Behavior in NavigationMenu\nDESCRIPTION: This snippet demonstrates how to use the 'unmount-on-hide' prop to control the content unmounting behavior of the NavigationMenu. By default, this prop is set to 'true', but setting it to 'false' keeps the content in the DOM even when hidden.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\ncollapse: true\nignore:\n  - items\n  - arrow\n  - class\nexternal:\n  - items\nexternalTypes:\n  - NavigationMenuItem[]\nprops:\n  unmountOnHide: false\n  items:\n    - label: Guide\n      icon: i-lucide-book-open\n      to: /getting-started\n      children:\n        - label: Introduction\n          description: Fully styled and customizable components for Nuxt.\n          icon: i-lucide-house\n        - label: Installation\n          description: Learn how to install and configure Nuxt UI in your application.\n          icon: i-lucide-cloud-download\n        - label: 'Icons'\n          icon: 'i-lucide-smile'\n          description: 'You have nothing to do, @nuxt/icon will handle it automatically.'\n        - label: 'Colors'\n          icon: 'i-lucide-swatch-book'\n          description: 'Choose a primary and a neutral color from your Tailwind CSS theme.'\n        - label: 'Theme'\n          icon: 'i-lucide-cog'\n          description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'\n    - label: Composables\n      icon: i-lucide-database\n      to: /composables\n      children:\n        - label: defineShortcuts\n          icon: i-lucide-file-text\n          description: Define shortcuts for your application.\n          to: /composables/define-shortcuts\n        - label: useOverlay\n          icon: i-lucide-file-text\n          description: Display a modal/slideover within your application.\n          to: /composables/use-overlay\n        - label: useToast\n          icon: i-lucide-file-text\n          description: Display a toast within your application.\n          to: /composables/use-toast\n    - label: Components\n      icon: i-lucide-box\n      to: /components\n      active: true\n      children:\n        - label: Link\n          icon: i-lucide-file-text\n          description: Use NuxtLink with superpowers.\n          to: /components/link\n        - label: Modal\n          icon: i-lucide-file-text\n          description: Display a modal within your application.\n          to: /components/modal\n        - label: NavigationMenu\n          icon: i-lucide-file-text\n          description: Display a list of links.\n          to: /components/navigation-menu\n        - label: Pagination\n          icon: i-lucide-file-text\n          description: Display a list of pages.\n          to: /components/pagination\n        - label: Popover\n          icon: i-lucide-file-text\n          description: Display a non-modal dialog that floats around a trigger element.\n          to: /components/popover\n        - label: Progress\n          icon: i-lucide-file-text\n          description: Show a horizontal bar to indicate task progression.\n          to: /components/progress\n  class: 'w-full justify-center'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Special Keys Configuration\nDESCRIPTION: Shows the available special key mappings that can be used with the value prop, including platform-specific keys like meta (⌘ on macOS, ⊞ on other platforms).\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/kbd.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  value: meta\nitems:\n  value:\n    - meta\n    - win\n    - command\n    - shift\n    - ctrl\n    - option\n    - alt\n    - enter\n    - delete\n    - backspace\n    - escape\n    - tab\n    - capslock\n    - arrowup\n    - arrowright\n    - arrowdown\n    - arrowleft\n    - pageup\n    - pagedown\n    - home\n    - end\n---\n```\n\n----------------------------------------\n\nTITLE: Adjusting Pagination Control Size\nDESCRIPTION: Demonstrates how to change the size of all pagination controls using the size prop, increasing it from the default medium (md) to extra large (xl).\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<Pagination v-model:page=\"page\" size=\"xl\" :total=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Replacing 'click' with 'onClick' in Vue.js Component Items\nDESCRIPTION: Shows the replacement of the 'click' field with the native Vue 'onClick' event in component items.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n<script setup lang=\"ts\">\nconst items = [{\n  label: 'Edit',\n-  click: () => {\n+  onClick: () => {\n    console.log('Edit')\n  }\n}]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Nuxt UI Pro in CSS\nDESCRIPTION: Update the main CSS file to import both Tailwind CSS and Nuxt UI Pro, ensuring proper styling integration.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui-pro\";\n```\n\n----------------------------------------\n\nTITLE: Listening to Open State in CommandPalette (Vue)\nDESCRIPTION: Demonstrates how to listen to the update:open event when using the close prop in CommandPalette.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Example code not provided in the original content -->\n```\n\n----------------------------------------\n\nTITLE: Multiple Date Selection Calendar in Vue\nDESCRIPTION: Illustrates how to use the Calendar component for selecting multiple dates using the multiple prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/calendar.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <Calendar v-model=\"modelValue\" :multiple=\"true\" />\n</template>\n\n<script setup>\nconst modelValue = ref([[2022, 2, 4], [2022, 2, 6], [2022, 2, 8]])\n</script>\n```\n\n----------------------------------------\n\nTITLE: PinInput with Subtle Variant\nDESCRIPTION: Changes the visual variant of the PinInput component to 'subtle' for a different appearance.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UPinInput color=\"neutral\" variant=\"subtle\" :highlight=\"false\" placeholder=\"○\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Nuxt UI in CSS\nDESCRIPTION: Update the main CSS file to import both Tailwind CSS and Nuxt UI, ensuring proper styling integration.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n```\n\n----------------------------------------\n\nTITLE: Updating Component Theming in App Config\nDESCRIPTION: Update the component theming configuration to use the new Tailwind Variants API structure with slots and defaultVariants.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nexport default defineAppConfig({\n   ui: {\n     button: {\n-       font: 'font-bold',\n-       default: {\n-         size: 'md',\n-         color: 'primary'\n-       }\n+       slots: {\n+         base: 'font-medium'\n+       },\n+       defaultVariants: {\n+         size: 'md',\n+         color: 'primary'\n+       }\n     }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Ignore Filter in CommandPalette (Vue)\nDESCRIPTION: Shows how to use the ignoreFilter field to disable internal search and implement custom search logic.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Example code not provided in the original content -->\n```\n\n----------------------------------------\n\nTITLE: Solid Variant Keyboard Key\nDESCRIPTION: Example of using the variant prop to change the visual style of the keyboard key to solid.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/kbd.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  variant: solid\nslots:\n  default: K\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Chip Usage with Button in Vue\nDESCRIPTION: Demonstrates basic usage of the Chip component by wrapping a Button component to display an indicator.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/chip.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n:u-button{icon=\"i-lucide-mail\" color=\"neutral\" variant=\"subtle\"}\n```\n\n----------------------------------------\n\nTITLE: Controlling Search Term in CommandPalette (Vue)\nDESCRIPTION: Shows how to control the search term in the CommandPalette using v-model:search-term directive.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/command-palette.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Example code not provided in the original content -->\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Keyboard Key\nDESCRIPTION: Demonstrates using custom CSS classes to override the default styles of the keyboard key component.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/kbd.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  class: 'font-bold rounded-full'\n  variant: subtle\nslots:\n  default: K\n---\n```\n\n----------------------------------------\n\nTITLE: Separator with Text Label in Vue\nDESCRIPTION: Implementation of the Separator component with a text label displayed in the middle. The label prop is used to add 'Hello World' text to the separator.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/separator.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nclass: 'p-8'\nprops:\n  label: 'Hello World'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS and Nuxt UI in CSS\nDESCRIPTION: This CSS code imports Tailwind CSS and Nuxt UI styles into your application.  It allows you to use Tailwind CSS utility classes and Nuxt UI's pre-styled components.\nSOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n```\n\n----------------------------------------\n\nTITLE: Configure Nuxt UI Prefix in vite.config.ts\nDESCRIPTION: This code configures the `prefix` option for the Nuxt UI Vite plugin in `vite.config.ts`.  The `prefix` option allows you to change the prefix of the components.  In this example, the prefix is set to 'Nuxt', meaning components would be used like `<NuxtButton>` instead of `<UButton>`. This is useful for avoiding naming conflicts or for customizing the component naming convention.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui({\n      prefix: 'Nuxt'\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Single Toast Notification\nDESCRIPTION: Example of removing a specific toast notification using its ID.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/2.composables/use-toast.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst toast = useToast()\n\nfunction removeToast(id: string | number) {\n  toast.remove(id)\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Large Badge in Vue\nDESCRIPTION: Creates an extra large (xl) Badge component by setting the size prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/badge.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  size: xl\nslots:\n  default: Badge\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawer Wrapper in Vue Layout\nDESCRIPTION: Example of how to set up the drawer wrapper in the main app layout for scaling background functionality.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/drawer.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UApp>\n    <div class=\"bg-default\" data-vaul-drawer-wrapper>\n      <NuxtLayout>\n        <NuxtPage />\n      </NuxtLayout>\n    </div>\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Large Size Keyboard Key\nDESCRIPTION: Shows how to modify the size of the keyboard key using the size prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/kbd.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n---\nprops:\n  size: lg\nslots:\n  default: K\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Chip Size with Button in Vue\nDESCRIPTION: Demonstrates changing the size of a Chip component when wrapped around a Button using the size prop set to 3xl.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/chip.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n:u-button{icon=\"i-lucide-mail\" color=\"neutral\" variant=\"subtle\"}\n```\n\n----------------------------------------\n\nTITLE: Configure Dynamic Color Aliases in vite.config.ts\nDESCRIPTION: This code configures the `theme.colors` option for the Nuxt UI Vite plugin in `vite.config.ts`. The `theme.colors` option allows you to define the dynamic color aliases used to generate components theme. In this example, only 'primary' and 'error' are included. This limits the available colors for theming and customizing Nuxt UI components.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui({\n      theme: {\n        colors: ['primary', 'error']\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Textarea Rows Configuration (Vue)\nDESCRIPTION: Shows how to set the number of rows for the Textarea component using the `rows` prop. The default value is 3.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/textarea.md#_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n---\nprops:\n  rows: 12\n---\n\n```\n\n----------------------------------------\n\nTITLE: Separator with Avatar in Vue\nDESCRIPTION: Example showing how to add an avatar image to the Separator component. The avatar prop is used to display the Nuxt logo from GitHub in the middle of the separator.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/separator.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nprettier: true\nclass: 'p-8'\nprops:\n  avatar:\n    src: 'https://github.com/nuxt.png'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Defining TreeItem Type Properties in TypeScript\nDESCRIPTION: Outlines the available properties for items in the Tree component, including icons, labels, expansion state, and event handlers.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tree.md#2025-04-21_snippet_0\n\nLANGUAGE: ts-type\nCODE:\n```\nicon?: string\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nlabel?: string\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ntrailingIcon?: string\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ndefaultExpanded?: boolean\n```\n\nLANGUAGE: ts-type\nCODE:\n```\ndisabled?: boolean\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nvalue?: string\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nslot?: string\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nchildren?: TreeItem[]\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nonToggle?(e: Event): void\n```\n\nLANGUAGE: ts-type\nCODE:\n```\nonSelect?(e?: Event): void\n```\n\n----------------------------------------\n\nTITLE: Vue Template: Text Color Variations\nDESCRIPTION: This Vue template demonstrates the usage of the defined neutral color variables as Tailwind CSS classes. It displays different text variations, such as dimmed, muted, toned, default, highlighted, and inverted, by applying corresponding classes to the `<span>` elements. It requires Tailwind CSS and Nuxt UI to be properly configured.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <span class=\"text-dimmed\">Dimmed</span>\n  <span class=\"text-muted\">Muted</span>\n  <span class=\"text-toned\">Toned</span>\n  <span class=\"text-default\">Text</span>\n  <span class=\"text-highlighted\">Highlighted</span>\n  <span class=\"text-inverted bg-inverted\">Inverted</span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI Pro Package with Package Managers\nDESCRIPTION: Commands to install the latest version of Nuxt UI Pro using different package managers including pnpm, yarn, npm, and bun.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @nuxt/ui-pro\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @nuxt/ui-pro\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nuxt/ui-pro\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @nuxt/ui-pro\n```\n\n----------------------------------------\n\nTITLE: CheckboxGroup with Size\nDESCRIPTION: Example of CheckboxGroup usage with a specific size. The `size` prop is used to change the size of the CheckboxGroup.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox-group.md#_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nprettier: true\nignore:\n  - defaultValue\n  - items\nexternal:\n  - items\nexternalTypes:\n  - CheckboxGroupItem[]\nitems:\n  variant:\n    - list\n    - card\nprops:\n  size: 'xl'\n  variant: 'list'\n  defaultValue:\n    - 'System'\n  items:\n    - 'System'\n    - 'Light'\n    - 'Dark'\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Disabled Nuxt UI Collapsible Component in Vue\nDESCRIPTION: Illustrates how to disable the Collapsible component using the disabled prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/collapsible.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" trailing-icon=\"i-lucide-chevron-down\" block />\n\n#content\n<Placeholder class=\"h-48\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuxt UI Project with Starter Template\nDESCRIPTION: Terminal command to create a new Nuxt project with the UI template. This sets up a project with Nuxt UI pre-configured.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi init -t ui <my-app>\n```\n\n----------------------------------------\n\nTITLE: Disabling DropdownMenu in Vue\nDESCRIPTION: This snippet shows how to disable the DropdownMenu using the 'disabled' prop. It demonstrates how to create a non-interactive dropdown menu.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/dropdown-menu.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<UButton label=\"Open\" icon=\"i-lucide-menu\" color=\"neutral\" variant=\"outline\" />\n```\n\n----------------------------------------\n\nTITLE: SelectMenu with Custom Loading Icon\nDESCRIPTION: Demonstrates how to customize the loading icon displayed when the SelectMenu is in a loading state using the loading-icon prop.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<SelectMenu\n  v-model=\"modelValue\"\n  loading\n  loading-icon=\"i-lucide-repeat-2\"\n  :items=\"items\"\n  class=\"w-48\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Min/Max Range Slider Configuration\nDESCRIPTION: Configuration for setting minimum and maximum values of the slider\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  min: 0\n  max: 50\n  defaultValue: 50\n```\n\n----------------------------------------\n\nTITLE: Large Size Slider Configuration\nDESCRIPTION: Changes the size of the slider to extra large\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  size: xl\n  defaultValue: 50\n```\n\n----------------------------------------\n\nTITLE: Colored Slider Implementation\nDESCRIPTION: Customizes the slider color using the color prop\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/slider.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\nprops:\n  color: neutral\n  defaultValue: 50\n```\n\n----------------------------------------\n\nTITLE: InputMenu with Grouped Items in Vue\nDESCRIPTION: Demonstrates how to create an InputMenu with grouped items using nested arrays. This allows for categorization of options within the dropdown.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/input-menu.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<InputMenu\n  v-model=\"modelValue\"\n  :items=\"[\n    ['Apple', 'Banana', 'Blueberry', 'Grapes', 'Pineapple'],\n    ['Aubergine', 'Broccoli', 'Carrot', 'Courgette', 'Leek']\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Color Configuration in App Config\nDESCRIPTION: Move color configuration into a dedicated colors object within the UI configuration in app.config.ts.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\nexport default defineAppConfig({\n  ui: {\n-   primary: 'green',\n-   gray: 'cool'\n+   colors: {\n+     primary: 'green',\n+     neutral: 'slate'\n+   }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Limiting Displayed Avatars in AvatarGroup\nDESCRIPTION: This snippet demonstrates how to use the 'max' prop to limit the number of avatars displayed to 2, with the rest shown as a '+X' avatar.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/avatar-group.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n:u-avatar{src=\"https://github.com/benjamincanac.png\" alt=\"Benjamin Canac\"}\n:u-avatar{src=\"https://github.com/romhml.png\" alt=\"Romain Hamel\"}\n:u-avatar{src=\"https://github.com/noook.png\" alt=\"Neil Richter\"}\n```\n\n----------------------------------------\n\nTITLE: Migrating to useOverlay Composable in Vue.js\nDESCRIPTION: Shows the replacement of useModal and useSlideover composables with the more generic useOverlay composable.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ModalExampleComponent } from '#components'\n\n- const modal = useModal()\n+ const overlay = useOverlay()\n\n- modal.open(ModalExampleComponent)\n+ const modal = overlay.create(ModalExampleComponent)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationMenu Child Item Types in TypeScript\nDESCRIPTION: This snippet defines the types for child items in the NavigationMenu, which are used to create submenus. It includes properties for labels, descriptions, icons, and more.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/navigation-menu.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n- `label: string`\n- `description?: string`\n- `icon?: string`\n- `class?: any`\n- `onSelect?(e: Event): void`\n```\n\n----------------------------------------\n\nTITLE: Updating Nuxt Configuration for UI Pro\nDESCRIPTION: Replace the extends configuration with modules configuration for Nuxt UI Pro, as it's no longer implemented as a layer.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nexport default defineNuxtConfig({\n-  extends: ['@nuxt/ui-pro'],\n-  modules: ['@nuxt/ui']\n+  modules: ['@nuxt/ui-pro']\n})\n```\n\n----------------------------------------\n\nTITLE: CSS: Customizing Base Radius (app/assets/css/main.css)\nDESCRIPTION: This CSS snippet shows how to customize the base radius value in the `app/assets/css/main.css` file. It imports Tailwind CSS and Nuxt UI (or Nuxt UI Pro) and then overrides the default value of `--ui-radius` to `0.5rem`. This will affect all components using the `rounded-*` utilities.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n\n:root {\n  --ui-radius: 0.5rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawer Wrapper in Nuxt Config\nDESCRIPTION: Configuration settings in nuxt.config.ts to enable drawer wrapper functionality at the root level.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/drawer.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  app: {\n    rootAttrs: {\n      'data-vaul-drawer-wrapper': '',\n      'class': 'bg-default'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enable Inertia.js Compatibility in vite.config.ts\nDESCRIPTION: This code enables compatibility with Inertia.js within the Nuxt UI Vite plugin configuration. Setting `inertia` to `true` ensures that Nuxt UI components will work seamlessly with Inertia.js, using Inertia's `InertiaLink` component instead of `RouterLink` for navigation.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui({\n      inertia: true\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: PinInput with Extra Large Size\nDESCRIPTION: Increases the size of the PinInput component by setting the size prop to 'xl'.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UPinInput size=\"xl\" placeholder=\"○\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabled SelectMenu Implementation - Vue\nDESCRIPTION: Example showing how to implement a disabled SelectMenu component with a placeholder and predefined items list.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/select-menu.md#2025-04-21_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n{\n  disabled: true,\n  placeholder: 'Select status',\n  items: [\n    'Backlog',\n    'Todo', \n    'In Progress',\n    'Done'\n  ],\n  class: 'w-48'\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended VSCode Settings for Tailwind CSS IntelliSense\nDESCRIPTION: These settings are recommended for use with the Tailwind CSS IntelliSense extension in VSCode. They provide file association for CSS files, enable quick suggestions for strings, specify class attributes, and define regular expressions for Tailwind CSS classes.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files.associations\": {\n    \"*.css\": \"tailwindcss\"\n  },\n  \"editor.quickSuggestions\": {\n    \"strings\": \"on\"\n  },\n  \"tailwindCSS.classAttributes\": [\"class\", \"ui\"],\n  \"tailwindCSS.experimental.classRegex\": [\n    [\"ui:\\\\s*{([^)]*)\\\\s*}\", \"(?:'|\"|`)([^']*)(?:'|\"|`)\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Sibling Count in Pagination\nDESCRIPTION: Shows how to control the number of page links displayed adjacent to the current page using the sibling-count prop. Reduced from the default of 2 to 1 in this example.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pagination.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<Pagination v-model:page=\"page\" :sibling-count=\"1\" :total=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Transitions in Nuxt UI Theme\nDESCRIPTION: Configuration for disabling transitions on Nuxt UI components. Transitions are enabled by default and add the transition-colors class to components with hover or active states.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui'],\n  css: ['~/assets/css/main.css'],\n  ui: {\n    theme: {\n      transitions: false\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Container Component Example Configuration\nDESCRIPTION: YAML configuration for demonstrating the Container component usage example with full width styling.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/container.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'container-example'\nprops:\n  class: 'w-full'\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Default Value in Vue/Nuxt\nDESCRIPTION: This snippet shows how to set the initial value of the Checkbox using the `default-value` prop. This is useful when you don't need to directly control the checkbox state with `v-model`. It's important to note that changes to `defaultValue` after initial render will not affect the checkbox.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/checkbox.md#_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n---\nignore:\n  - defaultValue\nprops:\n  defaultValue: true\n---\n```\n\n----------------------------------------\n\nTITLE: Passing Props to Overlay Component in Vue.js\nDESCRIPTION: Illustrates how to pass props to an overlay component using the new useOverlay composable.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ModalExampleComponent } from '#components'\n\n- const modal = useModal()\n+ const overlay = useOverlay()\n\nconst count = ref(0)\n\n- modal.open(ModalExampleComponent, {\n-   count: count.value\n- })\n+ const modal = overlay.create(ModalExampleComponent, {\n+   props: {\n+     count: count.value\n+   }\n+ })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Colors in Nuxt UI\nDESCRIPTION: Configuration for defining the dynamic color aliases used for component themes. The default includes primary, secondary, success, info, warning, and error.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/1.nuxt.md#2025-04-21_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui'],\n  css: ['~/assets/css/main.css'],\n  ui: {\n    theme: {\n      colors: ['primary', 'error']\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabled PinInput\nDESCRIPTION: Renders a disabled PinInput component that prevents user interaction.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/pin-input.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UPinInput :disabled=\"true\" placeholder=\"○\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Linking Nuxt UI CLI\nDESCRIPTION: Command to link the Nuxt UI CLI to the global environment, allowing access to the `nuxt-ui make` command for generating components and locales.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Basic Locale Implementation with Nuxt UI Pro\nDESCRIPTION: Shows how to set up basic locale configuration using the @nuxt/ui-pro package's built-in French locale.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { fr } from '@nuxt/ui-pro/locale'\n</script>\n\n<template>\n  <UApp :locale=\"fr\">\n    <NuxtPage />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disable Transitions in vite.config.ts\nDESCRIPTION: This code disables transitions on components within the Nuxt UI theme configuration. Setting `theme.transitions` to `false` removes the `transition-colors` class from components, preventing hover or active states from having animated color changes. This can improve performance or be desired for specific design requirements.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport ui from '@nuxt/ui/vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    ui({\n      theme: {\n        transitions: false\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Continuous Release Version of Nuxt UI\nDESCRIPTION: This shows how to replace the package version of @nuxt/ui in your package.json with a specific commit hash to use a continuous preview release. This allows developers to access the latest features and bug fixes without waiting for official releases.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.installation/2.vue.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n-   \"@nuxt/ui\": \"^3.0.0\",\n+   \"@nuxt/ui\": \"https://pkg.pr.new/@nuxt/ui@4c96909\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SCSS: Radius Theme Generation\nDESCRIPTION: This SCSS snippet shows how the `@theme` is generated for each radius value based on the base `--ui-radius` variable. It defines the different radius sizes (`--radius-xs`, `--radius-sm`, etc.) as calculations based on the base radius.  This allows Tailwind CSS to utilize these values.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/3.theme.md#_snippet_24\n\nLANGUAGE: scss\nCODE:\n```\n@theme default {\n  --radius-xs: calc(var(--ui-radius) * 0.5);    /* 0.125rem */\n  --radius-sm: var(--ui-radius);                /* 0.25rem */\n  --radius-md: calc(var(--ui-radius) * 1.5);    /* 0.375rem */\n  --radius-lg: calc(var(--ui-radius) * 2);      /* 0.5rem */\n  --radius-xl: calc(var(--ui-radius) * 3);      /* 0.75rem */\n  --radius-2xl: calc(var(--ui-radius) * 4);     /* 1rem */\n  --radius-3xl: calc(var(--ui-radius) * 6);     /* 1.5rem */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CSS and Importing in Nuxt Config for Tailwind CSS v4\nDESCRIPTION: Create a main.css file to import Tailwind CSS and then reference it in the Nuxt configuration file to prepare for Tailwind CSS v4 migration.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  css: ['~/assets/css/main.css']\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Component Documentation Structure in Markdown\nDESCRIPTION: This snippet presents the structure for documenting a UI component's props, slots, emits, and theme. It uses custom placeholders that likely get replaced with actual component details during documentation generation.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/tree.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Props\n\n:component-props\n\n### Slots\n\n:component-slots\n\n### Emits\n\n:component-emits\n\n## Theme\n\n:component-theme\n```\n\n----------------------------------------\n\nTITLE: Nuxt I18n Configuration\nDESCRIPTION: Configuration setup for @nuxtjs/i18n module in nuxt.config.ts including locale definitions.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    '@nuxt/ui',\n    '@nuxtjs/i18n'\n  ],\n  css: ['~/assets/css/main.css'],\n  i18n: {\n    locales: [{\n      code: 'de',\n      name: 'Deutsch'\n    }, {\n      code: 'en',\n      name: 'English'\n    }, {\n      code: 'fr',\n      name: 'Français'\n    }]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Components with Nuxt UI CLI\nDESCRIPTION: Command syntax for creating new components using the Nuxt UI CLI, with available options for creating different types of components.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnuxt-ui make component <name> [options]\n```\n\n----------------------------------------\n\nTITLE: Large Size Separator in Vue\nDESCRIPTION: Example showing how to increase the Separator's size. The size prop is set to 'lg' to make the separator larger than the default 'xs' size.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/separator.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n::component-code\n---\nclass: 'p-8'\nprops:\n  size: lg\n---\n::\n```\n\n----------------------------------------\n\nTITLE: Configuring Fonts in Nuxt UI Pro CSS\nDESCRIPTION: CSS configuration for setting up fonts in a Nuxt UI Pro application. Imports required dependencies and defines the sans-serif font family using Public Sans.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/5.fonts.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n@import \"@nuxt/ui-pro\";\n\n@theme {\n  --font-sans: 'Public Sans', sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Keyboard Key Usage with Default Slot\nDESCRIPTION: Shows how to use the Kbd component with a default slot to display a simple keyboard key.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/3.components/kbd.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n---\nslots:\n  default: K\n---\n```\n\n----------------------------------------\n\nTITLE: Dynamic Direction and Language Attributes\nDESCRIPTION: Implementation of dynamic HTML direction and language attributes using useHead composable.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/7.i18n/1.nuxt.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport * as locales from '@nuxt/ui/locale'\n\nconst { locale } = useI18n()\n\nconst lang = computed(() => locales[locale.value].code)\nconst dir = computed(() => locales[locale.value].dir)\n\nuseHead({\n  htmlAttrs: {\n    lang,\n    dir\n  }\n})\n</script>\n\n<template>\n  <UApp :locale=\"locales[locale]\">\n    <NuxtPage />\n  </UApp>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Nuxt UI Repository\nDESCRIPTION: Command to clone the Nuxt UI repository to your local machine from GitHub, specifying the v3 branch.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit clone -b v3 https://github.com/nuxt/ui.git\n```\n\n----------------------------------------\n\nTITLE: Restructuring Modal Content in Vue.js\nDESCRIPTION: Illustrates the new structure for modal content, using the default slot for the trigger and a #content slot for the content.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/2.migration.md#2025-04-23_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n<script setup lang=\"ts\">\n- const open = ref(false)\n</script>\n\n<template>\n- <UButton label=\"Open\" @click=\"open = true\" />\n\n- <UModal v-model=\"open\">\n+ <UModal>\n+   <UButton label=\"Open\" />\n\n+   <template #content>\n      <div class=\"p-4\">\n        <Placeholder class=\"h-48\" />\n      </div>\n+   </template>\n  </UModal>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Nuxt UI\nDESCRIPTION: Commands to run tests for both Nuxt and Vue components in the Nuxt UI project before submitting a pull request.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\npnpm run test # for Nuxt\npnpm run test:vue # for Vue\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt UI with npm\nDESCRIPTION: This command installs the `@nuxt/ui` package using the npm package manager. It adds Nuxt UI as a dependency to your project.\nSOURCE: https://github.com/nuxt/ui/blob/v3/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @nuxt/ui\n```\n\n----------------------------------------\n\nTITLE: Running Linting Checks for Nuxt UI\nDESCRIPTION: Commands to check for linting errors and fix them in the Nuxt UI codebase using ESLint.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\npnpm run lint # check for linting errors\npnpm run lint:fix # fix linting errors\n```\n\n----------------------------------------\n\nTITLE: Testing Nuxt Components in Playground\nDESCRIPTION: Command to run the development server for testing Nuxt components using the playground.\nSOURCE: https://github.com/nuxt/ui/blob/v3/docs/content/1.getting-started/contribution.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```"
  }
]